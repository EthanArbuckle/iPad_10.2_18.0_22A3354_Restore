void sub_100081B00(double a1, double a2, double a3, double a4)
{
  void *v4;
  void *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  __n128 v15;
  char v16;
  uint64_t v17;
  char *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  char *v31;
  double *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[3];
  uint64_t v37;

  v5 = v4;
  v10 = type metadata accessor for DispatchPredicate(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (uint64_t *)((char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v14 = static OS_dispatch_queue.main.getter(v15);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v11 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v10);
  v16 = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(_QWORD *, uint64_t))(v11 + 8))(v14, v10);
  if ((v16 & 1) != 0)
  {
    if (qword_100315888 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315888, sub_1000D97B0);
LABEL_3:
  v17 = type metadata accessor for Logger(0);
  sub_10000D744(v17, (uint64_t)qword_10033FE50);
  v18 = v5;
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(22, -1);
    v22 = (_QWORD *)swift_slowAlloc(8, -1);
    v23 = swift_slowAlloc(32, -1);
    v37 = v23;
    *(_DWORD *)v21 = 138543618;
    v35 = (uint64_t)v18;
    v24 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v21 + 4, v21 + 12);
    *v22 = v18;

    *(_WORD *)(v21 + 12) = 2082;
    v35 = *(_QWORD *)&a1;
    *(double *)v36 = a2;
    *(double *)&v36[1] = a3;
    *(double *)&v36[2] = a4;
    type metadata accessor for CGRect(0);
    v27 = String.init<A>(describing:)(&v35, v25, v26);
    v29 = v28;
    v35 = sub_100172BEC(v27, v28, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "updateLayout for '%{public}@' update layout with safe bounds: %{public}s", (uint8_t *)v21, 0x16u);
    v30 = sub_100003DB8(&qword_1003178F0);
    swift_arrayDestroy(v22, 1, v30);
    swift_slowDealloc(v22, -1, -1);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

  }
  v31 = *(char **)&v18[OBJC_IVAR____TtC8SOSBuddy24LockScreenViewController_contentView];
  if (v31)
  {
    v32 = (double *)&v31[qword_10032ABD8];
    *v32 = a1;
    v32[1] = a2;
    v32[2] = a3;
    v32[3] = a4;
    v33 = v31;
    sub_100083204();

  }
  else
  {
    __break(1u);
  }
}

void sub_100081FC8(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __n128 v9;
  char v10;
  uint64_t v11;
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v8 = static OS_dispatch_queue.main.getter(v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v10 & 1) != 0)
  {
    if (qword_100315888 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315888, sub_1000D97B0);
LABEL_3:
  v11 = type metadata accessor for Logger(0);
  sub_10000D744(v11, (uint64_t)qword_10033FE50);
  v12 = v2;
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(8, -1);
    v25 = a1;
    v17 = (_QWORD *)v16;
    v18 = swift_slowAlloc(32, -1);
    v26 = (uint64_t)v12;
    v27 = v18;
    *(_DWORD *)v15 = 138543618;
    v19 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v15 + 4, v15 + 12);
    *v17 = v12;

    *(_WORD *)(v15 + 12) = 2082;
    v26 = v25;
    v20 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
    v22 = v21;
    v26 = sub_100172BEC(v20, v21, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%{public}@] did dismiss, type: %{public}s", (uint8_t *)v15, 0x16u);
    v23 = sub_100003DB8(&qword_1003178F0);
    swift_arrayDestroy(v17, 1, v23);
    swift_slowDealloc(v17, -1, -1);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

  }
}

void sub_1000822E8()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t inited;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  Class isa;
  id v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  NSObject **v27;
  NSObject *v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  _BYTE v32[176];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    v9 = sub_100003DB8(&qword_10031B850);
    inited = swift_initStackObject(v9, v32);
    *(_OWORD *)(inited + 16) = xmmword_100251620;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(SBSRemoteContentPreferencesDateTimeStyleKey);
    *(_QWORD *)(inited + 40) = v11;
    *(NSNumber *)(inited + 48) = Int._bridgeToObjectiveC()();
    *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(SBSRemoteContentPreferencesBackgroundStyleKey);
    *(_QWORD *)(inited + 64) = v12;
    *(NSNumber *)(inited + 72) = Int._bridgeToObjectiveC()();
    *(_QWORD *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(SBSRemoteContentPreferencesReducesWhitePointKey);
    *(_QWORD *)(inited + 88) = v13;
    *(NSNumber *)(inited + 96) = Bool._bridgeToObjectiveC()();
    *(_QWORD *)(inited + 104) = static String._unconditionallyBridgeFromObjectiveC(_:)(SBSRemoteContentPreferencesHomeGestureModeKey);
    *(_QWORD *)(inited + 112) = v14;
    *(NSNumber *)(inited + 120) = Int._bridgeToObjectiveC()();
    *(_QWORD *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)(SBSRemoteContentPreferencesSuppressesNotificationsKey);
    *(_QWORD *)(inited + 136) = v15;
    *(NSNumber *)(inited + 144) = Bool._bridgeToObjectiveC()();
    *(_QWORD *)(inited + 152) = static String._unconditionallyBridgeFromObjectiveC(_:)(SBSRemoteContentPreferencesSuppressesBottomEdgeContentKey);
    *(_QWORD *)(inited + 160) = v16;
    sub_10006477C(0, (unint64_t *)&unk_10032B1C0, NSNumber_ptr);
    *(NSNumber *)(inited + 168) = NSNumber.init(BOOLeanLiteral:)(0);
    v17 = sub_100224F6C(inited);
    v18 = objc_allocWithZone((Class)SBSRemoteContentPreferences);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    v20 = objc_msgSend(v18, "initWithConfiguration:", isa, swift_bridgeObjectRelease(v17).n128_f64[0]);

    v21 = *(void **)&v1[OBJC_IVAR____TtC8SOSBuddy24LockScreenViewController_contentPreferences];
    *(_QWORD *)&v1[OBJC_IVAR____TtC8SOSBuddy24LockScreenViewController_contentPreferences] = v20;

    if (qword_100315888 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315888, sub_1000D97B0);
LABEL_3:
  v22 = type metadata accessor for Logger(0);
  sub_10000D744(v22, (uint64_t)qword_10033FE50);
  v23 = v1;
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v26 = 138543362;
    v31 = v23;
    v28 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v26 + 4, v26 + 12);
    *v27 = v23;

    _os_log_impl((void *)&_mh_execute_header, v24, v25, "[%{public}@] updateContentPreferences", v26, 0xCu);
    v29 = sub_100003DB8(&qword_1003178F0);
    swift_arrayDestroy(v27, 1, v29);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);
  }
  else
  {

    v24 = v23;
  }

}

uint64_t sub_10008268C()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  id v10;
  uint64_t v11;

  if (qword_100315888 != -1)
    swift_once(&qword_100315888, sub_1000D97B0);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FE50);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    v10 = v2;
    v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
    *v6 = v2;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}@] _shouldRemoveViewFromHierarchyOnDisappear", v5, 0xCu);
    v8 = sub_100003DB8(&qword_1003178F0);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 0;
}

uint64_t sub_10008284C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = v0;
  if (qword_100315888 != -1)
    swift_once(&qword_100315888, sub_1000D97B0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FE50);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = _typeName(_:qualified:)(v1, 0);
    v10 = v9;
    v12 = sub_100172BEC(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%{public}s] _isSecureForRemoteViewService", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  return 1;
}

uint64_t sub_1000829EC()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  id v10;
  uint64_t v11;

  if (qword_100315888 != -1)
    swift_once(&qword_100315888, sub_1000D97B0);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FE50);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    v10 = v2;
    v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
    *v6 = v2;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}@] _canShowWhileLocked", v5, 0xCu);
    v8 = sub_100003DB8(&qword_1003178F0);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 1;
}

id sub_100082BAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = v0;
  if (qword_100315888 != -1)
    swift_once(&qword_100315888, sub_1000D97B0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FE50);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = _typeName(_:qualified:)(v1, 0);
    v10 = v9;
    v12 = sub_100172BEC(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%{public}s] _remoteViewControllerInterface", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  return objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___SBSRemoteContentHostInterface);
}

uint64_t sub_100082D6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t inited;
  _QWORD *v13;
  id v14;
  Class isa;
  id v16;
  uint64_t v17;
  id v18;
  Class v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[56];

  v1 = v0;
  if (qword_100315888 != -1)
    swift_once(&qword_100315888, sub_1000D97B0);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FE50);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v22 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = _typeName(_:qualified:)(v1, 0);
    v10 = v9;
    v21 = sub_100172BEC(v8, v9, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%{public}s] _exportedInterface", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  v11 = sub_100083670();
  inited = swift_initStackObject(v11, v23);
  *(_OWORD *)(inited + 16) = xmmword_10024FB80;
  *(_QWORD *)(inited + 32) = sub_10006477C(0, &qword_10031BB28, NSArray_ptr);
  *(_QWORD *)(inited + 40) = sub_10006477C(0, &qword_10031BB30, NSDictionary_ptr);
  *(_QWORD *)(inited + 48) = sub_10006477C(0, (unint64_t *)&qword_100319FD0, NSString_ptr);
  v13 = sub_1000ECBC8(inited);
  swift_setDeallocating(inited);
  v14 = objc_allocWithZone((Class)NSSet);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v14, "initWithArray:", isa, swift_bridgeObjectRelease(v13).n128_f64[0]);

  v22 = 0;
  static Set._conditionallyBridgeFromObjectiveC(_:result:)(v16, &v22, &type metadata for AnyHashable, &protocol witness table for AnyHashable);

  v17 = v22;
  if (v22)
  {
    v18 = objc_msgSend((id)objc_opt_self(NSXPCInterface), "interfaceWithProtocol:", &OBJC_PROTOCOL___SBSRemoteContentServiceInterface);
    v19 = Set._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v18, "setClasses:forSelector:argumentIndex:ofReply:", v19, "configureWithUserInfo:contentBounds:endpoint:", 0, 0, swift_bridgeObjectRelease(v17).n128_f64[0]);

    objc_msgSend(v18, "setXPCType:forSelector:argumentIndex:ofReply:", &_xpc_type_dictionary, "configureWithUserInfo:contentBounds:endpoint:", 1, 0);
    objc_msgSend(v18, "setXPCType:forSelector:argumentIndex:ofReply:", &_xpc_type_endpoint, "configureWithUserInfo:contentBounds:endpoint:", 2, 0);
    return (uint64_t)v18;
  }
  else
  {
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD00000000000002DLL, 0x80000001002670D0, "SOSBuddy/LockScreenViewController.swift", 39, 2, 199, 0);
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for LockScreenViewController()
{
  return objc_opt_self(_TtC8SOSBuddy24LockScreenViewController);
}

double sub_10008315C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  double v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = v0 + qword_10032ABD0;
  if ((*(_BYTE *)(v1 + 32) & 1) == 0)
    return *(double *)v1;
  v2 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v2, "_referenceBounds");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;

  *(double *)v1 = v4;
  *(_QWORD *)(v1 + 8) = v6;
  *(_QWORD *)(v1 + 16) = v8;
  *(_QWORD *)(v1 + 24) = v10;
  *(_BYTE *)(v1 + 32) = 0;
  return v4;
}

void sub_100083204()
{
  char *v0;
  void *v1;
  CGRect *v2;
  void *v3;
  id v4;
  double v5;
  id v6;
  id v7;

  v1 = *(void **)&v0[qword_10032ABE0];
  if (!v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = (CGRect *)&v0[qword_10032ABD8];
  objc_msgSend(v1, "setConstant:", *(double *)&v0[qword_10032ABD8 + 8]);
  v3 = *(void **)&v0[qword_10032ABE8];
  if (!v3)
  {
LABEL_7:
    __break(1u);
    return;
  }
  v4 = v3;
  sub_10008315C();
  objc_msgSend(v4, "setConstant:", v5 - CGRectGetMaxY(*v2));

  v6 = objc_msgSend(*(id *)&v0[qword_10032ABF0], "view");
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v0, "bounds");
    objc_msgSend(v7, "setFrame:");

  }
}

void sub_100083310()
{
  char *v0;
  id v1;
  id v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double Width;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  _QWORD *v25;
  void *v26;
  double v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  uint64_t v37;
  Class isa;
  CGRect v39;

  v1 = objc_msgSend(objc_allocWithZone((Class)UILayoutGuide), "init");
  objc_msgSend(v0, "addLayoutGuide:", v1);
  v2 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
  objc_msgSend(v2, "_referenceBounds");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;

  v39.origin.x = v4;
  v39.origin.y = v6;
  v39.size.width = v8;
  v39.size.height = v10;
  Width = CGRectGetWidth(v39);
  v12 = objc_msgSend(v1, "topAnchor");
  v13 = objc_msgSend(v0, "topAnchor");
  v14 = objc_msgSend(v12, "constraintEqualToAnchor:", v13);

  v15 = qword_10032ABE0;
  v16 = *(void **)&v0[qword_10032ABE0];
  *(_QWORD *)&v0[qword_10032ABE0] = v14;

  v17 = objc_msgSend(v0, "bottomAnchor");
  v18 = objc_msgSend(v1, "bottomAnchor");
  v19 = objc_msgSend(v17, "constraintEqualToAnchor:", v18);

  v20 = qword_10032ABE8;
  v21 = *(void **)&v0[qword_10032ABE8];
  *(_QWORD *)&v0[qword_10032ABE8] = v19;

  v22 = sub_100003DB8(&qword_100328A00);
  v23 = swift_allocObject(v22, 64, 7);
  *(_OWORD *)(v23 + 16) = xmmword_100251630;
  v24 = *(void **)&v0[v15];
  if (!v24)
  {
    __break(1u);
    goto LABEL_8;
  }
  v25 = (_QWORD *)v23;
  *(_QWORD *)(v23 + 32) = v24;
  v26 = *(void **)&v0[v20];
  if (!v26)
  {
LABEL_8:
    __break(1u);
    return;
  }
  if (Width < 414.0)
    v27 = 46.0;
  else
    v27 = 51.0;
  v28 = (void *)objc_opt_self(NSLayoutConstraint);
  v25[5] = v26;
  v29 = v24;
  v30 = v26;
  v31 = objc_msgSend(v1, "leadingAnchor");
  v32 = objc_msgSend(v0, "leadingAnchor");
  v33 = objc_msgSend(v31, "constraintEqualToAnchor:constant:", v32, v27);

  v25[6] = v33;
  v34 = objc_msgSend(v1, "trailingAnchor");
  v35 = objc_msgSend(v0, "trailingAnchor");
  v36 = objc_msgSend(v34, "constraintEqualToAnchor:constant:", v35, -v27);

  v25[7] = v36;
  specialized Array._endMutation()(v37);
  sub_10006477C(0, (unint64_t *)&qword_10031BB20, NSLayoutConstraint_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v28, "activateConstraints:", isa, swift_bridgeObjectRelease(v25).n128_f64[0]);

}

uint64_t sub_100083670()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;

  v0 = sub_100003DB8(&qword_10031BB38);
  if (swift_isClassType())
    v1 = v0;
  else
    v1 = 0;
  if (v1)
    v2 = &qword_100328A00;
  else
    v2 = (uint64_t *)&unk_10031BB40;
  return sub_100003DB8(v2);
}

void sub_1000836BC()
{
  char *v0;
  uint64_t v1;

  v1 = OBJC_IVAR____TtC8SOSBuddy24LockScreenViewController_tapGesture;
  *(_QWORD *)&v0[v1] = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "init");
  *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy24LockScreenViewController_contentView] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy24LockScreenViewController_cornerRadius] = 0x4030000000000000;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy24LockScreenViewController_contentPreferences] = 0;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100260900, "SOSBuddy/LockScreenViewController.swift", 39, 2, 37, 0);
  __break(1u);
}

char *sub_100083768(uint64_t a1)
{
  char *v1;
  char *v3;
  char *v4;
  char *v5;
  char *v6;
  void *v7;
  char *v8;
  id v9;
  void *v10;
  id v11;
  objc_super v13;
  uint64_t v14;

  v3 = &v1[qword_10032ABD0];
  *(_OWORD *)v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  v3[32] = 1;
  v4 = &v1[qword_10032ABD8];
  *(_OWORD *)v4 = 0u;
  *((_OWORD *)v4 + 1) = 0u;
  *(_QWORD *)&v1[qword_10032ABE0] = 0;
  *(_QWORD *)&v1[qword_10032ABE8] = 0;
  objc_allocWithZone((Class)sub_100003DB8(&qword_10031BB18));
  v14 = a1;
  swift_retain(a1);
  v5 = v1;
  *(_QWORD *)&v5[qword_10032ABF0] = UIHostingController.init(rootView:)(&v14);

  v13.receiver = v5;
  v13.super_class = (Class)sub_100003DB8(&qword_10031BB10);
  v6 = (char *)objc_msgSendSuper2(&v13, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  v7 = *(void **)&v6[qword_10032ABF0];
  v8 = v6;
  v9 = objc_msgSend(v7, "view");
  if (v9)
  {
    v10 = v9;
    v11 = objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
    objc_msgSend(v10, "setBackgroundColor:", v11);

    objc_msgSend(v8, "addSubview:", v10);
  }
  sub_100083310();

  return v8;
}

void sub_1000838E0(uint64_t a1)
{
  void *v1;
  double v2;
  double v3;
  double v4;
  double v5;
  void *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v13;
  char v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;

  v6 = v1;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v12 = static OS_dispatch_queue.main.getter(v13);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v14 & 1) != 0)
  {
    v2 = BSDeserializeCGRectFromXPCDictionaryWithKey(a1, "bounds");
    v3 = v15;
    v4 = v16;
    v5 = v17;
    if (qword_100315888 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315888, sub_1000D97B0);
LABEL_3:
  v18 = type metadata accessor for Logger(0);
  sub_10000D744(v18, (uint64_t)qword_10033FE50);
  v19 = v6;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = swift_slowAlloc(22, -1);
    v23 = (_QWORD *)swift_slowAlloc(8, -1);
    v24 = swift_slowAlloc(32, -1);
    v35 = v24;
    *(_DWORD *)v22 = 138543618;
    v33 = (uint64_t)v19;
    v25 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v22 + 4, v22 + 12);
    *v23 = v19;

    *(_WORD *)(v22 + 12) = 2082;
    v33 = *(_QWORD *)&v2;
    *(double *)v34 = v3;
    *(double *)&v34[1] = v4;
    *(double *)&v34[2] = v5;
    type metadata accessor for CGRect(0);
    v28 = String.init<A>(describing:)(&v33, v26, v27);
    v30 = v29;
    v33 = sub_100172BEC(v28, v29, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, v34, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "[%{public}@] configure with userInfo: ?, bounds: %{public}s endpoint: ?", (uint8_t *)v22, 0x16u);
    v31 = sub_100003DB8(&qword_1003178F0);
    swift_arrayDestroy(v23, 1, v31);
    swift_slowDealloc(v23, -1, -1);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v22, -1, -1);

  }
  else
  {

  }
  sub_100081B00(v2, v3, v4, v5);
}

unint64_t sub_100083BE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B860;
  if (!qword_10031B860)
  {
    v1 = sub_100007FAC(&qword_10031B858);
    sub_100083C54();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B860);
  }
  return result;
}

unint64_t sub_100083C54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B868;
  if (!qword_10031B868)
  {
    v1 = sub_100007FAC(&qword_10031B870);
    sub_100083CD8();
    sub_1000084FC(&qword_10031BB00, &qword_10031BB08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B868);
  }
  return result;
}

unint64_t sub_100083CD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B878;
  if (!qword_10031B878)
  {
    v1 = sub_100007FAC(&qword_10031B880);
    sub_100083D5C();
    sub_1000084FC(&qword_10031BAF0, &qword_10031BAF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B878);
  }
  return result;
}

unint64_t sub_100083D5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B888;
  if (!qword_10031B888)
  {
    v1 = sub_100007FAC(&qword_10031B890);
    sub_100083DE0();
    sub_1000084FC(&qword_10031BAE0, &qword_10031BAE8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B888);
  }
  return result;
}

unint64_t sub_100083DE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B898;
  if (!qword_10031B898)
  {
    v1 = sub_100007FAC(&qword_10031B8A0);
    sub_100083E64();
    sub_1000084FC(&qword_10031BAD0, &qword_10031BAD8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B898);
  }
  return result;
}

unint64_t sub_100083E64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B8A8;
  if (!qword_10031B8A8)
  {
    v1 = sub_100007FAC(&qword_10031B8B0);
    sub_100083EE8();
    sub_1000084FC(&qword_10031BAC0, &qword_10031BAC8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B8A8);
  }
  return result;
}

unint64_t sub_100083EE8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B8B8;
  if (!qword_10031B8B8)
  {
    v1 = sub_100007FAC(&qword_10031B8C0);
    sub_100083F6C();
    sub_1000084FC(&qword_10031BAB0, &qword_10031BAB8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B8B8);
  }
  return result;
}

unint64_t sub_100083F6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B8C8;
  if (!qword_10031B8C8)
  {
    v1 = sub_100007FAC(&qword_10031B8D0);
    sub_100083FF0();
    sub_1000084FC(&qword_10031BAA0, &qword_10031BAA8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B8C8);
  }
  return result;
}

unint64_t sub_100083FF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B8D8;
  if (!qword_10031B8D8)
  {
    v1 = sub_100007FAC(&qword_10031B8E0);
    sub_100084074();
    sub_1000084FC(&qword_10031BA90, &qword_10031BA98, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B8D8);
  }
  return result;
}

unint64_t sub_100084074()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B8E8;
  if (!qword_10031B8E8)
  {
    v1 = sub_100007FAC(&qword_10031B8F0);
    sub_1000840F8();
    sub_1000084FC(&qword_10031BA80, &qword_10031BA88, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B8E8);
  }
  return result;
}

unint64_t sub_1000840F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B8F8;
  if (!qword_10031B8F8)
  {
    v1 = sub_100007FAC(&qword_10031B900);
    sub_10008417C();
    sub_1000084FC(&qword_10031BA70, &qword_10031BA78, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B8F8);
  }
  return result;
}

unint64_t sub_10008417C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B908;
  if (!qword_10031B908)
  {
    v1 = sub_100007FAC(&qword_10031B910);
    sub_100084200();
    sub_1000084FC(&qword_10031BA60, &qword_10031BA68, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B908);
  }
  return result;
}

unint64_t sub_100084200()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B918;
  if (!qword_10031B918)
  {
    v1 = sub_100007FAC(&qword_10031B920);
    sub_100084284();
    sub_1000084FC(&qword_10031BA50, &qword_10031BA58, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B918);
  }
  return result;
}

unint64_t sub_100084284()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B928;
  if (!qword_10031B928)
  {
    v1 = sub_100007FAC(&qword_10031B930);
    sub_100084308();
    sub_1000084FC(&qword_10031BA40, &qword_10031BA48, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B928);
  }
  return result;
}

unint64_t sub_100084308()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B938;
  if (!qword_10031B938)
  {
    v1 = sub_100007FAC(&qword_10031B940);
    sub_10008438C();
    sub_1000084FC(&qword_10031BA30, &qword_10031BA38, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B938);
  }
  return result;
}

unint64_t sub_10008438C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B948;
  if (!qword_10031B948)
  {
    v1 = sub_100007FAC(&qword_10031B950);
    sub_100084410();
    sub_1000084FC(&qword_10031BA20, &qword_10031BA28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B948);
  }
  return result;
}

unint64_t sub_100084410()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B958;
  if (!qword_10031B958)
  {
    v1 = sub_100007FAC(&qword_10031B960);
    sub_100084494();
    sub_1000084FC(&qword_10031BA10, &qword_10031BA18, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B958);
  }
  return result;
}

unint64_t sub_100084494()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B968;
  if (!qword_10031B968)
  {
    v1 = sub_100007FAC(&qword_10031B970);
    sub_100084518();
    sub_1000084FC(&qword_10031BA00, &qword_10031BA08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B968);
  }
  return result;
}

unint64_t sub_100084518()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B978;
  if (!qword_10031B978)
  {
    v1 = sub_100007FAC(&qword_10031B980);
    sub_10008459C();
    sub_1000084FC(&qword_10031B9F0, &qword_10031B9F8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B978);
  }
  return result;
}

unint64_t sub_10008459C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B988;
  if (!qword_10031B988)
  {
    v1 = sub_100007FAC(&qword_10031B990);
    sub_100084620();
    sub_1000084FC(&qword_10031B9E0, &qword_10031B9E8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B988);
  }
  return result;
}

unint64_t sub_100084620()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B998;
  if (!qword_10031B998)
  {
    v1 = sub_100007FAC(&qword_10031B9A0);
    sub_1000846A4();
    sub_1000084FC(&qword_10031B9D0, &qword_10031B9D8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B998);
  }
  return result;
}

unint64_t sub_1000846A4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B9A8;
  if (!qword_10031B9A8)
  {
    v1 = sub_100007FAC(&qword_10031B9B0);
    sub_100084728();
    sub_1000084FC(&qword_10031B9C0, &qword_10031B9C8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B9A8);
  }
  return result;
}

unint64_t sub_100084728()
{
  unint64_t result;

  result = qword_10031B9B8;
  if (!qword_10031B9B8)
  {
    result = swift_getWitnessTable(&unk_100257BE4, &type metadata for ConnectionAssistantLockScreenView);
    atomic_store(result, (unint64_t *)&qword_10031B9B8);
  }
  return result;
}

BOOL sub_10008476C()
{
  uint64_t v0;

  if (*(_QWORD *)(*(_QWORD *)(v0 + 56) + 16))
    return 0;
  if (*(_BYTE *)(v0 + 32) == 2)
    return 0;
  return *(_BYTE *)(v0 + 64) != 6;
}

uint64_t sub_1000847A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v10;
  __int128 v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  unint64_t v32;
  char v33;
  uint64_t *v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  _QWORD *v58;

  v7 = v6;
  v8 = (unint64_t)v5;
  isUniquelyReferenced_nonNull_native = a5;
  v10 = (_QWORD *)*v5;
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  v11 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)a3;
  *(_OWORD *)(v8 + 48) = v11;
  v12 = *(__n128 *)(a3 + 32);
  *(__n128 *)(v8 + 64) = v12;
  *(_BYTE *)(v8 + 80) = *(_BYTE *)(a3 + 48);
  *(_QWORD *)(v8 + 88) = a4;
  *(_QWORD *)(v8 + 96) = a5;
  if (a5 >> 62)
  {
LABEL_42:
    if (isUniquelyReferenced_nonNull_native < 0)
      v49 = isUniquelyReferenced_nonNull_native;
    else
      v49 = isUniquelyReferenced_nonNull_native & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(isUniquelyReferenced_nonNull_native, 3, v12);
    v13 = _CocoaArrayWrapper.endIndex.getter(v49);
    swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
    if (v13)
      goto LABEL_3;
LABEL_46:
    v41 = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
    *(_QWORD *)(v8 + 104) = &_swiftEmptyDictionarySingleton;
    swift_bridgeObjectRelease(isUniquelyReferenced_nonNull_native);
LABEL_47:
    *(_QWORD *)(v8 + 112) = v41;
    sub_100101104();
    if (v7)
      swift_release(v8);
    return v8;
  }
  v13 = *(_QWORD *)((a5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n(a5, 2, v12);
  if (!v13)
    goto LABEL_46;
LABEL_3:
  v51 = v7;
  v52 = v10;
  v53 = v8;
  v55 = isUniquelyReferenced_nonNull_native & 0xC000000000000001;
  v10 = &_swiftEmptyDictionarySingleton;
  v7 = 4;
  v54 = isUniquelyReferenced_nonNull_native;
  do
  {
    v15 = v7 - 4;
    if (v55)
    {
      v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, isUniquelyReferenced_nonNull_native);
      v17 = v7 - 3;
      if (__OFADD__(v15, 1))
        goto LABEL_38;
    }
    else
    {
      v16 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8 * v7);
      v12 = swift_retain(v16);
      v17 = v7 - 3;
      if (__OFADD__(v15, 1))
      {
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
    }
    if (v10[2])
    {
      v19 = *(_QWORD *)(v16 + 16);
      v18 = *(_QWORD *)(v16 + 24);
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRetain(v18);
      sub_10017D3B0(v19, v18);
      v21 = v20;
      swift_bridgeObjectRelease(v10);
      swift_bridgeObjectRelease(v18);
      if ((v21 & 1) != 0)
      {
        v43 = *(_QWORD *)(v16 + 16);
        v42 = *(_QWORD *)(v16 + 24);
        v44 = sub_10008BA68();
        swift_allocError(&type metadata for QuestionnaireError, v44, 0, 0);
        *(_QWORD *)v45 = v43;
        *(_QWORD *)(v45 + 8) = v42;
        *(_QWORD *)(v45 + 16) = 0;
        *(_QWORD *)(v45 + 24) = 0;
        *(_BYTE *)(v45 + 32) = 1;
        swift_bridgeObjectRetain(v42);
        swift_willThrow(v46);
        swift_bridgeObjectRelease_n(isUniquelyReferenced_nonNull_native, 2);
        swift_release(v16);
        swift_bridgeObjectRelease(v10);
        v47 = 0;
        v8 = v53;
        goto LABEL_35;
      }
    }
    v56 = (_QWORD *)v17;
    v22 = (_QWORD *)v13;
    v23 = v16;
    v24 = *(_QWORD *)(v16 + 16);
    v25 = v23;
    v26 = *(_QWORD *)(v23 + 24);
    swift_bridgeObjectRetain(v26);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
    v58 = v10;
    v8 = sub_10017D3B0(v24, v26);
    v28 = v10[2];
    v29 = (v27 & 1) == 0;
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
      goto LABEL_39;
    v31 = v27;
    if (v10[3] >= v30)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        v10 = v58;
        if ((v27 & 1) != 0)
          goto LABEL_4;
      }
      else
      {
        sub_10008B8B4();
        v10 = v58;
        if ((v31 & 1) != 0)
          goto LABEL_4;
      }
    }
    else
    {
      sub_100088F50(v30, isUniquelyReferenced_nonNull_native);
      v32 = sub_10017D3B0(v24, v26);
      if ((v31 & 1) != (v33 & 1))
      {
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
        __break(1u);
        return result;
      }
      v8 = v32;
      v10 = v58;
      if ((v31 & 1) != 0)
      {
LABEL_4:
        v14 = v10[7];
        v8 *= 8;
        swift_release(*(_QWORD *)(v14 + v8));
        *(_QWORD *)(v14 + v8) = v25;
        goto LABEL_5;
      }
    }
    v10[(v8 >> 6) + 8] |= 1 << v8;
    v34 = (uint64_t *)(v10[6] + 16 * v8);
    *v34 = v24;
    v34[1] = v26;
    *(_QWORD *)(v10[7] + 8 * v8) = v25;
    v35 = v10[2];
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
      goto LABEL_41;
    v10[2] = v37;
    swift_bridgeObjectRetain(v26);
LABEL_5:
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(0x8000000000000000);
    ++v7;
    v13 = (uint64_t)v22;
    isUniquelyReferenced_nonNull_native = v54;
  }
  while (v56 != v22);
  swift_bridgeObjectRelease(v54);
  v8 = v53;
  *(_QWORD *)(v53 + 104) = v10;
  v58 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRetain(v54);
  v38 = 4;
  v7 = v51;
  while (1)
  {
    v39 = v38 - 4;
    if (v55)
    {
      v40 = specialized _ArrayBuffer._getElementSlowPath(_:)(v38 - 4, v54);
      v36 = __OFADD__(v39, 1);
      v10 = (_QWORD *)(v38 - 3);
      if (v36)
        goto LABEL_40;
    }
    else
    {
      v40 = *(_QWORD *)(v54 + 8 * v38);
      v12 = swift_retain(v40);
      v36 = __OFADD__(v39, 1);
      v10 = (_QWORD *)(v38 - 3);
      if (v36)
        goto LABEL_40;
    }
    v57 = v40;
    sub_100084C24(&v58, &v57, v12);
    if (v51)
      break;
    swift_release(v40);
    ++v38;
    if (v10 == v22)
    {
      swift_bridgeObjectRelease_n(v54, 2);
      v41 = v58;
      goto LABEL_47;
    }
  }
  v48 = v58;
  swift_bridgeObjectRelease_n(v54, 2);
  swift_release(v40);
  swift_bridgeObjectRelease(v48);
  v47 = 1;
LABEL_35:
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + 48));
  swift_bridgeObjectRelease(*(_QWORD *)(v8 + 96));
  if (v47)
    swift_bridgeObjectRelease(*(_QWORD *)(v8 + 104));
  swift_deallocPartialClassInstance(v8, v52, 120, 7);
  return v8;
}

uint64_t sub_100084C24(_QWORD *a1, uint64_t *a2, __n128 a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _BOOL8 v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t *v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *a2;
  v3 = *(_QWORD *)(*a2 + 40);
  if ((unint64_t)v3 >> 62)
  {
LABEL_29:
    if (v3 < 0)
      v39 = v3;
    else
      v39 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain_n(v3, 2, a3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v39);
    swift_bridgeObjectRelease(v3);
    if (v4)
      goto LABEL_3;
    return swift_bridgeObjectRelease(v3);
  }
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*(_QWORD *)(v43 + 40));
  if (!v4)
    return swift_bridgeObjectRelease(v3);
LABEL_3:
  v40 = v3;
  v41 = v3 & 0xC000000000000001;
  v5 = 4;
  while (1)
  {
    v9 = v5 - 4;
    if (v41)
    {
      v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5 - 4, v3);
      v11 = v5 - 3;
      if (__OFADD__(v9, 1))
        goto LABEL_26;
    }
    else
    {
      v10 = *(_QWORD *)(v3 + 8 * v5);
      a3 = swift_retain(v10);
      v11 = v5 - 3;
      if (__OFADD__(v9, 1))
      {
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        goto LABEL_29;
      }
    }
    v12 = *a1;
    if (*(_QWORD *)(*a1 + 16))
    {
      v14 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v10 + 24);
      swift_bridgeObjectRetain(*a1);
      swift_bridgeObjectRetain(v13);
      sub_10017D3B0(v14, v13);
      v16 = v15;
      swift_bridgeObjectRelease(v12);
      swift_bridgeObjectRelease(v13);
      if ((v16 & 1) != 0)
      {
        swift_bridgeObjectRelease(v3);
        v35 = *(_QWORD *)(v10 + 16);
        v34 = *(_QWORD *)(v10 + 24);
        v36 = sub_10008BA68();
        swift_allocError(&type metadata for QuestionnaireError, v36, 0, 0);
        *(_QWORD *)v37 = v35;
        *(_QWORD *)(v37 + 8) = v34;
        *(_QWORD *)(v37 + 16) = 0;
        *(_QWORD *)(v37 + 24) = 0;
        *(_BYTE *)(v37 + 32) = 1;
        swift_bridgeObjectRetain(v34);
        swift_willThrow(v38);
        return swift_release(v10);
      }
    }
    v42 = v11;
    v17 = v4;
    v19 = *(_QWORD *)(v10 + 16);
    v18 = *(_QWORD *)(v10 + 24);
    swift_bridgeObjectRetain(v18);
    swift_retain(v43);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a1);
    v21 = (_QWORD *)*a1;
    *a1 = 0x8000000000000000;
    v23 = sub_10017D3B0(v19, v18);
    v24 = v21[2];
    v25 = (v22 & 1) == 0;
    v26 = v24 + v25;
    if (__OFADD__(v24, v25))
      goto LABEL_27;
    v3 = v22;
    if (v21[3] < v26)
      break;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
    {
      if ((v22 & 1) != 0)
        goto LABEL_4;
    }
    else
    {
      sub_10008B8B4();
      if ((v3 & 1) != 0)
      {
LABEL_4:
        v6 = v21[7];
        v7 = 8 * v23;
        swift_release(*(_QWORD *)(v6 + v7));
        *(_QWORD *)(v6 + v7) = v43;
        goto LABEL_5;
      }
    }
LABEL_20:
    v21[(v23 >> 6) + 8] |= 1 << v23;
    v29 = (uint64_t *)(v21[6] + 16 * v23);
    *v29 = v19;
    v29[1] = v18;
    *(_QWORD *)(v21[7] + 8 * v23) = v43;
    v30 = v21[2];
    v31 = __OFADD__(v30, 1);
    v32 = v30 + 1;
    if (v31)
      goto LABEL_28;
    v21[2] = v32;
    swift_bridgeObjectRetain(v18);
LABEL_5:
    v8 = *a1;
    *a1 = v21;
    swift_release(v10);
    swift_bridgeObjectRelease(v18);
    swift_bridgeObjectRelease(v8);
    ++v5;
    v4 = v17;
    v3 = v40;
    if (v42 == v17)
      return swift_bridgeObjectRelease(v40);
  }
  sub_100088F50(v26, isUniquelyReferenced_nonNull_native);
  v27 = sub_10017D3B0(v19, v18);
  if ((v3 & 1) == (v28 & 1))
  {
    v23 = v27;
    if ((v3 & 1) != 0)
      goto LABEL_4;
    goto LABEL_20;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100084F58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t, __n128);
  __n128 v9;
  _QWORD *v10;
  BOOL v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t *v21;
  char v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t result;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  BOOL v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD v59[9];
  uint64_t v60;
  _BYTE v61[32];

  v3 = *(_QWORD *)(v1 + 96);
  if ((unint64_t)v3 >> 62)
  {
LABEL_73:
    if (v3 < 0)
      v51 = v3;
    else
      v51 = v3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v3);
    v4 = _CocoaArrayWrapper.endIndex.getter(v51);
    if (v4)
      goto LABEL_3;
LABEL_77:
    v50 = v3;
LABEL_78:
    swift_bridgeObjectRelease(v50);
    return 0;
  }
  v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v3);
  if (!v4)
    goto LABEL_77;
LABEL_3:
  v5 = (uint64_t *)(a1 + 48);
  v58 = v3 & 0xC000000000000001;
  swift_beginAccess(a1 + 48, v61, 0, 0);
  v6 = 0;
  v56 = v3 & 0xFFFFFFFFFFFFFF8;
  v57 = v3;
  v55 = v3 + 32;
  v52 = a1;
  while (1)
  {
    if (v58)
    {
      v10 = (_QWORD *)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v57);
      v11 = __OFADD__(v6++, 1);
      if (v11)
        goto LABEL_71;
    }
    else
    {
      if (v6 >= *(_QWORD *)(v56 + 16))
        goto LABEL_72;
      v10 = *(_QWORD **)(v55 + 8 * v6);
      swift_retain(v10);
      v11 = __OFADD__(v6++, 1);
      if (v11)
      {
LABEL_71:
        __break(1u);
LABEL_72:
        __break(1u);
        goto LABEL_73;
      }
    }
    v3 = v4;
    sub_10008CB00(v5, (uint64_t)v59);
    v13 = v60;
    if ((unint64_t)v60 >> 62)
    {
      if (v60 < 0)
        v49 = v60;
      else
        v49 = v60 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v60, 2, v12);
      v14 = _CocoaArrayWrapper.endIndex.getter(v49);
      if (!v14)
        goto LABEL_4;
    }
    else
    {
      v14 = *(_QWORD *)((v60 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain_n(v60, 2, v12);
      if (!v14)
        goto LABEL_4;
    }
    if ((v13 & 0xC000000000000001) != 0)
    {
      v15 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
    }
    else
    {
      v15 = *(_QWORD *)(v13 + 32);
      swift_retain(v15);
    }
    v16 = *(_QWORD *)(v15 + 16);
    v17 = *(_QWORD *)(v15 + 24);
    v18 = v10[2];
    v19 = v10[3];
    v20 = v16 == v18 && v17 == v19;
    if (v20)
    {
      swift_bridgeObjectRelease_n(v13, 2);
      swift_release(v15);
      goto LABEL_25;
    }
    v21 = v5;
    v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0);
    swift_release(v15);
    if ((v22 & 1) == 0)
      break;
    swift_bridgeObjectRelease_n(v13, 2);
LABEL_23:
    v5 = v21;
LABEL_25:
    if (*(_QWORD *)(v59[0] + 16))
    {
      swift_retain(v10);
      sub_10017D414(v23);
      v25 = v24;
      swift_release(v10);
      if ((v25 & 1) != 0)
      {
        sub_10008CB3C(v59);
        goto LABEL_6;
      }
    }
LABEL_5:
    sub_10008CB3C(v59);
    v7 = v10[6];
    v8 = *(uint64_t (**)(uint64_t, __n128))(*(_QWORD *)v7 + 80);
    v9 = swift_retain(v7);
    LOBYTE(v8) = v8(a1, v9);
    swift_release(v7);
    if ((v8 & 1) != 0)
    {
      swift_bridgeObjectRelease(v57);
      return (uint64_t)v10;
    }
LABEL_6:
    swift_release(v10);
    v4 = v3;
    if (v6 == v3)
    {
      v50 = v57;
      goto LABEL_78;
    }
  }
  v5 = v21;
  if (v14 == 1)
    goto LABEL_4;
  v26 = v10[2];
  v27 = v10[3];
  v53 = v27;
  v54 = v26;
  if ((v13 & 0xC000000000000001) != 0)
  {
    v28 = specialized _ArrayBuffer._getElementSlowPath(_:)(1, v13);
    v29 = *(_QWORD *)(v28 + 16);
    v30 = *(_QWORD *)(v28 + 24);
    if (v29 == v54 && v30 == v53)
    {
      swift_bridgeObjectRelease_n(v13, 2);
      swift_unknownObjectRelease(v28);
      goto LABEL_25;
    }
    v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v30, v54, v53, 0);
    swift_unknownObjectRelease(v28);
    if ((v41 & 1) != 0)
    {
LABEL_48:
      swift_bridgeObjectRelease_n(v13, 2);
      goto LABEL_25;
    }
    if (v14 != 2)
    {
      v42 = 2;
      while (1)
      {
        result = specialized _ArrayBuffer._getElementSlowPath(_:)(v42, v13);
        v43 = v42 + 1;
        if (__OFADD__(v42, 1))
          break;
        v44 = result;
        v45 = *(_QWORD *)(result + 16);
        v46 = *(_QWORD *)(v44 + 24);
        if (v45 == v54 && v46 == v53)
        {
          swift_bridgeObjectRelease_n(v13, 2);
          swift_unknownObjectRelease(v44);
          a1 = v52;
          goto LABEL_25;
        }
        v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v45, v46, v54, v53, 0);
        swift_unknownObjectRelease(v44);
        if ((v48 & 1) != 0)
        {
          swift_bridgeObjectRelease_n(v13, 2);
          a1 = v52;
          goto LABEL_23;
        }
        ++v42;
        v20 = v43 == v14;
        a1 = v52;
        v5 = v21;
        if (v20)
          goto LABEL_4;
      }
      __break(1u);
      goto LABEL_81;
    }
LABEL_4:
    swift_bridgeObjectRelease_n(v13, 2);
    goto LABEL_5;
  }
  v31 = *(_QWORD *)(v13 + 40);
  v32 = *(_QWORD *)(v31 + 16);
  v33 = *(_QWORD *)(v31 + 24);
  if (v32 == v26 && v33 == v27)
    goto LABEL_48;
  result = _stringCompareWithSmolCheck(_:_:expecting:)(v32, v33, v26, v27, 0);
  if ((result & 1) != 0)
    goto LABEL_48;
  if (v14 == 2)
    goto LABEL_4;
  v35 = 6;
  while (1)
  {
    v36 = v35 - 3;
    if (__OFADD__(v35 - 4, 1))
      break;
    v37 = *(_QWORD *)(v13 + 8 * v35);
    v38 = *(_QWORD *)(v37 + 16);
    v39 = *(_QWORD *)(v37 + 24);
    v40 = v38 == v54 && v39 == v53;
    if (v40 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, v54, v53, 0), (result & 1) != 0))
    {
      swift_bridgeObjectRelease_n(v13, 2);
      a1 = v52;
      goto LABEL_25;
    }
    ++v35;
    v20 = v36 == v14;
    a1 = v52;
    if (v20)
      goto LABEL_4;
  }
LABEL_81:
  __break(1u);
  return result;
}

uint64_t sub_1000853AC()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[12]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[14]);
  return swift_deallocClassInstance(v0, 120, 7);
}

uint64_t type metadata accessor for Questionnaire()
{
  return objc_opt_self(_TtC8SOSBuddy13Questionnaire);
}

void sub_100085408(_QWORD *a1@<X8>)
{
  *a1 = &off_1002E0978;
}

void sub_100085418(_QWORD *a1@<X8>)
{
  *a1 = &off_1002E09C8;
}

void sub_100085430(_QWORD *a1@<X8>)
{
  *a1 = &off_1002E09F0;
}

void sub_100085440(_QWORD *a1@<X8>)
{
  *a1 = &off_1002E09A0;
}

Swift::Int sub_100085450()
{
  uint64_t v0;
  Swift::UInt v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v1 = *(_QWORD *)v0;
  v2 = *(unsigned __int8 *)(v0 + 8);
  Hasher.init(_seed:)(v6, 0);
  if (v2 == 1)
  {
    Hasher._combine(_:)(1uLL);
    v3 = *(_QWORD *)(v1 + 16);
    v4 = *(_QWORD *)(v1 + 24);
    sub_10002AB80(v1, 1);
    swift_bridgeObjectRetain(v4);
    String.hash(into:)(v6, v3, v4);
    swift_bridgeObjectRelease(v4);
    sub_10002AB8C(v1, 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v1);
  }
  return Hasher._finalize()();
}

void sub_100085500(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)v1;
  if (*(_BYTE *)(v1 + 8) == 1)
  {
    Hasher._combine(_:)(1uLL);
    v4 = *(_QWORD *)(v3 + 16);
    v5 = *(_QWORD *)(v3 + 24);
    sub_10002AB80(v3, 1);
    swift_bridgeObjectRetain(v5);
    String.hash(into:)(a1, v4, v5);
    swift_bridgeObjectRelease(v5);
    sub_10002AB8C(v3, 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v3);
  }
}

Swift::Int sub_10008559C(uint64_t a1)
{
  uint64_t v1;
  Swift::UInt v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v2 = *(_QWORD *)v1;
  v3 = *(unsigned __int8 *)(v1 + 8);
  Hasher.init(_seed:)(v7, a1);
  if (v3 == 1)
  {
    Hasher._combine(_:)(1uLL);
    v4 = *(_QWORD *)(v2 + 16);
    v5 = *(_QWORD *)(v2 + 24);
    sub_10002AB80(v2, 1);
    swift_bridgeObjectRetain(v5);
    String.hash(into:)(v7, v4, v5);
    swift_bridgeObjectRelease(v5);
    sub_10002AB8C(v2, 1);
  }
  else
  {
    Hasher._combine(_:)(0);
    Hasher._combine(_:)(v2);
  }
  return Hasher._finalize()();
}

uint64_t sub_100085648(uint64_t a1, uint64_t a2)
{
  return sub_10008C408(*(_QWORD *)a1, *(_BYTE *)(a1 + 8), *(_QWORD *)a2, *(_BYTE *)(a2 + 8));
}

uint64_t sub_100085664(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _BYTE v27[16];
  _BYTE v28[8];
  uint64_t v29;
  _QWORD v30[2];

  v9 = v8;
  v13 = *(_OWORD *)(a4 + 16);
  *(_OWORD *)(v8 + 72) = *(_OWORD *)a4;
  *(_OWORD *)(v8 + 88) = v13;
  v14 = *(_OWORD *)(a4 + 48);
  *(_OWORD *)(v8 + 104) = *(_OWORD *)(a4 + 32);
  *(_QWORD *)(v8 + 16) = a1;
  *(_QWORD *)(v8 + 24) = a2;
  *(_BYTE *)(v8 + 32) = a3;
  *(_QWORD *)(v8 + 40) = a5;
  *(_QWORD *)(v8 + 48) = a6;
  *(_QWORD *)(v8 + 56) = a7;
  *(_BYTE *)(v8 + 64) = a8;
  *(_OWORD *)(v8 + 120) = v14;
  swift_bridgeObjectRetain(a5);
  swift_retain(a6);
  sub_10008C9F4((_QWORD *)a4);
  v15 = sub_10008C7CC(a5, a4);
  *(_QWORD *)(v8 + 136) = v15;
  sub_10000B458(a4 + 40, (uint64_t)v28, &qword_100319D70);
  sub_10000B458((uint64_t)v28, (uint64_t)&v29, &qword_100319D70);
  if (v29)
  {
    v30[0] = _swiftEmptyArrayStorage;
    v17 = *(_QWORD *)(v15 + 16);
    if (v17)
    {
      swift_bridgeObjectRetain_n(v15, 2, v16);
      v18 = (_BYTE *)(v15 + 40);
      do
      {
        if (*v18 == 1)
        {
          v20 = *((_QWORD *)v18 - 1);
          swift_retain(v20);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v21);
          v23 = *(_QWORD *)((v30[0] & 0xFFFFFFFFFFFFFF8) + 0x10);
          v22 = *(_QWORD *)((v30[0] & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v23 >= v22 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v22 > 1, v23 + 1, 1);
          v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v20);
          specialized Array._endMutation()(v19);
        }
        v18 += 16;
        --v17;
      }
      while (v17);
      swift_bridgeObjectRelease(v15);
      v24 = (_QWORD *)v30[0];
    }
    else
    {
      swift_bridgeObjectRetain(v15);
      v24 = _swiftEmptyArrayStorage;
    }
    swift_bridgeObjectRelease(v15);
  }
  else
  {
    swift_bridgeObjectRetain(a5);
    v24 = (_QWORD *)a5;
  }
  *(_QWORD *)(v9 + 144) = v24;
  sub_10000B458(a4 + 48, (uint64_t)v27, &qword_100318260);
  sub_10000B458((uint64_t)v27, (uint64_t)v30, &qword_100318260);
  if (v30[1])
  {
    sub_10008C9F4((_QWORD *)a4);
    v25 = sub_10008C454(a5, a4);
    sub_10008CA58((_QWORD *)a4);
    sub_10008CA58((_QWORD *)a4);
    swift_bridgeObjectRelease(a5);
    swift_release(a6);
  }
  else
  {
    swift_bridgeObjectRelease(a5);
    swift_release(a6);
    sub_10008CA58((_QWORD *)a4);
    v25 = 0;
  }
  *(_QWORD *)(v9 + 152) = v25;
  return v9;
}

uint64_t sub_1000858A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;

  if ((a2 != 45 || a3 != 0xE100000000000000)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, 45, 0xE100000000000000, 0) & 1) == 0)
  {
    swift_bridgeObjectRetain(a3);
    v8 = sub_10008C580(a4, a2, a3);
    swift_bridgeObjectRelease(a3);
    if (v8)
      return v8;
  }
  return a1;
}

_QWORD *sub_100085950()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  v1 = v0[10];
  v2 = v0[12];
  v3 = v0[14];
  v4 = v0[16];
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v0[17]);
  swift_bridgeObjectRelease(v0[18]);
  swift_release(v0[19]);
  return v0;
}

uint64_t sub_1000859E8()
{
  uint64_t v0;

  sub_100085950();
  return swift_deallocClassInstance(v0, 160, 7);
}

uint64_t type metadata accessor for Question()
{
  return objc_opt_self(_TtC8SOSBuddy8Question);
}

uint64_t sub_100085A38()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  swift_release(v0[8]);
  return swift_deallocClassInstance(v0, 72, 7);
}

uint64_t type metadata accessor for OptionPresentation()
{
  return objc_opt_self(_TtC8SOSBuddy18OptionPresentation);
}

void sub_100085A94(_QWORD *a1@<X8>)
{
  *a1 = &off_1002E0A18;
}

uint64_t sub_100085AA4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for Option()
{
  return objc_opt_self(_TtC8SOSBuddy6Option);
}

uint64_t sub_100085AF0@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 24);
  *a1 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

Swift::Int sub_100085B00()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[9];

  v1 = *v0;
  Hasher.init(_seed:)(v5, 0);
  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_100085B5C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = *(_QWORD *)(v3 + 24);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100085BA4(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[9];

  v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  v3 = *(_QWORD *)(v2 + 16);
  v4 = *(_QWORD *)(v2 + 24);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_100085BFC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = *a2;
  v4 = *(_QWORD *)(*a1 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v6 = *(_QWORD *)(v3 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  if (v4 == v6 && v5 == v7)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0);
}

uint64_t type metadata accessor for Condition()
{
  return objc_opt_self(_TtC8SOSBuddy9Condition);
}

uint64_t type metadata accessor for NoPrerequisites()
{
  return objc_opt_self(_TtC8SOSBuddy15NoPrerequisites);
}

void sub_100085C68(_QWORD *a1@<X8>)
{
  *a1 = &off_1002E0A40;
}

uint64_t type metadata accessor for LogicalCondition()
{
  return objc_opt_self(_TtC8SOSBuddy16LogicalCondition);
}

uint64_t sub_100085C9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL8 v10;
  unint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v3 = *(_QWORD *)(v1 + 24);
  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(*(_QWORD *)(v1 + 24));
    if (v4)
      goto LABEL_3;
LABEL_24:
    v10 = 1;
LABEL_25:
    swift_bridgeObjectRelease(v3);
    return v10;
  }
LABEL_20:
  if (v3 < 0)
    v14 = v3;
  else
    v14 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  result = _CocoaArrayWrapper.endIndex.getter(v14);
  v4 = result;
  if (!result)
    goto LABEL_24;
LABEL_3:
  if ((v3 & 0xC000000000000001) != 0)
  {
    v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
LABEL_6:
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 80))(a1);
    swift_release(v6);
    if ((v7 & 1) != 0)
    {
      v8 = 0;
      v9 = v4 - 1;
      while (1)
      {
        v10 = v9 == v8;
        if (v9 == v8)
          break;
        v11 = v8 + 1;
        if ((v3 & 0xC000000000000001) != 0)
        {
          v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8 + 1, v3);
          if (__OFADD__(v11, 1))
            goto LABEL_18;
        }
        else
        {
          if (v11 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_19;
          v12 = *(_QWORD *)(v3 + 8 * v8 + 40);
          swift_retain(v12);
          if (__OFADD__(v11, 1))
          {
LABEL_18:
            __break(1u);
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 80))(a1);
        swift_release(v12);
        ++v8;
        if ((v13 & 1) == 0)
          goto LABEL_25;
      }
    }
    else
    {
      v10 = 0;
    }
    goto LABEL_25;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(_QWORD *)(v3 + 32);
    swift_retain(v6);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for AndCondition()
{
  return objc_opt_self(_TtC8SOSBuddy12AndCondition);
}

uint64_t sub_100085E40(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v3 = *(_QWORD *)(v1 + 24);
  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(*(_QWORD *)(v1 + 24));
    if (v4)
      goto LABEL_3;
LABEL_17:
    swift_bridgeObjectRelease(v3);
    return v4;
  }
LABEL_20:
  if (v3 < 0)
    v13 = v3;
  else
    v13 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  result = _CocoaArrayWrapper.endIndex.getter(v13);
  v4 = result;
  if (!result)
    goto LABEL_17;
LABEL_3:
  if ((v3 & 0xC000000000000001) != 0)
  {
    v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
LABEL_6:
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 80))(a1);
    swift_release(v6);
    if ((v7 & 1) != 0)
    {
      v4 = 1;
    }
    else
    {
      v8 = 0;
      v9 = v4 - 1;
      while (1)
      {
        v4 = v9 != v8;
        if (v9 == v8)
          break;
        v10 = v8 + 1;
        if ((v3 & 0xC000000000000001) != 0)
        {
          v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8 + 1, v3);
          if (__OFADD__(v10, 1))
            goto LABEL_18;
        }
        else
        {
          if (v10 >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_19;
          v11 = *(_QWORD *)(v3 + 8 * v8 + 40);
          swift_retain(v11);
          if (__OFADD__(v10, 1))
          {
LABEL_18:
            __break(1u);
LABEL_19:
            __break(1u);
            goto LABEL_20;
          }
        }
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 80))(a1);
        swift_release(v11);
        ++v8;
        if ((v12 & 1) != 0)
          goto LABEL_17;
      }
    }
    goto LABEL_17;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(_QWORD *)(v3 + 32);
    swift_retain(v6);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for OrCondition()
{
  return objc_opt_self(_TtC8SOSBuddy11OrCondition);
}

uint64_t sub_100085FE0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v3 = *(_QWORD *)(v1 + 24);
  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain(v3);
    if (v4)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease(v3);
    __break(1u);
    goto LABEL_12;
  }
  if (v3 < 0)
    v8 = v3;
  else
    v8 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v3);
  result = _CocoaArrayWrapper.endIndex.getter(v8);
  if (!result)
    goto LABEL_11;
LABEL_3:
  if ((v3 & 0xC000000000000001) != 0)
  {
LABEL_12:
    v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v3);
    goto LABEL_6;
  }
  if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v6 = *(_QWORD *)(v3 + 32);
    swift_retain(v6);
LABEL_6:
    swift_bridgeObjectRelease(v3);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 80))(a1);
    swift_release(v6);
    return (v7 & 1) == 0;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for NotCondition()
{
  return objc_opt_self(_TtC8SOSBuddy12NotCondition);
}

void sub_1000860DC(_QWORD *a1@<X8>)
{
  *a1 = &off_1002E0A68;
}

uint64_t sub_1000860EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t *v5;
  char v6;
  _BYTE v8[24];
  _QWORD v9[24];

  v2 = *(_QWORD *)(v1 + 24);
  v3 = *(_QWORD *)(v1 + 32);
  v4 = *(_BYTE *)(v1 + 16);
  v5 = (uint64_t *)(a1 + 48);
  swift_beginAccess(a1 + 48, v8, 0, 0);
  sub_10008CB00(v5, (uint64_t)v9);
  v6 = sub_10022A1A4(v9, v2, v3, v4);
  sub_10008CB3C(v9);
  return v6 & 1;
}

uint64_t sub_100086174()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
}

uint64_t sub_10008617C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for QuestionCondition()
{
  return objc_opt_self(_TtC8SOSBuddy17QuestionCondition);
}

void sub_1000861C0(_QWORD *a1@<X8>)
{
  *a1 = &off_1002E0A90;
}

uint64_t sub_1000861D0()
{
  uint64_t v0;

  return sub_1000BACD0(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24)) & 1;
}

uint64_t sub_1000861FC()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
}

uint64_t type metadata accessor for OptionCondition()
{
  return objc_opt_self(_TtC8SOSBuddy15OptionCondition);
}

void sub_100086224(_QWORD *a1@<X8>)
{
  *a1 = &off_1002E0AB8;
}

uint64_t sub_100086234()
{
  uint64_t v0;

  return sub_1000AC944(*(_BYTE *)(v0 + 16)) & 1;
}

uint64_t sub_100086260()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 17, 7);
}

uint64_t type metadata accessor for BuiltInCondition()
{
  return objc_opt_self(_TtC8SOSBuddy16BuiltInCondition);
}

uint64_t getEnumTagSinglePayload for BuiltInCondition.Operation(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF7)
    goto LABEL_17;
  if (a2 + 9 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 9) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 9;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 9;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 9;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xA;
  v8 = v6 - 10;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltInCondition.Operation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 9 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 9) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF6)
    return ((uint64_t (*)(void))((char *)&loc_10008636C + 4 * byte_100251665[v4]))();
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1000863A0 + 4 * asc_100251660[v4]))();
}

uint64_t sub_1000863A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000863A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000863B0);
  return result;
}

uint64_t sub_1000863BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000863C4);
  *(_BYTE *)result = a2 + 9;
  return result;
}

uint64_t sub_1000863C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000863D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BuiltInCondition.Operation()
{
  return &type metadata for BuiltInCondition.Operation;
}

ValueMetadata *type metadata accessor for OptionCondition.Operation()
{
  return &type metadata for OptionCondition.Operation;
}

ValueMetadata *type metadata accessor for QuestionCondition.Operation()
{
  return &type metadata for QuestionCondition.Operation;
}

uint64_t _s8SOSBuddy16LogicalConditionC9OperationOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100086468 + 4 * byte_10025166F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10008649C + 4 * byte_10025166A[v4]))();
}

uint64_t sub_10008649C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000864A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000864ACLL);
  return result;
}

uint64_t sub_1000864B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000864C0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000864C4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000864CC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LogicalCondition.Operation()
{
  return &type metadata for LogicalCondition.Operation;
}

ValueMetadata *type metadata accessor for Option.InputType()
{
  return &type metadata for Option.InputType;
}

uint64_t initializeBufferWithCopyOfBuffer for Question.OptionsPresentationOrderItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10002AB80(*(_QWORD *)a2, v4);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  return a1;
}

uint64_t destroy for Question.OptionsPresentationOrderItem(uint64_t a1)
{
  return sub_10002AB8C(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
}

uint64_t assignWithCopy for Question.OptionsPresentationOrderItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *(_QWORD *)a2;
  v4 = *(_BYTE *)(a2 + 8);
  sub_10002AB80(*(_QWORD *)a2, v4);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_10002AB8C(v5, v6);
  return a1;
}

uint64_t assignWithTake for Question.OptionsPresentationOrderItem(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = *((_BYTE *)a2 + 8);
  v5 = *(_QWORD *)a1;
  v6 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_BYTE *)(a1 + 8) = v4;
  sub_10002AB8C(v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for Question.OptionsPresentationOrderItem()
{
  return &type metadata for Question.OptionsPresentationOrderItem;
}

uint64_t destroy for QuestionPresentation(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[7]);
}

_QWORD *initializeWithCopy for QuestionPresentation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[4];
  v6 = a2[5];
  a1[4] = v5;
  a1[5] = v6;
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

_QWORD *assignWithCopy for QuestionPresentation(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a1[5];
  v11 = a2[5];
  a1[5] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  a1[6] = a2[6];
  v12 = a2[7];
  v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

_QWORD *assignWithTake for QuestionPresentation(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  v6 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  v7 = a1[5];
  a1[5] = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = a1[7];
  a1[6] = *(_QWORD *)(a2 + 48);
  a1[7] = v8;
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionPresentation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionPresentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionPresentation()
{
  return &type metadata for QuestionPresentation;
}

ValueMetadata *type metadata accessor for Question.BuiltInParameters()
{
  return &type metadata for Question.BuiltInParameters;
}

uint64_t _s8SOSBuddy8QuestionC4FlagOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1000868D4 + 4 * byte_100251674[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000868F4 + 4 * byte_100251679[v4]))();
}

_BYTE *sub_1000868D4(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000868F4(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000868FC(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_100086904(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_10008690C(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_100086914(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Question.Flag()
{
  return &type metadata for Question.Flag;
}

uint64_t storeEnumTagSinglePayload for Question.QuestionType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10008697C + 4 * byte_100251683[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000869B0 + 4 * byte_10025167E[v4]))();
}

uint64_t sub_1000869B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000869B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000869C0);
  return result;
}

uint64_t sub_1000869CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000869D4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1000869D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000869E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Question.QuestionType()
{
  return &type metadata for Question.QuestionType;
}

uint64_t sub_1000869FC()
{
  return sub_10008CE28(&qword_10031C530, &qword_10031C538);
}

unint64_t sub_100086A24()
{
  unint64_t result;

  result = qword_10031C540;
  if (!qword_10031C540)
  {
    result = swift_getWitnessTable(&unk_10025197C, &type metadata for Question.QuestionType);
    atomic_store(result, (unint64_t *)&qword_10031C540);
  }
  return result;
}

uint64_t sub_100086A68()
{
  return sub_10008CE28(&qword_10031C548, &qword_10031C550);
}

unint64_t sub_100086A90()
{
  unint64_t result;

  result = qword_10031C558;
  if (!qword_10031C558)
  {
    result = swift_getWitnessTable(&unk_100251A1C, &type metadata for Question.Flag);
    atomic_store(result, (unint64_t *)&qword_10031C558);
  }
  return result;
}

unint64_t sub_100086AD8()
{
  unint64_t result;

  result = qword_10031C560;
  if (!qword_10031C560)
  {
    result = swift_getWitnessTable(&unk_100251A44, &type metadata for Question.OptionsPresentationOrderItem);
    atomic_store(result, (unint64_t *)&qword_10031C560);
  }
  return result;
}

uint64_t sub_100086B1C()
{
  return sub_10008CE28(&qword_10031C568, &qword_10031C570);
}

unint64_t sub_100086B44()
{
  unint64_t result;

  result = qword_10031C578;
  if (!qword_10031C578)
  {
    result = swift_getWitnessTable(&unk_100251B24, &type metadata for Option.InputType);
    atomic_store(result, (unint64_t *)&qword_10031C578);
  }
  return result;
}

uint64_t sub_100086B88()
{
  return sub_10008CE28(&qword_10031C580, &qword_10031C588);
}

unint64_t sub_100086BB0()
{
  unint64_t result;

  result = qword_10031C590;
  if (!qword_10031C590)
  {
    result = swift_getWitnessTable(&unk_100251BC4, &type metadata for LogicalCondition.Operation);
    atomic_store(result, (unint64_t *)&qword_10031C590);
  }
  return result;
}

uint64_t sub_100086BF4()
{
  return sub_10008CE28(&qword_10031C598, &qword_10031C5A0);
}

unint64_t sub_100086C1C()
{
  unint64_t result;

  result = qword_10031C5A8;
  if (!qword_10031C5A8)
  {
    result = swift_getWitnessTable(&unk_100251C64, &type metadata for QuestionCondition.Operation);
    atomic_store(result, (unint64_t *)&qword_10031C5A8);
  }
  return result;
}

uint64_t sub_100086C60()
{
  return sub_10008CE28(&qword_10031C5B0, &qword_10031C5B8);
}

unint64_t sub_100086C88()
{
  unint64_t result;

  result = qword_10031C5C0;
  if (!qword_10031C5C0)
  {
    result = swift_getWitnessTable(&unk_100251D04, &type metadata for OptionCondition.Operation);
    atomic_store(result, (unint64_t *)&qword_10031C5C0);
  }
  return result;
}

uint64_t sub_100086CCC()
{
  return sub_10008CE28(&qword_10031C5C8, &qword_10031C5D0);
}

unint64_t sub_100086CF4()
{
  unint64_t result;

  result = qword_10031C5D8;
  if (!qword_10031C5D8)
  {
    result = swift_getWitnessTable(&unk_100251DA4, &type metadata for BuiltInCondition.Operation);
    atomic_store(result, (unint64_t *)&qword_10031C5D8);
  }
  return result;
}

uint64_t sub_100086D38()
{
  return sub_100086D90(&qword_10031C5E0, type metadata accessor for Option, (uint64_t)&unk_100251DCC);
}

uint64_t sub_100086D64()
{
  return sub_100086D90(&qword_10031C5E8, type metadata accessor for Question, (uint64_t)&unk_100251E6C);
}

uint64_t sub_100086D90(unint64_t *a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2();
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int sub_100086DCC(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  Swift::Int v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int *v31;
  char v32;
  _QWORD *v33;
  uint64_t v34[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8(&qword_10032A710);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = a2;
    v31 = v3;
    v9 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v9 << 6);
      }
      else
      {
        v18 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v18 >= v13)
          goto LABEL_34;
        v19 = v33[v18];
        ++v9;
        if (!v19)
        {
          v9 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_34;
          v19 = v33[v9];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_34:
              if ((v32 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v31;
                goto LABEL_41;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v33[v20];
            if (!v19)
            {
              while (1)
              {
                v9 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_43;
                if (v9 >= v13)
                  goto LABEL_34;
                v19 = v33[v9];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v9 = v20;
          }
        }
LABEL_24:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v9 << 6);
      }
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v17);
      v22 = *(_BYTE *)(*(_QWORD *)(v5 + 56) + v17);
      Hasher.init(_seed:)(v34, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v8 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v15) = v21;
      *(_BYTE *)(*(_QWORD *)(v8 + 56) + v15) = v22;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

Swift::Int sub_100087090(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int *v31;
  int64_t v32;
  _QWORD *v33;
  uint64_t v34[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8(&qword_10031C648);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v31 = v3;
    v9 = 0;
    v33 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v32 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v18 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v20 >= v32)
          goto LABEL_36;
        v21 = v33[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v32)
            goto LABEL_36;
          v21 = v33[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v32)
            {
LABEL_36:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v31;
                goto LABEL_43;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v33, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v33 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v33[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_45;
                if (v9 >= v32)
                  goto LABEL_36;
                v21 = v33[v9];
                ++v22;
                if (v21)
                  goto LABEL_33;
              }
            }
            v9 = v22;
          }
        }
LABEL_33:
        v12 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v27 = *(_QWORD *)(v5 + 56);
      v28 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v19);
      v29 = *(_QWORD *)(v27 + 8 * v19);
      if ((a2 & 1) == 0)
        swift_retain(*(_QWORD *)(v27 + 8 * v19));
      Hasher.init(_seed:)(v34, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v23 = 0;
        v24 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v24 && (v23 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v25 = v16 == v24;
          if (v16 == v24)
            v16 = 0;
          v23 |= v25;
          v26 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v26 == -1);
        v17 = __clz(__rbit64(~v26)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v17) = v28;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v17) = v29;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

Swift::Int sub_100087360(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int result;
  Swift::Int v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  Swift::UInt v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  Swift::Int *v35;
  int64_t v36;
  _QWORD *v37;
  Swift::Int v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44[10];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8(&qword_10031C640);
  v39 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v35 = v3;
    v9 = 0;
    v37 = (_QWORD *)(v5 + 64);
    v38 = v5;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v36 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = (Swift::Int)v37;
        if (v21 >= v36)
          goto LABEL_36;
        v22 = v37[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v36)
            goto LABEL_36;
          v22 = v37[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v36)
            {
LABEL_36:
              if ((v39 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v35;
                goto LABEL_43;
              }
              v34 = 1 << *(_BYTE *)(v5 + 32);
              if (v34 >= 64)
                bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v37 = -1 << v34;
              v3 = v35;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v37[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v36)
                  goto LABEL_36;
                v22 = v37[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v20);
      v29 = *(_QWORD *)(v5 + 56) + 72 * v20;
      v30 = *(_QWORD *)v29;
      v31 = *(_QWORD *)(v29 + 8);
      v43 = *(_OWORD *)(v29 + 24);
      v32 = *(_QWORD *)(v29 + 40);
      v41 = *(_QWORD *)(v29 + 48);
      v42 = *(_QWORD *)(v29 + 16);
      v33 = *(_QWORD *)(v29 + 56);
      v40 = *(_BYTE *)(v29 + 64);
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain(v43);
        swift_bridgeObjectRetain(v32);
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v31);
      }
      Hasher.init(_seed:)(v44, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v28);
      result = Hasher._finalize()();
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v17) = v28;
      v18 = *(_QWORD *)(v8 + 56) + 72 * v17;
      *(_QWORD *)v18 = v30;
      *(_QWORD *)(v18 + 8) = v31;
      *(_QWORD *)(v18 + 16) = v42;
      *(_OWORD *)(v18 + 24) = v43;
      *(_QWORD *)(v18 + 40) = v32;
      *(_QWORD *)(v18 + 48) = v41;
      *(_QWORD *)(v18 + 56) = v33;
      *(_BYTE *)(v18 + 64) = v40;
      ++*(_QWORD *)(v8 + 16);
      v5 = v38;
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

void sub_1000876B4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  int64_t v33;
  _QWORD *v34;
  __int128 v35;
  _QWORD v36[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8(&qword_10031C680);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v32 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v34 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v33 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v21 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v22 = v21 | (v13 << 6);
      }
      else
      {
        v23 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return;
        }
        if (v23 >= v33)
          goto LABEL_36;
        v24 = v34[v23];
        ++v13;
        if (!v24)
        {
          v13 = v23 + 1;
          if (v23 + 1 >= v33)
            goto LABEL_36;
          v24 = v34[v13];
          if (!v24)
          {
            v25 = v23 + 2;
            if (v25 >= v33)
            {
LABEL_36:
              swift_release(v5);
              v3 = v32;
              if ((a2 & 1) != 0)
              {
                v31 = 1 << *(_BYTE *)(v5 + 32);
                if (v31 >= 64)
                  bzero(v34, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v34 = -1 << v31;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v24 = v34[v25];
            if (!v24)
            {
              while (1)
              {
                v13 = v25 + 1;
                if (__OFADD__(v25, 1))
                  goto LABEL_43;
                if (v13 >= v33)
                  goto LABEL_36;
                v24 = v34[v13];
                ++v25;
                if (v24)
                  goto LABEL_33;
              }
            }
            v13 = v25;
          }
        }
LABEL_33:
        v11 = (v24 - 1) & v24;
        v22 = __clz(__rbit64(v24)) + (v13 << 6);
      }
      v30 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v22);
      v35 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + 16 * v22);
      if ((a2 & 1) == 0)
      {
        swift_retain(*((_QWORD *)&v35 + 1));
        swift_retain(v30);
        swift_retain(v35);
      }
      Hasher.init(_seed:)(v36, *(_QWORD *)(v8 + 40));
      v14 = *(_QWORD *)(v30 + 16);
      v15 = *(_QWORD *)(v30 + 24);
      swift_bridgeObjectRetain(v15);
      String.hash(into:)(v36, v14, v15);
      swift_bridgeObjectRelease(v15);
      v16 = Hasher._finalize()();
      v17 = -1 << *(_BYTE *)(v8 + 32);
      v18 = v16 & ~v17;
      v19 = v18 >> 6;
      if (((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6))) != 0)
      {
        v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v17) >> 6;
        do
        {
          if (++v19 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v28 = v19 == v27;
          if (v19 == v27)
            v19 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v12 + 8 * v19);
        }
        while (v29 == -1);
        v20 = __clz(__rbit64(~v29)) + (v19 << 6);
      }
      *(_QWORD *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v20) = v30;
      *(_OWORD *)(*(_QWORD *)(v8 + 56) + 16 * v20) = v35;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_1000879C8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8(&qword_10031C638);
  v40 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v37 = v3;
  v38 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v13 << 6);
      goto LABEL_34;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v38)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v39 + 8 * v24);
    ++v13;
    if (!v26)
    {
      v13 = v24 + 1;
      if (v24 + 1 >= v38)
        goto LABEL_36;
      v26 = *(_QWORD *)(v39 + 8 * v13);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v38)
        {
LABEL_36:
          swift_release(v5);
          v3 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v39 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v13 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v13 >= v38)
              goto LABEL_36;
            v26 = *(_QWORD *)(v39 + 8 * v13);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v13 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v13 << 6);
LABEL_34:
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v23);
    v33 = *(_QWORD *)(v5 + 56) + 16 * v23;
    v34 = *(_BYTE *)v33;
    v35 = *(_QWORD *)(v33 + 8);
    if ((v40 & 1) == 0)
    {
      swift_retain(v35);
      swift_retain(v32);
    }
    Hasher.init(_seed:)(v41, *(_QWORD *)(v8 + 40));
    v14 = *(_QWORD *)(v32 + 16);
    v15 = *(_QWORD *)(v32 + 24);
    swift_bridgeObjectRetain(v15);
    String.hash(into:)(v41, v14, v15);
    swift_bridgeObjectRelease(v15);
    v16 = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(v8 + 32);
    v18 = v16 & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v20) = v32;
    v21 = *(_QWORD *)(v8 + 56) + 16 * v20;
    *(_BYTE *)v21 = v34;
    *(_QWORD *)(v21 + 8) = v35;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v25 = (_QWORD *)(v5 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_100087CF8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  int64_t v38;
  uint64_t v39;
  char v40;
  _QWORD v41[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8(&qword_10031C630);
  v40 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v39 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v37 = v3;
  v38 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v13 << 6);
      goto LABEL_34;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v38)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v39 + 8 * v24);
    ++v13;
    if (!v26)
    {
      v13 = v24 + 1;
      if (v24 + 1 >= v38)
        goto LABEL_36;
      v26 = *(_QWORD *)(v39 + 8 * v13);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v38)
        {
LABEL_36:
          swift_release(v5);
          v3 = v37;
          if ((v40 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v39 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v13 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v13 >= v38)
              goto LABEL_36;
            v26 = *(_QWORD *)(v39 + 8 * v13);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v13 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v13 << 6);
LABEL_34:
    v32 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v23);
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 56) + 16 * v23);
    v34 = *v33;
    v35 = v33[1];
    if ((v40 & 1) == 0)
    {
      swift_retain(v32);
      swift_bridgeObjectRetain(v35);
    }
    Hasher.init(_seed:)(v41, *(_QWORD *)(v8 + 40));
    v14 = *(_QWORD *)(v32 + 16);
    v15 = *(_QWORD *)(v32 + 24);
    swift_bridgeObjectRetain(v15);
    String.hash(into:)(v41, v14, v15);
    swift_bridgeObjectRelease(v15);
    v16 = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(v8 + 32);
    v18 = v16 & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v20) = v32;
    v21 = (_QWORD *)(*(_QWORD *)(v8 + 56) + 16 * v20);
    *v21 = v34;
    v21[1] = v35;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v37;
  v25 = (_QWORD *)(v5 + 64);
  if ((v40 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v25, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_100088020(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  Swift::Int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  int64_t v35;
  _QWORD *v36;
  _QWORD v37[9];
  _OWORD v38[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8(&qword_10031C628);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (*(_QWORD *)(v5 + 16))
  {
    v34 = v3;
    v9 = 1 << *(_BYTE *)(v5 + 32);
    v36 = (_QWORD *)(v5 + 64);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(v5 + 64);
    v35 = (unint64_t)(v9 + 63) >> 6;
    v12 = v7 + 64;
    swift_retain(v5);
    v13 = 0;
    while (1)
    {
      if (v11)
      {
        v16 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v17 = v16 | (v13 << 6);
      }
      else
      {
        v18 = v13 + 1;
        if (__OFADD__(v13, 1))
        {
LABEL_43:
          __break(1u);
LABEL_44:
          __break(1u);
          return;
        }
        if (v18 >= v35)
          goto LABEL_37;
        v19 = v36[v18];
        ++v13;
        if (!v19)
        {
          v13 = v18 + 1;
          if (v18 + 1 >= v35)
            goto LABEL_37;
          v19 = v36[v13];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v35)
            {
LABEL_37:
              swift_release(v5);
              v3 = v34;
              if ((a2 & 1) != 0)
              {
                v33 = 1 << *(_BYTE *)(v5 + 32);
                if (v33 >= 64)
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v36 = -1 << v33;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v19 = v36[v20];
            if (!v19)
            {
              while (1)
              {
                v13 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_44;
                if (v13 >= v35)
                  goto LABEL_37;
                v19 = v36[v13];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v13 = v20;
          }
        }
LABEL_24:
        v11 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v13 << 6);
      }
      v21 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v17);
      v23 = *v21;
      v22 = v21[1];
      v24 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
      {
        sub_10003E704(v24, v38);
      }
      else
      {
        sub_10008CAC4((uint64_t)v24, (uint64_t)v38);
        swift_bridgeObjectRetain(v22);
      }
      Hasher.init(_seed:)(v37, *(_QWORD *)(v8 + 40));
      String.hash(into:)(v37, v23, v22);
      v25 = Hasher._finalize()();
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = v25 & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6))) != 0)
      {
        v14 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v12 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_43;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v12 + 8 * v28);
        }
        while (v32 == -1);
        v14 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v12 + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
      v15 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v14);
      *v15 = v23;
      v15[1] = v22;
      sub_10003E704(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v14));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  swift_release(v5);
  *v3 = v8;
}

void sub_10008831C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  char v38;
  _QWORD v39[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8((uint64_t *)&unk_10032A6F0);
  v38 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v22 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v23 = v22 | (v13 << 6);
      goto LABEL_34;
    }
    v24 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v36)
      break;
    v25 = (_QWORD *)(v5 + 64);
    v26 = *(_QWORD *)(v37 + 8 * v24);
    ++v13;
    if (!v26)
    {
      v13 = v24 + 1;
      if (v24 + 1 >= v36)
        goto LABEL_36;
      v26 = *(_QWORD *)(v37 + 8 * v13);
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v36)
        {
LABEL_36:
          swift_release(v5);
          if ((v38 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = *(_QWORD *)(v37 + 8 * v27);
        if (!v26)
        {
          while (1)
          {
            v13 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v13 >= v36)
              goto LABEL_36;
            v26 = *(_QWORD *)(v37 + 8 * v13);
            ++v27;
            if (v26)
              goto LABEL_33;
          }
        }
        v13 = v27;
      }
    }
LABEL_33:
    v11 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v13 << 6);
LABEL_34:
    v32 = 8 * v23;
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v32);
    v34 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v32);
    if ((v38 & 1) == 0)
    {
      swift_retain(v33);
      swift_bridgeObjectRetain(v34);
    }
    Hasher.init(_seed:)(v39, *(_QWORD *)(v8 + 40));
    v14 = *(_QWORD *)(v33 + 16);
    v15 = *(_QWORD *)(v33 + 24);
    swift_bridgeObjectRetain(v15);
    String.hash(into:)(v39, v14, v15);
    swift_bridgeObjectRelease(v15);
    v16 = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(v8 + 32);
    v18 = v16 & ~v17;
    v19 = v18 >> 6;
    if (((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6))) != 0)
    {
      v20 = __clz(__rbit64((-1 << v18) & ~*(_QWORD *)(v12 + 8 * (v18 >> 6)))) | v18 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v17) >> 6;
      do
      {
        if (++v19 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v19 == v29;
        if (v19 == v29)
          v19 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v19);
      }
      while (v31 == -1);
      v20 = __clz(__rbit64(~v31)) + (v19 << 6);
    }
    *(_QWORD *)(v12 + ((v20 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v20;
    v21 = 8 * v20;
    *(_QWORD *)(*(_QWORD *)(v8 + 48) + v21) = v33;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + v21) = v34;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v25 = (_QWORD *)(v5 + 64);
  if ((v38 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v25, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

uint64_t sub_100088644(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  Swift::UInt v21;
  _OWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33[9];
  _OWORD v34[2];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8(&qword_10032A6E0);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v31 = v3;
    v32 = (_QWORD *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v13 = (unint64_t)(v10 + 63) >> 6;
    v14 = result + 64;
    while (1)
    {
      if (v12)
      {
        v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v17 = v16 | (v9 << 6);
      }
      else
      {
        v18 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v18 >= v13)
          goto LABEL_37;
        v19 = v32[v18];
        ++v9;
        if (!v19)
        {
          v9 = v18 + 1;
          if (v18 + 1 >= v13)
            goto LABEL_37;
          v19 = v32[v9];
          if (!v19)
          {
            v20 = v18 + 2;
            if (v20 >= v13)
            {
LABEL_37:
              if ((a2 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v31;
                goto LABEL_44;
              }
              v30 = 1 << *(_BYTE *)(v5 + 32);
              if (v30 >= 64)
                bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
              else
                *v32 = -1 << v30;
              v3 = v31;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v19 = v32[v20];
            if (!v19)
            {
              while (1)
              {
                v9 = v20 + 1;
                if (__OFADD__(v20, 1))
                  goto LABEL_46;
                if (v9 >= v13)
                  goto LABEL_37;
                v19 = v32[v9];
                ++v20;
                if (v19)
                  goto LABEL_24;
              }
            }
            v9 = v20;
          }
        }
LABEL_24:
        v12 = (v19 - 1) & v19;
        v17 = __clz(__rbit64(v19)) + (v9 << 6);
      }
      v21 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 48) + v17);
      v22 = (_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v17);
      if ((a2 & 1) != 0)
        sub_10003E704(v22, v34);
      else
        sub_10008CAC4((uint64_t)v22, (uint64_t)v34);
      Hasher.init(_seed:)(v33, *(_QWORD *)(v8 + 40));
      Hasher._combine(_:)(v21);
      result = Hasher._finalize()();
      v23 = -1 << *(_BYTE *)(v8 + 32);
      v24 = result & ~v23;
      v25 = v24 >> 6;
      if (((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6))) != 0)
      {
        v15 = __clz(__rbit64((-1 << v24) & ~*(_QWORD *)(v14 + 8 * (v24 >> 6)))) | v24 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v26 = 0;
        v27 = (unint64_t)(63 - v23) >> 6;
        do
        {
          if (++v25 == v27 && (v26 & 1) != 0)
          {
            __break(1u);
            goto LABEL_45;
          }
          v28 = v25 == v27;
          if (v25 == v27)
            v25 = 0;
          v26 |= v28;
          v29 = *(_QWORD *)(v14 + 8 * v25);
        }
        while (v29 == -1);
        v15 = __clz(__rbit64(~v29)) + (v25 << 6);
      }
      *(_QWORD *)(v14 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v15;
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v15) = v21;
      result = (uint64_t)sub_10003E704(v34, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v15));
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_44:
  *v3 = v8;
  return result;
}

uint64_t sub_100088918(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t *v38;
  char v39;
  __int128 v40;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8((uint64_t *)&unk_10032A6D0);
  v39 = a2;
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v9 = 0;
    v38 = (uint64_t *)(v5 + 64);
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v34 = -1 << v10;
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v35 = 1 << *(_BYTE *)(v5 + 32);
    v36 = v3;
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = result + 64;
    while (1)
    {
      if (v12)
      {
        v19 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v20 = v19 | (v9 << 6);
      }
      else
      {
        v21 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_44:
          __break(1u);
LABEL_45:
          __break(1u);
          return result;
        }
        result = v5 + 64;
        if (v21 >= v37)
          goto LABEL_36;
        v22 = v38[v21];
        ++v9;
        if (!v22)
        {
          v9 = v21 + 1;
          if (v21 + 1 >= v37)
            goto LABEL_36;
          v22 = v38[v9];
          if (!v22)
          {
            v23 = v21 + 2;
            if (v23 >= v37)
            {
LABEL_36:
              if ((v39 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v36;
                goto LABEL_43;
              }
              if (v35 >= 64)
                bzero(v38, 8 * v37);
              else
                *v38 = v34;
              v3 = v36;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v22 = v38[v23];
            if (!v22)
            {
              while (1)
              {
                v9 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v9 >= v37)
                  goto LABEL_36;
                v22 = v38[v9];
                ++v23;
                if (v22)
                  goto LABEL_33;
              }
            }
            v9 = v23;
          }
        }
LABEL_33:
        v12 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v9 << 6);
      }
      v28 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v20);
      v29 = *(_QWORD *)(v5 + 56) + 40 * v20;
      v40 = *(_OWORD *)v29;
      v30 = *(_QWORD *)(v29 + 16);
      v31 = *(_BYTE *)(v29 + 24);
      v32 = *(_BYTE *)(v29 + 25);
      v33 = *(_QWORD *)(v29 + 32);
      if ((v39 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        swift_bridgeObjectRetain(v30);
      }
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v28);
      v14 = -1 << *(_BYTE *)(v8 + 32);
      v15 = result & ~v14;
      v16 = v15 >> 6;
      if (((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6))) != 0)
      {
        v17 = __clz(__rbit64((-1 << v15) & ~*(_QWORD *)(v13 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v24 = 0;
        v25 = (unint64_t)(63 - v14) >> 6;
        do
        {
          if (++v16 == v25 && (v24 & 1) != 0)
          {
            __break(1u);
            goto LABEL_44;
          }
          v26 = v16 == v25;
          if (v16 == v25)
            v16 = 0;
          v24 |= v26;
          v27 = *(_QWORD *)(v13 + 8 * v16);
        }
        while (v27 == -1);
        v17 = __clz(__rbit64(~v27)) + (v16 << 6);
      }
      *(_QWORD *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v17;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v17) = v28;
      v18 = *(_QWORD *)(v8 + 56) + 40 * v17;
      *(_OWORD *)v18 = v40;
      *(_QWORD *)(v18 + 16) = v30;
      *(_BYTE *)(v18 + 24) = v31;
      *(_BYTE *)(v18 + 25) = v32;
      *(_QWORD *)(v18 + 32) = v33;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_43:
  *v3 = v8;
  return result;
}

void sub_100088C14(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  int64_t v39;
  uint64_t v40;
  char v41;
  __int128 v42;
  _QWORD v43[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8(&qword_10031C618);
  v41 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v40 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v38 = v3;
  v39 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v22 = v21 | (v13 << 6);
      goto LABEL_34;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v39)
      break;
    v24 = (_QWORD *)(v5 + 64);
    v25 = *(_QWORD *)(v40 + 8 * v23);
    ++v13;
    if (!v25)
    {
      v13 = v23 + 1;
      if (v23 + 1 >= v39)
        goto LABEL_36;
      v25 = *(_QWORD *)(v40 + 8 * v13);
      if (!v25)
      {
        v26 = v23 + 2;
        if (v26 >= v39)
        {
LABEL_36:
          swift_release(v5);
          v3 = v38;
          if ((v41 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = *(_QWORD *)(v40 + 8 * v26);
        if (!v25)
        {
          while (1)
          {
            v13 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_45;
            if (v13 >= v39)
              goto LABEL_36;
            v25 = *(_QWORD *)(v40 + 8 * v13);
            ++v26;
            if (v25)
              goto LABEL_33;
          }
        }
        v13 = v26;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v22 = __clz(__rbit64(v25)) + (v13 << 6);
LABEL_34:
    v31 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v33 = *v31;
    v32 = v31[1];
    v34 = *(_QWORD *)(v5 + 56) + 32 * v22;
    v35 = *(_QWORD *)v34;
    v42 = *(_OWORD *)(v34 + 8);
    v36 = *(_BYTE *)(v34 + 24);
    if ((v41 & 1) == 0)
    {
      swift_bridgeObjectRetain(v32);
      sub_10000CC50(v35, v42);
    }
    Hasher.init(_seed:)(v43, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v43, v33, v32);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v27 = 0;
      v28 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v28 && (v27 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v29 = v17 == v28;
        if (v17 == v28)
          v17 = 0;
        v27 |= v29;
        v30 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v30 == -1);
      v18 = __clz(__rbit64(~v30)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v33;
    v19[1] = v32;
    v20 = *(_QWORD *)(v8 + 56) + 32 * v18;
    *(_QWORD *)v20 = v35;
    *(_OWORD *)(v20 + 8) = v42;
    *(_BYTE *)(v20 + 24) = v36;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v38;
  v24 = (_QWORD *)(v5 + 64);
  if ((v41 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v37 = 1 << *(_BYTE *)(v5 + 32);
  if (v37 >= 64)
    bzero(v24, ((unint64_t)(v37 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v37;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_100088F50(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8(&qword_10031C5F8);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_retain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_100089264(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  uint64_t v38;
  char v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8((uint64_t *)&unk_10032A6B0);
  v39 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v38 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v36 = v3;
  v37 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v37)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v38 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v37)
        goto LABEL_36;
      v24 = *(_QWORD *)(v38 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v37)
        {
LABEL_36:
          swift_release(v5);
          v3 = v36;
          if ((v39 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v38 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v37)
              goto LABEL_36;
            v24 = *(_QWORD *)(v38 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(void **)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v39 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      v34 = v33;
    }
    Hasher.init(_seed:)(v40, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v40, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v3 = v36;
  v23 = (_QWORD *)(v5 + 64);
  if ((v39 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v35 = 1 << *(_BYTE *)(v5 + 32);
  if (v35 >= 64)
    bzero(v23, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v35;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

uint64_t sub_100089570(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  int64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  char v36;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8(&qword_10032A750);
  result = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = result;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = a2;
    v35 = v3;
    v9 = 0;
    v10 = (uint64_t *)(v5 + 64);
    v11 = 1 << *(_BYTE *)(v5 + 32);
    v33 = -1 << v11;
    v34 = v11;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v13 = v12 & *(_QWORD *)(v5 + 64);
    v14 = (unint64_t)(v11 + 63) >> 6;
    v15 = result + 64;
    while (1)
    {
      if (v13)
      {
        v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        v19 = v18 | (v9 << 6);
      }
      else
      {
        v20 = v9 + 1;
        if (__OFADD__(v9, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v20 >= v14)
          goto LABEL_34;
        v21 = v10[v20];
        ++v9;
        if (!v21)
        {
          v9 = v20 + 1;
          if (v20 + 1 >= v14)
            goto LABEL_34;
          v21 = v10[v9];
          if (!v21)
          {
            v22 = v20 + 2;
            if (v22 >= v14)
            {
LABEL_34:
              if ((v36 & 1) == 0)
              {
                result = swift_release(v5);
                v3 = v35;
                goto LABEL_41;
              }
              if (v34 >= 64)
                bzero((void *)(v5 + 64), 8 * v14);
              else
                *v10 = v33;
              v3 = v35;
              *(_QWORD *)(v5 + 16) = 0;
              break;
            }
            v21 = v10[v22];
            if (!v21)
            {
              while (1)
              {
                v9 = v22 + 1;
                if (__OFADD__(v22, 1))
                  goto LABEL_43;
                if (v9 >= v14)
                  goto LABEL_34;
                v21 = v10[v9];
                ++v22;
                if (v21)
                  goto LABEL_24;
              }
            }
            v9 = v22;
          }
        }
LABEL_24:
        v13 = (v21 - 1) & v21;
        v19 = __clz(__rbit64(v21)) + (v9 << 6);
      }
      v23 = 8 * v19;
      v24 = *(_QWORD *)(*(_QWORD *)(v5 + 48) + v23);
      v25 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + v23);
      result = static Hasher._hash(seed:_:)(*(_QWORD *)(v8 + 40), v24);
      v26 = -1 << *(_BYTE *)(v8 + 32);
      v27 = result & ~v26;
      v28 = v27 >> 6;
      if (((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6))) != 0)
      {
        v16 = __clz(__rbit64((-1 << v27) & ~*(_QWORD *)(v15 + 8 * (v27 >> 6)))) | v27 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v29 = 0;
        v30 = (unint64_t)(63 - v26) >> 6;
        do
        {
          if (++v28 == v30 && (v29 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v31 = v28 == v30;
          if (v28 == v30)
            v28 = 0;
          v29 |= v31;
          v32 = *(_QWORD *)(v15 + 8 * v28);
        }
        while (v32 == -1);
        v16 = __clz(__rbit64(~v32)) + (v28 << 6);
      }
      *(_QWORD *)(v15 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      v17 = 8 * v16;
      *(_QWORD *)(*(_QWORD *)(v8 + 48) + v17) = v24;
      *(_QWORD *)(*(_QWORD *)(v8 + 56) + v17) = v25;
      ++*(_QWORD *)(v8 + 16);
    }
  }
  result = swift_release(v5);
LABEL_41:
  *v3 = v8;
  return result;
}

void sub_100089814(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  _QWORD *v24;
  unint64_t v25;
  int64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  int64_t v44;
  _QWORD *v45;
  uint64_t i;
  char v47;
  uint64_t v48;
  int64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  _QWORD v53[10];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8(&qword_10031C608);
  v47 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v45 = (_QWORD *)(v5 + 64);
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v43 = v3;
  v44 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  v48 = v8;
  for (i = v5; ; v5 = i)
  {
    if (v11)
    {
      v21 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v49 = v13;
      v22 = v21 | (v13 << 6);
      goto LABEL_34;
    }
    v23 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v23 >= v44)
      break;
    v24 = v45;
    v25 = v45[v23];
    v26 = v13 + 1;
    if (!v25)
    {
      v26 = v13 + 2;
      if (v13 + 2 >= v44)
        goto LABEL_36;
      v25 = v45[v26];
      if (!v25)
      {
        v27 = v13 + 3;
        if (v13 + 3 >= v44)
        {
LABEL_36:
          swift_release(v5);
          v3 = v43;
          if ((v47 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v25 = v45[v27];
        if (!v25)
        {
          while (1)
          {
            v26 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v26 >= v44)
              goto LABEL_36;
            v25 = v45[v26];
            ++v27;
            if (v25)
              goto LABEL_33;
          }
        }
        v26 = v13 + 3;
      }
    }
LABEL_33:
    v11 = (v25 - 1) & v25;
    v49 = v26;
    v22 = __clz(__rbit64(v25)) + (v26 << 6);
LABEL_34:
    v32 = *(_QWORD *)(v5 + 56);
    v33 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v22);
    v34 = *v33;
    v35 = v33[1];
    v36 = (uint64_t *)(v32 + 72 * v22);
    v37 = v36[1];
    v38 = v36[3];
    v50 = *v36;
    v51 = v36[2];
    v39 = v36[4];
    v52 = *(_OWORD *)(v36 + 5);
    v41 = v36[7];
    v40 = v36[8];
    if ((v47 & 1) == 0)
    {
      swift_bridgeObjectRetain(v41);
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRetain(v35);
      swift_bridgeObjectRetain(v37);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v39);
      v8 = v48;
      swift_bridgeObjectRetain(v52);
    }
    Hasher.init(_seed:)(v53, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v53, v34, v35);
    v14 = Hasher._finalize()();
    v8 = v48;
    v15 = -1 << *(_BYTE *)(v48 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v28 = 0;
      v29 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v29 && (v28 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v30 = v17 == v29;
        if (v17 == v29)
          v17 = 0;
        v28 |= v30;
        v31 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v31 == -1);
      v18 = __clz(__rbit64(~v31)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v48 + 48) + 16 * v18);
    *v19 = v34;
    v19[1] = v35;
    v20 = *(_QWORD *)(v48 + 56) + 72 * v18;
    v13 = v49;
    *(_QWORD *)v20 = v50;
    *(_QWORD *)(v20 + 8) = v37;
    *(_QWORD *)(v20 + 16) = v51;
    *(_QWORD *)(v20 + 24) = v38;
    *(_QWORD *)(v20 + 32) = v39;
    *(_OWORD *)(v20 + 40) = v52;
    *(_QWORD *)(v20 + 56) = v41;
    *(_QWORD *)(v20 + 64) = v40;
    ++*(_QWORD *)(v48 + 16);
  }
  swift_release(v5);
  v3 = v43;
  v24 = v45;
  if ((v47 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v42 = 1 << *(_BYTE *)(v5 + 32);
  if (v42 >= 64)
    bzero(v24, ((unint64_t)(v42 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v24 = -1 << v42;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_100089BB4(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8(&qword_10031C600);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_retain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void sub_100089EC8(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __n128 v19;
  int64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  _QWORD *v25;
  unint64_t v26;
  int64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  int64_t v40;
  _QWORD *v41;
  int v42;
  _OWORD v43[2];

  v3 = v2;
  v6 = type metadata accessor for CodingUserInfoKey(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *v3;
  if (*(_QWORD *)(*v3 + 24) > a1)
    a1 = *(_QWORD *)(*v3 + 24);
  sub_100003DB8(&qword_10031C620);
  v42 = a2;
  v12 = static _DictionaryStorage.resize(original:capacity:move:)(v11, a1, a2);
  v13 = v12;
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_43;
  v14 = 1 << *(_BYTE *)(v11 + 32);
  v15 = *(_QWORD *)(v11 + 64);
  v41 = (_QWORD *)(v11 + 64);
  if (v14 < 64)
    v16 = ~(-1 << v14);
  else
    v16 = -1;
  v17 = v16 & v15;
  v39 = v3;
  v40 = (unint64_t)(v14 + 63) >> 6;
  v18 = v12 + 64;
  v19 = swift_retain(v11);
  v20 = 0;
  while (1)
  {
    if (v17)
    {
      v22 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v23 = v22 | (v20 << 6);
      goto LABEL_24;
    }
    v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v24 >= v40)
      break;
    v25 = v41;
    v26 = v41[v24];
    ++v20;
    if (!v26)
    {
      v20 = v24 + 1;
      if (v24 + 1 >= v40)
        goto LABEL_36;
      v26 = v41[v20];
      if (!v26)
      {
        v27 = v24 + 2;
        if (v27 >= v40)
        {
LABEL_36:
          swift_release(v11);
          v3 = v39;
          if ((v42 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v26 = v41[v27];
        if (!v26)
        {
          while (1)
          {
            v20 = v27 + 1;
            if (__OFADD__(v27, 1))
              goto LABEL_45;
            if (v20 >= v40)
              goto LABEL_36;
            v26 = v41[v20];
            ++v27;
            if (v26)
              goto LABEL_23;
          }
        }
        v20 = v27;
      }
    }
LABEL_23:
    v17 = (v26 - 1) & v26;
    v23 = __clz(__rbit64(v26)) + (v20 << 6);
LABEL_24:
    v28 = *(_QWORD *)(v7 + 72);
    v29 = *(_QWORD *)(v11 + 48) + v28 * v23;
    if ((v42 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 32))(v10, v29, v6, v19);
      sub_10003E704((_OWORD *)(*(_QWORD *)(v11 + 56) + 32 * v23), v43);
    }
    else
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))(v10, v29, v6, v19);
      sub_10008CAC4(*(_QWORD *)(v11 + 56) + 32 * v23, (uint64_t)v43);
    }
    v30 = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(v13 + 40), v6, &protocol witness table for CodingUserInfoKey);
    v31 = -1 << *(_BYTE *)(v13 + 32);
    v32 = v30 & ~v31;
    v33 = v32 >> 6;
    if (((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6))) != 0)
    {
      v21 = __clz(__rbit64((-1 << v32) & ~*(_QWORD *)(v18 + 8 * (v32 >> 6)))) | v32 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v34 = 0;
      v35 = (unint64_t)(63 - v31) >> 6;
      do
      {
        if (++v33 == v35 && (v34 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v36 = v33 == v35;
        if (v33 == v35)
          v33 = 0;
        v34 |= v36;
        v37 = *(_QWORD *)(v18 + 8 * v33);
      }
      while (v37 == -1);
      v21 = __clz(__rbit64(~v37)) + (v33 << 6);
    }
    *(_QWORD *)(v18 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
    (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(*(_QWORD *)(v13 + 48) + v28 * v21, v10, v6);
    sub_10003E704(v43, (_OWORD *)(*(_QWORD *)(v13 + 56) + 32 * v21));
    ++*(_QWORD *)(v13 + 16);
  }
  swift_release(v11);
  v3 = v39;
  v25 = v41;
  if ((v42 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v38 = 1 << *(_BYTE *)(v11 + 32);
  if (v38 >= 64)
    bzero(v25, ((unint64_t)(v38 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v25 = -1 << v38;
  *(_QWORD *)(v11 + 16) = 0;
LABEL_43:
  swift_release(v11);
  *v3 = v13;
}

void sub_10008A24C(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64_t v13;
  Swift::Int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  char v26;
  unint64_t v27;
  BOOL v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  _QWORD v38[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_100003DB8(&qword_10031C610);
  v37 = a2;
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_43;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v36 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v35 = (unint64_t)(v9 + 63) >> 6;
  v12 = v7 + 64;
  swift_retain(v5);
  v13 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v13 << 6);
      goto LABEL_34;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
LABEL_44:
      __break(1u);
LABEL_45:
      __break(1u);
      return;
    }
    if (v22 >= v35)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v36 + 8 * v22);
    ++v13;
    if (!v24)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v35)
        goto LABEL_36;
      v24 = *(_QWORD *)(v36 + 8 * v13);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v35)
        {
LABEL_36:
          swift_release(v5);
          if ((v37 & 1) == 0)
            goto LABEL_43;
          goto LABEL_39;
        }
        v24 = *(_QWORD *)(v36 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v13 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_45;
            if (v13 >= v35)
              goto LABEL_36;
            v24 = *(_QWORD *)(v36 + 8 * v13);
            ++v25;
            if (v24)
              goto LABEL_33;
          }
        }
        v13 = v25;
      }
    }
LABEL_33:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v13 << 6);
LABEL_34:
    v30 = (uint64_t *)(*(_QWORD *)(v5 + 48) + 16 * v21);
    v32 = *v30;
    v31 = v30[1];
    v33 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v21);
    if ((v37 & 1) == 0)
    {
      swift_bridgeObjectRetain(v30[1]);
      swift_bridgeObjectRetain(v33);
    }
    Hasher.init(_seed:)(v38, *(_QWORD *)(v8 + 40));
    String.hash(into:)(v38, v32, v31);
    v14 = Hasher._finalize()();
    v15 = -1 << *(_BYTE *)(v8 + 32);
    v16 = v14 & ~v15;
    v17 = v16 >> 6;
    if (((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6))) != 0)
    {
      v18 = __clz(__rbit64((-1 << v16) & ~*(_QWORD *)(v12 + 8 * (v16 >> 6)))) | v16 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v26 = 0;
      v27 = (unint64_t)(63 - v15) >> 6;
      do
      {
        if (++v17 == v27 && (v26 & 1) != 0)
        {
          __break(1u);
          goto LABEL_44;
        }
        v28 = v17 == v27;
        if (v17 == v27)
          v17 = 0;
        v26 |= v28;
        v29 = *(_QWORD *)(v12 + 8 * v17);
      }
      while (v29 == -1);
      v18 = __clz(__rbit64(~v29)) + (v17 << 6);
    }
    *(_QWORD *)(v12 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v18;
    v19 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v18);
    *v19 = v32;
    v19[1] = v31;
    *(_QWORD *)(*(_QWORD *)(v8 + 56) + 8 * v18) = v33;
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((v37 & 1) == 0)
    goto LABEL_43;
LABEL_39:
  v34 = 1 << *(_BYTE *)(v5 + 32);
  if (v34 >= 64)
    bzero(v23, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v34;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_43:
  swift_release(v5);
  *v3 = v8;
}

void *sub_10008A560()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;

  v1 = v0;
  sub_100003DB8(&qword_10032A710);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v20 = __clz(__rbit64(v18));
    v12 = (v18 - 1) & v18;
    v15 = v20 + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 56) + v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 56) + v15) = v16;
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10008A6E8()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;

  v1 = v0;
  sub_100003DB8(&qword_10031C648);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v15);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v15) = v16;
    swift_retain(v16);
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_10008A888()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  sub_100003DB8(&qword_10031C640);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = *(_QWORD *)(v2 + 56) + 72 * v15;
    v17 = *(_QWORD *)v16;
    v18 = *(_QWORD *)(v16 + 8);
    v19 = *(_QWORD *)(v16 + 16);
    v21 = *(_QWORD *)(v16 + 40);
    v20 = *(_QWORD *)(v16 + 48);
    v22 = *(_QWORD *)(v16 + 56);
    v23 = *(_BYTE *)(v16 + 64);
    v24 = *(_OWORD *)(v16 + 24);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    v25 = *(_QWORD *)(v4 + 56) + 72 * v15;
    *(_QWORD *)v25 = v17;
    *(_QWORD *)(v25 + 8) = v18;
    *(_QWORD *)(v25 + 16) = v19;
    *(_OWORD *)(v25 + 24) = v24;
    *(_QWORD *)(v25 + 40) = v21;
    *(_QWORD *)(v25 + 48) = v20;
    *(_QWORD *)(v25 + 56) = v22;
    *(_BYTE *)(v25 + 64) = v23;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRetain(v22);
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10008AA80()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;

  v1 = v0;
  sub_100003DB8(&qword_10031C680);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v18);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v18) = v19;
    v20 = v19;
    swift_retain(*((_QWORD *)&v19 + 1));
    swift_retain(v17);
    swift_retain(v20);
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10008AC44()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100003DB8(&qword_10031C638);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_BYTE *)v19;
    v21 = *(_QWORD *)(v19 + 8);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = *(_QWORD *)(v4 + 56) + v18;
    *(_BYTE *)v22 = v20;
    *(_QWORD *)(v22 + 8) = v21;
    swift_retain(v21);
    swift_retain(v17);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10008AE00()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;

  v1 = v0;
  sub_100003DB8(&qword_10031C630);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v23 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v23 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v23);
    ++v9;
    if (!v24)
    {
      v9 = v23 + 1;
      if (v23 + 1 >= v13)
        goto LABEL_26;
      v24 = *(_QWORD *)(v6 + 8 * v9);
      if (!v24)
        break;
    }
LABEL_25:
    v12 = (v24 - 1) & v24;
    v15 = __clz(__rbit64(v24)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 16 * v15;
    v19 = (uint64_t *)(*(_QWORD *)(v2 + 56) + v18);
    v20 = *v19;
    v21 = v19[1];
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v22 = (_QWORD *)(*(_QWORD *)(v4 + 56) + v18);
    *v22 = v20;
    v22[1] = v21;
    swift_retain(v17);
    swift_bridgeObjectRetain(v21);
  }
  v25 = v23 + 2;
  if (v25 >= v13)
    goto LABEL_26;
  v24 = *(_QWORD *)(v6 + 8 * v25);
  if (v24)
  {
    v9 = v25;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v24 = *(_QWORD *)(v6 + 8 * v9);
    ++v25;
    if (v24)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_10008AFB4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  _OWORD v26[2];

  v1 = v0;
  sub_100003DB8(&qword_10031C628);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
    result = (void *)swift_release(v2);
LABEL_28:
    *v1 = v4;
    return result;
  }
  v25 = v1;
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    sub_10008CAC4(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v26);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = v19;
    v21[1] = v18;
    sub_10003E704(v26, (_OWORD *)(*(_QWORD *)(v4 + 56) + v20));
    result = (void *)swift_bridgeObjectRetain(v18);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
  {
LABEL_26:
    result = (void *)swift_release(v2);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

void sub_10008B198()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;

  v1 = v0;
  sub_100003DB8((uint64_t *)&unk_10032A6F0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v19 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v19 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v19);
    ++v9;
    if (!v20)
    {
      v9 = v19 + 1;
      if (v19 + 1 >= v13)
        goto LABEL_26;
      v20 = *(_QWORD *)(v6 + 8 * v9);
      if (!v20)
        break;
    }
LABEL_25:
    v12 = (v20 - 1) & v20;
    v15 = __clz(__rbit64(v20)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    v18 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v18;
    swift_retain(v17);
    swift_bridgeObjectRetain(v18);
  }
  v21 = v19 + 2;
  if (v21 >= v13)
    goto LABEL_26;
  v20 = *(_QWORD *)(v6 + 8 * v21);
  if (v20)
  {
    v9 = v21;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v20 = *(_QWORD *)(v6 + 8 * v9);
    ++v21;
    if (v20)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_10008B340()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _OWORD v20[2];

  v1 = v0;
  sub_100003DB8(&qword_10032A6E0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v17 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v17 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v9;
    if (!v18)
    {
      v9 = v17 + 1;
      if (v17 + 1 >= v13)
        goto LABEL_26;
      v18 = *(_QWORD *)(v6 + 8 * v9);
      if (!v18)
        break;
    }
LABEL_25:
    v12 = (v18 - 1) & v18;
    v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_12:
    v16 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v15);
    sub_10008CAC4(*(_QWORD *)(v2 + 56) + 32 * v15, (uint64_t)v20);
    *(_BYTE *)(*(_QWORD *)(v4 + 48) + v15) = v16;
    result = sub_10003E704(v20, (_OWORD *)(*(_QWORD *)(v4 + 56) + 32 * v15));
  }
  v19 = v17 + 2;
  if (v19 >= v13)
    goto LABEL_26;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
    v9 = v19;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v18 = *(_QWORD *)(v6 + 8 * v9);
    ++v19;
    if (v18)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10008B4FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;

  v1 = v0;
  sub_100003DB8((uint64_t *)&unk_10032A6D0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 48) + 8 * v15);
    v18 = 40 * v15;
    v19 = *(_QWORD *)(v2 + 56) + v18;
    v20 = *(_QWORD *)(v19 + 16);
    v21 = *(_BYTE *)(v19 + 24);
    v22 = *(_BYTE *)(v19 + 25);
    v23 = *(_QWORD *)(v19 + 32);
    v24 = *(_OWORD *)v19;
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = v17;
    v25 = *(_QWORD *)(v4 + 56) + v18;
    *(_OWORD *)v25 = v24;
    *(_QWORD *)(v25 + 16) = v20;
    *(_BYTE *)(v25 + 24) = v21;
    *(_BYTE *)(v25 + 25) = v22;
    *(_QWORD *)(v25 + 32) = v23;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v20);
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_10008B6D4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  __int128 v29;

  v1 = v0;
  sub_100003DB8(&qword_10031C618);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v26 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v26 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v26);
    ++v9;
    if (!v27)
    {
      v9 = v26 + 1;
      if (v26 + 1 >= v13)
        goto LABEL_26;
      v27 = *(_QWORD *)(v6 + 8 * v9);
      if (!v27)
        break;
    }
LABEL_25:
    v12 = (v27 - 1) & v27;
    v15 = __clz(__rbit64(v27)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v19 = *v17;
    v18 = v17[1];
    v20 = 32 * v15;
    v21 = *(_QWORD *)(v2 + 56) + v20;
    v22 = *(_QWORD *)v21;
    v23 = *(_BYTE *)(v21 + 24);
    v24 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    v29 = *(_OWORD *)(v21 + 8);
    *v24 = v19;
    v24[1] = v18;
    v25 = *(_QWORD *)(v4 + 56) + v20;
    *(_QWORD *)v25 = v22;
    *(_OWORD *)(v25 + 8) = v29;
    *(_BYTE *)(v25 + 24) = v23;
    swift_bridgeObjectRetain(v18);
    result = (void *)sub_10000CC50(v22, v29);
  }
  v28 = v26 + 2;
  if (v28 >= v13)
    goto LABEL_26;
  v27 = *(_QWORD *)(v6 + 8 * v28);
  if (v27)
  {
    v9 = v28;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v28 + 1;
    if (__OFADD__(v28, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v27 = *(_QWORD *)(v6 + 8 * v9);
    ++v28;
    if (v27)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10008B8B4()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100003DB8(&qword_10031C5F8);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_retain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

unint64_t sub_10008BA68()
{
  unint64_t result;

  result = qword_10031C5F0;
  if (!qword_10031C5F0)
  {
    result = swift_getWitnessTable(&unk_1002561CC, &type metadata for QuestionnaireError);
    atomic_store(result, (unint64_t *)&qword_10031C5F0);
  }
  return result;
}

id sub_10008BAAC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100003DB8((uint64_t *)&unk_10032A6B0);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (id)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (id)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(void **)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    result = v20;
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10008BC5C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  int64_t v20;
  unint64_t v21;

  v1 = v0;
  sub_100003DB8(&qword_10032A750);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v18 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      v9 = v18 + 1;
      if (v18 + 1 >= v13)
        goto LABEL_26;
      v19 = *(_QWORD *)(v6 + 8 * v9);
      if (!v19)
        break;
    }
LABEL_25:
    v21 = __clz(__rbit64(v19));
    v12 = (v19 - 1) & v19;
    v15 = v21 + (v9 << 6);
LABEL_12:
    v16 = 8 * v15;
    v17 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 48) + v16) = *(_QWORD *)(*(_QWORD *)(v2 + 48) + v16);
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v16) = v17;
  }
  v20 = v18 + 2;
  if (v20 >= v13)
    goto LABEL_26;
  v19 = *(_QWORD *)(v6 + 8 * v20);
  if (v19)
  {
    v9 = v20;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v19 = *(_QWORD *)(v6 + 8 * v9);
    ++v20;
    if (v19)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void sub_10008BDE8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  unint64_t v5;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t *v33;
  int64_t v34;
  uint64_t v35;

  sub_100003DB8(&qword_10031C608);
  v33 = v0;
  v1 = *v0;
  v2 = static _DictionaryStorage.copy(original:)(*v0);
  v3 = v2;
  if (!*(_QWORD *)(v1 + 16))
  {
LABEL_26:
    swift_release(v1);
    *v33 = v3;
    return;
  }
  v4 = (void *)(v2 + 64);
  v5 = (unint64_t)((1 << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  if (v3 != v1 || (unint64_t)v4 >= v1 + 64 + 8 * v5)
    memmove(v4, (const void *)(v1 + 64), 8 * v5);
  v35 = v1 + 64;
  v7 = 0;
  *(_QWORD *)(v3 + 16) = *(_QWORD *)(v1 + 16);
  v8 = 1 << *(_BYTE *)(v1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(v1 + 64);
  v34 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v7 << 6);
      goto LABEL_12;
    }
    v30 = v7 + 1;
    if (__OFADD__(v7, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v30 >= v34)
      goto LABEL_26;
    v31 = *(_QWORD *)(v35 + 8 * v30);
    ++v7;
    if (!v31)
    {
      v7 = v30 + 1;
      if (v30 + 1 >= v34)
        goto LABEL_26;
      v31 = *(_QWORD *)(v35 + 8 * v7);
      if (!v31)
        break;
    }
LABEL_25:
    v10 = (v31 - 1) & v31;
    v12 = __clz(__rbit64(v31)) + (v7 << 6);
LABEL_12:
    v13 = 16 * v12;
    v14 = (uint64_t *)(*(_QWORD *)(v1 + 48) + 16 * v12);
    v15 = *v14;
    v16 = v14[1];
    v17 = 72 * v12;
    v18 = *(_QWORD *)(v1 + 56) + v17;
    v19 = *(_QWORD *)v18;
    v20 = *(_QWORD *)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    v22 = *(_QWORD *)(v18 + 24);
    v23 = *(_QWORD *)(v18 + 32);
    v24 = *(_QWORD *)(v18 + 56);
    v25 = *(_QWORD *)(v18 + 64);
    v26 = (_QWORD *)(*(_QWORD *)(v3 + 48) + v13);
    v27 = *(_OWORD *)(v18 + 40);
    *v26 = v15;
    v26[1] = v16;
    v28 = *(_QWORD *)(v3 + 56) + v17;
    *(_QWORD *)v28 = v19;
    *(_QWORD *)(v28 + 8) = v20;
    *(_QWORD *)(v28 + 16) = v21;
    *(_QWORD *)(v28 + 24) = v22;
    *(_QWORD *)(v28 + 32) = v23;
    *(_OWORD *)(v28 + 40) = v27;
    *(_QWORD *)(v28 + 56) = v24;
    *(_QWORD *)(v28 + 64) = v25;
    v29 = v27;
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v29);
  }
  v32 = v30 + 2;
  if (v32 >= v34)
    goto LABEL_26;
  v31 = *(_QWORD *)(v35 + 8 * v32);
  if (v31)
  {
    v7 = v32;
    goto LABEL_25;
  }
  while (1)
  {
    v7 = v32 + 1;
    if (__OFADD__(v32, 1))
      break;
    if (v7 >= v34)
      goto LABEL_26;
    v31 = *(_QWORD *)(v35 + 8 * v7);
    ++v32;
    if (v31)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void sub_10008C018()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;

  v1 = v0;
  sub_100003DB8(&qword_10031C600);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    swift_release(v2);
    *v1 = v4;
    return;
  }
  v5 = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)v5 >= v2 + 64 + 8 * v7)
    memmove(v5, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v22 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v22 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v22);
    ++v9;
    if (!v23)
    {
      v9 = v22 + 1;
      if (v22 + 1 >= v13)
        goto LABEL_26;
      v23 = *(_QWORD *)(v6 + 8 * v9);
      if (!v23)
        break;
    }
LABEL_25:
    v12 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (_QWORD *)(*(_QWORD *)(v2 + 48) + 16 * v15);
    v18 = v17[1];
    v19 = 8 * v15;
    v20 = *(_QWORD *)(*(_QWORD *)(v2 + 56) + v19);
    v21 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v21 = *v17;
    v21[1] = v18;
    *(_QWORD *)(*(_QWORD *)(v4 + 56) + v19) = v20;
    swift_bridgeObjectRetain(v18);
    swift_retain(v20);
  }
  v24 = v22 + 2;
  if (v24 >= v13)
    goto LABEL_26;
  v23 = *(_QWORD *)(v6 + 8 * v24);
  if (v23)
  {
    v9 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v23 = *(_QWORD *)(v6 + 8 * v9);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
}

void *sub_10008C1CC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *result;
  unint64_t v11;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  uint64_t *v25;
  uint64_t v26;
  _OWORD v27[2];

  v1 = v0;
  v2 = type metadata accessor for CodingUserInfoKey(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100003DB8(&qword_10031C620);
  v7 = *v0;
  v8 = static _DictionaryStorage.copy(original:)(*v0);
  v9 = v8;
  if (!*(_QWORD *)(v7 + 16))
  {
    result = (void *)swift_release(v7);
LABEL_28:
    *v1 = v9;
    return result;
  }
  v25 = v1;
  result = (void *)(v8 + 64);
  v11 = (unint64_t)((1 << *(_BYTE *)(v9 + 32)) + 63) >> 6;
  if (v9 != v7 || (unint64_t)result >= v7 + 64 + 8 * v11)
    result = memmove(result, (const void *)(v7 + 64), 8 * v11);
  v26 = v7 + 64;
  v13 = 0;
  *(_QWORD *)(v9 + 16) = *(_QWORD *)(v7 + 16);
  v14 = 1 << *(_BYTE *)(v7 + 32);
  v15 = -1;
  if (v14 < 64)
    v15 = ~(-1 << v14);
  v16 = v15 & *(_QWORD *)(v7 + 64);
  v17 = (unint64_t)(v14 + 63) >> 6;
  while (1)
  {
    if (v16)
    {
      v18 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      v19 = v18 | (v13 << 6);
      goto LABEL_12;
    }
    v22 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_30;
    }
    if (v22 >= v17)
      goto LABEL_26;
    v23 = *(_QWORD *)(v26 + 8 * v22);
    ++v13;
    if (!v23)
    {
      v13 = v22 + 1;
      if (v22 + 1 >= v17)
        goto LABEL_26;
      v23 = *(_QWORD *)(v26 + 8 * v13);
      if (!v23)
        break;
    }
LABEL_25:
    v16 = (v23 - 1) & v23;
    v19 = __clz(__rbit64(v23)) + (v13 << 6);
LABEL_12:
    v20 = *(_QWORD *)(v3 + 72) * v19;
    (*(void (**)(char *, unint64_t, uint64_t))(v3 + 16))(v6, *(_QWORD *)(v7 + 48) + v20, v2);
    v21 = 32 * v19;
    sub_10008CAC4(*(_QWORD *)(v7 + 56) + v21, (uint64_t)v27);
    (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v9 + 48) + v20, v6, v2);
    result = sub_10003E704(v27, (_OWORD *)(*(_QWORD *)(v9 + 56) + v21));
  }
  v24 = v22 + 2;
  if (v24 >= v17)
  {
LABEL_26:
    result = (void *)swift_release(v7);
    v1 = v25;
    goto LABEL_28;
  }
  v23 = *(_QWORD *)(v26 + 8 * v24);
  if (v23)
  {
    v13 = v24;
    goto LABEL_25;
  }
  while (1)
  {
    v13 = v24 + 1;
    if (__OFADD__(v24, 1))
      break;
    if (v13 >= v17)
      goto LABEL_26;
    v23 = *(_QWORD *)(v26 + 8 * v13);
    ++v24;
    if (v23)
      goto LABEL_25;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t sub_10008C408(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((a2 & 1) == 0)
    return (a4 & 1) == 0 && a1 == a3;
  if ((a4 & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 16);
    v8 = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)(a3 + 24);
    if (v7 == *(_QWORD *)(a3 + 16) && v8 == v9)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *(_QWORD *)(a3 + 16), v9, 0);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10008C454(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if ((unint64_t)a1 >> 62)
    goto LABEL_18;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v4)
  {
    v5 = *(_QWORD *)(a2 + 48);
    a2 = *(_QWORD *)(a2 + 56);
    v6 = 4;
    while (1)
    {
      v7 = v6 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v8 = specialized _ArrayBuffer._getElementSlowPath(_:)(v6 - 4, a1);
      v9 = __OFADD__(v7, 1);
      v10 = v6 - 3;
      if (v9)
        goto LABEL_17;
LABEL_10:
      if (a2)
      {
        v11 = *(_QWORD *)(v8 + 16);
        v12 = *(_QWORD *)(v8 + 24);
        v13 = v11 == v5 && a2 == v12;
        if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v5, a2, 0) & 1) != 0)
        {
          swift_bridgeObjectRelease(a1);
          return v8;
        }
      }
      swift_release(v8);
      ++v6;
      if (v10 == v4)
        goto LABEL_22;
    }
    v8 = *(_QWORD *)(a1 + 8 * v6);
    swift_retain(v8);
    v9 = __OFADD__(v7, 1);
    v10 = v6 - 3;
    if (!v9)
      goto LABEL_10;
LABEL_17:
    __break(1u);
LABEL_18:
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v14);
  }
LABEL_22:
  swift_bridgeObjectRelease(a1);
  return 0;
}

uint64_t sub_10008C580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v16;

  if ((unint64_t)a1 >> 62)
    goto LABEL_19;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  while (v6)
  {
    v7 = 4;
    while (1)
    {
      v8 = v7 - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, a1);
      v10 = __OFADD__(v8, 1);
      v11 = v7 - 3;
      if (v10)
        goto LABEL_18;
LABEL_9:
      v12 = *(_QWORD *)(v9 + 16);
      v13 = *(_QWORD *)(v9 + 24);
      v14 = v12 == a2 && v13 == a3;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, a2, a3, 0) & 1) != 0)
      {
        swift_bridgeObjectRelease(a1);
        return v9;
      }
      swift_release(v9);
      ++v7;
      if (v11 == v6)
        goto LABEL_15;
    }
    v9 = *(_QWORD *)(a1 + 8 * v7);
    swift_retain(v9);
    v10 = __OFADD__(v8, 1);
    v11 = v7 - 3;
    if (!v10)
      goto LABEL_9;
LABEL_18:
    __break(1u);
LABEL_19:
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v6 = _CocoaArrayWrapper.endIndex.getter(v16);
  }
LABEL_15:
  swift_bridgeObjectRelease(a1);
  return 0;
}

_QWORD *sub_10008C6A8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, __n128))
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  char v10;
  char v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v16;

  sub_10017E394(0, 0, 0);
  v3 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  v16 = a1;
  if (v3)
  {
    v4 = 0;
    v5 = (_QWORD *)(a1 + 40);
    do
    {
      v7 = *(v5 - 1);
      v6 = *v5;
      v8 = swift_bridgeObjectRetain(*v5);
      v9 = a2(v4, v7, v6, v8);
      v11 = v10;
      swift_bridgeObjectRelease(v6);
      v13 = _swiftEmptyArrayStorage[2];
      v12 = _swiftEmptyArrayStorage[3];
      if (v13 >= v12 >> 1)
        sub_10017E394(v12 > 1, v13 + 1, 1);
      ++v4;
      v5 += 2;
      _swiftEmptyArrayStorage[2] = v13 + 1;
      v14 = &_swiftEmptyArrayStorage[2 * v13];
      v14[4] = v9;
      *((_BYTE *)v14 + 40) = v11 & 1;
    }
    while (v3 != v4);
  }
  swift_bridgeObjectRelease(v16);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10008C7CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  sub_10000B458(a2 + 40, (uint64_t)&v21, &qword_100319D70);
  v3 = sub_10000B458((uint64_t)&v21, (uint64_t)&v22, &qword_100319D70);
  v5 = v22;
  if (v22)
  {
    __chkstk_darwin(v3, v4);
    sub_100034218(&v21);
    v6 = sub_10008C6A8(v5, (uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))sub_10008CABC);
    sub_100042AF8(&v21);
    return (uint64_t)v6;
  }
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v8 = _CocoaArrayWrapper.endIndex.getter(v20);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v8 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = _swiftEmptyArrayStorage;
  if (!v8)
    return (uint64_t)v6;
  result = sub_10017E394(0, v8 & ~(v8 >> 63), 0);
  if ((v8 & 0x8000000000000000) == 0)
  {
    v6 = _swiftEmptyArrayStorage;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v9 = 0;
      do
      {
        v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v9, a1);
        v12 = _swiftEmptyArrayStorage[2];
        v11 = _swiftEmptyArrayStorage[3];
        if (v12 >= v11 >> 1)
          sub_10017E394(v11 > 1, v12 + 1, 1);
        ++v9;
        _swiftEmptyArrayStorage[2] = v12 + 1;
        v13 = &_swiftEmptyArrayStorage[2 * v12];
        v13[4] = v10;
        *((_BYTE *)v13 + 40) = 1;
      }
      while (v8 != v9);
    }
    else
    {
      v14 = (_QWORD *)(a1 + 32);
      v15 = _swiftEmptyArrayStorage[2];
      v16 = 2 * v15;
      do
      {
        v17 = *v14;
        v18 = _swiftEmptyArrayStorage[3];
        swift_retain(*v14);
        if (v15 >= v18 >> 1)
          sub_10017E394(v18 > 1, v15 + 1, 1);
        _swiftEmptyArrayStorage[2] = v15 + 1;
        v19 = &_swiftEmptyArrayStorage[v16];
        v19[4] = v17;
        *((_BYTE *)v19 + 40) = 1;
        v16 += 2;
        ++v14;
        ++v15;
        --v8;
      }
      while (v8);
    }
    return (uint64_t)v6;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10008C9F4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  swift_bridgeObjectRetain(a1[7]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

_QWORD *sub_10008CA58(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_10008CABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return sub_1000858A8(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t sub_10008CAC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_10008CB00(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for QuestionnaireState.State(a2, a1);
  return a2;
}

_QWORD *sub_10008CB3C(_QWORD *a1)
{
  destroy for QuestionnaireState.State(a1);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransmissionProgress.PayloadType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFA)
    goto LABEL_17;
  if (a2 + 6 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 6) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 6;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 6;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 6;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 7;
  v8 = v6 - 7;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8SOSBuddy8QuestionC9BuiltInIdOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_10008CC4C + 4 * byte_10025168D[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10008CC80 + 4 * byte_100251688[v4]))();
}

uint64_t sub_10008CC80(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008CC88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008CC90);
  return result;
}

uint64_t sub_10008CC9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008CCA4);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10008CCA8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008CCB0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Question.BuiltInId()
{
  return &type metadata for Question.BuiltInId;
}

uint64_t _s8SOSBuddy6OptionC9InputTypeOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10008CD18 + 4 * byte_100251697[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10008CD4C + 4 * byte_100251692[v4]))();
}

uint64_t sub_10008CD4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008CD54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008CD5CLL);
  return result;
}

uint64_t sub_10008CD68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008CD70);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10008CD74(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008CD7C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for QuestionPresentation.Flag()
{
  return &type metadata for QuestionPresentation.Flag;
}

uint64_t sub_10008CD98()
{
  return sub_10008CE28(&qword_10031C650, &qword_10031C658);
}

unint64_t sub_10008CDC0()
{
  unint64_t result;

  result = qword_10031C660;
  if (!qword_10031C660)
  {
    result = swift_getWitnessTable(&unk_100251F90, &type metadata for QuestionPresentation.Flag);
    atomic_store(result, (unint64_t *)&qword_10031C660);
  }
  return result;
}

uint64_t sub_10008CE04()
{
  return sub_10008CE28(&qword_10031C668, &qword_10031C670);
}

uint64_t sub_10008CE28(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100007FAC(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10008CE6C()
{
  unint64_t result;

  result = qword_10031C678;
  if (!qword_10031C678)
  {
    result = swift_getWitnessTable(&unk_100252030, &type metadata for Question.BuiltInId);
    atomic_store(result, (unint64_t *)&qword_10031C678);
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionMinimalView()
{
  return &type metadata for SessionMinimalView;
}

uint64_t sub_10008CEDC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002982F4, 1);
}

uint64_t sub_10008CEEC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *v1;
  if (*v1)
  {
    v4 = 1;
    if (sub_100067058(1u, *(_QWORD *)(v3 + 200)))
    {
      v5 = type metadata accessor for BannerAppearanceModel(0);
      v6 = sub_100056D60(&qword_100316AA8, type metadata accessor for BannerAppearanceModel);
      v4 = EnvironmentObject.init()(v5, v6);
      v8 = v7;
      v9 = type metadata accessor for UIMetrics();
      v10 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
      result = EnvironmentObject.init()(v9, v10);
    }
    else
    {
      v8 = 0;
      result = 0;
      v12 = 0;
    }
    *a1 = v4;
    a1[1] = v8;
    a1[2] = result;
    a1[3] = v12;
  }
  else
  {
    v13 = v1[1];
    v14 = type metadata accessor for BannerAppearanceModel(0);
    v15 = sub_100056D60(&qword_100316AA8, type metadata accessor for BannerAppearanceModel);
    result = EnvironmentObject.error()(0, v13, v14, v15);
    __break(1u);
  }
  return result;
}

unint64_t sub_10008CFE4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031C688;
  if (!qword_10031C688)
  {
    v1 = sub_100007FAC(&qword_10031C690);
    sub_10008D048();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10031C688);
  }
  return result;
}

unint64_t sub_10008D048()
{
  unint64_t result;

  result = qword_10031C698;
  if (!qword_10031C698)
  {
    result = swift_getWitnessTable(&unk_10025499C, &type metadata for SessionLeadingContentView);
    atomic_store(result, (unint64_t *)&qword_10031C698);
  }
  return result;
}

void *ConnectionAssistantCamera.init(earth:coordinate:fraction:offset:rotation:viewport:)@<X0>(float *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>, double a5@<D0>, double a6@<D1>, float a7@<S2>, float32x2_t a8@<D3>, float a9@<S4>, double a10@<D5>)
{
  _BYTE v12[384];

  sub_10008DA1C(a1, a2, a3, (uint64_t)v12, a5, a6, a7, a8, a9, a10);
  return memcpy(a4, v12, 0x180uLL);
}

__n64 ConnectionAssistantCamera.projectUV(point:)(float32x4_t a1)
{
  uint64_t *v1;
  unint64_t v2;
  __n64 result;
  char v4;
  uint64_t v5;
  float v6;

  v2 = ConnectionAssistantCamera.projectNormalized(point:)(a1);
  if ((v4 & 1) == 0)
  {
    if (*v1 && (v5 = v1[1]) != 0)
    {
      v6 = (float)*v1 / (float)v5;
      result.n64_f32[0] = fmaxf(v6, 1.0) * *(float *)&v2;
      if (v6 < 1.0)
        goto LABEL_9;
    }
    else
    {
      result.n64_u32[0] = v2;
    }
    v6 = 1.0;
LABEL_9:
    result.n64_f32[1] = *((float *)&v2 + 1) / v6;
  }
  return result;
}

float ConnectionAssistantCamera.Viewport.normalizedPointSize.getter(uint64_t a1, uint64_t a2, double a3)
{
  float v3;
  float v4;
  float v5;

  if (a1 && a2)
  {
    v3 = a3;
    if (a1 >= a2)
      v4 = (float)a2;
    else
      v4 = (float)a1;
    return (float)((float)(1.0 / v4) * v3) + (float)((float)(1.0 / v4) * v3);
  }
  else
  {
    v5 = a3;
    return v5 + v5;
  }
}

__n64 ConnectionAssistantCamera.Viewport.aspectFillScale.getter(uint64_t a1, uint64_t a2)
{
  float v2;
  __n64 result;
  float v4;

  v2 = 1.0;
  result.n64_u32[0] = 1.0;
  if (a1)
  {
    result.n64_u32[0] = 1.0;
    if (a2)
    {
      v4 = (float)a1 / (float)a2;
      v2 = fminf(v4, 1.0);
      result.n64_f32[0] = fmaxf(v4, 1.0);
    }
  }
  result.n64_f32[1] = 1.0 / v2;
  return result;
}

uint64_t ConnectionAssistantCamera.Viewport.pixelHeight.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t ConnectionAssistantCamera.Viewport.init(pixelWidth:pixelHeight:scale:)(uint64_t a1)
{
  return a1 & ~(a1 >> 63);
}

float ConnectionAssistantCamera.Viewport.aspect.getter(uint64_t a1, uint64_t a2)
{
  float result;

  result = 1.0;
  if (a1)
  {
    if (a2)
      return (float)a1 / (float)a2;
  }
  return result;
}

double ConnectionAssistantCamera.Viewport.mtlViewport.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result;

  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(double *)(a3 + 16) = (double)a1;
  *(double *)(a3 + 24) = (double)a2;
  result = 0.0;
  *(_OWORD *)(a3 + 32) = xmmword_1002520D0;
  return result;
}

BOOL static ConnectionAssistantCamera.Viewport.__derived_struct_equals(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5, double a6)
{
  _BOOL4 v7;

  v7 = a1 == a3 && a2 == a4;
  return a5 == a6 && v7;
}

BOOL sub_10008D238(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16);
}

double ConnectionAssistantCamera.viewport.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 16);
}

float ConnectionAssistantCamera.fieldOfViewX.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 24);
}

float ConnectionAssistantCamera.fieldOfViewY.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 28);
}

float ConnectionAssistantCamera.nearPlane.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 36);
}

float ConnectionAssistantCamera.farPlane.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 40);
}

__n128 ConnectionAssistantCamera.target.getter()
{
  __n128 *v0;

  return v0[4];
}

__n128 ConnectionAssistantRenderer.RenderPipelines.Constants.earthOutlineColor.getter()
{
  __n128 *v0;

  return v0[5];
}

__n128 ConnectionAssistantCamera.left.getter()
{
  __n128 *v0;

  return v0[6];
}

__n128 ConnectionAssistantCamera.up.getter()
{
  __n128 *v0;

  return v0[7];
}

__n128 ConnectionAssistantCamera.cameraLookAt.getter()
{
  __n128 *v0;

  return v0[8];
}

__n128 ConnectionAssistantCamera.cameraView.getter()
{
  __n128 *v0;

  return v0[12];
}

__n128 ConnectionAssistantCamera.cameraProjection.getter()
{
  __n128 *v0;

  return v0[16];
}

__n128 ConnectionAssistantCamera.cameraProjectionView.getter()
{
  __n128 *v0;

  return v0[20];
}

double ConnectionAssistantCamera.projectLookAt(vector:)(float32x4_t a1)
{
  float32x4_t *v1;
  double result;

  *(_QWORD *)&result = vaddq_f32(v1[11], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1[8], a1.f32[0]), v1[9], *(float32x2_t *)a1.f32, 1), v1[10], a1, 2)).u64[0];
  return result;
}

double ConnectionAssistantCamera.projectView(point:)(float32x4_t a1)
{
  float32x4_t *v1;
  double result;

  *(_QWORD *)&result = vaddq_f32(v1[15], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1[12], a1.f32[0]), v1[13], *(float32x2_t *)a1.f32, 1), v1[14], a1, 2)).u64[0];
  return result;
}

unint64_t ConnectionAssistantCamera.projectNormalized(point:)(float32x4_t a1)
{
  float32x4_t *v1;
  float32x4_t v2;
  float32x4_t v3;
  float32x4_t v5;

  v2 = vaddq_f32(v1[15], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1[12], a1.f32[0]), v1[13], *(float32x2_t *)a1.f32, 1), v1[14], a1, 2));
  v3 = vmulq_f32(v2, (float32x4_t)xmmword_1002520E0);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v3, 2), vaddq_f32(v3, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v3.f32, 1))).f32[0] < v1[2].f32[1])return 0;
  v5 = vaddq_f32(v1[19], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v1[16], v2.f32[0]), v1[17], *(float32x2_t *)v2.f32, 1), v1[18], v2, 2));
  return vdivq_f32(v5, (float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 3)).u64[0];
}

double ConnectionAssistantCamera.projectToViewport(point:)(float32x4_t a1)
{
  int64x2_t *v1;
  unint64_t v2;
  double result;
  char v4;
  float32x2_t v10;

  v2 = ConnectionAssistantCamera.projectNormalized(point:)(a1);
  result = 0.0;
  if ((v4 & 1) == 0)
  {
    __asm { FMOV            V2.2S, #1.0 }
    v10.i32[0] = vadd_f32((float32x2_t)v2, _D2).u32[0];
    v10.i32[1] = vsub_f32(_D2, (float32x2_t)v2).i32[1];
    *(_QWORD *)&result = *(_OWORD *)&vdivq_f64(vcvtq_f64_f32(vmul_f32(vmul_f32(v10, vcvt_f32_f64(vcvtq_f64_s64(*v1))), (float32x2_t)0x3F0000003F000000)), (float64x2_t)vdupq_lane_s64(v1[1].i64[0], 0));
  }
  return result;
}

uint64_t sub_10008D414(void *__src, const void *a2)
{
  _BYTE v4[384];
  _BYTE __dst[384];

  memcpy(v4, __src, sizeof(v4));
  memcpy(__dst, a2, sizeof(__dst));
  return _s8SOSBuddy25ConnectionAssistantCameraV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v4, (uint64_t)__dst) & 1;
}

uint64_t _s8SOSBuddy25ConnectionAssistantCameraV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  BOOL v12;
  float v13;
  float v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  BOOL v18;
  float v19;
  float v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  BOOL v24;
  float v25;
  float v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  BOOL v30;
  float v31;
  float v32;
  float v33;
  float v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v2 = *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8) && *(double *)(a1 + 16) == *(double *)(a2 + 16);
  if (!v2
    || *(float *)(a1 + 24) != *(float *)(a2 + 24)
    || *(float *)(a1 + 28) != *(float *)(a2 + 28)
    || *(float *)(a1 + 32) != *(float *)(a2 + 32)
    || *(float *)(a1 + 36) != *(float *)(a2 + 36)
    || *(float *)(a1 + 40) != *(float *)(a2 + 40))
  {
    return 0;
  }
  v3 = 0;
  v4 = *(_OWORD *)(a1 + 48);
  v5 = *(_OWORD *)(a2 + 48);
  while (1)
  {
    v43 = v4;
    v13 = *(float *)((unint64_t)&v43 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    v44 = v5;
    v14 = *(float *)((unint64_t)&v44 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    v6 = v13 == v14;
    if (v3 == 2)
      break;
    while (1)
    {
      ++v3;
      if (v6)
        break;
      v6 = 0;
      v7 = 0;
      if (v3 == 2)
        return v7;
    }
  }
  if (v13 != v14)
    return 0;
  v9 = 0;
  v10 = *(_OWORD *)(a1 + 64);
  v11 = *(_OWORD *)(a2 + 64);
  while (1)
  {
    v41 = v10;
    v19 = *(float *)((unint64_t)&v41 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    v42 = v11;
    v20 = *(float *)((unint64_t)&v42 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    v12 = v19 == v20;
    if (v9 == 2)
      break;
    while (1)
    {
      ++v9;
      if (v12)
        break;
      v12 = 0;
      v7 = 0;
      if (v9 == 2)
        return v7;
    }
  }
  if (v19 != v20)
    return 0;
  v15 = 0;
  v16 = *(_OWORD *)(a1 + 80);
  v17 = *(_OWORD *)(a2 + 80);
  while (1)
  {
    v39 = v16;
    v25 = *(float *)((unint64_t)&v39 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    v40 = v17;
    v26 = *(float *)((unint64_t)&v40 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    v18 = v25 == v26;
    if (v15 == 2)
      break;
    while (1)
    {
      ++v15;
      if (v18)
        break;
      v18 = 0;
      v7 = 0;
      if (v15 == 2)
        return v7;
    }
  }
  if (v25 != v26)
    return 0;
  v21 = 0;
  v22 = *(_OWORD *)(a1 + 96);
  v23 = *(_OWORD *)(a2 + 96);
  while (1)
  {
    v37 = v22;
    v31 = *(float *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
    v38 = v23;
    v32 = *(float *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
    v24 = v31 == v32;
    if (v21 == 2)
      break;
    while (1)
    {
      ++v21;
      if (v24)
        break;
      v24 = 0;
      v7 = 0;
      if (v21 == 2)
        return v7;
    }
  }
  if (v31 != v32)
    return 0;
  v27 = 0;
  v28 = *(_OWORD *)(a1 + 112);
  v29 = *(_OWORD *)(a2 + 112);
  while (1)
  {
    v35 = v28;
    v33 = *(float *)((unint64_t)&v35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
    v36 = v29;
    v34 = *(float *)((unint64_t)&v36 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
    v30 = v33 == v34;
    if (v27 == 2)
      break;
    while (1)
    {
      ++v27;
      if (v30)
        break;
      v30 = 0;
      v7 = 0;
      if (v27 == 2)
        return v7;
    }
  }
  if (v33 == v34
    && (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 144), *(float32x4_t *)(a2 + 144)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 128), *(float32x4_t *)(a2 + 128))), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 160), *(float32x4_t *)(a2 + 160)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 176), *(float32x4_t *)(a2 + 176))))) & 0x80000000) != 0&& (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 208), *(float32x4_t *)(a2 + 208)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 192), *(float32x4_t *)(a2 + 192))), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 224), *(float32x4_t *)(a2 + 224)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 240), *(float32x4_t *)(a2 + 240))))) & 0x80000000) != 0&& (vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 272), *(float32x4_t *)(a2 + 272)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 256), *(float32x4_t *)(a2 + 256))), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 288), *(float32x4_t *)(a2 + 288)),
                                   (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 304), *(float32x4_t *)(a2 + 304))))) & 0x80000000) != 0)
  {
    return vminvq_u32((uint32x4_t)vandq_s8(vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 336), *(float32x4_t *)(a2 + 336)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 320), *(float32x4_t *)(a2 + 320))), vandq_s8((int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 352), *(float32x4_t *)(a2 + 352)), (int8x16_t)vceqq_f32(*(float32x4_t *)(a1 + 368), *(float32x4_t *)(a2 + 368))))) >> 31;
  }
  else
  {
    return 0;
  }
}

uint64_t _s8SOSBuddy25ConnectionAssistantCameraV8ViewportV4size5scaleAESo6CGSizeV_12CoreGraphics7CGFloatVtcfC_0(double a1, double a2, double a3)
{
  double v3;
  double v4;
  uint64_t result;

  v3 = a1 * a3;
  if (v3 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v4 = a2 * a3;
  if ((*(_QWORD *)&v3 & 0x7FF0000000000000) == 0x7FF0000000000000
    || (*(_QWORD *)&v4 & 0x7FF0000000000000) == 0x7FF0000000000000)
  {
    goto LABEL_12;
  }
  if (v4 <= -9.22337204e18)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v4 < 9.22337204e18)
    return (uint64_t)v3 & ~((uint64_t)v3 >> 63);
LABEL_14:
  __break(1u);
  return result;
}

double sub_10008D8A8(int32x4_t a1, float a2)
{
  float32x4_t v2;
  float32x4_t v3;
  int8x16_t v4;
  float32x4_t v5;
  float v6;
  float32x4_t v7;
  int8x16_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float v12;
  __float2 v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  int8x16_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  int32x4_t v22;
  int8x16_t v23;
  float32x4_t v24;
  float32x4_t v25;
  double result;
  int8x16_t v27;

  v2 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a1, a1), (int8x16_t)a1, 0xCuLL);
  v3 = vmlaq_f32(vmulq_f32((float32x4_t)a1, (float32x4_t)xmmword_1002520F0), (float32x4_t)xmmword_1002520E0, v2);
  v4 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), (int8x16_t)v3, 0xCuLL);
  v5 = vmulq_f32(v3, v3);
  v6 = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v5.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v5, 2), v5)).f32[0]);
  if (v6 >= 0.00000011921)
  {
    v27 = v4;
  }
  else
  {
    v7 = vmlaq_f32(vmulq_f32((float32x4_t)a1, (float32x4_t)xmmword_100252100), (float32x4_t)xmmword_100252110, v2);
    v8 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL);
    v9 = vmulq_f32(v7, v7);
    v10 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), v9);
    v11 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1), v10);
    v11.f32[0] = sqrtf(v11.f32[0]);
    v10.i64[0] = 0x3400000034000000;
    v27 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v10, v11), 0), v4, v8);
    if (v11.f32[0] >= 0.00000011921)
      v6 = v11.f32[0];
  }
  if (v6 == 0.0)
    v12 = 1.0;
  else
    v12 = v6;
  v13 = __sincosf_stret(a2 * 0.5);
  v14 = vmulq_n_f32((float32x4_t)a1, v13.__sinval);
  v15 = v14;
  v15.i32[3] = LODWORD(v13.__cosval);
  v16 = vmulq_f32(v15, (float32x4_t)xmmword_100252120);
  v17 = (int32x4_t)vnegq_f32(v16);
  v18 = (int8x16_t)vtrn2q_s32((int32x4_t)v16, vtrn1q_s32((int32x4_t)v16, v17));
  v19 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v16, (int8x16_t)v17, 8uLL), *(float *)&v27.i32[1] / v12);
  v20 = (float32x4_t)vrev64q_s32((int32x4_t)v16);
  v20.i32[0] = v17.i32[1];
  v20.i32[3] = v17.i32[2];
  v21 = vmlaq_n_f32(vmlaq_n_f32(v19, (float32x4_t)vextq_s8(v18, v18, 8uLL), *(float *)v27.i32 / v12), v20, *(float *)&v27.i32[2] / v12);
  v22 = (int32x4_t)vnegq_f32(v21);
  v23 = (int8x16_t)vtrn2q_s32((int32x4_t)v21, vtrn1q_s32((int32x4_t)v21, v22));
  v24 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v21, (int8x16_t)v22, 8uLL), *(float32x2_t *)v14.f32, 1), (float32x4_t)vextq_s8(v23, v23, 8uLL), v14.f32[0]);
  v25 = (float32x4_t)vrev64q_s32((int32x4_t)v21);
  v25.i32[0] = v22.i32[1];
  v25.i32[3] = v22.i32[2];
  *(_QWORD *)&result = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v21, v15, 3), v25, v14, 2), v24).u64[0];
  return result;
}

float32x4_t sub_10008DA1C@<Q0>(float *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, float a7@<S2>, float32x2_t a8@<D3>, float a9@<S4>, double a10@<D5>)
{
  BOOL v18;
  int v19;
  float v20;
  float v21;
  float v22;
  float v23;
  float v24;
  float v25;
  float v26;
  float v28;
  float32x4_t v29;
  int32x4_t v30;
  float32x4_t v31;
  float32x2_t v32;
  float32x2_t v33;
  float32x4_t v34;
  float v35;
  float32x4_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float32x4_t v40;
  float v41;
  float v42;
  BOOL v44;
  float v45;
  float v46;
  float v47;
  float32x2_t v48;
  float32x2_t v49;
  float32x4_t v50;
  float v51;
  float v52;
  unint64_t v53;
  float v54;
  float32x2_t v55;
  float32x4_t v56;
  __int128 v57;
  float32x2_t v58;
  __int128 v59;
  float32x4_t v60;
  float32x4_t v61;
  float32x4_t v62;
  float32x4_t v63;
  __int128 v64;
  float32x4_t result;
  float v66;
  float32x4_t v67;
  float32x2_t v68;
  float32x4_t v69;
  unsigned int v70;
  unsigned __int32 v71;
  float32x4_t v72;
  float v73;
  float32x4_t v74;
  float v75;
  float v77;
  int8x16_t v79;
  float32x4_t v80;
  float32x4_t v81;
  __int128 v82;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v85;

  if (a2)
    v18 = a3 == 0;
  else
    v18 = 1;
  v19 = v18;
  if (v18)
  {
    v20 = 0.17633;
    goto LABEL_19;
  }
  v21 = (float)a2 / (float)a3;
  if (v21 >= 1.0)
  {
    v20 = v21 * 0.17633;
LABEL_19:
    v26 = atanf(v20);
    v24 = v26 + v26;
    if ((~COERCE_INT(v26 + v26) & 0x7F800000) != 0 || (COERCE_UNSIGNED_INT(v26 + v26) & 0x7FFFFF) == 0)
    {
      v23 = 0.34907;
      v77 = 0.34907;
      if (v24 > 0.34907)
        goto LABEL_26;
    }
    else
    {
      v24 = 0.34907;
      v77 = 0.34907;
    }
    goto LABEL_25;
  }
  v22 = atanf(0.17633 / v21);
  v23 = v22 + v22;
  v24 = 0.34907;
  if ((LODWORD(v23) & 0x7FFFFF) != 0)
    v25 = 0.34907;
  else
    v25 = v23;
  if ((~LODWORD(v23) & 0x7F800000) == 0)
    v23 = v25;
  v77 = v23;
  if (v23 >= 0.34907)
LABEL_25:
    v23 = v24;
LABEL_26:
  v75 = v23;
  v28 = a1[17];
  *(double *)v29.i64 = ConnectionAssistantEarth.direction(for:)(a5, a6);
  v81 = v29;
  v82 = *(_OWORD *)a1;
  v30 = (int32x4_t)vmulq_f32(v29, v29);
  v31 = v29;
  v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v30, 2), vadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1))).u32[0];
  v32 = vrsqrte_f32((float32x2_t)v29.u32[0]);
  v33 = vmul_f32(v32, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v32, v32)));
  v83 = vmulq_n_f32(v31, vmul_f32(v33, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v33, v33))).f32[0]);
  *(double *)v34.i64 = sub_10008D8A8((int32x4_t)v83, a9);
  v35 = (float)a2 / (float)a3;
  if (v19)
    v35 = 1.0;
  v73 = v35;
  v36 = v34;
  v37 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), (int8x16_t)v83, 0xCuLL), vnegq_f32(v34)), v83, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL));
  v38 = (int32x4_t)vmulq_f32(v37, v37);
  v38.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v38.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v38, 2), *(float32x2_t *)v38.i8)).u32[0];
  v39 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL);
  *(float32x2_t *)v37.f32 = vrsqrte_f32((float32x2_t)v38.u32[0]);
  *(float32x2_t *)v37.f32 = vmul_f32(*(float32x2_t *)v37.f32, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32)));
  v40 = vmulq_n_f32(v39, vmul_f32(*(float32x2_t *)v37.f32, vrsqrts_f32((float32x2_t)v38.u32[0], vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32))).f32[0]);
  v80 = v40;
  v79 = (int8x16_t)v36;
  v40.i32[1] = v36.i32[1];
  v68 = vsub_f32(0, *(float32x2_t *)v40.f32);
  v37.i64[0] = __PAIR64__(v68.u32[0], v36.u32[0]);
  v37.f32[2] = 0.0 - v83.f32[0];
  v37.i32[3] = 0;
  v69 = v37;
  v67 = (float32x4_t)v36.u32[1];
  v84 = (float32x4_t)v36.u32[2];
  v41 = tanf(v24 * 0.5);
  v42 = (float)(v41 + v41) * a7;
  v44 = (LODWORD(v42) & 0x7FFFFF) != 0 && (~LODWORD(v42) & 0x7F800000) == 0 || v42 == 0.0;
  v45 = (float)(v28 + v28) / v42;
  if (v44)
    v46 = 0.0;
  else
    v46 = v45;
  v66 = v46;
  v47 = vmuls_lane_f32(v46, v81, 2);
  v48.i32[0] = vextq_s8(v79, v79, 8uLL).u32[0];
  v48.i32[1] = v80.i32[2];
  v49 = vsub_f32(0, v48);
  v71 = v49.u32[1];
  v50 = v84;
  v50.i32[1] = v49.i32[1];
  v50.f32[2] = 0.0 - v83.f32[2];
  v85 = v50;
  v51 = (float)(v28 + v28) * vaddv_f32(vmul_f32(v49, a8));
  *(float *)&v70 = v51 + (float)(*((float *)&v82 + 2) - v47);
  v52 = tanf(v77 * 0.5);
  LODWORD(v53) = 0;
  *((float *)&v53 + 1) = 1.0 / v52;
  v72 = (float32x4_t)v53;
  v74 = (float32x4_t)COERCE_UNSIGNED_INT((float)(1.0 / v52) / v73);
  v54 = tanf(v75 * 0.5);
  v55 = vsub_f32(0, (float32x2_t)__PAIR64__(v80.u32[1], v79.u32[0]));
  v56 = v67;
  v56.i32[1] = v55.i32[1];
  *(_QWORD *)&v57 = __PAIR64__(v55.u32[1], v68.u32[0]);
  v56.f32[2] = 0.0 - v83.f32[1];
  v58 = vmul_n_f32(vadd_f32(vmul_f32((float32x2_t)vrev64_s32((int32x2_t)a8), v68), vmul_f32(v55, a8)), v28 + v28);
  *(float32x2_t *)&v59 = vadd_f32(v58, vsub_f32(*(float32x2_t *)&v82, vmul_n_f32(*(float32x2_t *)v81.f32, v66)));
  v60 = vaddq_f32(vmlaq_f32(vmlaq_f32(v69, (float32x4_t)0, v56), (float32x4_t)0, v85), (float32x4_t)0);
  v61 = vmulq_f32(v69, (float32x4_t)0);
  v62 = vaddq_f32(vmlaq_f32(vaddq_f32(v56, v61), (float32x4_t)0, v85), (float32x4_t)0);
  v63 = vaddq_f32(vaddq_f32(v85, vmlaq_f32(v61, (float32x4_t)0, v56)), (float32x4_t)0);
  *((_QWORD *)&v57 + 1) = v71;
  *((_QWORD *)&v59 + 1) = v70;
  *(float32x2_t *)&v64 = vadd_f32(*(float32x2_t *)&v82, v58);
  *((float *)&v64 + 2) = *((float *)&v82 + 2) + v51;
  HIDWORD(v64) = 0;
  *(_QWORD *)a4 = a2;
  *(_QWORD *)(a4 + 8) = a3;
  *(double *)(a4 + 16) = a10;
  *(float *)(a4 + 24) = v24;
  *(float *)(a4 + 28) = v77;
  *(float *)(a4 + 32) = -1.0 / v54;
  *(_QWORD *)(a4 + 36) = 0x42C800003A83126FLL;
  *(_OWORD *)(a4 + 48) = v59;
  *(_OWORD *)(a4 + 64) = v64;
  result = vaddq_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v69, 0.0 - *(float *)&v59), v56, 0.0 - *((float *)&v59 + 1)), v85, 0.0 - *(float *)&v70), (float32x4_t)xmmword_100252130);
  *(float32x4_t *)(a4 + 80) = v83;
  *(int8x16_t *)(a4 + 96) = v79;
  *(_OWORD *)(a4 + 112) = v57;
  *(float32x4_t *)(a4 + 128) = v69;
  *(float32x4_t *)(a4 + 144) = v56;
  *(float32x4_t *)(a4 + 160) = v85;
  *(_OWORD *)(a4 + 176) = xmmword_100252130;
  *(float32x4_t *)(a4 + 192) = v60;
  *(float32x4_t *)(a4 + 208) = v62;
  *(float32x4_t *)(a4 + 224) = v63;
  *(float32x4_t *)(a4 + 240) = result;
  *(float32x4_t *)(a4 + 256) = v74;
  *(float32x4_t *)(a4 + 272) = v72;
  *(_OWORD *)(a4 + 288) = xmmword_100252140;
  *(_OWORD *)(a4 + 304) = xmmword_100252150;
  *(float32x4_t *)(a4 + 320) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, v60.f32[0]), v72, *(float32x2_t *)v60.f32, 1), (float32x4_t)xmmword_100252140, v60, 2), (float32x4_t)xmmword_100252150, v60, 3);
  *(float32x4_t *)(a4 + 336) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, v62.f32[0]), v72, *(float32x2_t *)v62.f32, 1), (float32x4_t)xmmword_100252140, v62, 2), (float32x4_t)xmmword_100252150, v62, 3);
  *(float32x4_t *)(a4 + 352) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, v63.f32[0]), v72, *(float32x2_t *)v63.f32, 1), (float32x4_t)xmmword_100252140, v63, 2), (float32x4_t)xmmword_100252150, v63, 3);
  *(float32x4_t *)(a4 + 368) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v74, result.f32[0]), v72, *(float32x2_t *)result.f32, 1), (float32x4_t)xmmword_100252140, result, 2), (float32x4_t)xmmword_100252150, result, 3);
  return result;
}

void *initializeWithCopy for ConnectionAssistantCamera(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x180uLL);
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantCamera(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 384))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantCamera(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 376) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 384) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantCamera()
{
  return &type metadata for ConnectionAssistantCamera;
}

ValueMetadata *type metadata accessor for ConnectionAssistantCamera.Viewport()
{
  return &type metadata for ConnectionAssistantCamera.Viewport;
}

NSString sub_10008E004()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10033FCD0 = (uint64_t)result;
  return result;
}

NSString sub_10008E038()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10033FCD8 = (uint64_t)result;
  return result;
}

NSString sub_10008E06C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10033FCE0 = (uint64_t)result;
  return result;
}

NSString sub_10008E09C()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_10033FCE8 = (uint64_t)result;
  return result;
}

uint64_t storeEnumTagSinglePayload for StewieAppId(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10008E11C + 4 * byte_100252205[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10008E150 + 4 * asc_100252200[v4]))();
}

uint64_t sub_10008E150(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008E158(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10008E160);
  return result;
}

uint64_t sub_10008E16C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10008E174);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10008E178(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10008E180(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StewieAppId()
{
  return &type metadata for StewieAppId;
}

unint64_t sub_10008E1A0()
{
  unint64_t result;

  result = qword_10031C6A0;
  if (!qword_10031C6A0)
  {
    result = swift_getWitnessTable(&unk_100252260, &type metadata for StewieAppId);
    atomic_store(result, (unint64_t *)&qword_10031C6A0);
  }
  return result;
}

uint64_t initializeWithCopy for StewieAppDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for StewieAppDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for StewieAppDescription(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for StewieAppDescription()
{
  return &type metadata for StewieAppDescription;
}

Swift::Int sub_10008E2F8()
{
  _QWORD *v0;
  Swift::UInt v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  v1 = *(unsigned __int8 *)v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  v5 = v0[4];
  Hasher.init(_seed:)(v7, 0);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v7, v2, v3);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_10008E394(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  Hasher._combine(_:)(*(unsigned __int8 *)v1);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(a1, v5, v6);
  return swift_bridgeObjectRelease(v6);
}

Swift::Int sub_10008E410(uint64_t a1)
{
  _QWORD *v1;
  Swift::UInt v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[9];

  v2 = *(unsigned __int8 *)v1;
  v3 = v1[1];
  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  Hasher.init(_seed:)(v8, a1);
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v8, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

void sub_10008E4A8(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t sub_10008E4B4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_10008E548(v5, v7) & 1;
}

unint64_t sub_10008E504()
{
  unint64_t result;

  result = qword_10031C6A8;
  if (!qword_10031C6A8)
  {
    result = swift_getWitnessTable(&unk_1002522A8, &type metadata for StewieAppDescription);
    atomic_store(result, (unint64_t *)&qword_10031C6A8);
  }
  return result;
}

uint64_t sub_10008E548(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (*(unsigned __int8 *)a1 != *(unsigned __int8 *)a2)
    return 0;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a2[1];
  v7 = a2[2];
  v8 = v4 == v6 && v5 == v7;
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0), result = 0, (v9 & 1) != 0))
  {
    v11 = a1[3];
    v12 = a1[4];
    v13 = a2[3];
    v14 = a2[4];
    if (v11 == v13 && v12 == v14)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v13, v14, 0);
  }
  return result;
}

uint64_t sub_10008E5D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)(v1 + 24) = 2;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_QWORD *)(v1 + 80) = 0;
  *(_BYTE *)(v1 + 88) = 1;
  *(_DWORD *)(v1 + 89) = 151126530;
  *(_BYTE *)(v1 + 93) = 2;
  v3 = v1 + OBJC_IVAR____TtC8SOSBuddy23AnalyticsStateRetention__data;
  v4 = _s8SOSBuddy4DataVMa_0(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

double sub_10008E660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  double result;
  int v9;
  uint64_t v10;

  v1 = v0;
  v2 = sub_100003DB8(&qword_100316B68);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001BF244((uint64_t)v5);
  v6 = type metadata accessor for TransmissionProgress(0);
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  sub_100007FF0((uint64_t)v5, &qword_100316B68);
  v9 = *(unsigned __int8 *)(v1 + 91);
  if (v9 == 2 || (v7 != 1) != (v9 & 1))
  {
    *(_BYTE *)(v1 + 91) = v7 != 1;
    return sub_10008EA14();
  }
  return result;
}

double sub_10008E734(uint64_t a1)
{
  uint64_t v1;
  int v2;
  int v3;
  double result;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 120);
  v3 = *(unsigned __int8 *)(v1 + 92);
  if (v3 == 9)
  {
    if (v2 == 9)
      return result;
LABEL_8:
    *(_BYTE *)(v1 + 92) = v2;
    return sub_10008EA14();
  }
  if (v2 == 9 || v3 != v2)
    goto LABEL_8;
  return result;
}

double sub_10008E768(uint64_t a1)
{
  uint64_t v1;
  int v2;
  BOOL v3;
  double result;
  int v5;
  int v6;
  int v7;
  BOOL v8;

  v2 = *(unsigned __int8 *)(a1 + 66);
  v3 = sub_100067058(0, *(_QWORD *)(a1 + 200));
  v5 = *(unsigned __int8 *)(v1 + 89);
  if (v5 == 2)
  {
    if (v2 != 2)
    {
LABEL_10:
      *(_BYTE *)(v1 + 89) = v2;
      *(_BYTE *)(v1 + 90) = v3;
      return sub_10008EA14();
    }
  }
  else if (v2 == 2 || ((((v2 & 1) == 0) ^ v5) & 1) == 0)
  {
    goto LABEL_10;
  }
  v6 = *(unsigned __int8 *)(v1 + 90);
  v8 = v6 == 2;
  v7 = v6 & 1;
  v8 = !v8 && v3 == v7;
  if (!v8)
    goto LABEL_10;
  return result;
}

double sub_10008E7F0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v3;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
    v3 = sub_100067058(5u, *(_QWORD *)(v2 + 48));
  else
    v3 = 0;
  *(_BYTE *)(v1 + 93) = v3;
  return sub_10008EA14();
}

double sub_10008E824(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  double result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v18[24];
  _BYTE v19[32];
  uint64_t v20;
  _OWORD v21[4];
  __int16 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int16 v27;
  char v28;
  char v29;

  sub_10000B458(a1, (uint64_t)v19, &qword_100319FD8);
  v3 = v20;
  v4 = sub_100003DB8(&qword_10031C9C8);
  __chkstk_darwin(v4, v5);
  v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000B458(a1, (uint64_t)v21, &qword_100319FD8);
  if (!*((_QWORD *)&v21[0] + 1)
    || (v25 = v21[2],
        v26 = v21[3],
        v27 = v22,
        v23 = v21[0],
        v24 = v21[1],
        sub_10001AE10(&v23, &v28),
        sub_10001AE10(&v28, &v29),
        v29 != 5)
    || BYTE1(v24) != 1)
  {
    v14 = *(_QWORD *)(v1 + 40);
    *(_QWORD *)(v1 + 32) = 0;
    *(_QWORD *)(v1 + 40) = 0;
    swift_bridgeObjectRelease(v14);
    *(_QWORD *)(v1 + 80) = 0;
    *(_OWORD *)(v1 + 48) = 0u;
    *(_OWORD *)(v1 + 64) = 0u;
    *(_BYTE *)(v1 + 88) = 1;
    *(_DWORD *)(v1 + 89) = 151126530;
    *(_BYTE *)(v1 + 93) = 2;
    v15 = _s8SOSBuddy4DataVMa_0(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v7, 1, 1, v15);
    v16 = v1 + OBJC_IVAR____TtC8SOSBuddy23AnalyticsStateRetention__data;
    swift_beginAccess(v16, v18, 33, 0);
    sub_10008FF30((uint64_t)v7, v16);
    *(_QWORD *)&result = swift_endAccess(v18).n128_u64[0];
    return result;
  }
  v8 = sub_100112D9C(v3);
  v11 = v10;
  v12 = *(_QWORD *)(v1 + 40);
  if (v12)
  {
    if (v11)
    {
      v13 = *(_QWORD *)(v1 + 32);
      if (v13 == v8 && v12 == v11 || (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v12, v8, v11, 0) & 1) != 0)
      {
        *(_QWORD *)&result = swift_bridgeObjectRelease(v11).n128_u64[0];
        return result;
      }
      v12 = *(_QWORD *)(v1 + 40);
    }
  }
  else
  {
    if (!v11)
      return result;
    v12 = 0;
  }
  *(_QWORD *)(v1 + 32) = v8;
  *(_QWORD *)(v1 + 40) = v11;
  swift_bridgeObjectRelease(v12);
  return sub_10008EA14();
}

double sub_10008EA14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  double result;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char *v31;
  char *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int v44;
  uint64_t v45;
  char *v46;
  _BYTE v47[24];
  char v48[24];

  v1 = v0;
  v2 = sub_100003DB8(&qword_10031C9C8);
  v4 = __chkstk_darwin(v2, v3);
  v46 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4, v6);
  v45 = (uint64_t)&v42 - v8;
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v42 - v10;
  v12 = (int *)_s8SOSBuddy4DataVMa_0(0);
  v13 = *((_QWORD *)v12 - 1);
  v15 = __chkstk_darwin(v12, v14);
  v17 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  v21 = (char *)&v42 - v20;
  v22 = *(_QWORD *)(v0 + 40);
  if (v22)
  {
    v23 = *(unsigned __int8 *)(v0 + 24);
    if (v23 != 2)
    {
      v24 = *(unsigned __int8 *)(v0 + 89);
      if (v24 != 2)
      {
        v25 = *(unsigned __int8 *)(v0 + 90);
        if (v25 != 2 && *(_BYTE *)(v0 + 91) != 2)
        {
          v43 = *(unsigned __int8 *)(v0 + 91);
          v44 = v25;
          v42 = *(_QWORD *)(v0 + 32);
          v26 = sub_10008F54C();
          if (v26 != 7)
          {
            v27 = v26;
            LOBYTE(v43) = v43 & 1;
            v43 = v43;
            LOBYTE(v44) = v44 & 1;
            v44 = v44;
            swift_bridgeObjectRetain(v22);
            static DispatchTime.now()(v28);
            v29 = *(_QWORD *)(v1 + 80);
            v30 = *(_BYTE *)(v1 + 88);
            v31 = &v21[v12[5]];
            *(_QWORD *)v31 = v42;
            *((_QWORD *)v31 + 1) = v22;
            v32 = &v21[v12[6]];
            v33 = *(_OWORD *)(v1 + 64);
            *(_OWORD *)v32 = *(_OWORD *)(v1 + 48);
            *((_OWORD *)v32 + 1) = v33;
            *((_QWORD *)v32 + 4) = v29;
            v32[40] = v30;
            v21[v12[7]] = v23 & 1;
            v21[v12[8]] = !(v24 & 1);
            v21[v12[9]] = v44;
            v21[v12[10]] = v43;
            v21[v12[11]] = v27;
            v34 = v1 + OBJC_IVAR____TtC8SOSBuddy23AnalyticsStateRetention__data;
            swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy23AnalyticsStateRetention__data, v48, 0, 0);
            sub_10008FEA4(v34, (uint64_t)v11);
            if ((*(unsigned int (**)(char *, uint64_t, int *))(v13 + 48))(v11, 1, v12) == 1)
            {
              sub_100007FF0((uint64_t)v11, &qword_10031C9C8);
              v35 = v45;
              sub_10008FEEC((uint64_t)v21, v45);
              (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v13 + 56))(v35, 0, 1, v12);
              v36 = v35;
              v37 = (uint64_t)v46;
              v38 = (uint64_t)v46;
            }
            else
            {
              sub_10008FEEC((uint64_t)v11, (uint64_t)v17);
              if ((sub_10008ED70((uint64_t)v17) & 1) != 0)
              {
                sub_10008FFF4((uint64_t)v17);
                sub_10008FFF4((uint64_t)v21);
                return result;
              }
              sub_10008EFB8();
              v40 = v39;
              sub_100176278(6, v39);
              swift_bridgeObjectRelease(v40);
              sub_10008FFF4((uint64_t)v17);
              v41 = v45;
              sub_10008FEEC((uint64_t)v21, v45);
              (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v13 + 56))(v41, 0, 1, v12);
              v36 = v41;
              v37 = (uint64_t)v46;
              v38 = (uint64_t)v46;
            }
            sub_10000B458(v36, v38, &qword_10031C9C8);
            swift_beginAccess(v34, v47, 33, 0);
            sub_10008FF30(v37, v34);
            *(_QWORD *)&result = swift_endAccess(v47).n128_u64[0];
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_10008ED70(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  int v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  char v34;
  int v36;
  int v37;
  char v38;
  uint64_t v39;
  uint64_t v40;

  v2 = v1;
  v4 = (int *)_s8SOSBuddy4DataVMa_0(0);
  v6 = __chkstk_darwin(v4, v5);
  v40 = (uint64_t)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)&v39 - v10;
  v13 = __chkstk_darwin(v9, v12);
  v15 = (char *)&v39 - v14;
  v17 = __chkstk_darwin(v13, v16);
  v19 = (char *)&v39 - v18;
  v21 = __chkstk_darwin(v17, v20);
  v23 = (char *)&v39 - v22;
  v25 = __chkstk_darwin(v21, v24);
  v27 = (char *)&v39 - v26;
  v28 = *(int *)(v25 + 32);
  v29 = *(unsigned __int8 *)(v2 + v28);
  v30 = *(unsigned __int8 *)(a1 + v28);
  sub_100090030(v2, (uint64_t)&v39 - v26);
  sub_100090030(a1, (uint64_t)v23);
  if (v29 != v30)
  {
    sub_10008FFF4((uint64_t)v23);
    sub_10008FFF4((uint64_t)v27);
    sub_100090030(v2, (uint64_t)v19);
    sub_100090030(a1, (uint64_t)v15);
LABEL_4:
    sub_10008FFF4((uint64_t)v15);
    sub_10008FFF4((uint64_t)v19);
    sub_100090030(v2, (uint64_t)v11);
    v33 = v40;
    sub_100090030(a1, v40);
    goto LABEL_5;
  }
  v31 = v27[v4[9]];
  sub_10008FFF4((uint64_t)v27);
  v32 = v23[v4[9]];
  sub_10008FFF4((uint64_t)v23);
  sub_100090030(v2, (uint64_t)v19);
  sub_100090030(a1, (uint64_t)v15);
  if (v31 != v32)
    goto LABEL_4;
  v36 = v19[v4[10]];
  sub_10008FFF4((uint64_t)v19);
  v37 = v15[v4[10]];
  sub_10008FFF4((uint64_t)v15);
  sub_100090030(v2, (uint64_t)v11);
  v33 = v40;
  sub_100090030(a1, v40);
  if (v36 == v37)
  {
    sub_10022B728(v11[v4[11]]);
    v34 = v38;
    goto LABEL_6;
  }
LABEL_5:
  v34 = 0;
LABEL_6:
  sub_10008FFF4(v33);
  sub_10008FFF4((uint64_t)v11);
  return v34 & 1;
}

void sub_10008EFB8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  NSString v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  int v8;
  const char *v9;
  uint64_t v10;
  _BYTE v11[304];

  v1 = sub_100003DB8(&qword_100319FC8);
  inited = swift_initStackObject(v1, v11);
  *(_OWORD *)(inited + 16) = xmmword_100252350;
  strcpy((char *)(inited + 32), "requestReason");
  *(_WORD *)(inited + 46) = -4864;
  v3 = _s8SOSBuddy4DataVMa_0(0);
  v4 = String._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 48) = v4;
  *(_QWORD *)(inited + 56) = 0x6E6F697461727564;
  *(_QWORD *)(inited + 64) = 0xE800000000000000;
  v5 = DispatchTime.uptimeNanoseconds.getter(v4);
  v6 = DispatchTime.uptimeNanoseconds.getter(v5);
  if (v6 >= v5 || (v7 = DispatchTime.uptimeNanoseconds.getter(v6), v7 >= DispatchTime.uptimeNanoseconds.getter(v7)))
  {
    *(NSNumber *)(inited + 72) = UInt64._bridgeToObjectiveC()();
    *(_QWORD *)(inited + 80) = 0xD000000000000010;
    *(_QWORD *)(inited + 88) = 0x8000000100267560;
    v8 = *(unsigned __int8 *)(v0 + *(int *)(v3 + 28));
    sub_100066F24();
    if (v8 == 1)
    {
      v9 = "screenLocked";
      v10 = 12;
    }
    else
    {
      v9 = "screenUnlocked";
      v10 = 14;
    }
    *(_QWORD *)(inited + 96) = NSString.init(stringLiteral:)(v9, v10, 2);
    strcpy((char *)(inited + 104), "currGPSState");
    *(_BYTE *)(inited + 117) = 0;
    *(_WORD *)(inited + 118) = -5120;
    *(NSNumber *)(inited + 120) = Bool._bridgeToObjectiveC()();
    strcpy((char *)(inited + 128), "prevGPSState");
    *(_BYTE *)(inited + 141) = 0;
    *(_WORD *)(inited + 142) = -5120;
    *(NSNumber *)(inited + 144) = Bool._bridgeToObjectiveC()();
    *(_QWORD *)(inited + 152) = 0xD000000000000012;
    *(_QWORD *)(inited + 160) = 0x8000000100267580;
    __asm { BR              X10 }
  }
  __break(1u);
  JUMPOUT(0x10008F514);
}

uint64_t sub_10008F54C()
{
  uint64_t v0;

  return ((uint64_t (*)(uint64_t))((char *)sub_10008F56C + 4 * byte_100252360[*(unsigned __int8 *)(v0 + 92)]))(7);
}

uint64_t sub_10008F56C()
{
  return 1;
}

uint64_t sub_10008F574()
{
  return 5;
}

uint64_t sub_10008F57C()
{
  return 6;
}

uint64_t sub_10008F584()
{
  return 4;
}

uint64_t sub_10008F58C()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 93) & 1 | 2u;
}

uint64_t sub_10008F59C()
{
  return 0;
}

uint64_t sub_10008F5A4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  sub_100007FF0((uint64_t)v0 + OBJC_IVAR____TtC8SOSBuddy23AnalyticsStateRetention__data, &qword_10031C9C8);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10008F5EC()
{
  return type metadata accessor for AnalyticsStateRetention(0);
}

uint64_t type metadata accessor for AnalyticsStateRetention(uint64_t a1)
{
  return sub_10003D8E8(a1, (uint64_t *)&unk_10031C6E0, (uint64_t)&nominal type descriptor for AnalyticsStateRetention);
}

void sub_10008F608(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[10];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = &unk_1002523E8;
  v4[2] = &unk_100252400;
  v4[3] = &unk_100252418;
  v4[4] = &unk_1002523E8;
  v4[5] = &unk_1002523E8;
  v4[6] = &unk_1002523E8;
  v4[7] = &unk_100252430;
  v4[8] = &unk_1002523E8;
  sub_10008F6B4(319);
  if (v3 <= 0x3F)
  {
    v4[9] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 10, v4, a1 + 80);
  }
}

void sub_10008F6B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10031C6F0)
  {
    v2 = _s8SOSBuddy4DataVMa_0(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10031C6F0);
  }
}

uint64_t _s8SOSBuddy4DataVMa_0(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_10031C978, (uint64_t)&_s8SOSBuddy4DataVMn_0);
}

_QWORD *sub_10008F71C(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for DispatchTime(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (_QWORD *)((char *)a1 + v8);
    v11 = (_QWORD *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (_OWORD *)((char *)a1 + v9);
    v14 = (_OWORD *)((char *)a2 + v9);
    *(_OWORD *)((char *)v13 + 25) = *(_OWORD *)((char *)v14 + 25);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    v16 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    *((_BYTE *)a1 + v16) = *((_BYTE *)a2 + v16);
    v17 = a3[10];
    *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
    *((_BYTE *)a1 + v17) = *((_BYTE *)a2 + v17);
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    swift_bridgeObjectRetain(v12);
  }
  return a1;
}

uint64_t sub_10008F7FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
}

uint64_t sub_10008F844(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_OWORD *)(a1 + v8);
  v13 = (_OWORD *)(a2 + v8);
  *(_OWORD *)((char *)v12 + 25) = *(_OWORD *)((char *)v13 + 25);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  v15 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v15) = *(_BYTE *)(a2 + v15);
  v16 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v16) = *(_BYTE *)(a2 + v16);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t sub_10008F8F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;

  v6 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = (_OWORD *)(a1 + v12);
  v14 = (_OWORD *)(a2 + v12);
  v15 = *(_OWORD *)((char *)v14 + 25);
  v16 = v14[1];
  *v13 = *v14;
  v13[1] = v16;
  *(_OWORD *)((char *)v13 + 25) = v15;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10008F9CC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;

  v6 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  *(_OWORD *)((char *)v8 + 25) = *(_OWORD *)((char *)v9 + 25);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  v11 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v11) = *(_BYTE *)(a2 + v11);
  v12 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_10008FA74(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  _OWORD *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = a3[7];
  v15 = (_OWORD *)(a1 + v13);
  v16 = (_OWORD *)(a2 + v13);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  *(_OWORD *)((char *)v15 + 25) = *(_OWORD *)((char *)v16 + 25);
  *(_BYTE *)(a1 + v14) = *(_BYTE *)(a2 + v14);
  v18 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  v19 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  return a1;
}

uint64_t sub_10008FB2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10008FB38);
}

uint64_t sub_10008FB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10008FBB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10008FBC4);
}

uint64_t sub_10008FBC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_10008FC40(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  result = type metadata accessor for DispatchTime(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100252450;
    v4[2] = &unk_100252418;
    v4[3] = &unk_100252468;
    v4[4] = &unk_100252468;
    v4[5] = &unk_100252468;
    v4[6] = &unk_100252468;
    v4[7] = &unk_100252480;
    swift_initStructMetadata(a1, 256, 8, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_10008FCD4(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10008FD0C + 4 * byte_10025236A[a1]))(0x4154554F5F544153, 0xEA00000000004547);
}

uint64_t sub_10008FD0C()
{
  return 0x5F544F4E5F544153;
}

unint64_t sub_10008FD2C()
{
  return 0xD000000000000014;
}

unint64_t sub_10008FD54()
{
  return 0xD000000000000016;
}

uint64_t sub_10008FDA4(uint64_t a1)
{
  _QWORD *v1;

  return sub_10000B458(a1, *v1 + 48, &qword_100319FB8);
}

double sub_10008FDC8()
{
  return sub_10008E660();
}

double sub_10008FDE8(uint64_t a1)
{
  return sub_10008E734(a1);
}

double sub_10008FE08(uint64_t a1)
{
  return sub_10008E768(a1);
}

double sub_10008FE28(uint64_t a1)
{
  return sub_10008E7F0(a1);
}

double sub_10008FE48(uint64_t a1)
{
  return sub_10008E824(a1);
}

double sub_10008FE68(int a1)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;
  double result;

  v2 = *v1;
  v3 = *(unsigned __int8 *)(v2 + 24);
  if (v3 == 2 || ((v3 ^ a1) & 1) != 0)
  {
    *(_BYTE *)(v2 + 24) = a1 & 1;
    return sub_10008EA14();
  }
  return result;
}

uint64_t sub_10008FEA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031C9C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008FEEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s8SOSBuddy4DataVMa_0(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10008FF30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031C9C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_10008FF78(char *a1)
{
  sub_10022B728(*a1);
}

void sub_10008FF84()
{
  char *v0;

  sub_100135D1C(0, *v0);
}

void sub_10008FF90(uint64_t a1)
{
  char *v1;

  sub_100135C2C(a1, *v1);
}

void sub_10008FF98(uint64_t a1)
{
  char *v1;

  sub_100135D1C(a1, *v1);
}

unint64_t sub_10008FFA0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_100090188(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10008FFCC@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_10008FCD4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_10008FFF4(uint64_t a1)
{
  uint64_t v2;

  v2 = _s8SOSBuddy4DataVMa_0(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100090030(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s8SOSBuddy4DataVMa_0(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for AnalyticsStateRetentionConnectionState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 6 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 6) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFA)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF9)
    return ((uint64_t (*)(void))((char *)&loc_1000900C0 + 4 * byte_100252376[v4]))();
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_1000900F4 + 4 * byte_100252371[v4]))();
}

uint64_t sub_1000900F4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000900FC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100090104);
  return result;
}

uint64_t sub_100090110(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100090118);
  *(_BYTE *)result = a2 + 6;
  return result;
}

uint64_t sub_10009011C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100090124(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AnalyticsStateRetentionConnectionState()
{
  return &type metadata for AnalyticsStateRetentionConnectionState;
}

unint64_t sub_100090144()
{
  unint64_t result;

  result = qword_10031C9D0[0];
  if (!qword_10031C9D0[0])
  {
    result = swift_getWitnessTable(&unk_100252550, &type metadata for AnalyticsStateRetentionConnectionState);
    atomic_store(result, qword_10031C9D0);
  }
  return result;
}

unint64_t sub_100090188(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002E0AE8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7)
    return 7;
  else
    return v3;
}

uint64_t sub_1000901D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 48);
}

uint64_t sub_1000901D8(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[3]);
  swift_release(a1[5]);
  return swift_release(a1[8]);
}

uint64_t sub_100090210(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  v5 = a2[5];
  v8 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  v6 = a2[8];
  *(_QWORD *)(a1 + 64) = v6;
  swift_retain(v3);
  swift_retain(v8);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t *sub_100090294(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_retain(v8);
  swift_release(v9);
  a1[6] = a2[6];
  a1[7] = a2[7];
  v10 = a1[8];
  v11 = a2[8];
  a1[8] = v11;
  swift_retain(v11);
  swift_release(v10);
  return a1;
}

uint64_t *sub_100090338(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_release(v5);
  v6 = a1[5];
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  swift_release(v6);
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  v7 = a1[8];
  a1[8] = a2[8];
  swift_release(v7);
  return a1;
}

uint64_t type metadata accessor for AXConditionalContentWithPanelView(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for AXConditionalContentWithPanelView);
}

uint64_t sub_1000903B8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];

  v2 = *(_OWORD *)(a2 + 32);
  v4[0] = *(_OWORD *)(a2 + 16);
  v4[1] = v2;
  return swift_getOpaqueTypeConformance2(v4, &unk_1002985FC, 1);
}

uint64_t sub_1000903EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))(a3, a1);
}

uint64_t sub_100090404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin();
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 16))((char *)&v14 - v11, a1, a2);
  swift_storeEnumTagMultiPayload(v12, v10, 0);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_1000904C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v14;

  v10 = type metadata accessor for _ConditionalContent.Storage(0);
  __chkstk_darwin();
  v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 16))((char *)&v14 - v11, a1, a3);
  swift_storeEnumTagMultiPayload(v12, v10, 1);
  return _ConditionalContent<>.init(storage:)(v12, a2, a3, a4, a5);
}

uint64_t sub_10009058C(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t TupleTypeMetadata;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v5 = (uint64_t *)(a3 & 0xFFFFFFFFFFFFFFFELL);
  if (a2 == 1)
  {
    TupleTypeMetadata = *v5;
    __chkstk_darwin();
    v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
LABEL_12:
    v22 = 32;
    v23 = a2;
    do
    {
      if (a2 == 1)
        v24 = 0;
      else
        v24 = *(_DWORD *)(TupleTypeMetadata + v22);
      v26 = *v5++;
      v25 = v26;
      v27 = *a1++;
      (*(void (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(&v8[v24], v27);
      v22 += 16;
      --v23;
    }
    while (v23);
    return TupleView.init(_:)(v8, TupleTypeMetadata);
  }
  __chkstk_darwin();
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    v11 = 0;
    if (a2 < 4)
      goto LABEL_9;
    if ((unint64_t)(v10 - (char *)v5) < 0x20)
      goto LABEL_9;
    v11 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    v12 = (__int128 *)(v5 + 2);
    v13 = v10 + 16;
    v14 = a2 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 4;
    }
    while (v14);
    if (v11 != a2)
    {
LABEL_9:
      v16 = a2 - v11;
      v17 = v11;
      v18 = &v10[8 * v11];
      v19 = &v5[v17];
      do
      {
        v20 = *v19++;
        *(_QWORD *)v18 = v20;
        v18 += 8;
        --v16;
      }
      while (v16);
    }
  }
  TupleTypeMetadata = swift_getTupleTypeMetadata(0, a2);
  __chkstk_darwin();
  v8 = (char *)&v29 - v21;
  if (a2)
    goto LABEL_12;
  return TupleView.init(_:)(v8, TupleTypeMetadata);
}

uint64_t sub_100090740@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t TupleTypeMetadata2;
  uint64_t v6;
  uint64_t WitnessTable;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t TupleTypeMetadata3;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  void (*v49)(char *, uint64_t);
  uint64_t v51;
  char *v52;
  _BYTE v53[16];
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v52 = a2;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = sub_100007FAC(&qword_10031CA58);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v3, v4, 0, 0);
  v6 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v6);
  v8 = type metadata accessor for VStack(255, v6, WitnessTable);
  v9 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v8);
  v10 = type metadata accessor for ScrollView(255, v8, v9);
  v11 = sub_100007FAC(&qword_10031CA60);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = type metadata accessor for ModifiedContent(255, v12, &type metadata for _PaddingLayout);
  v14 = sub_100007FAC(&qword_10031CA68);
  v15 = type metadata accessor for ModifiedContent(255, v13, v14);
  v16 = swift_getTupleTypeMetadata2(255, v11, v15, 0, 0);
  v17 = type metadata accessor for TupleView(255, v16);
  v18 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v17);
  v19 = type metadata accessor for ZStack(255, v17, v18);
  v20 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v19, 0, 0);
  v21 = type metadata accessor for TupleView(255, v20);
  v22 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v21);
  v23 = type metadata accessor for VStack(255, v21, v22);
  v24 = type metadata accessor for ModifiedContent(255, v23, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v25 = swift_getTupleTypeMetadata2(255, v10, v24, 0, 0);
  v26 = type metadata accessor for TupleView(255, v25);
  v27 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v26);
  v28 = type metadata accessor for ZStack(255, v26, v27);
  v29 = sub_100007FAC(&qword_10031CA70);
  v30 = type metadata accessor for ModifiedContent(255, v28, v29);
  v31 = type metadata accessor for ModifiedContent(255, v3, v29);
  v32 = type metadata accessor for ModifiedContent(255, v12, v29);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v31, &type metadata for Spacer, v32, 0, 0);
  v34 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v35 = type metadata accessor for _ConditionalContent(255, v30, v34);
  v60 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v28);
  v61 = sub_1000084FC(&qword_10031CA78, &qword_10031CA70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v58 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v30);
  v59 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v34);
  v36 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v35);
  v37 = type metadata accessor for VStack(0, v35, v36);
  v38 = *(_QWORD *)(v37 - 8);
  v40 = __chkstk_darwin(v37, v39);
  v42 = (char *)&v51 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = __chkstk_darwin(v40, v43);
  v46 = (char *)&v51 - v45;
  v54 = v3;
  v55 = v12;
  v56 = *(_OWORD *)(a1 + 32);
  v57 = v51;
  v47 = static HorizontalAlignment.center.getter(v44);
  VStack.init(alignment:spacing:content:)(v47, 0, 0, sub_100092964, v53, v35, v36);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v37);
  v48 = *(void (**)(char *, char *, uint64_t))(v38 + 16);
  v48(v46, v42, v37);
  v49 = *(void (**)(char *, uint64_t))(v38 + 8);
  v49(v42, v37);
  v48(v52, v46, v37);
  return ((uint64_t (*)(char *, uint64_t))v49)(v46, v37);
}

uint64_t sub_100090B24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(_QWORD, _QWORD)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t TupleTypeMetadata3;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t TupleTypeMetadata2;
  uint64_t v36;
  uint64_t WitnessTable;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  void (*v86)(char *, char *, uint64_t);
  void (*v87)(char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void (*v107)(char *, char *, uint64_t);
  char *v108;
  void (*v109)(char *, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  void (*v138)(_QWORD, _QWORD);
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  void *v158;
  uint64_t v159;
  _QWORD v160[3];
  uint64_t v161;
  char v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  void (*v169)(_QWORD, _QWORD);
  uint64_t v170;

  v148 = a5;
  v138 = a4;
  v139 = a1;
  v145 = a6;
  v8 = sub_100007FAC(&qword_10031CA70);
  v9 = type metadata accessor for ModifiedContent(255, a2, v8);
  v10 = type metadata accessor for ModifiedContent(255, a3, v8);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v9, &type metadata for Spacer, v10, 0, 0);
  v12 = type metadata accessor for TupleView(0, TupleTypeMetadata3);
  v135 = *(_QWORD *)(v12 - 8);
  v14 = __chkstk_darwin(v12, v13);
  v134 = (char *)&v122 - v15;
  v16 = *(_QWORD *)(a3 - 8);
  v147 = (uint64_t *)a3;
  v129 = v16;
  v18 = __chkstk_darwin(v14, v17);
  v128 = (char *)&v122 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = v10;
  v130 = *(_QWORD *)(v10 - 8);
  v21 = __chkstk_darwin(v18, v20);
  v132 = (char *)&v122 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v21, v23);
  v133 = (char *)&v122 - v25;
  v126 = *(_QWORD *)(a2 - 8);
  v27 = __chkstk_darwin(v24, v26);
  v125 = (char *)&v122 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = v9;
  v127 = *(_QWORD *)(v9 - 8);
  v30 = __chkstk_darwin(v27, v29);
  v131 = (char *)&v122 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30, v32);
  v143 = (char *)&v122 - v33;
  v34 = sub_100007FAC(&qword_10031CA58);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, a2, v34, 0, 0);
  v36 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v36);
  v38 = type metadata accessor for VStack(255, v36, WitnessTable);
  v39 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v38);
  v40 = type metadata accessor for ScrollView(255, v38, v39);
  v41 = sub_100007FAC(&qword_10031CA60);
  v42 = type metadata accessor for ModifiedContent(255, a3, &type metadata for _PaddingLayout);
  v43 = sub_100007FAC(&qword_10031CA68);
  v44 = type metadata accessor for ModifiedContent(255, v42, v43);
  v45 = swift_getTupleTypeMetadata2(255, v41, v44, 0, 0);
  v46 = type metadata accessor for TupleView(255, v45);
  v47 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v46);
  v48 = type metadata accessor for ZStack(255, v46, v47);
  v49 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v48, 0, 0);
  v50 = type metadata accessor for TupleView(255, v49);
  v51 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v50);
  v52 = type metadata accessor for VStack(255, v50, v51);
  v53 = type metadata accessor for ModifiedContent(255, v52, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v54 = swift_getTupleTypeMetadata2(255, v40, v53, 0, 0);
  v55 = type metadata accessor for TupleView(255, v54);
  v123 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v55);
  v56 = type metadata accessor for ZStack(0, v55, v123);
  v124 = *(_QWORD *)(v56 - 8);
  __chkstk_darwin(v56, v56);
  v58 = (char *)&v122 - v57;
  v140 = v59;
  v60 = type metadata accessor for ModifiedContent(0, v59, v8);
  v61 = *(char **)(v60 - 8);
  v63 = __chkstk_darwin(v60, v62);
  v65 = (char *)&v122 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v63, v66);
  v68 = (char *)&v122 - v67;
  v144 = v12;
  v142 = type metadata accessor for _ConditionalContent(0, v60, v12);
  v141 = *(_QWORD *)(v142 - 8);
  __chkstk_darwin(v142, v69);
  v146 = (char *)&v122 - v70;
  v167 = a2;
  v168 = v147;
  v71 = (uint64_t)v138;
  v169 = v138;
  v170 = v148;
  type metadata accessor for AXConditionalContentWithPanelView(0, (uint64_t)&v167);
  v72 = v139;
  v73 = sub_100091590();
  if ((v73 & 1) != 0)
  {
    v143 = v61;
    v75 = __chkstk_darwin(v73, v74);
    v76 = (uint64_t)v147;
    *(&v122 - 6) = a2;
    *(&v122 - 5) = v76;
    v77 = v148;
    *(&v122 - 4) = v71;
    *(&v122 - 3) = v77;
    *(&v122 - 2) = v72;
    v78 = static Alignment.center.getter(v75);
    ZStack.init(alignment:content:)(v78);
    v79 = v140;
    v80 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v140);
    sub_100092868(1, v79, v80);
    v81 = v58;
    v82 = v79;
    (*(void (**)(char *, uint64_t))(v124 + 8))(v81, v79);
    v83 = sub_1000084FC(&qword_10031CA78, &qword_10031CA70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    v149 = v80;
    v150 = v83;
    v84 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v60);
    v85 = v143;
    v86 = (void (*)(char *, char *, uint64_t))*((_QWORD *)v143 + 2);
    v86(v68, v65, v60);
    v87 = (void (*)(char *, uint64_t))*((_QWORD *)v85 + 1);
    v87(v65, v60);
    v86(v65, v68, v60);
    v88 = v144;
    v89 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v144);
    sub_100090404((uint64_t)v65, v60, v88, v84, v89);
    v87(v65, v60);
    v90 = v68;
    v91 = v60;
  }
  else
  {
    v92 = v125;
    (*(void (**)(void))(v72 + 16))();
    v93 = (uint64_t)v131;
    sub_100092868(0, a2, v71);
    (*(void (**)(char *, uint64_t))(v126 + 8))(v92, a2);
    v94 = sub_1000084FC(&qword_10031CA78, &qword_10031CA70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    v165 = v71;
    v166 = v94;
    v95 = v94;
    v125 = (char *)v94;
    v96 = v137;
    v126 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v137);
    v97 = v127;
    v124 = *(_QWORD *)(v127 + 16);
    v98 = v143;
    ((void (*)(char *, uint64_t, uint64_t))v124)(v143, v93, v96);
    v138 = *(void (**)(_QWORD, _QWORD))(v97 + 8);
    v99 = ((uint64_t (*)(uint64_t, uint64_t))v138)(v93, v96);
    v100 = v128;
    (*(void (**)(uint64_t))(v72 + 32))(v99);
    v101 = v132;
    v102 = (uint64_t)v147;
    v103 = v148;
    sub_100092868(0, (uint64_t)v147, v148);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v100, v102);
    v163 = v103;
    v164 = v95;
    v104 = v136;
    v105 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v136);
    v106 = v130;
    v107 = *(void (**)(char *, char *, uint64_t))(v130 + 16);
    v108 = v133;
    v107(v133, v101, v104);
    v109 = *(void (**)(char *, uint64_t))(v106 + 8);
    v109(v101, v104);
    ((void (*)(uint64_t, char *, uint64_t))v124)(v93, v98, v96);
    v161 = 0;
    v162 = 1;
    v167 = v93;
    v168 = &v161;
    v107(v101, v108, v104);
    v169 = (void (*)(_QWORD, _QWORD))v101;
    v160[0] = v96;
    v160[1] = &type metadata for Spacer;
    v160[2] = v104;
    v157 = v126;
    v158 = &protocol witness table for Spacer;
    v159 = v105;
    v110 = (uint64_t)v134;
    sub_10009058C(&v167, 3uLL, (uint64_t)v160);
    v109(v101, v104);
    v111 = v93;
    v87 = (void (*)(char *, uint64_t))v138;
    v138(v111, v96);
    v82 = v140;
    v155 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v140);
    v156 = v125;
    v112 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v60);
    v88 = v144;
    v113 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v144);
    sub_1000904C8(v110, v60, v88, v112, v113);
    (*(void (**)(uint64_t, uint64_t))(v135 + 8))(v110, v88);
    v109(v108, v104);
    v90 = v143;
    v91 = v96;
  }
  v87(v90, v91);
  v114 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v82);
  v115 = sub_1000084FC(&qword_10031CA78, &qword_10031CA70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v153 = v114;
  v154 = v115;
  v116 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v60);
  v117 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v88);
  v151 = v116;
  v152 = v117;
  v118 = v142;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v142);
  v119 = v141;
  v120 = v146;
  (*(void (**)(uint64_t, char *, uint64_t))(v141 + 16))(v145, v146, v118);
  return (*(uint64_t (**)(char *, uint64_t))(v119 + 8))(v120, v118);
}

uint64_t sub_100091590()
{
  _QWORD *v0;
  id v1;
  char v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*v0)
  {
    v1 = *(id *)(*v0 + 112);
    v2 = UIContentSizeCategory.isAccessibilityCategory.getter();

    return v2 & 1;
  }
  else
  {
    v4 = v0[1];
    v5 = type metadata accessor for UIMetrics();
    v6 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v4, v5, v6);
    __break(1u);
  }
  return result;
}

uint64_t sub_100091610@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(char *, uint64_t, uint64_t);
  char *v62;
  void (*v63)(uint64_t, uint64_t);
  char *v64;
  uint64_t (*v65)(char *, uint64_t);
  uint64_t v67;
  void (*v68)(char *, char *, uint64_t);
  char *v69;
  uint64_t v70;
  uint64_t (*v71)(char *, uint64_t);
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83[16];
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89[16];
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[2];
  uint64_t v98[4];

  v81 = a1;
  v82 = a6;
  v10 = sub_100007FAC(&qword_10031CA60);
  v11 = type metadata accessor for ModifiedContent(255, a3, &type metadata for _PaddingLayout);
  v12 = sub_100007FAC(&qword_10031CA68);
  v13 = type metadata accessor for ModifiedContent(255, v11, v12);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v10, v13, 0, 0);
  v15 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v15);
  v17 = type metadata accessor for ZStack(255, v15, WitnessTable);
  v18 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v17, 0, 0);
  v77 = type metadata accessor for TupleView(255, v18);
  v76 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v77);
  v19 = type metadata accessor for VStack(0, v77, v76);
  v20 = *(_QWORD *)(v19 - 8);
  v75 = v19;
  v80 = v20;
  __chkstk_darwin(v19, v19);
  v73 = (char *)&v67 - v21;
  v72 = type metadata accessor for ModifiedContent(0, v22, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v79 = *(_QWORD *)(v72 - 8);
  v24 = __chkstk_darwin(v72, v23);
  v74 = (char *)&v67 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v26);
  v78 = (char *)&v67 - v27;
  v28 = sub_100007FAC(&qword_10031CA58);
  v29 = a2;
  v67 = a2;
  v30 = swift_getTupleTypeMetadata2(255, a2, v28, 0, 0);
  v31 = type metadata accessor for TupleView(255, v30);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v31);
  v33 = type metadata accessor for VStack(255, v31, v32);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v33);
  v35 = type metadata accessor for ScrollView(0, v33, v34);
  v36 = *(_QWORD *)(v35 - 8);
  v38 = __chkstk_darwin(v35, v37);
  v40 = (char *)&v67 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = __chkstk_darwin(v38, v41);
  v44 = (char *)&v67 - v43;
  v69 = (char *)&v67 - v43;
  v45 = static Axis.Set.vertical.getter(v42);
  v90 = v29;
  v91 = a3;
  v92 = a4;
  v93 = a5;
  v46 = a5;
  v47 = v81;
  v94 = v81;
  ScrollView.init(_:showsIndicators:content:)(v45, 0, sub_10009297C, v89, v33, v34);
  v70 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v35);
  v68 = *(void (**)(char *, char *, uint64_t))(v36 + 16);
  v68(v44, v40, v35);
  v71 = *(uint64_t (**)(char *, uint64_t))(v36 + 8);
  v48 = v71(v40, v35);
  v84 = v67;
  v85 = a3;
  v86 = a4;
  v87 = v46;
  v88 = v47;
  v49 = static HorizontalAlignment.center.getter(v48);
  v50 = v73;
  v51 = VStack.init(alignment:spacing:content:)(v49, 0, 0, sub_100092988, v83, v77, v76);
  v52 = static SafeAreaRegions.all.getter(v51);
  v54 = static Edge.Set.all.getter(v53);
  v55 = v75;
  v56 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v75);
  v57 = (uint64_t)v74;
  View.ignoresSafeArea(_:edges:)(v52, v54, v55, v56);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v50, v55);
  v98[2] = v56;
  v98[3] = (uint64_t)&protocol witness table for _SafeAreaRegionsIgnoringLayout;
  v58 = v72;
  v59 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v72);
  v60 = v79;
  v61 = *(void (**)(char *, uint64_t, uint64_t))(v79 + 16);
  v62 = v78;
  v61(v78, v57, v58);
  v63 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
  v63(v57, v58);
  v64 = v69;
  v68(v40, v69, v35);
  v98[0] = (uint64_t)v40;
  v61((char *)v57, (uint64_t)v62, v58);
  v98[1] = v57;
  v97[0] = v35;
  v97[1] = v58;
  v95 = v70;
  v96 = v59;
  sub_10009058C(v98, 2uLL, (uint64_t)v97);
  v63((uint64_t)v62, v58);
  v65 = v71;
  v71(v64, v35);
  v63(v57, v58);
  return v65(v40, v35);
}

uint64_t sub_100091B28@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, char *a6@<X8>)
{
  uint64_t v10;
  uint64_t TupleTypeMetadata2;
  uint64_t v12;
  uint64_t WitnessTable;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, char *, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  _BYTE v30[16];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v28 = a5;
  v29 = a6;
  v10 = sub_100007FAC(&qword_10031CA58);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, a2, v10, 0, 0);
  v12 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v12);
  v14 = type metadata accessor for VStack(0, v12, WitnessTable);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = __chkstk_darwin(v14, v16);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v17, v20);
  v23 = (char *)&v28 - v22;
  v31 = a2;
  v32 = a3;
  v33 = a4;
  v34 = v28;
  v35 = a1;
  v24 = static HorizontalAlignment.center.getter(v21);
  VStack.init(alignment:spacing:content:)(v24, 0, 0, sub_100092AF0, v30, v12, WitnessTable);
  swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v14);
  v25 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v25(v23, v19, v14);
  v26 = *(void (**)(char *, uint64_t))(v15 + 8);
  v26(v19, v14);
  v25(v29, v23, v14);
  return ((uint64_t (*)(char *, uint64_t))v26)(v23, v14);
}

uint64_t sub_100091CA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  _QWORD *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  char *v38;
  void (*v39)(char *, char *, uint64_t);
  double (*v40)(char *, uint64_t);
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  _QWORD v46[2];
  uint64_t v47;
  __int128 *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  unsigned __int8 v56;
  uint64_t v57;
  unsigned __int8 v58;
  uint64_t v59;
  unsigned __int8 v60;
  uint64_t v61;
  uint64_t v62;

  v41 = a3;
  v5 = a1;
  v42 = a4;
  v6 = *(_QWORD *)(a2 - 8);
  v7 = __chkstk_darwin(a1, a2);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v7, v10);
  v13 = (char *)&v30 - v12;
  v43 = (char *)&v30 - v12;
  (*(void (**)(void))(v11 + 16))();
  v39 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v38 = v9;
  v39(v13, v9, a2);
  v40 = *(double (**)(char *, uint64_t))(v6 + 8);
  v14.n128_f64[0] = v40(v9, a2);
  v15 = static Color.clear.getter(v14);
  v49 = *(_OWORD *)(v5 + 48);
  v50 = *(_QWORD *)(v5 + 64);
  v16 = sub_100003DB8(&qword_10031B660);
  State.wrappedValue.getter(&v47, v16);
  v17 = *(double *)&v48;
  v49 = *(_OWORD *)(v5 + 48);
  v50 = *(_QWORD *)(v5 + 64);
  v18 = State.wrappedValue.getter(&v47, v16);
  v19 = *(double *)&v48;
  v20 = static Alignment.center.getter(v18);
  sub_100132164(0.0, 1, 0.0, 1, INFINITY, 0, v17, 0, (uint64_t)&v49, 0.0, 1, v19, 0, v20, v21, v15);
  swift_release(v15);
  v22 = v49;
  LOBYTE(v16) = v50;
  v23 = v51;
  LOBYTE(v5) = v52;
  v24 = v53;
  v25 = v54;
  v26 = v55;
  v37 = v56;
  v36 = v57;
  v35 = v58;
  v34 = v59;
  v33 = v60;
  v32 = v61;
  v31 = v62;
  v27 = (uint64_t)v38;
  v39(v38, v43, a2);
  v49 = v22;
  LOBYTE(v50) = v16;
  v51 = v23;
  v52 = v5;
  v53 = v24;
  v54 = v25;
  v55 = v26;
  v56 = v37;
  v57 = v36;
  v58 = v35;
  v59 = v34;
  v60 = v33;
  v61 = v32;
  v62 = v31;
  v47 = v27;
  v48 = &v49;
  swift_retain(v22);
  v46[0] = a2;
  v46[1] = sub_100003DB8(&qword_10031CA58);
  v44 = v41;
  v45 = sub_100092B10();
  sub_10009058C(&v47, 2uLL, (uint64_t)v46);
  swift_release(v22);
  v28 = (uint64_t (*)(uint64_t, uint64_t))v40;
  v40(v43, a2);
  swift_release(v49);
  return v28(v27, a2);
}

uint64_t sub_100091FD0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t TupleTypeMetadata2;
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, uint64_t);
  _QWORD v32[12];
  _QWORD v33[2];
  uint64_t v34;
  char v35;
  uint64_t v36[2];

  v32[0] = a5;
  v32[1] = a6;
  v10 = sub_100007FAC(&qword_10031CA60);
  v11 = type metadata accessor for ModifiedContent(255, a3, &type metadata for _PaddingLayout);
  v12 = sub_100007FAC(&qword_10031CA68);
  v13 = type metadata accessor for ModifiedContent(255, v11, v12);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v10, v13, 0, 0);
  v15 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v15);
  v17 = type metadata accessor for ZStack(0, v15, WitnessTable);
  v18 = *(_QWORD *)(v17 - 8);
  v20 = __chkstk_darwin(v17, v19);
  v22 = (char *)v32 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __chkstk_darwin(v20, v23);
  v26 = (char *)v32 - v25;
  v27 = static Alignment.bottom.getter(v24);
  v32[4] = a2;
  v32[5] = a3;
  v32[6] = a4;
  v32[7] = v32[0];
  v32[8] = a1;
  ZStack.init(alignment:content:)(v27);
  v28 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v17);
  v29 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v29(v26, v22, v17);
  v30 = *(void (**)(char *, uint64_t))(v18 + 8);
  v30(v22, v17);
  v34 = 0;
  v35 = 1;
  v36[0] = (uint64_t)&v34;
  v29(v22, v26, v17);
  v36[1] = (uint64_t)v22;
  v33[0] = &type metadata for Spacer;
  v33[1] = v17;
  v32[10] = &protocol witness table for Spacer;
  v32[11] = v28;
  sub_10009058C(v36, 2uLL, (uint64_t)v33);
  v30(v26, v17);
  return ((uint64_t (*)(char *, uint64_t))v30)(v22, v17);
}

uint64_t sub_1000921D8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  _QWORD *v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t WitnessTable;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, char *, uint64_t);
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  uint64_t result;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  _QWORD v69[2];
  _OWORD v70[8];
  uint64_t v71;
  uint64_t v72[6];
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;

  v59 = a4;
  v60 = a5;
  v66 = a6;
  v57 = *(_QWORD *)(a3 - 8);
  v58 = a2;
  __chkstk_darwin(a1, a2);
  v9 = (char *)&v57 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ModifiedContent(0, a3, &type metadata for _PaddingLayout);
  v62 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v57 - v12;
  v14 = sub_100007FAC(&qword_10031CA68);
  v15 = type metadata accessor for ModifiedContent(0, v10, v14);
  v63 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15, v16);
  v65 = (char *)&v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17, v19);
  v61 = (char *)&v57 - v21;
  __chkstk_darwin(v20, v22);
  v64 = (char *)&v57 - v23;
  v73 = *((_OWORD *)a1 + 3);
  v74 = a1[8];
  v75 = *((_OWORD *)a1 + 3);
  *(_QWORD *)&v76 = a1[8];
  v24 = sub_100003DB8(&qword_10031B660);
  State.wrappedValue.getter(v70, v24);
  v25 = *((double *)v70 + 1);
  v75 = v73;
  *(_QWORD *)&v76 = v74;
  v26 = State.wrappedValue.getter(v70, v24);
  v27 = *((double *)v70 + 1);
  v28 = static Alignment.center.getter(v26);
  v30 = sub_10013230C(0.0, 1, 0.0, 1, INFINITY, 0, v25, 0, (uint64_t)&v75, 0.0, 1.0, 0.0, 1, v27, 0, v28, v29, 6);
  v31 = ((uint64_t (*)(double))a1[4])(v30);
  v32 = static Edge.Set.bottom.getter(v31);
  v33 = *a1;
  if (*a1)
  {
    v34 = v32;
    v35 = qword_100315788;
    swift_retain(*a1);
    if (v35 != -1)
      swift_once(&qword_100315788, sub_10006F500);
    v36 = qword_10033FC50;
    swift_release(v33);
    v37 = v60;
    View.padding(_:_:)(v34, v36, 0, a3, v60);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v9, a3);
    v38 = swift_allocObject(&unk_1002EB478, 120, 7);
    *(_QWORD *)(v38 + 16) = v58;
    *(_QWORD *)(v38 + 24) = a3;
    *(_QWORD *)(v38 + 32) = v59;
    *(_QWORD *)(v38 + 40) = v37;
    v39 = *((_OWORD *)a1 + 3);
    *(_OWORD *)(v38 + 80) = *((_OWORD *)a1 + 2);
    *(_OWORD *)(v38 + 96) = v39;
    *(_QWORD *)(v38 + 112) = a1[8];
    v40 = *((_OWORD *)a1 + 1);
    *(_OWORD *)(v38 + 48) = *(_OWORD *)a1;
    *(_OWORD *)(v38 + 64) = v40;
    sub_1000929EC(a1);
    type metadata accessor for CGSize(0);
    v42 = v41;
    v72[4] = v37;
    v72[5] = (uint64_t)&protocol witness table for _PaddingLayout;
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
    v44 = sub_1000052EC(&qword_1003185D8, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
    v45 = v61;
    View.onGeometryChange<A>(of:do:)(sub_10002EB40, 0, sub_1000929DC, v38, v10, v42, WitnessTable, v44);
    swift_release(v38);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v13, v10);
    v46 = sub_1000084FC(&qword_10031CA80, &qword_10031CA68, (uint64_t)&protocol conformance descriptor for _GeometryActionModifier<A>);
    v72[2] = WitnessTable;
    v72[3] = v46;
    v47 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
    v48 = v63;
    v49 = v64;
    v50 = *(void (**)(char *, char *, uint64_t))(v63 + 16);
    v50(v64, v45, v15);
    v51 = *(void (**)(char *, uint64_t))(v48 + 8);
    v51(v45, v15);
    v70[6] = v81;
    v70[7] = v82;
    v71 = v83;
    v70[2] = v77;
    v70[3] = v78;
    v70[4] = v79;
    v70[5] = v80;
    v70[0] = v75;
    v70[1] = v76;
    v72[0] = (uint64_t)v70;
    v52 = (uint64_t)v65;
    v50(v65, v49, v15);
    v72[1] = v52;
    v69[0] = sub_100003DB8(&qword_10031CA60);
    v69[1] = v15;
    v67 = sub_100092A40();
    v68 = v47;
    sub_10009058C(v72, 2uLL, (uint64_t)v69);
    v51(v49, v15);
    return ((uint64_t (*)(uint64_t, uint64_t))v51)(v52, v15);
  }
  else
  {
    v54 = a1[1];
    v55 = type metadata accessor for UIMetrics();
    v56 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v54, v55, v56);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000926A4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18[2];
  __int128 v19;
  uint64_t v20;

  v3 = *a1;
  v4 = a1[1];
  if (qword_1003158D8 != -1)
    swift_once(&qword_1003158D8, sub_1000D9904);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10000D744(v5, (uint64_t)qword_10033FF40);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v18[0] = v10;
    *(_DWORD *)v9 = 136446210;
    *(_QWORD *)&v19 = v3;
    *((_QWORD *)&v19 + 1) = v4;
    type metadata accessor for CGSize(0);
    v13 = String.init<A>(describing:)(&v19, v11, v12);
    v15 = v14;
    *(_QWORD *)&v19 = sub_100172BEC(v13, v14, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, (char *)&v19 + 8, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Floating panel size changed: %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }

  v19 = *(_OWORD *)(a2 + 48);
  v20 = *(_QWORD *)(a2 + 64);
  v18[0] = v3;
  v18[1] = v4;
  v16 = sub_100003DB8(&qword_10031B660);
  return State.wrappedValue.setter(v18, v16);
}

uint64_t sub_100092868(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;
  char v8;

  KeyPath = swift_getKeyPath(&unk_100252620);
  v8 = a1;
  View.environment<A>(_:_:)(KeyPath, &v8, a2, a3);
  return swift_release(KeyPath);
}

uint64_t sub_1000928D8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  return sub_100090740(a1, a2);
}

void sub_100092918(_BYTE *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100092920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return static EnvironmentKey<>._valuesEqual(_:_:)(a1, a2, a3, a4, &protocol witness table for Bool);
}

uint64_t sub_10009292C()
{
  unint64_t v0;
  uint64_t var1;

  v0 = sub_100042A8C();
  EnvironmentValues.subscript.getter(&var1, &type metadata for AXConditionalContentOnEnvironmentKey, &type metadata for AXConditionalContentOnEnvironmentKey, v0);
  return var1;
}

uint64_t sub_100092964()
{
  return sub_100092AFC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100090B24);
}

uint64_t sub_100092970()
{
  return sub_100092AFC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100091610);
}

uint64_t sub_10009297C()
{
  return sub_100092AFC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100091B28);
}

uint64_t sub_100092988()
{
  return sub_100092AFC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100091FD0);
}

uint64_t sub_100092994()
{
  return sub_100092AFC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000921D8);
}

uint64_t sub_1000929A0()
{
  _QWORD *v0;

  swift_release(v0[6]);
  swift_release(v0[9]);
  swift_release(v0[11]);
  swift_release(v0[14]);
  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_1000929DC(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000926A4(a1, v1 + 48);
}

uint64_t *sub_1000929EC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = a1[3];
  v4 = a1[5];
  swift_retain(a1[8]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

unint64_t sub_100092A40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031CA88;
  if (!qword_10031CA88)
  {
    v1 = sub_100007FAC(&qword_10031CA60);
    sub_100092AAC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031CA88);
  }
  return result;
}

unint64_t sub_100092AAC()
{
  unint64_t result;

  result = qword_10031CA90;
  if (!qword_10031CA90)
  {
    result = swift_getWitnessTable(&unk_10025B1B4, &type metadata for BlurBackgroundView);
    atomic_store(result, (unint64_t *)&qword_10031CA90);
  }
  return result;
}

uint64_t sub_100092AF0()
{
  return sub_100092AFC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100091CA8);
}

uint64_t sub_100092AFC(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

unint64_t sub_100092B10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031CA98;
  if (!qword_10031CA98)
  {
    v1 = sub_100007FAC(&qword_10031CA58);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031CA98);
  }
  return result;
}

ValueMetadata *type metadata accessor for AXConditionalContentOnEnvironmentKey()
{
  return &type metadata for AXConditionalContentOnEnvironmentKey;
}

uint64_t sub_100092B8C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t TupleTypeMetadata2;
  uint64_t v5;
  uint64_t WitnessTable;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t TupleTypeMetadata3;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = *a1;
  v1 = a1[1];
  v3 = sub_100007FAC(&qword_10031CA58);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v2, v3, 0, 0);
  v5 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v5);
  v7 = type metadata accessor for VStack(255, v5, WitnessTable);
  v8 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v7);
  v9 = type metadata accessor for ScrollView(255, v7, v8);
  v10 = sub_100007FAC(&qword_10031CA60);
  v11 = type metadata accessor for ModifiedContent(255, v1, &type metadata for _PaddingLayout);
  v12 = sub_100007FAC(&qword_10031CA68);
  v13 = type metadata accessor for ModifiedContent(255, v11, v12);
  v14 = swift_getTupleTypeMetadata2(255, v10, v13, 0, 0);
  v15 = type metadata accessor for TupleView(255, v14);
  v16 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v15);
  v17 = type metadata accessor for ZStack(255, v15, v16);
  v18 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v17, 0, 0);
  v19 = type metadata accessor for TupleView(255, v18);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v19);
  v21 = type metadata accessor for VStack(255, v19, v20);
  v22 = type metadata accessor for ModifiedContent(255, v21, &type metadata for _SafeAreaRegionsIgnoringLayout);
  v23 = swift_getTupleTypeMetadata2(255, v9, v22, 0, 0);
  v24 = type metadata accessor for TupleView(255, v23);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v24);
  v26 = type metadata accessor for ZStack(255, v24, v25);
  v27 = sub_100007FAC(&qword_10031CA70);
  v28 = type metadata accessor for ModifiedContent(255, v26, v27);
  v29 = type metadata accessor for ModifiedContent(255, v2, v27);
  v30 = type metadata accessor for ModifiedContent(255, v1, v27);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v29, &type metadata for Spacer, v30, 0, 0);
  v32 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v33 = type metadata accessor for _ConditionalContent(255, v28, v32);
  swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v26);
  sub_1000084FC(&qword_10031CA78, &qword_10031CA70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v28);
  swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v32);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v33);
  v35 = type metadata accessor for VStack(255, v33, v34);
  return swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v35);
}

void *sub_100092E9C()
{
  uint64_t v0;
  uint64_t inited;
  __n128 v2;
  uint64_t v3;
  __n128 v4;
  __n128 v5;
  void *result;
  uint64_t v7;

  v0 = sub_100003DB8(&qword_10031CAB8);
  inited = swift_initStackObject(v0, &v7);
  *(_OWORD *)(inited + 16) = xmmword_1002526B0;
  *(_QWORD *)(inited + 32) = 6579570;
  *(_QWORD *)(inited + 40) = 0xE300000000000000;
  *(_QWORD *)(inited + 48) = static Color.red.getter();
  *(_QWORD *)(inited + 56) = 0x65676E61726FLL;
  *(_QWORD *)(inited + 64) = 0xE600000000000000;
  *(_QWORD *)(inited + 72) = static Color.orange.getter();
  *(_QWORD *)(inited + 80) = 0x776F6C6C6579;
  *(_QWORD *)(inited + 88) = 0xE600000000000000;
  *(_QWORD *)(inited + 96) = static Color.yellow.getter();
  *(_QWORD *)(inited + 104) = 0x6E65657267;
  *(_QWORD *)(inited + 112) = 0xE500000000000000;
  *(_QWORD *)(inited + 120) = static Color.green.getter(v2);
  *(_QWORD *)(inited + 128) = 1953393005;
  *(_QWORD *)(inited + 136) = 0xE400000000000000;
  *(_QWORD *)(inited + 144) = static Color.mint.getter();
  *(_QWORD *)(inited + 152) = 1818322292;
  *(_QWORD *)(inited + 160) = 0xE400000000000000;
  *(_QWORD *)(inited + 168) = static Color.teal.getter();
  *(_QWORD *)(inited + 176) = 1851881827;
  *(_QWORD *)(inited + 184) = 0xE400000000000000;
  *(_QWORD *)(inited + 192) = static Color.cyan.getter();
  *(_QWORD *)(inited + 200) = 1702194274;
  *(_QWORD *)(inited + 208) = 0xE400000000000000;
  *(_QWORD *)(inited + 216) = static Color.blue.getter();
  *(_QWORD *)(inited + 224) = 0x6F6769646E69;
  *(_QWORD *)(inited + 232) = 0xE600000000000000;
  *(_QWORD *)(inited + 240) = static Color.indigo.getter();
  *(_QWORD *)(inited + 248) = 0x656C70727570;
  *(_QWORD *)(inited + 256) = 0xE600000000000000;
  *(_QWORD *)(inited + 264) = static Color.purple.getter();
  *(_QWORD *)(inited + 272) = 1802398064;
  *(_QWORD *)(inited + 280) = 0xE400000000000000;
  *(_QWORD *)(inited + 288) = static Color.pink.getter();
  *(_QWORD *)(inited + 296) = 0x6E776F7262;
  *(_QWORD *)(inited + 304) = 0xE500000000000000;
  v3 = static Color.brown.getter();
  *(_QWORD *)(inited + 312) = v3;
  *(_QWORD *)(inited + 320) = 0x6574696877;
  *(_QWORD *)(inited + 328) = 0xE500000000000000;
  *(_QWORD *)(inited + 336) = static Color.white.getter(v3);
  *(_QWORD *)(inited + 344) = 2036429415;
  *(_QWORD *)(inited + 352) = 0xE400000000000000;
  *(_QWORD *)(inited + 360) = static Color.gray.getter();
  *(_QWORD *)(inited + 368) = 0x6B63616C62;
  *(_QWORD *)(inited + 376) = 0xE500000000000000;
  *(_QWORD *)(inited + 384) = static Color.black.getter(v4);
  *(_QWORD *)(inited + 392) = 0x7261656C63;
  *(_QWORD *)(inited + 400) = 0xE500000000000000;
  *(_QWORD *)(inited + 408) = static Color.clear.getter(v5);
  *(_QWORD *)(inited + 416) = 0x7972616D697270;
  *(_QWORD *)(inited + 424) = 0xE700000000000000;
  *(_QWORD *)(inited + 432) = static Color.primary.getter();
  *(_QWORD *)(inited + 440) = 0x7261646E6F636573;
  *(_QWORD *)(inited + 448) = 0xE900000000000079;
  *(_QWORD *)(inited + 456) = static Color.secondary.getter();
  result = (void *)sub_100224F78(inited);
  off_10031CAA0 = result;
  return result;
}

void *sub_1000930B8()
{
  uint64_t v0;
  uint64_t inited;
  void *v2;
  void *result;
  _BYTE v4[584];

  v0 = sub_100003DB8(&qword_10031CAB0);
  inited = swift_initStackObject(v0, v4);
  *(_OWORD *)(inited + 16) = xmmword_1002526C0;
  *(_QWORD *)(inited + 32) = 0x72476D6574737973;
  *(_QWORD *)(inited + 40) = 0xEB00000000327961;
  v2 = (void *)objc_opt_self(UIColor);
  *(_QWORD *)(inited + 48) = objc_msgSend(v2, "systemGray2Color");
  *(_QWORD *)(inited + 56) = 0x72476D6574737973;
  *(_QWORD *)(inited + 64) = 0xEB00000000337961;
  *(_QWORD *)(inited + 72) = objc_msgSend(v2, "systemGray3Color");
  *(_QWORD *)(inited + 80) = 0x72476D6574737973;
  *(_QWORD *)(inited + 88) = 0xEB00000000347961;
  *(_QWORD *)(inited + 96) = objc_msgSend(v2, "systemGray4Color");
  *(_QWORD *)(inited + 104) = 0x72476D6574737973;
  *(_QWORD *)(inited + 112) = 0xEB00000000357961;
  *(_QWORD *)(inited + 120) = objc_msgSend(v2, "systemGray5Color");
  *(_QWORD *)(inited + 128) = 0x72476D6574737973;
  *(_QWORD *)(inited + 136) = 0xEB00000000367961;
  *(_QWORD *)(inited + 144) = objc_msgSend(v2, "systemGray6Color");
  *(_QWORD *)(inited + 152) = 0x6C6562616CLL;
  *(_QWORD *)(inited + 160) = 0xE500000000000000;
  *(_QWORD *)(inited + 168) = objc_msgSend(v2, "labelColor");
  strcpy((char *)(inited + 176), "secondaryLabel");
  *(_BYTE *)(inited + 191) = -18;
  *(_QWORD *)(inited + 192) = objc_msgSend(v2, "secondaryLabelColor");
  strcpy((char *)(inited + 200), "tertiaryLabel");
  *(_WORD *)(inited + 214) = -4864;
  *(_QWORD *)(inited + 216) = objc_msgSend(v2, "tertiaryLabelColor");
  *(_QWORD *)(inited + 224) = 0x616E726574617571;
  *(_QWORD *)(inited + 232) = 0xEF6C6562614C7972;
  *(_QWORD *)(inited + 240) = objc_msgSend(v2, "quaternaryLabelColor");
  *(_QWORD *)(inited + 248) = 1802398060;
  *(_QWORD *)(inited + 256) = 0xE400000000000000;
  *(_QWORD *)(inited + 264) = objc_msgSend(v2, "linkColor");
  *(_QWORD *)(inited + 272) = 0x6C6F686563616C70;
  *(_QWORD *)(inited + 280) = 0xEF74786554726564;
  *(_QWORD *)(inited + 288) = objc_msgSend(v2, "placeholderTextColor");
  *(_QWORD *)(inited + 296) = 0x6F74617261706573;
  *(_QWORD *)(inited + 304) = 0xE900000000000072;
  *(_QWORD *)(inited + 312) = objc_msgSend(v2, "separatorColor");
  *(_QWORD *)(inited + 320) = 0x655365757161706FLL;
  *(_QWORD *)(inited + 328) = 0xEF726F7461726170;
  *(_QWORD *)(inited + 336) = objc_msgSend(v2, "opaqueSeparatorColor");
  *(_QWORD *)(inited + 344) = 0xD000000000000010;
  *(_QWORD *)(inited + 352) = 0x80000001002675D0;
  *(_QWORD *)(inited + 360) = objc_msgSend(v2, "systemBackgroundColor");
  *(_QWORD *)(inited + 368) = 0xD000000000000019;
  *(_QWORD *)(inited + 376) = 0x80000001002675F0;
  *(_QWORD *)(inited + 384) = objc_msgSend(v2, "secondarySystemBackgroundColor");
  *(_QWORD *)(inited + 392) = 0xD000000000000018;
  *(_QWORD *)(inited + 400) = 0x8000000100267610;
  *(_QWORD *)(inited + 408) = objc_msgSend(v2, "tertiarySystemBackgroundColor");
  *(_QWORD *)(inited + 416) = 0xD000000000000017;
  *(_QWORD *)(inited + 424) = 0x8000000100267630;
  *(_QWORD *)(inited + 432) = objc_msgSend(v2, "systemGroupedBackgroundColor");
  *(_QWORD *)(inited + 440) = 0xD000000000000020;
  *(_QWORD *)(inited + 448) = 0x8000000100267650;
  *(_QWORD *)(inited + 456) = objc_msgSend(v2, "secondarySystemGroupedBackgroundColor");
  *(_QWORD *)(inited + 464) = 0xD00000000000001FLL;
  *(_QWORD *)(inited + 472) = 0x8000000100267680;
  *(_QWORD *)(inited + 480) = objc_msgSend(v2, "tertiarySystemGroupedBackgroundColor");
  *(_QWORD *)(inited + 488) = 0x69466D6574737973;
  *(_QWORD *)(inited + 496) = 0xEA00000000006C6CLL;
  *(_QWORD *)(inited + 504) = objc_msgSend(v2, "systemFillColor");
  *(_QWORD *)(inited + 512) = 0xD000000000000013;
  *(_QWORD *)(inited + 520) = 0x80000001002676A0;
  *(_QWORD *)(inited + 528) = objc_msgSend(v2, "secondarySystemFillColor");
  *(_QWORD *)(inited + 536) = 0xD000000000000012;
  *(_QWORD *)(inited + 544) = 0x80000001002676C0;
  *(_QWORD *)(inited + 552) = objc_msgSend(v2, "tertiarySystemFillColor");
  *(_QWORD *)(inited + 560) = 0xD000000000000014;
  *(_QWORD *)(inited + 568) = 0x80000001002676E0;
  *(_QWORD *)(inited + 576) = objc_msgSend(v2, "quaternarySystemFillColor");
  result = (void *)sub_100225090(inited);
  off_10031CAA8 = result;
  return result;
}

uint64_t sub_1000935E4(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  char v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  char v10;
  id v11;

  if (qword_1003157C0 != -1)
    swift_once(&qword_1003157C0, sub_100092E9C);
  v4 = off_10031CAA0;
  if (!*((_QWORD *)off_10031CAA0 + 2))
  {
LABEL_7:
    if (qword_1003157C8 != -1)
      swift_once(&qword_1003157C8, sub_1000930B8);
    v8 = off_10031CAA8;
    if (*((_QWORD *)off_10031CAA8 + 2))
    {
      swift_bridgeObjectRetain(a2);
      v9 = sub_10017D3B0(a1, a2);
      if ((v10 & 1) != 0)
      {
        v11 = *(id *)(v8[7] + 8 * v9);
        swift_bridgeObjectRelease(a2);
        return Color.init(uiColor:)(v11);
      }
      swift_bridgeObjectRelease(a2);
    }
    return 0;
  }
  swift_bridgeObjectRetain(a2);
  v5 = sub_10017D3B0(a1, a2);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
    goto LABEL_7;
  }
  v7 = *(_QWORD *)(v4[7] + 8 * v5);
  swift_retain(v7);
  swift_bridgeObjectRelease(a2);
  return v7;
}

uint64_t sub_100093708(unsigned int a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v4 + 104))(v3, enum case for Color.RGBColorSpace.sRGB(_:));
  return Color.init(_:red:green:blue:opacity:)(v3, (double)HIBYTE(a1) / 255.0, (double)BYTE2(a1) / 255.0, (double)BYTE1(a1) / 255.0, (double)a1 / 255.0);
}

ValueMetadata *type metadata accessor for StewieOverInternetView()
{
  return &type metadata for StewieOverInternetView;
}

uint64_t sub_1000937DC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100298658, 1);
}

uint64_t sub_1000937EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t OpaqueTypeConformance2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[5];

  v43 = a1;
  v2 = type metadata accessor for StackNavigationViewStyle(0);
  v41 = *(_QWORD *)(v2 - 8);
  v42 = v2;
  __chkstk_darwin(v2, v3);
  v5 = (char *)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8(&qword_10031CAC0);
  v39 = *(_QWORD *)(v6 - 8);
  v40 = v6;
  __chkstk_darwin(v6, v7);
  v9 = (char *)v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_10031CAC8);
  v37 = *(_QWORD *)(v10 - 8);
  v38 = v10;
  __chkstk_darwin(v10, v11);
  v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD **)(v1 + 32);
  if (v14)
  {
    v16 = v14[9];
    v15 = v14[10];
    sub_100007BBC(v14 + 6, v16);
    v17 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v15 + 32))(v48, v16, v15);
    v36[1] = v36;
    __chkstk_darwin(v17, v18);
    v36[-2] = v1;
    v36[-1] = v48;
    v19 = sub_100003DB8(&qword_10031CAD0);
    v20 = sub_100007FAC(&qword_10031CAD8);
    v21 = sub_100007FAC(&qword_10031CAE0);
    v22 = sub_100007FAC(&qword_10031CAE8);
    v23 = sub_1000084FC(&qword_10031CAF0, &qword_10031CAE8, (uint64_t)&unk_1002525D0);
    v44 = v22;
    v45 = v23;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v44, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v25 = sub_1000084FC(&qword_10031CAF8, &qword_10031CAE0, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v44 = v20;
    v45 = v21;
    v46 = OpaqueTypeConformance2;
    v47 = v25;
    v26 = swift_getOpaqueTypeConformance2(&v44, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    v27 = NavigationView.init(content:)(sub_100094C34, &v36[-4], v19, v26);
    StackNavigationViewStyle.init()(v27);
    v28 = sub_1000084FC(&qword_10031CB00, &qword_10031CAC0, (uint64_t)&protocol conformance descriptor for NavigationView<A>);
    v29 = sub_1000052EC(&qword_10031CB08, (uint64_t (*)(uint64_t))&type metadata accessor for StackNavigationViewStyle, (uint64_t)&protocol conformance descriptor for StackNavigationViewStyle);
    v30 = v40;
    v31 = v42;
    View.navigationViewStyle<A>(_:)(v5, v40, v42, v28, v29);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v5, v31);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v30);
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v43, v13, v38);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v48);
  }
  else
  {
    v33 = *(_QWORD *)(v1 + 40);
    v34 = type metadata accessor for UIMetrics();
    v35 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v33, v34, v35);
    __break(1u);
  }
  return result;
}

uint64_t sub_100093B08@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __int128 v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  _QWORD v33[2];
  char v34[16];
  _OWORD *v35;
  __int128 v36;
  uint64_t (*v37)@<X0>(uint64_t@<X8>);
  _OWORD *v38;
  double (*v39)@<D0>(uint64_t@<X8>);
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _QWORD v43[2];
  __int128 v44;
  uint64_t v45;
  __int128 v46[2];
  __int128 v47;
  __int128 v48;
  __int128 v49;

  v33[1] = a3;
  v5 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_10031CAD8);
  v33[0] = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v11);
  v13 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *a1;
  v48 = a1[1];
  v49 = v14;
  v47 = a1[2];
  sub_100007CBC(a2, (uint64_t)&v36);
  v15 = (_OWORD *)swift_allocObject(&unk_1002EB5A0, 104, 7);
  v16 = a1[1];
  v15[1] = *a1;
  v15[2] = v16;
  v15[3] = a1[2];
  sub_100007D04(&v36, (uint64_t)(v15 + 4));
  sub_100007CBC(a2, (uint64_t)v46);
  v17 = swift_allocObject(&unk_1002EB5C8, 56, 7);
  sub_100007D04(v46, v17 + 16);
  sub_100031A88(&v49);
  sub_100031A88(&v48);
  sub_100031A88(&v47);
  v18 = type metadata accessor for UIMetrics();
  v19 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v20 = EnvironmentObject.init()(v18, v19);
  v22 = v21;
  type metadata accessor for CGSize(0);
  v43[0] = 0;
  v43[1] = 0;
  State.init(wrappedValue:)(&v44, v43, v23);
  *(_QWORD *)&v36 = v20;
  *((_QWORD *)&v36 + 1) = v22;
  v37 = sub_100094C78;
  v38 = v15;
  v39 = sub_100094CA8;
  v40 = v17;
  v41 = v44;
  v42 = v45;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v5);
  v24 = sub_100003DB8(&qword_10031CAE8);
  v25 = sub_1000084FC(&qword_10031CAF0, &qword_10031CAE8, (uint64_t)&unk_1002525D0);
  View.navigationBarTitleDisplayMode(_:)(v9, v24, v25);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v26 = v36;
  v27 = v38;
  v28 = v42;
  swift_release(v40);
  swift_release(v27);
  swift_release(v26);
  swift_release(v28);
  v35 = a1;
  v29 = sub_100003DB8(&qword_10031CAE0);
  *(_QWORD *)&v36 = v24;
  *((_QWORD *)&v36 + 1) = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v31 = sub_1000084FC(&qword_10031CAF8, &qword_10031CAE0, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  View.toolbar<A>(content:)(sub_100094CB0, v34, v10, v29, OpaqueTypeConformance2, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v33[0] + 8))(v13, v10);
}

uint64_t sub_100093E58@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;

  v6 = sub_100003DB8(&qword_10031CB28);
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static HorizontalAlignment.center.getter(v8);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  v11 = sub_100003DB8(&qword_10031CB30);
  sub_100093F64(a1, a2, (uint64_t)&v10[*(int *)(v11 + 44)]);
  v12 = sub_100007BBC(a2, a2[3]);
  v13 = *v12;
  v18 = *(_OWORD *)(*v12 + 48);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = *(_QWORD *)(v13 + 72);
  LOBYTE(a2) = static Edge.Set.all.getter(*(double *)&v18);
  sub_10000B234((uint64_t)v10, a3, &qword_10031CB28);
  v16 = a3 + *(int *)(sub_100003DB8(&qword_10031CB38) + 36);
  *(_BYTE *)v16 = (_BYTE)a2;
  *(_OWORD *)(v16 + 8) = v18;
  *(_QWORD *)(v16 + 24) = v14;
  *(_QWORD *)(v16 + 32) = v15;
  *(_BYTE *)(v16 + 40) = 0;
  return sub_100007FF0((uint64_t)v10, &qword_10031CB28);
}

uint64_t sub_100093F64@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  int v26;
  _BOOL4 v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  char v79;
  uint64_t KeyPath;
  _QWORD *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t result;
  uint64_t v90;
  uint64_t v91;
  uint64_t (*v92)();
  unint64_t *v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  __int128 v97;
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD v102[2];
  _OWORD v103[7];

  v6 = sub_100003DB8(&qword_100316B50);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_10031CB40);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003DB8(&qword_10031CB48);
  v16 = __chkstk_darwin(v14, v15);
  v18 = __chkstk_darwin(v16, v17);
  v20 = (char *)&v95 - v19;
  __chkstk_darwin(v18, v21);
  v24 = a1[2];
  if (v24)
  {
    if (*(_QWORD *)(v24 + 64))
    {
      v25 = *(_WORD *)(v24 + 120);
      v26 = v25;
      v27 = (v25 & 1) == 0;
      v28 = v26 == 2 || v27;
    }
    else
    {
      v28 = 1;
    }
    v101 = (uint64_t)&v95 - v22;
    v99 = v23;
    v100 = a3;
    v29 = (_QWORD *)a1[4];
    if (v29)
    {
      v30 = v29[9];
      v31 = v29[10];
      v98 = v29 + 6;
      v96 = v29;
      sub_100007BBC(v29 + 6, v30);
      v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 40))(v30, v31);
      v33 = static Font.Weight.light.getter(v32);
      v34 = enum case for Font.Design.default(_:);
      v35 = type metadata accessor for Font.Design(0);
      v36 = *(_QWORD *)(v35 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v36 + 104))(v9, v34, v35);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v9, 0, 1, v35);
      v37 = static Font.system(size:weight:design:)(*(_QWORD *)&v33, 0, v9, 200.0);
      sub_100007FF0((uint64_t)v9, &qword_100316B50);
      v38 = v28;
      sub_10006E62C(v28, v37, (uint64_t)v13);
      swift_release(v37);
      v39 = a2[3];
      *(_QWORD *)&v97 = a2;
      v40 = sub_100007BBC(a2, v39);
      v41 = *(_QWORD *)(*v40 + 16);
      v42 = static Alignment.center.getter(v40);
      _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v103, 0, 1, 0, 1, 0, 1, v41, 0, 0, 1, 0, 1, v42, v43);
      sub_10000B234((uint64_t)v13, (uint64_t)v20, &qword_10031CB40);
      v44 = &v20[*(int *)(v14 + 36)];
      v45 = v103[5];
      *((_OWORD *)v44 + 4) = v103[4];
      *((_OWORD *)v44 + 5) = v45;
      *((_OWORD *)v44 + 6) = v103[6];
      v46 = v103[1];
      *(_OWORD *)v44 = v103[0];
      *((_OWORD *)v44 + 1) = v46;
      v47 = v103[3];
      *((_OWORD *)v44 + 2) = v103[2];
      *((_OWORD *)v44 + 3) = v47;
      sub_100007FF0((uint64_t)v13, &qword_10031CB40);
      sub_100094D04((uint64_t)v20, v101);
      v48 = v96;
      v49 = v96[9];
      v50 = v96[10];
      v51 = v98;
      sub_100007BBC(v98, v49);
      v102[0] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v50 + 168))(v38, v49, v50);
      v102[1] = v52;
      v53 = sub_10002B3F4();
      v55 = Text.init<A>(_:)(v102, &type metadata for String, v53, v54);
      v57 = v56;
      v59 = v58;
      v61 = v60 & 1;
      v62 = v48[9];
      v63 = v48[10];
      sub_100007BBC(v51, v62);
      v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 56))(v62, v63);
      v65 = Text.font(_:)(v64, v55, v57, v61, v59);
      v67 = v66;
      v95 = v68;
      v70 = v69 & 1;
      sub_10002B438(v55, v57, v61);
      swift_release(v64);
      swift_bridgeObjectRelease(v59);
      v71 = v48[9];
      v72 = v48[10];
      sub_100007BBC(v51, v71);
      v73 = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 64))(v71, v72);
      v74 = v95;
      v75 = Text.foregroundColor(_:)(v73, v65, v67, v70, v95);
      v77 = v76;
      v98 = v78;
      LOBYTE(v61) = v79 & 1;
      sub_10002B438(v65, v67, v70);
      swift_release(v73);
      swift_bridgeObjectRelease(v74);
      KeyPath = swift_getKeyPath(&unk_100252738);
      v81 = sub_100007BBC((_QWORD *)v97, *(_QWORD *)(v97 + 24));
      v82 = *v81;
      v97 = *(_OWORD *)(*v81 + 184);
      v83 = *(_QWORD *)(v82 + 208);
      v96 = *(_QWORD **)(v82 + 200);
      LOBYTE(v73) = static Edge.Set.all.getter(*(double *)&v97);
      v84 = v101;
      v85 = v99;
      sub_10000B234(v101, v99, &qword_10031CB48);
      v86 = v100;
      sub_10000B234(v85, v100, &qword_10031CB48);
      v87 = v86 + *(int *)(sub_100003DB8(&qword_10031CB50) + 48);
      *(_QWORD *)v87 = v75;
      *(_QWORD *)(v87 + 8) = v77;
      *(_BYTE *)(v87 + 16) = v61;
      v88 = v98;
      *(_QWORD *)(v87 + 24) = v98;
      *(_QWORD *)(v87 + 32) = KeyPath;
      *(_BYTE *)(v87 + 40) = 1;
      *(_BYTE *)(v87 + 48) = v73;
      *(_OWORD *)(v87 + 56) = v97;
      *(_QWORD *)(v87 + 72) = v96;
      *(_QWORD *)(v87 + 80) = v83;
      *(_BYTE *)(v87 + 88) = 0;
      sub_10002B750(v75, v77, v61);
      swift_bridgeObjectRetain(v88);
      swift_retain(KeyPath);
      sub_100007FF0(v84, &qword_10031CB48);
      sub_10002B438(v75, v77, v61);
      swift_release(KeyPath);
      swift_bridgeObjectRelease(v88);
      return sub_100007FF0(v85, &qword_10031CB48);
    }
    v90 = a1[5];
    v91 = type metadata accessor for UIMetrics();
    v92 = type metadata accessor for UIMetrics;
    v93 = (unint64_t *)&qword_100316A00;
  }
  else
  {
    v90 = a1[3];
    v91 = type metadata accessor for StewieModel();
    v92 = type metadata accessor for StewieModel;
    v93 = &qword_1003186E0;
  }
  v94 = sub_1000052EC(v93, (uint64_t (*)(uint64_t))v92, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v90, v91, v94);
  __break(1u);
  return result;
}

__n128 sub_1000945B8@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  __n128 **v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  __n128 result;
  __n128 v25;
  uint64_t v26;

  v26 = static HorizontalAlignment.center.getter(a1);
  v4 = type metadata accessor for AppEvents();
  v5 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  v6 = EnvironmentObject.init()(v4, v5);
  v8 = v7;
  v9 = type metadata accessor for RoadsideAssistanceModel();
  v10 = sub_1000052EC(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel, (uint64_t)&unk_10024D2FC);
  v11 = EnvironmentObject.init()(v9, v10);
  v13 = v12;
  v14 = type metadata accessor for StewieModel();
  v15 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
  v16 = EnvironmentObject.init()(v14, v15);
  v18 = v17;
  v19 = static Edge.Set.top.getter(v16);
  v20 = (__n128 **)sub_100007BBC(a1, a1[3]);
  v25 = (*v20)[3];
  v22 = (*v20)[4].n128_u64[0];
  v21 = (*v20)[4].n128_u64[1];
  v23 = static Edge.Set.all.getter((*v20)[3].n128_f64[0]);
  *(_QWORD *)a2 = v26;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v6;
  *(_QWORD *)(a2 + 32) = v8;
  *(_QWORD *)(a2 + 40) = v11;
  *(_QWORD *)(a2 + 48) = v13;
  *(_QWORD *)(a2 + 56) = v16;
  *(_QWORD *)(a2 + 64) = v18;
  *(_BYTE *)(a2 + 72) = v19;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_BYTE *)(a2 + 112) = 1;
  *(_BYTE *)(a2 + 120) = v23;
  result = v25;
  *(__n128 *)(a2 + 128) = v25;
  *(_QWORD *)(a2 + 144) = v22;
  *(_QWORD *)(a2 + 152) = v21;
  *(_BYTE *)(a2 + 160) = 0;
  return result;
}

uint64_t sub_100094734@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _QWORD v26[2];
  _BYTE v27[16];
  uint64_t v28;

  v26[1] = a2;
  v3 = sub_100003DB8(&qword_10031CB10);
  __chkstk_darwin(v3, v4);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_10031CB18);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003DB8(&qword_100319208);
  v17 = *(_QWORD *)(v16 - 8);
  v19 = __chkstk_darwin(v16, v18);
  v21 = (char *)v26 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.principal.getter(v19);
  v28 = a1;
  v22 = ToolbarItem<>.init(placement:content:)(v15, sub_100094CB8, v27, &type metadata for Text, &protocol witness table for Text);
  static ToolbarItemPlacement.navigationBarTrailing.getter(v22);
  v23 = sub_100094CC0();
  ToolbarItem<>.init(placement:content:)(v15, sub_100094AD8, 0, &type metadata for EndSessionButton, v23);
  v24 = &v6[*(int *)(v3 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v6, v21, v16);
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v24, v11, v7);
  TupleToolbarContent.init(_:)(v6, v3);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v21, v16);
}

void sub_100094928(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)();
  unint64_t *v34;
  uint64_t v35;
  _QWORD v36[2];
  _QWORD v37[3];
  uint64_t v38;
  uint64_t v39;

  v4 = a1[4];
  if (!v4)
  {
    v31 = a1[5];
    v32 = type metadata accessor for UIMetrics();
    v33 = type metadata accessor for UIMetrics;
    v34 = (unint64_t *)&qword_100316A00;
LABEL_9:
    v35 = sub_1000052EC(v34, (uint64_t (*)(uint64_t))v33, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, v31, v32, v35);
    __break(1u);
    return;
  }
  sub_100007CBC(v4 + 48, (uint64_t)v37);
  v5 = v38;
  v6 = v39;
  sub_100007BBC(v37, v38);
  v8 = a1[2];
  if (!v8)
  {
    v31 = a1[3];
    v32 = type metadata accessor for StewieModel();
    v33 = type metadata accessor for StewieModel;
    v34 = &qword_1003186E0;
    goto LABEL_9;
  }
  if (*(_QWORD *)(v8 + 64))
  {
    v9 = *(_QWORD *)(v8 + 88);
    v7 = swift_bridgeObjectRetain(v9);
  }
  else
  {
    v9 = 0;
  }
  v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v6 + 152))(v9, v5, v6, v7);
  v12 = v11;
  swift_bridgeObjectRelease(v9);
  v36[0] = v10;
  v36[1] = v12;
  v13 = sub_10002B3F4();
  v15 = Text.init<A>(_:)(v36, &type metadata for String, v13, v14);
  v17 = v16;
  v19 = v18;
  v21 = v20 & 1;
  v22 = _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v37);
  v23 = static Font.headline.getter(v22);
  v24 = Text.font(_:)(v23, v15, v17, v21, v19);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  swift_release(v23);
  sub_10002B438(v15, v17, v21);
  swift_bridgeObjectRelease(v19);
  *(_QWORD *)a2 = v24;
  *(_QWORD *)(a2 + 8) = v26;
  *(_BYTE *)(a2 + 16) = v28 & 1;
  *(_QWORD *)(a2 + 24) = v30;
}

_QWORD *sub_100094AD8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *result;
  char v18;
  uint64_t v19;
  char v20;
  _QWORD v21[2];

  v2 = type metadata accessor for AppEvents();
  v3 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  v4 = EnvironmentObject.init()(v2, v3);
  v6 = v5;
  v7 = type metadata accessor for StewieModel();
  v8 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
  v9 = EnvironmentObject.init()(v7, v8);
  v11 = v10;
  v12 = type metadata accessor for UIMetrics();
  v13 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v14 = EnvironmentObject.init()(v12, v13);
  v16 = v15;
  v20 = 0;
  result = State.init(wrappedValue:)(v21, &v20, &type metadata for Bool);
  v18 = v21[0];
  v19 = v21[1];
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v16;
  *(_BYTE *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 56) = v19;
  return result;
}

uint64_t sub_100094BFC@<X0>(uint64_t a1@<X8>)
{
  return sub_1000937EC(a1);
}

uint64_t sub_100094C34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100093B08(*(_OWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100094C3C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 8);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100094C78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100093E58((_QWORD *)(v1 + 16), (_QWORD *)(v1 + 64), a1);
}

uint64_t sub_100094C84()
{
  uint64_t v0;

  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

double sub_100094CA8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_1000945B8((_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

uint64_t sub_100094CB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100094734(*(_QWORD *)(v1 + 16), a1);
}

void sub_100094CB8(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100094928(*(_QWORD **)(v1 + 16), a1);
}

unint64_t sub_100094CC0()
{
  unint64_t result;

  result = qword_10031CB20;
  if (!qword_10031CB20)
  {
    result = swift_getWitnessTable("U~\t", &type metadata for EndSessionButton);
    atomic_store(result, (unint64_t *)&qword_10031CB20);
  }
  return result;
}

uint64_t sub_100094D04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031CB48);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100094D54()
{
  _QWORD v1[4];

  v1[0] = sub_100007FAC(&qword_10031CAC0);
  v1[1] = type metadata accessor for StackNavigationViewStyle(255);
  v1[2] = sub_1000084FC(&qword_10031CB00, &qword_10031CAC0, (uint64_t)&protocol conformance descriptor for NavigationView<A>);
  v1[3] = sub_1000052EC(&qword_10031CB08, (uint64_t (*)(uint64_t))&type metadata accessor for StackNavigationViewStyle, (uint64_t)&protocol conformance descriptor for StackNavigationViewStyle);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.navigationViewStyle<A>(_:)>>, 1);
}

ValueMetadata *type metadata accessor for ExplorerFullScreenConnectionAssitanceView()
{
  return &type metadata for ExplorerFullScreenConnectionAssitanceView;
}

uint64_t sub_100094E04(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029869C, 1);
}

uint64_t sub_100094E14@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  _OWORD v27[12];
  _BYTE v28[199];
  char v29;
  char v30;
  _QWORD v31[5];

  if (a3)
  {
    v9 = a3[9];
    v10 = a3[10];
    sub_100007BBC(a3 + 6, v9);
    v11 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 32))(v31, v9, v10);
    v12 = static HorizontalAlignment.center.getter(v11);
    sub_100094FDC(a1, a2, (uint64_t)v27);
    *(_OWORD *)&v28[135] = v27[8];
    *(_OWORD *)&v28[151] = v27[9];
    *(_OWORD *)&v28[167] = v27[10];
    *(_OWORD *)&v28[183] = v27[11];
    *(_OWORD *)&v28[71] = v27[4];
    *(_OWORD *)&v28[87] = v27[5];
    *(_OWORD *)&v28[103] = v27[6];
    *(_OWORD *)&v28[119] = v27[7];
    *(_OWORD *)&v28[7] = v27[0];
    *(_OWORD *)&v28[23] = v27[1];
    *(_OWORD *)&v28[39] = v27[2];
    v29 = 0;
    *(_OWORD *)&v28[55] = v27[3];
    v13 = sub_100007BBC(v31, v31[3]);
    v26 = *(_OWORD *)(*v13 + 48);
    v14 = *(_QWORD *)(*v13 + 64);
    v15 = *(_QWORD *)(*v13 + 72);
    v16 = static Edge.Set.all.getter(*(double *)(*v13 + 48));
    v17 = *(_OWORD *)&v28[128];
    *(_OWORD *)(a5 + 161) = *(_OWORD *)&v28[144];
    v18 = *(_OWORD *)&v28[176];
    *(_OWORD *)(a5 + 177) = *(_OWORD *)&v28[160];
    *(_OWORD *)(a5 + 193) = v18;
    v19 = *(_OWORD *)&v28[64];
    *(_OWORD *)(a5 + 97) = *(_OWORD *)&v28[80];
    v20 = *(_OWORD *)&v28[112];
    *(_OWORD *)(a5 + 113) = *(_OWORD *)&v28[96];
    *(_OWORD *)(a5 + 129) = v20;
    *(_OWORD *)(a5 + 145) = v17;
    v21 = *(_OWORD *)v28;
    *(_OWORD *)(a5 + 33) = *(_OWORD *)&v28[16];
    v22 = *(_OWORD *)&v28[48];
    *(_OWORD *)(a5 + 49) = *(_OWORD *)&v28[32];
    *(_OWORD *)(a5 + 65) = v22;
    *(_OWORD *)(a5 + 81) = v19;
    v30 = 0;
    *(_QWORD *)a5 = v12;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) = 0;
    *(_QWORD *)(a5 + 208) = *(_QWORD *)&v28[191];
    *(_OWORD *)(a5 + 17) = v21;
    *(_BYTE *)(a5 + 216) = v16;
    *(_OWORD *)(a5 + 224) = v26;
    *(_QWORD *)(a5 + 240) = v14;
    *(_QWORD *)(a5 + 248) = v15;
    *(_BYTE *)(a5 + 256) = 0;
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v31);
  }
  else
  {
    v24 = type metadata accessor for UIMetrics();
    v25 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
    result = EnvironmentObject.error()(0, a4, v24, v25);
    __break(1u);
  }
  return result;
}

uint64_t sub_100094FDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;

  v5 = type metadata accessor for ConnectionClosedModel(0);
  v6 = sub_100056D60(&qword_10031CB58, type metadata accessor for ConnectionClosedModel);
  v7 = EnvironmentObject.init()(v5, v6);
  v60 = v8;
  v9 = type metadata accessor for ConnectivityModel();
  v10 = sub_100056D60(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel);
  v66 = EnvironmentObject.init()(v9, v10);
  v58 = v11;
  v12 = type metadata accessor for GuidanceModel();
  v13 = sub_100056D60(&qword_100316B08, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceModel);
  v63 = EnvironmentObject.init()(v12, v13);
  v15 = v14;
  v16 = type metadata accessor for OrientationModel();
  v17 = sub_100056D60(&qword_10031CB60, (uint64_t (*)(uint64_t))type metadata accessor for OrientationModel);
  v65 = EnvironmentObject.init()(v16, v17);
  v57 = v18;
  v19 = type metadata accessor for StewieModel();
  v20 = sub_100056D60(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel);
  v64 = EnvironmentObject.init()(v19, v20);
  v56 = v21;
  v22 = type metadata accessor for UIMetrics();
  v23 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
  v24 = EnvironmentObject.init()(v22, v23);
  if (a1)
  {
    v62 = v24;
    if (*(_QWORD *)(a1 + 64))
    {
      v26 = v15;
      if (*(_QWORD *)(*(_QWORD *)(a1 + 88) + 16))
      {
        v55 = v25;
        v27 = EnvironmentObject.init()(v9, v10);
        v53 = v28;
        v29 = EnvironmentObject.init()(v22, v23);
        v31 = v30;
        v32 = type metadata accessor for GuidanceMessagesModel();
        v33 = sub_100056D60(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel);
        v34 = EnvironmentObject.init()(v32, v33);
        v36 = v35;
        v37 = EnvironmentObject.init()(v22, v23);
        v38 = v36;
        v39 = v34;
        v40 = v27;
        v41 = v37;
        v24 = v62;
        v43 = v42;
        v44 = v53;
        v25 = v55;
        v45 = 0xE100000000000000;
        v46 = 32;
      }
      else
      {
        v40 = 0;
        v44 = 0;
        v29 = 0;
        v31 = 0;
        v46 = 0;
        v45 = 0;
        v39 = 0;
        v38 = 0;
        v41 = 0;
        v43 = 0;
      }
      v48 = v58;
      v47 = v60;
    }
    else
    {
      v40 = 0;
      v44 = 0;
      v29 = 0;
      v31 = 0;
      v46 = 0;
      v45 = 0;
      v39 = 0;
      v38 = 0;
      v41 = 0;
      v43 = 0;
      v48 = v58;
      v47 = v60;
      v26 = v15;
    }
    v59 = v39;
    v61 = v38;
    *(_QWORD *)a3 = v7;
    *(_QWORD *)(a3 + 8) = v47;
    *(_QWORD *)(a3 + 16) = v66;
    *(_QWORD *)(a3 + 24) = v48;
    *(_QWORD *)(a3 + 32) = v63;
    *(_QWORD *)(a3 + 40) = v26;
    *(_QWORD *)(a3 + 48) = v65;
    *(_QWORD *)(a3 + 56) = v57;
    *(_QWORD *)(a3 + 64) = v64;
    *(_QWORD *)(a3 + 72) = v56;
    *(_QWORD *)(a3 + 80) = v24;
    *(_QWORD *)(a3 + 88) = v25;
    *(_BYTE *)(a3 + 96) = 0;
    *(_QWORD *)(a3 + 104) = 0;
    *(_QWORD *)(a3 + 112) = v40;
    *(_QWORD *)(a3 + 120) = v44;
    *(_QWORD *)(a3 + 128) = v29;
    *(_QWORD *)(a3 + 136) = v31;
    *(_QWORD *)(a3 + 144) = v46;
    *(_QWORD *)(a3 + 152) = v45;
    *(_QWORD *)(a3 + 160) = v39;
    *(_QWORD *)(a3 + 168) = v38;
    *(_QWORD *)(a3 + 176) = v41;
    *(_QWORD *)(a3 + 184) = v43;
    v49 = v31;
    v50 = v45;
    v51 = v41;
    swift_retain(v24);
    swift_retain(v7);
    swift_retain(v66);
    swift_retain(v63);
    swift_retain(v65);
    swift_retain(v64);
    sub_1000953B0(v40, v44, v29, v49, v46, v50, v59, v61, v51);
    sub_10009540C(v40, v44, v29, v49, v46, v50, v59, v61, v51);
    swift_release(v62);
    swift_release(v64);
    swift_release(v65);
    swift_release(v63);
    swift_release(v66);
    return swift_release(v7);
  }
  else
  {
    result = EnvironmentObject.error()(0, a2, v19, v20);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000953A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100094E14(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000953B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;

  if (a6)
  {
    v12 = result;
    swift_retain(a9);
    swift_retain(v12);
    swift_retain(a3);
    swift_bridgeObjectRetain(a6);
    return swift_retain(a7);
  }
  return result;
}

uint64_t sub_10009540C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11;

  if (a6)
  {
    v11 = result;
    swift_bridgeObjectRelease(a6);
    swift_release(v11);
    swift_release(a3);
    swift_release(a7);
    return swift_release(a9);
  }
  return result;
}

unint64_t sub_10009546C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031CB68;
  if (!qword_10031CB68)
  {
    v1 = sub_100007FAC(&qword_10031CB70);
    sub_1000954D8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031CB68);
  }
  return result;
}

unint64_t sub_1000954D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031CB78;
  if (!qword_10031CB78)
  {
    v1 = sub_100007FAC(&qword_10031CB80);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10031CB78);
  }
  return result;
}

uint64_t sub_100095524@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  ValueMetadata *v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _OWORD *v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t OpaqueTypeConformance2;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  __n128 v59;
  __n128 v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  ValueMetadata *v78;
  uint64_t v79;
  unint64_t v80;
  __int128 v81;

  v2 = v1;
  v75 = a1;
  v76 = sub_100003DB8(&qword_10031CBA0);
  __chkstk_darwin(v76, v3);
  v5 = (uint64_t *)((char *)&v65 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = sub_100003DB8(&qword_10031CBA8);
  v67 = *(_QWORD *)(v6 - 8);
  v68 = v6;
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_10031CBB0);
  v73 = *(_QWORD *)(v10 - 8);
  v74 = v10;
  __chkstk_darwin(v10, v11);
  v72 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003DB8(&qword_10031CBB8);
  v70 = *(_QWORD *)(v13 - 8);
  v71 = v13;
  v15 = __chkstk_darwin(v13, v14);
  v69 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *v5 = static Alignment.center.getter(v15);
  v5[1] = v17;
  v18 = sub_100003DB8(&qword_10031CBC0);
  sub_1000959F8(v1, (uint64_t)v5 + *(int *)(v18 + 44));
  v81 = *(_OWORD *)(v1 + 144);
  v19 = sub_100003DB8(&qword_100316780);
  State.projectedValue.getter(&v77, v19);
  v21 = v77;
  v20 = v78;
  v22 = v79;
  v23 = (_OWORD *)swift_allocObject(&unk_1002EB798, 224, 7);
  v24 = *(_OWORD *)(v2 + 176);
  v23[11] = *(_OWORD *)(v2 + 160);
  v23[12] = v24;
  v23[13] = *(_OWORD *)(v2 + 192);
  v25 = *(_OWORD *)(v2 + 112);
  v23[7] = *(_OWORD *)(v2 + 96);
  v23[8] = v25;
  v26 = *(_OWORD *)(v2 + 144);
  v23[9] = *(_OWORD *)(v2 + 128);
  v23[10] = v26;
  v27 = *(_OWORD *)(v2 + 48);
  v23[3] = *(_OWORD *)(v2 + 32);
  v23[4] = v27;
  v28 = *(_OWORD *)(v2 + 80);
  v23[5] = *(_OWORD *)(v2 + 64);
  v23[6] = v28;
  v29 = *(_OWORD *)(v2 + 16);
  v23[1] = *(_OWORD *)v2;
  v23[2] = v29;
  sub_100099DE0((uint64_t *)v2);
  v30 = sub_1000084FC(&qword_10031CBC8, &qword_10031CBA0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v31 = sub_100099EC8();
  v66 = v9;
  View.sheet<A>(isPresented:onDismiss:content:)(v21, v20, v22, sub_100099DD8, v23, sub_100097B1C, 0, v76, &type metadata for ExplorerTryOutView, v30, v31);
  swift_release(v20);
  swift_release(v23);
  swift_release(v21);
  sub_100007FF0((uint64_t)v5, &qword_10031CBA0);
  v32 = *(_QWORD *)(v2 + 112);
  if (v32)
  {
    LOWORD(v81) = *(_WORD *)(v32 + 56);
    v33 = (_OWORD *)swift_allocObject(&unk_1002EB7C0, 224, 7);
    v34 = *(_OWORD *)(v2 + 176);
    v33[11] = *(_OWORD *)(v2 + 160);
    v33[12] = v34;
    v33[13] = *(_OWORD *)(v2 + 192);
    v35 = *(_OWORD *)(v2 + 112);
    v33[7] = *(_OWORD *)(v2 + 96);
    v33[8] = v35;
    v36 = *(_OWORD *)(v2 + 144);
    v33[9] = *(_OWORD *)(v2 + 128);
    v33[10] = v36;
    v37 = *(_OWORD *)(v2 + 48);
    v33[3] = *(_OWORD *)(v2 + 32);
    v33[4] = v37;
    v38 = *(_OWORD *)(v2 + 80);
    v33[5] = *(_OWORD *)(v2 + 64);
    v33[6] = v38;
    v39 = *(_OWORD *)(v2 + 16);
    v33[1] = *(_OWORD *)v2;
    v33[2] = v39;
    sub_100099DE0((uint64_t *)v2);
    v40 = sub_100003DB8(&qword_10031CBD8);
    v77 = v76;
    v78 = &type metadata for ExplorerTryOutView;
    v79 = v30;
    v80 = v31;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
    v42 = sub_100099F1C();
    v43 = v72;
    v44 = v68;
    v45 = v66;
    View.onChange<A>(of:initial:_:)(&v81, 1, sub_100099F14, v33, v68, v40, OpaqueTypeConformance2, v42);
    swift_release(v33);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v45, v44);
    v46 = *(_QWORD *)(v32 + 72);
    *(_QWORD *)&v81 = *(_QWORD *)(v32 + 64);
    *((_QWORD *)&v81 + 1) = v46;
    v47 = (_OWORD *)swift_allocObject(&unk_1002EB7E8, 224, 7);
    v48 = *(_OWORD *)(v2 + 176);
    v47[11] = *(_OWORD *)(v2 + 160);
    v47[12] = v48;
    v47[13] = *(_OWORD *)(v2 + 192);
    v49 = *(_OWORD *)(v2 + 112);
    v47[7] = *(_OWORD *)(v2 + 96);
    v47[8] = v49;
    v50 = *(_OWORD *)(v2 + 144);
    v47[9] = *(_OWORD *)(v2 + 128);
    v47[10] = v50;
    v51 = *(_OWORD *)(v2 + 48);
    v47[3] = *(_OWORD *)(v2 + 32);
    v47[4] = v51;
    v52 = *(_OWORD *)(v2 + 80);
    v47[5] = *(_OWORD *)(v2 + 64);
    v47[6] = v52;
    v53 = *(_OWORD *)(v2 + 16);
    v47[1] = *(_OWORD *)v2;
    v47[2] = v53;
    sub_100099DE0((uint64_t *)v2);
    swift_bridgeObjectRetain(v46);
    v54 = sub_100003DB8(&qword_100318260);
    v77 = v44;
    v78 = (ValueMetadata *)v40;
    v79 = OpaqueTypeConformance2;
    v80 = v42;
    v55 = swift_getOpaqueTypeConformance2(&v77, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v56 = sub_100099FD4();
    v57 = v69;
    v58 = v74;
    View.onChange<A>(of:initial:_:)(&v81, 1, sub_100099FCC, v47, v74, v54, v55, v56, v59);
    swift_release(v47);
    v60 = swift_bridgeObjectRelease(*((_QWORD *)&v81 + 1));
    (*(void (**)(char *, uint64_t, __n128))(v73 + 8))(v43, v58, v60);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v70 + 32))(v75, v57, v71);
  }
  else
  {
    v62 = *(_QWORD *)(v2 + 120);
    v63 = type metadata accessor for TryOutModel(0);
    v64 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v62, v63, v64);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000959F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  id v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  double Height;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  double v50;
  double v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(_QWORD, _QWORD, _QWORD);
  uint64_t v70;
  uint64_t v71;
  double v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  __int128 v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  double v99;
  double v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  id v108;
  Swift::String v109;
  Swift::String v110;
  Swift::String v111;
  uint64_t v112;
  Swift::String v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  id v120;
  Swift::String v121;
  Swift::String v122;
  Swift::String v123;
  _QWORD *v124;
  Swift::String v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  Swift::String v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void (*v153)(char *, uint64_t);
  void (*v154)(char *, uint64_t);
  uint64_t result;
  uint64_t v156;
  uint64_t v157;
  uint64_t (*v158)();
  unint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD v169[2];
  void *v170;
  uint64_t v171;
  id v172;
  uint64_t v173;
  void (*v174)(_QWORD, _QWORD, _QWORD);
  void (*v175)(uint64_t, char *, uint64_t);
  uint64_t v176;
  uint64_t object;
  uint64_t countAndFlagsBits;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  char *v190;
  Swift::String v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  _OWORD v198[2];
  char v199;
  _DWORD v200[2];
  Swift::String v201;
  __int128 v202;
  __int128 v203;
  _BYTE v204[24];
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  Swift::String v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  __int128 v219;
  __int128 v220;
  __int16 v221;
  Swift::String v222;
  __int128 v223;
  __int128 v224;
  __int128 v225;
  __int128 v226;
  __int128 v227;
  __int128 v228;
  __int128 v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  __int16 v233;
  Swift::String v234;
  __int128 v235;
  _BYTE v236[32];
  __int128 v237;
  __int128 v238;
  __int128 v239;
  _OWORD v240[2];
  __int128 v241;
  __int128 v242;
  __int16 v243;
  Swift::String v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int16 v255;
  Swift::String v256;
  Swift::String v257;
  CGRect v258;

  v4 = sub_100003DB8(&qword_10031CBF8);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v171 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (char *)&v171 - v11;
  v13 = sub_100003DB8(&qword_10031CC00);
  v15 = __chkstk_darwin(v13, v14);
  v17 = __chkstk_darwin(v15, v16);
  v21 = *(_QWORD *)(a1 + 48);
  if (!v21)
  {
    v156 = *(_QWORD *)(a1 + 56);
    v157 = type metadata accessor for ConnectivityModel();
    v158 = type metadata accessor for ConnectivityModel;
    v159 = &qword_100316B00;
    goto LABEL_32;
  }
  v22 = *(_QWORD *)(a1 + 64);
  if (!v22)
  {
    v22 = *(_QWORD *)(a1 + 72);
    v160 = type metadata accessor for OffTheGridModel();
    v161 = sub_1000052EC(&qword_10031CB90, (uint64_t (*)(uint64_t))type metadata accessor for OffTheGridModel, (uint64_t)&unk_10024D2FC);
    swift_retain(v21);
    EnvironmentObject.error()(0, v22, v160, v161);
    __break(1u);
    goto LABEL_27;
  }
  v23 = *(_QWORD **)(a1 + 80);
  if (!v23)
  {
LABEL_27:
    v23 = *(_QWORD **)(a1 + 88);
    v162 = type metadata accessor for StewieModel();
    v163 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
    swift_retain(v21);
    swift_retain(v22);
    EnvironmentObject.error()(0, v23, v162, v163);
    __break(1u);
    goto LABEL_28;
  }
  v188 = (char *)&v171 - v18;
  v189 = v19;
  v180 = a2;
  v181 = v20;
  v182 = v12;
  v183 = v17;
  v184 = v5;
  v24 = *(_QWORD *)(a1 + 96);
  if (!v24)
  {
LABEL_28:
    v164 = *(_QWORD *)(a1 + 104);
    v165 = type metadata accessor for SystemSettingsModel();
    v166 = sub_1000052EC(&qword_10031CB98, (uint64_t (*)(uint64_t))type metadata accessor for SystemSettingsModel, (uint64_t)&unk_10024D2FC);
    swift_retain(v21);
    swift_retain(v22);
    swift_retain(v23);
    EnvironmentObject.error()(0, v164, v165, v166);
    __break(1u);
    goto LABEL_29;
  }
  swift_retain(v21);
  swift_retain(v22);
  swift_retain(v23);
  swift_retain(v24);
  v25 = sub_100096A3C(v21, v22, v23, v24);
  v27 = v26;
  swift_release(v21);
  swift_release(v22);
  swift_release(v23);
  swift_release(v24);
  v28 = *(_QWORD *)(a1 + 128);
  if (!v28)
  {
LABEL_29:
    v156 = *(_QWORD *)(a1 + 136);
    v157 = type metadata accessor for UIMetrics();
    v158 = type metadata accessor for UIMetrics;
    v159 = (unint64_t *)&qword_100316A00;
    goto LABEL_32;
  }
  v29 = (void *)objc_opt_self(UIScreen);
  v30 = objc_msgSend(v29, "mainScreen", swift_retain(v28).n128_f64[0]);
  v31 = objc_msgSend(v30, "fixedCoordinateSpace");

  objc_msgSend(v31, "bounds");
  v33 = v32;
  v35 = v34;
  v37 = v36;
  v39 = v38;
  swift_unknownObjectRelease(v31);
  v258.origin.x = v33;
  v258.origin.y = v35;
  v258.size.width = v37;
  v258.size.height = v39;
  Height = CGRectGetHeight(v258);
  swift_release(v28);
  if (v27)
    v41 = 0.5;
  else
    v41 = 1.0;
  v42 = *(_QWORD *)(a1 + 16);
  if (v42)
  {
    if ((*(_BYTE *)(v42 + 80) & 1) == 0)
    {
      v186 = 0;
      v187 = 0;
      countAndFlagsBits = 0;
      v179 = 0;
      v176 = 0;
      object = 0;
      goto LABEL_14;
    }
    v43 = *(_QWORD *)(a1 + 32);
    if (v43)
    {
      v179 = *(unsigned __int8 *)(v43 + 40);
      v234 = *(Swift::String *)(a1 + 192);
      v44 = sub_100003DB8(&qword_10031CCA8);
      State.projectedValue.getter(&v244, v44);
      object = (uint64_t)v244._object;
      countAndFlagsBits = v244._countAndFlagsBits;
      v176 = v245;
      v45 = type metadata accessor for StewieModel();
      v46 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
      v47 = EnvironmentObject.init()(v45, v46);
      v186 = v48;
      v187 = v47;
LABEL_14:
      v49 = sub_100096C84();
      v185 = v4;
      v190 = v9;
      if (v49)
      {
        if (v49 == 1)
        {
          v50 = Height * 0.8;
          v51 = v41 * (Height * 0.8);
          v52 = swift_allocObject(&unk_1002EB860, 232, 7);
          v53 = *(_OWORD *)(a1 + 176);
          *(_OWORD *)(v52 + 176) = *(_OWORD *)(a1 + 160);
          *(_OWORD *)(v52 + 192) = v53;
          *(_OWORD *)(v52 + 208) = *(_OWORD *)(a1 + 192);
          v54 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)(v52 + 112) = *(_OWORD *)(a1 + 96);
          *(_OWORD *)(v52 + 128) = v54;
          v55 = *(_OWORD *)(a1 + 144);
          *(_OWORD *)(v52 + 144) = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(v52 + 160) = v55;
          v56 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)(v52 + 48) = *(_OWORD *)(a1 + 32);
          *(_OWORD *)(v52 + 64) = v56;
          v57 = *(_OWORD *)(a1 + 80);
          *(_OWORD *)(v52 + 80) = *(_OWORD *)(a1 + 64);
          *(_OWORD *)(v52 + 96) = v57;
          v58 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)(v52 + 16) = *(_OWORD *)a1;
          *(_OWORD *)(v52 + 32) = v58;
          *(double *)(v52 + 224) = v50;
          v59 = swift_allocObject(&unk_1002EB888, 240, 7);
          *(_QWORD *)(v59 + 16) = v25;
          *(_QWORD *)(v59 + 24) = v27;
          v60 = *(_OWORD *)(a1 + 176);
          *(_OWORD *)(v59 + 192) = *(_OWORD *)(a1 + 160);
          *(_OWORD *)(v59 + 208) = v60;
          *(_OWORD *)(v59 + 224) = *(_OWORD *)(a1 + 192);
          v61 = *(_OWORD *)(a1 + 112);
          *(_OWORD *)(v59 + 128) = *(_OWORD *)(a1 + 96);
          *(_OWORD *)(v59 + 144) = v61;
          v62 = *(_OWORD *)(a1 + 144);
          *(_OWORD *)(v59 + 160) = *(_OWORD *)(a1 + 128);
          *(_OWORD *)(v59 + 176) = v62;
          v63 = *(_OWORD *)(a1 + 48);
          *(_OWORD *)(v59 + 64) = *(_OWORD *)(a1 + 32);
          *(_OWORD *)(v59 + 80) = v63;
          v64 = *(_OWORD *)(a1 + 80);
          *(_OWORD *)(v59 + 96) = *(_OWORD *)(a1 + 64);
          *(_OWORD *)(v59 + 112) = v64;
          v65 = *(_OWORD *)(a1 + 16);
          *(_OWORD *)(v59 + 32) = *(_OWORD *)a1;
          *(_OWORD *)(v59 + 48) = v65;
          sub_100099DE0((uint64_t *)a1);
          sub_100099DE0((uint64_t *)a1);
          v66 = type metadata accessor for UIMetrics();
          v67 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
          v68 = EnvironmentObject.init()(v66, v67);
          v174 = v69;
          v175 = (void (*)(uint64_t, char *, uint64_t))v68;
          v70 = qword_100315788;
          swift_retain(v28);
          if (v70 != -1)
            swift_once(&qword_100315788, sub_10006F500);
          v173 = xmmword_10033FC40;
          swift_release(v28);
          v71 = qword_10033FC50;
          v73 = static Edge.Set.all.getter(v72);
          v199 = 0;
          v74 = static AnyTransition.opacity.getter();
          v75 = static Animation.easeIn(duration:)(0.1);
          v76 = AnyTransition.animation(_:)(v75, v74);
          swift_release(v74);
          v77 = swift_release(v75);
          v78 = static AnyTransition.identity.getter(v77);
          v79 = static AnyTransition.asymmetric(insertion:removal:)(v76, v78);
          swift_release(v76);
          swift_release(v78);
          v201._countAndFlagsBits = (uint64_t)v175;
          v201._object = v174;
          *(double *)&v202 = v51;
          *((_QWORD *)&v202 + 1) = sub_10009A578;
          *(_QWORD *)&v203 = v52;
          *((_QWORD *)&v203 + 1) = sub_10009A610;
          *(_QWORD *)v204 = v59;
          strcpy(&v204[8], "scrollViewNS");
          v204[21] = 0;
          *(_WORD *)&v204[22] = -5120;
          v205 = 0;
          LOBYTE(v206) = v73;
          *(_DWORD *)((char *)&v206 + 1) = v200[0];
          DWORD1(v206) = *(_DWORD *)((char *)v200 + 3);
          *((_QWORD *)&v206 + 1) = v173;
          *(_QWORD *)&v207 = 0x4020000000000000;
          *((_QWORD *)&v207 + 1) = v71;
          *(_QWORD *)&v208 = 0x4020000000000000;
          BYTE8(v208) = v199;
          v209 = v79;
          *(_QWORD *)&v218 = v79;
          v216 = v207;
          v217 = v208;
          v214 = *(unint64_t *)&v204[16];
          v215 = v206;
          v212 = v203;
          v213 = *(_OWORD *)v204;
          v210 = v201;
          v211 = v202;
          sub_10009A61C((uint64_t)&v210);
          sub_10000B458((uint64_t)&v210, (uint64_t)&v244, &qword_10031CCA0);
          sub_10009A628(&v201);
          v80 = sub_100003DB8(&qword_10031CC30);
          v81 = sub_10009A0D0();
          _ConditionalContent<>.init(storage:)(&v244, &type metadata for EmptyView, v80, &protocol witness table for EmptyView, v81);
          v239 = v197;
          v240[0] = v198[0];
          *(_OWORD *)((char *)v240 + 9) = *(_OWORD *)((char *)v198 + 9);
          *(_OWORD *)v236 = v193;
          *(_OWORD *)&v236[16] = v194;
          v237 = v195;
          v238 = v196;
          v234 = v191;
          v235 = v192;
          sub_10009A690((uint64_t)&v234);
          sub_10000B458((uint64_t)&v234, (uint64_t)&v244, &qword_10031CC08);
          v82 = sub_100003DB8(&qword_10031CC10);
          v83 = sub_100003DB8(&qword_10031CC18);
          v84 = sub_10009A064();
          v85 = sub_10002B614(&qword_10031CC58, &qword_10031CC18, (void (*)(void))sub_10009A1D8);
          _ConditionalContent<>.init(storage:)(&v244, v82, v83, v84, v85);
          v86 = sub_10009A698(&v201._countAndFlagsBits);
          v252 = v230;
          v253 = v231;
          v254 = v232;
          v255 = v233;
          v248 = v226;
          v249 = v227;
          v250 = v228;
          v251 = v229;
          v244 = v222;
          v245 = v223;
          v246 = v224;
          v247 = v225;
          goto LABEL_24;
        }
        swift_bridgeObjectRelease(v27);
        v175 = (void (*)(uint64_t, char *, uint64_t))static HorizontalAlignment.center.getter(v89);
        sub_1000970EC((uint64_t)&v244);
        v90 = v244._countAndFlagsBits;
        v91 = (char)v244._object;
        v92 = v245;
        v174 = (void (*)(_QWORD, _QWORD, _QWORD))*((_QWORD *)&v246 + 1);
        v93 = v246;
        LODWORD(v173) = v247;
        v172 = (id)*((_QWORD *)&v247 + 1);
        v95 = static Edge.Set.all.getter(v94);
        v96 = v95;
        LOBYTE(v191._countAndFlagsBits) = 1;
        LOBYTE(v201._countAndFlagsBits) = v91;
        LOBYTE(v200[0]) = 1;
        v97 = static Edge.Set.bottom.getter(v95);
        v98 = qword_100315788;
        swift_retain(v28);
        if (v98 != -1)
          swift_once(&qword_100315788, sub_10006F500);
        v99 = *(double *)&qword_10033FC50;
        swift_release(v28);
        v100 = EdgeInsets.init(_all:)(v99);
        LOBYTE(v210._countAndFlagsBits) = 0;
        v234 = (Swift::String)(unint64_t)v175;
        LOBYTE(v235) = v191._countAndFlagsBits;
        *((_QWORD *)&v235 + 1) = v90;
        v236[0] = v201._countAndFlagsBits;
        *(_OWORD *)&v236[8] = v92;
        *(_QWORD *)&v236[24] = v93;
        *(_QWORD *)&v237 = v174;
        BYTE8(v237) = v173;
        *(_QWORD *)&v238 = v172;
        BYTE8(v238) = v96;
        v239 = 0u;
        v240[0] = 0u;
        LOBYTE(v240[1]) = v200[0];
        BYTE8(v240[1]) = v97;
        *(double *)&v241 = v100;
        *((_QWORD *)&v241 + 1) = v101;
        *(_QWORD *)&v242 = v102;
        *((_QWORD *)&v242 + 1) = v103;
        LOBYTE(v243) = 0;
        sub_10009A058((uint64_t)&v234);
      }
      else
      {
        swift_bridgeObjectRelease(v27);
        sub_10009A700((uint64_t)&v210);
        sub_10000B458((uint64_t)&v210, (uint64_t)&v244, &qword_10031CCA0);
        v87 = sub_100003DB8(&qword_10031CC30);
        v88 = sub_10009A0D0();
        _ConditionalContent<>.init(storage:)(&v244, &type metadata for EmptyView, v87, &protocol witness table for EmptyView, v88);
        v239 = v197;
        v240[0] = v198[0];
        *(_OWORD *)((char *)v240 + 9) = *(_OWORD *)((char *)v198 + 9);
        *(_OWORD *)v236 = v193;
        *(_OWORD *)&v236[16] = v194;
        v237 = v195;
        v238 = v196;
        v234 = v191;
        v235 = v192;
        sub_10009A690((uint64_t)&v234);
      }
      sub_10000B458((uint64_t)&v234, (uint64_t)&v222, &qword_10031CC08);
      v104 = sub_100003DB8(&qword_10031CC10);
      v105 = sub_100003DB8(&qword_10031CC18);
      v106 = sub_10009A064();
      v107 = sub_10002B614(&qword_10031CC58, &qword_10031CC18, (void (*)(void))sub_10009A1D8);
      v86 = (uint64_t *)_ConditionalContent<>.init(storage:)(&v222, v104, v105, v106, v107);
LABEL_24:
      v234 = (Swift::String)(unint64_t)static HorizontalAlignment.center.getter(v86);
      LOBYTE(v235) = 1;
      v172 = (id)objc_opt_self(NSBundle);
      v108 = objc_msgSend(v172, "mainBundle");
      v109._countAndFlagsBits = 0xD00000000000001ELL;
      v256._countAndFlagsBits = 0xD00000000000007ALL;
      v257._object = (void *)0x8000000100267720;
      v109._object = (void *)0x8000000100267700;
      v110._countAndFlagsBits = 0;
      v110._object = (void *)0xE000000000000000;
      v111 = NSLocalizedString(_:tableName:bundle:value:comment:)(v109, (Swift::String_optional)0, (NSBundle)v108, v110, v256);

      v210 = v111;
      v191 = *(Swift::String *)(a1 + 160);
      v112 = sub_100003DB8(&qword_100316780);
      State.projectedValue.getter(&v222, v112);
      v113 = v222;
      v114 = v223;
      v115 = sub_100003DB8(&qword_10031CC80);
      v175 = (void (*)(uint64_t, char *, uint64_t))v115;
      v116 = sub_1000084FC(&qword_10031CC88, &qword_10031CC80, (uint64_t)&protocol conformance descriptor for VStack<A>);
      v173 = v116;
      v117 = sub_10002B3F4();
      v174 = (void (*)(_QWORD, _QWORD, _QWORD))v117;
      v118 = sub_10009A25C();
      View.alert<A, B, C>(_:isPresented:actions:message:)(&v210, v113._countAndFlagsBits, v113._object, v114, sub_100097234, 0, sub_100097290, 0, v115, &type metadata for String, &type metadata for TryOutConnectionAlertButtonsView, &type metadata for Text, v116, v117, v118, &protocol witness table for Text);
      swift_bridgeObjectRelease(v111._object);
      swift_release(v113._object);
      v119 = swift_release(v113._countAndFlagsBits);
      v234 = (Swift::String)(unint64_t)static HorizontalAlignment.center.getter(v119);
      LOBYTE(v235) = 1;
      v120 = objc_msgSend(v172, "mainBundle");
      v257._countAndFlagsBits = 0xD00000000000004DLL;
      v257._object = (void *)0x80000001002637B0;
      v121._object = (void *)0x8000000100263790;
      v121._countAndFlagsBits = 0xD000000000000019;
      v122._countAndFlagsBits = 0;
      v122._object = (void *)0xE000000000000000;
      v123 = NSLocalizedString(_:tableName:bundle:value:comment:)(v121, (Swift::String_optional)0, (NSBundle)v120, v122, v257);

      v210 = v123;
      v191 = *(Swift::String *)(a1 + 176);
      v124 = State.projectedValue.getter(&v222, v112);
      v125 = v222;
      v126 = v223;
      v128 = __chkstk_darwin(v124, v127);
      __chkstk_darwin(v128, v129);
      v130 = sub_100003DB8(&qword_100318730);
      v257._object = (void *)sub_1000084FC(&qword_100318738, &qword_100318730, (uint64_t)&protocol conformance descriptor for Button<A>);
      v170 = &protocol witness table for Text;
      v169[1] = v174;
      v169[0] = v173;
      v168 = v130;
      v131 = v182;
      ((void (*)(Swift::String *, uint64_t, void *, uint64_t, uint64_t (*)(), _QWORD *, uint64_t (*)@<X0>(uint64_t@<X8>), _QWORD *, void (*)(uint64_t, char *, uint64_t), void *, uint64_t, void *))View.alert<A, B, C>(_:isPresented:actions:message:))(&v210, v125._countAndFlagsBits, v125._object, v126, sub_10009A2A0, v169, sub_10009A2A8, v169, v175, &type metadata for String, v168, &type metadata for Text);
      swift_release(v125._object);
      swift_release(v125._countAndFlagsBits);
      swift_bridgeObjectRelease(v210._object);
      v218 = v252;
      v219 = v253;
      v220 = v254;
      v221 = v255;
      v214 = v248;
      v215 = v249;
      v216 = v250;
      v217 = v251;
      v210 = v244;
      v211 = v245;
      v212 = v246;
      v213 = v247;
      v175 = *(void (**)(uint64_t, char *, uint64_t))(v181 + 16);
      v175((uint64_t)v189, v188, v183);
      v174 = *(void (**)(_QWORD, _QWORD, _QWORD))(v184 + 16);
      v174(v190, v131, v185);
      v132 = v219;
      v230 = v218;
      v231 = v219;
      v133 = v220;
      v232 = v220;
      v134 = v214;
      v135 = v215;
      v226 = v214;
      v227 = v215;
      v136 = v216;
      v137 = v217;
      v228 = v216;
      v229 = v217;
      v138 = v210;
      v139 = v211;
      v222 = v210;
      v223 = v211;
      v140 = v212;
      v141 = v213;
      v224 = v212;
      v225 = v213;
      v142 = v179;
      v143 = v180;
      *(_OWORD *)(v180 + 176) = v218;
      *(_OWORD *)(v143 + 192) = v132;
      *(_OWORD *)(v143 + 208) = v133;
      *(_OWORD *)(v143 + 112) = v134;
      *(_OWORD *)(v143 + 128) = v135;
      *(_OWORD *)(v143 + 144) = v136;
      *(_OWORD *)(v143 + 160) = v137;
      *(Swift::String *)(v143 + 48) = v138;
      *(_OWORD *)(v143 + 64) = v139;
      v144 = v186;
      v145 = v187;
      *(_QWORD *)v143 = v187;
      *(_QWORD *)(v143 + 8) = v144;
      v186 = v144;
      v187 = v145;
      v146 = object;
      v147 = countAndFlagsBits;
      *(_QWORD *)(v143 + 16) = v142;
      *(_QWORD *)(v143 + 24) = v147;
      v148 = v176;
      *(_QWORD *)(v143 + 32) = v146;
      *(_QWORD *)(v143 + 40) = v148;
      v233 = v221;
      *(_WORD *)(v143 + 224) = v221;
      *(_OWORD *)(v143 + 80) = v140;
      *(_OWORD *)(v143 + 96) = v141;
      v149 = sub_100003DB8(&qword_10031CC98);
      v150 = v183;
      v175(v143 + *(int *)(v149 + 64), v189, v183);
      v151 = v143 + *(int *)(v149 + 80);
      v152 = v185;
      v174(v151, v190, v185);
      sub_10009A2B0(v145, v144, v142, v147, v146);
      sub_10009A3D4((uint64_t)&v222, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_10009A2EC);
      v153 = *(void (**)(char *, uint64_t))(v184 + 8);
      v153(v182, v152);
      v154 = *(void (**)(char *, uint64_t))(v181 + 8);
      v154(v188, v150);
      v153(v190, v152);
      v154(v189, v150);
      v240[1] = v218;
      v241 = v219;
      v242 = v220;
      v243 = v221;
      v237 = v214;
      v238 = v215;
      v239 = v216;
      v240[0] = v217;
      v234 = v210;
      v235 = v211;
      *(_OWORD *)v236 = v212;
      *(_OWORD *)&v236[16] = v213;
      sub_10009A3D4((uint64_t)&v234, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_10009A448);
      return sub_10009A534(v187, v186, v142, v147, v146);
    }
    v156 = *(_QWORD *)(a1 + 40);
    v157 = type metadata accessor for AppRuntimeStateModel();
    v158 = type metadata accessor for AppRuntimeStateModel;
    v159 = &qword_100318498;
  }
  else
  {
    v156 = *(_QWORD *)(a1 + 24);
    v157 = type metadata accessor for AppPropertiesModel();
    v158 = type metadata accessor for AppPropertiesModel;
    v159 = &qword_10031CB88;
  }
LABEL_32:
  v167 = sub_1000052EC(v159, (uint64_t (*)(uint64_t))v158, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v156, v157, v167);
  __break(1u);
  return result;
}

uint64_t sub_100096A3C(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  int v5;
  int v7;
  uint64_t v10;
  Swift::Int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;

  if (*(_QWORD *)(a1 + 80))
    return 0;
  v5 = *(unsigned __int8 *)(a4 + 42);
  if (v5 != 2 && (v5 & 1) == 0)
    return 7;
  v7 = *(unsigned __int8 *)(a4 + 43);
  if (v7 != 2 && (v7 & 1) == 0)
    return 8;
  if (!a3[8])
    return 6;
  v10 = a3[10];
  if (!*(_QWORD *)(v10 + 16))
  {
LABEL_15:
    if (sub_100067058(2u, a3[13]))
    {
      v15 = sub_100003DB8(&qword_10031CCB0);
      v16 = swift_allocObject(v15, 33, 7);
      *(_OWORD *)(v16 + 16) = xmmword_10024E070;
      *(_BYTE *)(v16 + 32) = 2;
      if (a3[8])
      {
        if (sub_100067058(0, a3[13]))
        {
          v17 = sub_100171FD4((_QWORD *)1, 2, 1, (_QWORD *)v16);
          v17[2] = 2;
          *((_BYTE *)v17 + 33) = 3;
        }
      }
      return 2;
    }
    if (a3[8])
    {
      if (sub_100067058(0, a3[13]))
        return 3;
      v19 = a3[8];
      if (v19)
      {
        if (*(_QWORD *)(v19 + 16))
        {
          v20 = sub_10017D294(0);
          if ((v21 & 1) != 0)
            __asm { BR              X10 }
        }
      }
    }
    return 6;
  }
  v12 = sub_1002096C4((uint64_t)&off_1002E0BB0);
  v13 = sub_1001BF5E8(v10, v12);
  swift_bridgeObjectRelease(v12);
  v14 = a3[8];
  if ((v13 & 1) != 0)
  {
    if (!v14)
      return 6;
    goto LABEL_15;
  }
  if (!v14 || *(_QWORD *)(a3[11] + 16) || !sub_100067058(2u, a3[10]))
    return 0;
  v18 = *(_WORD *)(*(_QWORD *)(a2 + 40) + 120);
  if (v18 == 2)
    return 0;
  else
    return v18 & 1;
}

void sub_100096C74()
{
  JUMPOUT(0x100096C48);
}

uint64_t sub_100096C84()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)();
  unint64_t *v7;
  uint64_t v8;

  v1 = v0[10];
  if (!v1)
  {
    v5 = v0[11];
    v0 = (_QWORD *)type metadata accessor for StewieModel();
    v6 = type metadata accessor for StewieModel;
    v7 = &qword_1003186E0;
    goto LABEL_14;
  }
  if (!*(_QWORD *)(v1 + 64))
    return 1;
  if (sub_100067058(3u, *(_QWORD *)(v1 + 88)))
    return 0;
  if (!*(_QWORD *)(v1 + 64))
    return 1;
  v3 = *(_QWORD *)(v1 + 88);
  if (!*(_QWORD *)(v3 + 16) || sub_100067058(3u, v3))
    return 1;
  v4 = v0[6];
  if (!v4)
  {
    while (1)
    {
      v5 = v0[7];
      v0 = (_QWORD *)type metadata accessor for ConnectivityModel();
      v6 = type metadata accessor for ConnectivityModel;
      v7 = &qword_100316B00;
LABEL_14:
      v8 = sub_1000052EC(v7, (uint64_t (*)(uint64_t))v6, (uint64_t)&unk_10024D2FC);
      EnvironmentObject.error()(0, v5, v0, v8);
      __break(1u);
    }
  }
  if (*(_BYTE *)(v4 + 57))
    return 2;
  else
    return 1;
}

uint64_t sub_100096D6C(uint64_t a1, double a2, double a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  __n128 v15;
  void *v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  void *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD aBlock[5];
  uint64_t v34;

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v32 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D75C();
  v16 = (void *)static OS_dispatch_queue.main.getter(v15);
  v17 = swift_allocObject(&unk_1002EB8D8, 240, 7);
  v18 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v17 + 176) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v17 + 192) = v18;
  *(_OWORD *)(v17 + 208) = *(_OWORD *)(a1 + 192);
  v19 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v17 + 112) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v17 + 128) = v19;
  v20 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v17 + 144) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v17 + 160) = v20;
  v21 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v17 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v17 + 64) = v21;
  v22 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v17 + 80) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v17 + 96) = v22;
  v23 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v17 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v17 + 32) = v23;
  *(double *)(v17 + 224) = a2;
  *(double *)(v17 + 232) = a3;
  aBlock[4] = sub_10009A764;
  v34 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002EB8F0;
  v24 = _Block_copy(aBlock);
  v25 = v34;
  sub_100099DE0((uint64_t *)a1);
  swift_release(v25);
  static DispatchQoS.unspecified.getter(v26);
  aBlock[0] = _swiftEmptyArrayStorage;
  v27 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v28 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v29 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v28, v29, v6, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v9, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_100096FBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;

  v10 = (_OWORD *)swift_allocObject(&unk_1002EB8B0, 224, 7);
  v11 = *(_OWORD *)(a4 + 176);
  v10[11] = *(_OWORD *)(a4 + 160);
  v10[12] = v11;
  v10[13] = *(_OWORD *)(a4 + 192);
  v12 = *(_OWORD *)(a4 + 112);
  v10[7] = *(_OWORD *)(a4 + 96);
  v10[8] = v12;
  v13 = *(_OWORD *)(a4 + 144);
  v10[9] = *(_OWORD *)(a4 + 128);
  v10[10] = v13;
  v14 = *(_OWORD *)(a4 + 48);
  v10[3] = *(_OWORD *)(a4 + 32);
  v10[4] = v14;
  v15 = *(_OWORD *)(a4 + 80);
  v10[5] = *(_OWORD *)(a4 + 64);
  v10[6] = v15;
  v16 = *(_OWORD *)(a4 + 16);
  v10[1] = *(_OWORD *)a4;
  v10[2] = v16;
  swift_bridgeObjectRetain(a3);
  sub_100099DE0((uint64_t *)a4);
  v17 = type metadata accessor for AppEvents();
  v18 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  v19 = EnvironmentObject.init()(v17, v18);
  v21 = v20;
  v22 = type metadata accessor for StewieModel();
  v23 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.init()(v22, v23);
  *a5 = v19;
  a5[1] = v21;
  a5[2] = result;
  a5[3] = v25;
  a5[4] = a2;
  a5[5] = a3;
  a5[6] = a1;
  a5[7] = (uint64_t)sub_10009A710;
  a5[8] = (uint64_t)v10;
  return result;
}

_QWORD *sub_1000970EC@<X0>(uint64_t a1@<X8>)
{
  id v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  char v13;
  uint64_t v14;
  char v15;
  _QWORD v16[2];
  Swift::String v17;

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v17._object = (void *)0x8000000100267960;
  v3._countAndFlagsBits = 0x6E6F4320706F7453;
  v3._object = (void *)0xEF676E697463656ELL;
  v4.value._countAndFlagsBits = 0x5072656972726143;
  v4.value._object = (void *)0xED00006E6F656769;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v17._countAndFlagsBits = 0xD00000000000005ALL;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, v17);

  v7 = type metadata accessor for AppEvents();
  v8 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  v9 = EnvironmentObject.init()(v7, v8);
  v11 = v10;
  v15 = 0;
  result = State.init(wrappedValue:)(v16, &v15, &type metadata for Bool);
  v13 = v16[0];
  v14 = v16[1];
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v11;
  *(Swift::String *)(a1 + 32) = v6;
  *(_BYTE *)(a1 + 48) = v13;
  *(_QWORD *)(a1 + 56) = v14;
  return result;
}

uint64_t sub_100097234@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = type metadata accessor for AppEvents();
  v3 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  result = EnvironmentObject.init()(v2, v3);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = 5;
  return result;
}

uint64_t sub_100097290@<X0>(uint64_t a1@<X8>)
{
  id v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  unint64_t v6;
  __n128 v7;
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  Swift::String v12;
  Swift::String v13;

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v13._object = (void *)0x80000001002678C0;
  v3._object = (void *)0x8000000100267850;
  v3._countAndFlagsBits = 0x1000000000000063;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v13._countAndFlagsBits = 0xD000000000000094;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v13);

  v12 = v5;
  v6 = sub_10002B3F4();
  result = Text.init<A>(_:)(&v12, &type metadata for String, v6, v7);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v10 & 1;
  *(_QWORD *)(a1 + 24) = v11;
  return result;
}

uint64_t sub_100097364(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  Swift::String v22;
  Swift::String v23;

  v2 = sub_100003DB8(&qword_100319400);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v23._object = (void *)0x8000000100267830;
  v7._countAndFlagsBits = 19279;
  v7._object = (void *)0xE200000000000000;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0xD000000000000017;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v23);

  v22 = v9;
  static ButtonRole.cancel.getter(v10, v11);
  v12 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v5, 0, 1, v12);
  v13 = (_OWORD *)swift_allocObject(&unk_1002EB928, 224, 7);
  v14 = *(_OWORD *)(a1 + 176);
  v13[11] = *(_OWORD *)(a1 + 160);
  v13[12] = v14;
  v13[13] = *(_OWORD *)(a1 + 192);
  v15 = *(_OWORD *)(a1 + 112);
  v13[7] = *(_OWORD *)(a1 + 96);
  v13[8] = v15;
  v16 = *(_OWORD *)(a1 + 144);
  v13[9] = *(_OWORD *)(a1 + 128);
  v13[10] = v16;
  v17 = *(_OWORD *)(a1 + 48);
  v13[3] = *(_OWORD *)(a1 + 32);
  v13[4] = v17;
  v18 = *(_OWORD *)(a1 + 80);
  v13[5] = *(_OWORD *)(a1 + 64);
  v13[6] = v18;
  v19 = *(_OWORD *)(a1 + 16);
  v13[1] = *(_OWORD *)a1;
  v13[2] = v19;
  sub_100099DE0((uint64_t *)a1);
  v20 = sub_10002B3F4();
  return Button<>.init<A>(_:role:action:)(&v22, v5, sub_10009A850, v13, &type metadata for String, v20);
}

void sub_1000974F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(a1 + 112);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 64);
    v3 = *(_QWORD *)(v1 + 72);
    if (v3)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v1 + 72));
      swift_retain(v1);
      v4 = sub_100003DB8(&qword_10032B0E0);
      v5 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v4, v5);
      v6 = *(_QWORD *)(v1 + 72);
      v7 = v3;
    }
    else
    {
      swift_retain(*(_QWORD *)(a1 + 112));
      v7 = 0;
      v6 = 0;
    }
    *(_QWORD *)(v1 + 64) = 0;
    *(_QWORD *)(v1 + 72) = 0;
    swift_bridgeObjectRelease(v6);
    sub_1002365A0(v2, v3);
    swift_release(v1);
    swift_bridgeObjectRelease(v7);
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 120);
    v9 = type metadata accessor for TryOutModel(0);
    v10 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, v8, v9, v10);
    __break(1u);
  }
}

uint64_t sub_10009760C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t countAndFlagsBits;
  uint64_t v5;
  void *object;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  unint64_t v11;
  __n128 v12;
  uint64_t result;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  Swift::String v21;

  v3 = *(_QWORD *)(a1 + 112);
  if (v3)
  {
    countAndFlagsBits = *(_QWORD *)(v3 + 64);
    v5 = *(_QWORD *)(v3 + 72);
    if (v5)
    {
      object = *(void **)(v3 + 72);
    }
    else
    {
      v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v21._countAndFlagsBits = 0xD00000000000006BLL;
      v21._object = (void *)0x80000001002677C0;
      v8._object = (void *)0x80000001002677A0;
      v8._countAndFlagsBits = 0xD000000000000010;
      v9._countAndFlagsBits = 0;
      v9._object = (void *)0xE000000000000000;
      v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)(unint64_t)countAndFlagsBits, (NSBundle)v7, v9, v21);
      countAndFlagsBits = v10._countAndFlagsBits;
      object = v10._object;

      v5 = 0;
    }
    v20[0] = countAndFlagsBits;
    v20[1] = object;
    v11 = sub_10002B3F4();
    v12 = swift_bridgeObjectRetain(v5);
    result = Text.init<A>(_:)(v20, &type metadata for String, v11, v12);
    *(_QWORD *)a2 = result;
    *(_QWORD *)(a2 + 8) = v14;
    *(_BYTE *)(a2 + 16) = v15 & 1;
    *(_QWORD *)(a2 + 24) = v16;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 120);
    v18 = type metadata accessor for TryOutModel(0);
    v19 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v17, v18, v19);
    __break(1u);
  }
  return result;
}

uint64_t sub_100097750(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  unint64_t *v9;
  void *v10;
  uint64_t v11;

  v1 = a1[14];
  if (v1)
  {
    if (*(unsigned __int16 *)(v1 + 56) >= 0x4000u)
      return sub_100097854();
    if (*a1)
    {
      v2 = *(_QWORD *)(*a1 + 40);
      swift_retain(v2);
      v3 = sub_100003DB8(&qword_10032B0E0);
      v4 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v3, v4);
      swift_release(v2);
      return sub_100097854();
    }
    v6 = a1[1];
    v7 = type metadata accessor for AppEvents();
    v8 = (uint64_t (*)(uint64_t))type metadata accessor for AppEvents;
    v9 = (unint64_t *)&qword_100316A10;
    v10 = &unk_100254EA8;
  }
  else
  {
    v6 = a1[15];
    v7 = type metadata accessor for TryOutModel(0);
    v8 = type metadata accessor for TryOutModel;
    v9 = &qword_10031A0C8;
    v10 = &unk_10024D2FC;
  }
  v11 = sub_1000052EC(v9, v8, (uint64_t)v10);
  result = EnvironmentObject.error()(0, v6, v7, v11);
  __break(1u);
  return result;
}

uint64_t sub_100097854()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  __n128 v19;
  void *v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  void *v28;
  _OWORD *v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD aBlock[5];
  _OWORD *v40;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v38 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v36 = *(_QWORD *)(v6 - 8);
  v37 = v6;
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v18 = (char *)&v35 - v17;
  sub_10000D75C();
  v20 = (void *)static OS_dispatch_queue.main.getter(v19);
  static DispatchTime.now()(v20);
  + infix(_:_:)(v15, 0.5);
  v35 = *(void (**)(char *, uint64_t))(v11 + 8);
  v35(v15, v10);
  v21 = (_OWORD *)swift_allocObject(&unk_1002EB810, 224, 7);
  v22 = *((_OWORD *)v0 + 11);
  v21[11] = *((_OWORD *)v0 + 10);
  v21[12] = v22;
  v21[13] = *((_OWORD *)v0 + 12);
  v23 = *((_OWORD *)v0 + 7);
  v21[7] = *((_OWORD *)v0 + 6);
  v21[8] = v23;
  v24 = *((_OWORD *)v0 + 9);
  v21[9] = *((_OWORD *)v0 + 8);
  v21[10] = v24;
  v25 = *((_OWORD *)v0 + 3);
  v21[3] = *((_OWORD *)v0 + 2);
  v21[4] = v25;
  v26 = *((_OWORD *)v0 + 5);
  v21[5] = *((_OWORD *)v0 + 4);
  v21[6] = v26;
  v27 = *((_OWORD *)v0 + 1);
  v21[1] = *(_OWORD *)v0;
  v21[2] = v27;
  aBlock[4] = sub_10009A038;
  v40 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002EB828;
  v28 = _Block_copy(aBlock);
  v29 = v40;
  sub_100099DE0(v1);
  swift_release(v29);
  static DispatchQoS.unspecified.getter(v30);
  aBlock[0] = _swiftEmptyArrayStorage;
  v31 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v32 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v33 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v32, v33, v2, v31);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v18, v9, v5, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v38 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v37);
  return ((uint64_t (*)(char *, uint64_t))v35)(v18, v10);
}

uint64_t sub_100097B1C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = type metadata accessor for TryOutModel(0);
  v3 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.init()(v2, v3);
  *a1 = result;
  a1[1] = v5;
  return result;
}

uint64_t sub_100097B70(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  __int128 v9;

  v1 = *(_QWORD *)(a1 + 112);
  if (v1)
  {
    v2 = (*(_WORD *)(v1 + 56) & 0xC100) == 256;
    v9 = *(_OWORD *)(a1 + 144);
    v8 = v2;
    v3 = sub_100003DB8(&qword_100316780);
    return State.wrappedValue.setter(&v8, v3);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 120);
    v6 = type metadata accessor for TryOutModel(0);
    v7 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v5, v6, v7);
    __break(1u);
  }
  return result;
}

void sub_100097C18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  if (*(_QWORD *)(a2 + 8))
  {
    v2 = sub_100003DB8(&qword_100316780);
    State.wrappedValue.getter(&v3, v2);
    if (v3 == 1)
    {
      LOBYTE(v3) = 0;
      State.wrappedValue.setter(&v3, v2);
    }
    else
    {
      sub_100097854();
    }
  }
}

uint64_t sub_100097CA8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  __int128 v7;

  v1 = *(_QWORD *)(result + 112);
  if (v1)
  {
    if (*(_QWORD *)(v1 + 72))
    {
      v7 = *(_OWORD *)(result + 176);
      v6 = 1;
      v2 = sub_100003DB8(&qword_100316780);
      return State.wrappedValue.setter(&v6, v2);
    }
  }
  else
  {
    v3 = *(_QWORD *)(result + 120);
    v4 = type metadata accessor for TryOutModel(0);
    v5 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v3, v4, v5);
    __break(1u);
  }
  return result;
}

uint64_t sub_100097D48@<X0>(uint64_t a1@<X8>)
{
  return sub_100095524(a1);
}

uint64_t sub_100097DA8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BOOL8 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t result;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _BYTE v88[26];
  _OWORD v89[9];
  _OWORD v90[2];
  __int128 v91;
  _BYTE v92[64];
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _BYTE v96[42];
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  _OWORD v106[3];

  if ((a1[2] & 1) != 0)
  {
    v97 = *(_OWORD *)(a1 + 3);
    *(_QWORD *)&v98 = a1[5];
    sub_100003DB8(&qword_10031ED30);
    Binding.wrappedValue.getter(&v91);
    v5 = v91;
    v6 = type metadata accessor for AppPropertiesModel();
    v7 = sub_1000052EC(&qword_10031CB88, (uint64_t (*)(uint64_t))type metadata accessor for AppPropertiesModel, (uint64_t)&unk_10024D2FC);
    v8 = EnvironmentObject.init()(v6, v7);
    v77 = v9;
    v78 = v8;
    v10 = type metadata accessor for ConnectivityModel();
    v11 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
    v12 = EnvironmentObject.init()(v10, v11);
    v75 = v13;
    v76 = v12;
    v14 = type metadata accessor for GeoLocationModel();
    v15 = sub_1000052EC(&qword_10031CD28, (uint64_t (*)(uint64_t))type metadata accessor for GeoLocationModel, (uint64_t)&unk_10024D2FC);
    v16 = EnvironmentObject.init()(v14, v15);
    v73 = v17;
    v74 = v16;
    v18 = type metadata accessor for GuidanceMessagesModel();
    v19 = sub_1000052EC(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel, (uint64_t)&unk_10024D2FC);
    v20 = EnvironmentObject.init()(v18, v19);
    v71 = v21;
    v72 = v20;
    v22 = type metadata accessor for GuidanceModel();
    v23 = sub_1000052EC(&qword_100316B08, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceModel, (uint64_t)&unk_10024D2FC);
    v24 = EnvironmentObject.init()(v22, v23);
    v26 = v25;
    v27 = type metadata accessor for StewieModel();
    v28 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
    v29 = EnvironmentObject.init()(v27, v28);
    v31 = v30;
    v32 = type metadata accessor for TimeZoneModel(0);
    v33 = sub_1000052EC(&qword_10031CD30, type metadata accessor for TimeZoneModel, (uint64_t)&unk_10024D2FC);
    v34 = EnvironmentObject.init()(v32, v33);
    v36 = v35;
    v37 = type metadata accessor for TryOutModel(0);
    v38 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    v39 = EnvironmentObject.init()(v37, v38);
    v41 = v40;
    v43 = static Edge.Set.all.getter(v42);
    *(_QWORD *)&v91 = v78;
    *((_QWORD *)&v91 + 1) = v77;
    *(_QWORD *)v92 = v76;
    *(_QWORD *)&v92[8] = v75;
    *(_QWORD *)&v92[16] = v74;
    *(_QWORD *)&v92[24] = v73;
    *(_QWORD *)&v92[32] = v72;
    *(_QWORD *)&v92[40] = v71;
    *(_QWORD *)&v92[48] = v24;
    *(_QWORD *)&v92[56] = v26;
    *(_QWORD *)&v93 = v29;
    *((_QWORD *)&v93 + 1) = v31;
    *(_QWORD *)&v94 = v34;
    *((_QWORD *)&v94 + 1) = v36;
    *(_QWORD *)&v95 = v39;
    *((_QWORD *)&v95 + 1) = v41;
    *(_QWORD *)v96 = v5;
    *(_OWORD *)&v96[8] = xmmword_100252800;
    *(_OWORD *)&v96[24] = xmmword_100252810;
    v96[40] = v43;
    sub_10009B4F4((uint64_t)&v91);
  }
  else
  {
    v4 = static HorizontalAlignment.center.getter(a1);
    sub_100098368((uint64_t)&v97);
    v91 = (unint64_t)v4;
    v92[0] = 1;
    *(_OWORD *)&v92[8] = v97;
    *(_OWORD *)&v92[24] = v98;
    *(_OWORD *)&v92[40] = v99;
    *(_QWORD *)&v92[56] = v100;
    LOBYTE(v93) = BYTE8(v100);
    sub_10009B2DC((uint64_t)&v91);
  }
  sub_10000B458((uint64_t)&v91, (uint64_t)v89, &qword_10031CCF8);
  v44 = sub_100003DB8(&qword_10031CD00);
  v45 = sub_100003DB8(&qword_10031CD08);
  v46 = sub_10002B614(&qword_10031CD10, &qword_10031CD00, (void (*)(void))sub_10009B2E8);
  v47 = sub_1000084FC(&qword_10031CD20, &qword_10031CD08, (uint64_t)&protocol conformance descriptor for VStack<A>);
  _ConditionalContent<>.init(storage:)(v89, v44, v45, v46, v47);
  v48 = *a1;
  if (*a1)
  {
    if (*(_QWORD *)(v48 + 64) && (v49 = sub_100067058(3u, *(_QWORD *)(v48 + 88))))
    {
      v50 = static HorizontalAlignment.center.getter(v49);
      v51 = type metadata accessor for UIMetrics();
      v52 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
      v53 = EnvironmentObject.init()(v51, v52);
      v55 = v54;
      v56 = 1;
      v57 = 1;
    }
    else
    {
      v50 = 0;
      v56 = 0;
      v55 = 0;
      v57 = 0;
      v53 = 1;
    }
    v87 = v105;
    *(_OWORD *)v88 = v106[0];
    *(_OWORD *)&v88[10] = *(_OWORD *)((char *)v106 + 10);
    v58 = v101;
    v83 = v101;
    v84 = v102;
    v59 = v103;
    v85 = v103;
    v86 = v104;
    v60 = v97;
    v79 = v97;
    v80 = v98;
    v81 = v99;
    v82 = v100;
    v61 = v106[0];
    v89[8] = v105;
    v90[0] = v106[0];
    *(_OWORD *)((char *)v90 + 10) = *(_OWORD *)((char *)v106 + 10);
    v62 = v102;
    v89[4] = v101;
    v89[5] = v102;
    v63 = v104;
    v89[6] = v103;
    v89[7] = v104;
    v64 = v98;
    v65 = v99;
    v89[0] = v97;
    v89[1] = v98;
    v66 = v100;
    v89[2] = v99;
    v89[3] = v100;
    *(_OWORD *)(a2 + 128) = v105;
    *(_OWORD *)(a2 + 144) = v61;
    *(_OWORD *)(a2 + 154) = *(_OWORD *)((char *)v106 + 10);
    *(_OWORD *)(a2 + 64) = v58;
    *(_OWORD *)(a2 + 80) = v62;
    *(_OWORD *)(a2 + 96) = v59;
    *(_OWORD *)(a2 + 112) = v63;
    *(_OWORD *)a2 = v60;
    *(_OWORD *)(a2 + 16) = v64;
    *(_OWORD *)(a2 + 32) = v65;
    *(_OWORD *)(a2 + 48) = v66;
    *(_QWORD *)(a2 + 176) = v50;
    *(_QWORD *)(a2 + 184) = 0;
    *(_QWORD *)(a2 + 192) = v56;
    *(_QWORD *)(a2 + 200) = v53;
    *(_QWORD *)(a2 + 208) = v55;
    *(_QWORD *)(a2 + 216) = 0;
    *(_BYTE *)(a2 + 224) = v57;
    sub_10009B3EC((uint64_t)v89, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_10009B32C);
    sub_10009B3C4(v50, 0, v56, v53);
    sub_10009B3D8(v50, 0, v56, v53);
    *(_OWORD *)v96 = v87;
    *(_OWORD *)&v96[16] = *(_OWORD *)v88;
    *(_OWORD *)&v96[26] = *(_OWORD *)&v88[10];
    *(_OWORD *)&v92[48] = v83;
    v93 = v84;
    v94 = v85;
    v95 = v86;
    v91 = v79;
    *(_OWORD *)v92 = v80;
    *(_OWORD *)&v92[16] = v81;
    *(_OWORD *)&v92[32] = v82;
    return sub_10009B3EC((uint64_t)&v91, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))sub_10009B460);
  }
  else
  {
    v68 = a1[1];
    v69 = type metadata accessor for StewieModel();
    v70 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v68, v69, v70);
    __break(1u);
  }
  return result;
}

double sub_100098368@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  double v13;

  v2 = type metadata accessor for StewieModel();
  v3 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
  v4 = EnvironmentObject.init()(v2, v3);
  v6 = v5;
  v7 = type metadata accessor for UIMetrics();
  v8 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v9 = EnvironmentObject.init()(v7, v8);
  v11 = v10;
  sub_100003DB8(&qword_10031ED30);
  Binding.wrappedValue.getter(&v13);
  result = v13;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = 0;
  *(double *)(a1 + 40) = result;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 1;
  return result;
}

__n128 sub_100098460@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;
  _OWORD v17[3];
  _OWORD v18[14];
  char v19;

  v4 = v2[1];
  v17[0] = *v2;
  v17[1] = v4;
  v17[2] = v2[2];
  v5 = static Alignment.center.getter(a1);
  v7 = v6;
  sub_100097DA8((uint64_t *)v17, (uint64_t)v18);
  v8 = v18[11];
  v9 = v18[13];
  *(_OWORD *)(a2 + 208) = v18[12];
  *(_OWORD *)(a2 + 224) = v9;
  v10 = v18[7];
  v11 = v18[9];
  v12 = v18[10];
  *(_OWORD *)(a2 + 144) = v18[8];
  *(_OWORD *)(a2 + 160) = v11;
  *(_OWORD *)(a2 + 176) = v12;
  *(_OWORD *)(a2 + 192) = v8;
  v13 = v18[5];
  v14 = v18[6];
  *(_OWORD *)(a2 + 80) = v18[4];
  *(_OWORD *)(a2 + 96) = v13;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 240) = v19;
  *(_OWORD *)(a2 + 112) = v14;
  *(_OWORD *)(a2 + 128) = v10;
  v15 = v18[1];
  *(_OWORD *)(a2 + 16) = v18[0];
  *(_OWORD *)(a2 + 32) = v15;
  result = (__n128)v18[3];
  *(_OWORD *)(a2 + 48) = v18[2];
  *(__n128 *)(a2 + 64) = result;
  return result;
}

uint64_t sub_100098510@<X0>(uint64_t a1@<X0>, uint64_t *(**a2)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t *(*v9)@<X0>(uint64_t@<X8>);
  uint64_t *(*v10)@<X0>(uint64_t@<X8>);
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *(*v17)@<X0>(uint64_t@<X8>);
  uint64_t *(*v18)@<X0>(uint64_t@<X8>);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *(*v22)@<X0>(uint64_t@<X8>);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *(*v26)@<X0>(uint64_t@<X8>);
  id v27;
  Swift::String v28;
  Swift::String_optional v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *(*object)@<X0>(uint64_t@<X8>);
  uint64_t countAndFlagsBits;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *(*v54)@<X0>(uint64_t@<X8>);
  char v55;
  _QWORD v56[2];
  _BYTE v57[16];
  char v58[8];
  uint64_t v59;
  Swift::String v60;

  sub_10000B458(a1 + 32, (uint64_t)v57, &qword_10031CCF0);
  sub_10000B458((uint64_t)v57, (uint64_t)v58, &qword_10031CCF0);
  v4 = v59;
  if (v59)
  {
    v5 = v58[0];
    v6 = swift_allocObject(&unk_1002EBB90, 104, 7);
    *(_BYTE *)(v6 + 16) = v5;
    *(_QWORD *)(v6 + 24) = v4;
    v7 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v6 + 64) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v6 + 80) = v7;
    *(_QWORD *)(v6 + 96) = *(_QWORD *)(a1 + 64);
    v8 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v6 + 32) = *(_OWORD *)a1;
    *(_OWORD *)(v6 + 48) = v8;
    sub_10009B108((uint64_t *)a1);
    v9 = (uint64_t *(*)@<X0>(uint64_t@<X8>))ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
    v10 = sub_10009B284;
  }
  else
  {
    v10 = 0;
    v6 = 0;
    v9 = 0;
  }
  v11 = swift_allocObject(&unk_1002EBB68, 88, 7);
  v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v11 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v11 + 64) = v12;
  *(_QWORD *)(v11 + 80) = *(_QWORD *)(a1 + 64);
  v13 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v11 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v11 + 32) = v13;
  sub_10009B108((uint64_t *)a1);
  sub_100030F08((uint64_t)v57);
  v14 = type metadata accessor for ConnectivityModel();
  v15 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
  v16 = EnvironmentObject.init()(v14, v15);
  v18 = v17;
  v19 = type metadata accessor for StewieModel();
  v20 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
  v21 = EnvironmentObject.init()(v19, v20);
  v23 = *(_QWORD *)(a1 + 16);
  if (v23)
  {
    v24 = *(_QWORD *)(v23 + 64);
    v53 = v11;
    v54 = v18;
    if (v24)
    {
      v25 = v6;
      if (*(_QWORD *)(*(_QWORD *)(v23 + 88) + 16))
      {
        v50 = v21;
        v26 = v22;
        v27 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v60._countAndFlagsBits = 0xD00000000000002ALL;
        v60._object = (void *)0x80000001002679E0;
        v28._object = (void *)0x80000001002679C0;
        v28._countAndFlagsBits = 0xD000000000000019;
        v29.value._countAndFlagsBits = 0x5072656972726143;
        v29.value._object = (void *)0xED00006E6F656769;
        v30._countAndFlagsBits = 0;
        v30._object = (void *)0xE000000000000000;
        v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, v29, (NSBundle)v27, v30, v60);

        v32 = type metadata accessor for AppEvents();
        v33 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
        v34 = EnvironmentObject.init()(v32, v33);
        v36 = v35;
        v55 = 0;
        State.init(wrappedValue:)(v56, &v55, &type metadata for Bool);
        v37 = v36;
        v24 = v34;
        object = (uint64_t *(*)@<X0>(uint64_t@<X8>))v31._object;
        countAndFlagsBits = v31._countAndFlagsBits;
        v22 = v26;
        v21 = v50;
        v40 = LOBYTE(v56[0]);
        v41 = v56[1];
LABEL_11:
        *a2 = v10;
        a2[1] = (uint64_t *(*)@<X0>(uint64_t@<X8>))v25;
        v51 = (uint64_t)v10;
        v52 = (uint64_t)v9;
        a2[2] = v9;
        a2[3] = 0;
        v42 = (uint64_t)v9;
        a2[4] = (uint64_t *(*)@<X0>(uint64_t@<X8>))v16;
        a2[5] = v54;
        a2[6] = (uint64_t *(*)@<X0>(uint64_t@<X8>))v21;
        a2[7] = v22;
        a2[8] = (uint64_t *(*)@<X0>(uint64_t@<X8>))sub_10009B160;
        a2[9] = (uint64_t *(*)@<X0>(uint64_t@<X8>))v53;
        a2[10] = (uint64_t *(*)@<X0>(uint64_t@<X8>))v24;
        a2[11] = (uint64_t *(*)@<X0>(uint64_t@<X8>))v37;
        a2[12] = (uint64_t *(*)@<X0>(uint64_t@<X8>))countAndFlagsBits;
        a2[13] = object;
        a2[14] = (uint64_t *(*)@<X0>(uint64_t@<X8>))v40;
        a2[15] = (uint64_t *(*)@<X0>(uint64_t@<X8>))v41;
        v43 = v21;
        v44 = (uint64_t)v10;
        v45 = v24;
        v46 = v37;
        v47 = v40;
        v48 = v41;
        sub_10009B168(v44, v25, v42, 0);
        swift_retain(v43);
        swift_retain(v53);
        swift_retain(v16);
        sub_10009B198(v45, v46, countAndFlagsBits, (uint64_t)object, v47, v48);
        sub_10009B1D4(v45, v46, countAndFlagsBits, (uint64_t)object, v47, v48);
        swift_release(v53);
        swift_release(v43);
        swift_release(v16);
        return sub_10009B210(v51, v25, v52, 0);
      }
      v24 = 0;
    }
    else
    {
      v25 = v6;
    }
    v37 = 0;
    countAndFlagsBits = 0;
    object = 0;
    v40 = 0;
    v41 = 0;
    goto LABEL_11;
  }
  result = EnvironmentObject.error()(0, *(_QWORD *)(a1 + 24), v19, v20);
  __break(1u);
  return result;
}

uint64_t *sub_1000988E4@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  __int128 v9;
  __int128 v10;

  v8 = swift_allocObject(&unk_1002EBBB8, 88, 7);
  v9 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v8 + 64) = v9;
  *(_QWORD *)(v8 + 80) = *(_QWORD *)(a3 + 64);
  v10 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v8 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(v8 + 32) = v10;
  *(_BYTE *)a4 = a1;
  *(_QWORD *)(a4 + 8) = a2;
  *(_QWORD *)(a4 + 16) = sub_10009B2D4;
  *(_QWORD *)(a4 + 24) = v8;
  swift_bridgeObjectRetain(a2);
  return sub_10009B108((uint64_t *)a3);
}

void sub_100098960(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100098990(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*a2)
  {
    v2 = *(_QWORD *)(*a2 + 160);
    swift_retain(v2);
    v3 = sub_100003DB8(&qword_10032B0E0);
    v4 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v3, v4);
    return swift_release(v2);
  }
  else
  {
    v6 = a2[1];
    v7 = type metadata accessor for AppEvents();
    v8 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    result = EnvironmentObject.error()(0, v6, v7, v8);
    __break(1u);
  }
  return result;
}

void sub_100098AC8(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100098AFC()
{
  _QWORD *v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t (*v8)();
  unint64_t *v9;
  void *v10;
  uint64_t v11;
  char v12;
  char v13;

  v2 = v0[2];
  if (v2)
  {
    if (*(_QWORD *)(v2 + 64) && sub_100067058(1u, *(_QWORD *)(v2 + 80)))
    {
      if (*v0)
      {
        v3 = *(_QWORD *)(*v0 + 56);
        v12 = v1;
        swift_retain(v3);
        v4 = &v12;
LABEL_8:
        PassthroughSubject.send(_:)(v4);
        return swift_release(v3);
      }
    }
    else if (*v0)
    {
      v3 = *(_QWORD *)(*v0 + 32);
      v13 = v1;
      swift_retain(v3);
      v4 = &v13;
      goto LABEL_8;
    }
    v6 = v0[1];
    v7 = type metadata accessor for AppEvents();
    v8 = type metadata accessor for AppEvents;
    v9 = (unint64_t *)&qword_100316A10;
    v10 = &unk_100254EA8;
  }
  else
  {
    v6 = v0[3];
    v7 = type metadata accessor for StewieModel();
    v8 = type metadata accessor for StewieModel;
    v9 = &qword_1003186E0;
    v10 = &unk_10024D2FC;
  }
  v11 = sub_1000052EC(v9, (uint64_t (*)(uint64_t))v8, (uint64_t)v10);
  result = EnvironmentObject.error()(0, v6, v7, v11);
  __break(1u);
  return result;
}

uint64_t sub_100098C24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t result;
  _OWORD v17[2];
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v3 = *(_OWORD *)(v1 + 48);
  v18 = *(_OWORD *)(v1 + 32);
  v19 = v3;
  v20 = *(_QWORD *)(v1 + 64);
  v4 = *(_OWORD *)(v1 + 16);
  v17[0] = *(_OWORD *)v1;
  v17[1] = v4;
  v5 = swift_allocObject(&unk_1002EBB40, 88, 7);
  v6 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v5 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v5 + 64) = v6;
  *(_QWORD *)(v5 + 80) = *(_QWORD *)(v1 + 64);
  v7 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v5 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v5 + 32) = v7;
  v8 = *((_QWORD *)&v18 + 1) == 0;
  sub_10009B108((uint64_t *)v17);
  v9 = sub_10002EEB8(v8, (uint64_t)sub_10009B100, v5, (uint64_t)v17);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  result = swift_release(v5);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v11;
  *(_QWORD *)(a1 + 16) = v13;
  *(_BYTE *)(a1 + 24) = v15 & 1;
  return result;
}

uint64_t sub_100098CF4@<X0>(uint64_t a1@<X8>)
{
  _OWORD *v1;
  _OWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  __int128 v24;
  _OWORD *v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t OpaqueTypeConformance2;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68[16];
  _OWORD *v69;
  char v70[16];
  _OWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;

  v2 = v1;
  v67 = a1;
  v63 = type metadata accessor for BorderedButtonStyle(0);
  v64 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63, v3);
  v62 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for ButtonBorderShape(0);
  v5 = *(_QWORD *)(v61 - 8);
  __chkstk_darwin(v61, v6);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_100319400);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100003DB8(&qword_10031CCB8);
  v13 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60, v14);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100003DB8(&qword_10031CCC0);
  __chkstk_darwin(v57, v17);
  v19 = (char *)&v56 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100003DB8(&qword_10031CCC8);
  v66 = *(_QWORD *)(v65 - 8);
  __chkstk_darwin(v65, v20);
  v59 = (char *)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ButtonRole.destructive.getter(v22);
  v23 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v12, 0, 1, v23);
  v24 = *v2;
  v79 = v2[1];
  v80 = v24;
  v78 = v2[2];
  v25 = (_OWORD *)swift_allocObject(&unk_1002EBAF0, 64, 7);
  v26 = v2[1];
  v25[1] = *v2;
  v25[2] = v26;
  v25[3] = v2[2];
  v71 = v2;
  v58 = *((_QWORD *)&v79 + 1);
  sub_100031A88(&v80);
  sub_100030F08((uint64_t)&v79);
  sub_100005C8C((uint64_t)&v78);
  v27 = sub_100003DB8(&qword_10031CCD0);
  v28 = sub_10002B614(&qword_10031CCD8, &qword_10031CCD0, (void (*)(void))sub_100038540);
  v29 = Button.init(role:action:label:)(v12, sub_10009AFC4, v25, sub_10009B010, v70, v27, v28);
  static ButtonBorderShape.roundedRectangle.getter(v29);
  KeyPath = swift_getKeyPath(&unk_100252A08);
  v31 = v57;
  v32 = (uint64_t *)&v19[*(int *)(v57 + 36)];
  v33 = sub_100003DB8(&qword_100318968);
  v34 = v61;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))((char *)v32 + *(int *)(v33 + 28), v8, v61);
  *v32 = KeyPath;
  v35 = v60;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v19, v16, v60);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v34);
  v36 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v35);
  v37 = v62;
  BorderedButtonStyle.init()(v36);
  v38 = sub_10009B020();
  v39 = sub_1000052EC((unint64_t *)&qword_100319760, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedButtonStyle);
  v40 = v59;
  v41 = v31;
  v42 = v63;
  View.buttonStyle<A>(_:)(v37, v31, v63, v38, v39);
  v43 = v42;
  (*(void (**)(char *, uint64_t))(v64 + 8))(v37, v42);
  sub_100007FF0((uint64_t)v19, &qword_10031CCC0);
  v76 = v78;
  v77 = v79;
  swift_bridgeObjectRetain(v58);
  v44 = sub_100003DB8(&qword_100316780);
  State.projectedValue.getter(&v72, v44);
  v45 = v72;
  v46 = v73;
  v47 = v74;
  v69 = v2;
  v48 = sub_100003DB8(&qword_100318730);
  v72 = v41;
  v73 = v43;
  v74 = v38;
  v75 = v39;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v72, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v50 = sub_10002B3F4();
  v51 = sub_1000084FC(&qword_100318738, &qword_100318730, (uint64_t)&protocol conformance descriptor for Button<A>);
  v55 = OpaqueTypeConformance2;
  v52 = v65;
  View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:)(&v77, v45, v46, v47, 2, sub_10009B0BC, v68, v65, &type metadata for String, v48, v55, v50, v51);
  swift_release(v46);
  swift_release(v45);
  v53 = swift_bridgeObjectRelease(*((_QWORD *)&v77 + 1));
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v66 + 8))(v40, v52, v53);
}

void sub_1000991FC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD v23[9];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)&v25 = *(_QWORD *)(a1 + 16);
  *((_QWORD *)&v25 + 1) = v3;
  v4 = sub_10002B3F4();
  v5 = swift_bridgeObjectRetain(v3);
  v6 = Text.init<A>(_:)(&v25, &type metadata for String, v4, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = static Alignment.center.getter(v6);
  sub_1001315E8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v23, 0.0, 1, 0.0, 1, v13, v14, v6, v8, v12, v10);
  sub_10002B438(v6, v8, v12);
  swift_bridgeObjectRelease(v10);
  v31 = v23[6];
  v32 = v23[7];
  v33 = v23[8];
  v27 = v23[2];
  v28 = v23[3];
  v29 = v23[4];
  v30 = v23[5];
  v25 = v23[0];
  v26 = v23[1];
  LOBYTE(v6) = static Edge.Set.vertical.getter();
  v15 = EdgeInsets.init(_all:)(6.0);
  v24 = 0;
  v16 = v32;
  *(_OWORD *)(a2 + 96) = v31;
  *(_OWORD *)(a2 + 112) = v16;
  *(_OWORD *)(a2 + 128) = v33;
  v17 = v28;
  *(_OWORD *)(a2 + 32) = v27;
  *(_OWORD *)(a2 + 48) = v17;
  v18 = v30;
  *(_OWORD *)(a2 + 64) = v29;
  *(_OWORD *)(a2 + 80) = v18;
  v19 = v26;
  *(_OWORD *)a2 = v25;
  *(_OWORD *)(a2 + 16) = v19;
  *(_BYTE *)(a2 + 144) = v6;
  *(_DWORD *)(a2 + 145) = v23[0];
  *(_DWORD *)(a2 + 148) = *(_DWORD *)((char *)v23 + 3);
  *(double *)(a2 + 152) = v15;
  *(_QWORD *)(a2 + 160) = v20;
  *(_QWORD *)(a2 + 168) = v21;
  *(_QWORD *)(a2 + 176) = v22;
  *(_BYTE *)(a2 + 184) = v24;
}

uint64_t sub_10009936C(__int128 *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __n128 v6;
  uint64_t v7;
  __int128 v8;
  _OWORD *v9;
  __int128 v10;
  unint64_t v11;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  v2 = sub_100003DB8(&qword_100319400);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1[1];
  v13 = a1[1];
  v6 = swift_bridgeObjectRetain(*((_QWORD *)&v16 + 1));
  static ButtonRole.destructive.getter(v6);
  v7 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 0, 1, v7);
  v8 = *a1;
  v14 = a1[2];
  v15 = v8;
  v9 = (_OWORD *)swift_allocObject(&unk_1002EBB18, 64, 7);
  v10 = a1[1];
  v9[1] = *a1;
  v9[2] = v10;
  v9[3] = a1[2];
  sub_100030F08((uint64_t)&v16);
  sub_100031A88(&v15);
  sub_100005C8C((uint64_t)&v14);
  v11 = sub_10002B3F4();
  return Button<>.init<A>(_:role:action:)(&v13, v5, sub_10004796C, v9, &type metadata for String, v11);
}

uint64_t sub_100099490@<X0>(uint64_t a1@<X8>)
{
  return sub_100098CF4(a1);
}

double sub_1000994C8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  double result;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;

  v2 = type metadata accessor for AppEvents();
  v3 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  v4 = EnvironmentObject.init()(v2, v3);
  v60 = v5;
  v61 = v4;
  v6 = type metadata accessor for AppPropertiesModel();
  v7 = sub_1000052EC(&qword_10031CB88, (uint64_t (*)(uint64_t))type metadata accessor for AppPropertiesModel, (uint64_t)&unk_10024D2FC);
  v8 = EnvironmentObject.init()(v6, v7);
  v58 = v9;
  v59 = v8;
  v10 = type metadata accessor for AppRuntimeStateModel();
  v11 = sub_1000052EC(&qword_100318498, (uint64_t (*)(uint64_t))type metadata accessor for AppRuntimeStateModel, (uint64_t)&unk_10024D2FC);
  v12 = EnvironmentObject.init()(v10, v11);
  v56 = v13;
  v57 = v12;
  v14 = type metadata accessor for ConnectivityModel();
  v15 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
  v16 = EnvironmentObject.init()(v14, v15);
  v54 = v17;
  v55 = v16;
  v18 = type metadata accessor for OffTheGridModel();
  v19 = sub_1000052EC(&qword_10031CB90, (uint64_t (*)(uint64_t))type metadata accessor for OffTheGridModel, (uint64_t)&unk_10024D2FC);
  v20 = EnvironmentObject.init()(v18, v19);
  v52 = v21;
  v53 = v20;
  v22 = type metadata accessor for StewieModel();
  v23 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
  v24 = EnvironmentObject.init()(v22, v23);
  v50 = v25;
  v51 = v24;
  v26 = type metadata accessor for SystemSettingsModel();
  v27 = sub_1000052EC(&qword_10031CB98, (uint64_t (*)(uint64_t))type metadata accessor for SystemSettingsModel, (uint64_t)&unk_10024D2FC);
  v28 = EnvironmentObject.init()(v26, v27);
  v48 = v29;
  v49 = v28;
  v30 = type metadata accessor for TryOutModel(0);
  v31 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
  v47 = EnvironmentObject.init()(v30, v31);
  v33 = v32;
  v34 = type metadata accessor for UIMetrics();
  v35 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v36 = EnvironmentObject.init()(v34, v35);
  v38 = v37;
  LOBYTE(v62) = 0;
  State.init(wrappedValue:)(&v63, &v62, &type metadata for Bool);
  v39 = LOBYTE(v63);
  v40 = v64;
  LOBYTE(v62) = 0;
  State.init(wrappedValue:)(&v63, &v62, &type metadata for Bool);
  v41 = LOBYTE(v63);
  v42 = v64;
  LOBYTE(v62) = 0;
  State.init(wrappedValue:)(&v63, &v62, &type metadata for Bool);
  v43 = LOBYTE(v63);
  v44 = v64;
  v62 = 0;
  State.init(wrappedValue:)(&v63, &v62, &type metadata for CGFloat);
  result = v63;
  v46 = v64;
  *(_QWORD *)a1 = v61;
  *(_QWORD *)(a1 + 8) = v60;
  *(_QWORD *)(a1 + 16) = v59;
  *(_QWORD *)(a1 + 24) = v58;
  *(_QWORD *)(a1 + 32) = v57;
  *(_QWORD *)(a1 + 40) = v56;
  *(_QWORD *)(a1 + 48) = v55;
  *(_QWORD *)(a1 + 56) = v54;
  *(_QWORD *)(a1 + 64) = v53;
  *(_QWORD *)(a1 + 72) = v52;
  *(_QWORD *)(a1 + 80) = v51;
  *(_QWORD *)(a1 + 88) = v50;
  *(_QWORD *)(a1 + 96) = v49;
  *(_QWORD *)(a1 + 104) = v48;
  *(_QWORD *)(a1 + 112) = v47;
  *(_QWORD *)(a1 + 120) = v33;
  *(_QWORD *)(a1 + 128) = v36;
  *(_QWORD *)(a1 + 136) = v38;
  *(_BYTE *)(a1 + 144) = v39;
  *(_QWORD *)(a1 + 152) = v40;
  *(_BYTE *)(a1 + 160) = v41;
  *(_QWORD *)(a1 + 168) = v42;
  *(_BYTE *)(a1 + 176) = v43;
  *(_QWORD *)(a1 + 184) = v44;
  *(double *)(a1 + 192) = result;
  *(_QWORD *)(a1 + 200) = v46;
  return result;
}

uint64_t destroy for ExplorerMainView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[6]);
  swift_release(a1[8]);
  swift_release(a1[10]);
  swift_release(a1[12]);
  swift_release(a1[14]);
  swift_release(a1[16]);
  swift_release(a1[19]);
  swift_release(a1[21]);
  swift_release(a1[23]);
  return swift_release(a1[25]);
}

uint64_t initializeWithCopy for ExplorerMainView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[3];
  v26 = a2[2];
  *(_QWORD *)(a1 + 16) = v26;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2[5];
  v25 = a2[4];
  *(_QWORD *)(a1 + 32) = v25;
  *(_QWORD *)(a1 + 40) = v6;
  v7 = a2[7];
  v24 = a2[6];
  *(_QWORD *)(a1 + 48) = v24;
  *(_QWORD *)(a1 + 56) = v7;
  v9 = a2[8];
  v8 = a2[9];
  *(_QWORD *)(a1 + 64) = v9;
  *(_QWORD *)(a1 + 72) = v8;
  v11 = a2[10];
  v10 = a2[11];
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v10;
  v13 = a2[12];
  v12 = a2[13];
  *(_QWORD *)(a1 + 96) = v13;
  *(_QWORD *)(a1 + 104) = v12;
  v15 = a2[14];
  v14 = a2[15];
  *(_QWORD *)(a1 + 112) = v15;
  *(_QWORD *)(a1 + 120) = v14;
  v17 = a2[16];
  v16 = a2[17];
  *(_QWORD *)(a1 + 128) = v17;
  *(_QWORD *)(a1 + 136) = v16;
  *(_BYTE *)(a1 + 144) = *((_BYTE *)a2 + 144);
  v18 = a2[19];
  *(_QWORD *)(a1 + 152) = v18;
  *(_BYTE *)(a1 + 160) = *((_BYTE *)a2 + 160);
  v19 = a2[21];
  *(_QWORD *)(a1 + 168) = v19;
  *(_BYTE *)(a1 + 176) = *((_BYTE *)a2 + 176);
  v21 = a2[23];
  v20 = a2[24];
  *(_QWORD *)(a1 + 184) = v21;
  *(_QWORD *)(a1 + 192) = v20;
  v22 = a2[25];
  *(_QWORD *)(a1 + 200) = v22;
  swift_retain(v3);
  swift_retain(v26);
  swift_retain(v25);
  swift_retain(v24);
  swift_retain(v9);
  swift_retain(v11);
  swift_retain(v13);
  swift_retain(v15);
  swift_retain(v17);
  swift_retain(v18);
  swift_retain(v19);
  swift_retain(v21);
  swift_retain(v22);
  return a1;
}

uint64_t *assignWithCopy for ExplorerMainView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a1[4];
  v9 = a2[4];
  a1[4] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[5] = a2[5];
  v10 = a1[6];
  v11 = a2[6];
  a1[6] = v11;
  swift_retain(v11);
  swift_release(v10);
  a1[7] = a2[7];
  v12 = a1[8];
  v13 = a2[8];
  a1[8] = v13;
  swift_retain(v13);
  swift_release(v12);
  a1[9] = a2[9];
  v14 = a1[10];
  v15 = a2[10];
  a1[10] = v15;
  swift_retain(v15);
  swift_release(v14);
  a1[11] = a2[11];
  v16 = a1[12];
  v17 = a2[12];
  a1[12] = v17;
  swift_retain(v17);
  swift_release(v16);
  a1[13] = a2[13];
  v18 = a1[14];
  v19 = a2[14];
  a1[14] = v19;
  swift_retain(v19);
  swift_release(v18);
  a1[15] = a2[15];
  v20 = a1[16];
  v21 = a2[16];
  a1[16] = v21;
  swift_retain(v21);
  swift_release(v20);
  a1[17] = a2[17];
  *((_BYTE *)a1 + 144) = *((_BYTE *)a2 + 144);
  v22 = a1[19];
  v23 = a2[19];
  a1[19] = v23;
  swift_retain(v23);
  swift_release(v22);
  *((_BYTE *)a1 + 160) = *((_BYTE *)a2 + 160);
  v24 = a1[21];
  v25 = a2[21];
  a1[21] = v25;
  swift_retain(v25);
  swift_release(v24);
  *((_BYTE *)a1 + 176) = *((_BYTE *)a2 + 176);
  v26 = a1[23];
  v27 = a2[23];
  a1[23] = v27;
  swift_retain(v27);
  swift_release(v26);
  a1[24] = a2[24];
  v28 = a1[25];
  v29 = a2[25];
  a1[25] = v29;
  swift_retain(v29);
  swift_release(v28);
  return a1;
}

__n128 initializeWithTake for ExplorerMainView(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  v5 = *(_OWORD *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  result = *(__n128 *)(a2 + 144);
  v9 = *(_OWORD *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t *assignWithTake for ExplorerMainView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = a1[4];
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_release(v7);
  v9 = a1[6];
  v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_release(v9);
  v11 = a1[8];
  v12 = a2[8];
  a1[7] = a2[7];
  a1[8] = v12;
  swift_release(v11);
  v13 = a1[10];
  v14 = a2[10];
  a1[9] = a2[9];
  a1[10] = v14;
  swift_release(v13);
  v15 = a1[12];
  v16 = a2[12];
  a1[11] = a2[11];
  a1[12] = v16;
  swift_release(v15);
  v17 = a1[14];
  v18 = a2[14];
  a1[13] = a2[13];
  a1[14] = v18;
  swift_release(v17);
  v19 = a1[16];
  v20 = a2[16];
  a1[15] = a2[15];
  a1[16] = v20;
  swift_release(v19);
  a1[17] = a2[17];
  *((_BYTE *)a1 + 144) = *((_BYTE *)a2 + 144);
  v21 = a1[19];
  a1[19] = a2[19];
  swift_release(v21);
  *((_BYTE *)a1 + 160) = *((_BYTE *)a2 + 160);
  v22 = a1[21];
  a1[21] = a2[21];
  swift_release(v22);
  *((_BYTE *)a1 + 176) = *((_BYTE *)a2 + 176);
  v23 = a1[23];
  a1[23] = a2[23];
  swift_release(v23);
  a1[24] = a2[24];
  v24 = a1[25];
  a1[25] = a2[25];
  swift_release(v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExplorerMainView(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 208))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExplorerMainView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 208) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 208) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExplorerMainView()
{
  return &type metadata for ExplorerMainView;
}

uint64_t sub_100099DC0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029874C, 1);
}

uint64_t sub_100099DD0()
{
  return sub_10009A7C0(224);
}

uint64_t sub_100099DD8()
{
  uint64_t v0;

  return sub_100097750((_QWORD *)(v0 + 16));
}

uint64_t *sub_100099DE0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[6];
  v6 = a1[8];
  v7 = a1[10];
  v8 = a1[12];
  v9 = a1[14];
  v10 = a1[16];
  v12 = a1[19];
  v13 = a1[21];
  v14 = a1[23];
  swift_retain(a1[25]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v12);
  swift_retain(v13);
  swift_retain(v14);
  return a1;
}

unint64_t sub_100099EC8()
{
  unint64_t result;

  result = qword_10031CBD0;
  if (!qword_10031CBD0)
  {
    result = swift_getWitnessTable(&unk_100255E64, &type metadata for ExplorerTryOutView);
    atomic_store(result, (unint64_t *)&qword_10031CBD0);
  }
  return result;
}

uint64_t sub_100099F0C()
{
  return sub_10009A7C0(224);
}

uint64_t sub_100099F14()
{
  uint64_t v0;

  return sub_100097B70(v0 + 16);
}

unint64_t sub_100099F1C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031CBE0;
  if (!qword_10031CBE0)
  {
    v1 = sub_100007FAC(&qword_10031CBD8);
    sub_100099F80();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10031CBE0);
  }
  return result;
}

unint64_t sub_100099F80()
{
  unint64_t result;

  result = qword_10031CBE8;
  if (!qword_10031CBE8)
  {
    result = swift_getWitnessTable(&unk_1002600F4, &type metadata for TryOutModel.State);
    atomic_store(result, (unint64_t *)&qword_10031CBE8);
  }
  return result;
}

uint64_t sub_100099FC4()
{
  return sub_10009A7C0(224);
}

void sub_100099FCC(uint64_t a1, uint64_t a2)
{
  sub_100097C18(a1, a2);
}

unint64_t sub_100099FD4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031CBF0;
  if (!qword_10031CBF0)
  {
    v1 = sub_100007FAC(&qword_100318260);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10031CBF0);
  }
  return result;
}

uint64_t sub_10009A030()
{
  return sub_10009A7C0(224);
}

uint64_t sub_10009A038()
{
  uint64_t v0;

  return sub_100097CA8(v0 + 16);
}

uint64_t sub_10009A040(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10009A050(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10009A058(uint64_t result)
{
  *(_BYTE *)(result + 177) = 1;
  return result;
}

unint64_t sub_10009A064()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031CC20;
  if (!qword_10031CC20)
  {
    v1 = sub_100007FAC(&qword_10031CC10);
    sub_10009A0D0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031CC20);
  }
  return result;
}

unint64_t sub_10009A0D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031CC28;
  if (!qword_10031CC28)
  {
    v1 = sub_100007FAC(&qword_10031CC30);
    sub_10009A154();
    sub_1000084FC(&qword_1003187A0, &qword_1003187A8, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031CC28);
  }
  return result;
}

unint64_t sub_10009A154()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031CC38;
  if (!qword_10031CC38)
  {
    v1 = sub_100007FAC(&qword_10031CC40);
    sub_1000084FC(&qword_10031CC48, &qword_10031CC50, (uint64_t)&unk_10025B3A0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031CC38);
  }
  return result;
}

unint64_t sub_10009A1D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031CC60;
  if (!qword_10031CC60)
  {
    v1 = sub_100007FAC(&qword_10031CC68);
    sub_1000084FC(&qword_10031CC70, &qword_10031CC78, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031CC60);
  }
  return result;
}

unint64_t sub_10009A25C()
{
  unint64_t result;

  result = qword_10031CC90;
  if (!qword_10031CC90)
  {
    result = swift_getWitnessTable(&unk_10025F954, &type metadata for TryOutConnectionAlertButtonsView);
    atomic_store(result, (unint64_t *)&qword_10031CC90);
  }
  return result;
}

uint64_t sub_10009A2A0()
{
  uint64_t v0;

  return sub_100097364(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10009A2A8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10009760C(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_10009A2B0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  if (a5)
  {
    v6 = result;
    swift_retain(a4);
    swift_retain(a5);
    return swift_retain(v6);
  }
  return result;
}

void sub_10009A2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,char a24)
{
  if ((a24 & 1) != 0)
  {
    swift_retain(a11);
    swift_retain(a6);
    swift_bridgeObjectRetain(a9);
  }
  else
  {
    sub_10009A36C(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18 & 1);
  }
}

uint64_t sub_10009A36C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if ((a18 & 1) != 0)
  {
    swift_retain(result);
    swift_retain(a5);
    swift_retain(a7);
    swift_bridgeObjectRetain(a9);
    return swift_retain(a17);
  }
  return result;
}

uint64_t sub_10009A3D4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_WORD *)(a1 + 176));
  return a1;
}

uint64_t sub_10009A448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,char a24)
{
  if ((a24 & 1) == 0)
    return sub_10009A4C8(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18 & 1);
  swift_bridgeObjectRelease(a9);
  swift_release(a6);
  return swift_release(a11);
}

uint64_t sub_10009A4C8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  uint64_t v19;

  if ((a18 & 1) != 0)
  {
    v19 = result;
    swift_release(a5);
    swift_release(a7);
    swift_bridgeObjectRelease(a9);
    swift_release(a17);
    return swift_release(v19);
  }
  return result;
}

uint64_t sub_10009A534(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;

  if (a5)
  {
    v6 = result;
    swift_release(a5);
    swift_release(v6);
    return swift_release(a4);
  }
  return result;
}

uint64_t sub_10009A570()
{
  return sub_10009A7C0(232);
}

uint64_t sub_10009A578(double a1)
{
  uint64_t v1;

  return sub_100096D6C(v1 + 16, a1, *(double *)(v1 + 224));
}

uint64_t sub_10009A584()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_release(v0[10]);
  swift_release(v0[12]);
  swift_release(v0[14]);
  swift_release(v0[16]);
  swift_release(v0[18]);
  swift_release(v0[20]);
  swift_release(v0[23]);
  swift_release(v0[25]);
  swift_release(v0[27]);
  swift_release(v0[29]);
  return swift_deallocObject(v0, 240, 7);
}

uint64_t sub_10009A610@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;

  return sub_100096FBC(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + 32, a2);
}

uint64_t sub_10009A61C(uint64_t result)
{
  *(_BYTE *)(result + 136) = 1;
  return result;
}

_QWORD *sub_10009A628(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[8];
  v5 = a1[16];
  swift_retain(*a1);
  swift_retain(v2);
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t sub_10009A690(uint64_t result)
{
  *(_BYTE *)(result + 177) = 0;
  return result;
}

uint64_t *sub_10009A698(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[4];
  v4 = a1[6];
  v5 = a1[8];
  swift_release(a1[16]);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  return a1;
}

uint64_t sub_10009A700(uint64_t result)
{
  *(_BYTE *)(result + 136) = 0;
  return result;
}

uint64_t sub_10009A708()
{
  return sub_10009A7C0(224);
}

uint64_t sub_10009A710()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;

  v4 = *(_OWORD *)(v0 + 176);
  v3 = 1;
  v1 = sub_100003DB8(&qword_100316780);
  return State.wrappedValue.setter(&v3, v1);
}

uint64_t sub_10009A75C()
{
  return sub_10009A7C0(240);
}

uint64_t sub_10009A764()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  double v4;
  __int128 v5;

  v1 = -*(double *)(v0 + 224) / *(double *)(v0 + 232);
  v5 = *(_OWORD *)(v0 + 208);
  v4 = v1;
  v2 = sub_100003DB8(&qword_10031CCA8);
  return State.wrappedValue.setter(&v4, v2);
}

uint64_t sub_10009A7B8()
{
  return sub_10009A7C0(224);
}

uint64_t sub_10009A7C0(uint64_t a1)
{
  _QWORD *v1;

  swift_release(v1[2]);
  swift_release(v1[4]);
  swift_release(v1[6]);
  swift_release(v1[8]);
  swift_release(v1[10]);
  swift_release(v1[12]);
  swift_release(v1[14]);
  swift_release(v1[16]);
  swift_release(v1[18]);
  swift_release(v1[21]);
  swift_release(v1[23]);
  swift_release(v1[25]);
  swift_release(v1[27]);
  return swift_deallocObject(v1, a1, 7);
}

void sub_10009A850()
{
  uint64_t v0;

  sub_1000974F8(v0 + 16);
}

uint64_t destroy for _ExplorerEndSatelliteConnectionButtonView(_QWORD *a1)
{
  swift_release(*a1);
  swift_bridgeObjectRelease(a1[3]);
  return swift_release(a1[5]);
}

uint64_t initializeWithCopy for _ExplorerEndSatelliteConnectionButtonView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  v4 = a2[3];
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  v5 = a2[5];
  *(_QWORD *)(a1 + 40) = v5;
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for _ExplorerEndSatelliteConnectionButtonView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  v8 = a1[5];
  v9 = a2[5];
  a1[5] = v9;
  swift_retain(v9);
  swift_release(v8);
  return a1;
}

uint64_t *assignWithTake for _ExplorerEndSatelliteConnectionButtonView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  v5 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v5);
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  v6 = a1[5];
  a1[5] = a2[5];
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ExplorerEndSatelliteConnectionButtonView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ExplorerEndSatelliteConnectionButtonView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ExplorerEndSatelliteConnectionButtonView()
{
  return &type metadata for _ExplorerEndSatelliteConnectionButtonView;
}

uint64_t destroy for _ExplorerMainViewContentList(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_release(a1[8]);
}

uint64_t initializeWithCopy for _ExplorerMainViewContentList(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  v8 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v7;
  v9 = a2[8];
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_QWORD *)(a1 + 64) = v9;
  swift_retain(v3);
  swift_retain(v6);
  swift_bridgeObjectRetain(v8);
  swift_retain(v9);
  return a1;
}

uint64_t *assignWithCopy for _ExplorerMainViewContentList(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  a1[6] = a2[6];
  v11 = a2[7];
  v10 = a2[8];
  v12 = a1[8];
  a1[7] = v11;
  a1[8] = v10;
  swift_retain(v10);
  swift_release(v12);
  return a1;
}

uint64_t *assignWithTake for _ExplorerMainViewContentList(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  a1[3] = a2[3];
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  v7 = a1[5];
  a1[5] = a2[5];
  swift_bridgeObjectRelease(v7);
  a1[6] = a2[6];
  v8 = a1[8];
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
  swift_release(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ExplorerMainViewContentList(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ExplorerMainViewContentList(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ExplorerMainViewContentList()
{
  return &type metadata for _ExplorerMainViewContentList;
}

uint64_t destroy for _ExplorerFullScreenBackgroundView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[3]);
  return swift_release(a1[4]);
}

uint64_t initializeWithCopy for _ExplorerFullScreenBackgroundView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v5 = a2[3];
  v6 = a2[4];
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = a2[5];
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t *assignWithCopy for _ExplorerFullScreenBackgroundView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v6 = a1[3];
  v7 = a2[3];
  a1[3] = v7;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_retain(v8);
  swift_release(v9);
  a1[5] = a2[5];
  return a1;
}

uint64_t *assignWithTake for _ExplorerFullScreenBackgroundView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  swift_release(a1[3]);
  v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  swift_release(v5);
  a1[5] = a2[5];
  return a1;
}

ValueMetadata *type metadata accessor for _ExplorerFullScreenBackgroundView()
{
  return &type metadata for _ExplorerFullScreenBackgroundView;
}

uint64_t sub_10009AE80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  ValueMetadata *v10;
  uint64_t v11;
  unint64_t v12;

  v0 = sub_100007FAC(&qword_10031CBB0);
  v1 = sub_100007FAC(&qword_100318260);
  v2 = sub_100007FAC(&qword_10031CBA8);
  v3 = sub_100007FAC(&qword_10031CBD8);
  v9 = sub_100007FAC(&qword_10031CBA0);
  v10 = &type metadata for ExplorerTryOutView;
  v11 = sub_1000084FC(&qword_10031CBC8, &qword_10031CBA0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v12 = sub_100099EC8();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.sheet<A>(isPresented:onDismiss:content:)>>, 1);
  v5 = sub_100099F1C();
  v9 = v2;
  v10 = (ValueMetadata *)v3;
  v11 = OpaqueTypeConformance2;
  v12 = v5;
  v6 = swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v7 = sub_100099FD4();
  v9 = v0;
  v10 = (ValueMetadata *)v1;
  v11 = v6;
  v12 = v7;
  return swift_getOpaqueTypeConformance2(&v9, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t sub_10009AF90(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002987C4, 1);
}

uint64_t sub_10009AFA0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029879C, 1);
}

uint64_t sub_10009AFB0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100298774, 1);
}

uint64_t sub_10009AFC4()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;

  v4 = *(_OWORD *)(v0 + 48);
  v3 = 1;
  v1 = sub_100003DB8(&qword_100316780);
  return State.wrappedValue.setter(&v3, v1);
}

void sub_10009B010(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1000991FC(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_10009B020()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031CCE0;
  if (!qword_10031CCE0)
  {
    v1 = sub_100007FAC(&qword_10031CCC0);
    sub_1000084FC(&qword_10031CCE8, &qword_10031CCB8, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_1000084FC(&qword_100318978, &qword_100318968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031CCE0);
  }
  return result;
}

uint64_t sub_10009B0BC()
{
  uint64_t v0;

  return sub_10009936C(*(__int128 **)(v0 + 16));
}

uint64_t sub_10009B0C8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_10009B100@<X0>(uint64_t *(**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v1;

  return sub_100098510(v1 + 16, a1);
}

uint64_t *sub_10009B108(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[8];
  swift_bridgeObjectRetain(a1[5]);
  swift_retain(v4);
  swift_retain(v2);
  swift_retain(v3);
  return a1;
}

void sub_10009B160(char a1)
{
  sub_100098AC8(a1);
}

uint64_t sub_10009B168(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_retain(a2);
    return swift_retain(a4);
  }
  return result;
}

uint64_t sub_10009B198(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  if (a4)
  {
    v7 = result;
    swift_retain(a6);
    swift_retain(v7);
    return swift_bridgeObjectRetain(a4);
  }
  return result;
}

uint64_t sub_10009B1D4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;

  if (a4)
  {
    v7 = result;
    swift_bridgeObjectRelease(a4);
    swift_release(v7);
    return swift_release(a6);
  }
  return result;
}

uint64_t sub_10009B210(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (result)
  {
    swift_release(a2);
    return swift_release(a4);
  }
  return result;
}

uint64_t sub_10009B240()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[9]);
  swift_release(v0[12]);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t *sub_10009B284@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000988E4(*(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + 32, a1);
}

uint64_t sub_10009B298()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[7]);
  swift_release(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

void sub_10009B2D4(char a1)
{
  sub_100098960(a1);
}

uint64_t sub_10009B2DC(uint64_t result)
{
  *(_BYTE *)(result + 169) = 1;
  return result;
}

unint64_t sub_10009B2E8()
{
  unint64_t result;

  result = qword_10031CD18;
  if (!qword_10031CD18)
  {
    result = swift_getWitnessTable(&unk_10025D7E8, &type metadata for ExplorerConnectionAssistantView);
    atomic_store(result, (unint64_t *)&qword_10031CD18);
  }
  return result;
}

uint64_t sub_10009B32C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,char a23)
{
  if ((a23 & 1) == 0)
  {
    a4 = a13;
    a6 = a11;
    swift_retain(a15);
    swift_retain(a1);
    swift_retain(a3);
    swift_retain(a5);
    swift_retain(a7);
    swift_retain(a9);
  }
  swift_retain(a6);
  return swift_retain(a4);
}

uint64_t sub_10009B3C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4 != 1)
    return swift_retain(a4);
  return result;
}

uint64_t sub_10009B3D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4 != 1)
    return swift_release(a4);
  return result;
}

uint64_t sub_10009B3EC(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_WORD *)(a1 + 168));
  return a1;
}

uint64_t sub_10009B460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,char a23)
{
  if ((a23 & 1) == 0)
  {
    a6 = a15;
    a4 = a13;
    swift_release(a1);
    swift_release(a3);
    swift_release(a5);
    swift_release(a7);
    swift_release(a9);
    swift_release(a11);
  }
  swift_release(a4);
  return swift_release(a6);
}

uint64_t sub_10009B4F4(uint64_t result)
{
  *(_BYTE *)(result + 169) = 0;
  return result;
}

uint64_t sub_10009B4FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v0 = sub_100007FAC(&qword_10031CCC8);
  v1 = sub_100007FAC(&qword_100318730);
  v6 = sub_100007FAC(&qword_10031CCC0);
  v7 = (void *)type metadata accessor for BorderedButtonStyle(255);
  v8 = sub_10009B020();
  v9 = sub_1000052EC((unint64_t *)&qword_100319760, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedButtonStyle);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v3 = sub_10002B3F4();
  v4 = sub_1000084FC(&qword_100318738, &qword_100318730, (uint64_t)&protocol conformance descriptor for Button<A>);
  v6 = v0;
  v7 = &type metadata for String;
  v8 = v1;
  v9 = OpaqueTypeConformance2;
  v10 = v3;
  v11 = v4;
  return swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.confirmationDialog<A, B>(_:isPresented:titleVisibility:actions:)>>, 1);
}

unint64_t sub_10009B608()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031CD38;
  if (!qword_10031CD38)
  {
    v1 = sub_100007FAC(&qword_10031CD40);
    sub_1000084FC(&qword_100318548, &qword_100318538, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    sub_1000084FC(qword_100318550, &qword_100318540, (uint64_t)&unk_100257790);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031CD38);
  }
  return result;
}

uint64_t sub_10009B6A4()
{
  return sub_1000084FC(&qword_10031CD48, (uint64_t *)&unk_10031CD50, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

uint64_t sub_10009B6D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  _QWORD *v18;
  unint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v25 = *(_QWORD *)(v0 - 8);
  v26 = v0;
  __chkstk_darwin(v0, v1);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v13 = objc_msgSend(v12, "bundleIdentifier");

  if (v13)
  {
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

  }
  else
  {
    v16 = 0x8000000100260990;
    v14 = 0xD000000000000012;
  }
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v27 = (_QWORD *)v14;
  v28 = v16;
  swift_bridgeObjectRetain(v16);
  v17._countAndFlagsBits = 0x456369747061482ELL;
  v17._object = (void *)0xED0000656E69676ELL;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v16);
  v18 = v27;
  v19 = v28;
  static DispatchQoS.unspecified.getter(v20);
  v27 = _swiftEmptyArrayStorage;
  v21 = sub_1000052EC((unint64_t *)&unk_1003178B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = sub_100003DB8((uint64_t *)&unk_100324AE0);
  v23 = sub_10000F138((unint64_t *)&unk_1003178C0, (uint64_t *)&unk_100324AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v22, v23, v4, v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v26);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v18, v19, v11, v7, v3, 0);
  qword_10031CD60 = result;
  return result;
}

uint64_t sub_10009B948()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  *(_QWORD *)(v0 + 16) = 0;
  if (qword_100315870 != -1)
    swift_once(&qword_100315870, sub_1000D975C);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FE08);
  v4 = swift_retain_n(v0, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v1;
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for HapticAgent();
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v9, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] init", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  return v1;
}

uint64_t sub_10009BB08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (qword_100315870 != -1)
    swift_once(&qword_100315870, sub_1000D975C);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FE08);
  v4 = swift_retain_n(v0, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v1;
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for HapticAgent();
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v9, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] deinit", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  swift_release(*(_QWORD *)(v1 + 16));
  return v1;
}

uint64_t sub_10009BCCC()
{
  uint64_t v0;

  sub_10009BB08();
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for HapticAgent()
{
  return objc_opt_self(_TtC8SOSBuddy11HapticAgent);
}

uint64_t sub_10009BD0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __n128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD aBlock[5];
  uint64_t v35;

  v0 = type metadata accessor for DispatchWorkItemFlags(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (uint64_t *)((char *)&v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v13 = static OS_dispatch_queue.main.getter(v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  v15 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  if ((v15 & 1) != 0)
  {
    if (qword_100315870 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315870, sub_1000D975C);
LABEL_3:
  v31 = v5;
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10000D744(v16, (uint64_t)qword_10033FE08);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Starting HapticAgent", v20, 2u);
    swift_slowDealloc(v20, -1, -1);
  }
  v21 = v1;

  if (qword_1003157D0 != -1)
    swift_once(&qword_1003157D0, sub_10009B6D8);
  v22 = swift_allocObject(&unk_1002EBD50, 24, 7);
  swift_weakInit(v22 + 16);
  aBlock[4] = sub_10009F538;
  v35 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002EBED0;
  v23 = _Block_copy(aBlock);
  v24 = swift_retain(v22);
  static DispatchQoS.unspecified.getter(v24);
  v33 = _swiftEmptyArrayStorage;
  v25 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v26 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v27 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v26, v27, v0, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v8, v4, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v0);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v8, v31);
  v28 = v35;
  swift_release(v22);
  swift_release(v28);
  return 1;
}

void sub_10009C084(uint64_t a1)
{
  id v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t Strong;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  NSObject *oslog;
  _BYTE v12[24];

  v2 = objc_msgSend((id)objc_opt_self(CHHapticEngine), "capabilitiesForHardware");
  v3 = objc_msgSend(v2, "supportsHaptics");
  swift_unknownObjectRelease(v2);
  if (v3)
  {
    v4 = a1 + 16;
    swift_beginAccess(v4, v12, 0, 0);
    Strong = swift_weakLoadStrong(v4);
    if (Strong)
    {
      v6 = Strong;
      sub_10009CBAC();
      swift_release(v6);
    }
  }
  else
  {
    if (qword_100315870 != -1)
      swift_once(&qword_100315870, sub_1000D975C);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10000D744(v7, (uint64_t)qword_10033FE08);
    oslog = Logger.logObject.getter(v8);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v9, "Haptic capabilities are not supported", v10, 2u);
      swift_slowDealloc(v10, -1, -1);
    }

  }
}

uint64_t sub_10009C1E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  __n128 v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD aBlock[5];
  uint64_t v38;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v35 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (uint64_t *)((char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v15 = static OS_dispatch_queue.main.getter(v16);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  v17 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v17 & 1) != 0)
  {
    if (qword_100315870 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315870, sub_1000D975C);
LABEL_3:
  v34 = v7;
  v18 = type metadata accessor for Logger(0);
  v19 = sub_10000D744(v18, (uint64_t)qword_10033FE08);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Stopping HapticAgent", v22, 2u);
    swift_slowDealloc(v22, -1, -1);
  }
  v23 = v3;

  v24 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  if (qword_1003157D0 != -1)
    swift_once(&qword_1003157D0, sub_10009B6D8);
  v25 = swift_allocObject(&unk_1002EBE90, 32, 7);
  *(_QWORD *)(v25 + 16) = v1;
  *(_QWORD *)(v25 + 24) = v24;
  aBlock[4] = sub_10009F530;
  v38 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002EBEA8;
  v26 = _Block_copy(aBlock);
  swift_retain_n(v24, v27);
  v28 = swift_retain(v1);
  static DispatchQoS.unspecified.getter(v28);
  v36 = _swiftEmptyArrayStorage;
  v29 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v30 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v31 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v30, v31, v2, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v26);
  _Block_release(v26);
  swift_release_n(v24);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, v2);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v10, v34);
  return swift_release(v38);
}

void sub_10009C560(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (qword_100315870 != -1)
    swift_once(&qword_100315870, sub_1000D975C);
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FE08);
  swift_retain_n(a2, v5);
  v7 = swift_retain_n(a1, v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v22 = a1;
    v23 = v11;
    *(_DWORD *)v10 = 136446466;
    v12 = type metadata accessor for HapticAgent();
    v13 = swift_retain(a1);
    v14 = String.init<A>(describing:)(&v22, v12, v13);
    v16 = v15;
    v22 = sub_100172BEC(v14, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v10 + 4, v10 + 12);
    swift_release_n(a1);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v10 + 12) = 2082;
    v22 = a2;
    swift_retain(a2);
    v17 = sub_100003DB8(&qword_10031CF78);
    v19 = String.init<A>(describing:)(&v22, v17, v18);
    v21 = v20;
    v22 = sub_100172BEC(v19, v20, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v10 + 14, v10 + 22);
    swift_release_n(a2);
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s] hapticEngineState instance [%{public}s] will be destroyed upon capturing closure exit", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(a2);
    swift_release_n(a1);
  }
}

uint64_t sub_10009C798(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t aBlock[5];
  uint64_t v42;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v38 = *(_QWORD *)(v9 - 8);
  v39 = v9;
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315870 != -1)
    swift_once(&qword_100315870, sub_1000D975C);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10000D744(v13, (uint64_t)qword_10033FE08);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  v17 = os_log_type_enabled(v15, v16);
  v37 = a1;
  if (v17)
  {
    v35 = v2;
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v36 = v5;
    v20 = v19;
    aBlock[0] = v19;
    v21.n128_u64[0] = 136446210;
    *(_DWORD *)v18 = 136446210;
    LOBYTE(v40) = a1;
    v22 = String.init<A>(describing:)(&v40, &type metadata for HapticAgent.HapticType, v21);
    v24 = v23;
    v40 = (_QWORD *)sub_100172BEC(v22, v23, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, aBlock, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "play haptic: %{public}s", v18, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    v25 = v20;
    v5 = v36;
    swift_slowDealloc(v25, -1, -1);
    swift_slowDealloc(v18, -1, -1);
  }

  if (qword_1003157D0 != -1)
    swift_once(&qword_1003157D0, sub_10009B6D8);
  v26 = swift_allocObject(&unk_1002EBD50, 24, 7);
  swift_weakInit(v26 + 16);
  v27 = swift_allocObject(&unk_1002EBE40, 25, 7);
  *(_QWORD *)(v27 + 16) = v26;
  *(_BYTE *)(v27 + 24) = v37;
  aBlock[4] = (uint64_t)sub_10009F4F8;
  v42 = v27;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1001BAACC;
  aBlock[3] = (uint64_t)&unk_1002EBE58;
  v28 = _Block_copy(aBlock);
  v29 = swift_retain(v26);
  static DispatchQoS.unspecified.getter(v29);
  v40 = _swiftEmptyArrayStorage;
  v30 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v31 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v32 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v31, v32, v4, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v12, v8, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v39);
  v33 = v42;
  swift_release(v26);
  return swift_release(v33);
}

uint64_t sub_10009CB30(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 16);
    swift_retain(v6);
    result = swift_release(v5);
    if (v6)
    {
      sub_10009E484(a2);
      return swift_release(v6);
    }
  }
  return result;
}

void sub_10009CBAC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  id v16;
  void **v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void **v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  void **v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void **aBlock;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003157D0 != -1)
    swift_once(&qword_1003157D0, sub_10009B6D8);
  v8 = qword_10031CD60;
  *v7 = qword_10031CD60;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = (id)v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) != 0)
  {
    if (qword_100315870 == -1)
      goto LABEL_5;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315870, sub_1000D975C);
LABEL_5:
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10000D744(v10, (uint64_t)qword_10033FE08);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Starting CHHapticEngine", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v15 = objc_allocWithZone((Class)CHHapticEngine);
  aBlock = 0;
  v16 = objc_msgSend(v15, "initAndReturnError:", &aBlock);
  v17 = aBlock;
  if (v16)
  {
    v18 = v16;
    v19 = swift_allocObject(&unk_1002EBD50, 24, 7);
    swift_weakInit(v19 + 16);
    v20 = swift_allocObject(&unk_1002EBD78, 32, 7);
    *(_QWORD *)(v20 + 16) = v19;
    *(_QWORD *)(v20 + 24) = v2;
    v48 = sub_10009F390;
    v49 = v20;
    aBlock = _NSConcreteStackBlock;
    v45 = 1107296256;
    v46 = sub_1001BAACC;
    v47 = &unk_1002EBD90;
    v21 = _Block_copy(&aBlock);
    v22 = v49;
    v23 = v17;
    swift_release(v22);
    objc_msgSend(v18, "setResetHandler:", v21);
    _Block_release(v21);
    v48 = sub_10009D388;
    v49 = 0;
    aBlock = _NSConcreteStackBlock;
    v45 = 1107296256;
    v46 = sub_10000EA38;
    v47 = &unk_1002EBDB8;
    v24 = _Block_copy(&aBlock);
    objc_msgSend(v18, "setStoppedHandler:", v24);
    _Block_release(v24);
    objc_msgSend(v18, "setAutoShutdownEnabled:", 1);
    v25 = type metadata accessor for HapticEngineState();
    swift_allocObject(v25, 32, 7);
    v26 = sub_10009F398(v18);

    v27 = v1[2];
    v1[2] = v26;
    swift_release(v27);
  }
  else
  {
    v28 = aBlock;
    v29 = _convertNSErrorToError(_:)(v17);

    swift_willThrow(v30);
    swift_errorRetain(v29);
    v31 = swift_errorRetain(v29);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = (void **)swift_slowAlloc(32, -1);
      aBlock = v35;
      *(_DWORD *)v34 = 136446210;
      v42 = v29;
      swift_errorRetain(v29);
      v36 = sub_100003DB8((uint64_t *)&unk_100324AA0);
      v38 = String.init<A>(describing:)(&v42, v36, v37);
      v40 = v39;
      v42 = sub_100172BEC(v38, v39, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease(v40);
      swift_errorRelease(v29);
      swift_errorRelease(v29);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failed to create CHHapticEngine: %{public}s", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      swift_errorRelease(v29);
    }
    else
    {
      swift_errorRelease(v29);
      swift_errorRelease(v29);
      swift_errorRelease(v29);

    }
  }
}

uint64_t sub_10009D070(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t result;
  uint64_t v19;
  uint64_t Strong;
  uint64_t v21;
  void *v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  _QWORD aBlock[5];
  uint64_t v32;
  _BYTE v33[8];
  _BYTE v34[24];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1 + 16;
  if (qword_100315870 != -1)
    swift_once(&qword_100315870, sub_1000D975C);
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10000D744(v13, (uint64_t)qword_10033FE08);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Reset handler invoked", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  swift_beginAccess(v12, v34, 0, 0);
  result = swift_weakLoadStrong(v12);
  if (result)
  {
    v19 = result;
    v27 = v8;
    v28 = v7;
    v29 = v3;
    swift_weakInit(v33);
    if (qword_1003157D0 != -1)
      swift_once(&qword_1003157D0, sub_10009B6D8);
    Strong = swift_weakLoadStrong(v33);
    v21 = swift_allocObject(&unk_1002EBDF0, 24, 7);
    *(_QWORD *)(v21 + 16) = Strong;
    aBlock[4] = sub_10009F4B0;
    v32 = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001BAACC;
    aBlock[3] = &unk_1002EBE08;
    v22 = _Block_copy(aBlock);
    v23 = swift_retain(Strong);
    static DispatchQoS.unspecified.getter(v23);
    v30 = _swiftEmptyArrayStorage;
    v24 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v26 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v30, v25, v26, v2, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v6, v22);
    _Block_release(v22);
    swift_release(Strong);
    swift_release(v19);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v6, v2);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v11, v28);
    swift_weakDestroy(v33);
    return swift_release(v32);
  }
  return result;
}

void sub_10009D388(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  NSObject *oslog;
  uint64_t v13;
  uint64_t v14;

  if (qword_100315870 != -1)
    swift_once(&qword_100315870, sub_1000D975C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FE08);
  oslog = Logger.logObject.getter(v3);
  v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v13 = a1;
    v14 = v6;
    *(_DWORD *)v5 = 136446210;
    type metadata accessor for StoppedReason(0);
    v9 = String.init<A>(describing:)(&v13, v7, v8);
    v11 = v10;
    v13 = sub_100172BEC(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Stop handler invoked: the engine stopped for reason: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_10009D528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  void *v12;
  _QWORD v14[6];

  v1 = v0;
  if (qword_100315870 != -1)
    swift_once(&qword_100315870, sub_1000D975C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FE08);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "HapticEngineState deinit", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Stopping engine", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = *(void **)(v1 + 16);
  v14[4] = sub_10009D6EC;
  v14[5] = 0;
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1107296256;
  v14[2] = sub_1002167A4;
  v14[3] = &unk_1002EBD18;
  v12 = _Block_copy(v14);
  objc_msgSend(v11, "stopWithCompletionHandler:", v12);
  _Block_release(v12);

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
  return v1;
}

void sub_10009D6EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  os_log_type_t v14;
  uint8_t *v15;
  NSObject *oslog;
  uint64_t v17;
  uint64_t v18;

  if (a1)
  {
    if (qword_100315870 != -1)
      swift_once(&qword_100315870, sub_1000D975C);
    v2 = type metadata accessor for Logger(0);
    sub_10000D744(v2, (uint64_t)qword_10033FE08);
    swift_errorRetain(a1);
    v3 = swift_errorRetain(a1);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc(12, -1);
      v6 = swift_slowAlloc(32, -1);
      v17 = a1;
      v18 = v6;
      *(_DWORD *)v5 = 136446210;
      swift_errorRetain(a1);
      v7 = sub_100003DB8(&qword_10031CF20);
      v9 = String.init<A>(describing:)(&v17, v7, v8);
      v11 = v10;
      v17 = sub_100172BEC(v9, v10, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v5 + 4, v5 + 12);
      swift_bridgeObjectRelease(v11);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Failed to stop engine: %{public}s", v5, 0xCu);
      swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1, -1);
      swift_slowDealloc(v5, -1, -1);

      return;
    }
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }
  else
  {
    if (qword_100315870 != -1)
      swift_once(&qword_100315870, sub_1000D975C);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10000D744(v12, (uint64_t)qword_10033FE08);
    oslog = Logger.logObject.getter(v13);
    v14 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v14, "Engine stopped", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }
  }

}

uint64_t sub_10009D970()
{
  uint64_t v0;

  v0 = sub_10009D528();
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for HapticEngineState()
{
  return objc_opt_self(_TtC8SOSBuddyP33_1A452BD5ACB98C9E4750A9E158191C1417HapticEngineState);
}

void sub_10009D9AC()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t inited;
  CHHapticPatternKey v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CHHapticPatternKey v12;
  uint64_t v13;
  uint64_t v14;
  CHHapticPatternKey v15;
  CHHapticEventType v16;
  CHHapticPatternKey v17;
  uint64_t v18;
  CHHapticPatternKey v19;
  NSString *v20;
  NSString *v21;
  NSString *v22;
  NSString *v23;
  NSString *v24;
  NSString *v25;
  CHHapticEventType v26;
  uint64_t v27;
  uint64_t v28;
  CHHapticEventParameterID v29;
  id v30;
  NSString *v31;
  double v32;
  CHHapticEventParameterID v33;
  id v34;
  double v35;
  id v36;
  id v37;
  Class isa;
  id v39;
  CHHapticEventType v40;
  uint64_t v41;
  CHHapticEventParameterID v42;
  id v43;
  NSString *v44;
  double v45;
  CHHapticEventParameterID v46;
  id v47;
  double v48;
  id v49;
  id v50;
  Class v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  id v56;
  uint64_t v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  unint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  id v85;
  uint64_t v86;
  id v87;
  uint64_t v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  void *v95;
  uint64_t v96;
  __n128 v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  unint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE v109[96];
  id v110;
  _BYTE v111[152];
  _BYTE v112[48];
  _BYTE v113[48];

  if (qword_100315870 != -1)
    swift_once(&qword_100315870, sub_1000D975C);
  v101 = v0;
  v1 = type metadata accessor for Logger(0);
  v103 = sub_10000D744(v1, (uint64_t)qword_10033FE08);
  v2 = Logger.logObject.getter(v103);
  v3 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "prepareEngine", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = sub_100003DB8(&qword_10031CF28);
  inited = swift_initStackObject(v5, v113);
  *(_OWORD *)(inited + 16) = xmmword_10024E070;
  v7 = CHHapticPatternKeyPattern;
  *(_QWORD *)(inited + 32) = CHHapticPatternKeyPattern;
  v8 = sub_100003DB8(&qword_10031CF30);
  v9 = swift_allocObject(v8, 40, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10024E070;
  v10 = sub_100003DB8(&qword_10031CF38);
  v11 = swift_initStackObject(v10, v112);
  *(_OWORD *)(v11 + 16) = xmmword_10024E070;
  v12 = CHHapticPatternKeyEvent;
  *(_QWORD *)(v11 + 32) = CHHapticPatternKeyEvent;
  v13 = sub_100003DB8((uint64_t *)&unk_10031CF40);
  v14 = swift_initStackObject(v13, v111);
  *(_OWORD *)(v14 + 16) = xmmword_10024FB80;
  v15 = CHHapticPatternKeyEventType;
  *(_QWORD *)(v14 + 32) = CHHapticPatternKeyEventType;
  v16 = CHHapticEventTypeHapticTransient;
  type metadata accessor for EventType(0);
  *(_QWORD *)(v14 + 40) = v16;
  v17 = CHHapticPatternKeyTime;
  *(_QWORD *)(v14 + 64) = v18;
  *(_QWORD *)(v14 + 72) = v17;
  *(_QWORD *)(v14 + 80) = 0x3F50624DD2F1A9FCLL;
  v19 = CHHapticPatternKeyEventDuration;
  *(_QWORD *)(v14 + 104) = &type metadata for Double;
  *(_QWORD *)(v14 + 112) = v19;
  *(_QWORD *)(v14 + 144) = &type metadata for Double;
  *(_QWORD *)(v14 + 120) = 0x3FF0000000000000;
  v20 = v7;
  v21 = v12;
  v22 = v15;
  v23 = v16;
  v24 = v17;
  v25 = v19;
  *(_QWORD *)(v11 + 40) = sub_1002251B0(v14);
  *(_QWORD *)(v9 + 32) = sub_1002252F4(v11);
  *(_QWORD *)(inited + 40) = v9;
  v105 = sub_100225300(inited);
  v26 = CHHapticEventTypeHapticContinuous;
  v27 = sub_100003DB8(&qword_100328A00);
  v28 = swift_allocObject(v27, 48, 7);
  *(_OWORD *)(v28 + 16) = xmmword_100252A40;
  v29 = CHHapticEventParameterIDHapticIntensity;
  v30 = objc_allocWithZone((Class)CHHapticEventParameter);
  v31 = v26;
  LODWORD(v32) = 1.0;
  *(_QWORD *)(v28 + 32) = objc_msgSend(v30, "initWithParameterID:value:", v29, v32);
  v33 = CHHapticEventParameterIDHapticSharpness;
  v34 = objc_allocWithZone((Class)CHHapticEventParameter);
  LODWORD(v35) = 1061997773;
  v36 = objc_msgSend(v34, "initWithParameterID:value:", v33, v35);
  *(_QWORD *)(v28 + 40) = v36;
  specialized Array._endMutation()(v36);
  v37 = objc_allocWithZone((Class)CHHapticEvent);
  sub_10006477C(0, &qword_10031CF50, CHHapticEventParameter_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v28);
  v39 = objc_msgSend(v37, "initWithEventType:parameters:relativeTime:duration:", v31, isa, 0.0, 0.1);

  v40 = CHHapticEventTypeHapticContinuous;
  v102 = v27;
  v41 = swift_allocObject(v27, 48, 7);
  *(_OWORD *)(v41 + 16) = xmmword_100252A40;
  v42 = CHHapticEventParameterIDHapticIntensity;
  v43 = objc_allocWithZone((Class)CHHapticEventParameter);
  v44 = v40;
  LODWORD(v45) = 0.5;
  *(_QWORD *)(v41 + 32) = objc_msgSend(v43, "initWithParameterID:value:", v42, v45);
  v46 = CHHapticEventParameterIDHapticSharpness;
  v47 = objc_allocWithZone((Class)CHHapticEventParameter);
  LODWORD(v48) = 1050253722;
  v49 = objc_msgSend(v47, "initWithParameterID:value:", v46, v48);
  *(_QWORD *)(v41 + 40) = v49;
  specialized Array._endMutation()(v49);
  v50 = objc_allocWithZone((Class)CHHapticEvent);
  v51 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v41);
  v52 = objc_msgSend(v50, "initWithEventType:parameters:relativeTime:duration:", v44, v51, 0.15, 0.15);

  sub_10013EB64(v105);
  v54 = v53;
  swift_bridgeObjectRelease(v105);
  v55 = objc_allocWithZone((Class)CHHapticPattern);
  v56 = sub_10009F0C4(v54);
  v57 = swift_allocObject(v102, 48, 7);
  *(_OWORD *)(v57 + 16) = xmmword_100252A40;
  *(_QWORD *)(v57 + 32) = v39;
  *(_QWORD *)(v57 + 40) = v52;
  v110 = (id)v57;
  specialized Array._endMutation()(v57);
  v58 = objc_allocWithZone((Class)CHHapticPattern);
  v59 = v56;
  v60 = v39;
  v61 = v52;
  v62 = sub_10009F1CC((uint64_t)v110, (uint64_t)_swiftEmptyArrayStorage);
  v106 = v60;
  v63 = sub_100003DB8(&qword_10031CF58);
  v64 = swift_initStackObject(v63, v109);
  *(_OWORD *)(v64 + 16) = xmmword_10024EEB0;
  *(_BYTE *)(v64 + 32) = 0;
  v65 = *(void **)(v101 + 16);
  v110 = 0;
  v66 = v62;
  v67 = objc_msgSend(v65, "createPlayerWithPattern:error:", v59, &v110);

  v68 = v110;
  if (v67)
  {
    *(_QWORD *)(v64 + 40) = v67;
    *(_BYTE *)(v64 + 48) = 1;
    v110 = 0;
    v69 = v68;
    v70 = objc_msgSend(v65, "createPlayerWithPattern:error:", v66, &v110);
    v71 = v110;
    if (v70)
    {
      *(_QWORD *)(v64 + 56) = v70;
      *(_BYTE *)(v64 + 64) = 2;
      v110 = 0;
      v72 = v71;
      v73 = objc_msgSend(v65, "createPlayerWithPattern:error:", v66, &v110);
      v74 = v110;
      if (v73)
      {
        *(_QWORD *)(v64 + 72) = v73;
        *(_BYTE *)(v64 + 80) = 3;
        v110 = 0;
        v75 = v74;
        v76 = objc_msgSend(v65, "createPlayerWithPattern:error:", v66, &v110);

        v77 = v110;
        if (v76)
        {
          *(_QWORD *)(v64 + 88) = v76;
          v78 = sub_1002274BC(v64);
          swift_setDeallocating(v64);
          v79 = v77;
          v80 = sub_100003DB8(&qword_10031CF60);
          swift_arrayDestroy(v64 + 32, 4, v80);

          v81 = *(_QWORD *)(v101 + 24);
          *(_QWORD *)(v101 + 24) = v78;
          swift_bridgeObjectRelease(v81);
          return;
        }
        v89 = v110;
        v83 = _convertNSErrorToError(_:)(v77);

        swift_willThrow(v90);
        swift_unknownObjectRelease(*(_QWORD *)(v64 + 72));
      }
      else
      {
        v87 = v110;

        v83 = _convertNSErrorToError(_:)(v74);
        swift_willThrow(v88);
      }
      swift_unknownObjectRelease(*(_QWORD *)(v64 + 56));
    }
    else
    {
      v85 = v110;

      v83 = _convertNSErrorToError(_:)(v71);
      swift_willThrow(v86);
    }
    swift_unknownObjectRelease(*(_QWORD *)(v64 + 40));
  }
  else
  {
    v82 = v110;

    v83 = _convertNSErrorToError(_:)(v68);
    swift_willThrow(v84);
  }
  *(_QWORD *)(v64 + 16) = 0;
  swift_release(v64);
  swift_errorRetain(v83);
  v91 = swift_errorRetain(v83);
  v92 = Logger.logObject.getter(v91);
  v93 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v92, v93))
  {
    v94 = (uint8_t *)swift_slowAlloc(12, -1);
    v95 = (void *)swift_slowAlloc(32, -1);
    v110 = v95;
    *(_DWORD *)v94 = 136446210;
    v107 = v83;
    swift_errorRetain(v83);
    v96 = sub_100003DB8((uint64_t *)&unk_100324AA0);
    v98 = String.init<A>(describing:)(&v107, v96, v97);
    v104 = v66;
    v100 = v99;
    v107 = sub_100172BEC(v98, v99, (uint64_t *)&v110);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, &v108, v94 + 4, v94 + 12);
    swift_bridgeObjectRelease(v100);
    swift_errorRelease(v83);
    swift_errorRelease(v83);
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Failed to make players: %{public}s", v94, 0xCu);
    swift_arrayDestroy(v95, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v95, -1, -1);
    swift_slowDealloc(v94, -1, -1);

    swift_errorRelease(v83);
  }
  else
  {

    swift_errorRelease(v83);
    swift_errorRelease(v83);
    swift_errorRelease(v83);

  }
}

void sub_10009E484(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  NSObject *oslog;
  uint64_t aBlock[5];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v2 = v1;
  v3 = a1;
  v4 = *(_QWORD *)(v1 + 24);
  if (*(_QWORD *)(v4 + 16) && (v5 = sub_10017D294(a1), (v6 & 1) != 0))
  {
    v7 = *(_QWORD *)(*(_QWORD *)(v4 + 56) + 8 * v5);
    v8 = qword_100315870;
    swift_unknownObjectRetain(v7);
    if (v8 != -1)
      swift_once(&qword_100315870, sub_1000D975C);
    v9 = type metadata accessor for Logger(0);
    v10 = sub_10000D744(v9, (uint64_t)qword_10033FE08);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      aBlock[0] = v14;
      v15.n128_u64[0] = 136446210;
      *(_DWORD *)v13 = 136446210;
      LOBYTE(v36) = v3;
      v16 = String.init<A>(describing:)(&v36, &type metadata for HapticAgent.HapticType, v15);
      v18 = v17;
      v36 = sub_100172BEC(v16, v17, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v13 + 4, v13 + 12);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Starting engine for %{public}s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }

    v19 = *(void **)(v2 + 16);
    v20 = swift_allocObject(&unk_1002EBCB0, 24, 7);
    swift_weakInit(v20 + 16);
    v21 = swift_allocObject(&unk_1002EBCD8, 40, 7);
    *(_BYTE *)(v21 + 16) = v3;
    *(_QWORD *)(v21 + 24) = v20;
    *(_QWORD *)(v21 + 32) = v7;
    aBlock[4] = (uint64_t)sub_10009F348;
    v35 = v21;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1002167A4;
    aBlock[3] = (uint64_t)&unk_1002EBCF0;
    v22 = _Block_copy(aBlock);
    v23 = v35;
    swift_unknownObjectRetain(v7);
    swift_release(v23);
    objc_msgSend(v19, "startWithCompletionHandler:", v22);
    _Block_release(v22);
    swift_unknownObjectRelease(v7);
  }
  else
  {
    if (qword_100315870 != -1)
      swift_once(&qword_100315870, sub_1000D975C);
    v24 = type metadata accessor for Logger(0);
    v25 = sub_10000D744(v24, (uint64_t)qword_10033FE08);
    oslog = Logger.logObject.getter(v25);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(12, -1);
      v28 = swift_slowAlloc(32, -1);
      aBlock[0] = v28;
      v29.n128_u64[0] = 136446210;
      *(_DWORD *)v27 = 136446210;
      LOBYTE(v36) = v3;
      v30 = String.init<A>(describing:)(&v36, &type metadata for HapticAgent.HapticType, v29);
      v32 = v31;
      v36 = sub_100172BEC(v30, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease(v32);
      _os_log_impl((void *)&_mh_execute_header, oslog, v26, "Requested player %{public}s does not exist", v27, 0xCu);
      swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t storeEnumTagSinglePayload for HapticAgent.HapticType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10009E8AC + 4 * byte_100252A55[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10009E8E0 + 4 * byte_100252A50[v4]))();
}

uint64_t sub_10009E8E0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009E8E8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10009E8F0);
  return result;
}

uint64_t sub_10009E8FC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10009E904);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10009E908(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10009E910(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for HapticAgent.HapticType()
{
  return &type metadata for HapticAgent.HapticType;
}

unint64_t sub_10009E930()
{
  unint64_t result;

  result = qword_10031CF10;
  if (!qword_10031CF10)
  {
    result = swift_getWitnessTable(&unk_100252AFC, &type metadata for HapticAgent.HapticType);
    atomic_store(result, (unint64_t *)&qword_10031CF10);
  }
  return result;
}

void sub_10009E974(void *a1, char a2, uint64_t a3, void *a4)
{
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t Strong;
  uint64_t v32;
  unsigned int v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  void *v38;
  __n128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  os_log_type_t v50;
  uint64_t v51;
  void *v52;
  __n128 v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  __n128 v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char v62;
  NSObject *osloga;
  uint64_t v65;
  uint64_t v66;
  id v67;
  uint64_t v68[3];

  if (a1)
  {
    if (qword_100315870 != -1)
      swift_once(&qword_100315870, sub_1000D975C);
    v6 = type metadata accessor for Logger(0);
    sub_10000D744(v6, (uint64_t)qword_10033FE08);
    swift_errorRetain(a1);
    v7 = swift_errorRetain(a1);
    osloga = Logger.logObject.getter(v7);
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(osloga, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v68[0] = v10;
      v11.n128_u64[0] = 136446466;
      *(_DWORD *)v9 = 136446466;
      LOBYTE(v67) = a2;
      v12 = String.init<A>(describing:)(&v67, &type metadata for HapticAgent.HapticType, v11);
      v14 = v13;
      v67 = (id)sub_100172BEC(v12, v13, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease(v14);
      *(_WORD *)(v9 + 12) = 2082;
      v67 = a1;
      swift_errorRetain(a1);
      v15 = sub_100003DB8(&qword_10031CF20);
      v17 = String.init<A>(describing:)(&v67, v15, v16);
      v19 = v18;
      v67 = (id)sub_100172BEC(v17, v18, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v9 + 14, v9 + 22);
      swift_bridgeObjectRelease(v19);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, osloga, v8, "Failed to start engine for %{public}s: %{public}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);

    }
  }
  else
  {
    v20 = a3 + 16;
    if (qword_100315870 != -1)
      swift_once(&qword_100315870, sub_1000D975C);
    v21 = type metadata accessor for Logger(0);
    v22 = sub_10000D744(v21, (uint64_t)qword_10033FE08);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    v62 = a2;
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      v68[0] = v26;
      v27.n128_u64[0] = 136446210;
      *(_DWORD *)v25 = 136446210;
      LOBYTE(v67) = a2;
      v28 = String.init<A>(describing:)(&v67, &type metadata for HapticAgent.HapticType, v27);
      v30 = v29;
      v67 = (id)sub_100172BEC(v28, v29, v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Engine started for %{public}s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
    }

    swift_beginAccess(v20, v68, 0, 0);
    Strong = swift_weakLoadStrong(v20);
    v32 = swift_release(Strong);
    if (Strong)
    {
      v67 = 0;
      v33 = objc_msgSend(a4, "startAtTime:error:", &v67, 0.0);
      v34 = v67;
      if (v33)
      {
        v35 = Logger.logObject.getter(v67);
        v36 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v35, v36))
        {
          v37 = (uint8_t *)swift_slowAlloc(12, -1);
          v38 = (void *)swift_slowAlloc(32, -1);
          v67 = v38;
          v39.n128_u64[0] = 136446210;
          *(_DWORD *)v37 = 136446210;
          LOBYTE(v65) = a2;
          v40 = String.init<A>(describing:)(&v65, &type metadata for HapticAgent.HapticType, v39);
          v42 = v41;
          v65 = sub_100172BEC(v40, v41, (uint64_t *)&v67);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v37 + 4, v37 + 12);
          swift_bridgeObjectRelease(v42);
          _os_log_impl((void *)&_mh_execute_header, v35, v36, "Player started for %{public}s", v37, 0xCu);
          swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v38, -1, -1);
          swift_slowDealloc(v37, -1, -1);
        }
      }
      else
      {
        v46 = v67;
        v47 = _convertNSErrorToError(_:)(v34);

        swift_willThrow(v48);
        swift_errorRetain(v47);
        v49 = swift_errorRetain(v47);
        v35 = Logger.logObject.getter(v49);
        v50 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v35, v50))
        {
          v51 = swift_slowAlloc(22, -1);
          v52 = (void *)swift_slowAlloc(64, -1);
          v67 = v52;
          v53.n128_u64[0] = 136446466;
          *(_DWORD *)v51 = 136446466;
          LOBYTE(v65) = v62;
          v54 = String.init<A>(describing:)(&v65, &type metadata for HapticAgent.HapticType, v53);
          v56 = v55;
          v65 = sub_100172BEC(v54, v55, (uint64_t *)&v67);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v51 + 4, v51 + 12);
          swift_bridgeObjectRelease(v56);
          *(_WORD *)(v51 + 12) = 2082;
          v65 = v47;
          swift_errorRetain(v47);
          v57 = sub_100003DB8((uint64_t *)&unk_100324AA0);
          v59 = String.init<A>(describing:)(&v65, v57, v58);
          v61 = v60;
          v65 = sub_100172BEC(v59, v60, (uint64_t *)&v67);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v51 + 14, v51 + 22);
          swift_bridgeObjectRelease(v61);
          swift_errorRelease(v47);
          swift_errorRelease(v47);
          _os_log_impl((void *)&_mh_execute_header, v35, v50, "Failed to start player for %{public}s: %{public}s", (uint8_t *)v51, 0x16u);
          swift_arrayDestroy(v52, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v52, -1, -1);
          swift_slowDealloc(v51, -1, -1);

          swift_errorRelease(v47);
          return;
        }
        swift_errorRelease(v47);
        swift_errorRelease(v47);
        swift_errorRelease(v47);
      }

    }
    else
    {
      v43 = Logger.logObject.getter(v32);
      v44 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v45 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "HapticEngineState is already destroyed, ignoring play request", v45, 2u);
        swift_slowDealloc(v45, -1, -1);
      }

    }
  }
}

id sub_10009F0C4(uint64_t a1)
{
  void *v1;
  Class isa;
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  id v10;

  type metadata accessor for Key(0);
  sub_1000052EC(&qword_1003166D8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_10024CD44);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v10 = 0;
  v4 = objc_msgSend(v1, "initWithDictionary:error:", isa, &v10);

  v5 = v10;
  if (v4)
  {
    v6 = v10;
  }
  else
  {
    v7 = v10;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow(v8);
  }
  return v4;
}

id sub_10009F1CC(uint64_t a1, uint64_t a2)
{
  void *v2;
  Class isa;
  Class v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v13;

  sub_10006477C(0, &qword_10031CF68, CHHapticEvent_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  sub_10006477C(0, &qword_10031CF70, CHHapticDynamicParameter_ptr);
  v6 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a2);
  v13 = 0;
  v7 = objc_msgSend(v2, "initWithEvents:parameters:error:", isa, v6, &v13);

  v8 = v13;
  if (v7)
  {
    v9 = v13;
  }
  else
  {
    v10 = v13;
    _convertNSErrorToError(_:)(v8);

    swift_willThrow(v11);
  }
  return v7;
}

uint64_t sub_10009F2F8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10009F31C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10009F348(void *a1)
{
  uint64_t v1;

  sub_10009E974(a1, *(_BYTE *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_10009F354(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10009F364(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10009F36C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10009F390()
{
  uint64_t v0;

  return sub_10009D070(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10009F398(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;

  v2 = v1;
  v4 = sub_1002274BC((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v4;
  v5 = qword_100315870;
  v6 = a1;
  if (v5 != -1)
    swift_once(&qword_100315870, sub_1000D975C);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10000D744(v7, (uint64_t)qword_10033FE08);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "HapticEngineState init", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  sub_10009D9AC();
  return v2;
}

uint64_t sub_10009F48C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

void sub_10009F4B0()
{
  uint64_t v0;

  if (*(_QWORD *)(v0 + 16))
    sub_10009D9AC();
}

uint64_t sub_10009F4D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_10009F4F8()
{
  uint64_t v0;

  return sub_10009CB30(*(_QWORD *)(v0 + 16), *(unsigned __int8 *)(v0 + 24));
}

uint64_t sub_10009F504()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_10009F530()
{
  uint64_t v0;

  sub_10009C560(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

void sub_10009F538()
{
  uint64_t v0;

  sub_10009C084(v0);
}

uint64_t destroy for StewieCompressedData(uint64_t a1)
{
  return sub_10000CCCC(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

uint64_t initializeWithCopy for StewieCompressedData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10000CC50(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for StewieCompressedData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_10000CC50(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_10000CCCC(v6, v7);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for StewieCompressedData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10000CCCC(v4, v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for StewieCompressedData(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 25))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 24);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for StewieCompressedData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_BYTE *)(result + 24) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for StewieCompressedData()
{
  return &type metadata for StewieCompressedData;
}

ValueMetadata *type metadata accessor for TryOutQuestionnaireIntroView()
{
  return &type metadata for TryOutQuestionnaireIntroView;
}

uint64_t sub_10009F734(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029894C, 1);
}

uint64_t sub_10009F744@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t OpaqueTypeConformance2;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t result;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  _OWORD v71[11];
  uint64_t v72;
  __int128 v73[11];
  uint64_t v74;
  _QWORD v75[5];
  uint64_t v76;
  _QWORD v77[3];

  v2 = v1;
  v69 = a1;
  v58 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v56 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58, v3);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8(&qword_10031CF80);
  v59 = *(_QWORD *)(v6 - 8);
  v60 = v6;
  __chkstk_darwin(v6, v7);
  v57 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_10031CF88);
  v63 = *(_QWORD *)(v9 - 8);
  v64 = v9;
  __chkstk_darwin(v9, v10);
  v61 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_10031CF90);
  v67 = *(_QWORD *)(v12 - 8);
  v68 = v12;
  __chkstk_darwin(v12, v13);
  v62 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100003DB8(&qword_10031CF98);
  __chkstk_darwin(v65, v15);
  v66 = (char *)&v54 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD **)v1;
  if (*(_QWORD *)v1)
  {
    v18 = v17[9];
    v19 = v17[10];
    sub_100007BBC(v17 + 6, v18);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v19 + 24))(v75, v18, v19);
    v20 = *(_QWORD *)(v1 + 16);
    v21 = *(unsigned __int8 *)(v1 + 24);
    v22 = *(_QWORD *)(v1 + 32);
    v23 = *(_QWORD *)(v1 + 40);
    v76 = *(_QWORD *)(v2 + 48);
    v77[0] = v22;
    sub_100007CBC((uint64_t)v75, (uint64_t)v73);
    v24 = swift_allocObject(&unk_1002EC050, 112, 7);
    v25 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v24 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v24 + 32) = v25;
    *(_OWORD *)(v24 + 48) = *(_OWORD *)(v2 + 32);
    *(_QWORD *)(v24 + 64) = *(_QWORD *)(v2 + 48);
    sub_100007D04(v73, v24 + 72);
    sub_100007CBC((uint64_t)v75, (uint64_t)v73);
    v26 = swift_allocObject(&unk_1002EC078, 112, 7);
    v27 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v26 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v26 + 32) = v27;
    *(_OWORD *)(v26 + 48) = *(_OWORD *)(v2 + 32);
    *(_QWORD *)(v26 + 64) = *(_QWORD *)(v2 + 48);
    sub_100007D04(v73, v26 + 72);
    swift_retain(v17);
    v55 = v20;
    v70 = v21;
    sub_100040244(v20, v21);
    sub_100031A88(v77);
    swift_retain(v23);
    sub_100034218(&v76);
    swift_retain(v17);
    sub_100040244(v20, v21);
    sub_100031A88(v77);
    swift_retain(v23);
    sub_100034218(&v76);
    sub_10012E328(v71, ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter, 0, sub_1000A123C, v24, sub_1000A124C, v26, 0);
    v28 = v56;
    v29 = v58;
    (*(void (**)(char *, _QWORD, uint64_t))(v56 + 104))(v5, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v58);
    v30 = sub_100003DB8(&qword_10031CFA0);
    v31 = sub_1000084FC(&qword_10031CFA8, &qword_10031CFA0, (uint64_t)&unk_100256288);
    v32 = v57;
    View.navigationBarTitleDisplayMode(_:)(v5, v30, v31);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v5, v29);
    v73[8] = v71[8];
    v73[9] = v71[9];
    v73[10] = v71[10];
    v74 = v72;
    v73[4] = v71[4];
    v73[5] = v71[5];
    v73[6] = v71[6];
    v73[7] = v71[7];
    v73[0] = v71[0];
    v73[1] = v71[1];
    v73[2] = v71[2];
    v73[3] = v71[3];
    sub_100007E9C((uint64_t *)v73);
    v33 = v55;
    LOBYTE(v28) = v70;
    sub_100040244(v55, v70);
    LOBYTE(v23) = sub_100042548(v33, v28);
    sub_100040294(v33, v28);
    *(_QWORD *)&v71[0] = v30;
    *((_QWORD *)&v71[0] + 1) = v31;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v71, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v35 = v60;
    v36 = v61;
    View.navigationBarBackButtonHidden(_:)((v23 & 1) == 0, v60, OpaqueTypeConformance2);
    v37 = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v32, v35);
    __chkstk_darwin(v37, v38);
    *(&v54 - 2) = v2;
    v39 = sub_100003DB8(&qword_10031CFB0);
    *(_QWORD *)&v71[0] = v35;
    *((_QWORD *)&v71[0] + 1) = OpaqueTypeConformance2;
    v40 = swift_getOpaqueTypeConformance2(v71, &opaque type descriptor for <<opaque return type of View.navigationBarBackButtonHidden(_:)>>, 1);
    v41 = sub_1000084FC(&qword_10031CFB8, &qword_10031CFB0, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v42 = v62;
    v43 = v64;
    View.toolbar<A>(content:)(sub_1000A1258, &v54 - 4, v64, v39, v40, v41);
    (*(void (**)(char *, uint64_t))(v63 + 8))(v36, v43);
    LOBYTE(v40) = v70;
    sub_100040244(v33, v70);
    LOBYTE(v23) = sub_100042548(v33, v40);
    v44 = sub_100040294(v33, v40);
    if ((v23 & 1) != 0)
      v45 = static Edge.Set.top.getter(v44);
    else
      v45 = Edge.Set.init(rawValue:)(0);
    v46 = v45;
    v48 = (uint64_t)v66;
    v47 = v67;
    v49 = v68;
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v66, v42, v68);
    *(_BYTE *)(v48 + *(int *)(v65 + 36)) = v46;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v42, v49);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v75);
    return sub_10000B458(v48, v69, &qword_10031CF98);
  }
  else
  {
    v51 = *(_QWORD *)(v1 + 8);
    v52 = type metadata accessor for UIMetrics();
    v53 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v51, v52, v53);
    __break(1u);
  }
  return result;
}

void sub_10009FD24(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v6 = sub_100003DB8(&qword_10031CFF8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100003DB8(&qword_10031D000);
  v11 = __chkstk_darwin(v53, v10);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v48 - v15;
  v17 = *a1;
  if (*a1)
  {
    v18 = (void *)objc_opt_self(UIApplication);
    v19 = objc_msgSend(v18, "sharedApplication", swift_retain(v17).n128_f64[0]);
    v20 = objc_msgSend(v19, "userInterfaceLayoutDirection");

    swift_release(v17);
    v21 = 0xD00000000000001BLL;
    v22 = 0xD00000000000001FLL;
    if (v20 != (id)1)
      v22 = 0xD00000000000001BLL;
    v52 = v22;
    v23 = 0x8000000100267B10;
    if (v20 != (id)1)
    {
      v23 = 0x8000000100267AF0;
      v21 = 0;
    }
    v50 = v21;
    v51 = v23;
    if (v20 == (id)1)
      v24 = 0x8000000100267AF0;
    else
      v24 = 0;
    KeyPath = swift_getKeyPath(&unk_100252C88);
    v26 = type metadata accessor for UIMetrics();
    v27 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v28 = EnvironmentObject.init()(v26, v27);
    v49 = v29;
    *(_QWORD *)v9 = static HorizontalAlignment.center.getter(v28);
    *((_QWORD *)v9 + 1) = 0;
    v9[16] = 0;
    v30 = sub_100003DB8(&qword_10031D008);
    sub_1000A00AC(a1, (uint64_t)&v9[*(int *)(v30 + 44)]);
    v32 = a2[3];
    v31 = a2[4];
    sub_100007BBC(a2, v32);
    v33 = (*(double (**)(uint64_t, uint64_t))(v31 + 24))(v32, v31);
    v35 = v34;
    v37 = v36;
    v39 = v38;
    v40 = static Edge.Set.all.getter(v33);
    sub_10000B234((uint64_t)v9, (uint64_t)v13, &qword_10031CFF8);
    v41 = &v13[*(int *)(v53 + 36)];
    *v41 = v40;
    *((double *)v41 + 1) = v33;
    *((_QWORD *)v41 + 2) = v35;
    *((_QWORD *)v41 + 3) = v37;
    *((_QWORD *)v41 + 4) = v39;
    v41[40] = 0;
    sub_100007FF0((uint64_t)v9, &qword_10031CFF8);
    sub_10000B458((uint64_t)v13, (uint64_t)v16, &qword_10031D000);
    sub_10000B234((uint64_t)v16, (uint64_t)v13, &qword_10031D000);
    v42 = v49;
    *(_QWORD *)a3 = v28;
    *(_QWORD *)(a3 + 8) = v42;
    *(_QWORD *)(a3 + 16) = KeyPath;
    *(_BYTE *)(a3 + 24) = 0;
    v43 = v51;
    *(_QWORD *)(a3 + 32) = v52;
    *(_QWORD *)(a3 + 40) = v43;
    *(_QWORD *)(a3 + 48) = v50;
    *(_QWORD *)(a3 + 56) = v24;
    v44 = sub_100003DB8(&qword_10031D010);
    sub_10000B234((uint64_t)v13, a3 + *(int *)(v44 + 48), &qword_10031D000);
    swift_retain(v28);
    sub_100040244(KeyPath, 0);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v43);
    sub_100007FF0((uint64_t)v16, &qword_10031D000);
    sub_100007FF0((uint64_t)v13, &qword_10031D000);
    swift_release(v28);
    sub_100040294(KeyPath, 0);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v43);
  }
  else
  {
    v45 = a1[1];
    v46 = type metadata accessor for UIMetrics();
    v47 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, v45, v46, v47);
    __break(1u);
  }
}

uint64_t sub_1000A00AC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  id v30;
  char v31;
  BOOL v32;
  uint64_t KeyPath;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  id v48;
  UIContentSizeCategory v49;
  char v50;
  double v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  id v65;
  char v66;
  uint64_t v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  BOOL v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  char v83;
  double v84;
  uint64_t v85;
  char v86;
  _BYTE *v87;
  _BYTE *v88;
  char v89;
  uint64_t v90;
  _OWORD *v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  uint64_t result;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _BYTE v104[12];
  int v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  _BYTE *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  UIContentSizeCategory v114;
  uint64_t v115;
  _BYTE *v116;
  char v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _OWORD v129[3];
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  _OWORD v140[17];
  char v141;
  char v142;
  _OWORD v143[10];
  _BYTE v144[280];
  uint64_t v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  __int16 v151;
  uint64_t v152;
  uint64_t v153;
  char v154;
  uint64_t v155;
  uint64_t v156;
  BOOL v157;
  __int16 v158;

  v112 = a2;
  v3 = type metadata accessor for AccessibilityTraits(0);
  v110 = *(_QWORD *)(v3 - 8);
  v111 = v3;
  __chkstk_darwin(v3, v4);
  v109 = &v104[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100003DB8(&qword_100319268);
  v8 = __chkstk_darwin(v6, v7);
  v113 = &v104[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __chkstk_darwin(v8, v10);
  v108 = &v104[-v12];
  __chkstk_darwin(v11, v13);
  v116 = &v104[-v14];
  v15 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001DLL, 0x8000000100267B30);
  v16 = Text.init(_:tableName:bundle:comment:)(v15);
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  v23 = static Font.title.getter();
  static Font.Weight.semibold.getter();
  v24 = Font.weight(_:)(v23);
  swift_release(v23);
  v106 = Text.font(_:)(v24, v16, v18, v22, v20);
  v107 = v25;
  v27 = v26;
  v105 = v28;
  swift_release(v24);
  sub_10002B438(v16, v18, v22);
  swift_bridgeObjectRelease(v20);
  v29 = *a1;
  if (*a1)
  {
    v30 = *(id *)(v29 + 112);
    v31 = static UIContentSizeCategory.>= infix(_:_:)(v30, UIContentSizeCategoryAccessibilityExtraLarge);

    v32 = (v31 & 1) == 0;
    KeyPath = swift_getKeyPath(&unk_100252CB0);
    v115 = v29;
    v34 = *(id *)(v29 + 112);
    v35 = static Alignment.center.getter(v34);
    v37 = v36;
    v114 = UIContentSizeCategoryAccessibilityExtraLarge;
    v38 = static UIContentSizeCategory.>= infix(_:_:)(v34, UIContentSizeCategoryAccessibilityExtraLarge);
    if ((v38 & 1) != 0)
    {
      v39 = static Alignment.center.getter(v38);
      v41 = static Alignment.== infix(_:_:)(v35, v37, v39, v40);
      if ((v41 & 1) != 0)
      {
        v35 = static Alignment.leading.getter(v41, v42);
        v37 = v43;
      }
    }

    v45 = v106;
    v44 = v107;
    v152 = v106;
    v153 = v27;
    v46 = v105 & 1;
    v154 = v105 & 1;
    v155 = v107;
    v156 = KeyPath;
    v157 = v32;
    v158 = 256;
    sub_1001317C8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v143, 0.0, 1, 0.0, 1, v35, v37);
    sub_10002B438(v45, v27, v46);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v44);
    v47 = v115;
    v48 = *(id *)(v115 + 112);
    v49 = v114;
    v50 = static UIContentSizeCategory.>= infix(_:_:)(v48, v114);

    if ((v50 & 1) != 0)
      v51 = 1.0;
    else
      v51 = 0.5;
    v52 = swift_getKeyPath(&unk_100252CE0);
    v53 = static Edge.Set.top.getter(v52);
    v54 = v53;
    v141 = 1;
    v55 = static Edge.Set.bottom.getter(v53);
    v142 = 1;
    v140[6] = v143[6];
    v140[7] = v143[7];
    v140[8] = v143[8];
    v140[9] = v143[9];
    v140[2] = v143[2];
    v140[3] = v143[3];
    v140[4] = v143[4];
    v140[5] = v143[5];
    v140[0] = v143[0];
    v140[1] = v143[1];
    *(_QWORD *)&v140[10] = v52;
    *((double *)&v140[10] + 1) = v51;
    LOBYTE(v140[11]) = v54;
    *(_OWORD *)((char *)&v140[11] + 8) = 0u;
    *(_OWORD *)((char *)&v140[12] + 8) = 0u;
    BYTE8(v140[13]) = v141;
    LOBYTE(v140[14]) = v55;
    *(_OWORD *)((char *)&v140[14] + 8) = 0u;
    *(_OWORD *)((char *)&v140[15] + 8) = 0u;
    BYTE8(v140[16]) = 1;
    v56 = v109;
    static AccessibilityTraits.isHeader.getter();
    v57 = sub_100003DB8(&qword_100319270);
    v58 = sub_10002B614(&qword_100319278, &qword_100319270, (void (*)(void))sub_100042BC8);
    v59 = (uint64_t)v108;
    View.accessibility(addTraits:)(v56, v57, v58);
    (*(void (**)(_BYTE *, uint64_t))(v110 + 8))(v56, v111);
    memcpy(v144, v140, 0x109uLL);
    sub_100038994((uint64_t)v144);
    sub_10000B458(v59, (uint64_t)v116, &qword_100319268);
    v60 = LocalizedStringKey.init(stringLiteral:)(0x100000000000006ELL, 0x8000000100267BA0);
    v110 = Text.init(_:tableName:bundle:comment:)(v60);
    v111 = v61;
    v63 = v62;
    LODWORD(v109) = v64;
    v65 = *(id *)(v47 + 112);
    v66 = static UIContentSizeCategory.>= infix(_:_:)(v65, v49);

    v67 = swift_getKeyPath(&unk_100252CB0);
    v68 = *(id *)(v47 + 112);
    v69 = static Alignment.center.getter(v68);
    v71 = v70;
    v72 = static UIContentSizeCategory.>= infix(_:_:)(v68, v49);
    if ((v72 & 1) != 0)
    {
      v73 = static Alignment.center.getter(v72);
      v75 = static Alignment.== infix(_:_:)(v69, v71, v73, v74);
      if ((v75 & 1) != 0)
      {
        v69 = static Alignment.leading.getter(v75, v76);
        v71 = v77;
      }
    }

    v78 = v109 & 1;
    v79 = (v66 & 1) == 0;
    v80 = v110;
    v81 = v111;
    v145 = v110;
    v146 = v63;
    v147 = v109 & 1;
    v148 = v111;
    v149 = v67;
    v150 = v79;
    v151 = 256;
    sub_1001317C8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v130, 0.0, 1, 0.0, 1, v69, v71);
    sub_10002B438(v80, v63, v78);
    swift_release(v67);
    swift_bridgeObjectRelease(v81);
    v82 = *(id *)(v115 + 112);
    v83 = static UIContentSizeCategory.>= infix(_:_:)(v82, v114);

    if ((v83 & 1) != 0)
      v84 = 1.0;
    else
      v84 = 0.5;
    v85 = swift_getKeyPath(&unk_100252CE0);
    v86 = static Edge.Set.top.getter(v85);
    v117 = 1;
    v87 = v116;
    v88 = v113;
    sub_10000B234((uint64_t)v116, (uint64_t)v113, &qword_100319268);
    v89 = v117;
    v90 = v112;
    sub_10000B234((uint64_t)v88, v112, &qword_100319268);
    v91 = (_OWORD *)(v90 + *(int *)(sub_100003DB8(&qword_10031D018) + 48));
    v124 = v136;
    v125 = v137;
    v126 = v138;
    v127 = v139;
    v122 = v134;
    v123 = v135;
    v120 = v132;
    v92 = v132;
    v121 = v133;
    v118 = v130;
    v119 = v131;
    *(_QWORD *)&v128 = v85;
    *((double *)&v128 + 1) = v84;
    LOBYTE(v129[0]) = v86;
    v93 = v137;
    v91[6] = v136;
    v91[7] = v93;
    v94 = v127;
    v91[8] = v126;
    v91[9] = v94;
    v95 = v121;
    v96 = v122;
    v97 = v123;
    v91[2] = v92;
    v91[3] = v95;
    *(_OWORD *)((char *)v129 + 8) = 0u;
    *(_OWORD *)((char *)&v129[1] + 8) = 0u;
    BYTE8(v129[2]) = v89;
    v91[4] = v96;
    v91[5] = v97;
    v98 = v119;
    *v91 = v118;
    v91[1] = v98;
    v99 = v129[0];
    v91[10] = v128;
    v91[11] = v99;
    v91[12] = v129[1];
    *(_OWORD *)((char *)v91 + 201) = *(_OWORD *)((char *)&v129[1] + 9);
    sub_10003893C((uint64_t)&v118);
    sub_100007FF0((uint64_t)v87, &qword_100319268);
    v140[6] = v136;
    v140[7] = v137;
    v140[8] = v138;
    v140[9] = v139;
    v140[2] = v132;
    v140[3] = v133;
    v140[4] = v134;
    v140[5] = v135;
    v140[0] = v130;
    v140[1] = v131;
    *(_QWORD *)&v140[10] = v85;
    *((double *)&v140[10] + 1) = v84;
    LOBYTE(v140[11]) = v86;
    *(_OWORD *)((char *)&v140[11] + 8) = 0u;
    *(_OWORD *)((char *)&v140[12] + 8) = 0u;
    BYTE8(v140[13]) = v89;
    sub_100038994((uint64_t)v140);
    return sub_100007FF0((uint64_t)v88, &qword_100319268);
  }
  else
  {
    v101 = a1[1];
    v102 = type metadata accessor for UIMetrics();
    v103 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v101, v102, v103);
    __break(1u);
  }
  return result;
}

void sub_1000A0888(__int128 *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  double v30;
  double v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t KeyPath;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  char v51;
  char v52;
  char v53;
  _BYTE v54[16];
  Swift::String v55;

  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v55._object = (void *)0x8000000100263800;
  v7._countAndFlagsBits = 1954047310;
  v7._object = (void *)0xE400000000000000;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v55._countAndFlagsBits = 0xD000000000000050;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v55);

  v50 = *a1;
  v10 = *((_QWORD *)a1 + 2);
  v49 = *((_BYTE *)a1 + 24);
  v11 = *((_QWORD *)a1 + 5);
  v12 = *((_QWORD *)a1 + 6);
  v47 = *((_QWORD *)a1 + 4);
  v48 = v10;
  v46 = v12;
  v13 = swift_allocObject(&unk_1002EC0A0, 72, 7);
  v14 = a1[1];
  *(_OWORD *)(v13 + 16) = *a1;
  *(_OWORD *)(v13 + 32) = v14;
  *(_OWORD *)(v13 + 48) = a1[2];
  *(_QWORD *)(v13 + 64) = *((_QWORD *)a1 + 6);
  KeyPath = swift_getKeyPath(&unk_100252C38);
  v42 = swift_getKeyPath(&unk_100252C60);
  v54[0] = 1;
  sub_100031A88(&v50);
  sub_100042A1C((uint64_t)&v48);
  sub_100031A88(&v47);
  swift_retain(v11);
  sub_100034218(&v46);
  State.init(wrappedValue:)(&v44, v54, &type metadata for Bool);
  v41 = v44;
  v40 = v45;
  v54[0] = 0;
  State.init(wrappedValue:)(&v44, v54, &type metadata for Bool);
  v39 = v44;
  v38 = v45;
  v15 = a2[3];
  v16 = a2[4];
  sub_100007BBC(a2, v15);
  v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v24 = static Edge.Set.all.getter(v17);
  v37 = v24;
  v53 = 0;
  v52 = 0;
  v51 = 0;
  v25 = static Edge.Set.top.getter(v24);
  v36 = v25;
  v26 = v53;
  LOBYTE(v15) = v52;
  LOBYTE(v16) = v51;
  v54[0] = 1;
  v27 = static Edge.Set.bottom.getter(v25);
  v28 = a2[3];
  v29 = a2[4];
  sub_100007BBC(a2, v28);
  v30 = (*(double (**)(uint64_t, uint64_t))(v29 + 112))(v28, v29);
  v31 = EdgeInsets.init(_all:)(v30);
  v32 = v54[0];
  LOBYTE(v44) = 0;
  *(_QWORD *)a3 = KeyPath;
  *(_BYTE *)(a3 + 8) = v26;
  *(_QWORD *)(a3 + 16) = v42;
  *(_BYTE *)(a3 + 24) = v15;
  *(Swift::String *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 48) = sub_1000A12F0;
  *(_QWORD *)(a3 + 56) = v13;
  *(_BYTE *)(a3 + 64) = v41;
  *(_QWORD *)(a3 + 72) = v40;
  *(_BYTE *)(a3 + 80) = v39;
  *(_QWORD *)(a3 + 88) = v38;
  *(_BYTE *)(a3 + 96) = v37;
  *(double *)(a3 + 104) = v17;
  *(_QWORD *)(a3 + 112) = v19;
  *(_QWORD *)(a3 + 120) = v21;
  *(_QWORD *)(a3 + 128) = v23;
  *(_BYTE *)(a3 + 136) = v16;
  *(_BYTE *)(a3 + 144) = v36;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_BYTE *)(a3 + 184) = v32;
  *(_BYTE *)(a3 + 192) = v27;
  *(double *)(a3 + 200) = v31;
  *(_QWORD *)(a3 + 208) = v33;
  *(_QWORD *)(a3 + 216) = v34;
  *(_QWORD *)(a3 + 224) = v35;
  *(_BYTE *)(a3 + 232) = v44;
}

_QWORD *sub_1000A0B68(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __n128 v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[4];
  v1 = a1[5];
  v3 = a1[6];
  v16 = v2;
  v17 = v3;
  v12 = v2;
  v13 = v1;
  v14 = v3;
  sub_100031A88(&v16);
  swift_retain(v1);
  sub_100034218(&v17);
  v4 = sub_100003DB8(&qword_100319240);
  Binding.wrappedValue.getter(&v15);
  v5 = v15;
  if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
    v5 = sub_100171738(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
  v8 = *((_QWORD *)v5 + 2);
  v7 = *((_QWORD *)v5 + 3);
  if (v8 >= v7 >> 1)
    v5 = sub_100171738((char *)(v7 > 1), v8 + 1, 1, v5);
  *((_QWORD *)v5 + 2) = v8 + 1;
  v9 = &v5[16 * v8];
  *((_QWORD *)v9 + 4) = 0xD000000000000024;
  *((_QWORD *)v9 + 5) = 0x8000000100267AC0;
  v12 = v2;
  v13 = v1;
  v14 = v3;
  v11 = v5;
  Binding.wrappedValue.setter(&v11, v4, v6);
  sub_100042AD0(&v16);
  swift_release(v1);
  return sub_100042AF8(&v17);
}

uint64_t sub_1000A0CA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v64 = a2;
  v63 = sub_100003DB8(&qword_10031CFC0);
  __chkstk_darwin(v63, v3);
  v62 = (uint64_t)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003DB8(&qword_100319200);
  v60 = *(_QWORD *)(v5 - 8);
  v61 = v5;
  __chkstk_darwin(v5, v6);
  v59 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_10031CFC8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_100319208);
  v55 = *(_QWORD *)(v12 - 8);
  v56 = v12;
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v55 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v55 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003DB8(&qword_10031CFD0);
  v57 = *(_QWORD *)(v20 - 8);
  v58 = v20;
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_100003DB8(&qword_10031CFD8);
  v26 = __chkstk_darwin(v24, v25);
  v28 = (char *)&v55 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v29);
  v31 = (char *)&v55 - v30;
  v32 = *(_QWORD *)(a1 + 16);
  LOBYTE(a1) = *(_BYTE *)(a1 + 24);
  sub_100040244(v32, a1);
  v33 = sub_100042548(v32, a1);
  v34 = sub_100040294(v32, a1);
  if ((v33 & 1) != 0)
  {
    v35 = sub_100003DB8(&qword_10031CFE8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v28, 1, 1, v35);
    v36 = sub_1000084FC(&qword_10031CFF0, &qword_10031CFE8, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    static ToolbarContentBuilder.buildIf<A>(_:)(v28, v35, v36);
    v37 = sub_100007FF0((uint64_t)v28, &qword_10031CFD8);
  }
  else
  {
    static ToolbarItemPlacement.navigationBarLeading.getter(v34);
    v38 = type metadata accessor for TryOutBackButtonView(0);
    v39 = sub_1000052EC(&qword_10031CFE0, type metadata accessor for TryOutBackButtonView, (uint64_t)&unk_10025B588);
    v40 = ToolbarItem<>.init(placement:content:)(v19, sub_1000A113C, 0, v38, v39);
    static ToolbarItemPlacement.principal.getter(v40);
    ToolbarItem<>.init(placement:content:)(v19, sub_1000421E0, 0, &type metadata for Text, &protocol witness table for Text);
    v41 = &v11[*(int *)(v8 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v11, v23, v58);
    v43 = v55;
    v42 = v56;
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v41, v15, v56);
    TupleToolbarContent.init(_:)(v11, v8);
    v44 = sub_100003DB8(&qword_10031CFE8);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v28, 0, 1, v44);
    v45 = sub_1000084FC(&qword_10031CFF0, &qword_10031CFE8, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    static ToolbarContentBuilder.buildIf<A>(_:)(v28, v44, v45);
    sub_100007FF0((uint64_t)v28, &qword_10031CFD8);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v15, v42);
    v37 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v23, v58);
  }
  static ToolbarItemPlacement.navigationBarTrailing.getter(v37);
  v46 = sub_100042930();
  v47 = v59;
  ToolbarItem<>.init(placement:content:)(v19, sub_1000A1180, 0, &type metadata for TryOutCancelIntroButton, v46);
  v49 = v62;
  v48 = v63;
  v50 = v62 + *(int *)(v63 + 48);
  sub_10000B234((uint64_t)v31, v62, &qword_10031CFD8);
  v51 = v60;
  v52 = v50;
  v53 = v61;
  (*(void (**)(uint64_t, char *, uint64_t))(v60 + 16))(v52, v47, v61);
  TupleToolbarContent.init(_:)(v49, v48);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v47, v53);
  return sub_100007FF0((uint64_t)v31, &qword_10031CFD8);
}

uint64_t sub_1000A113C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;

  *a1 = swift_getKeyPath(&unk_100252C08);
  v2 = sub_100003DB8(&qword_1003192E0);
  return swift_storeEnumTagMultiPayload(a1, v2, 0);
}

uint64_t sub_1000A1180@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = type metadata accessor for AppEvents();
  v3 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  v4 = EnvironmentObject.init()(v2, v3);
  v6 = v5;
  result = swift_getKeyPath(&unk_100252BE0);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_1000A11F8@<X0>(uint64_t a1@<X8>)
{
  return sub_10009F744(a1);
}

void sub_1000A123C(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10009FD24((uint64_t *)(v1 + 16), (_QWORD *)(v1 + 72), a1);
}

void sub_1000A124C(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1000A0888((__int128 *)(v1 + 16), (_QWORD *)(v1 + 72), a1);
}

uint64_t sub_1000A1258@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000A0CA0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000A1268()
{
  return EnvironmentValues.presentationMode.getter();
}

uint64_t sub_1000A1288()
{
  return EnvironmentValues.presentationMode.getter();
}

uint64_t sub_1000A12A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_100040294(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

_QWORD *sub_1000A12F0()
{
  uint64_t v0;

  return sub_1000A0B68((_QWORD *)(v0 + 16));
}

unint64_t sub_1000A1324()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t OpaqueTypeConformance2;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = qword_10031D020;
  if (!qword_10031D020)
  {
    v1 = sub_100007FAC(&qword_10031CF98);
    v2 = sub_100007FAC(&qword_10031CF88);
    v3 = sub_100007FAC(&qword_10031CFB0);
    v4 = sub_100007FAC(&qword_10031CF80);
    v8 = sub_100007FAC(&qword_10031CFA0);
    v9 = sub_1000084FC(&qword_10031CFA8, &qword_10031CFA0, (uint64_t)&unk_100256288);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v8 = v4;
    v9 = OpaqueTypeConformance2;
    v6 = swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.navigationBarBackButtonHidden(_:)>>, 1);
    v7 = sub_1000084FC(&qword_10031CFB8, &qword_10031CFB0, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v8 = v2;
    v9 = v3;
    v10 = v6;
    v11 = v7;
    swift_getOpaqueTypeConformance2(&v8, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031D020);
  }
  return result;
}

uint64_t destroy for TryOutEndButton(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  return swift_release(a1[6]);
}

uint64_t initializeWithCopy for TryOutEndButton(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v7 = a2[4];
  *(_QWORD *)(a1 + 32) = v7;
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  v8 = a2[6];
  *(_QWORD *)(a1 + 48) = v8;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  return a1;
}

uint64_t *assignWithCopy for TryOutEndButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_retain(v8);
  swift_release(v9);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  v10 = a1[6];
  v11 = a2[6];
  a1[6] = v11;
  swift_retain(v11);
  swift_release(v10);
  return a1;
}

uint64_t *assignWithTake for TryOutEndButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = a2[4];
  v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_release(v8);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  v9 = a1[6];
  a1[6] = a2[6];
  swift_release(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for TryOutEndButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TryOutEndButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TryOutEndButton()
{
  return &type metadata for TryOutEndButton;
}

uint64_t sub_1000A16C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100298990, 1);
}

uint64_t sub_1000A16D4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char v103[16];
  uint64_t v104;
  __int128 v105;
  Swift::String v106;
  unsigned __int8 v107;
  uint64_t v108;
  uint64_t v109;
  Swift::String v110;

  v2 = v1;
  v102 = a1;
  v3 = type metadata accessor for KeyboardShortcut(0);
  v100 = *(_QWORD *)(v3 - 8);
  v101 = v3;
  __chkstk_darwin(v3, v4);
  v99 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ButtonBorderShape(0);
  v97 = *(_QWORD *)(v6 - 8);
  v98 = v6;
  __chkstk_darwin(v6, v7);
  v94 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for BorderedProminentButtonStyle(0);
  v90 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89, v9);
  v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_100319400);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_100003DB8(&qword_100318730);
  v85 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83, v16);
  v18 = (char *)&v81 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100003DB8(&qword_100319408);
  v87 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88, v19);
  v21 = (char *)&v81 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100003DB8(&qword_100319410);
  __chkstk_darwin(v82, v22);
  v24 = (char *)&v81 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100003DB8(&qword_100319418);
  v95 = *(_QWORD *)(v25 - 8);
  v96 = v25;
  __chkstk_darwin(v25, v26);
  v86 = (char *)&v81 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100003DB8(&qword_10031D028);
  __chkstk_darwin(v92, v28);
  v30 = (char *)&v81 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100003DB8(&qword_10031D030);
  __chkstk_darwin(v93, v31);
  v91 = (uint64_t)&v81 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v110._object = (void *)0x8000000100263E40;
  v34._countAndFlagsBits = 6581829;
  v34._object = (void *)0xE300000000000000;
  v35._countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  v110._countAndFlagsBits = 0xD000000000000082;
  v36 = NSLocalizedString(_:tableName:bundle:value:comment:)(v34, (Swift::String_optional)0, (NSBundle)v33, v35, v110);

  v106 = v36;
  v37 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v15, 1, 1, v37);
  v38 = swift_allocObject(&unk_1002EC1A0, 72, 7);
  v39 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v38 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v38 + 32) = v39;
  *(_OWORD *)(v38 + 48) = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v38 + 64) = *(_QWORD *)(v2 + 48);
  sub_1000A2318((uint64_t *)v2);
  v84 = sub_10002B3F4();
  v40 = Button<>.init<A>(_:role:action:)(&v106, v15, sub_1000A22CC, v38, &type metadata for String, v84);
  BorderedProminentButtonStyle.init()(v40);
  v41 = sub_1000084FC(&qword_100318738, &qword_100318730, (uint64_t)&protocol conformance descriptor for Button<A>);
  v42 = sub_1000052EC(&qword_100318960, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v43 = v83;
  v44 = v89;
  View.buttonStyle<A>(_:)(v11, v83, v89, v41, v42);
  (*(void (**)(char *, uint64_t))(v90 + 8))(v11, v44);
  v45 = (*(uint64_t (**)(char *, uint64_t))(v85 + 8))(v18, v43);
  v46 = v94;
  static ButtonBorderShape.roundedRectangle.getter(v45);
  KeyPath = swift_getKeyPath(&unk_100252D78);
  v48 = v82;
  v49 = (uint64_t *)&v24[*(int *)(v82 + 36)];
  v50 = sub_100003DB8(&qword_100318968);
  v52 = v97;
  v51 = v98;
  (*(void (**)(char *, char *, uint64_t))(v97 + 16))((char *)v49 + *(int *)(v50 + 28), v46, v98);
  *v49 = KeyPath;
  v53 = v87;
  v54 = v88;
  (*(void (**)(char *, char *, uint64_t))(v87 + 16))(v24, v21, v88);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v46, v51);
  v55 = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v21, v54);
  v56 = v99;
  static KeyboardShortcut.defaultAction.getter(v55);
  v57 = sub_10004784C();
  v58 = v86;
  View.keyboardShortcut(_:)(v56, v48, v57);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v56, v101);
  v59 = sub_100007FF0((uint64_t)v24, &qword_100319410);
  v60 = static Color.white.getter(v59);
  v61 = Color.opacity(_:)(0.8);
  swift_release(v60);
  v62 = swift_getKeyPath(&unk_100252DA8);
  v64 = v95;
  v63 = v96;
  (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v30, v58, v96);
  v65 = (uint64_t *)&v30[*(int *)(v92 + 36)];
  *v65 = v62;
  v65[1] = v61;
  (*(void (**)(char *, uint64_t))(v64 + 8))(v58, v63);
  v66 = *(_QWORD *)(v2 + 32);
  v67 = swift_getKeyPath(&unk_100252DD8);
  v68 = v91;
  sub_1000A23CC((uint64_t)v30, v91);
  v69 = v93;
  v70 = (uint64_t *)(v68 + *(int *)(v93 + 36));
  *v70 = v67;
  v70[1] = v66;
  swift_retain(v66);
  sub_100007FF0((uint64_t)v30, &qword_10031D028);
  v108 = sub_1000A1DDC();
  v109 = v71;
  v105 = *(_OWORD *)(v2 + 40);
  v72 = sub_100003DB8(&qword_100316780);
  State.projectedValue.getter(&v106, v72);
  v75 = v106;
  object = v75._object;
  countAndFlagsBits = v75._countAndFlagsBits;
  v76 = v107;
  v104 = v2;
  v77 = sub_100003DB8(&qword_10031D038);
  v78 = sub_1000A241C();
  v79 = sub_1000084FC(&qword_10031D050, &qword_10031D038, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  View.alert<A, B>(_:isPresented:actions:)(&v108, countAndFlagsBits, object, v76, sub_1000A2414, v103, v69, &type metadata for String, v77, v78, v84, v79);
  swift_release(object);
  swift_release(countAndFlagsBits);
  swift_bridgeObjectRelease(v109);
  return sub_100007FF0(v68, &qword_10031D030);
}

uint64_t sub_1000A1DDC()
{
  uint64_t v0;
  uint64_t v1;
  unsigned int v2;
  int v3;
  id v4;
  unint64_t v5;
  const char *v6;
  unint64_t v7;
  Swift::String v8;
  unint64_t v9;
  uint64_t countAndFlagsBits;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = *(unsigned __int16 *)(v1 + 56);
    v3 = *(_WORD *)(v1 + 56);
    v4 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    if (v3 || v2 >> 9 > 0x7E || (v2 & 0xC000) != 0x4000)
    {
      v5 = 0xD000000000000031;
      v15 = 0x8000000100267D10;
      v6 = "Do you want to end the Satellite Connection demo?";
    }
    else
    {
      v5 = 0xD00000000000002ALL;
      v15 = 0x8000000100267D70;
      v6 = "Do you want to end the Emergency SOS demo?";
    }
    v7 = (unint64_t)(v6 - 32) | 0x8000000000000000;
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v9 = 0xD000000000000023;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v5, (Swift::String_optional)0, (NSBundle)v4, v8, *(Swift::String *)(&v15 - 1))._countAndFlagsBits;

    return countAndFlagsBits;
  }
  else
  {
    v12 = *(_QWORD *)(v0 + 24);
    v13 = type metadata accessor for TryOutModel(0);
    v14 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v12, v13, v14);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A1F28@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  void *v22;
  id v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  id v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;

  v47 = a2;
  v3 = sub_100003DB8(&qword_100319400);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_100318730);
  v45 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7, v8);
  v46 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9, v11);
  v14 = (char *)&v44 - v13;
  v16 = __chkstk_darwin(v12, v15);
  v18 = (char *)&v44 - v17;
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v44 - v20;
  v22 = (void *)objc_opt_self(NSBundle);
  v23 = objc_msgSend(v22, "mainBundle");
  v49._object = (void *)0x8000000100267C60;
  v24._countAndFlagsBits = 0x656D75736552;
  v24._object = (void *)0xE600000000000000;
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v49._countAndFlagsBits = 0xD00000000000002CLL;
  v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v49);

  v48 = v26;
  static ButtonRole.cancel.getter(v27, v28);
  v29 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v6, 0, 1, v29);
  v30 = sub_10002B3F4();
  Button<>.init<A>(_:role:action:)(&v48, v6, ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter, 0, &type metadata for String, v30);
  v31 = objc_msgSend(v22, "mainBundle");
  v50._countAndFlagsBits = 0xD000000000000037;
  v50._object = (void *)0x8000000100267C90;
  v32._countAndFlagsBits = 0x6F6D654420646E45;
  v32._object = (void *)0xE800000000000000;
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, (Swift::String_optional)0, (NSBundle)v31, v33, v50);

  v48 = v34;
  v35 = swift_allocObject(&unk_1002EC1C8, 72, 7);
  v36 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v35 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v35 + 32) = v36;
  *(_OWORD *)(v35 + 48) = *(_OWORD *)(a1 + 32);
  *(_QWORD *)(v35 + 64) = *(_QWORD *)(a1 + 48);
  sub_1000A2318((uint64_t *)a1);
  Button<>.init<A>(_:action:)(&v48, sub_10004796C, v35, &type metadata for String, v30);
  v37 = v45;
  v38 = *(void (**)(char *, char *, uint64_t))(v45 + 16);
  v38(v14, v21, v7);
  v39 = v46;
  v38(v46, v18, v7);
  v40 = v47;
  v38(v47, v14, v7);
  v41 = sub_100003DB8(&qword_10031D058);
  v38(&v40[*(int *)(v41 + 48)], v39, v7);
  v42 = *(void (**)(char *, uint64_t))(v37 + 8);
  v42(v18, v7);
  v42(v21, v7);
  v42(v39, v7);
  return ((uint64_t (*)(char *, uint64_t))v42)(v14, v7);
}

uint64_t sub_1000A2288@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A16D4(a1);
}

uint64_t sub_1000A22CC()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;

  v4 = *(_OWORD *)(v0 + 56);
  v3 = 1;
  v1 = sub_100003DB8(&qword_100316780);
  return State.wrappedValue.setter(&v3, v1);
}

uint64_t *sub_1000A2318(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  swift_retain(a1[6]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t sub_1000A2374@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.tintColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000A239C(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.tintColor.setter(v1);
}

uint64_t sub_1000A23CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031D028);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000A2414@<X0>(char *a1@<X8>)
{
  uint64_t v1;

  return sub_1000A1F28(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000A241C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031D040;
  if (!qword_10031D040)
  {
    v1 = sub_100007FAC(&qword_10031D030);
    sub_1000A24A0();
    sub_1000084FC(&qword_100316C00, &qword_100316C08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031D040);
  }
  return result;
}

unint64_t sub_1000A24A0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10031D048;
  if (!qword_10031D048)
  {
    v1 = sub_100007FAC(&qword_10031D028);
    v2[0] = sub_100007FAC(&qword_100319410);
    v2[1] = sub_10004784C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.keyboardShortcut(_:)>>, 1);
    sub_1000084FC(&qword_100316C00, &qword_100316C08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031D048);
  }
  return result;
}

uint64_t sub_1000A2550()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000A258C()
{
  _QWORD v1[6];

  v1[0] = sub_100007FAC(&qword_10031D030);
  v1[1] = &type metadata for String;
  v1[2] = sub_100007FAC(&qword_10031D038);
  v1[3] = sub_1000A241C();
  v1[4] = sub_10002B3F4();
  v1[5] = sub_1000084FC(&qword_10031D050, &qword_10031D038, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.alert<A, B>(_:isPresented:actions:)>>, 1);
}

ValueMetadata *type metadata accessor for DismissEndSessionScreenButtonView()
{
  return &type metadata for DismissEndSessionScreenButtonView;
}

uint64_t sub_1000A2640(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002989D4, 1);
}

uint64_t sub_1000A2650@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  id v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t KeyPath;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  char *v65;
  id v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t result;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  Swift::String v109;
  Swift::String v110;

  v98 = a1;
  v99 = a2;
  v86 = a3;
  v85 = sub_100003DB8(&qword_100316A20);
  __chkstk_darwin(v85, v3);
  v97 = (char *)&v84 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for KeyboardShortcut(0);
  v107 = *(_QWORD *)(v5 - 8);
  v108 = v5;
  __chkstk_darwin(v5, v6);
  v106 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for ButtonBorderShape(0);
  v103 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105, v8);
  v100 = (char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for BorderedProminentButtonStyle(0);
  v11 = *(_QWORD *)(v10 - 8);
  v94 = v10;
  v95 = v11;
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v84 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003DB8(&qword_100319400);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100003DB8(&qword_100318730);
  v90 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89, v19);
  v21 = (char *)&v84 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100003DB8(&qword_100319408);
  v92 = *(_QWORD *)(v22 - 8);
  v93 = v22;
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v84 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100003DB8(&qword_100319410);
  __chkstk_darwin(v88, v26);
  v28 = (char *)&v84 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100003DB8(&qword_100319418);
  v102 = *(_QWORD *)(v104 - 8);
  __chkstk_darwin(v104, v29);
  v91 = (char *)&v84 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_100003DB8(&qword_10031D060);
  __chkstk_darwin(v101, v31);
  v96 = (char *)&v84 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_100003DB8(&qword_10031D068);
  __chkstk_darwin(v87, v33);
  v35 = (char *)&v84 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v110._object = (void *)0x8000000100267DA0;
  v37._countAndFlagsBits = 1701736260;
  v37._object = (void *)0xE400000000000000;
  v38._countAndFlagsBits = 0;
  v38._object = (void *)0xE000000000000000;
  v110._countAndFlagsBits = 0xD00000000000009DLL;
  v39 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, (Swift::String_optional)0, (NSBundle)v36, v38, v110);

  v109 = v39;
  v40 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v18, 1, 1, v40);
  v41 = swift_allocObject(&unk_1002EC2C0, 32, 7);
  v43 = v98;
  v42 = v99;
  *(_QWORD *)(v41 + 16) = v98;
  *(_QWORD *)(v41 + 24) = v42;
  v44 = sub_10002B3F4();
  swift_retain(v43);
  v45 = v18;
  v46 = (uint64_t)v97;
  v47 = Button<>.init<A>(_:role:action:)(&v109, v45, sub_1000A2E50, v41, &type metadata for String, v44);
  BorderedProminentButtonStyle.init()(v47);
  v48 = sub_1000084FC(&qword_100318738, &qword_100318730, (uint64_t)&protocol conformance descriptor for Button<A>);
  v49 = sub_1000052EC(&qword_100318960, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v50 = v89;
  v51 = v94;
  View.buttonStyle<A>(_:)(v14, v89, v94, v48, v49);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v14, v51);
  v52 = (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v21, v50);
  v53 = v100;
  static ButtonBorderShape.roundedRectangle.getter(v52);
  KeyPath = swift_getKeyPath(&unk_100252E88);
  v55 = v88;
  v56 = (uint64_t *)&v28[*(int *)(v88 + 36)];
  v57 = sub_100003DB8(&qword_100318968);
  v58 = v103;
  v59 = v105;
  (*(void (**)(char *, char *, uint64_t))(v103 + 16))((char *)v56 + *(int *)(v57 + 28), v53, v105);
  *v56 = KeyPath;
  v61 = v92;
  v60 = v93;
  (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v28, v25, v93);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v53, v59);
  v62 = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(v25, v60);
  v63 = v106;
  static KeyboardShortcut.defaultAction.getter(v62);
  v64 = sub_10004784C();
  v65 = v91;
  View.keyboardShortcut(_:)(v63, v55, v64);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v63, v108);
  sub_100007FF0((uint64_t)v28, &qword_100319410);
  v66 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray3Color");
  v67 = Color.init(uiColor:)(v66);
  v68 = swift_getKeyPath(&unk_100252EB8);
  v109._countAndFlagsBits = v67;
  v69 = swift_retain(v67);
  v70 = AnyShapeStyle.init<A>(_:)(&v109, &type metadata for Color, &protocol witness table for Color, v69);
  v71 = v102;
  v72 = (uint64_t)v96;
  v73 = v104;
  (*(void (**)(char *, char *, uint64_t))(v102 + 16))(v96, v65, v104);
  swift_release(v67);
  v74 = (uint64_t *)(v72 + *(int *)(v101 + 36));
  *v74 = v68;
  v74[1] = v70;
  v75 = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v65, v73);
  v76 = static Color.white.getter(v75);
  sub_1000A2E68(v72, (uint64_t)v35);
  v77 = v87;
  *(_QWORD *)&v35[*(int *)(v87 + 36)] = v76;
  sub_100007FF0(v72, &qword_10031D060);
  v78 = enum case for DynamicTypeSize.xxLarge(_:);
  v79 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 104))(v46, v78, v79);
  v80 = sub_1000052EC(&qword_100316A30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v46, v46, v79, v80);
  if ((result & 1) != 0)
  {
    v82 = sub_1000A2EB0();
    v83 = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    View.dynamicTypeSize<A>(_:)(v46, v77, v85, v82, v83);
    sub_100007FF0(v46, &qword_100316A20);
    return sub_100007FF0((uint64_t)v35, &qword_10031D068);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A2D78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 24);
    swift_retain(v2);
    v3 = sub_100003DB8(&qword_10032B0E0);
    v4 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v3, v4);
    return swift_release(v2);
  }
  else
  {
    v7 = type metadata accessor for AppEvents();
    v8 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    result = EnvironmentObject.error()(0, a2, v7, v8);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A2E24@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1000A2650(*v1, v1[1], a1);
}

uint64_t sub_1000A2E2C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000A2E50()
{
  uint64_t v0;

  return sub_1000A2D78(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_1000A2E68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031D060);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000A2EB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031D070;
  if (!qword_10031D070)
  {
    v1 = sub_100007FAC(&qword_10031D068);
    sub_1000A2F34();
    sub_1000084FC(&qword_10031AB08, &qword_10031AB10, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031D070);
  }
  return result;
}

unint64_t sub_1000A2F34()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10031D078;
  if (!qword_10031D078)
  {
    v1 = sub_100007FAC(&qword_10031D060);
    v2[0] = sub_100007FAC(&qword_100319410);
    v2[1] = sub_10004784C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.keyboardShortcut(_:)>>, 1);
    sub_1000084FC(&qword_100318880, &qword_100318888, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031D078);
  }
  return result;
}

uint64_t sub_1000A2FE0()
{
  _QWORD v1[4];

  v1[0] = sub_100007FAC(&qword_10031D068);
  v1[1] = sub_100007FAC(&qword_100316A20);
  v1[2] = sub_1000A2EB0();
  v1[3] = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
}

ValueMetadata *type metadata accessor for BuiltInEmergencyForkContentView()
{
  return &type metadata for BuiltInEmergencyForkContentView;
}

uint64_t sub_1000A3078(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100298A18, 1);
}

uint64_t sub_1000A3088@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[8];
  _BYTE v22[135];
  char v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = *(_QWORD **)(v1 + 16);
  if (v4)
  {
    v5 = v4[9];
    v6 = v4[10];
    sub_100007BBC(v4 + 6, v5);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 24))(v24, v5, v6);
    v7 = v25;
    v8 = v26;
    sub_100007BBC(v24, v25);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 232))(v7, v8);
    v11 = v10;
    v12 = static HorizontalAlignment.center.getter(v9);
    sub_1000A3224(v2, (uint64_t)v21);
    *(_OWORD *)&v22[71] = v21[4];
    *(_OWORD *)&v22[87] = v21[5];
    *(_OWORD *)&v22[103] = v21[6];
    *(_OWORD *)&v22[119] = v21[7];
    *(_OWORD *)&v22[7] = v21[0];
    *(_OWORD *)&v22[23] = v21[1];
    *(_OWORD *)&v22[39] = v21[2];
    *(_OWORD *)&v22[55] = v21[3];
    *(_QWORD *)(a1 + 8) = v11;
    v13 = *(_OWORD *)&v22[64];
    *(_OWORD *)(a1 + 97) = *(_OWORD *)&v22[80];
    v14 = *(_OWORD *)&v22[112];
    *(_OWORD *)(a1 + 113) = *(_OWORD *)&v22[96];
    *(_OWORD *)(a1 + 129) = v14;
    v15 = *(_OWORD *)v22;
    *(_OWORD *)(a1 + 33) = *(_OWORD *)&v22[16];
    v16 = *(_OWORD *)&v22[48];
    *(_OWORD *)(a1 + 49) = *(_OWORD *)&v22[32];
    *(_OWORD *)(a1 + 65) = v16;
    v23 = 0;
    *(_QWORD *)a1 = v12;
    *(_BYTE *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)&v22[127];
    *(_OWORD *)(a1 + 81) = v13;
    *(_OWORD *)(a1 + 17) = v15;
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v24);
  }
  else
  {
    v18 = *(_QWORD *)(v1 + 24);
    v19 = type metadata accessor for UIMetrics();
    v20 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v18, v19, v20);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A3224@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  id v5;
  Swift::String v6;
  Swift::String_optional v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String *v11;
  __n128 v12;
  _OWORD *v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  Swift::String v21;
  Swift::String_optional v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  char v26;
  _OWORD *v27;
  __int128 v28;
  __int128 v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  Swift::String v36;
  Swift::String v37;

  v4 = (void *)objc_opt_self(NSBundle);
  v5 = objc_msgSend(v4, "mainBundle");
  v6._countAndFlagsBits = 0xD000000000000013;
  v36._countAndFlagsBits = 0xD00000000000004ALL;
  v36._object = (void *)0x80000001002640F0;
  v6._object = (void *)0x8000000100262940;
  v7.value._countAndFlagsBits = 0xD000000000000012;
  v7.value._object = (void *)0x80000001002621B0;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, (NSBundle)v5, v8, v36);

  v10 = type metadata accessor for OptionPresentation();
  v11 = (Swift::String *)swift_allocObject(v10, 72, 7);
  v11[1] = v9;
  v11[3]._countAndFlagsBits = 0;
  v11[3]._object = 0;
  v11[4]._countAndFlagsBits = static Color.clear.getter(v12);
  v11[2]._countAndFlagsBits = 0;
  v11[2]._object = 0;
  v13 = (_OWORD *)swift_allocObject(&unk_1002EC3C0, 96, 7);
  v14 = *(_OWORD *)(a1 + 48);
  v13[3] = *(_OWORD *)(a1 + 32);
  v13[4] = v14;
  v13[5] = *(_OWORD *)(a1 + 64);
  v15 = *(_OWORD *)(a1 + 16);
  v13[1] = *(_OWORD *)a1;
  v13[2] = v15;
  sub_10004B5FC((uint64_t *)a1);
  v16 = type metadata accessor for UIMetrics();
  v17 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v18 = EnvironmentObject.init()(v16, v17);
  v32 = v19;
  v33 = v18;
  v20 = objc_msgSend(v4, "mainBundle");
  v37._countAndFlagsBits = 0xD000000000000044;
  v37._object = (void *)0x8000000100264140;
  v21._countAndFlagsBits = 0x636E656772656D45;
  v21._object = (void *)0xE900000000000079;
  v22.value._countAndFlagsBits = 0xD000000000000012;
  v22.value._object = (void *)0x80000001002621B0;
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, (NSBundle)v20, v23, v37);

  v34 = *(_OWORD *)(a1 + 64);
  v25 = sub_100003DB8(&qword_100316780);
  State.wrappedValue.getter(&v35, v25);
  v26 = v35;
  v27 = (_OWORD *)swift_allocObject(&unk_1002EC3E8, 96, 7);
  v28 = *(_OWORD *)(a1 + 48);
  v27[3] = *(_OWORD *)(a1 + 32);
  v27[4] = v28;
  v27[5] = *(_OWORD *)(a1 + 64);
  v29 = *(_OWORD *)(a1 + 16);
  v27[1] = *(_OWORD *)a1;
  v27[2] = v29;
  sub_10004B5FC((uint64_t *)a1);
  result = EnvironmentObject.init()(v16, v17);
  *(_DWORD *)(a2 + 105) = v34;
  *(_DWORD *)(a2 + 108) = *(_DWORD *)((char *)&v34 + 3);
  *(_QWORD *)a2 = v33;
  *(_QWORD *)(a2 + 8) = v32;
  *(_QWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = sub_10004B670;
  *(_QWORD *)(a2 + 48) = v13;
  *(_QWORD *)(a2 + 56) = result;
  *(_QWORD *)(a2 + 64) = v31;
  *(Swift::String *)(a2 + 72) = v24;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0xE000000000000000;
  *(_BYTE *)(a2 + 104) = v26;
  *(_QWORD *)(a2 + 112) = sub_1000A36EC;
  *(_QWORD *)(a2 + 120) = v27;
  return result;
}

_QWORD *sub_1000A34C8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  __int128 v16;

  v1 = v0;
  v2 = *v0;
  if (*v0)
  {
    v3 = *(_QWORD *)(v2 + 104);
    *(_QWORD *)&v16 = v1[4];
    v4 = v16;
    swift_retain(v3);
    swift_retain(v16);
    PassthroughSubject.send(_:)(&v16);
    swift_release(v4);
    swift_release(v3);
    v16 = *((_OWORD *)v1 + 4);
    v14 = *((_OWORD *)v1 + 4);
    v5 = sub_100003DB8(&qword_100316780);
    result = State.wrappedValue.getter(&v15, v5);
    if ((v15 & 1) == 0)
    {
      v14 = v16;
      v15 = 1;
      State.wrappedValue.setter(&v15, v5);
      v7 = *(_QWORD *)(v2 + 120);
      v8 = (_OWORD *)swift_allocObject(&unk_1002EC410, 96, 7);
      v9 = *((_OWORD *)v1 + 3);
      v8[3] = *((_OWORD *)v1 + 2);
      v8[4] = v9;
      v8[5] = *((_OWORD *)v1 + 4);
      v10 = *((_OWORD *)v1 + 1);
      v8[1] = *(_OWORD *)v1;
      v8[2] = v10;
      *(_QWORD *)&v14 = sub_1000A3710;
      *((_QWORD *)&v14 + 1) = v8;
      swift_retain(v7);
      sub_10004B5FC(v1);
      PassthroughSubject.send(_:)(&v14);
      swift_release(v8);
      return (_QWORD *)swift_release(v7);
    }
  }
  else
  {
    v11 = v0[1];
    v12 = type metadata accessor for AppEvents();
    v13 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    result = (_QWORD *)EnvironmentObject.error()(0, v11, v12, v13);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A3630(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char v6;
  __int128 v7;
  ValueMetadata *v8;

  v3 = *(_QWORD *)(a2 + 40);
  v8 = &type metadata for RecordedForkAnswer;
  LOWORD(v7) = 257;
  sub_1000B35F8(v3, (uint64_t)&v7);
  sub_10004B678((uint64_t)&v7);
  v7 = *(_OWORD *)(a2 + 64);
  v6 = 0;
  v4 = sub_100003DB8(&qword_100316780);
  return State.wrappedValue.setter(&v6, v4);
}

uint64_t sub_1000A36A4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000A3088(a1);
}

_QWORD *sub_1000A36EC()
{
  return sub_1000A34C8();
}

uint64_t sub_1000A3710(uint64_t a1)
{
  uint64_t v1;

  return sub_1000A3630(a1, v1 + 16);
}

unint64_t sub_1000A371C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031D080;
  if (!qword_10031D080)
  {
    v1 = sub_100007FAC(&qword_10031D088);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10031D080);
  }
  return result;
}

id sub_1000A3768()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  char *v15;
  id v16;
  id v17;
  unint64_t v18;
  _QWORD *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  Swift::String v23;
  __n128 v24;
  _QWORD *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  id v35;
  id v36;
  _QWORD *v37;
  unint64_t v38;
  Swift::String v39;
  __n128 v40;
  _QWORD *v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  objc_class *v46;
  id v47;
  uint64_t v48;
  id v49;
  uint64_t v50;
  id v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  _QWORD *v55;
  id v56;
  id v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  objc_super v74;
  _QWORD *v75;
  unint64_t v76;

  v72 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v67 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72, v1);
  v71 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v69, v3);
  v70 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v5, v6);
  v68 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource_locationAuthorizationChanged;
  v9 = sub_100003DB8(&qword_10031D150);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v10 = v0;
  *(_QWORD *)&v0[v8] = PassthroughSubject.init()(v11);
  v12 = OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource_locationReceived;
  v13 = sub_100003DB8(&qword_10032B270);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  *(_QWORD *)&v10[v12] = PassthroughSubject.init()(v14);
  *(_QWORD *)&v10[OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__locationManager] = 0;
  v15 = &v10[OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__lastLocationReceived];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 1;
  v66 = (id)objc_opt_self(NSBundle);
  v16 = objc_msgSend(v66, "mainBundle");
  v17 = objc_msgSend(v16, "bundleIdentifier");

  v18 = 0x8000000100260990;
  if (v17)
  {
    v19 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;

  }
  else
  {
    v19 = (_QWORD *)0xD000000000000012;
    v21 = 0x8000000100260990;
  }
  v22 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v75 = v19;
  v76 = v21;
  swift_bridgeObjectRetain(v21);
  v23._countAndFlagsBits = 0xD000000000000019;
  v23._object = (void *)0x8000000100267F20;
  String.append(_:)(v23);
  v24 = swift_bridgeObjectRelease(v21);
  v25 = v75;
  v26 = v76;
  v27 = v68;
  static DispatchQoS.unspecified.getter(v24);
  v75 = _swiftEmptyArrayStorage;
  v28 = sub_1000052EC((unint64_t *)&unk_1003178B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v29 = sub_100003DB8((uint64_t *)&unk_100324AE0);
  v30 = sub_10000F138((unint64_t *)&unk_1003178C0, (uint64_t *)&unk_100324AE0);
  v31 = v70;
  v63 = v30;
  v64 = v29;
  v65 = v28;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v29, v30, v69, v28);
  v32 = enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:);
  v33 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 104);
  v34 = v71;
  v33(v71, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v72);
  v67 = v22;
  *(_QWORD *)&v10[OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__managerQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v25, v26, v27, v31, v34, 0);
  v35 = objc_msgSend(v66, "mainBundle");
  v36 = objc_msgSend(v35, "bundleIdentifier");

  if (v36)
  {
    v37 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v18 = v38;

  }
  else
  {
    v37 = (_QWORD *)0xD000000000000012;
  }
  v75 = v37;
  v76 = v18;
  swift_bridgeObjectRetain(v18);
  v39._countAndFlagsBits = 0xD00000000000001ALL;
  v39._object = (void *)0x8000000100267F40;
  String.append(_:)(v39);
  v40 = swift_bridgeObjectRelease(v18);
  v41 = v75;
  v42 = v76;
  v43 = v68;
  static DispatchQoS.unspecified.getter(v40);
  v75 = _swiftEmptyArrayStorage;
  v44 = v70;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v64, v63, v69, v65);
  v45 = v71;
  v33(v71, v32, v72);
  *(_QWORD *)&v10[OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__callbackQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v41, v42, v43, v44, v45, 0);

  v46 = (objc_class *)type metadata accessor for GeoLocationSource();
  v74.receiver = v10;
  v74.super_class = v46;
  v47 = objc_msgSendSuper2(&v74, "init");
  v48 = qword_100315820;
  v49 = v47;
  if (v48 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v50 = type metadata accessor for Logger(0);
  sub_10000D744(v50, (uint64_t)qword_10033FD18);
  v51 = v49;
  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc(12, -1);
    v55 = (_QWORD *)swift_slowAlloc(32, -1);
    v75 = v55;
    *(_DWORD *)v54 = 136446210;
    v72 = (uint64_t)(v54 + 4);
    v56 = v51;
    v57 = objc_msgSend(v56, "description");
    v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
    v60 = v59;

    v73 = sub_100172BEC(v58, v60, (uint64_t *)&v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v72, v54 + 12);

    swift_bridgeObjectRelease(v60);
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "init: %{public}s", v54, 0xCu);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v54, -1, -1);

  }
  else
  {

  }
  return v51;
}

id sub_1000A3D74()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  objc_class *v12;
  uint64_t v14;
  uint64_t v15;
  objc_super v16;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD18);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v15 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v14 = sub_100172BEC(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "deinit: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v12 = (objc_class *)type metadata accessor for GeoLocationSource();
  v16.receiver = v2;
  v16.super_class = v12;
  return objc_msgSendSuper2(&v16, "dealloc");
}

uint64_t type metadata accessor for GeoLocationSource()
{
  return objc_opt_self(_TtC8SOSBuddy17GeoLocationSource);
}

uint64_t sub_1000A4008()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  char v16;
  uint64_t result;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  void *v21;
  id v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];
  uint64_t v31;
  void *v32;
  _QWORD aBlock[5];
  uint64_t v34;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v31 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (_QWORD *)((char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v15 = static OS_dispatch_queue.main.getter();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  v16 = _dispatchPreconditionTest(_:)(v15);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v16 & 1) != 0)
  {
    v30[1] = *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__managerQueue);
    v18 = swift_allocObject(&unk_1002EC4F0, 24, 7);
    swift_unknownObjectWeakInit(v18 + 16, v1);
    v19 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__callbackQueue);
    v20 = swift_allocObject(&unk_1002EC658, 32, 7);
    *(_QWORD *)(v20 + 16) = v18;
    *(_QWORD *)(v20 + 24) = v19;
    aBlock[4] = sub_1000A5874;
    v34 = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001BAACC;
    aBlock[3] = &unk_1002EC670;
    v21 = _Block_copy(aBlock);
    swift_retain(v18);
    v22 = v19;
    static DispatchQoS.unspecified.getter(v23);
    v32 = &_swiftEmptyArrayStorage;
    v24 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v25 = v7;
    v26 = v3;
    v27 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v28 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v27, v28, v2, v24);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v21);
    _Block_release(v21);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v6, v2);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v10, v25);
    v29 = v34;
    swift_release(v18);
    return swift_release(v29);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000A42DC(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  id v6;
  id v7;
  NSObject *v8;
  NSString v9;
  id v10;
  void *v11;
  NSObject *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  _BYTE v22[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v22, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = objc_allocWithZone((Class)CLLocationManager);
    v7 = a2;
    v8 = v5;
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v6, "initWithEffectiveBundlePath:delegate:onQueue:", v9, v8, v7);

    if (v10)
    {
      objc_msgSend(v10, "setDesiredAccuracy:", kCLLocationAccuracyThreeKilometers);
      v11 = *(Class *)((char *)&v8->isa + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__locationManager);
      *(Class *)((char *)&v8->isa + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__locationManager) = (Class)v10;
      v12 = v10;

      if (qword_100315880 != -1)
        swift_once(&qword_100315880, sub_1000D9790);
      v13 = type metadata accessor for Logger(0);
      v14 = sub_10000D744(v13, (uint64_t)qword_10033FE38);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "CLLocationManager instance created", v17, 2u);
        swift_slowDealloc(v17, -1, -1);

LABEL_14:
        return;
      }

    }
    else
    {
      if (qword_100315880 != -1)
        swift_once(&qword_100315880, sub_1000D9790);
      v18 = type metadata accessor for Logger(0);
      v19 = sub_10000D744(v18, (uint64_t)qword_10033FE38);
      v15 = Logger.logObject.getter(v19);
      v20 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v21 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v20, "Failed to create CLLocationManager instance", v21, 2u);
        swift_slowDealloc(v21, -1, -1);
        v12 = v8;
        goto LABEL_14;
      }
      v12 = v15;
    }
    v15 = v8;
    goto LABEL_14;
  }
}

uint64_t sub_1000A4558()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __n128 v16;
  char v17;
  uint64_t result;
  uint64_t v19;
  void *v20;
  id v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD aBlock[5];
  uint64_t v29;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v26 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (uint64_t *)((char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v15 = static OS_dispatch_queue.main.getter(v16);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  v17 = _dispatchPreconditionTest(_:)(v15);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v17 & 1) != 0)
  {
    v19 = swift_allocObject(&unk_1002EC608, 24, 7);
    *(_QWORD *)(v19 + 16) = v1;
    aBlock[4] = sub_1000A5830;
    v29 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001BAACC;
    aBlock[3] = &unk_1002EC620;
    v20 = _Block_copy(aBlock);
    v21 = v1;
    static DispatchQoS.unspecified.getter(v22);
    v27 = _swiftEmptyArrayStorage;
    v23 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v24 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v25 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v27, v24, v25, v2, v23);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v5, v20);
    _Block_release(v20);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    return swift_release(v29);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A47DC()
{
  return sub_1000A4814("startUpdatingLocation", (uint64_t)sub_1000A57EC, (uint64_t)&unk_1002EC5D0);
}

uint64_t sub_1000A47F8()
{
  return sub_1000A4814("stopUpdatingLocation", (uint64_t)sub_1000A57CC, (uint64_t)&unk_1002EC5A8);
}

uint64_t sub_1000A4814(const char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  const char *v21;
  uint64_t v22;
  uint8_t *v23;
  uint8_t *v24;
  uint64_t v25;
  void *v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD aBlock[5];
  uint64_t v38;

  v7 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v34 - 8);
  __chkstk_darwin(v34, v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315880 != -1)
    swift_once(&qword_100315880, sub_1000D9790);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10000D744(v16, (uint64_t)qword_10033FE38);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc(2, -1);
    v21 = a1;
    v22 = a3;
    v23 = v20;
    *(_WORD *)v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, v21, v20, 2u);
    v24 = v23;
    a3 = v22;
    swift_slowDealloc(v24, -1, -1);
  }

  v25 = swift_allocObject(&unk_1002EC4F0, 24, 7);
  swift_unknownObjectWeakInit(v25 + 16, v7);
  aBlock[4] = a2;
  v38 = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = a3;
  v26 = _Block_copy(aBlock);
  v27 = swift_retain(v25);
  static DispatchQoS.unspecified.getter(v27);
  v36 = &_swiftEmptyArrayStorage;
  v28 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v29 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v30 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v29, v30, v8, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v11, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v34);
  v31 = v38;
  swift_release(v25);
  return swift_release(v31);
}

void sub_1000A4AC4(uint64_t a1, SEL *a2)
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  id v6;
  _BYTE v7[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = *(id *)(Strong + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__locationManager);

    objc_msgSend(v6, *a2);
  }
}

uint64_t sub_1000A4B40(uint64_t a1, double a2, double a3)
{
  uint64_t v5;
  uint64_t result;
  void *v7;
  uint64_t v8;
  _QWORD v9[2];
  _BYTE v10[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v5);
  if (result)
  {
    v7 = (void *)result;
    v8 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource_locationReceived);
    swift_retain(v8);

    *(double *)v9 = a2;
    *(double *)&v9[1] = a3;
    PassthroughSubject.send(_:)(v9);
    return swift_release(v8);
  }
  return result;
}

uint64_t sub_1000A4C3C(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unsigned int v32;
  unsigned int v33;
  __n128 v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  char *v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t aBlock[5];
  uint64_t v55;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v51 = *(_QWORD *)(v8 - 8);
  v52 = v8;
  __chkstk_darwin(v8, v9);
  v49 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchPredicate(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (uint64_t *)((char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v50 = v1;
  v16 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__callbackQueue);
  *v15 = v16;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v12 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v11);
  v17 = v16;
  v18 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v12 + 8))(v15, v11);
  if ((v18 & 1) != 0)
  {
    if (qword_100315880 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315880, sub_1000D9790);
LABEL_3:
  v47 = v7;
  v48 = v4;
  v19 = type metadata accessor for Logger(0);
  sub_10000D744(v19, (uint64_t)qword_10033FE38);
  v20 = a1;
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v46 = v3;
    v25 = v24;
    aBlock[0] = v24;
    *(_DWORD *)v23 = 136315138;
    LODWORD(v53) = objc_msgSend(v20, "authorizationStatus");
    type metadata accessor for CLAuthorizationStatus(0);
    v28 = String.init<A>(describing:)(&v53, v26, v27);
    v30 = v29;
    v53 = sub_100172BEC(v28, v29, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, aBlock, v23 + 4, v23 + 12);

    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Location authorization received - %s", v23, 0xCu);
    swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
    v31 = v25;
    v3 = v46;
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

  }
  v32 = objc_msgSend(v20, "authorizationStatus");
  v33 = (v32 < 5) & (0x19u >> v32);
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v35 = (void *)static OS_dispatch_queue.main.getter(v34);
  v36 = swift_allocObject(&unk_1002EC4F0, 24, 7);
  swift_unknownObjectWeakInit(v36 + 16, v50);
  v37 = swift_allocObject(&unk_1002EC518, 25, 7);
  *(_QWORD *)(v37 + 16) = v36;
  *(_BYTE *)(v37 + 24) = v33;
  aBlock[4] = (uint64_t)sub_1000A51D8;
  v55 = v37;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1001BAACC;
  aBlock[3] = (uint64_t)&unk_1002EC530;
  v38 = _Block_copy(aBlock);
  swift_release(v55);
  v39 = v49;
  static DispatchQoS.unspecified.getter(v40);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v41 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v42 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v43 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
  v44 = v47;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v42, v43, v3, v41);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v39, v44, v38);
  _Block_release(v38);

  (*(void (**)(char *, uint64_t))(v48 + 8))(v44, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v39, v52);
}

uint64_t sub_1000A50A4(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  char v7;
  _BYTE v8[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = (void *)result;
    v6 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource_locationAuthorizationChanged);
    swift_retain(v6);

    v7 = a2 & 1;
    PassthroughSubject.send(_:)(&v7);
    return swift_release(v6);
  }
  return result;
}

ValueMetadata *type metadata accessor for GeoLocation2D()
{
  return &type metadata for GeoLocation2D;
}

uint64_t sub_1000A5190()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000A51B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1000A51D8()
{
  uint64_t v0;

  return sub_1000A50A4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_1000A51E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000A51F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1000A51FC(uint64_t a1)
{
  uint64_t v1;
  double v2;
  double v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  id v20;
  char v21;
  uint64_t v22;
  id v23;
  void *v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __n128 v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  char *v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  double aBlock;
  _QWORD v62[4];
  uint64_t v63;

  v4 = v1;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v55 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v58 = *(_QWORD *)(v11 - 8);
  v59 = v11;
  __chkstk_darwin(v11, v12);
  v57 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (uint64_t *)((char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = *(void **)(v4 + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__callbackQueue);
  *v18 = v19;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14);
  v20 = v19;
  v21 = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v18, v14);
  if ((v21 & 1) != 0)
  {
    if (!((unint64_t)a1 >> 62))
    {
      v22 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(a1);
      if (v22)
        goto LABEL_4;
      goto LABEL_19;
    }
  }
  else
  {
    __break(1u);
  }
  if (a1 < 0)
    v49 = a1;
  else
    v49 = a1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(a1);
  if (_CocoaArrayWrapper.endIndex.getter(v49))
  {
LABEL_4:
    if ((a1 & 0xC000000000000001) != 0)
    {
      v23 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a1);
    }
    else
    {
      if (!*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_27:
        swift_once(&qword_100315880, sub_1000D9790);
LABEL_11:
        v28 = type metadata accessor for Logger(0);
        v29 = sub_10000D744(v28, (uint64_t)qword_10033FE38);
        v30 = Logger.logObject.getter(v29);
        v31 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v30, v31))
        {
          v32 = (uint8_t *)swift_slowAlloc(12, -1);
          v33 = swift_slowAlloc(32, -1);
          v60 = v33;
          v56 = v10;
          *(_DWORD *)v32 = 136315138;
          aBlock = v2;
          *(double *)v62 = v3;
          type metadata accessor for CLLocationCoordinate2D(0);
          v36 = String.init<A>(describing:)(&aBlock, v34, v35);
          v38 = v37;
          aBlock = COERCE_DOUBLE(sub_100172BEC(v36, v37, &v60));
          v10 = v56;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v62, v32 + 4, v32 + 12);
          swift_bridgeObjectRelease(v38);
          _os_log_impl((void *)&_mh_execute_header, v30, v31, "Location update received - %s", v32, 0xCu);
          swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v33, -1, -1);
          swift_slowDealloc(v32, -1, -1);
        }

        sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
        v40 = (void *)static OS_dispatch_queue.main.getter(v39);
        v41 = swift_allocObject(&unk_1002EC4F0, 24, 7);
        swift_unknownObjectWeakInit(v41 + 16, v4);
        v42 = swift_allocObject(&unk_1002EC568, 40, 7);
        *(_QWORD *)(v42 + 16) = v41;
        *(double *)(v42 + 24) = v2;
        *(double *)(v42 + 32) = v3;
        v62[3] = sub_1000A57C0;
        v63 = v42;
        aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
        v62[0] = 1107296256;
        v62[1] = sub_1001BAACC;
        v62[2] = &unk_1002EC580;
        v43 = _Block_copy(&aBlock);
        swift_release(v63);
        v44 = v57;
        static DispatchQoS.unspecified.getter(v45);
        aBlock = COERCE_DOUBLE(_swiftEmptyArrayStorage);
        v46 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v47 = sub_100003DB8((uint64_t *)&unk_1003178D0);
        v48 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
        dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v47, v48, v6, v46);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v44, v10, v43);
        _Block_release(v43);

        (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
        (*(void (**)(char *, uint64_t))(v58 + 8))(v44, v59);
        return;
      }
      v23 = *(id *)(a1 + 32);
    }
    v24 = v23;
    objc_msgSend(v23, "coordinate", swift_bridgeObjectRelease(a1).n128_f64[0]);
    v2 = v25;
    v3 = v26;

    v27 = v4 + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__lastLocationReceived;
    if ((*(_BYTE *)(v4 + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__lastLocationReceived + 16) & 1) == 0
      && *(double *)v27 == v2
      && *(double *)(v27 + 8) == v3)
    {
      return;
    }
    *(double *)v27 = v2;
    *(double *)(v27 + 8) = v3;
    *(_BYTE *)(v27 + 16) = 0;
    if (qword_100315880 == -1)
      goto LABEL_11;
    goto LABEL_27;
  }
LABEL_19:
  swift_bridgeObjectRelease(a1);
  if (qword_100315880 != -1)
    swift_once(&qword_100315880, sub_1000D9790);
  v50 = type metadata accessor for Logger(0);
  v51 = sub_10000D744(v50, (uint64_t)qword_10033FE38);
  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v54 = 0;
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Empty location update received", v54, 2u);
    swift_slowDealloc(v54, -1, -1);
  }

}

uint64_t sub_1000A579C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000A57C0()
{
  uint64_t v0;

  return sub_1000A4B40(*(_QWORD *)(v0 + 16), *(double *)(v0 + 24), *(double *)(v0 + 32));
}

void sub_1000A57CC()
{
  uint64_t v0;

  sub_1000A4AC4(v0, (SEL *)&selRef_stopUpdatingLocation);
}

void sub_1000A57EC()
{
  uint64_t v0;

  sub_1000A4AC4(v0, (SEL *)&selRef_startUpdatingLocation);
}

uint64_t sub_1000A580C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_1000A5830()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__locationManager);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource__locationManager) = 0;

}

uint64_t sub_1000A5848()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

void sub_1000A5874()
{
  uint64_t v0;

  sub_1000A42DC(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t type metadata accessor for OptionSelected()
{
  return objc_opt_self(_TtC8SOSBuddyP33_998197E6B99497641197639F17908B3114OptionSelected);
}

uint64_t sub_1000A58C4()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  id v6;
  Swift::String v7;
  Swift::String_optional v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  Swift::String v20[2];
  _QWORD *v21;
  _QWORD v22[3];
  Swift::String v23;
  Swift::String v24;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v23._countAndFlagsBits = 0xD00000000000002BLL;
  v2._countAndFlagsBits = 0xD000000000000038;
  v23._object = (void *)0x8000000100267FF0;
  v2._object = (void *)0x80000001002684E0;
  v3.value._countAndFlagsBits = 0xD000000000000017;
  v3.value._object = (void *)0x8000000100267FB0;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v23);

  v6 = objc_msgSend(v0, "mainBundle");
  v7._countAndFlagsBits = 0xD00000000000002FLL;
  v24._countAndFlagsBits = 0xD00000000000005ALL;
  v24._object = (void *)0x8000000100268550;
  v7._object = (void *)0x8000000100268520;
  v8.value._countAndFlagsBits = 0xD000000000000017;
  v8.value._object = (void *)0x8000000100267FB0;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)v6, v9, v24);

  v20[0] = v5;
  v20[1] = v10;
  v21 = _swiftEmptyArrayStorage;
  v11 = type metadata accessor for BuiltInCondition();
  memset(v22, 0, sizeof(v22));
  v12 = swift_allocObject(v11, 17, 7);
  *(_BYTE *)(v12 + 16) = 4;
  v13 = type metadata accessor for NotCondition();
  v14 = swift_allocObject(v13, 32, 7);
  v15 = sub_100003DB8(&qword_100328A00);
  v16 = swift_allocObject(v15, 40, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10024E820;
  *(_QWORD *)(v16 + 32) = v12;
  v19 = v16;
  specialized Array._endMutation()(v16);
  *(_BYTE *)(v14 + 16) = 2;
  *(_QWORD *)(v14 + 24) = v19;
  v17 = type metadata accessor for Question();
  swift_allocObject(v17, 160, 7);
  return sub_100085664(0x434E454752454D45, 0xEE004B524F465F59, 3, (uint64_t)v20, (uint64_t)_swiftEmptyArrayStorage, v14, (uint64_t)&off_1002E0620, 3);
}

uint64_t sub_1000A5AEC()
{
  id v0;
  Swift::String v1;
  Swift::String_optional v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD v13[3];
  Swift::String v14;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1._countAndFlagsBits = 0xD000000000000023;
  v14._countAndFlagsBits = 0xD00000000000002BLL;
  v14._object = (void *)0x8000000100267FF0;
  v1._object = (void *)0x80000001002684B0;
  v2.value._object = (void *)0x8000000100267FB0;
  v2.value._countAndFlagsBits = 0xD000000000000017;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v14);

  v9 = v4;
  v10 = 0;
  v11 = 0xE000000000000000;
  v12 = _swiftEmptyArrayStorage;
  v5 = type metadata accessor for BuiltInCondition();
  memset(v13, 0, sizeof(v13));
  v6 = swift_allocObject(v5, 17, 7);
  *(_BYTE *)(v6 + 16) = 7;
  v7 = type metadata accessor for Question();
  swift_allocObject(v7, 160, 7);
  return sub_100085664(0x505F5443454C4553, 0xEF52454449564F52, 3, (uint64_t)&v9, (uint64_t)_swiftEmptyArrayStorage, v6, (uint64_t)&off_1002E0648, 4);
}

uint64_t sub_1000A5C3C()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  Swift::String v22;
  Swift::String_optional v23;
  Swift::String v24;
  Swift::String v25;
  __n128 v26;
  uint64_t v27;
  Swift::String *v28;
  uint64_t v29;
  id v30;
  Swift::String v31;
  Swift::String_optional v32;
  Swift::String v33;
  Swift::String v34;
  __n128 v35;
  uint64_t v36;
  Swift::String *v37;
  uint64_t v38;
  id v39;
  Swift::String v40;
  Swift::String_optional v41;
  Swift::String v42;
  Swift::String v43;
  __n128 v44;
  uint64_t v45;
  Swift::String *v46;
  uint64_t v47;
  id v48;
  Swift::String v49;
  Swift::String_optional v50;
  Swift::String v51;
  Swift::String v52;
  __n128 v53;
  uint64_t v54;
  Swift::String *v55;
  uint64_t v56;
  id v57;
  Swift::String v58;
  Swift::String_optional v59;
  Swift::String v60;
  Swift::String v61;
  __n128 v62;
  uint64_t v63;
  Swift::String *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  Swift::String v70;
  uint64_t v71;
  unint64_t v72;
  _UNKNOWN **v73;
  __int128 v74;
  unint64_t v75;
  Swift::String v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;
  Swift::String v82;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v2._countAndFlagsBits = 0xD000000000000021;
  v76._countAndFlagsBits = 0xD00000000000002BLL;
  v76._object = (void *)0x8000000100267FF0;
  v2._object = (void *)0x8000000100268390;
  v3.value._countAndFlagsBits = 0xD000000000000017;
  v3.value._object = (void *)0x8000000100267FB0;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v76);

  v70 = v5;
  v71 = 0;
  v72 = 0xE000000000000000;
  v73 = &off_1002E0670;
  v74 = xmmword_100253010;
  v75 = 0xEA00000000005245;
  v6 = sub_100003DB8(&qword_100328A00);
  v7 = swift_allocObject(v6, 80, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100253020;
  v8 = v0;
  v9 = objc_msgSend(v0, "mainBundle");
  v77._object = (void *)0x80000001002683C0;
  v10._countAndFlagsBits = 0x4F2064656B636F4CLL;
  v10._object = (void *)0xEA00000000007475;
  v11.value._countAndFlagsBits = 0xD000000000000017;
  v11.value._object = (void *)0x8000000100267FB0;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v77._countAndFlagsBits = 0xD00000000000003BLL;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v77);

  v15 = static Color.clear.getter(v14);
  v16 = type metadata accessor for OptionPresentation();
  v17 = (Swift::String *)swift_allocObject(v16, 72, 7);
  v17[1] = v13;
  v17[3]._countAndFlagsBits = 0;
  v17[3]._object = 0;
  v17[4]._countAndFlagsBits = v15;
  v18 = type metadata accessor for Option();
  v17[2]._countAndFlagsBits = 0;
  v17[2]._object = 0;
  v19 = v18;
  v20 = swift_allocObject(v18, 56, 7);
  *(_QWORD *)(v20 + 16) = 0x4B434C5F45505954;
  *(_QWORD *)(v20 + 24) = 0xE900000000000044;
  *(_QWORD *)(v20 + 32) = v17;
  *(_BYTE *)(v20 + 40) = 0;
  *(_QWORD *)(v20 + 48) = 40;
  *(_QWORD *)(v7 + 32) = v20;
  v21 = objc_msgSend(v8, "mainBundle");
  v22._countAndFlagsBits = 0xD000000000000011;
  v78._object = (void *)0x80000001002683C0;
  v22._object = (void *)0x8000000100268400;
  v23.value._countAndFlagsBits = 0xD000000000000017;
  v23.value._object = (void *)0x8000000100267FB0;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v78._countAndFlagsBits = 0xD00000000000003BLL;
  v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, v23, (NSBundle)v21, v24, v78);

  v27 = static Color.clear.getter(v26);
  v28 = (Swift::String *)swift_allocObject(v16, 72, 7);
  v28[1] = v25;
  v28[3]._countAndFlagsBits = 0;
  v28[3]._object = 0;
  v28[4]._countAndFlagsBits = v27;
  v28[2]._countAndFlagsBits = 0;
  v28[2]._object = 0;
  v29 = swift_allocObject(v19, 56, 7);
  *(_QWORD *)(v29 + 16) = 0x4555465F45505954;
  *(_QWORD *)(v29 + 24) = 0xE90000000000004CLL;
  *(_QWORD *)(v29 + 32) = v28;
  *(_BYTE *)(v29 + 40) = 0;
  *(_QWORD *)(v29 + 48) = 40;
  *(_QWORD *)(v7 + 40) = v29;
  v30 = objc_msgSend(v8, "mainBundle");
  v31._object = (void *)0xE900000000000065;
  v79._object = (void *)0x80000001002683C0;
  v31._countAndFlagsBits = 0x7269542074616C46;
  v32.value._countAndFlagsBits = 0xD000000000000017;
  v32.value._object = (void *)0x8000000100267FB0;
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  v79._countAndFlagsBits = 0xD00000000000003BLL;
  v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, v32, (NSBundle)v30, v33, v79);

  v36 = static Color.clear.getter(v35);
  v37 = (Swift::String *)swift_allocObject(v16, 72, 7);
  v37[1] = v34;
  v37[3]._countAndFlagsBits = 0;
  v37[3]._object = 0;
  v37[4]._countAndFlagsBits = v36;
  v37[2]._countAndFlagsBits = 0;
  v37[2]._object = 0;
  v38 = swift_allocObject(v19, 56, 7);
  *(_QWORD *)(v38 + 16) = 0x414C465F45505954;
  *(_QWORD *)(v38 + 24) = 0xE900000000000054;
  *(_QWORD *)(v38 + 32) = v37;
  *(_BYTE *)(v38 + 40) = 0;
  *(_QWORD *)(v38 + 48) = 40;
  *(_QWORD *)(v7 + 48) = v38;
  v39 = objc_msgSend(v8, "mainBundle");
  v40._countAndFlagsBits = 0xD000000000000016;
  v80._object = (void *)0x80000001002683C0;
  v40._object = (void *)0x8000000100268420;
  v41.value._countAndFlagsBits = 0xD000000000000017;
  v41.value._object = (void *)0x8000000100267FB0;
  v42._countAndFlagsBits = 0;
  v42._object = (void *)0xE000000000000000;
  v80._countAndFlagsBits = 0xD00000000000003BLL;
  v43 = NSLocalizedString(_:tableName:bundle:value:comment:)(v40, v41, (NSBundle)v39, v42, v80);

  v45 = static Color.clear.getter(v44);
  v46 = (Swift::String *)swift_allocObject(v16, 72, 7);
  v46[1] = v43;
  v46[3]._countAndFlagsBits = 0;
  v46[3]._object = 0;
  v46[4]._countAndFlagsBits = v45;
  v46[2]._countAndFlagsBits = 0;
  v46[2]._object = 0;
  v47 = swift_allocObject(v19, 56, 7);
  strcpy((char *)(v47 + 16), "TYPE_WONTSTRT");
  *(_WORD *)(v47 + 30) = -4864;
  *(_QWORD *)(v47 + 32) = v46;
  *(_BYTE *)(v47 + 40) = 0;
  *(_QWORD *)(v47 + 48) = 40;
  *(_QWORD *)(v7 + 56) = v47;
  v48 = objc_msgSend(v8, "mainBundle");
  v81._object = (void *)0x80000001002683C0;
  v49._countAndFlagsBits = 0x20656C6369686556;
  v49._object = (void *)0xED00006B63757453;
  v50.value._countAndFlagsBits = 0xD000000000000017;
  v50.value._object = (void *)0x8000000100267FB0;
  v51._countAndFlagsBits = 0;
  v51._object = (void *)0xE000000000000000;
  v81._countAndFlagsBits = 0xD00000000000003BLL;
  v52 = NSLocalizedString(_:tableName:bundle:value:comment:)(v49, v50, (NSBundle)v48, v51, v81);

  v54 = static Color.clear.getter(v53);
  v55 = (Swift::String *)swift_allocObject(v16, 72, 7);
  v55[1] = v52;
  v55[3]._countAndFlagsBits = 0;
  v55[3]._object = 0;
  v55[4]._countAndFlagsBits = v54;
  v55[2]._countAndFlagsBits = 0;
  v55[2]._object = 0;
  v56 = swift_allocObject(v19, 56, 7);
  *(_QWORD *)(v56 + 16) = 0x5554535F45505954;
  *(_QWORD *)(v56 + 24) = 0xEA00000000004B43;
  *(_QWORD *)(v56 + 32) = v55;
  *(_BYTE *)(v56 + 40) = 0;
  *(_QWORD *)(v56 + 48) = 40;
  *(_QWORD *)(v7 + 64) = v56;
  v57 = objc_msgSend(v8, "mainBundle");
  v82._countAndFlagsBits = 0xD000000000000066;
  v82._object = (void *)0x8000000100268440;
  v58._countAndFlagsBits = 0x734920726568744FLL;
  v58._object = (void *)0xEB00000000657573;
  v59.value._countAndFlagsBits = 0xD000000000000017;
  v59.value._object = (void *)0x8000000100267FB0;
  v60._countAndFlagsBits = 0;
  v60._object = (void *)0xE000000000000000;
  v61 = NSLocalizedString(_:tableName:bundle:value:comment:)(v58, v59, (NSBundle)v57, v60, v82);

  v63 = static Color.clear.getter(v62);
  v64 = (Swift::String *)swift_allocObject(v16, 72, 7);
  v64[1] = v61;
  v64[3]._countAndFlagsBits = 0;
  v64[3]._object = 0;
  v64[4]._countAndFlagsBits = v63;
  v64[2]._countAndFlagsBits = 0;
  v64[2]._object = 0;
  v65 = swift_allocObject(v19, 56, 7);
  *(_QWORD *)(v65 + 16) = 0x48544F5F45505954;
  *(_QWORD *)(v65 + 24) = 0xEA00000000005245;
  *(_QWORD *)(v65 + 32) = v64;
  *(_BYTE *)(v65 + 40) = 0;
  *(_QWORD *)(v65 + 48) = 40;
  *(_QWORD *)(v7 + 72) = v65;
  specialized Array._endMutation()(v65);
  v66 = type metadata accessor for NoPrerequisites();
  v67 = swift_allocObject(v66, 16, 7);
  v68 = type metadata accessor for Question();
  swift_allocObject(v68, 160, 7);
  return sub_100085664(1162893652, 0xE400000000000000, 0, (uint64_t)&v70, v7, v67, (uint64_t)&off_1002E0698, 7);
}

uint64_t sub_1000A6364()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Swift::String v9;
  Swift::String_optional v10;
  Swift::String v11;
  Swift::String v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  Swift::String v20;
  Swift::String_optional v21;
  Swift::String v22;
  Swift::String v23;
  __n128 v24;
  uint64_t v25;
  Swift::String *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD v37[3];
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v2._countAndFlagsBits = 0xD000000000000028;
  v38._countAndFlagsBits = 0xD00000000000002BLL;
  v38._object = (void *)0x8000000100267FF0;
  v2._object = (void *)0x8000000100268320;
  v3.value._countAndFlagsBits = 0xD000000000000017;
  v3.value._object = (void *)0x8000000100267FB0;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v38);

  v33 = v5;
  v34 = 0;
  v35 = 0xE000000000000000;
  v36 = _swiftEmptyArrayStorage;
  memset(v37, 0, sizeof(v37));
  v6 = sub_100003DB8(&qword_100328A00);
  v7 = swift_allocObject(v6, 48, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100252A40;
  v8 = objc_msgSend(v0, "mainBundle");
  v39._object = (void *)0x8000000100268350;
  v9._countAndFlagsBits = 0x492064656B636F4CLL;
  v9._object = (void *)0xED0000656469736ELL;
  v10.value._countAndFlagsBits = 0xD000000000000017;
  v10.value._object = (void *)0x8000000100267FB0;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v39._countAndFlagsBits = 0xD000000000000036;
  v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v39);

  v14 = static Color.clear.getter(v13);
  v15 = type metadata accessor for OptionPresentation();
  v16 = (Swift::String *)swift_allocObject(v15, 72, 7);
  v16[1] = v12;
  v16[3]._countAndFlagsBits = 0;
  v16[3]._object = 0;
  v16[4]._countAndFlagsBits = v14;
  v17 = type metadata accessor for Option();
  v16[2]._countAndFlagsBits = 0;
  v16[2]._object = 0;
  v18 = swift_allocObject(v17, 56, 7);
  strcpy((char *)(v18 + 16), "LCKD_KEYS_VHCL");
  *(_BYTE *)(v18 + 31) = -18;
  *(_QWORD *)(v18 + 32) = v16;
  *(_BYTE *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 48) = 40;
  *(_QWORD *)(v7 + 32) = v18;
  v19 = objc_msgSend(v0, "mainBundle");
  v40._object = (void *)0x8000000100268350;
  v20._countAndFlagsBits = 0x72656877656D6F53;
  v20._object = (void *)0xEE0065736C452065;
  v21.value._countAndFlagsBits = 0xD000000000000017;
  v21.value._object = (void *)0x8000000100267FB0;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v40._countAndFlagsBits = 0xD000000000000036;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, (NSBundle)v19, v22, v40);

  v25 = static Color.clear.getter(v24);
  v26 = (Swift::String *)swift_allocObject(v15, 72, 7);
  v26[1] = v23;
  v26[3]._countAndFlagsBits = 0;
  v26[3]._object = 0;
  v26[4]._countAndFlagsBits = v25;
  v26[2]._countAndFlagsBits = 0;
  v26[2]._object = 0;
  v27 = swift_allocObject(v17, 56, 7);
  strcpy((char *)(v27 + 16), "LCKD_KEYS_LOST");
  *(_BYTE *)(v27 + 31) = -18;
  *(_QWORD *)(v27 + 32) = v26;
  *(_BYTE *)(v27 + 40) = 0;
  *(_QWORD *)(v27 + 48) = 40;
  *(_QWORD *)(v7 + 40) = v27;
  specialized Array._endMutation()(v27);
  v28 = v7;
  v29 = type metadata accessor for OptionSelected();
  v30 = swift_allocObject(v29, 32, 7);
  *(_QWORD *)(v30 + 16) = 0x4B434C5F45505954;
  *(_QWORD *)(v30 + 24) = 0xE900000000000044;
  v31 = type metadata accessor for Question();
  swift_allocObject(v31, 160, 7);
  return sub_100085664(0x59454B5F444B434CLL, 0xE900000000000053, 0, (uint64_t)&v33, v28, v30, (uint64_t)&off_1002E06C0, 7);
}

uint64_t sub_1000A66E0()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Swift::String v9;
  Swift::String_optional v10;
  Swift::String v11;
  Swift::String v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  Swift::String v20;
  Swift::String_optional v21;
  Swift::String v22;
  Swift::String v23;
  __n128 v24;
  uint64_t v25;
  Swift::String *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD v37[3];
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v2._countAndFlagsBits = 0xD000000000000027;
  v38._countAndFlagsBits = 0xD00000000000002BLL;
  v38._object = (void *)0x8000000100267FF0;
  v2._object = (void *)0x80000001002682B0;
  v3.value._countAndFlagsBits = 0xD000000000000017;
  v3.value._object = (void *)0x8000000100267FB0;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v38);

  v33 = v5;
  v34 = 0;
  v35 = 0xE000000000000000;
  v36 = _swiftEmptyArrayStorage;
  memset(v37, 0, sizeof(v37));
  v6 = sub_100003DB8(&qword_100328A00);
  v7 = swift_allocObject(v6, 48, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100252A40;
  v8 = objc_msgSend(v0, "mainBundle");
  v9._countAndFlagsBits = 0xD000000000000015;
  v39._object = (void *)0x80000001002681B0;
  v9._object = (void *)0x80000001002682E0;
  v10.value._countAndFlagsBits = 0xD000000000000017;
  v10.value._object = (void *)0x8000000100267FB0;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v39._countAndFlagsBits = 0xD00000000000002DLL;
  v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v39);

  v14 = static Color.clear.getter(v13);
  v15 = type metadata accessor for OptionPresentation();
  v16 = (Swift::String *)swift_allocObject(v15, 72, 7);
  v16[1] = v12;
  v16[3]._countAndFlagsBits = 0;
  v16[3]._object = 0;
  v16[4]._countAndFlagsBits = v14;
  v17 = type metadata accessor for Option();
  v16[2]._countAndFlagsBits = 0;
  v16[2]._object = 0;
  v18 = swift_allocObject(v17, 56, 7);
  strcpy((char *)(v18 + 16), "FLAT_SPARE_YES");
  *(_BYTE *)(v18 + 31) = -18;
  *(_QWORD *)(v18 + 32) = v16;
  *(_BYTE *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 48) = 40;
  *(_QWORD *)(v7 + 32) = v18;
  v19 = objc_msgSend(v0, "mainBundle");
  v20._countAndFlagsBits = 0xD000000000000014;
  v40._object = (void *)0x80000001002681B0;
  v20._object = (void *)0x8000000100268300;
  v21.value._countAndFlagsBits = 0xD000000000000017;
  v21.value._object = (void *)0x8000000100267FB0;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v40._countAndFlagsBits = 0xD00000000000002DLL;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, (NSBundle)v19, v22, v40);

  v25 = static Color.clear.getter(v24);
  v26 = (Swift::String *)swift_allocObject(v15, 72, 7);
  v26[1] = v23;
  v26[3]._countAndFlagsBits = 0;
  v26[3]._object = 0;
  v26[4]._countAndFlagsBits = v25;
  v26[2]._countAndFlagsBits = 0;
  v26[2]._object = 0;
  v27 = swift_allocObject(v17, 56, 7);
  strcpy((char *)(v27 + 16), "FLAT_SPARE_NO");
  *(_WORD *)(v27 + 30) = -4864;
  *(_QWORD *)(v27 + 32) = v26;
  *(_BYTE *)(v27 + 40) = 0;
  *(_QWORD *)(v27 + 48) = 40;
  *(_QWORD *)(v7 + 40) = v27;
  specialized Array._endMutation()(v27);
  v28 = v7;
  v29 = type metadata accessor for OptionSelected();
  v30 = swift_allocObject(v29, 32, 7);
  *(_QWORD *)(v30 + 16) = 0x414C465F45505954;
  *(_QWORD *)(v30 + 24) = 0xE900000000000054;
  v31 = type metadata accessor for Question();
  swift_allocObject(v31, 160, 7);
  return sub_100085664(0x4150535F54414C46, 0xEA00000000004552, 0, (uint64_t)&v33, v28, v30, (uint64_t)&off_1002E06E8, 7);
}

uint64_t sub_1000A6A58()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  Swift::String *v17;
  uint64_t v18;
  void *v19;
  id v20;
  Swift::String v21;
  Swift::String_optional v22;
  Swift::String v23;
  Swift::String v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  Swift::String *v28;
  uint64_t v29;
  id v30;
  Swift::String v31;
  Swift::String_optional v32;
  Swift::String v33;
  Swift::String v34;
  __n128 v35;
  uint64_t v36;
  Swift::String *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  Swift::String v41;
  Swift::String_optional v42;
  Swift::String v43;
  Swift::String v44;
  __n128 v45;
  uint64_t v46;
  Swift::String *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v54;
  uint64_t comment_8;
  Swift::String v56;
  uint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD v60[3];
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v2._countAndFlagsBits = 0xD000000000000028;
  v61._countAndFlagsBits = 0xD00000000000002BLL;
  v61._object = (void *)0x8000000100267FF0;
  v2._object = (void *)0x8000000100268230;
  v3.value._countAndFlagsBits = 0xD000000000000017;
  v3.value._object = (void *)0x8000000100267FB0;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v61);

  v56 = v5;
  v57 = 0;
  v58 = 0xE000000000000000;
  v59 = _swiftEmptyArrayStorage;
  memset(v60, 0, sizeof(v60));
  v6 = sub_100003DB8(&qword_100328A00);
  v7 = swift_allocObject(v6, 64, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100251630;
  v8 = v0;
  v9 = objc_msgSend(v0, "mainBundle");
  v62._countAndFlagsBits = 0xD00000000000002CLL;
  v62._object = (void *)0x8000000100268260;
  v10._countAndFlagsBits = 0x656E696C6F736147;
  v10._object = (void *)0xE800000000000000;
  v11.value._countAndFlagsBits = 0xD000000000000017;
  v11.value._object = (void *)0x8000000100267FB0;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v62);

  v15 = static Color.clear.getter(v14);
  v16 = type metadata accessor for OptionPresentation();
  v17 = (Swift::String *)swift_allocObject(v16, 72, 7);
  v17[1] = v13;
  v17[3]._countAndFlagsBits = 0;
  v17[3]._object = 0;
  v17[4]._countAndFlagsBits = v15;
  comment_8 = type metadata accessor for Option();
  v17[2]._countAndFlagsBits = 0;
  v17[2]._object = 0;
  v18 = swift_allocObject(comment_8, 56, 7);
  strcpy((char *)(v18 + 16), "FUEL_TYPE_GAS");
  *(_WORD *)(v18 + 30) = -4864;
  *(_QWORD *)(v18 + 32) = v17;
  *(_BYTE *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 48) = 40;
  *(_QWORD *)(v7 + 32) = v18;
  v19 = v8;
  v20 = objc_msgSend(v8, "mainBundle");
  v63._object = (void *)0x8000000100268260;
  v21._countAndFlagsBits = 0x6C6573656944;
  v21._object = (void *)0xE600000000000000;
  v22.value._countAndFlagsBits = 0xD000000000000017;
  v22.value._object = (void *)0x8000000100267FB0;
  v23._countAndFlagsBits = 0;
  v23._object = (void *)0xE000000000000000;
  v63._countAndFlagsBits = 0xD00000000000002CLL;
  v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v21, v22, (NSBundle)v20, v23, v63);

  v26 = static Color.clear.getter(v25);
  v27 = v16;
  v54 = v16;
  v28 = (Swift::String *)swift_allocObject(v16, 72, 7);
  v28[1] = v24;
  v28[3]._countAndFlagsBits = 0;
  v28[3]._object = 0;
  v28[4]._countAndFlagsBits = v26;
  v28[2]._countAndFlagsBits = 0;
  v28[2]._object = 0;
  v29 = swift_allocObject(comment_8, 56, 7);
  strcpy((char *)(v29 + 16), "FUEL_TYPE_DSL");
  *(_WORD *)(v29 + 30) = -4864;
  *(_QWORD *)(v29 + 32) = v28;
  *(_BYTE *)(v29 + 40) = 0;
  *(_QWORD *)(v29 + 48) = 40;
  *(_QWORD *)(v7 + 40) = v29;
  v30 = objc_msgSend(v8, "mainBundle");
  v64._object = (void *)0x8000000100268260;
  v31._countAndFlagsBits = 0x6369727463656C45;
  v31._object = (void *)0xE800000000000000;
  v32.value._countAndFlagsBits = 0xD000000000000017;
  v32.value._object = (void *)0x8000000100267FB0;
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  v64._countAndFlagsBits = 0xD00000000000002CLL;
  v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, v32, (NSBundle)v30, v33, v64);

  v36 = static Color.clear.getter(v35);
  v37 = (Swift::String *)swift_allocObject(v27, 72, 7);
  v37[1] = v34;
  v37[3]._countAndFlagsBits = 0;
  v37[3]._object = 0;
  v37[4]._countAndFlagsBits = v36;
  v37[2]._countAndFlagsBits = 0;
  v37[2]._object = 0;
  v38 = swift_allocObject(comment_8, 56, 7);
  strcpy((char *)(v38 + 16), "FUEL_TYPE_EV");
  *(_BYTE *)(v38 + 29) = 0;
  *(_WORD *)(v38 + 30) = -5120;
  *(_QWORD *)(v38 + 32) = v37;
  *(_BYTE *)(v38 + 40) = 0;
  *(_QWORD *)(v38 + 48) = 40;
  v39 = v7;
  *(_QWORD *)(v7 + 48) = v38;
  v40 = objc_msgSend(v19, "mainBundle");
  v41._countAndFlagsBits = 0xD000000000000011;
  v65._object = (void *)0x8000000100268260;
  v41._object = (void *)0x8000000100268290;
  v42.value._countAndFlagsBits = 0xD000000000000017;
  v42.value._object = (void *)0x8000000100267FB0;
  v43._countAndFlagsBits = 0;
  v43._object = (void *)0xE000000000000000;
  v65._countAndFlagsBits = 0xD00000000000002CLL;
  v44 = NSLocalizedString(_:tableName:bundle:value:comment:)(v41, v42, (NSBundle)v40, v43, v65);

  v46 = static Color.clear.getter(v45);
  v47 = (Swift::String *)swift_allocObject(v54, 72, 7);
  v47[1] = v44;
  v47[3]._countAndFlagsBits = 0;
  v47[3]._object = 0;
  v47[4]._countAndFlagsBits = v46;
  v47[2]._countAndFlagsBits = 0;
  v47[2]._object = 0;
  v48 = swift_allocObject(comment_8, 56, 7);
  strcpy((char *)(v48 + 16), "FUEL_TYPE_OTHR");
  *(_BYTE *)(v48 + 31) = -18;
  *(_QWORD *)(v48 + 32) = v47;
  *(_BYTE *)(v48 + 40) = 0;
  *(_QWORD *)(v48 + 48) = 40;
  *(_QWORD *)(v39 + 56) = v48;
  specialized Array._endMutation()(v48);
  v49 = v39;
  v50 = type metadata accessor for OptionSelected();
  v51 = swift_allocObject(v50, 32, 7);
  *(_QWORD *)(v51 + 16) = 0x4555465F45505954;
  *(_QWORD *)(v51 + 24) = 0xE90000000000004CLL;
  v52 = type metadata accessor for Question();
  swift_allocObject(v52, 160, 7);
  return sub_100085664(0x5059545F4C455546, 0xE900000000000045, 0, (uint64_t)&v56, v49, v51, (uint64_t)&off_1002E0710, 7);
}

uint64_t sub_1000A6FA4()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Swift::String v9;
  Swift::String_optional v10;
  Swift::String v11;
  Swift::String v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  Swift::String *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  Swift::String v20;
  Swift::String_optional v21;
  Swift::String v22;
  Swift::String v23;
  __n128 v24;
  uint64_t v25;
  Swift::String *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::String v33;
  uint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  _QWORD v37[3];
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v2._countAndFlagsBits = 0xD000000000000022;
  v38._countAndFlagsBits = 0xD00000000000002BLL;
  v38._object = (void *)0x8000000100267FF0;
  v2._object = (void *)0x8000000100268200;
  v3.value._countAndFlagsBits = 0xD000000000000017;
  v3.value._object = (void *)0x8000000100267FB0;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v38);

  v33 = v5;
  v34 = 0;
  v35 = 0xE000000000000000;
  v36 = _swiftEmptyArrayStorage;
  memset(v37, 0, sizeof(v37));
  v6 = sub_100003DB8(&qword_100328A00);
  v7 = swift_allocObject(v6, 48, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100252A40;
  v8 = objc_msgSend(v0, "mainBundle");
  v39._object = (void *)0x80000001002681B0;
  v9._countAndFlagsBits = 0x724420656C696857;
  v9._object = (void *)0xED0000676E697669;
  v10.value._countAndFlagsBits = 0xD000000000000017;
  v10.value._object = (void *)0x8000000100267FB0;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v39._countAndFlagsBits = 0xD00000000000002DLL;
  v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v39);

  v14 = static Color.clear.getter(v13);
  v15 = type metadata accessor for OptionPresentation();
  v16 = (Swift::String *)swift_allocObject(v15, 72, 7);
  v16[1] = v12;
  v16[3]._countAndFlagsBits = 0;
  v16[3]._object = 0;
  v16[4]._countAndFlagsBits = v14;
  v17 = type metadata accessor for Option();
  v16[2]._countAndFlagsBits = 0;
  v16[2]._object = 0;
  v18 = swift_allocObject(v17, 56, 7);
  *(_QWORD *)(v18 + 16) = 0xD000000000000010;
  *(_QWORD *)(v18 + 24) = 0x8000000100268140;
  *(_QWORD *)(v18 + 32) = v16;
  *(_BYTE *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 48) = 40;
  *(_QWORD *)(v7 + 32) = v18;
  v19 = objc_msgSend(v0, "mainBundle");
  v40._object = (void *)0x80000001002681B0;
  v20._countAndFlagsBits = 0x745320656C696857;
  v20._object = (void *)0xED0000646570706FLL;
  v21.value._countAndFlagsBits = 0xD000000000000017;
  v21.value._object = (void *)0x8000000100267FB0;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v40._countAndFlagsBits = 0xD00000000000002DLL;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, (NSBundle)v19, v22, v40);

  v25 = static Color.clear.getter(v24);
  v26 = (Swift::String *)swift_allocObject(v15, 72, 7);
  v26[1] = v23;
  v26[3]._countAndFlagsBits = 0;
  v26[3]._object = 0;
  v26[4]._countAndFlagsBits = v25;
  v26[2]._countAndFlagsBits = 0;
  v26[2]._object = 0;
  v27 = swift_allocObject(v17, 56, 7);
  *(_QWORD *)(v27 + 16) = 0x54525453544E4F57;
  *(_QWORD *)(v27 + 24) = 0xEF4F4E5F5652445FLL;
  *(_QWORD *)(v27 + 32) = v26;
  *(_BYTE *)(v27 + 40) = 0;
  *(_QWORD *)(v27 + 48) = 40;
  *(_QWORD *)(v7 + 40) = v27;
  specialized Array._endMutation()(v27);
  v28 = v7;
  v29 = type metadata accessor for OptionSelected();
  v30 = swift_allocObject(v29, 32, 7);
  strcpy((char *)(v30 + 16), "TYPE_WONTSTRT");
  *(_WORD *)(v30 + 30) = -4864;
  v31 = type metadata accessor for Question();
  swift_allocObject(v31, 160, 7);
  return sub_100085664(0x54525453544E4F57, 0xEC0000005652445FLL, 0, (uint64_t)&v33, v28, v30, (uint64_t)&off_1002E0738, 7);
}

uint64_t sub_1000A7344()
{
  id v0;
  Swift::String v1;
  Swift::String_optional v2;
  Swift::String v3;
  Swift::String v4;
  uint64_t v5;
  id v6;
  Swift::String v7;
  Swift::String_optional v8;
  Swift::String v9;
  Swift::String v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  Swift::String v18;
  Swift::String_optional v19;
  Swift::String v20;
  Swift::String v21;
  __n128 v22;
  uint64_t v23;
  Swift::String *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v40;
  uint64_t v41;
  Swift::String v42;
  uint64_t v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD v46[3];
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;

  v40 = (id)objc_opt_self(NSBundle);
  v0 = objc_msgSend(v40, "mainBundle");
  v1._countAndFlagsBits = 0xD000000000000028;
  v47._countAndFlagsBits = 0xD00000000000002BLL;
  v47._object = (void *)0x8000000100267FF0;
  v1._object = (void *)0x8000000100268160;
  v2.value._countAndFlagsBits = 0xD000000000000017;
  v2.value._object = (void *)0x8000000100267FB0;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v4 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v47);

  v42 = v4;
  v43 = 0;
  v44 = 0xE000000000000000;
  v45 = _swiftEmptyArrayStorage;
  memset(v46, 0, sizeof(v46));
  v41 = sub_100003DB8(&qword_100328A00);
  v5 = swift_allocObject(v41, 48, 7);
  *(_OWORD *)(v5 + 16) = xmmword_100252A40;
  v6 = objc_msgSend(v40, "mainBundle");
  v48._object = (void *)0x80000001002681B0;
  v7._object = (void *)0x8000000100268190;
  v7._countAndFlagsBits = 0xD000000000000011;
  v8.value._countAndFlagsBits = 0xD000000000000017;
  v8.value._object = (void *)0x8000000100267FB0;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v48._countAndFlagsBits = 0xD00000000000002DLL;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)v6, v9, v48);

  v12 = static Color.clear.getter(v11);
  v13 = type metadata accessor for OptionPresentation();
  v14 = (Swift::String *)swift_allocObject(v13, 72, 7);
  v14[1] = v10;
  v14[3]._countAndFlagsBits = 0;
  v14[3]._object = 0;
  v14[4]._countAndFlagsBits = v12;
  v15 = type metadata accessor for Option();
  v14[2]._countAndFlagsBits = 0;
  v14[2]._object = 0;
  v16 = swift_allocObject(v15, 56, 7);
  *(_QWORD *)(v16 + 16) = 0x5345595F574F54;
  *(_QWORD *)(v16 + 24) = 0xE700000000000000;
  *(_QWORD *)(v16 + 32) = v14;
  *(_BYTE *)(v16 + 40) = 0;
  *(_QWORD *)(v16 + 48) = 40;
  *(_QWORD *)(v5 + 32) = v16;
  v17 = objc_msgSend(v40, "mainBundle");
  v49._object = (void *)0x80000001002681B0;
  v18._object = (void *)0x80000001002681E0;
  v18._countAndFlagsBits = 0xD000000000000011;
  v19.value._countAndFlagsBits = 0xD000000000000017;
  v19.value._object = (void *)0x8000000100267FB0;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v49._countAndFlagsBits = 0xD00000000000002DLL;
  v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, (NSBundle)v17, v20, v49);

  v23 = static Color.clear.getter(v22);
  v24 = (Swift::String *)swift_allocObject(v13, 72, 7);
  v24[1] = v21;
  v24[3]._countAndFlagsBits = 0;
  v24[3]._object = 0;
  v24[4]._countAndFlagsBits = v23;
  v24[2]._countAndFlagsBits = 0;
  v24[2]._object = 0;
  v25 = swift_allocObject(v15, 56, 7);
  *(_QWORD *)(v25 + 16) = 0x4F4E5F574F54;
  *(_QWORD *)(v25 + 24) = 0xE600000000000000;
  *(_QWORD *)(v25 + 32) = v24;
  *(_BYTE *)(v25 + 40) = 0;
  *(_QWORD *)(v25 + 48) = 40;
  *(_QWORD *)(v5 + 40) = v25;
  specialized Array._endMutation()(v25);
  v26 = swift_allocObject(v41, 88, 7);
  *(_OWORD *)(v26 + 16) = xmmword_100253030;
  v27 = type metadata accessor for OptionSelected();
  v28 = swift_allocObject(v27, 32, 7);
  strcpy((char *)(v28 + 16), "LCKD_KEYS_LOST");
  *(_BYTE *)(v28 + 31) = -18;
  *(_QWORD *)(v26 + 32) = v28;
  v29 = swift_allocObject(v27, 32, 7);
  strcpy((char *)(v29 + 16), "FLAT_SPARE_NO");
  *(_WORD *)(v29 + 30) = -4864;
  *(_QWORD *)(v26 + 40) = v29;
  v30 = swift_allocObject(v27, 32, 7);
  strcpy((char *)(v30 + 16), "FUEL_TYPE_EV");
  *(_BYTE *)(v30 + 29) = 0;
  *(_WORD *)(v30 + 30) = -5120;
  *(_QWORD *)(v26 + 48) = v30;
  v31 = swift_allocObject(v27, 32, 7);
  strcpy((char *)(v31 + 16), "FUEL_TYPE_OTHR");
  *(_BYTE *)(v31 + 31) = -18;
  *(_QWORD *)(v26 + 56) = v31;
  v32 = swift_allocObject(v27, 32, 7);
  *(_QWORD *)(v32 + 16) = 0xD000000000000010;
  *(_QWORD *)(v32 + 24) = 0x8000000100268140;
  *(_QWORD *)(v26 + 64) = v32;
  v33 = swift_allocObject(v27, 32, 7);
  *(_QWORD *)(v33 + 16) = 0x5554535F45505954;
  *(_QWORD *)(v33 + 24) = 0xEA00000000004B43;
  *(_QWORD *)(v26 + 72) = v33;
  v34 = swift_allocObject(v27, 32, 7);
  *(_QWORD *)(v34 + 16) = 0x48544F5F45505954;
  *(_QWORD *)(v34 + 24) = 0xEA00000000005245;
  *(_QWORD *)(v26 + 80) = v34;
  specialized Array._endMutation()(v34);
  v35 = v26;
  v36 = type metadata accessor for OrCondition();
  v37 = swift_allocObject(v36, 32, 7);
  *(_BYTE *)(v37 + 16) = 1;
  *(_QWORD *)(v37 + 24) = v35;
  v38 = type metadata accessor for Question();
  swift_allocObject(v38, 160, 7);
  return sub_100085664(5721940, 0xE300000000000000, 0, (uint64_t)&v42, v5, v37, (uint64_t)&off_1002E0760, 7);
}

uint64_t sub_1000A7824()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  Swift::String v9;
  Swift::String_optional v10;
  Swift::String v11;
  Swift::String v12;
  __n128 v13;
  uint64_t v14;
  Swift::String *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  Swift::String v20;
  Swift::String_optional v21;
  Swift::String v22;
  Swift::String v23;
  __n128 v24;
  uint64_t v25;
  Swift::String *v26;
  uint64_t v27;
  id v28;
  Swift::String v29;
  Swift::String_optional v30;
  Swift::String v31;
  Swift::String v32;
  __n128 v33;
  uint64_t v34;
  Swift::String *v35;
  uint64_t v36;
  id v37;
  Swift::String v38;
  Swift::String_optional v39;
  Swift::String v40;
  Swift::String v41;
  __n128 v42;
  uint64_t v43;
  Swift::String *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v50;
  Swift::String v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD v55[3];
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::String v59;
  Swift::String v60;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v2._countAndFlagsBits = 0xD00000000000002BLL;
  v56._object = (void *)0x8000000100267FF0;
  v2._object = (void *)0x80000001002680A0;
  v3.value._countAndFlagsBits = 0xD000000000000017;
  v3.value._object = (void *)0x8000000100267FB0;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v56._countAndFlagsBits = 0xD00000000000002BLL;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v56);

  v51 = v5;
  v52 = 0;
  v53 = 0xE000000000000000;
  v54 = _swiftEmptyArrayStorage;
  memset(v55, 0, sizeof(v55));
  v6 = sub_100003DB8(&qword_100328A00);
  v7 = swift_allocObject(v6, 64, 7);
  *(_OWORD *)(v7 + 16) = xmmword_100251630;
  v8 = objc_msgSend(v0, "mainBundle");
  v57._object = (void *)0x80000001002680D0;
  v9._countAndFlagsBits = 0x6E6F737265502031;
  v9._object = (void *)0xE800000000000000;
  v10.value._countAndFlagsBits = 0xD000000000000017;
  v10.value._object = (void *)0x8000000100267FB0;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v57._countAndFlagsBits = 0xD00000000000004DLL;
  v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v57);

  v14 = static Color.clear.getter(v13);
  v50 = type metadata accessor for OptionPresentation();
  v15 = (Swift::String *)swift_allocObject(v50, 72, 7);
  v15[1] = v12;
  v15[3]._countAndFlagsBits = 0;
  v15[3]._object = 0;
  v15[4]._countAndFlagsBits = v14;
  v16 = type metadata accessor for Option();
  v15[2]._countAndFlagsBits = 0;
  v15[2]._object = 0;
  v17 = v16;
  v18 = swift_allocObject(v16, 56, 7);
  *(_QWORD *)(v18 + 16) = 0x5F45444952574F54;
  *(_QWORD *)(v18 + 24) = 0xE900000000000031;
  *(_QWORD *)(v18 + 32) = v15;
  *(_BYTE *)(v18 + 40) = 0;
  *(_QWORD *)(v18 + 48) = 40;
  *(_QWORD *)(v7 + 32) = v18;
  v19 = objc_msgSend(v0, "mainBundle");
  v58._object = (void *)0x80000001002680D0;
  v20._countAndFlagsBits = 0x656C706F65502032;
  v20._object = (void *)0xE800000000000000;
  v21.value._countAndFlagsBits = 0xD000000000000017;
  v21.value._object = (void *)0x8000000100267FB0;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  v58._countAndFlagsBits = 0xD00000000000004DLL;
  v23 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, v21, (NSBundle)v19, v22, v58);

  v25 = static Color.clear.getter(v24);
  v26 = (Swift::String *)swift_allocObject(v50, 72, 7);
  v26[1] = v23;
  v26[3]._countAndFlagsBits = 0;
  v26[3]._object = 0;
  v26[4]._countAndFlagsBits = v25;
  v26[2]._countAndFlagsBits = 0;
  v26[2]._object = 0;
  v27 = swift_allocObject(v17, 56, 7);
  *(_QWORD *)(v27 + 16) = 0x5F45444952574F54;
  *(_QWORD *)(v27 + 24) = 0xE900000000000032;
  *(_QWORD *)(v27 + 32) = v26;
  *(_BYTE *)(v27 + 40) = 0;
  *(_QWORD *)(v27 + 48) = 40;
  *(_QWORD *)(v7 + 40) = v27;
  v28 = objc_msgSend(v0, "mainBundle");
  v29._countAndFlagsBits = 0xD000000000000010;
  v59._object = (void *)0x80000001002680D0;
  v29._object = (void *)0x8000000100268120;
  v30.value._countAndFlagsBits = 0xD000000000000017;
  v30.value._object = (void *)0x8000000100267FB0;
  v31._countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  v59._countAndFlagsBits = 0xD00000000000004DLL;
  v32 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, v30, (NSBundle)v28, v31, v59);

  v34 = static Color.clear.getter(v33);
  v35 = (Swift::String *)swift_allocObject(v50, 72, 7);
  v35[1] = v32;
  v35[3]._countAndFlagsBits = 0;
  v35[3]._object = 0;
  v35[4]._countAndFlagsBits = v34;
  v35[2]._countAndFlagsBits = 0;
  v35[2]._object = 0;
  v36 = swift_allocObject(v17, 56, 7);
  strcpy((char *)(v36 + 16), "TOWRIDE_3PLUS");
  *(_WORD *)(v36 + 30) = -4864;
  *(_QWORD *)(v36 + 32) = v35;
  *(_BYTE *)(v36 + 40) = 0;
  *(_QWORD *)(v36 + 48) = 40;
  *(_QWORD *)(v7 + 48) = v36;
  v37 = objc_msgSend(v0, "mainBundle");
  v60._object = (void *)0x80000001002680D0;
  v38._countAndFlagsBits = 0x2065646952206F4ELL;
  v38._object = (void *)0xEE0064656465654ELL;
  v39.value._countAndFlagsBits = 0xD000000000000017;
  v39.value._object = (void *)0x8000000100267FB0;
  v40._countAndFlagsBits = 0;
  v40._object = (void *)0xE000000000000000;
  v60._countAndFlagsBits = 0xD00000000000004DLL;
  v41 = NSLocalizedString(_:tableName:bundle:value:comment:)(v38, v39, (NSBundle)v37, v40, v60);

  v43 = static Color.clear.getter(v42);
  v44 = (Swift::String *)swift_allocObject(v50, 72, 7);
  v44[1] = v41;
  v44[3]._countAndFlagsBits = 0;
  v44[3]._object = 0;
  v44[4]._countAndFlagsBits = v43;
  v44[2]._countAndFlagsBits = 0;
  v44[2]._object = 0;
  v45 = swift_allocObject(v17, 56, 7);
  *(_QWORD *)(v45 + 16) = 0x5F45444952574F54;
  *(_QWORD *)(v45 + 24) = 0xEA00000000004F4ELL;
  *(_QWORD *)(v45 + 32) = v44;
  *(_BYTE *)(v45 + 40) = 0;
  *(_QWORD *)(v45 + 48) = 40;
  *(_QWORD *)(v7 + 56) = v45;
  specialized Array._endMutation()(v45);
  v46 = type metadata accessor for QuestionCondition();
  v47 = swift_allocObject(v46, 40, 7);
  *(_BYTE *)(v47 + 16) = 0;
  *(_QWORD *)(v47 + 24) = 5721940;
  *(_QWORD *)(v47 + 32) = 0xE300000000000000;
  v48 = type metadata accessor for Question();
  swift_allocObject(v48, 160, 7);
  return sub_100085664(0x45444952574F54, 0xE700000000000000, 0, (uint64_t)&v51, v7, v47, (uint64_t)&off_1002E0788, 7);
}

uint64_t sub_1000A7D58()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  id v6;
  Swift::String v7;
  Swift::String_optional v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  Swift::String v15[2];
  _QWORD *v16;
  _QWORD v17[3];
  Swift::String v18;
  Swift::String v19;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v2._countAndFlagsBits = 0xD00000000000001ALL;
  v18._countAndFlagsBits = 0xD00000000000002BLL;
  v18._object = (void *)0x8000000100267FF0;
  v2._object = (void *)0x8000000100267FD0;
  v3.value._countAndFlagsBits = 0xD000000000000017;
  v3.value._object = (void *)0x8000000100267FB0;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v18);

  v6 = objc_msgSend(v0, "mainBundle");
  v19._countAndFlagsBits = 0xD000000000000024;
  v7._countAndFlagsBits = 0xD00000000000004FLL;
  v19._object = (void *)0x8000000100268070;
  v7._object = (void *)0x8000000100268020;
  v8.value._countAndFlagsBits = 0xD000000000000017;
  v8.value._object = (void *)0x8000000100267FB0;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)v6, v9, v19);

  v15[0] = v5;
  v15[1] = v10;
  v16 = _swiftEmptyArrayStorage;
  v11 = type metadata accessor for BuiltInCondition();
  memset(v17, 0, sizeof(v17));
  v12 = swift_allocObject(v11, 17, 7);
  *(_BYTE *)(v12 + 16) = 8;
  v13 = type metadata accessor for Question();
  swift_allocObject(v13, 160, 7);
  return sub_100085664(0x505F5443454C4553, 0xEC0000004D554E48, 3, (uint64_t)v15, (uint64_t)_swiftEmptyArrayStorage, v12, (uint64_t)_swiftEmptyArrayStorage, 5);
}

uint64_t sub_1000A7F20()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String_optional v3;
  Swift::String v4;
  Swift::String v5;
  id v6;
  Swift::String v7;
  Swift::String_optional v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  Swift::String v29[2];
  _QWORD *v30;
  _QWORD v31[3];
  Swift::String v32;
  Swift::String v33;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v2._countAndFlagsBits = 0xD00000000000001ALL;
  v32._countAndFlagsBits = 0xD00000000000002BLL;
  v32._object = (void *)0x8000000100267FF0;
  v2._object = (void *)0x8000000100267FD0;
  v3.value._countAndFlagsBits = 0xD000000000000017;
  v3.value._object = (void *)0x8000000100267FB0;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v32);

  v6 = objc_msgSend(v0, "mainBundle");
  v33._countAndFlagsBits = 0xD000000000000024;
  v7._countAndFlagsBits = 0xD00000000000004FLL;
  v33._object = (void *)0x8000000100268070;
  v7._object = (void *)0x8000000100268020;
  v8.value._countAndFlagsBits = 0xD000000000000017;
  v8.value._object = (void *)0x8000000100267FB0;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)v6, v9, v33);

  v29[0] = v5;
  v29[1] = v10;
  v30 = _swiftEmptyArrayStorage;
  memset(v31, 0, sizeof(v31));
  v11 = sub_100003DB8(&qword_100328A00);
  v12 = swift_allocObject(v11, 48, 7);
  *(_OWORD *)(v12 + 16) = xmmword_100252A40;
  v13 = type metadata accessor for QuestionCondition();
  v14 = swift_allocObject(v13, 40, 7);
  *(_BYTE *)(v14 + 16) = 2;
  strcpy((char *)(v14 + 24), "SELECT_PHNUM");
  *(_BYTE *)(v14 + 37) = 0;
  *(_WORD *)(v14 + 38) = -5120;
  v15 = type metadata accessor for NotCondition();
  v16 = swift_allocObject(v15, 32, 7);
  v17 = swift_allocObject(v11, 40, 7);
  *(_OWORD *)(v17 + 16) = xmmword_10024E820;
  *(_QWORD *)(v17 + 32) = v14;
  v27 = v17;
  specialized Array._endMutation()(v17);
  *(_BYTE *)(v16 + 16) = 2;
  *(_QWORD *)(v16 + 24) = v27;
  *(_QWORD *)(v12 + 32) = v16;
  v18 = type metadata accessor for BuiltInCondition();
  v19 = swift_allocObject(v18, 17, 7);
  *(_BYTE *)(v19 + 16) = 9;
  v20 = swift_allocObject(v15, 32, 7);
  v21 = swift_allocObject(v11, 40, 7);
  *(_OWORD *)(v21 + 16) = xmmword_10024E820;
  *(_QWORD *)(v21 + 32) = v19;
  v28 = v21;
  v22 = specialized Array._endMutation()(v21);
  *(_BYTE *)(v20 + 16) = 2;
  *(_QWORD *)(v20 + 24) = v28;
  *(_QWORD *)(v12 + 40) = v20;
  specialized Array._endMutation()(v22);
  v23 = type metadata accessor for AndCondition();
  v24 = swift_allocObject(v23, 32, 7);
  *(_BYTE *)(v24 + 16) = 0;
  *(_QWORD *)(v24 + 24) = v12;
  v25 = type metadata accessor for Question();
  swift_allocObject(v25, 160, 7);
  return sub_100085664(0x48505F5245544E45, 0xEB000000004D554ELL, 3, (uint64_t)v29, (uint64_t)_swiftEmptyArrayStorage, v24, (uint64_t)_swiftEmptyArrayStorage, 6);
}

uint64_t sub_1000A8228()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v10[8];
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;

  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10000D744(v0, (uint64_t)qword_10033FEC8);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Creating built-in roadside assistance Questionnaire instance", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v10[0] = 1;
  v11 = 0xD000000000000017;
  v12 = 0x8000000100267FB0;
  v14 = 0;
  v15 = 0;
  v13 = 0;
  v16 = 1;
  v5 = sub_100003DB8(&qword_100328A00);
  v6 = swift_allocObject(v5, 120, 7);
  *(_OWORD *)(v6 + 16) = xmmword_100253040;
  *(_QWORD *)(v6 + 32) = sub_1000A58C4();
  *(_QWORD *)(v6 + 40) = sub_1000A5AEC();
  *(_QWORD *)(v6 + 48) = sub_1000A5C3C();
  *(_QWORD *)(v6 + 56) = sub_1000A6364();
  *(_QWORD *)(v6 + 64) = sub_1000A66E0();
  *(_QWORD *)(v6 + 72) = sub_1000A6A58();
  *(_QWORD *)(v6 + 80) = sub_1000A6FA4();
  *(_QWORD *)(v6 + 88) = sub_1000A7344();
  *(_QWORD *)(v6 + 96) = sub_1000A7824();
  *(_QWORD *)(v6 + 104) = sub_1000A7D58();
  v7 = sub_1000A7F20();
  *(_QWORD *)(v6 + 112) = v7;
  specialized Array._endMutation()(v7);
  v8 = type metadata accessor for Questionnaire();
  swift_allocObject(v8, 120, 7);
  return sub_1000847A4(1, 0, (uint64_t)v10, 0, v6);
}

uint64_t sub_1000A8598(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FEC8);
  v6 = swift_bridgeObjectRetain_n(a2, 2, v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v18 = a2;
    v19 = v10;
    *(_DWORD *)v9 = 136446210;
    v17 = a1;
    swift_bridgeObjectRetain(a2);
    v11 = sub_100003DB8(&qword_100318260);
    v13 = String.init<A>(describing:)(&v17, v11, v12);
    v15 = v14;
    v17 = sub_100172BEC(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Creating roadside assistance Questionnaire instance from bundle: %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  return sub_1000A8228();
}

uint64_t destroy for BuiltInNotifyContactsConsentHeaderView(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[3]);
}

uint64_t initializeWithCopy for BuiltInNotifyContactsConsentHeaderView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  v4 = a2[3];
  *(_QWORD *)(a1 + 24) = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for BuiltInNotifyContactsConsentHeaderView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = a1[3];
  v7 = a2[3];
  a1[3] = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

uint64_t *assignWithTake for BuiltInNotifyContactsConsentHeaderView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  a1[2] = a2[2];
  v5 = a1[3];
  a1[3] = a2[3];
  swift_release(v5);
  return a1;
}

ValueMetadata *type metadata accessor for BuiltInNotifyContactsConsentHeaderView()
{
  return &type metadata for BuiltInNotifyContactsConsentHeaderView;
}

uint64_t sub_1000A88A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100298BAC, 1);
}

uint64_t sub_1000A88B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>)
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _OWORD v91[11];
  _BYTE v92[183];
  char v93;
  char v94;
  __int128 v95;
  _OWORD v96[12];
  __int128 v97;
  __int128 v98;
  char v99;
  _QWORD v100[2];
  char v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  _BYTE v112[23];
  char v113;
  double v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;

  v6 = a4;
  v85 = a3;
  v86 = a4;
  v9 = a2;
  v84 = a2;
  v90 = a5;
  v11 = sub_100003DB8(&qword_10031D228);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100003DB8(&qword_10031D230);
  __chkstk_darwin(v82, v15);
  v17 = (char *)&v81 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_100003DB8(&qword_10031D238);
  __chkstk_darwin(v88, v18);
  v20 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100003DB8(&qword_10031D240);
  v22 = __chkstk_darwin(v89, v21);
  v83 = (uint64_t)&v81 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22, v24);
  v87 = (uint64_t)&v81 - v26;
  *(_QWORD *)v14 = static HorizontalAlignment.center.getter(v25);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 0;
  v27 = sub_100003DB8(&qword_10031D248);
  v28 = sub_1000A8E40(a1, v9, a3, v6, (__int128 *)&v14[*(int *)(v27 + 44)], a6);
  LOBYTE(v9) = static Edge.Set.top.getter(v28);
  v30 = a1[3];
  v29 = a1[4];
  sub_100007BBC(a1, v30);
  v31 = (*(double (**)(uint64_t, uint64_t))(v29 + 128))(v30, v29);
  v32 = EdgeInsets.init(_all:)(v31);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  sub_10000B234((uint64_t)v14, (uint64_t)v17, &qword_10031D228);
  v39 = &v17[*(int *)(v82 + 36)];
  v40 = (uint64_t)v17;
  *v39 = v9;
  *((double *)v39 + 1) = v32;
  *((_QWORD *)v39 + 2) = v34;
  *((_QWORD *)v39 + 3) = v36;
  *((_QWORD *)v39 + 4) = v38;
  v39[40] = 0;
  v41 = sub_100007FF0((uint64_t)v14, &qword_10031D228);
  LOBYTE(v29) = static Edge.Set.bottom.getter(v41);
  v42 = a1[3];
  v43 = a1[4];
  sub_100007BBC(a1, v42);
  v44 = (*(double (**)(uint64_t, uint64_t))(v43 + 304))(v42, v43);
  v45 = EdgeInsets.init(_all:)(v44);
  v47 = v46;
  v49 = v48;
  v51 = v50;
  sub_10000B234(v40, (uint64_t)v20, &qword_10031D230);
  v52 = &v20[*(int *)(v88 + 36)];
  *v52 = v29;
  *((double *)v52 + 1) = v45;
  *((_QWORD *)v52 + 2) = v47;
  *((_QWORD *)v52 + 3) = v49;
  *((_QWORD *)v52 + 4) = v51;
  v52[40] = 0;
  sub_100007FF0(v40, &qword_10031D230);
  v53 = v83;
  sub_10000B234((uint64_t)v20, v83, &qword_10031D238);
  v54 = (_QWORD *)(v53 + *(int *)(v89 + 36));
  *v54 = 0x7453726564616548;
  v54[1] = 0xEB000000006B6361;
  sub_100007FF0((uint64_t)v20, &qword_10031D238);
  v55 = v87;
  v56 = sub_10000B458(v53, v87, &qword_10031D240);
  v89 = static HorizontalAlignment.center.getter(v56);
  v57 = sub_1000A9934(a1, v84, v85, (uint64_t)v91);
  *(_OWORD *)&v92[119] = v91[7];
  *(_OWORD *)&v92[135] = v91[8];
  *(_OWORD *)&v92[151] = v91[9];
  *(_OWORD *)&v92[167] = v91[10];
  *(_OWORD *)&v92[55] = v91[3];
  *(_OWORD *)&v92[71] = v91[4];
  *(_OWORD *)&v92[87] = v91[5];
  *(_OWORD *)&v92[103] = v91[6];
  *(_OWORD *)&v92[7] = v91[0];
  *(_OWORD *)&v92[23] = v91[1];
  v93 = 0;
  *(_OWORD *)&v92[39] = v91[2];
  LOBYTE(v43) = static Edge.Set.bottom.getter(v57);
  v58 = a1[3];
  v59 = a1[4];
  sub_100007BBC(a1, v58);
  v60 = (*(double (**)(uint64_t, uint64_t))(v59 + 312))(v58, v59);
  v61 = EdgeInsets.init(_all:)(v60);
  v63 = v62;
  v65 = v64;
  v67 = v66;
  v94 = 0;
  v68 = v55;
  sub_10000B234(v55, v53, &qword_10031D240);
  LOBYTE(v6) = v94;
  v69 = v90;
  sub_10000B234(v53, v90, &qword_10031D240);
  v70 = *(int *)(sub_100003DB8(&qword_10031D250) + 48);
  *(_OWORD *)((char *)&v96[8] + 1) = *(_OWORD *)&v92[128];
  *(_OWORD *)((char *)&v96[9] + 1) = *(_OWORD *)&v92[144];
  *(_OWORD *)((char *)&v96[10] + 1) = *(_OWORD *)&v92[160];
  *(_OWORD *)((char *)&v96[4] + 1) = *(_OWORD *)&v92[64];
  *(_OWORD *)((char *)&v96[5] + 1) = *(_OWORD *)&v92[80];
  *(_OWORD *)((char *)&v96[6] + 1) = *(_OWORD *)&v92[96];
  *(_OWORD *)((char *)&v96[7] + 1) = *(_OWORD *)&v92[112];
  *(_OWORD *)((char *)&v96[1] + 1) = *(_OWORD *)&v92[16];
  *(_OWORD *)((char *)&v96[2] + 1) = *(_OWORD *)&v92[32];
  v71 = v69 + v70;
  v72 = v89;
  v95 = (unint64_t)v89;
  LOBYTE(v96[0]) = 0;
  *(_QWORD *)&v96[11] = *(_QWORD *)&v92[175];
  *(_OWORD *)((char *)&v96[3] + 1) = *(_OWORD *)&v92[48];
  *(_OWORD *)((char *)v96 + 1) = *(_OWORD *)v92;
  BYTE8(v96[11]) = v43;
  *(double *)&v97 = v61;
  *((_QWORD *)&v97 + 1) = v63;
  *(_QWORD *)&v98 = v65;
  *((_QWORD *)&v98 + 1) = v67;
  v99 = v6;
  *(_BYTE *)(v71 + 240) = v6;
  v73 = v96[8];
  *(_OWORD *)(v71 + 128) = v96[7];
  *(_OWORD *)(v71 + 144) = v73;
  v74 = v96[10];
  *(_OWORD *)(v71 + 160) = v96[9];
  *(_OWORD *)(v71 + 176) = v74;
  v75 = v96[4];
  *(_OWORD *)(v71 + 64) = v96[3];
  *(_OWORD *)(v71 + 80) = v75;
  v76 = v96[6];
  *(_OWORD *)(v71 + 96) = v96[5];
  *(_OWORD *)(v71 + 112) = v76;
  v77 = v96[0];
  *(_OWORD *)v71 = v95;
  *(_OWORD *)(v71 + 16) = v77;
  v78 = v96[2];
  *(_OWORD *)(v71 + 32) = v96[1];
  *(_OWORD *)(v71 + 48) = v78;
  v79 = v97;
  *(_OWORD *)(v71 + 192) = v96[11];
  *(_OWORD *)(v71 + 208) = v79;
  *(_OWORD *)(v71 + 224) = v98;
  sub_1000A9D64((uint64_t)&v95);
  sub_100007FF0(v68, &qword_10031D240);
  v110 = *(_OWORD *)&v92[128];
  v111 = *(_OWORD *)&v92[144];
  *(_OWORD *)v112 = *(_OWORD *)&v92[160];
  v106 = *(_OWORD *)&v92[64];
  v107 = *(_OWORD *)&v92[80];
  v108 = *(_OWORD *)&v92[96];
  v109 = *(_OWORD *)&v92[112];
  v102 = *(_OWORD *)v92;
  v103 = *(_OWORD *)&v92[16];
  v104 = *(_OWORD *)&v92[32];
  v100[0] = v72;
  v100[1] = 0;
  v101 = 0;
  *(_QWORD *)&v112[15] = *(_QWORD *)&v92[175];
  v105 = *(_OWORD *)&v92[48];
  v113 = v43;
  v114 = v61;
  v115 = v63;
  v116 = v65;
  v117 = v67;
  v118 = v6;
  sub_1000A9DBC((uint64_t)v100);
  return sub_100007FF0(v53, &qword_10031D240);
}

uint64_t sub_1000A8E40@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X8>, double a6@<D0>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  id v43;
  char v44;
  BOOL v45;
  uint64_t KeyPath;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  id v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  UIContentSizeCategory v91;
  char v92;
  uint64_t v93;
  id v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  BOOL v104;
  double v105;
  double v106;
  uint64_t v107;
  uint64_t v108;
  id v109;
  char v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t (**v126)(uint64_t);
  uint64_t v127;
  uint64_t v128;
  double v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 *v141;
  uint64_t v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  uint64_t v149;
  uint64_t result;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __int128 *v170;
  uint64_t v171;
  _QWORD *v172;
  UIContentSizeCategory v173;
  uint64_t v174;
  _OWORD v175[10];
  _OWORD v176[11];
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  __int128 v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int128 v206;
  __int128 v207;
  __int128 v208;
  uint64_t v209;
  uint64_t v210;
  char v211;
  uint64_t v212;
  uint64_t v213;
  BOOL v214;
  uint64_t v215;
  uint64_t v216;
  char v217;
  uint64_t v218;
  uint64_t v219;
  BOOL v220;

  v166 = a3;
  v167 = a4;
  v170 = a5;
  v9 = type metadata accessor for AccessibilityTraits(0);
  v157 = *(_QWORD *)(v9 - 8);
  v158 = v9;
  __chkstk_darwin(v9, v10);
  v156 = (char *)&v153 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_10031D258);
  __chkstk_darwin(v12, v13);
  v160 = (char *)&v153 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = sub_100003DB8(&qword_10031D260);
  __chkstk_darwin(v159, v15);
  v162 = (uint64_t)&v153 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = sub_100003DB8(&qword_10031D268);
  __chkstk_darwin(v161, v17);
  v165 = (uint64_t)&v153 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v164 = sub_100003DB8(&qword_10031D270);
  v20 = __chkstk_darwin(v164, v19);
  v169 = (uint64_t)&v153 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20, v22);
  v163 = (uint64_t)&v153 - v24;
  __chkstk_darwin(v23, v25);
  v168 = (uint64_t)&v153 - v26;
  v27 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000011, 0x8000000100268670);
  v28 = Text.init(_:tableName:bundle:comment:)(v27);
  v30 = v29;
  v32 = v31;
  v34 = v33 & 1;
  v35 = a1[3];
  v36 = a1[4];
  v172 = a1;
  sub_100007BBC(a1, v35);
  v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 160))(v35, v36);
  v38 = Text.font(_:)(v37, v28, v30, v34, v32);
  v40 = v39;
  LODWORD(v171) = v41;
  v155 = v42;
  swift_release(v37);
  sub_10002B438(v28, v30, v34);
  swift_bridgeObjectRelease(v32);
  if (a2)
  {
    v43 = *(id *)(a2 + 112);
    v44 = static UIContentSizeCategory.>= infix(_:_:)(v43, UIContentSizeCategoryAccessibilityExtraLarge);

    v45 = (v44 & 1) == 0;
    KeyPath = swift_getKeyPath(&unk_1002530C8);
    v174 = a2;
    v47 = *(id *)(a2 + 112);
    v48 = static Alignment.center.getter(v47);
    v50 = v49;
    v173 = UIContentSizeCategoryAccessibilityExtraLarge;
    v51 = static UIContentSizeCategory.>= infix(_:_:)(v47, UIContentSizeCategoryAccessibilityExtraLarge);
    if ((v51 & 1) != 0)
    {
      v52 = static Alignment.center.getter(v51);
      v54 = static Alignment.== infix(_:_:)(v48, v50, v52, v53);
      if ((v54 & 1) != 0)
      {
        v48 = static Alignment.leading.getter(v54, v55);
        v50 = v56;
      }
    }

    v57 = v155;
    v215 = v38;
    v216 = v40;
    v58 = v171 & 1;
    v217 = v171 & 1;
    v218 = v155;
    v219 = KeyPath;
    v220 = v45;
    sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v199, 0.0, 1, 0.0, 1, v48, v50);
    sub_10002B438(v38, v40, v58);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v57);
    v59 = *(id *)(v174 + 112);
    LODWORD(v155) = static UIContentSizeCategory.>= infix(_:_:)(v59, v173);

    v171 = swift_getKeyPath(&unk_1002530F8);
    v60 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001002686C0);
    v61 = Text.init(_:tableName:bundle:comment:)(v60);
    v63 = v62;
    v65 = v64;
    v67 = v66 & 1;
    v68 = v172;
    v69 = v172[3];
    v70 = v172[4];
    sub_100007BBC(v172, v69);
    v71 = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 152))(v69, v70);
    v72 = Text.font(_:)(v71, v61, v63, v67, v65);
    v74 = v73;
    v76 = v75;
    v153 = v77;
    swift_release(v71);
    v78 = v76 & 1;
    sub_10002B438(v61, v63, v67);
    swift_bridgeObjectRelease(v65);
    v79 = v68[3];
    v80 = v68[4];
    sub_100007BBC(v68, v79);
    v81 = (*(uint64_t (**)(uint64_t, uint64_t))(v80 + 168))(v79, v80);
    v82 = v153;
    v83 = Text.foregroundColor(_:)(v81, v72, v74, v78, v153);
    v85 = v84;
    v87 = v86;
    v154 = v88;
    swift_release(v81);
    sub_10002B438(v72, v74, v78);
    swift_bridgeObjectRelease(v82);
    v89 = v174;
    v90 = *(id *)(v174 + 112);
    v91 = v173;
    v92 = static UIContentSizeCategory.>= infix(_:_:)(v90, v173);

    v93 = swift_getKeyPath(&unk_1002530C8);
    v94 = *(id *)(v89 + 112);
    v95 = static Alignment.center.getter(v94);
    v97 = v96;
    v98 = static UIContentSizeCategory.>= infix(_:_:)(v94, v91);
    if ((v98 & 1) != 0)
    {
      v99 = static Alignment.center.getter(v98);
      v101 = static Alignment.== infix(_:_:)(v95, v97, v99, v100);
      if ((v101 & 1) != 0)
      {
        v95 = static Alignment.leading.getter(v101, v102);
        v97 = v103;
      }
    }

    v104 = (v92 & 1) == 0;
    v105 = 0.5;
    v209 = v83;
    v210 = v85;
    v211 = v87 & 1;
    if ((v155 & 1) != 0)
      v106 = 1.0;
    else
      v106 = 0.5;
    v107 = v154;
    v212 = v154;
    v213 = v93;
    v214 = v104;
    sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v175, 0.0, 1, 0.0, 1, v95, v97);
    sub_10002B438(v83, v85, v87 & 1);
    swift_release(v93);
    swift_bridgeObjectRelease(v107);
    v108 = v174;
    v109 = *(id *)(v174 + 112);
    v110 = static UIContentSizeCategory.>= infix(_:_:)(v109, v173);

    if ((v110 & 1) != 0)
      v105 = 1.0;
    v111 = swift_getKeyPath(&unk_1002530F8);
    v194 = v175[6];
    v195 = v175[7];
    v196 = v175[8];
    v197 = v175[9];
    v190 = v175[2];
    v191 = v175[3];
    v192 = v175[4];
    v193 = v175[5];
    v188 = v175[0];
    v189 = v175[1];
    *(_QWORD *)&v198 = v111;
    *((double *)&v198 + 1) = v105;
    v112 = v156;
    static AccessibilityTraits.isHeader.getter();
    v113 = sub_100003DB8(&qword_10031D278);
    v114 = sub_1000A9FC0();
    v115 = (uint64_t)v160;
    View.accessibility(addTraits:)(v112, v113, v114);
    (*(void (**)(char *, uint64_t))(v157 + 8))(v112, v158);
    v176[8] = v196;
    v176[9] = v197;
    v176[10] = v198;
    v176[4] = v192;
    v176[5] = v193;
    v176[6] = v194;
    v176[7] = v195;
    v176[0] = v188;
    v176[1] = v189;
    v176[2] = v190;
    v176[3] = v191;
    v116 = sub_100038994((uint64_t)v176);
    v117 = static Alignment.center.getter(v116);
    v119 = v118;
    v120 = v162;
    sub_10000B234(v115, v162, &qword_10031D258);
    v121 = (uint64_t *)(v120 + *(int *)(v159 + 36));
    *v121 = v117;
    v121[1] = v119;
    sub_100007FF0(v115, &qword_10031D258);
    sub_100007CBC((uint64_t)v172, (uint64_t)&v188);
    v122 = swift_allocObject(&unk_1002EC748, 88, 7);
    v123 = v166;
    v124 = v167;
    *(_QWORD *)(v122 + 16) = v108;
    *(_QWORD *)(v122 + 24) = v123;
    *(double *)(v122 + 32) = a6;
    *(_QWORD *)(v122 + 40) = v124;
    sub_100007D04(&v188, v122 + 48);
    v125 = v165;
    sub_10000B234(v120, v165, &qword_10031D260);
    v126 = (uint64_t (**)(uint64_t))(v125 + *(int *)(v161 + 36));
    *v126 = sub_1000AA078;
    v126[1] = (uint64_t (*)(uint64_t))v122;
    swift_retain(v124);
    swift_retain(v108);
    v127 = sub_100007FF0(v120, &qword_10031D260);
    LOBYTE(v119) = static Edge.Set.top.getter(v127);
    *(double *)&v188 = a6;
    *((_QWORD *)&v188 + 1) = v124;
    v128 = sub_100003DB8(&qword_10031CCA8);
    State.wrappedValue.getter(&v177, v128);
    v129 = EdgeInsets.init(_all:)(*(double *)&v177);
    v131 = v130;
    v133 = v132;
    v135 = v134;
    v136 = v163;
    sub_10000B234(v125, v163, &qword_10031D268);
    v137 = v136 + *(int *)(v164 + 36);
    *(_BYTE *)v137 = v119;
    *(double *)(v137 + 8) = v129;
    *(_QWORD *)(v137 + 16) = v131;
    *(_QWORD *)(v137 + 24) = v133;
    *(_QWORD *)(v137 + 32) = v135;
    *(_BYTE *)(v137 + 40) = 0;
    sub_100007FF0(v125, &qword_10031D268);
    v138 = v168;
    sub_10000B458(v136, v168, &qword_10031D270);
    v139 = v169;
    sub_10000B234(v138, v169, &qword_10031D270);
    v183 = v205;
    v184 = v206;
    v185 = v207;
    v186 = v208;
    v179 = v201;
    v140 = v201;
    v180 = v202;
    v181 = v203;
    v182 = v204;
    v177 = v199;
    v178 = v200;
    v141 = v170;
    v142 = v171;
    *(_QWORD *)&v187 = v171;
    *((double *)&v187 + 1) = v106;
    v143 = v206;
    v170[6] = v205;
    v141[7] = v143;
    v144 = v186;
    v141[8] = v185;
    v141[9] = v144;
    v145 = v180;
    v146 = v181;
    v147 = v182;
    v141[2] = v140;
    v141[3] = v145;
    v141[4] = v146;
    v141[5] = v147;
    v148 = v178;
    *v141 = v177;
    v141[1] = v148;
    v141[10] = v187;
    v149 = sub_100003DB8(&qword_10031D288);
    sub_10000B234(v139, (uint64_t)v141 + *(int *)(v149 + 48), &qword_10031D270);
    sub_10003893C((uint64_t)&v177);
    sub_100007FF0(v138, &qword_10031D270);
    sub_100007FF0(v139, &qword_10031D270);
    v194 = v205;
    v195 = v206;
    v196 = v207;
    v197 = v208;
    v190 = v201;
    v191 = v202;
    v192 = v203;
    v193 = v204;
    v188 = v199;
    v189 = v200;
    *(_QWORD *)&v198 = v142;
    *((double *)&v198 + 1) = v106;
    return sub_100038994((uint64_t)&v188);
  }
  else
  {
    v151 = type metadata accessor for UIMetrics();
    v152 = sub_10007DE90();
    result = EnvironmentObject.error()(0, v166, v151, v152);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A9834(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  double *v5;
  CGFloat v6;
  CGFloat v7;
  CGFloat v8;
  CGFloat v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  double v15;
  double v16;
  CGRect v17;

  v5 = *(double **)result;
  if (*(_QWORD *)(*(_QWORD *)result + 16))
  {
    v6 = v5[4];
    v7 = v5[5];
    v8 = v5[6];
    v9 = v5[7];
    v10 = a5[3];
    v11 = a5[4];
    sub_100007BBC(a5, v10);
    v12 = (*(double (**)(uint64_t, uint64_t))(v11 + 136))(v10, v11);
    v17.origin.x = v6;
    v17.origin.y = v7;
    v17.size.width = v8;
    v17.size.height = v9;
    v13 = v12 - CGRectGetMidY(v17);
    v14 = sub_100003DB8(&qword_10031CCA8);
    State.wrappedValue.getter(&v16, v14);
    if (v16 >= v13)
    {
      if ((*(_QWORD *)&v16 & 0xFFFFFFFFFFFFFLL) != 0)
        v15 = v13;
      else
        v15 = v16;
      if ((~*(_QWORD *)&v16 & 0x7FF0000000000000) != 0)
        v13 = v16;
      else
        v13 = v15;
    }
    v16 = v13;
    return State.wrappedValue.setter(&v16, v14);
  }
  return result;
}

uint64_t sub_1000A9934@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  id v32;
  char v33;
  uint64_t KeyPath;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  char v46;
  double v47;
  uint64_t result;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  unint64_t v55;
  char v57;
  uint64_t v59;
  _OWORD v61[11];
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;

  v5 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000004ALL, 0x80000001002685B0);
  v6 = Text.init(_:tableName:bundle:comment:)(v5);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v14 = a1[3];
  v13 = a1[4];
  sub_100007BBC(a1, v14);
  v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 200))(v14, v13);
  v16 = Text.font(_:)(v15, v6, v8, v12, v10);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  swift_release(v15);
  v23 = v20 & 1;
  sub_10002B438(v6, v8, v12);
  swift_bridgeObjectRelease(v10);
  v24 = a1[3];
  v25 = a1[4];
  sub_100007BBC(a1, v24);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 168))(v24, v25);
  v27 = Text.foregroundColor(_:)(v26, v16, v18, v23, v22);
  v29 = v28;
  v57 = v30;
  v59 = v31;
  swift_release(v26);
  sub_10002B438(v16, v18, v23);
  swift_bridgeObjectRelease(v22);
  if (a2)
  {
    v32 = *(id *)(a2 + 112);
    v33 = static UIContentSizeCategory.>= infix(_:_:)(v32, UIContentSizeCategoryAccessibilityExtraLarge);

    KeyPath = swift_getKeyPath(&unk_1002530C8);
    v35 = *(id *)(a2 + 112);
    v36 = static Alignment.center.getter(v35);
    v38 = v37;
    v39 = static UIContentSizeCategory.>= infix(_:_:)(v35, UIContentSizeCategoryAccessibilityExtraLarge);
    if ((v39 & 1) != 0)
    {
      v40 = static Alignment.center.getter(v39);
      v42 = static Alignment.== infix(_:_:)(v36, v38, v40, v41);
      if ((v42 & 1) != 0)
      {
        v36 = static Alignment.leading.getter(v42, v43);
        v38 = v44;
      }
    }

    v62 = v27;
    v63 = v29;
    v64 = v57 & 1;
    v65 = v59;
    v66 = KeyPath;
    v67 = (v33 & 1) == 0;
    sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v61, 0.0, 1, 0.0, 1, v36, v38);
    sub_10002B438(v27, v29, v57 & 1);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v59);
    v45 = *(id *)(a2 + 112);
    v46 = static UIContentSizeCategory.>= infix(_:_:)(v45, UIContentSizeCategoryAccessibilityExtraLarge);

    if ((v46 & 1) != 0)
      v47 = 1.0;
    else
      v47 = 0.5;
    result = swift_getKeyPath(&unk_1002530F8);
    v49 = v61[7];
    *(_OWORD *)(a4 + 96) = v61[6];
    *(_OWORD *)(a4 + 112) = v49;
    v50 = v61[9];
    *(_OWORD *)(a4 + 128) = v61[8];
    *(_OWORD *)(a4 + 144) = v50;
    v51 = v61[3];
    *(_OWORD *)(a4 + 32) = v61[2];
    *(_OWORD *)(a4 + 48) = v51;
    v52 = v61[5];
    *(_OWORD *)(a4 + 64) = v61[4];
    *(_OWORD *)(a4 + 80) = v52;
    v53 = v61[1];
    *(_OWORD *)a4 = v61[0];
    *(_OWORD *)(a4 + 16) = v53;
    *(_QWORD *)(a4 + 160) = result;
    *(double *)(a4 + 168) = v47;
  }
  else
  {
    v54 = type metadata accessor for UIMetrics();
    v55 = sub_10007DE90();
    result = EnvironmentObject.error()(0, a3, v54, v55);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A9C80@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[5];

  v3 = *(_QWORD **)v1;
  v2 = *(_QWORD *)(v1 + 8);
  if (*(_QWORD *)v1)
  {
    v5 = *(double *)(v1 + 16);
    v6 = *(_QWORD *)(v1 + 24);
    v7 = v3[9];
    v8 = v3[10];
    sub_100007BBC(v3 + 6, v7);
    v9 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v8 + 24))(v14, v7, v8);
    *(_QWORD *)a1 = static HorizontalAlignment.center.getter(v9);
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 0;
    v10 = sub_100003DB8(&qword_10031D220);
    sub_1000A88B4(v14, (uint64_t)v3, v2, v6, a1 + *(int *)(v10 + 44), v5);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v14);
  }
  else
  {
    v12 = type metadata accessor for UIMetrics();
    v13 = sub_10007DE90();
    result = EnvironmentObject.error()(0, v2, v12, v13);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000A9D64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 184);
  sub_10002B750(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t sub_1000A9DBC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 184);
  sub_10002B438(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

void sub_1000A9E14()
{
  qword_10031D218 = (uint64_t)&_swiftEmptyArrayStorage;
}

double sub_1000A9E28@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  double result;

  if (qword_1003157D8 != -1)
    swift_once(&qword_1003157D8, sub_1000A9E14);
  v2 = qword_10031D218;
  *a1 = qword_10031D218;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v2).n128_u64[0];
  return result;
}

void sub_1000A9E78(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  uint64_t v2;

  a2(&v2);
  sub_1000EC3B4(v2);
}

double sub_1000A9EBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double v4;
  _QWORD v6[2];

  v0 = type metadata accessor for NamedCoordinateSpace(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin();
  v3 = (char *)v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6[0] = 0x7453726564616548;
  v6[1] = 0xEB000000006B6361;
  static CoordinateSpaceProtocol<>.named<A>(_:)(v6, &type metadata for String, &protocol witness table for String);
  v4 = GeometryProxy.frame<A>(in:)(v3, v0, &protocol witness table for NamedCoordinateSpace);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

unint64_t sub_1000A9FC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031D280;
  if (!qword_10031D280)
  {
    v1 = sub_100007FAC(&qword_10031D278);
    sub_10002B5F0();
    sub_1000084FC(&qword_1003192C0, &qword_1003192C8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031D280);
  }
  return result;
}

uint64_t sub_1000AA044()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[5]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 6);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_1000AA078(uint64_t a1)
{
  uint64_t *v1;

  return sub_1000A9834(a1, v1[2], v1[3], v1[5], v1 + 6);
}

ValueMetadata *type metadata accessor for ViewFrameInHeaderStack()
{
  return &type metadata for ViewFrameInHeaderStack;
}

uint64_t sub_1000AA09C()
{
  return sub_1000084FC(&qword_10031D290, &qword_10031D298, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

ValueMetadata *type metadata accessor for BusinessOnboardingView()
{
  return &type metadata for BusinessOnboardingView;
}

unint64_t sub_1000AA0DC()
{
  unint64_t result;

  result = qword_10031D2A0;
  if (!qword_10031D2A0)
  {
    result = swift_getWitnessTable(&unk_100253230, &type metadata for BusinessOnboardingView);
    atomic_store(result, (unint64_t *)&qword_10031D2A0);
  }
  return result;
}

uint64_t sub_1000AA120(uint64_t (*a1)(void))
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Onboarding controller dismissed", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  return a1();
}

id sub_1000AA204()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  void *v5;
  id v6;
  _QWORD v8[5];
  uint64_t v9;

  v2 = *v0;
  v1 = v0[1];
  v3 = swift_allocObject(&unk_1002EC8A0, 32, 7);
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  v4 = objc_allocWithZone((Class)CKBusinessOnboardingController);
  v8[4] = sub_1000AA450;
  v9 = v3;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1107296256;
  v8[2] = sub_1001BAACC;
  v8[3] = &unk_1002EC8B8;
  v5 = _Block_copy(v8);
  v6 = objc_msgSend(v4, "initWithCompletionHandler:", v5, swift_retain(v1).n128_f64[0]);
  _Block_release(v5);
  swift_release(v9);
  return v6;
}

uint64_t sub_1000AA2E0(uint64_t a1, char a2)
{
  return UIViewControllerRepresentable.sizeThatFits(_:uiViewController:context:)(a1, a2 & 1);
}

void *sub_1000AA318()
{
  return &protocol witness table for Never;
}

uint64_t sub_1000AA324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000AA3E8();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000AA374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000AA3E8();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000AA3C4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000AA3E8();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_1000AA3E8()
{
  unint64_t result;

  result = qword_10031D2A8;
  if (!qword_10031D2A8)
  {
    result = swift_getWitnessTable(&unk_1002531B8, &type metadata for BusinessOnboardingView);
    atomic_store(result, (unint64_t *)&qword_10031D2A8);
  }
  return result;
}

uint64_t sub_1000AA42C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000AA450()
{
  uint64_t v0;

  return sub_1000AA120(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000AA458(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000AA468(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

char *sub_1000AA470(void (*a1)(uint64_t *__return_ptr, uint64_t *), uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;

  v4 = v3;
  v5 = a3;
  if (a3 >> 62)
    goto LABEL_20;
  v6 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  while (v6)
  {
    v23 = v5 & 0xC000000000000001;
    v7 = (char *)&_swiftEmptyArrayStorage;
    v8 = 4;
    v21 = v6;
    v22 = v5;
    while (1)
    {
      v10 = v8 - 4;
      if (!v23)
        break;
      v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, v5);
      v12 = __OFADD__(v10, 1);
      v13 = v8 - 3;
      if (v12)
        goto LABEL_19;
LABEL_11:
      v40 = v11;
      a1(&v31, &v40);
      if (v4)
      {
        swift_bridgeObjectRelease(v7);
        swift_bridgeObjectRelease(v5);
        swift_release(v11);
        return v7;
      }
      swift_release(v11);
      v14 = v32;
      if (v32)
      {
        v15 = v33;
        v25 = v31;
        v26 = v37;
        v16 = v38;
        v29 = v35;
        v30 = v39;
        v27 = v36;
        v28 = v34;
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0)
          v7 = sub_100172100(0, *((_QWORD *)v7 + 2) + 1, 1, v7);
        v18 = *((_QWORD *)v7 + 2);
        v17 = *((_QWORD *)v7 + 3);
        if (v18 >= v17 >> 1)
          v7 = sub_100172100((char *)(v17 > 1), v18 + 1, 1, v7);
        *((_QWORD *)v7 + 2) = v18 + 1;
        v9 = &v7[88 * v18];
        *((_QWORD *)v9 + 4) = v25;
        *((_QWORD *)v9 + 5) = v14;
        *((_QWORD *)v9 + 6) = v15;
        *((_QWORD *)v9 + 7) = v28;
        *((_OWORD *)v9 + 4) = v29;
        *((_QWORD *)v9 + 10) = v27;
        *((_QWORD *)v9 + 11) = v26;
        v9[96] = v16 & 1;
        *(_OWORD *)(v9 + 104) = v30;
        v6 = v21;
        v5 = v22;
      }
      ++v8;
      if (v13 == v6)
      {
        swift_bridgeObjectRelease(v5);
        return v7;
      }
    }
    v11 = *(_QWORD *)(v5 + 8 * v8);
    swift_retain(v11);
    v12 = __OFADD__(v10, 1);
    v13 = v8 - 3;
    if (!v12)
      goto LABEL_11;
LABEL_19:
    __break(1u);
LABEL_20:
    if (v5 < 0)
      v19 = v5;
    else
      v19 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v6 = _CocoaArrayWrapper.endIndex.getter(v19);
  }
  swift_bridgeObjectRelease(v5);
  return (char *)&_swiftEmptyArrayStorage;
}

void sub_1000AA698(uint64_t a1)
{
  int64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10017E340(0, v1, 0);
    v4 = sub_1000BABC0(a1);
    v5 = 0;
    v6 = a1 + 64;
    v20 = v1;
    v21 = v3;
    v22 = a1 + 64;
    while ((v4 & 0x8000000000000000) == 0 && v4 < 1 << *(_BYTE *)(a1 + 32))
    {
      v9 = (unint64_t)v4 >> 6;
      if ((*(_QWORD *)(v6 + 8 * ((unint64_t)v4 >> 6)) & (1 << v4)) == 0)
        goto LABEL_23;
      if (*(_DWORD *)(a1 + 36) != v3)
        goto LABEL_24;
      v10 = (uint64_t *)(*(_QWORD *)(a1 + 56) + 16 * v4);
      v11 = v10[1];
      v23 = *v10;
      v13 = _swiftEmptyArrayStorage[2];
      v12 = _swiftEmptyArrayStorage[3];
      swift_bridgeObjectRetain(v11);
      if (v13 >= v12 >> 1)
        sub_10017E340(v12 > 1, v13 + 1, 1);
      _swiftEmptyArrayStorage[2] = v13 + 1;
      v14 = &_swiftEmptyArrayStorage[2 * v13];
      v14[4] = v23;
      v14[5] = v11;
      v7 = 1 << *(_BYTE *)(a1 + 32);
      if (v4 >= v7)
        goto LABEL_25;
      v6 = a1 + 64;
      v15 = *(_QWORD *)(v22 + 8 * v9);
      if ((v15 & (1 << v4)) == 0)
        goto LABEL_26;
      v3 = v21;
      if (*(_DWORD *)(a1 + 36) != v21)
        goto LABEL_27;
      v16 = v15 & (-2 << (v4 & 0x3F));
      if (v16)
      {
        v7 = __clz(__rbit64(v16)) | v4 & 0xFFFFFFFFFFFFFFC0;
        v8 = v20;
      }
      else
      {
        v17 = v9 + 1;
        v18 = (unint64_t)(v7 + 63) >> 6;
        v8 = v20;
        if (v9 + 1 < v18)
        {
          v19 = *(_QWORD *)(v22 + 8 * v17);
          if (v19)
          {
LABEL_20:
            v7 = __clz(__rbit64(v19)) + (v17 << 6);
          }
          else
          {
            while (v18 - 2 != v9)
            {
              v19 = *(_QWORD *)(a1 + 80 + 8 * v9++);
              if (v19)
              {
                v17 = v9 + 1;
                goto LABEL_20;
              }
            }
          }
        }
      }
      ++v5;
      v4 = v7;
      if (v5 == v8)
        return;
    }
    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }
}

void sub_1000AA8A0(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  __n128 v18;
  __n128 v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __n128 v30;
  __n128 v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t *, _QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[8];
  uint64_t v50;
  uint64_t v51[13];
  uint64_t v52;
  uint64_t v53;
  char v54;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v10 = static OS_dispatch_queue.main.getter(v11);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_29:
    swift_once(&qword_1003158B0, sub_1000D9854);
LABEL_12:
    v17 = type metadata accessor for Logger(0);
    sub_10000D744(v17, (uint64_t)qword_10033FEC8);
    swift_retain_n(v3, v18);
    v20 = swift_bridgeObjectRetain_n(a2, 2, v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(22, -1);
      v24 = swift_slowAlloc(64, -1);
      v47 = a1;
      v25 = v24;
      v51[0] = v24;
      *(_DWORD *)v23 = 136446466;
      v26 = sub_1000AD18C();
      v28 = v27;
      v48 = sub_100172BEC(v26, v27, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v23 + 4, v23 + 12);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v28);
      *(_WORD *)(v23 + 12) = 2082;
      swift_bridgeObjectRetain(a2);
      v48 = sub_100172BEC(v47, a2, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v23 + 14, v23 + 22);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%{public}s] linkIsAvailable: for expired send token %{public}s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
      swift_release_n(v3);
    }
    return;
  }
  swift_beginAccess(v3 + 48, &v50, 0, 0);
  sub_10008CB00((uint64_t *)(v3 + 48), (uint64_t)v51);
  if (!v53)
  {
    sub_10008CB3C(v51);
    goto LABEL_11;
  }
  sub_1000BA454((uint64_t)&v52, (uint64_t)&v48);
  sub_10008CB3C(v51);
  v14 = v48;
  v13 = v49[0];
  swift_bridgeObjectRetain(v49[0]);
  sub_1000B8AA0(&v48);
  if (v14 == a1 && v13 == a2)
  {
    swift_bridgeObjectRelease(a2);
    goto LABEL_8;
  }
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v14, v13, 0);
  swift_bridgeObjectRelease(v13);
  if ((v15 & 1) == 0)
  {
LABEL_11:
    if (qword_1003158B0 == -1)
      goto LABEL_12;
    goto LABEL_29;
  }
LABEL_8:
  sub_10008CB00((uint64_t *)(v3 + 48), (uint64_t)v51);
  if (v53)
  {
    v16 = v54;
    sub_10008CB3C(v51);
    if ((v16 & 1) != 0)
      return;
  }
  else
  {
    sub_10008CB3C(v51);
  }
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v29 = type metadata accessor for Logger(0);
  sub_10000D744(v29, (uint64_t)qword_10033FEC8);
  swift_retain_n(v3, v30);
  v32 = swift_bridgeObjectRetain_n(a2, 2, v31);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v33, v34))
  {

    swift_bridgeObjectRelease_n(a2, 2);
    swift_release_n(v3);
    if (*(_QWORD *)(v3 + 32))
      goto LABEL_20;
LABEL_22:
    v41 = sub_100003DB8(&qword_10032B0E0);
    v42 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v41, v42);
    goto LABEL_23;
  }
  v35 = swift_slowAlloc(22, -1);
  v36 = swift_slowAlloc(64, -1);
  v47 = a1;
  v37 = v36;
  v51[0] = v36;
  *(_DWORD *)v35 = 136446466;
  v38 = sub_1000AD18C();
  v40 = v39;
  v48 = sub_100172BEC(v38, v39, v51);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v35 + 4, v35 + 12);
  swift_release_n(v3);
  swift_bridgeObjectRelease(v40);
  *(_WORD *)(v35 + 12) = 2082;
  swift_bridgeObjectRetain(a2);
  v48 = sub_100172BEC(v47, a2, v51);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v35 + 14, v35 + 22);
  swift_bridgeObjectRelease_n(a2, 3);
  _os_log_impl((void *)&_mh_execute_header, v33, v34, "[%{public}s] linkIsAvailable: for token %{public}s", (uint8_t *)v35, 0x16u);
  swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v37, -1, -1);
  swift_slowDealloc(v35, -1, -1);

  if (!*(_QWORD *)(v3 + 32))
    goto LABEL_22;
LABEL_20:
  *(_BYTE *)(v3 + 40) = 1;
LABEL_23:
  v44 = (void (*)(uint64_t *, _QWORD))sub_1000AD130((uint64_t)v51);
  if (*(_QWORD *)(v43 + 112))
    *(_BYTE *)(v43 + 168) = 1;
  v44(v51, 0);
  if (*(_QWORD *)(v3 + 32))
  {
    *(_BYTE *)(v3 + 41) = 1;
  }
  else
  {
    v45 = sub_100003DB8(&qword_10032B0E0);
    v46 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v45, v46);
  }
}

_QWORD *sub_1000AAEA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 v8;
  char v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[8];
  uint64_t v29;
  uint64_t v30[8];
  __int16 v31;
  _QWORD v32[13];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v7 = static OS_dispatch_queue.main.getter(v8);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once(&qword_1003158B0, sub_1000D9854);
    goto LABEL_4;
  }
  v3 = v2 + 48;
  swift_beginAccess(v2 + 48, &v29, 0, 0);
  sub_10008CB00((uint64_t *)(v2 + 48), (uint64_t)v30);
  if (!v32[1])
    return sub_10008CB3C(v30);
  sub_1000BA454((uint64_t)v32, (uint64_t)&v27);
  sub_10008CB3C(v30);
  v1 = v27;
  v7 = (_QWORD *)v28[0];
  swift_bridgeObjectRetain(v28[0]);
  sub_1000B8AA0(&v27);
  if (qword_1003158B0 != -1)
    goto LABEL_14;
LABEL_4:
  v10 = type metadata accessor for Logger(0);
  sub_10000D744(v10, (uint64_t)qword_10033FEC8);
  swift_retain_n(v2, v11);
  swift_bridgeObjectRetain(v7);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(64, -1);
    v30[0] = v26;
    *(_DWORD *)v15 = 136446466;
    v25 = v1;
    v16 = sub_1000AD18C();
    v18 = v17;
    v27 = sub_100172BEC(v16, v17, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v15 + 4, v15 + 12);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v15 + 12) = 2082;
    swift_bridgeObjectRetain(v7);
    v27 = sub_100172BEC(v25, (unint64_t)v7, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, v28, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease_n(v7, 3);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%{public}s] Resetting current send token %{public}s to nil", (uint8_t *)v15, 0x16u);
    v19 = v26;
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v15, -1, -1);

    if (*(_QWORD *)(v2 + 32))
    {
LABEL_6:
      *(_BYTE *)(v2 + 40) = 1;
      goto LABEL_10;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n(v7, 2);
    swift_release_n(v2);
    if (*(_QWORD *)(v2 + 32))
      goto LABEL_6;
  }
  v21 = sub_100003DB8(&qword_10032B0E0);
  v22 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Subject<>.send()(v21, v22);
LABEL_10:
  v31 = 0;
  memset(v30, 0, sizeof(v30));
  swift_beginAccess(v3, &v27, 33, 0);
  sub_1000BAE88((uint64_t)v30, v2 + 152);
  result = (_QWORD *)swift_endAccess(&v27);
  if (*(_QWORD *)(v2 + 32))
  {
    *(_BYTE *)(v2 + 41) = 1;
  }
  else
  {
    v23 = sub_100003DB8(&qword_10032B0E0);
    v24 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    return (_QWORD *)Subject<>.send()(v23, v24);
  }
  return result;
}

void sub_1000AB27C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __n128 v12;
  char v13;
  uint64_t v14;
  __n128 v15;
  __n128 v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  __n128 v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE v64[16];
  __int128 v65;
  uint64_t v66;
  _UNKNOWN **v67;
  char v68[24];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v4 = v2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (uint64_t *)((char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v11 = static OS_dispatch_queue.main.getter(v12);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v3 = v4 + 48;
  swift_beginAccess(v4 + 48, v68, 0, 0);
  v7 = v4 + 152;
  sub_10000B234(v4 + 152, (uint64_t)&v65, &qword_10031D758);
  if (*((_QWORD *)&v65 + 1))
  {
    sub_1000BA3FC((uint64_t)&v65, (uint64_t)&v69);
    if ((v69 != a1 || v70 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v69, v70, 0) & 1) == 0)
    {
      if (qword_1003158B0 != -1)
        swift_once(&qword_1003158B0, sub_1000D9854);
      v48 = type metadata accessor for Logger(0);
      sub_10000D744(v48, (uint64_t)qword_10033FEC8);
      swift_retain_n(v4, v49);
      v51 = swift_bridgeObjectRetain_n(a2, 2, v50);
      v52 = Logger.logObject.getter(v51);
      v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        v54 = swift_slowAlloc(22, -1);
        v55 = a1;
        v56 = swift_slowAlloc(64, -1);
        *(_QWORD *)&v65 = v56;
        *(_DWORD *)v54 = 136446466;
        v57 = sub_1000AD18C();
        v59 = v58;
        v63 = sub_100172BEC(v57, v58, (uint64_t *)&v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v54 + 4, v54 + 12);
        swift_release_n(v4);
        swift_bridgeObjectRelease(v59);
        *(_WORD *)(v54 + 12) = 2082;
        swift_bridgeObjectRetain(a2);
        v63 = sub_100172BEC(v55, a2, (uint64_t *)&v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v54 + 14, v54 + 22);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "[%{public}s] donePreparingForSend: for expired send token %{public}s", (uint8_t *)v54, 0x16u);
        swift_arrayDestroy(v56, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v56, -1, -1);
        swift_slowDealloc(v54, -1, -1);
      }
      else
      {
        swift_release_n(v4);
        swift_bridgeObjectRelease_n(a2, 2);
      }

      goto LABEL_26;
    }
    if (qword_1003158B0 == -1)
    {
LABEL_7:
      v14 = type metadata accessor for Logger(0);
      sub_10000D744(v14, (uint64_t)qword_10033FEC8);
      swift_retain_n(v4, v15);
      v17 = swift_bridgeObjectRetain_n(a2, 2, v16);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = swift_slowAlloc(22, -1);
        v61 = a1;
        v21 = v20;
        v22 = swift_slowAlloc(64, -1);
        v62 = v3;
        v23 = v22;
        *(_QWORD *)&v65 = v22;
        *(_DWORD *)v21 = 136446466;
        v24 = sub_1000AD18C();
        v26 = v25;
        v63 = sub_100172BEC(v24, v25, (uint64_t *)&v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v21 + 4, v21 + 12);
        swift_release_n(v4);
        swift_bridgeObjectRelease(v26);
        *(_WORD *)(v21 + 12) = 2082;
        swift_bridgeObjectRetain(a2);
        v63 = sub_100172BEC(v61, a2, (uint64_t *)&v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v21 + 14, v21 + 22);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%{public}s] donePreparingForSend: for token %{public}s", (uint8_t *)v21, 0x16u);
        swift_arrayDestroy(v23, 2, (char *)&type metadata for Any + 8);
        v27 = v23;
        v3 = v62;
        swift_slowDealloc(v27, -1, -1);
        swift_slowDealloc(v21, -1, -1);

        if (*(_QWORD *)(v4 + 32))
        {
LABEL_9:
          *(_BYTE *)(v4 + 40) = 1;
          goto LABEL_16;
        }
      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
        swift_release_n(v4);
        if (*(_QWORD *)(v4 + 32))
          goto LABEL_9;
      }
      v38 = sub_100003DB8(&qword_10032B0E0);
      v39 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v38, v39);
LABEL_16:
      v40 = sub_1000AD18C();
      v42 = v41;
      v43 = v71;
      v44 = type metadata accessor for QuestionnaireState.DefaultTextEncoder();
      v45 = (_QWORD *)swift_allocObject(v44, 40, 7);
      v45[2] = v40;
      v45[3] = v42;
      v45[4] = v43;
      v66 = v44;
      v67 = &off_1002ECAB8;
      *(_QWORD *)&v65 = v45;
      swift_beginAccess(v3, &v63, 33, 0);
      swift_bridgeObjectRetain(v43);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((_QWORD *)(v4 + 80));
      sub_100007D04(&v65, v4 + 80);
      sub_100007FF0(v7, &qword_10031D758);
      *(_OWORD *)v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      *(_OWORD *)(v7 + 48) = 0u;
      *(_WORD *)(v7 + 64) = 0;
      swift_endAccess(&v63);
      if (*(_QWORD *)(v4 + 32))
      {
        *(_BYTE *)(v4 + 41) = 1;
      }
      else
      {
        v46 = sub_100003DB8(&qword_10032B0E0);
        v47 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
        Subject<>.send()(v46, v47);
      }
LABEL_26:
      sub_1000B8AA0(&v69);
      return;
    }
LABEL_28:
    swift_once(&qword_1003158B0, sub_1000D9854);
    goto LABEL_7;
  }
  sub_100007FF0((uint64_t)&v65, &qword_10031D758);
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v28 = type metadata accessor for Logger(0);
  sub_10000D744(v28, (uint64_t)qword_10033FEC8);
  v30 = swift_retain_n(v4, v29);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = swift_slowAlloc(32, -1);
    v69 = v34;
    *(_DWORD *)v33 = 136446210;
    v35 = sub_1000AD18C();
    v37 = v36;
    *(_QWORD *)&v65 = sub_100172BEC(v35, v36, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, (char *)&v65 + 8, v33 + 4, v33 + 12);
    swift_release_n(v4);
    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "[%{public}s] donePreparingForSend: send is not in progress", v33, 0xCu);
    swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1, -1);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

    swift_release_n(v4);
  }
}

uint64_t sub_1000ABA28(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  __n128 v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD v80[8];
  unsigned __int8 v81;
  _QWORD v82[9];
  uint64_t v83;
  _QWORD v84[10];
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD v88[6];
  char v89;
  char v90;
  _QWORD v91[12];

  v4 = v3;
  v8 = type metadata accessor for UUID(0);
  v76 = *(_QWORD *)(v8 - 8);
  v77 = v8;
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (uint64_t *)((char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v16 = static OS_dispatch_queue.main.getter(v17);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  v18 = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v16, v12);
  if ((v18 & 1) == 0)
  {
    __break(1u);
LABEL_22:
    swift_once(&qword_1003158B0, sub_1000D9854);
    goto LABEL_11;
  }
  v75 = a3;
  a3 = v4 + 48;
  swift_beginAccess(v4 + 48, &v85, 0, 0);
  sub_10008CB00((uint64_t *)(v4 + 48), (uint64_t)&v86);
  if (v91[1])
  {
    v72 = a2;
    v73 = a1;
    sub_1000BA454((uint64_t)v91, (uint64_t)&v83);
    sub_10008CB3C(&v86);
    v19 = v83;
    v20 = v84[0];
    swift_bridgeObjectRetain(v84[0]);
    sub_1000B8AA0(&v83);
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v21 = type metadata accessor for Logger(0);
    sub_10000D744(v21, (uint64_t)qword_10033FEC8);
    swift_retain_n(v4, v22);
    swift_bridgeObjectRetain(v20);
    v24 = Logger.logObject.getter(v23);
    v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = swift_slowAlloc(22, -1);
      v74 = v4 + 48;
      v27 = v26;
      v71 = swift_slowAlloc(64, -1);
      v86 = v71;
      *(_DWORD *)v27 = 136446466;
      v28 = sub_1000AD18C();
      v30 = v29;
      v83 = sub_100172BEC(v28, v29, &v86);
      v70 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v27 + 4, v27 + 12);
      swift_release_n(v4);
      swift_bridgeObjectRelease(v30);
      *(_WORD *)(v27 + 12) = 2082;
      swift_bridgeObjectRetain(v20);
      v83 = sub_100172BEC(v70, v20, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v27 + 14, v27 + 22);
      swift_bridgeObjectRelease_n(v20, 3);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "[%{public}s] prepareForSend: send token %{public}s is already pending, overriding", (uint8_t *)v27, 0x16u);
      v31 = v71;
      swift_arrayDestroy(v71, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      v32 = v27;
      a3 = v74;
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v20, 2);
      v33 = swift_release_n(v4);
    }
    LOBYTE(a1) = v73;
    a2 = v72;
  }
  else
  {
    v33 = (uint64_t)sub_10008CB3C(&v86);
  }
  v34 = UUID.init()(v33);
  v35 = UUID.uuidString.getter(v34);
  v37 = v36;
  (*(void (**)(char *, uint64_t))(v76 + 8))(v11, v77);
  v38 = *(_QWORD *)(v4 + 72);
  swift_bridgeObjectRetain(v38);
  sub_1000AA698(v39);
  v41 = v40;
  swift_bridgeObjectRelease(v38);
  v42 = sub_1000BADF4(v41);
  swift_bridgeObjectRelease(v41);
  v43 = sub_100224E04((uint64_t)_swiftEmptyArrayStorage);
  v86 = v35;
  v87 = v37;
  v88[1] = v75;
  swift_unknownObjectWeakInit(v88, a2);
  v88[2] = v42;
  v88[3] = 0;
  v88[4] = 0;
  v88[5] = v43;
  v89 = a1 & 1;
  v90 = 0;
  if (qword_1003158B0 != -1)
    goto LABEL_22;
LABEL_11:
  v44 = type metadata accessor for Logger(0);
  sub_10000D744(v44, (uint64_t)qword_10033FEC8);
  sub_1000BA454((uint64_t)&v86, (uint64_t)&v83);
  sub_1000BA454((uint64_t)&v86, (uint64_t)v82);
  sub_1000BA454((uint64_t)&v86, (uint64_t)v80);
  v46 = swift_retain_n(v4, v45);
  v47 = Logger.logObject.getter(v46);
  v48 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = swift_slowAlloc(38, -1);
    v50 = swift_slowAlloc(64, -1);
    v74 = a3;
    v51 = v50;
    v79 = v50;
    *(_DWORD *)v49 = 136446978;
    v52 = sub_1000AD18C();
    v54 = v53;
    v78 = sub_100172BEC(v52, v53, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v49 + 4, v49 + 12);
    swift_release_n(v4);
    swift_bridgeObjectRelease(v54);
    *(_WORD *)(v49 + 12) = 2082;
    v55 = v83;
    v56 = v84[0];
    swift_bridgeObjectRetain(v84[0]);
    v78 = sub_100172BEC(v55, v56, &v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v49 + 14, v49 + 22);
    swift_bridgeObjectRelease(v56);
    sub_1000B8AA0(&v83);
    *(_WORD *)(v49 + 22) = 2050;
    v57 = *(_QWORD *)(v82[4] + 16);
    sub_1000B8AA0(v82);
    v78 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, &v79, v49 + 24, v49 + 32);
    *(_WORD *)(v49 + 32) = 1026;
    v58 = v81;
    sub_1000B8AA0(v80);
    LODWORD(v78) = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, (char *)&v78 + 4, v49 + 34, v49 + 38);
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "[%{public}s] prepareForSend: new send token - %{public}s, texts to compress - %{public}ld, linkIsAvailable - %{BOOL,public}d", (uint8_t *)v49, 0x26u);
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    v59 = v51;
    a3 = v74;
    swift_slowDealloc(v59, -1, -1);
    swift_slowDealloc(v49, -1, -1);
  }
  else
  {
    sub_1000B8AA0(v80);
    sub_1000B8AA0(v82);
    swift_release_n(v4);
    sub_1000B8AA0(&v83);
  }

  if (*(_QWORD *)(v4 + 32))
  {
    *(_BYTE *)(v4 + 40) = 1;
  }
  else
  {
    v60 = sub_100003DB8(&qword_10032B0E0);
    v61 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v60, v61);
  }
  sub_1000BA454((uint64_t)&v86, (uint64_t)&v83);
  swift_beginAccess(a3, v82, 33, 0);
  sub_1000BAE88((uint64_t)&v83, v4 + 152);
  swift_endAccess(v82);
  if (*(_QWORD *)(v4 + 32))
  {
    *(_BYTE *)(v4 + 41) = 1;
  }
  else
  {
    v62 = sub_100003DB8(&qword_10032B0E0);
    v63 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v62, v63);
  }
  v64 = v86;
  v65 = v87;
  swift_bridgeObjectRetain(v87);
  sub_1000B61EC(v64, v65);
  swift_bridgeObjectRelease(v65);
  sub_1000BA454((uint64_t)&v86, (uint64_t)&v83);
  sub_1000B8AA0(&v83);
  v66 = v86;
  v67 = v87;
  sub_1000BA454((uint64_t)&v86, (uint64_t)v82);
  swift_bridgeObjectRetain(v67);
  sub_1000B8AA0(v82);
  sub_1000B8AA0(&v86);
  return v66;
}

void sub_1000AC1E8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  uint64_t v17;
  __n128 v18;
  __n128 v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  const char *v29;
  uint64_t v30;
  __n128 v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  __n128 v39;
  __n128 v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t *, _QWORD);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[8];
  uint64_t v59;
  uint64_t v60[13];
  uint64_t v61;
  uint64_t v62;
  unsigned __int8 v63;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v10 = static OS_dispatch_queue.main.getter(v11);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_33:
    swift_once(&qword_1003158B0, sub_1000D9854);
LABEL_15:
    v30 = type metadata accessor for Logger(0);
    sub_10000D744(v30, (uint64_t)qword_10033FEC8);
    swift_retain_n(v3, v31);
    v33 = swift_bridgeObjectRetain_n(a2, 2, v32);
    v21 = Logger.logObject.getter(v33);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(22, -1);
      v34 = swift_slowAlloc(64, -1);
      v56 = a1;
      v25 = v34;
      v60[0] = v34;
      *(_DWORD *)v23 = 136446466;
      v35 = sub_1000AD18C();
      v37 = v36;
      v57 = sub_100172BEC(v35, v36, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v23 + 4, v23 + 12);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v23 + 12) = 2082;
      swift_bridgeObjectRetain(a2);
      v57 = sub_100172BEC(v56, a2, v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v23 + 14, v23 + 22);
      swift_bridgeObjectRelease_n(a2, 3);
      v29 = "[%{public}s] mandatoryWaitBeforeSendHasBeenObserved: for expired send token %{public}s";
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  swift_beginAccess(v3 + 48, &v59, 0, 0);
  sub_10008CB00((uint64_t *)(v3 + 48), (uint64_t)v60);
  if (!v62)
  {
    sub_10008CB3C(v60);
    goto LABEL_14;
  }
  sub_1000BA454((uint64_t)&v61, (uint64_t)&v57);
  sub_10008CB3C(v60);
  v14 = v57;
  v13 = v58[0];
  swift_bridgeObjectRetain(v58[0]);
  sub_1000B8AA0(&v57);
  if (v14 == a1 && v13 == a2)
  {
    swift_bridgeObjectRelease(a2);
    goto LABEL_8;
  }
  v15 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v14, v13, 0);
  swift_bridgeObjectRelease(v13);
  if ((v15 & 1) == 0)
  {
LABEL_14:
    if (qword_1003158B0 == -1)
      goto LABEL_15;
    goto LABEL_33;
  }
LABEL_8:
  sub_10008CB00((uint64_t *)(v3 + 48), (uint64_t)v60);
  if (v62)
  {
    v16 = v63;
    sub_10008CB3C(v60);
    if (v16 == 1)
    {
      if (qword_1003158B0 != -1)
        swift_once(&qword_1003158B0, sub_1000D9854);
      v17 = type metadata accessor for Logger(0);
      sub_10000D744(v17, (uint64_t)qword_10033FEC8);
      swift_retain_n(v3, v18);
      v20 = swift_bridgeObjectRetain_n(a2, 2, v19);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = swift_slowAlloc(22, -1);
        v24 = swift_slowAlloc(64, -1);
        v56 = a1;
        v25 = v24;
        v60[0] = v24;
        *(_DWORD *)v23 = 136446466;
        v26 = sub_1000AD18C();
        v28 = v27;
        v57 = sub_100172BEC(v26, v27, v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v23 + 4, v23 + 12);
        swift_release_n(v3);
        swift_bridgeObjectRelease(v28);
        *(_WORD *)(v23 + 12) = 2082;
        swift_bridgeObjectRetain(a2);
        v57 = sub_100172BEC(v56, a2, v60);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v23 + 14, v23 + 22);
        swift_bridgeObjectRelease_n(a2, 3);
        v29 = "[%{public}s] mandatoryWaitBeforeSendHasBeenObserved: already reported for token %{public}s";
LABEL_17:
        _os_log_impl((void *)&_mh_execute_header, v21, v22, v29, (uint8_t *)v23, 0x16u);
        swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v25, -1, -1);
        swift_slowDealloc(v23, -1, -1);

        return;
      }
LABEL_18:

      swift_bridgeObjectRelease_n(a2, 2);
      swift_release_n(v3);
      return;
    }
  }
  else
  {
    sub_10008CB3C(v60);
  }
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v38 = type metadata accessor for Logger(0);
  sub_10000D744(v38, (uint64_t)qword_10033FEC8);
  swift_retain_n(v3, v39);
  v41 = swift_bridgeObjectRetain_n(a2, 2, v40);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v42, v43))
  {

    swift_bridgeObjectRelease_n(a2, 2);
    swift_release_n(v3);
    if (*(_QWORD *)(v3 + 32))
      goto LABEL_24;
LABEL_26:
    v50 = sub_100003DB8(&qword_10032B0E0);
    v51 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v50, v51);
    goto LABEL_27;
  }
  v44 = swift_slowAlloc(22, -1);
  v45 = swift_slowAlloc(64, -1);
  v56 = a1;
  v46 = v45;
  v60[0] = v45;
  *(_DWORD *)v44 = 136446466;
  v47 = sub_1000AD18C();
  v49 = v48;
  v57 = sub_100172BEC(v47, v48, v60);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v44 + 4, v44 + 12);
  swift_release_n(v3);
  swift_bridgeObjectRelease(v49);
  *(_WORD *)(v44 + 12) = 2082;
  swift_bridgeObjectRetain(a2);
  v57 = sub_100172BEC(v56, a2, v60);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, v58, v44 + 14, v44 + 22);
  swift_bridgeObjectRelease_n(a2, 3);
  _os_log_impl((void *)&_mh_execute_header, v42, v43, "[%{public}s] mandatoryWaitBeforeSendHasBeenObserved: for token %{public}s", (uint8_t *)v44, 0x16u);
  swift_arrayDestroy(v46, 2, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v46, -1, -1);
  swift_slowDealloc(v44, -1, -1);

  if (!*(_QWORD *)(v3 + 32))
    goto LABEL_26;
LABEL_24:
  *(_BYTE *)(v3 + 40) = 1;
LABEL_27:
  v53 = (void (*)(uint64_t *, _QWORD))sub_1000AD130((uint64_t)v60);
  if (*(_QWORD *)(v52 + 112))
    *(_BYTE *)(v52 + 169) = 1;
  v53(v60, 0);
  if (*(_QWORD *)(v3 + 32))
  {
    *(_BYTE *)(v3 + 41) = 1;
  }
  else
  {
    v54 = sub_100003DB8(&qword_10032B0E0);
    v55 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v54, v55);
  }
}

uint64_t sub_1000AC944(char a1)
{
  uint64_t v1;

  if (swift_unknownObjectWeakLoadStrong(v1 + 240))
    __asm { BR              X10 }
  return 0;
}

void sub_1000ACADC()
{
  uint64_t v0;

  swift_unknownObjectRelease(v0);
  JUMPOUT(0x1000ACAC8);
}

void sub_1000ACAF8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 88) + 160);
  if (v1)
    v2 = *(void **)(*(_QWORD *)(v0 + 88) + 160);
  else
    v2 = &_swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v1);
  swift_unknownObjectRelease(v0);
  swift_bridgeObjectRelease(v2);
  JUMPOUT(0x1000ACAC8);
}

_QWORD *sub_1000ACB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  __n128 v9;
  __n128 v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  id v15;
  void *v16;
  _QWORD v18[5];
  uint64_t v19;

  v4 = v3;
  v8 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v3[2] = PassthroughSubject.init()(v9);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v11 = PassthroughSubject.init()(v10);
  v3[6] = a3;
  v3[7] = 0;
  v3[3] = v11;
  v3[4] = a1;
  v3[5] = a2;
  v12 = (void *)objc_opt_self(NSTimer);
  v13 = swift_allocObject(&unk_1002ECC18, 24, 7);
  swift_weakInit(v13 + 16);
  v18[4] = sub_1000BB38C;
  v19 = v13;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_100076C24;
  v18[3] = &unk_1002ECC30;
  v14 = _Block_copy(v18);
  swift_release(v19);
  v15 = objc_msgSend(v12, "scheduledTimerWithTimeInterval:repeats:block:", 1, v14, 1.0);
  _Block_release(v14);
  v16 = (void *)v4[7];
  v4[7] = v15;

  return v4;
}

uint64_t sub_1000ACC80(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_1000ACCD4();
    return swift_release(v4);
  }
  return result;
}

void sub_1000ACCD4()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  v9 = (void *)v1[7];
  if (v9)
  {
    v10 = v1[6];
    if (v10 < 0)
    {
      objc_msgSend(v9, "invalidate");
      v27 = (void *)v1[7];
      v1[7] = 0;

LABEL_13:
      v28 = sub_100003DB8(&qword_10032B0E0);
      v29 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v28, v29);
      return;
    }
    v1[6] = v10 - 1;
    if (qword_1003158B0 == -1)
    {
LABEL_5:
      v11 = type metadata accessor for Logger(0);
      sub_10000D744(v11, (uint64_t)qword_10033FEC8);
      swift_retain(v1);
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.default.getter(v13);
      if (os_log_type_enabled(v13, v14))
      {
        v15 = swift_slowAlloc(22, -1);
        v16 = swift_slowAlloc(32, -1);
        v31 = v16;
        *(_DWORD *)v15 = 136446466;
        v17 = v1[4];
        v18 = v1[5];
        swift_bridgeObjectRetain(v18);
        v30 = sub_100172BEC(v17, v18, &v31);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v15 + 4, v15 + 12);
        swift_bridgeObjectRelease(v18);
        *(_WORD *)(v15 + 12) = 2050;
        v30 = v1[6];
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v15 + 14, v15 + 22);
        swift_release(v1);
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%{public}s] %{public}ld seconds left before auto send", (uint8_t *)v15, 0x16u);
        swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1, -1);
        swift_slowDealloc(v15, -1, -1);

      }
      else
      {

        swift_release(v1);
      }
      goto LABEL_13;
    }
LABEL_16:
    swift_once(&qword_1003158B0, sub_1000D9854);
    goto LABEL_5;
  }
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v19 = type metadata accessor for Logger(0);
  sub_10000D744(v19, (uint64_t)qword_10033FEC8);
  swift_retain(v1);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v31 = v24;
    *(_DWORD *)v23 = 136446210;
    v25 = v1[4];
    v26 = v1[5];
    swift_bridgeObjectRetain(v26);
    v30 = sub_100172BEC(v25, v26, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v23 + 4, v23 + 12);
    swift_release(v1);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%{public}s] Autosend timer already expired", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    swift_release(v1);
  }
}

uint64_t sub_1000AD0F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 40));

  return swift_deallocClassInstance(v0, 64, 7);
}

void *sub_1000AD130(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 48, a1, 33, 0);
  return &j__swift_endAccess;
}

dispatch_semaphore_t sub_1000AD16C()
{
  dispatch_semaphore_t result;

  result = dispatch_semaphore_create(1);
  qword_10031D2B8 = (uint64_t)result;
  return result;
}

uint64_t sub_1000AD18C()
{
  uint64_t v0;
  uint64_t v1;
  Swift::String v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  uint64_t v8;

  v1 = 69;
  if (*(_BYTE *)(*(_QWORD *)(v0 + 264) + 32))
    v1 = 82;
  v8 = v1;
  swift_bridgeObjectRetain(0xE100000000000000);
  v2._countAndFlagsBits = 46;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(0xE100000000000000);
  v3 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
  v5 = v4;
  swift_bridgeObjectRetain(0xE100000000000000);
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease(0xE100000000000000);
  swift_bridgeObjectRelease(v5);
  return v8;
}

void sub_1000AD25C()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 48, v3, 0, 0);
  v1 = *(_QWORD *)(v0 + 144);
  if (*(_QWORD *)(v1 + 16))
    __asm { BR              X11 }
  __break(1u);
  JUMPOUT(0x1000AD2E8);
}

uint64_t sub_1000AD2FC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  int v4;
  uint64_t v5;
  _BYTE v7[24];

  swift_beginAccess(v1 + 48, v7, 0, 0);
  v3 = *(_QWORD *)(v1 + 144);
  if (!*(_QWORD *)(v3 + 16))
  {
    v5 = 0;
LABEL_6:
    LOBYTE(v4) = 1;
    goto LABEL_8;
  }
  v4 = *(unsigned __int8 *)(v3 + 32);
  if (v4 != 2)
  {
    v5 = 0;
    goto LABEL_8;
  }
  v5 = *(_QWORD *)(v1 + 128);
  if (!v5)
    goto LABEL_6;
  v5 = swift_retain(v5);
  LOBYTE(v4) = 2;
LABEL_8:
  *(_QWORD *)a1 = v1;
  *(_BYTE *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  return swift_retain(v1);
}

_QWORD *sub_1000AD388()
{
  _QWORD *v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39[8];
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[24];
  _QWORD *v45;

  v4 = v0;
  v5 = _swiftEmptyArrayStorage;
  v45 = _swiftEmptyArrayStorage;
  swift_beginAccess(v4 + 6, v44, 0, 0);
  v6 = v4[18];
  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    v8 = v6 + 32;
    swift_bridgeObjectRetain(v4[18]);
    v9 = 0;
    v34 = v7;
    v36 = v6;
    v33 = v6 + 32;
    while (1)
    {
      if (v9 >= *(_QWORD *)(v6 + 16))
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        swift_once(&qword_1003158B0, sub_1000D9854);
LABEL_40:
        v20 = type metadata accessor for Logger(0);
        sub_10000D744(v20, (uint64_t)qword_10033FEC8);
        swift_retain(v4);
        swift_retain(v6);
        sub_10007BB44(v1, v2, v3);
        swift_retain(v4);
        swift_retain(v6);
        v21 = sub_10007BB44(v1, v2, v3);
        v22 = Logger.logObject.getter(v21);
        v23 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v22, v23))
        {
          v35 = v8;
          v24 = swift_slowAlloc(22, -1);
          v37 = swift_slowAlloc(64, -1);
          v43 = v37;
          *(_DWORD *)v24 = 136446467;
          v25 = sub_1000AD18C();
          v27 = v26;
          v38 = sub_100172BEC(v25, v26, &v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v24 + 4, v24 + 12);
          swift_release_n(v4);
          swift_bridgeObjectRelease(v27);
          *(_WORD *)(v24 + 12) = 2081;
          v38 = v6;
          v39[0] = v35;
          v40 = v1;
          v41 = v2;
          v42 = v3;
          swift_retain(v6);
          sub_10007BB44(v1, v2, v3);
          v29 = String.init<A>(describing:)(&v38, &type metadata for QuestionnaireNavigationPage, v28);
          v31 = v30;
          v38 = sub_100172BEC(v29, v30, &v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v24 + 14, v24 + 22);
          swift_release(v6);
          swift_bridgeObjectRelease(v31);
          sub_10007BB74(v1, v2, v3);
          swift_release(v6);
          sub_10007BB74(v1, v2, v3);
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "[%{public}s] buildNavigationPath: dropping first page: %{private}s", (uint8_t *)v24, 0x16u);
          swift_arrayDestroy(v37, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v37, -1, -1);
          swift_slowDealloc(v24, -1, -1);
          swift_release(v6);

          sub_10007BB74(v1, v2, v3);
        }
        else
        {
          swift_release(v6);
          sub_10007BB74(v1, v2, v3);
          swift_release(v6);
          swift_release_n(v4);
          sub_10007BB74(v1, v2, v3);
          swift_release(v6);
          sub_10007BB74(v1, v2, v3);

        }
        return v45;
      }
      v3 = *(unsigned __int8 *)(v8 + v9);
      if ((_DWORD)v3 != 2)
        break;
      v2 = v4[15];
      if ((unint64_t)v2 >> 62)
      {
        if (v2 < 0)
          v17 = v4[15];
        else
          v17 = v2 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(v4[15]);
        v3 = _CocoaArrayWrapper.endIndex.getter(v17);
        if (!v3)
        {
LABEL_31:
          v16 = swift_bridgeObjectRelease(v2);
          v2 = v4[17];
          if (!v2)
            goto LABEL_5;
LABEL_32:
          swift_retain_n(v2, v16);
          swift_retain(v4);
          if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
            v5 = sub_100171FE0(0, v5[2] + 1, 1, v5);
          v1 = v5[2];
          v18 = v5[3];
          v3 = v1 + 1;
          if (v1 >= v18 >> 1)
            v5 = sub_100171FE0((_QWORD *)(v18 > 1), v1 + 1, 1, v5);
          v5[2] = v3;
          v19 = &v5[5 * v1];
          v19[4] = v4;
          *((_BYTE *)v19 + 40) = 2;
          v19[7] = 0;
          v19[8] = 0;
          v19[6] = v2;
          swift_release(v2);
LABEL_4:
          v45 = v5;
          goto LABEL_5;
        }
      }
      else
      {
        v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v4[15]);
        if (!v3)
          goto LABEL_31;
      }
      if (v3 < 1)
        goto LABEL_45;
      v11 = 0;
      do
      {
        if ((v2 & 0xC000000000000001) != 0)
        {
          v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v2);
        }
        else
        {
          v12 = *(_QWORD *)(v2 + 8 * v11 + 32);
          swift_retain(v12);
        }
        swift_retain(v4);
        swift_retain(v12);
        if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
          v5 = sub_100171FE0(0, v5[2] + 1, 1, v5);
        v1 = v5[2];
        v13 = v5[3];
        if (v1 >= v13 >> 1)
          v5 = sub_100171FE0((_QWORD *)(v13 > 1), v1 + 1, 1, v5);
        v5[2] = v1 + 1;
        v14 = &v5[5 * v1];
        v14[4] = v4;
        ++v11;
        *((_BYTE *)v14 + 40) = 2;
        v14[7] = 0;
        v14[8] = 0;
        v14[6] = v12;
        swift_release(v12);
      }
      while (v3 != v11);
      v16 = swift_bridgeObjectRelease(v2);
      v45 = v5;
      v7 = v34;
      v6 = v36;
      v8 = v33;
      v2 = v4[17];
      if (v2)
        goto LABEL_32;
LABEL_5:
      if (++v9 == v7)
      {
        swift_bridgeObjectRelease(v6);
        goto LABEL_38;
      }
    }
    swift_retain(v4);
    if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      v5 = sub_100171FE0(0, v5[2] + 1, 1, v5);
    v1 = v5[2];
    v15 = v5[3];
    v2 = v1 + 1;
    if (v1 >= v15 >> 1)
      v5 = sub_100171FE0((_QWORD *)(v15 > 1), v1 + 1, 1, v5);
    v5[2] = v2;
    v10 = &v5[5 * v1];
    v10[4] = v4;
    *((_BYTE *)v10 + 40) = v3;
    v10[7] = 0;
    v10[8] = 0;
    v10[6] = 0;
    goto LABEL_4;
  }
LABEL_38:
  if (v5[2])
  {
    v6 = v5[4];
    LOBYTE(v8) = *((_BYTE *)v5 + 40);
    v1 = v5[6];
    v2 = v5[7];
    v3 = v5[8];
    swift_retain(v6);
    sub_10007BB44(v1, v2, v3);
    sub_100192B2C(0, 1);
    if (qword_1003158B0 != -1)
      goto LABEL_46;
    goto LABEL_40;
  }
  return v45;
}

uint64_t sub_1000AD998()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[8];
  _QWORD v5[4];
  _QWORD v6[8];
  _BYTE v7[24];
  _QWORD v8[13];
  _QWORD v9[11];

  swift_beginAccess(v0 + 48, v7, 0, 0);
  sub_10008CB00((uint64_t *)(v0 + 48), (uint64_t)v8);
  if (v9[1])
  {
    sub_1000BA454((uint64_t)v9, (uint64_t)v6);
    sub_10008CB3C(v8);
    sub_1000BA454((uint64_t)v6, (uint64_t)v5);
    sub_1000B8AA0(v5);
    v1 = v6[0];
    v2 = v6[1];
    sub_1000BA454((uint64_t)v6, (uint64_t)v4);
    swift_bridgeObjectRetain(v2);
    sub_1000B8AA0(v4);
    sub_1000B8AA0(v6);
  }
  else
  {
    sub_10008CB3C(v8);
    return 0;
  }
  return v1;
}

void sub_1000ADAA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD v16[4];
  __int16 v17;

  v17 = 0;
  memset(v16, 0, sizeof(v16));
  swift_retain(v3);
  v6 = sub_100224AD0((uint64_t)_swiftEmptyArrayStorage);
  v7 = sub_100224BE8((uint64_t)_swiftEmptyArrayStorage);
  v8 = sub_100226F0C((uint64_t)_swiftEmptyArrayStorage);
  v9 = sub_100224CF0((uint64_t)_swiftEmptyArrayStorage);
  v10 = sub_100224E04((uint64_t)_swiftEmptyArrayStorage);
  v11 = type metadata accessor for QuestionnaireState.DefaultTextEncoder();
  v12 = (_QWORD *)swift_allocObject(v11, 40, 7);
  v12[2] = 63;
  v12[3] = 0xE100000000000000;
  v12[4] = v10;
  *(_QWORD *)(v3 + 104) = v11;
  *(_QWORD *)(v3 + 112) = &off_1002ECAB8;
  *(_QWORD *)(v3 + 72) = v9;
  *(_QWORD *)(v3 + 80) = v12;
  *(_QWORD *)(v3 + 48) = v6;
  *(_QWORD *)(v3 + 56) = v7;
  *(_QWORD *)(v3 + 64) = v8;
  *(_QWORD *)(v3 + 120) = _swiftEmptyArrayStorage;
  *(_QWORD *)(v3 + 128) = 0;
  *(_QWORD *)(v3 + 136) = 0;
  *(_QWORD *)(v3 + 144) = &off_1002E07B0;
  sub_1000BAFE8((uint64_t)v16, v3 + 152);
  *(_QWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 248) = 0;
  swift_unknownObjectWeakInit(v3 + 240, 0);
  *(_BYTE *)(v3 + 256) = 2;
  if (qword_1003157E0 != -1)
    swift_once(&qword_1003157E0, sub_1000AD16C);
  OS_dispatch_semaphore.wait()();
  v13 = qword_10031D2B0;
  if (qword_10031D2B0 == -1)
  {
    __break(1u);
  }
  else
  {
    ++qword_10031D2B0;
    OS_dispatch_semaphore.signal()();
    *(_QWORD *)(v3 + 264) = a1;
    *(_QWORD *)(v3 + 272) = v13;
    *(_QWORD *)(v3 + 248) = a3;
    swift_unknownObjectWeakAssign(v3 + 240, a2);
    swift_retain(a1);
    swift_release(v3);
    *(_QWORD *)(v3 + 32) = 0;
    *(_WORD *)(v3 + 40) = 0;
    v14 = sub_100003DB8(&qword_10032B0E0);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    *(_QWORD *)(v3 + 16) = PassthroughSubject.init()();
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    *(_QWORD *)(v3 + 24) = PassthroughSubject.init()();
    swift_retain(v3);
    sub_1000ADCBC(0);
    swift_release(v3);
    swift_release(a1);
    swift_unknownObjectRelease(a2);
  }
}

_QWORD *sub_1000ADCBC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  int v24;
  _UNKNOWN **v25;
  char v26;
  _UNKNOWN **v27;
  __n128 v28;
  __n128 v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __n128 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  _UNKNOWN **v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  _UNKNOWN **v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int16 v76;
  uint64_t v77;
  uint64_t v78;

  v2 = v1;
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v3 = type metadata accessor for Logger(0);
  sub_10000D744(v3, (uint64_t)qword_10033FEC8);
  v5 = swift_retain_n(v1, v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = swift_slowAlloc(18, -1);
    v9 = swift_slowAlloc(32, -1);
    v61 = v9;
    *(_DWORD *)v8 = 136446466;
    v10 = sub_1000AD18C();
    v12 = v11;
    v59 = sub_100172BEC(v10, v11, (uint64_t *)&v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v8 + 4, v8 + 12);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v12);
    *(_WORD *)(v8 + 12) = 1024;
    LODWORD(v59) = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, (char *)&v59 + 4, v8 + 14, v8 + 18);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%{public}s] State reset(onBackToFirstPage: %{BOOL}d)", (uint8_t *)v8, 0x12u);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  v76 = 0;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  v13 = sub_100224AD0((uint64_t)_swiftEmptyArrayStorage);
  v14 = sub_100224BE8((uint64_t)_swiftEmptyArrayStorage);
  v15 = sub_100226F0C((uint64_t)_swiftEmptyArrayStorage);
  v16 = sub_100224CF0((uint64_t)_swiftEmptyArrayStorage);
  v17 = sub_100224E04((uint64_t)_swiftEmptyArrayStorage);
  v18 = type metadata accessor for QuestionnaireState.DefaultTextEncoder();
  v19 = (_QWORD *)swift_allocObject(v18, 40, 7);
  v19[2] = 63;
  v19[3] = 0xE100000000000000;
  v19[4] = v17;
  v58 = v18;
  v66 = v18;
  v67 = &off_1002ECAB8;
  v64 = v16;
  v65 = v19;
  v61 = v13;
  v62 = v14;
  v63 = v15;
  v68 = _swiftEmptyArrayStorage;
  v69 = 0;
  v77 = 0;
  v78 = 0;
  v70 = 0;
  v71 = &off_1002E0558;
  swift_beginAccess(v2 + 48, &v59, 33, 0);
  sub_1000BB39C((uint64_t *)&v61, (uint64_t *)(v2 + 48));
  swift_endAccess(&v59);
  v20 = *(_QWORD *)(v2 + 264);
  v21 = sub_100084F58(v2);
  v23 = v21;
  v24 = *(unsigned __int8 *)(v2 + 256);
  if (v24 == 2)
  {
    v25 = &off_1002E0580;
  }
  else
  {
    v26 = ((v24 & 1) == 0) ^ *(_BYTE *)(v20 + 32);
    v27 = &off_1002E05F8;
    if ((a1 & 1) != 0)
      v27 = &off_1002E05D0;
    if ((v26 & 1) != 0)
      v25 = v27;
    else
      v25 = &off_1002E05A8;
  }
  swift_retain_n(v21, v22);
  swift_bridgeObjectRetain_n(v25, 2, v28);
  v30 = swift_retain_n(v2, v29);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter();
  v57 = (uint64_t *)(v2 + 48);
  if (os_log_type_enabled(v31, v32))
  {
    v33 = swift_slowAlloc(32, -1);
    v56 = swift_slowAlloc(96, -1);
    v59 = v56;
    *(_DWORD *)v33 = 136446723;
    v34 = sub_1000AD18C();
    v36 = v35;
    v61 = sub_100172BEC(v34, v35, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v33 + 4, v33 + 12);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v36);
    *(_WORD *)(v33 + 12) = 2081;
    if (v23)
    {
      v37 = *(_QWORD *)(v23 + 16);
      swift_bridgeObjectRetain(*(_QWORD *)(v23 + 24));
    }
    else
    {
      v37 = 0;
      v38 = 0;
    }
    v61 = v37;
    v62 = v38;
    v39 = sub_100003DB8(&qword_100318260);
    v41 = String.init<A>(describing:)(&v61, v39, v40);
    v43 = v42;
    v61 = sub_100172BEC(v41, v42, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v33 + 14, v33 + 22);
    swift_release_n(v23);
    swift_bridgeObjectRelease(v43);
    *(_WORD *)(v33 + 22) = 2082;
    v44 = swift_bridgeObjectRetain(v25);
    v45 = Array.description.getter(v44);
    v47 = v46;
    swift_bridgeObjectRelease(v25);
    v61 = sub_100172BEC(v45, v47, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v33 + 24, v33 + 32);
    swift_bridgeObjectRelease_n(v25, 2);
    swift_bridgeObjectRelease(v47);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "[%{public}s] First question: %{private}s, initial stage history: %{public}s", (uint8_t *)v33, 0x20u);
    swift_arrayDestroy(v56, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v25, 2);
    swift_release_n(v23);
    swift_release_n(v2);
  }
  v76 = 0;
  v75 = 0u;
  v74 = 0u;
  v73 = 0u;
  v72 = 0u;
  v48 = sub_100224AD0((uint64_t)_swiftEmptyArrayStorage);
  v49 = sub_100224BE8((uint64_t)_swiftEmptyArrayStorage);
  v50 = sub_100226F0C((uint64_t)_swiftEmptyArrayStorage);
  v51 = sub_100224CF0((uint64_t)_swiftEmptyArrayStorage);
  v52 = sub_100224E04((uint64_t)_swiftEmptyArrayStorage);
  v53 = (_QWORD *)swift_allocObject(v58, 40, 7);
  v53[2] = 63;
  v53[3] = 0xE100000000000000;
  v53[4] = v52;
  v64 = v51;
  v65 = v53;
  v61 = v48;
  v62 = v49;
  v63 = v50;
  v66 = v58;
  v67 = &off_1002ECAB8;
  v68 = _swiftEmptyArrayStorage;
  v69 = v23;
  v77 = 0;
  v78 = 0;
  v70 = v23;
  v71 = v25;
  swift_beginAccess(v57, &v59, 33, 0);
  swift_retain(v23);
  sub_1000BB3D0((uint64_t *)&v61, v57);
  swift_endAccess(&v59);
  return sub_10008CB3C(&v61);
}

void sub_1000AE2F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[3];

  v1 = v0;
  if (sub_1000B2290(1u, 2))
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v2 = type metadata accessor for Logger(0);
    sub_10000D744(v2, (uint64_t)qword_10033FEC8);
    v4 = swift_retain_n(v0, v3);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(12, -1);
      v8 = swift_slowAlloc(32, -1);
      v32[0] = v8;
      *(_DWORD *)v7 = 136446210;
      v9 = sub_1000AD18C();
      v11 = v10;
      v29 = sub_100172BEC(v9, v10, v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v7 + 4, v7 + 12);
      swift_release_n(v1);
      swift_bridgeObjectRelease(v11);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] Starting", v7, 0xCu);
      swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1, -1);
      swift_slowDealloc(v7, -1, -1);

    }
    else
    {

      swift_release_n(v0);
    }
    swift_beginAccess(v1 + 48, v32, 0, 0);
    v12 = *(_QWORD *)(v1 + 136);
    if (v12)
    {
      v14 = *(_QWORD *)(v12 + 16);
      v13 = *(_QWORD *)(v12 + 24);
      swift_bridgeObjectRetain(v13);
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    v15 = swift_bridgeObjectRetain(v13);
    v16 = swift_retain_n(v1, v15);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = swift_slowAlloc(22, -1);
      v20 = swift_slowAlloc(64, -1);
      v31 = v20;
      *(_DWORD *)v19 = 136446467;
      v21 = sub_1000AD18C();
      v23 = v22;
      v29 = sub_100172BEC(v21, v22, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v19 + 4, v19 + 12);
      swift_release_n(v1);
      swift_bridgeObjectRelease(v23);
      *(_WORD *)(v19 + 12) = 2081;
      v29 = v14;
      v30 = v13;
      swift_bridgeObjectRetain(v13);
      v24 = sub_100003DB8(&qword_100318260);
      v26 = String.init<A>(describing:)(&v29, v24, v25);
      v28 = v27;
      v29 = sub_100172BEC(v26, v27, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease_n(v13, 2);
      swift_bridgeObjectRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "[%{public}s] Current question: %{private}s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v19, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v13, 2);
      swift_release_n(v1);
    }
  }
}

void sub_1000AE670(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v2 = v1;
  v4 = *(unsigned __int8 *)(v1 + 256);
  if (v4 == 2)
  {
    if (a1 == 2)
      return;
  }
  else if (a1 != 2 && ((v4 ^ a1) & 1) == 0)
  {
    return;
  }
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FEC8);
  v7 = swift_retain_n(v1, v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(32, -1);
    v11 = swift_slowAlloc(96, -1);
    v30 = v11;
    *(_DWORD *)v10 = 136446722;
    v12 = sub_1000AD18C();
    v14 = v13;
    v29 = sub_100172BEC(v12, v13, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v10 + 4, v10 + 12);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v10 + 12) = 2080;
    LOBYTE(v29) = *(_BYTE *)(v2 + 256);
    v15 = sub_100003DB8(&qword_10031D780);
    v17 = String.init<A>(describing:)(&v29, v15, v16);
    v19 = v18;
    v29 = sub_100172BEC(v17, v18, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v10 + 14, v10 + 22);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v10 + 22) = 2080;
    LOBYTE(v29) = a1;
    v21 = String.init<A>(describing:)(&v29, v15, v20);
    v23 = v22;
    v29 = sub_100172BEC(v21, v22, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v10 + 24, v10 + 32);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s] invokedFromScope changed from: %s to %s", (uint8_t *)v10, 0x20u);
    swift_arrayDestroy(v11, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  *(_BYTE *)(v2 + 256) = a1;
  sub_1000AD25C();
  if ((v24 & 1) == 0)
  {
    if (*(_QWORD *)(v2 + 32))
    {
      *(_BYTE *)(v2 + 40) = 1;
    }
    else
    {
      v25 = sub_100003DB8(&qword_10032B0E0);
      v26 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v25, v26);
    }
    sub_1000ADCBC(0);
    if (*(_QWORD *)(v2 + 32))
    {
      *(_BYTE *)(v2 + 41) = 1;
    }
    else
    {
      v27 = sub_100003DB8(&qword_10032B0E0);
      v28 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v27, v28);
    }
  }
}

uint64_t sub_1000AE9AC(_QWORD *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __n128 v15;
  __n128 v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  __n128 v32;
  uint64_t v33;
  os_log_type_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  __n128 v49;
  __n128 v50;
  __n128 v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  __n128 v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  __n128 v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  __n128 v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __n128 v87;
  __n128 v88;
  __n128 v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  char v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  unint64_t v104;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  os_log_type_t type;
  NSObject *typea;
  uint64_t typeb;
  os_log_type_t log;
  NSObject *loga;
  uint64_t v118;
  uint64_t v119;
  os_log_type_t v120;
  char v121;
  char v122;
  uint64_t v123;
  uint64_t v124[3];
  uint64_t v125;
  _BYTE v126[24];

  v5 = v3;
  v9 = v3 + 48;
  swift_beginAccess(v3 + 48, v126, 1, 0);
  v10 = *(_QWORD *)(v3 + 144);
  v11 = *(_QWORD *)(v10 + 16);
  if (!v11)
  {
    __break(1u);
LABEL_44:
    swift_once(&qword_1003158B0, sub_1000D9854);
LABEL_9:
    v30 = type metadata accessor for Logger(0);
    sub_10000D744(v30, (uint64_t)qword_10033FEC8);
    swift_retain_n(v3, v31);
    v33 = swift_retain_n(a1, v32);
    v18 = Logger.logObject.getter(v33);
    v34 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v34))
    {
      v20 = swift_slowAlloc(32, -1);
      v21 = swift_slowAlloc(96, -1);
      v124[0] = v21;
      *(_DWORD *)v20 = 136446723;
      v35 = sub_1000AD18C();
      v37 = v36;
      v125 = sub_100172BEC(v35, v36, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v20 + 4, v20 + 12);
      swift_release_n(v5);
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v20 + 12) = 2081;
      v38 = a1[2];
      v39 = a1[3];
      swift_bridgeObjectRetain(v39);
      v125 = sub_100172BEC(v38, v39, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v20 + 14, v20 + 22);
      swift_release_n(a1);
      v40 = swift_bridgeObjectRelease(v39);
      *(_WORD *)(v20 + 22) = 2082;
      LOBYTE(v125) = v4;
      v41 = String.init<A>(describing:)(&v125, &type metadata for QuestionnaireState.Stage, v40);
      v43 = v42;
      v125 = sub_100172BEC(v41, v42, v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v20 + 24, v20 + 32);
      swift_bridgeObjectRelease(v43);
      _os_log_impl((void *)&_mh_execute_header, v18, v34, "[%{public}s] Requested to record answer for question %{private}s on %{public}s stage, ignoring", (uint8_t *)v20, 0x20u);
      v27 = (char *)&type metadata for Any + 8;
      v28 = v21;
      v29 = 3;
      goto LABEL_11;
    }
LABEL_12:

    swift_release_n(a1);
    swift_release_n(v5);
    return 0;
  }
  v4 = *(unsigned __int8 *)(v11 + v10 + 31);
  if (v4 != 2)
  {
    if (qword_1003158B0 == -1)
      goto LABEL_9;
    goto LABEL_44;
  }
  v12 = *(_QWORD *)(v3 + 120);
  swift_bridgeObjectRetain(*(_QWORD *)(v5 + 120));
  v13 = sub_100100E5C((uint64_t)a1, v12);
  swift_bridgeObjectRelease(v12);
  if ((v13 & 1) == 0)
  {
    if (a2)
    {
      v45 = (_QWORD *)a1[14];
      if (v45 && (v46 = *(_QWORD *)(a2 + 16), v47 = *(_QWORD *)(a2 + 24), (sub_100101040(v46, v47, v45) & 1) == 0))
      {
        v85 = qword_1003158B0;
        swift_retain(a2);
        if (v85 != -1)
          swift_once(&qword_1003158B0, sub_1000D9854);
        v86 = type metadata accessor for Logger(0);
        sub_10000D744(v86, (uint64_t)qword_10033FEC8);
        swift_retain_n(a2, v87);
        swift_retain_n(v5, v88);
        v90 = swift_retain_n(a1, v89);
        v91 = Logger.logObject.getter(v90);
        v92 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v91, v92))
        {
          v120 = v92;
          v93 = swift_slowAlloc(32, -1);
          v123 = swift_slowAlloc(96, -1);
          v124[0] = v123;
          *(_DWORD *)v93 = 136446723;
          loga = v91;
          v94 = sub_1000AD18C();
          v96 = v95;
          v125 = sub_100172BEC(v94, v95, v124);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v93 + 4, v93 + 12);
          swift_release_n(v5);
          swift_bridgeObjectRelease(v96);
          *(_WORD *)(v93 + 12) = 2081;
          typeb = v46;
          v97 = a3;
          v99 = a1[2];
          v98 = a1[3];
          swift_bridgeObjectRetain(v98);
          v100 = v99;
          a3 = v97;
          v125 = sub_100172BEC(v100, v98, v124);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v93 + 14, v93 + 22);
          swift_release_n(a1);
          swift_bridgeObjectRelease(v98);
          *(_WORD *)(v93 + 22) = 2081;
          swift_bridgeObjectRetain(v47);
          v125 = sub_100172BEC(typeb, v47, v124);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v93 + 24, v93 + 32);
          swift_release_n(a2);
          swift_bridgeObjectRelease(v47);
          _os_log_impl((void *)&_mh_execute_header, loga, v120, "[%{public}s] Question %{private}s optionsOrder must contain %{private}s", (uint8_t *)v93, 0x20u);
          swift_arrayDestroy(v123, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v123, -1, -1);
          swift_slowDealloc(v93, -1, -1);

        }
        else
        {

          swift_release_n(a2);
          swift_release_n(a1);
          swift_release_n(v5);
        }
      }
      else
      {
        swift_retain(a2);
      }
      if (!a3)
      {
        swift_release(a2);
        goto LABEL_37;
      }
      if (qword_1003158B0 != -1)
        swift_once(&qword_1003158B0, sub_1000D9854);
      v48 = type metadata accessor for Logger(0);
      sub_10000D744(v48, (uint64_t)qword_10033FEC8);
      swift_retain_n(a2, v49);
      swift_retain_n(v5, v50);
      v52 = swift_retain_n(a1, v51);
      v53 = Logger.logObject.getter(v52);
      v54 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v53, v54))
      {
        v121 = a3;
        v55 = swift_slowAlloc(42, -1);
        v118 = swift_slowAlloc(128, -1);
        v124[0] = v118;
        *(_DWORD *)v55 = 136446979;
        v56 = sub_1000AD18C();
        v58 = v57;
        v125 = sub_100172BEC(v56, v57, v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v55 + 4, v55 + 12);
        swift_release_n(v5);
        swift_bridgeObjectRelease(v58);
        *(_WORD *)(v55 + 12) = 2081;
        type = v54;
        v60 = a1[2];
        v59 = a1[3];
        swift_bridgeObjectRetain(v59);
        v125 = sub_100172BEC(v60, v59, v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v55 + 14, v55 + 22);
        swift_release_n(a1);
        swift_bridgeObjectRelease(v59);
        *(_WORD *)(v55 + 22) = 2081;
        v61 = *(_QWORD *)(a2 + 16);
        v62 = *(_QWORD *)(a2 + 24);
        swift_bridgeObjectRetain(v62);
        v125 = sub_100172BEC(v61, v62, v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v55 + 24, v55 + 32);
        swift_release_n(a2);
        v63 = swift_bridgeObjectRelease(v62);
        *(_WORD *)(v55 + 32) = 2080;
        LOBYTE(v125) = v121;
        v64 = String.init<A>(describing:)(&v125, &type metadata for QuestionnaireState.RecordedAnswerChoice, v63);
        v66 = v65;
        v125 = sub_100172BEC(v64, v65, v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v55 + 34, v55 + 42);
        swift_bridgeObjectRelease(v66);
        _os_log_impl((void *)&_mh_execute_header, v53, type, "[%{public}s] Question %{private}s recorded with option %{private}s, but the provided choice is %s (expected to be .answered)", (uint8_t *)v55, 0x2Au);
        swift_arrayDestroy(v118, 4, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v118, -1, -1);
        v67 = v55;
        a3 = v121;
        swift_slowDealloc(v67, -1, -1);
        swift_release(a2);

        goto LABEL_37;
      }

      swift_release_n(a1);
      swift_release_n(v5);
      v101 = a2;
    }
    else
    {
      if (a3)
        goto LABEL_37;
      if (qword_1003158B0 != -1)
        swift_once(&qword_1003158B0, sub_1000D9854);
      v68 = type metadata accessor for Logger(0);
      sub_10000D744(v68, (uint64_t)qword_10033FEC8);
      swift_retain_n(v5, v69);
      v71 = swift_retain_n(a1, v70);
      v72 = Logger.logObject.getter(v71);
      v73 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v72, v73))
      {
        v122 = a3;
        v74 = swift_slowAlloc(32, -1);
        v119 = swift_slowAlloc(96, -1);
        v124[0] = v119;
        *(_DWORD *)v74 = 136446723;
        log = v73;
        typea = v72;
        v75 = sub_1000AD18C();
        v77 = v76;
        v125 = sub_100172BEC(v75, v76, v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v74 + 4, v74 + 12);
        swift_release_n(v5);
        swift_bridgeObjectRelease(v77);
        *(_WORD *)(v74 + 12) = 2081;
        v78 = a1[2];
        v79 = a1[3];
        swift_bridgeObjectRetain(v79);
        v125 = sub_100172BEC(v78, v79, v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v74 + 14, v74 + 22);
        swift_release_n(a1);
        v80 = swift_bridgeObjectRelease(v79);
        *(_WORD *)(v74 + 22) = 2080;
        LOBYTE(v125) = 0;
        v81 = String.init<A>(describing:)(&v125, &type metadata for QuestionnaireState.RecordedAnswerChoice, v80);
        v83 = v82;
        v125 = sub_100172BEC(v81, v82, v124);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v74 + 24, v74 + 32);
        swift_bridgeObjectRelease(v83);
        _os_log_impl((void *)&_mh_execute_header, typea, log, "[%{public}s] Question %{private}s recorded with nil option, but the provided choice is %s", (uint8_t *)v74, 0x20u);
        swift_arrayDestroy(v119, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v119, -1, -1);
        v84 = v74;
        a3 = v122;
        swift_slowDealloc(v84, -1, -1);

        goto LABEL_37;
      }

      swift_release_n(a1);
      v101 = v5;
    }
    swift_release_n(v101);
LABEL_37:
    v102 = *(_QWORD *)(v5 + 32);
    v103 = __CFADD__(v102, 1);
    v104 = v102 + 1;
    if (v103)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v5 + 32) = v104;
      *(_BYTE *)(v5 + 40) = 1;
      swift_beginAccess(v9, v124, 33, 0);
      swift_retain(a2);
      swift_retain(a1);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + 48));
      v125 = *(_QWORD *)(v5 + 48);
      *(_QWORD *)(v5 + 48) = 0x8000000000000000;
      sub_10020C824(a3, a2, (uint64_t)a1, isUniquelyReferenced_nonNull_native);
      v106 = *(_QWORD *)(v5 + 48);
      *(_QWORD *)(v5 + 48) = v125;
      swift_release(a1);
      swift_bridgeObjectRelease(v106);
      swift_retain(a1);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v107);
      v9 = *(_QWORD *)((*(_QWORD *)(v5 + 120) & 0xFFFFFFFFFFFFFF8) + 0x10);
      v104 = *(_QWORD *)((*(_QWORD *)(v5 + 120) & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v9 < v104 >> 1)
        goto LABEL_39;
    }
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v104 > 1, v9 + 1, 1);
LABEL_39:
    v108 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v9, a1);
    specialized Array._endMutation()(v108);
    swift_endAccess(v124);
    v109 = sub_100084F58(v5);
    v110 = *(_QWORD *)(v5 + 136);
    *(_QWORD *)(v5 + 136) = v109;
    swift_release(v110);
    if (*(_QWORD *)(v5 + 32))
    {
      *(_BYTE *)(v5 + 41) = 1;
    }
    else
    {
      v111 = sub_100003DB8(&qword_10032B0E0);
      v112 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v111, v112);
    }
    __asm { BR              X10 }
  }
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v14 = type metadata accessor for Logger(0);
  sub_10000D744(v14, (uint64_t)qword_10033FEC8);
  swift_retain_n(v5, v15);
  v17 = swift_retain_n(a1, v16);
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v18, v19))
    goto LABEL_12;
  v20 = swift_slowAlloc(22, -1);
  v21 = swift_slowAlloc(64, -1);
  v124[0] = v21;
  *(_DWORD *)v20 = 136446467;
  v22 = sub_1000AD18C();
  v24 = v23;
  v125 = sub_100172BEC(v22, v23, v124);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v20 + 4, v20 + 12);
  swift_release_n(v5);
  swift_bridgeObjectRelease(v24);
  *(_WORD *)(v20 + 12) = 2081;
  v25 = a1[2];
  v26 = a1[3];
  swift_bridgeObjectRetain(v26);
  v125 = sub_100172BEC(v25, v26, v124);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v20 + 14, v20 + 22);
  swift_release_n(a1);
  swift_bridgeObjectRelease(v26);
  _os_log_impl((void *)&_mh_execute_header, v18, v19, "[%{public}s] Question %{private}s is already recorded", (uint8_t *)v20, 0x16u);
  v27 = (char *)&type metadata for Any + 8;
  v28 = v21;
  v29 = 2;
LABEL_11:
  swift_arrayDestroy(v28, v29, v27);
  swift_slowDealloc(v21, -1, -1);
  swift_slowDealloc(v20, -1, -1);

  return 0;
}

uint64_t sub_1000B03D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __n128 v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  __n128 v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v32;
  uint64_t v33;

  v2 = v1;
  if (*(_BYTE *)(a1 + 32) == 2)
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v4 = type metadata accessor for Logger(0);
    sub_10000D744(v4, (uint64_t)qword_10033FEC8);
    swift_retain_n(v1, v5);
    v7 = swift_retain_n(a1, v6);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(22, -1);
      v11 = swift_slowAlloc(64, -1);
      v33 = v11;
      *(_DWORD *)v10 = 136446467;
      v12 = sub_1000AD18C();
      v14 = v13;
      v32 = sub_100172BEC(v12, v13, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v10 + 4, v10 + 12);
      swift_release_n(v2);
      swift_bridgeObjectRelease(v14);
      *(_WORD *)(v10 + 12) = 2081;
      v15 = *(_QWORD *)(a1 + 16);
      v16 = *(_QWORD *)(a1 + 24);
      swift_bridgeObjectRetain(v16);
      v32 = sub_100172BEC(v15, v16, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v10 + 14, v10 + 22);
      swift_release_n(a1);
      swift_bridgeObjectRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s] Recording free form answer for: %{private}s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

      swift_release_n(a1);
      swift_release_n(v1);
    }
    v30 = sub_1000AE9AC((_QWORD *)a1, 0, 1);
  }
  else
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v17 = type metadata accessor for Logger(0);
    sub_10000D744(v17, (uint64_t)qword_10033FEC8);
    swift_retain_n(v1, v18);
    v20 = swift_retain_n(a1, v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(22, -1);
      v24 = swift_slowAlloc(64, -1);
      v33 = v24;
      *(_DWORD *)v23 = 136446467;
      v25 = sub_1000AD18C();
      v27 = v26;
      v32 = sub_100172BEC(v25, v26, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v23 + 4, v23 + 12);
      swift_release_n(v2);
      swift_bridgeObjectRelease(v27);
      *(_WORD *)(v23 + 12) = 2081;
      v28 = *(_QWORD *)(a1 + 16);
      v29 = *(_QWORD *)(a1 + 24);
      swift_bridgeObjectRetain(v29);
      v32 = sub_100172BEC(v28, v29, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v23 + 14, v23 + 22);
      swift_release_n(a1);
      swift_bridgeObjectRelease(v29);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%{public}s] Recording free form answer for non-free-form question: %{private}s, ignoring", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy(v24, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v23, -1, -1);

    }
    else
    {

      swift_release_n(a1);
      swift_release_n(v1);
    }
    v30 = 0;
  }
  return v30 & 1;
}

uint64_t sub_1000B07D4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  char v5;
  char v6;
  char v7;
  uint64_t v8;
  __n128 v9;
  __n128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  const char *v34;
  uint64_t v35;
  __n128 v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char v44;
  uint64_t v46;
  uint64_t v47[3];
  uint64_t v48;
  uint64_t v49;

  v2 = v1;
  if (*(_BYTE *)(a1 + 32) != 1)
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v21 = type metadata accessor for Logger(0);
    sub_10000D744(v21, (uint64_t)qword_10033FEC8);
    swift_retain_n(a1, v22);
    v24 = swift_retain_n(v1, v23);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = swift_slowAlloc(22, -1);
      v28 = swift_slowAlloc(64, -1);
      v47[0] = v28;
      *(_DWORD *)v27 = 136446467;
      v29 = sub_1000AD18C();
      v31 = v30;
      v48 = sub_100172BEC(v29, v30, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v27 + 4, v27 + 12);
      swift_release_n(v2);
      swift_bridgeObjectRelease(v31);
      *(_WORD *)(v27 + 12) = 2081;
      v32 = *(_QWORD *)(a1 + 16);
      v33 = *(_QWORD *)(a1 + 24);
      swift_bridgeObjectRetain(v33);
      v48 = sub_100172BEC(v32, v33, v47);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v27 + 14, v27 + 22);
      swift_release_n(a1);
      swift_bridgeObjectRelease(v33);
      v34 = "[%{public}s] Recording multiple choice answer for non-multiple-choice question: %{private}s, ignoring";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, v25, v26, v34, (uint8_t *)v27, 0x16u);
      swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1, -1);
      swift_slowDealloc(v27, -1, -1);

LABEL_19:
      v44 = 0;
      return v44 & 1;
    }
LABEL_18:

    swift_release_n(a1);
    swift_release_n(v2);
    goto LABEL_19;
  }
  swift_beginAccess(v1 + 48, v47, 0, 0);
  if (!*(_QWORD *)(*(_QWORD *)(v1 + 56) + 16)
    || (swift_retain(a1), sub_10017D414(v4), v6 = v5, swift_release(a1), (v6 & 1) == 0))
  {
    sub_1000B3C90(a1, (uint64_t)&_swiftEmptySetSingleton);
    if ((v7 & 1) == 0)
    {
      if (qword_1003158B0 != -1)
        swift_once(&qword_1003158B0, sub_1000D9854);
      v35 = type metadata accessor for Logger(0);
      sub_10000D744(v35, (uint64_t)qword_10033FEC8);
      swift_retain_n(a1, v36);
      v38 = swift_retain_n(v2, v37);
      v25 = Logger.logObject.getter(v38);
      v26 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v25, v26))
      {
        v27 = swift_slowAlloc(22, -1);
        v28 = swift_slowAlloc(64, -1);
        v48 = v28;
        *(_DWORD *)v27 = 136446467;
        v39 = sub_1000AD18C();
        v41 = v40;
        v46 = sub_100172BEC(v39, v40, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v27 + 4, v27 + 12);
        swift_release_n(v2);
        swift_bridgeObjectRelease(v41);
        *(_WORD *)(v27 + 12) = 2081;
        v42 = *(_QWORD *)(a1 + 16);
        v43 = *(_QWORD *)(a1 + 24);
        swift_bridgeObjectRetain(v43);
        v46 = sub_100172BEC(v42, v43, &v48);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v27 + 14, v27 + 22);
        swift_release_n(a1);
        swift_bridgeObjectRelease(v43);
        v34 = "[%{public}s] Failed to update multiple choice selection for question: %{private}s, ignoring recording answer";
        goto LABEL_17;
      }
      goto LABEL_18;
    }
  }
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v8 = type metadata accessor for Logger(0);
  sub_10000D744(v8, (uint64_t)qword_10033FEC8);
  swift_retain_n(a1, v9);
  v11 = swift_retain_n(v2, v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v48 = v15;
    *(_DWORD *)v14 = 136446467;
    v16 = sub_1000AD18C();
    v18 = v17;
    v46 = sub_100172BEC(v16, v17, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v14 + 4, v14 + 12);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v18);
    *(_WORD *)(v14 + 12) = 2081;
    v19 = *(_QWORD *)(a1 + 16);
    v20 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain(v20);
    v46 = sub_100172BEC(v19, v20, &v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v14 + 14, v14 + 22);
    swift_release_n(a1);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%{public}s] Recording multiple choice answer for: %{private}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_release_n(a1);
    swift_release_n(v2);
  }
  v44 = sub_1000AE9AC((_QWORD *)a1, 0, 2);
  return v44 & 1;
}

uint64_t sub_1000B0D88()
{
  uint64_t v0;
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  __n128 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  __n128 v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[24];

  v2 = v0;
  swift_beginAccess(v0 + 48, v55, 0, 0);
  v3 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v3 + 16);
  if (!v4)
  {
    __break(1u);
LABEL_24:
    swift_once(&qword_1003158B0, sub_1000D9854);
    goto LABEL_4;
  }
  v1 = *(unsigned __int8 *)(v4 + v3 + 31);
  if (v1 >= 3)
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v20 = type metadata accessor for Logger(0);
    sub_10000D744(v20, (uint64_t)qword_10033FEC8);
    v22 = swift_retain_n(v0, v21);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(22, -1);
      v26 = swift_slowAlloc(64, -1);
      v54 = v26;
      *(_DWORD *)v25 = 136446466;
      v27 = sub_1000AD18C();
      v29 = v28;
      v53 = sub_100172BEC(v27, v28, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v25 + 4, v25 + 12);
      swift_release_n(v2);
      v30 = swift_bridgeObjectRelease(v29);
      *(_WORD *)(v25 + 12) = 2082;
      LOBYTE(v53) = v1;
      v31 = String.init<A>(describing:)(&v53, &type metadata for QuestionnaireState.Stage, v30);
      v33 = v32;
      v53 = sub_100172BEC(v31, v32, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v25 + 14, v25 + 22);
      swift_bridgeObjectRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "[%{public}s] User inactivity is ignored on stage %{public}s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

      return 0;
    }

LABEL_19:
    swift_release_n(v2);
    return 0;
  }
  if (qword_1003158B0 != -1)
    goto LABEL_24;
LABEL_4:
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FEC8);
  v7 = swift_retain_n(v0, v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v54 = v11;
    *(_DWORD *)v10 = 136446466;
    v12 = sub_1000AD18C();
    v14 = v13;
    v53 = sub_100172BEC(v12, v13, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v10 + 4, v10 + 12);
    swift_release_n(v2);
    v15 = swift_bridgeObjectRelease(v14);
    *(_WORD *)(v10 + 12) = 2082;
    LOBYTE(v53) = v1;
    v16 = String.init<A>(describing:)(&v53, &type metadata for QuestionnaireState.Stage, v15);
    v18 = v17;
    v53 = sub_100172BEC(v16, v17, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s] User inactivity is detected on stage %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v0);
  }
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 264) + 80) & 1) != 0)
  {
    v34 = swift_retain_n(v2, v19);
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc(12, -1);
      v38 = swift_slowAlloc(32, -1);
      v54 = v38;
      *(_DWORD *)v37 = 136446210;
      v39 = sub_1000AD18C();
      v41 = v40;
      v53 = sub_100172BEC(v39, v40, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v37 + 4, v37 + 12);
      swift_release_n(v2);
      swift_bridgeObjectRelease(v41);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "[%{public}s] Auto send is not supported by this questionnaire scope", v37, 0xCu);
      swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1, -1);
      swift_slowDealloc(v37, -1, -1);

      return 0;
    }

    goto LABEL_19;
  }
  if (!sub_1000B2290(v1, 3))
    return 0;
  v43 = swift_retain_n(v2, v42);
  v44 = Logger.logObject.getter(v43);
  v45 = static os_log_type_t.default.getter(v44);
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc(12, -1);
    v47 = swift_slowAlloc(32, -1);
    v54 = v47;
    *(_DWORD *)v46 = 136446210;
    v48 = sub_1000AD18C();
    v50 = v49;
    v53 = sub_100172BEC(v48, v49, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v46 + 4, v46 + 12);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v50);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "[%{public}s] Starting auto send countdown", v46, 0xCu);
    v51 = 1;
    swift_arrayDestroy(v47, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v46, -1, -1);

  }
  else
  {

    swift_release_n(v2);
    return 1;
  }
  return v51;
}

uint64_t sub_1000B13C0()
{
  return sub_1000B3448(3, "[%{public}s] Questionnaire is ready to (auto) send");
}

BOOL sub_1000B13D0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BOOL8 result;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  swift_beginAccess(v1 + 48, v9, 0, 0);
  v2 = *(_QWORD *)(v1 + 144);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
    __break(1u);
    goto LABEL_15;
  }
  v4 = *(unsigned __int8 *)(v3 + v2 + 31);
  result = v4 == 2 || v3 != 1;
  if (v4 == 2 && v3 == 1)
  {
    v0 = *(_QWORD *)(v1 + 120);
    if (!((unint64_t)v0 >> 62))
    {
      v7 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
      return v7 != 0;
    }
LABEL_15:
    if (v0 < 0)
      v8 = v0;
    else
      v8 = v0 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v0);
    v7 = _CocoaArrayWrapper.endIndex.getter(v8);
    swift_bridgeObjectRelease(v0);
    return v7 != 0;
  }
  return result;
}

uint64_t sub_1000B147C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[3];

  v1 = v0;
  if (sub_1000B13D0())
  {
    swift_beginAccess(v0 + 48, v17, 0, 0);
    v2 = *(_QWORD *)(v0 + 144);
    if (*(_QWORD *)(v2 + 16))
      __asm { BR              X12 }
    __break(1u);
  }
  else if (qword_1003158B0 == -1)
  {
    goto LABEL_5;
  }
  swift_once(&qword_1003158B0, sub_1000D9854);
LABEL_5:
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FEC8);
  v6 = swift_retain_n(v0, v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v17[0] = v10;
    *(_DWORD *)v9 = 136446210;
    v11 = sub_1000AD18C();
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v9 + 4, v9 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%{public}s] Going back requested when canGoBack() == false", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_release_n(v0);
  }
  return 0;
}

uint64_t sub_1000B1FEC(char a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v22, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v6 = type metadata accessor for Logger(0);
    sub_10000D744(v6, (uint64_t)qword_10033FEC8);
    v8 = swift_retain_n(v5, v7);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc(18, -1);
      v12 = swift_slowAlloc(32, -1);
      v21 = v12;
      *(_DWORD *)v11 = 136446466;
      v13 = sub_1000AD18C();
      v15 = v14;
      v20 = sub_100172BEC(v13, v14, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v11 + 4, v11 + 12);
      swift_release_n(v5);
      swift_bridgeObjectRelease(v15);
      *(_WORD *)(v11 + 12) = 1024;
      LODWORD(v20) = a1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, (char *)&v20 + 4, v11 + 14, v11 + 18);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%{public}s] Transitioning to previous questionnaire, success: %{BOOL}d", (uint8_t *)v11, 0x12u);
      swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      if ((a1 & 1) != 0)
        return swift_release(v5);
    }
    else
    {

      swift_release_n(v5);
      if ((a1 & 1) != 0)
        return swift_release(v5);
    }
    if (*(_QWORD *)(v5 + 32))
    {
      *(_BYTE *)(v5 + 40) = 1;
    }
    else
    {
      v16 = sub_100003DB8(&qword_10032B0E0);
      v17 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v16, v17);
    }
    sub_1000ADCBC(1);
    if (*(_QWORD *)(v5 + 32))
    {
      *(_BYTE *)(v5 + 41) = 1;
    }
    else
    {
      v18 = sub_100003DB8(&qword_10032B0E0);
      v19 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v18, v19);
    }
    return swift_release(v5);
  }
  return result;
}

BOOL sub_1000B2290(unsigned __int8 a1, char a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __n128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __n128 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59[3];
  uint64_t v60;
  _BYTE v61[24];

  v4 = v2;
  v7 = v2 + 48;
  swift_beginAccess(v2 + 48, v61, 0, 0);
  v8 = *(_QWORD *)(v2 + 144);
  v9 = *(_QWORD *)(v8 + 16);
  if (!v9)
  {
    __break(1u);
LABEL_23:
    swift_once(&qword_1003158B0, sub_1000D9854);
LABEL_4:
    v10 = type metadata accessor for Logger(0);
    sub_10000D744(v10, (uint64_t)qword_10033FEC8);
    v12 = swift_retain_n(v2, v11);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc(32, -1);
      v57 = swift_slowAlloc(96, -1);
      v59[0] = v57;
      *(_DWORD *)v15 = 136446722;
      v16 = sub_1000AD18C();
      v18 = v17;
      v60 = sub_100172BEC(v16, v17, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v15 + 4, v15 + 12);
      swift_release_n(v4);
      v19 = swift_bridgeObjectRelease(v18);
      *(_WORD *)(v15 + 12) = 2082;
      LOBYTE(v60) = a1;
      v20 = String.init<A>(describing:)(&v60, &type metadata for QuestionnaireState.Stage, v19);
      v22 = v21;
      v60 = sub_100172BEC(v20, v21, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v15 + 14, v15 + 22);
      v23 = swift_bridgeObjectRelease(v22);
      *(_WORD *)(v15 + 22) = 2082;
      LOBYTE(v60) = a2;
      v24 = String.init<A>(describing:)(&v60, &type metadata for QuestionnaireState.Stage, v23);
      v26 = v25;
      v60 = sub_100172BEC(v24, v25, v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v15 + 24, v15 + 32);
      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%{public}s] Transitioned from stage %{public}s to %{public}s", (uint8_t *)v15, 0x20u);
      swift_arrayDestroy(v57, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v57, -1, -1);
      swift_slowDealloc(v15, -1, -1);

      if (*(_QWORD *)(v4 + 32))
      {
LABEL_6:
        *(_BYTE *)(v4 + 40) = 1;
LABEL_13:
        swift_beginAccess(v7, v59, 33, 0);
        v50 = *(_QWORD **)(v4 + 144);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v50);
        *(_QWORD *)(v4 + 144) = v50;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          v50 = sub_100171950(0, v50[2] + 1, 1, v50);
          *(_QWORD *)(v4 + 144) = v50;
        }
        v53 = v50[2];
        v52 = v50[3];
        if (v53 >= v52 >> 1)
        {
          v50 = sub_100171950((_QWORD *)(v52 > 1), v53 + 1, 1, v50);
          *(_QWORD *)(v4 + 144) = v50;
        }
        v50[2] = v53 + 1;
        *((_BYTE *)v50 + v53 + 32) = a2;
        swift_endAccess(v59);
        sub_1000B2DC4();
        if (*(_QWORD *)(v4 + 32))
        {
          *(_BYTE *)(v4 + 41) = 1;
        }
        else
        {
          v54 = sub_100003DB8(&qword_10032B0E0);
          v55 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
          Subject<>.send()(v54, v55);
        }
        return v3 == a1;
      }
    }
    else
    {

      swift_release_n(v2);
      if (*(_QWORD *)(v2 + 32))
        goto LABEL_6;
    }
    v48 = sub_100003DB8(&qword_10032B0E0);
    v49 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v48, v49);
    goto LABEL_13;
  }
  v3 = *(unsigned __int8 *)(v9 + v8 + 31);
  if (v3 == a1)
  {
    if (qword_1003158B0 == -1)
      goto LABEL_4;
    goto LABEL_23;
  }
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v27 = type metadata accessor for Logger(0);
  sub_10000D744(v27, (uint64_t)qword_10033FEC8);
  v29 = swift_retain_n(v2, v28);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc(42, -1);
    v58 = swift_slowAlloc(128, -1);
    v59[0] = v58;
    *(_DWORD *)v32 = 136446978;
    v33 = sub_1000AD18C();
    v35 = v34;
    v60 = sub_100172BEC(v33, v34, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v32 + 4, v32 + 12);
    swift_release_n(v4);
    v36 = swift_bridgeObjectRelease(v35);
    *(_WORD *)(v32 + 12) = 2082;
    LOBYTE(v60) = a1;
    v37 = String.init<A>(describing:)(&v60, &type metadata for QuestionnaireState.Stage, v36);
    v39 = v38;
    v60 = sub_100172BEC(v37, v38, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v32 + 14, v32 + 22);
    v40 = swift_bridgeObjectRelease(v39);
    *(_WORD *)(v32 + 22) = 2082;
    LOBYTE(v60) = a2;
    v41 = String.init<A>(describing:)(&v60, &type metadata for QuestionnaireState.Stage, v40);
    v43 = v42;
    v60 = sub_100172BEC(v41, v42, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v32 + 24, v32 + 32);
    v44 = swift_bridgeObjectRelease(v43);
    *(_WORD *)(v32 + 32) = 2082;
    LOBYTE(v60) = v3;
    v45 = String.init<A>(describing:)(&v60, &type metadata for QuestionnaireState.Stage, v44);
    v47 = v46;
    v60 = sub_100172BEC(v45, v46, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, v61, v32 + 34, v32 + 42);
    swift_bridgeObjectRelease(v47);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%{public}s] Requested transition from stage %{public}s to %{public}s while on stage %{public}s, ignored", (uint8_t *)v32, 0x2Au);
    swift_arrayDestroy(v58, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

    swift_release_n(v2);
  }
  return v3 == a1;
}

BOOL sub_1000B28B0()
{
  uint64_t v0;
  uint64_t *v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  os_log_type_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __n128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  __n128 v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char v46;
  uint64_t v47[3];
  uint64_t v48;
  _BYTE v49[24];

  v3 = v0;
  swift_beginAccess(v0 + 48, v49, 0, 0);
  v4 = *(_QWORD *)(v0 + 144);
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
    __break(1u);
LABEL_23:
    swift_once(&qword_1003158B0, sub_1000D9854);
    goto LABEL_6;
  }
  v2 = *(_BYTE *)(v5 + v4 + 31);
  if (v5 != 1)
  {
    if (*(_QWORD *)(v0 + 32))
    {
      *(_BYTE *)(v0 + 40) = 1;
    }
    else
    {
      v1 = &qword_10032B0E0;
      v23 = sub_100003DB8(&qword_10032B0E0);
      v24 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v23, v24);
    }
    swift_beginAccess(v0 + 48, v47, 33, 0);
    v25 = *(_QWORD **)(v0 + 144);
    if (v25[2])
    {
      if ((swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + 144)) & 1) != 0)
      {
        v26 = v25[2];
        if (v26)
          goto LABEL_12;
        goto LABEL_26;
      }
    }
    else
    {
      __break(1u);
    }
    v25 = sub_100190E34(v25);
    v26 = v25[2];
    if (v26)
    {
LABEL_12:
      v25[2] = v26 - 1;
      *(_QWORD *)(v3 + 144) = v25;
      swift_endAccess(v47);
      sub_1000B2DC4();
      if (*(_QWORD *)(v3 + 32))
      {
        *(_BYTE *)(v3 + 41) = 1;
      }
      else
      {
        v1 = (uint64_t *)sub_100003DB8(&qword_10032B0E0);
        v27 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
        Subject<>.send()(v1, v27);
      }
      v28 = *(_QWORD *)(v3 + 144);
      v29 = *(_QWORD *)(v28 + 16);
      if (v29)
      {
        LOBYTE(v1) = *(_BYTE *)(v29 + v28 + 31);
        if (qword_1003158B0 == -1)
          goto LABEL_17;
        goto LABEL_28;
      }
LABEL_27:
      __break(1u);
LABEL_28:
      swift_once(&qword_1003158B0, sub_1000D9854);
LABEL_17:
      v30 = type metadata accessor for Logger(0);
      sub_10000D744(v30, (uint64_t)qword_10033FEC8);
      v32 = swift_retain_n(v3, v31);
      v9 = Logger.logObject.getter(v32);
      v33 = static os_log_type_t.default.getter(v9);
      if (os_log_type_enabled(v9, v33))
      {
        v46 = (char)v1;
        v11 = swift_slowAlloc(32, -1);
        v12 = swift_slowAlloc(96, -1);
        v47[0] = v12;
        *(_DWORD *)v11 = 136446722;
        v34 = sub_1000AD18C();
        v36 = v35;
        v48 = sub_100172BEC(v34, v35, v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v11 + 4, v11 + 12);
        swift_release_n(v3);
        v37 = swift_bridgeObjectRelease(v36);
        *(_WORD *)(v11 + 12) = 2082;
        LOBYTE(v48) = v2;
        v38 = String.init<A>(describing:)(&v48, &type metadata for QuestionnaireState.Stage, v37);
        v40 = v39;
        v48 = sub_100172BEC(v38, v39, v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v11 + 14, v11 + 22);
        v41 = swift_bridgeObjectRelease(v40);
        *(_WORD *)(v11 + 22) = 2082;
        LOBYTE(v48) = v46;
        v42 = String.init<A>(describing:)(&v48, &type metadata for QuestionnaireState.Stage, v41);
        v44 = v43;
        v48 = sub_100172BEC(v42, v43, v47);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v11 + 24, v11 + 32);
        swift_bridgeObjectRelease(v44);
        _os_log_impl((void *)&_mh_execute_header, v9, v33, "[%{public}s] Went back from from stage %{public}s to %{public}s", (uint8_t *)v11, 0x20u);
        v20 = (char *)&type metadata for Any + 8;
        v21 = v12;
        v22 = 3;
        goto LABEL_19;
      }
LABEL_20:

      swift_release_n(v3);
      return v5 != 1;
    }
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (qword_1003158B0 != -1)
    goto LABEL_23;
LABEL_6:
  v6 = type metadata accessor for Logger(0);
  sub_10000D744(v6, (uint64_t)qword_10033FEC8);
  v8 = swift_retain_n(v0, v7);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v9, v10))
    goto LABEL_20;
  v11 = swift_slowAlloc(22, -1);
  v12 = swift_slowAlloc(64, -1);
  v47[0] = v12;
  *(_DWORD *)v11 = 136446466;
  v13 = sub_1000AD18C();
  v15 = v14;
  v48 = sub_100172BEC(v13, v14, v47);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v11 + 4, v11 + 12);
  swift_release_n(v3);
  v16 = swift_bridgeObjectRelease(v15);
  *(_WORD *)(v11 + 12) = 2082;
  LOBYTE(v48) = v2;
  v17 = String.init<A>(describing:)(&v48, &type metadata for QuestionnaireState.Stage, v16);
  v19 = v18;
  v48 = sub_100172BEC(v17, v18, v47);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v11 + 14, v11 + 22);
  swift_bridgeObjectRelease(v19);
  _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%{public}s] Requested going back from stage %{public}s, ignored", (uint8_t *)v11, 0x16u);
  v20 = (char *)&type metadata for Any + 8;
  v21 = v12;
  v22 = 2;
LABEL_19:
  swift_arrayDestroy(v21, v22, v20);
  swift_slowDealloc(v12, -1, -1);
  swift_slowDealloc(v11, -1, -1);

  return v5 != 1;
}

void sub_1000B2DC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[24];

  v1 = v0;
  swift_beginAccess(v0 + 48, v44, 1, 0);
  v2 = *(_QWORD *)(v0 + 144);
  v3 = *(_QWORD *)(v2 + 16);
  if (!v3)
  {
    __break(1u);
LABEL_21:
    swift_once(&qword_1003158B0, sub_1000D9854);
LABEL_6:
    v7 = type metadata accessor for Logger(0);
    sub_10000D744(v7, (uint64_t)qword_10033FEC8);
    v9 = swift_retain_n(v0, v8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v43 = v13;
      *(_DWORD *)v12 = 136446210;
      v14 = sub_1000AD18C();
      v16 = v15;
      v42 = sub_100172BEC(v14, v15, &v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v12 + 4, v12 + 12);
      swift_release_n(v1);
      swift_bridgeObjectRelease(v16);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%{public}s] Auto send is not supported by this questionnaire scope", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

      swift_release_n(v0);
    }
    return;
  }
  v4 = *(unsigned __int8 *)(v3 + v2 + 31);
  v5 = *(_QWORD *)(v0 + 224);
  if (v4 == 3)
  {
    if (v5)
      return;
    v6 = *(_QWORD *)(v0 + 264);
    if ((*(_BYTE *)(v6 + 80) & 1) != 0)
    {
      if (qword_1003158B0 == -1)
        goto LABEL_6;
      goto LABEL_21;
    }
    v23 = *(_QWORD *)(v6 + 64);
    v24 = sub_1000AD18C();
    v26 = v25;
    v27 = type metadata accessor for QuestionnaireState.AutoSendCountdown();
    v28 = swift_allocObject(v27, 64, 7);
    sub_1000ACB34(v24, v26, v23);
    v29 = *(_QWORD *)(v1 + 224);
    *(_QWORD *)(v1 + 224) = v28;
    swift_retain(v28);
    swift_release(v29);
    sub_10000D75C();
    v30 = swift_retain(v1);
    v31 = static OS_dispatch_queue.main.getter(v30);
    v32 = sub_100003DB8(&qword_10031D778);
    v33 = swift_allocObject(v32, 40, 7);
    swift_weakInit(v33 + 16);
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
      && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_100209204((uint64_t)_swiftEmptyArrayStorage);
    }
    else
    {
      v34 = &_swiftEmptySetSingleton;
    }
    *(_QWORD *)(v33 + 32) = v34;
    swift_weakAssign(v33 + 16, v1);
    swift_release(v1);
    *(_QWORD *)(v33 + 24) = v31;
    v35 = *(_QWORD *)(v28 + 16);
    swift_retain(v1);
    swift_retain(v35);
    v37 = sub_100245B08(v36, (uint64_t)sub_1000BB384, v1);
    swift_retain(v37);
    swift_release(v35);
    swift_release(v33);
    swift_release(v1);
    v38 = *(_QWORD *)(v28 + 24);
    swift_retain(v38);
    v40 = sub_100245B08(v39, (uint64_t)sub_1000B3418, 0);
    swift_retain(v40);
    swift_release(v38);
    swift_release(v28);
    swift_release(v37);
    v41 = *(_QWORD *)(v1 + 232);
    *(_QWORD *)(v1 + 232) = v40;
    swift_release(v41);
  }
  else if (v5)
  {
    if (*(_QWORD *)(v0 + 32))
    {
      *(_BYTE *)(v0 + 40) = 1;
    }
    else
    {
      v17 = sub_100003DB8(&qword_10032B0E0);
      v18 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v17, v18);
    }
    v19 = *(_QWORD *)(v0 + 232);
    *(_QWORD *)(v0 + 232) = 0;
    swift_release(v19);
    v20 = *(_QWORD *)(v0 + 224);
    *(_QWORD *)(v0 + 224) = 0;
    swift_release(v20);
    if (*(_QWORD *)(v0 + 32))
    {
      *(_BYTE *)(v0 + 41) = 1;
    }
    else
    {
      v21 = sub_100003DB8(&qword_10032B0E0);
      v22 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v21, v22);
    }
  }
}

double sub_1000B31EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  double result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FEC8);
  v7 = swift_retain_n(a3, v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v20 = v11;
    *(_DWORD *)v10 = 136446210;
    v12 = sub_1000AD18C();
    v14 = v13;
    v19 = sub_100172BEC(v12, v13, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v10 + 4, v10 + 12);
    swift_release_n(a3);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s] Auto send countdown timer ticked", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    if (*(_QWORD *)(a1 + 32))
    {
LABEL_5:
      *(_BYTE *)(a1 + 40) = 1;
LABEL_8:
      *(_BYTE *)(a1 + 41) = 1;
      return result;
    }
  }
  else
  {

    swift_release_n(a3);
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_5;
  }
  v16 = sub_100003DB8(&qword_10032B0E0);
  v17 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  *(_QWORD *)&result = Subject<>.send()(v16, v17).n128_u64[0];
  if (*(_QWORD *)(a1 + 32))
    goto LABEL_8;
  v18 = sub_100003DB8(&qword_10032B0E0);
  *(_QWORD *)&result = Subject<>.send()(v18, v17).n128_u64[0];
  return result;
}

uint64_t sub_1000B3418()
{
  return sub_1000B13C0();
}

void sub_1000B3438()
{
  sub_1000B3448(2u, "[%{public}s] Questionnaire is ready to send");
}

void sub_1000B3448(unsigned __int8 a1, const char *a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = v2;
  if (sub_1000B2290(a1, 4))
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v5 = type metadata accessor for Logger(0);
    sub_10000D744(v5, (uint64_t)qword_10033FEC8);
    v7 = swift_retain_n(v2, v6);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      v16 = v11;
      *(_DWORD *)v10 = 136446210;
      v12 = sub_1000AD18C();
      v14 = v13;
      v15 = sub_100172BEC(v12, v13, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v10 + 4, v10 + 12);
      swift_release_n(v4);
      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, a2, v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

      swift_release_n(v2);
    }
  }
}

BOOL sub_1000B35F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  __n128 v8;
  __n128 v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __n128 v27;
  __n128 v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[3];
  __int128 v47;
  uint64_t v48;
  _OWORD v49[2];

  v3 = v2;
  v5 = *(unsigned __int8 *)(a1 + 64);
  if ((_DWORD)v5 != 7)
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v7 = type metadata accessor for Logger(0);
    sub_10000D744(v7, (uint64_t)qword_10033FEC8);
    sub_10000B234(a2, (uint64_t)v49, &qword_100324AC0);
    swift_retain_n(v2, v8);
    v10 = swift_retain_n(a1, v9);
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc(32, -1);
      v44 = swift_slowAlloc(96, -1);
      *(_DWORD *)v13 = 136446723;
      v45 = a2;
      v46[0] = v44;
      v14 = v5;
      v15 = sub_1000AD18C();
      v17 = v16;
      *(_QWORD *)&v47 = sub_100172BEC(v15, v16, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 8, v13 + 4, v13 + 12);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v17);
      *(_WORD *)(v13 + 12) = 2081;
      v19 = *(_QWORD *)(a1 + 16);
      v18 = *(_QWORD *)(a1 + 24);
      swift_bridgeObjectRetain(v18);
      v20 = v19;
      v5 = v14;
      *(_QWORD *)&v47 = sub_100172BEC(v20, v18, v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 8, v13 + 14, v13 + 22);
      swift_release_n(a1);
      swift_bridgeObjectRelease(v18);
      *(_WORD *)(v13 + 22) = 2081;
      sub_10000B234((uint64_t)v49, (uint64_t)&v47, &qword_100324AC0);
      v21 = sub_100003DB8(&qword_100324AC0);
      v23 = String.init<A>(describing:)(&v47, v21, v22);
      v25 = v24;
      *(_QWORD *)&v47 = sub_100172BEC(v23, v24, v46);
      a2 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 8, v13 + 24, v13 + 32);
      swift_bridgeObjectRelease(v25);
      sub_100007FF0((uint64_t)v49, &qword_100324AC0);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%{public}s] Recording built-in answer for: %{private}s, opaque data: %{private}s", (uint8_t *)v13, 0x20u);
      swift_arrayDestroy(v44, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {
      swift_release_n(a1);
      swift_release_n(v2);
      sub_100007FF0((uint64_t)v49, &qword_100324AC0);
    }

    if (*(_QWORD *)(v3 + 32))
    {
      *(_BYTE *)(v3 + 40) = 1;
    }
    else
    {
      v39 = sub_100003DB8(&qword_10032B0E0);
      v40 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v39, v40);
    }
    sub_10000B234(a2, (uint64_t)&v47, &qword_100324AC0);
    if (v48)
    {
      sub_10003E704(&v47, v49);
      sub_10008CAC4((uint64_t)v49, (uint64_t)&v47);
      swift_beginAccess(v3 + 48, v46, 33, 0);
      sub_100176C70((uint64_t)&v47, v5);
      swift_endAccess(v46);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v49);
      if (*(_QWORD *)(v3 + 32))
      {
LABEL_17:
        *(_BYTE *)(v3 + 41) = 1;
        return (_DWORD)v5 != 7;
      }
    }
    else
    {
      sub_100007FF0((uint64_t)&v47, &qword_100324AC0);
      swift_beginAccess(v3 + 48, &v47, 33, 0);
      sub_1000B3BE4(v5, v49);
      sub_100007FF0((uint64_t)v49, &qword_100324AC0);
      swift_endAccess(&v47);
      if (*(_QWORD *)(v3 + 32))
        goto LABEL_17;
    }
    v41 = sub_100003DB8(&qword_10032B0E0);
    v42 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v41, v42);
    return (_DWORD)v5 != 7;
  }
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v26 = type metadata accessor for Logger(0);
  sub_10000D744(v26, (uint64_t)qword_10033FEC8);
  swift_retain_n(v2, v27);
  v29 = swift_retain_n(a1, v28);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc(22, -1);
    v33 = swift_slowAlloc(64, -1);
    *(_QWORD *)&v49[0] = v33;
    *(_DWORD *)v32 = 136446467;
    v34 = sub_1000AD18C();
    v36 = v35;
    *(_QWORD *)&v47 = sub_100172BEC(v34, v35, (uint64_t *)v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 8, v32 + 4, v32 + 12);
    swift_release_n(v3);
    swift_bridgeObjectRelease(v36);
    *(_WORD *)(v32 + 12) = 2081;
    v37 = *(_QWORD *)(a1 + 16);
    v38 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain(v38);
    *(_QWORD *)&v47 = sub_100172BEC(v37, v38, (uint64_t *)v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, (char *)&v47 + 8, v32 + 14, v32 + 22);
    swift_release_n(a1);
    swift_bridgeObjectRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%{public}s] Recording built-in answer for non-built-in question: %{private}s, ignoring", (uint8_t *)v32, 0x16u);
    swift_arrayDestroy(v33, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {

    swift_release_n(a1);
    swift_release_n(v2);
  }
  return (_DWORD)v5 != 7;
}

double sub_1000B3BE4@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  char v6;
  unint64_t v7;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  double result;
  uint64_t v12;

  v3 = v2;
  v5 = sub_10017D294(a1);
  if ((v6 & 1) != 0)
  {
    v7 = v5;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v9 = *v2;
    v12 = *v3;
    *v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10008B340();
      v9 = v12;
    }
    sub_10003E704((_OWORD *)(*(_QWORD *)(v9 + 56) + 32 * v7), a2);
    sub_10017DECC(v7, v9);
    v10 = *v3;
    *v3 = v9;
    *(_QWORD *)&result = swift_bridgeObjectRelease(v10).n128_u64[0];
  }
  else
  {
    result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

void sub_1000B3C90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  __n128 v18;
  __n128 v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  __n128 v33;
  uint64_t v34;
  os_log_type_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  __n128 v56;
  __n128 v57;
  __n128 v58;
  uint64_t v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  char v73;
  uint64_t v74;
  int64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  char v79;
  NSObject *v80;
  int64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  void (*v94)(uint64_t *, _QWORD);
  uint64_t v95;
  uint8_t *v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint8_t *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD v111[3];
  uint64_t v112;
  uint64_t v113;
  char v114;
  _QWORD *v115;
  uint64_t v116;
  char v117[32];

  v3 = v2;
  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v101 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess(v3 + 48, v117, 0, 0);
  v11 = *(_QWORD *)(v3 + 136);
  if (!v11
    || ((v12 = *(_QWORD *)(v11 + 16),
         v13 = *(_QWORD *)(v11 + 24),
         v15 = *(_QWORD *)(a1 + 16),
         v14 = *(_QWORD *)(a1 + 24),
         v12 == v15)
      ? (v16 = v13 == v14)
      : (v16 = 0),
        !v16
     && (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v13, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0) & 1) == 0))
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    sub_10000D744(v6, (uint64_t)qword_10033FEC8);
    swift_retain_n(v3, v18);
    v20 = swift_retain_n(a1, v19);
    v21 = Logger.logObject.getter(v20);
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc(32, -1);
      v109 = swift_slowAlloc(96, -1);
      v112 = v109;
      *(_DWORD *)v23 = 136446723;
      v24 = sub_1000AD18C();
      v26 = v25;
      v110 = sub_100172BEC(v24, v25, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111, v23 + 4, v23 + 12);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v26);
      *(_WORD *)(v23 + 12) = 2081;
      v27 = *(_QWORD *)(a1 + 16);
      v28 = *(_QWORD *)(a1 + 24);
      swift_bridgeObjectRetain(v28);
      v110 = sub_100172BEC(v27, v28, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111, v23 + 14, v23 + 22);
      swift_release_n(a1);
      swift_bridgeObjectRelease(v28);
      *(_WORD *)(v23 + 22) = 2081;
      v29 = *(_QWORD *)(v3 + 136);
      if (v29)
      {
        v30 = *(_QWORD *)(v29 + 16);
        swift_bridgeObjectRetain(*(_QWORD *)(v29 + 24));
      }
      else
      {
        v30 = 0;
        v31 = 0;
      }
      v110 = v30;
      v111[0] = v31;
      v43 = sub_100003DB8(&qword_100318260);
      v45 = String.init<A>(describing:)(&v110, v43, v44);
      v47 = v46;
      v110 = sub_100172BEC(v45, v46, &v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111, v23 + 24, v23 + 32);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v47);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%{public}s] updateMultipleChoiceSelection: trying to update the value for %{private}s when current question is %{private}s", (uint8_t *)v23, 0x20u);
      v39 = (char *)&type metadata for Any + 8;
      v40 = v109;
      v41 = v109;
      v42 = 3;
      goto LABEL_23;
    }
LABEL_20:

    swift_release_n(a1);
    swift_release_n(v3);
    return;
  }
  if (*(_BYTE *)(a1 + 32) != 1)
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    sub_10000D744(v6, (uint64_t)qword_10033FEC8);
    swift_retain_n(a1, v32);
    v34 = swift_retain_n(v3, v33);
    v21 = Logger.logObject.getter(v34);
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v35))
    {
      v23 = swift_slowAlloc(22, -1);
      v109 = swift_slowAlloc(64, -1);
      v110 = v109;
      *(_DWORD *)v23 = 136446467;
      v36 = sub_1000AD18C();
      v38 = v37;
      v112 = sub_100172BEC(v36, v37, &v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v23 + 4, v23 + 12);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v38);
      *(_WORD *)(v23 + 12) = 2081;
      swift_bridgeObjectRetain(v14);
      v112 = sub_100172BEC(v15, v14, &v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v112, &v113, v23 + 14, v23 + 22);
      swift_release_n(a1);
      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v21, v35, "[%{public}s] Attempted to update multiple choice selection for non-multiple-choice question: %{private}s", (uint8_t *)v23, 0x16u);
      v39 = (char *)&type metadata for Any + 8;
      v40 = v109;
      v41 = v109;
      v42 = 2;
LABEL_23:
      swift_arrayDestroy(v41, v42, v39);
      swift_slowDealloc(v40, -1, -1);
      swift_slowDealloc(v23, -1, -1);

      return;
    }
    goto LABEL_20;
  }
  v106 = v10;
  v17 = *(_QWORD *)(v3 + 32);
  v109 = a2;
  if (v17)
  {
    *(_BYTE *)(v3 + 40) = 1;
  }
  else
  {
    v48 = sub_100003DB8(&qword_10032B0E0);
    a2 = v109;
    v49 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v48, v49);
  }
  swift_beginAccess(v3 + 48, &v110, 33, 0);
  swift_retain(a1);
  swift_bridgeObjectRetain(a2);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v3 + 56));
  v112 = *(_QWORD *)(v3 + 56);
  *(_QWORD *)(v3 + 56) = 0x8000000000000000;
  sub_10020CC04(a2, a1, isUniquelyReferenced_nonNull_native);
  v51 = *(_QWORD *)(v3 + 56);
  *(_QWORD *)(v3 + 56) = v112;
  swift_release(a1);
  swift_bridgeObjectRelease(v51);
  swift_endAccess(&v110);
  if (*(_QWORD *)(v3 + 32))
  {
    *(_BYTE *)(v3 + 41) = 1;
  }
  else
  {
    v52 = sub_100003DB8(&qword_10032B0E0);
    a2 = v109;
    v53 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v52, v53);
  }
  v54 = v106;
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v55 = sub_10000D744(v6, (uint64_t)qword_10033FEC8);
  v56.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t))(v7 + 16))(v54, v55, v6);
  swift_retain_n(a1, v56);
  swift_bridgeObjectRetain_n(a2, 2, v57);
  v59 = swift_retain_n(v3, v58);
  v60 = Logger.logObject.getter(v59);
  v105 = static os_log_type_t.default.getter(v60);
  if (!os_log_type_enabled(v60, (os_log_type_t)v105))
  {

    swift_bridgeObjectRelease_n(a2, 2);
    swift_release_n(a1);
    swift_release_n(v3);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v54, v6);
    return;
  }
  v103 = v7;
  v104 = v6;
  v61 = swift_slowAlloc(32, -1);
  v101 = swift_slowAlloc(96, -1);
  v116 = v101;
  *(_DWORD *)v61 = 136446723;
  v62 = sub_1000AD18C();
  v64 = v63;
  v110 = sub_100172BEC(v62, v63, &v116);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111, v61 + 4, v61 + 12);
  swift_release_n(v3);
  swift_bridgeObjectRelease(v64);
  *(_WORD *)(v61 + 12) = 2081;
  swift_bridgeObjectRetain(v14);
  v110 = sub_100172BEC(v15, v14, &v116);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111, v61 + 14, v61 + 22);
  swift_release_n(a1);
  v65 = swift_bridgeObjectRelease(v14);
  v102 = (uint8_t *)v61;
  *(_WORD *)(v61 + 22) = 2081;
  v108 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0)
  {
    if (a2 < 0)
      v66 = a2;
    else
      v66 = a2 & 0xFFFFFFFFFFFFFF8;
    v67 = __CocoaSet.count.getter(v66);
  }
  else
  {
    v67 = *(_QWORD *)(a2 + 16);
  }
  v68 = _swiftEmptyArrayStorage;
  if (!v67)
    goto LABEL_62;
  v115 = _swiftEmptyArrayStorage;
  sub_10017E340(0, v67 & ~(v67 >> 63), 0);
  if (v108)
  {
    if (a2 < 0)
      v69 = a2;
    else
      v69 = a2 & 0xFFFFFFFFFFFFFF8;
    v70 = __CocoaSet.startIndex.getter(v69);
    v72 = 1;
  }
  else
  {
    v70 = sub_1000BAB34(a2);
    v72 = v73 & 1;
  }
  v112 = v70;
  v113 = v71;
  v114 = v72;
  if ((v67 & 0x8000000000000000) == 0)
  {
    v74 = a2 & 0xFFFFFFFFFFFFFF8;
    if (a2 < 0)
      v74 = a2;
    v107 = v74;
    do
    {
      v80 = v60;
      v81 = v112;
      v82 = v113;
      v83 = v114;
      v84 = sub_100105570(v112, v113, v114, a2);
      v86 = *(_QWORD *)(v84 + 16);
      v85 = *(_QWORD *)(v84 + 24);
      swift_bridgeObjectRetain(v85);
      swift_release(v84);
      v87 = v115;
      if ((swift_isUniquelyReferenced_nonNull_native(v115) & 1) == 0)
      {
        sub_10017E340(0, v87[2] + 1, 1);
        v87 = v115;
      }
      v89 = v87[2];
      v88 = v87[3];
      if (v89 >= v88 >> 1)
      {
        sub_10017E340(v88 > 1, v89 + 1, 1);
        v87 = v115;
      }
      v87[2] = v89 + 1;
      v90 = &v87[2 * v89];
      v90[4] = v86;
      v90[5] = v85;
      if (v108)
      {
        a2 = v109;
        if ((v83 & 1) == 0)
          goto LABEL_64;
        v91 = __CocoaSet.Index.handleBitPattern.getter(v81, v82);
        if (v91)
          v92 = swift_isUniquelyReferenced_nonNull_native(v91);
        else
          v92 = 1;
        v60 = v80;
        v93 = sub_100003DB8(&qword_10031D770);
        v94 = (void (*)(uint64_t *, _QWORD))Set.Index._asCocoa.modify(&v110, v93);
        __CocoaSet.formIndex(after:isUnique:)(v95, v92, v107);
        v94(&v110, 0);
      }
      else
      {
        a2 = v109;
        v75 = sub_1000BAA50(v81, v82, v83, v109);
        v77 = v76;
        v79 = v78;
        sub_1000BB378(v81, v82, v83);
        v112 = v75;
        v113 = v77;
        v114 = v79 & 1;
        v60 = v80;
      }
      --v67;
    }
    while (v67);
    sub_1000BB378(v112, v113, v114);
    v68 = v115;
LABEL_62:
    v96 = v102;
    v97 = Array.description.getter(v65);
    v99 = v98;
    swift_bridgeObjectRelease(v68);
    v110 = sub_100172BEC(v97, v99, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v110, v111, v96 + 24, v96 + 32);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v99);
    _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v105, "[%{public}s] Updated multiple choice selection for: %{private}s to %{private}s", v96, 0x20u);
    v100 = v101;
    swift_arrayDestroy(v101, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v100, -1, -1);
    swift_slowDealloc(v96, -1, -1);

    (*(void (**)(char *, uint64_t))(v103 + 8))(v106, v104);
    return;
  }
  __break(1u);
LABEL_64:
  swift_bridgeObjectRelease(a2);
  __break(1u);
}

void sub_1000B4728(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint8_t *v17;
  BOOL v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  void *v26;
  __n128 v27;
  __n128 v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  __n128 v42;
  uint64_t v43;
  os_log_type_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  NSObject *v59;
  __n128 v60;
  __n128 v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  int v65;
  _BOOL4 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  __n128 v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v99;
  __n128 v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  __n128 v106;
  __n128 v107;
  uint64_t v108;
  NSObject *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  __n128 v124;
  _QWORD *v125;
  char v126;
  uint64_t v127;
  int64_t v128;
  uint64_t v129;
  uint64_t v130;
  char v131;
  char v132;
  uint64_t v133;
  int64_t v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _QWORD *v139;
  unint64_t v140;
  unint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  void (*v146)(uint64_t *, _QWORD);
  uint64_t v147;
  uint8_t *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  os_log_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  os_log_t v156;
  uint64_t v157;
  uint64_t v158;
  uint8_t *v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  _QWORD v164[3];
  uint64_t v165;
  uint64_t v166;
  char v167;
  _QWORD *v168;
  uint64_t v169;
  _BYTE v170[16];
  uint64_t v171;
  uint64_t v172;
  char v173[32];

  v4 = v3;
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v154 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v161 = v4 + 48;
  swift_beginAccess(v4 + 48, v173, 0, 0);
  v13 = *(_QWORD *)(v4 + 136);
  if (!v13
    || ((v14 = *(_QWORD *)(v13 + 16),
         v15 = *(uint8_t **)(v13 + 24),
         v16 = *(_QWORD *)(a1 + 16),
         v17 = *(uint8_t **)(a1 + 24),
         v14 == v16)
      ? (v18 = v15 == v17)
      : (v18 = 0),
        !v18
     && (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0) & 1) == 0))
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    sub_10000D744(v8, (uint64_t)qword_10033FEC8);
    swift_retain_n(v4, v27);
    v29 = swift_retain_n(a1, v28);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc(32, -1);
      v162 = swift_slowAlloc(96, -1);
      v169 = v162;
      *(_DWORD *)v32 = 136446723;
      v33 = sub_1000AD18C();
      v35 = v34;
      v163 = sub_100172BEC(v33, v34, &v169);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v32 + 4, v32 + 12);
      swift_release_n(v4);
      swift_bridgeObjectRelease(v35);
      *(_WORD *)(v32 + 12) = 2081;
      v36 = *(_QWORD *)(a1 + 16);
      v37 = *(_QWORD *)(a1 + 24);
      swift_bridgeObjectRetain(v37);
      v163 = sub_100172BEC(v36, v37, &v169);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v32 + 14, v32 + 22);
      swift_release_n(a1);
      swift_bridgeObjectRelease(v37);
      *(_WORD *)(v32 + 22) = 2081;
      v38 = *(_QWORD *)(v4 + 136);
      if (v38)
      {
        v39 = *(_QWORD *)(v38 + 16);
        swift_bridgeObjectRetain(*(_QWORD *)(v38 + 24));
      }
      else
      {
        v39 = 0;
        v40 = 0;
      }
      v163 = v39;
      v164[0] = v40;
      v51 = sub_100003DB8(&qword_100318260);
      v53 = String.init<A>(describing:)(&v163, v51, v52);
      v55 = v54;
      v163 = sub_100172BEC(v53, v54, &v169);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v32 + 24, v32 + 32);
      swift_release_n(v4);
      swift_bridgeObjectRelease(v55);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "[%{public}s] updateMultipleChoiceSelection: trying to update the value for %{private}s when current question is %{private}s", (uint8_t *)v32, 0x20u);
      v56 = v162;
      swift_arrayDestroy(v162, 3, (char *)&type metadata for Any + 8);
      v50 = v56;
      goto LABEL_24;
    }
LABEL_21:

    swift_release_n(a1);
    swift_release_n(v4);
    return;
  }
  v19 = *(unsigned __int8 *)(a1 + 32);
  v159 = v17;
  v160 = v16;
  if (v19 != 1)
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    sub_10000D744(v8, (uint64_t)qword_10033FEC8);
    swift_retain_n(a1, v41);
    v43 = swift_retain_n(v4, v42);
    v30 = Logger.logObject.getter(v43);
    v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v44))
    {
      v32 = swift_slowAlloc(22, -1);
      v45 = swift_slowAlloc(64, -1);
      v163 = v45;
      *(_DWORD *)v32 = 136446467;
      v46 = sub_1000AD18C();
      v48 = v47;
      v169 = sub_100172BEC(v46, v47, &v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, v170, v32 + 4, v32 + 12);
      swift_release_n(v4);
      swift_bridgeObjectRelease(v48);
      *(_WORD *)(v32 + 12) = 2081;
      v49 = (unint64_t)v159;
      swift_bridgeObjectRetain(v159);
      v169 = sub_100172BEC(v160, v49, &v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, v170, v32 + 14, v32 + 22);
      swift_release_n(a1);
      swift_bridgeObjectRelease(v49);
      _os_log_impl((void *)&_mh_execute_header, v30, v44, "[%{public}s] Attempted to update multiple choice selection for non-multiple-choice question: %{private}s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
      v50 = v45;
LABEL_24:
      swift_slowDealloc(v50, -1, -1);
      swift_slowDealloc(v32, -1, -1);

      return;
    }
    goto LABEL_21;
  }
  v157 = v9;
  v20 = *(_QWORD *)(v4 + 56);
  v21 = *(_QWORD *)(v20 + 16);
  v158 = v8;
  if (v21)
  {
    swift_retain(a1);
    v23 = sub_10017D414(v22);
    v24 = a2;
    if ((v25 & 1) != 0)
    {
      v26 = *(void **)(*(_QWORD *)(v20 + 56) + 8 * v23);
      swift_bridgeObjectRetain(v26);
    }
    else
    {
      v26 = &_swiftEmptySetSingleton;
    }
    swift_release(a1);
  }
  else
  {
    v26 = &_swiftEmptySetSingleton;
    v24 = a2;
  }
  v172 = (uint64_t)v26;
  swift_bridgeObjectRetain(v26);
  v57 = sub_10006705C(v24, (uint64_t)v26);
  swift_bridgeObjectRelease(v26);
  if (((v57 ^ a3) & 1) == 0)
  {
    v78 = v158;
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    sub_10000D744(v78, (uint64_t)qword_10033FEC8);
    swift_retain_n(v4, v79);
    v81 = swift_retain_n(v24, v80);
    v82 = Logger.logObject.getter(v81);
    v83 = static os_log_type_t.default.getter(v82);
    if (os_log_type_enabled(v82, v83))
    {
      v84 = swift_slowAlloc(32, -1);
      v85 = v24;
      v86 = swift_slowAlloc(96, -1);
      v163 = v86;
      *(_DWORD *)v84 = 136446723;
      v87 = sub_1000AD18C();
      v89 = v88;
      v169 = sub_100172BEC(v87, v88, &v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, v170, v84 + 4, v84 + 12);
      swift_release_n(v4);
      swift_bridgeObjectRelease(v89);
      *(_WORD *)(v84 + 12) = 2081;
      v90 = *(_QWORD *)(v85 + 16);
      v91 = *(_QWORD *)(v85 + 24);
      swift_bridgeObjectRetain(v91);
      v169 = sub_100172BEC(v90, v91, &v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, v170, v84 + 14, v84 + 22);
      swift_release_n(v85);
      swift_bridgeObjectRelease(v91);
      *(_WORD *)(v84 + 22) = 2080;
      if ((a3 & 1) != 0)
        v92 = 0;
      else
        v92 = 544501614;
      if ((a3 & 1) != 0)
        v93 = 0xE000000000000000;
      else
        v93 = 0xE400000000000000;
      v169 = sub_100172BEC(v92, v93, &v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, v170, v84 + 24, v84 + 32);
      swift_bridgeObjectRelease(v93);
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "[%{public}s] Option %{private}s is already %s selected, ignoring", (uint8_t *)v84, 0x20u);
      swift_arrayDestroy(v86, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1, -1);
      swift_slowDealloc(v84, -1, -1);

    }
    else
    {

      swift_release_n(v24);
      swift_release_n(v4);
    }
    goto LABEL_91;
  }
  v58 = v158;
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v59 = sub_10000D744(v58, (uint64_t)qword_10033FEC8);
  swift_retain_n(v4, v60);
  v62 = swift_retain_n(v24, v61);
  v156 = v59;
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.default.getter(v63);
  v65 = v64;
  v66 = os_log_type_enabled(v63, v64);
  v162 = (uint64_t)v12;
  if (v66)
  {
    v67 = swift_slowAlloc(32, -1);
    v68 = swift_slowAlloc(96, -1);
    v163 = v68;
    *(_DWORD *)v67 = 136446723;
    v154 = v67 + 4;
    v155 = v65;
    v69 = sub_1000AD18C();
    v71 = v70;
    v169 = sub_100172BEC(v69, v70, &v163);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, v170, v154, v67 + 12);
    swift_release_n(v4);
    swift_bridgeObjectRelease(v71);
    *(_WORD *)(v67 + 12) = 2080;
    if ((a3 & 1) != 0)
      v72 = 0x6E697463656C6553;
    else
      v72 = 0x7463656C65736544;
    if ((a3 & 1) != 0)
      v73 = 0xE900000000000067;
    else
      v73 = 0xEB00000000676E69;
    v169 = sub_100172BEC(v72, v73, &v163);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, v170, v67 + 14, v67 + 22);
    swift_bridgeObjectRelease(v73);
    *(_WORD *)(v67 + 22) = 2081;
    v154 = v67 + 24;
    v75 = *(_QWORD *)(v24 + 16);
    v74 = *(_QWORD *)(v24 + 24);
    swift_bridgeObjectRetain(v74);
    v76 = v75;
    v12 = (char *)v162;
    v169 = sub_100172BEC(v76, v74, &v163);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v169, v170, v154, v67 + 32);
    swift_release_n(v24);
    swift_bridgeObjectRelease(v74);
    _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v155, "[%{public}s] %s option %{private}s", (uint8_t *)v67, 0x20u);
    swift_arrayDestroy(v68, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v68, -1, -1);
    swift_slowDealloc(v67, -1, -1);

    if ((a3 & 1) == 0)
      goto LABEL_39;
  }
  else
  {

    swift_release_n(v24);
    swift_release_n(v4);
    if ((a3 & 1) == 0)
    {
LABEL_39:
      v77 = sub_1001FAE30(v24);
      goto LABEL_52;
    }
  }
  swift_retain(v24);
  sub_100103420(&v163, v24);
  v77 = v163;
LABEL_52:
  swift_release(v77);
  if (*(_QWORD *)(v4 + 32))
  {
    *(_BYTE *)(v4 + 40) = 1;
  }
  else
  {
    v94 = sub_100003DB8(&qword_10032B0E0);
    v95 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v96 = v94;
    v12 = (char *)v162;
    Subject<>.send()(v96, v95);
  }
  v97 = v172;
  swift_beginAccess(v161, &v163, 33, 0);
  swift_retain(a1);
  swift_bridgeObjectRetain(v97);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v4 + 56));
  v169 = *(_QWORD *)(v4 + 56);
  *(_QWORD *)(v4 + 56) = 0x8000000000000000;
  sub_10020CC04(v97, a1, isUniquelyReferenced_nonNull_native);
  v99 = *(_QWORD *)(v4 + 56);
  *(_QWORD *)(v4 + 56) = v169;
  swift_release(a1);
  swift_bridgeObjectRelease(v99);
  v100 = swift_endAccess(&v163);
  if (*(_QWORD *)(v4 + 32))
  {
    *(_BYTE *)(v4 + 41) = 1;
  }
  else
  {
    v101 = sub_100003DB8(&qword_10032B0E0);
    v102 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v103 = v101;
    v12 = (char *)v162;
    v100 = Subject<>.send()(v103, v102);
  }
  v104 = v157;
  v105 = v158;
  v106.n128_f64[0] = (*(double (**)(char *, os_log_t, uint64_t, __n128))(v157 + 16))(v12, v156, v158, v100);
  swift_retain_n(a1, v106);
  v108 = swift_retain_n(v4, v107);
  v109 = Logger.logObject.getter(v108);
  v110 = static os_log_type_t.default.getter(v109);
  if (!os_log_type_enabled(v109, (os_log_type_t)v110))
  {

    swift_release_n(a1);
    swift_release_n(v4);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v12, v105);
LABEL_91:
    swift_bridgeObjectRelease(v172);
    return;
  }
  v155 = v110;
  v156 = v109;
  v111 = swift_slowAlloc(32, -1);
  v154 = swift_slowAlloc(96, -1);
  v171 = v154;
  *(_DWORD *)v111 = 136446723;
  v112 = sub_1000AD18C();
  v114 = v113;
  v163 = sub_100172BEC(v112, v113, &v171);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v111 + 4, v111 + 12);
  swift_release_n(v4);
  swift_bridgeObjectRelease(v114);
  *(_WORD *)(v111 + 12) = 2081;
  v115 = (unint64_t)v159;
  swift_bridgeObjectRetain(v159);
  v163 = sub_100172BEC(v160, v115, &v171);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v111 + 14, v111 + 22);
  swift_release_n(a1);
  swift_bridgeObjectRelease(v115);
  v159 = (uint8_t *)v111;
  *(_WORD *)(v111 + 22) = 2081;
  swift_beginAccess(&v172, &v169, 0, 0);
  v116 = v172;
  v161 = v172 & 0xC000000000000001;
  if ((v172 & 0xC000000000000001) != 0)
  {
    if (v172 < 0)
      v117 = v172;
    else
      v117 = v172 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v172);
    v118 = __CocoaSet.count.getter(v117);
    v119 = v162;
    if (v118)
      goto LABEL_65;
LABEL_72:
    v124 = swift_bridgeObjectRelease(v116);
    v125 = _swiftEmptyArrayStorage;
LABEL_90:
    v148 = v159;
    v149 = Array.description.getter(v124);
    v151 = v150;
    swift_bridgeObjectRelease(v125);
    v163 = sub_100172BEC(v149, v151, &v171);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v163, v164, v148 + 24, v148 + 32);
    swift_bridgeObjectRelease(v151);
    v152 = v156;
    _os_log_impl((void *)&_mh_execute_header, v156, (os_log_type_t)v155, "[%{public}s] Updated multiple choice selection for: %{private}s to %{private}s", v148, 0x20u);
    v153 = v154;
    swift_arrayDestroy(v154, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v153, -1, -1);
    swift_slowDealloc(v148, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v157 + 8))(v119, v158);
    goto LABEL_91;
  }
  v118 = *(_QWORD *)(v172 + 16);
  swift_bridgeObjectRetain(v172);
  v119 = v162;
  if (!v118)
    goto LABEL_72;
LABEL_65:
  v168 = _swiftEmptyArrayStorage;
  sub_10017E340(0, v118 & ~(v118 >> 63), 0);
  if (v161)
  {
    if (v116 < 0)
      v120 = v116;
    else
      v120 = v116 & 0xFFFFFFFFFFFFFF8;
    v121 = __CocoaSet.startIndex.getter(v120);
    v123 = 1;
  }
  else
  {
    v121 = sub_1000BAB34(v116);
    v123 = v126 & 1;
  }
  v165 = v121;
  v166 = v122;
  v167 = v123;
  if ((v118 & 0x8000000000000000) == 0)
  {
    v127 = v116 & 0xFFFFFFFFFFFFFF8;
    if (v116 < 0)
      v127 = v116;
    v160 = v127;
    do
    {
      while (1)
      {
        v134 = v165;
        v133 = v166;
        v135 = v167;
        v136 = sub_100105570(v165, v166, v167, v116);
        v137 = *(_QWORD *)(v136 + 16);
        v138 = *(_QWORD *)(v136 + 24);
        swift_bridgeObjectRetain(v138);
        swift_release(v136);
        v139 = v168;
        if ((swift_isUniquelyReferenced_nonNull_native(v168) & 1) == 0)
        {
          sub_10017E340(0, v139[2] + 1, 1);
          v139 = v168;
        }
        v141 = v139[2];
        v140 = v139[3];
        if (v141 >= v140 >> 1)
        {
          sub_10017E340(v140 > 1, v141 + 1, 1);
          v139 = v168;
        }
        v139[2] = v141 + 1;
        v142 = &v139[2 * v141];
        v142[4] = v137;
        v142[5] = v138;
        if (v161)
          break;
        v128 = sub_1000BAA50(v134, v133, v135, v116);
        v130 = v129;
        v132 = v131;
        sub_1000BB378(v134, v133, v135);
        v165 = v128;
        v166 = v130;
        v167 = v132 & 1;
        v119 = v162;
        if (!--v118)
          goto LABEL_89;
      }
      if ((v135 & 1) == 0)
        goto LABEL_93;
      v143 = __CocoaSet.Index.handleBitPattern.getter(v134, v133);
      v119 = v162;
      if (v143)
        v144 = swift_isUniquelyReferenced_nonNull_native(v143);
      else
        v144 = 1;
      v145 = sub_100003DB8(&qword_10031D770);
      v146 = (void (*)(uint64_t *, _QWORD))Set.Index._asCocoa.modify(&v163, v145);
      __CocoaSet.formIndex(after:isUnique:)(v147, v144, v160);
      v146(&v163, 0);
      --v118;
    }
    while (v118);
LABEL_89:
    sub_1000BB378(v165, v166, v167);
    v124 = swift_bridgeObjectRelease(v116);
    v125 = v168;
    goto LABEL_90;
  }
  __break(1u);
LABEL_93:
  swift_bridgeObjectRelease(v172);
  __break(1u);
}

uint64_t sub_1000B5738(Swift::Int a1, Swift::Int a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  __n128 v25;
  __n128 v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __n128 v37;
  __n128 v38;
  __n128 v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::Int v45;
  Swift::Int v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v59;
  uint64_t v60;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __n128 v66;
  __n128 v67;
  __n128 v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t type;
  uint64_t typea;
  os_log_type_t typeb;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD v89[2];
  uint64_t v90;
  unint64_t v91;
  char v92[24];

  v5 = v4;
  v10 = v4 + 48;
  swift_beginAccess(v4 + 48, v92, 0, 0);
  v11 = *(_QWORD *)(v4 + 136);
  if (!v11)
  {
    v13 = 0;
    v12 = 0;
LABEL_31:
    if (qword_1003158B0 != -1)
LABEL_50:
      swift_once(&qword_1003158B0, sub_1000D9854);
    v36 = type metadata accessor for Logger(0);
    sub_10000D744(v36, (uint64_t)qword_10033FEC8);
    v37 = swift_bridgeObjectRetain(v12);
    swift_retain_n(a2, v37);
    swift_retain_n(v5, v38);
    v40 = swift_retain_n(a1, v39);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc(42, -1);
      v85 = swift_slowAlloc(128, -1);
      v90 = v85;
      *(_DWORD *)v43 = 136446979;
      typeb = v42;
      v44 = sub_1000AD18C();
      v45 = a2;
      v46 = a1;
      v48 = v47;
      v88 = sub_100172BEC(v44, v47, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, v43 + 4, v43 + 12);
      swift_release_n(v5);
      swift_bridgeObjectRelease(v48);
      *(_WORD *)(v43 + 12) = 2081;
      v49 = *(_QWORD *)(v46 + 16);
      v50 = *(_QWORD *)(v46 + 24);
      swift_bridgeObjectRetain(v50);
      v88 = sub_100172BEC(v49, v50, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, v43 + 14, v43 + 22);
      swift_release_n(v46);
      swift_bridgeObjectRelease(v50);
      *(_WORD *)(v43 + 22) = 2081;
      v51 = *(_QWORD *)(v45 + 16);
      v52 = *(_QWORD *)(v45 + 24);
      swift_bridgeObjectRetain(v52);
      v88 = sub_100172BEC(v51, v52, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, v43 + 24, v43 + 32);
      swift_release_n(v45);
      swift_bridgeObjectRelease(v52);
      *(_WORD *)(v43 + 32) = 2081;
      v88 = v13;
      v89[0] = v12;
      swift_bridgeObjectRetain(v12);
      v53 = sub_100003DB8(&qword_100318260);
      v55 = String.init<A>(describing:)(&v88, v53, v54);
      v57 = v56;
      v88 = sub_100172BEC(v55, v56, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, v43 + 34, v43 + 42);
      swift_bridgeObjectRelease_n(v12, 2);
      swift_bridgeObjectRelease(v57);
      _os_log_impl((void *)&_mh_execute_header, v41, typeb, "[%{public}s] updateQuestionsAnsweredInputValue: trying to update the value for %{private}s:%{private}s when current question is %{private}s", (uint8_t *)v43, 0x2Au);
      swift_arrayDestroy(v85, 4, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1, -1);
      swift_slowDealloc(v43, -1, -1);

      return 0;
    }

    swift_bridgeObjectRelease_n(v12, 2);
LABEL_36:
    swift_release_n(a2);
    swift_release_n(a1);
    swift_release_n(v5);
    return 0;
  }
  v13 = *(_QWORD *)(v11 + 16);
  v12 = *(_QWORD *)(v11 + 24);
  v14 = *(_QWORD *)(a1 + 16);
  v15 = *(_QWORD *)(a1 + 24);
  v16 = v13 == v14 && v12 == v15;
  if (!v16
    && (_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), 0) & 1) == 0)
  {
    swift_bridgeObjectRetain(v12);
    goto LABEL_31;
  }
  v84 = v14;
  if (*(_BYTE *)(a2 + 40) != 1)
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v23 = type metadata accessor for Logger(0);
    sub_10000D744(v23, (uint64_t)qword_10033FEC8);
    swift_retain_n(a2, v24);
    swift_retain_n(v5, v25);
    v27 = swift_retain_n(a1, v26);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(32, -1);
      typea = swift_slowAlloc(96, -1);
      v88 = typea;
      *(_DWORD *)v30 = 136446723;
      v31 = sub_1000AD18C();
      v33 = v32;
      v90 = sub_100172BEC(v31, v32, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v30 + 4, v30 + 12);
      swift_release_n(v5);
      swift_bridgeObjectRelease(v33);
      *(_WORD *)(v30 + 12) = 2081;
      swift_bridgeObjectRetain(v15);
      v90 = sub_100172BEC(v14, v15, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v30 + 14, v30 + 22);
      swift_release_n(a1);
      swift_bridgeObjectRelease(v15);
      *(_WORD *)(v30 + 22) = 2081;
      v34 = *(_QWORD *)(a2 + 16);
      v35 = *(_QWORD *)(a2 + 24);
      swift_bridgeObjectRetain(v35);
      v90 = sub_100172BEC(v34, v35, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v30 + 24, v30 + 32);
      swift_release_n(a2);
      swift_bridgeObjectRelease(v35);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%{public}s] Attempted to update value for non-text option: %{private}s:%{private}s", (uint8_t *)v30, 0x20u);
      swift_arrayDestroy(typea, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(typea, -1, -1);
      swift_slowDealloc(v30, -1, -1);

      return 0;
    }

    goto LABEL_36;
  }
  v17 = a2;
  a2 = a1;
  v90 = a3;
  v91 = a4;
  type = v17;
  a1 = *(_QWORD *)(v17 + 48);
  swift_bridgeObjectRetain(a4);
  v12 = 7;
  v13 = 11;
  while (1)
  {
    v21 = HIBYTE(a4) & 0xF;
    if ((a4 & 0x1000000000000000) == 0)
      break;
    if (a1 >= String.UTF8View._foreignCount()())
      goto LABEL_23;
LABEL_19:
    if ((a4 & 0x2000000000000000) != 0)
    {
      if (!v21)
      {
        __break(1u);
LABEL_49:
        __break(1u);
        goto LABEL_50;
      }
    }
    else
    {
      v21 = a3 & 0xFFFFFFFFFFFFLL;
      if ((a3 & 0xFFFFFFFFFFFFLL) == 0)
        goto LABEL_49;
    }
    if (((a4 >> 60) & ((a3 & 0x800000000000000) == 0)) != 0)
      v18 = 11;
    else
      v18 = 7;
    v19 = String.index(before:)(v18 | (v21 << 16), a3, a4);
    String.remove(at:)(v19);
    swift_bridgeObjectRelease(v20);
    a3 = v90;
    a4 = v91;
  }
  if ((a4 & 0x2000000000000000) != 0)
    v22 = HIBYTE(a4) & 0xF;
  else
    v22 = a3 & 0xFFFFFFFFFFFFLL;
  if (a1 < v22)
    goto LABEL_19;
LABEL_23:
  if (*(_QWORD *)(v5 + 32))
  {
    *(_BYTE *)(v5 + 40) = 1;
  }
  else
  {
    v59 = sub_100003DB8(&qword_10032B0E0);
    v60 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v59, v60);
  }
  swift_beginAccess(v10, &v88, 33, 0);
  swift_retain(type);
  swift_bridgeObjectRetain(a4);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v5 + 72));
  v87 = *(_QWORD *)(v5 + 72);
  *(_QWORD *)(v5 + 72) = 0x8000000000000000;
  sub_10020C980(a3, a4, type, isUniquelyReferenced_nonNull_native);
  v62 = *(_QWORD *)(v5 + 72);
  *(_QWORD *)(v5 + 72) = v87;
  swift_release(type);
  swift_bridgeObjectRelease(v62);
  swift_endAccess(&v88);
  if (*(_QWORD *)(v5 + 32))
  {
    *(_BYTE *)(v5 + 41) = 1;
  }
  else
  {
    v63 = sub_100003DB8(&qword_10032B0E0);
    v64 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v63, v64);
  }
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v65 = type metadata accessor for Logger(0);
  sub_10000D744(v65, (uint64_t)qword_10033FEC8);
  swift_retain_n(type, v66);
  swift_retain_n(v5, v67);
  v69 = swift_retain_n(a2, v68);
  v70 = Logger.logObject.getter(v69);
  v71 = static os_log_type_t.default.getter(v70);
  if (os_log_type_enabled(v70, v71))
  {
    v72 = swift_slowAlloc(42, -1);
    v80 = swift_slowAlloc(128, -1);
    v87 = v80;
    *(_DWORD *)v72 = 136446979;
    v73 = sub_1000AD18C();
    v75 = v74;
    v88 = sub_100172BEC(v73, v74, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, v72 + 4, v72 + 12);
    swift_release_n(v5);
    swift_bridgeObjectRelease(v75);
    *(_WORD *)(v72 + 12) = 2081;
    swift_bridgeObjectRetain(v15);
    v88 = sub_100172BEC(v84, v15, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, v72 + 14, v72 + 22);
    swift_release_n(a2);
    swift_bridgeObjectRelease(v15);
    *(_WORD *)(v72 + 22) = 2081;
    v76 = *(_QWORD *)(type + 16);
    v77 = *(_QWORD *)(type + 24);
    swift_bridgeObjectRetain(v77);
    v88 = sub_100172BEC(v76, v77, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, v72 + 24, v72 + 32);
    swift_release_n(type);
    swift_bridgeObjectRelease(v77);
    *(_WORD *)(v72 + 32) = 2081;
    swift_beginAccess(&v90, &v88, 0, 0);
    v78 = v90;
    v79 = v91;
    swift_bridgeObjectRetain(v91);
    v86 = sub_100172BEC(v78, v79, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v72 + 34, v72 + 42);
    swift_bridgeObjectRelease(v79);
    _os_log_impl((void *)&_mh_execute_header, v70, v71, "[%{public}s] Updated value for: %{private}s:%{private}s to '%{private}s'", (uint8_t *)v72, 0x2Au);
    swift_arrayDestroy(v80, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v80, -1, -1);
    swift_slowDealloc(v72, -1, -1);

  }
  else
  {

    swift_release_n(type);
    swift_release_n(a2);
    swift_release_n(v5);
  }
  swift_bridgeObjectRelease(v91);
  return 1;
}

uint64_t sub_1000B6144()
{
  uint64_t v0;

  sub_10008CB3C((_QWORD *)(v0 + 48));
  sub_100025CF8(v0 + 240);
  return swift_release(*(_QWORD *)(v0 + 264));
}

uint64_t sub_1000B6168()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  sub_10008CB3C(v0 + 6);
  sub_100025CF8((uint64_t)(v0 + 30));
  swift_release(v0[33]);
  return swift_deallocClassInstance(v0, 280, 7);
}

uint64_t type metadata accessor for QuestionnaireState()
{
  return objc_opt_self(_TtC8SOSBuddy18QuestionnaireState);
}

uint64_t type metadata accessor for QuestionnaireState.AutoSendCountdown()
{
  return objc_opt_self(_TtCC8SOSBuddy18QuestionnaireState17AutoSendCountdown);
}

uint64_t sub_1000B61EC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  void *v48;
  _QWORD *v49;
  _BYTE *v50;
  __n128 v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  __n128 v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  void **v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  __n128 v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  __n128 v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE v82[12];
  int v83;
  uint64_t v84;
  void **v85;
  uint64_t v86;
  uint64_t *v87;
  _BYTE *v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _BYTE v95[16];
  void **aBlock;
  uint64_t v97;
  uint64_t (*v98)(uint64_t);
  void *v99;
  uint64_t (*v100)();
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;

  v3 = v2;
  v92 = type metadata accessor for DispatchWorkItemFlags(0);
  v91 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92, v6);
  v90 = &v82[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for DispatchQoS(0);
  v89 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  v88 = &v82[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for String.Encoding(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = &v82[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  result = sub_1000B6C20(a1, a2);
  if (v17)
  {
    v18 = result;
    v19 = v17;
    v87 = (uint64_t *)a1;
    static String.Encoding.utf8.getter();
    v20 = String.data(using:allowLossyConversion:)(v15, 0, v18, v19);
    v22 = v21;
    (*(void (**)(_BYTE *, uint64_t))(v12 + 8))(v15, v11);
    if (v22 >> 60 == 15)
    {
      v23 = v18;
      if (qword_1003158B0 != -1)
        swift_once(&qword_1003158B0, sub_1000D9854);
      v86 = v8;
      v24 = type metadata accessor for Logger(0);
      sub_10000D744(v24, (uint64_t)qword_10033FEC8);
      swift_bridgeObjectRetain_n(a2, 2, v25);
      swift_retain_n(v3, v26);
      v28 = swift_bridgeObjectRetain_n(v19, 2, v27);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = swift_slowAlloc(32, -1);
        v85 = (void **)swift_slowAlloc(64, -1);
        aBlock = v85;
        *(_DWORD *)v31 = 136446722;
        v32 = sub_1000AD18C();
        v34 = v33;
        v94 = sub_100172BEC(v32, v33, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v31 + 4, v31 + 12);
        swift_release_n(v3);
        swift_bridgeObjectRelease(v34);
        *(_WORD *)(v31 + 12) = 2050;
        v35 = String.count.getter(v18, v19);
        swift_bridgeObjectRelease(v19);
        v94 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v31 + 14, v31 + 22);
        swift_bridgeObjectRelease(v19);
        *(_WORD *)(v31 + 22) = 2082;
        swift_bridgeObjectRetain(a2);
        v36 = v87;
        v94 = sub_100172BEC((uint64_t)v87, a2, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v31 + 24, v31 + 32);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "[%{public}s] Failed to convert questionnaire text of length %{public}ld to UTF-8 for token %{public}s", (uint8_t *)v31, 0x20u);
        v37 = (uint64_t)v85;
        swift_arrayDestroy(v85, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1, -1);
        swift_slowDealloc(v31, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
        swift_release_n(v3);
        swift_bridgeObjectRelease_n(v19, 2);
        v36 = v87;
      }
      sub_1000B9054(v36, a2, v23, v19, 0, 0, 0, 2);
      swift_bridgeObjectRelease(v19);
      sub_10000D75C();
      v45 = (void *)static OS_dispatch_queue.main.getter(v44);
      v46 = swift_allocObject(&unk_1002ECAD8, 24, 7);
      swift_weakInit(v46 + 16, v3);
      v47 = (_QWORD *)swift_allocObject(&unk_1002ECB00, 40, 7);
      v47[2] = v46;
      v47[3] = v36;
      v47[4] = a2;
      v100 = sub_1000BB894;
      v101 = v47;
      aBlock = _NSConcreteStackBlock;
      v97 = 1107296256;
      v98 = sub_1001BAACC;
      v99 = &unk_1002ECB18;
      v48 = _Block_copy(&aBlock);
      v49 = v101;
      swift_bridgeObjectRetain(a2);
      swift_release(v49);
      v50 = v88;
      static DispatchQoS.unspecified.getter(v51);
      aBlock = (void **)_swiftEmptyArrayStorage;
      v52 = sub_10006A7F8();
      v53 = sub_100003DB8((uint64_t *)&unk_1003178D0);
      v54 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
      v55 = v90;
      v56 = v53;
      v57 = v92;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v56, v54, v92, v52);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v50, v55, v48);
    }
    else
    {
      v85 = (void **)v20;
      v84 = v18;
      swift_beginAccess(v3 + 48, &v94, 0, 0);
      sub_10008CB00((uint64_t *)(v3 + 48), (uint64_t)&aBlock);
      if (v102)
      {
        v38 = swift_unknownObjectWeakLoadStrong(&v103);
        sub_10008CB3C(&aBlock);
        if (v38)
        {
          v39 = swift_allocObject(&unk_1002ECAD8, 24, 7);
          swift_weakInit(v39 + 16, v3);
          v40 = (_QWORD *)swift_allocObject(&unk_1002ECBA0, 56, 7);
          v41 = (uint64_t)v87;
          v40[2] = v39;
          v40[3] = v41;
          v42 = v84;
          v40[4] = a2;
          v40[5] = v42;
          v40[6] = v19;
          swift_retain(v39);
          swift_bridgeObjectRetain(a2);
          v43 = (uint64_t)v85;
          sub_100218A78((uint64_t)v85, v22);
          swift_unknownObjectRelease(v38);
          swift_release(v39);
          swift_release(v40);
          return sub_10000D730(v43, v22);
        }
      }
      else
      {
        sub_10008CB3C(&aBlock);
      }
      if (qword_1003158B0 != -1)
        swift_once(&qword_1003158B0, sub_1000D9854);
      v86 = v8;
      v58 = type metadata accessor for Logger(0);
      sub_10000D744(v58, (uint64_t)qword_10033FEC8);
      swift_bridgeObjectRetain_n(a2, 2, v59);
      v61 = swift_retain_n(v3, v60);
      v62 = Logger.logObject.getter(v61);
      v63 = static os_log_type_t.error.getter();
      v64 = v63;
      if (os_log_type_enabled(v62, v63))
      {
        v65 = swift_slowAlloc(22, -1);
        v83 = v64;
        v66 = v65;
        v67 = (void **)swift_slowAlloc(64, -1);
        aBlock = v67;
        *(_DWORD *)v66 = 136446466;
        v68 = sub_1000AD18C();
        v70 = v69;
        v93 = sub_100172BEC(v68, v69, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v66 + 4, v66 + 12);
        swift_release_n(v3);
        swift_bridgeObjectRelease(v70);
        *(_WORD *)(v66 + 12) = 2082;
        swift_bridgeObjectRetain(a2);
        v71 = v87;
        v93 = sub_100172BEC((uint64_t)v87, a2, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v93, &v94, v66 + 14, v66 + 22);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v62, (os_log_type_t)v83, "[%{public}s] No compressor set for token %{public}s", (uint8_t *)v66, 0x16u);
        swift_arrayDestroy(v67, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v67, -1, -1);
        swift_slowDealloc(v66, -1, -1);

        v72 = v84;
      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
        swift_release_n(v3);
        v72 = v84;
        v71 = v87;
      }
      sub_1000B9054(v71, a2, v72, v19, 0, 0, 0, 2);
      swift_bridgeObjectRelease(v19);
      sub_10000D75C();
      v45 = (void *)static OS_dispatch_queue.main.getter(v73);
      v74 = swift_allocObject(&unk_1002ECAD8, 24, 7);
      swift_weakInit(v74 + 16, v3);
      v75 = (_QWORD *)swift_allocObject(&unk_1002ECB50, 40, 7);
      v75[2] = v74;
      v75[3] = v71;
      v75[4] = a2;
      v100 = sub_1000BB894;
      v101 = v75;
      aBlock = _NSConcreteStackBlock;
      v97 = 1107296256;
      v98 = sub_1001BAACC;
      v99 = &unk_1002ECB68;
      v48 = _Block_copy(&aBlock);
      v76 = v101;
      swift_bridgeObjectRetain(a2);
      swift_release(v76);
      v50 = v88;
      static DispatchQoS.unspecified.getter(v77);
      aBlock = (void **)_swiftEmptyArrayStorage;
      v78 = sub_10006A7F8();
      v79 = sub_100003DB8((uint64_t *)&unk_1003178D0);
      v80 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
      v55 = v90;
      v81 = v79;
      v57 = v92;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v81, v80, v92, v78);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v50, v55, v48);
      sub_10000D730((uint64_t)v85, v22);
    }
    _Block_release(v48);

    (*(void (**)(_BYTE *, uint64_t))(v91 + 8))(v55, v57);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v89 + 8))(v50, v86);
  }
  return result;
}

uint64_t sub_1000B6C20(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;
  char v12;
  uint64_t v13;
  __n128 v14;
  __n128 v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  const char *v33;
  __n128 v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  void (*v73)(uint64_t *, _QWORD);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t *, _QWORD);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD v87[8];
  char v88[24];
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v10 = static OS_dispatch_queue.main.getter(v11);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v12 & 1) != 0)
  {
    if (qword_1003158B0 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003158B0, sub_1000D9854);
LABEL_3:
  v13 = type metadata accessor for Logger(0);
  sub_10000D744(v13, (uint64_t)qword_10033FEC8);
  swift_retain_n(v3, v14);
  v16 = swift_bridgeObjectRetain_n(a2, 2, v15);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v84 = swift_slowAlloc(64, -1);
    v89 = v84;
    *(_DWORD *)v19 = 136446466;
    v20 = sub_1000AD18C();
    v22 = v21;
    v86 = sub_100172BEC(v20, v21, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v19 + 4, v19 + 12);
    swift_release_n(v3);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v19 + 12) = 2082;
    swift_bridgeObjectRetain(a2);
    v86 = sub_100172BEC(a1, a2, &v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "[%{public}s] markNextTextForCompression: for token %{public}s", (uint8_t *)v19, 0x16u);
    v23 = v84;
    swift_arrayDestroy(v84, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    swift_release_n(v3);
  }
  swift_beginAccess(v3 + 48, v88, 0, 0);
  sub_10000B234(v3 + 152, (uint64_t)&v86, &qword_10031D758);
  if (!v87[0])
  {
    sub_100007FF0((uint64_t)&v86, &qword_10031D758);
    v35 = swift_retain_n(v3, v34);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v89 = v39;
      *(_DWORD *)v38 = 136446210;
      v40 = sub_1000AD18C();
      v42 = v41;
      v86 = sub_100172BEC(v40, v41, &v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, v87, v38 + 4, v38 + 12);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v42);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "[%{public}s] markNextTextForCompression: send is not in progress", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);

    }
    else
    {

      swift_release_n(v3);
    }
    return 0;
  }
  sub_1000BA3FC((uint64_t)&v86, (uint64_t)&v89);
  if ((v89 != a1 || v90 != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v89, v90, 0) & 1) == 0)
  {
    swift_retain_n(v3, v24);
    v49 = swift_bridgeObjectRetain_n(a2, 2, v48);
    v50 = Logger.logObject.getter(v49);
    v51 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = swift_slowAlloc(22, -1);
      v53 = swift_slowAlloc(64, -1);
      v86 = v53;
      *(_DWORD *)v52 = 136446466;
      v54 = sub_1000AD18C();
      v56 = v55;
      v85 = sub_100172BEC(v54, v55, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v52 + 4, v52 + 12);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v56);
      *(_WORD *)(v52 + 12) = 2082;
      swift_bridgeObjectRetain(a2);
      v85 = sub_100172BEC(a1, a2, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v52 + 14, v52 + 22);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "[%{public}s] markNextTextForCompression: for expired send token %{public}s", (uint8_t *)v52, 0x16u);
      swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1, -1);
      swift_slowDealloc(v52, -1, -1);
    }
    else
    {
      swift_release_n(v3);
      swift_bridgeObjectRelease_n(a2, 2);
    }

    goto LABEL_29;
  }
  if (v92)
  {
    v25 = swift_retain_n(v3, v24);
    v26 = Logger.logObject.getter(v25);
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v86 = v29;
      *(_DWORD *)v28 = 136446210;
      v30 = sub_1000AD18C();
      v32 = v31;
      v85 = sub_100172BEC(v30, v31, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v28 + 4, v28 + 12);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v32);
      v33 = "[%{public}s] markNextTextForCompression: already waiting for the compression result, ignoring";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v26, v27, v33, v28, 0xCu);
      swift_arrayDestroy(v29, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v28, -1, -1);
LABEL_28:

LABEL_29:
      sub_1000B8AA0(&v89);
      return 0;
    }
    goto LABEL_27;
  }
  if (!*(_QWORD *)(v91 + 16))
  {
    v57 = swift_retain_n(v3, v24);
    v26 = Logger.logObject.getter(v57);
    v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc(12, -1);
      v29 = swift_slowAlloc(32, -1);
      v86 = v29;
      *(_DWORD *)v28 = 136446210;
      v58 = sub_1000AD18C();
      v60 = v59;
      v85 = sub_100172BEC(v58, v59, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v28 + 4, v28 + 12);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v60);
      v33 = "[%{public}s] markNextTextForCompression: no texts to compress";
      goto LABEL_13;
    }
LABEL_27:
    swift_release_n(v3);
    goto LABEL_28;
  }
  v43 = sub_100100D74(v91);
  if (!v44)
  {
    v62 = swift_retain_n(v3, v45);
    v63 = Logger.logObject.getter(v62);
    v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = swift_slowAlloc(32, -1);
      v86 = v66;
      *(_DWORD *)v65 = 136446210;
      v67 = sub_1000AD18C();
      v69 = v68;
      v85 = sub_100172BEC(v67, v68, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v85, &v86, v65 + 4, v65 + 12);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v69);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "[%{public}s] markNextTextForCompression: unexpected failure extracting text to compress", v65, 0xCu);
      swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);

    }
    else
    {

      swift_release_n(v3);
    }
    if (*(_QWORD *)(v3 + 32))
    {
      *(_BYTE *)(v3 + 40) = 1;
    }
    else
    {
      v77 = sub_100003DB8(&qword_10032B0E0);
      v78 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v77, v78);
    }
    v80 = (void (*)(uint64_t *, _QWORD))sub_1000AD130((uint64_t)&v86);
    if (*(_QWORD *)(v79 + 112))
    {
      v81 = v79;
      swift_bridgeObjectRelease(*(_QWORD *)(v79 + 136));
      *(_QWORD *)(v81 + 136) = &_swiftEmptySetSingleton;
    }
    v80(&v86, 0);
    if (*(_QWORD *)(v3 + 32))
    {
      *(_BYTE *)(v3 + 41) = 1;
    }
    else
    {
      v82 = sub_100003DB8(&qword_10032B0E0);
      v83 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v82, v83);
    }
    goto LABEL_29;
  }
  v46 = v43;
  v47 = v44;
  if (*(_QWORD *)(v3 + 32))
  {
    *(_BYTE *)(v3 + 40) = 1;
  }
  else
  {
    v70 = sub_100003DB8(&qword_10032B0E0);
    v71 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v70, v71);
  }
  v73 = (void (*)(uint64_t *, _QWORD))sub_1000AD130((uint64_t)&v86);
  if (v72[14])
  {
    v74 = v72[19];
    v72[18] = v46;
    v72[19] = v47;
    swift_bridgeObjectRetain(v47);
    swift_bridgeObjectRelease(v74);
  }
  v73(&v86, 0);
  if (*(_QWORD *)(v3 + 32))
  {
    *(_BYTE *)(v3 + 41) = 1;
  }
  else
  {
    v75 = sub_100003DB8(&qword_10032B0E0);
    v76 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v75, v76);
  }
  sub_1000B8AA0(&v89);
  return v46;
}

_QWORD *sub_1000B7720()
{
  uint64_t v0;
  unint64_t v1;
  char *v2;
  uint64_t v3;
  char *v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[16];
  uint64_t v24;
  _QWORD *v25;
  _BYTE v26[24];
  _QWORD v27[9];
  unint64_t v28;

  swift_beginAccess(v0 + 48, v26, 0, 0);
  sub_10008CB00((uint64_t *)(v0 + 48), (uint64_t)v27);
  v1 = v28;
  v24 = v0;
  v25 = v27;
  swift_bridgeObjectRetain(v28);
  v2 = sub_1000AA470((void (*)(uint64_t *__return_ptr, uint64_t *))sub_1000BB030, (uint64_t)v23, v1);
  swift_bridgeObjectRelease(v1);
  sub_10008CB3C(v27);
  v3 = *((_QWORD *)v2 + 2);
  v17 = v2;
  if (v3)
  {
    v4 = v2 + 56;
    v5 = &_swiftEmptyArrayStorage;
    do
    {
      if ((v4[40] & 1) == 0)
      {
        v9 = *((_QWORD *)v4 + 3);
        v10 = *((_QWORD *)v4 + 4);
        v11 = HIBYTE(v10) & 0xF;
        if ((v10 & 0x2000000000000000) == 0)
          v11 = v9 & 0xFFFFFFFFFFFFLL;
        if (v11)
        {
          v12 = *((_QWORD *)v4 - 2);
          v13 = *(_QWORD *)v4;
          v19 = *((_QWORD *)v4 - 1);
          v20 = *((_QWORD *)v4 - 3);
          v14 = *((_QWORD *)v4 + 2);
          v18 = *((_QWORD *)v4 + 1);
          v21 = *((_QWORD *)v4 + 7);
          v22 = *((_QWORD *)v4 + 6);
          swift_bridgeObjectRetain(v21);
          swift_bridgeObjectRetain(v12);
          swift_bridgeObjectRetain(v13);
          swift_bridgeObjectRetain(v14);
          swift_bridgeObjectRetain(v10);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v5);
          v27[0] = v5;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10017E3B0(0, v5[2] + 1, 1);
            v5 = (_QWORD *)v27[0];
          }
          v7 = v5[2];
          v6 = v5[3];
          if (v7 >= v6 >> 1)
          {
            sub_10017E3B0(v6 > 1, v7 + 1, 1);
            v5 = (_QWORD *)v27[0];
          }
          v5[2] = v7 + 1;
          v8 = (char *)&v5[11 * v7];
          *((_QWORD *)v8 + 4) = v20;
          *((_QWORD *)v8 + 5) = v12;
          *((_QWORD *)v8 + 6) = v19;
          *((_QWORD *)v8 + 7) = v13;
          *((_QWORD *)v8 + 8) = v18;
          *((_QWORD *)v8 + 9) = v14;
          *((_QWORD *)v8 + 10) = v9;
          *((_QWORD *)v8 + 11) = v10;
          v8[96] = 0;
          *((_QWORD *)v8 + 13) = v22;
          *((_QWORD *)v8 + 14) = v21;
        }
      }
      v4 += 88;
      --v3;
    }
    while (v3);
  }
  else
  {
    v5 = &_swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease(v17);
  return v5;
}

void sub_1000B78F8(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  unint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = v3;
  v8 = *(_QWORD *)(v3 + 32);
  if (*(_QWORD *)(v8 + 16))
  {
    swift_bridgeObjectRetain(a2);
    v9 = sub_10017D3B0(a1, a2);
    if ((v10 & 1) != 0)
    {
      v34 = a1;
      v11 = *(_QWORD *)(v8 + 56) + 32 * v9;
      v12 = *(_QWORD *)v11;
      v13 = *(_QWORD *)(v11 + 8);
      v14 = *(_QWORD *)(v11 + 16);
      v15 = *(unsigned __int8 *)(v11 + 24);
      sub_10000CC50(*(_QWORD *)v11, v13);
      swift_bridgeObjectRelease(a2);
      if (qword_1003158B0 != -1)
        swift_once(&qword_1003158B0, sub_1000D9854);
      v16 = type metadata accessor for Logger(0);
      sub_10000D744(v16, (uint64_t)qword_10033FEC8);
      sub_10000CC50(v12, v13);
      sub_10000CC50(v12, v13);
      sub_10000CC50(v12, v13);
      sub_10000CC50(v12, v13);
      swift_bridgeObjectRetain(a2);
      sub_10000CC50(v12, v13);
      swift_retain(v4);
      swift_bridgeObjectRetain(a2);
      sub_10000CC50(v12, v13);
      swift_retain(v4);
      v18 = Logger.logObject.getter(v17);
      v19 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v18, v19))
      {
        v20 = swift_slowAlloc(48, -1);
        v37 = swift_slowAlloc(32, -1);
        *(_DWORD *)v20 = 136447234;
        v22 = *(_QWORD *)(v4 + 16);
        v21 = *(_QWORD *)(v4 + 24);
        swift_bridgeObjectRetain(v21);
        v36 = sub_100172BEC(v22, v21, &v37);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v20 + 4, v20 + 12);
        swift_release_n(v4, 2);
        swift_bridgeObjectRelease(v21);
        *(_WORD *)(v20 + 12) = 2050;
        v23 = String.count.getter(v34, a2);
        swift_bridgeObjectRelease(a2);
        v36 = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v20 + 14, v20 + 22);
        swift_bridgeObjectRelease(a2);
        *(_WORD *)(v20 + 22) = 2050;
        __asm { BR              X10 }
      }
      sub_10000CCCC(v12, v13);
      sub_10000CCCC(v12, v13);
      sub_10000CCCC(v12, v13);
      swift_release_n(v4, 2);
      swift_bridgeObjectRelease_n(a2, 2);
      sub_10000CCCC(v12, v13);
      sub_10000CCCC(v12, v13);
      sub_10000CCCC(v12, v13);

      if (v15)
        v33 = 0;
      else
        v33 = v14;
      v32 = 1;
      goto LABEL_18;
    }
    swift_bridgeObjectRelease(a2);
  }
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v24 = type metadata accessor for Logger(0);
  sub_10000D744(v24, (uint64_t)qword_10033FEC8);
  swift_bridgeObjectRetain(a2);
  swift_retain(v4);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc(22, -1);
    v35 = swift_slowAlloc(32, -1);
    v37 = v35;
    *(_DWORD *)v28 = 136446466;
    v30 = *(_QWORD *)(v4 + 16);
    v29 = *(_QWORD *)(v4 + 24);
    swift_bridgeObjectRetain(v29);
    v36 = sub_100172BEC(v30, v29, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v28 + 4, v28 + 12);
    swift_release(v4);
    swift_bridgeObjectRelease(v29);
    *(_WORD *)(v28 + 12) = 2050;
    v36 = String.count.getter(a1, a2);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "[%{public}s] Encoding as uncompressed text of %{public}ld bytes", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease(a2);
    swift_release(v4);
  }
  swift_bridgeObjectRetain(a2);
  v12 = sub_1000B7F48(a1, a2);
  v13 = v31;
  v32 = 0;
  v33 = 0;
  LOBYTE(v15) = 1;
LABEL_18:
  *(_QWORD *)a3 = v12;
  *(_QWORD *)(a3 + 8) = v13;
  *(_BYTE *)(a3 + 16) = v32;
  *(_QWORD *)(a3 + 24) = v33;
  *(_BYTE *)(a3 + 32) = v15;
}

uint64_t sub_1000B7F48(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  _BYTE *v9;
  unint64_t v10;
  unint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  __int128 v17[2];
  uint64_t v18;
  __int128 v19;
  _QWORD v20[3];
  uint64_t v21;
  uint64_t v22;

  *(_QWORD *)&v19 = a1;
  *((_QWORD *)&v19 + 1) = a2;
  swift_bridgeObjectRetain(a2);
  v2 = sub_100003DB8(&qword_10031D760);
  if (!swift_dynamicCast(v17, &v19, &type metadata for String.UTF8View, v2, 6))
  {
    v18 = 0;
    memset(v17, 0, sizeof(v17));
    sub_100007FF0((uint64_t)v17, &qword_10031D768);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v20[0] = a1;
      v20[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v7 = (char *)v20 + (HIBYTE(a2) & 0xF);
      v8 = v20;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v5 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v6 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v5 = _StringObject.sharedUTF8.getter(a1, a2);
      }
      if (v5)
        v7 = (_BYTE *)(v5 + v6);
      else
        v7 = 0;
      v8 = (_BYTE *)v5;
    }
    v9 = sub_1000BB200(v8, v7);
    v11 = v10;
    if (v10 >> 60 != 15)
    {
      swift_bridgeObjectRelease(a2);
      *(_QWORD *)&v17[0] = v9;
      *((_QWORD *)&v17[0] + 1) = v11;
      return *(_QWORD *)&v17[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v12 = String.UTF8View._foreignCount()();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v12 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v12 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v17[0] = sub_1000BB264(v12);
    *((_QWORD *)&v17[0] + 1) = v13;
    __chkstk_darwin(*(_QWORD *)&v17[0], v13);
    sub_1000BA488();
    __asm { BR              X12 }
  }
  sub_100007D04(v17, (uint64_t)v20);
  v3 = v21;
  v4 = v22;
  sub_100007BBC(v20, v21);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)(&v19, sub_1000BA778, 0, &type metadata for Data._Representation, v3, v4);
  swift_bridgeObjectRelease(a2);
  v17[0] = v19;
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v20);
  return *(_QWORD *)&v17[0];
}

uint64_t sub_1000B844C()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for QuestionnaireState.DefaultTextEncoder()
{
  return objc_opt_self(_TtCC8SOSBuddy18QuestionnaireStateP33_B36A7CB381CF47F9C46620C6D9D5CD4418DefaultTextEncoder);
}

uint64_t destroy for QuestionnaireState.State(_QWORD *a1)
{
  uint64_t v2;

  swift_bridgeObjectRelease(*a1);
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[3]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1 + 4);
  swift_bridgeObjectRelease(a1[9]);
  swift_release(a1[10]);
  swift_release(a1[11]);
  swift_bridgeObjectRelease(a1[12]);
  v2 = a1[14];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_unknownObjectWeakDestroy(a1 + 15);
    swift_bridgeObjectRelease(a1[17]);
    swift_bridgeObjectRelease(a1[19]);
    swift_bridgeObjectRelease(a1[20]);
  }
  swift_release(a1[22]);
  return swift_release(a1[23]);
}

uint64_t initializeWithCopy for QuestionnaireState.State(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  __int128 v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = a2 + 4;
  v9 = *(_OWORD *)(a2 + 7);
  *(_OWORD *)(a1 + 56) = v9;
  v10 = v9;
  v11 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v9 - 8);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  v11(a1 + 32, v8, v10);
  v12 = a2[9];
  v13 = a2[10];
  *(_QWORD *)(a1 + 72) = v12;
  *(_QWORD *)(a1 + 80) = v13;
  v14 = a2[11];
  v15 = a2[12];
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = v15;
  v16 = a2[14];
  swift_bridgeObjectRetain(v12);
  swift_retain(v13);
  swift_retain(v14);
  swift_bridgeObjectRetain(v15);
  if (v16)
  {
    *(_QWORD *)(a1 + 104) = a2[13];
    *(_QWORD *)(a1 + 112) = v16;
    swift_bridgeObjectRetain(v16);
    swift_unknownObjectWeakCopyInit(a1 + 120, a2 + 15);
    v17 = a2[17];
    *(_QWORD *)(a1 + 128) = a2[16];
    *(_QWORD *)(a1 + 136) = v17;
    v18 = a2[19];
    *(_QWORD *)(a1 + 144) = a2[18];
    *(_QWORD *)(a1 + 152) = v18;
    v19 = a2[20];
    *(_QWORD *)(a1 + 160) = v19;
    *(_WORD *)(a1 + 168) = *((_WORD *)a2 + 84);
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v19);
  }
  else
  {
    v20 = *(_OWORD *)(a2 + 19);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
    *(_OWORD *)(a1 + 152) = v20;
    *(_WORD *)(a1 + 168) = *((_WORD *)a2 + 84);
    v21 = *(_OWORD *)(a2 + 15);
    *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(a1 + 120) = v21;
  }
  v22 = a2[22];
  v23 = a2[23];
  *(_QWORD *)(a1 + 176) = v22;
  *(_QWORD *)(a1 + 184) = v23;
  swift_retain(v22);
  swift_retain(v23);
  return a1;
}

uint64_t *assignWithCopy for QuestionnaireState.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  sub_1000B8938(a1 + 4, a2 + 4);
  v12 = a2[9];
  v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a1[10];
  v15 = a2[10];
  a1[10] = v15;
  swift_retain(v15);
  swift_release(v14);
  v16 = a1[11];
  v17 = a2[11];
  a1[11] = v17;
  swift_retain(v17);
  swift_release(v16);
  v18 = a2[12];
  v19 = a1[12];
  a1[12] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = a1 + 13;
  v21 = a2 + 13;
  v22 = a1[14];
  v23 = a2[14];
  if (v22)
  {
    if (v23)
    {
      a1[13] = a2[13];
      v24 = a2[14];
      a1[14] = v24;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRelease(v22);
      swift_unknownObjectWeakCopyAssign(a1 + 15, a2 + 15);
      a1[16] = a2[16];
      v25 = a2[17];
      v26 = a1[17];
      a1[17] = v25;
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRelease(v26);
      a1[18] = a2[18];
      v27 = a2[19];
      v28 = a1[19];
      a1[19] = v27;
      swift_bridgeObjectRetain(v27);
      swift_bridgeObjectRelease(v28);
      v29 = a2[20];
      v30 = a1[20];
      a1[20] = v29;
      swift_bridgeObjectRetain(v29);
      swift_bridgeObjectRelease(v30);
      *((_BYTE *)a1 + 168) = *((_BYTE *)a2 + 168);
      *((_BYTE *)a1 + 169) = *((_BYTE *)a2 + 169);
    }
    else
    {
      sub_1000B8AA0(a1 + 13);
      *v20 = *v21;
      v36 = *(_OWORD *)(a2 + 17);
      v35 = *(_OWORD *)(a2 + 19);
      v37 = *(_OWORD *)(a2 + 15);
      *((_WORD *)a1 + 84) = *((_WORD *)a2 + 84);
      *(_OWORD *)(a1 + 17) = v36;
      *(_OWORD *)(a1 + 19) = v35;
      *(_OWORD *)(a1 + 15) = v37;
    }
  }
  else if (v23)
  {
    a1[13] = a2[13];
    v31 = a2[14];
    a1[14] = v31;
    swift_bridgeObjectRetain(v31);
    swift_unknownObjectWeakCopyInit(a1 + 15, a2 + 15);
    a1[16] = a2[16];
    v32 = a2[17];
    a1[17] = v32;
    a1[18] = a2[18];
    v33 = a2[19];
    a1[19] = v33;
    v34 = a2[20];
    a1[20] = v34;
    *((_BYTE *)a1 + 168) = *((_BYTE *)a2 + 168);
    *((_BYTE *)a1 + 169) = *((_BYTE *)a2 + 169);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v34);
  }
  else
  {
    *v20 = *v21;
    v38 = *(_OWORD *)(a2 + 15);
    v39 = *(_OWORD *)(a2 + 17);
    v40 = *(_OWORD *)(a2 + 19);
    *((_WORD *)a1 + 84) = *((_WORD *)a2 + 84);
    *(_OWORD *)(a1 + 17) = v39;
    *(_OWORD *)(a1 + 19) = v40;
    *(_OWORD *)(a1 + 15) = v38;
  }
  v41 = a1[22];
  v42 = a2[22];
  a1[22] = v42;
  swift_retain(v42);
  swift_release(v41);
  v43 = a1[23];
  v44 = a2[23];
  a1[23] = v44;
  swift_retain(v44);
  swift_release(v43);
  return a1;
}

_QWORD *sub_1000B8938(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v11 = *result;
        v12 = *a2;
        swift_retain(*a2);
        result = (_QWORD *)swift_release(v11);
        *v3 = v12;
      }
      else
      {
        return (_QWORD *)(*(uint64_t (**)(_QWORD *, _QWORD *, _QWORD))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        v10 = *result;
        if ((v8 & 0x20000) != 0)
        {
          v14 = *a2;
          *v3 = *a2;
          swift_retain(v14);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (_QWORD *)swift_release(v10);
      }
      else
      {
        (*(void (**)(_BYTE *, _QWORD *, uint64_t))(v6 + 32))(v15, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          v13 = *a2;
          *v3 = *a2;
          swift_retain(v13);
        }
        else
        {
          (*(void (**)(_QWORD *, _QWORD *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (_QWORD *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v15, v4);
      }
    }
  }
  return result;
}

_QWORD *sub_1000B8AA0(_QWORD *a1)
{
  destroy for QuestionnaireState.PrepareToSendState(a1);
  return a1;
}

uint64_t initializeWithTake for QuestionnaireState.State(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v7 = (_OWORD *)(a1 + 104);
  v8 = (_OWORD *)(a2 + 104);
  if (*(_QWORD *)(a2 + 112))
  {
    *v7 = *v8;
    swift_unknownObjectWeakTakeInit(a1 + 120, a2 + 120);
    v9 = *(_QWORD *)(a2 + 136);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 136) = v9;
    *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = v10;
    *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
    v11 = *(_OWORD *)(a2 + 120);
    *v7 = *v8;
    *(_OWORD *)(a1 + 120) = v11;
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  return a1;
}

uint64_t *assignWithTake for QuestionnaireState.State(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  v5 = a1[1];
  a1[1] = a2[1];
  swift_bridgeObjectRelease(v5);
  v6 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v6);
  v7 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v7);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1 + 4);
  v8 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a1 + 3) = v8;
  v9 = a2[9];
  v10 = a1[9];
  a1[8] = a2[8];
  a1[9] = v9;
  swift_bridgeObjectRelease(v10);
  v11 = a1[10];
  a1[10] = a2[10];
  swift_release(v11);
  v12 = a1[11];
  a1[11] = a2[11];
  swift_release(v12);
  v13 = a1[12];
  a1[12] = a2[12];
  swift_bridgeObjectRelease(v13);
  v14 = a1 + 13;
  v15 = a2 + 13;
  v16 = a1[14];
  v17 = a2[14];
  if (!v16)
  {
    if (v17)
    {
      *v14 = *v15;
      swift_unknownObjectWeakTakeInit(a1 + 15, a2 + 15);
      v22 = a2[17];
      a1[16] = a2[16];
      a1[17] = v22;
      *((_OWORD *)a1 + 9) = *((_OWORD *)a2 + 9);
      a1[20] = a2[20];
      *((_WORD *)a1 + 84) = *((_WORD *)a2 + 84);
      goto LABEL_8;
    }
LABEL_7:
    v23 = *(_OWORD *)(a2 + 19);
    *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
    *(_OWORD *)(a1 + 19) = v23;
    *((_WORD *)a1 + 84) = *((_WORD *)a2 + 84);
    v24 = *(_OWORD *)(a2 + 15);
    *v14 = *v15;
    *(_OWORD *)(a1 + 15) = v24;
    goto LABEL_8;
  }
  if (!v17)
  {
    sub_1000B8AA0(a1 + 13);
    goto LABEL_7;
  }
  a1[13] = a2[13];
  a1[14] = v17;
  swift_bridgeObjectRelease(v16);
  swift_unknownObjectWeakTakeAssign(a1 + 15, a2 + 15);
  v18 = a1[17];
  *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
  swift_bridgeObjectRelease(v18);
  v19 = a2[19];
  v20 = a1[19];
  a1[18] = a2[18];
  a1[19] = v19;
  swift_bridgeObjectRelease(v20);
  v21 = a1[20];
  a1[20] = a2[20];
  swift_bridgeObjectRelease(v21);
  *((_BYTE *)a1 + 168) = *((_BYTE *)a2 + 168);
  *((_BYTE *)a1 + 169) = *((_BYTE *)a2 + 169);
LABEL_8:
  v25 = a1[22];
  a1[22] = a2[22];
  swift_release(v25);
  v26 = a1[23];
  a1[23] = a2[23];
  swift_release(v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionnaireState.State(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 192))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnaireState.State(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 192) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionnaireState.State()
{
  return &type metadata for QuestionnaireState.State;
}

uint64_t destroy for QuestionnaireState.PrepareToSendState(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_unknownObjectWeakDestroy(a1 + 2);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for QuestionnaireState.PrepareToSendState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2 + 16;
  swift_bridgeObjectRetain(v4);
  swift_unknownObjectWeakCopyInit(a1 + 16, v5);
  v6 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for QuestionnaireState.PrepareToSendState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  swift_unknownObjectWeakCopyAssign(a1 + 16, a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  return a1;
}

uint64_t initializeWithTake for QuestionnaireState.PrepareToSendState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectWeakTakeInit(a1 + 16, a2 + 16);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for QuestionnaireState.PrepareToSendState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  swift_unknownObjectWeakTakeAssign(a1 + 16, a2 + 16);
  v6 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  return a1;
}

ValueMetadata *type metadata accessor for QuestionnaireState.PrepareToSendState()
{
  return &type metadata for QuestionnaireState.PrepareToSendState;
}

void sub_1000B9054(uint64_t *a1, unint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD, _QWORD), unint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  __n128 v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  __n128 v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  __n128 v36;
  void (*v37)(_QWORD, _QWORD);
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __n128 v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __n128 v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  unint64_t v70;
  char v71;
  uint64_t v72;
  NSObject *v73;
  int v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  os_log_type_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  const char *v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint32_t v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  void (*v96)(_QWORD, _QWORD);
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void (*v104)(uint64_t *, _QWORD);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _QWORD *v108;
  void (*v109)(uint64_t *, _QWORD);
  uint64_t v110;
  uint64_t v111;
  void *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  __n128 v123;
  uint64_t v124;
  os_log_type_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  void (*v135)(_QWORD, _QWORD);
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD v140[16];
  uint64_t v141;
  uint64_t v142;
  _BYTE v143[24];
  uint64_t v144;
  _QWORD v145[3];
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v9 = v8;
  v132 = a8;
  v135 = a5;
  v136 = a1;
  v137 = a3;
  v138 = a4;
  v13 = type metadata accessor for DispatchPredicate(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (uint64_t *)((char *)&v129 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v17 = static OS_dispatch_queue.main.getter(v18);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v14 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v13);
  v19 = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(_QWORD *, uint64_t))(v14 + 8))(v17, v13);
  if ((v19 & 1) != 0)
  {
    if (qword_1003158B0 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003158B0, sub_1000D9854);
LABEL_3:
  v20 = type metadata accessor for Logger(0);
  v21 = sub_10000D744(v20, (uint64_t)qword_10033FEC8);
  swift_retain_n(v9, v22);
  v24 = swift_bridgeObjectRetain_n(a2, 2, v23);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter();
  v27 = os_log_type_enabled(v25, v26);
  v133 = a7;
  v134 = a6;
  if (v27)
  {
    v28 = swift_slowAlloc(22, -1);
    v29 = swift_slowAlloc(64, -1);
    v131 = v21;
    v30 = v29;
    v139 = v29;
    *(_DWORD *)v28 = 136446466;
    v31 = sub_1000AD18C();
    v33 = v32;
    v144 = sub_100172BEC(v31, v32, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v28 + 4, v28 + 12);
    swift_release_n(v9);
    swift_bridgeObjectRelease(v33);
    *(_WORD *)(v28 + 12) = 2082;
    swift_bridgeObjectRetain(a2);
    v34 = v136;
    v144 = sub_100172BEC((uint64_t)v136, a2, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "[%{public}s] consumeCompressionResult: for token %{public}s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy(v30, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v28, -1, -1);

    v35 = v138;
  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    swift_release_n(v9);
    v35 = v138;
    v34 = v136;
  }
  swift_beginAccess(v9 + 48, v143, 0, 0);
  sub_10000B234(v9 + 152, (uint64_t)&v139, &qword_10031D758);
  if (v140[0])
  {
    sub_1000BA3FC((uint64_t)&v139, (uint64_t)&v144);
    if (((uint64_t *)v144 != v34 || v145[0] != a2)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v34, a2, v144, v145[0], 0) & 1) == 0)
    {
      swift_retain_n(v9, v36);
      v56 = swift_bridgeObjectRetain_n(a2, 2, v55);
      v57 = Logger.logObject.getter(v56);
      v58 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v57, v58))
      {
        swift_release_n(v9);
        swift_bridgeObjectRelease_n(a2, 2);
LABEL_56:

        sub_1000B8AA0(&v144);
        return;
      }
      v59 = swift_slowAlloc(22, -1);
      v60 = swift_slowAlloc(64, -1);
      v139 = v60;
      *(_DWORD *)v59 = 136446466;
      v61 = sub_1000AD18C();
      v63 = v62;
      v142 = sub_100172BEC(v61, v62, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143, v59 + 4, v59 + 12);
      swift_release_n(v9);
      swift_bridgeObjectRelease(v63);
      *(_WORD *)(v59 + 12) = 2082;
      swift_bridgeObjectRetain(a2);
      v142 = sub_100172BEC((uint64_t)v136, a2, &v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143, v59 + 14, v59 + 22);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "[%{public}s] consumeCompressionResult: for expired send token %{public}s", (uint8_t *)v59, 0x16u);
      v64 = (char *)&type metadata for Any + 8;
      v65 = v60;
      v66 = 2;
LABEL_54:
      swift_arrayDestroy(v65, v66, v64);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v59, -1, -1);
      goto LABEL_56;
    }
    v136 = (uint64_t *)(v9 + 48);
    v37 = v135;
    if (!v148
      || (v147 != v137 || v148 != v35)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v137, v35, v147, v148, 0) & 1) == 0)
    {
      v38 = swift_retain_n(v9, v36);
      v39 = Logger.logObject.getter(v38);
      v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, v40))
      {
        v41 = (uint8_t *)swift_slowAlloc(12, -1);
        v42 = swift_slowAlloc(32, -1);
        v139 = v42;
        *(_DWORD *)v41 = 136446210;
        v43 = sub_1000AD18C();
        v45 = v44;
        v142 = sub_100172BEC(v43, v44, &v139);
        v37 = v135;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143, v41 + 4, v41 + 12);
        swift_release_n(v9);
        swift_bridgeObjectRelease(v45);
        _os_log_impl((void *)&_mh_execute_header, v39, v40, "[%{public}s] consumeCompressionResult: original data in the compression result != waitingForCompressionForText", v41, 0xCu);
        swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1, -1);
        swift_slowDealloc(v41, -1, -1);

      }
      else
      {

        swift_release_n(v9);
      }
      v35 = v138;
    }
    v67 = v146;
    swift_bridgeObjectRetain(v146);
    v68 = sub_1000671D8(v137, v35, v67);
    swift_bridgeObjectRelease(v67);
    swift_retain(v9);
    if ((v68 & 1) == 0)
    {
      swift_retain(v9);
      v57 = Logger.logObject.getter(v80);
      v81 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v81))
      {
        v59 = swift_slowAlloc(12, -1);
        v60 = swift_slowAlloc(32, -1);
        v139 = v60;
        *(_DWORD *)v59 = 136446210;
        v82 = sub_1000AD18C();
        v84 = v83;
        v142 = sub_100172BEC(v82, v83, &v139);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143, v59 + 4, v59 + 12);
        swift_release_n(v9);
        swift_bridgeObjectRelease(v84);
        v85 = "[%{public}s] consumeCompressionResult: received compression result is not for a string in textsToCompress set, ignoring";
        v86 = v57;
        v87 = v81;
        v88 = (uint8_t *)v59;
        v89 = 12;
LABEL_53:
        _os_log_impl((void *)&_mh_execute_header, v86, v87, v85, v88, v89);
        v64 = (char *)&type metadata for Any + 8;
        v65 = v60;
        v66 = 1;
        goto LABEL_54;
      }
LABEL_55:
      swift_release_n(v9);
      goto LABEL_56;
    }
    swift_bridgeObjectRetain(v35);
    v69 = v133;
    v70 = v134;
    v71 = v132;
    sub_1000BAFC0((uint64_t)v37, v134, v133, v132);
    swift_retain(v9);
    swift_bridgeObjectRetain(v35);
    v72 = sub_1000BAFC0((uint64_t)v37, v70, v69, v71);
    v73 = Logger.logObject.getter(v72);
    v74 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v73, (os_log_type_t)v74))
    {
      LODWORD(v131) = v74;
      v75 = swift_slowAlloc(32, -1);
      v130 = swift_slowAlloc(64, -1);
      v142 = v130;
      *(_DWORD *)v75 = 136446722;
      v76 = sub_1000AD18C();
      v78 = v77;
      v139 = sub_100172BEC(v76, v77, &v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v140, v75 + 4, v75 + 12);
      swift_release_n(v9);
      swift_bridgeObjectRelease(v78);
      *(_WORD *)(v75 + 12) = 2050;
      v79 = String.count.getter(v137, v35);
      swift_bridgeObjectRelease(v35);
      v139 = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v140, v75 + 14, v75 + 22);
      swift_bridgeObjectRelease(v35);
      *(_WORD *)(v75 + 22) = 2082;
      if (v132 != 2)
        __asm { BR              X12 }
      v139 = 0;
      LOBYTE(v140[0]) = 1;
      v90 = sub_100003DB8(&qword_1003188D0);
      v92 = String.init<A>(describing:)(&v139, v90, v91);
      v94 = v93;
      v139 = sub_100172BEC(v92, v93, &v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, v140, v75 + 24, v75 + 32);
      swift_bridgeObjectRelease(v94);
      v95 = v134;
      v96 = v135;
      v97 = v133;
      v71 = v132;
      sub_1000BAFD4((uint64_t)v135, v134, v133, v132);
      sub_1000BAFD4((uint64_t)v96, v95, v97, v71);
      _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v131, "[%{public}s] consumeCompressionResult: text size - %{public}ld, compressed size - %{public}s", (uint8_t *)v75, 0x20u);
      v98 = v130;
      swift_arrayDestroy(v130, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v98, -1, -1);
      v99 = v75;
      v37 = v96;
      swift_slowDealloc(v99, -1, -1);

      v35 = v138;
      if (!*(_QWORD *)(v9 + 32))
        goto LABEL_34;
    }
    else
    {
      swift_release_n(v9);
      swift_bridgeObjectRelease_n(v35, 2);
      sub_1000BAFD4((uint64_t)v37, v70, v69, v71);
      sub_1000BAFD4((uint64_t)v37, v70, v69, v71);

      if (!*(_QWORD *)(v9 + 32))
      {
LABEL_34:
        v100 = sub_100003DB8(&qword_10032B0E0);
        v71 = v132;
        v101 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
        Subject<>.send()(v100, v101);
LABEL_35:
        v102 = v133;
        v103 = v134;
        v104 = (void (*)(uint64_t *, _QWORD))sub_1000AD130((uint64_t)&v139);
        if (*(_QWORD *)(v105 + 112))
        {
          sub_1001FACA4(v137, v35);
          v107 = v106;
          v104(&v139, 0);
          swift_bridgeObjectRelease(v107);
        }
        else
        {
          v104(&v139, 0);
        }
        v109 = (void (*)(uint64_t *, _QWORD))sub_1000AD130((uint64_t)&v139);
        if (v108[14])
        {
          v110 = v108[19];
          v108[18] = 0;
          v108[19] = 0;
          swift_bridgeObjectRelease(v110);
        }
        v109(&v139, 0);
        if (v71 != 2)
        {
          sub_10000CC50((uint64_t)v37, v103);
          v112 = sub_1000AD130((uint64_t)&v139);
          if (*(_QWORD *)(v111 + 112))
          {
            v113 = v111;
            v114 = v102;
            v115 = v138;
            v135 = (void (*)(_QWORD, _QWORD))v112;
            swift_bridgeObjectRetain(v138);
            sub_1000BAFC0((uint64_t)v37, v103, v114, v71);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)(v113 + 160));
            v142 = *(_QWORD *)(v113 + 160);
            *(_QWORD *)(v113 + 160) = 0x8000000000000000;
            sub_10020CE6C((uint64_t)v37, v103, v114, v71 & 1, v137, v115, isUniquelyReferenced_nonNull_native);
            v117 = *(_QWORD *)(v113 + 160);
            *(_QWORD *)(v113 + 160) = v142;
            v118 = v115;
            v102 = v114;
            swift_bridgeObjectRelease(v118);
            swift_bridgeObjectRelease(v117);
            v135(&v139, 0);
          }
          else
          {
            ((void (*)(uint64_t *, _QWORD))v112)(&v139, 0);
          }
          sub_1000BAFD4((uint64_t)v37, v103, v102, v71);
        }
        if (*(_QWORD *)(v9 + 32))
        {
          *(_BYTE *)(v9 + 41) = 1;
        }
        else
        {
          v119 = sub_100003DB8(&qword_10032B0E0);
          v120 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
          Subject<>.send()(v119, v120);
        }
        sub_10008CB00(v136, (uint64_t)&v139);
        if (v140[13])
        {
          v121 = v141;
          swift_bridgeObjectRetain(v141);
          sub_10008CB3C(&v139);
          v122 = *(_QWORD *)(v121 + 16);
          swift_bridgeObjectRelease(v121);
        }
        else
        {
          sub_10008CB3C(&v139);
          v122 = -1;
        }
        v124 = swift_retain_n(v9, v123);
        v57 = Logger.logObject.getter(v124);
        v125 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v57, v125))
        {
          v59 = swift_slowAlloc(22, -1);
          v60 = swift_slowAlloc(32, -1);
          v139 = v60;
          *(_DWORD *)v59 = 136446466;
          v126 = sub_1000AD18C();
          v128 = v127;
          v142 = sub_100172BEC(v126, v127, &v139);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143, v59 + 4, v59 + 12);
          swift_release_n(v9);
          swift_bridgeObjectRelease(v128);
          *(_WORD *)(v59 + 12) = 2050;
          v142 = v122;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143, v59 + 14, v59 + 22);
          v85 = "[%{public}s] consumeCompressionResult: texts awaiting compression - %{public}ld";
          v86 = v57;
          v87 = v125;
          v88 = (uint8_t *)v59;
          v89 = 22;
          goto LABEL_53;
        }
        goto LABEL_55;
      }
    }
    *(_BYTE *)(v9 + 40) = 1;
    goto LABEL_35;
  }
  sub_100007FF0((uint64_t)&v139, &qword_10031D758);
  v47 = swift_retain_n(v9, v46);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc(12, -1);
    v51 = swift_slowAlloc(32, -1);
    v139 = v51;
    *(_DWORD *)v50 = 136446210;
    v52 = sub_1000AD18C();
    v54 = v53;
    v144 = sub_100172BEC(v52, v53, &v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v50 + 4, v50 + 12);
    swift_release_n(v9);
    swift_bridgeObjectRelease(v54);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "[%{public}s] consumeCompressionResult: send is not in progress", v50, 0xCu);
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v50, -1, -1);

  }
  else
  {

    swift_release_n(v9);
  }
}

uint64_t sub_1000B9F30(void (*a1)(_QWORD, _QWORD), unint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t *a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  __n128 v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __n128 v37;
  void *v38;
  uint64_t v39;
  _QWORD *v40;
  void *v41;
  _QWORD *v42;
  char *v43;
  __n128 v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  void (*v57)(_QWORD, _QWORD);
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t aBlock[5];
  _QWORD *v64;
  char v65[32];

  v59 = a3;
  v60 = a8;
  v61 = a4;
  v57 = a1;
  v58 = a2;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (char *)&v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  a5 += 16;
  swift_beginAccess(a5, v65, 0, 0);
  result = swift_weakLoadStrong(a5);
  if (result)
  {
    v23 = result;
    v54 = v17;
    v51 = a9;
    v52 = v21;
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v53 = v18;
    v55 = v16;
    v56 = v13;
    v24 = type metadata accessor for Logger(0);
    sub_10000D744(v24, (uint64_t)qword_10033FEC8);
    swift_retain_n(v23, v25);
    v27 = swift_bridgeObjectRetain_n(a7, 2, v26);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = swift_slowAlloc(22, -1);
      v31 = swift_slowAlloc(64, -1);
      v50 = v12;
      v32 = v31;
      aBlock[0] = v31;
      *(_DWORD *)v30 = 136446466;
      v33 = sub_1000AD18C();
      v35 = v34;
      v62 = sub_100172BEC(v33, v34, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, aBlock, v30 + 4, v30 + 12);
      swift_release_n(v23);
      swift_bridgeObjectRelease(v35);
      *(_WORD *)(v30 + 12) = 2082;
      swift_bridgeObjectRetain(a7);
      v62 = sub_100172BEC((uint64_t)a6, a7, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, aBlock, v30 + 14, v30 + 22);
      swift_bridgeObjectRelease_n(a7, 3);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%{public}s] Received questionnaire text compression result for token %{public}s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy(v32, 2, (char *)&type metadata for Any + 8);
      v36 = v32;
      v12 = v50;
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a7, 2);
      swift_release_n(v23);
    }
    sub_1000B9054(a6, a7, v60, v51, v57, v58, v59, v61);
    sub_10000D75C();
    v38 = (void *)static OS_dispatch_queue.main.getter(v37);
    v39 = swift_allocObject(&unk_1002ECAD8, 24, 7);
    swift_weakInit(v39 + 16, v23);
    v40 = (_QWORD *)swift_allocObject(&unk_1002ECBC8, 40, 7);
    v40[2] = v39;
    v40[3] = a6;
    v40[4] = a7;
    aBlock[4] = (uint64_t)sub_1000BAFA4;
    v64 = v40;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1001BAACC;
    aBlock[3] = (uint64_t)&unk_1002ECBE0;
    v41 = _Block_copy(aBlock);
    v42 = v64;
    swift_bridgeObjectRetain(a7);
    swift_release(v42);
    v43 = v52;
    static DispatchQoS.unspecified.getter(v44);
    aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
    v45 = sub_10006A7F8();
    v46 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v47 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
    v48 = v55;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v46, v47, v12, v45);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v43, v48, v41);
    _Block_release(v41);
    swift_release(v23);

    (*(void (**)(char *, uint64_t))(v56 + 8))(v48, v12);
    return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v43, v54);
  }
  return result;
}

uint64_t sub_1000BA38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_1000B61EC(a2, a3);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_1000BA3FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a2 = *(_OWORD *)a1;
  swift_unknownObjectWeakTakeInit(a2 + 16, a1 + 16);
  v4 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 32) = v4;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a1 + 56);
  *(_WORD *)(a2 + 64) = *(_WORD *)(a1 + 64);
  return a2;
}

uint64_t sub_1000BA454(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for QuestionnaireState.PrepareToSendState(a2, a1);
  return a2;
}

void sub_1000BA488()
{
  __asm { BR              X11 }
}

_QWORD *sub_1000BA4E8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

_BYTE *sub_1000BA778@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_1000BB048(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_1000BB108((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_1000BB180((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

_QWORD *sub_1000BA7EC(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

char *sub_1000BA850(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)__DataStorage._bytes.getter();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)__DataStorage._offset.getter();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = __DataStorage._length.getter();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_1000BA8FC(unint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t result;
  char v13;

  v3 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v3;
  if (!isUniquelyReferenced_nonNull_bridgeObject || v3 < 0 || (v3 & 0x4000000000000000) != 0)
  {
    v3 = sub_100190E48(v3);
    *v1 = v3;
  }
  v5 = v3 & 0xFFFFFFFFFFFFFF8;
  v6 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v6 <= a1)
  {
    __break(1u);
  }
  else
  {
    v7 = v6 - 1;
    v8 = v6 - 1 - a1;
    if (v8 >= 0)
    {
      v9 = v5 + 8 * a1;
      v10 = *(_QWORD *)(v9 + 32);
      v11 = memmove((void *)(v9 + 32), (const void *)(v9 + 40), 8 * v8);
      *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFF8) + 0x10) = v7;
      specialized Array._endMutation()(v11);
      return v10;
    }
  }
  v13 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v13, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000BA9E4()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *v0;
  result = swift_isUniquelyReferenced_nonNull_bridgeObject(*v0);
  *v0 = v1;
  if (!(_DWORD)result || v1 < 0 || (v1 & 0x4000000000000000) != 0)
  {
    result = sub_100190E48(v1);
    v1 = result;
    *v0 = result;
  }
  v3 = v1 & 0xFFFFFFFFFFFFFF8;
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v4)
  {
    v5 = v4 - 1;
    v6 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20);
    *(_QWORD *)(v3 + 16) = v5;
    specialized Array._endMutation()(result);
    return v6;
  }
  else
  {
    __break(1u);
  }
  return result;
}

int64_t sub_1000BAA50(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1000BAB34(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 72);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1000BABC0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_1000BAC48@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  if (result)
  {
    v5 = result;
    v8 = *a3;
    v7 = a3[1];
    swift_bridgeObjectRetain(v7);
    result = _StringGuts.copyUTF8(into:)(v5, a2, v8, v7);
    if ((v9 & 1) == 0)
    {
      v10 = result;
      result = swift_bridgeObjectRelease(v7);
      *a4 = 0;
      a4[1] = 0xE000000000000000;
      a4[2] = 15;
      a4[3] = v10;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_1000BACD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  _BYTE v14[24];
  _QWORD v15[24];

  swift_beginAccess(v2 + 48, v14, 0, 0);
  sub_10008CB00((uint64_t *)(v2 + 48), (uint64_t)v15);
  v5 = *(_QWORD *)(*(_QWORD *)(v2 + 264) + 112);
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_7;
  swift_bridgeObjectRetain(a2);
  v6 = sub_10017D3B0(a1, a2);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease(a2);
LABEL_7:
    v12 = 0;
    goto LABEL_8;
  }
  v8 = *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  swift_retain(v8);
  swift_bridgeObjectRelease(a2);
  v9 = *(_QWORD *)(v8 + 40);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(v9);
  v11 = sub_10008C580(v10, a1, a2);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(a2);
  if (!v11)
  {
    swift_release(v8);
    goto LABEL_7;
  }
  v12 = sub_10022A2DC(v15, v8);
  swift_release(v8);
  swift_release(v11);
LABEL_8:
  sub_10008CB3C(v15);
  return v12 & 1;
}

uint64_t sub_1000BADF4(uint64_t a1)
{
  uint64_t v2;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7[2];
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 16);
  result = Set.init(minimumCapacity:)(v2, &type metadata for String, &protocol witness table for String);
  v8 = result;
  if (v2)
  {
    v4 = (uint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      sub_100103274(v7, v5, v6);
      swift_bridgeObjectRelease(v7[1]);
      v4 += 2;
      --v2;
    }
    while (v2);
    return v8;
  }
  return result;
}

uint64_t sub_1000BAE88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031D758);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BAED0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000BAEF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000BAF08(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000BAF14()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000BAF48(void (*a1)(_QWORD, _QWORD), unint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;

  return sub_1000B9F30(a1, a2, a3, a4, *(_QWORD *)(v4 + 16), *(uint64_t **)(v4 + 24), *(_QWORD *)(v4 + 32), *(_QWORD *)(v4 + 40), *(_QWORD *)(v4 + 48));
}

uint64_t sub_1000BAF78()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000BAFA4()
{
  uint64_t *v0;

  return sub_1000BA38C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000BAFC0(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  if (a4 != 2)
    return sub_10000CC50(result, a2);
  return result;
}

uint64_t sub_1000BAFD4(uint64_t result, unint64_t a2, uint64_t a3, char a4)
{
  if (a4 != 2)
    return sub_10000CCCC(result, a2);
  return result;
}

uint64_t sub_1000BAFE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031D758);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000BB030@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10019EB58(a1, *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_1000BB048(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;

  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_1000BB108(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }
  else
  {
    v6 = type metadata accessor for Data.RangeReference(0);
    result = swift_allocObject(v6, 32, 7);
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v3;
  }
  return result;
}

uint64_t sub_1000BB180(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (a1)
    v3 = a2 - a1;
  else
    v3 = 0;
  v4 = type metadata accessor for __DataStorage(0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v3 & 0x80000000) == 0)
    return v3 << 32;
LABEL_10:
  __break(1u);
  return result;
}

_BYTE *sub_1000BB200(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)sub_1000BB048(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_1000BB108((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)sub_1000BB180((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_1000BB264(uint64_t result)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      v2 = type metadata accessor for __DataStorage(0);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(length:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        v3 = type metadata accessor for Data.RangeReference(0);
        result = swift_allocObject(v3, 32, 7);
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

_QWORD *sub_1000BB300@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = sub_1000BA7EC((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_1000BB35C, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_1000BB35C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  return sub_1000BAC48(a1, a2, *(uint64_t **)(v3 + 16), a3);
}

uint64_t sub_1000BB378(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease(result);
  return result;
}

double sub_1000BB384(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000B31EC(a1, a2, v2);
}

uint64_t sub_1000BB38C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000ACC80(a1, v1);
}

uint64_t sub_1000BB394(char a1)
{
  uint64_t v1;

  return sub_1000B1FEC(a1, v1);
}

uint64_t *sub_1000BB39C(uint64_t *a1, uint64_t *a2)
{
  assignWithTake for QuestionnaireState.State(a2, a1);
  return a2;
}

uint64_t *sub_1000BB3D0(uint64_t *a1, uint64_t *a2)
{
  assignWithCopy for QuestionnaireState.State(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for QuestionnaireState.RecordedAnswerChoice()
{
  return &type metadata for QuestionnaireState.RecordedAnswerChoice;
}

uint64_t destroy for QuestionnaireState.QuestionsAnsweredPresentationItem(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t initializeWithCopy for QuestionnaireState.QuestionsAnsweredPresentationItem(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v7 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for QuestionnaireState.QuestionsAnsweredPresentationItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t assignWithTake for QuestionnaireState.QuestionsAnsweredPresentationItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v12 = *(_QWORD *)(a2 + 80);
  v13 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionnaireState.QuestionsAnsweredPresentationItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnaireState.QuestionsAnsweredPresentationItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionnaireState.QuestionsAnsweredPresentationItem()
{
  return &type metadata for QuestionnaireState.QuestionsAnsweredPresentationItem;
}

uint64_t _s8SOSBuddy18QuestionnaireStateC20RecordedAnswerChoiceOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000BB724 + 4 * byte_1002532AF[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000BB758 + 4 * byte_1002532AA[v4]))();
}

uint64_t sub_1000BB758(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BB760(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000BB768);
  return result;
}

uint64_t sub_1000BB774(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000BB77CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000BB780(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000BB788(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for QuestionnaireState.Stage()
{
  return &type metadata for QuestionnaireState.Stage;
}

uint64_t assignWithCopy for QuestionnaireState.RecordedAnswer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v3);
  return a1;
}

uint64_t assignWithTake for QuestionnaireState.RecordedAnswer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v3);
  return a1;
}

ValueMetadata *type metadata accessor for QuestionnaireState.RecordedAnswer()
{
  return &type metadata for QuestionnaireState.RecordedAnswer;
}

unint64_t sub_1000BB834()
{
  unint64_t result;

  result = qword_10031D788;
  if (!qword_10031D788)
  {
    result = swift_getWitnessTable(&unk_1002534D8, &type metadata for QuestionnaireState.RecordedAnswerChoice);
    atomic_store(result, (unint64_t *)&qword_10031D788);
  }
  return result;
}

uint64_t destroy for RadarView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[6]);
  swift_release(a1[8]);
  return swift_release(a1[10]);
}

uint64_t initializeWithCopy for RadarView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v8 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  v10 = a2[6];
  v9 = a2[7];
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v9;
  v12 = a2[8];
  v11 = a2[9];
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v11;
  v14 = a2[10];
  v13 = a2[11];
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v13;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_QWORD *)(a1 + 104) = a2[13];
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v8);
  swift_retain(v10);
  swift_retain(v12);
  swift_retain(v14);
  return a1;
}

uint64_t *assignWithCopy for RadarView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a1[4];
  v9 = a2[4];
  a1[4] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[5] = a2[5];
  v10 = a1[6];
  v11 = a2[6];
  a1[6] = v11;
  swift_retain(v11);
  swift_release(v10);
  a1[7] = a2[7];
  v12 = a1[8];
  v13 = a2[8];
  a1[8] = v13;
  swift_retain(v13);
  swift_release(v12);
  a1[9] = a2[9];
  v14 = a1[10];
  v15 = a2[10];
  a1[10] = v15;
  swift_retain(v15);
  swift_release(v14);
  a1[11] = a2[11];
  *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
  a1[13] = a2[13];
  return a1;
}

uint64_t *assignWithTake for RadarView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = a1[4];
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_release(v7);
  v9 = a1[6];
  v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_release(v9);
  v11 = a1[8];
  v12 = a2[8];
  a1[7] = a2[7];
  a1[8] = v12;
  swift_release(v11);
  v13 = a1[10];
  v14 = a2[10];
  a1[9] = a2[9];
  a1[10] = v14;
  swift_release(v13);
  a1[11] = a2[11];
  *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
  a1[13] = a2[13];
  return a1;
}

uint64_t getEnumTagSinglePayload for RadarView(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 112))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RadarView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 112) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RadarView()
{
  return &type metadata for RadarView;
}

uint64_t sub_1000BBBF0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100298FAC, 1);
}

uint64_t sub_1000BBC00()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_1000BBC20(uint64_t a1)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v6;

  type metadata accessor for LayoutDirection(0);
  __chkstk_darwin();
  v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v4 + 16))(v3, a1);
  return EnvironmentValues.layoutDirection.setter(v3);
}

uint64_t sub_1000BBC9C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int16 v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  double v57;
  uint64_t KeyPath;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  void *v63;
  __n128 v64;
  unint64_t v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  double *v71;
  uint64_t v72;
  char *v73;
  void *v74;
  char *v75;
  id v76;
  Swift::String v77;
  Swift::String v78;
  Swift::String v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t OpaqueTypeConformance2;
  uint64_t v87;
  __n128 v88;
  id v89;
  Swift::String v90;
  Swift::String v91;
  Swift::String v92;
  uint64_t countAndFlagsBits;
  void *object;
  __n128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t result;
  id v107;
  Swift::String v108;
  Swift::String v109;
  Swift::String v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  void *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  unint64_t v142;
  id v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  Swift::String v150;
  _BYTE v151[936];
  _BYTE v152[1160];
  _QWORD v153[119];
  _BYTE v154[960];
  _QWORD v155[2];
  _BYTE v156[944];
  _BYTE v157[1160];
  _BYTE v158[1201];
  char v159;
  uint64_t v160;
  uint64_t v161;
  char v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  __int16 v168;
  char v169;
  _BYTE v170[951];
  Swift::String v171;
  Swift::String v172;
  Swift::String v173;

  v2 = (uint64_t)v1;
  v4 = type metadata accessor for AccessibilityChildBehavior(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v141 = (char *)&v125 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_100003DB8(&qword_10031A138);
  __chkstk_darwin(v134, v8);
  v138 = (uint64_t *)((char *)&v125 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for LayoutDirection(0);
  v136 = *(_QWORD *)(v10 - 8);
  v137 = v10;
  __chkstk_darwin(v10, v11);
  v135 = (char *)&v125 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = sub_100003DB8(&qword_10031D7A8);
  __chkstk_darwin(v133, v13);
  v139 = (char *)&v125 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003DB8(&qword_10031D7B0);
  __chkstk_darwin(v15, v16);
  v140 = (uint64_t)&v125 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003DB8(&qword_10031D7B8);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v125 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100003DB8(&qword_10031D7C0);
  v25 = __chkstk_darwin(v23, v24);
  v149 = (char *)&v125 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __chkstk_darwin(v25, v27);
  v30 = __chkstk_darwin(v28, v29);
  v33 = *v1;
  if (!v33)
    goto LABEL_19;
  v142 = v5;
  v143 = (id)v4;
  v4 = *(_QWORD *)(v2 + 16);
  if (!v4)
  {
LABEL_20:
    v34 = *(_QWORD *)(v2 + 24);
    v117 = type metadata accessor for ConnectivityModel();
    v118 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
    v119 = v33;
LABEL_23:
    swift_retain(v119);
    EnvironmentObject.error()(0, v34, v117, v118);
    __break(1u);
    goto LABEL_24;
  }
  v5 = *(_QWORD *)(v2 + 32);
  if (!v5)
  {
    v34 = *(_QWORD *)(v2 + 40);
    v117 = type metadata accessor for GuidanceModel();
    v118 = sub_1000052EC(&qword_100316B08, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceModel, (uint64_t)&unk_10024D2FC);
    swift_retain(v33);
    v119 = v4;
    goto LABEL_23;
  }
  v144 = v15;
  v145 = v22;
  v34 = *(_QWORD *)(v2 + 48);
  if (!v34)
  {
    v34 = *(_QWORD *)(v2 + 56);
    v117 = type metadata accessor for OrientationModel();
    v118 = sub_1000052EC(&qword_10031CB60, (uint64_t (*)(uint64_t))type metadata accessor for OrientationModel, (uint64_t)&unk_10024D2FC);
    swift_retain(v33);
    swift_retain(v4);
    v119 = v5;
    goto LABEL_23;
  }
  v35 = *(_QWORD *)(v2 + 64);
  if (!v35)
  {
LABEL_24:
    v120 = *(_QWORD *)(v2 + 72);
    v121 = type metadata accessor for StewieModel();
    v35 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
    swift_retain(v33);
    swift_retain(v4);
    swift_retain(v5);
    swift_retain(v34);
    EnvironmentObject.error()(0, v120, v121, v35);
    __break(1u);
    goto LABEL_25;
  }
  v146 = v19;
  v147 = v18;
  v125 = v30;
  v126 = (uint64_t)&v125 - v31;
  v127 = v32;
  v128 = a1;
  v36 = *(_QWORD *)(v2 + 80);
  if (v36)
  {
    sub_1000BD300((_BYTE *)(v2 + 96), &v159);
    v37 = type metadata accessor for RadarMetrics();
    v38 = swift_allocObject(v37, 96, 7);
    *(_OWORD *)(v38 + 72) = xmmword_100253510;
    *(_QWORD *)(v38 + 88) = 0x3FD0C152382D7365;
    sub_1000BD300(&v159, (_BYTE *)(v38 + 16));
    *(_QWORD *)(v38 + 24) = v33;
    *(_QWORD *)(v38 + 32) = v4;
    *(_QWORD *)(v38 + 40) = v5;
    *(_QWORD *)(v38 + 48) = v34;
    *(_QWORD *)(v38 + 56) = v35;
    *(_QWORD *)(v38 + 64) = v36;
    swift_retain(v33);
    swift_retain(v4);
    swift_retain(v5);
    swift_retain(v34);
    swift_retain(v35);
    swift_retain(v36);
    sub_1000CDA30();
    v40 = v39;
    v42 = v41;
    v132 = static HorizontalAlignment.center.getter(v43);
    sub_1000CF9FC((uint64_t)v158);
    v130 = *(_OWORD *)&v158[16];
    v131 = *(_OWORD *)v158;
    v129 = *(_OWORD *)&v158[32];
    v44 = *(_QWORD *)&v158[48];
    v45 = *(_QWORD *)&v158[56];
    v148 = v5;
    v46 = *(_WORD *)&v158[64];
    v47 = v158[66];
    v49 = static Alignment.center.getter(v48);
    v51 = v50;
    sub_1000BC8D8(v38, v2, v151, v52);
    v153[0] = v49;
    v153[1] = v51;
    memcpy(&v153[2], v151, 0x3A2uLL);
    v154[958] = v47;
    memcpy(&v154[5], v153, 0x3B2uLL);
    v155[0] = v49;
    v155[1] = v51;
    memcpy(v156, v151, 0x3A2uLL);
    sub_1000BFE58((uint64_t)v153);
    sub_1000C0474((uint64_t)v155);
    v156[936] = 0;
    v160 = v132;
    v161 = 0;
    v162 = 0;
    v163 = v131;
    v164 = v130;
    v165 = v129;
    v166 = v44;
    v167 = v45;
    v168 = v46;
    v169 = v47;
    v53 = memcpy(v170, v154, sizeof(v170));
    v54 = static Alignment.center.getter(v53);
    sub_1001324C8(0, 1, 0.0, 1, v40, 0, *(unint64_t *)&v42, 0, (uint64_t)v152, v56, 0.0, 1, v42, 0, v54, v55);
    sub_1000C0474((uint64_t)v153);
    memcpy(v157, v152, sizeof(v157));
    LOBYTE(v49) = static Edge.Set.all.getter(v57);
    memcpy(v158, v157, 0x488uLL);
    v158[1160] = v49;
    memset(&v158[1168], 0, 33);
    KeyPath = swift_getKeyPath(&unk_100253590);
    v60 = v135;
    v59 = v136;
    v61 = v137;
    (*(void (**)(char *, _QWORD, uint64_t))(v136 + 104))(v135, enum case for LayoutDirection.leftToRight(_:), v137);
    v62 = v138;
    (*(void (**)(char *, char *, uint64_t))(v59 + 16))((char *)v138 + *(int *)(v134 + 28), v60, v61);
    *v62 = KeyPath;
    v63 = v139;
    sub_10000B234((uint64_t)v62, (uint64_t)&v139[*(int *)(v133 + 36)], &qword_10031A138);
    memcpy(v63, v158, 0x4B1uLL);
    sub_1000C0AB0((uint64_t)v158);
    sub_100007FF0((uint64_t)v62, &qword_10031A138);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v60, v61);
    sub_1000C0DDC((uint64_t)v157);
    v138 = (uint64_t *)v38;
    v64.n128_f64[0] = sub_1000CDCC8();
    v65 = v64.n128_u64[0];
    v66 = static UnitPoint.center.getter(v64);
    v68 = v67;
    v69 = v140;
    sub_10000B234((uint64_t)v63, v140, &qword_10031D7A8);
    v70 = v144;
    v71 = (double *)(v69 + *(int *)(v144 + 36));
    *(_QWORD *)v71 = v65;
    *((_QWORD *)v71 + 1) = v65;
    v71[2] = v66;
    *((_QWORD *)v71 + 3) = v68;
    v72 = sub_100007FF0((uint64_t)v63, &qword_10031D7A8);
    v73 = v141;
    static AccessibilityChildBehavior.ignore.getter(v72);
    v74 = (void *)sub_10002B614(&qword_10031D7C8, &qword_10031D7B0, (void (*)(void))sub_1000C1108);
    v75 = v145;
    View.accessibilityElement(children:)(v73, v70, v74);
    (*(void (**)(char *, id))(v142 + 8))(v73, v143);
    sub_100007FF0(v69, &qword_10031D7B0);
    v143 = (id)objc_opt_self(NSBundle);
    v76 = objc_msgSend(v143, "mainBundle");
    v77._countAndFlagsBits = 0xD000000000000014;
    v140 = (uint64_t)"Swift/UnsafePointer.swift";
    v141 = (char *)0x8000000100268910;
    v171._object = (void *)0x8000000100268910;
    v77._object = (void *)0x8000000100262000;
    v78._countAndFlagsBits = 0;
    v78._object = (void *)0xE000000000000000;
    v171._countAndFlagsBits = 0xD000000000000027;
    v79 = NSLocalizedString(_:tableName:bundle:value:comment:)(v77, (Swift::String_optional)0, (NSBundle)v76, v78, v171);

    v150 = v79;
    v142 = sub_10002B3F4();
    v81 = Text.init<A>(_:)(&v150, &type metadata for String, v142, v80);
    v83 = v82;
    v2 = v84;
    v5 = v85 & 1;
    v150._countAndFlagsBits = v70;
    v150._object = v74;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v150, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    v87 = v147;
    View.accessibility(label:)(v81, v83, v5, v2, v147, OpaqueTypeConformance2);
    v4 = v148;
    sub_10002B438(v81, v83, v5);
    v88 = swift_bridgeObjectRelease(v2);
    (*(void (**)(char *, uint64_t, __n128))(v146 + 8))(v75, v87, v88);
    if ((*(_BYTE *)(v4 + 80) & 1) != 0 || (*(_BYTE *)(v4 + 66) & 1) != 0 || (*(_BYTE *)(v4 + 192) & 1) != 0)
    {
      v89 = objc_msgSend(v143, "mainBundle", v125);
      v90._countAndFlagsBits = 0xD000000000000015;
      v172._object = v141;
      v90._object = (void *)0x8000000100268940;
      v91._countAndFlagsBits = 0;
      v91._object = (void *)0xE000000000000000;
      v172._countAndFlagsBits = 0xD000000000000027;
      v92 = NSLocalizedString(_:tableName:bundle:value:comment:)(v90, (Swift::String_optional)0, (NSBundle)v89, v91, v172);
      countAndFlagsBits = v92._countAndFlagsBits;
      object = v92._object;

LABEL_11:
      v150._countAndFlagsBits = countAndFlagsBits;
      v150._object = object;
      v96 = Text.init<A>(_:)(&v150, &type metadata for String, v142, v95);
      v98 = v97;
      v100 = v99;
      v102 = v101 & 1;
      v103 = v127;
      v104 = (uint64_t)v149;
      ModifiedContent<>.accessibility(value:)();
      sub_10002B438(v96, v98, v102);
      swift_release(v138);
      swift_bridgeObjectRelease(v100);
      sub_100007FF0(v104, &qword_10031D7C0);
      v105 = v126;
      sub_10000B458(v103, v126, &qword_10031D7C0);
      return sub_10000B458(v105, v128, &qword_10031D7C0);
    }
    v107 = objc_msgSend(v143, "mainBundle");
    v173._object = (void *)(v140 | 0x8000000000000000);
    v108._countAndFlagsBits = 0x20676E6964616548;
    v108._object = (void *)0xAE00B0C266302E25;
    v109._countAndFlagsBits = 0;
    v109._object = (void *)0xE000000000000000;
    v173._countAndFlagsBits = 0xD000000000000027;
    v110 = NSLocalizedString(_:tableName:bundle:value:comment:)(v108, (Swift::String_optional)0, (NSBundle)v107, v109, v173);

    v111 = sub_100003DB8(&qword_100317970);
    v112 = swift_allocObject(v111, 72, 7);
    *(_OWORD *)(v112 + 16) = xmmword_10024E070;
    if ((*(_BYTE *)(v4 + 80) & 1) != 0)
    {
      __break(1u);
    }
    else if ((*(_BYTE *)(v4 + 66) & 1) == 0)
    {
      if ((*(_BYTE *)(v4 + 192) & 1) == 0)
      {
        v113 = *(double *)(v4 + 168) * 57.2957795;
        *(_QWORD *)(v112 + 56) = &type metadata for Double;
        *(_QWORD *)(v112 + 64) = &protocol witness table for Double;
        *(double *)(v112 + 32) = v113;
        countAndFlagsBits = String.init(format:_:)(v110._countAndFlagsBits, v110._object);
        object = v114;
        v95 = swift_bridgeObjectRelease(v110._object);
        goto LABEL_11;
      }
      goto LABEL_18;
    }
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    v33 = *(_QWORD *)(v2 + 8);
    v115 = type metadata accessor for ConnectionClosedModel(0);
    v116 = sub_1000052EC(&qword_10031CB58, type metadata accessor for ConnectionClosedModel, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, v33, v115, v116);
    __break(1u);
    goto LABEL_20;
  }
LABEL_25:
  v122 = *(_QWORD *)(v2 + 88);
  v123 = type metadata accessor for UIMetrics();
  v124 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  swift_retain(v33);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v34);
  swift_retain(v35);
  result = EnvironmentObject.error()(0, v122, v123, v124);
  __break(1u);
  return result;
}

uint64_t sub_1000BC8D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  __n128 v36;
  int v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  double v53;
  uint64_t v54;
  char v55;
  char v56;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  char v95;
  _BYTE v96[256];
  _BYTE v97[81];
  _OWORD v98[8];
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  double v109;
  _BYTE v110[256];
  _BYTE __src[930];
  _BYTE v112[256];
  _QWORD v113[9];
  char v114;
  char v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  int v119;
  double v120;
  uint64_t v121;
  char v122;
  uint64_t v123;
  double v124;
  _OWORD v125[9];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  _BYTE v131[264];
  _BYTE v132[336];
  _BYTE v133[224];
  uint64_t v134;
  char v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140[28];
  _BYTE v141[120];
  _BYTE v142[72];
  _QWORD v143[8];
  __int16 v144;
  _QWORD v145[3];
  char v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  __int128 v151;
  __int128 v152;
  uint64_t v153;
  uint64_t v154;
  char v155;
  char v156;
  _OWORD v157[15];

  v7 = static Color.clear.getter(a4);
  v86 = v7;
  v94 = *(unsigned __int8 *)(a1 + 16) - 2;
  if (v94 >= 3)
  {
    v9 = 0x4074400000000000;
    v11 = 0x4073200000000000;
  }
  else
  {
    sub_1000CDA30();
    v9 = v8;
    sub_1000CDA30();
    v11 = v10;
  }
  v12 = static Alignment.center.getter(v7);
  _FrameLayout.init(width:height:alignment:)(&v134, v9, 0, v11, 0, v12, v13);
  v14 = v134;
  v15 = v135;
  v16 = v136;
  v17 = v137;
  v80 = v139;
  v81 = v138;
  v18 = *(_QWORD *)(a2 + 104);
  v19 = Namespace.wrappedValue.getter(v18);
  v78 = ((uint64_t (*)(void))static MatchedGeometryProperties.position.getter)();
  v20 = static UnitPoint.top.getter();
  v22 = v21;
  sub_1000CE614((uint64_t)v140);
  sub_10000B458((uint64_t)v140, (uint64_t)v133, &qword_10031D810);
  sub_10000B458((uint64_t)v140, (uint64_t)v157, &qword_10031D810);
  v85 = v14;
  v84 = v15;
  v83 = v16;
  v82 = v17;
  v79 = v19;
  if (sub_1000C1230((uint64_t *)v157) == 1)
  {
    sub_1000C1248(__src);
  }
  else
  {
    v127 = v157[10];
    v128 = v157[11];
    v129 = v157[12];
    v130 = v157[13];
    v125[6] = v157[6];
    v125[7] = v157[7];
    v125[8] = v157[8];
    v126 = v157[9];
    v125[2] = v157[2];
    v125[3] = v157[3];
    v125[4] = v157[4];
    v125[5] = v157[5];
    v125[0] = v157[0];
    v125[1] = v157[1];
    sub_10000B458((uint64_t)v133, (uint64_t)v98, &qword_10031D810);
    sub_1000C28A4((uint64_t)v98);
    v23 = Namespace.wrappedValue.getter(v18);
    v24 = ((uint64_t (*)(void))static MatchedGeometryProperties.position.getter)();
    v25 = v24;
    v27 = static UnitPoint.bottom.getter(v24, v26);
    v29 = v28;
    v30 = Namespace.wrappedValue.getter(v18);
    v31 = ((uint64_t (*)(void))static MatchedGeometryProperties.position.getter)();
    v32 = static UnitPoint.top.getter();
    v34 = v33;
    sub_1000C14A0(v140);
    *(_OWORD *)&__src[160] = v127;
    *(_OWORD *)&__src[176] = v128;
    *(_OWORD *)&__src[192] = v129;
    *(_OWORD *)&__src[208] = v130;
    *(_OWORD *)&__src[96] = v125[6];
    *(_OWORD *)&__src[112] = v125[7];
    *(_OWORD *)&__src[128] = v125[8];
    *(_OWORD *)&__src[144] = v126;
    *(_OWORD *)&__src[32] = v125[2];
    *(_OWORD *)&__src[48] = v125[3];
    *(_OWORD *)&__src[64] = v125[4];
    *(_OWORD *)&__src[80] = v125[5];
    *(_OWORD *)__src = v125[0];
    *(_OWORD *)&__src[16] = v125[1];
    *(_QWORD *)&__src[224] = 0xD000000000000012;
    *(_QWORD *)&__src[232] = 0x8000000100268960;
    *(_QWORD *)&__src[240] = v23;
    *(_DWORD *)&__src[248] = v25;
    *(double *)&__src[256] = v27;
    *(_QWORD *)&__src[264] = v29;
    __src[272] = 1;
    strcpy(&__src[280], "stack-top");
    *(_WORD *)&__src[290] = 0;
    *(_DWORD *)&__src[292] = -385875968;
    *(_QWORD *)&__src[296] = v30;
    *(_DWORD *)&__src[304] = v31;
    *(double *)&__src[312] = v32;
    *(_QWORD *)&__src[320] = v34;
    __src[328] = 0;
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(__src);
  }
  sub_10000B458((uint64_t)__src, (uint64_t)v132, &qword_10031D818);
  sub_1000D0630((uint64_t)__src);
  v76 = *(_QWORD *)&__src[16];
  v77 = *(_QWORD *)&__src[8];
  v92 = *(_QWORD *)&__src[24];
  v93 = *(_QWORD *)__src;
  v75 = *(_QWORD *)&__src[40];
  v90 = *(_QWORD *)&__src[48];
  v91 = *(_QWORD *)&__src[32];
  v88 = *(_QWORD *)&__src[64];
  v89 = *(_QWORD *)&__src[56];
  v87 = __src[72];
  v35 = __src[73];
  v74 = Namespace.wrappedValue.getter(v18);
  v36.n128_f64[0] = static MatchedGeometryProperties.position.getter();
  v73 = v37;
  v38 = static UnitPoint.center.getter(v36);
  v40 = v39;
  v72 = static Animation.easeIn.getter();
  if (v94 >= 3)
  {
    v41 = 145.0;
    v43 = 153.0;
  }
  else
  {
    v41 = dbl_100253C30[(char)v94];
    sub_1000CDA30();
    v43 = v42 * 0.5;
  }
  v95 = v35;
  v131[263] = v35;
  sub_1000CECD8((uint64_t)v141);
  sub_10000B458((uint64_t)v141, (uint64_t)v145, &qword_10031D820);
  v44 = v149;
  if (v149)
  {
    v67 = v145[1];
    v69 = v145[0];
    v45 = v146;
    v46 = v145[2];
    v47 = v147;
    v71 = v40;
    v48 = v20;
    v49 = v148;
    v50 = v150;
    v63 = v152;
    v65 = v151;
    v51 = v22;
    v52 = v153;
    v53 = v38;
    v54 = v154;
    v55 = v155;
    v56 = v156;
    sub_1000CF1B0((uint64_t)v98);
    *(_OWORD *)((char *)&v125[2] + 6) = v98[2];
    *(_OWORD *)((char *)&v125[1] + 6) = v98[1];
    *(_OWORD *)((char *)&v125[6] + 6) = v98[6];
    *(_OWORD *)((char *)&v125[5] + 6) = v98[5];
    *(_OWORD *)((char *)&v125[7] + 6) = v98[7];
    *(_OWORD *)((char *)&v125[3] + 6) = v98[3];
    *(_OWORD *)((char *)&v125[4] + 6) = v98[4];
    v97[0] = v45;
    *(_QWORD *)((char *)&v125[8] + 6) = v99;
    *(_OWORD *)((char *)v125 + 6) = v98[0];
    *(_QWORD *)__src = v69;
    *(_QWORD *)&__src[8] = v67;
    *(_QWORD *)&__src[16] = v46;
    __src[24] = v45;
    *(_QWORD *)&__src[32] = v47;
    *(_QWORD *)&__src[40] = v49;
    v20 = v48;
    v40 = v71;
    *(_QWORD *)&__src[48] = v44;
    *(_QWORD *)&__src[56] = v50;
    *(_OWORD *)&__src[64] = v65;
    *(_OWORD *)&__src[80] = v63;
    *(_QWORD *)&__src[96] = v52;
    v22 = v51;
    *(_QWORD *)&__src[104] = v54;
    v38 = v53;
    __src[112] = v55;
    __src[113] = v56;
    *(_OWORD *)&__src[114] = v125[0];
    *(_OWORD *)&__src[178] = v125[4];
    *(_OWORD *)&__src[162] = v125[3];
    *(_OWORD *)&__src[146] = v125[2];
    *(_OWORD *)&__src[130] = v125[1];
    *(_OWORD *)&__src[240] = *(_OWORD *)((char *)&v125[7] + 14);
    *(_OWORD *)&__src[226] = v125[7];
    *(_OWORD *)&__src[210] = v125[6];
    *(_OWORD *)&__src[194] = v125[5];
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(__src);
  }
  else
  {
    sub_1000C1280(__src);
  }
  sub_10000B458((uint64_t)__src, (uint64_t)v131, &qword_10031D828);
  sub_1000D044C((uint64_t)v142);
  sub_10000B458((uint64_t)v142, (uint64_t)v143, &qword_10031D830);
  if ((v144 & 0xFF00) == 0x200)
  {
    v68 = 0;
    v70 = 0;
    v66 = 0;
    v62 = 0;
    v64 = 0;
    v61 = 0;
    v58 = 0;
    v59 = 0;
    v60 = 512;
  }
  else
  {
    v68 = v143[1];
    v70 = v143[0];
    v66 = v143[2];
    v62 = v143[4];
    v64 = v143[3];
    v61 = v143[5];
    v60 = v144 & 0x101;
    v58 = v143[6];
    v59 = v143[7];
  }
  sub_10000B458((uint64_t)v132, (uint64_t)v97, &qword_10031D818);
  sub_10000B458((uint64_t)v131, (uint64_t)v96, &qword_10031D828);
  sub_10000B458((uint64_t)v97, (uint64_t)v98, &qword_10031D818);
  *(_QWORD *)&v100 = v93;
  *((_QWORD *)&v100 + 1) = v77;
  *(_QWORD *)&v101 = v76;
  *((_QWORD *)&v101 + 1) = v92;
  *(_QWORD *)&v102 = v91;
  *((_QWORD *)&v102 + 1) = v75;
  *(_QWORD *)&v103 = v90;
  *((_QWORD *)&v103 + 1) = v89;
  *(_QWORD *)&v104 = v88;
  BYTE8(v104) = v87;
  BYTE9(v104) = v95;
  *(_QWORD *)&v105 = 0xD000000000000012;
  *((_QWORD *)&v105 + 1) = 0x8000000100268960;
  *(_QWORD *)&v106 = v74;
  DWORD2(v106) = v73;
  *(double *)&v107 = v38;
  *((_QWORD *)&v107 + 1) = v40;
  LOBYTE(v108) = 0;
  *((_QWORD *)&v108 + 1) = v72;
  v109 = v41 - v43;
  sub_10000B458((uint64_t)v96, (uint64_t)v110, &qword_10031D828);
  *(_QWORD *)__src = v86;
  *(_WORD *)&__src[8] = 256;
  *(_QWORD *)&__src[16] = v85;
  __src[24] = v84;
  *(_QWORD *)&__src[32] = v83;
  __src[40] = v82;
  *(_QWORD *)&__src[48] = v81;
  *(_QWORD *)&__src[56] = v80;
  strcpy(&__src[64], "stack-top");
  *(_WORD *)&__src[74] = 0;
  *(_DWORD *)&__src[76] = -385875968;
  *(_QWORD *)&__src[80] = v79;
  *(_DWORD *)&__src[88] = v78;
  *(double *)&__src[96] = v20;
  *(_QWORD *)&__src[104] = v22;
  __src[112] = 1;
  sub_10000B458((uint64_t)v98, (uint64_t)&__src[120], &qword_10031D818);
  *(_OWORD *)&__src[552] = v106;
  *(_OWORD *)&__src[568] = v107;
  *(_OWORD *)&__src[584] = v108;
  *(_OWORD *)&__src[488] = v102;
  *(_OWORD *)&__src[504] = v103;
  *(_OWORD *)&__src[520] = v104;
  *(_OWORD *)&__src[536] = v105;
  *(_OWORD *)&__src[456] = v100;
  *(_OWORD *)&__src[472] = v101;
  *(double *)&__src[600] = v109;
  sub_10000B458((uint64_t)v110, (uint64_t)&__src[608], &qword_10031D828);
  *(_QWORD *)&__src[864] = v70;
  *(_QWORD *)&__src[872] = v68;
  *(_QWORD *)&__src[880] = v66;
  *(_QWORD *)&__src[888] = v64;
  *(_QWORD *)&__src[896] = v62;
  *(_QWORD *)&__src[904] = v61;
  *(_QWORD *)&__src[912] = v58;
  *(_QWORD *)&__src[920] = v59;
  *(_WORD *)&__src[928] = v60;
  memcpy(a3, __src, 0x3A2uLL);
  sub_10000B458((uint64_t)v96, (uint64_t)v112, &qword_10031D828);
  swift_retain(v86);
  swift_bridgeObjectRetain(0xE900000000000070);
  sub_1000C140C((uint64_t)v98, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000C0170);
  sub_1000C12A8((uint64_t)&v100);
  sub_1000C131C((uint64_t)v110, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000C041C);
  sub_1000C131C((uint64_t)v112, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000C0A34);
  v113[0] = v93;
  v113[1] = v77;
  v113[2] = v76;
  v113[3] = v92;
  v113[4] = v91;
  v113[5] = v75;
  v113[6] = v90;
  v113[7] = v89;
  v113[8] = v88;
  v114 = v87;
  v115 = v95;
  v116 = 0xD000000000000012;
  v117 = 0x8000000100268960;
  v118 = v74;
  v119 = v73;
  v120 = v38;
  v121 = v40;
  v122 = 0;
  v123 = v72;
  v124 = v41 - v43;
  sub_1000C1398((uint64_t)v113);
  sub_10000B458((uint64_t)v97, (uint64_t)v125, &qword_10031D818);
  sub_1000C140C((uint64_t)v125, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_1000C0788);
  swift_bridgeObjectRelease(0xE900000000000070);
  return swift_release(v86);
}

uint64_t sub_1000BD2B8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000BBC9C(a1);
}

_BYTE *sub_1000BD300(_BYTE *a1, _BYTE *a2)
{
  initializeBufferWithCopyOfBuffer for StewieAppId(a2, a1);
  return a2;
}

uint64_t sub_1000BD33C@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  __int128 v29;
  uint64_t v31;
  uint64_t v32;
  _OWORD v33[3];

  v2 = v1;
  v32 = a1;
  v3 = type metadata accessor for AnimationTimelineSchedule(0);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = __chkstk_darwin(v3, v5);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v31 - v10;
  v31 = sub_100003DB8(&qword_10031D9B8);
  v12 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31, v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  AnimationTimelineSchedule.init(minimumInterval:paused:)(0, 1, 0);
  v16 = swift_allocObject(&unk_1002ED440, 376, 7);
  memcpy((void *)(v16 + 16), v2, 0x168uLL);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v8, v11, v3);
  v17 = swift_allocObject(&unk_1002ED468, 32, 7);
  *(_QWORD *)(v17 + 16) = sub_1000C4F5C;
  *(_QWORD *)(v17 + 24) = v16;
  sub_1000C4F90((uint64_t)v2);
  v18 = sub_100003DB8(&qword_10031D9C0);
  v19 = sub_1000052EC(&qword_100316778, (uint64_t (*)(uint64_t))&type metadata accessor for AnimationTimelineSchedule, (uint64_t)&protocol conformance descriptor for AnimationTimelineSchedule);
  v20 = sub_1000C5100();
  TimelineView<>.init(_:content:)(v8, sub_1000C4F88, v17, v3, v18, v19, v20);
  v21 = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v11, v3);
  v23 = v2[1];
  v22 = v2[2];
  v24 = static Alignment.center.getter(v21);
  _FrameLayout.init(width:height:alignment:)(v33, v23, 0, v22, 0, v24, v25);
  v27 = v31;
  v26 = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 16))(v32, v15, v31);
  v28 = (_OWORD *)(v26 + *(int *)(sub_100003DB8(&qword_10031DA00) + 36));
  v29 = v33[1];
  *v28 = v33[0];
  v28[1] = v29;
  v28[2] = v33[2];
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v27);
}

uint64_t sub_1000BD574@<X0>(__int128 *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  long double v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  long double v16;
  char v17;
  double v18;
  double v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  double v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  double v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _BYTE v53[360];
  double v54;
  _OWORD v55[24];
  _OWORD v56[24];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  double v71[48];
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;

  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = &v53[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = sub_100003DB8(qword_100316788);
  v10 = TimelineView.Context.date.getter(v9);
  v11 = Date.timeIntervalSinceReferenceDate.getter(v10);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4);
  v12 = a1[19];
  v76 = a1[18];
  v77 = v12;
  v13 = a1[21];
  v78 = a1[20];
  v79 = v13;
  v80 = *((_QWORD *)a1 + 44);
  v14 = a1[15];
  v72 = a1[14];
  v73 = v14;
  v15 = a1[17];
  v74 = a1[16];
  v75 = v15;
  v16 = *(double *)&v72;
  v17 = v76;
  v18 = remainder(v11, *(long double *)&v72);
  v19 = v18;
  if (v18 < 0.0)
  {
    v20 = a1[11];
    v21 = a1[9];
    v67 = a1[10];
    v68 = v20;
    v22 = a1[11];
    v23 = a1[13];
    v69 = a1[12];
    v70 = v23;
    v24 = a1[7];
    v25 = a1[5];
    v26 = fabs(v16 * 0.5 + v18) / (v16 * 0.5);
    v63 = a1[6];
    v64 = v24;
    v27 = a1[7];
    v28 = a1[9];
    v65 = a1[8];
    v66 = v28;
    v29 = a1[3];
    v30 = a1[1];
    v59 = a1[2];
    v60 = v29;
    v31 = a1[3];
    v32 = a1[5];
    v61 = a1[4];
    v62 = v32;
    v33 = a1[1];
    v57 = *a1;
    v58 = v33;
    v55[10] = v67;
    v55[11] = v22;
    v34 = a1[13];
    v55[12] = v69;
    v55[13] = v34;
    v55[6] = v63;
    v55[7] = v27;
    v55[8] = v65;
    v55[9] = v21;
    v55[2] = v59;
    v55[3] = v31;
    v55[4] = v61;
    v55[5] = v25;
    v55[0] = v57;
    v55[1] = v30;
    v35 = a1[21];
    v55[20] = a1[20];
    v55[21] = v35;
    *(_QWORD *)&v55[22] = *((_QWORD *)a1 + 44);
    v36 = a1[17];
    v55[16] = a1[16];
    v55[17] = v36;
    v37 = a1[19];
    v55[18] = a1[18];
    v55[19] = v37;
    v38 = a1[15];
    v55[14] = a1[14];
    v55[15] = v38;
    memcpy(v53, v55, sizeof(v53));
    v54 = v26;
    sub_1000C5470((uint64_t)v53);
    sub_10000B458((uint64_t)v53, (uint64_t)v56, &qword_10031DA10);
    sub_1000C28A4((uint64_t)&v57);
    sub_1000C527C(&v72);
LABEL_12:
    v49 = sub_100003DB8(&qword_10031D9F0);
    v50 = sub_1000C51B0();
    v51 = sub_10003418C(&qword_10031D9E8, &qword_10031D9F0, (void (*)(void))sub_1000C51F4, (uint64_t)&protocol conformance descriptor for <A> A?);
    _ConditionalContent<>.init(storage:)(v56, &type metadata for WavesView.UpSignalView, v49, v50, v51);
    memcpy(v56, v71, 0x179uLL);
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(v56);
    goto LABEL_13;
  }
  v39 = a1[11];
  v67 = a1[10];
  v68 = v39;
  v40 = a1[13];
  v69 = a1[12];
  v70 = v40;
  v41 = a1[7];
  v63 = a1[6];
  v64 = v41;
  v42 = a1[9];
  v65 = a1[8];
  v66 = v42;
  v43 = a1[3];
  v59 = a1[2];
  v60 = v43;
  v44 = a1[5];
  v61 = a1[4];
  v62 = v44;
  v45 = a1[1];
  v57 = *a1;
  v58 = v45;
  if ((BYTE8(v60) & 1) == 0)
  {
    if ((v17 & 1) != 0)
    {
      v46 = sub_1000C535C(v11, v16, *(double *)&v60);
      if ((v47 & 1) != 0)
      {
        sub_1000C5434((uint64_t)v71);
        goto LABEL_11;
      }
      v48 = *(double *)&v46;
    }
    else
    {
      v48 = 0.0;
    }
    v56[10] = v67;
    v56[11] = v68;
    v56[12] = v69;
    v56[13] = v70;
    v56[6] = v63;
    v56[7] = v64;
    v56[8] = v65;
    v56[9] = v66;
    v56[2] = v59;
    v56[3] = v60;
    v56[4] = v61;
    v56[5] = v62;
    v56[0] = v57;
    v56[1] = v58;
    v56[20] = v78;
    v56[21] = v79;
    *(_QWORD *)&v56[22] = v80;
    v56[17] = v75;
    v56[19] = v77;
    v56[18] = v76;
    v56[15] = v73;
    v56[16] = v74;
    v56[14] = v72;
    memcpy(v71, v56, 0x168uLL);
    v71[45] = v19 / (v16 * 0.5);
    v71[46] = v48;
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(v71);
    sub_1000C527C(&v72);
    sub_1000C28A4((uint64_t)&v57);
LABEL_11:
    sub_10000B458((uint64_t)v71, (uint64_t)v55, &qword_10031D9F0);
    sub_10000B458((uint64_t)v55, (uint64_t)v53, &qword_10031D9F0);
    sub_1000C5350((uint64_t)v53);
    sub_10000B458((uint64_t)v53, (uint64_t)v56, &qword_10031DA10);
    goto LABEL_12;
  }
  sub_1000C5238((uint64_t)v56);
LABEL_13:
  sub_10000B458((uint64_t)v56, (uint64_t)v71, &qword_10031D9C0);
  return sub_10000B458((uint64_t)v71, a2, &qword_10031D9C0);
}

uint64_t sub_1000BD9D0@<X0>(double *a1@<X0>, _OWORD *a2@<X8>, double a3@<D0>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  double v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  char v59;
  __int128 v60;
  char v61;
  char v62;
  char v63;
  char v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  _QWORD v97[4];
  char v98;
  uint64_t v99;
  __int16 v100;
  double v101;
  double v102;
  char v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  char v107;
  __int128 v108;
  _QWORD v109[4];
  char v110;
  uint64_t v111;
  __int16 v112;
  double v113;
  double v114;
  char v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  char v119;
  uint64_t v120;
  uint64_t v121;

  v5 = *((_QWORD *)a1 + 1);
  v4 = *((_QWORD *)a1 + 2);
  v6 = *((_QWORD *)a1 + 25);
  v8 = *((_QWORD *)a1 + 29);
  v7 = *((_QWORD *)a1 + 30);
  v46 = *((_QWORD *)a1 + 31);
  v9 = *((_QWORD *)a1 + 33);
  v10 = *((_QWORD *)a1 + 34);
  v11 = *((_QWORD *)a1 + 35);
  v47 = *((_QWORD *)a1 + 42);
  v12 = a1[45];
  v49 = sub_1000CD940(*((_QWORD *)a1 + 32), v12);
  v13 = sub_1000CD940(v11, v12);
  v14 = sub_1000CD940(v9, v12);
  swift_retain(v10);
  v16 = static Alignment.center.getter(v15);
  _FrameLayout.init(width:height:alignment:)(&v50, v5, 0, v4, 0, v16, v17);
  v45 = v50;
  v18 = v52;
  v20 = v54;
  v19 = v55;
  v62 = v51;
  v61 = v53;
  v21 = sub_1000CD940(v8, v12);
  v22 = sub_1000CD940(v11, v12);
  v23 = sub_1000CD940(v7, v12);
  swift_retain(v46);
  v25 = static Alignment.center.getter(v24);
  _FrameLayout.init(width:height:alignment:)(&v56, v5, 0, v4, 0, v25, v26);
  v27 = v56;
  v28 = v57;
  v29 = v58;
  v30 = v59;
  v31 = v60;
  v64 = v57;
  v63 = v59;
  LOBYTE(v5) = v62;
  LOBYTE(v4) = v61;
  *(_QWORD *)&v65 = v6;
  *((_QWORD *)&v65 + 1) = v47;
  *(double *)&v66 = a3;
  *((double *)&v66 + 1) = v49;
  LOBYTE(v67) = 0;
  *((_QWORD *)&v67 + 1) = v10;
  LOWORD(v68) = 256;
  *((double *)&v68 + 1) = v13;
  *(double *)&v69 = v14;
  BYTE8(v69) = 0;
  *(_QWORD *)&v70 = v45;
  BYTE8(v70) = v62;
  *(_QWORD *)&v71 = v18;
  BYTE8(v71) = v61;
  *(_QWORD *)&v72 = v20;
  *((_QWORD *)&v72 + 1) = v19;
  *(_QWORD *)&v73 = v6;
  *((_QWORD *)&v73 + 1) = v47;
  *(double *)&v74 = a3;
  *((double *)&v74 + 1) = v21;
  LOBYTE(v75) = 0;
  *((_QWORD *)&v75 + 1) = v46;
  LOWORD(v76) = 256;
  *((double *)&v76 + 1) = v22;
  *(double *)&v77 = v23;
  BYTE8(v77) = 0;
  *(_QWORD *)&v78 = v56;
  BYTE8(v78) = v57;
  *(_QWORD *)&v79 = v58;
  BYTE8(v79) = v59;
  v80 = v60;
  v85 = v69;
  v86 = v70;
  v87 = v71;
  v88 = v72;
  v81 = v65;
  v82 = v66;
  v83 = v67;
  v84 = v68;
  v91 = v75;
  v92 = v76;
  v89 = v73;
  v90 = v74;
  v95 = v79;
  v96 = v60;
  v93 = v77;
  v94 = v78;
  v32 = v65;
  v33 = v66;
  v34 = v68;
  a2[2] = v67;
  a2[3] = v34;
  *a2 = v32;
  a2[1] = v33;
  v35 = v85;
  v36 = v86;
  v37 = v88;
  a2[6] = v87;
  a2[7] = v37;
  a2[4] = v35;
  a2[5] = v36;
  v38 = v89;
  v39 = v90;
  v40 = v92;
  a2[10] = v91;
  a2[11] = v40;
  a2[8] = v38;
  a2[9] = v39;
  v41 = v93;
  v42 = v94;
  v43 = v96;
  a2[14] = v95;
  a2[15] = v43;
  a2[12] = v41;
  a2[13] = v42;
  v97[0] = v6;
  v97[1] = v47;
  *(double *)&v97[2] = a3;
  *(double *)&v97[3] = v21;
  v98 = 0;
  v99 = v46;
  v100 = 256;
  v101 = v22;
  v102 = v23;
  v103 = 0;
  v104 = v27;
  v105 = v28;
  v106 = v29;
  v107 = v30;
  v108 = v31;
  sub_1000C71A0((uint64_t)&v65);
  sub_1000C71A0((uint64_t)&v73);
  sub_1000C71C8((uint64_t)v97);
  v109[0] = v6;
  v109[1] = v47;
  *(double *)&v109[2] = a3;
  *(double *)&v109[3] = v49;
  v110 = 0;
  v111 = v10;
  v112 = 256;
  v113 = v13;
  v114 = v14;
  v115 = 0;
  v116 = v45;
  v117 = v5;
  v118 = v18;
  v119 = v4;
  v120 = v20;
  v121 = v19;
  return sub_1000C71C8((uint64_t)v109);
}

double sub_1000BDD00@<D0>(uint64_t a1@<X8>)
{
  const void *v1;
  double v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double result;
  __int128 v16;
  double v17[46];
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;

  memcpy(v17, v1, sizeof(v17));
  v3 = sub_1000CD940(*(uint64_t *)&v17[43], v17[45]);
  v5 = static Alignment.center.getter(v4);
  v7 = v6;
  sub_1000BD9D0(v17, v18, v3);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = v30;
  *(_OWORD *)(a1 + 208) = v29;
  *(_OWORD *)(a1 + 224) = v8;
  v9 = v32;
  *(_OWORD *)(a1 + 240) = v31;
  *(_OWORD *)(a1 + 256) = v9;
  v10 = v26;
  *(_OWORD *)(a1 + 144) = v25;
  *(_OWORD *)(a1 + 160) = v10;
  v11 = v28;
  *(_OWORD *)(a1 + 176) = v27;
  *(_OWORD *)(a1 + 192) = v11;
  v12 = v22;
  *(_OWORD *)(a1 + 80) = v21;
  *(_OWORD *)(a1 + 96) = v12;
  v13 = v24;
  *(_OWORD *)(a1 + 112) = v23;
  *(_OWORD *)(a1 + 128) = v13;
  v14 = v18[1];
  *(_OWORD *)(a1 + 16) = v18[0];
  *(_OWORD *)(a1 + 32) = v14;
  result = *(double *)&v19;
  v16 = v20;
  *(_OWORD *)(a1 + 48) = v19;
  *(_OWORD *)(a1 + 64) = v16;
  return result;
}

double sub_1000BDDB4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  double result;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  __int128 v37;

  v4 = *(_QWORD *)(v1 + 8);
  v3 = *(_QWORD *)(v1 + 16);
  v5 = *(double *)(v1 + 208);
  v6 = *(unsigned __int8 *)(v1 + 288);
  v7 = *(_QWORD *)(v1 + 296);
  v8 = *(_QWORD *)(v1 + 304);
  v10 = *(_QWORD *)(v1 + 312);
  v9 = *(_QWORD *)(v1 + 320);
  v11 = *(_QWORD *)(v1 + 328);
  v12 = *(double *)(v1 + 360);
  v30 = *(_QWORD *)(v1 + 368);
  v31 = *(_QWORD *)(v1 + 200);
  v13 = sub_1000CD940(*(_QWORD *)(v1 + 352), v12);
  v16 = sub_1000CD940(v7, v12);
  if (v6)
    v17 = v5;
  else
    v17 = 0.0;
  v18 = static UnitPoint.bottom.getter(v14, v15);
  v20 = v19;
  v21 = sub_1000CD940(v8, v12);
  v22 = sub_1000CD940(v10, v12);
  swift_retain(v9);
  v24 = static Alignment.center.getter(v23);
  _FrameLayout.init(width:height:alignment:)(&v33, v4, 0, v3, 0, v24, v25);
  v26 = v33;
  v27 = v34;
  v28 = v35;
  v32 = v36;
  *(_QWORD *)a1 = v31;
  *(_QWORD *)(a1 + 8) = v11;
  *(double *)(a1 + 16) = v13;
  *(double *)(a1 + 24) = v16;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(double *)(a1 + 48) = v17;
  *(_QWORD *)(a1 + 56) = v30;
  *(double *)(a1 + 64) = v18;
  *(_QWORD *)(a1 + 72) = v20;
  *(_QWORD *)(a1 + 80) = v9;
  *(_WORD *)(a1 + 88) = 256;
  *(double *)(a1 + 96) = v21;
  *(double *)(a1 + 104) = v22;
  *(_BYTE *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = v26;
  *(_BYTE *)(a1 + 128) = v27;
  *(_QWORD *)(a1 + 136) = v28;
  *(_BYTE *)(a1 + 144) = v32;
  result = *(double *)&v37;
  *(_OWORD *)(a1 + 152) = v37;
  return result;
}

void sub_1000BDF28(_BOOL8 IsNull@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t v6;
  double v8;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  uint64_t v26;
  __double2 v27;
  uint64_t v28;
  char v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  uint64_t v38;
  __double2 v39;
  double v40;
  double v41;
  double v42;
  double Height;
  double v44;
  double v45;
  double v46;
  double v47;
  _QWORD v48[4];
  char v49;
  _QWORD v50[6];
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  CGRect v57;
  CGRect v58;
  CGRect v59;

  v8 = *(double *)(v6 + 8);
  if (v8 <= 0.0
    || v8 >= 3.14159265
    || (IsNull = CGRectIsNull(*(CGRect *)&a3))
    || (v57.origin.x = a3, v57.origin.y = a4, v57.size.width = a5, v57.size.height = a6, IsNull = CGRectIsInfinite(v57)))
  {
    Path.init()(&v51, IsNull);
    v13 = v51;
    v14 = v52;
    v15 = v53;
    v16 = v54;
    v17 = v55;
  }
  else
  {
    v18 = *(double *)(v6 + 24);
    v19 = v18 * 0.5;
    if (v18 * 0.5 >= *(double *)(v6 + 16))
      v20 = v18 * 0.5;
    else
      v20 = *(double *)(v6 + 16);
    v47 = v20;
    v58.origin.x = a3;
    v58.origin.y = a4;
    v58.size.width = a5;
    v58.size.height = a6;
    v44 = CGRectGetWidth(v58) * 0.5;
    v59.origin.x = a3;
    v59.origin.y = a4;
    v59.size.width = a5;
    v59.size.height = a6;
    Height = CGRectGetHeight(v59);
    v51 = *(double *)v6;
    v21 = Angle.animatableData.getter(v8);
    v22 = Angle.animatableData.getter(v51);
    Angle.animatableData.setter(v22 - v21);
    v23 = v51;
    v24 = Angle.animatableData.getter(v8);
    v25 = Angle.animatableData.getter(v51);
    v26 = ((uint64_t (*)(double))Angle.animatableData.setter)(v24 + v25);
    v45 = v51;
    Path.init()(v48, v26);
    v46 = v23;
    v27 = __sincos_stret(v23);
    v28 = Path.move(to:)(v44 + (v47 - v19) * v27.__cosval, Height + (v47 - v19) * v27.__sinval);
    v29 = *(_BYTE *)(v6 + 32);
    if ((v29 & 1) != 0)
    {
      v32 = Height;
      v51 = 1.57079633;
      v33 = Angle.animatableData.getter(3.14159265);
      v34 = Angle.animatableData.getter(1.57079633);
      Angle.animatableData.setter(v33 + v34);
      v35 = v51;
      v51 = 1.0;
      v52 = 0;
      v53 = 0;
      v54 = 0x3FF0000000000000;
      v55 = 0;
      v56 = 0;
      Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)(0, &v51, v44 + v47 * v27.__cosval, Height + v47 * v27.__sinval, v19, 1.57079633, v35);
      v30 = v19 + v47;
      v31 = v44;
    }
    else
    {
      v30 = v19 + v47;
      v31 = v44;
      v32 = Height;
      Path.addLine(to:)(v28, v44 + (v19 + v47) * v27.__cosval, Height + (v19 + v47) * v27.__sinval);
    }
    v37 = v45;
    v36 = v46;
    v50[0] = 0x3FF0000000000000;
    v50[1] = 0;
    v50[2] = 0;
    v50[3] = 0x3FF0000000000000;
    v50[4] = 0;
    v50[5] = 0;
    Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)(0, v50, v31, v32, v30, v46, v45);
    v39 = __sincos_stret(v45);
    if ((v29 & 1) != 0)
    {
      v41 = Angle.animatableData.getter(3.14159265);
      v42 = Angle.animatableData.getter(1.57079633);
      Angle.animatableData.setter(v41 + v42);
      v37 = v45;
      v36 = v46;
      Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)(0, v50, v31 + v47 * v39.__cosval, v32 + v47 * v39.__sinval, v19, 1.57079633, 3.14159265);
      v40 = v47 - v19;
    }
    else
    {
      v40 = v47 - v19;
      Path.addLine(to:)(v38, v31 + (v47 - v19) * v39.__cosval, v32 + (v47 - v19) * v39.__sinval);
    }
    Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)(1, v50, v31, v32, v40, v37, v36);
    Path.closeSubpath()();
    v13 = *(double *)v48;
    v14 = v48[1];
    v15 = v48[2];
    v16 = v48[3];
    v17 = v49;
  }
  *(double *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 24) = v16;
  *(_BYTE *)(a2 + 32) = v17;
}

double sub_1000BE2B8@<D0>(_BOOL8 a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  __int128 *v6;
  __int128 v8;
  double result;
  __int128 v10;
  _OWORD v11[2];
  char v12;
  __int128 v13;
  __int128 v14;
  char v15;

  v8 = v6[1];
  v13 = *v6;
  v14 = v8;
  v15 = *((_BYTE *)v6 + 32);
  sub_1000BDF28(a1, (uint64_t)v11, a3, a4, a5, a6);
  result = *(double *)v11;
  v10 = v11[1];
  *(_OWORD *)a2 = v11[0];
  *(_OWORD *)(a2 + 16) = v10;
  *(_BYTE *)(a2 + 32) = v12;
  return result;
}

uint64_t sub_1000BE314()
{
  return Shape.sizeThatFits(_:)();
}

uint64_t (*sub_1000BE32C(_QWORD *a1))()
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_1000BE388;
}

uint64_t sub_1000BE390(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000C77D0();
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000BE3E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000C77D0();
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000BE430(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C77D0();
  return Shape.body.getter(a1, v2);
}

uint64_t sub_1000BE468@<X0>(uint64_t a1@<X8>)
{
  const void *v1;
  _BYTE __dst[360];

  memcpy(__dst, v1, sizeof(__dst));
  return sub_1000BD33C(a1);
}

uint64_t sub_1000BE4B0@<X0>(_OWORD *a1@<X0>, void *a2@<X8>)
{
  _OWORD *v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _BYTE v30[360];
  _BYTE v31[360];
  _QWORD __dst[51];
  _BYTE __src[360];
  _BYTE v34[360];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _OWORD v49[8];
  uint64_t v50;

  v4 = (_OWORD *)swift_allocObject(&unk_1002ED148, 240, 7);
  v5 = a1[11];
  v4[11] = a1[10];
  v4[12] = v5;
  v6 = a1[13];
  v4[13] = a1[12];
  v4[14] = v6;
  v7 = a1[7];
  v4[7] = a1[6];
  v4[8] = v7;
  v8 = a1[9];
  v4[9] = a1[8];
  v4[10] = v8;
  v9 = a1[3];
  v4[3] = a1[2];
  v4[4] = v9;
  v10 = a1[5];
  v4[5] = a1[4];
  v4[6] = v10;
  v11 = a1[1];
  v4[1] = *a1;
  v4[2] = v11;
  v12 = (_OWORD *)swift_allocObject(&unk_1002ED170, 240, 7);
  v13 = a1[11];
  v12[11] = a1[10];
  v12[12] = v13;
  v14 = a1[13];
  v12[13] = a1[12];
  v12[14] = v14;
  v15 = a1[7];
  v12[7] = a1[6];
  v12[8] = v15;
  v16 = a1[9];
  v12[9] = a1[8];
  v12[10] = v16;
  v17 = a1[3];
  v12[3] = a1[2];
  v12[4] = v17;
  v18 = a1[5];
  v12[5] = a1[4];
  v12[6] = v18;
  v19 = a1[1];
  v12[1] = *a1;
  v12[2] = v19;
  v34[0] = 0;
  sub_1000C28A4((uint64_t)a1);
  sub_1000C28A4((uint64_t)a1);
  State.init(wrappedValue:)(__dst, v34, &type metadata for Bool);
  v20 = __dst[0];
  v21 = __dst[1];
  v22 = a1[11];
  v45 = a1[10];
  v46 = v22;
  v23 = a1[13];
  v47 = a1[12];
  v48 = v23;
  v24 = a1[7];
  v41 = a1[6];
  v42 = v24;
  v25 = a1[9];
  v43 = a1[8];
  v44 = v25;
  v26 = a1[3];
  v37 = a1[2];
  v38 = v26;
  v27 = a1[5];
  v39 = a1[4];
  v40 = v27;
  v28 = a1[1];
  v35 = *a1;
  v36 = v28;
  sub_10000B458((uint64_t)&v39, (uint64_t)v49, &qword_10031D858);
  if (sub_1000C2968((uint64_t)v49) == 1)
  {
    sub_1000C2980((uint64_t)__dst);
  }
  else
  {
    *(_OWORD *)&__src[160] = v45;
    *(_OWORD *)&__src[176] = v46;
    *(_OWORD *)&__src[192] = v47;
    *(_OWORD *)&__src[208] = v48;
    *(_OWORD *)&__src[96] = v41;
    *(_OWORD *)&__src[112] = v42;
    *(_OWORD *)&__src[128] = v43;
    *(_OWORD *)&__src[144] = v44;
    *(_OWORD *)&__src[32] = v37;
    *(_OWORD *)&__src[48] = v38;
    *(_OWORD *)&__src[64] = v39;
    *(_OWORD *)&__src[80] = v40;
    *(_OWORD *)__src = v35;
    *(_OWORD *)&__src[16] = v36;
    *(_OWORD *)&__src[320] = v49[6];
    *(_OWORD *)&__src[336] = v49[7];
    *(_QWORD *)&__src[352] = v50;
    *(_OWORD *)&__src[256] = v49[2];
    *(_OWORD *)&__src[272] = v49[3];
    *(_OWORD *)&__src[288] = v49[4];
    *(_OWORD *)&__src[304] = v49[5];
    *(_OWORD *)&__src[224] = v49[0];
    *(_OWORD *)&__src[240] = v49[1];
    memcpy(__dst, __src, 0x168uLL);
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(__dst);
    sub_1000C28A4((uint64_t)a1);
  }
  sub_10000B458((uint64_t)__dst, (uint64_t)v34, &qword_10031D860);
  sub_10000B458((uint64_t)v34, (uint64_t)v30, &qword_10031D860);
  sub_10000B458((uint64_t)v30, (uint64_t)v31, &qword_10031D860);
  LOBYTE(__dst[0]) = v20;
  __dst[1] = v21;
  __dst[2] = sub_1000C27FC;
  __dst[3] = v4;
  __dst[4] = sub_1000C289C;
  __dst[5] = v12;
  sub_10000B458((uint64_t)v31, (uint64_t)&__dst[6], &qword_10031D860);
  memcpy(a2, __dst, 0x198uLL);
  sub_10000B458((uint64_t)v30, (uint64_t)__src, &qword_10031D860);
  swift_retain(v21);
  swift_retain(v4);
  swift_retain(v12);
  sub_1000C2BA4((uint64_t)v31, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000C29B8);
  sub_1000C2B4C((uint64_t *)&v39);
  sub_1000C2BA4((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000C2C38);
  swift_release(v12);
  swift_release(v4);
  return swift_release(v21);
}

uint64_t sub_1000BE7BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _BYTE v20[274];
  uint64_t v21;
  char v22;
  uint64_t v23;
  char v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  _BYTE __src[274];
  char v47;
  char v48;

  v1 = *(_QWORD *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v6 = *(_OWORD *)(a1 + 184);
  v42 = *(_OWORD *)(a1 + 168);
  v43 = v6;
  v44 = *(_OWORD *)(a1 + 200);
  v45 = *(_QWORD *)(a1 + 216);
  v7 = *(_OWORD *)(a1 + 120);
  v38 = *(_OWORD *)(a1 + 104);
  v39 = v7;
  v8 = *(_OWORD *)(a1 + 152);
  v40 = *(_OWORD *)(a1 + 136);
  v41 = v8;
  v9 = *(_OWORD *)(a1 + 56);
  v34 = *(_OWORD *)(a1 + 40);
  v35 = v9;
  v10 = *(_OWORD *)(a1 + 88);
  v36 = *(_OWORD *)(a1 + 72);
  v37 = v10;
  sub_1000C28A4(a1);
  swift_bridgeObjectRetain(v1);
  v13 = static UnitPoint.bottom.getter(v11, v12);
  v14 = RadialGradient.init(gradient:center:startRadius:endRadius:)(&v26, v1, v13);
  *(_OWORD *)&__src[168] = v42;
  *(_OWORD *)&__src[184] = v43;
  *(_OWORD *)&__src[200] = v44;
  *(_OWORD *)&__src[104] = v38;
  *(_OWORD *)&__src[120] = v39;
  *(_OWORD *)&__src[136] = v40;
  *(_OWORD *)&__src[152] = v41;
  *(_OWORD *)&__src[40] = v34;
  *(_OWORD *)&__src[56] = v35;
  *(_OWORD *)&__src[72] = v36;
  *(_QWORD *)__src = v1;
  *(_QWORD *)&__src[8] = v3;
  *(_QWORD *)&__src[16] = v2;
  *(_QWORD *)&__src[24] = v5;
  *(_QWORD *)&__src[32] = v4;
  *(_QWORD *)&__src[216] = v45;
  *(_OWORD *)&__src[88] = v37;
  *(_QWORD *)&__src[224] = v4;
  *(_QWORD *)&__src[232] = v26;
  *(_OWORD *)&__src[240] = v27;
  *(_OWORD *)&__src[256] = v28;
  *(_WORD *)&__src[272] = 256;
  v15 = static Alignment.center.getter(v14);
  _FrameLayout.init(width:height:alignment:)(&v29, v3, 0, v2, 0, v15, v16);
  memcpy(v20, __src, sizeof(v20));
  v48 = v30;
  v47 = v32;
  v21 = v29;
  v22 = v30;
  v23 = v31;
  v24 = v32;
  v25 = v33;
  v17 = sub_100003DB8(&qword_10031D868);
  v18 = sub_1000C2DCC();
  View.accessibility(hidden:)(1, v17, v18);
  return sub_1000C2E50((uint64_t)__src);
}

void sub_1000BE9B4(_BOOL8 IsNull@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  double *v6;
  double v8;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  double v18;
  double v19;
  double v20;
  double Height;
  uint64_t v22;
  double v23;
  double v24;
  __double2 v25;
  uint64_t v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  _QWORD v33[4];
  char v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  CGRect v41;
  CGRect v42;
  CGRect v43;

  v8 = v6[28];
  if (v8 <= 0.0
    || v8 >= 3.14159265
    || (IsNull = CGRectIsNull(*(CGRect *)&a3))
    || (v41.origin.x = a3, v41.origin.y = a4, v41.size.width = a5, v41.size.height = a6, IsNull = CGRectIsInfinite(v41)))
  {
    Path.init()(&v35, IsNull);
    v13 = v35;
    v14 = v36;
    v15 = v37;
    v16 = v38;
    v17 = v39;
  }
  else
  {
    v18 = v6[25];
    v19 = v6[26] + v6[27] * 0.5;
    v42.origin.x = a3;
    v42.origin.y = a4;
    v42.size.width = a5;
    v42.size.height = a6;
    v20 = CGRectGetWidth(v42) * 0.5;
    v43.origin.x = a3;
    v43.origin.y = a4;
    v43.size.width = a5;
    v43.size.height = a6;
    Height = CGRectGetHeight(v43);
    Path.init()(v33, v22);
    Path.move(to:)(v20, Height);
    v35 = v18;
    v23 = Angle.animatableData.getter(v8);
    v24 = Angle.animatableData.getter(v18);
    Angle.animatableData.setter(v24 - v23);
    v25 = __sincos_stret(v35);
    Path.addLine(to:)(v26, v20 + v19 * v25.__cosval, Height + v19 * v25.__sinval);
    v35 = v18;
    v27 = Angle.animatableData.getter(v8);
    v28 = Angle.animatableData.getter(v18);
    Angle.animatableData.setter(v28 - v27);
    v29 = v35;
    v35 = v18;
    v30 = Angle.animatableData.getter(v8);
    v31 = Angle.animatableData.getter(v18);
    Angle.animatableData.setter(v30 + v31);
    v32 = v35;
    v35 = 1.0;
    v36 = 0;
    v37 = 0;
    v38 = 0x3FF0000000000000;
    v39 = 0;
    v40 = 0;
    Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)(0, &v35, v20, Height, v19, v29, v32);
    Path.closeSubpath()();
    v13 = *(double *)v33;
    v14 = v33[1];
    v15 = v33[2];
    v16 = v33[3];
    v17 = v34;
  }
  *(double *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 24) = v16;
  *(_BYTE *)(a2 + 32) = v17;
}

double sub_1000BEBA0@<D0>(_BOOL8 a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  __int128 *v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  double result;
  __int128 v16;
  _OWORD v17[2];
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  v8 = v6[13];
  v31 = v6[12];
  v32 = v8;
  v33 = *((_QWORD *)v6 + 28);
  v9 = v6[9];
  v27 = v6[8];
  v28 = v9;
  v10 = v6[11];
  v29 = v6[10];
  v30 = v10;
  v11 = v6[5];
  v23 = v6[4];
  v24 = v11;
  v12 = v6[7];
  v25 = v6[6];
  v26 = v12;
  v13 = v6[1];
  v19 = *v6;
  v20 = v13;
  v14 = v6[3];
  v21 = v6[2];
  v22 = v14;
  sub_1000BE9B4(a1, (uint64_t)v17, a3, a4, a5, a6);
  result = *(double *)v17;
  v16 = v17[1];
  *(_OWORD *)a2 = v17[0];
  *(_OWORD *)(a2 + 16) = v16;
  *(_BYTE *)(a2 + 32) = v18;
  return result;
}

void sub_1000BEC30(_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t sub_1000BEC5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000C5478();
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000BECAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000C5478();
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000BECFC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C5478();
  return Shape.body.getter(a1, v2);
}

void *sub_1000BED34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _OWORD *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD v15[14];
  _BYTE __src[408];

  v4 = v2[11];
  v15[10] = v2[10];
  v15[11] = v4;
  v5 = v2[13];
  v15[12] = v2[12];
  v15[13] = v5;
  v6 = v2[7];
  v15[6] = v2[6];
  v15[7] = v6;
  v7 = v2[9];
  v15[8] = v2[8];
  v15[9] = v7;
  v8 = v2[3];
  v15[2] = v2[2];
  v15[3] = v8;
  v9 = v2[5];
  v15[4] = v2[4];
  v15[5] = v9;
  v10 = v2[1];
  v15[0] = *v2;
  v15[1] = v10;
  v11 = static Alignment.center.getter(a1);
  v13 = v12;
  sub_1000BE4B0(v15, __src);
  *a2 = v11;
  a2[1] = v13;
  return memcpy(a2 + 2, __src, 0x198uLL);
}

uint64_t sub_1000BEDC4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3;
  double v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  __int16 v17;
  __int16 v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  __n128 v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t KeyPath;
  uint64_t v61;
  double v62;
  char v63;
  __int16 v64;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE v74[160];
  _OWORD v75[8];
  uint64_t v76;
  _QWORD v77[20];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  _OWORD __src[26];
  _OWORD v88[8];
  uint64_t v89;
  _QWORD v90[20];
  double v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  double v96;
  uint64_t v97;
  uint64_t v98;
  double v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  uint64_t v104;
  __int16 v105;
  char v106;
  _QWORD v107[5];
  uint64_t v108;
  char v109;
  uint64_t v110;
  char v111;
  uint64_t v112;
  uint64_t v113;

  v4 = *(double *)a1;
  v3 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned __int8 *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  v8 = *(double *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a1 + 56);
  v12 = *(double *)(a1 + 64);
  v11 = *(_QWORD *)(a1 + 72);
  v14 = *(_QWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a1 + 88);
  v15 = *(double *)(a1 + 96);
  v16 = *(_QWORD *)(a1 + 104);
  if (*(_BYTE *)(a1 + 112) == 1)
  {
    if (*(_BYTE *)(a1 + 113))
      v17 = 257;
    else
      v17 = 1;
    v91 = *(double *)a1;
    v92 = v3;
    v93 = v5;
    v94 = v6;
    v95 = v7;
    v96 = v8;
    v97 = v9;
    v98 = v10;
    v99 = v12;
    v100 = v11;
    v101 = v14;
    v102 = v13;
    v103 = v15;
    v104 = v16;
    v105 = v17;
    v106 = 0;
  }
  else
  {
    if (*(_BYTE *)(a1 + 113))
      v18 = 256;
    else
      v18 = 0;
    v91 = *(double *)a1;
    v92 = v3;
    v93 = v5;
    v94 = v6;
    v95 = v7;
    v96 = v8;
    v97 = v9;
    v98 = v10;
    v99 = v12;
    v100 = v11;
    v101 = v14;
    v102 = v13;
    v103 = v15;
    v104 = v16;
    v105 = v18;
    v106 = 1;
  }
  v19 = sub_1000C248C();
  v20 = sub_1000C24D0();
  swift_retain(v9);
  swift_retain(v10);
  _ConditionalContent<>.init(storage:)(&v91, &type metadata for TicksView.RingTicks, &type metadata for TicksView.DotTicks, v19, v20);
  v21 = *((_QWORD *)&__src[0] + 1);
  v22 = *((_QWORD *)&__src[1] + 1);
  v23 = *(_QWORD *)&__src[1];
  v68 = *((_QWORD *)&__src[2] + 1);
  v69 = *(_QWORD *)&__src[0];
  v67 = *(_QWORD *)&__src[2];
  v24 = __src[3];
  v72 = *((_QWORD *)&__src[4] + 1);
  v73 = *(_QWORD *)&__src[4];
  v70 = *((_QWORD *)&__src[5] + 1);
  v71 = *(_QWORD *)&__src[5];
  v25 = __src[6];
  v63 = BYTE2(__src[7]);
  v64 = __src[7];
  v66 = __src[1];
  if (v10)
  {
    v62 = v12 / 6.28318531;
    swift_retain(v10);
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v107, 1, 1, _swiftEmptyArrayStorage, v8, 10.0, 0.0);
    v26 = v107[0];
    v27 = v107[2];
    v61 = v107[3];
    v28 = v107[4];
    KeyPath = swift_getKeyPath(&unk_1002536D0);
    swift_retain(v10);
    v29 = Angle.animatableData.getter(v12 * 0.5);
    v30 = Angle.animatableData.getter(v4);
    v31 = Angle.animatableData.setter(v30 - v29);
    v32 = v4;
    v33 = static UnitPoint.center.getter(v31);
    v35 = v34;
    v37 = static Alignment.center.getter(v36);
    ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v108, v15 + v15, 0, v15 + v15, 0, v37, v38);
    v39 = v108;
    v40 = v109;
    v41 = v110;
    v42 = v111;
    v43 = v112;
    v44 = v113;
    swift_release(v10);
    LOBYTE(v90[0]) = v40;
    LOBYTE(v77[0]) = v42;
    *(_QWORD *)&__src[0] = 0;
    *((double *)__src + 1) = v62;
    __src[1] = __PAIR128__(v107[1], v26);
    *(_QWORD *)&__src[2] = v27;
    *((_QWORD *)&__src[2] + 1) = v61;
    *(_QWORD *)&__src[3] = v28;
    *((_QWORD *)&__src[3] + 1) = KeyPath;
    *(_QWORD *)&__src[4] = v10;
    *((double *)&__src[4] + 1) = v32;
    *(double *)&__src[5] = v33;
    *((_QWORD *)&__src[5] + 1) = v35;
    *(_QWORD *)&__src[6] = v39;
    BYTE8(__src[6]) = v40;
    *(_QWORD *)&__src[7] = v41;
    BYTE8(__src[7]) = v42;
    *(_QWORD *)&__src[8] = v43;
    v22 = *((_QWORD *)&v66 + 1);
    v23 = v66;
    *((_QWORD *)&__src[8] + 1) = v44;
    *(_QWORD *)&__src[9] = 0;
    *((_QWORD *)&__src[9] + 1) = v16;
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(__src);
  }
  else
  {
    sub_1000C2514(__src);
  }
  sub_10000B458((uint64_t)__src, (uint64_t)&v91, &qword_10031D850);
  v45 = *(_OWORD *)(a1 + 200);
  v46 = *(_OWORD *)(a1 + 232);
  v75[6] = *(_OWORD *)(a1 + 216);
  v75[7] = v46;
  v76 = *(_QWORD *)(a1 + 248);
  v47 = *(_OWORD *)(a1 + 136);
  v48 = *(_OWORD *)(a1 + 168);
  v75[2] = *(_OWORD *)(a1 + 152);
  v75[3] = v48;
  v75[4] = *(_OWORD *)(a1 + 184);
  v75[5] = v45;
  v75[0] = *(_OWORD *)(a1 + 120);
  v75[1] = v47;
  sub_10000B458((uint64_t)&v91, (uint64_t)v74, &qword_10031D850);
  sub_10000B458((uint64_t)v74, (uint64_t)v77, &qword_10031D850);
  v49 = *(_OWORD *)(a1 + 200);
  v50 = *(_OWORD *)(a1 + 232);
  v84 = *(_OWORD *)(a1 + 216);
  v85 = v50;
  v86 = *(_QWORD *)(a1 + 248);
  v51 = *(_OWORD *)(a1 + 136);
  v52 = *(_OWORD *)(a1 + 168);
  v80 = *(_OWORD *)(a1 + 152);
  v81 = v52;
  v82 = *(_OWORD *)(a1 + 184);
  v83 = v49;
  v78 = *(_OWORD *)(a1 + 120);
  v79 = v51;
  *(_QWORD *)&__src[0] = v69;
  *((_QWORD *)&__src[0] + 1) = v21;
  *(_QWORD *)&__src[1] = v23;
  *((_QWORD *)&__src[1] + 1) = v22;
  *(_QWORD *)&__src[2] = v67;
  *((_QWORD *)&__src[2] + 1) = v68;
  __src[3] = v24;
  *(_QWORD *)&__src[4] = v73;
  *((_QWORD *)&__src[4] + 1) = v72;
  *(_QWORD *)&__src[5] = v71;
  *((_QWORD *)&__src[5] + 1) = v70;
  __src[6] = v25;
  LOWORD(__src[7]) = v64;
  BYTE2(__src[7]) = v63;
  sub_10000B458((uint64_t)v77, (uint64_t)&__src[7] + 8, &qword_10031D850);
  *(_OWORD *)((char *)&__src[23] + 8) = v84;
  *(_OWORD *)((char *)&__src[24] + 8) = v85;
  *(_OWORD *)((char *)&__src[19] + 8) = v80;
  *(_OWORD *)((char *)&__src[20] + 8) = v81;
  *(_OWORD *)((char *)&__src[21] + 8) = v82;
  *(_OWORD *)((char *)&__src[22] + 8) = v83;
  *(_OWORD *)((char *)&__src[17] + 8) = v78;
  *(_OWORD *)((char *)&__src[18] + 8) = v79;
  *((_QWORD *)&__src[25] + 1) = v86;
  memcpy(a2, __src, 0x1A0uLL);
  v53 = *(_OWORD *)(a1 + 200);
  v54 = *(_OWORD *)(a1 + 232);
  v88[6] = *(_OWORD *)(a1 + 216);
  v88[7] = v54;
  v89 = *(_QWORD *)(a1 + 248);
  v55 = *(_OWORD *)(a1 + 136);
  v56 = *(_OWORD *)(a1 + 168);
  v88[2] = *(_OWORD *)(a1 + 152);
  v88[3] = v56;
  v57 = *(_OWORD *)(a1 + 184);
  v88[5] = v53;
  v88[4] = v57;
  v58 = *(_OWORD *)(a1 + 120);
  v88[1] = v55;
  v88[0] = v58;
  sub_1000C2530(v69, v21, v66, *((uint64_t *)&v66 + 1), v67, v68, v24, *((uint64_t *)&v24 + 1));
  sub_1000C2620(v77, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000C2558);
  sub_1000C2594(&v78);
  sub_1000C2594(v75);
  sub_1000C25DC(v88);
  sub_10000B458((uint64_t)v74, (uint64_t)v90, &qword_10031D850);
  sub_1000C2620(v90, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000C2684);
  return sub_1000C26C0(v69, v21, v66, *((uint64_t *)&v66 + 1), v67, v68, v24, *((uint64_t *)&v24 + 1));
}

double sub_1000BF3CC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  double result;
  _QWORD v23[5];
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  __int128 v28;

  v3 = *(double *)(v1 + 40);
  v4 = *(_QWORD *)(v1 + 48);
  v6 = *(double *)(v1 + 96);
  v5 = *(_QWORD *)(v1 + 104);
  swift_retain(v4);
  v7 = StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v23, 0, 0, &_swiftEmptyArrayStorage, v3, 10.0, 0.0);
  v8 = v23[0];
  v9 = v23[2];
  v10 = v23[3];
  v11 = v23[4];
  v12 = static Alignment.center.getter(v7);
  v14 = v13;
  v15 = static Alignment.center.getter(v12);
  ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v24, v6 + v6, 0, v6 + v6, 0, v15, v16);
  v17 = v24;
  v18 = v25;
  v19 = v26;
  v20 = v27;
  v21 = v23[1];
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v21;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  *(_QWORD *)(a1 + 40) = v4;
  *(_WORD *)(a1 + 48) = 256;
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 72) = v17;
  *(_BYTE *)(a1 + 80) = v18;
  *(_QWORD *)(a1 + 88) = v19;
  *(_BYTE *)(a1 + 96) = v20;
  result = *(double *)&v28;
  *(_OWORD *)(a1 + 104) = v28;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v5;
  return result;
}

void sub_1000BF4F4()
{
  uint64_t v0;
  uint64_t v1;
  double v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  uint64_t KeyPath;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  double v16[2];

  v1 = v0;
  v2 = *(double *)(v0 + 8);
  v3 = *(_QWORD *)(v0 + 32);
  v16[0] = *(double *)v0;
  v4 = Angle.animatableData.getter(v2);
  v5 = Angle.animatableData.getter(v16[0]);
  Angle.animatableData.setter(v5 - v4);
  if (v3)
  {
    if (((360 / v3) & 0x8000000000000000) == 0)
    {
      v6 = v16[0];
      v16[0] = 0.0;
      *(_QWORD *)&v16[1] = 360 / v3;
      KeyPath = swift_getKeyPath(&unk_100253968);
      v8 = swift_allocObject(&unk_1002ED418, 138, 7);
      *(double *)(v8 + 16) = v6;
      v9 = *(_OWORD *)(v1 + 80);
      *(_OWORD *)(v8 + 88) = *(_OWORD *)(v1 + 64);
      *(_OWORD *)(v8 + 104) = v9;
      *(_OWORD *)(v8 + 120) = *(_OWORD *)(v1 + 96);
      v10 = *(_OWORD *)(v1 + 16);
      *(_OWORD *)(v8 + 24) = *(_OWORD *)v1;
      *(_OWORD *)(v8 + 40) = v10;
      v11 = *(_OWORD *)(v1 + 48);
      *(_OWORD *)(v8 + 56) = *(_OWORD *)(v1 + 32);
      *(_WORD *)(v8 + 136) = *(_WORD *)(v1 + 112);
      *(_OWORD *)(v8 + 72) = v11;
      sub_1000C4C40(v1);
      v12 = sub_100003DB8(&qword_10031D948);
      v13 = sub_100003DB8(&qword_10031D950);
      v14 = sub_1000C4C70();
      v15 = sub_1000C4D20();
      ForEach<>.init(_:id:content:)(v16, KeyPath, sub_1000C4C34, v8, v12, v13, v14, &protocol witness table for Int, v15);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t *sub_1000BF644@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v13;
  __double2 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  double v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  double v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;

  v5 = *(_QWORD *)(a2 + 32);
  v6 = v5 * *result;
  if ((unsigned __int128)(v5 * (__int128)*result) >> 64 == v6 >> 63)
  {
    v9 = *(double *)(a2 + 96);
    v8 = *(_QWORD *)(a2 + 104);
    v11 = *(_QWORD *)(a2 + 40);
    v10 = *(_QWORD *)(a2 + 48);
    v24 = a4;
    v12 = Angle.animatableData.getter((double)v6 * 0.0174532925);
    v13 = Angle.animatableData.getter(a4);
    Angle.animatableData.setter(v12 + v13);
    v14 = __sincos_stret(v24);
    swift_retain(v10);
    v16 = static Alignment.center.getter(v15);
    v18 = _FrameLayout.init(width:height:alignment:)(&v24, v11, 0, v11, 0, v16, v17);
    v19 = v24;
    LOBYTE(v11) = v25;
    v20 = v26;
    v21 = v27;
    v22 = v28;
    v23 = v29;
    result = (uint64_t *)static Animation.linear.getter(v18);
    v31 = v11;
    v30 = v21;
    *(_QWORD *)a3 = v10;
    *(_WORD *)(a3 + 8) = 256;
    *(double *)(a3 + 16) = v19;
    *(_BYTE *)(a3 + 24) = v11;
    *(_QWORD *)(a3 + 32) = v20;
    *(_BYTE *)(a3 + 40) = v21;
    *(_QWORD *)(a3 + 48) = v22;
    *(_QWORD *)(a3 + 56) = v23;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = v8;
    *(double *)(a3 + 80) = v9;
    *(double *)(a3 + 88) = v9 * v14.__cosval;
    *(double *)(a3 + 96) = v9 * v14.__sinval;
    *(_QWORD *)(a3 + 104) = result;
    *(double *)(a3 + 112) = v9 * v14.__cosval;
    *(double *)(a3 + 120) = v9 * v14.__sinval;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000BF778()
{
  sub_1000BF4F4();
}

double sub_1000BF7C8@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  char v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  _OWORD v27[5];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  char v39;
  char v40;
  _BYTE __src[416];

  v4 = v2[13];
  v35 = v2[12];
  v36 = v4;
  v5 = v2[15];
  v37 = v2[14];
  v38 = v5;
  v6 = v2[9];
  v31 = v2[8];
  v32 = v6;
  v7 = v2[11];
  v33 = v2[10];
  v34 = v7;
  v8 = v2[5];
  v27[4] = v2[4];
  v28 = v8;
  v9 = v2[7];
  v29 = v2[6];
  v30 = v9;
  v10 = v2[1];
  v27[0] = *v2;
  v27[1] = v10;
  v11 = v2[3];
  v27[2] = v2[2];
  v27[3] = v11;
  v12 = v28;
  v13 = static Alignment.center.getter(a1);
  v15 = v14;
  v16 = sub_1000BEDC4((uint64_t)v27, __src);
  v17 = static Alignment.center.getter(v16);
  _FrameLayout.init(width:height:alignment:)(&v22, v12, 0, *((_QWORD *)&v12 + 1), 0, v17, v18);
  v19 = v22;
  v20 = v24;
  v40 = v23;
  v39 = v25;
  *(_QWORD *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v15;
  memcpy((void *)(a2 + 16), __src, 0x1A0uLL);
  *(_QWORD *)(a2 + 432) = v19;
  *(_BYTE *)(a2 + 440) = v40;
  *(_QWORD *)(a2 + 448) = v20;
  *(_BYTE *)(a2 + 456) = v39;
  result = *(double *)&v26;
  *(_OWORD *)(a2 + 464) = v26;
  return result;
}

double sub_1000BF8C8@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  __double2 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double result;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;

  v3 = *(double *)v1;
  v4 = *(double *)(v1 + 8);
  v5 = *(double *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v8 = *(_QWORD *)(v1 + 32);
  v7 = *(_QWORD *)(v1 + 40);
  v9 = *(_QWORD *)(v1 + 48);
  v10 = *(_BYTE *)(v1 + 65);
  v11 = __sincos_stret(*(double *)v1);
  v12 = v10 & 1;
  v13 = swift_allocObject(&unk_1002ED120, 82, 7);
  *(double *)(v13 + 16) = v3;
  *(double *)(v13 + 24) = v4;
  *(double *)(v13 + 32) = v5;
  *(_QWORD *)(v13 + 40) = v6;
  *(_QWORD *)(v13 + 48) = v8;
  *(_QWORD *)(v13 + 56) = v7;
  *(_QWORD *)(v13 + 64) = v9;
  *(_QWORD *)(v13 + 72) = *(_QWORD *)(v1 + 56);
  *(_BYTE *)(v13 + 80) = *(_BYTE *)(v1 + 64);
  *(_BYTE *)(v13 + 81) = v10;
  v14 = static Alignment.center.getter(v13);
  v16 = ((_QWORD *(*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v25, v4 + v4 + v5, 0, v7, 0, v14, v15);
  v17 = v25;
  v18 = v26;
  v19 = v27;
  v20 = v28;
  v21 = v29;
  v22 = v30;
  v23 = static Animation.linear.getter(v16);
  *(_BYTE *)a1 = v12;
  *(_QWORD *)(a1 + 8) = sub_1000C2484;
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 24) = v17;
  *(_BYTE *)(a1 + 32) = v18;
  *(_QWORD *)(a1 + 40) = v19;
  *(_BYTE *)(a1 + 48) = v20;
  *(_QWORD *)(a1 + 56) = v21;
  *(_QWORD *)(a1 + 64) = v22;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = v9;
  *(double *)(a1 + 88) = v4;
  result = v11.__cosval * v4;
  *(double *)(a1 + 96) = v11.__cosval * v4;
  *(double *)(a1 + 104) = v11.__sinval * v4;
  *(_QWORD *)(a1 + 112) = v23;
  *(double *)(a1 + 120) = v11.__cosval * v4;
  *(double *)(a1 + 128) = v11.__sinval * v4;
  return result;
}

double sub_1000BFA24@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __n128 v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  double result;
  __int128 v33;
  uint64_t v34;
  double v35;
  double v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;

  v3 = sub_100003DB8(&qword_10031D9B0);
  *(double *)&v4 = COERCE_DOUBLE(swift_allocObject(v3, 48, 7));
  *(_OWORD *)(v4 + 16) = xmmword_10024DEE0;
  v6 = *(double *)v1;
  v5 = *(double *)(v1 + 8);
  v7 = *(_QWORD *)(v1 + 16);
  v8 = *(_QWORD *)(v1 + 24);
  v9 = *(_QWORD *)(v1 + 32);
  v10 = *(_DWORD *)(v1 + 40);
  v11 = *(_DWORD *)(v1 + 44);
  v12 = *(_QWORD *)(v1 + 48);
  v13 = *(_QWORD *)(v1 + 56);
  v14 = *(_QWORD *)(v1 + 64);
  v15 = *(_OWORD *)(v1 + 88);
  v40 = *(_OWORD *)(v1 + 72);
  v41 = v15;
  v42 = *(_OWORD *)(v1 + 104);
  v34 = *(_QWORD *)(v1 + 128);
  v35 = *(double *)(v1 + 120);
  *(_QWORD *)(v4 + 32) = v7;
  *(_QWORD *)(v4 + 40) = v8;
  v36 = *(double *)&v4;
  specialized Array._endMutation()(v4);
  swift_retain(v7);
  swift_retain(v8);
  v16 = Gradient.init(colors:)(*(_QWORD *)&v36);
  v18 = static UnitPoint.center.getter(v17);
  v20 = v19;
  v36 = v6;
  v21 = Angle.animatableData.getter(v5);
  v22 = Angle.animatableData.getter(v6);
  Angle.animatableData.setter(v21 + v22);
  AngularGradient.init(gradient:center:startAngle:endAngle:)(&v36, v16, v18, v20, v6, v6);
  v23 = v36;
  v33 = v37;
  v24 = v38;
  v25 = v39;
  sub_1000C2594((_QWORD *)v1);
  swift_bridgeObjectRetain(v13);
  v27 = static Alignment.center.getter(v26);
  v29 = v28;
  v30 = static Animation.linear.getter(v27);
  v31 = v41;
  *(_OWORD *)(a1 + 72) = v40;
  *(double *)a1 = v6;
  *(double *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 40) = v10;
  *(_DWORD *)(a1 + 44) = v11;
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v13;
  *(_QWORD *)(a1 + 64) = v14;
  *(_OWORD *)(a1 + 88) = v31;
  *(_OWORD *)(a1 + 104) = v42;
  result = v35;
  *(double *)(a1 + 120) = v35;
  *(_QWORD *)(a1 + 128) = v34;
  *(double *)(a1 + 136) = v5;
  *(_QWORD *)(a1 + 144) = v9;
  *(_DWORD *)(a1 + 152) = v10;
  *(_DWORD *)(a1 + 156) = v11;
  *(_QWORD *)(a1 + 160) = v12;
  *(_QWORD *)(a1 + 168) = v13;
  *(_QWORD *)(a1 + 176) = v14;
  *(double *)(a1 + 184) = v23;
  *(_OWORD *)(a1 + 192) = v33;
  *(_QWORD *)(a1 + 208) = v24;
  *(_QWORD *)(a1 + 216) = v25;
  *(_WORD *)(a1 + 224) = 256;
  *(_QWORD *)(a1 + 232) = v27;
  *(_QWORD *)(a1 + 240) = v29;
  *(_QWORD *)(a1 + 248) = 0;
  *(double *)(a1 + 256) = v35;
  *(_QWORD *)(a1 + 264) = v30;
  *(double *)(a1 + 272) = v5;
  return result;
}

double sub_1000BFC10@<D0>(uint64_t a1@<X8>)
{
  return sub_1000BFA24(a1);
}

double sub_1000BFC60@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  double result;
  __int128 v9;
  _OWORD v10[2];
  char v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;

  v4 = v2[7];
  v18 = v2[6];
  v19 = v4;
  v20 = v2[8];
  v5 = v2[3];
  v14 = v2[2];
  v15 = v5;
  v6 = v2[5];
  v16 = v2[4];
  v17 = v6;
  v7 = v2[1];
  v12 = *v2;
  v13 = v7;
  sub_1000C71F0(a1, (uint64_t)v10);
  result = *(double *)v10;
  v9 = v10[1];
  *(_OWORD *)a2 = v10[0];
  *(_OWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 32) = v11;
  return result;
}

void sub_1000BFCD0(double *a1@<X8>)
{
  uint64_t v1;

  *a1 = Angle.animatableData.getter(*(double *)(v1 + 136));
}

double sub_1000BFCF8(double *a1)
{
  double result;

  *(_QWORD *)&result = Angle.animatableData.setter(*a1).n128_u64[0];
  return result;
}

double (*sub_1000BFD1C(uint64_t a1))(double *a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 8) = v1;
  *(double *)a1 = Angle.animatableData.getter(*(double *)(v1 + 136));
  return sub_1000BFD54;
}

double sub_1000BFD54(double *a1)
{
  double result;

  *(_QWORD *)&result = Angle.animatableData.setter(*a1).n128_u64[0];
  return result;
}

uint64_t sub_1000BFD80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000C751C();
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000BFDD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000C751C();
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000BFE20(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000C751C();
  return Shape.body.getter(a1, v2);
}

uint64_t sub_1000BFE58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v2 = *(_QWORD *)(a1 + 88);
  v49 = *(_QWORD *)(a1 + 144);
  v50 = *(_QWORD *)(a1 + 136);
  v47 = *(_QWORD *)(a1 + 160);
  v48 = *(_QWORD *)(a1 + 152);
  v45 = *(_QWORD *)(a1 + 176);
  v46 = *(_QWORD *)(a1 + 168);
  v43 = *(_QWORD *)(a1 + 192);
  v44 = *(_QWORD *)(a1 + 184);
  v34 = *(_OWORD *)(a1 + 200);
  v32 = *(_OWORD *)(a1 + 216);
  v22 = *(_OWORD *)(a1 + 232);
  v20 = *(_OWORD *)(a1 + 248);
  v18 = *(_OWORD *)(a1 + 264);
  v17 = *(_OWORD *)(a1 + 280);
  v16 = *(_OWORD *)(a1 + 296);
  v14 = *(_OWORD *)(a1 + 328);
  v15 = *(_OWORD *)(a1 + 312);
  v12 = *(_OWORD *)(a1 + 360);
  v13 = *(_OWORD *)(a1 + 344);
  v10 = *(_OWORD *)(a1 + 392);
  v11 = *(_OWORD *)(a1 + 376);
  v8 = *(_OWORD *)(a1 + 424);
  v9 = *(_OWORD *)(a1 + 408);
  v30 = *(_QWORD *)(a1 + 472);
  v29 = *(_QWORD *)(a1 + 480);
  v28 = *(_QWORD *)(a1 + 488);
  v27 = *(_QWORD *)(a1 + 496);
  v26 = *(_QWORD *)(a1 + 504);
  v25 = *(_QWORD *)(a1 + 512);
  v24 = *(_QWORD *)(a1 + 520);
  v23 = *(_QWORD *)(a1 + 528);
  v3 = *(_QWORD *)(a1 + 536);
  v4 = *(_BYTE *)(a1 + 544);
  v5 = *(_BYTE *)(a1 + 545);
  v35 = *(_QWORD *)(a1 + 560);
  v6 = *(_QWORD *)(a1 + 608);
  v54 = *(_QWORD *)(a1 + 632);
  v55 = *(_QWORD *)(a1 + 624);
  v52 = *(_QWORD *)(a1 + 648);
  v53 = *(_QWORD *)(a1 + 640);
  v51 = *(_QWORD *)(a1 + 656);
  v41 = *(_OWORD *)(a1 + 704);
  v42 = *(_OWORD *)(a1 + 688);
  v38 = *(_OWORD *)(a1 + 720);
  v36 = *(_OWORD *)(a1 + 736);
  v33 = *(_OWORD *)(a1 + 752);
  v31 = *(_OWORD *)(a1 + 768);
  v21 = *(_OWORD *)(a1 + 784);
  v19 = *(_OWORD *)(a1 + 800);
  v37 = *(_QWORD *)(a1 + 664);
  v39 = *(_QWORD *)(a1 + 672);
  v40 = *(_QWORD *)(a1 + 680);
  swift_retain(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  sub_1000C0170(v50, v49, v48, v47, v46, v45, v44, v43, v34, *((uint64_t *)&v34 + 1), v32, *((uint64_t *)&v32 + 1), v22, *((uint64_t *)&v22 + 1), v20, *((uint64_t *)&v20 + 1), v18, *((uint64_t *)&v18 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v8);
  sub_1000C0340(v30, v29, v28, v27, v26, v25, v24, v23, v3, v4, v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v35);
  sub_1000C041C(v55, v54, v53, v52, v51, v37, v39, v40, v42, *((uint64_t *)&v42 + 1), v41, *((uint64_t *)&v41 + 1), v38, *((uint64_t *)&v38 + 1), v36, *((uint64_t *)&v36 + 1), v33, *((uint64_t *)&v33 + 1), v31,
    *((uint64_t *)&v31 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v19);
  return a1;
}

double sub_1000C0170(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  double result;

  if (a1)
  {
    swift_bridgeObjectRetain(a1);
    sub_1000C0264(a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25);
    swift_bridgeObjectRetain(a30);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a37).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000C0264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a3);
    swift_retain(a4);
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a6);
    swift_retain(a7);
    swift_bridgeObjectRetain(a8);
    swift_bridgeObjectRetain(a10);
    swift_bridgeObjectRetain(a11);
    swift_bridgeObjectRetain(a12);
    swift_retain(a13);
    swift_bridgeObjectRetain(a16);
    return swift_bridgeObjectRetain(a17);
  }
  return result;
}

double sub_1000C0340(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  double result;

  if ((a11 & 1) == 0)
    return sub_1000C03C8(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  swift_retain(a7);
  swift_retain(a9);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a5);
  *(_QWORD *)&result = swift_retain(a6).n128_u64[0];
  return result;
}

double sub_1000C03C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double result;

  swift_retain(a7);
  swift_retain(a9);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRetain(a5);
  *(_QWORD *)&result = swift_retain(a6).n128_u64[0];
  return result;
}

double sub_1000C041C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  double result;

  if (a7)
  {
    swift_retain(a8);
    swift_retain(a18);
    swift_retain(a19);
    swift_bridgeObjectRetain(a23);
    *(_QWORD *)&result = swift_retain(a7).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000C0474(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v2 = *(_QWORD *)(a1 + 16);
  v49 = *(_QWORD *)(a1 + 144);
  v50 = *(_QWORD *)(a1 + 136);
  v47 = *(_QWORD *)(a1 + 160);
  v48 = *(_QWORD *)(a1 + 152);
  v45 = *(_QWORD *)(a1 + 176);
  v46 = *(_QWORD *)(a1 + 168);
  v43 = *(_QWORD *)(a1 + 192);
  v44 = *(_QWORD *)(a1 + 184);
  v35 = *(_OWORD *)(a1 + 200);
  v32 = *(_OWORD *)(a1 + 216);
  v22 = *(_OWORD *)(a1 + 232);
  v20 = *(_OWORD *)(a1 + 248);
  v18 = *(_OWORD *)(a1 + 264);
  v17 = *(_OWORD *)(a1 + 280);
  v16 = *(_OWORD *)(a1 + 296);
  v14 = *(_OWORD *)(a1 + 328);
  v15 = *(_OWORD *)(a1 + 312);
  v12 = *(_OWORD *)(a1 + 360);
  v13 = *(_OWORD *)(a1 + 344);
  v10 = *(_OWORD *)(a1 + 392);
  v11 = *(_OWORD *)(a1 + 376);
  v8 = *(_OWORD *)(a1 + 424);
  v9 = *(_OWORD *)(a1 + 408);
  v30 = *(_QWORD *)(a1 + 472);
  v29 = *(_QWORD *)(a1 + 480);
  v28 = *(_QWORD *)(a1 + 488);
  v3 = *(_QWORD *)(a1 + 504);
  v27 = *(_QWORD *)(a1 + 496);
  v26 = *(_QWORD *)(a1 + 512);
  v25 = *(_QWORD *)(a1 + 520);
  v24 = *(_QWORD *)(a1 + 528);
  v4 = *(_QWORD *)(a1 + 536);
  v5 = *(_BYTE *)(a1 + 544);
  v6 = *(_BYTE *)(a1 + 545);
  v23 = *(_QWORD *)(a1 + 560);
  v34 = *(_QWORD *)(a1 + 608);
  v54 = *(_QWORD *)(a1 + 632);
  v55 = *(_QWORD *)(a1 + 624);
  v52 = *(_QWORD *)(a1 + 648);
  v53 = *(_QWORD *)(a1 + 640);
  v51 = *(_QWORD *)(a1 + 656);
  v41 = *(_OWORD *)(a1 + 704);
  v42 = *(_OWORD *)(a1 + 688);
  v38 = *(_OWORD *)(a1 + 720);
  v36 = *(_OWORD *)(a1 + 736);
  v33 = *(_OWORD *)(a1 + 752);
  v31 = *(_OWORD *)(a1 + 768);
  v21 = *(_OWORD *)(a1 + 784);
  v19 = *(_OWORD *)(a1 + 800);
  v37 = *(_QWORD *)(a1 + 664);
  v39 = *(_QWORD *)(a1 + 672);
  v40 = *(_QWORD *)(a1 + 680);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
  swift_release(v2);
  sub_1000C0788(v50, v49, v48, v47, v46, v45, v44, v43, v35, *((uint64_t *)&v35 + 1), v32, *((uint64_t *)&v32 + 1), v22, *((uint64_t *)&v22 + 1), v20, *((uint64_t *)&v20 + 1), v18, *((uint64_t *)&v18 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v8);
  sub_1000C0958(v30, v29, v28, v27, v3, v26, v25, v24, v4, v5, v6);
  swift_bridgeObjectRelease(v23);
  swift_release(v34);
  sub_1000C0A34(v55, v54, v53, v52, v51, v37, v39, v40, v42, *((uint64_t *)&v42 + 1), v41, *((uint64_t *)&v41 + 1), v38, *((uint64_t *)&v38 + 1), v36, *((uint64_t *)&v36 + 1), v33, *((uint64_t *)&v33 + 1), v31,
    *((uint64_t *)&v31 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v19);
  return a1;
}

double sub_1000C0788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  double result;

  if (a1)
  {
    swift_bridgeObjectRelease(a1);
    sub_1000C087C(a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25);
    swift_bridgeObjectRelease(a37);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a30).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000C087C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a3);
    swift_release(a4);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a6);
    swift_release(a7);
    swift_bridgeObjectRelease(a8);
    swift_bridgeObjectRelease(a10);
    swift_bridgeObjectRelease(a11);
    swift_bridgeObjectRelease(a12);
    swift_release(a13);
    swift_bridgeObjectRelease(a16);
    return swift_bridgeObjectRelease(a17);
  }
  return result;
}

uint64_t sub_1000C0958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  if ((a11 & 1) == 0)
    return sub_1000C09E0(a1, a2, a3, a4, a5, a6, a7, a8, a9);
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a5);
  swift_release(a6);
  swift_release(a9);
  return swift_release(a7);
}

uint64_t sub_1000C09E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  swift_bridgeObjectRelease(a3);
  swift_bridgeObjectRelease(a5);
  swift_release(a6);
  swift_release(a9);
  return swift_release(a7);
}

uint64_t sub_1000C0A34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t result;

  if (a7)
  {
    swift_release(a7);
    swift_release(a18);
    swift_release(a19);
    swift_bridgeObjectRelease(a23);
    return swift_release(a8);
  }
  return result;
}

uint64_t sub_1000C0A8C()
{
  return EnvironmentValues.layoutDirection.getter();
}

uint64_t sub_1000C0AB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v2 = *(_QWORD *)(a1 + 184);
  v50 = *(_QWORD *)(a1 + 232);
  v49 = *(_QWORD *)(a1 + 240);
  v48 = *(_QWORD *)(a1 + 248);
  v47 = *(_QWORD *)(a1 + 256);
  v46 = *(_QWORD *)(a1 + 264);
  v45 = *(_QWORD *)(a1 + 272);
  v44 = *(_QWORD *)(a1 + 280);
  v43 = *(_QWORD *)(a1 + 288);
  v34 = *(_OWORD *)(a1 + 296);
  v32 = *(_OWORD *)(a1 + 312);
  v22 = *(_OWORD *)(a1 + 328);
  v20 = *(_OWORD *)(a1 + 344);
  v18 = *(_OWORD *)(a1 + 360);
  v17 = *(_OWORD *)(a1 + 376);
  v16 = *(_OWORD *)(a1 + 392);
  v14 = *(_OWORD *)(a1 + 424);
  v15 = *(_OWORD *)(a1 + 408);
  v12 = *(_OWORD *)(a1 + 456);
  v13 = *(_OWORD *)(a1 + 440);
  v10 = *(_OWORD *)(a1 + 488);
  v11 = *(_OWORD *)(a1 + 472);
  v8 = *(_OWORD *)(a1 + 520);
  v9 = *(_OWORD *)(a1 + 504);
  v30 = *(_QWORD *)(a1 + 568);
  v29 = *(_QWORD *)(a1 + 576);
  v28 = *(_QWORD *)(a1 + 584);
  v27 = *(_QWORD *)(a1 + 592);
  v26 = *(_QWORD *)(a1 + 600);
  v25 = *(_QWORD *)(a1 + 608);
  v24 = *(_QWORD *)(a1 + 616);
  v23 = *(_QWORD *)(a1 + 624);
  v3 = *(_QWORD *)(a1 + 632);
  v4 = *(_BYTE *)(a1 + 640);
  v5 = *(_BYTE *)(a1 + 641);
  v35 = *(_QWORD *)(a1 + 656);
  v6 = *(_QWORD *)(a1 + 704);
  v54 = *(_QWORD *)(a1 + 728);
  v55 = *(_QWORD *)(a1 + 720);
  v52 = *(_QWORD *)(a1 + 744);
  v53 = *(_QWORD *)(a1 + 736);
  v51 = *(_QWORD *)(a1 + 752);
  v41 = *(_OWORD *)(a1 + 800);
  v42 = *(_OWORD *)(a1 + 784);
  v38 = *(_OWORD *)(a1 + 816);
  v36 = *(_OWORD *)(a1 + 832);
  v33 = *(_OWORD *)(a1 + 848);
  v31 = *(_OWORD *)(a1 + 864);
  v21 = *(_OWORD *)(a1 + 880);
  v19 = *(_OWORD *)(a1 + 896);
  v37 = *(_QWORD *)(a1 + 760);
  v39 = *(_QWORD *)(a1 + 768);
  v40 = *(_QWORD *)(a1 + 776);
  swift_retain(*(_QWORD *)(a1 + 112));
  swift_bridgeObjectRetain(v2);
  sub_1000C0170(v50, v49, v48, v47, v46, v45, v44, v43, v34, *((uint64_t *)&v34 + 1), v32, *((uint64_t *)&v32 + 1), v22, *((uint64_t *)&v22 + 1), v20, *((uint64_t *)&v20 + 1), v18, *((uint64_t *)&v18 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v8);
  sub_1000C0340(v30, v29, v28, v27, v26, v25, v24, v23, v3, v4, v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v35);
  sub_1000C041C(v55, v54, v53, v52, v51, v37, v39, v40, v42, *((uint64_t *)&v42 + 1), v41, *((uint64_t *)&v41 + 1), v38, *((uint64_t *)&v38 + 1), v36, *((uint64_t *)&v36 + 1), v33, *((uint64_t *)&v33 + 1), v31,
    *((uint64_t *)&v31 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v19);
  return a1;
}

uint64_t sub_1000C0DDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  char v6;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v2 = *(_QWORD *)(a1 + 112);
  v50 = *(_QWORD *)(a1 + 232);
  v49 = *(_QWORD *)(a1 + 240);
  v48 = *(_QWORD *)(a1 + 248);
  v47 = *(_QWORD *)(a1 + 256);
  v46 = *(_QWORD *)(a1 + 264);
  v45 = *(_QWORD *)(a1 + 272);
  v44 = *(_QWORD *)(a1 + 280);
  v43 = *(_QWORD *)(a1 + 288);
  v35 = *(_OWORD *)(a1 + 296);
  v32 = *(_OWORD *)(a1 + 312);
  v22 = *(_OWORD *)(a1 + 328);
  v20 = *(_OWORD *)(a1 + 344);
  v18 = *(_OWORD *)(a1 + 360);
  v17 = *(_OWORD *)(a1 + 376);
  v16 = *(_OWORD *)(a1 + 392);
  v14 = *(_OWORD *)(a1 + 424);
  v15 = *(_OWORD *)(a1 + 408);
  v12 = *(_OWORD *)(a1 + 456);
  v13 = *(_OWORD *)(a1 + 440);
  v10 = *(_OWORD *)(a1 + 488);
  v11 = *(_OWORD *)(a1 + 472);
  v8 = *(_OWORD *)(a1 + 520);
  v9 = *(_OWORD *)(a1 + 504);
  v30 = *(_QWORD *)(a1 + 568);
  v29 = *(_QWORD *)(a1 + 576);
  v28 = *(_QWORD *)(a1 + 584);
  v27 = *(_QWORD *)(a1 + 592);
  v3 = *(_QWORD *)(a1 + 600);
  v26 = *(_QWORD *)(a1 + 608);
  v25 = *(_QWORD *)(a1 + 616);
  v24 = *(_QWORD *)(a1 + 624);
  v4 = *(_QWORD *)(a1 + 632);
  v5 = *(_BYTE *)(a1 + 640);
  v6 = *(_BYTE *)(a1 + 641);
  v23 = *(_QWORD *)(a1 + 656);
  v34 = *(_QWORD *)(a1 + 704);
  v54 = *(_QWORD *)(a1 + 728);
  v55 = *(_QWORD *)(a1 + 720);
  v52 = *(_QWORD *)(a1 + 744);
  v53 = *(_QWORD *)(a1 + 736);
  v51 = *(_QWORD *)(a1 + 752);
  v41 = *(_OWORD *)(a1 + 800);
  v42 = *(_OWORD *)(a1 + 784);
  v38 = *(_OWORD *)(a1 + 816);
  v36 = *(_OWORD *)(a1 + 832);
  v33 = *(_OWORD *)(a1 + 848);
  v31 = *(_OWORD *)(a1 + 864);
  v21 = *(_OWORD *)(a1 + 880);
  v19 = *(_OWORD *)(a1 + 896);
  v37 = *(_QWORD *)(a1 + 760);
  v39 = *(_QWORD *)(a1 + 768);
  v40 = *(_QWORD *)(a1 + 776);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 184));
  swift_release(v2);
  sub_1000C0788(v50, v49, v48, v47, v46, v45, v44, v43, v35, *((uint64_t *)&v35 + 1), v32, *((uint64_t *)&v32 + 1), v22, *((uint64_t *)&v22 + 1), v20, *((uint64_t *)&v20 + 1), v18, *((uint64_t *)&v18 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v11,
    *((uint64_t *)&v11 + 1),
    v10,
    *((uint64_t *)&v10 + 1),
    v9,
    *((uint64_t *)&v9 + 1),
    v8);
  sub_1000C0958(v30, v29, v28, v27, v3, v26, v25, v24, v4, v5, v6);
  swift_bridgeObjectRelease(v23);
  swift_release(v34);
  sub_1000C0A34(v55, v54, v53, v52, v51, v37, v39, v40, v42, *((uint64_t *)&v42 + 1), v41, *((uint64_t *)&v41 + 1), v38, *((uint64_t *)&v38 + 1), v36, *((uint64_t *)&v36 + 1), v33, *((uint64_t *)&v33 + 1), v31,
    *((uint64_t *)&v31 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v19);
  return a1;
}

unint64_t sub_1000C1108()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031D7D0;
  if (!qword_10031D7D0)
  {
    v1 = sub_100007FAC(&qword_10031D7A8);
    sub_10002B614(&qword_10031D7D8, &qword_10031D7E0, (void (*)(void))sub_1000C11AC);
    sub_1000084FC(&qword_10031D808, &qword_10031A138, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031D7D0);
  }
  return result;
}

unint64_t sub_1000C11AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031D7E8;
  if (!qword_10031D7E8)
  {
    v1 = sub_100007FAC(&qword_10031D7F0);
    sub_1000084FC(&qword_10031D7F8, &qword_10031D800, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031D7E8);
  }
  return result;
}

uint64_t sub_1000C1230(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double sub_1000C1248(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  *(_OWORD *)((char *)a1 + 313) = 0u;
  return result;
}

double sub_1000C1280(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1000C12A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(a1 + 136);
  sub_1000C0340(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72), *(_BYTE *)(a1 + 73));
  swift_retain(v3);
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_1000C131C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  __int128 v4;

  v4 = *(_OWORD *)(a1 + 208);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v4,
    *((_QWORD *)&v4 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248));
  return a1;
}

uint64_t sub_1000C1398(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 88);
  v3 = *(_QWORD *)(a1 + 136);
  sub_1000C0958(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_BYTE *)(a1 + 72), *(_BYTE *)(a1 + 73));
  swift_bridgeObjectRelease(v2);
  swift_release(v3);
  return a1;
}

uint64_t sub_1000C140C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  char v9;

  v9 = *(_BYTE *)(a1 + 328);
  v7 = *(_OWORD *)(a1 + 288);
  v8 = *(_OWORD *)(a1 + 304);
  v5 = *(_OWORD *)(a1 + 256);
  v6 = *(_OWORD *)(a1 + 272);
  v4 = *(_OWORD *)(a1 + 224);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((_QWORD *)&v4 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    v7,
    *((_QWORD *)&v7 + 1),
    v8,
    *((_QWORD *)&v8 + 1),
    *(_QWORD *)(a1 + 320),
    v9);
  return a1;
}

uint64_t *sub_1000C14A0(uint64_t *a1)
{
  sub_1000C1510(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24]);
  return a1;
}

uint64_t sub_1000C1510(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (result)
  {
    swift_bridgeObjectRelease(result);
    return sub_1000C087C(a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for RadarMetrics.TargetMetrics(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 66))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 65);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RadarMetrics.TargetMetrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 66) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 66) = 0;
    if (a2)
      *(_BYTE *)(result + 65) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for TargetView()
{
  return &type metadata for TargetView;
}

uint64_t destroy for TicksView(_QWORD *a1)
{
  swift_release(a1[6]);
  swift_release(a1[7]);
  swift_release(a1[17]);
  swift_release(a1[18]);
  return swift_bridgeObjectRelease(a1[22]);
}

uint64_t initializeWithCopy for TicksView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v6 = *(_QWORD *)(a2 + 136);
  v7 = *(_QWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 136) = v6;
  *(_QWORD *)(a1 + 144) = v7;
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  v8 = *(_QWORD *)(a2 + 176);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  *(_QWORD *)(a1 + 176) = v8;
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v6);
  swift_retain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for TicksView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  swift_retain(v5);
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_retain(v8);
  swift_release(v7);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  v9 = *(_QWORD *)(a2 + 136);
  v10 = *(_QWORD *)(a1 + 136);
  *(_QWORD *)(a1 + 136) = v9;
  swift_retain(v9);
  swift_release(v10);
  v11 = *(_QWORD *)(a2 + 144);
  v12 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v11;
  swift_retain(v11);
  swift_release(v12);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  *(_DWORD *)(a1 + 164) = *(_DWORD *)(a2 + 164);
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v13 = *(_QWORD *)(a2 + 176);
  v14 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = v13;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRelease(v14);
  *(_QWORD *)(a1 + 184) = *(_QWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 216) = *(_QWORD *)(a2 + 216);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 240) = *(_QWORD *)(a2 + 240);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  return a1;
}

__n128 initializeWithTake for TicksView(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v13;
  *(__n128 *)(a1 + 192) = result;
  *(_OWORD *)(a1 + 208) = v12;
  return result;
}

uint64_t assignWithTake for TicksView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(*(_QWORD *)(a1 + 48));
  v4 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release(v4);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_release(*(_QWORD *)(a1 + 136));
  v6 = *(_QWORD *)(a1 + 144);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  swift_release(v6);
  v7 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a1 + 152) = *(_QWORD *)(a2 + 152);
  *(_QWORD *)(a1 + 160) = v7;
  *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
  v8 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = *(_QWORD *)(a2 + 176);
  swift_bridgeObjectRelease(v8);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  return a1;
}

uint64_t getEnumTagSinglePayload for TicksView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 256))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TicksView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 256) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 256) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TicksView()
{
  return &type metadata for TicksView;
}

uint64_t initializeWithCopy for RadarMetrics.TargetZoneMetrics(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  v5 = a2[9];
  swift_bridgeObjectRetain(v4);
  if (v5)
  {
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v5;
    v6 = a2[10];
    v7 = a2[11];
    *(_QWORD *)(a1 + 80) = v6;
    *(_QWORD *)(a1 + 88) = v7;
    v8 = a2[12];
    v9 = a2[13];
    *(_QWORD *)(a1 + 96) = v8;
    *(_QWORD *)(a1 + 104) = v9;
    v10 = a2[14];
    v11 = a2[15];
    *(_QWORD *)(a1 + 112) = v10;
    *(_QWORD *)(a1 + 120) = v11;
    *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
    v13 = a2[17];
    v12 = a2[18];
    *(_QWORD *)(a1 + 136) = v13;
    *(_QWORD *)(a1 + 144) = v12;
    v20 = v12;
    v21 = a2[19];
    v14 = a2[20];
    *(_QWORD *)(a1 + 152) = v21;
    *(_QWORD *)(a1 + 160) = v14;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    v22 = a2[23];
    v23 = v14;
    v24 = a2[24];
    *(_QWORD *)(a1 + 184) = v22;
    *(_QWORD *)(a1 + 192) = v24;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_retain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_retain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    swift_retain(v23);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v24);
  }
  else
  {
    v15 = *((_OWORD *)a2 + 11);
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 176) = v15;
    *(_QWORD *)(a1 + 192) = a2[24];
    v16 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v16;
    v17 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v17;
    v18 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v18;
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
  *(_QWORD *)(a1 + 216) = a2[27];
  return a1;
}

uint64_t *assignWithCopy for RadarMetrics.TargetZoneMetrics(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  v6 = a2[6];
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  a1[6] = v6;
  v7 = a1 + 8;
  v8 = a2 + 8;
  v9 = a1[9];
  v10 = a2[9];
  if (v9)
  {
    if (v10)
    {
      a1[8] = a2[8];
      v11 = a2[9];
      a1[9] = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v9);
      v12 = a2[10];
      v13 = a1[10];
      a1[10] = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v13);
      v14 = a2[11];
      v15 = a1[11];
      a1[11] = v14;
      swift_retain(v14);
      swift_release(v15);
      v16 = a2[12];
      v17 = a1[12];
      a1[12] = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v17);
      v18 = a2[13];
      v19 = a1[13];
      a1[13] = v18;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRelease(v19);
      v20 = a2[14];
      v21 = a1[14];
      a1[14] = v20;
      swift_retain(v20);
      swift_release(v21);
      v22 = a2[15];
      v23 = a1[15];
      a1[15] = v22;
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRelease(v23);
      *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
      v24 = a2[17];
      v25 = a1[17];
      a1[17] = v24;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRelease(v25);
      v26 = a2[18];
      v27 = a1[18];
      a1[18] = v26;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRelease(v27);
      v28 = a2[19];
      v29 = a1[19];
      a1[19] = v28;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRelease(v29);
      v30 = a2[20];
      v31 = a1[20];
      a1[20] = v30;
      swift_retain(v30);
      swift_release(v31);
      a1[21] = a2[21];
      a1[22] = a2[22];
      v32 = a2[23];
      v33 = a1[23];
      a1[23] = v32;
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRelease(v33);
      v34 = a2[24];
      v35 = a1[24];
      a1[24] = v34;
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRelease(v35);
    }
    else
    {
      sub_1000C208C(a1 + 8);
      *v7 = *v8;
      v45 = *((_OWORD *)a2 + 8);
      v47 = *((_OWORD *)a2 + 5);
      v46 = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 8) = v45;
      *((_OWORD *)a1 + 5) = v47;
      *((_OWORD *)a1 + 6) = v46;
      v49 = *((_OWORD *)a2 + 10);
      v48 = *((_OWORD *)a2 + 11);
      v50 = *((_OWORD *)a2 + 9);
      a1[24] = a2[24];
      *((_OWORD *)a1 + 10) = v49;
      *((_OWORD *)a1 + 11) = v48;
      *((_OWORD *)a1 + 9) = v50;
    }
  }
  else if (v10)
  {
    a1[8] = a2[8];
    v36 = a2[9];
    a1[9] = v36;
    v37 = a2[10];
    a1[10] = v37;
    v38 = a2[11];
    a1[11] = v38;
    v39 = a2[12];
    a1[12] = v39;
    v40 = a2[13];
    a1[13] = v40;
    v41 = a2[14];
    a1[14] = v41;
    v42 = a2[15];
    a1[15] = v42;
    *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
    v43 = a2[17];
    a1[17] = v43;
    v44 = a2[18];
    a1[18] = v44;
    v59 = a2[19];
    a1[19] = v59;
    v61 = a2[20];
    a1[20] = v61;
    a1[21] = a2[21];
    a1[22] = a2[22];
    v58 = a2[23];
    a1[23] = v58;
    v60 = a2[24];
    a1[24] = v60;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
    swift_retain(v38);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
    swift_retain(v41);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v59);
    swift_retain(v61);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v60);
  }
  else
  {
    *v7 = *v8;
    v51 = *((_OWORD *)a2 + 5);
    v52 = *((_OWORD *)a2 + 6);
    v53 = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
    *((_OWORD *)a1 + 8) = v53;
    *((_OWORD *)a1 + 5) = v51;
    *((_OWORD *)a1 + 6) = v52;
    v54 = *((_OWORD *)a2 + 9);
    v55 = *((_OWORD *)a2 + 10);
    v56 = *((_OWORD *)a2 + 11);
    a1[24] = a2[24];
    *((_OWORD *)a1 + 10) = v55;
    *((_OWORD *)a1 + 11) = v56;
    *((_OWORD *)a1 + 9) = v54;
  }
  a1[25] = a2[25];
  a1[26] = a2[26];
  a1[27] = a2[27];
  return a1;
}

_QWORD *sub_1000C208C(_QWORD *a1)
{
  destroy for RadarMetrics.WavesMetrics(a1);
  return a1;
}

__n128 initializeWithTake for RadarMetrics.TargetZoneMetrics(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  __int128 v10;
  __int128 v11;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  result = *(__n128 *)(a2 + 160);
  v10 = *(_OWORD *)(a2 + 176);
  v11 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v11;
  *(__n128 *)(a1 + 160) = result;
  *(_OWORD *)(a1 + 176) = v10;
  return result;
}

uint64_t *assignWithTake for RadarMetrics.TargetZoneMetrics(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  a1[6] = a2[6];
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  v5 = a1[9];
  if (!v5)
    goto LABEL_5;
  v6 = a2[9];
  if (!v6)
  {
    sub_1000C208C(a1 + 8);
LABEL_5:
    v19 = *((_OWORD *)a2 + 11);
    *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
    *((_OWORD *)a1 + 11) = v19;
    a1[24] = a2[24];
    v20 = *((_OWORD *)a2 + 7);
    *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
    *((_OWORD *)a1 + 7) = v20;
    v21 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v21;
    v22 = *((_OWORD *)a2 + 5);
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 5) = v22;
    goto LABEL_6;
  }
  a1[8] = a2[8];
  a1[9] = v6;
  swift_bridgeObjectRelease(v5);
  v7 = a1[10];
  a1[10] = a2[10];
  swift_bridgeObjectRelease(v7);
  v8 = a1[11];
  a1[11] = a2[11];
  swift_release(v8);
  v9 = a1[12];
  a1[12] = a2[12];
  swift_bridgeObjectRelease(v9);
  v10 = a1[13];
  a1[13] = a2[13];
  swift_bridgeObjectRelease(v10);
  v11 = a1[14];
  a1[14] = a2[14];
  swift_release(v11);
  v12 = a1[15];
  a1[15] = a2[15];
  swift_bridgeObjectRelease(v12);
  *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
  v13 = a1[17];
  a1[17] = a2[17];
  swift_bridgeObjectRelease(v13);
  v14 = a1[18];
  a1[18] = a2[18];
  swift_bridgeObjectRelease(v14);
  v15 = a1[19];
  a1[19] = a2[19];
  swift_bridgeObjectRelease(v15);
  v16 = a1[20];
  a1[20] = a2[20];
  swift_release(v16);
  *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
  v17 = a1[23];
  a1[23] = a2[23];
  swift_bridgeObjectRelease(v17);
  v18 = a1[24];
  a1[24] = a2[24];
  swift_bridgeObjectRelease(v18);
LABEL_6:
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  a1[27] = a2[27];
  return a1;
}

uint64_t getEnumTagSinglePayload for RadarMetrics.TargetZoneMetrics(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 224))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RadarMetrics.TargetZoneMetrics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 216) = 0;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 224) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 224) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TargetZone()
{
  return &type metadata for TargetZone;
}

unint64_t sub_1000C2370()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10031D838;
  if (!qword_10031D838)
  {
    v1 = sub_100007FAC(&qword_10031D7C0);
    v2[0] = sub_100007FAC(&qword_10031D7B0);
    v2[1] = sub_10002B614(&qword_10031D7C8, &qword_10031D7B0, (void (*)(void))sub_1000C1108);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.accessibilityElement(children:)>>, 1);
    sub_1000052EC(&qword_100316C10, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031D838);
  }
  return result;
}

uint64_t sub_1000C2444(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002990C0, 1);
}

uint64_t sub_1000C2454(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100299098, 1);
}

uint64_t sub_1000C2464(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100299070, 1);
}

uint64_t sub_1000C2474()
{
  uint64_t v0;

  return swift_deallocObject(v0, 82, 7);
}

uint64_t sub_1000C2484@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000CFC34(v1 + 16, a1);
}

unint64_t sub_1000C248C()
{
  unint64_t result;

  result = qword_10031D840;
  if (!qword_10031D840)
  {
    result = swift_getWitnessTable(&unk_10025390C, &type metadata for TicksView.RingTicks);
    atomic_store(result, (unint64_t *)&qword_10031D840);
  }
  return result;
}

unint64_t sub_1000C24D0()
{
  unint64_t result;

  result = qword_10031D848;
  if (!qword_10031D848)
  {
    result = swift_getWitnessTable(&unk_1002538BC, &type metadata for TicksView.DotTicks);
    atomic_store(result, (unint64_t *)&qword_10031D848);
  }
  return result;
}

double sub_1000C2514(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_1000C2530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  double result;

  swift_retain(a8);
  *(_QWORD *)&result = swift_retain(a7).n128_u64[0];
  return result;
}

double sub_1000C2558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  double result;

  if (a6)
  {
    swift_retain(a9);
    swift_bridgeObjectRetain(a6);
    *(_QWORD *)&result = swift_retain(a8).n128_u64[0];
  }
  return result;
}

_QWORD *sub_1000C2594(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[3];
  v3 = a1[7];
  swift_retain(a1[2]);
  swift_retain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *sub_1000C25DC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[2];
  v3 = a1[3];
  swift_bridgeObjectRelease(a1[7]);
  swift_release(v3);
  swift_release(v2);
  return a1;
}

_QWORD *sub_1000C2620(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19]);
  return a1;
}

uint64_t sub_1000C2684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;

  if (a6)
  {
    swift_bridgeObjectRelease(a6);
    swift_release(a8);
    return swift_release(a9);
  }
  return result;
}

uint64_t sub_1000C26C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  swift_release(a7);
  return swift_release(a8);
}

uint64_t sub_1000C26E8@<X0>(uint64_t a1@<X0>, void (*a2)(_QWORD *__return_ptr, char *)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[48];
  _BYTE v12[384];

  v6 = sub_100003DB8(qword_100316788);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  result = sub_100003DB8(&qword_10031DA08);
  if (*(_QWORD *)(*(_QWORD *)(result - 8) + 64) == v8)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
    a2(v11, (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(char *, uint64_t))(v7 + 8))((char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
    sub_10000B458((uint64_t)v11, (uint64_t)v12, &qword_10031D9C0);
    return sub_10000B458((uint64_t)v12, a3, &qword_10031D9C0);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000C27FC()
{
  uint64_t v0;

  return *(_BYTE *)(v0 + 56) & 1;
}

uint64_t sub_1000C280C()
{
  _QWORD *v0;
  uint64_t v1;

  swift_bridgeObjectRelease(v0[2]);
  v1 = v0[11];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[12]);
    swift_release(v0[13]);
    swift_bridgeObjectRelease(v0[14]);
    swift_bridgeObjectRelease(v0[15]);
    swift_release(v0[16]);
    swift_bridgeObjectRelease(v0[17]);
    swift_bridgeObjectRelease(v0[19]);
    swift_bridgeObjectRelease(v0[20]);
    swift_bridgeObjectRelease(v0[21]);
    swift_release(v0[22]);
    swift_bridgeObjectRelease(v0[25]);
    swift_bridgeObjectRelease(v0[26]);
  }
  return swift_deallocObject(v0, 240, 7);
}

uint64_t sub_1000C289C()
{
  uint64_t v0;

  return sub_1000BE7BC(v0 + 16);
}

uint64_t sub_1000C28A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 96);
  v7 = *(_QWORD *)(a1 + 104);
  v8 = *(_QWORD *)(a1 + 112);
  v9 = *(_QWORD *)(a1 + 120);
  v15 = *(_OWORD *)(a1 + 128);
  v13 = *(_OWORD *)(a1 + 160);
  v14 = *(_OWORD *)(a1 + 144);
  v12 = *(_OWORD *)(a1 + 176);
  v10 = *(_QWORD *)(a1 + 192);
  swift_bridgeObjectRetain(*(_QWORD *)a1);
  sub_1000C0264(v2, v3, v4, v5, v6, v7, v8, v9, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v10);
  return a1;
}

uint64_t sub_1000C2968(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

double sub_1000C2980(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 352) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

double sub_1000C29B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  double result;

  if (a1)
  {
    swift_bridgeObjectRetain(a1);
    sub_1000C0264(a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25);
    swift_bridgeObjectRetain(a30);
    swift_bridgeObjectRetain(a31);
    swift_retain(a32);
    swift_bridgeObjectRetain(a33);
    swift_bridgeObjectRetain(a34);
    swift_retain(a35);
    swift_bridgeObjectRetain(a36);
    swift_bridgeObjectRetain(a38);
    swift_bridgeObjectRetain(a39);
    swift_bridgeObjectRetain(a40);
    swift_retain(a41);
    swift_bridgeObjectRetain(a44);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a45).n128_u64[0];
  }
  return result;
}

uint64_t *sub_1000C2B4C(uint64_t *a1)
{
  sub_1000C0264(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16]);
  return a1;
}

uint64_t sub_1000C2BA4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v9 = *(_OWORD *)(a1 + 320);
  v10 = *(_OWORD *)(a1 + 336);
  v7 = *(_OWORD *)(a1 + 288);
  v8 = *(_OWORD *)(a1 + 304);
  v5 = *(_OWORD *)(a1 + 256);
  v6 = *(_OWORD *)(a1 + 272);
  v4 = *(_OWORD *)(a1 + 224);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((_QWORD *)&v4 + 1),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    v7,
    *((_QWORD *)&v7 + 1),
    v8,
    *((_QWORD *)&v8 + 1),
    v9,
    *((_QWORD *)&v9 + 1),
    v10,
    *((_QWORD *)&v10 + 1),
    *(_QWORD *)(a1 + 352));
  return a1;
}

double sub_1000C2C38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  double result;

  if (a1)
  {
    swift_bridgeObjectRelease(a1);
    sub_1000C087C(a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19, a20, a21, a22, a23, a24, a25);
    swift_bridgeObjectRelease(a45);
    swift_bridgeObjectRelease(a44);
    swift_release(a41);
    swift_bridgeObjectRelease(a40);
    swift_bridgeObjectRelease(a39);
    swift_bridgeObjectRelease(a38);
    swift_bridgeObjectRelease(a36);
    swift_release(a35);
    swift_bridgeObjectRelease(a34);
    swift_bridgeObjectRelease(a33);
    swift_release(a32);
    swift_bridgeObjectRelease(a31);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a30).n128_u64[0];
  }
  return result;
}

unint64_t sub_1000C2DCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031D870;
  if (!qword_10031D870)
  {
    v1 = sub_100007FAC(&qword_10031D868);
    sub_1000084FC(&qword_10031D878, &qword_10031D880, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031D870);
  }
  return result;
}

uint64_t sub_1000C2E50(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 72);
  v16 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v15 = *(_OWORD *)(a1 + 128);
  v13 = *(_OWORD *)(a1 + 160);
  v14 = *(_OWORD *)(a1 + 144);
  v12 = *(_OWORD *)(a1 + 176);
  v9 = *(_QWORD *)(a1 + 192);
  v10 = *(_QWORD *)(a1 + 232);
  swift_bridgeObjectRelease(*(_QWORD *)a1);
  sub_1000C087C(v16, v2, v3, v4, v5, v6, v7, v8, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t initializeWithCopy for RadarMetrics.NudgeMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  swift_retain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for RadarMetrics.NudgeMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_retain(v6);
  swift_release(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  return a1;
}

__n128 initializeWithTake for RadarMetrics.NudgeMetrics(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t assignWithTake for RadarMetrics.NudgeMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release(v4);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v6);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for RadarMetrics.NudgeMetrics(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RadarMetrics.NudgeMetrics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Nudge()
{
  return &type metadata for Nudge;
}

__n128 initializeWithTake for RadarMetrics.TicksMetrics(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_WORD *)(a1 + 112) = *((_WORD *)a2 + 56);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

ValueMetadata *type metadata accessor for TicksView.DotTicks()
{
  return &type metadata for TicksView.DotTicks;
}

uint64_t destroy for RadarMetrics.TicksMetrics(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 48));
  return swift_release(*(_QWORD *)(a1 + 56));
}

uint64_t initializeWithCopy for RadarMetrics.TicksMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v3 = *(_QWORD *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v3;
  *(_QWORD *)(a1 + 56) = v4;
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for RadarMetrics.TicksMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v5;
  swift_retain(v5);
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 56);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_retain(v8);
  swift_release(v7);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  return a1;
}

uint64_t assignWithTake for RadarMetrics.TicksMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(*(_QWORD *)(a1 + 48));
  v4 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release(v4);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_BYTE *)(a1 + 112) = *(_BYTE *)(a2 + 112);
  *(_BYTE *)(a1 + 113) = *(_BYTE *)(a2 + 113);
  return a1;
}

uint64_t getEnumTagSinglePayload for RadarMetrics.TicksMetrics(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 114))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RadarMetrics.TicksMetrics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 112) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 114) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 114) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TicksView.RingTicks()
{
  return &type metadata for TicksView.RingTicks;
}

uint64_t initializeWithCopy for WavesView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  v5 = a2[9];
  swift_bridgeObjectRetain(v4);
  if (v5)
  {
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v5;
    v6 = a2[10];
    v7 = a2[11];
    *(_QWORD *)(a1 + 80) = v6;
    *(_QWORD *)(a1 + 88) = v7;
    v8 = a2[12];
    v9 = a2[13];
    *(_QWORD *)(a1 + 96) = v8;
    *(_QWORD *)(a1 + 104) = v9;
    v10 = a2[14];
    v11 = a2[15];
    *(_QWORD *)(a1 + 112) = v10;
    *(_QWORD *)(a1 + 120) = v11;
    *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
    v13 = a2[17];
    v12 = a2[18];
    *(_QWORD *)(a1 + 136) = v13;
    *(_QWORD *)(a1 + 144) = v12;
    v32 = v12;
    v33 = a2[19];
    v14 = a2[20];
    *(_QWORD *)(a1 + 152) = v33;
    *(_QWORD *)(a1 + 160) = v14;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    v34 = a2[23];
    v36 = v14;
    v38 = a2[24];
    *(_QWORD *)(a1 + 184) = v34;
    *(_QWORD *)(a1 + 192) = v38;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_retain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_retain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v32);
    swift_bridgeObjectRetain(v33);
    swift_retain(v36);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v38);
  }
  else
  {
    v15 = *((_OWORD *)a2 + 11);
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 176) = v15;
    *(_QWORD *)(a1 + 192) = a2[24];
    v16 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v16;
    v17 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v17;
    v18 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v18;
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
  v19 = a2[29];
  v20 = a2[30];
  *(_QWORD *)(a1 + 232) = v19;
  *(_QWORD *)(a1 + 240) = v20;
  v21 = a2[31];
  v22 = a2[32];
  *(_QWORD *)(a1 + 248) = v21;
  *(_QWORD *)(a1 + 256) = v22;
  v23 = a2[33];
  v24 = a2[34];
  *(_QWORD *)(a1 + 264) = v23;
  *(_QWORD *)(a1 + 272) = v24;
  v25 = a2[35];
  *(_QWORD *)(a1 + 280) = v25;
  *(_BYTE *)(a1 + 288) = *((_BYTE *)a2 + 288);
  v26 = a2[37];
  v27 = a2[38];
  *(_QWORD *)(a1 + 296) = v26;
  *(_QWORD *)(a1 + 304) = v27;
  v37 = a2[39];
  v39 = a2[40];
  *(_QWORD *)(a1 + 312) = v37;
  *(_QWORD *)(a1 + 320) = v39;
  v28 = a2[42];
  *(_QWORD *)(a1 + 328) = a2[41];
  *(_QWORD *)(a1 + 336) = v28;
  v29 = a2[43];
  v30 = a2[44];
  v35 = v29;
  *(_QWORD *)(a1 + 344) = v29;
  *(_QWORD *)(a1 + 352) = v30;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_retain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_retain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v37);
  swift_retain(v39);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v30);
  return a1;
}

uint64_t *assignWithCopy for WavesView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  v6 = a2[6];
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  a1[6] = v6;
  v7 = a1 + 8;
  v8 = a2 + 8;
  v9 = a1[9];
  v10 = a2[9];
  if (v9)
  {
    if (v10)
    {
      a1[8] = a2[8];
      v11 = a2[9];
      a1[9] = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v9);
      v12 = a2[10];
      v13 = a1[10];
      a1[10] = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v13);
      v14 = a2[11];
      v15 = a1[11];
      a1[11] = v14;
      swift_retain(v14);
      swift_release(v15);
      v16 = a2[12];
      v17 = a1[12];
      a1[12] = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v17);
      v18 = a2[13];
      v19 = a1[13];
      a1[13] = v18;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRelease(v19);
      v20 = a2[14];
      v21 = a1[14];
      a1[14] = v20;
      swift_retain(v20);
      swift_release(v21);
      v22 = a2[15];
      v23 = a1[15];
      a1[15] = v22;
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRelease(v23);
      *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
      v24 = a2[17];
      v25 = a1[17];
      a1[17] = v24;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRelease(v25);
      v26 = a2[18];
      v27 = a1[18];
      a1[18] = v26;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRelease(v27);
      v28 = a2[19];
      v29 = a1[19];
      a1[19] = v28;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRelease(v29);
      v30 = a2[20];
      v31 = a1[20];
      a1[20] = v30;
      swift_retain(v30);
      swift_release(v31);
      a1[21] = a2[21];
      a1[22] = a2[22];
      v32 = a2[23];
      v33 = a1[23];
      a1[23] = v32;
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRelease(v33);
      v34 = a2[24];
      v35 = a1[24];
      a1[24] = v34;
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRelease(v35);
    }
    else
    {
      sub_1000C208C(a1 + 8);
      *v7 = *v8;
      v45 = *((_OWORD *)a2 + 8);
      v47 = *((_OWORD *)a2 + 5);
      v46 = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 8) = v45;
      *((_OWORD *)a1 + 5) = v47;
      *((_OWORD *)a1 + 6) = v46;
      v49 = *((_OWORD *)a2 + 10);
      v48 = *((_OWORD *)a2 + 11);
      v50 = *((_OWORD *)a2 + 9);
      a1[24] = a2[24];
      *((_OWORD *)a1 + 10) = v49;
      *((_OWORD *)a1 + 11) = v48;
      *((_OWORD *)a1 + 9) = v50;
    }
  }
  else if (v10)
  {
    a1[8] = a2[8];
    v36 = a2[9];
    a1[9] = v36;
    v37 = a2[10];
    a1[10] = v37;
    v38 = a2[11];
    a1[11] = v38;
    v39 = a2[12];
    a1[12] = v39;
    v40 = a2[13];
    a1[13] = v40;
    v41 = a2[14];
    a1[14] = v41;
    v42 = a2[15];
    a1[15] = v42;
    *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
    v43 = a2[17];
    a1[17] = v43;
    v44 = a2[18];
    a1[18] = v44;
    v87 = a2[19];
    a1[19] = v87;
    v89 = a2[20];
    a1[20] = v89;
    a1[21] = a2[21];
    a1[22] = a2[22];
    v86 = a2[23];
    a1[23] = v86;
    v88 = a2[24];
    a1[24] = v88;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
    swift_retain(v38);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
    swift_retain(v41);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v87);
    swift_retain(v89);
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRetain(v88);
  }
  else
  {
    *v7 = *v8;
    v51 = *((_OWORD *)a2 + 5);
    v52 = *((_OWORD *)a2 + 6);
    v53 = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
    *((_OWORD *)a1 + 8) = v53;
    *((_OWORD *)a1 + 5) = v51;
    *((_OWORD *)a1 + 6) = v52;
    v54 = *((_OWORD *)a2 + 9);
    v55 = *((_OWORD *)a2 + 10);
    v56 = *((_OWORD *)a2 + 11);
    a1[24] = a2[24];
    *((_OWORD *)a1 + 10) = v55;
    *((_OWORD *)a1 + 11) = v56;
    *((_OWORD *)a1 + 9) = v54;
  }
  a1[25] = a2[25];
  a1[26] = a2[26];
  a1[27] = a2[27];
  v58 = a2[28];
  v57 = a2 + 28;
  a1[28] = v58;
  v59 = v57[1];
  v60 = a1[29];
  a1[29] = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v60);
  v61 = v57[2];
  v62 = a1[30];
  a1[30] = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62);
  v63 = v57[3];
  v64 = a1[31];
  a1[31] = v63;
  swift_retain(v63);
  swift_release(v64);
  v65 = v57[4];
  v66 = a1[32];
  a1[32] = v65;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease(v66);
  v67 = v57[5];
  v68 = a1[33];
  a1[33] = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68);
  v69 = v57[6];
  v70 = a1[34];
  a1[34] = v69;
  swift_retain(v69);
  swift_release(v70);
  v71 = v57[7];
  v72 = a1[35];
  a1[35] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  *((_BYTE *)a1 + 288) = *((_BYTE *)v57 + 64);
  v73 = v57[9];
  v74 = a1[37];
  a1[37] = v73;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRelease(v74);
  v75 = v57[10];
  v76 = a1[38];
  a1[38] = v75;
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRelease(v76);
  v77 = v57[11];
  v78 = a1[39];
  a1[39] = v77;
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRelease(v78);
  v79 = v57[12];
  v80 = a1[40];
  a1[40] = v79;
  swift_retain(v79);
  swift_release(v80);
  a1[41] = v57[13];
  a1[42] = v57[14];
  v81 = v57[15];
  v82 = a1[43];
  a1[43] = v81;
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRelease(v82);
  v83 = v57[16];
  v84 = a1[44];
  a1[44] = v83;
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRelease(v84);
  return a1;
}

void *initializeWithTake for WavesView(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x168uLL);
}

uint64_t *assignWithTake for WavesView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  a1[6] = a2[6];
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  v5 = a1[9];
  if (!v5)
    goto LABEL_5;
  v6 = a2[9];
  if (!v6)
  {
    sub_1000C208C(a1 + 8);
LABEL_5:
    v19 = *((_OWORD *)a2 + 11);
    *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
    *((_OWORD *)a1 + 11) = v19;
    a1[24] = a2[24];
    v20 = *((_OWORD *)a2 + 7);
    *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
    *((_OWORD *)a1 + 7) = v20;
    v21 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v21;
    v22 = *((_OWORD *)a2 + 5);
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 5) = v22;
    goto LABEL_6;
  }
  a1[8] = a2[8];
  a1[9] = v6;
  swift_bridgeObjectRelease(v5);
  v7 = a1[10];
  a1[10] = a2[10];
  swift_bridgeObjectRelease(v7);
  v8 = a1[11];
  a1[11] = a2[11];
  swift_release(v8);
  v9 = a1[12];
  a1[12] = a2[12];
  swift_bridgeObjectRelease(v9);
  v10 = a1[13];
  a1[13] = a2[13];
  swift_bridgeObjectRelease(v10);
  v11 = a1[14];
  a1[14] = a2[14];
  swift_release(v11);
  v12 = a1[15];
  a1[15] = a2[15];
  swift_bridgeObjectRelease(v12);
  *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
  v13 = a1[17];
  a1[17] = a2[17];
  swift_bridgeObjectRelease(v13);
  v14 = a1[18];
  a1[18] = a2[18];
  swift_bridgeObjectRelease(v14);
  v15 = a1[19];
  a1[19] = a2[19];
  swift_bridgeObjectRelease(v15);
  v16 = a1[20];
  a1[20] = a2[20];
  swift_release(v16);
  *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
  v17 = a1[23];
  a1[23] = a2[23];
  swift_bridgeObjectRelease(v17);
  v18 = a1[24];
  a1[24] = a2[24];
  swift_bridgeObjectRelease(v18);
LABEL_6:
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 27) = *(_OWORD *)(a2 + 27);
  v23 = a1[29];
  a1[29] = a2[29];
  swift_bridgeObjectRelease(v23);
  v24 = a1[30];
  a1[30] = a2[30];
  swift_bridgeObjectRelease(v24);
  v25 = a1[31];
  a1[31] = a2[31];
  swift_release(v25);
  v26 = a1[32];
  a1[32] = a2[32];
  swift_bridgeObjectRelease(v26);
  v27 = a1[33];
  a1[33] = a2[33];
  swift_bridgeObjectRelease(v27);
  v28 = a1[34];
  a1[34] = a2[34];
  swift_release(v28);
  v29 = a1[35];
  a1[35] = a2[35];
  swift_bridgeObjectRelease(v29);
  *((_BYTE *)a1 + 288) = *((_BYTE *)a2 + 288);
  v30 = a1[37];
  a1[37] = a2[37];
  swift_bridgeObjectRelease(v30);
  v31 = a1[38];
  a1[38] = a2[38];
  swift_bridgeObjectRelease(v31);
  v32 = a1[39];
  a1[39] = a2[39];
  swift_bridgeObjectRelease(v32);
  v33 = a1[40];
  a1[40] = a2[40];
  swift_release(v33);
  v34 = a2[42];
  a1[41] = a2[41];
  a1[42] = v34;
  v35 = a1[43];
  a1[43] = a2[43];
  swift_bridgeObjectRelease(v35);
  v36 = a1[44];
  a1[44] = a2[44];
  swift_bridgeObjectRelease(v36);
  return a1;
}

uint64_t getEnumTagSinglePayload for WavesView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 360))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WavesView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 360) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 360) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WavesView()
{
  return &type metadata for WavesView;
}

uint64_t destroy for RadarMetrics.TargetZoneMetrics(_QWORD *a1)
{
  uint64_t result;

  swift_bridgeObjectRelease(*a1);
  result = a1[9];
  if (result)
  {
    swift_bridgeObjectRelease(result);
    swift_bridgeObjectRelease(a1[10]);
    swift_release(a1[11]);
    swift_bridgeObjectRelease(a1[12]);
    swift_bridgeObjectRelease(a1[13]);
    swift_release(a1[14]);
    swift_bridgeObjectRelease(a1[15]);
    swift_bridgeObjectRelease(a1[17]);
    swift_bridgeObjectRelease(a1[18]);
    swift_bridgeObjectRelease(a1[19]);
    swift_release(a1[20]);
    swift_bridgeObjectRelease(a1[23]);
    return swift_bridgeObjectRelease(a1[24]);
  }
  return result;
}

uint64_t initializeWithCopy for TargetZone.Wedge(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  v5 = a2[9];
  swift_bridgeObjectRetain(v4);
  if (v5)
  {
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v5;
    v6 = a2[10];
    v7 = a2[11];
    *(_QWORD *)(a1 + 80) = v6;
    *(_QWORD *)(a1 + 88) = v7;
    v8 = a2[12];
    v9 = a2[13];
    *(_QWORD *)(a1 + 96) = v8;
    *(_QWORD *)(a1 + 104) = v9;
    v10 = a2[14];
    v11 = a2[15];
    *(_QWORD *)(a1 + 112) = v10;
    *(_QWORD *)(a1 + 120) = v11;
    *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
    v13 = a2[17];
    v12 = a2[18];
    *(_QWORD *)(a1 + 136) = v13;
    *(_QWORD *)(a1 + 144) = v12;
    v20 = v12;
    v21 = a2[19];
    v14 = a2[20];
    *(_QWORD *)(a1 + 152) = v21;
    *(_QWORD *)(a1 + 160) = v14;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    v22 = a2[23];
    v23 = v14;
    v24 = a2[24];
    *(_QWORD *)(a1 + 184) = v22;
    *(_QWORD *)(a1 + 192) = v24;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_retain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_retain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRetain(v21);
    swift_retain(v23);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v24);
  }
  else
  {
    v15 = *((_OWORD *)a2 + 11);
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 176) = v15;
    *(_QWORD *)(a1 + 192) = a2[24];
    v16 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v16;
    v17 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v17;
    v18 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v18;
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
  return a1;
}

uint64_t *assignWithCopy for TargetZone.Wedge(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  v6 = a2[6];
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  a1[6] = v6;
  v7 = a1 + 8;
  v8 = a2 + 8;
  v9 = a1[9];
  v10 = a2[9];
  if (v9)
  {
    if (v10)
    {
      a1[8] = a2[8];
      v11 = a2[9];
      a1[9] = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v9);
      v12 = a2[10];
      v13 = a1[10];
      a1[10] = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v13);
      v14 = a2[11];
      v15 = a1[11];
      a1[11] = v14;
      swift_retain(v14);
      swift_release(v15);
      v16 = a2[12];
      v17 = a1[12];
      a1[12] = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v17);
      v18 = a2[13];
      v19 = a1[13];
      a1[13] = v18;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRelease(v19);
      v20 = a2[14];
      v21 = a1[14];
      a1[14] = v20;
      swift_retain(v20);
      swift_release(v21);
      v22 = a2[15];
      v23 = a1[15];
      a1[15] = v22;
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRelease(v23);
      *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
      v24 = a2[17];
      v25 = a1[17];
      a1[17] = v24;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRelease(v25);
      v26 = a2[18];
      v27 = a1[18];
      a1[18] = v26;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRelease(v27);
      v28 = a2[19];
      v29 = a1[19];
      a1[19] = v28;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRelease(v29);
      v30 = a2[20];
      v31 = a1[20];
      a1[20] = v30;
      swift_retain(v30);
      swift_release(v31);
      a1[21] = a2[21];
      a1[22] = a2[22];
      v32 = a2[23];
      v33 = a1[23];
      a1[23] = v32;
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRelease(v33);
      v34 = a2[24];
      v35 = a1[24];
      a1[24] = v34;
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRelease(v35);
    }
    else
    {
      sub_1000C208C(a1 + 8);
      *v7 = *v8;
      v45 = *((_OWORD *)a2 + 8);
      v47 = *((_OWORD *)a2 + 5);
      v46 = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 8) = v45;
      *((_OWORD *)a1 + 5) = v47;
      *((_OWORD *)a1 + 6) = v46;
      v49 = *((_OWORD *)a2 + 10);
      v48 = *((_OWORD *)a2 + 11);
      v50 = *((_OWORD *)a2 + 9);
      a1[24] = a2[24];
      *((_OWORD *)a1 + 10) = v49;
      *((_OWORD *)a1 + 11) = v48;
      *((_OWORD *)a1 + 9) = v50;
    }
  }
  else if (v10)
  {
    a1[8] = a2[8];
    v36 = a2[9];
    a1[9] = v36;
    v37 = a2[10];
    a1[10] = v37;
    v38 = a2[11];
    a1[11] = v38;
    v39 = a2[12];
    a1[12] = v39;
    v40 = a2[13];
    a1[13] = v40;
    v41 = a2[14];
    a1[14] = v41;
    v42 = a2[15];
    a1[15] = v42;
    *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
    v43 = a2[17];
    a1[17] = v43;
    v44 = a2[18];
    a1[18] = v44;
    v59 = a2[19];
    a1[19] = v59;
    v61 = a2[20];
    a1[20] = v61;
    a1[21] = a2[21];
    a1[22] = a2[22];
    v58 = a2[23];
    a1[23] = v58;
    v60 = a2[24];
    a1[24] = v60;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
    swift_retain(v38);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
    swift_retain(v41);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v59);
    swift_retain(v61);
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v60);
  }
  else
  {
    *v7 = *v8;
    v51 = *((_OWORD *)a2 + 5);
    v52 = *((_OWORD *)a2 + 6);
    v53 = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
    *((_OWORD *)a1 + 8) = v53;
    *((_OWORD *)a1 + 5) = v51;
    *((_OWORD *)a1 + 6) = v52;
    v54 = *((_OWORD *)a2 + 9);
    v55 = *((_OWORD *)a2 + 10);
    v56 = *((_OWORD *)a2 + 11);
    a1[24] = a2[24];
    *((_OWORD *)a1 + 10) = v55;
    *((_OWORD *)a1 + 11) = v56;
    *((_OWORD *)a1 + 9) = v54;
  }
  a1[25] = a2[25];
  a1[26] = a2[26];
  a1[27] = a2[27];
  a1[28] = a2[28];
  return a1;
}

__n128 initializeWithTake for TargetZone.Wedge(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __n128 result;
  __int128 v11;
  __int128 v12;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  v7 = a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  result = (__n128)a2[11];
  v11 = a2[12];
  v12 = a2[13];
  *(_QWORD *)(a1 + 224) = *((_QWORD *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t *assignWithTake for TargetZone.Wedge(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  a1[6] = a2[6];
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  v5 = a1[9];
  if (!v5)
    goto LABEL_5;
  v6 = a2[9];
  if (!v6)
  {
    sub_1000C208C(a1 + 8);
LABEL_5:
    v19 = *((_OWORD *)a2 + 11);
    *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
    *((_OWORD *)a1 + 11) = v19;
    a1[24] = a2[24];
    v20 = *((_OWORD *)a2 + 7);
    *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
    *((_OWORD *)a1 + 7) = v20;
    v21 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v21;
    v22 = *((_OWORD *)a2 + 5);
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 5) = v22;
    goto LABEL_6;
  }
  a1[8] = a2[8];
  a1[9] = v6;
  swift_bridgeObjectRelease(v5);
  v7 = a1[10];
  a1[10] = a2[10];
  swift_bridgeObjectRelease(v7);
  v8 = a1[11];
  a1[11] = a2[11];
  swift_release(v8);
  v9 = a1[12];
  a1[12] = a2[12];
  swift_bridgeObjectRelease(v9);
  v10 = a1[13];
  a1[13] = a2[13];
  swift_bridgeObjectRelease(v10);
  v11 = a1[14];
  a1[14] = a2[14];
  swift_release(v11);
  v12 = a1[15];
  a1[15] = a2[15];
  swift_bridgeObjectRelease(v12);
  *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
  v13 = a1[17];
  a1[17] = a2[17];
  swift_bridgeObjectRelease(v13);
  v14 = a1[18];
  a1[18] = a2[18];
  swift_bridgeObjectRelease(v14);
  v15 = a1[19];
  a1[19] = a2[19];
  swift_bridgeObjectRelease(v15);
  v16 = a1[20];
  a1[20] = a2[20];
  swift_release(v16);
  *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
  v17 = a1[23];
  a1[23] = a2[23];
  swift_bridgeObjectRelease(v17);
  v18 = a1[24];
  a1[24] = a2[24];
  swift_bridgeObjectRelease(v18);
LABEL_6:
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 27) = *(_OWORD *)(a2 + 27);
  return a1;
}

uint64_t getEnumTagSinglePayload for TargetZone.Wedge(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 232))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TargetZone.Wedge(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 232) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 232) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TargetZone.Wedge()
{
  return &type metadata for TargetZone.Wedge;
}

unint64_t sub_1000C481C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031D888;
  if (!qword_10031D888)
  {
    v1 = sub_100007FAC(&qword_10031D890);
    sub_1000C48B8(&qword_10031D898, &qword_10031D8A0, (void (*)(void))sub_1000C4924);
    sub_1000084FC(&qword_10031D8E0, &qword_10031D8E8, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031D888);
  }
  return result;
}

uint64_t sub_1000C48B8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007FAC(a2);
    a3();
    sub_1000C49CC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000C4924()
{
  return sub_10002B614(&qword_10031D8A8, &qword_10031D8B0, (void (*)(void))sub_1000C4948);
}

unint64_t sub_1000C4948()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031D8B8;
  if (!qword_10031D8B8)
  {
    v1 = sub_100007FAC(&qword_10031D8C0);
    sub_1000084FC(&qword_10031D8C8, &qword_10031D8D0, (uint64_t)&unk_1002545A8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031D8B8);
  }
  return result;
}

unint64_t sub_1000C49CC()
{
  unint64_t result;

  result = qword_10031D8D8;
  if (!qword_10031D8D8)
  {
    result = swift_getWitnessTable(&unk_1002545F8, &type metadata for RadarMetrics.TickCircleEffect);
    atomic_store(result, (unint64_t *)&qword_10031D8D8);
  }
  return result;
}

unint64_t sub_1000C4A14()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031D8F0;
  if (!qword_10031D8F0)
  {
    v1 = sub_100007FAC(&qword_10031D8F8);
    sub_1000084FC(&qword_10031D900, &qword_10031D908, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031D8F0);
  }
  return result;
}

uint64_t sub_1000C4A98()
{
  return sub_1000084FC(&qword_10031D910, &qword_10031D918, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

uint64_t sub_1000C4AC4()
{
  return sub_1000084FC(&qword_10031D920, &qword_10031D928, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
}

unint64_t sub_1000C4AF4()
{
  unint64_t result;

  result = qword_10031D930;
  if (!qword_10031D930)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for EmptyAnimatableData, &type metadata for EmptyAnimatableData);
    atomic_store(result, (unint64_t *)&qword_10031D930);
  }
  return result;
}

unint64_t sub_1000C4B3C()
{
  unint64_t result;

  result = qword_10031D938;
  if (!qword_10031D938)
  {
    result = swift_getWitnessTable(&unk_10025377C, &type metadata for TargetZone.Wedge);
    atomic_store(result, (unint64_t *)&qword_10031D938);
  }
  return result;
}

unint64_t sub_1000C4B84()
{
  unint64_t result;

  result = qword_10031D940;
  if (!qword_10031D940)
  {
    result = swift_getWitnessTable(&unk_10025372C, &type metadata for TargetZone.Wedge);
    atomic_store(result, (unint64_t *)&qword_10031D940);
  }
  return result;
}

uint64_t sub_1000C4BC8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002991BC, 1);
}

uint64_t sub_1000C4BD8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100299194, 1);
}

uint64_t sub_1000C4BE8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029916C, 1);
}

uint64_t sub_1000C4BF8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100299144, 1);
}

uint64_t sub_1000C4C08()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 80));
  return swift_deallocObject(v0, 138, 7);
}

uint64_t *sub_1000C4C34@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000BF644(a1, v2 + 24, a2, *(double *)(v2 + 16));
}

uint64_t sub_1000C4C40(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 48);
  swift_retain(*(_QWORD *)(a1 + 56));
  swift_retain(v2);
  return a1;
}

unint64_t sub_1000C4C70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031D958;
  if (!qword_10031D958)
  {
    v1 = sub_100007FAC(&qword_10031D948);
    sub_1000C4CDC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> Range<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10031D958);
  }
  return result;
}

unint64_t sub_1000C4CDC()
{
  unint64_t result;

  result = qword_10031D960;
  if (!qword_10031D960)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Int, &type metadata for Int);
    atomic_store(result, (unint64_t *)&qword_10031D960);
  }
  return result;
}

unint64_t sub_1000C4D20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031D968;
  if (!qword_10031D968)
  {
    v1 = sub_100007FAC(&qword_10031D950);
    sub_1000C48B8(&qword_10031D970, &qword_10031D978, (void (*)(void))sub_1000C4DBC);
    sub_1000084FC(&qword_10031D8E0, &qword_10031D8E8, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031D968);
  }
  return result;
}

uint64_t sub_1000C4DBC()
{
  return sub_10002B614(&qword_10031D980, &qword_10031D988, (void (*)(void))sub_1000C4DE0);
}

unint64_t sub_1000C4DE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031D990;
  if (!qword_10031D990)
  {
    v1 = sub_100007FAC(&qword_10031D998);
    sub_1000084FC(&qword_10031D9A0, &qword_10031D9A8, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031D990);
  }
  return result;
}

uint64_t sub_1000C4E64()
{
  _QWORD *v0;
  uint64_t v1;

  swift_bridgeObjectRelease(v0[2]);
  v1 = v0[11];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[12]);
    swift_release(v0[13]);
    swift_bridgeObjectRelease(v0[14]);
    swift_bridgeObjectRelease(v0[15]);
    swift_release(v0[16]);
    swift_bridgeObjectRelease(v0[17]);
    swift_bridgeObjectRelease(v0[19]);
    swift_bridgeObjectRelease(v0[20]);
    swift_bridgeObjectRelease(v0[21]);
    swift_release(v0[22]);
    swift_bridgeObjectRelease(v0[25]);
    swift_bridgeObjectRelease(v0[26]);
  }
  swift_bridgeObjectRelease(v0[31]);
  swift_bridgeObjectRelease(v0[32]);
  swift_release(v0[33]);
  swift_bridgeObjectRelease(v0[34]);
  swift_bridgeObjectRelease(v0[35]);
  swift_release(v0[36]);
  swift_bridgeObjectRelease(v0[37]);
  swift_bridgeObjectRelease(v0[39]);
  swift_bridgeObjectRelease(v0[40]);
  swift_bridgeObjectRelease(v0[41]);
  swift_release(v0[42]);
  swift_bridgeObjectRelease(v0[45]);
  swift_bridgeObjectRelease(v0[46]);
  return swift_deallocObject(v0, 376, 7);
}

uint64_t sub_1000C4F5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000BD574((__int128 *)(v1 + 16), a1);
}

uint64_t sub_1000C4F64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000C4F88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000C26E8(a1, *(void (**)(_QWORD *__return_ptr, char *))(v2 + 16), a2);
}

uint64_t sub_1000C4F90(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = *(_QWORD *)(a1 + 64);
  v3 = *(_QWORD *)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 88);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v14 = *(_OWORD *)(a1 + 144);
  v15 = *(_OWORD *)(a1 + 128);
  v12 = *(_OWORD *)(a1 + 176);
  v13 = *(_OWORD *)(a1 + 160);
  v9 = *(_QWORD *)(a1 + 192);
  v10 = *(_QWORD *)(a1 + 232);
  v16 = *(_QWORD *)(a1 + 96);
  v17 = *(_QWORD *)(a1 + 240);
  v18 = *(_QWORD *)(a1 + 248);
  v19 = *(_QWORD *)(a1 + 256);
  v20 = *(_QWORD *)(a1 + 264);
  v21 = *(_QWORD *)(a1 + 272);
  v22 = *(_QWORD *)(a1 + 280);
  v23 = *(_QWORD *)(a1 + 296);
  v24 = *(_QWORD *)(a1 + 304);
  v25 = *(_QWORD *)(a1 + 312);
  v26 = *(_QWORD *)(a1 + 320);
  v27 = *(_QWORD *)(a1 + 344);
  v28 = *(_QWORD *)(a1 + 352);
  swift_bridgeObjectRetain(*(_QWORD *)a1);
  sub_1000C0264(v2, v3, v4, v5, v16, v6, v7, v8, v15, *((uint64_t *)&v15 + 1), v14, *((uint64_t *)&v14 + 1), v13, *((uint64_t *)&v13 + 1), v12, *((uint64_t *)&v12 + 1), v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v17);
  swift_retain(v18);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_retain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRetain(v25);
  swift_retain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v28);
  return a1;
}

uint64_t sub_1000C5100()
{
  return sub_10003418C(&qword_10031D9C8, &qword_10031D9C0, (void (*)(void))sub_1000C5124, (uint64_t)&protocol conformance descriptor for <A> A?);
}

unint64_t sub_1000C5124()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031D9D0;
  if (!qword_10031D9D0)
  {
    v1 = sub_100007FAC(&qword_10031D9D8);
    sub_1000C51B0();
    sub_10003418C(&qword_10031D9E8, &qword_10031D9F0, (void (*)(void))sub_1000C51F4, (uint64_t)&protocol conformance descriptor for <A> A?);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031D9D0);
  }
  return result;
}

unint64_t sub_1000C51B0()
{
  unint64_t result;

  result = qword_10031D9E0;
  if (!qword_10031D9E0)
  {
    result = swift_getWitnessTable(&unk_100253AE8, &type metadata for WavesView.UpSignalView);
    atomic_store(result, (unint64_t *)&qword_10031D9E0);
  }
  return result;
}

unint64_t sub_1000C51F4()
{
  unint64_t result;

  result = qword_10031D9F8;
  if (!qword_10031D9F8)
  {
    result = swift_getWitnessTable(&unk_100253A98, &type metadata for WavesView.DownSignalView);
    atomic_store(result, (unint64_t *)&qword_10031D9F8);
  }
  return result;
}

double sub_1000C5238(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 368) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 376) = -1;
  return result;
}

_QWORD *sub_1000C527C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[9];
  v9 = a1[10];
  v10 = a1[11];
  v12 = a1[12];
  v13 = a1[15];
  v14 = a1[16];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t sub_1000C5350(uint64_t result)
{
  *(_BYTE *)(result + 376) = 1;
  return result;
}

uint64_t sub_1000C535C(long double a1, long double a2, double a3)
{
  double v6;
  uint64_t result;
  double v8;
  double v9;

  v6 = a1 - remainder(a1, a2) - a2 * 0.5;
  if ((byte_10031D7A0 & 1) == 0 && *(double *)&qword_10031D790 == v6)
    return qword_10031D798;
  if (a2 * 0.5 + a2 * 0.125 < a1 - v6)
    return 0;
  v8 = Angle.animatableData.getter(3.14159265);
  v9 = Angle.animatableData.getter(a3);
  Angle.animatableData.setter(v8 + v9);
  result = *(_QWORD *)&a3;
  qword_10031D790 = *(_QWORD *)&v6;
  qword_10031D798 = *(_QWORD *)&a3;
  byte_10031D7A0 = 0;
  return result;
}

double sub_1000C5434(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 368) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1000C5470(uint64_t result)
{
  *(_BYTE *)(result + 376) = 0;
  return result;
}

unint64_t sub_1000C5478()
{
  unint64_t result;

  result = qword_10031DA18;
  if (!qword_10031DA18)
  {
    result = swift_getWitnessTable(&unk_1002537CC, &type metadata for TargetZone.Wedge);
    atomic_store(result, (unint64_t *)&qword_10031DA18);
  }
  return result;
}

uint64_t destroy for RadarMetrics.NudgeMetrics(_QWORD *a1)
{
  swift_release(a1[2]);
  swift_release(a1[3]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for ArrowShape(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v5 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  swift_retain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for ArrowShape(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_retain(v6);
  swift_release(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  return a1;
}

uint64_t assignWithTake for ArrowShape(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release(v4);
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v6 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v6);
  v7 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v7;
  v8 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v8;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArrowShape(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ArrowShape(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ArrowShape()
{
  return &type metadata for ArrowShape;
}

uint64_t initializeWithCopy for WavesView.DownSignalView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  v5 = a2[9];
  swift_bridgeObjectRetain(v4);
  if (v5)
  {
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v5;
    v6 = a2[10];
    v7 = a2[11];
    *(_QWORD *)(a1 + 80) = v6;
    *(_QWORD *)(a1 + 88) = v7;
    v8 = a2[12];
    v9 = a2[13];
    *(_QWORD *)(a1 + 96) = v8;
    *(_QWORD *)(a1 + 104) = v9;
    v10 = a2[14];
    v11 = a2[15];
    *(_QWORD *)(a1 + 112) = v10;
    *(_QWORD *)(a1 + 120) = v11;
    *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
    v13 = a2[17];
    v12 = a2[18];
    *(_QWORD *)(a1 + 136) = v13;
    *(_QWORD *)(a1 + 144) = v12;
    v31 = v12;
    v32 = a2[19];
    v14 = a2[20];
    *(_QWORD *)(a1 + 152) = v32;
    *(_QWORD *)(a1 + 160) = v14;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    v34 = a2[23];
    v36 = v14;
    v38 = a2[24];
    *(_QWORD *)(a1 + 184) = v34;
    *(_QWORD *)(a1 + 192) = v38;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_retain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_retain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v31);
    swift_bridgeObjectRetain(v32);
    swift_retain(v36);
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRetain(v38);
  }
  else
  {
    v15 = *((_OWORD *)a2 + 11);
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 176) = v15;
    *(_QWORD *)(a1 + 192) = a2[24];
    v16 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v16;
    v17 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v17;
    v18 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v18;
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
  v19 = a2[29];
  v20 = a2[30];
  *(_QWORD *)(a1 + 232) = v19;
  *(_QWORD *)(a1 + 240) = v20;
  v21 = a2[31];
  v22 = a2[32];
  *(_QWORD *)(a1 + 248) = v21;
  *(_QWORD *)(a1 + 256) = v22;
  v23 = a2[33];
  v24 = a2[34];
  *(_QWORD *)(a1 + 264) = v23;
  *(_QWORD *)(a1 + 272) = v24;
  v25 = a2[35];
  *(_QWORD *)(a1 + 280) = v25;
  *(_BYTE *)(a1 + 288) = *((_BYTE *)a2 + 288);
  v26 = a2[37];
  v27 = a2[38];
  *(_QWORD *)(a1 + 296) = v26;
  *(_QWORD *)(a1 + 304) = v27;
  v35 = a2[39];
  v39 = a2[40];
  *(_QWORD *)(a1 + 312) = v35;
  *(_QWORD *)(a1 + 320) = v39;
  v28 = a2[42];
  *(_QWORD *)(a1 + 328) = a2[41];
  *(_QWORD *)(a1 + 336) = v28;
  v33 = a2[43];
  v37 = a2[44];
  *(_QWORD *)(a1 + 344) = v33;
  *(_QWORD *)(a1 + 352) = v37;
  v29 = a2[46];
  *(_QWORD *)(a1 + 360) = a2[45];
  *(_QWORD *)(a1 + 368) = v29;
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_retain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_retain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v35);
  swift_retain(v39);
  swift_bridgeObjectRetain(v33);
  swift_bridgeObjectRetain(v37);
  return a1;
}

uint64_t *assignWithCopy for WavesView.DownSignalView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  v6 = a2[6];
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  a1[6] = v6;
  v7 = a1 + 8;
  v8 = a2 + 8;
  v9 = a1[9];
  v10 = a2[9];
  if (v9)
  {
    if (v10)
    {
      a1[8] = a2[8];
      v11 = a2[9];
      a1[9] = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v9);
      v12 = a2[10];
      v13 = a1[10];
      a1[10] = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v13);
      v14 = a2[11];
      v15 = a1[11];
      a1[11] = v14;
      swift_retain(v14);
      swift_release(v15);
      v16 = a2[12];
      v17 = a1[12];
      a1[12] = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v17);
      v18 = a2[13];
      v19 = a1[13];
      a1[13] = v18;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRelease(v19);
      v20 = a2[14];
      v21 = a1[14];
      a1[14] = v20;
      swift_retain(v20);
      swift_release(v21);
      v22 = a2[15];
      v23 = a1[15];
      a1[15] = v22;
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRelease(v23);
      *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
      v24 = a2[17];
      v25 = a1[17];
      a1[17] = v24;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRelease(v25);
      v26 = a2[18];
      v27 = a1[18];
      a1[18] = v26;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRelease(v27);
      v28 = a2[19];
      v29 = a1[19];
      a1[19] = v28;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRelease(v29);
      v30 = a2[20];
      v31 = a1[20];
      a1[20] = v30;
      swift_retain(v30);
      swift_release(v31);
      a1[21] = a2[21];
      a1[22] = a2[22];
      v32 = a2[23];
      v33 = a1[23];
      a1[23] = v32;
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRelease(v33);
      v34 = a2[24];
      v35 = a1[24];
      a1[24] = v34;
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRelease(v35);
    }
    else
    {
      sub_1000C208C(a1 + 8);
      *v7 = *v8;
      v45 = *((_OWORD *)a2 + 8);
      v47 = *((_OWORD *)a2 + 5);
      v46 = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 8) = v45;
      *((_OWORD *)a1 + 5) = v47;
      *((_OWORD *)a1 + 6) = v46;
      v49 = *((_OWORD *)a2 + 10);
      v48 = *((_OWORD *)a2 + 11);
      v50 = *((_OWORD *)a2 + 9);
      a1[24] = a2[24];
      *((_OWORD *)a1 + 10) = v49;
      *((_OWORD *)a1 + 11) = v48;
      *((_OWORD *)a1 + 9) = v50;
    }
  }
  else if (v10)
  {
    a1[8] = a2[8];
    v36 = a2[9];
    a1[9] = v36;
    v37 = a2[10];
    a1[10] = v37;
    v38 = a2[11];
    a1[11] = v38;
    v39 = a2[12];
    a1[12] = v39;
    v40 = a2[13];
    a1[13] = v40;
    v41 = a2[14];
    a1[14] = v41;
    v42 = a2[15];
    a1[15] = v42;
    *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
    v43 = a2[17];
    a1[17] = v43;
    v44 = a2[18];
    a1[18] = v44;
    v87 = a2[19];
    a1[19] = v87;
    v89 = a2[20];
    a1[20] = v89;
    a1[21] = a2[21];
    a1[22] = a2[22];
    v86 = a2[23];
    a1[23] = v86;
    v88 = a2[24];
    a1[24] = v88;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
    swift_retain(v38);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
    swift_retain(v41);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v87);
    swift_retain(v89);
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRetain(v88);
  }
  else
  {
    *v7 = *v8;
    v51 = *((_OWORD *)a2 + 5);
    v52 = *((_OWORD *)a2 + 6);
    v53 = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
    *((_OWORD *)a1 + 8) = v53;
    *((_OWORD *)a1 + 5) = v51;
    *((_OWORD *)a1 + 6) = v52;
    v54 = *((_OWORD *)a2 + 9);
    v55 = *((_OWORD *)a2 + 10);
    v56 = *((_OWORD *)a2 + 11);
    a1[24] = a2[24];
    *((_OWORD *)a1 + 10) = v55;
    *((_OWORD *)a1 + 11) = v56;
    *((_OWORD *)a1 + 9) = v54;
  }
  a1[25] = a2[25];
  a1[26] = a2[26];
  a1[27] = a2[27];
  v58 = a2[28];
  v57 = a2 + 28;
  a1[28] = v58;
  v59 = v57[1];
  v60 = a1[29];
  a1[29] = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v60);
  v61 = v57[2];
  v62 = a1[30];
  a1[30] = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62);
  v63 = v57[3];
  v64 = a1[31];
  a1[31] = v63;
  swift_retain(v63);
  swift_release(v64);
  v65 = v57[4];
  v66 = a1[32];
  a1[32] = v65;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease(v66);
  v67 = v57[5];
  v68 = a1[33];
  a1[33] = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68);
  v69 = v57[6];
  v70 = a1[34];
  a1[34] = v69;
  swift_retain(v69);
  swift_release(v70);
  v71 = v57[7];
  v72 = a1[35];
  a1[35] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  *((_BYTE *)a1 + 288) = *((_BYTE *)v57 + 64);
  v73 = v57[9];
  v74 = a1[37];
  a1[37] = v73;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRelease(v74);
  v75 = v57[10];
  v76 = a1[38];
  a1[38] = v75;
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRelease(v76);
  v77 = v57[11];
  v78 = a1[39];
  a1[39] = v77;
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRelease(v78);
  v79 = v57[12];
  v80 = a1[40];
  a1[40] = v79;
  swift_retain(v79);
  swift_release(v80);
  a1[41] = v57[13];
  a1[42] = v57[14];
  v81 = v57[15];
  v82 = a1[43];
  a1[43] = v81;
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRelease(v82);
  v83 = v57[16];
  v84 = a1[44];
  a1[44] = v83;
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRelease(v84);
  a1[45] = v57[17];
  a1[46] = v57[18];
  return a1;
}

void *initializeWithTake for WavesView.DownSignalView(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x178uLL);
}

uint64_t *assignWithTake for WavesView.DownSignalView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  a1[6] = a2[6];
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  v5 = a1[9];
  if (!v5)
    goto LABEL_5;
  v6 = a2[9];
  if (!v6)
  {
    sub_1000C208C(a1 + 8);
LABEL_5:
    v19 = *((_OWORD *)a2 + 11);
    *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
    *((_OWORD *)a1 + 11) = v19;
    a1[24] = a2[24];
    v20 = *((_OWORD *)a2 + 7);
    *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
    *((_OWORD *)a1 + 7) = v20;
    v21 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v21;
    v22 = *((_OWORD *)a2 + 5);
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 5) = v22;
    goto LABEL_6;
  }
  a1[8] = a2[8];
  a1[9] = v6;
  swift_bridgeObjectRelease(v5);
  v7 = a1[10];
  a1[10] = a2[10];
  swift_bridgeObjectRelease(v7);
  v8 = a1[11];
  a1[11] = a2[11];
  swift_release(v8);
  v9 = a1[12];
  a1[12] = a2[12];
  swift_bridgeObjectRelease(v9);
  v10 = a1[13];
  a1[13] = a2[13];
  swift_bridgeObjectRelease(v10);
  v11 = a1[14];
  a1[14] = a2[14];
  swift_release(v11);
  v12 = a1[15];
  a1[15] = a2[15];
  swift_bridgeObjectRelease(v12);
  *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
  v13 = a1[17];
  a1[17] = a2[17];
  swift_bridgeObjectRelease(v13);
  v14 = a1[18];
  a1[18] = a2[18];
  swift_bridgeObjectRelease(v14);
  v15 = a1[19];
  a1[19] = a2[19];
  swift_bridgeObjectRelease(v15);
  v16 = a1[20];
  a1[20] = a2[20];
  swift_release(v16);
  *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
  v17 = a1[23];
  a1[23] = a2[23];
  swift_bridgeObjectRelease(v17);
  v18 = a1[24];
  a1[24] = a2[24];
  swift_bridgeObjectRelease(v18);
LABEL_6:
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 27) = *(_OWORD *)(a2 + 27);
  v23 = a1[29];
  a1[29] = a2[29];
  swift_bridgeObjectRelease(v23);
  v24 = a1[30];
  a1[30] = a2[30];
  swift_bridgeObjectRelease(v24);
  v25 = a1[31];
  a1[31] = a2[31];
  swift_release(v25);
  v26 = a1[32];
  a1[32] = a2[32];
  swift_bridgeObjectRelease(v26);
  v27 = a1[33];
  a1[33] = a2[33];
  swift_bridgeObjectRelease(v27);
  v28 = a1[34];
  a1[34] = a2[34];
  swift_release(v28);
  v29 = a1[35];
  a1[35] = a2[35];
  swift_bridgeObjectRelease(v29);
  *((_BYTE *)a1 + 288) = *((_BYTE *)a2 + 288);
  v30 = a1[37];
  a1[37] = a2[37];
  swift_bridgeObjectRelease(v30);
  v31 = a1[38];
  a1[38] = a2[38];
  swift_bridgeObjectRelease(v31);
  v32 = a1[39];
  a1[39] = a2[39];
  swift_bridgeObjectRelease(v32);
  v33 = a1[40];
  a1[40] = a2[40];
  swift_release(v33);
  v34 = a2[42];
  a1[41] = a2[41];
  a1[42] = v34;
  v35 = a1[43];
  a1[43] = a2[43];
  swift_bridgeObjectRelease(v35);
  v36 = a1[44];
  a1[44] = a2[44];
  swift_bridgeObjectRelease(v36);
  v37 = a2[46];
  a1[45] = a2[45];
  a1[46] = v37;
  return a1;
}

uint64_t getEnumTagSinglePayload for WavesView.DownSignalView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 376))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WavesView.DownSignalView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 376) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 376) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WavesView.DownSignalView()
{
  return &type metadata for WavesView.DownSignalView;
}

uint64_t _s8SOSBuddy9WavesViewVwxx_0(_QWORD *a1)
{
  uint64_t v2;

  swift_bridgeObjectRelease(*a1);
  v2 = a1[9];
  if (v2)
  {
    swift_bridgeObjectRelease(v2);
    swift_bridgeObjectRelease(a1[10]);
    swift_release(a1[11]);
    swift_bridgeObjectRelease(a1[12]);
    swift_bridgeObjectRelease(a1[13]);
    swift_release(a1[14]);
    swift_bridgeObjectRelease(a1[15]);
    swift_bridgeObjectRelease(a1[17]);
    swift_bridgeObjectRelease(a1[18]);
    swift_bridgeObjectRelease(a1[19]);
    swift_release(a1[20]);
    swift_bridgeObjectRelease(a1[23]);
    swift_bridgeObjectRelease(a1[24]);
  }
  swift_bridgeObjectRelease(a1[29]);
  swift_bridgeObjectRelease(a1[30]);
  swift_release(a1[31]);
  swift_bridgeObjectRelease(a1[32]);
  swift_bridgeObjectRelease(a1[33]);
  swift_release(a1[34]);
  swift_bridgeObjectRelease(a1[35]);
  swift_bridgeObjectRelease(a1[37]);
  swift_bridgeObjectRelease(a1[38]);
  swift_bridgeObjectRelease(a1[39]);
  swift_release(a1[40]);
  swift_bridgeObjectRelease(a1[43]);
  return swift_bridgeObjectRelease(a1[44]);
}

uint64_t initializeWithCopy for WavesView.UpSignalView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  *(_QWORD *)(a1 + 48) = a2[6];
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  v5 = a2[9];
  swift_bridgeObjectRetain(v4);
  if (v5)
  {
    *(_QWORD *)(a1 + 64) = a2[8];
    *(_QWORD *)(a1 + 72) = v5;
    v6 = a2[10];
    v7 = a2[11];
    *(_QWORD *)(a1 + 80) = v6;
    *(_QWORD *)(a1 + 88) = v7;
    v8 = a2[12];
    v9 = a2[13];
    *(_QWORD *)(a1 + 96) = v8;
    *(_QWORD *)(a1 + 104) = v9;
    v10 = a2[14];
    v11 = a2[15];
    *(_QWORD *)(a1 + 112) = v10;
    *(_QWORD *)(a1 + 120) = v11;
    *(_BYTE *)(a1 + 128) = *((_BYTE *)a2 + 128);
    v13 = a2[17];
    v12 = a2[18];
    *(_QWORD *)(a1 + 136) = v13;
    *(_QWORD *)(a1 + 144) = v12;
    v30 = v12;
    v31 = a2[19];
    v14 = a2[20];
    *(_QWORD *)(a1 + 152) = v31;
    *(_QWORD *)(a1 + 160) = v14;
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    v33 = a2[23];
    v35 = v14;
    v37 = a2[24];
    *(_QWORD *)(a1 + 184) = v33;
    *(_QWORD *)(a1 + 192) = v37;
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(v6);
    swift_retain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_retain(v10);
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v30);
    swift_bridgeObjectRetain(v31);
    swift_retain(v35);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRetain(v37);
  }
  else
  {
    v15 = *((_OWORD *)a2 + 11);
    *(_OWORD *)(a1 + 160) = *((_OWORD *)a2 + 10);
    *(_OWORD *)(a1 + 176) = v15;
    *(_QWORD *)(a1 + 192) = a2[24];
    v16 = *((_OWORD *)a2 + 7);
    *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
    *(_OWORD *)(a1 + 112) = v16;
    v17 = *((_OWORD *)a2 + 9);
    *(_OWORD *)(a1 + 128) = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 144) = v17;
    v18 = *((_OWORD *)a2 + 5);
    *(_OWORD *)(a1 + 64) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 80) = v18;
  }
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 27);
  v19 = a2[29];
  v20 = a2[30];
  *(_QWORD *)(a1 + 232) = v19;
  *(_QWORD *)(a1 + 240) = v20;
  v21 = a2[31];
  v22 = a2[32];
  *(_QWORD *)(a1 + 248) = v21;
  *(_QWORD *)(a1 + 256) = v22;
  v23 = a2[33];
  v24 = a2[34];
  *(_QWORD *)(a1 + 264) = v23;
  *(_QWORD *)(a1 + 272) = v24;
  v25 = a2[35];
  *(_QWORD *)(a1 + 280) = v25;
  *(_BYTE *)(a1 + 288) = *((_BYTE *)a2 + 288);
  v26 = a2[37];
  v27 = a2[38];
  *(_QWORD *)(a1 + 296) = v26;
  *(_QWORD *)(a1 + 304) = v27;
  v34 = a2[39];
  v38 = a2[40];
  *(_QWORD *)(a1 + 312) = v34;
  *(_QWORD *)(a1 + 320) = v38;
  v28 = a2[42];
  *(_QWORD *)(a1 + 328) = a2[41];
  *(_QWORD *)(a1 + 336) = v28;
  v32 = a2[43];
  v36 = a2[44];
  *(_QWORD *)(a1 + 344) = v32;
  *(_QWORD *)(a1 + 352) = v36;
  *(_QWORD *)(a1 + 360) = a2[45];
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v20);
  swift_retain(v21);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  swift_retain(v24);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRetain(v34);
  swift_retain(v38);
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRetain(v36);
  return a1;
}

uint64_t *assignWithCopy for WavesView.UpSignalView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  v6 = a2[6];
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  a1[6] = v6;
  v7 = a1 + 8;
  v8 = a2 + 8;
  v9 = a1[9];
  v10 = a2[9];
  if (v9)
  {
    if (v10)
    {
      a1[8] = a2[8];
      v11 = a2[9];
      a1[9] = v11;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease(v9);
      v12 = a2[10];
      v13 = a1[10];
      a1[10] = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v13);
      v14 = a2[11];
      v15 = a1[11];
      a1[11] = v14;
      swift_retain(v14);
      swift_release(v15);
      v16 = a2[12];
      v17 = a1[12];
      a1[12] = v16;
      swift_bridgeObjectRetain(v16);
      swift_bridgeObjectRelease(v17);
      v18 = a2[13];
      v19 = a1[13];
      a1[13] = v18;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRelease(v19);
      v20 = a2[14];
      v21 = a1[14];
      a1[14] = v20;
      swift_retain(v20);
      swift_release(v21);
      v22 = a2[15];
      v23 = a1[15];
      a1[15] = v22;
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRelease(v23);
      *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
      v24 = a2[17];
      v25 = a1[17];
      a1[17] = v24;
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRelease(v25);
      v26 = a2[18];
      v27 = a1[18];
      a1[18] = v26;
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRelease(v27);
      v28 = a2[19];
      v29 = a1[19];
      a1[19] = v28;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRelease(v29);
      v30 = a2[20];
      v31 = a1[20];
      a1[20] = v30;
      swift_retain(v30);
      swift_release(v31);
      a1[21] = a2[21];
      a1[22] = a2[22];
      v32 = a2[23];
      v33 = a1[23];
      a1[23] = v32;
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRelease(v33);
      v34 = a2[24];
      v35 = a1[24];
      a1[24] = v34;
      swift_bridgeObjectRetain(v34);
      swift_bridgeObjectRelease(v35);
    }
    else
    {
      sub_1000C208C(a1 + 8);
      *v7 = *v8;
      v45 = *((_OWORD *)a2 + 8);
      v47 = *((_OWORD *)a2 + 5);
      v46 = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 8) = v45;
      *((_OWORD *)a1 + 5) = v47;
      *((_OWORD *)a1 + 6) = v46;
      v49 = *((_OWORD *)a2 + 10);
      v48 = *((_OWORD *)a2 + 11);
      v50 = *((_OWORD *)a2 + 9);
      a1[24] = a2[24];
      *((_OWORD *)a1 + 10) = v49;
      *((_OWORD *)a1 + 11) = v48;
      *((_OWORD *)a1 + 9) = v50;
    }
  }
  else if (v10)
  {
    a1[8] = a2[8];
    v36 = a2[9];
    a1[9] = v36;
    v37 = a2[10];
    a1[10] = v37;
    v38 = a2[11];
    a1[11] = v38;
    v39 = a2[12];
    a1[12] = v39;
    v40 = a2[13];
    a1[13] = v40;
    v41 = a2[14];
    a1[14] = v41;
    v42 = a2[15];
    a1[15] = v42;
    *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
    v43 = a2[17];
    a1[17] = v43;
    v44 = a2[18];
    a1[18] = v44;
    v87 = a2[19];
    a1[19] = v87;
    v89 = a2[20];
    a1[20] = v89;
    a1[21] = a2[21];
    a1[22] = a2[22];
    v86 = a2[23];
    a1[23] = v86;
    v88 = a2[24];
    a1[24] = v88;
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRetain(v37);
    swift_retain(v38);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
    swift_retain(v41);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v87);
    swift_retain(v89);
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRetain(v88);
  }
  else
  {
    *v7 = *v8;
    v51 = *((_OWORD *)a2 + 5);
    v52 = *((_OWORD *)a2 + 6);
    v53 = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
    *((_OWORD *)a1 + 8) = v53;
    *((_OWORD *)a1 + 5) = v51;
    *((_OWORD *)a1 + 6) = v52;
    v54 = *((_OWORD *)a2 + 9);
    v55 = *((_OWORD *)a2 + 10);
    v56 = *((_OWORD *)a2 + 11);
    a1[24] = a2[24];
    *((_OWORD *)a1 + 10) = v55;
    *((_OWORD *)a1 + 11) = v56;
    *((_OWORD *)a1 + 9) = v54;
  }
  a1[25] = a2[25];
  a1[26] = a2[26];
  a1[27] = a2[27];
  v58 = a2[28];
  v57 = a2 + 28;
  a1[28] = v58;
  v59 = v57[1];
  v60 = a1[29];
  a1[29] = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRelease(v60);
  v61 = v57[2];
  v62 = a1[30];
  a1[30] = v61;
  swift_bridgeObjectRetain(v61);
  swift_bridgeObjectRelease(v62);
  v63 = v57[3];
  v64 = a1[31];
  a1[31] = v63;
  swift_retain(v63);
  swift_release(v64);
  v65 = v57[4];
  v66 = a1[32];
  a1[32] = v65;
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease(v66);
  v67 = v57[5];
  v68 = a1[33];
  a1[33] = v67;
  swift_bridgeObjectRetain(v67);
  swift_bridgeObjectRelease(v68);
  v69 = v57[6];
  v70 = a1[34];
  a1[34] = v69;
  swift_retain(v69);
  swift_release(v70);
  v71 = v57[7];
  v72 = a1[35];
  a1[35] = v71;
  swift_bridgeObjectRetain(v71);
  swift_bridgeObjectRelease(v72);
  *((_BYTE *)a1 + 288) = *((_BYTE *)v57 + 64);
  v73 = v57[9];
  v74 = a1[37];
  a1[37] = v73;
  swift_bridgeObjectRetain(v73);
  swift_bridgeObjectRelease(v74);
  v75 = v57[10];
  v76 = a1[38];
  a1[38] = v75;
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRelease(v76);
  v77 = v57[11];
  v78 = a1[39];
  a1[39] = v77;
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRelease(v78);
  v79 = v57[12];
  v80 = a1[40];
  a1[40] = v79;
  swift_retain(v79);
  swift_release(v80);
  a1[41] = v57[13];
  a1[42] = v57[14];
  v81 = v57[15];
  v82 = a1[43];
  a1[43] = v81;
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRelease(v82);
  v83 = v57[16];
  v84 = a1[44];
  a1[44] = v83;
  swift_bridgeObjectRetain(v83);
  swift_bridgeObjectRelease(v84);
  a1[45] = v57[17];
  return a1;
}

void *initializeWithTake for WavesView.UpSignalView(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x170uLL);
}

uint64_t *assignWithTake for WavesView.UpSignalView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  a1[6] = a2[6];
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  v5 = a1[9];
  if (!v5)
    goto LABEL_5;
  v6 = a2[9];
  if (!v6)
  {
    sub_1000C208C(a1 + 8);
LABEL_5:
    v19 = *((_OWORD *)a2 + 11);
    *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
    *((_OWORD *)a1 + 11) = v19;
    a1[24] = a2[24];
    v20 = *((_OWORD *)a2 + 7);
    *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
    *((_OWORD *)a1 + 7) = v20;
    v21 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v21;
    v22 = *((_OWORD *)a2 + 5);
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 5) = v22;
    goto LABEL_6;
  }
  a1[8] = a2[8];
  a1[9] = v6;
  swift_bridgeObjectRelease(v5);
  v7 = a1[10];
  a1[10] = a2[10];
  swift_bridgeObjectRelease(v7);
  v8 = a1[11];
  a1[11] = a2[11];
  swift_release(v8);
  v9 = a1[12];
  a1[12] = a2[12];
  swift_bridgeObjectRelease(v9);
  v10 = a1[13];
  a1[13] = a2[13];
  swift_bridgeObjectRelease(v10);
  v11 = a1[14];
  a1[14] = a2[14];
  swift_release(v11);
  v12 = a1[15];
  a1[15] = a2[15];
  swift_bridgeObjectRelease(v12);
  *((_BYTE *)a1 + 128) = *((_BYTE *)a2 + 128);
  v13 = a1[17];
  a1[17] = a2[17];
  swift_bridgeObjectRelease(v13);
  v14 = a1[18];
  a1[18] = a2[18];
  swift_bridgeObjectRelease(v14);
  v15 = a1[19];
  a1[19] = a2[19];
  swift_bridgeObjectRelease(v15);
  v16 = a1[20];
  a1[20] = a2[20];
  swift_release(v16);
  *(_OWORD *)(a1 + 21) = *(_OWORD *)(a2 + 21);
  v17 = a1[23];
  a1[23] = a2[23];
  swift_bridgeObjectRelease(v17);
  v18 = a1[24];
  a1[24] = a2[24];
  swift_bridgeObjectRelease(v18);
LABEL_6:
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_OWORD *)(a1 + 27) = *(_OWORD *)(a2 + 27);
  v23 = a1[29];
  a1[29] = a2[29];
  swift_bridgeObjectRelease(v23);
  v24 = a1[30];
  a1[30] = a2[30];
  swift_bridgeObjectRelease(v24);
  v25 = a1[31];
  a1[31] = a2[31];
  swift_release(v25);
  v26 = a1[32];
  a1[32] = a2[32];
  swift_bridgeObjectRelease(v26);
  v27 = a1[33];
  a1[33] = a2[33];
  swift_bridgeObjectRelease(v27);
  v28 = a1[34];
  a1[34] = a2[34];
  swift_release(v28);
  v29 = a1[35];
  a1[35] = a2[35];
  swift_bridgeObjectRelease(v29);
  *((_BYTE *)a1 + 288) = *((_BYTE *)a2 + 288);
  v30 = a1[37];
  a1[37] = a2[37];
  swift_bridgeObjectRelease(v30);
  v31 = a1[38];
  a1[38] = a2[38];
  swift_bridgeObjectRelease(v31);
  v32 = a1[39];
  a1[39] = a2[39];
  swift_bridgeObjectRelease(v32);
  v33 = a1[40];
  a1[40] = a2[40];
  swift_release(v33);
  v34 = a2[42];
  a1[41] = a2[41];
  a1[42] = v34;
  v35 = a1[43];
  a1[43] = a2[43];
  swift_bridgeObjectRelease(v35);
  v36 = a1[44];
  a1[44] = a2[44];
  swift_bridgeObjectRelease(v36);
  a1[45] = a2[45];
  return a1;
}

uint64_t getEnumTagSinglePayload for WavesView.UpSignalView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 368))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WavesView.UpSignalView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 360) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 368) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 368) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WavesView.UpSignalView()
{
  return &type metadata for WavesView.UpSignalView;
}

uint64_t sub_1000C6E30()
{
  return sub_10002B614(&qword_10031DA20, &qword_10031DA28, (void (*)(void))sub_1000C6E64);
}

unint64_t sub_1000C6E64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031DA30;
  if (!qword_10031DA30)
  {
    v1 = sub_100007FAC(&qword_10031DA38);
    sub_1000084FC(&qword_10031DA40, &qword_10031DA48, (uint64_t)&protocol conformance descriptor for StrokeShapeView<A, B, C>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031DA30);
  }
  return result;
}

uint64_t sub_1000C6EE8()
{
  return sub_10003418C(&qword_10031DA50, &qword_10031DA58, (void (*)(void))sub_1000C4D20, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
}

unint64_t sub_1000C6F20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031DA60;
  if (!qword_10031DA60)
  {
    v1 = sub_100007FAC(&qword_10031DA68);
    sub_1000C6FA4();
    sub_1000084FC(&qword_10031DA90, &qword_10031DA98, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031DA60);
  }
  return result;
}

unint64_t sub_1000C6FA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031DA70;
  if (!qword_10031DA70)
  {
    v1 = sub_100007FAC(&qword_10031DA78);
    sub_1000084FC(&qword_10031DA80, &qword_10031DA88, (uint64_t)&protocol conformance descriptor for StrokeShapeView<A, B, C>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031DA70);
  }
  return result;
}

unint64_t sub_1000C702C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031DAA0;
  if (!qword_10031DAA0)
  {
    v1 = sub_100007FAC(&qword_10031DA00);
    sub_10003418C(&qword_10031DAA8, &qword_10031D9B8, (void (*)(void))sub_1000C5100, (uint64_t)&protocol conformance descriptor for <> TimelineView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031DAA0);
  }
  return result;
}

uint64_t sub_1000C70B8()
{
  return sub_1000084FC(&qword_10031DAB0, &qword_10031DAB8, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
}

void *sub_1000C70E4()
{
  return &protocol witness table for Double;
}

unint64_t sub_1000C70F4()
{
  unint64_t result;

  result = qword_10031DAC0;
  if (!qword_10031DAC0)
  {
    result = swift_getWitnessTable(&unk_1002539F8, &type metadata for ArrowShape);
    atomic_store(result, (unint64_t *)&qword_10031DAC0);
  }
  return result;
}

unint64_t sub_1000C713C()
{
  unint64_t result;

  result = qword_10031DAC8;
  if (!qword_10031DAC8)
  {
    result = swift_getWitnessTable(&unk_1002539A8, &type metadata for ArrowShape);
    atomic_store(result, (unint64_t *)&qword_10031DAC8);
  }
  return result;
}

uint64_t sub_1000C7180(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100299228, 1);
}

uint64_t sub_1000C7190(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100299200, 1);
}

uint64_t sub_1000C71A0(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 40));
  return a1;
}

uint64_t sub_1000C71C8(uint64_t a1)
{
  swift_release(*(_QWORD *)(a1 + 40));
  return a1;
}

double sub_1000C71F0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  double v12;
  double v13;
  double v14;
  double v15;
  __double2 v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  __double2 v31;
  double v32;
  double v33;
  __double2 v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  double result;
  __int128 v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  _OWORD v51[2];
  char v52;
  double v53[6];

  Path.init()(v51, a1);
  v5 = *v2;
  v4 = v2[1];
  v6 = v2[10];
  v7 = v2[11];
  v47 = v2[12];
  v49 = v2[9];
  v45 = v2[13];
  v50 = v2[14];
  v53[0] = v2[16] * 0.5;
  v8 = v53[0];
  v9 = Angle.animatableData.getter(0.174532925);
  v10 = Angle.animatableData.getter(v8);
  Angle.animatableData.setter(v9 + v10);
  v44 = v53[0];
  if ((static Angle.== infix(_:_:)(v11, v4, 0.0) & 1) == 0)
  {
    v12 = v2[17];
    v13 = v12 < 0.0 ? -v12 : v2[17];
    if (v8 < v13)
    {
      v53[0] = v5;
      v14 = Angle.animatableData.getter(v12);
      v15 = Angle.animatableData.getter(v5);
      Angle.animatableData.setter(v14 + v15);
      v42 = v53[0];
      v16 = __sincos_stret(v53[0]);
      v43 = v5;
      if (v12 <= 0.0)
      {
        v53[0] = v6;
        v17 = Angle.animatableData.getter(v6);
        Angle.animatableData.setter(0.0 - v17);
        v6 = v53[0];
      }
      v53[0] = v6;
      v18 = Angle.animatableData.getter(1.57079633);
      v19 = Angle.animatableData.getter(v6);
      Angle.animatableData.setter(v18 + v19);
      v40 = v53[0];
      if (v12 <= 0.0)
      {
        v53[0] = v7;
        v20 = Angle.animatableData.getter(v7);
        Angle.animatableData.setter(0.0 - v20);
        v7 = v53[0];
      }
      v21 = v45 * 0.5;
      v46 = v50 * v16.__cosval;
      v48 = v47 * 0.5;
      v53[0] = v7;
      v41 = v50 * v16.__sinval;
      v22 = Angle.animatableData.getter(1.57079633);
      v23 = Angle.animatableData.getter(v7);
      Angle.animatableData.setter(v22 + v23);
      v24 = v53[0];
      v25 = 1.0;
      if (v44 >= v13)
      {
        v53[0] = v13;
        v26 = Angle.animatableData.getter(v8);
        v27 = Angle.animatableData.getter(v13);
        Angle.animatableData.setter(v27 - v26);
        v25 = v53[0] / 0.174532925;
      }
      v53[0] = v12;
      v28 = Angle.animatableData.getter(v40);
      v29 = Angle.animatableData.getter(v12);
      Angle.animatableData.setter(v28 + v29);
      v30 = v49 * v25;
      v31 = __sincos_stret(v53[0]);
      v53[0] = v12;
      v32 = Angle.animatableData.getter(v24);
      v33 = Angle.animatableData.getter(v12);
      Angle.animatableData.setter(v33 - v32);
      v34 = __sincos_stret(v53[0]);
      v53[0] = 1.0;
      v53[1] = 0.0;
      v53[2] = 0.0;
      v53[3] = 1.0;
      v53[4] = 0.0;
      v53[5] = 0.0;
      Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)(v12 < 0.0, v53, v48, v21, v50, v43, v42);
      Path.addLine(to:)(v35, v48 + v46 + v30 * v31.__cosval, v21 + v41 + v30 * v31.__sinval);
      Path.move(to:)(v48 + v46, v21 + v41);
      Path.addLine(to:)(v36, v48 + v46 + v30 * v34.__cosval, v21 + v41 + v30 * v34.__sinval);
    }
  }
  v37 = v52;
  result = *(double *)v51;
  v39 = v51[1];
  *(_OWORD *)a2 = v51[0];
  *(_OWORD *)(a2 + 16) = v39;
  *(_BYTE *)(a2 + 32) = v37;
  return result;
}

unint64_t sub_1000C751C()
{
  unint64_t result;

  result = qword_10031DAD0;
  if (!qword_10031DAD0)
  {
    result = swift_getWitnessTable(&unk_100253A48, &type metadata for ArrowShape);
    atomic_store(result, (unint64_t *)&qword_10031DAD0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for WavesView.Signal(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for WavesView.Signal(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for WavesView.Signal()
{
  return &type metadata for WavesView.Signal;
}

uint64_t sub_1000C760C()
{
  return sub_1000084FC(&qword_10031DAD8, &qword_10031DAE0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

uint64_t sub_1000C7638()
{
  return sub_10002B614(&qword_10031DAE8, &qword_10031DAF0, (void (*)(void))sub_1000C766C);
}

uint64_t sub_1000C766C()
{
  return sub_10002B614(&qword_10031DAF8, &qword_10031DB00, (void (*)(void))sub_1000C7690);
}

unint64_t sub_1000C7690()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031DB08;
  if (!qword_10031DB08)
  {
    v1 = sub_100007FAC(&qword_10031DB10);
    sub_1000084FC(&qword_10031DB18, &qword_10031DB20, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031DB08);
  }
  return result;
}

uint64_t sub_1000C7714()
{
  return sub_1000084FC(&qword_10031DB28, &qword_10031DB30, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
}

unint64_t sub_1000C7744()
{
  unint64_t result;

  result = qword_10031DB38;
  if (!qword_10031DB38)
  {
    result = swift_getWitnessTable(&unk_100253B90, &type metadata for WavesView.Signal);
    atomic_store(result, (unint64_t *)&qword_10031DB38);
  }
  return result;
}

unint64_t sub_1000C778C()
{
  unint64_t result;

  result = qword_10031DB40;
  if (!qword_10031DB40)
  {
    result = swift_getWitnessTable(&unk_100253B40, &type metadata for WavesView.Signal);
    atomic_store(result, (unint64_t *)&qword_10031DB40);
  }
  return result;
}

unint64_t sub_1000C77D0()
{
  unint64_t result;

  result = qword_10031DB48;
  if (!qword_10031DB48)
  {
    result = swift_getWitnessTable(&unk_100253BE0, &type metadata for WavesView.Signal);
    atomic_store(result, (unint64_t *)&qword_10031DB48);
  }
  return result;
}

ValueMetadata *type metadata accessor for FallbackQuestionnairePageView()
{
  return &type metadata for FallbackQuestionnairePageView;
}

ValueMetadata *type metadata accessor for QuestionnairePageView()
{
  return &type metadata for QuestionnairePageView;
}

uint64_t sub_1000C7834(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002992B0, 1);
}

uint64_t sub_1000C7844@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int16 v19;
  unsigned __int8 v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t OpaqueTypeConformance2;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t (*v39)(char *, uint64_t, __n128);
  __n128 v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46[16];
  uint64_t v47;
  __int128 v48;
  _BYTE v49[56];
  __int128 v50;
  uint64_t v51;
  unsigned __int16 v52;
  unsigned __int8 v53;
  char v54;

  v2 = v1;
  v45 = a1;
  v3 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_10031DB50);
  v42 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_10031DB58);
  v43 = *(_QWORD *)(v12 - 8);
  v44 = v12;
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v42 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = static HorizontalAlignment.center.getter(v14);
  sub_1000C7B54(v2);
  v18 = *(_QWORD *)&v49[48];
  v19 = v50;
  v20 = BYTE2(v50);
  v21 = BYTE3(v50);
  v22 = v48;
  v23 = *(_OWORD *)v49;
  v24 = *(_OWORD *)&v49[16];
  v25 = *(_OWORD *)&v49[32];
  v48 = (unint64_t)v17;
  v49[0] = 0;
  *(_OWORD *)&v49[8] = v22;
  *(_OWORD *)&v49[24] = v23;
  *(_OWORD *)&v49[40] = v24;
  v50 = v25;
  v51 = v18;
  v53 = v20;
  v52 = v19;
  v54 = v21;
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v3);
  v26 = sub_100003DB8(&qword_10031DB60);
  v27 = sub_1000084FC(&qword_10031DB68, &qword_10031DB60, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.navigationBarTitleDisplayMode(_:)(v7, v26, v27);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  sub_1000C92EC(*(uint64_t *)&v49[8], *(uint64_t *)&v49[16], *(uint64_t *)&v49[24], *(uint64_t *)&v49[32], *(uint64_t *)&v49[40], *(uint64_t *)&v49[48], v50, SBYTE8(v50), v51, v52, v53, (v52 | (v53 << 16)) >> 24, v54);
  v47 = v2;
  v28 = sub_100003DB8(&qword_10031DB70);
  *(_QWORD *)&v48 = v26;
  *((_QWORD *)&v48 + 1) = v27;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v48, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v30 = sub_1000084FC(&qword_10031DB78, &qword_10031DB70, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  View.toolbar<A>(content:)(sub_1000C9518, v46, v8, v28, OpaqueTypeConformance2, v30);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v8);
  v31 = *(_QWORD *)(v2 + 16);
  v32 = type metadata accessor for QuestionnaireState();
  v33 = sub_1000052EC(&qword_100316A18, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState, (uint64_t)&unk_10024D2FC);
  v34 = static ObservableObject.environmentStore.getter(v32, v33);
  v36 = v43;
  v35 = v44;
  v37 = v45;
  (*(void (**)(uint64_t, char *, uint64_t))(v43 + 16))(v45, v16, v44);
  v38 = (uint64_t *)(v37 + *(int *)(sub_100003DB8(&qword_10031DB80) + 36));
  *v38 = v34;
  v38[1] = v31;
  v39 = *(uint64_t (**)(char *, uint64_t, __n128))(v36 + 8);
  v40 = swift_retain(v31);
  return v39(v16, v35, v40);
}

void sub_1000C7B54(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1000C7BA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  char v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  __int16 v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  __int16 v43;
  BOOL v44;
  char v45;

  swift_retain(v3);
  sub_10007BB44(v0, v2, v1);
  v6 = type metadata accessor for UIMetrics();
  v7 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v8 = EnvironmentObject.init()(v6, v7);
  *(_QWORD *)(v5 - 176) = v8;
  *(_QWORD *)(v5 - 168) = v9;
  *(_QWORD *)(v5 - 160) = v3;
  *(_QWORD *)(v5 - 152) = 0;
  *(_QWORD *)(v5 - 144) = v0;
  *(_QWORD *)(v5 - 136) = v2;
  *(_QWORD *)(v5 - 128) = v1;
  *(_BYTE *)(v5 - 120) = 0;
  swift_retain(v8);
  swift_retain(v3);
  sub_10007BB44(v0, v2, v1);
  v10 = sub_100003DB8(&qword_10031DBC0);
  v11 = sub_1000C954C();
  v12 = sub_1000C9590();
  _ConditionalContent<>.init(storage:)(v5 - 176, &type metadata for QuestionnaireBackToPreviousPageView, v10, v11, v12);
  v13 = v41;
  v14 = BYTE8(v41);
  v15 = v39;
  *(_OWORD *)(v5 - 176) = v38;
  *(_OWORD *)(v5 - 160) = v15;
  *(_OWORD *)(v5 - 144) = v40;
  *(_QWORD *)(v5 - 128) = v13;
  *(_QWORD *)(v5 - 120) = v14;
  *(_QWORD *)(v5 - 112) = 0;
  *(_WORD *)(v5 - 104) = 0;
  *(_BYTE *)(v5 - 102) = 0;
  v16 = sub_100003DB8(&qword_10031DBA8);
  v17 = sub_100003DB8(&qword_10031DBE0);
  v18 = v4;
  v19 = sub_1000C9528();
  v20 = sub_1000C963C();
  _ConditionalContent<>.init(storage:)(v5 - 176, v16, v17, v19, v20);
  v38 = v31;
  v39 = v32;
  v40 = v33;
  v41 = v34;
  v42 = v35;
  v43 = v36;
  v44 = v37 != 0;
  v45 = 0;
  v21 = sub_100003DB8(&qword_10031DB90);
  v22 = sub_100008140(&qword_10031DB98, &qword_10031DB90, (void (*)(void))sub_1000C9528, (void (*)(void))sub_1000C963C);
  v23 = sub_1000C9754();
  _ConditionalContent<>.init(storage:)(&v38, v21, &type metadata for InitialConnectionView, v22, v23);
  swift_release(v3);
  swift_release(v8);
  result = sub_10007BB74(v0, v2, v1);
  v25 = *(_OWORD *)(v5 - 160);
  v26 = *(_OWORD *)(v5 - 144);
  v27 = *(_OWORD *)(v5 - 128);
  v28 = *(_QWORD *)(v5 - 112);
  v29 = *(unsigned __int16 *)(v5 - 104) | (*(unsigned __int8 *)(v5 - 102) << 16);
  v30 = *(_BYTE *)(v5 - 101);
  *(_OWORD *)v18 = *(_OWORD *)(v5 - 176);
  *(_OWORD *)(v18 + 16) = v25;
  *(_OWORD *)(v18 + 32) = v26;
  *(_OWORD *)(v18 + 48) = v27;
  *(_QWORD *)(v18 + 64) = v28;
  *(_WORD *)(v18 + 72) = v29;
  *(_BYTE *)(v18 + 74) = BYTE2(v29);
  *(_BYTE *)(v18 + 75) = v30;
  return result;
}

uint64_t sub_1000C8A18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v4 = sub_100003DB8(&qword_10031DB88);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_10031CB18);
  v57 = *(_QWORD *)(v8 - 8);
  v58 = v8;
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003DB8(&qword_100319208);
  v56 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003DB8(&qword_100319210);
  v22 = __chkstk_darwin(v20, v21);
  v24 = (char *)&v53 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v53 - v26;
  if (*(_BYTE *)(a1 + 24) == 1)
  {
    v28 = sub_100003DB8(&qword_100319220);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v24, 1, 1, v28);
    v29 = sub_1000084FC(&qword_100319218, &qword_100319208, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    v59 = v16;
    v60 = v29;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    static ToolbarContentBuilder.buildIf<A>(_:)(v24, v28, OpaqueTypeConformance2);
    v31 = sub_100007FF0((uint64_t)v24, &qword_100319210);
LABEL_5:
    static ToolbarItemPlacement.navigationBarTrailing.getter(v31);
    v44 = sub_100094CC0();
    ToolbarItem<>.init(placement:content:)(v15, sub_100094AD8, 0, &type metadata for EndSessionButton, v44);
    v45 = &v7[*(int *)(v4 + 48)];
    sub_10000B234((uint64_t)v27, (uint64_t)v7, &qword_100319210);
    v46 = v57;
    v47 = v45;
    v48 = v58;
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v47, v11, v58);
    TupleToolbarContent.init(_:)(v7, v4);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v11, v48);
    return sub_100007FF0((uint64_t)v27, &qword_100319210);
  }
  v53 = v7;
  v54 = v4;
  v55 = a2;
  v32 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    v33 = *(_QWORD *)(a1 + 16);
    v34 = v32[9];
    v35 = v32[10];
    sub_100007BBC(v32 + 6, v34);
    v36 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v35 + 160))(*(unsigned __int8 *)(*(_QWORD *)(v33 + 264) + 32), v34, v35);
    v38 = v37;
    v39 = static ToolbarItemPlacement.principal.getter(v36);
    __chkstk_darwin(v39, v40);
    *(&v53 - 2) = (char *)v36;
    *(&v53 - 1) = v38;
    ToolbarItem<>.init(placement:content:)(v15, sub_1000C9520, &v53 - 4, &type metadata for Text, &protocol witness table for Text);
    swift_bridgeObjectRelease(v38);
    v41 = sub_1000084FC(&qword_100319218, &qword_100319208, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    static ToolbarContentBuilder.buildBlock<A>(_:)(v19, v16, v41);
    v42 = sub_100003DB8(&qword_100319220);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v24, 0, 1, v42);
    v59 = v16;
    v60 = v41;
    v43 = swift_getOpaqueTypeConformance2(&v59, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    static ToolbarContentBuilder.buildIf<A>(_:)(v24, v42, v43);
    sub_100007FF0((uint64_t)v24, &qword_100319210);
    v31 = (*(uint64_t (**)(char *, uint64_t))(v56 + 8))(v19, v16);
    v4 = v54;
    v7 = v53;
    goto LABEL_5;
  }
  v50 = *(_QWORD *)(a1 + 8);
  v51 = type metadata accessor for UIMetrics();
  v52 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v50, v51, v52);
  __break(1u);
  return result;
}

void sub_1000C8E6C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[2];

  v22[0] = a1;
  v22[1] = a2;
  v5 = sub_10002B3F4();
  v6 = swift_bridgeObjectRetain(a2);
  v7 = Text.init<A>(_:)(v22, &type metadata for String, v5, v6);
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  v14 = static Font.headline.getter(v7);
  v15 = Text.font(_:)(v14, v7, v9, v13, v11);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  swift_release(v14);
  sub_10002B438(v7, v9, v13);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)a3 = v15;
  *(_QWORD *)(a3 + 8) = v17;
  *(_BYTE *)(a3 + 16) = v19 & 1;
  *(_QWORD *)(a3 + 24) = v21;
}

uint64_t sub_1000C8F48@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C7844(a1);
}

uint64_t sub_1000C8F88(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100299288, 1);
}

uint64_t sub_1000C8F98@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t KeyPath;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v45 = a1;
  v1 = type metadata accessor for ControlSize(0);
  v43 = *(_QWORD *)(v1 - 8);
  v44 = v1;
  __chkstk_darwin(v1, v2);
  v4 = (char *)&v39 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CircularProgressViewStyle(0);
  v41 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_100316B28);
  v40 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100003DB8(&qword_100316B30);
  v13 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42, v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003DB8(&qword_100316B38);
  v19 = __chkstk_darwin(v17, v18);
  v21 = (char *)&v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = ProgressView<>.init<>()(v19);
  CircularProgressViewStyle.init()(v22);
  v23 = sub_1000084FC(&qword_100316C20, &qword_100316B28, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
  v24 = sub_1000052EC(&qword_100316C28, (uint64_t (*)(uint64_t))&type metadata accessor for CircularProgressViewStyle, (uint64_t)&protocol conformance descriptor for CircularProgressViewStyle);
  View.progressViewStyle<A>(_:)(v8, v9, v5, v23, v24);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v12, v9);
  v26 = v43;
  v25 = v44;
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v4, enum case for ControlSize.regular(_:), v44);
  KeyPath = swift_getKeyPath(&unk_100253D38);
  v28 = (uint64_t *)&v21[*(int *)(v17 + 36)];
  v29 = sub_100003DB8(&qword_100316C38);
  (*(void (**)(char *, char *, uint64_t))(v26 + 16))((char *)v28 + *(int *)(v29 + 28), v4, v25);
  *v28 = KeyPath;
  v30 = v42;
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v21, v16, v42);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v4, v25);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v30);
  v31 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  v32 = Color.init(uiColor:)(v31);
  v33 = swift_getKeyPath(&unk_100253D68);
  v46 = v32;
  v34 = swift_retain(v32);
  v35 = AnyShapeStyle.init<A>(_:)(&v46, &type metadata for Color, &protocol witness table for Color, v34);
  v36 = v45;
  sub_10000B234((uint64_t)v21, v45, &qword_100316B38);
  swift_release(v32);
  v37 = (uint64_t *)(v36 + *(int *)(sub_100003DB8(&qword_1003199A0) + 36));
  *v37 = v33;
  v37[1] = v35;
  return sub_100007FF0((uint64_t)v21, &qword_100316B38);
}

uint64_t sub_1000C92EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, __int16 a10, char a11, char a12, char a13)
{
  if ((a13 & 1) == 0)
    return sub_1000C9804(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11 & 1, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))sub_1000C9390, (uint64_t (*)(uint64_t))sub_1000C9430);
  swift_release(a1);
  swift_release(a3);
  swift_release(a5);
  return swift_release(a7);
}

uint64_t sub_1000C9390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if ((a8 & 1) != 0)
    return sub_1000C9400(a1, a2, a3, a4, a5);
  swift_release(a3);
  swift_release(a1);
  return sub_10007BB74(a5, a6, a7);
}

uint64_t sub_1000C9400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  swift_release(a1);
  swift_release(a3);
  return swift_release(a5);
}

uint64_t sub_1000C9430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  if ((a11 & 1) == 0)
    return sub_1000C94AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10 & 1);
  swift_release(a1);
  swift_release(a3);
  swift_release(a5);
  return swift_release(a8);
}

uint64_t sub_1000C94AC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v12;

  if ((a10 & 1) == 0)
  {
    v12 = result;
    swift_release(a7);
    swift_release(v12);
    swift_release(a3);
    swift_release(a5);
    return swift_bridgeObjectRelease(a9);
  }
  return result;
}

uint64_t sub_1000C9518@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000C8A18(*(_QWORD *)(v1 + 16), a1);
}

void sub_1000C9520(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1000C8E6C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000C9528()
{
  return sub_100008140(&qword_10031DBA0, &qword_10031DBA8, (void (*)(void))sub_1000C954C, (void (*)(void))sub_1000C9590);
}

unint64_t sub_1000C954C()
{
  unint64_t result;

  result = qword_10031DBB0;
  if (!qword_10031DBB0)
  {
    result = swift_getWitnessTable(&unk_10024FA64, &type metadata for QuestionnaireBackToPreviousPageView);
    atomic_store(result, (unint64_t *)&qword_10031DBB0);
  }
  return result;
}

uint64_t sub_1000C9590()
{
  return sub_100008140(&qword_10031DBB8, &qword_10031DBC0, (void (*)(void))sub_1000C95B4, (void (*)(void))sub_1000C95F8);
}

unint64_t sub_1000C95B4()
{
  unint64_t result;

  result = qword_10031DBC8;
  if (!qword_10031DBC8)
  {
    result = swift_getWitnessTable(&unk_10024FBB0, &type metadata for QuestionnaireIntroductionView);
    atomic_store(result, (unint64_t *)&qword_10031DBC8);
  }
  return result;
}

unint64_t sub_1000C95F8()
{
  unint64_t result;

  result = qword_10031DBD0;
  if (!qword_10031DBD0)
  {
    result = swift_getWitnessTable(&unk_1002590E4, &type metadata for RoadsideAssistanceIntroductionView);
    atomic_store(result, (unint64_t *)&qword_10031DBD0);
  }
  return result;
}

uint64_t sub_1000C963C()
{
  return sub_100008140(&qword_10031DBD8, &qword_10031DBE0, (void (*)(void))sub_1000C9660, (void (*)(void))sub_1000C9710);
}

unint64_t sub_1000C9660()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031DBE8;
  if (!qword_10031DBE8)
  {
    v1 = sub_100007FAC(&qword_10031DBF0);
    sub_1000C96CC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031DBE8);
  }
  return result;
}

unint64_t sub_1000C96CC()
{
  unint64_t result;

  result = qword_10031DBF8;
  if (!qword_10031DBF8)
  {
    result = swift_getWitnessTable(&unk_10024CF18, &type metadata for QuestionnaireBodyView);
    atomic_store(result, (unint64_t *)&qword_10031DBF8);
  }
  return result;
}

unint64_t sub_1000C9710()
{
  unint64_t result;

  result = qword_10031DC00;
  if (!qword_10031DC00)
  {
    result = swift_getWitnessTable(&unk_10024EACC, &type metadata for QuestionnaireAutoSendView);
    atomic_store(result, (unint64_t *)&qword_10031DC00);
  }
  return result;
}

unint64_t sub_1000C9754()
{
  unint64_t result;

  result = qword_10031DC08;
  if (!qword_10031DC08)
  {
    result = swift_getWitnessTable(&unk_10025B628, &type metadata for InitialConnectionView);
    atomic_store(result, (unint64_t *)&qword_10031DC08);
  }
  return result;
}

double sub_1000C9798(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  double result;

  if ((a10 & 1) == 0)
  {
    swift_bridgeObjectRetain(a9);
    swift_retain(a1);
    swift_retain(a3);
    swift_retain(a5);
    *(_QWORD *)&result = swift_retain(a7).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000C9804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8, uint64_t a9, __int16 a10, char a11, uint64_t (*a12)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD), uint64_t (*a13)(uint64_t))
{
  if ((a11 & 1) != 0)
    return a13(a1);
  else
    return a12(a1, a2, a3, a4, a5, a6, a7, a8 & 1);
}

void sub_1000C9838(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if ((a8 & 1) != 0)
  {
    sub_1000C98A4(a1, a2, a3, a4, a5);
  }
  else
  {
    swift_retain(a1);
    swift_retain(a3);
    sub_10007BB44(a5, a6, a7);
  }
}

double sub_1000C98A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;

  swift_retain(a5);
  swift_retain(a1);
  *(_QWORD *)&result = swift_retain(a3).n128_u64[0];
  return result;
}

double sub_1000C98D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char a11)
{
  double result;

  if ((a11 & 1) == 0)
    return sub_1000C9798(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10 & 1);
  swift_retain(a8);
  swift_retain(a1);
  swift_retain(a3);
  *(_QWORD *)&result = swift_retain(a5).n128_u64[0];
  return result;
}

unint64_t sub_1000C995C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031DC10;
  if (!qword_10031DC10)
  {
    v1 = sub_100007FAC(&qword_1003199A0);
    sub_10000AB3C();
    sub_1000084FC(&qword_100318880, &qword_100318888, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031DC10);
  }
  return result;
}

unint64_t sub_1000C99E4()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = qword_10031DC18;
  if (!qword_10031DC18)
  {
    v1 = sub_100007FAC(&qword_10031DB80);
    v2 = sub_100007FAC(&qword_10031DB50);
    v3 = sub_100007FAC(&qword_10031DB70);
    v6 = sub_100007FAC(&qword_10031DB60);
    v7 = sub_1000084FC(&qword_10031DB68, &qword_10031DB60, (uint64_t)&protocol conformance descriptor for VStack<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v5 = sub_1000084FC(&qword_10031DB78, &qword_10031DB70, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v6 = v2;
    v7 = v3;
    v8 = OpaqueTypeConformance2;
    v9 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    sub_1000084FC(&qword_10031DC20, &qword_10031DC28, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031DC18);
  }
  return result;
}

ValueMetadata *type metadata accessor for FullScreenGuidanceActionsButtonsView()
{
  return &type metadata for FullScreenGuidanceActionsButtonsView;
}

uint64_t sub_1000C9B24(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002992F4, 1);
}

uint64_t sub_1000C9B34@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _BOOL8 v4;
  uint64_t v5;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[89];
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  char v32;

  v2 = *(_QWORD *)(v1 + 32);
  if (v2)
  {
    if (*(_QWORD *)(v2 + 64))
    {
      v4 = sub_100067058(0, *(_QWORD *)(v2 + 88));
      v5 = *(_QWORD *)(v2 + 64);
      if (v4)
      {
        if (v5)
        {
          v6 = *(unsigned __int16 *)(v2 + 120);
          v4 = sub_100067058(0, *(_QWORD *)(v2 + 88));
          LOBYTE(v2) = 0;
          if (v4 && (v6 & 0xFF00) != 0x200)
            LODWORD(v2) = (v6 >> 8) & 1;
          goto LABEL_14;
        }
        goto LABEL_13;
      }
      if (v5)
      {
        v4 = sub_100067058(1u, *(_QWORD *)(v2 + 88));
        v7 = v4;
        if (*(_QWORD *)(v2 + 64)
          && (v8 = *(unsigned __int16 *)(v2 + 120), v4 = sub_100067058(0, *(_QWORD *)(v2 + 88)))
          && (v8 & 0xFF00) != 0x200)
        {
          LODWORD(v2) = (v8 >> 8) & 1;
          if (v7 | v2)
            goto LABEL_14;
        }
        else if (v7)
        {
LABEL_13:
          LOBYTE(v2) = 0;
LABEL_14:
          v9 = static HorizontalAlignment.center.getter(v4);
          sub_1000C9D3C(v1, v2, (uint64_t)&v25);
          *(_QWORD *)v23 = v9;
          *(_OWORD *)&v23[8] = xmmword_10024E030;
          *(_OWORD *)&v23[24] = v25;
          *(_OWORD *)&v23[40] = v26;
          *(_OWORD *)&v23[56] = v27;
          *(_OWORD *)&v23[72] = v28;
          v23[88] = v29;
          v24 = 0;
LABEL_17:
          v10 = sub_100003DB8(&qword_10031DC30);
          v11 = sub_1000084FC(&qword_10031DC38, &qword_10031DC30, (uint64_t)&protocol conformance descriptor for VStack<A>);
          result = _ConditionalContent<>.init(storage:)(v23, v10, &type metadata for EmptyView, v11, &protocol witness table for EmptyView);
          v13 = v26;
          v14 = v27;
          v15 = v28;
          v16 = v29;
          v17 = v30;
          v18 = v31;
          v19 = v32;
          *(_OWORD *)a1 = v25;
          *(_OWORD *)(a1 + 16) = v13;
          *(_OWORD *)(a1 + 32) = v14;
          *(_OWORD *)(a1 + 48) = v15;
          *(_OWORD *)(a1 + 64) = v16;
          *(_QWORD *)(a1 + 80) = v17;
          *(_BYTE *)(a1 + 88) = v18;
          *(_BYTE *)(a1 + 89) = v19;
          return result;
        }
      }
    }
    memset(v23, 0, sizeof(v23));
    v24 = 1;
    goto LABEL_17;
  }
  v20 = *(_QWORD *)(v1 + 40);
  v21 = type metadata accessor for StewieModel();
  v22 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v20, v21, v22);
  __break(1u);
  return result;
}

uint64_t sub_1000C9D3C@<X0>(uint64_t result@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int128 v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _OWORD *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)();
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t (*v50)();
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  char v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  char v59;
  __int128 v60;
  __int128 v61;

  v3 = result;
  v4 = *(_QWORD *)(result + 32);
  if (!v4)
  {
    v43 = *(_QWORD *)(result + 40);
    v44 = type metadata accessor for StewieModel();
    v45 = type metadata accessor for StewieModel;
    v46 = &qword_1003186E0;
    goto LABEL_19;
  }
  v6 = 0uLL;
  if (*(_QWORD *)(v4 + 64))
  {
    result = sub_100067058(0, *(_QWORD *)(v4 + 88));
    if ((result & 1) != 0)
    {
      if ((a2 & 1) != 0)
      {
        v8 = type metadata accessor for AppEvents();
        v9 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
        v10 = EnvironmentObject.init()(v8, v9);
        v12 = v11;
        v13 = type metadata accessor for UIMetrics();
        v14 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
        v15 = EnvironmentObject.init()(v13, v14);
        v17 = v16;
      }
      else
      {
        v12 = 0;
        v15 = 0;
        v17 = 0;
        v10 = 1;
      }
      v32 = *(_OWORD *)v3;
      v60 = *(_OWORD *)(v3 + 16);
      v61 = v32;
      v33 = (_OWORD *)swift_allocObject(&unk_1002ED900, 64, 7);
      v34 = *(_OWORD *)(v3 + 16);
      v33[1] = *(_OWORD *)v3;
      v33[2] = v34;
      v33[3] = *(_OWORD *)(v3 + 32);
      sub_100031A88(&v61);
      sub_100031A88(&v60);
      v35 = type metadata accessor for UIMetrics();
      v36 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
      swift_retain(v4);
      v37 = EnvironmentObject.init()(v35, v36);
      v39 = v38;
      sub_1000CA448(v10, v12, v15);
      swift_retain(v37);
      swift_retain(v33);
      sub_1000CA448(v10, v12, v15);
      sub_1000CA47C(v10, v12, v15);
      v48 = v10;
      v49 = v12;
      v50 = (uint64_t (*)())v15;
      v51 = v17;
      *(_QWORD *)&v52 = v37;
      *((_QWORD *)&v52 + 1) = v39;
      *(_QWORD *)&v53 = sub_1000CA440;
      *((_QWORD *)&v53 + 1) = v33;
      v54 = 0;
      sub_1000CA448(v10, v12, v15);
      swift_retain(v37);
      swift_retain(v33);
      v40 = sub_100003DB8(&qword_10031DC40);
      v41 = sub_1000084FC(&qword_10031DC48, &qword_10031DC40, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v42 = sub_1000CA3B4();
      _ConditionalContent<>.init(storage:)(&v48, v40, &type metadata for ShowMessagesButtonView, v41, v42);
      sub_1000CA47C(v10, v12, v15);
      sub_1000CA47C(v10, v12, v15);
      swift_release_n(v33);
      result = swift_release_n(v37);
      goto LABEL_16;
    }
    if (!*(_QWORD *)(v4 + 64) || (result = sub_100067058(1u, *(_QWORD *)(v4 + 88)), (result & 1) == 0))
    {
      v28 = -1;
      v29 = 0uLL;
      v30 = 0uLL;
      v31 = 0uLL;
      v6 = 0uLL;
      goto LABEL_17;
    }
    v18 = *(_QWORD *)(v3 + 16);
    v6 = 0uLL;
    if (!v18)
    {
      while (1)
      {
        v43 = *(_QWORD *)(v3 + 24);
        v44 = type metadata accessor for RoadsideAssistanceModel();
        v45 = type metadata accessor for RoadsideAssistanceModel;
        v46 = &qword_100318688;
LABEL_19:
        v47 = sub_1000052EC(v46, (uint64_t (*)(uint64_t))v45, (uint64_t)&unk_10024D2FC);
        EnvironmentObject.error()(0, v43, v44, v47);
        __break(1u);
      }
    }
    if (*(_BYTE *)(v18 + 248) != 3 && (*(_BYTE *)(v18 + 216) & 1) == 0)
    {
      v19 = *(_QWORD *)(v18 + 208);
      v61 = *(_OWORD *)v3;
      v20 = swift_allocObject(&unk_1002ED8D8, 72, 7);
      v21 = *(_OWORD *)(v3 + 16);
      *(_OWORD *)(v20 + 16) = *(_OWORD *)v3;
      *(_OWORD *)(v20 + 32) = v21;
      *(_OWORD *)(v20 + 48) = *(_OWORD *)(v3 + 32);
      *(_QWORD *)(v20 + 64) = v19;
      swift_retain(v4);
      sub_100031A88(&v61);
      v22 = type metadata accessor for UIMetrics();
      v23 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
      swift_retain(v18);
      v48 = EnvironmentObject.init()(v22, v23);
      v49 = v24;
      v50 = sub_1000CA3A8;
      v51 = v20;
      v52 = 0u;
      v53 = 0u;
      v54 = 1;
      v25 = sub_100003DB8(&qword_10031DC40);
      v26 = sub_1000084FC(&qword_10031DC48, &qword_10031DC40, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      v27 = sub_1000CA3B4();
      result = _ConditionalContent<>.init(storage:)(&v48, v25, &type metadata for ShowMessagesButtonView, v26, v27);
LABEL_16:
      v6 = v55;
      v29 = v56;
      v30 = v57;
      v31 = v58;
      v28 = v59;
      goto LABEL_17;
    }
  }
  v28 = -1;
  v29 = 0uLL;
  v30 = 0uLL;
  v31 = 0uLL;
LABEL_17:
  *(_OWORD *)a3 = v6;
  *(_OWORD *)(a3 + 16) = v29;
  *(_OWORD *)(a3 + 32) = v30;
  *(_OWORD *)(a3 + 48) = v31;
  *(_BYTE *)(a3 + 64) = v28;
  return result;
}

uint64_t sub_1000CA1D0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v1 = *a1;
  if (*a1)
  {
    v2 = *(_QWORD *)(v1 + 168);
    v10 = 0;
    swift_retain(v2);
    PassthroughSubject.send(_:)(&v10);
    swift_release(v2);
    v3 = *(_QWORD *)(v1 + 72);
    swift_retain(v3);
    v4 = sub_100003DB8(&qword_10032B0E0);
    v5 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v4, v5);
    return swift_release(v3);
  }
  else
  {
    v7 = a1[1];
    v8 = type metadata accessor for AppEvents();
    v9 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    result = EnvironmentObject.error()(0, v7, v8, v9);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000CA2B0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v2 = *a1;
  if (*a1)
  {
    v4 = *(_QWORD *)(v2 + 168);
    v11 = 0;
    swift_retain(v4);
    PassthroughSubject.send(_:)(&v11);
    swift_release(v4);
    v5 = *(_QWORD *)(v2 + 136);
    v10 = a2;
    swift_retain(v5);
    PassthroughSubject.send(_:)(&v10);
    return swift_release(v5);
  }
  else
  {
    v7 = a1[1];
    v8 = type metadata accessor for AppEvents();
    v9 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    result = EnvironmentObject.error()(0, v7, v8, v9);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000CA368@<X0>(uint64_t a1@<X8>)
{
  return sub_1000C9B34(a1);
}

uint64_t sub_1000CA3A0()
{
  return sub_1000CA400(72);
}

uint64_t sub_1000CA3A8()
{
  uint64_t v0;

  return sub_1000CA2B0((uint64_t *)(v0 + 16), *(_QWORD *)(v0 + 64));
}

unint64_t sub_1000CA3B4()
{
  unint64_t result;

  result = qword_10031DC50;
  if (!qword_10031DC50)
  {
    result = swift_getWitnessTable(&unk_100256EC8, &type metadata for ShowMessagesButtonView);
    atomic_store(result, (unint64_t *)&qword_10031DC50);
  }
  return result;
}

uint64_t sub_1000CA3F8()
{
  return sub_1000CA400(64);
}

uint64_t sub_1000CA400(uint64_t a1)
{
  _QWORD *v1;

  swift_release(v1[2]);
  swift_release(v1[4]);
  swift_release(v1[6]);
  return swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1000CA440()
{
  uint64_t v0;

  return sub_1000CA1D0((uint64_t *)(v0 + 16));
}

double sub_1000CA448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  if (a1 != 1)
  {
    swift_retain(a3);
    *(_QWORD *)&result = swift_retain(a1).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000CA47C(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != 1)
  {
    swift_release(result);
    return swift_release(a3);
  }
  return result;
}

unint64_t sub_1000CA4B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031DC58;
  if (!qword_10031DC58)
  {
    v1 = sub_100007FAC(&qword_10031DC60);
    sub_1000084FC(&qword_10031DC38, &qword_10031DC30, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031DC58);
  }
  return result;
}

uint64_t sub_1000CA534()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  _QWORD *v18;
  unint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  unint64_t v44;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v39 = *(_QWORD *)(v0 - 8);
  v40 = v0;
  __chkstk_darwin(v0, v1);
  v3 = (char *)&v39 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v13 = objc_msgSend(v12, "bundleIdentifier");

  if (v13)
  {
    v14 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

  }
  else
  {
    v16 = 0x8000000100260990;
    v14 = (_QWORD *)0xD000000000000012;
  }
  sub_10000D75C();
  v43 = v14;
  v44 = v16;
  swift_bridgeObjectRetain(v16);
  v17._countAndFlagsBits = 0x6E6567414445452ELL;
  v17._object = (void *)0xE900000000000074;
  String.append(_:)(v17);
  swift_bridgeObjectRelease(v16);
  v18 = v43;
  v19 = v44;
  static DispatchQoS.unspecified.getter(v20);
  v43 = _swiftEmptyArrayStorage;
  v21 = sub_1000052EC((unint64_t *)&unk_1003178B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = sub_100003DB8((uint64_t *)&unk_100324AE0);
  v23 = sub_10000F138((unint64_t *)&unk_1003178C0, (uint64_t *)&unk_100324AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v22, v23, v4, v21);
  (*(void (**)(char *, _QWORD, uint64_t))(v39 + 104))(v3, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v40);
  v24 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v18, v19, v11, v7, v3, 0);
  v25 = v41;
  *(_QWORD *)(v41 + 16) = v24;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v26 = type metadata accessor for Logger(0);
  sub_10000D744(v26, (uint64_t)qword_10033FD18);
  v28 = swift_retain_n(v25, v27);
  v29 = Logger.logObject.getter(v28);
  v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc(12, -1);
    v32 = (_QWORD *)swift_slowAlloc(32, -1);
    v42 = v25;
    v43 = v32;
    *(_DWORD *)v31 = 136446210;
    v33 = type metadata accessor for EEDAgent();
    v34 = swift_retain(v25);
    v35 = String.init<A>(describing:)(&v42, v33, v34);
    v37 = v36;
    v42 = sub_100172BEC(v35, v36, (uint64_t *)&v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v31 + 4, v31 + 12);
    swift_release_n(v25);
    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "[%{public}s] init", v31, 0xCu);
    swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1, -1);
    swift_slowDealloc(v31, -1, -1);

  }
  else
  {

    swift_release_n(v25);
  }
  return v25;
}

uint64_t sub_1000CA908()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = swift_retain_n(v0, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v1;
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for EEDAgent();
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v9, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] deinit", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }

  return v1;
}

uint64_t sub_1000CAACC()
{
  uint64_t v0;

  sub_1000CA908();
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for EEDAgent()
{
  return objc_opt_self(_TtC8SOSBuddy8EEDAgent);
}

uint64_t sub_1000CAB0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  void *v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  void *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, char *, uint64_t);
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  void **aBlock;
  uint64_t v77;
  uint64_t (*v78)(uint64_t);
  void *v79;
  uint64_t (*v80)();
  uint64_t v81;

  v72 = a3;
  v73 = a2;
  v66 = a1;
  v5 = type metadata accessor for DispatchTime(0);
  v70 = *(_QWORD *)(v5 - 8);
  v71 = v5;
  v7 = __chkstk_darwin(v5, v6);
  v68 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  v69 = (char *)&v55 - v10;
  v11 = type metadata accessor for DispatchWorkItemFlags(0);
  v67 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for DispatchQoS(0);
  v64 = *(_QWORD *)(v74 - 8);
  __chkstk_darwin(v74, v15);
  v17 = (char *)&v55 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = *(_QWORD *)(v19 + 64);
  v22 = __chkstk_darwin(v18, v21);
  v23 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v24);
  v26 = (char *)&v55 - v25;
  v55 = *(_QWORD *)(v3 + 16);
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
  v65 = v27;
  v27((char *)&v55 - v25, a1, v18);
  v27(v23, (uint64_t)v26, v18);
  v28 = *(unsigned __int8 *)(v19 + 80);
  v29 = (v28 + 16) & ~v28;
  v30 = v28 | 7;
  v62 = v28 | 7;
  v31 = v20 + v29;
  v32 = v29;
  v63 = v29;
  v33 = (v31 + 7) & 0xFFFFFFFFFFFFFFF8;
  v61 = v33 + 16;
  v34 = v33;
  v60 = v33;
  v35 = swift_allocObject(&unk_1002ED960, v33 + 16, v30);
  v59 = *(void (**)(uint64_t, char *, uint64_t))(v19 + 32);
  v59(v35 + v32, v23, v18);
  v36 = (_QWORD *)(v35 + v34);
  v37 = v72;
  *v36 = v73;
  v36[1] = v37;
  v80 = sub_1000CBBE8;
  v81 = v35;
  aBlock = _NSConcreteStackBlock;
  v77 = 1107296256;
  v78 = sub_1001BAACC;
  v79 = &unk_1002ED978;
  v38 = _Block_copy(&aBlock);
  v39 = swift_retain(v37);
  static DispatchQoS.unspecified.getter(v39);
  v75 = _swiftEmptyArrayStorage;
  v40 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v58 = v40;
  v41 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v57 = v41;
  v56 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v41, v56, v11, v40);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v14, v38);
  _Block_release(v38);
  v67 = *(_QWORD *)(v67 + 8);
  ((void (*)(char *, uint64_t))v67)(v14, v11);
  v64 = *(_QWORD *)(v64 + 8);
  ((void (*)(char *, uint64_t))v64)(v17, v74);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v26, v18);
  swift_release(v81);
  sub_10000D75C();
  v43 = (void *)static OS_dispatch_queue.main.getter(v42);
  v44 = v68;
  static DispatchTime.now()(v43);
  v45 = v69;
  + infix(_:_:)(v44, 2.0);
  v46 = v71;
  v47 = *(void (**)(char *, uint64_t))(v70 + 8);
  v47(v44, v71);
  v65(v26, v66, v18);
  v48 = swift_allocObject(&unk_1002ED9B0, v61, v62);
  v59(v48 + v63, v26, v18);
  v49 = (_QWORD *)(v48 + v60);
  v50 = v72;
  *v49 = v73;
  v49[1] = v50;
  v80 = sub_1000CC13C;
  v81 = v48;
  aBlock = _NSConcreteStackBlock;
  v77 = 1107296256;
  v78 = sub_1001BAACC;
  v79 = &unk_1002ED9C8;
  v51 = _Block_copy(&aBlock);
  v52 = v81;
  swift_retain(v50);
  swift_release(v52);
  static DispatchQoS.unspecified.getter(v53);
  aBlock = (void **)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v57, v56, v11, v58);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v45, v17, v14, v51);
  _Block_release(v51);

  ((void (*)(char *, uint64_t))v67)(v14, v11);
  ((void (*)(char *, uint64_t))v64)(v17, v74);
  return ((uint64_t (*)(char *, uint64_t))v47)(v45, v46);
}

uint64_t sub_1000CB008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint8_t *v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint8_t *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  unint64_t v48;
  unint64_t v49;
  id v50;
  id v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  NSObject *v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  void *v65;
  id v66;
  id v67;
  void *v68;
  uint64_t v69;
  id v70;
  char *v71;
  id v72;
  NSObject *v73;
  os_log_type_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  id v81;
  id v82;
  char *v83;
  id v84;
  NSObject *v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  void *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  __n128 v101;
  void *v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  unint64_t v114;
  void *v115;
  uint64_t v116;
  char *v117;
  __n128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v126;
  void *v127;
  char *v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t (*v143)(char *, uint64_t, uint64_t);
  void (*v144)(char *, uint64_t);
  char *v145;
  uint64_t v146;
  uint64_t v147;
  id aBlock[5];
  uint64_t v149;

  v134 = a3;
  v133 = a2;
  v146 = a1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v139 = *(_QWORD *)(v3 - 8);
  v140 = v3;
  __chkstk_darwin(v3, v4);
  v138 = (char *)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v136 = *(_QWORD *)(v6 - 8);
  v137 = v6;
  __chkstk_darwin(v6, v7);
  v135 = (char *)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID(0);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = __chkstk_darwin(v9, v11);
  v131 = (char *)&v126 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12, v14);
  v17 = (char *)&v126 - v16;
  v19 = __chkstk_darwin(v15, v18);
  v128 = (char *)&v126 - v20;
  v22 = __chkstk_darwin(v19, v21);
  v24 = (char *)&v126 - v23;
  v130 = v25;
  __chkstk_darwin(v22, v26);
  v28 = (char *)&v126 - v27;
  if (qword_100315850 != -1)
    swift_once(&qword_100315850, sub_1000D9694);
  v29 = type metadata accessor for Logger(0);
  v30 = sub_10000D744(v29, (uint64_t)qword_10033FDA8);
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v32 = v31(v28, v146, v9);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  v35 = os_log_type_enabled(v33, v34);
  v143 = v31;
  v132 = v10;
  v141 = v30;
  if (v35)
  {
    v36 = swift_slowAlloc(12, -1);
    v145 = v24;
    v37 = (uint8_t *)v36;
    v38 = (void *)swift_slowAlloc(32, -1);
    aBlock[0] = v38;
    v129 = v17;
    *(_DWORD *)v37 = 136315138;
    v39 = sub_1000052EC(&qword_100316EB8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v40 = dispatch thunk of CustomStringConvertible.description.getter(v9, v39);
    v42 = v41;
    v147 = sub_100172BEC(v40, v41, (uint64_t *)aBlock);
    v31 = v143;
    v17 = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, aBlock, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease(v42);
    v144 = *(void (**)(char *, uint64_t))(v10 + 8);
    v144(v28, v9);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "[ID: %s] fetchStateAsync: fetching", v37, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    v43 = v37;
    v24 = v145;
    swift_slowDealloc(v43, -1, -1);
  }
  else
  {
    v144 = *(void (**)(char *, uint64_t))(v10 + 8);
    v144(v28, v9);
  }

  aBlock[0] = 0;
  v44 = (id)CLGetEEDCloakingKey(aBlock);
  v45 = aBlock[0];
  if (v44)
  {
    v46 = v44;
    v47 = aBlock[0];
    v145 = (char *)static Data._unconditionallyBridgeFromObjectiveC(_:)(v46);
    v49 = v48;

    if (!v45)
      goto LABEL_14;
  }
  else
  {
    v50 = aBlock[0];
    v145 = 0;
    v49 = 0xF000000000000000;
    if (!v45)
      goto LABEL_14;
  }
  v31(v24, v146, v9);
  v51 = v45;
  v52 = Logger.logObject.getter(v51);
  v53 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v52, v53))
  {
    v54 = swift_slowAlloc(22, -1);
    v127 = (void *)swift_slowAlloc(64, -1);
    aBlock[0] = v127;
    *(_DWORD *)v54 = 136315394;
    v55 = sub_1000052EC(&qword_100316EB8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v56 = dispatch thunk of CustomStringConvertible.description.getter(v9, v55);
    v58 = v57;
    v147 = sub_100172BEC(v56, v57, (uint64_t *)aBlock);
    v129 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, aBlock, v54 + 4, v54 + 12);
    swift_bridgeObjectRelease(v58);
    v144(v24, v9);
    *(_WORD *)(v54 + 12) = 2082;
    v142 = v49;
    v59 = v51;
    v60 = -[NSObject description](v59, "description");
    v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
    LOBYTE(v58) = v53;
    v63 = v62;

    v64 = v61;
    v31 = v143;
    v147 = sub_100172BEC(v64, v63, (uint64_t *)aBlock);
    v17 = v129;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, aBlock, v54 + 14, v54 + 22);

    swift_bridgeObjectRelease(v63);
    _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v58, "[ID: %s] CLGetEEDCloakingKey returned error: %{public}s", (uint8_t *)v54, 0x16u);
    v65 = v127;
    swift_arrayDestroy(v127, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1, -1);
    swift_slowDealloc(v54, -1, -1);
    sub_10000D730((uint64_t)v145, v142);

    v52 = v59;
  }
  else
  {

    v144(v24, v9);
    sub_10000D730((uint64_t)v145, v49);

  }
  v145 = 0;
  v49 = 0xF000000000000000;
LABEL_14:
  v142 = v49;
  aBlock[0] = 0;
  v66 = (id)CLGetEEDEmergencyContactNames(aBlock);
  v67 = aBlock[0];
  v68 = v67;
  if (v66)
  {
    v69 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v66, &type metadata for String);

    if (!v68)
      goto LABEL_22;
  }
  else
  {
    v69 = 0;
    if (!v67)
      goto LABEL_22;
  }
  v70 = v68;
  swift_bridgeObjectRelease(v69);
  v71 = v128;
  v31(v128, v146, v9);
  v72 = v70;
  v73 = Logger.logObject.getter(v72);
  v74 = static os_log_type_t.error.getter();
  v75 = v74;
  if (os_log_type_enabled(v73, v74))
  {
    v76 = swift_slowAlloc(22, -1);
    v129 = (char *)swift_slowAlloc(64, -1);
    aBlock[0] = v129;
    *(_DWORD *)v76 = 136315394;
    v77 = sub_1000052EC(&qword_100316EB8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v78 = dispatch thunk of CustomStringConvertible.description.getter(v9, v77);
    v80 = v79;
    v147 = sub_100172BEC(v78, v79, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, aBlock, v76 + 4, v76 + 12);
    swift_bridgeObjectRelease(v80);
    v144(v71, v9);
    *(_WORD *)(v76 + 12) = 2082;
    v127 = (void *)(v76 + 14);
    v81 = v72;
    LODWORD(v128) = v75;
    v82 = v81;
    v83 = v17;
    v84 = objc_msgSend(v81, "description");
    v85 = v73;
    v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
    v88 = v87;

    v17 = v83;
    v147 = sub_100172BEC(v86, v88, (uint64_t *)aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, aBlock, v127, v76 + 22);

    v89 = v88;
    v31 = v143;
    swift_bridgeObjectRelease(v89);
    _os_log_impl((void *)&_mh_execute_header, v85, (os_log_type_t)v128, "[ID: %s] CLGetEEDEmergencyContactNames returned error: %{public}s", (uint8_t *)v76, 0x16u);
    v90 = v129;
    swift_arrayDestroy(v129, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v90, -1, -1);
    swift_slowDealloc(v76, -1, -1);

  }
  else
  {

    v144(v71, v9);
  }

  v69 = 0;
LABEL_22:
  v91 = v31(v17, v146, v9);
  v92 = Logger.logObject.getter(v91);
  v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    v94 = (uint8_t *)swift_slowAlloc(12, -1);
    v95 = (void *)swift_slowAlloc(32, -1);
    aBlock[0] = v95;
    *(_DWORD *)v94 = 136315138;
    v96 = sub_1000052EC(&qword_100316EB8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v97 = dispatch thunk of CustomStringConvertible.description.getter(v9, v96);
    v99 = v98;
    v147 = sub_100172BEC(v97, v98, (uint64_t *)aBlock);
    v31 = v143;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v147, aBlock, v94 + 4, v94 + 12);
    swift_bridgeObjectRelease(v99);
    v144(v17, v9);
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "[ID: %s] fetchStateAsync: done", v94, 0xCu);
    swift_arrayDestroy(v95, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v95, -1, -1);
    swift_slowDealloc(v94, -1, -1);
  }
  else
  {
    v144(v17, v9);
  }

  v100 = v132;
  sub_10000D75C();
  v102 = (void *)static OS_dispatch_queue.main.getter(v101);
  v103 = v131;
  v31(v131, v146, v9);
  v104 = *(unsigned __int8 *)(v100 + 80);
  v105 = (v104 + 16) & ~v104;
  v106 = (v130 + v105 + 7) & 0xFFFFFFFFFFFFFFF8;
  v107 = (v106 + 23) & 0xFFFFFFFFFFFFFFF8;
  v108 = (v107 + 23) & 0xFFFFFFFFFFFFFFF8;
  v109 = swift_allocObject(&unk_1002EDA00, v108 + 8, v104 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v100 + 32))(v109 + v105, v103, v9);
  v110 = (_QWORD *)(v109 + v106);
  v111 = v134;
  *v110 = v133;
  v110[1] = v111;
  v112 = (_QWORD *)(v109 + v107);
  v113 = (uint64_t)v145;
  v114 = v142;
  *v112 = v145;
  v112[1] = v114;
  *(_QWORD *)(v109 + v108) = v69;
  aBlock[4] = sub_1000CC248;
  v149 = v109;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002EDA18;
  v115 = _Block_copy(aBlock);
  v116 = v149;
  swift_retain(v111);
  sub_10000D71C(v113, v114);
  swift_release(v116);
  v117 = v135;
  static DispatchQoS.unspecified.getter(v118);
  aBlock[0] = _swiftEmptyArrayStorage;
  v119 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v120 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v121 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
  v122 = v138;
  v123 = v120;
  v124 = v140;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v123, v121, v140, v119);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v117, v122, v115);
  _Block_release(v115);

  sub_10000D730(v113, v114);
  (*(void (**)(char *, uint64_t))(v139 + 8))(v122, v124);
  return (*(uint64_t (**)(char *, uint64_t))(v136 + 8))(v117, v137);
}

uint64_t sub_1000CBBE8()
{
  return sub_1000CC148((uint64_t (*)(unint64_t, _QWORD, _QWORD))sub_1000CB008);
}

double sub_1000CBBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000CBC04(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000CBC0C(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, __n128), uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint8_t *v30;
  __n128 v31;
  void (*v33)(_QWORD, _QWORD, _QWORD, _QWORD, __n128);
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v38 = a3;
  v11 = type metadata accessor for UUID(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315850 != -1)
    swift_once(&qword_100315850, sub_1000D9694);
  v16 = type metadata accessor for Logger(0);
  sub_10000D744(v16, (uint64_t)qword_10033FDA8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16);
  v37 = a1;
  v18 = v17(v15, a1, v11);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc(12, -1);
    v36 = a6;
    v22 = (uint8_t *)v21;
    v23 = swift_slowAlloc(32, -1);
    v33 = a2;
    v24 = v23;
    v40 = v23;
    v34 = a4;
    v35 = a5;
    *(_DWORD *)v22 = 136315138;
    v25 = sub_1000052EC(&qword_100316EB8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v26 = dispatch thunk of CustomStringConvertible.description.getter(v11, v25);
    v28 = v27;
    v39 = sub_100172BEC(v26, v27, &v40);
    a4 = v34;
    a5 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease(v28);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "[ID: %s] fetchStateAsync: done and notifying", v22, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    v29 = v24;
    a2 = v33;
    swift_slowDealloc(v29, -1, -1);
    v30 = v22;
    a6 = v36;
    swift_slowDealloc(v30, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  }

  sub_10000D71C(a4, a5);
  v31 = swift_bridgeObjectRetain(a6);
  a2(v37, a4, a5, a6, v31);
  sub_10000D730(a4, a5);
  return swift_bridgeObjectRelease(a6);
}

uint64_t sub_1000CBE84(uint64_t a1, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint8_t *v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v28;
  uint64_t v29;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315850 != -1)
    swift_once(&qword_100315850, sub_1000D9694);
  v11 = type metadata accessor for Logger(0);
  sub_10000D744(v11, (uint64_t)qword_10033FDA8);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(12, -1);
    v27 = a2;
    v16 = (uint8_t *)v15;
    v17 = swift_slowAlloc(32, -1);
    v29 = v17;
    v25 = a1;
    v26 = a3;
    *(_DWORD *)v16 = 136315138;
    v18 = sub_1000052EC(&qword_100316EB8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v19 = dispatch thunk of CustomStringConvertible.description.getter(v6, v18);
    v21 = v20;
    v28 = sub_100172BEC(v19, v20, &v29);
    a1 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v21);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "[ID: %s] fetchStateAsync: failsafe timeout triggered", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    v22 = v16;
    a2 = v27;
    swift_slowDealloc(v22, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }

  return a2(a1, 0, 0xF000000000000000, 0);
}

uint64_t sub_1000CC0C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000CC13C()
{
  return sub_1000CC148((uint64_t (*)(unint64_t, _QWORD, _QWORD))sub_1000CBE84);
}

uint64_t sub_1000CC148(uint64_t (*a1)(unint64_t, _QWORD, _QWORD))
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (_QWORD *)(v1 + ((*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a1(v1 + v3, *v4, v4[1]);
}

uint64_t sub_1000CC19C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(_QWORD *)(v0 + v5 + 8));
  v7 = *(_QWORD *)(v0 + v6 + 8);
  if (v7 >> 60 != 15)
    sub_10000CCCC(*(_QWORD *)(v0 + v6), v7);
  v8 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  v9 = v8 + 8;
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + v8));
  return swift_deallocObject(v0, v9, v3 | 7);
}

uint64_t sub_1000CC248()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for UUID(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_1000CBC0C(v0 + v2, *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, __n128))(v0 + v3), *(_QWORD *)(v0 + v3 + 8), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(_QWORD *)(v0 + ((((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000CC2B8(uint64_t a1)
{
  _QWORD v2[2];

  v2[0] = &unk_100253E58;
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 2, v2, a1 + 96);
}

__n128 sub_1000CC304()
{
  __n128 result;

  __asm { FMOV            V0.2D, #28.0 }
  xmmword_10033FCF0 = (__int128)result;
  return result;
}

BOOL sub_1000CC314(char *a1, char *a2)
{
  return static ConnectionAssistantRendererEarthOutline.Error.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_1000CC320()
{
  unsigned __int8 *v0;

  return ConnectionAssistantRendererEarthOutline.Error.hashValue.getter(*v0);
}

void sub_1000CC328(uint64_t a1)
{
  unsigned __int8 *v1;

  ConnectionAssistantRendererEarthOutline.Error.hash(into:)(a1, *v1);
}

Swift::Int sub_1000CC330(uint64_t a1)
{
  unsigned __int8 *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  ConnectionAssistantRendererEarthOutline.Error.hash(into:)((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

void sub_1000CC36C()
{
  sub_1000CC620();
}

uint64_t sub_1000CC398(uint64_t a1)
{
  void *v1;
  id v3;

  v3 = v1;
  return a1;
}

void sub_1000CC3B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  id v6;
  void *v7;
  objc_super v8;

  v5 = (objc_class *)type metadata accessor for SessionAccessoryView(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), *(_QWORD *)((swift_isaMask & *v4) + 0x58), a4);
  v8.receiver = v4;
  v8.super_class = v5;
  objc_msgSendSuper2(&v8, "layoutSubviews");
  v6 = objc_msgSend(*(id *)((char *)v4 + qword_10031DD28), "view");
  if (v6)
  {
    v7 = v6;
    objc_msgSend(v4, "bounds");
    objc_msgSend(v7, "setFrame:");

  }
}

void sub_1000CC450(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;

  v4 = a1;
  sub_1000CC3B0((uint64_t)v4, v1, v2, v3);

}

double sub_1000CC484(void *a1)
{
  id v1;
  double v2;

  v1 = a1;
  v2 = sub_1000CC678();

  return v2;
}

void sub_1000CC4C4()
{
  sub_1000CC6E4();
}

id sub_1000CC4E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for SessionAccessoryView(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), *(_QWORD *)((swift_isaMask & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

void sub_1000CC52C(uint64_t a1)
{

}

uint64_t type metadata accessor for SessionAccessoryView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionAccessoryView);
}

uint64_t sub_1000CC548(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000CC594 + 4 * byte_100253E35[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000CC5C8 + 4 * asc_100253E30[v4]))();
}

uint64_t sub_1000CC5C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CC5D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000CC5D8);
  return result;
}

uint64_t sub_1000CC5E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000CC5ECLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000CC5F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000CC5F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for SessionAccessoryView.AccessoryRole(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionAccessoryView.AccessoryRole);
}

uint64_t sub_1000CC610(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100253EF8, a1);
}

void sub_1000CC620()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100260900, "SOSBuddy/SessionAccessoryView.swift", 35, 2, 43, 0);
  __break(1u);
}

double sub_1000CC678()
{
  uint64_t v0;
  unsigned int v1;
  double v2;

  v1 = *(unsigned __int8 *)(v0 + qword_10031DD20);
  if (qword_1003157E8 != -1)
    swift_once(&qword_1003157E8, sub_1000CC304);
  v2 = 0.0;
  if (v1 < 2)
    v2 = 3.0;
  return *(double *)&xmmword_10033FCF0 - v2;
}

void sub_1000CC6E4()
{
  _swift_stdlib_reportUnimplementedInitializer("SOSBuddy.SessionAccessoryView", 29, "init(frame:)", 12, 0);
  __break(1u);
}

uint64_t destroy for ExplorerTryOutConnectButton(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[4]);
}

uint64_t initializeWithCopy for ExplorerTryOutConnectButton(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v5 = a2[4];
  *(_QWORD *)(a1 + 32) = v5;
  swift_retain(v3);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for ExplorerTryOutConnectButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  v6 = a1[4];
  v7 = a2[4];
  a1[4] = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

uint64_t *assignWithTake for ExplorerTryOutConnectButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  v5 = a1[4];
  a1[4] = a2[4];
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExplorerTryOutConnectButton(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 40))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExplorerTryOutConnectButton(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExplorerTryOutConnectButton()
{
  return &type metadata for ExplorerTryOutConnectButton;
}

uint64_t sub_1000CC91C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100299444, 1);
}

uint64_t sub_1000CC92C@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  id v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  __int128 *v89;
  uint64_t v90;
  char v91[16];
  __int128 *v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  unsigned __int8 v96;
  Swift::String v97;
  __int128 v98;
  __int128 v99;
  Swift::String v100;

  v90 = a1;
  v2 = type metadata accessor for ControlSize(0);
  v87 = *(_QWORD *)(v2 - 8);
  v88 = v2;
  __chkstk_darwin(v2, v3);
  v86 = (char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for BorderedProminentButtonStyle(0);
  v83 = *(_QWORD *)(v82 - 8);
  __chkstk_darwin(v82, v5);
  v79 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for ButtonBorderShape(0);
  v76 = *(_QWORD *)(v77 - 8);
  __chkstk_darwin(v77, v7);
  v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100003DB8(&qword_10031DE90);
  v74 = *(_QWORD *)(v75 - 8);
  __chkstk_darwin(v75, v10);
  v12 = (char *)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100003DB8(&qword_10031DE98);
  __chkstk_darwin(v73, v13);
  v15 = (char *)&v73 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100003DB8(&qword_10031DEA0);
  v80 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81, v16);
  v18 = (char *)&v73 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = sub_100003DB8(&qword_10031DEA8);
  __chkstk_darwin(v78, v19);
  v21 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100003DB8(&qword_10031DEB0);
  __chkstk_darwin(v85, v22);
  v84 = (uint64_t)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *v1;
  v98 = *(__int128 *)((char *)v1 + 24);
  v99 = v24;
  v25 = swift_allocObject(&unk_1002EDC40, 56, 7);
  v89 = v1;
  v26 = v1[1];
  *(_OWORD *)(v25 + 16) = *v1;
  *(_OWORD *)(v25 + 32) = v26;
  *(_QWORD *)(v25 + 48) = *((_QWORD *)v1 + 4);
  sub_100031A88(&v99);
  sub_100005C8C((uint64_t)&v98);
  v27 = sub_100003DB8(&qword_10031DEB8);
  v28 = sub_100007FAC(&qword_1003199C8);
  v29 = sub_10002B614(&qword_1003199E8, &qword_1003199C8, (void (*)(void))sub_100055918);
  v94 = v28;
  v95 = v29;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v94, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
  v31 = Button.init(action:label:)(sub_1000CD538, v25, sub_1000CD048, 0, v27, OpaqueTypeConformance2);
  static ButtonBorderShape.roundedRectangle.getter(v31);
  KeyPath = swift_getKeyPath(&unk_100253F90);
  v33 = v73;
  v34 = (uint64_t *)&v15[*(int *)(v73 + 36)];
  v35 = sub_100003DB8(&qword_100318968);
  v36 = v76;
  v37 = v77;
  (*(void (**)(char *, char *, uint64_t))(v76 + 16))((char *)v34 + *(int *)(v35 + 28), v9, v77);
  *v34 = KeyPath;
  v38 = v74;
  v39 = v75;
  (*(void (**)(char *, char *, uint64_t))(v74 + 16))(v15, v12, v75);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v37);
  v40 = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v12, v39);
  v41 = v79;
  BorderedProminentButtonStyle.init()(v40);
  v42 = sub_1000CD58C();
  v43 = sub_1000052EC(&qword_100318960, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v44 = v82;
  View.buttonStyle<A>(_:)(v41, v33, v82, v42, v43);
  (*(void (**)(char *, uint64_t))(v83 + 8))(v41, v44);
  sub_100007FF0((uint64_t)v15, &qword_10031DE98);
  v46 = v87;
  v45 = v88;
  v47 = v86;
  (*(void (**)(char *, _QWORD, uint64_t))(v87 + 104))(v86, enum case for ControlSize.large(_:), v88);
  v48 = swift_getKeyPath(&unk_100253FC0);
  v49 = (uint64_t *)&v21[*(int *)(v78 + 36)];
  v50 = sub_100003DB8(&qword_100316C38);
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))((char *)v49 + *(int *)(v50 + 28), v47, v45);
  *v49 = v48;
  v51 = v80;
  v52 = v81;
  (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v21, v18, v81);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v45);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v18, v52);
  v53 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray4Color");
  v54 = Color.init(uiColor:)(v53);
  v55 = swift_getKeyPath(&unk_100253FF0);
  v94 = v54;
  v56 = swift_retain(v54);
  v57 = AnyShapeStyle.init<A>(_:)(&v94, &type metadata for Color, &protocol witness table for Color, v56);
  v58 = v84;
  sub_10000B234((uint64_t)v21, v84, &qword_10031DEA8);
  swift_release(v54);
  v59 = v85;
  v60 = (uint64_t *)(v58 + *(int *)(v85 + 36));
  *v60 = v55;
  v60[1] = v57;
  sub_100007FF0((uint64_t)v21, &qword_10031DEA8);
  v61 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v100._countAndFlagsBits = 0xD00000000000007ALL;
  v100._object = (void *)0x8000000100267720;
  v62._object = (void *)0x8000000100267700;
  v62._countAndFlagsBits = 0xD00000000000001ELL;
  v63._countAndFlagsBits = 0;
  v63._object = (void *)0xE000000000000000;
  v64 = NSLocalizedString(_:tableName:bundle:value:comment:)(v62, (Swift::String_optional)0, (NSBundle)v61, v63, v100);

  v97 = v64;
  v93 = v98;
  v65 = sub_100003DB8(&qword_100316780);
  State.projectedValue.getter(&v94, v65);
  v66 = v94;
  v67 = v95;
  v68 = v96;
  v92 = v89;
  v69 = sub_1000CD640();
  v70 = sub_10002B3F4();
  v71 = sub_10009A25C();
  View.alert<A, B, C>(_:isPresented:actions:message:)(&v97, v66, v67, v68, sub_1000CD638, v91, sub_100097290, 0, v59, &type metadata for String, &type metadata for TryOutConnectionAlertButtonsView, &type metadata for Text, v69, v70, v71, &protocol witness table for Text);
  swift_release(v67);
  swift_release(v66);
  swift_bridgeObjectRelease(v97._object);
  return sub_100007FF0(v58, &qword_10031DEB0);
}

uint64_t sub_1000CD048@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  id v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  unint64_t v23;
  __n128 v24;
  void *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t KeyPath;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  char v47;
  uint64_t v48;
  Swift::String v49;

  v45 = a1;
  v43 = sub_100003DB8(&qword_100316A20);
  __chkstk_darwin(v43, v1);
  v3 = (char *)&v42 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003DB8(&qword_1003199B0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100003DB8(&qword_1003199B8);
  __chkstk_darwin(v42, v9);
  v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_1003199C0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100003DB8(&qword_1003199C8);
  __chkstk_darwin(v44, v16);
  v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v49._countAndFlagsBits = 0xD00000000000004DLL;
  v49._object = (void *)0x80000001002637B0;
  v20._object = (void *)0x8000000100263790;
  v20._countAndFlagsBits = 0xD000000000000019;
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, (Swift::String_optional)0, (NSBundle)v19, v21, v49);

  v46 = v22;
  v23 = sub_10002B3F4();
  v46._countAndFlagsBits = Text.init<A>(_:)(&v46, &type metadata for String, v23, v24);
  v46._object = v25;
  v47 = v26 & 1;
  v48 = v27;
  v28 = enum case for DynamicTypeSize.accessibility2(_:);
  v29 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 104))(v3, v28, v29);
  v30 = sub_1000052EC(&qword_100316A30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v3, v3, v29, v30);
  if ((result & 1) != 0)
  {
    v32 = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    View.dynamicTypeSize<A>(_:)(v3, &type metadata for Text, v43, &protocol witness table for Text, v32);
    sub_100007FF0((uint64_t)v3, &qword_100316A20);
    sub_10002B438(v46._countAndFlagsBits, (uint64_t)v46._object, v47);
    swift_bridgeObjectRelease(v48);
    KeyPath = swift_getKeyPath(&unk_100254020);
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v11, v8, v4);
    v34 = &v11[*(int *)(v42 + 36)];
    *(_QWORD *)v34 = KeyPath;
    v34[8] = 1;
    v35 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v36 = static Alignment.center.getter(v35);
    sub_100131EE8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v15, 0.0, 1, 0.0, 1, v36, v37);
    sub_100007FF0((uint64_t)v11, &qword_1003199B8);
    sub_10000B234((uint64_t)v15, (uint64_t)v18, &qword_1003199C0);
    v38 = v44;
    *(_WORD *)&v18[*(int *)(v44 + 36)] = 256;
    v39 = sub_100007FF0((uint64_t)v15, &qword_1003199C0);
    v40 = static Font.Weight.semibold.getter(v39);
    v41 = sub_10002B614(&qword_1003199E8, &qword_1003199C8, (void (*)(void))sub_100055918);
    View.fontWeight(_:)(*(_QWORD *)&v40, 0, v38, v41);
    return sub_100007FF0((uint64_t)v18, &qword_1003199C8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000CD470@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;

  v3 = *(_BYTE *)(a1 + 16);
  v4 = type metadata accessor for AppEvents();
  v5 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  result = EnvironmentObject.init()(v4, v5);
  *(_QWORD *)a2 = result;
  *(_QWORD *)(a2 + 8) = v7;
  *(_BYTE *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_1000CD4D4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000CC92C(a1);
}

uint64_t sub_1000CD50C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000CD538()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;

  v4 = *(_OWORD *)(v0 + 40);
  v3 = 1;
  v1 = sub_100003DB8(&qword_100316780);
  return State.wrappedValue.setter(&v3, v1);
}

unint64_t sub_1000CD58C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031DEC0;
  if (!qword_10031DEC0)
  {
    v1 = sub_100007FAC(&qword_10031DE98);
    sub_1000084FC(&qword_10031DEC8, &qword_10031DE90, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_1000084FC(&qword_100318978, &qword_100318968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031DEC0);
  }
  return result;
}

uint64_t sub_1000CD638@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000CD470(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000CD640()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031DED0;
  if (!qword_10031DED0)
  {
    v1 = sub_100007FAC(&qword_10031DEB0);
    sub_1000CD6C4();
    sub_1000084FC(&qword_100318880, &qword_100318888, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031DED0);
  }
  return result;
}

unint64_t sub_1000CD6C4()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10031DED8;
  if (!qword_10031DED8)
  {
    v1 = sub_100007FAC(&qword_10031DEA8);
    v2[0] = sub_100007FAC(&qword_10031DE98);
    v2[1] = type metadata accessor for BorderedProminentButtonStyle(255);
    v2[2] = sub_1000CD58C();
    v2[3] = sub_1000052EC(&qword_100318960, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_1000084FC(&qword_100316C30, &qword_100316C38, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031DED8);
  }
  return result;
}

uint64_t sub_1000CD7BC()
{
  _QWORD v1[8];

  v1[0] = sub_100007FAC(&qword_10031DEB0);
  v1[1] = &type metadata for String;
  v1[2] = &type metadata for TryOutConnectionAlertButtonsView;
  v1[3] = &type metadata for Text;
  v1[4] = sub_1000CD640();
  v1[5] = sub_10002B3F4();
  v1[6] = sub_10009A25C();
  v1[7] = &protocol witness table for Text;
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.alert<A, B, C>(_:isPresented:actions:message:)>>, 1);
}

uint64_t sub_1000CD84C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v20;

  v14 = *(_QWORD *)(a4 - 8);
  __chkstk_darwin(a1, a2);
  v16 = (char *)&v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v17);
  v18 = (_QWORD *)swift_allocObject(&unk_1002EE670, 64, 7);
  v18[2] = a4;
  v18[3] = a5;
  v18[4] = a6;
  v18[5] = a7;
  v18[6] = a2;
  v18[7] = a3;
  TimelineView<>.init(_:content:)(v16, sub_1000D3794, v18, a4, a5, a6, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(a1, a4);
}

double sub_1000CD940(uint64_t a1, double a2)
{
  uint64_t v2;
  double result;
  double v5;
  double *v6;
  uint64_t v7;
  double v8;
  double v9;
  double *v10;
  BOOL v11;
  double v12;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
    return 0.0;
  result = *(double *)(a1 + 32);
  v5 = *(double *)(a1 + 40);
  if (v5 < a2)
  {
    v6 = (double *)(a1 + 64);
    v7 = *(_QWORD *)(a1 + 16);
    do
    {
      if (!--v7)
        return *(double *)(a1 + 32 + 24 * v2 - 24);
      v8 = v5;
      v9 = result;
      v10 = v6 + 3;
      result = *(v6 - 1);
      v5 = *v6;
      v11 = *v6 < a2;
      v6 += 3;
    }
    while (v11);
    v12 = a2 - v8;
    if (*((_BYTE *)v10 - 16) == 1)
      v12 = sqrt(v12);
    return v9 + (result - v9) * v12 / (v5 - v8);
  }
  return result;
}

BOOL sub_1000CD9CC()
{
  uint64_t v0;
  uint64_t v1;
  double v3;
  double v4;

  v1 = *(_QWORD *)(v0 + 40);
  if ((*(_BYTE *)(v1 + 80) & 1) != 0 || (*(_BYTE *)(v1 + 66) & 1) != 0 || (*(_BYTE *)(v1 + 192) & 1) != 0)
    return 0;
  v3 = round(*(double *)(v1 + 168) * 57.2957795) * 0.0174532925;
  v4 = -v3;
  if (v3 >= 0.0)
    v4 = v3;
  return v4 <= 0.785398163;
}

void sub_1000CDA30()
{
  uint64_t v0;
  int v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  id v6;
  double v7;
  double v8;
  id v9;
  double v10;
  double v11;
  id v12;
  double v13;
  double v14;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[5];

  v1 = *(unsigned __int8 *)(v0 + 16);
  if ((v1 - 3) >= 2)
  {
    if (v1 == 2)
    {
      v2 = *(_QWORD **)(v0 + 64);
      v3 = v2[9];
      v4 = v2[10];
      sub_100007BBC(v2 + 6, v3);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 8))(v22, v3, v4);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v22);
    }
    else
    {
      v5 = (void *)objc_opt_self(UIScreen);
      v6 = objc_msgSend(v5, "mainScreen");
      objc_msgSend(v6, "nativeScale");
      v8 = v7;

      v9 = objc_msgSend(v5, "mainScreen");
      objc_msgSend(v9, "scale");
      v11 = v10;

      if (v11 < v8)
      {
        v12 = objc_msgSend(v5, "mainScreen");
        objc_msgSend(v12, "nativeScale");
        v14 = v13;

        if (v14 > 0.0)
        {
          v15 = objc_msgSend(v5, "mainScreen");
          objc_msgSend(v15, "scale");

          v16 = objc_msgSend(v5, "mainScreen");
          objc_msgSend(v16, "nativeScale");

        }
      }
      v17 = *(_QWORD *)(v0 + 64);
      v18 = *(id *)(v17 + 112);
      static UIContentSizeCategory.>= infix(_:_:)(v18, UIContentSizeCategoryAccessibilityExtraLarge);

      v19 = (_QWORD *)(v17 + 48);
      v20 = *(_QWORD *)(v17 + 72);
      v21 = *(_QWORD *)(v17 + 80);
      sub_100007BBC(v19, v20);
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v21 + 32))(v22, v20, v21);
      sub_100007BBC(v22, v22[3]);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v22);
    }
  }
}

double sub_1000CDCC8()
{
  uint64_t v0;
  double v1;
  void *v2;
  id v3;
  double v4;
  double v5;
  id v6;
  double v7;
  double v8;
  id v9;
  double v10;
  double v11;
  id v12;
  double v13;
  double v14;
  id v15;
  double v16;
  double v17;

  v1 = 1.0;
  if (*(unsigned __int8 *)(v0 + 16) - 2 >= 3)
  {
    v2 = (void *)objc_opt_self(UIScreen);
    v3 = objc_msgSend(v2, "mainScreen");
    objc_msgSend(v3, "nativeScale");
    v5 = v4;

    v6 = objc_msgSend(v2, "mainScreen");
    objc_msgSend(v6, "scale");
    v8 = v7;

    if (v8 < v5)
    {
      v9 = objc_msgSend(v2, "mainScreen");
      objc_msgSend(v9, "nativeScale");
      v11 = v10;

      if (v11 > 0.0)
      {
        v12 = objc_msgSend(v2, "mainScreen");
        objc_msgSend(v12, "scale");
        v14 = v13;

        v15 = objc_msgSend(v2, "mainScreen");
        objc_msgSend(v15, "nativeScale");
        v17 = v16;

        return v14 / v17;
      }
    }
  }
  return v1;
}

uint64_t sub_1000CDE0C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _QWORD v76[18];

  if (!sub_1000CEB24() || *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 48) + 120) - 1 <= 8)
    goto LABEL_6;
  v3 = *(unsigned __int8 *)(v1 + 16);
  if (v3 == 2)
  {
    if (qword_1003157F8 != -1)
      swift_once(&qword_1003157F8, sub_1000CE4B8);
    v5 = qword_10031DF48;
    v6 = qword_10031DF58;
    v53 = qword_10031DF58;
    v55 = qword_10031DF50;
    v7 = qword_10031DF60;
    v8 = qword_10031DF68;
    v9 = qword_10031DF70;
    v10 = qword_10031DF78;
    v11 = qword_10031DF80;
    v57 = byte_10031DF88;
    v12 = unk_10031DF98;
    v49 = unk_10031DF98;
    v51 = qword_10031DF60;
    v13 = qword_10031DFA0;
    v14 = unk_10031DFA8;
    v44 = qword_10031DF90;
    v47 = qword_10031DFA0;
    v76[0] = 0x3FE921FB54442D18;
    swift_bridgeObjectRetain(qword_10031DF50);
    swift_bridgeObjectRetain(v6);
    swift_retain(v7);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_retain(v10);
    swift_bridgeObjectRetain(v11);
    v15 = v44;
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    swift_retain(v14);
    v16 = Angle.animatableData.getter(0.013962634);
    v17 = Angle.animatableData.getter(0.785398163);
    Angle.animatableData.setter(v16 + v17);
    v18 = sub_100003DB8(&qword_10031E2B8);
    v19 = swift_allocObject(v18, 80, 7);
    *(_OWORD *)(v19 + 16) = xmmword_10024DEE0;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 40) = 0;
    *(_BYTE *)(v19 + 48) = 0;
    *(_OWORD *)(v19 + 56) = xmmword_1002540B0;
    *(_BYTE *)(v19 + 72) = 1;
    v20 = swift_allocObject(v18, 80, 7);
    *(_OWORD *)(v20 + 16) = xmmword_10024DEE0;
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)(v20 + 40) = 0;
    *(_BYTE *)(v20 + 48) = 0;
    v21 = xmmword_1002540C0;
    goto LABEL_17;
  }
  if (v3 == 3)
  {
    if (qword_100315800 != -1)
      swift_once(&qword_100315800, sub_1000CE568);
    v22 = qword_10031DFB0;
    v23 = qword_10031DFC0;
    v54 = qword_10031DFC0;
    v56 = qword_10031DFB8;
    v24 = qword_10031DFC8;
    v25 = qword_10031DFD0;
    v26 = qword_10031DFD8;
    v27 = qword_10031DFE0;
    v28 = qword_10031DFE8;
    v58 = byte_10031DFF0;
    v29 = unk_10031E000;
    v50 = unk_10031E000;
    v52 = qword_10031DFC8;
    v30 = qword_10031E008;
    v31 = unk_10031E010;
    v45 = qword_10031DFF8;
    v48 = qword_10031E008;
    swift_bridgeObjectRetain(qword_10031DFB8);
    swift_bridgeObjectRetain(v23);
    swift_retain(v24);
    swift_bridgeObjectRetain(v25);
    swift_bridgeObjectRetain(v26);
    swift_retain(v27);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRetain(v29);
    swift_bridgeObjectRetain(v30);
    swift_retain(v31);
    v32 = Angle.animatableData.getter(0.013962634);
    v33 = Angle.animatableData.getter(0.785398163);
    Angle.animatableData.setter(v32 + v33);
    v76[0] = 0x3FE921FB54442D18;
    v34 = Angle.animatableData.getter(0.013962634);
    v35 = Angle.animatableData.getter(0.785398163);
    Angle.animatableData.setter(v34 + v35);
    v36 = sub_100003DB8(&qword_10031E2B8);
    v19 = swift_allocObject(v36, 80, 7);
    *(_OWORD *)(v19 + 16) = xmmword_10024DEE0;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 40) = 0;
    *(_BYTE *)(v19 + 48) = 0;
    *(_OWORD *)(v19 + 56) = xmmword_100254090;
    *(_BYTE *)(v19 + 72) = 1;
    v20 = swift_allocObject(v36, 80, 7);
    *(_OWORD *)(v20 + 16) = xmmword_10024DEE0;
    *(_OWORD *)(v20 + 32) = xmmword_1002540A0;
    *(_BYTE *)(v20 + 48) = 0;
    *(_OWORD *)(v20 + 56) = xmmword_1002520D0;
    *(_BYTE *)(v20 + 72) = 1;
    v59 = v22;
    v60 = v56;
    v61 = v54;
    v62 = v52;
    v63 = v25;
    v64 = v26;
    v65 = v27;
    v66 = v28;
    v67 = v58;
    v68 = v45;
    v69 = v50;
    v70 = v48;
    v71 = v31;
    v72 = 0x3FE921FB54442D18;
    goto LABEL_18;
  }
  if (v3 != 4)
  {
    if (qword_1003157F0 != -1)
      swift_once(&qword_1003157F0, sub_1000CE408);
    v5 = qword_10031DEE0;
    v37 = qword_10031DEF0;
    v53 = qword_10031DEF0;
    v55 = qword_10031DEE8;
    v38 = qword_10031DEF8;
    v8 = qword_10031DF00;
    v9 = qword_10031DF08;
    v10 = qword_10031DF10;
    v11 = qword_10031DF18;
    v57 = byte_10031DF20;
    v39 = unk_10031DF30;
    v49 = unk_10031DF30;
    v51 = qword_10031DEF8;
    v40 = qword_10031DF38;
    v14 = unk_10031DF40;
    v46 = qword_10031DF28;
    v47 = qword_10031DF38;
    v76[0] = 0x3FE921FB54442D18;
    swift_bridgeObjectRetain(qword_10031DEE8);
    swift_bridgeObjectRetain(v37);
    swift_retain(v38);
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v9);
    swift_retain(v10);
    swift_bridgeObjectRetain(v11);
    v15 = v46;
    swift_bridgeObjectRetain(v46);
    swift_bridgeObjectRetain(v39);
    swift_bridgeObjectRetain(v40);
    swift_retain(v14);
    v41 = Angle.animatableData.getter(0.013962634);
    v42 = Angle.animatableData.getter(0.785398163);
    Angle.animatableData.setter(v41 + v42);
    v43 = sub_100003DB8(&qword_10031E2B8);
    v19 = swift_allocObject(v43, 80, 7);
    *(_OWORD *)(v19 + 16) = xmmword_10024DEE0;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 40) = 0;
    *(_BYTE *)(v19 + 48) = 0;
    *(_OWORD *)(v19 + 56) = xmmword_1002540D0;
    *(_BYTE *)(v19 + 72) = 1;
    v20 = swift_allocObject(v43, 80, 7);
    *(_OWORD *)(v20 + 16) = xmmword_10024DEE0;
    *(_QWORD *)(v20 + 32) = 0;
    *(_QWORD *)(v20 + 40) = 0;
    *(_BYTE *)(v20 + 48) = 0;
    v21 = xmmword_1002540E0;
LABEL_17:
    *(_OWORD *)(v20 + 56) = v21;
    *(_BYTE *)(v20 + 72) = 1;
    v59 = v5;
    v60 = v55;
    v61 = v53;
    v62 = v51;
    v63 = v8;
    v64 = v9;
    v65 = v10;
    v66 = v11;
    v67 = v57;
    v68 = v15;
    v69 = v49;
    v70 = v47;
    v71 = v14;
    v72 = 0x3FD921FB54442D18;
LABEL_18:
    v73 = 0x3FE921FB54442D18;
    v74 = v19;
    v75 = v20;
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(&v59);
    goto LABEL_7;
  }
LABEL_6:
  sub_1000D23A8((uint64_t)&v59);
LABEL_7:
  sub_10000B458((uint64_t)&v59, (uint64_t)v76, &qword_10031D858);
  return sub_10000B458((uint64_t)v76, a1, &qword_10031D858);
}

uint64_t sub_1000CE408()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_100093708(0xA0FC8BFF);
  v1 = sub_100093708(0x5EF76DFFu);
  result = sub_100093708(0x3F4FCFFu);
  qword_10031DEE0 = 0x4008000000000000;
  qword_10031DEE8 = (uint64_t)&off_1002E10D8;
  qword_10031DEF0 = (uint64_t)&off_1002E1140;
  qword_10031DEF8 = v0;
  qword_10031DF00 = (uint64_t)&off_1002E11A8;
  qword_10031DF08 = (uint64_t)&off_1002E11F8;
  qword_10031DF10 = v1;
  qword_10031DF18 = (uint64_t)&off_1002E1260;
  byte_10031DF20 = 1;
  qword_10031DF28 = (uint64_t)&off_1002E12C8;
  unk_10031DF30 = &off_1002E1318;
  qword_10031DF38 = (uint64_t)&off_1002E13B0;
  unk_10031DF40 = result;
  return result;
}

uint64_t sub_1000CE4B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_100093708(0xA0FC8BFF);
  v1 = sub_100093708(0x5EF76DFFu);
  result = sub_100093708(0x3F4FCFFu);
  qword_10031DF48 = 0x4008000000000000;
  qword_10031DF50 = (uint64_t)&off_1002E1448;
  qword_10031DF58 = (uint64_t)&off_1002E14B0;
  qword_10031DF60 = v0;
  qword_10031DF68 = (uint64_t)&off_1002E1530;
  qword_10031DF70 = (uint64_t)&off_1002E1580;
  qword_10031DF78 = v1;
  qword_10031DF80 = (uint64_t)&off_1002E1600;
  byte_10031DF88 = 1;
  qword_10031DF90 = (uint64_t)&off_1002E1668;
  unk_10031DF98 = &off_1002E16B8;
  qword_10031DFA0 = (uint64_t)&off_1002E1738;
  unk_10031DFA8 = result;
  return result;
}

uint64_t sub_1000CE568()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  v0 = sub_100093708(0xA0FC8BFF);
  v1 = sub_100093708(0x5EF76DFFu);
  result = sub_100093708(0x3FCFCFFu);
  qword_10031DFB0 = 0x4008000000000000;
  qword_10031DFB8 = (uint64_t)&off_1002E17D0;
  qword_10031DFC0 = (uint64_t)&off_1002E1838;
  qword_10031DFC8 = v0;
  qword_10031DFD0 = (uint64_t)&off_1002E18B8;
  qword_10031DFD8 = (uint64_t)&off_1002E1908;
  qword_10031DFE0 = v1;
  qword_10031DFE8 = (uint64_t)&off_1002E1988;
  byte_10031DFF0 = 0;
  qword_10031DFF8 = (uint64_t)&off_1002E19F0;
  unk_10031E000 = &off_1002E1A40;
  qword_10031E008 = (uint64_t)&off_1002E1AA8;
  unk_10031E010 = result;
  return result;
}

uint64_t sub_1000CE614@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  double v5;
  double v6;
  uint64_t v7;
  double v8;
  double v9;
  int v10;
  BOOL v12;
  double v13;
  uint64_t v14;
  char v15;
  double v16;
  double v17;
  uint64_t v18;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[8];
  __int128 v25;
  __int128 v26;
  _BYTE v27[136];
  _OWORD v28[14];
  _BYTE v29[136];
  _QWORD v30[28];

  v3 = *(unsigned __int8 *)(v1 + 16);
  if (v3 != 4)
  {
    v4 = sub_1000CE8CC();
    if (v3 == 2)
    {
      v5 = 40.0;
      v7 = 0x4049800000000000;
    }
    else
    {
      if (v3 == 3)
      {
        v5 = 10.0;
        v6 = 12.0;
        goto LABEL_9;
      }
      v5 = 145.0;
      v7 = 0x4068600000000000;
    }
    v6 = *(double *)&v7;
LABEL_9:
    v30[0] = 0x3FE921FB54442D18;
    v8 = Angle.animatableData.getter(0.013962634);
    v9 = Angle.animatableData.getter(0.785398163);
    Angle.animatableData.setter(v8 + v9);
    v10 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 48) + 120);
    v12 = v10 == 1 || v10 == 4;
    v13 = 0.0;
    if (!sub_1000CD9CC()
      || (v14 = *(_QWORD *)(v1 + 40), (*(_BYTE *)(v14 + 80) & 1) != 0)
      || (*(_BYTE *)(v14 + 66) & 1) != 0
      || (*(_BYTE *)(v14 + 192) & 1) != 0)
    {
      v15 = 1;
    }
    else
    {
      v15 = 0;
      v13 = round(*(double *)(v14 + 168) * 57.2957795) * 0.0174532925;
    }
    sub_1000CDE0C((uint64_t)v29);
    sub_10000B458((uint64_t)v29, (uint64_t)v27, &qword_10031D858);
    if (v3 == 2)
    {
      v17 = 2.5;
      v18 = 0x403E400000000000;
    }
    else
    {
      if (v3 == 3)
      {
        v16 = 11.0;
        v17 = 2.0;
LABEL_26:
        *(_QWORD *)&v20 = v4;
        *((double *)&v20 + 1) = v6;
        *(double *)&v21 = v5;
        *((_QWORD *)&v21 + 1) = 0x3FF921FB54442D18;
        *(_QWORD *)&v22 = 0x3FE921FB54442D18;
        BYTE8(v22) = v12;
        *(double *)&v23 = v13;
        BYTE8(v23) = v15;
        sub_10000B458((uint64_t)v27, (uint64_t)v24, &qword_10031D858);
        *((_QWORD *)&v25 + 1) = 0x4012D97C7F3321D2;
        *(double *)&v26 = v16;
        *((double *)&v26 + 1) = v17;
        v28[10] = v24[6];
        v28[11] = v24[7];
        v28[6] = v24[2];
        v28[7] = v24[3];
        v28[8] = v24[4];
        v28[9] = v24[5];
        v28[2] = v22;
        v28[3] = v23;
        v28[4] = v24[0];
        v28[5] = v24[1];
        v28[0] = v20;
        v28[1] = v21;
        v28[12] = v25;
        v28[13] = v26;
        ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(v28);
        goto LABEL_27;
      }
      v17 = 8.5;
      v18 = 0x405EC00000000000;
    }
    v16 = *(double *)&v18;
    goto LABEL_26;
  }
  sub_1000D2384(v28);
LABEL_27:
  sub_10000B458((uint64_t)v28, (uint64_t)v30, &qword_10031D810);
  return sub_10000B458((uint64_t)v30, a1, &qword_10031D810);
}

uint64_t sub_1000CE8CC()
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (sub_1000CEB24())
    __asm { BR              X10 }
  v1 = sub_100003DB8(&qword_10031D9B0);
  v2 = swift_allocObject(v1, 40, 7);
  *(_OWORD *)(v2 + 16) = xmmword_10024E070;
  v3 = static Color.clear.getter((__n128)xmmword_10024E070);
  *(_QWORD *)(v2 + 32) = v3;
  specialized Array._endMutation()(v3);
  return Gradient.init(colors:)(v2);
}

void sub_1000CEA18()
{
  uint64_t v0;
  uint64_t v1;

  v0 = sub_100003DB8(&qword_10031D9B0);
  v1 = swift_allocObject(v0, 48, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10024DEE0;
  *(_QWORD *)(v1 + 32) = sub_100093708(0x15DC30FFu);
  JUMPOUT(0x1000CEAF0);
}

BOOL sub_1000CEB24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 result;
  int v9;
  _BYTE v11[24];

  v1 = sub_100003DB8(&qword_1003180C0);
  __chkstk_darwin(v1, v2);
  v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(_QWORD *)(v0 + 24) + OBJC_IVAR____TtC8SOSBuddy21ConnectionClosedModel__connectionClosed;
  swift_beginAccess(v5, v11, 0, 0);
  sub_10000B234(v5, (uint64_t)v4, &qword_1003180C0);
  v6 = type metadata accessor for ConnectionClosed(0);
  LODWORD(v5) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v4, 1, v6);
  sub_100007FF0((uint64_t)v4, &qword_1003180C0);
  if ((_DWORD)v5 != 1)
    return 0;
  v7 = *(_QWORD *)(v0 + 56);
  if (!*(_QWORD *)(v7 + 64))
    return 0;
  result = 0;
  if (*(_BYTE *)(v7 + 56) == 5 && (unint64_t)*(unsigned __int8 *)(v7 + 73) << 8 == 256)
  {
    v9 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) + 48) + 120);
    if ((v9 - 1) < 5)
      return *(unsigned __int8 *)(v0 + 16) - 5 < 0xFFFFFFFE;
    return (v9 - 6) >= 4;
  }
  return result;
}

BOOL sub_1000CEC64()
{
  uint64_t v0;
  int v1;
  char v2;
  _BYTE *v3;

  v1 = *(unsigned __int8 *)(v0 + 16);
  if (v1 == 3)
  {
    v3 = *(_BYTE **)(v0 + 40);
    if ((v3[80] & 1) == 0 && (v3[66] & 1) == 0)
    {
      v2 = v3[192] ^ 1;
      return v2 & 1;
    }
    goto LABEL_10;
  }
  if (v1 != 4)
  {
    if (sub_1000CEB24())
    {
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v0 + 32) + 48) + 120))
        return sub_1000CD9CC();
      goto LABEL_3;
    }
LABEL_10:
    v2 = 0;
    return v2 & 1;
  }
LABEL_3:
  v2 = 1;
  return v2 & 1;
}

void sub_1000CECD8(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int16 v10;
  __int128 v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  int64x2_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  id v21;
  int v22;
  unsigned int v23;
  uint64_t v24;
  unsigned int v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  BOOL v31;
  __int16 v32;
  __int128 v33;

  v3 = *(unsigned __int8 *)(v1 + 16);
  if (v3 == 4)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0uLL;
    v12 = 0.0;
    v13 = 0;
    v14 = 0;
    v15 = 0.0;
    v16 = 0uLL;
    goto LABEL_31;
  }
  v17 = *(_QWORD *)(v1 + 48);
  v12 = 0.0;
  if ((*(_BYTE *)(v17 + 104) & 1) == 0)
    v12 = round(*(double *)(v17 + 32) * 57.2957795) * 0.0174532925;
  v18 = *(_QWORD *)(v1 + 40);
  v19 = xmmword_10024E030;
  if ((*(_BYTE *)(v18 + 80) & 1) == 0 && (*(_BYTE *)(v18 + 66) & 1) == 0 && (*(_BYTE *)(v18 + 192) & 1) == 0)
  {
    *((_QWORD *)&v19 + 1) = 0;
    *(double *)&v19 = round(*(double *)(v18 + 168) * 57.2957795) * 0.0174532925;
  }
  v33 = v19;
  v20 = 0x4021000000000000;
  if (v3 == 3)
    v20 = 0x4000000000000000;
  if (v3 == 2)
    v6 = 0x4004000000000000;
  else
    v6 = v20;
  v21 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray3Color");
  v7 = Color.init(uiColor:)(v21);
  if (!sub_1000CEB24())
    goto LABEL_20;
  v22 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 48) + 120);
  if ((v22 - 1) < 5)
  {
    v23 = -858993409;
    goto LABEL_17;
  }
  if ((v22 - 6) < 4)
  {
LABEL_20:
    v24 = 0;
    v25 = v3 - 2;
    if (v3 == 2)
      goto LABEL_18;
    goto LABEL_21;
  }
  v23 = 1593273855;
LABEL_17:
  v24 = sub_100093708(v23);
  v25 = v3 - 2;
  if (v3 == 2)
  {
LABEL_18:
    v9 = 0x403E400000000000;
    v8 = 0x401A000000000000;
    v26 = 40.0;
    goto LABEL_23;
  }
LABEL_21:
  if (v3 != 3)
  {
    v8 = 0x402A000000000000;
    v9 = 0x405EC00000000000;
    v14 = 0x4073200000000000;
    v13 = 0x4074400000000000;
    v26 = 145.0;
    v30 = 153.0;
    if (v25 <= 2)
      goto LABEL_24;
LABEL_26:
    v5 = 10;
    goto LABEL_27;
  }
  v9 = 0x4026000000000000;
  v26 = 10.0;
  v8 = 0x4008000000000000;
LABEL_23:
  sub_1000CDA30();
  v13 = v27;
  v14 = v28;
  sub_1000CDA30();
  v30 = v29 * 0.5;
  if (v25 > 2)
    goto LABEL_26;
LABEL_24:
  v5 = qword_100254790[(char)v25];
LABEL_27:
  v15 = v26 - v30;
  v31 = sub_1000CEC64();
  if (sub_1000CD9CC())
    v32 = 256;
  else
    v32 = 0;
  v10 = v32 & 0xFFFE | v31;
  v16 = vdupq_n_s64(0x3FF921FB54442D18uLL);
  v16.i64[0] = v24;
  v4 = 0x4012D97C7F3321D2;
  v11 = v33;
LABEL_31:
  *(_QWORD *)a1 = v4;
  *(double *)(a1 + 8) = v12;
  *(_OWORD *)(a1 + 16) = v11;
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  *(int64x2_t *)(a1 + 56) = v16;
  *(_QWORD *)(a1 + 72) = v8;
  *(_QWORD *)(a1 + 80) = v13;
  *(_QWORD *)(a1 + 88) = v14;
  *(_QWORD *)(a1 + 96) = v9;
  *(double *)(a1 + 104) = v15;
  *(_WORD *)(a1 + 112) = v10;
}

BOOL sub_1000CEFB0()
{
  uint64_t v0;
  int v1;
  uint64_t v3;
  double v4;
  double v5;

  v1 = *(unsigned __int8 *)(v0 + 16);
  if ((v1 - 3) < 2)
    return 0;
  if (v1 != 2)
    return 1;
  v3 = *(_QWORD *)(v0 + 40);
  if ((*(_BYTE *)(v3 + 80) & 1) != 0 || (*(_BYTE *)(v3 + 66) & 1) != 0 || (*(_BYTE *)(v3 + 192) & 1) != 0)
    return 0;
  v4 = round(*(double *)(v3 + 168) * 57.2957795) * 0.0174532925;
  v5 = -v4;
  if (v4 >= 0.0)
    v5 = v4;
  return v5 <= 0.785398163;
}

uint64_t sub_1000CF034()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;

  v1 = v0;
  v2 = *(unsigned __int8 *)(v0 + 16);
  if ((v2 - 3) < 2)
    return 0;
  v3 = *(_QWORD *)(v1 + 40);
  if ((*(_BYTE *)(v3 + 80) & 1) != 0)
    return 0;
  if ((*(_BYTE *)(v3 + 66) & 1) != 0)
    return 0;
  if ((*(_BYTE *)(v3 + 192) & 1) != 0)
    return 0;
  v4 = *(double *)(v3 + 168);
  if ((sub_10019C260((uint64_t)&off_1002E1B28, *(_QWORD *)(v3 + 200)) & 1) != 0)
    return 0;
  v5 = round(v4 * 57.2957795) * 0.0174532925;
  v6 = v5 < 0.0 ? -v5 : v5;
  v7 = dbl_1002540F0[v2 == 2];
  v8 = Angle.animatableData.getter(v7);
  v9 = Angle.animatableData.getter(0.785398163);
  Angle.animatableData.setter(v8 + v9);
  if (v6 <= 0.785398163
    || sub_1000CEB24() && *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 48) + 120) - 1 > 8)
  {
    return 0;
  }
  if (v5 > 0.0)
  {
    v10 = Angle.animatableData.getter(v7);
    Angle.animatableData.setter(0.0 - v10);
  }
  v11 = Angle.animatableData.getter(v7);
  v12 = Angle.animatableData.getter(v5);
  Angle.animatableData.setter(v11 + v12);
  return *(_QWORD *)&v5;
}

void sub_1000CF1B0(uint64_t a1@<X8>)
{
  uint64_t v1;
  double v3;
  double v4;
  char v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v3 = COERCE_DOUBLE(sub_1000CF034());
  v4 = 0.0;
  if ((v5 & 1) == 0)
  {
    v4 = v3;
    v6 = -v3;
    if (v3 >= 0.0)
      v6 = v3;
    if (v6 <= 0.261799388)
      v4 = 0.0;
  }
  v7 = sub_100093708(0xCCCCCCFF);
  v8 = static Color.white.getter(v7);
  v9 = *(unsigned __int8 *)(v1 + 16) - 2;
  if (v9 >= 3)
  {
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v27, 1, 1, _swiftEmptyArrayStorage, 8.5, 10.0, 0.0);
    v12 = v27;
    v13 = v28;
    v24 = -8.0;
    v23 = 20.0;
    v14 = v29;
    v15 = v30;
    v20 = 0x4073200000000000;
    v18 = 0x4074400000000000;
    v11 = 0x405EC00000000000;
    v16 = v31;
  }
  else
  {
    v10 = 8 * (char)v9;
    v25 = *(double *)((char *)&unk_1002547D8 + v10);
    v26 = *(double *)((char *)&unk_1002547C0 + v10);
    v11 = *(_QWORD *)((char *)&unk_1002547F0 + v10);
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(&v27, 1, 1, _swiftEmptyArrayStorage, *(double *)((char *)&unk_1002547A8 + v10), 10.0, 0.0);
    v12 = v27;
    v13 = v28;
    v14 = v29;
    v15 = v30;
    v16 = v31;
    sub_1000CDA30();
    v18 = v17;
    v20 = v19;
    sub_1000CDA30();
    v22 = v21 * -0.5;
    v23 = v26;
    v24 = v25 + v22;
  }
  *(_QWORD *)a1 = 0x4012D97C7F3321D2;
  *(double *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v16;
  *(double *)(a1 + 72) = v23;
  *(_OWORD *)(a1 + 80) = xmmword_100254100;
  *(_QWORD *)(a1 + 96) = v18;
  *(_QWORD *)(a1 + 104) = v20;
  *(_QWORD *)(a1 + 112) = v11;
  *(double *)(a1 + 120) = v24;
  *(_QWORD *)(a1 + 128) = 0x3FF921FB54442D18;
}

uint64_t sub_1000CF39C@<X0>(unint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[24];

  v3 = sub_100003DB8(&qword_1003180C0);
  __chkstk_darwin(v3, v4);
  v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = v1[3] + OBJC_IVAR____TtC8SOSBuddy21ConnectionClosedModel__connectionClosed;
  swift_beginAccess(v7, v25, 0, 0);
  sub_10000B234(v7, (uint64_t)v6, &qword_1003180C0);
  v8 = type metadata accessor for ConnectionClosed(0);
  LODWORD(v7) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(v6, 1, v8);
  v9 = sub_100007FF0((uint64_t)v6, &qword_1003180C0);
  if ((_DWORD)v7 == 1
    && (v10 = v1[7], *(_QWORD *)(v10 + 64))
    && *(_BYTE *)(v10 + 56) == 5
    && (unint64_t)*(unsigned __int8 *)(v10 + 73) << 8 == 256)
  {
    v11 = v1[4];
    v12 = 1 << *(_BYTE *)(*(_QWORD *)(v11 + 48) + 120);
    if ((v12 & 0x3DA) != 0)
    {
      v13 = (_QWORD *)v1[8];
      v14 = v13[9];
      v15 = v13[10];
      sub_100007BBC(v13 + 6, v14);
      v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 96))(v11, v14, v15);
    }
    else
    {
      if ((v12 & 0x24) != 0)
      {
        v17 = static Color.white.getter(v9);
        v21 = (_QWORD *)v1[8];
        v22 = v21[9];
        v23 = v21[10];
        sub_100007BBC(v21 + 6, v22);
        result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 96))(v11, v22, v23);
        v20 = 0x80000001002607C0;
        v19 = 0xD00000000000001BLL;
        goto LABEL_9;
      }
      v16 = sub_100093708(0x5EF76DFFu);
    }
  }
  else
  {
    v16 = static Color.white.getter(v9);
  }
  v17 = v16;
  result = 0;
  v19 = 0x662E656C63726963;
  v20 = 0xEB000000006C6C69;
LABEL_9:
  *a1 = v19;
  a1[1] = v20;
  a1[2] = 0x662E656C63726963;
  a1[3] = 0xEB000000006C6C69;
  a1[4] = v17;
  a1[5] = result;
  return result;
}

CGFloat sub_1000CF5B4@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double v3;
  double v4;
  __double2 v5;
  CGFloat result;
  __int128 v7;
  __int128 v8;
  CGAffineTransform v9;

  v3 = *(double *)v1;
  v4 = atan2(*(long double *)(v1 + 16), *(long double *)(v1 + 8));
  v5 = __sincos_stret(v4);
  CGAffineTransformMakeTranslation(&v9, v3 * v5.__cosval, v3 * v5.__sinval);
  result = v9.a;
  v7 = *(_OWORD *)&v9.c;
  v8 = *(_OWORD *)&v9.tx;
  *(_OWORD *)a1 = *(_OWORD *)&v9.a;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

__n128 sub_1000CF62C@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v1;
  __n128 result;

  result = *(__n128 *)(v1 + 8);
  *a1 = result;
  return result;
}

__n128 sub_1000CF638(__n128 *a1)
{
  uint64_t v1;
  __n128 result;

  result = *a1;
  *(__n128 *)(v1 + 8) = *a1;
  return result;
}

__n128 (*sub_1000CF644(uint64_t a1))(__n128 *a1)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 8);
  return sub_1000CF660;
}

__n128 sub_1000CF660(__n128 *a1)
{
  __n128 result;

  result = *a1;
  *(__n128 *)(a1[1].n128_u64[0] + 8) = *a1;
  return result;
}

uint64_t sub_1000CF670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;

  v10 = sub_1000D36EC();
  return static GeometryEffect._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t sub_1000CF6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;

  v10 = sub_1000D36EC();
  return static GeometryEffect._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t sub_1000CF740(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8;

  v8 = sub_1000D36EC();
  return static GeometryEffect._viewListCount(inputs:body:)(a1, a2, a3, a4, v8);
}

void sub_1000CF798()
{
  ViewModifier<>.body(content:)();
  __break(1u);
}

double sub_1000CF7A8@<D0>(_QWORD *a1@<X8>)
{
  double *v1;
  double result;

  result = *v1;
  *a1 = *(_QWORD *)v1;
  return result;
}

double sub_1000CF7B4(double *a1)
{
  _QWORD *v1;
  double result;

  result = *a1;
  *v1 = *(_QWORD *)a1;
  return result;
}

double (*sub_1000CF7C0(_QWORD *a1))(uint64_t a1)
{
  _QWORD *v1;

  a1[1] = v1;
  *a1 = *v1;
  return sub_1000CF7DC;
}

double sub_1000CF7DC(uint64_t a1)
{
  double result;

  result = *(double *)a1;
  **(_QWORD **)(a1 + 8) = *(_QWORD *)a1;
  return result;
}

uint64_t sub_1000CF7EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;

  v10 = sub_1000D3234();
  return static AnimatableModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t sub_1000CF854(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10;

  v10 = sub_1000D3234();
  return static AnimatableModifier._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10);
}

uint64_t sub_1000CF8BC()
{
  return static ViewModifier._viewListCount(inputs:body:)();
}

uint64_t sub_1000CF8D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t KeyPath;
  uint64_t v14;
  uint64_t result;
  uint64_t *v16;
  uint64_t v17;

  v5 = sub_100003DB8(&qword_100316B50);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v2;
  v10 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
  v11 = static Font.system(size:weight:design:)(0, 1, v8, v9);
  sub_100007FF0((uint64_t)v8, &qword_100316B50);
  v12 = Font.weight(_:)(v11);
  swift_release(v11);
  KeyPath = swift_getKeyPath(&unk_1002544E0);
  v14 = sub_100003DB8(&qword_10031E328);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a2, a1, v14);
  result = sub_100003DB8(&qword_10031E330);
  v16 = (uint64_t *)(a2 + *(int *)(result + 36));
  *v16 = KeyPath;
  v16[1] = v12;
  return result;
}

double sub_1000CF9FC@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  id v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  id v8;
  id v9;
  double v10;
  CGFloat v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  CGFloat Height;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int16 v24;
  uint64_t v25;
  unint64_t v26;
  double result;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int16 v31;
  char v32;
  _OWORD v33[2];
  __int128 v34;
  __int128 v35;
  __int16 v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int16 v42;
  char v43;
  CGRect v44;

  if (*(unsigned __int8 *)(v1 + 16) - 2 >= 3)
  {
    v3 = *(id *)(*(_QWORD *)(v1 + 64) + 112);
    v4 = static UIContentSizeCategory.>= infix(_:_:)(v3, UIContentSizeCategoryAccessibilityExtraLarge);

    if ((v4 & 1) != 0)
    {
      v36 = 0;
      v34 = 0u;
      v35 = 0u;
      memset(v33, 0, sizeof(v33));
    }
    else
    {
      v6 = static HorizontalAlignment.center.getter(v5);
      v7 = static Edge.Set.bottom.getter(v6);
      v8 = objc_msgSend((id)objc_opt_self(UIScreen), "mainScreen");
      v9 = objc_msgSend(v8, "fixedCoordinateSpace");

      objc_msgSend(v9, "bounds");
      v11 = v10;
      v13 = v12;
      v15 = v14;
      v17 = v16;
      swift_unknownObjectRelease(v9);
      v44.origin.x = v11;
      v44.origin.y = v13;
      v44.size.width = v15;
      v44.size.height = v17;
      Height = CGRectGetHeight(v44);
      *(_QWORD *)&v33[0] = v6;
      *(_OWORD *)((char *)v33 + 8) = xmmword_10024E030;
      *((_QWORD *)&v33[1] + 1) = v7;
      *(_QWORD *)&v34 = EdgeInsets.init(_all:)(Height * 0.05);
      *((_QWORD *)&v34 + 1) = v19;
      *(_QWORD *)&v35 = v20;
      *((_QWORD *)&v35 + 1) = v21;
      v36 = 256;
    }
    v22 = sub_100003DB8(&qword_10031E2B0);
    v23 = sub_1000D148C();
    _ConditionalContent<>.init(storage:)(v33, &type metadata for EmptyView, v22, &protocol witness table for EmptyView, v23);
    if (HIBYTE(v42))
      v24 = 256;
    else
      v24 = 0;
    v33[0] = v38;
    v33[1] = v39;
    v34 = v40;
    v35 = v41;
    v36 = v24 | v42;
    v37 = 0;
  }
  else
  {
    v36 = 0;
    v34 = 0u;
    v35 = 0u;
    memset(v33, 0, sizeof(v33));
    v37 = 1;
  }
  v25 = sub_100003DB8(&qword_10031E298);
  v26 = sub_1000D1420();
  _ConditionalContent<>.init(storage:)(v33, v25, &type metadata for EmptyView, v26, &protocol witness table for EmptyView);
  result = *(double *)&v38;
  v28 = v39;
  v29 = v40;
  v30 = v41;
  v31 = v42;
  v32 = v43;
  *(_OWORD *)a1 = v38;
  *(_OWORD *)(a1 + 16) = v28;
  *(_OWORD *)(a1 + 32) = v29;
  *(_OWORD *)(a1 + 48) = v30;
  *(_WORD *)(a1 + 64) = v31;
  *(_BYTE *)(a1 + 66) = v32;
  return result;
}

uint64_t sub_1000CFC34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v17;

  v4 = sub_100003DB8(&qword_10031E350);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (uint64_t *)((char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v8 = static Alignment.center.getter(v6);
  v8[1] = v9;
  v10 = sub_100003DB8(&qword_10031E358);
  sub_1000CFD38(a1, (uint64_t)v8 + *(int *)(v10 + 44));
  v12 = static Color.black.getter(v11);
  v13 = Color.opacity(_:)(0.8);
  swift_release(v12);
  v14 = *(double *)(a1 + 16) * 0.5;
  sub_10000B234((uint64_t)v8, a2, &qword_10031E350);
  v15 = a2 + *(int *)(sub_100003DB8(&qword_10031E360) + 36);
  *(_QWORD *)v15 = v13;
  *(double *)(v15 + 8) = v14;
  *(_QWORD *)(v15 + 16) = 0;
  *(_QWORD *)(v15 + 24) = 0;
  return sub_100007FF0((uint64_t)v8, &qword_10031E350);
}

uint64_t sub_1000CFD38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v73;
  double v74;
  double v75;
  uint64_t (*v76)(char *, uint64_t, uint64_t);
  unsigned int v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned __int8 v93;
  uint64_t v94;
  unsigned __int8 v95;
  uint64_t v96;
  uint64_t v97;
  _OWORD v98[3];
  _OWORD v99[3];

  v80 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v80, v4);
  v6 = (double *)((char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100003DB8(&qword_100318338);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = sub_100003DB8(&qword_10031E368);
  __chkstk_darwin(v81, v11);
  v13 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = sub_100003DB8(&qword_10031E370);
  v15 = __chkstk_darwin(v82, v14);
  v79 = (uint64_t)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __chkstk_darwin(v15, v17);
  v20 = (char *)&v73 - v19;
  v22 = __chkstk_darwin(v18, v21);
  v24 = (char *)&v73 - v23;
  __chkstk_darwin(v22, v25);
  v83 = (uint64_t)&v73 - v26;
  v27 = sub_100003DB8(&qword_10031E378);
  v29 = __chkstk_darwin(v27, v28);
  v31 = (char *)&v73 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = __chkstk_darwin(v29, v32);
  v90 = (uint64_t)&v73 - v34;
  v91 = static Color.white.getter(v33);
  v35 = *(double *)(a1 + 16);
  v36 = v35 + v35;
  v37 = static Alignment.center.getter(v91);
  ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(&v92, v35 + v35, 0, v35 + v35, 0, v37, v38);
  v89 = v92;
  v88 = v93;
  v87 = v94;
  v86 = v95;
  v85 = v96;
  v84 = v97;
  if ((*(_BYTE *)(a1 + 65) & 1) != 0)
  {
    v41 = *(double *)(a1 + 24);
    v42 = (char *)v6 + *(int *)(v80 + 20);
    v78 = v20;
    v43 = v7;
    v44 = enum case for RoundedCornerStyle.continuous(_:);
    v77 = enum case for RoundedCornerStyle.continuous(_:);
    v45 = type metadata accessor for RoundedCornerStyle(0);
    v46 = *(_QWORD *)(v45 - 8);
    v73 = v24;
    v76 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v46 + 104);
    v47 = v76(v42, v44, v45);
    *v6 = v41 * 0.5;
    v6[1] = v41 * 0.5;
    v48 = static Color.white.getter(v47);
    sub_10002C428((uint64_t)v6, (uint64_t)v10);
    *(_QWORD *)&v10[*(int *)(v43 + 52)] = v48;
    *(_WORD *)&v10[*(int *)(v43 + 56)] = 256;
    v49 = sub_10002C46C((uint64_t)v6);
    v74 = v35 * 1.3;
    v75 = v41;
    v50 = static Alignment.center.getter(v49);
    ((void (*)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))_FrameLayout.init(width:height:alignment:))(v98, v35 * 1.3, 0, *(_QWORD *)&v41, 0, v50, v51);
    sub_10000B234((uint64_t)v10, (uint64_t)v13, &qword_100318338);
    v52 = &v13[*(int *)(v81 + 36)];
    v53 = v98[1];
    *(_OWORD *)v52 = v98[0];
    *((_OWORD *)v52 + 1) = v53;
    *((_OWORD *)v52 + 2) = v98[2];
    sub_100007FF0((uint64_t)v10, &qword_100318338);
    v54 = (uint64_t)v73;
    sub_10000B234((uint64_t)v13, (uint64_t)v73, &qword_10031E368);
    v55 = v54 + *(int *)(v82 + 36);
    *(double *)v55 = -v36;
    *(_QWORD *)(v55 + 8) = 0;
    sub_100007FF0((uint64_t)v13, &qword_10031E368);
    sub_10000B458(v54, v83, &qword_10031E370);
    v56 = v76((char *)v6 + *(int *)(v80 + 20), v77, v45);
    *v6 = v41 * 0.5;
    v6[1] = v41 * 0.5;
    v57 = static Color.white.getter(v56);
    sub_10002C428((uint64_t)v6, (uint64_t)v10);
    *(_QWORD *)&v10[*(int *)(v43 + 52)] = v57;
    *(_WORD *)&v10[*(int *)(v43 + 56)] = 256;
    v58 = sub_10002C46C((uint64_t)v6);
    v59 = static Alignment.center.getter(v58);
    _FrameLayout.init(width:height:alignment:)(v99, *(_QWORD *)&v74, 0, *(_QWORD *)&v75, 0, v59, v60);
    sub_10000B234((uint64_t)v10, (uint64_t)v13, &qword_100318338);
    v61 = &v13[*(int *)(v81 + 36)];
    v62 = v99[1];
    *(_OWORD *)v61 = v99[0];
    *((_OWORD *)v61 + 1) = v62;
    *((_OWORD *)v61 + 2) = v99[2];
    sub_100007FF0((uint64_t)v10, &qword_100318338);
    v63 = (uint64_t)v78;
    sub_10000B234((uint64_t)v13, (uint64_t)v78, &qword_10031E368);
    v64 = v63 + *(int *)(v82 + 36);
    *(double *)v64 = v36;
    *(_QWORD *)(v64 + 8) = 0;
    sub_100007FF0((uint64_t)v13, &qword_10031E368);
    sub_10000B458(v63, v54, &qword_10031E370);
    v65 = v83;
    sub_10000B234(v83, v63, &qword_10031E370);
    v66 = v79;
    sub_10000B234(v54, v79, &qword_10031E370);
    sub_10000B234(v63, (uint64_t)v31, &qword_10031E370);
    v67 = sub_100003DB8(qword_10031E390);
    sub_10000B234(v66, (uint64_t)&v31[*(int *)(v67 + 48)], &qword_10031E370);
    sub_100007FF0(v54, &qword_10031E370);
    sub_100007FF0(v65, &qword_10031E370);
    sub_100007FF0(v66, &qword_10031E370);
    sub_100007FF0(v63, &qword_10031E370);
    v68 = sub_100003DB8(&qword_10031E380);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v31, 0, 1, v68);
    v40 = v90;
    sub_10000B458((uint64_t)v31, v90, &qword_10031E378);
  }
  else
  {
    v39 = sub_100003DB8(&qword_10031E380);
    v40 = v90;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v90, 1, 1, v39);
  }
  sub_10000B234(v40, (uint64_t)v31, &qword_10031E378);
  v69 = v91;
  *(_QWORD *)a2 = v91;
  *(_WORD *)(a2 + 8) = 256;
  *(_QWORD *)(a2 + 16) = v89;
  *(_BYTE *)(a2 + 24) = v88;
  *(_QWORD *)(a2 + 32) = v87;
  *(_BYTE *)(a2 + 40) = v86;
  v70 = v84;
  *(_QWORD *)(a2 + 48) = v85;
  *(_QWORD *)(a2 + 56) = v70;
  v71 = sub_100003DB8(&qword_10031E388);
  sub_10000B234((uint64_t)v31, a2 + *(int *)(v71 + 48), &qword_10031E378);
  swift_retain(v69);
  sub_100007FF0(v40, &qword_10031E378);
  sub_100007FF0((uint64_t)v31, &qword_10031E378);
  return swift_release(v69);
}

void sub_1000D044C(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  double v6;
  double v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  __int16 v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  __int16 v21;
  __int16 v22;

  v3 = *(_QWORD *)(v1 + 40);
  v4 = 0;
  if ((*(_BYTE *)(v3 + 80) & 1) != 0
    || (*(_BYTE *)(v3 + 66) & 1) != 0
    || (*(_BYTE *)(v3 + 192) & 1) != 0
    || (v5 = *(unsigned __int8 *)(v1 + 16), v5 == 4)
    || v5 == 3 && !*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v1 + 32) + 48) + 120))
  {
    v8 = 0;
    v13 = 0;
    v12 = 0;
    v10 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0.0;
    v17 = 512;
    goto LABEL_11;
  }
  v6 = Angle.animatableData.getter(round(*(double *)(v3 + 168) * 57.2957795) * 0.0174532925);
  v7 = Angle.animatableData.getter(4.71238898);
  Angle.animatableData.setter(v6 + v7);
  v8 = 0x4012D97C7F3321D2;
  v9 = v5 - 2;
  if (v5 == 2)
  {
    v10 = 0x4008000000000000;
    v12 = 0x401A000000000000;
    v13 = 0x403E400000000000;
    v11 = 40.0;
  }
  else
  {
    if (v5 != 3)
    {
      v16 = -8.0;
      v13 = 0x405EC00000000000;
      v12 = 0x402A000000000000;
      v10 = 0x4018000000000000;
      v15 = 0x4073200000000000;
      v4 = 0x4074400000000000;
      goto LABEL_15;
    }
    v10 = 0;
    v11 = 10.0;
    v12 = 0x4008000000000000;
    v13 = 0x4026000000000000;
  }
  sub_1000CDA30();
  v4 = v18;
  v15 = v19;
  sub_1000CDA30();
  v16 = v11 + v20 * -0.5;
LABEL_15:
  v21 = v9 < 3;
  if (v9 >= 3)
    v14 = 0x403A000000000000;
  else
    v14 = 0;
  if (sub_1000CEFB0())
    v22 = 256;
  else
    v22 = 0;
  v17 = v22 | v21;
LABEL_11:
  *(_QWORD *)a1 = v8;
  *(_QWORD *)(a1 + 8) = v13;
  *(_QWORD *)(a1 + 16) = v12;
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v15;
  *(double *)(a1 + 48) = v16;
  *(_QWORD *)(a1 + 56) = v14;
  *(_WORD *)(a1 + 64) = v17;
}

double sub_1000D0630@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  double result;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  char v34;
  __int128 v35;
  __int128 v36;
  _BYTE v37[32];
  __int128 v38;
  uint64_t v39;
  unsigned __int8 v40;
  _BYTE v41[32];
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  __int16 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  char v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;

  v3 = *(unsigned __int8 *)(v1 + 16);
  if (v3 == 2)
  {
    v10 = 0x4008000000000000;
    v11 = 0x4032000000000000;
LABEL_8:
    sub_1000CF39C(&v53);
    v20 = v55;
    v14 = v56;
    v16 = v57;
    v17 = v58;
    v21 = v53;
    v12 = v54;
    sub_1000D08A4();
    v19 = v22;
    *(_QWORD *)&v46 = v11;
    *((_QWORD *)&v46 + 1) = v21;
    *(_QWORD *)&v47 = v12;
    *((_QWORD *)&v47 + 1) = v20;
    *(_QWORD *)&v48 = v14;
    *((_QWORD *)&v48 + 1) = v16;
    *(_QWORD *)&v49 = v17;
    *((_QWORD *)&v49 + 1) = v10;
    v50 = v22;
    v51 = 0;
    goto LABEL_9;
  }
  if (v3 == 3)
  {
    sub_1000CF39C(&v53);
    v13 = v53;
    v12 = v54;
    v15 = v55;
    v14 = v56;
    v16 = v57;
    v17 = v58;
    sub_1000D08A4();
    v19 = v18;
    *(_QWORD *)&v46 = 0;
    *((_QWORD *)&v46 + 1) = v13;
    *(_QWORD *)&v47 = v12;
    *((_QWORD *)&v47 + 1) = v15;
    *(_QWORD *)&v48 = v14;
    *((_QWORD *)&v48 + 1) = v16;
    v49 = v17;
    v50 = v18;
    v51 = 1;
LABEL_9:
    v23 = sub_1000D1354();
    v24 = sub_1000D1398();
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v14);
    swift_retain(v16);
    swift_retain(v17);
    swift_retain(v19);
    _ConditionalContent<>.init(storage:)(&v46, &type metadata for RadarMetrics._CenterpieceView, &type metadata for RadarMetrics._CompactSessionCenterpieceView, v23, v24);
    *(_OWORD *)v41 = v36;
    *(_OWORD *)&v41[16] = *(_OWORD *)v37;
    v42 = *(_OWORD *)&v37[16];
    v43 = v38;
    v44 = v39;
    v45 = v40;
    v25 = sub_100003DB8(&qword_10031E270);
    v26 = sub_1000D12E8();
    v27 = sub_1000D13DC();
    _ConditionalContent<>.init(storage:)(v41, v25, &type metadata for RadarMetrics._CompactSessionExplorerCenterpieceView, v26, v27);
    swift_release(v19);
    swift_release(v17);
    swift_release(v16);
    swift_bridgeObjectRelease(v14);
    swift_bridgeObjectRelease(v12);
    goto LABEL_10;
  }
  if (v3 != 4)
  {
    v10 = 0x4018000000000000;
    v11 = 0x4051000000000000;
    goto LABEL_8;
  }
  sub_1000CF39C((unint64_t *)&v36);
  v35 = v36;
  v4 = *(_QWORD *)v37;
  v5 = *(_QWORD *)&v37[24];
  sub_1000D08A4();
  *(_QWORD *)v41 = 0;
  *(_OWORD *)&v41[8] = v35;
  *(_QWORD *)&v41[24] = v4;
  v42 = *(_OWORD *)&v37[8];
  v43 = v5;
  v44 = v6;
  v45 = 256;
  v7 = sub_100003DB8(&qword_10031E270);
  v8 = sub_1000D12E8();
  v9 = sub_1000D13DC();
  _ConditionalContent<>.init(storage:)(v41, v7, &type metadata for RadarMetrics._CompactSessionExplorerCenterpieceView, v8, v9);
LABEL_10:
  result = *(double *)&v46;
  v29 = v47;
  v30 = v48;
  v31 = v49;
  v32 = v50;
  v33 = v51;
  v34 = v52;
  *(_OWORD *)a1 = v46;
  *(_OWORD *)(a1 + 16) = v29;
  *(_OWORD *)(a1 + 32) = v30;
  *(_OWORD *)(a1 + 48) = v31;
  *(_QWORD *)(a1 + 64) = v32;
  *(_BYTE *)(a1 + 72) = v33;
  *(_BYTE *)(a1 + 73) = v34;
  return result;
}

void sub_1000D08A4()
{
  __asm { BR              X11 }
}

uint64_t sub_1000D08D4()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(UIColor), "systemGrayColor");
  return ((uint64_t (*)(id))Color.init(uiColor:))(v0);
}

uint64_t sub_1000D0988@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  __n128 v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  double v18;
  __n128 v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  __n128 v31;
  __n128 v32;
  __n128 v33;
  uint64_t v35;
  uint64_t v36;

  v3 = *a1;
  v4 = a1[1];
  v5 = a1[2];
  v6 = a1[3];
  v7 = a1[4];
  v8 = a1[5];
  v9 = a1[6];
  v10 = a1[7];
  v11 = swift_retain(v9);
  swift_bridgeObjectRetain_n(v7, 2, v11);
  swift_bridgeObjectRetain(v5);
  v12 = swift_retain(v8);
  v35 = v7;
  v13 = Image.init(systemName:)(v6, v7, v12);
  v14 = static Font.Weight.bold.getter();
  v15 = ((uint64_t (*)(void))static Color.black.getter)();
  swift_bridgeObjectRetain(v5);
  v36 = v5;
  v17 = Image.init(systemName:)(v4, v5, v16);
  v18 = static Font.Weight.bold.getter();
  v19 = swift_retain(v8);
  v20 = v9;
  if (!v9)
    v20 = static Color.clear.getter(v19);
  v21 = swift_retain(v9);
  v22 = static Color.black.getter(v21);
  v23 = Color.opacity(_:)(0.4);
  v24 = swift_release(v22);
  v25 = static Animation.easeInOut(duration:)(v24, 0.25);
  v26 = v9;
  if (!v9)
  {
    swift_retain(v8);
    v26 = v8;
  }
  v27 = swift_retain(v9);
  swift_retain_n(v13, 2, v27);
  swift_retain_n(v15, 2, v28);
  swift_retain_n(v17, 2, v29);
  swift_retain_n(v8, 2, v30);
  swift_retain_n(v20, 2, v31);
  swift_retain_n(v23, 2, v32);
  swift_retain_n(v25, 2, v33);
  swift_retain(v26);
  swift_release(v15);
  swift_release(v13);
  swift_release(v25);
  swift_release(v23);
  swift_release(v20);
  swift_release(v17);
  swift_release(v9);
  swift_release_n(v8, 2);
  swift_bridgeObjectRelease(v35);
  swift_bridgeObjectRelease(v36);
  *a2 = v13;
  a2[1] = v3;
  *((double *)a2 + 2) = v14;
  a2[3] = v15;
  a2[4] = v17;
  a2[5] = v3;
  *((double *)a2 + 6) = v18;
  a2[7] = v8;
  a2[8] = v20;
  a2[9] = v23;
  a2[10] = v10;
  a2[11] = 0;
  a2[12] = 0;
  a2[13] = v25;
  a2[14] = v26;
  swift_release(v15);
  swift_release(v13);
  swift_release(v26);
  swift_release(v25);
  swift_release(v23);
  swift_release(v20);
  swift_release(v8);
  return swift_release(v17);
}

uint64_t sub_1000D0BD4(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _BYTE v24[24];
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  _OWORD v28[4];
  uint64_t v29;

  v2 = *(_OWORD *)(v1 + 48);
  v28[2] = *(_OWORD *)(v1 + 32);
  v28[3] = v2;
  v29 = *(_QWORD *)(v1 + 64);
  v3 = *(_OWORD *)(v1 + 16);
  v28[0] = *(_OWORD *)v1;
  v28[1] = v3;
  v4 = static Alignment.center.getter(a1);
  v6 = v5;
  sub_1000D0988((uint64_t *)v28, &v19);
  v7 = v19;
  v8 = v21;
  v9 = v23;
  v10 = *(_QWORD *)v24;
  v12 = v25;
  v11 = v26;
  v13 = v20;
  v14 = v22;
  v15 = *(_OWORD *)&v24[8];
  v19 = v4;
  *(_QWORD *)&v20 = v6;
  *((_QWORD *)&v20 + 1) = v7;
  v21 = v13;
  v22 = v8;
  v23 = v14;
  *(_OWORD *)v24 = v9;
  *(_QWORD *)&v24[16] = v10;
  v25 = v15;
  v26 = v12;
  v27 = v11;
  v16 = sub_100003DB8(&qword_10031E2C0);
  v17 = sub_1000084FC(&qword_10031E2C8, &qword_10031E2C0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  View.accessibility(hidden:)(1, v16, v17);
  swift_release(v11);
  swift_release(v10);
  swift_release(*((_QWORD *)&v9 + 1));
  swift_release(v9);
  swift_release(*((_QWORD *)&v8 + 1));
  swift_release(v8);
  swift_release(v7);
  return swift_release(*((_QWORD *)&v12 + 1));
}

uint64_t sub_1000D0D1C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(v0 + 48);
  if (v1)
  {
    v2 = *(_QWORD *)(v0 + 48);
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 40);
    swift_retain(v2);
    v1 = 0;
  }
  swift_retain(v1);
  v4 = static Alignment.center.getter(v3);
  _FrameLayout.init(width:height:alignment:)(&v9, 0x4020000000000000, 0, 0x4020000000000000, 0, v4, v5);
  v6 = sub_100003DB8(&qword_10031D998);
  v7 = sub_1000C4DE0();
  View.accessibility(hidden:)(1, v6, v7);
  return swift_release(v2);
}

uint64_t sub_1000D0DF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  __int16 v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  __int128 v49;

  v32 = a2;
  v3 = sub_100003DB8(&qword_10031E2D8);
  v5 = __chkstk_darwin(v3, v4);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v5, v8);
  v11 = (char *)&v32 - v10;
  v13 = __chkstk_darwin(v9, v12);
  v15 = (char *)&v32 - v14;
  v17 = __chkstk_darwin(v13, v16);
  v19 = (char *)&v32 - v18;
  v20 = static Color.white.getter(v17);
  v21 = static Alignment.center.getter(v20);
  _FrameLayout.init(width:height:alignment:)(&v40, 0x4030000000000000, 0, 0x4030000000000000, 0, v21, v22);
  v33 = v20;
  v34 = 256;
  v35 = v40;
  v36 = v41;
  v37 = v42;
  v38 = v43;
  v39 = v44;
  v23 = sub_100003DB8(&qword_10031D998);
  v24 = sub_1000C4DE0();
  View.accessibility(hidden:)(1, v23, v24);
  swift_release(v20);
  v25 = *(_QWORD *)(a1 + 64);
  swift_retain(v25);
  v27 = static Alignment.center.getter(v26);
  _FrameLayout.init(width:height:alignment:)(&v45, 0x4028000000000000, 0, 0x4028000000000000, 0, v27, v28);
  v33 = v25;
  v34 = 256;
  v35 = v45;
  v36 = v46;
  v37 = v47;
  v38 = v48;
  v39 = v49;
  View.accessibility(hidden:)(1, v23, v24);
  swift_release(v25);
  sub_10000B234((uint64_t)v19, (uint64_t)v11, &qword_10031E2D8);
  sub_10000B234((uint64_t)v15, (uint64_t)v7, &qword_10031E2D8);
  v29 = v32;
  sub_10000B234((uint64_t)v11, v32, &qword_10031E2D8);
  v30 = sub_100003DB8(&qword_10031E2E0);
  sub_10000B234((uint64_t)v7, v29 + *(int *)(v30 + 48), &qword_10031E2D8);
  sub_100007FF0((uint64_t)v15, &qword_10031E2D8);
  sub_100007FF0((uint64_t)v19, &qword_10031E2D8);
  sub_100007FF0((uint64_t)v7, &qword_10031E2D8);
  return sub_100007FF0((uint64_t)v11, &qword_10031E2D8);
}

uint64_t sub_1000D106C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD v9[4];
  uint64_t v10;

  v4 = *(_OWORD *)(v2 + 48);
  v9[2] = *(_OWORD *)(v2 + 32);
  v9[3] = v4;
  v10 = *(_QWORD *)(v2 + 64);
  v5 = *(_OWORD *)(v2 + 16);
  v9[0] = *(_OWORD *)v2;
  v9[1] = v5;
  *a2 = static Alignment.center.getter(a1);
  a2[1] = v6;
  v7 = sub_100003DB8(&qword_10031E2D0);
  return sub_1000D0DF8((uint64_t)v9, (uint64_t)a2 + *(int *)(v7 + 44));
}

uint64_t sub_1000D10CC()
{
  _QWORD *v0;

  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for RadarMetrics()
{
  return objc_opt_self(_TtC8SOSBuddy12RadarMetrics);
}

uint64_t getEnumTagSinglePayload for RadarMetrics.Presentation(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
  {
    v6 = *a1;
    if (v6 >= 2)
    {
      v7 = (v6 + 2147483646) & 0x7FFFFFFF;
      result = v7 - 2;
      if (v7 > 2)
        return result;
    }
    return 0;
  }
  v2 = a2 + 4;
  if (a2 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if (v2 >> 8 < 0xFF)
    v3 = 1;
  if (v2 >= 0x100)
    v4 = v3;
  else
    v4 = 0;
  return ((uint64_t (*)(void))((char *)&loc_1000D1188 + 4 * byte_100254110[v4]))();
}

uint64_t storeEnumTagSinglePayload for RadarMetrics.Presentation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 4;
  if (a3 + 4 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFC)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1000D1234 + 4 * byte_10025411A[v5]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000D1268 + 4 * byte_100254115[v5]))();
}

uint64_t sub_1000D1268(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D1270(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D1278);
  return result;
}

uint64_t sub_1000D1284(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D128CLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1000D1290(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D1298(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D12A4(unsigned __int8 *a1)
{
  unsigned int v1;
  BOOL v2;
  int v3;

  v1 = *a1;
  v2 = v1 >= 2;
  v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2)
    return (v3 + 1);
  else
    return 0;
}

_BYTE *sub_1000D12C0(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 1;
  return result;
}

ValueMetadata *type metadata accessor for RadarMetrics.Presentation()
{
  return &type metadata for RadarMetrics.Presentation;
}

unint64_t sub_1000D12E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031E278;
  if (!qword_10031E278)
  {
    v1 = sub_100007FAC(&qword_10031E270);
    sub_1000D1354();
    sub_1000D1398();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031E278);
  }
  return result;
}

unint64_t sub_1000D1354()
{
  unint64_t result;

  result = qword_10031E280;
  if (!qword_10031E280)
  {
    result = swift_getWitnessTable(&unk_100254304, &type metadata for RadarMetrics._CenterpieceView);
    atomic_store(result, (unint64_t *)&qword_10031E280);
  }
  return result;
}

unint64_t sub_1000D1398()
{
  unint64_t result;

  result = qword_10031E288;
  if (!qword_10031E288)
  {
    result = swift_getWitnessTable(&unk_1002542B4, &type metadata for RadarMetrics._CompactSessionCenterpieceView);
    atomic_store(result, (unint64_t *)&qword_10031E288);
  }
  return result;
}

unint64_t sub_1000D13DC()
{
  unint64_t result;

  result = qword_10031E290;
  if (!qword_10031E290)
  {
    result = swift_getWitnessTable(&unk_100254264, &type metadata for RadarMetrics._CompactSessionExplorerCenterpieceView);
    atomic_store(result, (unint64_t *)&qword_10031E290);
  }
  return result;
}

unint64_t sub_1000D1420()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031E2A0;
  if (!qword_10031E2A0)
  {
    v1 = sub_100007FAC(&qword_10031E298);
    sub_1000D148C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031E2A0);
  }
  return result;
}

unint64_t sub_1000D148C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031E2A8;
  if (!qword_10031E2A8)
  {
    v1 = sub_100007FAC(&qword_10031E2B0);
    sub_1000084FC(&qword_10031CC88, &qword_10031CC80, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031E2A8);
  }
  return result;
}

uint64_t sub_1000D1510@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  _QWORD *v20;
  char v21;
  _QWORD v22[2];

  v21 = 0;
  State.init(wrappedValue:)(v22, &v21, &type metadata for Bool);
  v14 = v22[1];
  *(_BYTE *)a7 = v22[0];
  *(_QWORD *)(a7 + 8) = v14;
  *(_BYTE *)(a7 + 16) = a1;
  v16 = _s8SOSBuddy19TimelineViewContentVMa_0(0, a5, a6, v15);
  v17 = a7 + *(int *)(v16 + 40);
  v18 = type metadata accessor for Date(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17, a2, v18);
  v20 = (_QWORD *)(a7 + *(int *)(v16 + 44));
  *v20 = a3;
  v20[1] = a4;
  return result;
}

uint64_t sub_1000D15D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  int v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  char *v47;
  double v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t, uint64_t);
  char *v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  double v60;
  double v61;
  char *v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t);
  uint64_t WitnessTable;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  void (*v92)(char *, uint64_t, uint64_t);
  uint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  void *v124;

  v3 = v2;
  v112 = a2;
  v5 = type metadata accessor for Date(0);
  v110 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5, v6);
  v109 = (char *)&WitnessTable - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = *(_QWORD *)(a1 - 8);
  v10 = __chkstk_darwin(v7, v9);
  v107 = v11;
  v108 = (char *)&WitnessTable - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10, v12);
  v94 = (char *)&WitnessTable - v14;
  v15 = *(_QWORD *)(a1 + 16);
  v92 = *(void (**)(char *, uint64_t, uint64_t))(v15 - 8);
  __chkstk_darwin(v13, v16);
  v18 = (char *)&WitnessTable - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for ModifiedContent(0, v15, &type metadata for _RotationEffect);
  v87 = *(_QWORD *)(v19 - 8);
  __chkstk_darwin(v19, v20);
  v91 = (char *)&WitnessTable - v21;
  v22 = type metadata accessor for ModifiedContent(0, v19, &type metadata for _ScaleEffect);
  v89 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22, v23);
  v97 = (char *)&WitnessTable - v24;
  v25 = sub_100007FAC(&qword_10031E4C0);
  v26 = type metadata accessor for ModifiedContent(0, v22, v25);
  v105 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26, v27);
  v104 = (char *)&WitnessTable - v28;
  v29 = *(_QWORD *)(a1 + 24);
  v123 = v29;
  v124 = &protocol witness table for _RotationEffect;
  v88 = v19;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  v121 = WitnessTable;
  v122 = &protocol witness table for _ScaleEffect;
  v90 = v22;
  v30 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v22);
  v31 = sub_1000084FC(&qword_10031E4C8, &qword_10031E4C0, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
  v93 = v30;
  v119 = v30;
  v120 = v31;
  v32 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v26);
  v33 = sub_1000052EC(&qword_10031E4D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v103 = v26;
  v115 = v26;
  v116 = v5;
  v111 = v5;
  v100 = v32;
  v117 = v32;
  v118 = v33;
  v96 = v33;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v115, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v34 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v36 = __chkstk_darwin(OpaqueTypeMetadata2, v35);
  v95 = (char *)&WitnessTable - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v36, v38);
  v98 = (uint64_t)&WitnessTable - v40;
  (*(void (**)(uint64_t))(v3 + *(int *)(a1 + 44)))(v39);
  v42 = *(unsigned __int8 *)(v3 + 16);
  v43 = 0.0;
  if (v42 == 1)
  {
    v44 = *(_QWORD *)(v3 + 8);
    LOBYTE(v115) = *(_BYTE *)v3;
    v116 = v44;
    v45 = sub_100003DB8(&qword_100316780);
    State.wrappedValue.getter(&v114, v45);
    v41.n128_u64[0] = 0x3FBF46BB9C109324;
    if (v114)
      v43 = -0.122173048;
    else
      v43 = 0.122173048;
  }
  v46 = static UnitPoint.center.getter(v41);
  v47 = v91;
  View.rotationEffect(_:anchor:)(v15, v29, v43, v46, v48);
  (*((void (**)(char *, uint64_t))v92 + 1))(v18, v15);
  v49 = v113;
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v113 + 16);
  v51 = v94;
  v50(v94, v3, a1);
  v106 = v15;
  v101 = v29;
  v99 = v34;
  v92 = v50;
  if (!v42)
  {
    (*(void (**)(char *, uint64_t))(v49 + 8))(v51, a1);
    v55 = v90;
    v56 = v89;
    v57 = v88;
    v58 = v87;
    v59 = WitnessTable;
    goto LABEL_9;
  }
  v52 = *((_QWORD *)v51 + 1);
  LOBYTE(v115) = *v51;
  v116 = v52;
  v53 = sub_100003DB8(&qword_100316780);
  State.wrappedValue.getter(&v114, v53);
  (*(void (**)(char *, uint64_t))(v113 + 8))(v51, a1);
  v55 = v90;
  v56 = v89;
  v57 = v88;
  v58 = v87;
  v59 = WitnessTable;
  if ((v114 & 1) == 0)
  {
LABEL_9:
    v60 = 1.0;
    goto LABEL_10;
  }
  v60 = 0.9;
LABEL_10:
  v61 = static UnitPoint.center.getter(v54);
  v62 = v97;
  View.scaleEffect(_:anchor:)(v57, v59, v60, v61, v63);
  v64 = (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v47, v57);
  v65 = static Animation.easeInOut(duration:)(v64, 4.0);
  v66 = *(_QWORD *)(v3 + 8);
  LOBYTE(v115) = *(_BYTE *)v3;
  v116 = v66;
  v67 = sub_100003DB8(&qword_100316780);
  State.wrappedValue.getter(&v114, v67);
  LOBYTE(v115) = v114;
  v68 = v104;
  View.animation<A>(_:value:)(v65, &v115, v55, &type metadata for Bool, v93, &protocol witness table for Bool);
  swift_release(v65);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v62, v55);
  v70 = v109;
  v69 = v110;
  v71 = v111;
  (*(void (**)(char *, uint64_t, uint64_t))(v110 + 16))(v109, v3 + *(int *)(a1 + 40), v111);
  v72 = v108;
  v92(v108, v3, a1);
  v73 = v113;
  v74 = *(unsigned __int8 *)(v113 + 80);
  v75 = (v74 + 32) & ~v74;
  v76 = swift_allocObject(&unk_1002EE6F0, v75 + v107, v74 | 7);
  v77 = v101;
  *(_QWORD *)(v76 + 16) = v106;
  *(_QWORD *)(v76 + 24) = v77;
  (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(v76 + v75, v72, a1);
  v78 = (uint64_t)v95;
  v79 = v103;
  v80 = v100;
  v81 = v96;
  View.onChange<A>(of:initial:_:)(v70, 0, sub_1000D3E64, v76, v103, v71, v100, v96);
  swift_release(v76);
  (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v68, v79);
  v115 = v79;
  v116 = v71;
  v117 = v80;
  v118 = v81;
  swift_getOpaqueTypeConformance2(&v115, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v82 = v98;
  v83 = OpaqueTypeMetadata2;
  sub_100092E98(v78, OpaqueTypeMetadata2, v98);
  v84 = *(void (**)(uint64_t, uint64_t))(v99 + 8);
  v84(v78, v83);
  sub_1000903EC(v82, v83, v112);
  return ((uint64_t (*)(uint64_t, uint64_t))v84)(v82, v83);
}

uint64_t sub_1000D1D48(char *a1)
{
  char v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[9];
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = *((_QWORD *)a1 + 1);
  swift_retain(v2);
  v3 = sub_100003DB8(&qword_100316780);
  State.wrappedValue.getter(&v7, v3);
  v5[1] = v1;
  v6 = v2;
  v5[0] = (v7 & 1) == 0;
  State.wrappedValue.setter(v5, v3);
  return swift_release(v2);
}

uint64_t sub_1000D1DD8@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t WitnessTable;
  void (*v36)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v39 = a4;
  v40 = a5;
  v44 = a2;
  v45 = a3;
  v43 = a1;
  v46 = a6;
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v38 - v15;
  v17 = type metadata accessor for PeriodicTimelineSchedule(0);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = _s8SOSBuddy19TimelineViewContentVMa_0(255, a4, a5, v21);
  v41 = sub_1000052EC(qword_10031E438, (uint64_t (*)(uint64_t))&type metadata accessor for PeriodicTimelineSchedule, (uint64_t)&protocol conformance descriptor for PeriodicTimelineSchedule);
  v23 = type metadata accessor for TimelineView(0, v17, v22);
  v42 = *(_QWORD *)(v23 - 8);
  v25 = __chkstk_darwin(v23, v24);
  v27 = (char *)&v38 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = __chkstk_darwin(v25, v28);
  v31 = (char *)&v38 - v30;
  static Date.now.getter(v29);
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v13, v16, v8);
  PeriodicTimelineSchedule.init(from:by:)(v13, 4.0);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v16, v8);
  v32 = swift_allocObject(&unk_1002EE648, 56, 7);
  v33 = v40;
  *(_QWORD *)(v32 + 16) = v39;
  *(_QWORD *)(v32 + 24) = v33;
  *(_BYTE *)(v32 + 32) = v43;
  *(_QWORD *)(v32 + 40) = v44;
  v34 = v45;
  *(_QWORD *)(v32 + 48) = v45;
  swift_retain(v34);
  WitnessTable = swift_getWitnessTable(&unk_100254738, v22);
  sub_1000CD84C((uint64_t)v20, (uint64_t)sub_1000D3760, v32, v17, v22, v41, WitnessTable);
  v47 = WitnessTable;
  swift_getWitnessTable(&protocol conformance descriptor for <> TimelineView<A, B>, v23);
  sub_100092E98((uint64_t)v27, v23, (uint64_t)v31);
  v36 = *(void (**)(char *, uint64_t))(v42 + 8);
  v36(v27, v23);
  sub_1000903EC((uint64_t)v31, v23, v46);
  return ((uint64_t (*)(char *, uint64_t))v36)(v31, v23);
}

uint64_t sub_1000D2074@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;

  v27 = a2;
  v28 = a6;
  v10 = type metadata accessor for Date(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = _s8SOSBuddy19TimelineViewContentVMa_0(0, a4, a5, v14);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = __chkstk_darwin(v15, v17);
  v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  v23 = (char *)&v27 - v22;
  v24 = sub_100003DB8(qword_100316788);
  TimelineView.Context.date.getter(v24);
  swift_retain(a3);
  sub_1000D1510(a1, (uint64_t)v13, v27, a3, a4, a5, (uint64_t)v20);
  swift_getWitnessTable(&unk_100254738, v15);
  sub_100092E98((uint64_t)v20, v15, (uint64_t)v23);
  v25 = *(void (**)(char *, uint64_t))(v16 + 8);
  v25(v20, v15);
  sub_1000903EC((uint64_t)v23, v15, v28);
  return ((uint64_t (*)(char *, uint64_t))v25)(v23, v15);
}

uint64_t sub_1000D21F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v2;

  return sub_1000D1DD8(*v2, *((_QWORD *)v2 + 1), *((_QWORD *)v2 + 2), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_1000D2204@<X0>(uint64_t a1@<X0>, void (*a2)(char *)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *);
  uint64_t v30;
  uint64_t v31;

  v30 = a8;
  v31 = a7;
  v28 = a3;
  v29 = a2;
  v27 = a1;
  v11 = sub_100003DB8(qword_100316788);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  v15 = __chkstk_darwin(v11, v14);
  v16 = *(_QWORD *)(a5 - 8);
  v18 = __chkstk_darwin(v15, v17);
  v20 = (char *)&v26 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v21);
  v23 = (char *)&v26 - v22;
  result = type metadata accessor for TimelineView.Context(0, a4, a5, a6);
  if (*(_QWORD *)(*(_QWORD *)(result - 8) + 64) == v13)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v27, v11);
    v29((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(char *, uint64_t))(v12 + 8))((char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
    sub_100092E98((uint64_t)v20, a5, (uint64_t)v23);
    v25 = *(void (**)(char *, uint64_t))(v16 + 8);
    v25(v20, a5);
    sub_1000903EC((uint64_t)v23, a5, v30);
    return ((uint64_t (*)(char *, uint64_t))v25)(v23, a5);
  }
  else
  {
    __break(1u);
  }
  return result;
}

double sub_1000D2384(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_1000D23A8(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

ValueMetadata *type metadata accessor for PseudoKeyframeFunction()
{
  return &type metadata for PseudoKeyframeFunction;
}

ValueMetadata *type metadata accessor for PseudoKeyframeFunction.Key()
{
  return &type metadata for PseudoKeyframeFunction.Key;
}

uint64_t destroy for RadarMetrics.WavesMetrics(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_release(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[5]);
  swift_release(a1[6]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[11]);
  swift_release(a1[12]);
  swift_bridgeObjectRelease(a1[15]);
  return swift_bridgeObjectRelease(a1[16]);
}

uint64_t initializeWithCopy for RadarMetrics.WavesMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v11;
  v13 = *(_QWORD *)(a2 + 88);
  v12 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v13;
  *(_QWORD *)(a1 + 96) = v12;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  v15 = *(_QWORD *)(a2 + 120);
  v16 = v12;
  v17 = *(_QWORD *)(a2 + 128);
  *(_QWORD *)(a1 + 120) = v15;
  *(_QWORD *)(a1 + 128) = v17;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_retain(v16);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v17);
  return a1;
}

uint64_t assignWithCopy for RadarMetrics.WavesMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v14;
  swift_retain(v14);
  swift_release(v15);
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v18 = *(_QWORD *)(a2 + 72);
  v19 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 80);
  v21 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(a2 + 88);
  v23 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = *(_QWORD *)(a2 + 96);
  v25 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v24;
  swift_retain(v24);
  swift_release(v25);
  *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  v26 = *(_QWORD *)(a2 + 120);
  v27 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 120) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = *(_QWORD *)(a2 + 128);
  v29 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 128) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease(v29);
  return a1;
}

uint64_t assignWithTake for RadarMetrics.WavesMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  swift_release(*(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v6 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v8 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
  v9 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release(v9);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 120));
  v10 = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for RadarMetrics.WavesMetrics(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RadarMetrics.WavesMetrics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RadarMetrics.WavesMetrics()
{
  return &type metadata for RadarMetrics.WavesMetrics;
}

ValueMetadata *type metadata accessor for RadarMetrics.TargetZoneMetrics()
{
  return &type metadata for RadarMetrics.TargetZoneMetrics;
}

ValueMetadata *type metadata accessor for RadarMetrics._CompactSessionExplorerCenterpieceView()
{
  return &type metadata for RadarMetrics._CompactSessionExplorerCenterpieceView;
}

ValueMetadata *type metadata accessor for RadarMetrics._CompactSessionCenterpieceView()
{
  return &type metadata for RadarMetrics._CompactSessionCenterpieceView;
}

ValueMetadata *type metadata accessor for RadarMetrics._CenterpieceView()
{
  return &type metadata for RadarMetrics._CenterpieceView;
}

uint64_t sub_1000D28D4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002997D8, 1);
}

uint64_t sub_1000D28E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002997B0, 1);
}

uint64_t sub_1000D28F4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100299788, 1);
}

ValueMetadata *type metadata accessor for RadarMetrics._DeviceFontSize()
{
  return &type metadata for RadarMetrics._DeviceFontSize;
}

uint64_t storeEnumTagSinglePayload for PseudoKeyframeFunction.Function(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000D2960 + 4 * byte_100254124[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000D2994 + 4 * byte_10025411F[v4]))();
}

uint64_t sub_1000D2994(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D299C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000D29A4);
  return result;
}

uint64_t sub_1000D29B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000D29B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000D29BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D29C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PseudoKeyframeFunction.Function()
{
  return &type metadata for PseudoKeyframeFunction.Function;
}

uint64_t destroy for RadarMetrics.WavesConstMetrics(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_release(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[5]);
  swift_release(a1[6]);
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(a1[10]);
  swift_bridgeObjectRelease(a1[11]);
  return swift_release(a1[12]);
}

uint64_t initializeWithCopy for RadarMetrics.WavesConstMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = v5;
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  v11 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v11;
  v12 = *(_QWORD *)(a2 + 88);
  v14 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v14;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v12);
  swift_retain(v14);
  return a1;
}

uint64_t assignWithCopy for RadarMetrics.WavesConstMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 48);
  v15 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v14;
  swift_retain(v14);
  swift_release(v15);
  v16 = *(_QWORD *)(a2 + 56);
  v17 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v18 = *(_QWORD *)(a2 + 72);
  v19 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  v20 = *(_QWORD *)(a2 + 80);
  v21 = *(_QWORD *)(a1 + 80);
  *(_QWORD *)(a1 + 80) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  v22 = *(_QWORD *)(a2 + 88);
  v23 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  v24 = *(_QWORD *)(a2 + 96);
  v25 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = v24;
  swift_retain(v24);
  swift_release(v25);
  return a1;
}

uint64_t assignWithTake for RadarMetrics.WavesConstMetrics(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  swift_release(*(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v6 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release(v6);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 72));
  v8 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 88));
  v9 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for RadarMetrics.WavesConstMetrics(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RadarMetrics.WavesConstMetrics(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RadarMetrics.WavesConstMetrics()
{
  return &type metadata for RadarMetrics.WavesConstMetrics;
}

uint64_t _s8SOSBuddy12RadarMetricsC18CenterpieceMetricsVwxx_0(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  swift_release(a1[5]);
  swift_release(a1[6]);
  return swift_release(a1[8]);
}

uint64_t _s8SOSBuddy12RadarMetricsC18CenterpieceMetricsVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = v6;
  v8 = *(_QWORD *)(a2 + 48);
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = v8;
  *(_QWORD *)(a1 + 56) = v7;
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_retain(v8);
  swift_retain(v9);
  return a1;
}

_QWORD *_s8SOSBuddy12RadarMetricsC18CenterpieceMetricsVwca_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = a2[2];
  v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[3] = a2[3];
  v6 = a2[4];
  v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a1[6];
  v11 = a2[6];
  a1[6] = v11;
  swift_retain(v11);
  swift_release(v10);
  a1[7] = a2[7];
  v12 = a2[8];
  v13 = a1[8];
  a1[8] = v12;
  swift_retain(v12);
  swift_release(v13);
  return a1;
}

_QWORD *_s8SOSBuddy12RadarMetricsC18CenterpieceMetricsVwta_0(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = a1[2];
  a1[1] = *(_QWORD *)(a2 + 8);
  a1[2] = v4;
  swift_bridgeObjectRelease(v5);
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(a1[4]);
  v6 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  swift_release(v6);
  v7 = a1[6];
  a1[6] = *(_QWORD *)(a2 + 48);
  swift_release(v7);
  a1[7] = *(_QWORD *)(a2 + 56);
  v8 = a1[8];
  a1[8] = *(_QWORD *)(a2 + 64);
  swift_release(v8);
  return a1;
}

ValueMetadata *type metadata accessor for RadarMetrics.CenterpieceMetrics()
{
  return &type metadata for RadarMetrics.CenterpieceMetrics;
}

unint64_t sub_1000D2FF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031E2E8;
  if (!qword_10031E2E8)
  {
    v1 = sub_100007FAC(&qword_10031E2F0);
    sub_1000084FC(&qword_10031E2C8, &qword_10031E2C0, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    sub_1000052EC(&qword_100316C10, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031E2E8);
  }
  return result;
}

unint64_t sub_1000D3090()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031E2F8;
  if (!qword_10031E2F8)
  {
    v1 = sub_100007FAC(&qword_10031E2D8);
    sub_1000C4DE0();
    sub_1000052EC(&qword_100316C10, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031E2F8);
  }
  return result;
}

uint64_t sub_1000D3114()
{
  return sub_1000084FC(&qword_10031E300, &qword_10031E308, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

unint64_t sub_1000D3144()
{
  unint64_t result;

  result = qword_10031E310;
  if (!qword_10031E310)
  {
    result = swift_getWitnessTable(&unk_1002543E4, &type metadata for PseudoKeyframeFunction.Function);
    atomic_store(result, (unint64_t *)&qword_10031E310);
  }
  return result;
}

uint64_t sub_1000D3188(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100299854, 1);
}

unint64_t sub_1000D31A0()
{
  unint64_t result;

  result = qword_10031E318;
  if (!qword_10031E318)
  {
    result = swift_getWitnessTable(&unk_10025445C, &type metadata for RadarMetrics._DeviceFontSize);
    atomic_store(result, (unint64_t *)&qword_10031E318);
  }
  return result;
}

unint64_t sub_1000D31E8()
{
  unint64_t result;

  result = qword_10031E320;
  if (!qword_10031E320)
  {
    result = swift_getWitnessTable(&unk_10025440C, &type metadata for RadarMetrics._DeviceFontSize);
    atomic_store(result, (unint64_t *)&qword_10031E320);
  }
  return result;
}

unint64_t sub_1000D3234()
{
  unint64_t result;

  result = qword_10031E338;
  if (!qword_10031E338)
  {
    result = swift_getWitnessTable(&unk_1002544AC, &type metadata for RadarMetrics._DeviceFontSize);
    atomic_store(result, (unint64_t *)&qword_10031E338);
  }
  return result;
}

ValueMetadata *type metadata accessor for RadarMetrics.TargetMetrics()
{
  return &type metadata for RadarMetrics.TargetMetrics;
}

ValueMetadata *type metadata accessor for RadarMetrics.TicksMetrics()
{
  return &type metadata for RadarMetrics.TicksMetrics;
}

uint64_t destroy for RadarMetrics.CenterpieceSymbol(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_release(a1[4]);
  return swift_release(a1[5]);
}

_QWORD *initializeWithCopy for RadarMetrics.CenterpieceSymbol(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[4];
  v6 = a2[5];
  a1[4] = v5;
  a1[5] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

_QWORD *assignWithCopy for RadarMetrics.CenterpieceSymbol(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a1[5];
  v11 = a2[5];
  a1[5] = v11;
  swift_retain(v11);
  swift_release(v10);
  return a1;
}

_QWORD *assignWithTake for RadarMetrics.CenterpieceSymbol(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  v6 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_release(v6);
  v7 = a1[5];
  a1[5] = *(_QWORD *)(a2 + 40);
  swift_release(v7);
  return a1;
}

ValueMetadata *type metadata accessor for RadarMetrics.CenterpieceSymbol()
{
  return &type metadata for RadarMetrics.CenterpieceSymbol;
}

unint64_t sub_1000D3440()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031E340;
  if (!qword_10031E340)
  {
    v1 = sub_100007FAC(&qword_10031E330);
    sub_1000084FC(&qword_10031E348, &qword_10031E328, (uint64_t)&protocol conformance descriptor for _ViewModifier_Content<A>);
    sub_1000084FC(&qword_100316BF0, &qword_100316BF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031E340);
  }
  return result;
}

ValueMetadata *type metadata accessor for RadarMetrics.TickCircleEffect()
{
  return &type metadata for RadarMetrics.TickCircleEffect;
}

uint64_t sub_1000D34F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  return a1;
}

uint64_t sub_1000D3524(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t sub_1000D3564(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppEvents.SelectRoadsideProviderRequestedParams(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppEvents.SelectRoadsideProviderRequestedParams(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for RockingView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for RockingView);
}

ValueMetadata *type metadata accessor for RadarMetrics.NudgeMetrics()
{
  return &type metadata for RadarMetrics.NudgeMetrics;
}

uint64_t sub_1000D3640(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10029996C, 1);
}

uint64_t sub_1000D3674()
{
  return sub_1000084FC(&qword_10031E418, &qword_10031E420, (uint64_t)&protocol conformance descriptor for AnimatablePair<A, B>);
}

unint64_t sub_1000D36A4()
{
  unint64_t result;

  result = qword_10031E428;
  if (!qword_10031E428)
  {
    result = swift_getWitnessTable(&unk_100254648, &type metadata for RadarMetrics.TickCircleEffect);
    atomic_store(result, (unint64_t *)&qword_10031E428);
  }
  return result;
}

unint64_t sub_1000D36EC()
{
  unint64_t result;

  result = qword_10031E430;
  if (!qword_10031E430)
  {
    result = swift_getWitnessTable(&unk_100254698, &type metadata for RadarMetrics.TickCircleEffect);
    atomic_store(result, (unint64_t *)&qword_10031E430);
  }
  return result;
}

uint64_t _s8SOSBuddy19TimelineViewContentVMa_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&_s8SOSBuddy19TimelineViewContentVMn_0);
}

uint64_t sub_1000D373C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000D3760@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000D2074(*(_BYTE *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000D3770()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000D3794@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1000D2204(a1, *(void (**)(char *))(v2 + 48), *(_QWORD *)(v2 + 56), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

uint64_t sub_1000D37A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_1002546F8;
  v4[1] = &unk_100254710;
  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    v4[3] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 0, 4, v4, a1 + 32);
    return 0;
  }
  return result;
}

_QWORD *sub_1000D382C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = a2[1];
    *(_QWORD *)(a1 + 8) = v7;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v8 = *(int *)(a3 + 40);
    v9 = a1 + v8;
    v10 = (uint64_t)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v11 - 8) + 16);
    v13 = swift_retain(v7);
    v12(v9, v10, v11, v13);
    v14 = *(int *)(a3 + 44);
    v15 = (_QWORD *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = v16[1];
    *v15 = *v16;
    v15[1] = v17;
  }
  swift_retain(v17);
  return v4;
}

uint64_t sub_1000D38FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 40);
  v5 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 44) + 8));
}

uint64_t sub_1000D395C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t, uint64_t, __n128);
  __n128 v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v6;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(int *)(a3 + 40);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(_QWORD *)(v10 - 8) + 16);
  v12 = swift_retain(v6);
  v11(v8, v9, v10, v12);
  v13 = *(int *)(a3 + 44);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_retain(v16);
  return a1;
}

uint64_t sub_1000D3A04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  swift_retain(v7);
  swift_release(v6);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v8 = *(int *)(a3 + 40);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  v12 = *(int *)(a3 + 44);
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  v15 = v14[1];
  v16 = v13[1];
  *v13 = *v14;
  v13[1] = v15;
  swift_retain(v15);
  swift_release(v16);
  return a1;
}

uint64_t sub_1000D3AB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 40);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_OWORD *)(a1 + *(int *)(a3 + 44)) = *(_OWORD *)(a2 + *(int *)(a3 + 44));
  return a1;
}

uint64_t sub_1000D3B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v6);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v7 = *(int *)(a3 + 40);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  v11 = *(int *)(a3 + 44);
  v12 = *(_QWORD *)(a1 + v11 + 8);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  swift_release(v12);
  return a1;
}

uint64_t sub_1000D3BD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D3BDC);
}

uint64_t sub_1000D3BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 40), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 44));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000D3C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D3C68);
}

uint64_t sub_1000D3C68(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 40), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 44)) = (a2 - 1);
  return result;
}

uint64_t sub_1000D3CE4(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *a1;
  v2 = a1[1];
  v3 = type metadata accessor for PeriodicTimelineSchedule(255);
  v5 = _s8SOSBuddy19TimelineViewContentVMa_0(255, v1, v2, v4);
  sub_1000052EC(qword_10031E438, (uint64_t (*)(uint64_t))&type metadata accessor for PeriodicTimelineSchedule, (uint64_t)&protocol conformance descriptor for PeriodicTimelineSchedule);
  v6 = type metadata accessor for TimelineView(255, v3, v5);
  swift_getWitnessTable(&unk_100254738, v5);
  return swift_getWitnessTable(&protocol conformance descriptor for <> TimelineView<A, B>, v6);
}

uint64_t sub_1000D3D90(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1002999A0, 1);
}

uint64_t sub_1000D3DC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = _s8SOSBuddy19TimelineViewContentVMa_0(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  v8 = (v7 + 32) & ~v7;
  v9 = v8 + *(_QWORD *)(v6 + 64);
  v10 = v7 | 7;
  v11 = v4 + v8;
  swift_release(*(_QWORD *)(v4 + v8 + 8));
  v12 = v11 + *(int *)(v5 + 40);
  v13 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(v12, v13);
  swift_release(*(_QWORD *)(v11 + *(int *)(v5 + 44) + 8));
  return swift_deallocObject(v4, v9, v10);
}

uint64_t sub_1000D3E64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(_s8SOSBuddy19TimelineViewContentVMa_0(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4)- 8)+ 80);
  return sub_1000D1D48((char *)(v4 + ((v5 + 32) & ~v5)));
}

uint64_t sub_1000D3EB4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[10];

  v1 = a1[1];
  v2 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for _RotationEffect);
  v3 = type metadata accessor for ModifiedContent(255, v2, &type metadata for _ScaleEffect);
  v4 = sub_100007FAC(&qword_10031E4C0);
  v5 = type metadata accessor for ModifiedContent(255, v3, v4);
  v6 = type metadata accessor for Date(255);
  v8[8] = v1;
  v8[9] = &protocol witness table for _RotationEffect;
  v8[6] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
  v8[7] = &protocol witness table for _ScaleEffect;
  v8[4] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v3);
  v8[5] = sub_1000084FC(&qword_10031E4C8, &qword_10031E4C0, (uint64_t)&protocol conformance descriptor for _AnimationModifier<A>);
  v8[0] = v5;
  v8[1] = v6;
  v8[2] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v5);
  v8[3] = sub_1000052EC(&qword_10031E4D0, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  return swift_getOpaqueTypeConformance2(v8, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

void *sub_1000D3FFC(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy36AnalyticsQuestionnaireProgressTiming_data, a1, 33, 0);
  return &j__swift_endAccess;
}

void sub_1000D4040(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned int (*v27)(_QWORD, _QWORD, _QWORD);
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint8_t *v36;
  uint64_t v37;
  __int128 v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unsigned int (*v50)(uint64_t, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  char *v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(_QWORD, _QWORD, _QWORD);
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE v76[24];
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;

  v73 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v73 - 8);
  __chkstk_darwin(v73, v4);
  v71 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = _s8SOSBuddy4DataVMa_1(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003DB8(&qword_10031E718);
  v13 = __chkstk_darwin(v11, v12);
  v70 = (uint64_t)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)&v65 - v17;
  v20 = __chkstk_darwin(v16, v19);
  v22 = (char *)&v65 - v21;
  __chkstk_darwin(v20, v23);
  v25 = (char *)&v65 - v24;
  v72 = v1;
  v26 = v1 + OBJC_IVAR____TtC8SOSBuddy36AnalyticsQuestionnaireProgressTiming_data;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy36AnalyticsQuestionnaireProgressTiming_data, v76, 0, 0);
  sub_1000D6238(v26, (uint64_t)v25);
  v27 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v7 + 48);
  v28 = v6;
  if (v27(v25, 1, v6))
  {
    sub_1000D6280((uint64_t)v25);
    v29 = v6;
  }
  else
  {
    v68 = v27;
    v69 = v3;
    sub_1000D6428((uint64_t)v25, (uint64_t)v10);
    sub_1000D6280((uint64_t)v25);
    v67 = sub_1000D4794();
    v31 = v30;
    sub_1000D62C0((uint64_t)v10);
    if (qword_100315818 != -1)
      swift_once(&qword_100315818, sub_1000D95C0);
    sub_10000D744(v73, (uint64_t)qword_10033FD00);
    swift_bridgeObjectRetain(v31);
    v33 = Logger.logObject.getter(v32);
    v34 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v33, v34))
    {
      v35 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v77 = v66;
      *(_DWORD *)v35 = 136380675;
      v65 = v35 + 4;
      v36 = v35;
      swift_bridgeObjectRetain(v31);
      v80 = sub_100172BEC(v67, v31, (uint64_t *)&v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v65, v35 + 12);
      swift_bridgeObjectRelease_n(v31, 3);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "QuestionnaireProgressTiming: previous event for %{private}s was not concluded, resetting", v35, 0xCu);
      v37 = v66;
      swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1, -1);
      swift_slowDealloc(v36, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v31, 2);
    }
    v27 = v68;
    v3 = v69;
    v29 = v28;
  }
  v38 = *(_OWORD *)(a1 + 24);
  v77 = *(_OWORD *)(a1 + 8);
  v78 = v38;
  v79 = *(_QWORD *)(a1 + 40);
  sub_1000D4970((uint64_t)&v77);
  swift_beginAccess(v26, &v80, 33, 0);
  sub_1000D62FC((uint64_t)v22, v26);
  swift_endAccess(&v80);
  sub_1000D6238(v26, (uint64_t)v18);
  v39 = v27(v18, 1, v29);
  sub_1000D6280((uint64_t)v18);
  if (v39 == 1)
  {
    if (qword_100315818 != -1)
      swift_once(&qword_100315818, sub_1000D95C0);
    sub_10000D744(v73, (uint64_t)qword_10033FD00);
    v40 = v77;
    sub_1000D6344((uint64_t)&v78, (uint64_t)&v80);
    swift_retain(v40);
    sub_1000D638C(&v80);
    swift_retain(v40);
    v41 = sub_1000D638C(&v80);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = swift_slowAlloc(32, -1);
      v75 = v45;
      v46.n128_u64[0] = 136315138;
      *(_DWORD *)v44 = 136315138;
      LOBYTE(v74) = BYTE8(v77);
      v47 = String.init<A>(describing:)(&v74, &type metadata for QuestionnaireState.Stage, v46);
      v49 = v48;
      v74 = sub_100172BEC(v47, v48, &v75);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v44 + 4, v44 + 12);
      swift_release(v40);
      swift_bridgeObjectRelease(v49);
      sub_1000D63B8(&v80);
      swift_release(v40);
      sub_1000D63B8(&v80);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "QuestionnaireProgressTiming: ignoring Appeared event for %s", v44, 0xCu);
      swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(v44, -1, -1);
    }
    else
    {
      swift_release(v40);
      sub_1000D63B8(&v80);
      swift_release(v40);
      sub_1000D63B8(&v80);
    }

  }
  else
  {
    v50 = v27;
    if (qword_100315818 != -1)
      swift_once(&qword_100315818, sub_1000D95C0);
    v51 = v73;
    v52 = sub_10000D744(v73, (uint64_t)qword_10033FD00);
    v53 = v71;
    v54.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t))(v3 + 16))(v71, v52, v51);
    v55 = v72;
    v56 = swift_retain_n(v72, v54);
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v69 = v3;
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = swift_slowAlloc(32, -1);
      v80 = v60;
      *(_DWORD *)v59 = 136380675;
      v61 = v70;
      sub_1000D6238(v26, v70);
      if (v50(v61, 1, v29) == 1)
      {
        swift_release(v72);
        __break(1u);
      }
      else
      {
        v62 = sub_1000D4794();
        v64 = v63;
        sub_1000D62C0(v61);
        v75 = sub_100172BEC(v62, v64, &v80);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, v76, v59 + 4, v59 + 12);
        swift_release_n(v72);
        swift_bridgeObjectRelease(v64);
        _os_log_impl((void *)&_mh_execute_header, v57, v58, "QuestionnaireProgressTiming: started tracking page event for %{private}s", v59, 0xCu);
        swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1, -1);
        swift_slowDealloc(v59, -1, -1);

        (*(void (**)(char *, uint64_t))(v69 + 8))(v71, v73);
      }
    }
    else
    {

      swift_release_n(v55);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v53, v73);
    }
  }
}

uint64_t sub_1000D4794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  Swift::String v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  unint64_t v14;
  Swift::String v15;
  Swift::String v16;
  void *v17;
  Swift::String v18;
  uint64_t *v19;
  uint64_t v20;
  void *v21;
  Swift::String v22;

  v1 = _s8SOSBuddy4DataVMa_1(0);
  v2 = v1;
  v3 = (uint64_t *)(v0 + *(int *)(v1 + 32));
  v4 = (void *)v3[1];
  if (v4)
  {
    v5 = *v3;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease(0xE000000000000000);
    if (*(_BYTE *)(v0 + *(int *)(v2 + 20)))
      v6 = 82;
    else
      v6 = 69;
    v7 = 0xE100000000000000;
    String.append(_:)(*(Swift::String *)&v6);
    v8._countAndFlagsBits = 45;
    v8._object = (void *)0xE100000000000000;
    String.append(_:)(v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    object = v9._object;
    String.append(_:)(v9);
    swift_bridgeObjectRelease(object);
    v11._countAndFlagsBits = 0x697473657551205DLL;
    v11._object = (void *)0xED0000203D206E6FLL;
    String.append(_:)(v11);
    v12._countAndFlagsBits = v5;
    v12._object = v4;
    String.append(_:)(v12);
  }
  else
  {
    if (*(_BYTE *)(v0 + *(int *)(v1 + 20)))
      v13 = 82;
    else
      v13 = 69;
    v14 = 0xE100000000000000;
    String.append(_:)(*(Swift::String *)&v13);
    v15._countAndFlagsBits = 45;
    v15._object = (void *)0xE100000000000000;
    String.append(_:)(v15);
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt64, &protocol witness table for UInt64);
    v17 = v16._object;
    String.append(_:)(v16);
    swift_bridgeObjectRelease(v17);
    v18._countAndFlagsBits = 8285;
    v18._object = (void *)0xE200000000000000;
    String.append(_:)(v18);
    v19 = (uint64_t *)(v0 + *(int *)(v2 + 28));
    v20 = *v19;
    v21 = (void *)v19[1];
    swift_bridgeObjectRetain(v21);
    v22._countAndFlagsBits = v20;
    v22._object = v21;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v21);
  }
  return 91;
}

void sub_1000D4970(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for DispatchTime(0);
  __chkstk_darwin(v2, v3);
  __asm { BR              X10 }
}

uint64_t sub_1000D49FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = _s8SOSBuddy4DataVMa_1(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 56))(v0, 1, 1, v1);
}

uint64_t sub_1000D4A3C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;

  static DispatchTime.now()(a1);
  v7 = *(_QWORD *)(*(_QWORD *)v4 + 264);
  v8 = *(_BYTE *)(v7 + 32);
  v9 = *(_QWORD *)(v7 + 88);
  sub_1000D6344(v4 + 16, v6 - 128);
  sub_1000D6344(v6 - 128, v6 - 104);
  v11 = *(_QWORD *)(v6 - 104);
  if (v11)
  {
    v13 = *(_QWORD *)(v11 + 16);
    v12 = *(_QWORD *)(v11 + 24);
    v10 = swift_bridgeObjectRetain(v12);
  }
  else
  {
    v13 = 0;
    v12 = 0;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v5 + 32))(v1, v3, v2, v10);
  v14 = (int *)_s8SOSBuddy4DataVMa_1(0);
  *(_BYTE *)(v1 + v14[5]) = v8;
  *(_QWORD *)(v1 + v14[6]) = v9;
  v15 = (_QWORD *)(v1 + v14[7]);
  *v15 = 0x646E65536F747541;
  v15[1] = 0xE800000000000000;
  v16 = (_QWORD *)(v1 + v14[8]);
  *v16 = v13;
  v16[1] = v12;
  v17 = (_QWORD *)(v1 + v14[9]);
  *v17 = 0;
  v17[1] = 0;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v14 - 1) + 56))(v1, 0, 1, v14);
}

void sub_1000D4B44(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  NSObject *v45;
  os_log_type_t v46;
  char *v47;
  uint8_t *v48;
  uint64_t v49;
  __n128 v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  NSObject *v77;
  os_log_type_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  int v92;
  void (*v93)(uint64_t *, _QWORD, __n128);
  char *v94;
  char *v95;
  __n128 v96;
  unint64_t v97;
  unint64_t v98;
  const char *v99;
  const char *v100;
  char *v101;
  const char *v102;
  const char *v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112[2];
  _BYTE v113[24];
  uint64_t v114[4];
  char v115[24];
  uint64_t v116;
  _BYTE v117[16];
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  _BYTE v122[32];

  v3 = sub_100003DB8(&qword_10031E718);
  v5 = __chkstk_darwin(v3, v4);
  v7 = (char *)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v8);
  v10 = (char *)&v108 - v9;
  v11 = _s8SOSBuddy4DataVMa_1(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v111 = (uint64_t)&v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14, v16);
  v110 = (uint64_t)&v108 - v18;
  v20 = __chkstk_darwin(v17, v19);
  v22 = (char *)&v108 - v21;
  __chkstk_darwin(v20, v23);
  v25 = (char *)&v108 - v24;
  v26 = v1 + OBJC_IVAR____TtC8SOSBuddy36AnalyticsQuestionnaireProgressTiming_data;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy36AnalyticsQuestionnaireProgressTiming_data, v115, 0, 0);
  sub_1000D6238(v26, (uint64_t)v10);
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v27(v10, 1, v11) != 1)
  {
    sub_1000D63E4((uint64_t)v10, (uint64_t)v25);
    v40 = *(_OWORD *)(a1 + 24);
    v118 = *(_OWORD *)(a1 + 8);
    v119 = v40;
    v120 = *(_QWORD *)(a1 + 40);
    sub_1000D4970((uint64_t)&v118);
    v41 = v25;
    if (v27(v7, 1, v11) == 1)
    {
      sub_1000D6280((uint64_t)v7);
      if (qword_100315818 != -1)
        swift_once(&qword_100315818, sub_1000D95C0);
      v42 = type metadata accessor for Logger(0);
      sub_10000D744(v42, (uint64_t)qword_10033FD00);
      v43 = v118;
      sub_1000D6344((uint64_t)&v119, (uint64_t)v114);
      swift_retain(v43);
      sub_1000D638C(v114);
      swift_retain(v43);
      v44 = sub_1000D638C(v114);
      v45 = Logger.logObject.getter(v44);
      v46 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v45, v46))
      {
        v47 = v25;
        v48 = (uint8_t *)swift_slowAlloc(12, -1);
        v49 = swift_slowAlloc(32, -1);
        v121 = v49;
        v50.n128_u64[0] = 136315138;
        *(_DWORD *)v48 = 136315138;
        LOBYTE(v116) = BYTE8(v118);
        v51 = String.init<A>(describing:)(&v116, &type metadata for QuestionnaireState.Stage, v50);
        v53 = v52;
        v116 = sub_100172BEC(v51, v52, &v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v48 + 4, v48 + 12);
        swift_release(v43);
        swift_bridgeObjectRelease(v53);
        sub_1000D63B8(v114);
        swift_release(v43);
        sub_1000D63B8(v114);
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "QuestionnaireProgressTiming: ignoring Concluded event for %s", v48, 0xCu);
        swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1, -1);
        swift_slowDealloc(v48, -1, -1);

        v54 = (uint64_t)v47;
LABEL_54:
        sub_1000D62C0(v54);
        return;
      }
      swift_release(v43);

      sub_1000D63B8(v114);
      swift_release(v43);
      sub_1000D63B8(v114);
LABEL_53:
      v54 = (uint64_t)v41;
      goto LABEL_54;
    }
    v55 = (uint64_t)v22;
    sub_1000D63E4((uint64_t)v7, (uint64_t)v22);
    v56 = sub_1000D4794();
    v58 = v57;
    v60 = sub_1000D4794();
    v61 = v59;
    if (v56 == v60 && v58 == v59)
    {
      swift_bridgeObjectRelease_n(v58, 2);
    }
    else
    {
      v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v56, v58, v60, v59, 0);
      swift_bridgeObjectRelease(v58);
      swift_bridgeObjectRelease(v61);
      if ((v62 & 1) == 0)
      {
        if (qword_100315818 != -1)
          swift_once(&qword_100315818, sub_1000D95C0);
        v73 = type metadata accessor for Logger(0);
        sub_10000D744(v73, (uint64_t)qword_10033FD00);
        v74 = v110;
        sub_1000D6428((uint64_t)v22, v110);
        v75 = v111;
        v76 = sub_1000D6428((uint64_t)v25, v111);
        v77 = Logger.logObject.getter(v76);
        v78 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v77, v78))
        {
          v79 = swift_slowAlloc(22, -1);
          v109 = swift_slowAlloc(64, -1);
          v114[0] = v109;
          *(_DWORD *)v79 = 136380931;
          v80 = sub_1000D4794();
          v82 = v81;
          v121 = sub_100172BEC(v80, v81, v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v79 + 4, v79 + 12);
          swift_bridgeObjectRelease(v82);
          sub_1000D62C0(v74);
          *(_WORD *)(v79 + 12) = 2081;
          v83 = sub_1000D4794();
          v85 = v84;
          v121 = sub_100172BEC(v83, v84, v114);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v121, v122, v79 + 14, v79 + 22);
          swift_bridgeObjectRelease(v85);
          sub_1000D62C0(v75);
          _os_log_impl((void *)&_mh_execute_header, v77, v78, "QuestionnaireProgressTiming: mismatched page concluded event for [%{private}s], expected [%{private}s], ignoring", (uint8_t *)v79, 0x16u);
          v86 = v109;
          swift_arrayDestroy(v109, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v86, -1, -1);
          swift_slowDealloc(v79, -1, -1);

        }
        else
        {

          sub_1000D62C0(v75);
          sub_1000D62C0(v74);
        }
        goto LABEL_52;
      }
    }
    if (BYTE8(v118) != 2)
      goto LABEL_51;
    sub_1000D6344((uint64_t)&v119, (uint64_t)&v116);
    sub_1000D6344((uint64_t)&v116, (uint64_t)&v121);
    v63 = v121;
    if (!v121 || *(unsigned __int8 *)(v121 + 32) - 1 < 2)
      goto LABEL_51;
    if (!*(_BYTE *)(v121 + 32))
    {
      v64 = v118;
      v65 = swift_beginAccess((uint64_t)v118 + 48, v113, 0, 0);
      v66 = *(_QWORD *)(v64 + 48);
      v41 = v25;
      if (*(_QWORD *)(v66 + 16))
      {
        v67 = swift_retain_n(v63, v65);
        v68 = sub_10017D414(v67);
        if ((v69 & 1) != 0)
        {
          v70 = (unsigned __int8 *)(*(_QWORD *)(v66 + 56) + 16 * v68);
          v71 = *v70;
          v72 = *((_QWORD *)v70 + 1);
          swift_retain(v72);
          swift_release(v63);
          if (v72)
            __asm { BR              X9 }
          goto LABEL_50;
        }
        swift_release_n(v63);
      }
LABEL_51:
      sub_1000D5618();
LABEL_52:
      sub_1000D62C0(v55);
      goto LABEL_53;
    }
    v87 = *(unsigned __int8 *)(v121 + 64);
    if ((v87 | 2) != 3)
      goto LABEL_51;
    v88 = v118;
    swift_beginAccess(v118 + 48, v113, 0, 0);
    v89 = *(_QWORD *)(v88 + 64);
    if (*(_QWORD *)(v89 + 16))
    {
      v90 = sub_10017D294(v87);
      if ((v91 & 1) != 0)
      {
        sub_10008CAC4(*(_QWORD *)(v89 + 56) + 32 * v90, (uint64_t)v114);
        swift_retain(v63);
        if ((swift_dynamicCast(v112, v114, (char *)&type metadata for Any + 8, &type metadata for RecordedForkAnswer, 6) & 1) != 0)
        {
          v92 = v112[0];
          if ((_DWORD)v87 == 3)
          {
            v93 = (void (*)(uint64_t *, _QWORD, __n128))sub_1000D3FFC((uint64_t)v114);
            v95 = v101;
            v41 = v25;
            if (!v27(v101, 1, v11))
            {
              v97 = 0xD00000000000001ALL;
              v98 = 0xD000000000000010;
              v99 = "SwitchedFromRSAToEmergency";
              v100 = "ContinuedWithRSA";
              goto LABEL_44;
            }
          }
          else
          {
            v41 = v25;
            if ((_DWORD)v87 != 1)
            {
LABEL_50:
              swift_release(v63);
              goto LABEL_51;
            }
            v93 = (void (*)(uint64_t *, _QWORD, __n128))sub_1000D3FFC((uint64_t)v114);
            v95 = v94;
            if (!v27(v94, 1, v11))
            {
              v97 = 0xD00000000000001ALL;
              v98 = 0xD000000000000016;
              v99 = "SwitchedFromEmergencyToRSA";
              v100 = "ContinuedWithEmergency";
LABEL_44:
              v102 = v99 - 32;
              v103 = v100 - 32;
              if (!v92)
                v97 = v98;
              v104 = (unint64_t)v103 | 0x8000000000000000;
              v105 = (unint64_t)v102 | 0x8000000000000000;
              v106 = (unint64_t *)&v95[*(int *)(v11 + 36)];
              v107 = v106[1];
              if (v92)
                v104 = v105;
              *v106 = v97;
              v106[1] = v104;
              v96 = swift_bridgeObjectRelease(v107);
            }
          }
          v93(v114, 0, v96);
          goto LABEL_50;
        }
        swift_release(v63);
      }
    }
    v41 = v25;
    goto LABEL_51;
  }
  sub_1000D6280((uint64_t)v10);
  if (qword_100315818 != -1)
    swift_once(&qword_100315818, sub_1000D95C0);
  v28 = type metadata accessor for Logger(0);
  sub_10000D744(v28, (uint64_t)qword_10033FD00);
  v29 = *(_OWORD *)(a1 + 24);
  v118 = *(_OWORD *)(a1 + 8);
  v119 = v29;
  v120 = *(_QWORD *)(a1 + 40);
  v30 = v118;
  sub_1000D6344((uint64_t)&v119, (uint64_t)v114);
  swift_retain(v30);
  sub_1000D638C(v114);
  swift_retain(v30);
  v31 = sub_1000D638C(v114);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(12, -1);
    v35 = swift_slowAlloc(32, -1);
    v121 = v35;
    v36.n128_u64[0] = 136315138;
    *(_DWORD *)v34 = 136315138;
    LOBYTE(v116) = BYTE8(v118);
    v37 = String.init<A>(describing:)(&v116, &type metadata for QuestionnaireState.Stage, v36);
    v39 = v38;
    v116 = sub_100172BEC(v37, v38, &v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, v117, v34 + 4, v34 + 12);
    swift_release(v30);
    swift_bridgeObjectRelease(v39);
    sub_1000D63B8(v114);
    swift_release(v30);
    sub_1000D63B8(v114);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "QuestionnaireProgressTiming: untracked page concluded for %s, ignoring", v34, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v34, -1, -1);
  }
  else
  {
    swift_release(v30);
    sub_1000D63B8(v114);
    swift_release(v30);
    sub_1000D63B8(v114);
  }

}

void sub_1000D5618()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(_BYTE *, uint64_t, uint64_t);
  int v17;
  unint64_t v18;
  __n128 v19;
  _BYTE v20[24];
  _BYTE v21[24];

  v1 = sub_100003DB8(&qword_10031E718);
  v3 = __chkstk_darwin(v1, v2);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = __chkstk_darwin(v3, v6);
  v9 = &v20[-v8];
  __chkstk_darwin(v7, v10);
  v12 = &v20[-v11];
  v13 = v0 + OBJC_IVAR____TtC8SOSBuddy36AnalyticsQuestionnaireProgressTiming_data;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy36AnalyticsQuestionnaireProgressTiming_data, v21, 0, 0);
  sub_1000D6238(v13, (uint64_t)v12);
  v14 = _s8SOSBuddy4DataVMa_1(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16(v12, 1, v14);
  sub_1000D6280((uint64_t)v12);
  if (v17 != 1)
  {
    sub_1000D6238(v13, (uint64_t)v9);
    if (v16(v9, 1, v14) == 1)
    {
      __break(1u);
    }
    else
    {
      v18 = sub_1000D57C4();
      sub_1000D62C0((uint64_t)v9);
      sub_100176278(3, v18);
      v19 = swift_bridgeObjectRelease(v18);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t, __n128))(v15 + 56))(v5, 1, 1, v14, v19);
      swift_beginAccess(v13, v20, 33, 0);
      sub_1000D62FC((uint64_t)v5, v13);
      swift_endAccess(v20);
    }
  }
}

unint64_t sub_1000D57C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t inited;
  int *v9;
  NSString v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t result;
  unint64_t v16;
  unint64_t v17;
  NSString v18;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  Class isa;
  char v22;
  unint64_t v23;
  NSString v24;
  char v25;
  NSString v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  char v30[80];

  v1 = v0;
  v2 = type metadata accessor for DispatchTime(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_100319FC8);
  inited = swift_initStackObject(v7, v30);
  *(_OWORD *)(inited + 16) = xmmword_10024DEE0;
  *(_QWORD *)(inited + 32) = 0x6570795465676170;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v9 = (int *)_s8SOSBuddy4DataVMa_1(0);
  v10 = String._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 48) = v10;
  strcpy((char *)(inited + 56), "responseTime");
  *(_BYTE *)(inited + 69) = 0;
  *(_WORD *)(inited + 70) = -5120;
  v11 = static DispatchTime.now()(v10);
  v12 = DispatchTime.uptimeNanoseconds.getter(v11);
  v13 = DispatchTime.uptimeNanoseconds.getter(v12);
  if (v13 < v12
    && (v14 = DispatchTime.uptimeNanoseconds.getter(v13),
        result = DispatchTime.uptimeNanoseconds.getter(v14),
        v14 < result))
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    *(NSNumber *)(inited + 72) = UInt64._bridgeToObjectiveC()();
    v16 = sub_100224F60(inited);
    if (*(_BYTE *)(v1 + v9[5]))
      v17 = 0xE300000000000000;
    else
      v17 = 0xE900000000000079;
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
    v29 = v16;
    sub_10020D010((uint64_t)v18, 0x5465636976726573, 0xEB00000000657079, isUniquelyReferenced_nonNull_native);
    v20 = v29;
    swift_bridgeObjectRelease(0x8000000000000000);
    isa = UInt64._bridgeToObjectiveC()().super.super.isa;
    v22 = swift_isUniquelyReferenced_nonNull_native(v20);
    v29 = v20;
    sub_10020D010((uint64_t)isa, 0x6E6F697473657571, 0xEF6449657269616ELL, v22);
    v23 = v29;
    swift_bridgeObjectRelease(0x8000000000000000);
    if (*(_QWORD *)(v1 + v9[8] + 8))
    {
      v24 = String._bridgeToObjectiveC()();
      v25 = swift_isUniquelyReferenced_nonNull_native(v23);
      v29 = v23;
      sub_10020D010((uint64_t)v24, 0x6E6F697473657571, 0xEA00000000006449, v25);
      v23 = v29;
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    if (*(_QWORD *)(v1 + v9[9] + 8))
    {
      v26 = String._bridgeToObjectiveC()();
      v27 = swift_isUniquelyReferenced_nonNull_native(v23);
      v29 = v23;
      sub_10020D010((uint64_t)v26, 0xD000000000000010, 0x8000000100268B70, v27);
      v23 = v29;
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    return v23;
  }
  return result;
}

uint64_t sub_1000D5AE0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_1000D6280((uint64_t)v0 + OBJC_IVAR____TtC8SOSBuddy36AnalyticsQuestionnaireProgressTiming_data);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000D5B18()
{
  return type metadata accessor for AnalyticsQuestionnaireProgressTiming(0);
}

uint64_t type metadata accessor for AnalyticsQuestionnaireProgressTiming(uint64_t a1)
{
  return sub_10003D8E8(a1, (uint64_t *)&unk_10031E510, (uint64_t)&nominal type descriptor for AnalyticsQuestionnaireProgressTiming);
}

void sub_1000D5B34(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1000D5BB8(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = "\t";
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_1000D5BB8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10031E520)
  {
    v2 = _s8SOSBuddy4DataVMa_1(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10031E520);
  }
}

uint64_t _s8SOSBuddy4DataVMa_1(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_10031E6D0, (uint64_t)&_s8SOSBuddy4DataVMn_1);
}

_QWORD *sub_1000D5C20(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v21);
  }
  else
  {
    v7 = type metadata accessor for DispatchTime(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *(_QWORD *)((char *)a1 + v8) = *(_QWORD *)((char *)a2 + v8);
    v9 = a3[7];
    v10 = a3[8];
    v11 = (_QWORD *)((char *)a1 + v9);
    v12 = (_QWORD *)((char *)a2 + v9);
    v13 = v12[1];
    *v11 = *v12;
    v11[1] = v13;
    v14 = (_QWORD *)((char *)a1 + v10);
    v15 = (_QWORD *)((char *)a2 + v10);
    v16 = v15[1];
    *v14 = *v15;
    v14[1] = v16;
    v17 = a3[9];
    v18 = (_QWORD *)((char *)a1 + v17);
    v19 = (_QWORD *)((char *)a2 + v17);
    v20 = v19[1];
    *v18 = *v19;
    v18[1] = v20;
    swift_bridgeObjectRetain(v13);
    swift_bridgeObjectRetain(v16);
    swift_bridgeObjectRetain(v20);
  }
  return a1;
}

uint64_t sub_1000D5CFC(uint64_t a1, int *a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[7] + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8] + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[9] + 8));
}

uint64_t sub_1000D5D64(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;

  v6 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = a3[8];
  v10 = (_QWORD *)(a1 + v8);
  v11 = (_QWORD *)(a2 + v8);
  v12 = v11[1];
  *v10 = *v11;
  v10[1] = v12;
  v13 = (_QWORD *)(a1 + v9);
  v14 = (_QWORD *)(a2 + v9);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  v16 = a3[9];
  v17 = (_QWORD *)(a1 + v16);
  v18 = (_QWORD *)(a2 + v16);
  v19 = v18[1];
  *v17 = *v18;
  v17[1] = v19;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v19);
  return a1;
}

uint64_t sub_1000D5E14(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v7 = a3[7];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[8];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (_QWORD *)(a2 + v12);
  *v13 = *v14;
  v15 = v14[1];
  v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  v17 = a3[9];
  v18 = (_QWORD *)(a1 + v17);
  v19 = (_QWORD *)(a2 + v17);
  *v18 = *v19;
  v20 = v19[1];
  v21 = v18[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  return a1;
}

uint64_t sub_1000D5F00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1000D5F84(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_QWORD *)(a1 + v7) = *(_QWORD *)(a2 + v7);
  v8 = a3[7];
  v9 = (_QWORD *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v12 = *v10;
  v11 = v10[1];
  v13 = v9[1];
  *v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease(v13);
  v14 = a3[8];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  v19 = v15[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease(v19);
  v20 = a3[9];
  v21 = (_QWORD *)(a1 + v20);
  v22 = (uint64_t *)(a2 + v20);
  v24 = *v22;
  v23 = v22[1];
  v25 = v21[1];
  *v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease(v25);
  return a1;
}

uint64_t sub_1000D603C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000D6048);
}

uint64_t sub_1000D6048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000D60C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000D60D4);
}

uint64_t sub_1000D60D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1000D6150(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  result = type metadata accessor for DispatchTime(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_100254888;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[3] = &unk_1002548A0;
    v4[4] = &unk_1002548B8;
    v4[5] = &unk_1002548B8;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1000D61E4(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = *v1 + OBJC_IVAR____TtC8SOSBuddy36AnalyticsQuestionnaireProgressTiming_currentQuestionnaireId;
  *(_QWORD *)v2 = *(_QWORD *)(*(_QWORD *)(result + 264) + 88);
  *(_BYTE *)(v2 + 8) = 0;
  return result;
}

void sub_1000D6208(_BYTE *a1)
{
  if ((*a1 & 1) != 0)
    sub_1000D4B44((uint64_t)a1);
  else
    sub_1000D4040((uint64_t)a1);
}

uint64_t sub_1000D6238(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031E718);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D6280(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003DB8(&qword_10031E718);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D62C0(uint64_t a1)
{
  uint64_t v2;

  v2 = _s8SOSBuddy4DataVMa_1(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000D62FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031E718);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D6344(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031E720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1000D638C(uint64_t *a1)
{
  sub_10007BB44(*a1, a1[1], a1[2]);
  return a1;
}

uint64_t *sub_1000D63B8(uint64_t *a1)
{
  sub_10007BB74(*a1, a1[1], a1[2]);
  return a1;
}

uint64_t sub_1000D63E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s8SOSBuddy4DataVMa_1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000D6428(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = _s8SOSBuddy4DataVMa_1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for SessionLeadingView()
{
  return &type metadata for SessionLeadingView;
}

uint64_t sub_1000D647C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100299B4C, 1);
}

void sub_1000D648C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  if (a1)
  {
    if (sub_100067058(0, *(_QWORD *)(a1 + 200)))
    {
      v4 = type metadata accessor for BannerAppearanceModel(0);
      v5 = sub_1000052EC(&qword_100316AA8, type metadata accessor for BannerAppearanceModel, (uint64_t)&unk_10024D2FC);
      v6 = EnvironmentObject.init()(v4, v5);
      v8 = v7;
      v9 = type metadata accessor for UIMetrics();
      v10 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
      v11 = EnvironmentObject.init()(v9, v10);
      v13 = v12;
      v14 = static Edge.Set.trailing.getter();
      v15 = EdgeInsets.init(_all:)(3.0);
      v19 = v14;
    }
    else
    {
      v8 = 0;
      v11 = 0;
      v13 = 0;
      v19 = 0;
      v15 = 0.0;
      v16 = 0;
      v6 = 1;
      v17 = 0;
      v18 = 0;
    }
    *(_QWORD *)a3 = v6;
    *(_QWORD *)(a3 + 8) = v8;
    *(_QWORD *)(a3 + 16) = v11;
    *(_QWORD *)(a3 + 24) = v13;
    *(_QWORD *)(a3 + 32) = v19;
    *(double *)(a3 + 40) = v15;
    *(_QWORD *)(a3 + 48) = v16;
    *(_QWORD *)(a3 + 56) = v17;
    *(_QWORD *)(a3 + 64) = v18;
    *(_BYTE *)(a3 + 72) = 0;
  }
  else
  {
    v21 = type metadata accessor for BannerAppearanceModel(0);
    v22 = sub_1000052EC(&qword_100316AA8, type metadata accessor for BannerAppearanceModel, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, a2, v21, v22);
    __break(1u);
  }
}

void sub_1000D65D8(uint64_t a1@<X8>)
{
  uint64_t *v1;

  sub_1000D648C(*v1, v1[1], a1);
}

ValueMetadata *type metadata accessor for SessionLeadingContentView()
{
  return &type metadata for SessionLeadingContentView;
}

unint64_t sub_1000D65F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031E728;
  if (!qword_10031E728)
  {
    v1 = sub_100007FAC(&qword_10031E730);
    sub_1000D6658();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10031E728);
  }
  return result;
}

unint64_t sub_1000D6658()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031E738;
  if (!qword_10031E738)
  {
    v1 = sub_100007FAC(&qword_10031E740);
    sub_10008D048();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031E738);
  }
  return result;
}

uint64_t sub_1000D66C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100299B74, 1);
}

uint64_t sub_1000D66D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t result;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  _BYTE v93[24];
  _QWORD v94[7];

  v61 = a2;
  v92 = a5;
  v82 = sub_100003DB8(&qword_10031CB40);
  __chkstk_darwin(v82, v8);
  v78 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100003DB8(&qword_10031E748);
  __chkstk_darwin(v90, v10);
  v91 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = sub_100003DB8(&qword_10031E750);
  __chkstk_darwin(v85, v12);
  v87 = (char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_100003DB8(&qword_10031E758);
  __chkstk_darwin(v80, v14);
  v81 = (char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = sub_100003DB8(&qword_10031E760);
  __chkstk_darwin(v86, v16);
  v83 = (char *)&v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100003DB8(&qword_10031E768);
  __chkstk_darwin(v89, v18);
  v84 = (char *)&v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100003DB8(&qword_10031E770);
  __chkstk_darwin(v75, v20);
  v76 = (char *)&v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for SymbolVariants(0);
  v62 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67, v22);
  v23 = sub_100003DB8(&qword_100316B50);
  __chkstk_darwin(v23, v24);
  v25 = sub_100003DB8(&qword_10031AAF0);
  v64 = *(_QWORD *)(v25 - 8);
  v65 = v25;
  __chkstk_darwin(v25, v26);
  v63 = (char *)&v60 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100003DB8(&qword_10031E778);
  v68 = *(_QWORD *)(v28 - 8);
  v69 = v28;
  __chkstk_darwin(v28, v29);
  v66 = (char *)&v60 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = sub_100003DB8(&qword_10031E780);
  __chkstk_darwin(v70, v31);
  v72 = (char *)&v60 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100003DB8(&qword_10031E788);
  v34 = __chkstk_darwin(v74, v33);
  v71 = (char *)&v60 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v34, v36);
  v73 = (char *)&v60 - v37;
  v79 = sub_100003DB8(&qword_10031E790);
  __chkstk_darwin(v79, v38);
  v77 = (char *)&v60 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100003DB8(&qword_100316AD8);
  __chkstk_darwin(v40, v41);
  v43 = (char *)&v60 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = sub_100003DB8(&qword_10031E798);
  __chkstk_darwin(v44, v45);
  v88 = (char *)&v60 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    v56 = type metadata accessor for UIMetrics();
    v57 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, a4, v56, v57);
    __break(1u);
    goto LABEL_7;
  }
  v48 = a3[9];
  v47 = a3[10];
  sub_100007BBC(a3 + 6, v48);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v47 + 16))(v94, v48, v47);
  if (!a1)
  {
LABEL_7:
    v58 = type metadata accessor for BannerAppearanceModel(0);
    v59 = sub_1000052EC(&qword_100316AA8, type metadata accessor for BannerAppearanceModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v61, v58, v59);
    __break(1u);
    return result;
  }
  v49 = a1 + OBJC_IVAR____TtC8SOSBuddy21BannerAppearanceModel_bannerMode;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8SOSBuddy21BannerAppearanceModel_bannerMode, v93, 0, 0);
  sub_10000B234(v49, (uint64_t)v43, &qword_100316AD8);
  v50 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 48))(v43, 1, v50) != 1)
  {
    v54 = (char *)&loc_1000D6C10 + 4 * word_100254900[swift_getEnumCaseMultiPayload(v43, v50)];
    __asm { BR              X10 }
  }
  v51 = v91;
  swift_storeEnumTagMultiPayload(v91, v90, 1);
  v52 = sub_1000D7A28();
  v53 = (uint64_t)v88;
  _ConditionalContent<>.init(storage:)(v51, v89, &type metadata for EmptyView, v52, &protocol witness table for EmptyView);
  sub_10000B458(v53, v92, &qword_10031E798);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v94);
}

uint64_t sub_1000D7A1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000D66D4(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_1000D7A28()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031E7A0;
  if (!qword_10031E7A0)
  {
    v1 = sub_100007FAC(&qword_10031E768);
    sub_1000D7A94();
    sub_1000D7C70();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031E7A0);
  }
  return result;
}

unint64_t sub_1000D7A94()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031E7A8;
  if (!qword_10031E7A8)
  {
    v1 = sub_100007FAC(&qword_10031E760);
    sub_1000D7B18();
    sub_10000A9B0(&qword_10031E7D8, &qword_10031CB40, (void (*)(void))sub_100071420);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031E7A8);
  }
  return result;
}

unint64_t sub_1000D7B18()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031E7B0;
  if (!qword_10031E7B0)
  {
    v1 = sub_100007FAC(&qword_10031E790);
    sub_10000A9B0(&qword_10031E7B8, &qword_10031E788, (void (*)(void))sub_1000D7B94);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031E7B0);
  }
  return result;
}

unint64_t sub_1000D7B94()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  unint64_t v5;

  result = qword_10031E7C0;
  if (!qword_10031E7C0)
  {
    v1 = sub_100007FAC(&qword_10031E780);
    v2 = sub_100007FAC(&qword_10031AAF0);
    v4 = sub_100007FAC(&qword_100316BE8);
    v5 = sub_10000AAB8();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
    sub_1000084FC(&qword_10031E7C8, &qword_10031E7D0, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier2<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031E7C0);
  }
  return result;
}

unint64_t sub_1000D7C70()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031E7E0;
  if (!qword_10031E7E0)
  {
    v1 = sub_100007FAC(&qword_10031E7E8);
    sub_1000D7CD4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031E7E0);
  }
  return result;
}

unint64_t sub_1000D7CD4()
{
  unint64_t result;

  result = qword_10031E7F0;
  if (!qword_10031E7F0)
  {
    result = swift_getWitnessTable(&unk_10025353C, &type metadata for RadarView);
    atomic_store(result, (unint64_t *)&qword_10031E7F0);
  }
  return result;
}

unint64_t sub_1000D7D24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031E7F8;
  if (!qword_10031E7F8)
  {
    v1 = sub_100007FAC(&qword_10031E798);
    sub_1000D7A28();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031E7F8);
  }
  return result;
}

void sub_1000D7D90()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = *(void **)(v0 + 16);
  objc_msgSend(v2, "lock");
  v3 = *(_QWORD *)(v1 + 24);
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 24) = v3 + 1;
    objc_msgSend(v2, "unlock");
    if (qword_100315840 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100315840, sub_1000D9650);
LABEL_3:
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FD78);
  swift_retain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134349056;
    v11 = *(_QWORD *)(v1 + 24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v8 + 4, v8 + 12);
    swift_release(v1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Keep alive counter: %{public}ld", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);

    if (v3)
      return;
  }
  else
  {

    swift_release(v1);
    if (v3)
      return;
  }
  v9 = sub_1000D8DDC(0xD000000000000011, 0x8000000100254A90, 0x76696C417065654BLL, 0xE900000000000065);
  v10 = *(void **)(v1 + 32);
  *(_QWORD *)(v1 + 32) = v9;

}

void sub_1000D7F3C()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = *(void **)(v0 + 16);
  objc_msgSend(v2, "lock");
  v3 = *(_QWORD *)(v1 + 24);
  v4 = v3 - 1;
  if (__OFSUB__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 24) = v4;
    objc_msgSend(v2, "unlock");
    if (qword_100315840 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100315840, sub_1000D9650);
LABEL_3:
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FD78);
  swift_retain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v9 = 134349056;
    v10 = *(_QWORD *)(v1 + 24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v9 + 4, v9 + 12);
    swift_release(v1);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Keep alive counter: %{public}ld", v9, 0xCu);
    swift_slowDealloc(v9, -1, -1);

    if (v4 > 0)
      return;
  }
  else
  {

    swift_release(v1);
    if (v4 > 0)
      return;
  }
  sub_1000D80B8();
}

uint64_t sub_1000D80B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint8_t *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint8_t *v33;
  os_log_t v34;
  uint64_t v35;
  void *v36;
  __n128 v37;
  void *v38;
  void *v39;
  __n128 v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v45;
  uint8_t *v46;
  os_log_t v47;
  uint8_t *v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t aBlock[6];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(void **)(v0 + 32);
  if (v12)
  {
    v51 = v8;
    v13 = qword_100315840;
    v14 = v12;
    if (v13 != -1)
      swift_once(&qword_100315840, sub_1000D9650);
    v15 = type metadata accessor for Logger(0);
    sub_10000D744(v15, (uint64_t)qword_10033FD78);
    v16 = v14;
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    v19 = v18;
    if (os_log_type_enabled(v17, v18))
    {
      v50 = v19;
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v49 = swift_slowAlloc(32, -1);
      aBlock[0] = v49;
      v48 = v20;
      *(_DWORD *)v20 = 136446210;
      v46 = v20 + 4;
      v21 = objc_msgSend(v16, "debugDescription");
      v47 = v17;
      v22 = v2;
      v23 = v7;
      v24 = v3;
      v25 = v21;
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v45 = v11;
      v27 = v6;
      v28 = v1;
      v29 = v26;
      v31 = v30;

      v3 = v24;
      v7 = v23;
      v2 = v22;
      v32 = v29;
      v1 = v28;
      v6 = v27;
      v11 = v45;
      v52 = sub_100172BEC(v32, v31, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, aBlock, v46, v20 + 12);

      swift_bridgeObjectRelease(v31);
      v34 = v47;
      v33 = v48;
      _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v50, "Releasing RBSAssertion: %{public}s", v48, 0xCu);
      v35 = v49;
      swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v33, -1, -1);

    }
    else
    {

    }
    v8 = v51;
    objc_msgSend(v16, "invalidate");

    v36 = *(void **)(v1 + 32);
    *(_QWORD *)(v1 + 32) = 0;

  }
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v38 = (void *)static OS_dispatch_queue.main.getter(v37);
  aBlock[4] = (uint64_t)sub_1000D846C;
  aBlock[5] = 0;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1001BAACC;
  aBlock[3] = (uint64_t)&unk_1002EEA00;
  v39 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v40);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v41 = sub_10006A7F8();
  v42 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v43 = sub_10003E608();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v42, v43, v2, v41);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v6, v39);
  _Block_release(v39);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

void sub_1000D846C()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  objc_msgSend(v0, "terminateWithSuccess");

}

uint64_t sub_1000D84B8()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for KeepAppAlive()
{
  return objc_opt_self(_TtC8SOSBuddyP33_05E235DEB3761E42A11A10CF3118549512KeepAppAlive);
}

id sub_1000D8504()
{
  uint64_t v0;
  _QWORD *v1;
  id result;

  v0 = type metadata accessor for KeepAppAlive();
  v1 = (_QWORD *)swift_allocObject(v0, 40, 7);
  result = objc_msgSend(objc_allocWithZone((Class)NSLock), "init");
  v1[3] = 0;
  v1[4] = 0;
  v1[2] = result;
  qword_10031E800 = (uint64_t)v1;
  return result;
}

uint64_t sub_1000D855C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v5 = v4;
  swift_bridgeObjectRelease(a2);
  if (qword_100315840 != -1)
    swift_once(&qword_100315840, sub_1000D9650);
  v8 = type metadata accessor for Logger(0);
  sub_10000D744(v8, (uint64_t)qword_10033FD78);
  v10 = swift_bridgeObjectRetain_n(a4, 2, v9);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v18 = v14;
    *(_DWORD *)v13 = 136446210;
    swift_bridgeObjectRetain(a4);
    v17 = sub_100172BEC(a3, a4, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Acquiring BackgroundAssertion: '%{public}s'", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
  }
  *(_QWORD *)(v5 + 16) = a3;
  *(_QWORD *)(v5 + 24) = a4;
  if (qword_100315808 != -1)
    swift_once(&qword_100315808, sub_1000D8504);
  v15 = qword_10031E800;
  swift_retain(qword_10031E800);
  sub_1000D7D90();
  swift_release(v15);
  return v5;
}

uint64_t sub_1000D8758()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = v0;
  if (qword_100315840 != -1)
    swift_once(&qword_100315840, sub_1000D9650);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD78);
  swift_retain(v0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = *(_QWORD *)(v1 + 16);
    v9 = *(_QWORD *)(v1 + 24);
    swift_bridgeObjectRetain(v9);
    v12 = sub_100172BEC(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v6 + 4, v6 + 12);
    swift_release(v1);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Releasing BackgroundAssertion: '%{public}s'", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release(v1);
  }
  if (qword_100315808 != -1)
    swift_once(&qword_100315808, sub_1000D8504);
  v10 = qword_10031E800;
  swift_retain(qword_10031E800);
  sub_1000D7F3C();
  swift_release(v10);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 24));
  return v1;
}

uint64_t sub_1000D8948()
{
  uint64_t v0;

  sub_1000D8758();
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for BackgroundAssertion()
{
  return objc_opt_self(_TtC8SOSBuddy19BackgroundAssertion);
}

uint64_t type metadata accessor for PreventSuspensionAssertion()
{
  return objc_opt_self(_TtC8SOSBuddy26PreventSuspensionAssertion);
}

uint64_t sub_1000D89A8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for PreventSuspension()
{
  return objc_opt_self(_TtC8SOSBuddy17PreventSuspension);
}

uint64_t sub_1000D89F4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  *(_QWORD *)(v0 + 16) = 0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = swift_retain_n(v0, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v1;
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for BackgroundActivityAgent();
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v9, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] init", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  return v1;
}

uint64_t sub_1000D8BB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v1 = v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = swift_retain_n(v0, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v16 = v1;
    v17 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for BackgroundActivityAgent();
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v16, v9, v10);
    v13 = v12;
    v16 = sub_100172BEC(v11, v12, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v7 + 4, v7 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] deinit", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  v14 = *(_QWORD *)(v1 + 16);
  *(_QWORD *)(v1 + 16) = 0;
  swift_release(v14);
  swift_release(*(_QWORD *)(v1 + 16));
  return v1;
}

uint64_t sub_1000D8D84()
{
  uint64_t v0;

  sub_1000D8BB4();
  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for BackgroundActivityAgent()
{
  return objc_opt_self(_TtC8SOSBuddy23BackgroundActivityAgent);
}

double sub_1000D8DC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000D8DD4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

id sub_1000D8DDC(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  __n128 v8;
  __n128 v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  NSString v21;
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  id v28;
  id v29;
  NSString v30;
  Class isa;
  id v32;
  unsigned int v33;
  id v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  void *v39;
  id v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  void *v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  id v62;

  if (qword_100315840 != -1)
    swift_once(&qword_100315840, sub_1000D9650);
  v7 = type metadata accessor for Logger(0);
  sub_10000D744(v7, (uint64_t)qword_10033FD78);
  swift_bridgeObjectRetain_n(a2, 2, v8);
  v10 = swift_bridgeObjectRetain_n(a4, 2, v9);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(22, -1);
    v14 = (void *)swift_slowAlloc(64, -1);
    v62 = v14;
    *(_DWORD *)v13 = 136446466;
    swift_bridgeObjectRetain(a2);
    v60 = sub_100172BEC(a1, a2, (uint64_t *)&v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v13 + 12) = 2082;
    swift_bridgeObjectRetain(a4);
    v60 = sub_100172BEC(a3, a4, (uint64_t *)&v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Acquiring RBSAssertion: '%{public}s' for '%{public}s'", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy(v14, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease_n(a2, 2);
  }
  v15 = getpid();
  v16 = objc_msgSend((id)objc_opt_self(RBSTarget), "targetWithPid:", v15);
  v17 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v18 = objc_msgSend(v17, "bundleIdentifier");

  if (v18)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v20 = v19;

  }
  else
  {
    v20 = 0x8000000100260990;
  }
  swift_bridgeObjectRetain(a2);
  v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  v22 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v23 = objc_msgSend((id)objc_opt_self(RBSDomainAttribute), "attributeWithDomain:name:", v21, v22);

  v24 = sub_100003DB8(&qword_100328A00);
  v25 = swift_allocObject(v24, 40, 7);
  *(_OWORD *)(v25 + 16) = xmmword_10024E820;
  *(_QWORD *)(v25 + 32) = v23;
  v62 = (id)v25;
  specialized Array._endMutation()(v25);
  v26 = v62;
  v27 = objc_allocWithZone((Class)RBSAssertion);
  swift_bridgeObjectRetain(a4);
  v28 = v16;
  v29 = v23;
  v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a4);
  sub_10006477C(0, &qword_10031EBE0, RBSAttribute_ptr);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v26);
  v32 = objc_msgSend(v27, "initWithExplanation:target:attributes:", v30, v28, isa);

  v62 = 0;
  v33 = objc_msgSend(v32, "acquireWithError:", &v62);
  v34 = v62;
  if (v33)
  {
    v35 = v32;
    v36 = Logger.logObject.getter(v34);
    v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v59 = v29;
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = (void *)swift_slowAlloc(32, -1);
      v62 = v39;
      *(_DWORD *)v38 = 136446210;
      v40 = objc_msgSend(v35, "debugDescription");
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
      v43 = v42;

      v60 = sub_100172BEC(v41, v43, (uint64_t *)&v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v38 + 4, v38 + 12);

      swift_bridgeObjectRelease(v43);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "RBSAssertion acquired: %{public}s", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    v44 = v62;
    v45 = _convertNSErrorToError(_:)(v34);

    swift_willThrow(v46);
    swift_errorRetain(v45);
    v47 = swift_errorRetain(v45);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(12, -1);
      v51 = (void *)swift_slowAlloc(32, -1);
      v62 = v51;
      v60 = v45;
      *(_DWORD *)v50 = 136446210;
      swift_errorRetain(v45);
      v52 = sub_100003DB8((uint64_t *)&unk_100324AA0);
      v54 = String.init<A>(describing:)(&v60, v52, v53);
      v56 = v55;
      v60 = sub_100172BEC(v54, v55, (uint64_t *)&v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v50 + 4, v50 + 12);
      swift_bridgeObjectRelease(v56);
      swift_errorRelease(v45);
      swift_errorRelease(v45);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Error acquiring RBSAssertion assertion: %{public}s", v50, 0xCu);
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v50, -1, -1);

      swift_errorRelease(v45);
    }
    else
    {

      swift_errorRelease(v45);
      swift_errorRelease(v45);
      swift_errorRelease(v45);

    }
    return 0;
  }
  return v35;
}

void sub_1000D9520()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1 = objc_msgSend(v0, "bundleIdentifier");

  if (v1)
  {
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
    v4 = v3;

  }
  else
  {
    v4 = 0x8000000100260990;
    v2 = 0xD000000000000012;
  }
  qword_10031EBE8 = v2;
  unk_10031EBF0 = v4;
}

uint64_t sub_1000D95C0(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FD00, 0x636974796C616E41, 0xE900000000000073);
}

uint64_t sub_1000D95E4(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FD18, 7368769, 0xE300000000000000);
}

uint64_t sub_1000D95FC(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FD30, 0x7472656C41707041, 0xE800000000000000);
}

uint64_t sub_1000D961C(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FD48, 16707, 0xE200000000000000);
}

uint64_t sub_1000D9630(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FD60, 0x7372656E6E6142, 0xE700000000000000);
}

uint64_t sub_1000D9650(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FD78, 0x756F72676B636142, 0xEA0000000000646ELL);
}

uint64_t sub_1000D9674(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FD90, 0x746E65696C435443, 0xE800000000000000);
}

uint64_t sub_1000D9694(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FDA8, 4474181, 0xE300000000000000);
}

uint64_t sub_1000D96AC(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FDC0, 0x636E656772656D45, 0xE900000000000079);
}

uint64_t sub_1000D96D0(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FDD8, 0x636E656772656D45, 0xED00006F6D654479);
}

uint64_t sub_1000D96FC(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FDF0, 0x7265726F6C707845, 0xE800000000000000);
}

uint64_t *sub_1000D971C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a1 - 8);
  if ((*(_DWORD *)(v3 + 80) & 0x20000) != 0)
  {
    v4 = swift_slowAlloc(*(_QWORD *)(v3 + 64), *(_DWORD *)(v3 + 80));
    *a2 = v4;
    return (uint64_t *)v4;
  }
  return a2;
}

uint64_t sub_1000D975C(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FE08, 0x636974706148, 0xE600000000000000);
}

uint64_t sub_1000D9778(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FE20, 5456969, 0xE300000000000000);
}

uint64_t sub_1000D9790(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FE38, 0x6E6F697461636F4CLL, 0xE800000000000000);
}

uint64_t sub_1000D97B0(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FE50, 0x657263536B636F4CLL, 0xEA00000000006E65);
}

uint64_t sub_1000D97D4(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FE68, 0x736567617373654DLL, 0xE800000000000000);
}

uint64_t sub_1000D97F4(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FE80, 0x6E6F69746F4DLL, 0xE600000000000000);
}

uint64_t sub_1000D9810(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FE98, 0x6163696669746F4ELL, 0xEC0000006E6F6974);
}

uint64_t sub_1000D9838(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FEB0, 0x726566664FLL, 0xE500000000000000);
}

uint64_t sub_1000D9854(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FEC8, 0x6E6F697473657551, 0xED0000657269616ELL);
}

uint64_t sub_1000D9880(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FEE0, 0x6564697364616F52, 0xE800000000000000);
}

uint64_t sub_1000D98A0(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FEF8, 0x6142737574617453, 0xE900000000000072);
}

uint64_t sub_1000D98C4(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FF10, 0x7453656977657453, 0xEB00000000657461);
}

uint64_t sub_1000D98EC(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FF28, 1701669204, 0xE400000000000000);
}

uint64_t sub_1000D9904(uint64_t a1)
{
  return sub_1000D9918(a1, qword_10033FF40, 18773, 0xE200000000000000);
}

uint64_t sub_1000D9918(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for Logger(0);
  sub_1000D971C(v7, a2);
  sub_10000D744(v7, (uint64_t)a2);
  if (qword_100315810 != -1)
    swift_once(&qword_100315810, sub_1000D9520);
  v8 = qword_10031EBE8;
  v9 = unk_10031EBF0;
  swift_bridgeObjectRetain(unk_10031EBF0);
  return Logger.init(subsystem:category:)(v8, v9, a3, a4);
}

SOSBuddy::ConnectionAssistantEarth::LightAngle __swiftcall ConnectionAssistantEarth.LightAngle.init(angle:perpendicularAngle:)(Swift::Float angle, Swift::Float_optional *perpendicularAngle)
{
  SOSBuddy::ConnectionAssistantEarth::LightAngle result;

  result.perpendicularAngle.is_nil = (char)perpendicularAngle;
  result.angle = angle;
  return result;
}

void *ConnectionAssistantEarth.init(sun:highlight:atmosphere:at:)@<X0>(float a1@<W0>, char a2@<W1>, unint64_t a3@<X2>, __int16 a4@<W3>, unint64_t a5@<X4>, __int16 a6@<W5>, void *a7@<X8>, float a8@<S0>, double a9@<D1>, double a10@<D2>)
{
  _BYTE __src[528];

  sub_1000DACF8(a1, a2 & 1, a3, a4 & 0x1FF, a5, a6 & 0x1FF, __src, a8, a9, a10);
  return memcpy(a7, __src, 0x203uLL);
}

void ConnectionAssistantEarth.point(for:camera:)(double a1, double a2)
{
  float32x2_t *v2;
  float v3;
  float v4;
  float v5;
  __float2 v6;
  __float2 v7;
  float v8;
  float32x4_t v9;

  v3 = a1;
  v4 = -90.0 - a2;
  v5 = (float)((float)(v4 * 3.1416) / 180.0) + v2[8].f32[0];
  v6 = __sincosf_stret((float)(v3 * -3.1416) / 180.0);
  v7 = __sincosf_stret(v5);
  v8 = v2[8].f32[1];
  *(float32x2_t *)v9.f32 = vsub_f32(*v2, vmul_n_f32(vmul_n_f32((float32x2_t)__PAIR64__(LODWORD(v7.__sinval), LODWORD(v7.__cosval)), v6.__cosval), v8));
  v9.f32[2] = v2[1].f32[0] - (float)(v6.__sinval * v8);
  v9.i32[3] = 0;
  ConnectionAssistantCamera.projectToViewport(point:)(v9);
}

double ConnectionAssistantEarth.direction(for:)(double a1, double a2)
{
  uint64_t v2;
  float v3;
  float v4;
  float v5;
  float cosval;
  __float2 v7;
  double v8;

  v3 = a1;
  v4 = -90.0 - a2;
  v5 = (float)((float)(v4 * 3.1416) / 180.0) + *(float *)(v2 + 64);
  cosval = __sincosf_stret((float)(v3 * -3.1416) / 180.0).__cosval;
  v7 = __sincosf_stret(v5);
  *(float *)&v8 = cosval * v7.__cosval;
  *((float *)&v8 + 1) = cosval * v7.__sinval;
  return v8;
}

double static ConnectionAssistantEarth.direction(for:)(double a1, double a2)
{
  float v2;
  float v3;
  float v4;
  float cosval;
  __float2 v6;
  double v7;

  v2 = a1;
  v3 = -90.0 - a2;
  v4 = (float)(v3 * 3.1416) / 180.0;
  cosval = __sincosf_stret((float)(v2 * -3.1416) / 180.0).__cosval;
  v6 = __sincosf_stret(v4);
  *(float *)&v7 = cosval * v6.__cosval;
  *((float *)&v7 + 1) = cosval * v6.__sinval;
  return v7;
}

double static ConnectionAssistantEarth.coordinate(for:)(__n128 a1)
{
  float v1;
  unint64_t v3;

  v3 = a1.n128_u64[0];
  v1 = asinf(a1.n128_f32[2]);
  atan2f(*((float *)&v3 + 1), *(float *)&v3);
  return -(float)((float)(v1 / 3.1416) * 180.0);
}

uint64_t ConnectionAssistantEarth.project(camera:)@<X0>(float32x4_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D1>)
{
  uint64_t v3;
  uint64_t result;
  char v7;
  int v8;
  float32x4_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  __int128 v13;
  __int128 v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  float32x2_t v21;
  float32x2_t v22;
  float32x4_t v23;
  int32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x2_t v28[5];
  _OWORD v29[2];
  int v30;
  char v31;

  LODWORD(a3) = *(_DWORD *)(v3 + 68);
  v27 = *(float32x4_t *)v3;
  sub_10022A9EC(a1, v28, *(float32x4_t *)v3, a3);
  result = sub_10000B458((uint64_t)v28, (uint64_t)v29, &qword_10031EBF8);
  v7 = v31;
  if ((v31 & 1) != 0)
  {
    v8 = 0;
    v9 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
    v12 = 0uLL;
    v13 = 0uLL;
    v14 = 0uLL;
  }
  else
  {
    v13 = v29[0];
    v14 = v29[1];
    v8 = v30;
    v9 = vaddq_f32(a1[15], vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a1[12], v27.f32[0]), a1[13], *(float32x2_t *)v27.f32, 1), a1[14], v27, 2));
    v9.i32[3] = 0;
    v15 = a1[8];
    v16 = a1[9];
    v17 = a1[10];
    v18 = a1[11];
    v19 = vaddq_f32(v18, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(*(_OWORD *)(v3 + 16))), v16, *(float32x2_t *)(v3 + 16), 1), v17, *(float32x4_t *)(v3 + 16), 2));
    v20 = (int32x4_t)vmulq_f32(v19, v19);
    v20.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v20, 2), vadd_f32(*(float32x2_t *)v20.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v20.i8, 1))).u32[0];
    v21 = vrsqrte_f32((float32x2_t)v20.u32[0]);
    v22 = vmul_f32(v21, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v21, v21)));
    v20.i32[0] = vmul_f32(v22, vrsqrts_f32((float32x2_t)v20.u32[0], vmul_f32(v22, v22))).u32[0];
    v23 = vaddq_f32(v18, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(*(_OWORD *)(v3 + 32))), v16, *(float32x2_t *)(v3 + 32), 1), v17, *(float32x4_t *)(v3 + 32), 2));
    v24 = (int32x4_t)vmulq_f32(v23, v23);
    v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2), vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1))).u32[0];
    v10 = vmulq_n_f32(v19, *(float *)v20.i32);
    *(float32x2_t *)v20.i8 = vrsqrte_f32((float32x2_t)v24.u32[0]);
    *(float32x2_t *)v20.i8 = vmul_f32(*(float32x2_t *)v20.i8, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8)));
    v11 = vmulq_n_f32(v23, vmul_f32(*(float32x2_t *)v20.i8, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v20.i8, *(float32x2_t *)v20.i8))).f32[0]);
    v25 = vaddq_f32(v18, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v15, COERCE_FLOAT(*(_OWORD *)(v3 + 48))), v16, *(float32x2_t *)(v3 + 48), 1), v17, *(float32x4_t *)(v3 + 48), 2));
    v26 = (int32x4_t)vmulq_f32(v25, v25);
    v26.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v26, 2), vadd_f32(*(float32x2_t *)v26.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v26.i8, 1))).u32[0];
    *(float32x2_t *)v16.f32 = vrsqrte_f32((float32x2_t)v26.u32[0]);
    *(float32x2_t *)v16.f32 = vmul_f32(*(float32x2_t *)v16.f32, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32)));
    v12 = vmulq_n_f32(v25, vmul_f32(*(float32x2_t *)v16.f32, vrsqrts_f32((float32x2_t)v26.u32[0], vmul_f32(*(float32x2_t *)v16.f32, *(float32x2_t *)v16.f32))).f32[0]);
  }
  *(float32x4_t *)a2 = v9;
  *(float32x4_t *)(a2 + 16) = v10;
  *(float32x4_t *)(a2 + 32) = v11;
  *(float32x4_t *)(a2 + 48) = v12;
  *(_OWORD *)(a2 + 64) = v13;
  *(_OWORD *)(a2 + 80) = v14;
  *(_DWORD *)(a2 + 96) = v8;
  *(_BYTE *)(a2 + 100) = v7;
  return result;
}

double ConnectionAssistantEarth.model.getter()
{
  float32x4_t *v0;
  float32x4_t v1;
  float v2;
  float32x4_t v3;
  float32x4_t v4;
  __float2 v5;
  __n128 v6;
  float32x4_t v7;
  float32x4_t v8;
  double result;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;

  v1.i64[0] = 0;
  v1.i32[3] = 0;
  v2 = v0[4].f32[0];
  v3 = (float32x4_t)v0[4].u32[1];
  v4.i32[0] = 0;
  v4.i64[1] = 0;
  if (v2 != 0.0)
  {
    v4.i32[1] = v0[4].i32[1];
    v11 = v4;
    v1.i32[2] = v4.i32[1];
    v12 = v1;
    v10 = (float32x4_t)v4.u32[1];
    v5 = __sincosf_stret(v2 * 0.5);
    v6 = (__n128)vmulq_n_f32((float32x4_t)xmmword_100254AF0, v5.__sinval);
    v6.n128_u32[3] = LODWORD(v5.__cosval);
    *(double *)v7.i64 = simd_float4x4.init(_:)(v6);
    v3 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v10, v7.f32[0]), v11, *(float32x2_t *)v7.f32, 1), v12, v7, 2), (float32x4_t)xmmword_100252130, v7, 3);
  }
  v8 = *v0;
  v8.i32[3] = 1.0;
  *(_QWORD *)&result = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_100254B00, v3.f32[0]), (float32x4_t)xmmword_100252110, *(float32x2_t *)v3.f32, 1), (float32x4_t)xmmword_100254AF0, v3, 2), v8, v3, 3).u64[0];
  return result;
}

void *ConnectionAssistantEarth.init(date:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  _BYTE v4[528];

  sub_1000DAEB8(a1, v4);
  return memcpy(a2, v4, 0x203uLL);
}

double sub_1000D9FB8()
{
  double result;

  result = 0.0000305175853;
  static ConnectionAssistantEarth.sunPosition = xmmword_100254B10;
  return result;
}

__int128 *ConnectionAssistantEarth.sunPosition.unsafeMutableAddressor()
{
  if (qword_1003158E0 != -1)
    swift_once(&qword_1003158E0, sub_1000D9FB8);
  return &static ConnectionAssistantEarth.sunPosition;
}

double static ConnectionAssistantEarth.sunPosition.getter()
{
  if (qword_1003158E0 != -1)
    swift_once(&qword_1003158E0, sub_1000D9FB8);
  return *(double *)&static ConnectionAssistantEarth.sunPosition;
}

void *ConnectionAssistantEarth.sunDistance.unsafeMutableAddressor()
{
  return &static ConnectionAssistantEarth.sunDistance;
}

float static ConnectionAssistantEarth.sunDistance.getter()
{
  return 0.1859;
}

double ConnectionAssistantConeRenderer.Parameters.lightDirection.getter(double a1, double a2)
{
  return a2;
}

double ConnectionAssistantEarth.LightDirection.atmosphereLightDirection.getter(double a1, double a2, double a3)
{
  return a3;
}

BOOL sub_1000DA07C(__n128 *a1, __n128 *a2)
{
  return _s8SOSBuddy24ConnectionAssistantEarthV14LightDirectionV23__derived_struct_equalsySbAE_AEtFZ_0(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

__n128 ConnectionAssistantEarth.lightDirection.getter()
{
  __n128 *v0;

  return v0[1];
}

float ConnectionAssistantEarth.radius.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 68);
}

float ConnectionAssistantEarth.maximumAtmosphereRadiusScale.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 72);
}

void ConnectionAssistantEarth.maximumAtmosphereRadiusScale.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 72) = a1;
}

uint64_t (*ConnectionAssistantEarth.maximumAtmosphereRadiusScale.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

float ConnectionAssistantEarth.opacity.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 76);
}

void ConnectionAssistantEarth.opacity.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 76) = a1;
}

uint64_t (*ConnectionAssistantEarth.opacity.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

__n128 ConnectionAssistantEarth.dot.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  char v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *(_DWORD *)(v1 + 144);
  v3 = *(_BYTE *)(v1 + 148);
  v4 = *(_OWORD *)(v1 + 96);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 16) = v4;
  result = *(__n128 *)(v1 + 112);
  v6 = *(_OWORD *)(v1 + 128);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 64) = v2;
  *(_BYTE *)(a1 + 68) = v3;
  return result;
}

uint64_t ConnectionAssistantEarth.dot.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10000B458(a1, v1 + 80, &qword_100317490);
}

__n128 ConnectionAssistantEarth.cone.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  char v8;
  char v9;

  v3 = *(_OWORD *)(v1 + 160);
  v4 = *(_OWORD *)(v1 + 176);
  v2 = v1 + 160;
  *(_OWORD *)a1 = v3;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  result = *(__n128 *)(v2 + 80);
  v7 = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v2 + 64);
  *(__n128 *)(a1 + 80) = result;
  v8 = *(_BYTE *)(v2 + 112);
  v9 = *(_BYTE *)(v2 + 113);
  *(_OWORD *)(a1 + 96) = v7;
  *(_BYTE *)(a1 + 112) = v8;
  *(_BYTE *)(a1 + 113) = v9;
  return result;
}

uint64_t ConnectionAssistantEarth.cone.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10000B458(a1, v1 + 160, &qword_10031EC00);
}

uint64_t (*ConnectionAssistantEarth.cone.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

__n128 ConnectionAssistantEarth.arrow.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  char v3;
  __int128 v4;
  __n128 result;
  __int128 v6;

  v2 = *(_DWORD *)(v1 + 352);
  v3 = *(_BYTE *)(v1 + 356);
  v4 = *(_OWORD *)(v1 + 304);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 288);
  *(_OWORD *)(a1 + 16) = v4;
  result = *(__n128 *)(v1 + 320);
  v6 = *(_OWORD *)(v1 + 336);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v6;
  *(_DWORD *)(a1 + 64) = v2;
  *(_BYTE *)(a1 + 68) = v3;
  return result;
}

uint64_t ConnectionAssistantEarth.arrow.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10000B458(a1, v1 + 288, &qword_10031EC08);
}

uint64_t (*ConnectionAssistantEarth.arrow.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

uint64_t ConnectionAssistantEarth.satellite.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _BYTE v4[160];

  sub_10000B458(v1 + 368, (uint64_t)v4, &qword_100316058);
  return sub_10000B458((uint64_t)v4, a1, &qword_100316058);
}

uint64_t ConnectionAssistantEarth.satellite.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10000B458(a1, v1 + 368, &qword_100316058);
}

uint64_t (*ConnectionAssistantEarth.satellite.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

__n128 ConnectionAssistantEarth.Projection.ellipse.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;
  unint64_t v3;
  unint64_t v4;
  unsigned __int32 v5;

  result = v1[4];
  v3 = v1[5].n128_u64[0];
  v4 = v1[5].n128_u64[1];
  v5 = v1[6].n128_u32[0];
  *a1 = result;
  a1[1].n128_u64[0] = v3;
  a1[1].n128_u64[1] = v4;
  a1[2].n128_u32[0] = v5;
  return result;
}

void *ConnectionAssistantEarth.init(position:lightDirection:equatorRotation:)@<X0>(void *a1@<X8>, float32x4_t a2@<Q0>, float32x4_t a3@<Q1>, float32x4_t a4@<Q2>, float32x4_t a5@<Q3>, float a6@<S4>)
{
  float32x2_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  _BYTE v18[160];
  _OWORD __src[33];

  sub_10000410C((uint64_t)v18);
  v8 = (float32x2_t)vdup_n_s32(0x447A0000u);
  *(float32x2_t *)&v9 = vdiv_f32(vrnda_f32(vmul_f32(*(float32x2_t *)a2.f32, v8)), v8);
  *((float *)&v9 + 2) = roundf(vmuls_lane_f32(1000.0, a2, 2)) / 1000.0;
  HIDWORD(v9) = 0;
  *(float32x2_t *)&v10 = vdiv_f32(vrnda_f32(vmul_f32(*(float32x2_t *)a3.f32, v8)), v8);
  *((float *)&v10 + 2) = roundf(vmuls_lane_f32(1000.0, a3, 2)) / 1000.0;
  HIDWORD(v10) = 0;
  *(float32x2_t *)&v11 = vdiv_f32(vrnda_f32(vmul_f32(*(float32x2_t *)a4.f32, v8)), v8);
  *((float *)&v11 + 2) = roundf(vmuls_lane_f32(1000.0, a4, 2)) / 1000.0;
  HIDWORD(v11) = 0;
  *(float32x2_t *)&v12 = vdiv_f32(vrnda_f32(vmul_f32(*(float32x2_t *)a5.f32, v8)), v8);
  *((float *)&v12 + 2) = roundf(vmuls_lane_f32(1000.0, a5, 2)) / 1000.0;
  HIDWORD(v12) = 0;
  __src[0] = v9;
  __src[1] = v10;
  __src[2] = v11;
  __src[3] = v12;
  *(float *)&__src[4] = a6;
  *(_QWORD *)((char *)&__src[4] + 4) = 0x3FE000003CB7CB7DLL;
  HIDWORD(__src[4]) = 1065353216;
  memset(&__src[5], 0, 68);
  BYTE4(__src[9]) = 1;
  memset(&__src[10], 0, 112);
  LOWORD(__src[17]) = 256;
  memset(&__src[18], 0, 68);
  BYTE4(__src[22]) = 1;
  sub_10000B458((uint64_t)v18, (uint64_t)&__src[23], &qword_100316058);
  return memcpy(a1, __src, 0x203uLL);
}

void *ConnectionAssistantEarth.init(eclipticSunAngle:lightDirection:)@<X0>(void *a1@<X8>, float a2@<S0>, float32x4_t a3@<Q1>, float32x4_t a4@<Q2>, float32x4_t a5@<Q3>)
{
  _BYTE v7[528];

  sub_1000DAB3C(v7, a2, a3, a4, a5);
  return memcpy(a1, v7, 0x203uLL);
}

unint64_t ConnectionAssistantEarth.LightAngle.perpendicularAngle.getter(unsigned int a1, char a2)
{
  return a1 | ((unint64_t)(a2 & 1) << 32);
}

double sub_1000DA440()
{
  id v0;
  Class isa;
  unsigned int v2;
  unsigned int v3;
  uint64_t v5;
  double v6;
  double v7;

  v0 = objc_msgSend(objc_allocWithZone((Class)GEOAlmanac), "init");
  v6 = 0.0;
  v7 = 0.0;
  v5 = 0;
  isa = Date._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v0, "calculateGeocentricDirectionForSunX:Y:Z:date:", &v7, &v6, &v5, isa);

  *(float *)&v2 = v7;
  *(float *)&v3 = v6;
  return COERCE_DOUBLE(__PAIR64__(v3, v2));
}

uint64_t sub_1000DA50C(void *__src, const void *a2)
{
  __n128 v4[33];
  __n128 __dst[33];

  memcpy(v4, __src, 0x203uLL);
  memcpy(__dst, a2, 0x203uLL);
  return _s8SOSBuddy24ConnectionAssistantEarthV23__derived_struct_equalsySbAC_ACtFZ_0(v4, __dst) & 1;
}

BOOL _s8SOSBuddy24ConnectionAssistantEarthV14LightDirectionV23__derived_struct_equalsySbAE_AEtFZ_0(__n128 a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6)
{
  uint64_t v6;
  BOOL v7;
  _BOOL8 result;
  float v9;
  float v10;
  uint64_t v11;
  BOOL v12;
  float v13;
  float v14;
  uint64_t v15;
  BOOL v16;
  float v17;
  float v18;
  __n128 v19;
  __n128 v20;
  __n128 v21;
  __n128 v22;
  __n128 v23;
  __n128 v24;

  v6 = 0;
  while (1)
  {
    v23 = a1;
    v9 = *(float *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
    v24 = a4;
    v10 = *(float *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v6 & 3)));
    v7 = v9 == v10;
    if (v6 == 2)
      break;
    while (1)
    {
      ++v6;
      if (v7)
        break;
      v7 = 0;
      result = 0;
      if (v6 == 2)
        return result;
    }
  }
  if (v9 != v10)
    return 0;
  v11 = 0;
  while (1)
  {
    v21 = a2;
    v13 = *(float *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    v22 = a5;
    v14 = *(float *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3)));
    v12 = v13 == v14;
    if (v11 == 2)
      break;
    while (1)
    {
      ++v11;
      if (v12)
        break;
      v12 = 0;
      result = 0;
      if (v11 == 2)
        return result;
    }
  }
  if (v13 != v14)
    return 0;
  v15 = 0;
  while (1)
  {
    v19 = a3;
    v17 = *(float *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    v20 = a6;
    v18 = *(float *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    v16 = v17 == v18;
    if (v15 == 2)
      break;
    while (1)
    {
      ++v15;
      if (v16)
        break;
      if (v15 == 2)
        return 0;
      v16 = 0;
    }
  }
  return v17 == v18;
}

uint64_t _s8SOSBuddy24ConnectionAssistantEarthV23__derived_struct_equalsySbAC_ACtFZ_0(__n128 *a1, __n128 *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  __n128 v7;
  __n128 v8;
  BOOL v9;
  uint64_t result;
  float v11;
  float v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  __n128 v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  __n128 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  __n128 v66;
  _OWORD v67[9];
  __int16 v68;
  _OWORD v69[9];
  __int16 v70;
  _BYTE v71[160];
  _BYTE v72[160];
  _BYTE v73[160];
  _BYTE v74[160];
  _OWORD v75[9];
  __int16 v76;
  _OWORD v77[9];
  __int16 v78;
  _QWORD v79[5];
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  _QWORD v84[5];
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  int v95;
  __n128 v96;
  __n128 v97;
  char v98;
  _QWORD v99[4];
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  __n128 v104;
  __n128 v105;
  char v106;
  _QWORD v107[4];
  __n128 v108;
  uint64_t v109;
  uint64_t v110;
  int v111;
  _QWORD v112[8];
  int v113;

  v4 = 0;
  v5 = &a2[17].n128_u8[1];
  v6 = &a1[17].n128_u8[1];
  v7 = *a1;
  v8 = *a2;
  while (1)
  {
    v65 = v7;
    v11 = *(float *)((unint64_t)&v65 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
    v66 = v8;
    v12 = *(float *)((unint64_t)&v66 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
    v9 = v11 == v12;
    if (v4 == 2)
      break;
    while (1)
    {
      ++v4;
      if (v9)
        break;
      v9 = 0;
      result = 0;
      if (v4 == 2)
        return result;
    }
  }
  if (v11 != v12
    || !_s8SOSBuddy24ConnectionAssistantEarthV14LightDirectionV23__derived_struct_equalsySbAE_AEtFZ_0(a1[1], a1[2], a1[3], a2[1], a2[2], a2[3])|| a1[4].n128_f32[0] != a2[4].n128_f32[0]|| a1[4].n128_f32[1] != a2[4].n128_f32[1]|| a1[4].n128_f32[2] != a2[4].n128_f32[2]|| a1[4].n128_f32[3] != a2[4].n128_f32[3])
  {
    return 0;
  }
  if ((a1[9].n128_u8[4] & 1) != 0)
  {
    if (!a2[9].n128_u8[4])
      return 0;
  }
  else
  {
    if ((a2[9].n128_u8[4] & 1) != 0)
      return 0;
    v13 = a1[9].n128_i32[0];
    v14 = a2[5].n128_i64[0];
    v15 = a2[5].n128_i64[1];
    v16 = a2[6].n128_i64[0];
    v17 = a2[7].n128_i64[0];
    v18 = a2[7].n128_i64[1];
    v19 = a2[8].n128_i64[0];
    v20 = a2[8].n128_i64[1];
    v21 = a2[9].n128_i32[0];
    v22 = a1[8].n128_i64[0];
    v23 = a1[8].n128_i64[1];
    v24 = a1[7];
    v25 = a1[5].n128_i64[1];
    v26 = a1[6].n128_i64[0];
    v107[0] = a1[5].n128_u64[0];
    v107[1] = v25;
    v107[2] = v26;
    v108 = v24;
    v109 = v22;
    v110 = v23;
    v111 = v13;
    v112[0] = v14;
    v112[1] = v15;
    v112[2] = v16;
    v112[4] = v17;
    v112[5] = v18;
    v112[6] = v19;
    v112[7] = v20;
    v113 = v21;
    if (!_s8SOSBuddy30ConnectionAssistantLocationDotV23__derived_struct_equalsySbAC_ACtFZ_0((float *)v107, (float *)v112))return 0;
  }
  if ((*v6 & 1) != 0)
  {
    if (!*v5)
      return 0;
  }
  else
  {
    if ((*v5 & 1) != 0)
      return 0;
    v27 = a1[15];
    v28 = a1[16];
    v29 = a1[17].n128_i8[0];
    v30 = a2[10].n128_i64[0];
    v31 = a2[10].n128_i64[1];
    v32 = a2[11].n128_i64[0];
    v33 = a2[11].n128_i64[1];
    v34 = a2[12].n128_i64[0];
    v35 = a2[13].n128_i64[0];
    v36 = a2[13].n128_i64[1];
    v37 = a2[14].n128_i64[0];
    v38 = a2[15];
    v39 = a2[16];
    v40 = a2[17].n128_i8[0];
    v42 = a1[13].n128_i64[1];
    v41 = a1[14].n128_i64[0];
    v43 = a1[13].n128_i64[0];
    v45 = a1[11].n128_i64[1];
    v44 = a1[12].n128_i64[0];
    v46 = a1[11].n128_i64[0];
    v89 = a1[10];
    v91 = v45;
    v90 = v46;
    v92 = v44;
    v94 = v42;
    v93 = v43;
    v95 = v41;
    v96 = v27;
    v97 = v28;
    v98 = v29 & 1;
    v99[1] = v31;
    v99[0] = v30;
    v99[3] = v33;
    v99[2] = v32;
    v100 = v34;
    v102 = v36;
    v101 = v35;
    v103 = v37;
    v104 = v38;
    v105 = v39;
    v106 = v40 & 1;
    if (!_s8SOSBuddy23ConnectionAssistantConeV23__derived_struct_equalsySbAC_ACtFZ_0((float *)&v89, (float *)v99))
      return 0;
  }
  if ((v6[83] & 1) != 0)
  {
    if (!v5[83])
      return 0;
  }
  else
  {
    if ((v5[83] & 1) != 0)
      return 0;
    v47 = a1[22].n128_i32[0];
    v49 = a2[18].n128_i64[0];
    v48 = a2[18].n128_i64[1];
    v51 = a2[19].n128_i64[0];
    v50 = a2[19].n128_i64[1];
    v53 = a2[20].n128_i64[0];
    v52 = a2[20].n128_i64[1];
    v54 = a2[21].n128_i64[0];
    v55 = a2[21].n128_i64[1];
    v56 = a2[22].n128_i32[0];
    v57 = a1[21].n128_i64[0];
    v58 = a1[21].n128_i64[1];
    v60 = a1[20].n128_i64[0];
    v59 = a1[20].n128_i64[1];
    v62 = a1[19].n128_i64[0];
    v61 = a1[19].n128_i64[1];
    v64 = a1[18].n128_i64[0];
    v63 = a1[18].n128_i64[1];
    v79[0] = v64;
    v79[1] = v63;
    v79[2] = v62;
    v79[3] = v61;
    v79[4] = v60;
    v80 = v59;
    v82 = v58;
    v81 = v57;
    v83 = v47;
    v84[0] = v49;
    v84[1] = v48;
    v84[2] = v51;
    v84[3] = v50;
    v84[4] = v53;
    v85 = v52;
    v87 = v55;
    v86 = v54;
    v88 = v56;
    if (!_s8SOSBuddy24ConnectionAssistantArrowV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v79, (uint64_t)v84))
      return 0;
  }
  sub_10000B458((uint64_t)&a1[23], (uint64_t)v72, &qword_100316058);
  sub_10000B458((uint64_t)&a2[23], (uint64_t)v73, &qword_100316058);
  sub_10000B458((uint64_t)v72, (uint64_t)v74, &qword_100316058);
  if (sub_1000DB268((uint64_t)v74) != 1)
  {
    sub_10000B458((uint64_t)v73, (uint64_t)v71, &qword_100316058);
    if (sub_1000DB268((uint64_t)v71) != 1)
    {
      sub_10000B458((uint64_t)v72, (uint64_t)v67, &qword_100316058);
      v75[6] = v67[6];
      v75[7] = v67[7];
      v75[8] = v67[8];
      v76 = v68;
      v75[3] = v67[3];
      v75[4] = v67[4];
      v75[5] = v67[5];
      v75[0] = v67[0];
      v75[1] = v67[1];
      v75[2] = v67[2];
      sub_10000B458((uint64_t)v73, (uint64_t)v69, &qword_100316058);
      v77[6] = v69[6];
      v77[7] = v69[7];
      v77[8] = v69[8];
      v78 = v70;
      v77[2] = v69[2];
      v77[3] = v69[3];
      v77[4] = v69[4];
      v77[5] = v69[5];
      v77[0] = v69[0];
      v77[1] = v69[1];
      if ((_s8SOSBuddy28ConnectionAssistantSatelliteV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v75, (uint64_t)v77) & 1) != 0)
        return 1;
    }
    return 0;
  }
  sub_10000B458((uint64_t)v73, (uint64_t)v71, &qword_100316058);
  result = sub_1000DB268((uint64_t)v71);
  if ((_DWORD)result != 1)
    return 0;
  return result;
}

void *sub_1000DAB3C@<X0>(void *a1@<X8>, float a2@<S0>, float32x4_t a3@<Q1>, float32x4_t a4@<Q2>, float32x4_t a5@<Q3>)
{
  __float2 v7;
  float v8;
  float32x2_t v9;
  float32x2_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _BYTE v19[160];
  _OWORD __src[33];

  if (qword_1003158E0 != -1)
    swift_once(&qword_1003158E0, sub_1000D9FB8);
  v7 = __sincosf_stret(a2);
  v8 = *((float *)&static ConnectionAssistantEarth.sunPosition + 2) + 0.0;
  v9 = vadd_f32(vmul_f32((float32x2_t)__PAIR64__(LODWORD(v7.__sinval), LODWORD(v7.__cosval)), (float32x2_t)vdup_n_s32(0x3E3E5BE6u)), *(float32x2_t *)&static ConnectionAssistantEarth.sunPosition);
  sub_10000410C((uint64_t)v19);
  v10 = (float32x2_t)vdup_n_s32(0x447A0000u);
  *(float32x2_t *)&v11 = vdiv_f32(vrnda_f32(vmul_f32(v9, v10)), v10);
  *((float *)&v11 + 2) = roundf(v8 * 1000.0) / 1000.0;
  HIDWORD(v11) = 0;
  *(float32x2_t *)&v12 = vdiv_f32(vrnda_f32(vmul_f32(*(float32x2_t *)a3.f32, v10)), v10);
  *((float *)&v12 + 2) = roundf(vmuls_lane_f32(1000.0, a3, 2)) / 1000.0;
  HIDWORD(v12) = 0;
  *(float32x2_t *)&v13 = vdiv_f32(vrnda_f32(vmul_f32(*(float32x2_t *)a4.f32, v10)), v10);
  *((float *)&v13 + 2) = roundf(vmuls_lane_f32(1000.0, a4, 2)) / 1000.0;
  HIDWORD(v13) = 0;
  *(float32x2_t *)&v14 = vdiv_f32(vrnda_f32(vmul_f32(*(float32x2_t *)a5.f32, v10)), v10);
  *((float *)&v14 + 2) = roundf(vmuls_lane_f32(1000.0, a5, 2)) / 1000.0;
  HIDWORD(v14) = 0;
  __src[0] = v11;
  __src[1] = v12;
  __src[2] = v13;
  __src[3] = v14;
  __src[4] = xmmword_100254B20;
  memset(&__src[5], 0, 68);
  BYTE4(__src[9]) = 1;
  memset(&__src[10], 0, 112);
  LOWORD(__src[17]) = 256;
  memset(&__src[18], 0, 68);
  BYTE4(__src[22]) = 1;
  sub_10000B458((uint64_t)v19, (uint64_t)&__src[23], &qword_100316058);
  return memcpy(a1, __src, 0x203uLL);
}

void *sub_1000DACF8@<X0>(float a1@<W0>, char a2@<W1>, unint64_t a3@<X2>, __int16 a4@<W3>, unint64_t a5@<X4>, __int16 a6@<W5>, void *a7@<X8>, float a8@<S0>, double a9@<D1>, double a10@<D2>)
{
  float v12;
  float v13;
  float v14;
  unint64_t v15;
  float v16;
  char v17;
  float v18;
  unint64_t v19;
  float v20;
  char v21;
  float v22;
  float v23;
  float v24;
  float v25;
  __float2 v26;
  __float2 v27;
  float v28;
  __float2 v29;
  __float2 v30;
  float32x4_t v31;
  float32x4_t v32;
  __float2 v33;
  __float2 v34;
  float32x4_t v35;
  float32x4_t v37;
  float32x4_t v38;
  float v39;
  _BYTE __src[528];

  v12 = a9;
  v13 = (float)(v12 * -3.1416) / 180.0;
  if ((a2 & 1) != 0)
    v14 = 0.0;
  else
    v14 = v13 + a1;
  v15 = HIDWORD(a3);
  if ((a4 & 0x100) != 0)
    v16 = a8;
  else
    v16 = *(float *)&a3;
  if ((a4 & 0x100) != 0)
  {
    *(float *)&v15 = a1;
    v17 = a2;
  }
  else
  {
    v17 = a4;
  }
  v18 = v13 + *(float *)&v15;
  if ((v17 & 1) != 0)
    v18 = 0.0;
  v19 = HIDWORD(a5);
  v20 = *(float *)&a5;
  if ((a6 & 0x100) != 0)
  {
    v20 = a8;
    *(float *)&v19 = a1;
    v21 = a2;
  }
  else
  {
    v21 = a6;
  }
  v22 = v13 + *(float *)&v19;
  if ((v21 & 1) != 0)
    v22 = 0.0;
  v39 = v22;
  v23 = -90.0 - a10;
  v24 = (float)(v23 * 3.1416) / 180.0;
  v25 = v24 + v20;
  v26 = __sincosf_stret(v18);
  v27 = __sincosf_stret(v24 + v16);
  v28 = v24 + a8;
  v29 = __sincosf_stret(v28);
  v30 = __sincosf_stret(v14);
  v31.f32[0] = v30.__cosval * v29.__cosval;
  v31.f32[1] = v30.__cosval * v29.__sinval;
  v31.i64[1] = LODWORD(v30.__sinval);
  v32.f32[0] = v27.__cosval * v26.__cosval;
  v32.f32[1] = v27.__sinval * v26.__cosval;
  v32.i64[1] = LODWORD(v26.__sinval);
  v37 = v31;
  v38 = v32;
  v33 = __sincosf_stret(v39);
  v34 = __sincosf_stret(v25);
  v35.f32[0] = v34.__cosval * v33.__cosval;
  v35.f32[1] = v34.__sinval * v33.__cosval;
  v35.i64[1] = LODWORD(v33.__sinval);
  sub_1000DAB3C(__src, v28, v37, v38, v35);
  return memcpy(a7, __src, 0x203uLL);
}

void sub_1000DAEB8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  id v11;
  double v12;
  float v13;
  float32x4_t v14;
  _BYTE v15[528];

  v4 = sub_100003DB8(&qword_100317D58);
  __chkstk_darwin(v4, v5);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v9 + 16))(v7, a1, v8);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  isa = 0;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
  {
    isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v7, v8);
  }
  v11 = objc_msgSend(objc_allocWithZone((Class)GEOSolarEclipticCelestialBodyData), "initWithDate:body:", isa, 3);

  if (v11)
  {
    objc_msgSend(v11, "longitude");
    *(float *)&v12 = v12;
    v13 = (float)(*(float *)&v12 * 3.1416) / 180.0;
    *(double *)v14.i64 = sub_1000DA440();
    sub_1000DAB3C(v15, v13, v14, v14, v14);

    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    memcpy(a2, v15, 0x203uLL);
  }
  else
  {
    __break(1u);
  }
}

void *initializeWithCopy for ConnectionAssistantEarth(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x203uLL);
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantEarth(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 515))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantEarth(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 504) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 514) = 0;
    *(_WORD *)(result + 512) = 0;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 515) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantEarth()
{
  return &type metadata for ConnectionAssistantEarth;
}

ValueMetadata *type metadata accessor for ConnectionAssistantEarth.LightDirection()
{
  return &type metadata for ConnectionAssistantEarth.LightDirection;
}

__n128 initializeWithCopy for ConnectionAssistantEarth.Projection(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_DWORD *)(a1 + 96) = *((_DWORD *)a2 + 24);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantEarth.Projection(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 100))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantEarth.Projection(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 96) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 100) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantEarth.Projection()
{
  return &type metadata for ConnectionAssistantEarth.Projection;
}

uint64_t initializeBufferWithCopyOfBuffer for ConnectionAssistantEarth.LightAngle(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantEarth.LightAngle(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantEarth.LightAngle(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantEarth.LightAngle()
{
  return &type metadata for ConnectionAssistantEarth.LightAngle;
}

uint64_t sub_1000DB268(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 146))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000DB284(uint64_t a1, double a2, double a3)
{
  Swift::String v7;
  double v8;
  Swift::String v9;
  Swift::String v10;
  _QWORD v11[2];

  if (a2 == 0.0 && a3 == 0.0)
    return 0x6F72657A2ELL;
  v11[0] = 0;
  v11[1] = 0xE000000000000000;
  v7._countAndFlagsBits = 10366;
  v7._object = (void *)0xE200000000000000;
  String.append(_:)(v7);
  v8 = __exp10((double)a1);
  Double.write<A>(to:)(v11, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, round(v8 * a2) / v8);
  v9._countAndFlagsBits = 8236;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  Double.write<A>(to:)(v11, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, round(v8 * a3) / v8);
  v10._countAndFlagsBits = 41;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return v11[0];
}

_QWORD *sub_1000DB37C(double a1)
{
  __n128 *v1;
  uint64_t v3;
  _QWORD *result;
  uint64_t v5;
  uint64_t *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  __n128 v10;
  unint64_t v11;
  double v12;
  __n128 v13;
  unint64_t v14;

  v13 = v1[2];
  v14 = v1[3].n128_u64[0];
  v10 = v1[2];
  v11 = v1[3].n128_u64[0];
  v3 = sub_100003DB8(&qword_10031ED30);
  result = Binding.wrappedValue.getter(&v12);
  if (v12 != a1)
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v5 = type metadata accessor for Logger(0);
    sub_10000D744(v5, (uint64_t)qword_10033FEC8);
    v6 = sub_1000DD298((uint64_t *)v1);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      *(_DWORD *)v9 = 134349312;
      v10.n128_u64[1] = v13.n128_u64[1];
      v11 = v14;
      Binding.wrappedValue.getter(&v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v9 + 4, v9 + 12);
      sub_1000DD324((uint64_t *)v1);
      *(_WORD *)(v9 + 12) = 2050;
      v10.n128_f64[0] = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v10.n128_i8[8], v9 + 14, v9 + 22);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "WrappedUITextView: updateHeight from %{public}f to %{public}f", (uint8_t *)v9, 0x16u);
      swift_slowDealloc(v9, -1, -1);
    }
    else
    {
      sub_1000DD324((uint64_t *)v1);
    }

    v10 = v13;
    v11 = v14;
    v12 = a1;
    return (_QWORD *)Binding.wrappedValue.setter(&v12, v3, v13);
  }
  return result;
}

id sub_1000DB568()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  __int128 v11;
  uint64_t v12;
  NSString v13;
  id v14;
  id v15;
  id v16;
  double v17;
  double v18;
  void *v19;
  id v20;
  void *v21;
  void *v22;
  _OWORD v24[2];
  _QWORD v25[2];

  v1 = v0;
  v2 = objc_msgSend(objc_allocWithZone((Class)UITextView), "init");
  objc_msgSend(v2, "setAlwaysBounceVertical:", 0);
  objc_msgSend(v2, "setAutocorrectionType:", 1);
  v3 = (void *)objc_opt_self(UIColor);
  v4 = v2;
  v5 = objc_msgSend(v3, "clearColor");
  objc_msgSend(v4, "setBackgroundColor:", v5);

  objc_msgSend(v4, "setScrollEnabled:", 0);
  v6 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleTitle3);
  v7 = objc_msgSend((id)objc_opt_self(UIFontDescriptor), "preferredFontDescriptorWithTextStyle:", UIFontTextStyleTitle3);
  v8 = (void *)objc_opt_self(UIFont);
  objc_msgSend(v7, "pointSize");
  v9 = objc_msgSend(v8, "systemFontOfSize:weight:");
  v10 = objc_msgSend(v6, "scaledFontForFont:", v9);

  objc_msgSend(v4, "setFont:", v10);
  objc_msgSend(v4, "setShowsHorizontalScrollIndicator:", 0);
  objc_msgSend(v4, "setShowsVerticalScrollIndicator:", 0);
  v11 = *(_OWORD *)(v1 + 16);
  v24[0] = *(_OWORD *)v1;
  v24[1] = v11;
  sub_100003DB8(&qword_10031ED10);
  Binding.wrappedValue.getter(v25);
  v12 = v25[1];
  v13 = String._bridgeToObjectiveC()();
  objc_msgSend(v4, "setText:", v13, swift_bridgeObjectRelease(v12).n128_f64[0]);

  v14 = objc_msgSend(v4, "textContainer");
  objc_msgSend(v14, "setLineFragmentPadding:", 0.0);

  v15 = objc_msgSend(v4, "textContainer");
  objc_msgSend(v15, "setWidthTracksTextView:", 1);

  v16 = objc_msgSend(v4, "textContainer");
  objc_msgSend(v16, "setHeightTracksTextView:", 0);

  objc_msgSend(v4, "setTextContainerInset:", UIEdgeInsetsZero.top, UIEdgeInsetsZero.left, UIEdgeInsetsZero.bottom, UIEdgeInsetsZero.right);
  LODWORD(v17) = 1132068864;
  objc_msgSend(v4, "setContentHuggingPriority:forAxis:", 0, v17);
  LODWORD(v18) = 1132068864;
  objc_msgSend(v4, "setContentCompressionResistancePriority:forAxis:", 0, v18);
  objc_msgSend(v4, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  sub_100003DB8(&qword_10031ED18);
  UIViewRepresentableContext.coordinator.getter(v24);
  v19 = *(void **)&v24[0];
  objc_msgSend(v4, "setDelegate:", *(_QWORD *)&v24[0]);

  v20 = objc_msgSend(v4, "layoutManager");
  UIViewRepresentableContext.coordinator.getter(v24);
  v21 = *(void **)&v24[0];
  objc_msgSend(v20, "setDelegate:", *(_QWORD *)&v24[0]);

  UIViewRepresentableContext.coordinator.getter(v24);
  v22 = *(void **)&v24[0];
  swift_unknownObjectWeakAssign(*(_QWORD *)&v24[0] + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_textView, v4);

  if ((*(_BYTE *)(v1 + 64) & 1) != 0)
    objc_msgSend(v4, "becomeFirstResponder");
  sub_1000DB978((uint64_t)v4);
  return v4;
}

uint64_t sub_1000DB978(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __n128 v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *v21;
  uint64_t v22;
  __n128 v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  _QWORD aBlock[5];
  uint64_t v29;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D75C();
  v15 = (void *)static OS_dispatch_queue.main.getter(v14);
  v16 = swift_allocObject(&unk_1002EED10, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16, a1);
  v17 = swift_allocObject(&unk_1002EED38, 144, 7);
  v18 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v17 + 88) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v17 + 104) = v18;
  *(_OWORD *)(v17 + 120) = *(_OWORD *)(v2 + 96);
  v19 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v17 + 24) = *(_OWORD *)v2;
  *(_OWORD *)(v17 + 40) = v19;
  v20 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v17 + 56) = *(_OWORD *)(v2 + 32);
  *(_QWORD *)(v17 + 16) = v16;
  *(_QWORD *)(v17 + 136) = *(_QWORD *)(v2 + 112);
  *(_OWORD *)(v17 + 72) = v20;
  aBlock[4] = sub_1000DD274;
  v29 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002EED50;
  v21 = _Block_copy(aBlock);
  v22 = v29;
  sub_1000DD298((uint64_t *)v2);
  swift_release(v22);
  static DispatchQoS.unspecified.getter(v23);
  aBlock[0] = _swiftEmptyArrayStorage;
  v24 = sub_10006A7F8();
  v25 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v26 = sub_10003E608();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v25, v26, v4, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v8, v21);
  _Block_release(v21);

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

void sub_1000DBBA0(uint64_t a1)
{
  uint64_t v1;
  void *Strong;
  void *v3;
  double v4;
  double v5;
  double v6;
  _BYTE v7[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    objc_msgSend(Strong, "bounds");
    objc_msgSend(v3, "sizeThatFits:", v4, v5);
    sub_1000DB37C(v6);

  }
}

uint64_t sub_1000DBC1C(double a1, double a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  __n128 v16;
  void *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  _QWORD aBlock[5];
  uint64_t v30;

  v3 = (uint64_t *)v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D75C();
  v17 = (void *)static OS_dispatch_queue.main.getter(v16);
  v18 = swift_allocObject(&unk_1002EEE28, 152, 7);
  v19 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v18 + 80) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v18 + 96) = v19;
  *(_OWORD *)(v18 + 112) = *(_OWORD *)(v2 + 96);
  *(_QWORD *)(v18 + 128) = *(_QWORD *)(v2 + 112);
  v20 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v18 + 16) = *(_OWORD *)v2;
  *(_OWORD *)(v18 + 32) = v20;
  v21 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v18 + 48) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v18 + 64) = v21;
  *(double *)(v18 + 136) = a1;
  *(double *)(v18 + 144) = a2;
  aBlock[4] = sub_1000DDAFC;
  v30 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002EEE40;
  v22 = _Block_copy(aBlock);
  v23 = v30;
  sub_1000DD298(v3);
  swift_release(v23);
  static DispatchQoS.unspecified.getter(v24);
  aBlock[0] = _swiftEmptyArrayStorage;
  v25 = sub_10006A7F8();
  v26 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v27 = sub_10003E608();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v6, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v10, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

id sub_1000DBE20()
{
  return sub_1000DB568();
}

void sub_1000DBE70(void *a1)
{
  id v2;
  uint64_t v3;
  NSString v4;
  _QWORD v5[2];

  v2 = objc_msgSend(a1, "selectedTextRange");
  sub_100003DB8(&qword_10031ED10);
  Binding.wrappedValue.getter(v5);
  v3 = v5[1];
  v4 = String._bridgeToObjectiveC()();
  objc_msgSend(a1, "setText:", v4, swift_bridgeObjectRelease(v3).n128_f64[0]);

  objc_msgSend(a1, "setSelectedTextRange:", v2);
}

id sub_1000DBF34@<X0>(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  objc_class *v11;
  char *v12;
  char *v13;
  double v14;
  id result;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  objc_super v21;

  v2 = *v1;
  v3 = v1[1];
  v5 = v1[2];
  v4 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = v1[6];
  v9 = *((_BYTE *)v1 + 64);
  v16 = v1[9];
  v17 = v1[7];
  v10 = v1[14];
  v11 = (objc_class *)type metadata accessor for WrappedUITextViewCoordinator();
  v19 = *((_OWORD *)v1 + 5);
  v20 = *((_OWORD *)v1 + 6);
  v12 = (char *)objc_allocWithZone(v11);
  swift_unknownObjectWeakInit(&v12[OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_textView], 0);
  v13 = &v12[OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView];
  *(_QWORD *)v13 = v2;
  *((_QWORD *)v13 + 1) = v3;
  *((_QWORD *)v13 + 2) = v5;
  *((_QWORD *)v13 + 3) = v4;
  *((_QWORD *)v13 + 4) = v7;
  *((_QWORD *)v13 + 5) = v6;
  *((_QWORD *)v13 + 6) = v8;
  *((_QWORD *)v13 + 7) = v17;
  v13[64] = v9;
  *((_QWORD *)v13 + 9) = v16;
  *((_OWORD *)v13 + 5) = v19;
  *((_OWORD *)v13 + 6) = v20;
  *((_QWORD *)v13 + 14) = v10;
  v21.receiver = v12;
  v21.super_class = v11;
  swift_retain(v2);
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  swift_retain(v7);
  swift_retain(v6);
  swift_retain(v19);
  swift_retain(v20);
  *(_QWORD *)&v14 = swift_retain(v10).n128_u64[0];
  result = objc_msgSendSuper2(&v21, "init", v14);
  *a1 = result;
  return result;
}

uint64_t sub_1000DC080(uint64_t a1, char a2)
{
  return UIViewRepresentable.sizeThatFits(_:uiView:context:)(a1, a2 & 1);
}

uint64_t sub_1000DC0C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000DD3B0();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1000DC110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1000DD3B0();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1000DC160(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1000DD3B0();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

id sub_1000DC184(void *a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id result;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  uint64_t (*v22)(uint64_t);
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  __n128 v28;
  void *v29;
  uint64_t v30;
  void *v31;
  __n128 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  Swift::Int v39;
  unint64_t v40;
  __n128 v41;
  void *v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  Swift::Int v51;
  uint64_t (*v52)(uint64_t);
  void *v53;
  uint64_t v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  __int128 aBlock;
  uint64_t (*v61)(uint64_t);
  void *v62;
  uint64_t (*v63)();
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v58 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (uint64_t)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  v56 = *(_QWORD *)(v8 - 8);
  v57 = v8;
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(a1, "text");
  if (!result)
  {
    __break(1u);
    return result;
  }
  v13 = result;
  v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
  v16 = v15;

  *(_QWORD *)&aBlock = sub_1000DD404(v14, v16);
  *((_QWORD *)&aBlock + 1) = v17;
  v18 = String.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v20 = v19;
  v65 = v18;
  v66 = v19;
  v21 = objc_msgSend(a1, "text", swift_bridgeObjectRetain(v19).n128_f64[0]);
  v22 = sub_1001BAACC;
  if (!v21)
    goto LABEL_7;
  v23 = v21;
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  v26 = v25;

  if (v18 != v24 || v20 != v26)
  {
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v24, v26, 0);
    swift_bridgeObjectRelease(v26);
    if ((v27 & 1) != 0)
      goto LABEL_8;
LABEL_7:
    sub_10000D75C();
    v29 = (void *)static OS_dispatch_queue.main.getter(v28);
    v30 = swift_allocObject(&unk_1002EED88, 24, 7);
    swift_unknownObjectWeakInit(v30 + 16, v2);
    v63 = sub_1000DD3F4;
    v64 = v30;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v61 = sub_1001BAACC;
    v62 = &unk_1002EEDA0;
    v31 = _Block_copy(&aBlock);
    swift_release(v64);
    static DispatchQoS.unspecified.getter(v32);
    *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
    v33 = v4;
    v34 = sub_10006A7F8();
    v35 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v36 = sub_10003E608();
    v37 = v35;
    v38 = v34;
    v22 = sub_1001BAACC;
    v4 = v33;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v37, v36, v33, v38);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v31);
    _Block_release(v31);

    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v7, v33);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v11, v57);
    goto LABEL_8;
  }
  swift_bridgeObjectRelease(v20);
LABEL_8:
  if ((v20 & 0x1000000000000000) != 0)
  {
LABEL_32:
    v39 = String.UTF8View._foreignCount()();
    swift_bridgeObjectRelease(v20);
  }
  else
  {
    swift_bridgeObjectRelease(v20);
    if ((v20 & 0x2000000000000000) != 0)
      v39 = HIBYTE(v20) & 0xF;
    else
      v39 = v18 & 0xFFFFFFFFFFFFLL;
  }
  v40 = v2 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView;
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 56) >= v39)
  {
    v4 = v65;
    v50 = v66;
  }
  else
  {
    sub_10000D75C();
    v42 = (void *)static OS_dispatch_queue.main.getter(v41);
    v43 = swift_allocObject(&unk_1002EED88, 24, 7);
    swift_unknownObjectWeakInit(v43 + 16, v2);
    v63 = sub_1000DD3FC;
    v64 = v43;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v61 = v22;
    v62 = &unk_1002EEDC8;
    v22 = (uint64_t (*)(uint64_t))_Block_copy(&aBlock);
    swift_release(v64);
    static DispatchQoS.unspecified.getter(v44);
    *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
    v2 = sub_10006A7F8();
    v45 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v46 = sub_10003E608();
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v45, v46, v4, v2);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v22);
    _Block_release(v22);

    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v7, v4);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v11, v57);
    v20 = 11;
    while (1)
    {
      v4 = v65;
      v50 = v66;
      v7 = HIBYTE(v66) & 0xF;
      if ((v66 & 0x1000000000000000) != 0)
        v51 = String.UTF8View._foreignCount()();
      else
        v51 = (v66 & 0x2000000000000000) != 0 ? HIBYTE(v66) & 0xF : v65 & 0xFFFFFFFFFFFFLL;
      if (*(_QWORD *)(v40 + 56) >= v51)
        break;
      if ((v50 & 0x2000000000000000) != 0)
      {
        if (!v7)
        {
          __break(1u);
LABEL_31:
          __break(1u);
          goto LABEL_32;
        }
      }
      else
      {
        v7 = v4 & 0xFFFFFFFFFFFFLL;
        if ((v4 & 0xFFFFFFFFFFFFLL) == 0)
          goto LABEL_31;
      }
      if (((v50 >> 60) & ((v4 & 0x800000000000000) == 0)) != 0)
        v47 = 11;
      else
        v47 = 7;
      v48 = String.index(before:)(v47 | (v7 << 16), v4, v50);
      String.remove(at:)(v48);
      swift_bridgeObjectRelease(v49);
    }
  }
  v52 = *(uint64_t (**)(uint64_t))(v40 + 16);
  v53 = *(void **)(v40 + 24);
  aBlock = *(_OWORD *)v40;
  v61 = v52;
  v62 = v53;
  v59[0] = v4;
  v59[1] = v50;
  v54 = sub_100003DB8(&qword_10031ED10);
  return (id)Binding.wrappedValue.setter(v59, v54, v55);
}

uint64_t sub_1000DC67C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    v3 = (void *)result;
    v4 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView);
    v5 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 8);
    v6 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 24);
    v7 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 32);
    v8 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 40);
    v9 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 80);
    v10 = *(void (**)(uint64_t))(result
                                         + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView
                                         + 88);
    v11 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 96);
    v12 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 112);
    swift_retain(v7);
    swift_retain(v8);
    swift_retain(v9);
    swift_retain(v11);
    swift_retain(v12);
    swift_retain(v4);
    swift_retain(v5);
    swift_bridgeObjectRetain(v6);
    swift_release(v12);

    swift_release(v9);
    swift_release(v8);
    swift_release(v7);
    swift_bridgeObjectRelease(v6);
    swift_release(v5);
    v13 = swift_release(v4);
    v10(v13);
    return swift_release(v11);
  }
  return result;
}

uint64_t sub_1000DC790(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    v3 = (void *)result;
    v4 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView);
    v5 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 8);
    v6 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 24);
    v7 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 32);
    v8 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 40);
    v10 = *(void (**)(uint64_t))(result
                                         + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView
                                         + 72);
    v9 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 80);
    v11 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 96);
    v12 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 112);
    swift_retain(v7);
    swift_retain(v8);
    swift_retain(v9);
    swift_retain(v11);
    swift_retain(v12);
    swift_retain(v4);
    swift_retain(v5);
    swift_bridgeObjectRetain(v6);
    swift_release(v12);
    swift_release(v11);

    swift_release(v8);
    swift_release(v7);
    swift_bridgeObjectRelease(v6);
    swift_release(v5);
    v13 = swift_release(v4);
    v10(v13);
    return swift_release(v9);
  }
  return result;
}

uint64_t sub_1000DC8F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v1);
  if (result)
  {
    v3 = (void *)result;
    v4 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView);
    v5 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 8);
    v6 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 24);
    v7 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 32);
    v8 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 40);
    v9 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 80);
    v10 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 96);
    v11 = *(void (**)(uint64_t))(result
                                         + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView
                                         + 104);
    v12 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 112);
    swift_retain(v7);
    swift_retain(v8);
    swift_retain(v9);
    swift_retain(v10);
    swift_retain(v12);
    swift_retain(v4);
    swift_retain(v5);
    swift_bridgeObjectRetain(v6);

    swift_release(v10);
    swift_release(v9);
    swift_release(v8);
    swift_release(v7);
    swift_bridgeObjectRelease(v6);
    swift_release(v5);
    v13 = swift_release(v4);
    v11(v13);
    return swift_release(v12);
  }
  return result;
}

id sub_1000DCA78(double a1, double a2)
{
  void *v2;
  id result;
  void *v6;
  double v7;
  double v8;

  result = objc_msgSend(v2, "layoutManager");
  if (result)
  {
    v6 = result;
    if (objc_msgSend(v2, "widthTracksTextView"))
    {
      objc_msgSend(v6, "ensureGlyphsForGlyphRange:", 0, objc_msgSend(v6, "numberOfGlyphs"));
      objc_msgSend(v6, "ensureLayoutForBoundingRect:inTextContainer:", v2, 0.0, 0.0, a1, a2);
      objc_msgSend(v6, "usedRectForTextContainer:", v2);
      v8 = v7;

      if (v8 <= a1)
        return *(id *)&v8;
    }
    else
    {

    }
    return 0;
  }
  return result;
}

void sub_1000DCB70(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  void *v4;
  void *v5;
  double v6;
  double v7;
  id v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v14;
  _BYTE v15[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    v4 = (void *)swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_textView);
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, "bounds");
      v7 = v6;
      v8 = objc_msgSend(v5, "textContainer");
      objc_msgSend(v8, "size");
      v10 = v9;
      v12 = v11;

      if (v10 != v7 || v12 != INFINITY)
      {
        v14 = objc_msgSend(v5, "textContainer");
        objc_msgSend(v14, "setSize:", v7, INFINITY);

        v3 = v14;
      }

    }
    else
    {
      v5 = v3;
    }

  }
}

id sub_1000DCD28()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for WrappedUITextViewCoordinator();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for WrappedUITextViewCoordinator()
{
  return objc_opt_self(_TtC8SOSBuddy28WrappedUITextViewCoordinator);
}

uint64_t destroy for WrappedUITextView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_release(a1[4]);
  swift_release(a1[5]);
  swift_release(a1[10]);
  swift_release(a1[12]);
  return swift_release(a1[14]);
}

uint64_t initializeWithCopy for WrappedUITextView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v10;
  __int128 v11;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_QWORD *)(a1 + 24) = v5;
  v6 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = v6;
  *(_QWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  *(_QWORD *)(a1 + 72) = a2[9];
  v8 = a2[14];
  v10 = *((_OWORD *)a2 + 5);
  v11 = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 80) = v10;
  *(_OWORD *)(a1 + 96) = v11;
  *(_QWORD *)(a1 + 112) = v8;
  swift_retain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v10);
  swift_retain(v11);
  swift_retain(v8);
  return a1;
}

uint64_t *assignWithCopy for WrappedUITextView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a1[4];
  v11 = a2[4];
  a1[4] = v11;
  swift_retain(v11);
  swift_release(v10);
  v12 = a2[5];
  v13 = a1[5];
  a1[5] = v12;
  swift_retain(v12);
  swift_release(v13);
  a1[6] = a2[6];
  a1[7] = a2[7];
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  v14 = a2[10];
  v15 = a1[10];
  a1[9] = a2[9];
  a1[10] = v14;
  swift_retain(v14);
  swift_release(v15);
  v16 = a2[12];
  v17 = a1[12];
  a1[11] = a2[11];
  a1[12] = v16;
  swift_retain(v16);
  swift_release(v17);
  v19 = a2[13];
  v18 = a2[14];
  v20 = a1[14];
  a1[13] = v19;
  a1[14] = v18;
  swift_retain(v18);
  swift_release(v20);
  return a1;
}

uint64_t assignWithTake for WrappedUITextView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release(v5);
  v6 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  swift_release(v6);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v7 = *(_QWORD *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release(v7);
  v8 = *(_QWORD *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release(v8);
  v9 = *(_QWORD *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_release(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for WrappedUITextView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 120))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for WrappedUITextView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 120) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for WrappedUITextView()
{
  return &type metadata for WrappedUITextView;
}

unint64_t sub_1000DD1A8()
{
  unint64_t result;

  result = qword_10031ED08;
  if (!qword_10031ED08)
  {
    result = swift_getWitnessTable(&unk_100254C24, &type metadata for WrappedUITextView);
    atomic_store(result, (unint64_t *)&qword_10031ED08);
  }
  return result;
}

uint64_t sub_1000DD1EC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000DD210()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  swift_release(v0[13]);
  swift_release(v0[15]);
  swift_release(v0[17]);
  return swift_deallocObject(v0, 144, 7);
}

void sub_1000DD274()
{
  uint64_t v0;

  sub_1000DBBA0(*(_QWORD *)(v0 + 16));
}

double sub_1000DD280(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000DD290(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t *sub_1000DD298(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  v5 = a1[5];
  v6 = a1[10];
  v7 = a1[12];
  v8 = a1[14];
  swift_retain(a1[4]);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v2);
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t *sub_1000DD324(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[3];
  v5 = a1[4];
  v6 = a1[5];
  v7 = a1[10];
  v8 = a1[12];
  swift_release(a1[14]);
  swift_release(v8);
  swift_release(v7);
  swift_release(v6);
  swift_bridgeObjectRelease(v4);
  swift_release(v3);
  swift_release(v2);
  swift_release(v5);
  return a1;
}

unint64_t sub_1000DD3B0()
{
  unint64_t result;

  result = qword_10031ED38;
  if (!qword_10031ED38)
  {
    result = swift_getWitnessTable(&unk_100254C74, &type metadata for WrappedUITextView);
    atomic_store(result, (unint64_t *)&qword_10031ED38);
  }
  return result;
}

uint64_t sub_1000DD3F4()
{
  uint64_t v0;

  return sub_1000DC67C(v0);
}

uint64_t sub_1000DD3FC()
{
  uint64_t v0;

  return sub_1000DC790(v0);
}

uint64_t sub_1000DD404(uint64_t a1, uint64_t a2)
{
  Swift::String_optional v2;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int IsSingleEmoji;
  char v11;
  Swift::String v12;

  v2 = String.Iterator.next()();
  if (v2.value._object)
  {
    countAndFlagsBits = v2.value._countAndFlagsBits;
    object = v2.value._object;
    do
    {
      swift_bridgeObjectRetain(object);
      v6 = String._bridgeToObjectiveC()();
      IsSingleEmoji = CEMStringIsSingleEmoji(v6, v7, v8, v9);

      if (IsSingleEmoji || countAndFlagsBits == 10 && object == (void *)0xE100000000000000)
      {
        swift_bridgeObjectRelease(object);
      }
      else
      {
        v11 = _stringCompareWithSmolCheck(_:_:expecting:)(countAndFlagsBits, object, 10, 0xE100000000000000, 0);
        swift_bridgeObjectRelease(object);
        if ((v11 & 1) == 0)
        {
          v12._countAndFlagsBits = countAndFlagsBits;
          v12._object = object;
          String.append(_:)(v12);
        }
      }
      swift_bridgeObjectRelease(object);
      v5 = String.Iterator.next()();
      countAndFlagsBits = v5.value._countAndFlagsBits;
      object = v5.value._object;
    }
    while (v5.value._object);
  }
  swift_bridgeObjectRelease(a2);
  return 0;
}

BOOL sub_1000DD52C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __n128 v17;
  void *v18;
  uint64_t v19;
  void *v20;
  __n128 v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *aBlock;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  void *v35;
  uint64_t (*v36)();
  uint64_t v37;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v16 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v16)
    return 1;
  if (a1 == 10 && a2 == 0xE100000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, 10, 0xE100000000000000, 0) & 1) != 0)
  {
    sub_10000D75C();
    v18 = (void *)static OS_dispatch_queue.main.getter(v17);
    v19 = swift_allocObject(&unk_1002EED88, 24, 7);
    swift_unknownObjectWeakInit(v19 + 16, v3);
    v36 = sub_1000DDB38;
    v37 = v19;
    aBlock = _NSConcreteStackBlock;
    v33 = 1107296256;
    v34 = sub_1001BAACC;
    v35 = &unk_1002EEE68;
    v20 = _Block_copy(&aBlock);
    swift_release(v37);
    static DispatchQoS.unspecified.getter(v21);
    aBlock = _swiftEmptyArrayStorage;
    v22 = sub_10006A7F8();
    v23 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v24 = sub_10003E608();
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v23, v24, v6, v22);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v10, v20);
    _Block_release(v20);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
    return 0;
  }
  else
  {
    swift_bridgeObjectRetain(a2);
    aBlock = (_QWORD *)sub_1000DD404(a1, a2);
    v33 = v26;
    v27 = String.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
    v29 = v28;
    swift_bridgeObjectRelease(v28);
    v30 = HIBYTE(v29) & 0xF;
    if ((v29 & 0x2000000000000000) == 0)
      v30 = v27 & 0xFFFFFFFFFFFFLL;
    return v30 != 0;
  }
}

void sub_1000DD7B8(void *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  char v21;
  double v22;
  double v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  uint64_t v28;
  void *v29;
  __n128 v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  id Strong;
  _QWORD aBlock[5];
  uint64_t v38;
  _OWORD v39[7];
  uint64_t v40;

  v3 = v2;
  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    if (a1)
    {
      Strong = (id)swift_unknownObjectWeakLoadStrong(v3 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_textView);
      if (Strong)
      {
        v16 = a1;
        objc_msgSend(Strong, "bounds");
        v19 = COERCE_DOUBLE(sub_1000DCA78(v17, v18));
        if ((v21 & 1) != 0)
        {

        }
        else
        {
          v22 = v19;
          v23 = v20;
          v24 = *(_OWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 80);
          v39[4] = *(_OWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 64);
          v39[5] = v24;
          v39[6] = *(_OWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 96);
          v40 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 112);
          v25 = *(_OWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 16);
          v39[0] = *(_OWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView);
          v39[1] = v25;
          v26 = *(_OWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 48);
          v39[2] = *(_OWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy28WrappedUITextViewCoordinator_wrappedTextView + 32);
          v39[3] = v26;
          sub_1000DD298((uint64_t *)v39);
          sub_1000DBC1C(v22, v23);
          sub_1000DD324((uint64_t *)v39);
          sub_10000D75C();
          v35 = static OS_dispatch_queue.main.getter(v27);
          v28 = swift_allocObject(&unk_1002EED88, 24, 7);
          swift_unknownObjectWeakInit(v28 + 16, v3);
          aBlock[4] = sub_1000DDA98;
          v38 = v28;
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1107296256;
          aBlock[2] = sub_1001BAACC;
          aBlock[3] = &unk_1002EEDF0;
          v29 = _Block_copy(aBlock);
          swift_release(v38);
          static DispatchQoS.unspecified.getter(v30);
          aBlock[0] = _swiftEmptyArrayStorage;
          v31 = sub_10006A7F8();
          v32 = sub_100003DB8((uint64_t *)&unk_1003178D0);
          v33 = sub_10003E608();
          dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v32, v33, v6, v31);
          v34 = (void *)v35;
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v10, v29);
          _Block_release(v29);

          (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
          (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
        }
      }
    }
  }
}

void sub_1000DDA98()
{
  uint64_t v0;

  sub_1000DCB70(v0);
}

uint64_t sub_1000DDAA0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[12]);
  swift_release(v0[14]);
  swift_release(v0[16]);
  return swift_deallocObject(v0, 152, 7);
}

_QWORD *sub_1000DDAFC()
{
  uint64_t v0;
  double v1;
  double v2;
  double v3;
  double v4;

  v1 = *(double *)(v0 + 144);
  v2 = floor(v1);
  v3 = ceil(v1);
  if (v1 >= 0.0)
    v4 = v3;
  else
    v4 = v2;
  return sub_1000DB37C(v4);
}

uint64_t sub_1000DDB38()
{
  uint64_t v0;

  return sub_1000DC8F8(v0);
}

uint64_t sub_1000DDB6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v23[5];
  _OWORD v24[2];
  uint64_t v25;

  v4 = sub_100003DB8(&qword_10031B208);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v23[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for AppEvents();
  v9 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  *(_QWORD *)a2 = EnvironmentObject.init()(v8, v9);
  *(_QWORD *)(a2 + 8) = v10;
  v11 = type metadata accessor for AppRuntimeStateModel();
  v12 = sub_1000052EC(&qword_100318498, (uint64_t (*)(uint64_t))type metadata accessor for AppRuntimeStateModel, (uint64_t)&unk_10024D2FC);
  *(_QWORD *)(a2 + 16) = EnvironmentObject.init()(v11, v12);
  *(_QWORD *)(a2 + 24) = v13;
  v14 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 48) = v14;
  *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 32);
  sub_1000DDD64();
  v15 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v16 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v7, 1, 1, v16);
  v17 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v15, NSRunLoopCommonModes, v7, 1000000.0);

  sub_100007FF0((uint64_t)v7, &qword_10031B208);
  v23[0] = v17;
  v18 = type metadata accessor for NSTimer.TimerPublisher(0);
  State.init(wrappedValue:)(v24, v23, v18);
  v19 = *((_QWORD *)&v24[0] + 1);
  *(_QWORD *)(a2 + 72) = *(_QWORD *)&v24[0];
  *(_QWORD *)(a2 + 80) = v19;
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  sub_1000DDDA0((uint64_t)v24, (uint64_t)v23);
  v20 = sub_100003DB8(&qword_10031EDA0);
  State.init(wrappedValue:)((_QWORD *)(a2 + 88), v23, v20);
  return sub_100007FF0((uint64_t)v24, &qword_10031EDA0);
}

unint64_t sub_1000DDD64()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B210;
  if (!qword_10031B210)
  {
    v1 = objc_opt_self(NSTimer);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10031B210);
  }
  return result;
}

uint64_t sub_1000DDDA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031EDA0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t destroy for QuestionnaireUserInactivityTrackerView(_QWORD *a1)
{
  uint64_t v2;

  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  v2 = a1[6];
  if (v2)
  {
    swift_release(v2);
    swift_bridgeObjectRelease(a1[8]);
  }
  swift_release(a1[9]);
  swift_release(a1[10]);
  if (a1[14])
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1 + 11);
  return swift_release(a1[16]);
}

uint64_t initializeWithCopy for QuestionnaireUserInactivityTrackerView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  v7 = a2[2];
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  v8 = a2[4];
  *(_QWORD *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 40) = *((_BYTE *)a2 + 40);
  v10 = a2 + 6;
  v9 = a2[6];
  swift_retain(v4);
  swift_retain(v7);
  swift_retain(v8);
  if (v9)
  {
    v11 = a2[7];
    v12 = a2[8];
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v11;
    *(_QWORD *)(a1 + 64) = v12;
    swift_retain(v9);
    swift_bridgeObjectRetain(v12);
  }
  else
  {
    *(_OWORD *)(a1 + 48) = *(_OWORD *)v10;
    *(_QWORD *)(a1 + 64) = v10[2];
  }
  v13 = a2[9];
  v14 = a2[10];
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  v15 = a2[14];
  swift_retain(v13);
  v16 = swift_retain(v14);
  if (v15)
  {
    v17 = a2[15];
    *(_QWORD *)(a1 + 112) = v15;
    *(_QWORD *)(a1 + 120) = v17;
    (**(void (***)(uint64_t, uint64_t, uint64_t, __n128))(v15 - 8))(a1 + 88, (uint64_t)(a2 + 11), v15, v16);
  }
  else
  {
    v18 = *(_OWORD *)(a2 + 13);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
    *(_OWORD *)(a1 + 104) = v18;
    *(_QWORD *)(a1 + 120) = a2[15];
  }
  v19 = a2[16];
  *(_QWORD *)(a1 + 128) = v19;
  swift_retain(v19);
  return a1;
}

uint64_t *assignWithCopy for QuestionnaireUserInactivityTrackerView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a1 + 6;
  v11 = a1[6];
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  v13 = a2 + 6;
  v12 = a2[6];
  if (v11)
  {
    if (v12)
    {
      a1[6] = v12;
      swift_retain(v12);
      swift_release(v11);
      a1[7] = a2[7];
      v14 = a2[8];
      v15 = a1[8];
      a1[8] = v14;
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRelease(v15);
    }
    else
    {
      sub_100050978(a1 + 6);
      v17 = a2[8];
      *v10 = *v13;
      a1[8] = v17;
    }
  }
  else if (v12)
  {
    a1[6] = v12;
    a1[7] = a2[7];
    v16 = a2[8];
    a1[8] = v16;
    swift_retain(v12);
    swift_bridgeObjectRetain(v16);
  }
  else
  {
    v18 = *v13;
    a1[8] = a2[8];
    *v10 = v18;
  }
  v19 = a2[9];
  v20 = a1[9];
  a1[9] = v19;
  swift_retain(v19);
  swift_release(v20);
  v21 = a1[10];
  v22 = a2[10];
  a1[10] = v22;
  swift_retain(v22);
  swift_release(v21);
  v23 = a2[14];
  if (!a1[14])
  {
    if (v23)
    {
      a1[14] = v23;
      a1[15] = a2[15];
      (**(void (***)(uint64_t, uint64_t))(v23 - 8))((uint64_t)(a1 + 11), (uint64_t)(a2 + 11));
      goto LABEL_15;
    }
LABEL_14:
    v24 = *(_OWORD *)(a2 + 11);
    v25 = *(_OWORD *)(a2 + 13);
    a1[15] = a2[15];
    *(_OWORD *)(a1 + 11) = v24;
    *(_OWORD *)(a1 + 13) = v25;
    goto LABEL_15;
  }
  if (!v23)
  {
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1 + 11);
    goto LABEL_14;
  }
  sub_1000B8938(a1 + 11, a2 + 11);
LABEL_15:
  v26 = a1[16];
  v27 = a2[16];
  a1[16] = v27;
  swift_retain(v27);
  swift_release(v26);
  return a1;
}

uint64_t *assignWithTake for QuestionnaireUserInactivityTrackerView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = a2[4];
  v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_release(v8);
  v9 = a2[6];
  v10 = a1[6];
  *((_BYTE *)a1 + 40) = *((_BYTE *)a2 + 40);
  if (v10)
  {
    if (v9)
    {
      a1[6] = v9;
      swift_release(v10);
      v11 = a2[8];
      v12 = a1[8];
      a1[7] = a2[7];
      a1[8] = v11;
      swift_bridgeObjectRelease(v12);
      goto LABEL_6;
    }
    sub_100050978(a1 + 6);
  }
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  a1[8] = a2[8];
LABEL_6:
  v13 = a1[9];
  a1[9] = a2[9];
  swift_release(v13);
  v14 = a1[10];
  a1[10] = a2[10];
  swift_release(v14);
  if (a1[14])
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1 + 11);
  v15 = *(_OWORD *)(a2 + 13);
  *(_OWORD *)(a1 + 11) = *(_OWORD *)(a2 + 11);
  *(_OWORD *)(a1 + 13) = v15;
  v16 = a2[16];
  a1[15] = a2[15];
  v17 = a1[16];
  a1[16] = v16;
  swift_release(v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionnaireUserInactivityTrackerView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 136))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnaireUserInactivityTrackerView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 136) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 136) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionnaireUserInactivityTrackerView()
{
  return &type metadata for QuestionnaireUserInactivityTrackerView;
}

uint64_t sub_1000DE300(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100299EB4, 1);
}

void sub_1000DE310(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v3 = v2;
  v5 = static VerticalAlignment.center.getter(a1);
  v6 = v2[10];
  *(_QWORD *)&v35 = v2[9];
  *((_QWORD *)&v35 + 1) = v6;
  v7 = sub_100003DB8(&qword_10031EDA8);
  State.wrappedValue.getter(&v44, v7);
  v8 = v44;
  sub_100007D84(v2, (uint64_t)&v35);
  v9 = swift_allocObject(&unk_1002EEFE0, 152, 7);
  v10 = v42;
  *(_OWORD *)(v9 + 112) = v41;
  *(_OWORD *)(v9 + 128) = v10;
  *(_QWORD *)(v9 + 144) = v43;
  v11 = v38;
  *(_OWORD *)(v9 + 48) = v37;
  *(_OWORD *)(v9 + 64) = v11;
  v12 = v40;
  *(_OWORD *)(v9 + 80) = v39;
  *(_OWORD *)(v9 + 96) = v12;
  v13 = v36;
  *(_OWORD *)(v9 + 16) = v35;
  *(_OWORD *)(v9 + 32) = v13;
  v14 = *v2;
  if (*v2)
  {
    v15 = v9;
    v16 = *(_QWORD *)(v14 + 104);
    sub_100007D84(v3, (uint64_t)&v35);
    v17 = swift_allocObject(&unk_1002EF008, 152, 7);
    v18 = v42;
    *(_OWORD *)(v17 + 112) = v41;
    *(_OWORD *)(v17 + 128) = v18;
    *(_QWORD *)(v17 + 144) = v43;
    v19 = v38;
    *(_OWORD *)(v17 + 48) = v37;
    *(_OWORD *)(v17 + 64) = v19;
    v20 = v40;
    *(_OWORD *)(v17 + 80) = v39;
    *(_OWORD *)(v17 + 96) = v20;
    v21 = v36;
    *(_OWORD *)(v17 + 16) = v35;
    *(_OWORD *)(v17 + 32) = v21;
    sub_100007D84(v3, (uint64_t)&v35);
    v22 = swift_allocObject(&unk_1002EF030, 152, 7);
    v23 = v42;
    *(_OWORD *)(v22 + 112) = v41;
    *(_OWORD *)(v22 + 128) = v23;
    *(_QWORD *)(v22 + 144) = v43;
    v24 = v38;
    *(_OWORD *)(v22 + 48) = v37;
    *(_OWORD *)(v22 + 64) = v24;
    v25 = v40;
    *(_OWORD *)(v22 + 80) = v39;
    *(_OWORD *)(v22 + 96) = v25;
    v26 = v36;
    *(_OWORD *)(v22 + 16) = v35;
    *(_OWORD *)(v22 + 32) = v26;
    sub_100007D84(v3, (uint64_t)&v35);
    v27 = swift_allocObject(&unk_1002EF058, 152, 7);
    v28 = v42;
    *(_OWORD *)(v27 + 112) = v41;
    *(_OWORD *)(v27 + 128) = v28;
    *(_QWORD *)(v27 + 144) = v43;
    v29 = v38;
    *(_OWORD *)(v27 + 48) = v37;
    *(_OWORD *)(v27 + 64) = v29;
    v30 = v40;
    *(_OWORD *)(v27 + 80) = v39;
    *(_OWORD *)(v27 + 96) = v30;
    v31 = v36;
    *(_OWORD *)(v27 + 16) = v35;
    *(_OWORD *)(v27 + 32) = v31;
    LOBYTE(v35) = 0;
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = v8;
    *(_QWORD *)(a2 + 32) = sub_1000DF0A0;
    *(_QWORD *)(a2 + 40) = v15;
    *(_QWORD *)(a2 + 48) = v16;
    *(_QWORD *)(a2 + 56) = sub_1000DF0AC;
    *(_QWORD *)(a2 + 64) = v17;
    *(_QWORD *)(a2 + 72) = sub_1000DF0B8;
    *(_QWORD *)(a2 + 80) = v22;
    *(_OWORD *)(a2 + 88) = 0u;
    *(_OWORD *)(a2 + 104) = 0u;
    *(_QWORD *)(a2 + 120) = sub_1000DF14C;
    *(_QWORD *)(a2 + 128) = v27;
    swift_retain(v16);
  }
  else
  {
    v32 = v2[1];
    v33 = type metadata accessor for AppEvents();
    v34 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    EnvironmentObject.error()(0, v32, v33, v34);
    __break(1u);
  }
}

uint64_t sub_1000DE54C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)();
  unint64_t *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char v33[8];
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[4];
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[4];

  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v3 = type metadata accessor for Logger(0);
  sub_10000D744(v3, (uint64_t)qword_10033FEC8);
  sub_100007D84(a2, (uint64_t)v44);
  v4 = sub_100007D84(a2, (uint64_t)v38);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v37 = v8;
    *(_DWORD *)v7 = 136446467;
    v9 = sub_1000AD18C();
    v11 = v10;
    v32 = sub_100172BEC(v9, v10, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v11);
    sub_100007E68(v44);
    *(_WORD *)(v7 + 12) = 2081;
    v12 = v41;
    v13 = v42;
    v14 = v43;
    v32 = v39;
    v33[0] = v40;
    v34 = v41;
    v35 = v42;
    v36 = v43;
    swift_retain(v39);
    sub_10007BB44(v12, v13, v14);
    v16 = String.init<A>(describing:)(&v32, &type metadata for QuestionnaireNavigationPage, v15);
    v18 = v17;
    v32 = sub_100172BEC(v16, v17, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v18);
    sub_100007E68(v38);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] User inactivity timer fired for %{private}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    sub_100007E68(v44);
    sub_100007E68(v38);
  }

  sub_1000DE884();
  result = sub_1000DEB28();
  if ((result & 1) != 0)
  {
    v20 = a2[2];
    if (!v20)
    {
      v26 = a2[3];
      v27 = type metadata accessor for AppRuntimeStateModel();
      v28 = type metadata accessor for AppRuntimeStateModel;
      v29 = &qword_100318498;
      v30 = &unk_10024D2FC;
      goto LABEL_17;
    }
    v21 = *(unsigned __int8 *)(v20 + 41);
    v22 = 3;
    if (*(_BYTE *)(*(_QWORD *)(a2[4] + 264) + 32))
      v22 = 8;
    if (v22 == v21)
    {
      result = sub_1000B0D88();
      if ((result & 1) != 0)
      {
        if (*a2)
        {
          v23 = *(_QWORD *)(*a2 + 176);
          swift_retain(v23);
          v24 = sub_100003DB8(&qword_10032B0E0);
          v25 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
          Subject<>.send()(v24, v25);
          return swift_release(v23);
        }
        v26 = a2[1];
        v27 = type metadata accessor for AppEvents();
        v28 = type metadata accessor for AppEvents;
        v29 = (unint64_t *)&qword_100316A10;
        v30 = &unk_100254EA8;
LABEL_17:
        v31 = sub_1000052EC(v29, (uint64_t (*)(uint64_t))v28, (uint64_t)v30);
        result = EnvironmentObject.error()(0, v26, v27, v31);
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t sub_1000DE884()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char v22[8];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[4];

  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FEC8);
  sub_100007D84(v0, (uint64_t)v34);
  v2 = sub_100007D84(v0, (uint64_t)v27);
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = swift_slowAlloc(64, -1);
    v26 = v6;
    *(_DWORD *)v5 = 136446467;
    v7 = sub_1000AD18C();
    v9 = v8;
    v21 = sub_100172BEC(v7, v8, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease(v9);
    sub_100007E68(v34);
    *(_WORD *)(v5 + 12) = 2081;
    v10 = v31;
    v11 = v32;
    v12 = v33;
    v21 = v29;
    v22[0] = v30;
    v23 = v31;
    v24 = v32;
    v25 = v33;
    swift_retain(v29);
    sub_10007BB44(v10, v11, v12);
    v14 = String.init<A>(describing:)(&v21, &type metadata for QuestionnaireNavigationPage, v13);
    v16 = v15;
    v21 = sub_100172BEC(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v5 + 14, v5 + 22);
    swift_bridgeObjectRelease(v16);
    sub_100007E68(v27);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] _cancelInactivityTimer for %{private}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {
    sub_100007E68(v34);
    sub_100007E68(v27);
  }

  v17 = sub_100003DB8(&qword_10031EDB0);
  State.wrappedValue.getter(v34, v17);
  if (!v34[3])
    return sub_100007FF0((uint64_t)v34, &qword_10031EDA0);
  sub_100007CBC((uint64_t)v34, (uint64_t)v27);
  sub_100007FF0((uint64_t)v34, &qword_10031EDA0);
  v18 = v28;
  v19 = v29;
  sub_100007BBC(v27, v28);
  dispatch thunk of Cancellable.cancel()(v18, v19);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v27);
}

uint64_t sub_1000DEB28()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v13[24];

  v1 = *(unsigned __int8 *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 32);
  result = swift_beginAccess(v2 + 48, v13, 0, 0);
  v4 = *(_QWORD *)(v2 + 144);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    if (v1 != *(unsigned __int8 *)(v5 + v4 + 31))
    {
      LOBYTE(v7) = 0;
      return v7 & 1;
    }
    if (v1 == 2)
    {
      v6 = *(_QWORD *)(v0 + 48);
      if (!v6)
      {
        LOBYTE(v7) = *(_QWORD *)(v2 + 136) == 0;
        return v7 & 1;
      }
      v7 = *(_QWORD *)(v2 + 136);
      swift_retain(v6);
      if (!v7)
        goto LABEL_11;
      v8 = *(_QWORD *)(v6 + 16);
      v9 = *(_QWORD *)(v6 + 24);
      v10 = *(_QWORD *)(v7 + 16);
      v11 = *(_QWORD *)(v7 + 24);
      if (v8 != v10 || v9 != v11)
      {
        LOBYTE(v7) = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v10, v11, 0);
LABEL_11:
        swift_release(v6);
        return v7 & 1;
      }
      swift_release(v6);
    }
    LOBYTE(v7) = 1;
    return v7 & 1;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000DEC00(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *result;
  char v5;
  _QWORD v6[17];

  v2 = *a1;
  v3 = a2[4];
  sub_100007D84(a2, (uint64_t)v6);
  if (v2 != v3)
    return sub_100007E68(v6);
  v5 = sub_1000DEB28();
  result = sub_100007E68(v6);
  if ((v5 & 1) != 0)
    return (_QWORD *)sub_1000DEC74();
  return result;
}

uint64_t sub_1000DEC74()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char v40[8];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD v45[3];
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v1 = v0;
  v2 = sub_100003DB8(&qword_10031B208);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v6 = type metadata accessor for Logger(0);
  sub_10000D744(v6, (uint64_t)qword_10033FEC8);
  sub_100007D84(v0, (uint64_t)&v52);
  v7 = sub_100007D84(v0, (uint64_t)v45);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v38 = v5;
    v12 = v11;
    v44 = v11;
    *(_DWORD *)v10 = 136446467;
    v13 = sub_1000AD18C();
    v15 = v14;
    v39 = sub_100172BEC(v13, v14, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v15);
    sub_100007E68(&v52);
    *(_WORD *)(v10 + 12) = 2081;
    v16 = v49;
    v17 = v50;
    v18 = v51;
    v39 = v47;
    v40[0] = v48;
    v41 = v49;
    v42 = v50;
    v43 = v51;
    swift_retain(v47);
    sub_10007BB44(v16, v17, v18);
    v20 = String.init<A>(describing:)(&v39, &type metadata for QuestionnaireNavigationPage, v19);
    v22 = v21;
    v39 = sub_100172BEC(v20, v21, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v22);
    sub_100007E68(v45);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s] _resetInactivityTimer for %{private}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    v23 = v12;
    v5 = v38;
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_100007E68(&v52);
    sub_100007E68(v45);
  }

  v24 = sub_100003DB8(&qword_10031EDB0);
  State.wrappedValue.getter(&v52, v24);
  if (v54)
  {
    sub_100007CBC((uint64_t)&v52, (uint64_t)v45);
    sub_100007FF0((uint64_t)&v52, &qword_10031EDA0);
    v25 = v46;
    v26 = v47;
    sub_100007BBC(v45, v46);
    dispatch thunk of Cancellable.cancel()(v25, v26);
    result = _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v45);
  }
  else
  {
    result = sub_100007FF0((uint64_t)&v52, &qword_10031EDA0);
  }
  v28 = *(_QWORD *)(v1[4] + 264);
  if ((*(_BYTE *)(v28 + 80) & 1) == 0)
  {
    v29 = *(_QWORD *)(v28 + 56);
    sub_1000DDD64();
    v30 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v31 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v5, 1, 1, v31);
    v32 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v30, NSRunLoopCommonModes, v5, (double)v29);

    sub_100007FF0((uint64_t)v5, &qword_10031B208);
    v34 = v1[10];
    v52 = v1[9];
    v33 = v52;
    v53 = v34;
    v45[0] = v32;
    v35 = sub_100003DB8(&qword_10031EDA8);
    State.wrappedValue.setter(v45, v35);
    v52 = v33;
    v53 = v34;
    v36 = State.wrappedValue.getter(v45, v35);
    v37 = v45[0];
    NSTimer.TimerPublisher.connect()(&v52, v36);
    swift_release(v37);
    sub_1000DDDA0((uint64_t)&v52, (uint64_t)v45);
    State.wrappedValue.setter(v45, v24);
    return sub_100007FF0((uint64_t)&v52, &qword_10031EDA0);
  }
  return result;
}

uint64_t sub_1000DF0A0(uint64_t a1)
{
  uint64_t v1;

  return sub_1000DE54C(a1, (uint64_t *)(v1 + 16));
}

_QWORD *sub_1000DF0AC(uint64_t *a1)
{
  uint64_t v1;

  return sub_1000DEC00(a1, (uint64_t *)(v1 + 16));
}

uint64_t sub_1000DF0B8()
{
  return sub_1000DEC74();
}

uint64_t sub_1000DF0DC()
{
  _QWORD *v0;
  uint64_t v1;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  v1 = v0[8];
  if (v1)
  {
    swift_release(v1);
    swift_bridgeObjectRelease(v0[10]);
  }
  swift_release(v0[11]);
  swift_release(v0[12]);
  if (v0[16])
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 13);
  swift_release(v0[18]);
  return swift_deallocObject(v0, 152, 7);
}

uint64_t sub_1000DF14C()
{
  return sub_1000DE884();
}

unint64_t sub_1000DF170()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031EDB8;
  if (!qword_10031EDB8)
  {
    v1 = sub_100007FAC(&qword_10031EDC0);
    sub_1000DF1DC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031EDB8);
  }
  return result;
}

unint64_t sub_1000DF1DC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031EDC8;
  if (!qword_10031EDC8)
  {
    v1 = sub_100007FAC(&qword_10031EDD0);
    sub_1000084FC(&qword_10031EDD8, &qword_10031EDE0, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031EDC8);
  }
  return result;
}

_QWORD *sub_1000DF260()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  __n128 v5;
  uint64_t v6;
  __n128 v7;
  __n128 v8;
  uint64_t v9;
  __n128 v10;
  __n128 v11;
  __n128 v12;
  __n128 v13;
  __n128 v14;
  uint64_t v15;
  __n128 v16;
  __n128 v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  __n128 v21;
  __n128 v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  __n128 v28;
  __n128 v29;
  __n128 v30;
  uint64_t v31;
  __n128 v32;
  __n128 v33;
  uint64_t v34;
  __n128 v35;
  __n128 v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;

  v1 = v0;
  v2 = *v0;
  v3 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v0[2] = PassthroughSubject.init()(v4);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v0[3] = PassthroughSubject.init()(v5);
  v6 = sub_100003DB8(&qword_10031EF40);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v0[4] = PassthroughSubject.init()(v7);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v0[5] = PassthroughSubject.init()(v8);
  v9 = sub_100003DB8(&qword_10031EF48);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  v0[6] = PassthroughSubject.init()(v10);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v0[7] = PassthroughSubject.init()(v11);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v0[8] = PassthroughSubject.init()(v12);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v0[9] = PassthroughSubject.init()(v13);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v0[10] = PassthroughSubject.init()(v14);
  v15 = sub_100003DB8(&qword_10031EF50);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v0[11] = PassthroughSubject.init()(v16);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v0[12] = PassthroughSubject.init()(v17);
  v18 = sub_100003DB8(&qword_10031EF58);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  v0[13] = PassthroughSubject.init()(v19);
  v20 = sub_100003DB8(&qword_10031EF60);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v0[14] = PassthroughSubject.init()(v21);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  v0[15] = PassthroughSubject.init()(v22);
  v23 = sub_100003DB8(&qword_10031EF68);
  swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
  v0[16] = PassthroughSubject.init()(v24);
  v25 = sub_100003DB8(&qword_10031EF70);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  v0[17] = PassthroughSubject.init()(v26);
  v27 = sub_100003DB8(&qword_10031EF78);
  swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
  v0[18] = PassthroughSubject.init()(v28);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v0[19] = PassthroughSubject.init()(v29);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v0[20] = PassthroughSubject.init()(v30);
  v31 = sub_100003DB8(qword_1003180E0);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  v0[21] = PassthroughSubject.init()(v32);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v0[22] = PassthroughSubject.init()(v33);
  v34 = sub_100003DB8(&qword_10031EF80);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  v0[23] = PassthroughSubject.init()(v35);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  v0[24] = PassthroughSubject.init()(v36);
  v37 = sub_100003DB8(&qword_10031EF88);
  swift_allocObject(v37, *(unsigned int *)(v37 + 48), *(unsigned __int16 *)(v37 + 52));
  v0[25] = PassthroughSubject.init()(v38);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v39 = type metadata accessor for Logger(0);
  sub_10000D744(v39, (uint64_t)qword_10033FD18);
  v41 = swift_retain_n(v0, v40);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = swift_slowAlloc(32, -1);
    v51 = (uint64_t)v1;
    v52 = v45;
    *(_DWORD *)v44 = 136446210;
    v46 = swift_retain(v1);
    v47 = String.init<A>(describing:)(&v51, v2, v46);
    v49 = v48;
    v51 = sub_100172BEC(v47, v48, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v44 + 4, v44 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v49);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "[%{public}s] init", v44, 0xCu);
    swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v44, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  return v1;
}

_QWORD *sub_1000DF728()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = *v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v3 = type metadata accessor for Logger(0);
  sub_10000D744(v3, (uint64_t)qword_10033FD18);
  v5 = swift_retain_n(v0, v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v15 = (uint64_t)v1;
    v16 = v9;
    *(_DWORD *)v8 = 136446210;
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v2, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 4, v8 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%{public}s] deinit", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  swift_release(v1[2]);
  swift_release(v1[3]);
  swift_release(v1[4]);
  swift_release(v1[5]);
  swift_release(v1[6]);
  swift_release(v1[7]);
  swift_release(v1[8]);
  swift_release(v1[9]);
  swift_release(v1[10]);
  swift_release(v1[11]);
  swift_release(v1[12]);
  swift_release(v1[13]);
  swift_release(v1[14]);
  swift_release(v1[15]);
  swift_release(v1[16]);
  swift_release(v1[17]);
  swift_release(v1[18]);
  swift_release(v1[19]);
  swift_release(v1[20]);
  swift_release(v1[21]);
  swift_release(v1[22]);
  swift_release(v1[23]);
  swift_release(v1[24]);
  swift_release(v1[25]);
  return v1;
}

uint64_t sub_1000DF9A0()
{
  uint64_t v0;

  sub_1000DF728();
  return swift_deallocClassInstance(v0, 208, 7);
}

uint64_t type metadata accessor for AppEvents()
{
  return objc_opt_self(_TtC8SOSBuddy9AppEvents);
}

uint64_t destroy for AppEvents.AppPageEvent(_QWORD *a1)
{
  uint64_t result;

  swift_release(a1[1]);
  result = a1[3];
  if (result)
  {
    swift_release(result);
    return swift_bridgeObjectRelease(a1[5]);
  }
  return result;
}

uint64_t initializeWithCopy for AppEvents.AppPageEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = a2 + 24;
  v5 = *(_QWORD *)(a2 + 24);
  swift_retain(v4);
  if (v5)
  {
    v7 = *(_QWORD *)(a2 + 32);
    v8 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 24) = v5;
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    swift_retain(v5);
    swift_bridgeObjectRetain(v8);
  }
  else
  {
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v6;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(v6 + 16);
  }
  return a1;
}

uint64_t assignWithCopy for AppEvents.AppPageEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_retain(v4);
  swift_release(v5);
  v6 = (_OWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v9 = (_OWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 24);
  if (v7)
  {
    if (v8)
    {
      *(_QWORD *)(a1 + 24) = v8;
      swift_retain(v8);
      swift_release(v7);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v10 = *(_QWORD *)(a2 + 40);
      v11 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(a1 + 40) = v10;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRelease(v11);
    }
    else
    {
      sub_100050978((_QWORD *)(a1 + 24));
      v13 = *(_QWORD *)(a2 + 40);
      *v6 = *v9;
      *(_QWORD *)(a1 + 40) = v13;
    }
  }
  else if (v8)
  {
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v12;
    swift_retain(v8);
    swift_bridgeObjectRetain(v12);
  }
  else
  {
    v14 = *v9;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *v6 = v14;
  }
  return a1;
}

uint64_t assignWithTake for AppEvents.AppPageEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v4);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a1 + 24);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  if (!v6)
    goto LABEL_5;
  if (!v5)
  {
    sub_100050978((_QWORD *)(a1 + 24));
LABEL_5:
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    return a1;
  }
  *(_QWORD *)(a1 + 24) = v5;
  swift_release(v6);
  v7 = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

ValueMetadata *type metadata accessor for AppEvents.AppPageEvent()
{
  return &type metadata for AppEvents.AppPageEvent;
}

_QWORD *sub_1000DFC50(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a2[2];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = v4;
  swift_retain(v4);
  return a1;
}

_QWORD *assignWithCopy for AppEvents.SelectRoadsideProviderRequestedParams(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[2];
  v4 = a1[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for AppEvents.SelectRoadsideProviderRequestedParams(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(v3);
  return a1;
}

ValueMetadata *type metadata accessor for AppEvents.SelectRoadsideProviderRequestedParams()
{
  return &type metadata for AppEvents.SelectRoadsideProviderRequestedParams;
}

void *sub_1000DFD0C()
{
  return &protocol witness table for ObservableObjectPublisher;
}

uint64_t sub_1000DFD18@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;

  result = ObservableObject<>.objectWillChange.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t storeEnumTagSinglePayload for AppEvents.AppPageEventType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000DFD8C + 4 * byte_100254D95[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000DFDC0 + 4 * byte_100254D90[v4]))();
}

uint64_t sub_1000DFDC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DFDC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000DFDD0);
  return result;
}

uint64_t sub_1000DFDDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000DFDE4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000DFDE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000DFDF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AppEvents.AppPageEventType()
{
  return &type metadata for AppEvents.AppPageEventType;
}

unint64_t sub_1000DFE10()
{
  unint64_t result;

  result = qword_10031EF90;
  if (!qword_10031EF90)
  {
    result = swift_getWitnessTable(&unk_100254F34, &type metadata for AppEvents.AppPageEventType);
    atomic_store(result, (unint64_t *)&qword_10031EF90);
  }
  return result;
}

uint64_t ConnectionAssistantSatelliteRenderer.__allocating_init(device:buffers:renderPipelines:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, 120, 7);
  ConnectionAssistantSatelliteRenderer.init(device:buffers:renderPipelines:)(a1, a2, a3);
  return v7;
}

uint64_t ConnectionAssistantSatelliteRenderer.init(device:buffers:renderPipelines:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  __n128 v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  unint64_t v22;
  uint64_t v23;

  *(_QWORD *)(v3 + 104) = 0;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_QWORD *)(v3 + 16) = a2;
  *(_QWORD *)(v3 + 24) = a3;
  swift_retain_n(a2, (__n128)0);
  swift_retain_n(a3, v8);
  v9 = (void *)swift_unknownObjectRetain(a1);
  v10 = sub_1001B0888(v9, a2, a3);
  if (v4)
  {
    swift_release(a2);
    swift_release(a3);
  }
  else
  {
    *(_QWORD *)(v3 + 32) = v10;
    *(_QWORD *)(v3 + 40) = v11;
    *(_QWORD *)(v3 + 48) = v12;
    *(_QWORD *)(v3 + 56) = v13;
    v18 = objc_msgSend((id)swift_unknownObjectRetain(a1), "newBufferWithLength:options:", 32, 1);
    if (v18)
    {
      v19 = v18;
      swift_unknownObjectRelease(a1);
      *(_QWORD *)(v3 + 64) = v19;
      v20 = objc_msgSend(objc_allocWithZone((Class)MTKTextureLoader), "initWithDevice:", a1);
      swift_release(a2);
      swift_release(a3);
      swift_unknownObjectRelease(a1);
      *(_QWORD *)(v3 + 112) = v20;
      return v3;
    }
    v22 = sub_10001D534();
    v23 = swift_allocError(&type metadata for ConnectionAssistantRenderer.Buffers.Error, v22, 0, 0);
    swift_willThrow(v23);
    swift_release(a2);
    swift_release(a3);
    swift_unknownObjectRelease(a1);
  }
  swift_unknownObjectRelease(a1);
  swift_release(*(_QWORD *)(v3 + 16));
  swift_release(*(_QWORD *)(v3 + 24));
  if (!v4)
  {
    v14 = *(_QWORD *)(v3 + 32);
    v15 = *(_QWORD *)(v3 + 40);
    v16 = *(_QWORD *)(v3 + 48);
    swift_release(*(_QWORD *)(v3 + 56));
    swift_unknownObjectRelease(v16);
    swift_release(v15);
    swift_release(v14);
  }
  swift_unknownObjectRelease(*(_QWORD *)(v3 + 80));
  v17 = type metadata accessor for ConnectionAssistantSatelliteRenderer();
  swift_deallocPartialClassInstance(v3, v17, 120, 7);
  return v3;
}

void ConnectionAssistantSatelliteRenderer.compute(dt:satellite:earth:camera:computeCommandEncoder:)(double a1, uint64_t a2, uint64_t a3, float32x4_t *a4, void *a5)
{
  uint64_t v7;
  uint64_t v8;
  float32x4_t v9;
  float v10;
  float32x2_t v11;
  float32x2_t v12;
  uint64_t v13;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;
  _BYTE v22[128];
  _QWORD v23[2];
  float32x4_t v24;
  float v25;
  float32x4_t v26;
  char v27;
  _QWORD v28[4];
  float32x4_t v29;
  uint64_t v30;
  __int128 v31;
  char v32;
  float32x4_t v33;
  char v34;
  __int128 v35;

  ConnectionAssistantSatellite.cone(camera:earth:)(a4, a3, (uint64_t)v22);
  sub_1000E0928((uint64_t)v22, (uint64_t)v23);
  if ((v27 & 1) == 0)
  {
    v8 = v23[0];
    v7 = v23[1];
    v9 = vmulq_f32(v24, v24);
    LODWORD(v10) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).u32[0];
    v11 = vrsqrte_f32((float32x2_t)LODWORD(v10));
    v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)LODWORD(v10), vmul_f32(v11, v11)));
    v20 = vmulq_n_f32(v24, vmul_f32(v12, vrsqrts_f32((float32x2_t)LODWORD(v10), vmul_f32(v12, v12))).f32[0]);
    v21 = v26;
    v13 = COERCE_UNSIGNED_INT(atan2f(v25, sqrtf(v10))) | 0x3B03126F00000000;
    __asm { FMOV            V0.4S, #1.0 }
    v19.i64[0] = 0x3F0000003F000000;
    v19.i64[1] = 0x3F0000003F000000;
    v28[0] = 100;
    v28[2] = v8;
    v28[3] = v7;
    v29 = v20;
    v30 = v13;
    v31 = xmmword_100254F60;
    v32 = 0;
    v33 = vmlaq_f32(v21, v19, vsubq_f32(_Q0, v21));
    v34 = 0;
    v35 = xmmword_100254F70;
    ConnectionAssistantStarsRenderer.compute(dt:stars:computeCommandEncoder:)((uint64_t)v28, a5, a1);
  }
}

void ConnectionAssistantSatelliteRenderer.render(satellite:earth:camera:destination:renderCommandEncoder:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;
  __n128 v12;
  float32x4_t v13;
  double v14;
  char v15;
  double v16;
  int v17;
  void *v18;
  _DWORD *v19;
  id v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSString v30;
  id v31;
  id v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  float v38;
  __int128 v39;
  float v40;
  float v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  __int128 v50;
  id v51;
  _QWORD v52[2];
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _BYTE v61[128];
  _OWORD v62[7];
  char v63;
  char v64;
  _OWORD v65[7];
  char v66;

  v6 = v5;
  ConnectionAssistantSatellite.cone(camera:earth:)((float32x4_t *)a3, a2, (uint64_t)v61);
  sub_1000E0928((uint64_t)v61, (uint64_t)v62);
  v12 = *(__n128 *)a2;
  if ((v64 & 1) == 0)
  {
    v65[4] = v62[4];
    v65[5] = v62[5];
    v65[6] = v62[6];
    v66 = v63;
    v65[0] = v62[0];
    v65[1] = v62[1];
    v65[2] = v62[2];
    v65[3] = v62[3];
    v49 = v12.n128_u64[0];
    ConnectionAssistantConeRenderer.render(cone:parameters:camera:destination:renderCommandEncoder:)((uint64_t)v65, a3, a4, a5, *(_QWORD *)(v5 + 32), *(_QWORD *)(v5 + 40), *(void **)(v5 + 48), v12, *(float32x4_t *)(a2 + 32));
    v12.n128_u64[0] = v49;
  }
  *(float32x2_t *)v13.f32 = ConnectionAssistantSatellite.center(camera:earthCenter:)((float32x4_t *)a3, (float32x2_t)v12.n128_u64[0]);
  ConnectionAssistantCamera.projectUV(point:)(v13);
  if ((v15 & 1) == 0)
  {
    v16 = v14;
    v50 = *(_OWORD *)(a1 + 16);
    v17 = *(_DWORD *)(a1 + 32);
    v18 = *(void **)(v5 + 64);
    v19 = objc_msgSend((id)swift_unknownObjectRetain(*(_QWORD *)(v6 + 64)), "contents");
    v20 = v18;
    *(_OWORD *)v19 = v50;
    v19[4] = v17;
    if (*(_QWORD *)(v6 + 80))
    {
      v21 = *(double *)(a3 + 16);
      if (*(double *)(v6 + 72) == v21 && *(double *)(v6 + 104) == *(float *)(a1 + 8))
      {
        v22 = *(_QWORD *)(v6 + 80);
        if (!v22)
          return;
        goto LABEL_11;
      }
    }
    else
    {
      v21 = *(double *)(a3 + 16);
    }
    sub_1000E0970(*(void **)(v6 + 112), (uint64_t)v52, 64.0, v21, 32.0, 1.3, *(float *)(a1 + 8));
    v23 = v52[1];
    v24 = v53;
    v25 = v54;
    v26 = *(_QWORD *)(v6 + 80);
    *(_QWORD *)(v6 + 72) = v52[0];
    *(_QWORD *)(v6 + 80) = v23;
    *(_OWORD *)(v6 + 88) = v24;
    *(_QWORD *)(v6 + 104) = v25;
    swift_unknownObjectRelease(v26);
    v22 = *(_QWORD *)(v6 + 80);
    if (!v22)
      return;
LABEL_11:
    v51 = v20;
    v27 = *(_QWORD *)(v6 + 88);
    v47 = *(_QWORD *)(v6 + 96);
    swift_unknownObjectRetain(v22);
    v28 = sub_10022634C(7);
    if (v28)
    {
      v29 = v28;
      v30 = String._bridgeToObjectiveC()();
      objc_msgSend(a5, "setLabel:", v30);

      objc_msgSend(a5, "setRenderPipelineState:", v29);
      v31 = objc_msgSend(a4, "width");
      v32 = objc_msgSend(a4, "height");
      v55 = 0;
      v56 = 0;
      *(_QWORD *)&v57 = v31;
      *((_QWORD *)&v57 + 1) = v32;
      objc_msgSend(a5, "setScissorRect:", &v55);
      objc_msgSend(a5, "setVertexBuffer:offset:atIndex:", *(_QWORD *)(*(_QWORD *)(v6 + 16) + 24), 0, 0);
      *(double *)&v33 = ConnectionAssistantSatellite.model(projectedCenter:textureSize:camera:)(v27, v47, a3, v16);
      v46 = v34;
      v48 = v33;
      v44 = v39;
      v45 = v35;
      v36 = *(_QWORD *)a3;
      v37 = *(_QWORD *)(a3 + 8);
      v38 = 1.0;
      LODWORD(v39) = 1.0;
      if (*(_QWORD *)a3)
      {
        LODWORD(v39) = 1.0;
        if (v37)
        {
          v40 = (float)v36 / (float)v37;
          v38 = fminf(v40, 1.0);
          *(float *)&v39 = fmaxf(v40, 1.0);
        }
      }
      *((float *)&v39 + 1) = 1.0 / v38;
      v43 = v39;
      v41 = ConnectionAssistantCamera.Viewport.normalizedPointSize.getter(v36, v37, *(double *)(a3 + 16));
      v55 = v43;
      *(float *)&v56 = v41;
      v57 = v48;
      v58 = v46;
      v59 = v45;
      v60 = v44;
      objc_msgSend(a5, "setVertexBytes:length:atIndex:", &v55, 80, 1);
      objc_msgSend(a5, "setFragmentBuffer:offset:atIndex:", v51, 0, 0);
      objc_msgSend(a5, "setFragmentTexture:atIndex:", v22, 0);
      objc_msgSend(a5, "drawPrimitives:vertexStart:vertexCount:", 4, 0, 4);
      swift_unknownObjectRelease(v22);
      v42 = v29;
    }
    else
    {
      v42 = v22;
    }
    swift_unknownObjectRelease(v42);
  }
}

void sub_1000E05B4(void *a1, void *a2, CGFloat a3, CGFloat a4, long double a5, double a6)
{
  CGContext *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  CGContext *v21;
  CGContext *v22;
  CGContext *v23;
  double v24;
  uint64_t v25;
  CGColorRef GenericRGB;
  double v27;
  CGFloat v28;
  double v29;
  double v30;
  long double v31;
  double v32;
  double v33;
  uint64_t v34;
  double v35;
  uint64_t v36;
  CGFloat v37;
  CGContext *v38;
  CGContext *v39;
  CGContext *v40;
  CGFloat offset;
  double v42;
  CGColor *color;
  CGSize v44;

  v12 = (CGContext *)objc_msgSend(a1, "CGContext");
  CGContextSetBlendMode(v12, kCGBlendModePlusLighter);

  objc_msgSend(a2, "size");
  v14 = v13;
  objc_msgSend(a2, "size");
  v16 = v15;
  objc_msgSend(a2, "size");
  v18 = v17;
  v20 = v19;
  v21 = (CGContext *)objc_msgSend(a1, "CGContext");
  CGContextTranslateCTM(v21, -a3, -a4);

  v22 = (CGContext *)objc_msgSend(a1, "CGContext");
  CGContextTranslateCTM(v22, a3 * 0.5, a4 * 0.5);

  v23 = (CGContext *)objc_msgSend(a1, "CGContext");
  CGContextRotateCTM(v23, 0.785398163);

  v24 = log2(a5) + -1.0;
  if ((~*(_QWORD *)&v24 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v24 <= -9.22337204e18)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (v24 >= 9.22337204e18)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v25 = (uint64_t)v24;
  GenericRGB = CGColorCreateGenericRGB(1.0, 1.0, 1.0, 1.0);
  if (v25 < 0)
  {
LABEL_12:
    __break(1u);
    return;
  }
  offset = a4;
  v42 = v18;
  color = GenericRGB;
  if (v25)
  {
    v27 = v20;
    v28 = a3;
    v29 = v14 * -0.5;
    v30 = v16 * -0.5;
    v31 = exp2((double)(v25 - 1));
    v32 = a6;
    v33 = v31;
    v34 = 0;
    v35 = 1.0 / (double)v25 * v32;
    do
    {
      v36 = v34 + 1;
      v37 = exp2((double)v34) / v33 * a5;
      v38 = (CGContext *)objc_msgSend(a1, "CGContext");
      CGContextSetBlendMode(v38, kCGBlendModePlusLighter);

      v39 = (CGContext *)objc_msgSend(a1, "CGContext");
      v44.width = v28;
      v44.height = offset;
      CGContextSetShadowWithColor(v39, v44, v37, color);

      v40 = (CGContext *)objc_msgSend(a1, "CGContext");
      CGContextSetAlpha(v40, v35);

      objc_msgSend(a2, "drawInRect:blendMode:alpha:", 27, v29, v30, v42, v27, v35);
      v34 = v36;
    }
    while (v25 != v36);
  }

}

uint64_t ConnectionAssistantSatelliteRenderer.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  v1 = *(_QWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  swift_release(*(_QWORD *)(v0 + 56));
  swift_unknownObjectRelease(v3);
  swift_release(v2);
  swift_release(v1);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 64));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 80));

  return v0;
}

uint64_t ConnectionAssistantSatelliteRenderer.__deallocating_deinit()
{
  uint64_t v0;

  ConnectionAssistantSatelliteRenderer.deinit();
  return swift_deallocClassInstance(v0, 120, 7);
}

uint64_t type metadata accessor for ConnectionAssistantSatelliteRenderer()
{
  return objc_opt_self(_TtC8SOSBuddy36ConnectionAssistantSatelliteRenderer);
}

uint64_t sub_1000E0928(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031EC00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1000E0970(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>, double a5@<D2>, double a6@<D3>, double a7@<D4>)
{
  id v14;
  id v15;
  NSString v16;
  id v17;
  id v18;
  double v19;
  long double v20;
  long double v21;
  double v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  id v28;
  double v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  void **v39;
  void *v40;
  void **v41;
  id v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  void **v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  id v54;
  void *v55;
  id v56;
  void *v57;
  void **aBlock;
  uint64_t v59;
  void (*v60)(uint64_t, void *);
  void *v61;
  uint64_t (*v62)(uint64_t);
  uint64_t v63;

  v14 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRendererFormat), "init");
  objc_msgSend(v14, "setScale:", a4);
  objc_msgSend(v14, "setOpaque:", 1);
  v15 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:", a3);
  v16 = String._bridgeToObjectiveC()();
  v17 = objc_msgSend((id)objc_opt_self(UIImage), "_systemImageNamed:", v16);

  if (!v17
    || (v18 = objc_msgSend(v17, "imageWithSymbolConfiguration:", v15),
        v17,
        !v18))
  {
    v43 = sub_1000E1194();
    v44 = swift_allocError(&type metadata for ConnectionAssistantSatelliteRenderer.Error, v43, 0, 0);
    *v45 = 1;
    swift_willThrow(v44);

    return;
  }
  v51 = a2;
  v52 = a1;
  objc_msgSend(v18, "size");
  v20 = v19;
  objc_msgSend(v18, "size");
  v22 = a5 + a5 + ceil(hypot(v20, v21));
  v23 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithSize:format:", v14, v22, v22);
  v24 = swift_allocObject(&unk_1002EF3B8, 56, 7);
  *(double *)(v24 + 16) = v22;
  *(double *)(v24 + 24) = v22;
  *(_QWORD *)(v24 + 32) = v18;
  *(double *)(v24 + 40) = a5;
  *(double *)(v24 + 48) = a6;
  v25 = swift_allocObject(&unk_1002EF3E0, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_1000E11FC;
  *(_QWORD *)(v25 + 24) = v24;
  v62 = sub_100021640;
  v63 = v25;
  aBlock = _NSConcreteStackBlock;
  v59 = 1107296256;
  v60 = sub_1000804C4;
  v61 = &unk_1002EF3F8;
  v26 = _Block_copy(&aBlock);
  v27 = v63;
  v56 = v18;
  swift_retain(v25);
  swift_release(v27);
  v57 = v23;
  v28 = objc_msgSend(v23, "imageWithActions:", v26);
  _Block_release(v26);
  LOBYTE(v26) = swift_isEscapingClosureAtFileLocation(v25, "", 141, 125, 36, 1);
  swift_release(v25);
  if ((v26 & 1) != 0)
  {
    __break(1u);
LABEL_12:
    __break(1u);
  }
  v55 = v15;
  v29 = a7 / a3 * v22;
  v30 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithSize:format:", v14, v29, v29);
  v31 = swift_allocObject(&unk_1002EF430, 40, 7);
  *(_QWORD *)(v31 + 16) = v28;
  *(double *)(v31 + 24) = v29;
  *(double *)(v31 + 32) = v29;
  v32 = swift_allocObject(&unk_1002EF458, 32, 7);
  *(_QWORD *)(v32 + 16) = sub_1000E1258;
  *(_QWORD *)(v32 + 24) = v31;
  v62 = sub_1000216F8;
  v63 = v32;
  aBlock = _NSConcreteStackBlock;
  v59 = 1107296256;
  v60 = sub_1000804C4;
  v61 = &unk_1002EF470;
  v33 = _Block_copy(&aBlock);
  v34 = v63;
  v54 = v28;
  swift_retain(v32);
  swift_release(v34);
  v35 = objc_msgSend(v30, "imageWithActions:", v33);
  _Block_release(v33);
  LOBYTE(v33) = swift_isEscapingClosureAtFileLocation(v32, "", 141, 165, 46, 1);
  swift_release(v32);
  if ((v33 & 1) != 0)
    goto LABEL_12;
  v36 = objc_msgSend(v35, "CGImage");
  if (v36)
  {
    v37 = v36;
    aBlock = 0;
    v38 = objc_msgSend(v52, "newTextureWithCGImage:options:error:", v36, 0, &aBlock);
    v39 = aBlock;
    if (v38)
    {
      v40 = v38;
      v41 = aBlock;
      v53 = objc_msgSend(v40, "width");
      v42 = objc_msgSend(v40, "height");
      swift_release(v31);
      swift_release(v24);

      *(double *)v51 = a4;
      *(_QWORD *)(v51 + 8) = v40;
      *(_QWORD *)(v51 + 16) = v53;
      *(_QWORD *)(v51 + 24) = v42;
      *(double *)(v51 + 32) = a7;
    }
    else
    {
      v49 = aBlock;
      _convertNSErrorToError(_:)(v39);

      swift_willThrow(v50);
      swift_release(v31);
      swift_release(v24);

    }
  }
  else
  {
    v46 = sub_1000E1194();
    v47 = swift_allocError(&type metadata for ConnectionAssistantSatelliteRenderer.Error, v46, 0, 0);
    *v48 = 2;
    swift_willThrow(v47);
    swift_release(v31);
    swift_release(v24);

  }
}

unint64_t sub_1000E0F80()
{
  unint64_t result;

  result = qword_10031EFA0;
  if (!qword_10031EFA0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConnectionAssistantSatelliteRenderer.Error, &type metadata for ConnectionAssistantSatelliteRenderer.Error);
    atomic_store(result, (unint64_t *)&qword_10031EFA0);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantSatelliteRenderer.Error(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000E1010 + 4 * byte_100254F85[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000E1044 + 4 * byte_100254F80[v4]))();
}

uint64_t sub_1000E1044(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E104C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000E1054);
  return result;
}

uint64_t sub_1000E1060(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000E1068);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000E106C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E1074(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantSatelliteRenderer.Error()
{
  return &type metadata for ConnectionAssistantSatelliteRenderer.Error;
}

double destroy for ConnectionAssistantSatelliteRenderer.SatelliteTexture(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = swift_unknownObjectRelease(*(_QWORD *)(a1 + 8)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for ConnectionAssistantSatelliteRenderer.SatelliteTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_unknownObjectRetain(v3);
  return a1;
}

_QWORD *assignWithCopy for ConnectionAssistantSatelliteRenderer.SatelliteTexture(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  return a1;
}

uint64_t assignWithTake for ConnectionAssistantSatelliteRenderer.SatelliteTexture(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_unknownObjectRelease(v4);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for ConnectionAssistantSatelliteRenderer.SatelliteTexture()
{
  return &type metadata for ConnectionAssistantSatelliteRenderer.SatelliteTexture;
}

unint64_t sub_1000E1194()
{
  unint64_t result;

  result = qword_10031F098;
  if (!qword_10031F098)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConnectionAssistantSatelliteRenderer.Error, &type metadata for ConnectionAssistantSatelliteRenderer.Error);
    atomic_store(result, (unint64_t *)&qword_10031F098);
  }
  return result;
}

uint64_t sub_1000E11D8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 56, 7);
}

void sub_1000E11FC(void *a1)
{
  uint64_t v1;

  sub_1000E05B4(a1, *(void **)(v1 + 32), *(CGFloat *)(v1 + 16), *(CGFloat *)(v1 + 24), *(long double *)(v1 + 40), *(double *)(v1 + 48));
}

uint64_t sub_1000E120C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_1000E121C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1000E122C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000E1234()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

id sub_1000E1258()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(v0 + 16), "drawInRect:", 0.0, 0.0, *(double *)(v0 + 24), *(double *)(v0 + 32));
}

uint64_t sub_1000E1274()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000E128C(uint64_t a1, double a2, double a3, double a4, double a5)
{
  Swift::String v11;
  void *object;
  Swift::String v13;
  Swift::String v14;
  void *v15;
  Swift::String v16;
  CGRect v17;

  v17.origin.x = 0.0;
  v17.origin.y = 0.0;
  v17.size.width = 0.0;
  v17.size.height = 0.0;
  if (CGRectEqualToRect(*(CGRect *)&a2, v17))
    return 0x6F72657A2ELL;
  _StringGuts.grow(_:)(23);
  swift_bridgeObjectRelease(0xE000000000000000);
  v11._countAndFlagsBits = sub_1000DB284(a1, a2, a3);
  object = v11._object;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(object);
  v13._countAndFlagsBits = 0x203A657A6973202CLL;
  v13._object = (void *)0xE800000000000000;
  String.append(_:)(v13);
  v14._countAndFlagsBits = sub_1000DB284(a1, a4, a5);
  v15 = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(v15);
  v16._countAndFlagsBits = 41;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  return 0x6E696769726F287ELL;
}

uint64_t *initializeWithCopy for StewieUnavailableView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2[2];
  v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  v8 = a2[4];
  v7 = a2[5];
  a1[4] = v8;
  a1[5] = v7;
  v10 = a2[6];
  v9 = a2[7];
  a1[6] = v10;
  a1[7] = v9;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v8);
  swift_retain(v10);
  return a1;
}

uint64_t *assignWithCopy for StewieUnavailableView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a1[4];
  v9 = a2[4];
  a1[4] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[5] = a2[5];
  v10 = a1[6];
  v11 = a2[6];
  a1[6] = v11;
  swift_retain(v11);
  swift_release(v10);
  a1[7] = a2[7];
  return a1;
}

uint64_t *assignWithTake for StewieUnavailableView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = a1[4];
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_release(v7);
  v9 = a1[6];
  v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_release(v9);
  a1[7] = a2[7];
  return a1;
}

ValueMetadata *type metadata accessor for StewieUnavailableView()
{
  return &type metadata for StewieUnavailableView;
}

uint64_t sub_1000E1540(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029A0A4, 1);
}

uint64_t sub_1000E1550@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t (*v98)(uint64_t);
  unint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD v110[3];

  v106 = a1;
  v103 = type metadata accessor for SOSConnectionEndedView(0);
  __chkstk_darwin(v103, v2);
  v4 = (uint64_t *)((char *)&v101 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = sub_100003DB8(&qword_1003180C0);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ConnectionClosed(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v101 = (uint64_t)&v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100003DB8(&qword_10031F0A0);
  __chkstk_darwin(v104, v13);
  v15 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100003DB8(&qword_10031F0A8);
  __chkstk_darwin(v102, v16);
  v18 = (uint64_t *)((char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v19 = sub_100003DB8(&qword_10031F0B0);
  __chkstk_darwin(v19, v20);
  v22 = (char *)&v101 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100003DB8(&qword_10031F0B8);
  __chkstk_darwin(v23, v24);
  v26 = (char *)&v101 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = v1[4];
  if (!v27)
  {
    v96 = v1[5];
    v97 = type metadata accessor for TryOutModel(0);
    v98 = type metadata accessor for TryOutModel;
    v99 = &qword_10031A0C8;
LABEL_16:
    v100 = sub_1000052EC(v99, v98, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v96, v97, v100);
    __break(1u);
    return result;
  }
  v28 = *(__int16 *)(v27 + 56);
  v105 = v19;
  if (v28 < -512)
  {
    v29 = type metadata accessor for AppEvents();
    v30 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    v31 = EnvironmentObject.init()(v29, v30);
    v33 = v32;
    v34 = type metadata accessor for UIMetrics();
    v35 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v36 = EnvironmentObject.init()(v34, v35);
    v38 = v37;
    v108 = _swiftEmptyArrayStorage;
    v39 = sub_100003DB8(&qword_100317980);
    State.init(wrappedValue:)(v110, &v108, v39);
    v40 = v110[0];
    v41 = v110[1];
    *v18 = v31;
    v18[1] = v33;
    v18[2] = v36;
    v18[3] = v38;
    v18[4] = v40;
    v18[5] = v41;
    swift_storeEnumTagMultiPayload(v18, v102, 0);
    v42 = sub_1000E1EA8();
    v43 = sub_1000052EC(&qword_10031F0D8, type metadata accessor for SOSConnectionEndedView, (uint64_t)&unk_1002551F8);
    swift_retain(v31);
    swift_retain(v36);
    swift_bridgeObjectRetain(v40);
    swift_retain(v41);
    _ConditionalContent<>.init(storage:)(v18, &type metadata for TryOutEndedView, v103, v42, v43);
    sub_10000B234((uint64_t)v22, (uint64_t)v15, &qword_10031F0B0);
    swift_storeEnumTagMultiPayload(v15, v104, 0);
    v44 = sub_1000E1E24();
    v45 = sub_1000E1EEC();
    _ConditionalContent<>.init(storage:)(v15, v105, &type metadata for StewieStatusNotAvailableView, v44, v45);
    sub_100007FF0((uint64_t)v22, &qword_10031F0B0);
    swift_release(v41);
    swift_bridgeObjectRelease(v40);
    swift_release(v36);
    swift_release(v31);
LABEL_11:
    v73 = sub_100003DB8(&qword_10031F0C0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v26, 0, 1, v73);
    return sub_10000B458((uint64_t)v26, v106, &qword_10031F0B8);
  }
  v46 = *v1;
  if (!*v1)
  {
    v96 = v1[1];
    v97 = type metadata accessor for ConnectionClosedModel(0);
    v98 = type metadata accessor for ConnectionClosedModel;
    v99 = &qword_10031CB58;
    goto LABEL_16;
  }
  v47 = v46 + OBJC_IVAR____TtC8SOSBuddy21ConnectionClosedModel__connectionClosed;
  swift_beginAccess(v46 + OBJC_IVAR____TtC8SOSBuddy21ConnectionClosedModel__connectionClosed, v110, 0, 0);
  sub_10000B234(v47, (uint64_t)v8, &qword_1003180C0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) != 1)
  {
    v52 = v101;
    sub_1000E8D6C((uint64_t)v8, v101, type metadata accessor for ConnectionClosed);
    v53 = v103;
    sub_1000E1F30(v52, (uint64_t)v4 + *(int *)(v103 + 32), type metadata accessor for ConnectionClosed);
    v54 = type metadata accessor for AppEvents();
    v55 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    *v4 = EnvironmentObject.init()(v54, v55);
    v4[1] = v56;
    v57 = type metadata accessor for AppRuntimeStateModel();
    v58 = sub_1000052EC(&qword_100318498, (uint64_t (*)(uint64_t))type metadata accessor for AppRuntimeStateModel, (uint64_t)&unk_10024D2FC);
    v4[2] = EnvironmentObject.init()(v57, v58);
    v4[3] = v59;
    v60 = type metadata accessor for RoadsideAssistanceModel();
    v61 = sub_1000052EC(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel, (uint64_t)&unk_10024D2FC);
    v4[4] = EnvironmentObject.init()(v60, v61);
    v4[5] = v62;
    v63 = type metadata accessor for UIMetrics();
    v64 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v4[6] = EnvironmentObject.init()(v63, v64);
    v4[7] = v65;
    v66 = (_QWORD *)((char *)v4 + *(int *)(v53 + 36));
    v107 = _swiftEmptyArrayStorage;
    v67 = sub_100003DB8(&qword_100317980);
    State.init(wrappedValue:)(&v108, &v107, v67);
    v68 = v109;
    *v66 = v108;
    v66[1] = v68;
    sub_1000E1F30((uint64_t)v4, (uint64_t)v18, type metadata accessor for SOSConnectionEndedView);
    swift_storeEnumTagMultiPayload(v18, v102, 1);
    v69 = sub_1000E1EA8();
    v70 = sub_1000052EC(&qword_10031F0D8, type metadata accessor for SOSConnectionEndedView, (uint64_t)&unk_1002551F8);
    _ConditionalContent<>.init(storage:)(v18, &type metadata for TryOutEndedView, v53, v69, v70);
    sub_10000B234((uint64_t)v22, (uint64_t)v15, &qword_10031F0B0);
    swift_storeEnumTagMultiPayload(v15, v104, 0);
    v71 = sub_1000E1E24();
    v72 = sub_1000E1EEC();
    _ConditionalContent<>.init(storage:)(v15, v105, &type metadata for StewieStatusNotAvailableView, v71, v72);
    sub_100007FF0((uint64_t)v22, &qword_10031F0B0);
    sub_10000AFFC((uint64_t)v4, type metadata accessor for SOSConnectionEndedView);
    sub_10000AFFC(v52, type metadata accessor for ConnectionClosed);
    goto LABEL_11;
  }
  sub_100007FF0((uint64_t)v8, &qword_1003180C0);
  v48 = v1[2];
  if (!v48)
  {
    v96 = v1[3];
    v97 = type metadata accessor for StewieModel();
    v98 = (uint64_t (*)(uint64_t))type metadata accessor for StewieModel;
    v99 = &qword_1003186E0;
    goto LABEL_16;
  }
  if (*(_QWORD *)(v48 + 64) && (v49 = *(unsigned __int8 *)(v48 + 56), v49 != 5))
  {
    v74 = type metadata accessor for AppEvents();
    v75 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    v76 = EnvironmentObject.init()(v74, v75);
    v78 = v77;
    v79 = type metadata accessor for AppRuntimeStateModel();
    v80 = sub_1000052EC(&qword_100318498, (uint64_t (*)(uint64_t))type metadata accessor for AppRuntimeStateModel, (uint64_t)&unk_10024D2FC);
    v81 = EnvironmentObject.init()(v79, v80);
    v83 = v82;
    v84 = type metadata accessor for UIMetrics();
    v85 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v86 = EnvironmentObject.init()(v84, v85);
    v88 = v87;
    v107 = _swiftEmptyArrayStorage;
    v89 = sub_100003DB8(&qword_100317980);
    State.init(wrappedValue:)(&v108, &v107, v89);
    v90 = v108;
    v91 = v109;
    *(_QWORD *)v15 = v76;
    *((_QWORD *)v15 + 1) = v78;
    *((_QWORD *)v15 + 2) = v81;
    *((_QWORD *)v15 + 3) = v83;
    *((_QWORD *)v15 + 4) = v86;
    *((_QWORD *)v15 + 5) = v88;
    v15[48] = v49;
    *((_QWORD *)v15 + 7) = v90;
    *((_QWORD *)v15 + 8) = v91;
    swift_storeEnumTagMultiPayload(v15, v104, 1);
    v92 = sub_1000E1E24();
    v93 = sub_1000E1EEC();
    v94 = v106;
    _ConditionalContent<>.init(storage:)(v15, v105, &type metadata for StewieStatusNotAvailableView, v92, v93);
    v95 = sub_100003DB8(&qword_10031F0C0);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v94, 0, 1, v95);
  }
  else
  {
    v50 = sub_100003DB8(&qword_10031F0C0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v106, 1, 1, v50);
  }
}

uint64_t type metadata accessor for SOSConnectionEndedView(uint64_t a1)
{
  uint64_t result;

  result = qword_10031F140;
  if (!qword_10031F140)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SOSConnectionEndedView);
  return result;
}

unint64_t sub_1000E1E24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031F0C8;
  if (!qword_10031F0C8)
  {
    v1 = sub_100007FAC(&qword_10031F0B0);
    sub_1000E1EA8();
    sub_1000052EC(&qword_10031F0D8, type metadata accessor for SOSConnectionEndedView, (uint64_t)&unk_1002551F8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031F0C8);
  }
  return result;
}

unint64_t sub_1000E1EA8()
{
  unint64_t result;

  result = qword_10031F0D0;
  if (!qword_10031F0D0)
  {
    result = swift_getWitnessTable(&unk_100255248, &type metadata for TryOutEndedView);
    atomic_store(result, (unint64_t *)&qword_10031F0D0);
  }
  return result;
}

unint64_t sub_1000E1EEC()
{
  unint64_t result;

  result = qword_10031F0E0;
  if (!qword_10031F0E0)
  {
    result = swift_getWitnessTable(&unk_1002551A8, &type metadata for StewieStatusNotAvailableView);
    atomic_store(result, (unint64_t *)&qword_10031F0E0);
  }
  return result;
}

uint64_t sub_1000E1F30(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t destroy for StewieStatusNotAvailableView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_bridgeObjectRelease(a1[7]);
  return swift_release(a1[8]);
}

uint64_t initializeWithCopy for StewieStatusNotAvailableView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v8 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v9 = a2[7];
  v10 = a2[8];
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v8);
  swift_bridgeObjectRetain(v9);
  swift_retain(v10);
  return a1;
}

uint64_t *assignWithCopy for StewieStatusNotAvailableView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a1[4];
  v9 = a2[4];
  a1[4] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[5] = a2[5];
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  v10 = a2[7];
  v11 = a1[7];
  a1[7] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a1[8];
  v13 = a2[8];
  a1[8] = v13;
  swift_retain(v13);
  swift_release(v12);
  return a1;
}

uint64_t *assignWithTake for StewieStatusNotAvailableView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = a1[4];
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_release(v7);
  a1[5] = a2[5];
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  swift_bridgeObjectRelease(a1[7]);
  v9 = a1[8];
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
  swift_release(v9);
  return a1;
}

ValueMetadata *type metadata accessor for StewieStatusNotAvailableView()
{
  return &type metadata for StewieStatusNotAvailableView;
}

_QWORD *sub_1000E2180(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t, __n128);
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  char *__dst;
  uint64_t v30;
  char *v31;
  char *v32;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v6 = (_QWORD *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    v6 = a1;
    v7 = a2[2];
    a1[1] = a2[1];
    a1[2] = v7;
    v8 = a2[4];
    a1[3] = a2[3];
    a1[4] = v8;
    v9 = a2[6];
    a1[5] = a2[5];
    a1[6] = v9;
    a1[7] = a2[7];
    v10 = *(int *)(a3 + 32);
    v11 = (char *)a1 + v10;
    v12 = (char *)a2 + v10;
    *((_BYTE *)a1 + v10) = *((_BYTE *)a2 + v10);
    v13 = type metadata accessor for ConnectionClosed(0);
    v14 = *(int *)(v13 + 20);
    v31 = v12;
    v32 = v11;
    __dst = &v11[v14];
    v30 = v13;
    v15 = &v12[v14];
    v16 = type metadata accessor for Date(0);
    v17 = *(_QWORD *)(v16 - 8);
    v18 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v17 + 48);
    swift_retain(v4);
    swift_retain(v7);
    swift_retain(v8);
    v19 = swift_retain(v9);
    if (v18(v15, 1, v16, v19))
    {
      v20 = sub_100003DB8(&qword_100317D58);
      memcpy(__dst, v15, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(__dst, v15, v16);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
    }
    v21 = *(int *)(v30 + 24);
    v22 = *(_QWORD *)&v31[v21];
    *(_QWORD *)&v32[v21] = v22;
    v23 = *(int *)(a3 + 36);
    v24 = (_QWORD *)((char *)v6 + v23);
    v25 = (_QWORD *)((char *)a2 + v23);
    v26 = *v25;
    v4 = v25[1];
    *v24 = *v25;
    v24[1] = v4;
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v26);
  }
  swift_retain(v4);
  return v6;
}

uint64_t sub_1000E2324(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[6]);
  v4 = (char *)a1 + *(int *)(a2 + 32);
  v5 = type metadata accessor for ConnectionClosed(0);
  v6 = &v4[*(int *)(v5 + 20)];
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease(*(_QWORD *)&v4[*(int *)(v5 + 24)]);
  v9 = (_QWORD *)((char *)a1 + *(int *)(a2 + 36));
  swift_bridgeObjectRelease(*v9);
  return swift_release(v9[1]);
}

_QWORD *sub_1000E23F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  char *__dst;
  uint64_t v33;
  char *v34;
  char *v35;

  v6 = *a2;
  v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  v8 = a2[2];
  v7 = a2[3];
  a1[2] = v8;
  a1[3] = v7;
  v10 = a2[4];
  v9 = a2[5];
  a1[4] = v10;
  a1[5] = v9;
  v12 = a2[6];
  v11 = a2[7];
  a1[6] = v12;
  a1[7] = v11;
  v13 = *(int *)(a3 + 32);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  v16 = type metadata accessor for ConnectionClosed(0);
  v17 = *(int *)(v16 + 20);
  v34 = v15;
  v35 = v14;
  __dst = &v14[v17];
  v33 = v16;
  v18 = &v15[v17];
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v20 + 48);
  swift_retain(v6);
  swift_retain(v8);
  swift_retain(v10);
  v22 = swift_retain(v12);
  if (v21(v18, 1, v19, v22))
  {
    v23 = sub_100003DB8(&qword_100317D58);
    memcpy(__dst, v18, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(__dst, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(__dst, 0, 1, v19);
  }
  v24 = *(int *)(v33 + 24);
  v25 = *(_QWORD *)&v34[v24];
  *(_QWORD *)&v35[v24] = v25;
  v26 = *(int *)(a3 + 36);
  v27 = (_QWORD *)((char *)a1 + v26);
  v28 = (_QWORD *)((char *)a2 + v26);
  v29 = *v28;
  v30 = v28[1];
  *v27 = *v28;
  v27[1] = v30;
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRetain(v29);
  swift_retain(v30);
  return a1;
}

_QWORD *sub_1000E256C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(char *, uint64_t, uint64_t);
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  a1[1] = a2[1];
  v8 = a1[2];
  v9 = a2[2];
  a1[2] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[3] = a2[3];
  v10 = a1[4];
  v11 = a2[4];
  a1[4] = v11;
  swift_retain(v11);
  swift_release(v10);
  a1[5] = a2[5];
  v12 = a1[6];
  v13 = a2[6];
  a1[6] = v13;
  swift_retain(v13);
  swift_release(v12);
  a1[7] = a2[7];
  v38 = a3;
  v14 = *(int *)(a3 + 32);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  *((_BYTE *)a1 + v14) = *((_BYTE *)a2 + v14);
  v37 = type metadata accessor for ConnectionClosed(0);
  v17 = *(int *)(v37 + 20);
  v18 = &v15[v17];
  v19 = &v16[v17];
  v20 = type metadata accessor for Date(0);
  v21 = *(_QWORD *)(v20 - 8);
  v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48);
  v23 = v22(v18, 1, v20);
  v24 = v22(v19, 1, v20);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 24))(v18, v19, v20);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v21 + 8))(v18, v20);
    goto LABEL_6;
  }
  if (v24)
  {
LABEL_6:
    v25 = sub_100003DB8(&qword_100317D58);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
LABEL_7:
  v26 = *(int *)(v37 + 24);
  v27 = *(_QWORD *)&v16[v26];
  v28 = *(_QWORD *)&v15[v26];
  *(_QWORD *)&v15[v26] = v27;
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease(v28);
  v29 = *(int *)(v38 + 36);
  v30 = (char *)a1 + v29;
  v31 = (char *)a2 + v29;
  v32 = *(_QWORD *)((char *)a2 + v29);
  v33 = *(_QWORD *)((char *)a1 + v29);
  *(_QWORD *)((char *)a1 + v29) = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease(v33);
  v34 = *((_QWORD *)v30 + 1);
  v35 = *((_QWORD *)v31 + 1);
  *((_QWORD *)v30 + 1) = v35;
  swift_retain(v35);
  swift_release(v34);
  return a1;
}

_OWORD *sub_1000E2788(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  v8 = *(int *)(a3 + 32);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
  v11 = type metadata accessor for ConnectionClosed(0);
  v12 = *(int *)(v11 + 20);
  v13 = &v9[v12];
  v14 = &v10[v12];
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_100003DB8(&qword_100317D58);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(_QWORD *)&v9[*(int *)(v11 + 24)] = *(_QWORD *)&v10[*(int *)(v11 + 24)];
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 36)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 36));
  return a1;
}

_QWORD *sub_1000E289C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t);
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[2];
  v8 = a2[2];
  a1[1] = a2[1];
  a1[2] = v8;
  swift_release(v7);
  v9 = a1[4];
  v10 = a2[4];
  a1[3] = a2[3];
  a1[4] = v10;
  swift_release(v9);
  v11 = a1[6];
  v12 = a2[6];
  a1[5] = a2[5];
  a1[6] = v12;
  swift_release(v11);
  a1[7] = a2[7];
  v34 = a3;
  v13 = *(int *)(a3 + 32);
  v14 = (char *)a1 + v13;
  v15 = (char *)a2 + v13;
  *((_BYTE *)a1 + v13) = *((_BYTE *)a2 + v13);
  v33 = type metadata accessor for ConnectionClosed(0);
  v16 = *(int *)(v33 + 20);
  v17 = &v14[v16];
  v18 = &v15[v16];
  v19 = type metadata accessor for Date(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v22 = v21(v17, 1, v19);
  v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v20 + 40))(v17, v18, v19);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v20 + 8))(v17, v19);
    goto LABEL_6;
  }
  if (v23)
  {
LABEL_6:
    v24 = sub_100003DB8(&qword_100317D58);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v17, v18, v19);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_7:
  v25 = *(int *)(v33 + 24);
  v26 = *(_QWORD *)&v14[v25];
  *(_QWORD *)&v14[v25] = *(_QWORD *)&v15[v25];
  swift_bridgeObjectRelease(v26);
  v27 = *(int *)(v34 + 36);
  v28 = (char *)a1 + v27;
  v29 = (_QWORD *)((char *)a2 + v27);
  v30 = *(_QWORD *)((char *)a1 + v27);
  *(_QWORD *)((char *)a1 + v27) = *v29;
  swift_bridgeObjectRelease(v30);
  v31 = *((_QWORD *)v28 + 1);
  *((_QWORD *)v28 + 1) = v29[1];
  swift_release(v31);
  return a1;
}

uint64_t sub_1000E2A68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000E2A74);
}

uint64_t sub_1000E2A74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for ConnectionClosed(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 32), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000E2AF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000E2B00);
}

uint64_t sub_1000E2B00(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ConnectionClosed(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 32), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

uint64_t sub_1000E2B7C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[6];

  v4[0] = &unk_100255168;
  v4[1] = &unk_100255168;
  v4[2] = &unk_100255168;
  v4[3] = &unk_100255168;
  result = type metadata accessor for ConnectionClosed(319);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(result - 8) + 64;
    v4[5] = &unk_100255180;
    swift_initStructMetadata(a1, 256, 6, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t destroy for TryOutEndedView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_release(a1[5]);
}

uint64_t *initializeWithCopy for TryOutEndedView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2[2];
  v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  v7 = a2[4];
  v8 = a2[5];
  a1[4] = v7;
  a1[5] = v8;
  swift_retain(v3);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  return a1;
}

uint64_t *assignWithCopy for TryOutEndedView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a1[5];
  v11 = a2[5];
  a1[5] = v11;
  swift_retain(v11);
  swift_release(v10);
  return a1;
}

_QWORD *assignWithTake for TryOutEndedView(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  *a1 = *(_QWORD *)a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = *(_QWORD *)(a2 + 16);
  a1[1] = *(_QWORD *)(a2 + 8);
  a1[2] = v6;
  swift_release(v5);
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(a1[4]);
  v7 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  swift_release(v7);
  return a1;
}

ValueMetadata *type metadata accessor for TryOutEndedView()
{
  return &type metadata for TryOutEndedView;
}

unint64_t sub_1000E2DA4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031F188;
  if (!qword_10031F188)
  {
    v1 = sub_100007FAC(&qword_10031F0B8);
    sub_1000E2E08();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10031F188);
  }
  return result;
}

unint64_t sub_1000E2E08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031F190;
  if (!qword_10031F190)
  {
    v1 = sub_100007FAC(&qword_10031F0C0);
    sub_1000E1E24();
    sub_1000E1EEC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031F190);
  }
  return result;
}

uint64_t sub_1000E2E74(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029A11C, 1);
}

uint64_t sub_1000E2E84@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t OpaqueTypeConformance2;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  _QWORD v36[5];

  v30 = a1;
  v2 = *(_QWORD **)(v1 + 48);
  if (v2)
  {
    v3 = v2[9];
    v4 = v2[10];
    sub_100007BBC(v2 + 6, v3);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 32))(v36, v3, v4);
    v5 = (uint64_t *)(v1 + *(int *)(type metadata accessor for SOSConnectionEndedView(0) + 36));
    v7 = *v5;
    v6 = v5[1];
    v34 = v7;
    *(_QWORD *)&v35 = v6;
    v8 = sub_100003DB8(&qword_10031F198);
    v9 = State.projectedValue.getter(&v31, v8);
    v29 = &v27;
    v34 = v31;
    v35 = v32;
    __chkstk_darwin(v9, v10);
    v26[2] = v36;
    v26[3] = v1;
    v28 = sub_100003DB8(&qword_100317980);
    v11 = sub_100003DB8(&qword_10031F1D8);
    v12 = sub_1000084FC(&qword_10031F1A8, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
    v13 = sub_1000084FC(&qword_100319618, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
    v14 = sub_1000084FC(&qword_10031F1B0, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
    v15 = sub_100007FAC(&qword_10031F1E0);
    v16 = sub_100007FAC(&qword_10031F1E8);
    v17 = sub_100007FAC(&qword_10031F1F0);
    v18 = sub_1000084FC(&qword_10031F1F8, &qword_10031F1F0, (uint64_t)&unk_1002525D0);
    v31 = v17;
    *(_QWORD *)&v32 = v18;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v31, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v20 = sub_1000084FC(&qword_10031F200, &qword_10031F1E8, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v31 = v15;
    *(_QWORD *)&v32 = v16;
    *((_QWORD *)&v32 + 1) = OpaqueTypeConformance2;
    v33 = v20;
    v21 = swift_getOpaqueTypeConformance2(&v31, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    NavigationStack.init<>(path:root:)(&v34, sub_1000E8C44, v26, v28, v11, v12, v13, v14, v21, &protocol witness table for String);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v36);
  }
  else
  {
    v23 = *(_QWORD *)(v1 + 56);
    v24 = type metadata accessor for UIMetrics();
    v25 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v23, v24, v25);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E3110@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t OpaqueTypeConformance2;
  uint64_t v41;
  uint64_t v42;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50[16];
  uint64_t v51;
  __int128 v52;
  double (*v53)@<D0>(uint64_t@<X8>);
  uint64_t v54;
  double (*v55)@<D0>(uint64_t@<X8>);
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  _QWORD v59[2];
  __int128 v60;
  uint64_t v61;

  v49 = a3;
  v46 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v45 = *(_QWORD *)(v46 - 8);
  __chkstk_darwin(v46, v5);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for SOSConnectionEndedView(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  v12 = __chkstk_darwin(v8, v11);
  v13 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v44 - v15;
  v47 = sub_100003DB8(&qword_10031F1E0);
  v48 = *(_QWORD *)(v47 - 8);
  __chkstk_darwin(v47, v17);
  v44 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007CBC(a1, (uint64_t)&v52);
  sub_1000E1F30(a2, (uint64_t)v16, type metadata accessor for SOSConnectionEndedView);
  v19 = *(unsigned __int8 *)(v9 + 80);
  v20 = (v19 + 56) & ~v19;
  v21 = swift_allocObject(&unk_1002EF720, v20 + v10, v19 | 7);
  sub_100007D04(&v52, v21 + 16);
  sub_1000E8D6C((uint64_t)v16, v21 + v20, type metadata accessor for SOSConnectionEndedView);
  sub_1000E1F30(a2, (uint64_t)v13, type metadata accessor for SOSConnectionEndedView);
  sub_100007CBC(a1, (uint64_t)&v60);
  v22 = (v19 + 16) & ~v19;
  v23 = (v10 + v22 + 7) & 0xFFFFFFFFFFFFFFF8;
  v24 = swift_allocObject(&unk_1002EF748, v23 + 40, v19 | 7);
  sub_1000E8D6C((uint64_t)v13, v24 + v22, type metadata accessor for SOSConnectionEndedView);
  sub_100007D04(&v60, v24 + v23);
  v25 = type metadata accessor for UIMetrics();
  v26 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v27 = EnvironmentObject.init()(v25, v26);
  v29 = v28;
  type metadata accessor for CGSize(0);
  v59[0] = 0;
  v59[1] = 0;
  State.init(wrappedValue:)(&v60, v59, v30);
  *(_QWORD *)&v52 = v27;
  *((_QWORD *)&v52 + 1) = v29;
  v53 = sub_1000E8DB0;
  v54 = v21;
  v55 = sub_1000E8F1C;
  v56 = v24;
  v57 = v60;
  v58 = v61;
  v31 = v45;
  v32 = v46;
  (*(void (**)(char *, _QWORD, uint64_t))(v45 + 104))(v7, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v46);
  v33 = sub_100003DB8(&qword_10031F1F0);
  v34 = sub_1000084FC(&qword_10031F1F8, &qword_10031F1F0, (uint64_t)&unk_1002525D0);
  v35 = v44;
  View.navigationBarTitleDisplayMode(_:)(v7, v33, v34);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v32);
  v36 = v52;
  v37 = v54;
  v38 = v58;
  swift_release(v56);
  swift_release(v37);
  swift_release(v36);
  swift_release(v38);
  v51 = a2;
  v39 = sub_100003DB8(&qword_10031F1E8);
  *(_QWORD *)&v52 = v33;
  *((_QWORD *)&v52 + 1) = v34;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v52, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v41 = sub_1000084FC(&qword_10031F200, &qword_10031F1E8, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  v42 = v47;
  View.toolbar<A>(content:)(sub_1000E8F6C, v50, v47, v39, OpaqueTypeConformance2, v41);
  return (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v35, v42);
}

__n128 sub_1000E34DC@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __n128 **v7;
  unint64_t v8;
  unint64_t v9;
  __n128 result;
  __n128 v11;
  _BYTE __src[1128];
  _BYTE v13[1144];
  char v14;

  v6 = static HorizontalAlignment.center.getter(a1);
  sub_1000E35B4(a1, a2, __src);
  v13[1136] = 0;
  memcpy(&v13[7], __src, 0x468uLL);
  v7 = (__n128 **)sub_100007BBC(a1, a1[3]);
  v11 = (*v7)[3];
  v8 = (*v7)[4].n128_u64[0];
  v9 = (*v7)[4].n128_u64[1];
  LOBYTE(a2) = static Edge.Set.all.getter((*v7)[3].n128_f64[0]);
  v14 = 0;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  memcpy((void *)(a3 + 17), v13, 0x46FuLL);
  *(_BYTE *)(a3 + 1152) = a2;
  result = v11;
  *(__n128 *)(a3 + 1160) = v11;
  *(_QWORD *)(a3 + 1176) = v8;
  *(_QWORD *)(a3 + 1184) = v9;
  *(_BYTE *)(a3 + 1192) = v14;
  return result;
}

uint64_t sub_1000E35B4@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSBundle v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  char v56;
  uint64_t v57;
  id v58;
  char v59;
  BOOL v60;
  uint64_t v61;
  id v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t (*v77)(void);
  uint64_t v78;
  __n128 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  id v103;
  uint64_t v104;
  char v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  BOOL v109;
  id v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  _QWORD *v126;
  double v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  __n128 v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  unint64_t v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  id v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  _BOOL4 v171;
  id v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  id v188;
  char v189;
  double v190;
  uint64_t v191;
  _QWORD *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  char v198;
  char v199;
  char v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD *v206;
  uint64_t v207;
  double v208;
  double v209;
  unsigned __int8 v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  _BOOL8 v226;
  __int128 v227;
  uint64_t v228;
  int v229;
  uint64_t v230;
  uint64_t KeyPath;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  void *v238;
  unint64_t v239;
  _QWORD *v240;
  uint64_t v241;
  int v242;
  int v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  _QWORD *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  __int128 v260;
  _BYTE v261[320];
  _QWORD v262[41];
  _OWORD v263[20];
  _BYTE v264[320];
  _OWORD v265[71];
  _BYTE v266[320];
  _OWORD v267[10];
  uint64_t v268;
  double v269;
  char v270;
  _BYTE v271[7];
  uint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  char v276;
  _BYTE v277[7];
  char v278;
  _BYTE v279[7];
  __int128 v280;
  __int128 v281;
  char v282;
  _BYTE v283[7];
  char v284;
  _BYTE v285[7];
  __int128 v286;
  __int128 v287;
  char v288;
  _BYTE v289[312];
  uint64_t v290;
  double v291;
  _BYTE v292[320];
  unsigned __int8 v293;
  unsigned __int8 v294;
  unsigned __int8 v295;
  _BYTE v296[7];
  _BYTE v297[7];
  _BYTE v298[7];
  _BYTE v299[7];
  _BYTE v300[7];
  __int128 v301;
  __int128 v302;
  __int128 v303;
  __int128 v304;
  __int128 v305;
  __int128 v306;
  __int128 v307;
  __int128 v308;
  __int128 v309;
  __int128 v310;
  _OWORD v311[10];
  _BYTE v312[320];
  __int128 v313;
  __int128 v314;
  __int128 v315;
  __int128 v316;
  __int128 v317;
  __int128 v318;
  __int128 v319;
  __int128 v320;
  __int128 v321;
  __int128 v322;
  __n128 v323;
  __int128 v324;
  BOOL v325;
  uint64_t v326;
  uint64_t v327;
  char v328;
  unint64_t v329;
  uint64_t v330;
  char v331;
  _QWORD *v332;
  uint64_t v333;
  char v334;
  uint64_t v335;
  uint64_t v336;
  BOOL v337;
  __int128 v338;
  __int128 v339;
  __int128 v340;
  __int128 v341;
  __int128 v342;
  __int128 v343;
  __int128 v344;
  __int128 v345;
  __int128 v346;
  __int128 v347;
  __n128 v348;
  __int128 v349;
  BOOL v350;
  unsigned __int8 v351;
  _BYTE v352[7];
  _BYTE v353[7];
  unsigned __int8 v354;
  _BYTE v355[7];
  _BYTE v356[7];
  unsigned __int8 v357;
  Swift::String v358;

  v238 = a3;
  v5 = (_QWORD *)type metadata accessor for Font.Leading(0);
  v6 = *(v5 - 1);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v222 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ConnectionClosedModel(0);
  v11 = sub_1000052EC(&qword_10031CB58, type metadata accessor for ConnectionClosedModel, (uint64_t)&unk_10024D2FC);
  v256 = EnvironmentObject.init()(v10, v11);
  v237 = v12;
  v13 = type metadata accessor for ConnectivityModel();
  v224 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
  v225 = v13;
  v258 = EnvironmentObject.init()(v13, v224);
  v236 = v14;
  v15 = type metadata accessor for GuidanceModel();
  v16 = sub_1000052EC(&qword_100316B08, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceModel, (uint64_t)&unk_10024D2FC);
  v257 = EnvironmentObject.init()(v15, v16);
  v235 = v17;
  v18 = type metadata accessor for OrientationModel();
  v19 = sub_1000052EC(&qword_10031CB60, (uint64_t (*)(uint64_t))type metadata accessor for OrientationModel, (uint64_t)&unk_10024D2FC);
  v255 = EnvironmentObject.init()(v18, v19);
  v234 = v20;
  v21 = type metadata accessor for StewieModel();
  v22 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
  v254 = EnvironmentObject.init()(v21, v22);
  v233 = v23;
  v24 = type metadata accessor for UIMetrics();
  v222 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v223 = v24;
  v253 = EnvironmentObject.init()(v24, v222);
  v232 = v25;
  v26.super.isa = (Class)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v358._countAndFlagsBits = 0xD00000000000003DLL;
  v358._object = (void *)0x8000000100269360;
  v27._object = (void *)0x8000000100269340;
  v27._countAndFlagsBits = 0xD000000000000010;
  v28._countAndFlagsBits = 0;
  v28._object = (void *)0xE000000000000000;
  v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, (Swift::String_optional)0, v26, v28, v358);

  v265[0] = v29;
  v239 = sub_10002B3F4();
  v252 = Text.init<A>(_:)(v265, &type metadata for String, v239, v30);
  v248 = v32;
  v249 = v31;
  LOBYTE(v26.super.isa) = v33;
  v34 = sub_100007BBC(a1, a1[3]);
  v35 = *v34;
  v36 = *(_QWORD **)(*v34 + 184);
  v246 = *(_QWORD *)(*v34 + 192);
  v247 = v36;
  v37 = *(_QWORD *)(v35 + 200);
  v244 = *(_QWORD *)(v35 + 208);
  v245 = v37;
  v39 = static Edge.Set.all.getter(v38);
  v242 = v39;
  v243 = static Edge.Set.bottom.getter(v39);
  v40 = a1[3];
  v240 = a1;
  v41 = sub_100007BBC(a1, v40);
  v42 = EdgeInsets.init(_all:)(*(double *)(*v41 + 40));
  v44 = v43;
  v46 = v45;
  v48 = v47;
  v357 = (uint64_t)v26.super.isa & 1;
  v354 = 0;
  v351 = 0;
  v50 = static Font.title3.getter(v49);
  v51 = Font.bold()(v50);
  swift_release(v50);
  (*(void (**)(char *, _QWORD, _QWORD *))(v6 + 104))(v9, enum case for Font.Leading.tight(_:), v5);
  v241 = Font.leading(_:)(v9, v51);
  swift_release(v51);
  (*(void (**)(char *, _QWORD *))(v6 + 8))(v9, v5);
  KeyPath = swift_getKeyPath(&unk_100255348);
  v259 = a2;
  v52 = *(_QWORD *)(a2 + 48);
  if (!v52)
    goto LABEL_36;
  LODWORD(v228) = v357;
  v229 = v354;
  LODWORD(v230) = v351;
  v53 = *(_QWORD *)(v52 + 72);
  v54 = *(_QWORD *)(v52 + 80);
  v251 = (_QWORD *)(v52 + 48);
  sub_100007BBC((_QWORD *)(v52 + 48), v53);
  *((_QWORD *)&v227 + 1) = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 64))(v53, v54);
  *(_QWORD *)&v227 = swift_getKeyPath(&unk_100255378);
  v55 = *(id *)(v52 + 112);
  v56 = static UIContentSizeCategory.>= infix(_:_:)(v55, UIContentSizeCategoryAccessibilityExtraLarge);

  v226 = (v56 & 1) == 0;
  v57 = swift_getKeyPath(&unk_1002553A8);
  v58 = *(id *)(v52 + 112);
  v59 = static UIContentSizeCategory.>= infix(_:_:)(v58, UIContentSizeCategoryAccessibilityExtraLarge);

  v60 = (v59 & 1) == 0;
  v61 = swift_getKeyPath(&unk_1002552E8);
  v250 = v52;
  v62 = *(id *)(v52 + 112);
  v63 = static Alignment.center.getter(v62);
  v65 = v64;
  *(_QWORD *)&v260 = UIContentSizeCategoryAccessibilityExtraLarge;
  v66 = static UIContentSizeCategory.>= infix(_:_:)(v62, UIContentSizeCategoryAccessibilityExtraLarge);
  if ((v66 & 1) != 0)
  {
    v67 = static Alignment.center.getter(v66);
    v69 = static Alignment.== infix(_:_:)(v63, v65, v67, v68);
    if ((v69 & 1) != 0)
    {
      v63 = static Alignment.leading.getter(v69, v70);
      v65 = v71;
    }
  }

  *(_DWORD *)((char *)&v314 + 1) = *(_DWORD *)v356;
  DWORD1(v314) = *(_DWORD *)&v356[3];
  *(_DWORD *)((char *)&v315 + 1) = *(_DWORD *)v355;
  DWORD1(v315) = *(_DWORD *)&v355[3];
  *(_DWORD *)((char *)&v317 + 9) = *(_DWORD *)v353;
  HIDWORD(v317) = *(_DWORD *)&v353[3];
  DWORD1(v318) = *(_DWORD *)&v352[3];
  *(_DWORD *)((char *)&v318 + 1) = *(_DWORD *)v352;
  v312[312] = v56 & 1;
  *(_QWORD *)&v313 = v252;
  *((_QWORD *)&v313 + 1) = v249;
  LOBYTE(v314) = v228;
  *((_QWORD *)&v314 + 1) = v248;
  LOBYTE(v315) = v242;
  *((_QWORD *)&v315 + 1) = v247;
  *(_QWORD *)&v316 = v246;
  *((_QWORD *)&v316 + 1) = v245;
  *(_QWORD *)&v317 = v244;
  BYTE8(v317) = v229;
  LOBYTE(v318) = v243;
  *((double *)&v318 + 1) = v42;
  *(_QWORD *)&v319 = v44;
  *((_QWORD *)&v319 + 1) = v46;
  *(_QWORD *)&v320 = v48;
  BYTE8(v320) = v230;
  *(_QWORD *)&v321 = KeyPath;
  *((_QWORD *)&v321 + 1) = v241;
  v322 = v227;
  v323.n128_u64[0] = v57;
  v323.n128_u64[1] = v226;
  LOBYTE(v324) = v56 & 1;
  *((_QWORD *)&v324 + 1) = v61;
  v325 = v60;
  v350 = v60;
  v340 = v315;
  v341 = v316;
  v338 = v313;
  v339 = v314;
  v346 = v321;
  v347 = v227;
  v344 = v319;
  v345 = v320;
  v342 = v317;
  v343 = v318;
  v348 = v323;
  v349 = v324;
  sub_100131B3C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v312, v323, 0.0, 1, 0.0, 1, v63, v65);
  sub_10004DA10((uint64_t)&v313);
  v72 = v250;
  v73 = *(id *)(v250 + 112);
  LODWORD(KeyPath) = static UIContentSizeCategory.>= infix(_:_:)(v73, v260);

  v252 = swift_getKeyPath(&unk_100255318);
  v74 = *(_QWORD *)(v72 + 80);
  v75 = v251;
  sub_100007BBC(v251, *(_QWORD *)(v72 + 72));
  v76 = type metadata accessor for SOSConnectionEndedView(0);
  v77 = *(uint64_t (**)(void))(v74 + 120);
  v241 = v259 + *(int *)(v76 + 32);
  *(_QWORD *)&v265[0] = v77();
  *((_QWORD *)&v265[0] + 1) = v78;
  v80 = Text.init<A>(_:)(v265, &type metadata for String, v239, v79);
  v82 = v81;
  v84 = v83;
  v86 = v85 & 1;
  v87 = *(_QWORD *)(v72 + 72);
  v88 = *(_QWORD *)(v72 + 80);
  sub_100007BBC(v75, v87);
  v89 = (*(uint64_t (**)(uint64_t, uint64_t))(v88 + 56))(v87, v88);
  v90 = Text.font(_:)(v89, v80, v82, v86, v84);
  v92 = v91;
  v247 = v93;
  v95 = v94 & 1;
  sub_10002B438(v80, v82, v86);
  swift_release(v89);
  swift_bridgeObjectRelease(v84);
  v96 = *(_QWORD *)(v72 + 72);
  v97 = *(_QWORD *)(v72 + 80);
  sub_100007BBC(v251, v96);
  v98 = (*(uint64_t (**)(uint64_t, uint64_t))(v97 + 64))(v96, v97);
  v5 = v247;
  v251 = (_QWORD *)Text.foregroundColor(_:)(v98, v90, v92, v95, v247);
  v249 = v99;
  LODWORD(v248) = v100;
  v102 = v101;
  sub_10002B438(v90, v92, v95);
  swift_release(v98);
  swift_bridgeObjectRelease(v5);
  v103 = *(id *)(v72 + 112);
  v104 = v260;
  v105 = static UIContentSizeCategory.>= infix(_:_:)(v103, v260);

  v106 = swift_getKeyPath(&unk_1002552E8);
  v107 = *(_QWORD *)(v259 + 48);
  if (!v107)
  {
LABEL_36:
    v130 = v259;
LABEL_37:
    v221 = *(_QWORD *)(v130 + 56);
    goto LABEL_38;
  }
  v108 = v106;
  v109 = (v105 & 1) == 0;
  v110 = *(id *)(v107 + 112);
  v111 = static Alignment.center.getter(v110);
  v113 = v112;
  v114 = static UIContentSizeCategory.>= infix(_:_:)(v110, v104);
  if ((v114 & 1) != 0)
  {
    v115 = static Alignment.center.getter(v114);
    v117 = static Alignment.== infix(_:_:)(v111, v113, v115, v116);
    v119 = v251;
    if ((v117 & 1) != 0)
    {
      v111 = static Alignment.leading.getter(v117, v118);
      v113 = v120;
    }

  }
  else
  {

    v119 = v251;
  }
  v332 = v119;
  v121 = v249;
  v333 = v249;
  v122 = v248 & 1;
  v334 = v248 & 1;
  v335 = v102;
  v336 = v108;
  v337 = v109;
  sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v311, 0.0, 1, 0.0, 1, v111, v113);
  sub_10002B438((uint64_t)v119, v121, v122);
  swift_release(v108);
  swift_bridgeObjectRelease(v102);
  v307 = v311[6];
  v308 = v311[7];
  v309 = v311[8];
  v310 = v311[9];
  v303 = v311[2];
  v304 = v311[3];
  v305 = v311[4];
  v306 = v311[5];
  v301 = v311[0];
  v302 = v311[1];
  v5 = *(id *)(v107 + 112);
  LODWORD(v102) = static UIContentSizeCategory.>= infix(_:_:)(v5, v260);

  v250 = swift_getKeyPath(&unk_100255318);
  v123 = sub_100007BBC(v240, v240[3]);
  v124 = *v123;
  v125 = *(_QWORD *)(*v123 + 184);
  v248 = *(_QWORD *)(*v123 + 192);
  v249 = v125;
  v126 = *(_QWORD **)(v124 + 200);
  v246 = *(_QWORD *)(v124 + 208);
  v247 = v126;
  v128 = static Edge.Set.all.getter(v127);
  v242 = v128;
  v293 = 0;
  v129 = static Edge.Set.top.getter(v128);
  LODWORD(v245) = v129;
  v243 = v293;
  v294 = 1;
  LODWORD(v251) = static Edge.Set.bottom.getter(v129);
  LODWORD(v244) = v294;
  v295 = 1;
  v130 = v259;
  v131 = *(_QWORD **)(v259 + 48);
  if (!v131)
    goto LABEL_37;
  v132 = v131[9];
  v133 = v131[10];
  sub_100007BBC(v131 + 6, v132);
  v134 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v133 + 128))(v241, v132, v133);
  v137 = HIBYTE(v135) & 0xF;
  if ((v135 & 0x2000000000000000) == 0)
    v137 = v134 & 0xFFFFFFFFFFFFLL;
  if (v137)
  {
    LODWORD(v230) = v102;
    *(_QWORD *)&v265[0] = v134;
    *((_QWORD *)&v265[0] + 1) = v135;
    v138 = Text.init<A>(_:)(v265, &type metadata for String, v239, v136);
    v140 = v139;
    v142 = v141;
    v144 = v143 & 1;
    v145 = v131[9];
    v146 = v131[10];
    sub_100007BBC(v131 + 6, v145);
    v147 = (*(uint64_t (**)(uint64_t, uint64_t))(v146 + 48))(v145, v146);
    *((_QWORD *)&v227 + 1) = Text.font(_:)(v147, v138, v140, v144, v142);
    v228 = v148;
    v150 = v149;
    v152 = v151 & 1;
    sub_10002B438(v138, v140, v144);
    swift_release(v147);
    swift_bridgeObjectRelease(v142);
    v153 = v131[9];
    v154 = v131[10];
    sub_100007BBC(v131 + 6, v153);
    v155 = (*(uint64_t (**)(uint64_t, uint64_t))(v154 + 64))(v153, v154);
    v156 = *((_QWORD *)&v227 + 1);
    v157 = v228;
    v158 = Text.foregroundColor(_:)(v155, *((_QWORD *)&v227 + 1), v150, v152, v228);
    v160 = v159;
    v229 = v161;
    v239 = v162;
    v163 = v156;
    v5 = (_QWORD *)v259;
    sub_10002B438(v163, v150, v152);
    swift_release(v155);
    swift_bridgeObjectRelease(v157);
    v164 = (void *)v131[14];
    v165 = v260;
    v166 = v164;
    v167 = static UIContentSizeCategory.>= infix(_:_:)(v166, v165);

    v168 = swift_getKeyPath(&unk_1002552E8);
    v169 = v5[6];
    if (!v169)
    {
      while (1)
      {
        v221 = v5[7];
LABEL_38:
        EnvironmentObject.error()(0, v221, v223, v222);
        __break(1u);
      }
    }
    v170 = v168;
    v171 = (v167 & 1) == 0;
    v172 = *(id *)(v169 + 112);
    v173 = static Alignment.center.getter(v172);
    v175 = v174;
    v176 = static UIContentSizeCategory.>= infix(_:_:)(v172, v165);
    LODWORD(v259) = v171;
    if ((v176 & 1) != 0)
    {
      v177 = static Alignment.center.getter(v176);
      v179 = static Alignment.== infix(_:_:)(v173, v175, v177, v178);
      v181 = v229;
      v182 = v170;
      if ((v179 & 1) != 0)
      {
        v173 = static Alignment.leading.getter(v179, v180);
        v175 = v183;
      }

    }
    else
    {
      v182 = v170;

      v181 = v229;
    }
    v326 = v158;
    v327 = v160;
    v184 = v181 & 1;
    v328 = v181 & 1;
    v185 = v160;
    v186 = v158;
    v187 = v239;
    v329 = v239;
    v330 = v182;
    v331 = v259;
    sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v289, 0.0, 1, 0.0, 1, v173, v175);
    sub_10002B438(v186, v185, v184);
    swift_release(v182);
    swift_bridgeObjectRelease(v187);
    v188 = *(id *)(v169 + 112);
    v189 = static UIContentSizeCategory.>= infix(_:_:)(v188, v260);

    if ((v189 & 1) != 0)
      v190 = 1.0;
    else
      v190 = 0.5;
    v191 = swift_getKeyPath(&unk_100255318);
    v192 = sub_100007BBC(v240, v240[3]);
    v193 = *v192;
    v260 = *(_OWORD *)(*v192 + 184);
    v194 = *(_QWORD *)(v193 + 200);
    v102 = *(_QWORD *)(v193 + 208);
    v195 = static Edge.Set.all.getter(*(double *)&v260);
    v196 = v195;
    v266[0] = 0;
    v197 = static Edge.Set.top.getter(v195);
    v198 = v197;
    v199 = v266[0];
    LOBYTE(v267[0]) = 1;
    v200 = static Edge.Set.bottom.getter(v197);
    LOBYTE(v262[0]) = 1;
    v265[6] = *(_OWORD *)&v289[96];
    v265[7] = *(_OWORD *)&v289[112];
    v265[8] = *(_OWORD *)&v289[128];
    v265[9] = *(_OWORD *)&v289[144];
    v265[2] = *(_OWORD *)&v289[32];
    v265[3] = *(_OWORD *)&v289[48];
    v265[4] = *(_OWORD *)&v289[64];
    v265[5] = *(_OWORD *)&v289[80];
    v265[0] = *(_OWORD *)v289;
    v265[1] = *(_OWORD *)&v289[16];
    *(_QWORD *)&v265[10] = v191;
    *((double *)&v265[10] + 1) = v190;
    LOBYTE(v265[11]) = v196;
    *(_OWORD *)((char *)&v265[11] + 8) = v260;
    *((_QWORD *)&v265[12] + 1) = v194;
    *(_QWORD *)&v265[13] = v102;
    BYTE8(v265[13]) = v199;
    LOBYTE(v265[14]) = v198;
    *(_OWORD *)((char *)&v265[14] + 8) = 0u;
    *(_OWORD *)((char *)&v265[15] + 8) = 0u;
    BYTE8(v265[16]) = v267[0];
    LOBYTE(v265[17]) = v200;
    *(_OWORD *)((char *)&v265[17] + 8) = 0u;
    *(_OWORD *)((char *)&v265[18] + 8) = 0u;
    BYTE8(v265[19]) = 1;
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(v265);
    sub_10000B458((uint64_t)v265, (uint64_t)v292, &qword_10031F2A8);
    LOBYTE(v102) = v230;
  }
  else
  {
    swift_bridgeObjectRelease(v135);
    sub_1000E9690(v265);
    sub_10000B458((uint64_t)v265, (uint64_t)v292, &qword_10031F2A8);
  }
  v201 = type metadata accessor for ConnectionClosed(0);
  if (sub_100067058(4u, *(_QWORD *)(v241 + *(int *)(v201 + 24))))
  {
    v202 = type metadata accessor for ConnectionModel(0);
    v203 = sub_1000052EC(&qword_100316B10, type metadata accessor for ConnectionModel, (uint64_t)&unk_10024D2FC);
    v259 = EnvironmentObject.init()(v202, v203);
    *(_QWORD *)&v260 = v204;
    v205 = EnvironmentObject.init()(v225, v224);
    v240 = v206;
    v241 = v205;
    v239 = EnvironmentObject.init()(v223, v222);
    v230 = v207;
  }
  else
  {
    v240 = 0;
    v241 = 0;
    v239 = 0;
    v230 = 0;
    v259 = 1;
    *(_QWORD *)&v260 = 0;
  }
  if ((v102 & 1) != 0)
    v208 = 1.0;
  else
    v208 = 0.5;
  if ((KeyPath & 1) != 0)
    v209 = 1.0;
  else
    v209 = 0.5;
  v210 = v295;
  LODWORD(KeyPath) = v295;
  sub_10000B458((uint64_t)v292, (uint64_t)v261, &qword_10031F2A8);
  memcpy(v262, v312, 0x138uLL);
  v262[39] = v252;
  *(double *)&v262[40] = v209;
  v263[6] = v307;
  v263[7] = v308;
  v263[8] = v309;
  v263[9] = v310;
  v263[2] = v303;
  v263[3] = v304;
  v263[4] = v305;
  v263[5] = v306;
  v263[0] = v301;
  v263[1] = v302;
  *(_QWORD *)&v263[10] = v250;
  *((double *)&v263[10] + 1) = v208;
  LOBYTE(v263[11]) = v242;
  *(_DWORD *)((char *)&v263[11] + 1) = *(_DWORD *)v300;
  DWORD1(v263[11]) = *(_DWORD *)&v300[3];
  *((_QWORD *)&v263[11] + 1) = v249;
  *(_QWORD *)&v263[12] = v248;
  *((_QWORD *)&v263[12] + 1) = v247;
  *(_QWORD *)&v263[13] = v246;
  BYTE8(v263[13]) = v243;
  *(_DWORD *)((char *)&v263[13] + 9) = *(_DWORD *)v299;
  HIDWORD(v263[13]) = *(_DWORD *)&v299[3];
  LOBYTE(v263[14]) = v245;
  DWORD1(v263[14]) = *(_DWORD *)&v298[3];
  *(_DWORD *)((char *)&v263[14] + 1) = *(_DWORD *)v298;
  *(_OWORD *)((char *)&v263[14] + 8) = 0u;
  *(_OWORD *)((char *)&v263[15] + 8) = 0u;
  BYTE8(v263[16]) = v244;
  *(_DWORD *)((char *)&v263[16] + 9) = *(_DWORD *)v297;
  HIDWORD(v263[16]) = *(_DWORD *)&v297[3];
  LOBYTE(v263[17]) = (_BYTE)v251;
  *(_DWORD *)((char *)&v263[17] + 1) = *(_DWORD *)v296;
  DWORD1(v263[17]) = *(_DWORD *)&v296[3];
  *(_OWORD *)((char *)&v263[17] + 8) = 0u;
  *(_OWORD *)((char *)&v263[18] + 8) = 0u;
  BYTE8(v263[19]) = v210;
  sub_10000B458((uint64_t)v261, (uint64_t)v264, &qword_10031F2A8);
  v211 = v256;
  *(_QWORD *)&v265[0] = v256;
  *((_QWORD *)&v265[0] + 1) = v237;
  *(_QWORD *)&v265[1] = v258;
  *((_QWORD *)&v265[1] + 1) = v236;
  *(_QWORD *)&v265[2] = v257;
  *((_QWORD *)&v265[2] + 1) = v235;
  *(_QWORD *)&v265[3] = v255;
  *((_QWORD *)&v265[3] + 1) = v234;
  v212 = v253;
  *(_QWORD *)&v265[4] = v254;
  *((_QWORD *)&v265[4] + 1) = v233;
  *(_QWORD *)&v265[5] = v253;
  *((_QWORD *)&v265[5] + 1) = v232;
  LOBYTE(v265[6]) = 0;
  *((_QWORD *)&v265[6] + 1) = 0;
  memcpy(&v265[7], v262, 0x148uLL);
  memcpy((char *)&v265[27] + 8, v263, 0x139uLL);
  sub_10000B458((uint64_t)v264, (uint64_t)&v265[47] + 8, &qword_10031F2A8);
  v214 = v259;
  v213 = v260;
  *((_QWORD *)&v265[67] + 1) = v259;
  *(_QWORD *)&v265[68] = v260;
  v215 = v240;
  v216 = v241;
  *((_QWORD *)&v265[68] + 1) = v241;
  *(_QWORD *)&v265[69] = v240;
  v217 = v239;
  *((_QWORD *)&v265[69] + 1) = v239;
  *(_QWORD *)&v265[70] = v230;
  memcpy(v238, v265, 0x468uLL);
  swift_retain(v212);
  swift_retain(v211);
  swift_retain(v258);
  swift_retain(v257);
  v218 = v255;
  swift_retain(v255);
  v219 = v254;
  swift_retain(v254);
  sub_1000E94D8((uint64_t)v262);
  sub_10003893C((uint64_t)v263);
  sub_1000E95FC((uint64_t)v264, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10002B700);
  sub_1000E9580(v214, v213, v216, (uint64_t)v215, v217);
  sub_1000E95C0(v214, v213, v216, (uint64_t)v215, v217);
  sub_10000B458((uint64_t)v261, (uint64_t)v266, &qword_10031F2A8);
  sub_1000E95FC((uint64_t)v266, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10002B984);
  v267[6] = v307;
  v267[7] = v308;
  v267[8] = v309;
  v267[9] = v310;
  v267[2] = v303;
  v267[3] = v304;
  v267[4] = v305;
  v267[5] = v306;
  v267[0] = v301;
  v267[1] = v302;
  v268 = v250;
  v269 = v208;
  v270 = v242;
  *(_DWORD *)v271 = *(_DWORD *)v300;
  *(_DWORD *)&v271[3] = *(_DWORD *)&v300[3];
  v272 = v249;
  v273 = v248;
  v274 = v247;
  v275 = v246;
  v276 = v243;
  *(_DWORD *)v277 = *(_DWORD *)v299;
  *(_DWORD *)&v277[3] = *(_DWORD *)&v299[3];
  v278 = v245;
  *(_DWORD *)&v279[3] = *(_DWORD *)&v298[3];
  *(_DWORD *)v279 = *(_DWORD *)v298;
  v280 = 0u;
  v281 = 0u;
  v282 = v244;
  *(_DWORD *)v283 = *(_DWORD *)v297;
  *(_DWORD *)&v283[3] = *(_DWORD *)&v297[3];
  v284 = (char)v251;
  *(_DWORD *)v285 = *(_DWORD *)v296;
  *(_DWORD *)&v285[3] = *(_DWORD *)&v296[3];
  v286 = 0u;
  v287 = 0u;
  v288 = KeyPath;
  sub_100038994((uint64_t)v267);
  memcpy(v289, v312, sizeof(v289));
  v290 = v252;
  v291 = v209;
  sub_10004E118((uint64_t)v289);
  swift_release(v253);
  swift_release(v219);
  swift_release(v218);
  swift_release(v257);
  swift_release(v258);
  return swift_release(v256);
}

double sub_1000E4990@<D0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double result;
  __int128 v11;
  char v12;
  __int128 v13;
  _OWORD v14[7];
  _BYTE v15[19];

  v6 = static HorizontalAlignment.center.getter(a1);
  sub_1000E4A60(a1, a2, (uint64_t)&v13);
  sub_10000B458((uint64_t)&v13, (uint64_t)&v12, &qword_10031F238);
  v13 = (unint64_t)v6;
  LOBYTE(v14[0]) = 0;
  sub_10000B458((uint64_t)&v12, (uint64_t)v14 + 8, &qword_10031F238);
  v7 = v14[6];
  *(_OWORD *)(a3 + 96) = v14[5];
  *(_OWORD *)(a3 + 112) = v7;
  *(_OWORD *)(a3 + 128) = *(_OWORD *)v15;
  *(_DWORD *)(a3 + 143) = *(_DWORD *)&v15[15];
  v8 = v14[2];
  *(_OWORD *)(a3 + 32) = v14[1];
  *(_OWORD *)(a3 + 48) = v8;
  v9 = v14[4];
  *(_OWORD *)(a3 + 64) = v14[3];
  *(_OWORD *)(a3 + 80) = v9;
  result = *(double *)&v13;
  v11 = v14[0];
  *(_OWORD *)a3 = v13;
  *(_OWORD *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_1000E4A60@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t result;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _OWORD v87[2];
  char v88;
  _BYTE v89[7];
  _BYTE v90[7];
  char v91;
  _BYTE v92[7];
  uint64_t v93;
  uint64_t v94;
  uint64_t (*v95)();
  uint64_t v96;
  char v97;
  _BYTE v98[7];
  __int128 v99;
  __int128 v100;
  char v101;
  _BYTE v102[7];
  char v103;
  _BYTE v104[7];
  __int128 v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  __int128 v109;
  __int128 v110;
  _OWORD v111[3];
  _OWORD v112[3];
  _OWORD v113[4];
  __int128 v114;
  __int128 v115;
  _OWORD v116[2];
  _OWORD v117[4];
  __int128 v118;
  __int128 v119;
  _OWORD v120[3];

  v80 = a3;
  v5 = type metadata accessor for SOSConnectionEndedView(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  v9 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1 + *(int *)(__chkstk_darwin(v5, v8) + 32);
  v11 = *(_QWORD *)(v10 + *(int *)(type metadata accessor for ConnectionClosed(0) + 24));
  if (sub_100067058(0, v11))
  {
    sub_1000E1F30(a1, (uint64_t)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SOSConnectionEndedView);
    v12 = *(unsigned __int8 *)(v6 + 80);
    v13 = (v12 + 16) & ~v12;
    v14 = swift_allocObject(&unk_1002EF798, v13 + v7, v12 | 7);
    sub_1000E8D6C((uint64_t)v9, v14 + v13, type metadata accessor for SOSConnectionEndedView);
    v15 = type metadata accessor for UIMetrics();
    v16 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v17 = EnvironmentObject.init()(v15, v16);
    v19 = v18;
    v20 = static Edge.Set.top.getter(v17);
    v21 = sub_100007BBC(a2, a2[3]);
    v22 = *v21;
    v79 = *(_OWORD *)(*v21 + 48);
    v23 = *(_QWORD *)(v22 + 64);
    v24 = *(_QWORD *)(v22 + 72);
    v25 = static Edge.Set.all.getter(*(double *)&v79);
    v91 = 1;
    v88 = 0;
    v93 = v17;
    v94 = v19;
    v95 = sub_1000E9394;
    v96 = v14;
    v97 = v20;
    *(_DWORD *)v98 = *(_DWORD *)v92;
    *(_DWORD *)&v98[3] = *(_DWORD *)&v92[3];
    v99 = 0u;
    v100 = 0u;
    v101 = 1;
    *(_DWORD *)&v102[3] = *(_DWORD *)&v90[3];
    *(_DWORD *)v102 = *(_DWORD *)v90;
    v103 = v25;
    *(_DWORD *)&v104[3] = *(_DWORD *)&v89[3];
    *(_DWORD *)v104 = *(_DWORD *)v89;
    v105 = v79;
    v106 = v23;
    v107 = v24;
    v108 = 0;
    sub_1000E93C0((uint64_t)&v93);
    sub_10000B458((uint64_t)&v93, (uint64_t)v117, &qword_10031F2A0);
    swift_retain(v17);
    swift_retain(v14);
    v26 = sub_100003DB8(&qword_10031F268);
    v27 = sub_10002B614(&qword_10031F260, &qword_10031F268, (void (*)(void))sub_1000E9078);
    _ConditionalContent<>.init(storage:)(v117, v26, v26, v27, v27);
    v111[2] = v85;
    v112[0] = v86;
    v112[1] = v87[0];
    *(_OWORD *)((char *)&v112[1] + 10) = *(_OWORD *)((char *)v87 + 10);
    v109 = v81;
    v110 = v82;
    v111[0] = v83;
    v111[1] = v84;
    sub_1000E9274((uint64_t)&v109);
    sub_10000B458((uint64_t)&v109, (uint64_t)v113, &qword_10031F240);
    v28 = sub_100003DB8(&qword_10031F248);
    v29 = sub_100003DB8(&qword_10031F250);
    v30 = sub_1000E8FF4();
    v31 = sub_10002B614(&qword_10031F280, &qword_10031F250, (void (*)(void))sub_1000E909C);
    _ConditionalContent<>.init(storage:)(v113, v28, v29, v30, v31);
    swift_release(v14);
    swift_release(v17);
    v114 = v118;
    v115 = v119;
    v32 = v120[0];
LABEL_11:
    v116[0] = v32;
    *(_OWORD *)((char *)v116 + 11) = *(_OWORD *)((char *)v120 + 11);
    v113[0] = v117[0];
    v113[1] = v117[1];
    v113[2] = v117[2];
    v113[3] = v117[3];
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(v113);
    goto LABEL_12;
  }
  if (!sub_100067058(1u, v11))
    goto LABEL_6;
  v33 = *(_QWORD *)(a1 + 32);
  if (v33)
  {
    if ((*(_BYTE *)(v33 + 184) & 1) == 0)
    {
      v54 = *(_QWORD *)(v33 + 176);
      sub_1000E1F30(a1, (uint64_t)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SOSConnectionEndedView);
      v55 = *(unsigned __int8 *)(v6 + 80);
      v56 = (v55 + 16) & ~v55;
      v57 = (v7 + v56 + 7) & 0xFFFFFFFFFFFFFFF8;
      v58 = swift_allocObject(&unk_1002EF770, v57 + 8, v55 | 7);
      sub_1000E8D6C((uint64_t)v9, v58 + v56, type metadata accessor for SOSConnectionEndedView);
      *(_QWORD *)(v58 + v57) = v54;
      v59 = type metadata accessor for UIMetrics();
      v60 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
      v61 = EnvironmentObject.init()(v59, v60);
      v63 = v62;
      LOBYTE(v54) = static Edge.Set.top.getter(v61);
      v64 = sub_100007BBC(a2, a2[3]);
      v65 = *v64;
      v79 = *(_OWORD *)(*v64 + 48);
      v66 = *(_QWORD *)(v65 + 64);
      v67 = *(_QWORD *)(v65 + 72);
      v68 = static Edge.Set.all.getter(*(double *)&v79);
      v91 = 1;
      v88 = 0;
      v93 = v61;
      v94 = v63;
      v95 = sub_1000E9228;
      v96 = v58;
      v97 = v54;
      *(_DWORD *)v98 = *(_DWORD *)v92;
      *(_DWORD *)&v98[3] = *(_DWORD *)&v92[3];
      v99 = 0u;
      v100 = 0u;
      v101 = 1;
      *(_DWORD *)&v102[3] = *(_DWORD *)&v90[3];
      *(_DWORD *)v102 = *(_DWORD *)v90;
      v103 = v68;
      *(_DWORD *)&v104[3] = *(_DWORD *)&v89[3];
      *(_DWORD *)v104 = *(_DWORD *)v89;
      v105 = v79;
      v106 = v66;
      v107 = v67;
      v108 = 0;
      sub_1000E9268((uint64_t)&v93);
      sub_10000B458((uint64_t)&v93, (uint64_t)v117, &qword_10031F2A0);
      swift_retain(v61);
      swift_retain(v58);
      v69 = sub_100003DB8(&qword_10031F268);
      v70 = sub_10002B614(&qword_10031F260, &qword_10031F268, (void (*)(void))sub_1000E9078);
      _ConditionalContent<>.init(storage:)(v117, v69, v69, v70, v70);
      v111[2] = v85;
      v112[0] = v86;
      v112[1] = v87[0];
      *(_OWORD *)((char *)&v112[1] + 10) = *(_OWORD *)((char *)v87 + 10);
      v109 = v81;
      v110 = v82;
      v111[0] = v83;
      v111[1] = v84;
      sub_1000E9274((uint64_t)&v109);
      sub_10000B458((uint64_t)&v109, (uint64_t)v113, &qword_10031F240);
      v71 = sub_100003DB8(&qword_10031F248);
      v72 = sub_100003DB8(&qword_10031F250);
      v73 = sub_1000E8FF4();
      v74 = sub_10002B614(&qword_10031F280, &qword_10031F250, (void (*)(void))sub_1000E909C);
      _ConditionalContent<>.init(storage:)(v113, v71, v72, v73, v74);
      swift_release(v58);
      swift_release(v61);
LABEL_10:
      v114 = v118;
      v115 = v119;
      v32 = v120[0];
      goto LABEL_11;
    }
LABEL_6:
    if (!sub_100067058(4u, v11))
    {
      sub_1000E8FC0((uint64_t)v113);
LABEL_12:
      sub_10000B458((uint64_t)v113, (uint64_t)v117, &qword_10031F238);
      return sub_10000B458((uint64_t)v117, v80, &qword_10031F238);
    }
    v34 = type metadata accessor for AppEvents();
    v35 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    v36 = EnvironmentObject.init()(v34, v35);
    v38 = v37;
    v39 = type metadata accessor for UIMetrics();
    v40 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v41 = EnvironmentObject.init()(v39, v40);
    v43 = v42;
    v44 = static Edge.Set.top.getter(v41);
    v45 = sub_100007BBC(a2, a2[3]);
    v46 = *v45;
    v79 = *(_OWORD *)(*v45 + 48);
    v47 = *(_QWORD *)(v46 + 64);
    v48 = *(_QWORD *)(v46 + 72);
    v49 = static Edge.Set.all.getter(*(double *)&v79);
    LOBYTE(v93) = 1;
    LOBYTE(v81) = 0;
    *(_QWORD *)&v109 = v36;
    *((_QWORD *)&v109 + 1) = v38;
    *(_QWORD *)&v110 = v41;
    *((_QWORD *)&v110 + 1) = v43;
    LOBYTE(v111[0]) = v44;
    *(_OWORD *)((char *)v111 + 8) = 0u;
    *(_OWORD *)((char *)&v111[1] + 8) = 0u;
    BYTE8(v111[2]) = 1;
    LOBYTE(v112[0]) = v49;
    *(_OWORD *)((char *)v112 + 8) = v79;
    *((_QWORD *)&v112[1] + 1) = v47;
    *(_QWORD *)&v112[2] = v48;
    BYTE8(v112[2]) = 0;
    sub_1000E8FE8((uint64_t)&v109);
    sub_10000B458((uint64_t)&v109, (uint64_t)v113, &qword_10031F240);
    v50 = sub_100003DB8(&qword_10031F248);
    v51 = sub_100003DB8(&qword_10031F250);
    v52 = sub_1000E8FF4();
    v53 = sub_10002B614(&qword_10031F280, &qword_10031F250, (void (*)(void))sub_1000E909C);
    _ConditionalContent<>.init(storage:)(v113, v50, v51, v52, v53);
    goto LABEL_10;
  }
  v76 = *(_QWORD *)(a1 + 40);
  v77 = type metadata accessor for RoadsideAssistanceModel();
  v78 = sub_1000052EC(&qword_100318688, (uint64_t (*)(uint64_t))type metadata accessor for RoadsideAssistanceModel, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v76, v77, v78);
  __break(1u);
  return result;
}

uint64_t sub_1000E5254@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t OpaqueTypeConformance2;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58[16];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v57 = a2;
  v56 = sub_100003DB8(&qword_10031F208);
  __chkstk_darwin(v56, v3);
  v5 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8(&qword_10031F210);
  v54 = *(_QWORD *)(v6 - 8);
  v55 = v6;
  __chkstk_darwin(v6, v7);
  v53 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_10031F218);
  v11 = __chkstk_darwin(v9, v10);
  v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v52 - v15;
  v17 = type metadata accessor for ToolbarItemPlacement(0);
  v19 = __chkstk_darwin(v17, v18);
  v21 = (char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v22);
  v24 = (char *)&v52 - v23;
  v25 = sub_100003DB8(&qword_100319208);
  v26 = *(_QWORD *)(v25 - 8);
  v28 = __chkstk_darwin(v25, v27);
  v30 = (char *)&v52 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v28, v31);
  v34 = (char *)&v52 - v33;
  static ToolbarItemPlacement.principal.getter(v32);
  v59 = a1;
  ToolbarItem<>.init(placement:content:)(v24, sub_1000E8F74, v58, &type metadata for Text, &protocol witness table for Text);
  v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v26 + 32))(v34, v30, v25);
  v36 = *(_QWORD *)(a1 + 16);
  if (v36)
  {
    if ((*(_BYTE *)(v36 + 40) & 1) != 0)
    {
      static ToolbarItemPlacement.navigationBarTrailing.getter(v35);
      v37 = sub_1000E8F7C();
      v38 = v53;
      ToolbarItem<>.init(placement:content:)(v21, sub_1000E57EC, 0, &type metadata for DismissEndSessionScreenButtonView, v37);
      v39 = sub_1000084FC(&qword_10031F228, &qword_10031F210, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
      v40 = v55;
      static ToolbarContentBuilder.buildBlock<A>(_:)(v38, v55, v39);
      v41 = sub_100003DB8(&qword_10031F220);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v13, 0, 1, v41);
      v60 = v40;
      v61 = v39;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v60, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
      static ToolbarContentBuilder.buildIf<A>(_:)(v13, v41, OpaqueTypeConformance2);
      sub_100007FF0((uint64_t)v13, &qword_10031F218);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v38, v40);
    }
    else
    {
      v43 = sub_100003DB8(&qword_10031F220);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v13, 1, 1, v43);
      v44 = sub_1000084FC(&qword_10031F228, &qword_10031F210, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
      v60 = v55;
      v61 = v44;
      v45 = swift_getOpaqueTypeConformance2(&v60, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
      static ToolbarContentBuilder.buildIf<A>(_:)(v13, v43, v45);
      sub_100007FF0((uint64_t)v13, &qword_10031F218);
    }
    v46 = v56;
    v47 = (uint64_t)&v5[*(int *)(v56 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v5, v34, v25);
    sub_10000B234((uint64_t)v16, v47, &qword_10031F218);
    TupleToolbarContent.init(_:)(v5, v46);
    sub_100007FF0((uint64_t)v16, &qword_10031F218);
    return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v34, v25);
  }
  else
  {
    v49 = *(_QWORD *)(a1 + 24);
    v50 = type metadata accessor for AppRuntimeStateModel();
    v51 = sub_1000052EC(&qword_100318498, (uint64_t (*)(uint64_t))type metadata accessor for AppRuntimeStateModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v49, v50, v51);
    __break(1u);
  }
  return result;
}

void sub_1000E5688(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[2];

  v4 = *(_QWORD **)(a1 + 48);
  if (v4)
  {
    v5 = v4[9];
    v6 = v4[10];
    sub_100007BBC(v4 + 6, v5);
    v7 = a1 + *(int *)(type metadata accessor for SOSConnectionEndedView(0) + 32);
    v8 = type metadata accessor for ConnectionClosed(0);
    v30[0] = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v6 + 152))(*(_QWORD *)(v7 + *(int *)(v8 + 24)), v5, v6);
    v30[1] = v9;
    v10 = sub_10002B3F4();
    v12 = Text.init<A>(_:)(v30, &type metadata for String, v10, v11);
    v14 = v13;
    v16 = v15;
    v18 = v17 & 1;
    v19 = static Font.headline.getter(v12);
    v20 = Text.font(_:)(v19, v12, v14, v18, v16);
    v22 = v21;
    v24 = v23;
    v26 = v25;
    swift_release(v19);
    sub_10002B438(v12, v14, v18);
    swift_bridgeObjectRelease(v16);
    *(_QWORD *)a2 = v20;
    *(_QWORD *)(a2 + 8) = v22;
    *(_BYTE *)(a2 + 16) = v24 & 1;
    *(_QWORD *)(a2 + 24) = v26;
  }
  else
  {
    v27 = *(_QWORD *)(a1 + 56);
    v28 = type metadata accessor for UIMetrics();
    v29 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, v27, v28, v29);
    __break(1u);
  }
}

uint64_t sub_1000E57F4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t OpaqueTypeConformance2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[6];
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  _BYTE v35[24];
  _QWORD v36[5];
  _QWORD v37[6];

  v31 = a1;
  v2 = *(_QWORD **)(v1 + 16);
  if (v2)
  {
    v3 = v2[9];
    v4 = v2[10];
    sub_100007BBC(v2 + 6, v3);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 32))(v37, v3, v4);
    v5 = v2[9];
    v6 = v2[10];
    sub_100007BBC(v2 + 6, v5);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 24))(v36, v5, v6);
    *(_OWORD *)v35 = *(_OWORD *)(v1 + 32);
    v7 = sub_100003DB8(&qword_10031F198);
    v8 = State.projectedValue.getter(&v32, v7);
    v30 = &v28;
    *(_QWORD *)v35 = v32;
    *(_OWORD *)&v35[8] = v33;
    __chkstk_darwin(v8, v9);
    v27[2] = v1;
    v27[3] = v37;
    v27[4] = v36;
    v29 = sub_100003DB8(&qword_100317980);
    v10 = sub_100003DB8(&qword_10031F1A0);
    v11 = sub_1000084FC(&qword_10031F1A8, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
    v12 = sub_1000084FC(&qword_100319618, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
    v13 = sub_1000084FC(&qword_10031F1B0, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
    v14 = sub_100007FAC(&qword_10031F1B8);
    v15 = sub_100007FAC(&qword_100319220);
    v16 = sub_100007FAC(&qword_10031F1C0);
    v17 = sub_1000084FC(&qword_10031F1C8, &qword_10031F1C0, (uint64_t)&unk_1002525D0);
    v32 = v16;
    *(_QWORD *)&v33 = v17;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v32, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v19 = sub_100007FAC(&qword_100319208);
    v20 = sub_1000084FC(&qword_100319218, &qword_100319208, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    v32 = v19;
    *(_QWORD *)&v33 = v20;
    v21 = swift_getOpaqueTypeConformance2(&v32, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    v32 = v14;
    *(_QWORD *)&v33 = v15;
    *((_QWORD *)&v33 + 1) = OpaqueTypeConformance2;
    v34 = v21;
    v22 = swift_getOpaqueTypeConformance2(&v32, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    NavigationStack.init<>(path:root:)(v35, sub_1000E8A28, v27, v29, v10, v11, v12, v13, v22, &protocol witness table for String);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v36);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v37);
  }
  else
  {
    v24 = *(_QWORD *)(v1 + 24);
    v25 = type metadata accessor for UIMetrics();
    v26 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v24, v25, v26);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E5AD4@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  __int128 v17;
  _OWORD *v18;
  __int128 v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t OpaqueTypeConformance2;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  __int128 v40;
  uint64_t (*v41)@<X0>(uint64_t@<X8>);
  _OWORD *v42;
  void (*v43)(uint64_t@<X8>);
  _OWORD *v44;
  __int128 v45;
  uint64_t v46;
  _QWORD v47[2];
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  _OWORD v54[2];

  v39 = a4;
  v7 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_10031F1B8);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v39 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a1;
  v53 = a1[1];
  v54[0] = v17;
  v50 = a1[2];
  v52 = v50;
  sub_10000B458((uint64_t)&v50 + 8, (uint64_t)&v51, &qword_10031F1D0);
  sub_100007CBC(a2, (uint64_t)&v40);
  v18 = (_OWORD *)swift_allocObject(&unk_1002EF6A8, 104, 7);
  v19 = a1[1];
  v18[1] = *a1;
  v18[2] = v19;
  v18[3] = a1[2];
  sub_100007D04(&v40, (uint64_t)(v18 + 4));
  sub_100007CBC(a3, (uint64_t)&v40);
  v20 = (_OWORD *)swift_allocObject(&unk_1002EF6D0, 104, 7);
  v21 = a1[1];
  v20[1] = *a1;
  v20[2] = v21;
  v20[3] = a1[2];
  sub_100007D04(&v40, (uint64_t)(v20 + 4));
  sub_100031A88(v54);
  sub_100031A88(&v53);
  sub_100034218(&v52);
  sub_100031A88(&v51);
  sub_100031A88(v54);
  sub_100031A88(&v53);
  sub_100034218(&v52);
  sub_100031A88(&v51);
  v22 = type metadata accessor for UIMetrics();
  v23 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v24 = EnvironmentObject.init()(v22, v23);
  v26 = v25;
  type metadata accessor for CGSize(0);
  v47[0] = 0;
  v47[1] = 0;
  State.init(wrappedValue:)(&v48, v47, v27);
  *(_QWORD *)&v40 = v24;
  *((_QWORD *)&v40 + 1) = v26;
  v41 = sub_1000E8A38;
  v42 = v18;
  v43 = sub_1000E8A8C;
  v44 = v20;
  v45 = v48;
  v46 = v49;
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v7);
  v28 = sub_100003DB8(&qword_10031F1C0);
  v29 = sub_1000084FC(&qword_10031F1C8, &qword_10031F1C0, (uint64_t)&unk_1002525D0);
  View.navigationBarTitleDisplayMode(_:)(v11, v28, v29);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v30 = v40;
  v31 = v42;
  v32 = v46;
  swift_release(v44);
  swift_release(v31);
  swift_release(v30);
  swift_release(v32);
  v33 = sub_100003DB8(&qword_100319220);
  *(_QWORD *)&v40 = v28;
  *((_QWORD *)&v40 + 1) = v29;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v40, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v35 = sub_100007FAC(&qword_100319208);
  v36 = sub_1000084FC(&qword_100319218, &qword_100319208, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  *(_QWORD *)&v40 = v35;
  *((_QWORD *)&v40 + 1) = v36;
  v37 = swift_getOpaqueTypeConformance2(&v40, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  View.toolbar<A>(content:)(sub_1000E6BA8, 0, v12, v33, OpaqueTypeConformance2, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t sub_1000E5E90@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  _BYTE __src[552];
  _BYTE v15[568];
  _QWORD v16[78];
  _BYTE v17[632];
  _QWORD v18[2];
  char v19;
  _BYTE v20[567];
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v6 = static HorizontalAlignment.center.getter(a1);
  sub_1000E5FEC(a1, a2, __src);
  v15[552] = 0;
  memcpy(&v15[7], __src, 0x221uLL);
  v7 = sub_100007BBC(a2, a2[3]);
  v8 = *(_QWORD *)(*v7 + 48);
  v9 = *(_QWORD *)(*v7 + 56);
  v10 = *(_QWORD *)(*v7 + 64);
  v11 = *(_QWORD *)(*v7 + 72);
  LOBYTE(a2) = static Edge.Set.all.getter(v12);
  v15[560] = 0;
  v16[0] = v6;
  v16[1] = 0;
  LOBYTE(v16[2]) = 0;
  memcpy((char *)&v16[2] + 1, v15, 0x228uLL);
  LOBYTE(v16[72]) = (_BYTE)a2;
  v16[73] = v8;
  v16[74] = v9;
  v16[75] = v10;
  v16[76] = v11;
  LOBYTE(v16[77]) = 0;
  v17[624] = 1;
  memcpy(&v17[7], v16, 0x269uLL);
  *(_QWORD *)a3 = 0;
  *(_BYTE *)(a3 + 8) = 1;
  memcpy((void *)(a3 + 9), v17, 0x270uLL);
  v18[0] = v6;
  v18[1] = 0;
  v19 = 0;
  memcpy(v20, v15, 0x228uLL);
  v20[559] = (_BYTE)a2;
  v21 = v8;
  v22 = v9;
  v23 = v10;
  v24 = v11;
  v25 = 0;
  sub_1000E8AEC((uint64_t)v16);
  return sub_1000E8B68((uint64_t)v18);
}

_QWORD *sub_1000E5FEC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  id v51;
  char v52;
  uint64_t KeyPath;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  BOOL v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  id v70;
  char v71;
  double v72;
  _QWORD *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  double v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  char v84;
  char v85;
  char v86;
  _QWORD *result;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  UIContentSizeCategory v91;
  int v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  void *v96;
  _QWORD *v97;
  int v98;
  int v99;
  int v100;
  unsigned __int8 v101;
  unsigned __int8 v102;
  char v103;
  _OWORD v104[8];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  unsigned __int8 v111;
  _OWORD v112[20];
  _OWORD v113[35];
  _OWORD v114[10];
  _QWORD *v115;
  double v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char v122;
  char v123;
  __int128 v124;
  __int128 v125;
  char v126;
  char v127;
  __int128 v128;
  __int128 v129;
  char v130;
  _OWORD v131[8];
  uint64_t v132;
  char v133;
  _BYTE v134[7];
  __int128 v135;
  __int128 v136;
  char v137;
  _BYTE v138[7];
  char v139;
  _BYTE v140[7];
  __int128 v141;
  __int128 v142;
  char v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  unsigned __int8 v154;
  unsigned __int8 v155;
  _BYTE v156[7];
  _BYTE v157[7];
  _BYTE v158[7];
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;
  _QWORD *v171;
  uint64_t v172;
  BOOL v173;

  v95 = a2;
  v96 = a3;
  v4 = type metadata accessor for Image.ResizingMode(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = Image.init(_:bundle:)(0xD000000000000021, 0x8000000100264C10, 0);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for Image.ResizingMode.stretch(_:), v4);
  v10 = Image.resizable(capInsets:resizingMode:)(v8, v9, 0.0, 0.0, 0.0, 0.0);
  swift_release(v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v11 = *(_QWORD **)(a1 + 16);
  if (v11)
  {
    v12 = v11[9];
    v13 = v11[10];
    v14 = v11 + 6;
    v94 = v11 + 6;
    v15 = v11;
    sub_100007BBC(v11 + 6, v12);
    (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(v13 + 24))(v113, v12, v13);
    v16 = *((_QWORD *)&v113[1] + 1);
    v17 = *(_QWORD *)&v113[2];
    sub_100007BBC(v113, *((uint64_t *)&v113[1] + 1));
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 32))(v16, v17);
    v20 = v19;
    v21 = static Alignment.center.getter(v18);
    sub_100131D14(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v159, 0.0, 1, v20, 0, v21, v22, v10, 0, 1);
    swift_release(v10);
    v23 = _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v113);
    v24 = static Edge.Set.top.getter(v23);
    v99 = v24;
    v154 = 1;
    v100 = static Edge.Set.bottom.getter(v24);
    v98 = v154;
    v155 = 1;
    v25 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000018, 0x80000001002692F0);
    v26 = Text.init(_:tableName:bundle:comment:)(v25);
    v28 = v27;
    v30 = v29;
    v32 = v31 & 1;
    v97 = v15;
    v33 = v15[9];
    v34 = v15[10];
    sub_100007BBC(v14, v33);
    v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 56))(v33, v34);
    v36 = Text.font(_:)(v35, v26, v28, v32, v30);
    v38 = v37;
    v40 = v39;
    v42 = v41 & 1;
    sub_10002B438(v26, v28, v32);
    swift_release(v35);
    swift_bridgeObjectRelease(v30);
    v43 = v97;
    v44 = v97[9];
    v45 = v97[10];
    sub_100007BBC(v94, v44);
    v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 64))(v44, v45);
    v93 = Text.foregroundColor(_:)(v46, v36, v38, v42, v40);
    v94 = v47;
    v49 = v48;
    v92 = v50;
    sub_10002B438(v36, v38, v42);
    swift_release(v46);
    swift_bridgeObjectRelease(v40);
    v51 = (id)v43[14];
    v52 = static UIContentSizeCategory.>= infix(_:_:)(v51, UIContentSizeCategoryAccessibilityExtraLarge);

    KeyPath = swift_getKeyPath(&unk_1002552E8);
    v54 = (id)v43[14];
    v55 = static Alignment.center.getter(v54);
    v57 = v56;
    v58 = static UIContentSizeCategory.>= infix(_:_:)(v54, UIContentSizeCategoryAccessibilityExtraLarge);
    v91 = UIContentSizeCategoryAccessibilityExtraLarge;
    if ((v58 & 1) != 0
      && (v59 = static Alignment.center.getter(v58),
          v61 = static Alignment.== infix(_:_:)(v55, v57, v59, v60),
          (v61 & 1) != 0))
    {
      v63 = v49;
      v55 = static Alignment.leading.getter(v61, v62);
      v57 = v64;
    }
    else
    {
      v63 = v49;
    }

    v65 = v92 & 1;
    v66 = (v52 & 1) == 0;
    v67 = v93;
    v168 = v93;
    v169 = v63;
    v170 = v92 & 1;
    v68 = v94;
    v69 = v95;
    v171 = v94;
    v172 = KeyPath;
    v173 = v66;
    sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v144, 0.0, 1, 0.0, 1, v55, v57);
    sub_10002B438(v67, v63, v65);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v68);
    v70 = (id)v97[14];
    v71 = static UIContentSizeCategory.>= infix(_:_:)(v70, v91);

    if ((v71 & 1) != 0)
      v72 = 1.0;
    else
      v72 = 0.5;
    v73 = (_QWORD *)swift_getKeyPath(&unk_100255318);
    v94 = v73;
    v74 = sub_100007BBC(v69, v69[3]);
    v75 = *v74;
    v77 = *(_QWORD *)(*v74 + 192);
    v93 = *(_QWORD *)(*v74 + 184);
    v76 = v93;
    v78 = *(_QWORD *)(v75 + 200);
    v79 = *(_QWORD *)(v75 + 208);
    v81 = static Edge.Set.all.getter(v80);
    v82 = v81;
    v101 = 0;
    v83 = static Edge.Set.top.getter(v81);
    v84 = v83;
    LODWORD(v95) = v83;
    LODWORD(v91) = v101;
    v102 = 1;
    v85 = static Edge.Set.bottom.getter(v83);
    v92 = v102;
    v103 = 1;
    LODWORD(v97) = v155;
    v104[7] = v166;
    *(_QWORD *)&v105 = v167;
    v104[2] = v161;
    v104[3] = v162;
    v104[5] = v164;
    v104[6] = v165;
    v104[4] = v163;
    v104[0] = v159;
    v104[1] = v160;
    BYTE8(v105) = v99;
    *(_DWORD *)((char *)&v105 + 9) = *(_DWORD *)v158;
    HIDWORD(v105) = *(_DWORD *)&v158[3];
    v106 = 0u;
    v107 = 0u;
    LOBYTE(v108) = v98;
    *(_DWORD *)((char *)&v108 + 1) = *(_DWORD *)v157;
    DWORD1(v108) = *(_DWORD *)&v157[3];
    BYTE8(v108) = v100;
    *(_DWORD *)((char *)&v108 + 9) = *(_DWORD *)v156;
    HIDWORD(v108) = *(_DWORD *)&v156[3];
    v109 = 0u;
    v110 = 0u;
    v111 = v155;
    v112[6] = v150;
    v112[7] = v151;
    v112[8] = v152;
    v112[9] = v153;
    v112[2] = v146;
    v112[3] = v147;
    v112[4] = v148;
    v112[5] = v149;
    v112[0] = v144;
    v112[1] = v145;
    *(_QWORD *)&v112[10] = v73;
    *((double *)&v112[10] + 1) = v72;
    LOBYTE(v112[11]) = v82;
    *((_QWORD *)&v112[11] + 1) = v76;
    *(_QWORD *)&v112[12] = v77;
    *((_QWORD *)&v112[12] + 1) = v78;
    *(_QWORD *)&v112[13] = v79;
    LOBYTE(v76) = (_BYTE)v91;
    BYTE8(v112[13]) = (_BYTE)v91;
    LOBYTE(v112[14]) = v84;
    *(_OWORD *)((char *)&v112[14] + 8) = 0u;
    *(_OWORD *)((char *)&v112[15] + 8) = 0u;
    BYTE8(v112[16]) = v102;
    LOBYTE(v112[17]) = v85;
    v86 = v85;
    *(_OWORD *)((char *)&v112[17] + 8) = 0u;
    *(_OWORD *)((char *)&v112[18] + 8) = 0u;
    BYTE8(v112[19]) = 1;
    v113[0] = v159;
    v113[1] = v160;
    v113[4] = v163;
    v113[5] = v164;
    v113[2] = v161;
    v113[3] = v162;
    v113[8] = v105;
    memset(&v113[9], 0, 32);
    v113[6] = v165;
    v113[7] = v166;
    LOBYTE(v113[14]) = v155;
    memset(&v113[12], 0, 32);
    v113[11] = v108;
    memcpy((char *)&v113[14] + 8, v112, 0x139uLL);
    memcpy(v96, v113, 0x221uLL);
    v114[6] = v150;
    v114[7] = v151;
    v114[8] = v152;
    v114[9] = v153;
    v114[2] = v146;
    v114[3] = v147;
    v114[4] = v148;
    v114[5] = v149;
    v114[0] = v144;
    v114[1] = v145;
    v115 = v94;
    v116 = v72;
    v117 = v82;
    v118 = v93;
    v119 = v77;
    v120 = v78;
    v121 = v79;
    v122 = v76;
    v123 = (char)v95;
    v124 = 0u;
    v125 = 0u;
    v126 = v92;
    v127 = v86;
    v128 = 0u;
    v129 = 0u;
    v130 = 1;
    sub_100031A88(v104);
    sub_10003893C((uint64_t)v112);
    sub_100038994((uint64_t)v114);
    v131[6] = v165;
    v131[7] = v166;
    v132 = v167;
    v131[2] = v161;
    v131[3] = v162;
    v131[4] = v163;
    v131[5] = v164;
    v131[0] = v159;
    v131[1] = v160;
    v133 = v99;
    *(_DWORD *)v134 = *(_DWORD *)v158;
    *(_DWORD *)&v134[3] = *(_DWORD *)&v158[3];
    v135 = 0u;
    v136 = 0u;
    v137 = v98;
    *(_DWORD *)v138 = *(_DWORD *)v157;
    *(_DWORD *)&v138[3] = *(_DWORD *)&v157[3];
    v139 = v100;
    *(_DWORD *)v140 = *(_DWORD *)v156;
    *(_DWORD *)&v140[3] = *(_DWORD *)&v156[3];
    v141 = 0u;
    v142 = 0u;
    v143 = (char)v97;
    return sub_100042AD0(v131);
  }
  else
  {
    v88 = *(_QWORD *)(a1 + 24);
    v89 = type metadata accessor for UIMetrics();
    v90 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = (_QWORD *)EnvironmentObject.error()(0, v88, v89, v90);
    __break(1u);
  }
  return result;
}

void sub_1000E682C(__int128 *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  __int128 v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  double v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  char v49;
  char v50;
  char v51;
  _BYTE v52[16];
  Swift::String v53;

  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v53._object = (void *)0x8000000100269280;
  v7._countAndFlagsBits = 0x6553206F74206F47;
  v7._object = (void *)0xEE0073676E697474;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v53._countAndFlagsBits = 0xD000000000000064;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v53);

  v10 = *a1;
  v47 = a1[1];
  v48 = v10;
  v44 = a1[2];
  v46 = v44;
  sub_10000B458((uint64_t)&v44 + 8, (uint64_t)&v45, &qword_10031F1D0);
  v11 = (_OWORD *)swift_allocObject(&unk_1002EF6F8, 64, 7);
  v12 = a1[1];
  v11[1] = *a1;
  v11[2] = v12;
  v11[3] = a1[2];
  KeyPath = swift_getKeyPath(&unk_100255298);
  v40 = swift_getKeyPath(&unk_1002552C0);
  v52[0] = 1;
  sub_100031A88(&v48);
  sub_100031A88(&v47);
  sub_100034218(&v46);
  sub_100031A88(&v45);
  State.init(wrappedValue:)(&v42, v52, &type metadata for Bool);
  v39 = v42;
  v38 = v43;
  v52[0] = 0;
  State.init(wrappedValue:)(&v42, v52, &type metadata for Bool);
  v37 = v42;
  v36 = v43;
  v13 = a2[3];
  v14 = a2[4];
  sub_100007BBC(a2, v13);
  v15 = (*(double (**)(uint64_t, uint64_t))(v14 + 24))(v13, v14);
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v22 = static Edge.Set.all.getter(v15);
  v35 = v22;
  v51 = 0;
  v50 = 0;
  v49 = 0;
  v23 = static Edge.Set.top.getter(v22);
  v34 = v23;
  v24 = v51;
  LOBYTE(v13) = v50;
  LOBYTE(v14) = v49;
  v52[0] = 1;
  v25 = static Edge.Set.bottom.getter(v23);
  v26 = a2[3];
  v27 = a2[4];
  sub_100007BBC(a2, v26);
  v28 = (*(double (**)(uint64_t, uint64_t))(v27 + 112))(v26, v27);
  v29 = EdgeInsets.init(_all:)(v28);
  v30 = v52[0];
  LOBYTE(v42) = 0;
  *(_QWORD *)a3 = KeyPath;
  *(_BYTE *)(a3 + 8) = v24;
  *(_QWORD *)(a3 + 16) = v40;
  *(_BYTE *)(a3 + 24) = v13;
  *(Swift::String *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 48) = sub_1000E8AD4;
  *(_QWORD *)(a3 + 56) = v11;
  *(_BYTE *)(a3 + 64) = v39;
  *(_QWORD *)(a3 + 72) = v38;
  *(_BYTE *)(a3 + 80) = v37;
  *(_QWORD *)(a3 + 88) = v36;
  *(_BYTE *)(a3 + 96) = v35;
  *(double *)(a3 + 104) = v15;
  *(_QWORD *)(a3 + 112) = v17;
  *(_QWORD *)(a3 + 120) = v19;
  *(_QWORD *)(a3 + 128) = v21;
  *(_BYTE *)(a3 + 136) = v14;
  *(_BYTE *)(a3 + 144) = v34;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_BYTE *)(a3 + 184) = v30;
  *(_BYTE *)(a3 + 192) = v25;
  *(double *)(a3 + 200) = v29;
  *(_QWORD *)(a3 + 208) = v31;
  *(_QWORD *)(a3 + 216) = v32;
  *(_QWORD *)(a3 + 224) = v33;
  *(_BYTE *)(a3 + 232) = v42;
}

uint64_t sub_1000E6B1C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  if (*a1)
  {
    v1 = *(_QWORD *)(*a1 + 88);
    v6 = 0;
    swift_retain(v1);
    PassthroughSubject.send(_:)(&v6);
    return swift_release(v1);
  }
  else
  {
    v3 = a1[1];
    v4 = type metadata accessor for AppEvents();
    v5 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    result = EnvironmentObject.error()(0, v3, v4, v5);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E6BA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v12;

  v0 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v0, v1);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003DB8(&qword_100319208);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.principal.getter(v7);
  ToolbarItem<>.init(placement:content:)(v3, sub_1000E6CB8, 0, &type metadata for Text, &protocol witness table for Text);
  v10 = sub_1000084FC(&qword_100319218, &qword_100319208, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v9, v4, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v4);
}

void sub_1000E6CB8(uint64_t a1@<X8>)
{
  sub_1000E8840(0xD000000000000012, (void *)0x8000000100265F60, 0xD00000000000004ELL, (void *)0x8000000100265F80, a1);
}

uint64_t sub_1000E6CF0@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E57F4(a1);
}

uint64_t sub_1000E6D28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t OpaqueTypeConformance2;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v23[4];
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  _BYTE v31[24];
  _QWORD v32[5];

  v27 = a1;
  v2 = *(_QWORD **)(v1 + 32);
  if (v2)
  {
    v3 = v2[9];
    v4 = v2[10];
    sub_100007BBC(v2 + 6, v3);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v4 + 32))(v32, v3, v4);
    *(_OWORD *)v31 = *(_OWORD *)(v1 + 56);
    v5 = sub_100003DB8(&qword_10031F198);
    v6 = State.projectedValue.getter(&v28, v5);
    v26 = &v24;
    *(_QWORD *)v31 = v28;
    *(_OWORD *)&v31[8] = v29;
    __chkstk_darwin(v6, v7);
    v23[2] = v1;
    v23[3] = v32;
    v25 = sub_100003DB8(&qword_100317980);
    v8 = sub_100003DB8(&qword_10031F2B0);
    v9 = sub_1000084FC(&qword_10031F1A8, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
    v10 = sub_1000084FC(&qword_100319618, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
    v11 = sub_1000084FC(&qword_10031F1B0, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
    v12 = sub_100007FAC(&qword_10031F2B8);
    v13 = sub_100007FAC(&qword_10031F1E8);
    v14 = sub_100007FAC(&qword_10031F2C0);
    v15 = sub_1000084FC(&qword_10031F2C8, &qword_10031F2C0, (uint64_t)&unk_1002525D0);
    v28 = v14;
    *(_QWORD *)&v29 = v15;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v17 = sub_1000084FC(&qword_10031F200, &qword_10031F1E8, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v28 = v12;
    *(_QWORD *)&v29 = v13;
    *((_QWORD *)&v29 + 1) = OpaqueTypeConformance2;
    v30 = v17;
    v18 = swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    NavigationStack.init<>(path:root:)(v31, sub_1000E96C8, v23, v25, v8, v9, v10, v11, v18, &protocol witness table for String);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v32);
  }
  else
  {
    v20 = *(_QWORD *)(v1 + 40);
    v21 = type metadata accessor for UIMetrics();
    v22 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v20, v21, v22);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E6FA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t OpaqueTypeConformance2;
  uint64_t v31;
  _QWORD v33[2];
  char v34[16];
  uint64_t v35;
  __int128 v36;
  uint64_t (*v37)@<X0>(uint64_t@<X8>);
  uint64_t v38;
  uint64_t (*v39)@<X0>(uint64_t@<X8>);
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  _QWORD v43[2];
  __int128 v44;
  uint64_t v45;

  v33[1] = a3;
  v5 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_10031F2B8);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007CBC(a2, (uint64_t)&v36);
  v15 = swift_allocObject(&unk_1002EF7C0, 128, 7);
  v16 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v15 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v15 + 64) = v16;
  *(_QWORD *)(v15 + 80) = *(_QWORD *)(a1 + 64);
  v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v15 + 32) = v17;
  sub_100007D04(&v36, v15 + 88);
  sub_1000E9728((uint64_t *)a1);
  v18 = type metadata accessor for UIMetrics();
  v19 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v20 = EnvironmentObject.init()(v18, v19);
  v22 = v21;
  type metadata accessor for CGSize(0);
  v43[0] = 0;
  v43[1] = 0;
  State.init(wrappedValue:)(&v44, v43, v23);
  *(_QWORD *)&v36 = v20;
  *((_QWORD *)&v36 + 1) = v22;
  v37 = sub_1000E971C;
  v38 = v15;
  v39 = sub_1000E8408;
  v40 = 0;
  v41 = v44;
  v42 = v45;
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v5);
  v24 = sub_100003DB8(&qword_10031F2C0);
  v25 = sub_1000084FC(&qword_10031F2C8, &qword_10031F2C0, (uint64_t)&unk_1002525D0);
  View.navigationBarTitleDisplayMode(_:)(v9, v24, v25);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v26 = v36;
  v27 = v38;
  v28 = v42;
  swift_release(v40);
  swift_release(v27);
  swift_release(v26);
  swift_release(v28);
  v35 = a1;
  v29 = sub_100003DB8(&qword_10031F1E8);
  *(_QWORD *)&v36 = v24;
  *((_QWORD *)&v36 + 1) = v25;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v36, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v31 = sub_1000084FC(&qword_10031F200, &qword_10031F1E8, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  View.toolbar<A>(content:)(sub_1000E978C, v34, v10, v29, OpaqueTypeConformance2, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

uint64_t sub_1000E725C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;

  v6 = sub_100003DB8(&qword_10031F2D0);
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static HorizontalAlignment.center.getter(v8);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 0;
  v11 = sub_100003DB8(&qword_10031F2D8);
  sub_1000E7368(a1, a2, (uint64_t *)&v10[*(int *)(v11 + 44)]);
  v12 = sub_100007BBC(a2, a2[3]);
  v13 = *v12;
  v18 = *(_OWORD *)(*v12 + 48);
  v14 = *(_QWORD *)(v13 + 64);
  v15 = *(_QWORD *)(v13 + 72);
  LOBYTE(a2) = static Edge.Set.all.getter(*(double *)&v18);
  sub_10000B234((uint64_t)v10, a3, &qword_10031F2D0);
  v16 = a3 + *(int *)(sub_100003DB8(&qword_10031F2E0) + 36);
  *(_BYTE *)v16 = (_BYTE)a2;
  *(_OWORD *)(v16 + 8) = v18;
  *(_QWORD *)(v16 + 24) = v14;
  *(_QWORD *)(v16 + 32) = v15;
  *(_BYTE *)(v16 + 40) = 0;
  return sub_100007FF0((uint64_t)v10, &qword_10031F2D0);
}

uint64_t sub_1000E7368@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  id v102;
  BOOL v103;
  uint64_t KeyPath;
  id v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  uint64_t v119;
  id v120;
  char v121;
  double v122;
  uint64_t v123;
  _BYTE *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char v133;
  _BYTE *v134;
  _BYTE *v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  char v140;
  _BYTE *v141;
  _BYTE *v142;
  uint64_t v143;
  unint64_t v144;
  __n128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  char v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  _BYTE *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _BYTE *v166;
  uint64_t *v167;
  id v168;
  uint64_t v169;
  uint64_t v170;
  _BYTE *v171;
  _BYTE *v172;
  id v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  _BYTE *v183;
  id v184;
  char v185;
  double v186;
  uint64_t v187;
  _BYTE *v188;
  double *v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _BYTE *v194;
  _BYTE *v195;
  uint64_t v196;
  _BYTE *v197;
  _BYTE *v198;
  uint64_t v199;
  _BYTE *v200;
  _BYTE *v201;
  _BYTE *v202;
  _BYTE *v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  _BYTE *v217;
  __n128 v218;
  __n128 v219;
  uint64_t v220;
  __n128 v221;
  __n128 v222;
  __n128 v223;
  __n128 v224;
  uint64_t v225;
  uint64_t result;
  _BYTE v227[4];
  int v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  uint64_t v233;
  _QWORD *v234;
  _BYTE *v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  _BYTE *v240;
  uint64_t v241;
  _BYTE *v242;
  _BYTE *v243;
  __int128 v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _BYTE *v250;
  uint64_t v251;
  uint64_t v252;
  _BYTE *v253;
  uint64_t v254;
  uint64_t v255;
  _BYTE *v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  _BYTE *v261;
  uint64_t v262;
  uint64_t v263;
  _BYTE *v264;
  uint64_t v265;
  uint64_t v266;
  _BYTE *v267;
  uint64_t v268;
  _BYTE *v269;
  _BYTE *v270;
  _BYTE *v271;
  _BYTE *v272;
  _QWORD *v273;
  uint64_t *v274;
  uint64_t v275;
  uint64_t v276;
  _BYTE *v277;
  _BYTE *v278;
  __int128 v279;
  _BYTE *v280;
  __int128 v281;
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  _OWORD v292[12];
  _OWORD v293[10];
  uint64_t v294;
  uint64_t v295;
  char v296;
  uint64_t v297;
  uint64_t v298;
  BOOL v299;

  v273 = a2;
  v274 = a3;
  v4 = sub_100003DB8(&qword_100319970);
  __chkstk_darwin(v4, v5);
  v250 = &v227[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v248 = sub_100003DB8(&qword_10031F2E8);
  __chkstk_darwin(v248, v7);
  v253 = &v227[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v251 = sub_100003DB8(&qword_10031F2F0);
  __chkstk_darwin(v251, v9);
  v256 = &v227[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v254 = sub_100003DB8(&qword_10031F2F8);
  __chkstk_darwin(v254, v11);
  v261 = &v227[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = sub_100003DB8(&qword_10031F300);
  __chkstk_darwin(v13, v14);
  v264 = &v227[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v263 = sub_100003DB8(&qword_10031F308);
  __chkstk_darwin(v263, v16);
  v269 = &v227[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v265 = sub_100003DB8(&qword_10031F310);
  __chkstk_darwin(v265, v18);
  v270 = &v227[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v266 = sub_100003DB8(&qword_10031F318);
  __chkstk_darwin(v266, v20);
  v271 = &v227[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v268 = sub_100003DB8(&qword_10031F320);
  v23 = __chkstk_darwin(v268, v22);
  v278 = &v227[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v26 = __chkstk_darwin(v23, v25);
  v267 = &v227[-v27];
  __chkstk_darwin(v26, v28);
  v272 = &v227[-v29];
  v30 = type metadata accessor for AccessibilityTraits(0);
  v236 = *(_QWORD *)(v30 - 8);
  v237 = v30;
  __chkstk_darwin(v30, v31);
  v235 = &v227[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v33 = sub_100003DB8(&qword_10031D258);
  __chkstk_darwin(v33, v34);
  v242 = &v227[-((v35 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v238 = sub_100003DB8(&qword_10031F328);
  __chkstk_darwin(v238, v36);
  v243 = &v227[-((v37 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v239 = sub_100003DB8(&qword_10031F330);
  __chkstk_darwin(v239, v38);
  *(_QWORD *)&v244 = &v227[-((v39 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v241 = sub_100003DB8(&qword_10031F338);
  v41 = __chkstk_darwin(v241, v40);
  v277 = &v227[-((v42 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v44 = __chkstk_darwin(v41, v43);
  v240 = &v227[-v45];
  __chkstk_darwin(v44, v46);
  v280 = &v227[-v47];
  v48 = type metadata accessor for ConnectionClosedModel(0);
  v49 = sub_1000052EC(&qword_10031CB58, type metadata accessor for ConnectionClosedModel, (uint64_t)&unk_10024D2FC);
  v276 = EnvironmentObject.init()(v48, v49);
  v257 = v50;
  v51 = type metadata accessor for ConnectivityModel();
  v52 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
  v275 = EnvironmentObject.init()(v51, v52);
  v255 = v53;
  v54 = type metadata accessor for GuidanceModel();
  v55 = sub_1000052EC(&qword_100316B08, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceModel, (uint64_t)&unk_10024D2FC);
  v262 = EnvironmentObject.init()(v54, v55);
  v252 = v56;
  v57 = type metadata accessor for OrientationModel();
  v58 = sub_1000052EC(&qword_10031CB60, (uint64_t (*)(uint64_t))type metadata accessor for OrientationModel, (uint64_t)&unk_10024D2FC);
  v260 = EnvironmentObject.init()(v57, v58);
  v249 = v59;
  v60 = type metadata accessor for StewieModel();
  v61 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
  v259 = EnvironmentObject.init()(v60, v61);
  v247 = v62;
  v63 = type metadata accessor for UIMetrics();
  v64 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v258 = EnvironmentObject.init()(v63, v64);
  v246 = v65;
  v66 = *(_QWORD **)(a1 + 32);
  if (v66)
  {
    v67 = v66 + 6;
    v68 = v66[9];
    v69 = v66[10];
    sub_100007BBC(v66 + 6, v68);
    v70 = *(unsigned __int8 *)(a1 + 48);
    v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 144))(v70, v68, v69);
    v232 = v72;
    v233 = v71;
    v73 = v66[9];
    v74 = v66[10];
    sub_100007BBC(v66 + 6, v73);
    *(_QWORD *)&v292[0] = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v74 + 136))(v70, v73, v74);
    *((_QWORD *)&v292[0] + 1) = v75;
    v231 = sub_10002B3F4();
    v77 = Text.init<A>(_:)(v292, &type metadata for String, v231, v76);
    v79 = v78;
    v81 = v80;
    v83 = v82 & 1;
    v84 = v66[9];
    v85 = v66[10];
    sub_100007BBC(v66 + 6, v84);
    v86 = (*(uint64_t (**)(uint64_t, uint64_t))(v85 + 56))(v84, v85);
    v87 = Text.font(_:)(v86, v77, v79, v83, v81);
    v88 = v66;
    v245 = v89;
    *(_QWORD *)&v279 = v90;
    v92 = v91 & 1;
    sub_10002B438(v77, v79, v83);
    swift_release(v86);
    swift_bridgeObjectRelease(v81);
    v93 = v88[9];
    v94 = v88[10];
    v234 = v67;
    sub_100007BBC(v67, v93);
    v95 = (*(uint64_t (**)(uint64_t, uint64_t))(v94 + 64))(v93, v94);
    v96 = v245;
    v97 = v279;
    v229 = Text.foregroundColor(_:)(v95, v87, v245, v92, v279);
    v230 = v98;
    v100 = v99;
    v228 = v101;
    sub_10002B438(v87, v96, v92);
    swift_release(v95);
    swift_bridgeObjectRelease(v97);
    v102 = (id)v88[14];
    LOBYTE(v87) = static UIContentSizeCategory.>= infix(_:_:)(v102, UIContentSizeCategoryAccessibilityExtraLarge);

    v103 = (v87 & 1) == 0;
    KeyPath = swift_getKeyPath(&unk_1002552E8);
    v245 = (uint64_t)v88;
    v105 = (id)v88[14];
    v106 = static Alignment.center.getter(v105);
    v108 = v107;
    *(_QWORD *)&v279 = UIContentSizeCategoryAccessibilityExtraLarge;
    v109 = static UIContentSizeCategory.>= infix(_:_:)(v105, UIContentSizeCategoryAccessibilityExtraLarge);
    if ((v109 & 1) != 0)
    {
      v110 = static Alignment.center.getter(v109);
      v112 = static Alignment.== infix(_:_:)(v106, v108, v110, v111);
      if ((v112 & 1) != 0)
      {
        v106 = static Alignment.leading.getter(v112, v113);
        v108 = v114;
      }
    }

    v115 = v244;
    v116 = v229;
    v117 = v230;
    v294 = v229;
    v295 = v100;
    v118 = v228 & 1;
    v296 = v228 & 1;
    v297 = v230;
    v298 = KeyPath;
    v299 = v103;
    sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v293, 0.0, 1, 0.0, 1, v106, v108);
    sub_10002B438(v116, v100, v118);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v117);
    v119 = v245;
    v120 = *(id *)(v245 + 112);
    v121 = static UIContentSizeCategory.>= infix(_:_:)(v120, v279);

    if ((v121 & 1) != 0)
      v122 = 1.0;
    else
      v122 = 0.5;
    v123 = swift_getKeyPath(&unk_100255318);
    v287 = v293[6];
    v288 = v293[7];
    v289 = v293[8];
    v290 = v293[9];
    v283 = v293[2];
    v284 = v293[3];
    v285 = v293[4];
    v286 = v293[5];
    v281 = v293[0];
    v282 = v293[1];
    *(_QWORD *)&v291 = v123;
    *((double *)&v291 + 1) = v122;
    v124 = v235;
    static AccessibilityTraits.isHeader.getter();
    v125 = sub_100003DB8(&qword_10031D278);
    v126 = sub_1000A9FC0();
    v127 = (uint64_t)v242;
    View.accessibility(addTraits:)(v124, v125, v126);
    (*(void (**)(_BYTE *, uint64_t))(v236 + 8))(v124, v237);
    v292[8] = v289;
    v292[9] = v290;
    v292[10] = v291;
    v292[4] = v285;
    v292[5] = v286;
    v292[6] = v287;
    v292[7] = v288;
    v292[0] = v281;
    v292[1] = v282;
    v292[2] = v283;
    v292[3] = v284;
    sub_100038994((uint64_t)v292);
    v128 = v273;
    v129 = sub_100007BBC(v273, v273[3]);
    v130 = *v129;
    v244 = *(_OWORD *)(*v129 + 184);
    v131 = *(_QWORD *)(v130 + 200);
    v132 = *(_QWORD *)(v130 + 208);
    v133 = static Edge.Set.all.getter(*(double *)&v244);
    v134 = v243;
    sub_10000B234(v127, (uint64_t)v243, &qword_10031D258);
    v135 = &v134[*(int *)(v238 + 36)];
    *v135 = v133;
    *(_OWORD *)(v135 + 8) = v244;
    *((_QWORD *)v135 + 3) = v131;
    *((_QWORD *)v135 + 4) = v132;
    v135[40] = 0;
    v136 = sub_100007FF0(v127, &qword_10031D258);
    v137 = static Edge.Set.top.getter(v136);
    sub_10000B234((uint64_t)v134, v115, &qword_10031F328);
    v138 = v115 + *(int *)(v239 + 36);
    *(_BYTE *)v138 = v137;
    *(_OWORD *)(v138 + 8) = 0u;
    *(_OWORD *)(v138 + 24) = 0u;
    *(_BYTE *)(v138 + 40) = 1;
    v139 = sub_100007FF0((uint64_t)v134, &qword_10031F328);
    v140 = static Edge.Set.bottom.getter(v139);
    v141 = v240;
    sub_10000B234(v115, (uint64_t)v240, &qword_10031F330);
    v142 = &v141[*(int *)(v241 + 36)];
    *v142 = v140;
    *(_OWORD *)(v142 + 8) = 0u;
    *(_OWORD *)(v142 + 24) = 0u;
    v142[40] = 1;
    sub_100007FF0(v115, &qword_10031F330);
    sub_10000B458((uint64_t)v141, (uint64_t)v280, &qword_10031F338);
    v144 = v232;
    v143 = v233;
    *(_QWORD *)&v281 = v233;
    *((_QWORD *)&v281 + 1) = v232;
    v145 = swift_bridgeObjectRetain(v232);
    v146 = Text.init<A>(_:)(&v281, &type metadata for String, v231, v145);
    v148 = v147;
    v150 = v149;
    *(_QWORD *)&v281 = v146;
    *((_QWORD *)&v281 + 1) = v147;
    v152 = v151 & 1;
    LOBYTE(v282) = v151 & 1;
    *((_QWORD *)&v282 + 1) = v149;
    swift_bridgeObjectRelease(v144);
    v153 = HIBYTE(v144) & 0xF;
    if ((v144 & 0x2000000000000000) == 0)
      v153 = v143 & 0xFFFFFFFFFFFFLL;
    v154 = (uint64_t)v250;
    View.accessibility(hidden:)(v153 == 0, &type metadata for Text, &protocol witness table for Text);
    sub_10002B438(v146, v148, v152);
    swift_bridgeObjectRelease(v150);
    v155 = *(_QWORD *)(v119 + 72);
    v156 = *(_QWORD *)(v119 + 80);
    v157 = v234;
    sub_100007BBC(v234, v155);
    v158 = (*(uint64_t (**)(uint64_t, uint64_t))(v156 + 48))(v155, v156);
    v159 = swift_getKeyPath(&unk_100255348);
    v160 = v253;
    sub_10000B234(v154, (uint64_t)v253, &qword_100319970);
    v161 = (uint64_t *)&v160[*(int *)(v248 + 36)];
    *v161 = v159;
    v161[1] = v158;
    sub_100007FF0(v154, &qword_100319970);
    v162 = *(_QWORD *)(v119 + 72);
    v163 = *(_QWORD *)(v119 + 80);
    sub_100007BBC(v157, v162);
    v164 = (*(uint64_t (**)(uint64_t, uint64_t))(v163 + 64))(v162, v163);
    v165 = swift_getKeyPath(&unk_100255378);
    v166 = v256;
    sub_10000B234((uint64_t)v160, (uint64_t)v256, &qword_10031F2E8);
    v167 = (uint64_t *)&v166[*(int *)(v251 + 36)];
    *v167 = v165;
    v167[1] = v164;
    sub_100007FF0((uint64_t)v160, &qword_10031F2E8);
    v168 = *(id *)(v119 + 112);
    v169 = v279;
    LOBYTE(v165) = static UIContentSizeCategory.>= infix(_:_:)(v168, v279);

    v170 = swift_getKeyPath(&unk_1002552E8);
    v171 = v261;
    sub_10000B234((uint64_t)v166, (uint64_t)v261, &qword_10031F2F0);
    v172 = &v171[*(int *)(v254 + 36)];
    *(_QWORD *)v172 = v170;
    v172[8] = (v165 & 1) == 0;
    sub_100007FF0((uint64_t)v166, &qword_10031F2F0);
    v173 = *(id *)(v119 + 112);
    v174 = static Alignment.center.getter(v173);
    v176 = v175;
    v177 = static UIContentSizeCategory.>= infix(_:_:)(v173, v169);
    if ((v177 & 1) != 0)
    {
      v178 = static Alignment.center.getter(v177);
      v180 = static Alignment.== infix(_:_:)(v174, v176, v178, v179);
      if ((v180 & 1) != 0)
      {
        v174 = static Alignment.leading.getter(v180, v181);
        v176 = v182;
      }
    }

    v183 = v264;
    sub_100132678(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v264, 0.0, 1, 0.0, 1, v174, v176);
    sub_100007FF0((uint64_t)v171, &qword_10031F2F8);
    v184 = *(id *)(v119 + 112);
    v185 = static UIContentSizeCategory.>= infix(_:_:)(v184, v279);

    if ((v185 & 1) != 0)
      v186 = 1.0;
    else
      v186 = 0.5;
    v187 = swift_getKeyPath(&unk_100255318);
    v188 = v269;
    sub_10000B234((uint64_t)v183, (uint64_t)v269, &qword_10031F300);
    v189 = (double *)&v188[*(int *)(v263 + 36)];
    *(_QWORD *)v189 = v187;
    v189[1] = v186;
    sub_100007FF0((uint64_t)v183, &qword_10031F300);
    v190 = sub_100007BBC(v128, v128[3]);
    v191 = *v190;
    v279 = *(_OWORD *)(*v190 + 184);
    v192 = *(_QWORD *)(v191 + 200);
    v193 = *(_QWORD *)(v191 + 208);
    LOBYTE(v187) = static Edge.Set.all.getter(*(double *)&v279);
    v194 = v270;
    sub_10000B234((uint64_t)v188, (uint64_t)v270, &qword_10031F308);
    v195 = &v194[*(int *)(v265 + 36)];
    *v195 = v187;
    *(_OWORD *)(v195 + 8) = v279;
    *((_QWORD *)v195 + 3) = v192;
    *((_QWORD *)v195 + 4) = v193;
    v195[40] = 0;
    v196 = sub_100007FF0((uint64_t)v188, &qword_10031F308);
    LOBYTE(v187) = static Edge.Set.top.getter(v196);
    v197 = v271;
    sub_10000B234((uint64_t)v194, (uint64_t)v271, &qword_10031F310);
    v198 = &v197[*(int *)(v266 + 36)];
    *v198 = v187;
    *(_OWORD *)(v198 + 8) = 0u;
    *(_OWORD *)(v198 + 24) = 0u;
    v198[40] = 1;
    v199 = sub_100007FF0((uint64_t)v194, &qword_10031F310);
    LOBYTE(v187) = static Edge.Set.bottom.getter(v199);
    v200 = v267;
    sub_10000B234((uint64_t)v197, (uint64_t)v267, &qword_10031F318);
    v201 = &v200[*(int *)(v268 + 36)];
    *v201 = v187;
    *(_OWORD *)(v201 + 8) = 0u;
    *(_OWORD *)(v201 + 24) = 0u;
    v201[40] = 1;
    sub_100007FF0((uint64_t)v197, &qword_10031F318);
    v202 = v272;
    sub_10000B458((uint64_t)v200, (uint64_t)v272, &qword_10031F320);
    v203 = v277;
    sub_10000B234((uint64_t)v280, (uint64_t)v277, &qword_10031F338);
    sub_10000B234((uint64_t)v202, (uint64_t)v278, &qword_10031F320);
    v204 = v274;
    v205 = v276;
    v206 = v257;
    v207 = v258;
    *v274 = v276;
    v204[1] = v206;
    v208 = v255;
    v204[2] = v275;
    v204[3] = v208;
    v209 = v262;
    v210 = v252;
    v204[4] = v262;
    v204[5] = v210;
    v212 = v259;
    v211 = v260;
    v213 = v249;
    v204[6] = v260;
    v204[7] = v213;
    v214 = v247;
    v204[8] = v212;
    v204[9] = v214;
    v215 = v246;
    v204[10] = v207;
    v204[11] = v215;
    *((_BYTE *)v204 + 96) = 0;
    v204[13] = 0;
    v216 = sub_100003DB8(&qword_10031F340);
    sub_10000B234((uint64_t)v203, (uint64_t)v204 + *(int *)(v216 + 48), &qword_10031F338);
    v217 = v278;
    sub_10000B234((uint64_t)v278, (uint64_t)v204 + *(int *)(v216 + 64), &qword_10031F320);
    swift_retain_n(v207, v218);
    swift_retain_n(v205, v219);
    v220 = v275;
    swift_retain_n(v275, v221);
    swift_retain_n(v209, v222);
    swift_retain_n(v211, v223);
    swift_retain_n(v212, v224);
    sub_100007FF0((uint64_t)v202, &qword_10031F320);
    sub_100007FF0((uint64_t)v280, &qword_10031F338);
    swift_release(v207);
    swift_release(v212);
    swift_release(v211);
    swift_release(v209);
    swift_release(v220);
    v225 = v276;
    swift_release(v276);
    sub_100007FF0((uint64_t)v217, &qword_10031F320);
    sub_100007FF0((uint64_t)v277, &qword_10031F338);
    swift_release(v207);
    swift_release(v212);
    swift_release(v211);
    swift_release(v209);
    swift_release(v220);
    return swift_release(v225);
  }
  else
  {
    result = EnvironmentObject.error()(0, *(_QWORD *)(a1 + 40), v63, v64);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000E8408@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;

  result = static HorizontalAlignment.center.getter();
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 0;
  return result;
}

uint64_t sub_1000E8430@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t result;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v46 = a2;
  v45 = sub_100003DB8(&qword_10031F208);
  __chkstk_darwin(v45, v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8(&qword_10031F210);
  v44 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_10031F218);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v43 - v16;
  v18 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100003DB8(&qword_100319208);
  v23 = *(_QWORD *)(v22 - 8);
  v25 = __chkstk_darwin(v22, v24);
  v27 = (char *)&v43 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.principal.getter(v25);
  v28 = ToolbarItem<>.init(placement:content:)(v21, sub_1000E8808, 0, &type metadata for Text, &protocol witness table for Text);
  v29 = *(_QWORD *)(a1 + 16);
  if (v29)
  {
    if ((*(_BYTE *)(v29 + 40) & 1) != 0)
    {
      static ToolbarItemPlacement.navigationBarTrailing.getter(v28);
      v30 = sub_1000E8F7C();
      ToolbarItem<>.init(placement:content:)(v21, sub_1000E57EC, 0, &type metadata for DismissEndSessionScreenButtonView, v30);
      v31 = sub_1000084FC(&qword_10031F228, &qword_10031F210, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
      static ToolbarContentBuilder.buildBlock<A>(_:)(v9, v6, v31);
      v32 = sub_100003DB8(&qword_10031F220);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v14, 0, 1, v32);
      v47 = v6;
      v48 = v31;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v47, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
      static ToolbarContentBuilder.buildIf<A>(_:)(v14, v32, OpaqueTypeConformance2);
      sub_100007FF0((uint64_t)v14, &qword_10031F218);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v6);
    }
    else
    {
      v34 = sub_100003DB8(&qword_10031F220);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v14, 1, 1, v34);
      v35 = sub_1000084FC(&qword_10031F228, &qword_10031F210, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
      v47 = v6;
      v48 = v35;
      v36 = swift_getOpaqueTypeConformance2(&v47, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
      static ToolbarContentBuilder.buildIf<A>(_:)(v14, v34, v36);
      sub_100007FF0((uint64_t)v14, &qword_10031F218);
    }
    v37 = v45;
    v38 = (uint64_t)&v5[*(int *)(v45 + 48)];
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v5, v27, v22);
    sub_10000B234((uint64_t)v17, v38, &qword_10031F218);
    TupleToolbarContent.init(_:)(v5, v37);
    sub_100007FF0((uint64_t)v17, &qword_10031F218);
    return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v27, v22);
  }
  else
  {
    v40 = *(_QWORD *)(a1 + 24);
    v41 = type metadata accessor for AppRuntimeStateModel();
    v42 = sub_1000052EC(&qword_100318498, (uint64_t (*)(uint64_t))type metadata accessor for AppRuntimeStateModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v40, v41, v42);
    __break(1u);
  }
  return result;
}

void sub_1000E8808(uint64_t a1@<X8>)
{
  sub_1000E8840(0xD000000000000014, (void *)0x8000000100262000, 0xD00000000000008ALL, (void *)0x8000000100262020, a1);
}

void sub_1000E8840(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  id v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;

  v10 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v32._object = a4;
  v11._countAndFlagsBits = a1;
  v11._object = a2;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v32._countAndFlagsBits = a3;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v32);

  v31 = v13;
  v14 = sub_10002B3F4();
  v16 = Text.init<A>(_:)(&v31, &type metadata for String, v14, v15);
  v18 = v17;
  v20 = v19;
  v22 = v21 & 1;
  v23 = static Font.headline.getter(v16);
  v24 = Text.font(_:)(v23, v16, v18, v22, v20);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  swift_release(v23);
  sub_10002B438(v16, v18, v22);
  swift_bridgeObjectRelease(v20);
  *(_QWORD *)a5 = v24;
  *(_QWORD *)(a5 + 8) = v26;
  *(_BYTE *)(a5 + 16) = v28 & 1;
  *(_QWORD *)(a5 + 24) = v30;
}

uint64_t sub_1000E8974@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = type metadata accessor for AppEvents();
  v3 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  result = EnvironmentObject.init()(v2, v3);
  *a1 = result;
  a1[1] = v5;
  return result;
}

uint64_t sub_1000E89C8@<X0>(uint64_t a1@<X8>)
{
  return sub_1000E6D28(a1);
}

uint64_t sub_1000E8A08(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029A0F4, 1);
}

uint64_t sub_1000E8A18(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029A0CC, 1);
}

uint64_t sub_1000E8A28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000E5AD4(*(__int128 **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t sub_1000E8A38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000E5E90(v1 + 16, (_QWORD *)(v1 + 64), a1);
}

uint64_t sub_1000E8A48()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[7]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 8);
  return swift_deallocObject(v0, 104, 7);
}

void sub_1000E8A8C(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1000E682C((__int128 *)(v1 + 16), (_QWORD *)(v1 + 64), a1);
}

uint64_t sub_1000E8A98()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000E8AD4()
{
  uint64_t v0;

  return sub_1000E6B1C((_QWORD *)(v0 + 16));
}

uint64_t sub_1000E8AEC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 256);
  v3 = *(_QWORD *)(a1 + 264);
  v4 = *(_BYTE *)(a1 + 272);
  v5 = *(_QWORD *)(a1 + 280);
  v6 = *(_QWORD *)(a1 + 288);
  v7 = *(_QWORD *)(a1 + 416);
  swift_retain(*(_QWORD *)(a1 + 24));
  sub_10002B750(v2, v3, v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t sub_1000E8B68(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 256);
  v3 = *(_QWORD *)(a1 + 264);
  v4 = *(_BYTE *)(a1 + 272);
  v5 = *(_QWORD *)(a1 + 280);
  v6 = *(_QWORD *)(a1 + 288);
  v7 = *(_QWORD *)(a1 + 416);
  swift_release(*(_QWORD *)(a1 + 24));
  sub_10002B438(v2, v3, v4);
  swift_release(v7);
  swift_release(v6);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_1000E8BE4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000E8C0C(_QWORD *a1)
{
  __n128 v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_1000E8C44@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000E3110(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000E8C4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v1 = type metadata accessor for SOSConnectionEndedView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v12 = *(_QWORD *)(v2 + 64);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  swift_release(*(_QWORD *)(v0 + v4 + 32));
  swift_release(*(_QWORD *)(v0 + v4 + 48));
  v5 = v0 + v4 + *(int *)(v1 + 32);
  v6 = type metadata accessor for ConnectionClosed(0);
  v7 = v5 + *(int *)(v6 + 20);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + *(int *)(v6 + 24)));
  v10 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 36));
  swift_bridgeObjectRelease(*v10);
  swift_release(v10[1]);
  return swift_deallocObject(v0, v4 + v12, v3 | 7);
}

uint64_t sub_1000E8D6C(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

double sub_1000E8DB0@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  double result;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SOSConnectionEndedView(0) - 8) + 80);
  *(_QWORD *)&result = sub_1000E34DC((_QWORD *)(v1 + 16), v1 + ((v3 + 56) & (unint64_t)~v3), a1).n128_u64[0];
  return result;
}

uint64_t sub_1000E8DF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  v1 = type metadata accessor for SOSConnectionEndedView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v14 = *(_QWORD *)(v2 + 64);
  v5 = v0 + v4;
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  swift_release(*(_QWORD *)(v0 + v4 + 32));
  swift_release(*(_QWORD *)(v0 + v4 + 48));
  v6 = v0 + v4 + *(int *)(v1 + 32);
  v7 = type metadata accessor for ConnectionClosed(0);
  v8 = v6 + *(int *)(v7 + 20);
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  v11 = (v14 + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v7 + 24)));
  v12 = (_QWORD *)(v5 + *(int *)(v1 + 36));
  swift_bridgeObjectRelease(*v12);
  swift_release(v12[1]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((_QWORD *)(v0 + v11));
  return swift_deallocObject(v0, v11 + 40, v3 | 7);
}

double sub_1000E8F1C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  v3 = *(_QWORD *)(type metadata accessor for SOSConnectionEndedView(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1000E4990(v1 + v4, (_QWORD *)(v1 + ((*(_QWORD *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8)), a1);
}

uint64_t sub_1000E8F6C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000E5254(*(_QWORD *)(v1 + 16), a1);
}

void sub_1000E8F74(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_1000E5688(*(_QWORD *)(v1 + 16), a1);
}

unint64_t sub_1000E8F7C()
{
  unint64_t result;

  result = qword_10031F230;
  if (!qword_10031F230)
  {
    result = swift_getWitnessTable(&unk_100252E34, &type metadata for DismissEndSessionScreenButtonView);
    atomic_store(result, (unint64_t *)&qword_10031F230);
  }
  return result;
}

double sub_1000E8FC0(uint64_t a1)
{
  double result;

  *(_QWORD *)(a1 + 112) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 122) = -1;
  *(_WORD *)(a1 + 120) = 0;
  return result;
}

uint64_t sub_1000E8FE8(uint64_t result)
{
  *(_BYTE *)(result + 122) = 1;
  return result;
}

unint64_t sub_1000E8FF4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031F258;
  if (!qword_10031F258)
  {
    v1 = sub_100007FAC(&qword_10031F248);
    sub_10002B614(&qword_10031F260, &qword_10031F268, (void (*)(void))sub_1000E9078);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031F258);
  }
  return result;
}

uint64_t sub_1000E9078()
{
  return sub_10002B614(&qword_10031F270, &qword_10031F278, (void (*)(void))sub_1000CA3B4);
}

uint64_t sub_1000E909C()
{
  return sub_10002B614(&qword_10031F288, &qword_10031F290, (void (*)(void))sub_1000E90C0);
}

unint64_t sub_1000E90C0()
{
  unint64_t result;

  result = qword_10031F298;
  if (!qword_10031F298)
  {
    result = swift_getWitnessTable(&unk_10025FDC8, &type metadata for ShowFindMyButtonView);
    atomic_store(result, (unint64_t *)&qword_10031F298);
  }
  return result;
}

uint64_t sub_1000E9104()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v1 = type metadata accessor for SOSConnectionEndedView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v12 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  swift_release(*(_QWORD *)(v0 + v4 + 32));
  swift_release(*(_QWORD *)(v0 + v4 + 48));
  v5 = v0 + v4 + *(int *)(v1 + 32);
  v6 = type metadata accessor for ConnectionClosed(0);
  v7 = v5 + *(int *)(v6 + 20);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + *(int *)(v6 + 24)));
  v10 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 36));
  swift_bridgeObjectRelease(*v10);
  swift_release(v10[1]);
  return swift_deallocObject(v0, ((v12 + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1000E9228()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for SOSConnectionEndedView(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1000CA2B0((uint64_t *)(v0 + v2), *(_QWORD *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1000E9268(uint64_t result)
{
  *(_BYTE *)(result + 121) = 1;
  return result;
}

uint64_t sub_1000E9274(uint64_t result)
{
  *(_BYTE *)(result + 122) = 0;
  return result;
}

uint64_t sub_1000E927C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;

  v1 = type metadata accessor for SOSConnectionEndedView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v12 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  swift_release(*(_QWORD *)(v0 + v4 + 32));
  swift_release(*(_QWORD *)(v0 + v4 + 48));
  v5 = v0 + v4 + *(int *)(v1 + 32);
  v6 = type metadata accessor for ConnectionClosed(0);
  v7 = v5 + *(int *)(v6 + 20);
  v8 = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + *(int *)(v6 + 24)));
  v10 = (_QWORD *)(v0 + v4 + *(int *)(v1 + 36));
  swift_bridgeObjectRelease(*v10);
  swift_release(v10[1]);
  return swift_deallocObject(v0, v4 + v12, v3 | 7);
}

uint64_t sub_1000E9394()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for SOSConnectionEndedView(0) - 8) + 80);
  return sub_1000CA1D0((uint64_t *)(v0 + ((v1 + 16) & ~v1)));
}

uint64_t sub_1000E93C0(uint64_t result)
{
  *(_BYTE *)(result + 121) = 0;
  return result;
}

uint64_t sub_1000E93D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.foregroundColor.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000E93F8(_QWORD *a1)
{
  __n128 v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.foregroundColor.setter(v1);
}

uint64_t sub_1000E9420@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000E9450@<X0>(uint64_t a1@<X8>)
{
  uint64_t result;
  char v3;

  result = EnvironmentValues.lineLimit.getter();
  *(_QWORD *)a1 = result;
  *(_BYTE *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t sub_1000E9480(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1000E94AC(uint64_t a1)
{
  return EnvironmentValues.lineLimit.setter(*(_QWORD *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_1000E94D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 184);
  v9 = *(_QWORD *)(a1 + 312);
  sub_10002B750(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

double sub_1000E9580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;

  if (a1 != 1)
  {
    swift_retain(a5);
    swift_retain(a1);
    *(_QWORD *)&result = swift_retain(a3).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000E95C0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result != 1)
  {
    swift_release(result);
    swift_release(a3);
    return swift_release(a5);
  }
  return result;
}

uint64_t sub_1000E95FC(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v8;

  v8 = *(_BYTE *)(a1 + 312);
  v6 = *(_OWORD *)(a1 + 272);
  v7 = *(_OWORD *)(a1 + 288);
  v4 = *(_OWORD *)(a1 + 240);
  v5 = *(_OWORD *)(a1 + 256);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    v4,
    *((_QWORD *)&v4 + 1),
    v5,
    *((_QWORD *)&v5 + 1),
    v6,
    *((_QWORD *)&v6 + 1),
    v7,
    *((_QWORD *)&v7 + 1),
    *(_QWORD *)(a1 + 304),
    v8);
  return a1;
}

double sub_1000E9690(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  *(_OWORD *)((char *)a1 + 297) = 0u;
  return result;
}

uint64_t sub_1000E96C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000E6FA4(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1000E96D0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[9]);
  swift_release(v0[10]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 11);
  return swift_deallocObject(v0, 128, 7);
}

uint64_t sub_1000E971C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000E725C(v1 + 16, (_QWORD *)(v1 + 88), a1);
}

uint64_t *sub_1000E9728(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[7];
  swift_retain(a1[8]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t sub_1000E978C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000E8430(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000E9794()
{
  return sub_1000084FC(&qword_10031F348, &qword_10031F350, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
}

uint64_t sub_1000E97C0()
{
  return sub_1000084FC(&qword_10031F358, &qword_10031F360, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
}

uint64_t sub_1000E97EC()
{
  return sub_1000084FC(&qword_10031F368, &qword_10031F370, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
}

ValueMetadata *type metadata accessor for ExplorerTryOutConnectionToolbarView()
{
  return &type metadata for ExplorerTryOutConnectionToolbarView;
}

uint64_t sub_1000E9828(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029A160, 1);
}

uint64_t sub_1000E9838()
{
  uint64_t result;

  result = sub_100093708(0x7EFFFFu);
  qword_10033FF70 = result;
  return result;
}

uint64_t sub_1000E9858@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void *v14;
  char v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  double v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD v48[73];
  char v49;
  _BYTE v50[584];
  uint64_t v51;
  uint64_t v52;
  char v53;
  _BYTE v54[351];
  __int128 v55;
  __int128 v56;
  char v57;
  _BYTE v58[336];
  _BYTE v59[352];
  _BYTE v60[528];

  v47 = a3;
  v44 = sub_100003DB8(&qword_100316A20);
  __chkstk_darwin(v44, v5);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_10031F378);
  v45 = *(_QWORD *)(v8 - 8);
  v46 = v8;
  v10 = __chkstk_darwin(v8, v9);
  v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = static VerticalAlignment.center.getter(v10);
  sub_1000E9C10(a1, (uint64_t)a2, (uint64_t)v58);
  v59[336] = 0;
  v14 = memcpy(&v59[7], v58, 0x149uLL);
  v15 = static Edge.Set.horizontal.getter(v14);
  v59[344] = 1;
  v51 = v13;
  v52 = 0;
  v53 = 0;
  v16 = memcpy(v54, v59, 0x150uLL);
  v54[343] = v15;
  v55 = 0u;
  v56 = 0u;
  v57 = 1;
  v17 = static Alignment.center.getter(v16);
  sub_1001326D0(0, 1, 0.0, 1, INFINITY, 0, 0x404C000000000000uLL, 0, (uint64_t)v60, v19, 0.0, 1, 0.0, 1, v17, v18);
  v20 = sub_1000EA330((uint64_t)v58);
  v21 = static Edge.Set.top.getter(v20);
  if (a1)
  {
    v22 = v21;
    v23 = qword_100315788;
    swift_retain(a1);
    if (v23 != -1)
      swift_once(&qword_100315788, sub_10006F500);
    v24 = *(double *)&xmmword_10033FC40;
    swift_release(a1);
    v25 = EdgeInsets.init(_all:)(v24);
    v27 = v26;
    v29 = v28;
    v31 = v30;
    v49 = 0;
    if (qword_1003158E8 != -1)
      swift_once(&qword_1003158E8, sub_1000E9838);
    v32 = qword_10033FF70;
    *(_QWORD *)&v33 = swift_retain(qword_10033FF70).n128_u64[0];
    v34 = static Edge.Set.all.getter(v33);
    memcpy(v48, v60, 0x208uLL);
    LOBYTE(v48[65]) = v22;
    *(double *)&v48[66] = v25;
    v48[67] = v27;
    v48[68] = v29;
    v48[69] = v31;
    LOBYTE(v48[70]) = v49;
    v48[71] = v32;
    LOBYTE(v48[72]) = v34;
    v35 = enum case for DynamicTypeSize.xLarge(_:);
    v36 = type metadata accessor for DynamicTypeSize(0);
    a2 = &type metadata accessor for DynamicTypeSize;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 104))(v7, v35, v36);
    v37 = sub_1000052EC(&qword_100316A30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v7, v7, v36, v37) & 1) != 0)
    {
      v38 = sub_100003DB8(&qword_10031F380);
      v39 = sub_1000EA418();
      v40 = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
      View.dynamicTypeSize<A>(_:)(v7, v38, v44, v39, v40);
      sub_1000EA564((uint64_t)v7);
      memcpy(v50, v48, 0x241uLL);
      sub_1000EA5A4((uint64_t)v50);
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v45 + 32))(v47, v12, v46);
    }
    __break(1u);
  }
  v42 = type metadata accessor for UIMetrics();
  v43 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, a2, v42, v43);
  __break(1u);
  return result;
}

uint64_t sub_1000E9C10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  _OWORD v41[7];
  _OWORD v42[2];
  _BYTE v43[145];
  char v44;
  char v45;
  __int128 v46;
  _BYTE v47[160];
  __int128 v48;
  __int128 v49;
  char v50;
  char v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  char v65;
  char v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;

  v6 = static HorizontalAlignment.leading.getter(a1);
  sub_1000E9F30(a1, a2, (uint64_t)v41);
  *(_OWORD *)&v43[87] = v41[5];
  *(_OWORD *)&v43[103] = v41[6];
  *(_OWORD *)&v43[119] = v42[0];
  *(_OWORD *)&v43[129] = *(_OWORD *)((char *)v42 + 10);
  *(_OWORD *)&v43[23] = v41[1];
  *(_OWORD *)&v43[39] = v41[2];
  *(_OWORD *)&v43[55] = v41[3];
  *(_OWORD *)&v43[71] = v41[4];
  v44 = 0;
  *(_OWORD *)&v43[7] = v41[0];
  v40 = static Edge.Set.bottom.getter(v7);
  v8 = EdgeInsets.init(_all:)(4.0);
  v10 = v9;
  v12 = v11;
  v14 = v13;
  v45 = 0;
  if (qword_1003158E8 != -1)
    swift_once(&qword_1003158E8, sub_1000E9838);
  v15 = qword_10033FF70;
  v16 = type metadata accessor for AppEvents();
  v17 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  swift_retain(v15);
  v18 = EnvironmentObject.init()(v16, v17);
  v38 = v19;
  v39 = v18;
  v20 = type metadata accessor for TryOutModel(0);
  v21 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
  v37 = EnvironmentObject.init()(v20, v21);
  v23 = v22;
  LOBYTE(v46) = 0;
  v24 = State.init(wrappedValue:)(&v53, &v46, &type metadata for Bool);
  v25 = v53;
  v26 = v54;
  v27 = static Edge.Set.leading.getter(v24);
  v46 = (unint64_t)v6;
  v47[0] = 0;
  *(_OWORD *)&v47[97] = *(_OWORD *)&v43[96];
  *(_OWORD *)&v47[113] = *(_OWORD *)&v43[112];
  *(_OWORD *)&v47[129] = *(_OWORD *)&v43[128];
  v47[145] = v43[144];
  *(_OWORD *)&v47[33] = *(_OWORD *)&v43[32];
  *(_OWORD *)&v47[49] = *(_OWORD *)&v43[48];
  *(_OWORD *)&v47[65] = *(_OWORD *)&v43[64];
  *(_OWORD *)&v47[81] = *(_OWORD *)&v43[80];
  *(_OWORD *)&v47[1] = *(_OWORD *)v43;
  *(_OWORD *)&v47[17] = *(_OWORD *)&v43[16];
  v28 = v6;
  v29 = v45;
  v47[152] = v40;
  *(double *)&v48 = v8;
  *((_QWORD *)&v48 + 1) = v10;
  *(_QWORD *)&v49 = v12;
  *((_QWORD *)&v49 + 1) = v14;
  v50 = v45;
  *(_BYTE *)(a3 + 208) = v45;
  v30 = *(_OWORD *)&v47[96];
  *(_OWORD *)(a3 + 96) = *(_OWORD *)&v47[80];
  *(_OWORD *)(a3 + 112) = v30;
  v31 = *(_OWORD *)&v47[128];
  *(_OWORD *)(a3 + 128) = *(_OWORD *)&v47[112];
  *(_OWORD *)(a3 + 144) = v31;
  v32 = *(_OWORD *)&v47[32];
  *(_OWORD *)(a3 + 32) = *(_OWORD *)&v47[16];
  *(_OWORD *)(a3 + 48) = v32;
  v33 = *(_OWORD *)&v47[64];
  *(_OWORD *)(a3 + 64) = *(_OWORD *)&v47[48];
  *(_OWORD *)(a3 + 80) = v33;
  v34 = *(_OWORD *)v47;
  *(_OWORD *)a3 = v46;
  *(_OWORD *)(a3 + 16) = v34;
  v35 = v48;
  *(_OWORD *)(a3 + 160) = *(_OWORD *)&v47[144];
  *(_OWORD *)(a3 + 176) = v35;
  *(_OWORD *)(a3 + 192) = v49;
  v52 = 1;
  v51 = 1;
  *(_QWORD *)(a3 + 216) = 0;
  *(_BYTE *)(a3 + 224) = 1;
  *(_QWORD *)(a3 + 232) = v39;
  *(_QWORD *)(a3 + 240) = v38;
  *(_QWORD *)(a3 + 248) = v37;
  *(_QWORD *)(a3 + 256) = v23;
  *(_QWORD *)(a3 + 264) = v15;
  *(_BYTE *)(a3 + 272) = v25;
  *(_QWORD *)(a3 + 280) = v26;
  *(_BYTE *)(a3 + 288) = v27;
  *(_OWORD *)(a3 + 296) = 0u;
  *(_OWORD *)(a3 + 312) = 0u;
  *(_BYTE *)(a3 + 328) = 1;
  sub_1000EA6A0((uint64_t)&v46);
  v62 = *(_OWORD *)&v43[96];
  v63 = *(_OWORD *)&v43[112];
  v64 = *(_OWORD *)&v43[128];
  v58 = *(_OWORD *)&v43[32];
  v59 = *(_OWORD *)&v43[48];
  v60 = *(_OWORD *)&v43[64];
  v61 = *(_OWORD *)&v43[80];
  v56 = *(_OWORD *)v43;
  v53 = v28;
  v54 = 0;
  v55 = 0;
  v65 = v43[144];
  v57 = *(_OWORD *)&v43[16];
  v66 = v40;
  v67 = v8;
  v68 = v10;
  v69 = v12;
  v70 = v14;
  v71 = v29;
  return sub_1000EA748((uint64_t)&v53);
}

void sub_1000E9F30(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  unint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  id v24;
  char v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  char v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t KeyPath;
  uint64_t v55;
  uint64_t v56;
  Swift::String v57;
  Swift::String v58;

  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v58._countAndFlagsBits = 0xD00000000000004DLL;
  v58._object = (void *)0x80000001002637B0;
  v7._object = (void *)0x8000000100263790;
  v7._countAndFlagsBits = 0xD000000000000019;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v58);

  v57 = v9;
  v10 = sub_10002B3F4();
  v12 = Text.init<A>(_:)(&v57, &type metadata for String, v10, v11);
  v14 = v13;
  v16 = v15;
  v18 = v17 & 1;
  v19 = static Font.headline.getter(v12);
  v55 = Text.font(_:)(v19, v12, v14, v18, v16);
  v56 = v20;
  v53 = v21;
  v23 = v22;
  swift_release(v19);
  sub_10002B438(v12, v14, v18);
  swift_bridgeObjectRelease(v16);
  KeyPath = swift_getKeyPath(&unk_100255458);
  if (a1)
  {
    v52 = v23 & 1;
    v24 = *(id *)(a1 + 112);
    v25 = static UIContentSizeCategory.>= infix(_:_:)(v24, UIContentSizeCategoryAccessibilityExtraLarge);

    v26 = 0.5;
    if ((v25 & 1) != 0)
      v27 = 1.0;
    else
      v27 = 0.5;
    v28 = swift_getKeyPath(&unk_100255488);
    v29 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001DLL, 0x80000001002693A0);
    v30 = Text.init(_:tableName:bundle:comment:)(v29);
    v32 = v31;
    v34 = v33;
    v35 = a1;
    v37 = v36 & 1;
    v38 = static Font.caption.getter(v30, v31);
    v50 = Text.font(_:)(v38, v30, v32, v37, v34);
    v51 = v39;
    v41 = v40;
    v43 = v42;
    swift_release(v38);
    v44 = v43 & 1;
    sub_10002B438(v30, v32, v37);
    swift_bridgeObjectRelease(v34);
    v45 = swift_getKeyPath(&unk_100255458);
    v46 = *(id *)(v35 + 112);
    LOBYTE(v34) = static UIContentSizeCategory.>= infix(_:_:)(v46, UIContentSizeCategoryAccessibilityExtraLarge);

    if ((v34 & 1) != 0)
      v26 = 1.0;
    v47 = swift_getKeyPath(&unk_100255488);
    LOBYTE(v57._countAndFlagsBits) = v52;
    *(_QWORD *)a3 = v55;
    *(_QWORD *)(a3 + 8) = v53;
    *(_BYTE *)(a3 + 16) = v52;
    *(_QWORD *)(a3 + 24) = v56;
    *(_QWORD *)(a3 + 32) = KeyPath;
    *(_BYTE *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 48) = v28;
    *(double *)(a3 + 56) = v27;
    *(_WORD *)(a3 + 64) = 256;
    *(_QWORD *)(a3 + 72) = v50;
    *(_QWORD *)(a3 + 80) = v41;
    *(_BYTE *)(a3 + 88) = v44;
    *(_QWORD *)(a3 + 96) = v51;
    *(_QWORD *)(a3 + 104) = v45;
    *(_BYTE *)(a3 + 112) = 0;
    *(_QWORD *)(a3 + 120) = v47;
    *(double *)(a3 + 128) = v26;
    *(_WORD *)(a3 + 136) = 256;
    sub_10002B750(v55, v53, v52);
    swift_bridgeObjectRetain(v56);
    swift_retain(KeyPath);
    swift_retain(v28);
    sub_10002B750(v50, v41, v44);
    swift_bridgeObjectRetain(v51);
    swift_retain(v45);
    swift_retain(v47);
    sub_10002B438(v50, v41, v44);
    swift_release(v47);
    swift_release(v45);
    swift_bridgeObjectRelease(v51);
    sub_10002B438(v55, v53, v52);
    swift_release(v28);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v56);
  }
  else
  {
    v48 = type metadata accessor for UIMetrics();
    v49 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, a2, v48, v49);
    __break(1u);
  }
}

uint64_t sub_1000EA328@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000E9858(*(_QWORD *)v1, *(void **)(v1 + 8), a1);
}

uint64_t sub_1000EA330(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_BYTE *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 128);
  v9 = *(_QWORD *)(a1 + 144);
  v12 = *(_QWORD *)(a1 + 120);
  v13 = *(_QWORD *)(a1 + 232);
  v10 = *(_QWORD *)(a1 + 264);
  v14 = *(_QWORD *)(a1 + 248);
  v15 = *(_QWORD *)(a1 + 280);
  sub_10002B438(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  sub_10002B438(v5, v6, v7);
  swift_release(v10);
  swift_release(v9);
  swift_release(v8);
  swift_bridgeObjectRelease(v12);
  swift_release(v13);
  swift_release(v14);
  swift_release(v15);
  return a1;
}

unint64_t sub_1000EA418()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031F388;
  if (!qword_10031F388)
  {
    v1 = sub_100007FAC(&qword_10031F380);
    sub_10002B614(&qword_10031F390, &qword_10031F398, (void (*)(void))sub_1000EA4BC);
    sub_1000084FC(&qword_10031F3D0, &qword_10031F3D8, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031F388);
  }
  return result;
}

uint64_t sub_1000EA4BC()
{
  return sub_10002B614(&qword_10031F3A0, &qword_10031F3A8, (void (*)(void))sub_1000EA4E0);
}

unint64_t sub_1000EA4E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031F3B0;
  if (!qword_10031F3B0)
  {
    v1 = sub_100007FAC(&qword_10031F3B8);
    sub_1000084FC(&qword_10031F3C0, &qword_10031F3C8, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031F3B0);
  }
  return result;
}

uint64_t sub_1000EA564(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003DB8(&qword_100316A20);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1000EA5A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 96);
  v5 = *(_QWORD *)(a1 + 120);
  v6 = *(_QWORD *)(a1 + 128);
  v7 = *(_BYTE *)(a1 + 136);
  v12 = *(_QWORD *)(a1 + 152);
  v13 = *(_QWORD *)(a1 + 144);
  v8 = *(_QWORD *)(a1 + 168);
  v14 = *(_QWORD *)(a1 + 256);
  v15 = *(_QWORD *)(a1 + 272);
  v9 = *(_QWORD *)(a1 + 288);
  v16 = *(_QWORD *)(a1 + 304);
  v10 = *(_QWORD *)(a1 + 568);
  sub_10002B438(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  sub_10002B438(v5, v6, v7);
  swift_release(v10);
  swift_release(v9);
  swift_release(v8);
  swift_release(v12);
  swift_bridgeObjectRelease(v13);
  swift_release(v14);
  swift_release(v15);
  swift_release(v16);
  return a1;
}

uint64_t sub_1000EA6A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_BYTE *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 144);
  sub_10002B750(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  sub_10002B750(v5, v6, v7);
  swift_bridgeObjectRetain(v8);
  swift_retain(v9);
  swift_retain(v10);
  return a1;
}

uint64_t sub_1000EA748(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_BYTE *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v9 = *(_QWORD *)(a1 + 128);
  v10 = *(_QWORD *)(a1 + 144);
  sub_10002B438(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  sub_10002B438(v5, v6, v7);
  swift_release(v10);
  swift_release(v9);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t sub_1000EA800()
{
  _QWORD v1[4];

  v1[0] = sub_100007FAC(&qword_10031F380);
  v1[1] = sub_100007FAC(&qword_100316A20);
  v1[2] = sub_1000EA418();
  v1[3] = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
}

ValueMetadata *type metadata accessor for FullScreenGuidanceFindMyView()
{
  return &type metadata for FullScreenGuidanceFindMyView;
}

uint64_t sub_1000EA898(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029A1A4, 1);
}

uint64_t sub_1000EA8A8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  uint64_t v36;
  uint64_t v37;
  _QWORD v38[2];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD v50[5];

  v45 = a3;
  v5 = type metadata accessor for StackNavigationViewStyle(0);
  v43 = *(_QWORD *)(v5 - 8);
  v44 = v5;
  __chkstk_darwin(v5, v6);
  v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_10031F3E0);
  v41 = *(_QWORD *)(v9 - 8);
  v42 = v9;
  __chkstk_darwin(v9, v10);
  v12 = (char *)v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003DB8(&qword_10031F3E8);
  v39 = *(_QWORD *)(v13 - 8);
  v40 = v13;
  __chkstk_darwin(v13, v14);
  v16 = (char *)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v17 = a1 + 6;
    v19 = a1[9];
    v18 = a1[10];
    sub_100007BBC(v17, v19);
    v20 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v18 + 32))(v50, v19, v18);
    v38[1] = v38;
    __chkstk_darwin(v20, v21);
    v38[-2] = v50;
    v22 = sub_100003DB8(&qword_10031F3F0);
    v23 = sub_100007FAC(&qword_10031F3F8);
    v24 = sub_100007FAC(&qword_10031CAE0);
    v25 = sub_100007FAC(&qword_10031F400);
    v26 = sub_1000084FC(&qword_10031F408, &qword_10031F400, (uint64_t)&unk_1002525D0);
    v46 = v25;
    v47 = v26;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v28 = sub_1000084FC(&qword_10031CAF8, &qword_10031CAE0, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v46 = v23;
    v47 = v24;
    v48 = OpaqueTypeConformance2;
    v49 = v28;
    v29 = swift_getOpaqueTypeConformance2(&v46, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    v30 = NavigationView.init(content:)(sub_1000EB810, &v38[-4], v22, v29);
    StackNavigationViewStyle.init()(v30);
    v31 = sub_1000084FC(&qword_10031F410, &qword_10031F3E0, (uint64_t)&protocol conformance descriptor for NavigationView<A>);
    v32 = sub_1000052EC(&qword_10031CB08, (uint64_t (*)(uint64_t))&type metadata accessor for StackNavigationViewStyle, (uint64_t)&protocol conformance descriptor for StackNavigationViewStyle);
    v33 = v42;
    v34 = v44;
    View.navigationViewStyle<A>(_:)(v8, v42, v44, v31, v32);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v8, v34);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v12, v33);
    (*(void (**)(uint64_t, char *, uint64_t))(v39 + 32))(v45, v16, v40);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v50);
  }
  else
  {
    v36 = type metadata accessor for UIMetrics();
    v37 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v36, v37);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000EABC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t OpaqueTypeConformance2;
  uint64_t v28;
  uint64_t v30;
  __int128 v31;
  double (*v32)@<D0>(uint64_t@<X8>);
  uint64_t v33;
  double (*v34)@<D0>(uint64_t@<X8>);
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  _QWORD v38[2];
  __int128 v39;
  uint64_t v40;
  __int128 v41[3];

  v30 = a2;
  v3 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_10031F3F8);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100007CBC(a1, (uint64_t)&v31);
  v13 = swift_allocObject(&unk_1002EF990, 56, 7);
  sub_100007D04(&v31, v13 + 16);
  sub_100007CBC(a1, (uint64_t)v41);
  v14 = swift_allocObject(&unk_1002EF9B8, 56, 7);
  sub_100007D04(v41, v14 + 16);
  v15 = type metadata accessor for UIMetrics();
  v16 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v17 = EnvironmentObject.init()(v15, v16);
  v19 = v18;
  type metadata accessor for CGSize(0);
  v38[0] = 0;
  v38[1] = 0;
  State.init(wrappedValue:)(&v39, v38, v20);
  *(_QWORD *)&v31 = v17;
  *((_QWORD *)&v31 + 1) = v19;
  v32 = sub_1000EB83C;
  v33 = v13;
  v34 = sub_1000EB844;
  v35 = v14;
  v36 = v39;
  v37 = v40;
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v3);
  v21 = sub_100003DB8(&qword_10031F400);
  v22 = sub_1000084FC(&qword_10031F408, &qword_10031F400, (uint64_t)&unk_1002525D0);
  View.navigationBarTitleDisplayMode(_:)(v7, v21, v22);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v23 = v31;
  v24 = v33;
  v25 = v37;
  swift_release(v35);
  swift_release(v24);
  swift_release(v23);
  swift_release(v25);
  v26 = sub_100003DB8(&qword_10031CAE0);
  *(_QWORD *)&v31 = v21;
  *((_QWORD *)&v31 + 1) = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v31, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v28 = sub_1000084FC(&qword_10031CAF8, &qword_10031CAE0, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
  View.toolbar<A>(content:)(sub_1000EB4DC, 0, v8, v26, OpaqueTypeConformance2, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

__n128 sub_1000EAE80@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __n128 **v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __n128 result;
  __n128 v17;
  _OWORD v18[15];
  _BYTE v19[247];
  char v20;

  v4 = static HorizontalAlignment.center.getter(a1);
  sub_1000EB054((uint64_t)v18);
  *(_OWORD *)&v19[183] = v18[11];
  *(_OWORD *)&v19[199] = v18[12];
  *(_OWORD *)&v19[215] = v18[13];
  *(_OWORD *)&v19[231] = v18[14];
  *(_OWORD *)&v19[119] = v18[7];
  *(_OWORD *)&v19[135] = v18[8];
  *(_OWORD *)&v19[151] = v18[9];
  *(_OWORD *)&v19[167] = v18[10];
  *(_OWORD *)&v19[55] = v18[3];
  *(_OWORD *)&v19[71] = v18[4];
  *(_OWORD *)&v19[87] = v18[5];
  *(_OWORD *)&v19[103] = v18[6];
  *(_OWORD *)&v19[7] = v18[0];
  *(_OWORD *)&v19[23] = v18[1];
  v20 = 0;
  *(_OWORD *)&v19[39] = v18[2];
  v5 = (__n128 **)sub_100007BBC(a1, a1[3]);
  v17 = (*v5)[3];
  v6 = (*v5)[4].n128_u64[0];
  v7 = (*v5)[4].n128_u64[1];
  v8 = static Edge.Set.all.getter((*v5)[3].n128_f64[0]);
  v9 = *(_OWORD *)&v19[208];
  *(_OWORD *)(a2 + 209) = *(_OWORD *)&v19[192];
  *(_OWORD *)(a2 + 225) = v9;
  *(_OWORD *)(a2 + 241) = *(_OWORD *)&v19[224];
  v10 = *(_OWORD *)&v19[144];
  *(_OWORD *)(a2 + 145) = *(_OWORD *)&v19[128];
  *(_OWORD *)(a2 + 161) = v10;
  v11 = *(_OWORD *)&v19[176];
  *(_OWORD *)(a2 + 177) = *(_OWORD *)&v19[160];
  *(_OWORD *)(a2 + 193) = v11;
  v12 = *(_OWORD *)&v19[80];
  *(_OWORD *)(a2 + 81) = *(_OWORD *)&v19[64];
  *(_OWORD *)(a2 + 97) = v12;
  v13 = *(_OWORD *)&v19[112];
  *(_OWORD *)(a2 + 113) = *(_OWORD *)&v19[96];
  *(_OWORD *)(a2 + 129) = v13;
  v14 = *(_OWORD *)&v19[16];
  *(_OWORD *)(a2 + 17) = *(_OWORD *)v19;
  *(_OWORD *)(a2 + 33) = v14;
  v15 = *(_OWORD *)&v19[48];
  *(_OWORD *)(a2 + 49) = *(_OWORD *)&v19[32];
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 256) = *(_QWORD *)&v19[239];
  *(_OWORD *)(a2 + 65) = v15;
  *(_BYTE *)(a2 + 264) = v8;
  result = v17;
  *(__n128 *)(a2 + 272) = v17;
  *(_QWORD *)(a2 + 288) = v6;
  *(_QWORD *)(a2 + 296) = v7;
  *(_BYTE *)(a2 + 304) = 0;
  return result;
}

uint64_t sub_1000EB054@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v2 = type metadata accessor for ConnectionClosedModel(0);
  v3 = sub_1000052EC(&qword_10031CB58, type metadata accessor for ConnectionClosedModel, (uint64_t)&unk_10024D2FC);
  v60 = EnvironmentObject.init()(v2, v3);
  v61 = v4;
  v5 = type metadata accessor for ConnectivityModel();
  v6 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
  v7 = v5;
  v58 = EnvironmentObject.init()(v5, v6);
  v59 = v8;
  v9 = type metadata accessor for GuidanceModel();
  v10 = sub_1000052EC(&qword_100316B08, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceModel, (uint64_t)&unk_10024D2FC);
  v56 = EnvironmentObject.init()(v9, v10);
  v57 = v11;
  v12 = type metadata accessor for OrientationModel();
  v13 = sub_1000052EC(&qword_10031CB60, (uint64_t (*)(uint64_t))type metadata accessor for OrientationModel, (uint64_t)&unk_10024D2FC);
  v55 = EnvironmentObject.init()(v12, v13);
  v15 = v14;
  v16 = type metadata accessor for StewieModel();
  v17 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
  v53 = EnvironmentObject.init()(v16, v17);
  v54 = v18;
  v19 = type metadata accessor for UIMetrics();
  v20 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v51 = EnvironmentObject.init()(v19, v20);
  v52 = v21;
  v22 = v7;
  v49 = EnvironmentObject.init()(v7, v6);
  v50 = v23;
  v47 = EnvironmentObject.init()(v19, v20);
  v48 = v24;
  v25 = type metadata accessor for GuidanceMessagesModel();
  v26 = sub_1000052EC(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel, (uint64_t)&unk_10024D2FC);
  v27 = EnvironmentObject.init()(v25, v26);
  v45 = v28;
  v46 = v27;
  v29 = EnvironmentObject.init()(v19, v20);
  v43 = v30;
  v44 = v29;
  v31 = type metadata accessor for ConnectionModel(0);
  v32 = sub_1000052EC(&qword_100316B10, type metadata accessor for ConnectionModel, (uint64_t)&unk_10024D2FC);
  v33 = EnvironmentObject.init()(v31, v32);
  v41 = v34;
  v42 = v33;
  v35 = EnvironmentObject.init()(v22, v6);
  v37 = v36;
  v38 = EnvironmentObject.init()(v19, v20);
  *(_QWORD *)a1 = v60;
  *(_QWORD *)(a1 + 8) = v61;
  *(_QWORD *)(a1 + 16) = v58;
  *(_QWORD *)(a1 + 24) = v59;
  *(_QWORD *)(a1 + 32) = v56;
  *(_QWORD *)(a1 + 40) = v57;
  *(_QWORD *)(a1 + 48) = v55;
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v53;
  *(_QWORD *)(a1 + 72) = v54;
  *(_QWORD *)(a1 + 80) = v51;
  *(_QWORD *)(a1 + 88) = v52;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = v49;
  *(_QWORD *)(a1 + 120) = v50;
  *(_QWORD *)(a1 + 128) = v47;
  *(_QWORD *)(a1 + 136) = v48;
  *(_QWORD *)(a1 + 144) = 32;
  *(_QWORD *)(a1 + 152) = 0xE100000000000000;
  *(_QWORD *)(a1 + 160) = v46;
  *(_QWORD *)(a1 + 168) = v45;
  *(_QWORD *)(a1 + 176) = v44;
  *(_QWORD *)(a1 + 184) = v43;
  *(_QWORD *)(a1 + 192) = v42;
  *(_QWORD *)(a1 + 200) = v41;
  *(_QWORD *)(a1 + 208) = v35;
  *(_QWORD *)(a1 + 216) = v37;
  *(_QWORD *)(a1 + 224) = v38;
  *(_QWORD *)(a1 + 232) = v39;
  swift_retain(v60);
  swift_retain(v58);
  swift_retain(v56);
  swift_retain(v55);
  swift_retain(v53);
  swift_retain(v51);
  swift_retain(v49);
  swift_retain(v47);
  swift_release(v51);
  swift_release(v53);
  swift_release(v55);
  swift_release(v56);
  swift_release(v58);
  swift_release(v60);
  swift_release(v47);
  return swift_release(v49);
}

__n128 sub_1000EB3A8@<Q0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  __n128 **v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  __n128 result;
  __n128 v21;

  v4 = static HorizontalAlignment.center.getter(a1);
  v5 = type metadata accessor for AppEvents();
  v6 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  v7 = EnvironmentObject.init()(v5, v6);
  v9 = v8;
  v10 = type metadata accessor for UIMetrics();
  v11 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v12 = EnvironmentObject.init()(v10, v11);
  v14 = v13;
  v15 = static Edge.Set.top.getter(v12);
  v16 = (__n128 **)sub_100007BBC(a1, a1[3]);
  v21 = (*v16)[3];
  v17 = (*v16)[4].n128_u64[0];
  v18 = (*v16)[4].n128_u64[1];
  v19 = static Edge.Set.all.getter((*v16)[3].n128_f64[0]);
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v7;
  *(_QWORD *)(a2 + 32) = v9;
  *(_QWORD *)(a2 + 40) = v12;
  *(_QWORD *)(a2 + 48) = v14;
  *(_BYTE *)(a2 + 56) = v15;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_BYTE *)(a2 + 96) = 1;
  *(_BYTE *)(a2 + 104) = v19;
  result = v21;
  *(__n128 *)(a2 + 112) = v21;
  *(_QWORD *)(a2 + 128) = v17;
  *(_QWORD *)(a2 + 136) = v18;
  *(_BYTE *)(a2 + 144) = 0;
  return result;
}

uint64_t sub_1000EB4DC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t v23;

  v0 = sub_100003DB8(&qword_10031CB10);
  __chkstk_darwin(v0, v1);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003DB8(&qword_10031CB18);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003DB8(&qword_100319208);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.principal.getter(v16);
  v19 = ToolbarItem<>.init(placement:content:)(v12, sub_1000EB6C4, 0, &type metadata for Text, &protocol witness table for Text);
  static ToolbarItemPlacement.navigationBarTrailing.getter(v19);
  v20 = sub_100094CC0();
  ToolbarItem<>.init(placement:content:)(v12, sub_100094AD8, 0, &type metadata for EndSessionButton, v20);
  v21 = &v3[*(int *)(v0 + 48)];
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v3, v18, v13);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v21, v8, v4);
  TupleToolbarContent.init(_:)(v3, v0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v18, v13);
}

void sub_1000EB6C4(uint64_t a1@<X8>)
{
  id v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v24._object = (void *)0x8000000100269400;
  v3._countAndFlagsBits = 0x794D20646E6946;
  v3._object = (void *)0xE700000000000000;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v24._countAndFlagsBits = 0xD000000000000021;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v24);

  v23 = v5;
  v6 = sub_10002B3F4();
  v8 = Text.init<A>(_:)(&v23, &type metadata for String, v6, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = static Font.headline.getter(v8);
  v16 = Text.font(_:)(v15, v8, v10, v14, v12);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  swift_release(v15);
  sub_10002B438(v8, v10, v14);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 16) = v20 & 1;
  *(_QWORD *)(a1 + 24) = v22;
}

uint64_t sub_1000EB808@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000EA8A8(*(_QWORD **)v1, *(_QWORD *)(v1 + 8), a1);
}

uint64_t sub_1000EB810@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000EABC0(*(_QWORD *)(v1 + 16), a1);
}

uint64_t sub_1000EB818()
{
  uint64_t v0;

  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

double sub_1000EB83C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_1000EAE80((_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

double sub_1000EB844@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_1000EB3A8((_QWORD *)(v1 + 16), a1).n128_u64[0];
  return result;
}

uint64_t sub_1000EB84C()
{
  _QWORD v1[4];

  v1[0] = sub_100007FAC(&qword_10031F3E0);
  v1[1] = type metadata accessor for StackNavigationViewStyle(255);
  v1[2] = sub_1000084FC(&qword_10031F410, &qword_10031F3E0, (uint64_t)&protocol conformance descriptor for NavigationView<A>);
  v1[3] = sub_1000052EC(&qword_10031CB08, (uint64_t (*)(uint64_t))&type metadata accessor for StackNavigationViewStyle, (uint64_t)&protocol conformance descriptor for StackNavigationViewStyle);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.navigationViewStyle<A>(_:)>>, 1);
}

double destroy for TryOutIntroTopGraphicsView(uint64_t a1)
{
  double result;

  swift_release(*(_QWORD *)a1);
  sub_100040294(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 56)).n128_u64[0];
  return result;
}

uint64_t initializeWithCopy for TryOutIntroTopGraphicsView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = *((_BYTE *)a2 + 24);
  swift_retain(v4);
  sub_100040244(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v8;
  v9 = a2[6];
  v10 = a2[7];
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t *assignWithCopy for TryOutIntroTopGraphicsView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = *((_BYTE *)a2 + 24);
  sub_100040244(v6, v7);
  v8 = a1[2];
  v9 = *((_BYTE *)a1 + 24);
  a1[2] = v6;
  *((_BYTE *)a1 + 24) = v7;
  sub_100040294(v8, v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[6] = a2[6];
  v12 = a2[7];
  v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t *assignWithTake for TryOutIntroTopGraphicsView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = *((_BYTE *)a2 + 24);
  v6 = a1[2];
  v7 = *((_BYTE *)a1 + 24);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *((_BYTE *)a1 + 24) = v5;
  sub_100040294(v6, v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_bridgeObjectRelease(v9);
  v10 = a2[7];
  v11 = a1[7];
  a1[6] = a2[6];
  a1[7] = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for TryOutIntroTopGraphicsView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TryOutIntroTopGraphicsView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TryOutIntroTopGraphicsView()
{
  return &type metadata for TryOutIntroTopGraphicsView;
}

uint64_t sub_1000EBB68(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029A1E8, 1);
}

uint64_t sub_1000EBB78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double Height;
  double v25;
  uint64_t v26;
  uint64_t v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  _OWORD v45[7];
  CGRect v46;

  v2 = v1;
  v4 = sub_100003DB8(&qword_10031F418);
  __chkstk_darwin(v4, v5);
  v7 = (_QWORD *)((char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_100003DB8(&qword_10031F420);
  __chkstk_darwin(v8, v9);
  v11 = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)v2;
  if (*(_QWORD *)v2)
  {
    v13 = (void *)objc_opt_self(UIScreen);
    v14 = objc_msgSend(v13, "mainScreen", swift_retain(v12).n128_f64[0]);
    v15 = objc_msgSend(v14, "fixedCoordinateSpace");

    objc_msgSend(v15, "bounds");
    v17 = v16;
    v19 = v18;
    v21 = v20;
    v23 = v22;
    swift_unknownObjectRelease(v15);
    v46.origin.x = v17;
    v46.origin.y = v19;
    v46.size.width = v21;
    v46.size.height = v23;
    Height = CGRectGetHeight(v46);
    swift_release(v12);
    v25 = Height * 0.4;
    v26 = *(_QWORD *)(v2 + 16);
    LOBYTE(v14) = *(_BYTE *)(v2 + 24);
    sub_100040244(v26, (char)v14);
    LOBYTE(v15) = sub_100042548(v26, (char)v14);
    v27 = sub_100040294(v26, (char)v14);
    v28 = 30.0;
    if ((v15 & 1) != 0)
    {
      if (sub_1000714CC() >= 428.0)
        v28 = v25 * 0.125;
      else
        v28 = v25 / 12.0;
    }
    *v7 = static Alignment.center.getter(v27);
    v7[1] = v29;
    v30 = sub_100003DB8(&qword_10031F428);
    sub_1000EBEE0((uint64_t *)v2, (uint64_t)v7 + *(int *)(v30 + 44), v28);
    v32 = static Alignment.center.getter(v31);
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v45, 0, 1, 0, 1, 0, 1, *(_QWORD *)&v25, 0, 0, 1, *(_QWORD *)&v25, 0, v32, v33);
    sub_10000B234((uint64_t)v7, (uint64_t)v11, &qword_10031F418);
    v34 = &v11[*(int *)(v8 + 36)];
    v35 = v45[5];
    *((_OWORD *)v34 + 4) = v45[4];
    *((_OWORD *)v34 + 5) = v35;
    *((_OWORD *)v34 + 6) = v45[6];
    v36 = v45[1];
    *(_OWORD *)v34 = v45[0];
    *((_OWORD *)v34 + 1) = v36;
    v37 = v45[3];
    *((_OWORD *)v34 + 2) = v45[2];
    *((_OWORD *)v34 + 3) = v37;
    v38 = sub_100007FF0((uint64_t)v7, &qword_10031F418);
    v39 = static Edge.Set.bottom.getter(v38);
    sub_10000B234((uint64_t)v11, a1, &qword_10031F420);
    v40 = a1 + *(int *)(sub_100003DB8(&qword_10031F430) + 36);
    *(_BYTE *)v40 = v39;
    *(_OWORD *)(v40 + 8) = 0u;
    *(_OWORD *)(v40 + 24) = 0u;
    *(_BYTE *)(v40 + 40) = 1;
    return sub_100007FF0((uint64_t)v11, &qword_10031F420);
  }
  else
  {
    v42 = *(_QWORD *)(v2 + 8);
    v43 = type metadata accessor for UIMetrics();
    v44 = sub_10007DE90();
    result = EnvironmentObject.error()(0, v42, v43, v44);
    __break(1u);
  }
  return result;
}

void sub_1000EBEE0(uint64_t *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  id v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  __int128 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int16 v56;
  char v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;

  v51 = type metadata accessor for Image.ResizingMode(0);
  v6 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51, v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_10031F438);
  v12 = __chkstk_darwin(v10, v11);
  v53 = (uint64_t)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __chkstk_darwin(v12, v14);
  v52 = (char *)&v50 - v16;
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v50 - v18;
  v20 = sub_100003DB8(&qword_10031D9B0);
  v21 = swift_allocObject(v20, 48, 7);
  *(_OWORD *)(v21 + 16) = xmmword_10024DEE0;
  v22 = (void *)objc_opt_self(UIColor);
  v23 = objc_msgSend(v22, "systemFillColor");
  v24 = objc_msgSend(v23, "colorWithAlphaComponent:", 0.0);

  *(_QWORD *)(v21 + 32) = Color.init(uiColor:)(v24);
  v25 = Color.init(uiColor:)(objc_msgSend(v22, "systemFillColor"));
  *(_QWORD *)(v21 + 40) = v25;
  v54 = v21;
  specialized Array._endMutation()(v25);
  Gradient.init(colors:)(v54);
  LinearGradient.init(gradient:startPoint:endPoint:)(&v63, 0.5, 0.0, 0.5, 1.0);
  v26 = *a1;
  if (*a1)
  {
    v28 = v65;
    v27 = v66;
    v50 = v64;
    v29 = v63;
    v30 = a1[4];
    v31 = a1[5];
    v32 = a1[6];
    v33 = a1[7];
    swift_retain(v26);
    v34 = sub_100071600(v30, v31, v32, v33);
    swift_release(v26);
    v35 = v51;
    (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for Image.ResizingMode.stretch(_:), v51);
    v36 = Image.resizable(capInsets:resizingMode:)(v9, v34, 0.0, 0.0, 0.0, 0.0);
    swift_release(v34);
    v37 = (*(double (**)(char *, uint64_t))(v6 + 8))(v9, v35);
    LOBYTE(v35) = static Edge.Set.all.getter(v37);
    v38 = EdgeInsets.init(_all:)(a3);
    v54 = v36;
    v55 = 0;
    v56 = 1;
    v57 = v35;
    v58 = v38;
    v59 = v39;
    v60 = v40;
    v61 = v41;
    v62 = 0;
    v42 = sub_100003DB8(&qword_10031F440);
    v43 = sub_10002B614(&qword_10031F448, &qword_10031F440, (void (*)(void))sub_100034DFC);
    v44 = (uint64_t)v52;
    View.accessibility(hidden:)(1, v42, v43);
    swift_release(v36);
    sub_1000EC2C8(v44, (uint64_t)v19);
    v45 = v53;
    sub_10000B234((uint64_t)v19, v53, &qword_10031F438);
    *(_QWORD *)a2 = v29;
    *(_OWORD *)(a2 + 8) = v50;
    *(_QWORD *)(a2 + 24) = v28;
    *(_QWORD *)(a2 + 32) = v27;
    *(_WORD *)(a2 + 40) = 256;
    v46 = sub_100003DB8(&qword_10031F450);
    sub_10000B234(v45, a2 + *(int *)(v46 + 48), &qword_10031F438);
    swift_bridgeObjectRetain(v29);
    sub_100007FF0((uint64_t)v19, &qword_10031F438);
    sub_100007FF0(v45, &qword_10031F438);
    swift_bridgeObjectRelease(v29);
  }
  else
  {
    v47 = a1[1];
    v48 = type metadata accessor for UIMetrics();
    v49 = sub_10007DE90();
    EnvironmentObject.error()(0, v47, v48, v49);
    __break(1u);
  }
}

uint64_t sub_1000EC290@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EBB78(a1);
}

uint64_t sub_1000EC2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031F438);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000EC310()
{
  return sub_10002B614(&qword_10031F458, &qword_10031F430, (void (*)(void))sub_1000EC344);
}

uint64_t sub_1000EC344()
{
  return sub_10002B614(&qword_10031F460, &qword_10031F420, (void (*)(void))sub_1000EC368);
}

unint64_t sub_1000EC368()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031F468;
  if (!qword_10031F468)
  {
    v1 = sub_100007FAC(&qword_10031F418);
    result = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10031F468);
  }
  return result;
}

void sub_1000EC3B4(uint64_t a1)
{
  _QWORD *v1;
  unint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  int64_t v15;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_100171844(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = &v3[4 * v9 + 4];
  if (a1 + 32 < (unint64_t)&v10[4 * v8] && (unint64_t)v10 < a1 + 32 + 32 * v8)
    goto LABEL_24;
  memcpy(v10, (const void *)(a1 + 32), 32 * v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
}

void sub_1000EC4FC(uint64_t a1)
{
  _QWORD *v1;
  size_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  size_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  BOOL v13;
  size_t v14;
  int64_t v15;
  char v16;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = (_QWORD *)*v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    v8 = *(_QWORD *)(a1 + 16);
    if (v8)
      goto LABEL_5;
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
  if (v4 <= v5)
    v15 = v4 + v2;
  else
    v15 = v4;
  v3 = sub_100171B9C(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_18;
LABEL_5:
  v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v10 = (char *)v3 + v9 + 32;
  if (a1 + 32 < (unint64_t)&v10[v8] && (unint64_t)v10 < a1 + 32 + v8)
    goto LABEL_24;
  memcpy(v10, (const void *)(a1 + 32), v8);
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v12 = v3[2];
  v13 = __OFADD__(v12, v8);
  v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v16 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v16, 1092, 0);
  __break(1u);
}

uint64_t sub_1000EC644(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v16 = a1;
    else
      v16 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = _CocoaArrayWrapper.endIndex.getter(v16);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v3 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v4 = *v1;
  if (!((unint64_t)*v1 >> 62))
  {
    v5 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
    v6 = v5 + v3;
    if (!__OFADD__(v5, v3))
      goto LABEL_5;
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v4 < 0)
    v17 = *v1;
  else
    v17 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v1);
  v5 = _CocoaArrayWrapper.endIndex.getter(v17);
  swift_bridgeObjectRelease(v4);
  v6 = v5 + v3;
  if (__OFADD__(v5, v3))
    goto LABEL_29;
LABEL_5:
  v4 = *v1;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v1);
  *v1 = v4;
  v5 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v4 & 0x8000000000000000) == 0 && (v4 & 0x4000000000000000) == 0)
  {
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
    if (v6 <= *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v5 = 1;
  }
  if ((unint64_t)v4 >> 62)
    goto LABEL_31;
  v9 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v9 <= v6)
      v9 = v6;
    swift_bridgeObjectRetain(v4);
    v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v5, v9, 1, v4);
    swift_bridgeObjectRelease(*v1);
    *v1 = v4;
    v8 = v4 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = sub_1000FB9E4(v8 + 8 * *(_QWORD *)(v8 + 16) + 32, (*(_QWORD *)(v8 + 24) >> 1) - *(_QWORD *)(v8 + 16), a1);
    if (v11 >= v3)
      break;
LABEL_30:
    __break(1u);
LABEL_31:
    if (v4 < 0)
      v18 = v4;
    else
      v18 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v4);
    v9 = _CocoaArrayWrapper.endIndex.getter(v18);
    swift_bridgeObjectRelease(v4);
  }
  if (v11 < 1)
    goto LABEL_19;
  v12 = *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v13 = __OFADD__(v12, v11);
  v14 = v12 + v11;
  if (!v13)
  {
    *(_QWORD *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
LABEL_19:
    swift_bridgeObjectRelease(result);
    return specialized Array._endMutation()(v15);
  }
  __break(1u);
  return result;
}

void sub_1000EC7FC(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  char v24;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = sub_100172448(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = sub_100003DB8(&qword_100317D58);
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy(v14);
  if (!v2)
  {
LABEL_19:
    swift_bridgeObjectRelease(a1);
    *v1 = v3;
    return;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  v24 = 2;
  _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, v24, 1092, 0);
  __break(1u);
}

uint64_t sub_1000EC968(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id *v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  _OWORD v16[2];
  _QWORD *v17;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v17 = _swiftEmptyArrayStorage;
  result = sub_10017E324(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v2; ++i)
      {
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        v6 = sub_10006477C(0, &qword_10031FBF0, IFColor_ptr);
        swift_dynamicCast(v16, &v15, v6, (char *)&type metadata for Any + 8, 7);
        v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_10017E324(0, v3[2] + 1, 1);
          v3 = v17;
        }
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_10017E324(v7 > 1, v8 + 1, 1);
          v3 = v17;
        }
        v3[2] = v8 + 1;
        sub_10003E704(v16, &v3[4 * v8 + 4]);
      }
    }
    else
    {
      v9 = (id *)(a1 + 32);
      v10 = sub_10006477C(0, &qword_10031FBF0, IFColor_ptr);
      do
      {
        v15 = *v9;
        v11 = v15;
        swift_dynamicCast(v16, &v15, v10, (char *)&type metadata for Any + 8, 7);
        v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_10017E324(0, v3[2] + 1, 1);
          v3 = v17;
        }
        v13 = v3[2];
        v12 = v3[3];
        if (v13 >= v12 >> 1)
        {
          sub_10017E324(v12 > 1, v13 + 1, 1);
          v3 = v17;
        }
        v3[2] = v13 + 1;
        sub_10003E704(v16, &v3[4 * v13 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1000ECBC8(uint64_t a1)
{
  int64_t v1;
  _QWORD *v2;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9;
  _OWORD v10[2];
  _QWORD *v11;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = _swiftEmptyArrayStorage;
  if (v1)
  {
    v11 = _swiftEmptyArrayStorage;
    sub_10017E324(0, v1, 0);
    v4 = (uint64_t *)(a1 + 32);
    v2 = _swiftEmptyArrayStorage;
    do
    {
      v9 = *v4;
      v5 = sub_100003DB8(&qword_10031BB38);
      swift_dynamicCast(v10, &v9, v5, (char *)&type metadata for Any + 8, 7);
      if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
      {
        sub_10017E324(0, v2[2] + 1, 1);
        v2 = v11;
      }
      v7 = v2[2];
      v6 = v2[3];
      if (v7 >= v6 >> 1)
      {
        sub_10017E324(v6 > 1, v7 + 1, 1);
        v2 = v11;
      }
      v2[2] = v7 + 1;
      sub_10003E704(v10, &v2[4 * v7 + 4]);
      ++v4;
      --v1;
    }
    while (v1);
  }
  return v2;
}

_QWORD *sub_1000ECCF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t, uint64_t);
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003DB8(&qword_100317D58);
  v7 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v8);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    v21 = _swiftEmptyArrayStorage;
    sub_10017E3CC(0, v11, 0);
    v13 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v19 = *(_QWORD *)(v3 + 72);
    v14 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    do
    {
      v14(v6, v13, v2);
      swift_dynamicCast(v10, v6, v2, v20, 7);
      v12 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native(v21) & 1) == 0)
      {
        sub_10017E3CC(0, v12[2] + 1, 1);
        v12 = v21;
      }
      v16 = v12[2];
      v15 = v12[3];
      if (v16 >= v15 >> 1)
      {
        sub_10017E3CC(v15 > 1, v16 + 1, 1);
        v12 = v21;
      }
      v12[2] = v16 + 1;
      sub_10000B458((uint64_t)v10, (uint64_t)v12+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v16, &qword_100317D58);
      v13 += v19;
      --v11;
    }
    while (v11);
  }
  return v12;
}

unint64_t sub_1000ECEB4()
{
  uint64_t v0;

  return 0x302010002020100uLL >> (8
                                * *(_BYTE *)(v0 + *(int *)(type metadata accessor for TransmissionProgress(0) + 32)));
}

Swift::Int sub_1000ECEF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v21[9];

  v1 = v0;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v21[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_100317D58);
  v9 = __chkstk_darwin(v7, v8);
  v11 = (char *)&v21[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v21[-1] - v13;
  Hasher.init(_seed:)(v21, 0);
  sub_10000B234(v1, (uint64_t)v14, &qword_100317D58);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  if (v15(v14, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v14, v2);
    Hasher._combine(_:)(1u);
    v16 = sub_1000052EC(&qword_10031FA28, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v21, v2, v16);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  v17 = type metadata accessor for ServiceOutages.Outage(0);
  sub_10000B234(v1 + *(int *)(v17 + 20), (uint64_t)v11, &qword_100317D58);
  if (v15(v11, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v6, v11, v2);
    Hasher._combine(_:)(1u);
    v18 = sub_1000052EC(&qword_10031FA28, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v21, v2, v18);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  }
  return Hasher._finalize()();
}

uint64_t sub_1000ED11C(double *a1, double *a2)
{
  double v2;
  double v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a2[1];
  v4 = static Angle.== infix(_:_:)(a1, *a1, *a2);
  if ((v4 & 1) != 0)
    return static Angle.== infix(_:_:)(v4, v2, v3);
  else
    return 0;
}

uint64_t sub_1000ED15C(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v3 = *(double *)(a1 + 24);
  v2 = *(double *)(a1 + 32);
  v5 = *(double *)(a2 + 24);
  v4 = *(double *)(a2 + 32);
  v6 = *(double *)(a2 + 16);
  v7 = *(double *)(a1 + 16);
  v8 = static Angle.== infix(_:_:)(a1, *(double *)(a1 + 8), *(double *)(a2 + 8));
  if ((v8 & 1) == 0)
    return 0;
  v9 = static Angle.== infix(_:_:)(v8, v7, v6);
  if ((v9 & 1) != 0
    && (v10 = static Angle.== infix(_:_:)(v9, v3, v5), (v10 & 1) != 0)
    && (static Angle.== infix(_:_:)(v10, v2, v4) & 1) != 0)
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1000ED1E8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 == 3)
  {
    if (v3 == 3)
      return 1;
  }
  else if (v3 != 3 && v2 == v3)
  {
    return 1;
  }
  return 0;
}

uint64_t sub_1000ED21C(_BYTE *a1, _BYTE *a2)
{
  if ((*a1 & 1) != 0)
  {
    if (*a2)
      return 1;
  }
  else if ((*a2 & 1) == 0)
  {
    return 1;
  }
  return 0;
}

void sub_1000ED24C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = v2;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003DB8(&qword_100317D58);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v18 = (char *)&v22 - v17;
  sub_10000B234(v4, (uint64_t)&v22 - v17, &qword_100317D58);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v19(v18, 1, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v18, v6);
    Hasher._combine(_:)(1u);
    v20 = sub_1000052EC(&qword_10031FA28, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v6, v20);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  sub_10000B234(v4 + *(int *)(a2 + 20), (uint64_t)v15, &qword_100317D58);
  if (v19(v15, 1, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v15, v6);
    Hasher._combine(_:)(1u);
    v21 = sub_1000052EC(&qword_10031FA28, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v6, v21);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
}

Swift::Int sub_1000ED460(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  _QWORD v24[9];

  v4 = v2;
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v24[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003DB8(&qword_100317D58);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (char *)&v24[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v18 = (char *)&v24[-1] - v17;
  Hasher.init(_seed:)(v24, a1);
  sub_10000B234(v4, (uint64_t)v18, &qword_100317D58);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v19(v18, 1, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v18, v6);
    Hasher._combine(_:)(1u);
    v20 = sub_1000052EC(&qword_10031FA28, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v24, v6, v20);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  sub_10000B234(v4 + *(int *)(a2 + 20), (uint64_t)v15, &qword_100317D58);
  if (v19(v15, 1, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v10, v15, v6);
    Hasher._combine(_:)(1u);
    v21 = sub_1000052EC(&qword_10031FA28, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v24, v6, v21);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  return Hasher._finalize()();
}

uint64_t sub_1000ED68C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000EDB78(a1, a2, a3, a4, sub_1001DCD78);
}

Swift::Int sub_1000ED698(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, 0);
  v3 = type metadata accessor for Date(0);
  v4 = sub_1000052EC(&qword_10031FA28, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v7, v3, v4);
  dispatch thunk of Hashable.hash(into:)(v7, v3, v4);
  v5 = *(_QWORD *)(v1 + *(int *)(a1 + 24));
  swift_bridgeObjectRetain(v5);
  sub_1000FB724((uint64_t)v7, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

double sub_1000ED75C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;

  v5 = type metadata accessor for Date(0);
  v6 = sub_1000052EC(&qword_10031FA28, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  v7 = *(_QWORD *)(v2 + *(int *)(a2 + 24));
  swift_bridgeObjectRetain(v7);
  sub_1000FB724(a1, v7);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v7).n128_u64[0];
  return result;
}

Swift::Int sub_1000ED804(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[9];

  Hasher.init(_seed:)(v8, a1);
  v4 = type metadata accessor for Date(0);
  v5 = sub_1000052EC(&qword_10031FA28, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v8, v4, v5);
  dispatch thunk of Hashable.hash(into:)(v8, v4, v5);
  v6 = *(_QWORD *)(v2 + *(int *)(a2 + 24));
  swift_bridgeObjectRetain(v6);
  sub_1000FB724((uint64_t)v8, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

uint64_t sub_1000ED8C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((((uint64_t (*)(void))static Date.== infix(_:_:))() & 1) != 0)
    return static Date.== infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20));
  else
    return 0;
}

Swift::Int sub_1000ED918()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  v0 = type metadata accessor for Date(0);
  v1 = sub_1000052EC(&qword_10031FA28, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_1000ED9AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for Date(0);
  v3 = sub_1000052EC(&qword_10031FA28, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_1000EDA30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  v1 = type metadata accessor for Date(0);
  v2 = sub_1000052EC(&qword_10031FA28, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

BOOL sub_1000EDAC4(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  uint64_t v4;
  _BOOL8 result;

  result = 0;
  if (*(_QWORD *)a1 == *(_QWORD *)a2)
  {
    v2 = *(double *)(a2 + 16);
    v3 = *(double *)(a1 + 16);
    v4 = static Angle.== infix(_:_:)(a1, *(double *)(a1 + 8), *(double *)(a2 + 8));
    if ((v4 & 1) != 0 && (static Angle.== infix(_:_:)(v4, v3, v2) & 1) != 0)
      return 1;
  }
  return result;
}

uint64_t sub_1000EDB18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static Date.== infix(_:_:)(a1, a2) & 1) != 0)
    return sub_1001DD0F0(*(_QWORD *)(a1 + *(int *)(a3 + 20)), *(_QWORD *)(a2 + *(int *)(a3 + 20)));
  else
    return 0;
}

uint64_t sub_1000EDB6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000EDB78(a1, a2, a3, a4, sub_1001DCEB4);
}

uint64_t sub_1000EDB78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD, _QWORD))
{
  if ((static Date.== infix(_:_:)(a1, a2) & 1) != 0
    && (static Date.== infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20)) & 1) != 0)
  {
    return a5(*(_QWORD *)(a1 + *(int *)(a3 + 24)), *(_QWORD *)(a2 + *(int *)(a3 + 24)));
  }
  else
  {
    return 0;
  }
}

id sub_1000EDBF4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  char *v8;
  char *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  objc_super v28;

  v1 = OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource_connectionDidChange;
  v2 = sub_100003DB8(&qword_10031FA88);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = v0;
  *(_QWORD *)&v0[v1] = PassthroughSubject.init()(v4);
  v5 = OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource_carrierNameDidChange;
  v6 = sub_100003DB8(&qword_10031FA90);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(_QWORD *)&v3[v5] = PassthroughSubject.init()(v7);
  *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__agent] = 0;
  v8 = &v3[OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__lastVersionForwarded];
  *(_QWORD *)v8 = 0;
  v8[8] = 1;
  v9 = &v3[OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__lastStateForwarded];
  v10 = type metadata accessor for ConnectionAssistantState(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);

  v28.receiver = v3;
  v28.super_class = (Class)type metadata accessor for TargetConnectionSource(0);
  v11 = objc_msgSendSuper2(&v28, "init");
  v12 = qword_100315820;
  v13 = v11;
  if (v12 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v14 = type metadata accessor for Logger(0);
  sub_10000D744(v14, (uint64_t)qword_10033FD18);
  v15 = v13;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v19 = swift_slowAlloc(32, -1);
    v27 = v19;
    *(_DWORD *)v18 = 136446210;
    v20 = v15;
    v21 = objc_msgSend(v20, "description");
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    v26 = sub_100172BEC(v22, v24, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v18 + 4, v18 + 12);

    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "init: %{public}s", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

  }
  return v15;
}

id sub_1000EDECC()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  objc_class *v12;
  uint64_t v14;
  uint64_t v15;
  objc_super v16;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD18);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v15 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v14 = sub_100172BEC(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "deinit: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v12 = (objc_class *)type metadata accessor for TargetConnectionSource(0);
  v16.receiver = v2;
  v16.super_class = v12;
  return objc_msgSendSuper2(&v16, "dealloc");
}

uint64_t sub_1000EE140()
{
  return type metadata accessor for TargetConnectionSource(0);
}

uint64_t type metadata accessor for TargetConnectionSource(uint64_t a1)
{
  return sub_10003D8E8(a1, (uint64_t *)&unk_10031F4C0, (uint64_t)&nominal type descriptor for TargetConnectionSource);
}

void sub_1000EE15C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = "\b";
  v4[3] = &unk_100255620;
  sub_1000F03D4(319, &qword_10031F4D0, type metadata accessor for ConnectionAssistantState);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 5, v4, a1 + 80);
  }
}

void sub_1000EE1FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint8_t *v15;
  id v16;
  char *v17;
  void *v18;
  uint64_t v19;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_100315848 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315848, sub_1000D9674);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FD90);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "start", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = swift_allocObject(&unk_1002EFDA8, 24, 7);
  swift_unknownObjectWeakInit(v14 + 16, v1);
  v15 = (uint8_t *)swift_allocObject(&unk_1002EFDA8, 24, 7);
  swift_unknownObjectWeakInit(v15 + 16, v1);
  v16 = objc_allocWithZone((Class)type metadata accessor for CoreTelephonyCAAgent());
  v17 = sub_100016F3C((uint64_t)sub_1000FDD18, v14, (uint8_t *)sub_1000FDD20, v15);
  v18 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__agent);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__agent) = v17;

}

void sub_1000EE400(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _BYTE *a5, double a6, double a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  __n128 v49;
  char v50;
  uint64_t Strong;
  uint64_t v52;
  uint64_t (*v53)(char *, uint64_t, char *);
  uint64_t v54;
  uint64_t v55;
  BOOL v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  _DWORD *v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE v89[16];
  char v90[24];
  char v91[32];

  v83 = a2;
  v84 = a4;
  v82 = a1;
  v11 = type metadata accessor for ConnectionAssistantState(0);
  v12 = *(_QWORD *)(v11 - 8);
  v86 = (char *)v11;
  v87 = v12;
  __chkstk_darwin(v11, v13);
  v74 = (uint64_t)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100003DB8(&qword_10031FA78);
  __chkstk_darwin(v76, v15);
  v77 = (uint64_t)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v81 = type metadata accessor for TargetConnection(0);
  v18 = __chkstk_darwin(v81, v17);
  v85 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18, v20);
  v23 = (char *)&v74 - v22;
  __chkstk_darwin(v21, v24);
  v26 = (char *)&v74 - v25;
  v27 = sub_100003DB8(&qword_10031FA70);
  v29 = __chkstk_darwin(v27, v28);
  v80 = (uint64_t)&v74 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __chkstk_darwin(v29, v31);
  v75 = (uint64_t)&v74 - v33;
  v35 = __chkstk_darwin(v32, v34);
  v78 = (uint64_t)&v74 - v36;
  v38 = __chkstk_darwin(v35, v37);
  v40 = (char *)&v74 - v39;
  __chkstk_darwin(v38, v41);
  v43 = (char *)&v74 - v42;
  v44 = type metadata accessor for DispatchPredicate(0);
  v45 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44, v46);
  v48 = (uint64_t *)((char *)&v74 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v48 = static OS_dispatch_queue.main.getter(v49);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v45 + 104))(v48, enum case for DispatchPredicate.onQueue(_:), v44);
  v50 = _dispatchPreconditionTest(_:)(v48);
  (*(void (**)(_QWORD *, uint64_t))(v45 + 8))(v48, v44);
  if ((v50 & 1) == 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  swift_beginAccess(a5 + 16, v91, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a5 + 16);
  if (!Strong)
    return;
  a5 = (_BYTE *)Strong;
  v52 = Strong + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__lastStateForwarded;
  swift_beginAccess(Strong + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__lastStateForwarded, v90, 0, 0);
  v79 = v52;
  sub_10000B234(v52, (uint64_t)v43, &qword_10031FA70);
  v53 = *(uint64_t (**)(char *, uint64_t, char *))(v87 + 48);
  LODWORD(v52) = v53(v43, 1, v86);
  sub_100007FF0((uint64_t)v43, &qword_10031FA70);
  v54 = v83;
  v55 = v84;
  sub_1000EEC18(v52 == 1, v83, a3, v84, (uint64_t)v26, a6, a7);
  v56 = (_DWORD)v52 == 1;
  v48 = v85;
  if (v56 || v54)
    goto LABEL_7;
  if (a3)
  {
    v57 = swift_allocObject(&unk_1002EFDD0, 32, 7);
    *(_QWORD *)(v57 + 16) = a3;
    *(_QWORD *)(v57 + 24) = v55;
    sub_100018F00(a3, v55);
    sub_10004DA00((uint64_t)sub_10002BF7C, v57);
LABEL_7:
    sub_1000E1F30((uint64_t)v26, (uint64_t)v23, type metadata accessor for TargetConnection);
    sub_10000AFFC((uint64_t)v23, type metadata accessor for TargetConnection);
    v43 = v86;
    goto LABEL_8;
  }
  sub_100018F00(0, v55);
  sub_10004DA00(0, 0);
  sub_1000E1F30((uint64_t)v26, (uint64_t)v23, type metadata accessor for TargetConnection);
  sub_1000E1F30((uint64_t)v23, (uint64_t)v40, type metadata accessor for ConnectionAssistantState);
  v43 = v86;
  (*(void (**)(char *, _QWORD, uint64_t, char *))(v87 + 56))(v40, 0, 1, v86);
  v66 = v78;
  sub_10000B234(v79, v78, &qword_10031FA70);
  v67 = v77;
  v68 = v77 + *(int *)(v76 + 48);
  sub_10000B234((uint64_t)v40, v77, &qword_10031FA70);
  sub_10000B234(v66, v68, &qword_10031FA70);
  if (v53((char *)v67, 1, v43) != 1)
  {
    v71 = v75;
    sub_10000B234(v67, v75, &qword_10031FA70);
    if (v53((char *)v68, 1, v43) != 1)
    {
      v72 = v74;
      sub_1000E8D6C(v68, v74, type metadata accessor for ConnectionAssistantState);
      v73 = sub_1000FC034(v71, v72);
      sub_10000AFFC(v72, type metadata accessor for ConnectionAssistantState);
      sub_100007FF0(v78, &qword_10031FA70);
      sub_100007FF0((uint64_t)v40, &qword_10031FA70);
      sub_10000AFFC((uint64_t)v23, type metadata accessor for TargetConnection);
      sub_10000AFFC(v71, type metadata accessor for ConnectionAssistantState);
      v48 = v85;
      sub_100007FF0(v67, &qword_10031FA70);
      if (v73)
        goto LABEL_19;
LABEL_8:
      a3 = (uint64_t)&a5[OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__lastVersionForwarded];
      v23 = (char *)v81;
      if ((a5[OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__lastVersionForwarded + 8] & 1) != 0
        || (v45 = *(_QWORD *)a3, *(_QWORD *)&v26[*(int *)(v81 + 20)] >= *(_QWORD *)a3))
      {
LABEL_18:
        *(_QWORD *)a3 = *(_QWORD *)&v26[*((int *)v23 + 5)];
        *(_BYTE *)(a3 + 8) = 0;
        v69 = v80;
        sub_1000E1F30((uint64_t)v26, v80, type metadata accessor for ConnectionAssistantState);
        (*(void (**)(uint64_t, _QWORD, uint64_t, char *))(v87 + 56))(v69, 0, 1, v43);
        v70 = v79;
        swift_beginAccess(v79, &v88, 33, 0);
        sub_1000FDCAC(v69, v70);
        swift_endAccess(&v88);
        PassthroughSubject.send(_:)(v26);
        goto LABEL_19;
      }
      if (qword_100315848 == -1)
      {
LABEL_11:
        v58 = type metadata accessor for Logger(0);
        sub_10000D744(v58, (uint64_t)qword_10033FD90);
        v59 = sub_1000E1F30((uint64_t)v26, (uint64_t)v48, type metadata accessor for TargetConnection);
        v60 = Logger.logObject.getter(v59);
        v61 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v60, v61))
        {
          v62 = (_DWORD *)swift_slowAlloc(22, -1);
          v63 = (uint64_t)v48;
          v64 = v62;
          *v62 = 134218240;
          v65 = *(_QWORD *)(v63 + *((int *)v23 + 5));
          sub_10000AFFC(v63, type metadata accessor for TargetConnection);
          v88 = v65;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, v64 + 1, v64 + 3);
          *((_WORD *)v64 + 6) = 2048;
          v88 = v45;
          v43 = v86;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, v89, (char *)v64 + 14, (char *)v64 + 22);
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "Received CA state version %llu is less than the last processed one: %llu", (uint8_t *)v64, 0x16u);
          swift_slowDealloc(v64, -1, -1);
        }
        else
        {
          sub_10000AFFC((uint64_t)v48, type metadata accessor for TargetConnection);
        }

        goto LABEL_18;
      }
LABEL_27:
      swift_once(&qword_100315848, sub_1000D9674);
      goto LABEL_11;
    }
    sub_100007FF0(v78, &qword_10031FA70);
    sub_100007FF0((uint64_t)v40, &qword_10031FA70);
    sub_10000AFFC((uint64_t)v23, type metadata accessor for TargetConnection);
    sub_10000AFFC(v71, type metadata accessor for ConnectionAssistantState);
LABEL_23:
    sub_100007FF0(v67, &qword_10031FA78);
    v48 = v85;
    goto LABEL_8;
  }
  sub_100007FF0(v66, &qword_10031FA70);
  sub_100007FF0((uint64_t)v40, &qword_10031FA70);
  sub_10000AFFC((uint64_t)v23, type metadata accessor for TargetConnection);
  if (v53((char *)v68, 1, v43) != 1)
    goto LABEL_23;
  sub_100007FF0(v67, &qword_10031FA70);
LABEL_19:
  sub_10000AFFC((uint64_t)v26, type metadata accessor for TargetConnection);

}

void sub_1000EEC18(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>)
{
  void *v7;
  id v8;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  id v35;
  void *v36;
  id v37;
  void *v38;
  unint64_t v39;
  unsigned int v40;
  id v41;
  void *v42;
  id v43;
  id v44;
  void *v45;
  uint64_t v46;
  id v47;
  void *v48;
  uint64_t v49;
  id v50;
  void *v51;
  BOOL *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  void *v56;
  unsigned __int8 v57;
  unsigned __int8 v58;
  id v59;
  unsigned int v60;
  uint64_t v61;
  uint64_t *v62;
  id v63;
  void *v64;
  _BYTE *v65;
  id v66;
  id v67;
  unsigned int v68;
  id v69;
  void *v70;
  unint64_t v71;
  unint64_t v72;
  id v73;
  void *v74;
  uint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  unint64_t v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int16 v87;
  BOOL v88;
  BOOL v89;
  uint64_t v90;
  uint64_t v91;
  int *v92;
  char *v93;
  id v94;
  id v95;
  char *v96;
  uint64_t v97;
  _BOOL8 v98;
  uint64_t *v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  uint64_t v108;
  int *v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  _BOOL8 v122;
  int v123;
  id v124;
  id v125;
  int v126;
  id v127;
  void *v128;
  id v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  id v139;
  _BOOL4 v140;
  unsigned int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  BOOL *v149;
  _QWORD v150[5];
  char v151[8];
  uint64_t v152;
  unsigned __int8 v153;
  unsigned __int8 v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  __int16 v160;
  uint64_t v161;
  uint64_t v162;

  v8 = v7;
  v132 = a2;
  v15 = sub_100003DB8(&qword_1003180C0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v114 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100003DB8((uint64_t *)&unk_10031B230);
  __chkstk_darwin(v19, v20);
  v149 = (BOOL *)&v114 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100003DB8(&qword_10031F888);
  __chkstk_darwin(v22, v23);
  v148 = (char *)&v114 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100003DB8(&qword_10031F880);
  __chkstk_darwin(v25, v26);
  v147 = (char *)&v114 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = type metadata accessor for ConnectionAssistantState(0);
  v29 = __chkstk_darwin(v130, v28);
  v31 = (char *)&v114 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29, v32);
  v34 = (char *)&v114 - v33;
  v35 = objc_msgSend(v7, "currentTarget");
  v129 = v35;
  if (v35)
  {
    v36 = v35;
    sub_1000F7FF4((uint64_t)v150, a6, a7);
    v145 = v150[1];
    v146 = v150[0];
    v144 = v150[2];
    v143 = v150[3];
    v142 = v150[4];

  }
  else
  {
    v145 = 0;
    v146 = 0;
    v144 = 0;
    v143 = 0;
    v142 = 0;
  }
  v37 = objc_msgSend(v7, "targetVisibility");
  if (v37)
  {
    v38 = v37;
    v39 = (unint64_t)objc_msgSend(v37, "aggregateVisibility");

    if (v39 > 3)
      v40 = 3;
    else
      v40 = 0x2010003u >> (8 * v39);
  }
  else
  {
    v40 = 4;
  }
  v141 = v40;
  v41 = objc_msgSend(v8, "locationState");
  v42 = v41;
  if (v41)
  {
    v43 = objc_msgSend(v41, "locationAcquisitionStatus");

    v140 = v43 != (id)1;
  }
  else
  {
    v140 = 0;
  }
  v44 = objc_msgSend(v8, "serviceIntervals");
  if (v44)
  {
    v45 = v44;
    sub_1000F81E8(v147);

  }
  else
  {
    v46 = type metadata accessor for ServiceOutages(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v147, 1, 1, v46);
  }
  v47 = objc_msgSend(v8, "silenceInterval");
  if (v47)
  {
    v48 = v47;
    sub_1000F882C(v148);

  }
  else
  {
    v49 = type metadata accessor for SilencePeriod(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v148, 1, 1, v49);
  }
  v50 = objc_msgSend(v8, "connectionState");
  v136 = a4;
  v135 = a3;
  v134 = a5;
  v133 = a1;
  v131 = v31;
  v128 = v42;
  if (v50)
  {
    v51 = v50;
    v52 = v149;
    sub_1000F8B10(v149);

    v53 = type metadata accessor for LinkState(0);
    (*(void (**)(BOOL *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v52, 0, 1, v53);
  }
  else
  {
    v54 = type metadata accessor for LinkState(0);
    (*(void (**)(BOOL *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v149, 1, 1, v54);
  }
  v55 = objc_msgSend(v8, "conversationState");
  if (v55)
  {
    v56 = v55;
    v57 = sub_1000F9068((uint64_t)objc_msgSend(v55, "requestReason"));
    if (v57 == 4)
      v58 = 1;
    else
      v58 = v57;
    v59 = objc_msgSend(v56, "conversationId");
    v139 = objc_msgSend(v59, "int64ValueSafe");

    v60 = objc_msgSend(v56, "committed");
    if (objc_msgSend(v56, "fromService"))
    {
      v127 = objc_msgSend(v56, "fromService");
      v126 = 0;
    }
    else
    {
      v127 = 0;
      v126 = 1;
    }

    v138 = v60;
    v61 = v58;
    v62 = &v161;
  }
  else
  {
    v137 = 0;
    v139 = 0;
    v127 = 0;
    v126 = 0;
    v61 = 2;
    v62 = &v162;
  }
  *(v62 - 32) = v61;
  v63 = objc_msgSend(v8, "roadsideConversationState");
  if (!v63)
    goto LABEL_35;
  v64 = v63;
  v65 = v18;
  v18 = v8;
  v66 = objc_msgSend(v63, "conversationId");
  v67 = objc_msgSend(v66, "int64ValueSafe");

  v68 = objc_msgSend(v64, "committed");
  v8 = objc_msgSend(v64, "providerId");

  if (!v8)
  {
    v72 = 0;
LABEL_37:
    if (objc_msgSend(v64, "fromService"))
    {
      v124 = objc_msgSend(v64, "fromService");
      v123 = 0;
    }
    else
    {
      v124 = 0;
      v123 = 1;
    }
    v122 = v8 == 0;

    v121 = v68;
    v8 = v18;
    v18 = v65;
    goto LABEL_41;
  }
  v69 = objc_msgSend(v64, "providerId");
  if (!v69)
  {
    __break(1u);
    return;
  }
  v70 = v69;
  v71 = (unint64_t)objc_msgSend(v69, "int64ValueSafe");

  v72 = v71;
  if ((v71 & 0x8000000000000000) == 0)
    goto LABEL_37;
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
LABEL_35:
  v67 = 0;
  v72 = 0;
  v122 = 0;
  v124 = 0;
  v123 = 0;
  v121 = 2;
LABEL_41:
  v73 = objc_msgSend(v8, "iso3166Alpha3CountryCode");
  if (v73)
  {
    v74 = v73;
    v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(v73);
    v119 = v75;

  }
  else
  {
    v120 = 0;
    v119 = 0;
  }
  v76 = objc_msgSend(v8, "connectionClosedState");
  if (v76)
  {
    v77 = v76;
    sub_1000F8CAC(v18);

    v78 = type metadata accessor for ConnectionClosed(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 56))(v18, 0, 1, v78);
  }
  else
  {
    v79 = type metadata accessor for ConnectionClosed(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v79 - 8) + 56))(v18, 1, 1, v79);
  }
  v125 = v67;
  v80 = objc_msgSend(v8, "stewieState");
  if (v80)
  {
    sub_1000197E4(objc_msgSend(v8, "internetInterface") == (id)2, (char)objc_msgSend(v8, "isEmergencyVoiceCallCapable"), (uint64_t)v151);
    v118 = v151[0];
    v117 = v152;
    v81 = v72;
    v82 = v153;
    v83 = v18;
    v84 = v154;
    v116 = v155;
    v115 = v156;
    v85 = v158;
    v114 = v157;
    v86 = v159;
    v87 = v160;

    v80 = (id)(v82 | (v84 << 8));
    v72 = v81;
    v18 = v83;
  }
  else
  {
    v118 = 0;
    v117 = 0;
    v116 = 0;
    v115 = 0;
    v114 = 0;
    v85 = 0;
    v86 = 0;
    v87 = 0;
  }
  v88 = v128 == 0;
  v89 = v129 == 0;
  v90 = v145;
  *(_QWORD *)v34 = v146;
  *((_QWORD *)v34 + 1) = v90;
  v91 = v143;
  *((_QWORD *)v34 + 2) = v144;
  *((_QWORD *)v34 + 3) = v91;
  *((_QWORD *)v34 + 4) = v142;
  v34[40] = v89;
  v34[41] = v141;
  v34[42] = v140;
  v34[43] = v88;
  v92 = (int *)v130;
  sub_10000B458((uint64_t)v147, (uint64_t)&v34[*(int *)(v130 + 28)], &qword_10031F880);
  sub_10000B458((uint64_t)v148, (uint64_t)&v34[v92[8]], &qword_10031F888);
  sub_10000B458((uint64_t)v149, (uint64_t)&v34[v92[9]], (uint64_t *)&unk_10031B230);
  v93 = &v34[v92[10]];
  v94 = v139;
  *(_QWORD *)v93 = v137;
  *((_QWORD *)v93 + 1) = v94;
  v95 = v127;
  *((_QWORD *)v93 + 2) = v138;
  *((_QWORD *)v93 + 3) = v95;
  v93[32] = v126;
  v96 = &v34[v92[11]];
  v97 = v121;
  *(_QWORD *)v96 = v125;
  *((_QWORD *)v96 + 1) = v97;
  v98 = v122;
  *((_QWORD *)v96 + 2) = v72;
  *((_QWORD *)v96 + 3) = v98;
  *((_QWORD *)v96 + 4) = v124;
  v96[40] = v123;
  v99 = (uint64_t *)&v34[v92[12]];
  v100 = v119;
  *v99 = v120;
  v99[1] = v100;
  sub_10000B458((uint64_t)v18, (uint64_t)&v34[v92[13]], &qword_1003180C0);
  v101 = &v34[v92[14]];
  v102 = v117;
  *(_QWORD *)v101 = v118;
  *((_QWORD *)v101 + 1) = v102;
  v103 = v116;
  *((_QWORD *)v101 + 2) = v80;
  *((_QWORD *)v101 + 3) = v103;
  v104 = v114;
  *((_QWORD *)v101 + 4) = v115;
  *((_QWORD *)v101 + 5) = v104;
  *((_QWORD *)v101 + 6) = v85;
  *((_QWORD *)v101 + 7) = v86;
  *((_WORD *)v101 + 32) = v87;
  v105 = (uint64_t)v131;
  sub_1000E1F30((uint64_t)v34, (uint64_t)v131, type metadata accessor for ConnectionAssistantState);
  v106 = objc_msgSend(v8, "version");
  sub_10000AFFC((uint64_t)v34, type metadata accessor for ConnectionAssistantState);
  v107 = v105;
  v108 = v134;
  sub_1000E8D6C(v107, v134, type metadata accessor for ConnectionAssistantState);
  v109 = (int *)type metadata accessor for TargetConnection(0);
  *(_QWORD *)(v108 + v109[5]) = v106;
  *(_BYTE *)(v108 + v109[6]) = v133 & 1;
  v110 = (uint64_t *)(v108 + v109[7]);
  v111 = v135;
  v112 = v136;
  *v110 = v135;
  v110[1] = v112;
  v113 = v132;
  *(_QWORD *)(v108 + v109[8]) = v132;
  sub_100018F00(v111, v112);
  swift_retain(v113);
}

uint64_t sub_1000EF734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;
  char v12;
  uint64_t result;
  void *v14;
  uint64_t v15;
  _QWORD v17[2];
  _BYTE v18[24];

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (_QWORD *)((char *)&v17[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v10 = static OS_dispatch_queue.main.getter(v11);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = _dispatchPreconditionTest(_:)(v10);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v12 & 1) != 0)
  {
    swift_beginAccess(a3 + 16, v18, 0, 0);
    result = swift_unknownObjectWeakLoadStrong(a3 + 16);
    if (result)
    {
      v14 = (void *)result;
      v15 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource_carrierNameDidChange);
      swift_retain(v15);

      v17[0] = a1;
      v17[1] = a2;
      PassthroughSubject.send(_:)(v17);
      return swift_release(v15);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000EF86C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  v3 = v2;
  if (qword_100315848 != -1)
    swift_once(&qword_100315848, sub_1000D9674);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000D744(v6, (uint64_t)qword_10033FD90);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "fetchConnectionAssistantState", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

  v11 = *(void **)(v3 + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__agent);
  if (v11)
  {
    v12 = type metadata accessor for PreventSuspensionAssertion();
    swift_allocObject(v12, 32, 7);
    v13 = v11;
    v14 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, 0xD000000000000021, 0x8000000100269530);
    sub_100017F10(v14, a1, a2);

    swift_release(v14);
  }
}

uint64_t sub_1000EF9E4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v24[24];

  v1 = v0;
  v2 = sub_100003DB8(&qword_10031FA70);
  __chkstk_darwin(v2, v3);
  v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = &v24[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v10 = static OS_dispatch_queue.main.getter(v11);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v12 & 1) != 0)
  {
    if (qword_100315848 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315848, sub_1000D9674);
LABEL_3:
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10000D744(v13, (uint64_t)qword_10033FD90);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "stop", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  v18 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__agent);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__agent) = 0;

  v19 = v1 + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__lastVersionForwarded;
  *(_QWORD *)v19 = 0;
  *(_BYTE *)(v19 + 8) = 1;
  v20 = type metadata accessor for ConnectionAssistantState(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v5, 1, 1, v20);
  v21 = v1 + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource__lastStateForwarded;
  swift_beginAccess(v21, v24, 33, 0);
  sub_1000FDCAC((uint64_t)v5, v21);
  return swift_endAccess(v24);
}

uint64_t type metadata accessor for ConnectionAssistantState(uint64_t a1)
{
  return sub_10003D8E8(a1, (uint64_t *)&unk_10031F988, (uint64_t)&nominal type descriptor for ConnectionAssistantState);
}

uint64_t sub_1000EFC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EFC54);
}

uint64_t sub_1000EFC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EFC64);
}

uint64_t type metadata accessor for TargetTracks(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_10031F530, (uint64_t)&nominal type descriptor for TargetTracks);
}

uint64_t *sub_1000EFC80(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  _BYTE *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v13);
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v7 = *(int *)(a3 + 20);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_100003DB8(&qword_100317D58);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v14 = *(int *)(a3 + 24);
    v15 = *(uint64_t *)((char *)a2 + v14);
    *(uint64_t *)((char *)v4 + v14) = v15;
    swift_bridgeObjectRetain(v15);
  }
  return v4;
}

uint64_t sub_1000EFD88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

_BYTE *sub_1000EFE00(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100003DB8(&qword_100317D58);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = *(int *)(a3 + 24);
  v13 = *(_QWORD *)&a2[v12];
  *(_QWORD *)&a1[v12] = v13;
  swift_bridgeObjectRetain(v13);
  return a1;
}

_BYTE *sub_1000EFEDC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = sub_100003DB8(&qword_100317D58);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = *(int *)(a3 + 24);
  v16 = *(_QWORD *)&a2[v15];
  v17 = *(_QWORD *)&a1[v15];
  *(_QWORD *)&a1[v15] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

_BYTE *sub_1000F0010(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100003DB8(&qword_100317D58);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_QWORD *)&a1[*(int *)(a3 + 24)] = *(_QWORD *)&a2[*(int *)(a3 + 24)];
  return a1;
}

_BYTE *sub_1000F00E8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = sub_100003DB8(&qword_100317D58);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = *(int *)(a3 + 24);
  v16 = *(_QWORD *)&a1[v15];
  *(_QWORD *)&a1[v15] = *(_QWORD *)&a2[v15];
  swift_bridgeObjectRelease(v16);
  return a1;
}

uint64_t sub_1000F0214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F0220);
}

uint64_t sub_1000F0220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100003DB8(&qword_100317D58);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000F02A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F02B0);
}

uint64_t sub_1000F02B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003DB8(&qword_100317D58);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ConnectionClosed(uint64_t a1)
{
  return sub_10003D8E8(a1, (uint64_t *)&unk_10031F5C8, (uint64_t)&nominal type descriptor for ConnectionClosed);
}

void sub_1000F0344(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_100255668;
  sub_1000F03D4(319, (unint64_t *)&unk_10031F5D8, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

void sub_1000F03D4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;

  if (!*a2)
  {
    v5 = a3(255);
    v6 = type metadata accessor for Optional(a1, v5);
    if (!v7)
      atomic_store(v6, a2);
  }
}

ValueMetadata *type metadata accessor for RoadsideAssistanceConversationState()
{
  return &type metadata for RoadsideAssistanceConversationState;
}

ValueMetadata *type metadata accessor for EmergencyConversationState()
{
  return &type metadata for EmergencyConversationState;
}

uint64_t *sub_1000F0440(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v9);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
  }
  return a1;
}

uint64_t sub_1000F04DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v6)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date(0);
  v6 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 20), v4);
}

uint64_t sub_1000F0544(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_1000F05B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_1000F0624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_1000F0694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_1000F0704(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F0710);
}

uint64_t sub_1000F0710(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1000F074C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F0758);
}

uint64_t sub_1000F0758(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SilencePeriod(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_10031F668, (uint64_t)&nominal type descriptor for SilencePeriod);
}

uint64_t sub_1000F07AC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t *sub_1000F0814(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    v9 = *(int *)(a3 + 24);
    v10 = *(uint64_t *)((char *)a2 + v9);
    *(uint64_t *)((char *)a1 + v9) = v10;
    swift_bridgeObjectRetain(v10);
  }
  return a1;
}

uint64_t sub_1000F08C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = type metadata accessor for Date(0);
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 24)));
}

uint64_t sub_1000F0920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a2 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  return a1;
}

uint64_t sub_1000F09A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a2 + v8);
  v10 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_1000F0A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1000F0AA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a1 + v8);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_1000F0B2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F0B38);
}

uint64_t sub_1000F0B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_1000F0BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F0BC4);
}

uint64_t sub_1000F0BC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for ServiceOutages(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_10031F6F8, (uint64_t)&nominal type descriptor for ServiceOutages);
}

uint64_t sub_1000F0C54(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationState()
{
  return &type metadata for LocationState;
}

_QWORD *sub_1000F0CDC(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v16);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
    v14 = swift_bridgeObjectRetain(v7);
    if (v13(v10, 1, v11, v14))
    {
      v15 = sub_100003DB8(&qword_100317D58);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v17 = a3[6];
    v18 = a3[7];
    v19 = (char *)v4 + v17;
    v20 = (char *)a2 + v17;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    *(_QWORD *)((char *)v4 + v18) = *(_QWORD *)((char *)a2 + v18);
    *((_BYTE *)v4 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  }
  return v4;
}

uint64_t sub_1000F0E14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Date(0);
  v6 = *(_QWORD *)(v5 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return result;
}

_QWORD *sub_1000F0E90(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t, __n128);
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v11 + 48);
  v13 = swift_bridgeObjectRetain(v6);
  if (v12(v9, 1, v10, v13))
  {
    v14 = sub_100003DB8(&qword_100317D58);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = a3[6];
  v16 = a3[7];
  v17 = (char *)a1 + v15;
  v18 = (char *)a2 + v15;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_QWORD *)((char *)a1 + v16) = *(_QWORD *)((char *)a2 + v16);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

_QWORD *sub_1000F0F9C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 24))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100003DB8(&qword_100317D58);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[6];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = *(_QWORD *)v19;
  v18[8] = v19[8];
  *(_QWORD *)v18 = v20;
  *(_QWORD *)((char *)a1 + a3[7]) = *(_QWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

_OWORD *sub_1000F1100(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Date(0);
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = sub_100003DB8(&qword_100317D58);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v12 = a3[6];
  v13 = a3[7];
  v14 = (char *)a1 + v12;
  v15 = (char *)a2 + v12;
  *(_QWORD *)v14 = *(_QWORD *)v15;
  v14[8] = v15[8];
  *(_QWORD *)((char *)a1 + v13) = *(_QWORD *)((char *)a2 + v13);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

_QWORD *sub_1000F11FC(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    v16 = sub_100003DB8(&qword_100317D58);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  v17 = a3[6];
  v18 = a3[7];
  v19 = (char *)a1 + v17;
  v20 = (char *)a2 + v17;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  *(_QWORD *)((char *)a1 + v18) = *(_QWORD *)((char *)a2 + v18);
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  return a1;
}

uint64_t sub_1000F134C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F1358);
}

uint64_t sub_1000F1358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = sub_100003DB8(&qword_100317D58);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v9);
  }
}

uint64_t sub_1000F13E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F13F0);
}

uint64_t sub_1000F13F0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)(result + 8) = a2;
  }
  else
  {
    v7 = sub_100003DB8(&qword_100317D58);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 20), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for TransmissionProgress(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_10031F790, (uint64_t)&nominal type descriptor for TransmissionProgress);
}

void sub_1000F147C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100255718;
  sub_1000F03D4(319, (unint64_t *)&unk_10031F5D8, (uint64_t (*)(uint64_t))&type metadata accessor for Date);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = &unk_100255620;
    v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[4] = &unk_100255730;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

uint64_t *sub_1000F1520(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *__dst;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v5 = *(int *)(a3 + 32);
    v6 = (uint64_t *)((char *)a1 + v5);
    v7 = (uint64_t *)((char *)a2 + v5);
    v8 = (int *)type metadata accessor for TransmissionProgress(0);
    v9 = *((_QWORD *)v8 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v9 + 48))(v7, 1, v8))
    {
      v10 = sub_100003DB8(&qword_100316B68);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v12 = v7[1];
      *v6 = *v7;
      v6[1] = v12;
      v13 = v8[5];
      __dst = (char *)v6 + v13;
      v14 = (char *)v7 + v13;
      v15 = type metadata accessor for Date(0);
      v16 = *(_QWORD *)(v15 - 8);
      v17 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v16 + 48);
      v18 = swift_bridgeObjectRetain(v12);
      if (v17(v14, 1, v15, v18))
      {
        v19 = sub_100003DB8(&qword_100317D58);
        memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
      }
      v20 = v8[6];
      v21 = (char *)v6 + v20;
      v22 = (char *)v7 + v20;
      *(_QWORD *)v21 = *(_QWORD *)v22;
      v21[8] = v22[8];
      *(_QWORD *)((char *)v6 + v8[7]) = *(_QWORD *)((char *)v7 + v8[7]);
      *((_BYTE *)v6 + v8[8]) = *((_BYTE *)v7 + v8[8]);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t sub_1000F16DC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1 + *(int *)(a2 + 32);
  v3 = type metadata accessor for TransmissionProgress(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3);
  if (!(_DWORD)result)
  {
    swift_bridgeObjectRelease(*(_QWORD *)(v2 + 8));
    v5 = v2 + *(int *)(v3 + 20);
    v6 = type metadata accessor for Date(0);
    v7 = *(_QWORD *)(v6 - 8);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6);
    if (!(_DWORD)result)
      return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  return result;
}

_DWORD *sub_1000F1780(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t, __n128);
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *__dst;

  *a1 = *a2;
  v4 = *(int *)(a3 + 32);
  v5 = (_QWORD *)((char *)a1 + v4);
  v6 = (_QWORD *)((char *)a2 + v4);
  v7 = (int *)type metadata accessor for TransmissionProgress(0);
  v8 = *((_QWORD *)v7 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_100003DB8(&qword_100316B68);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = v6[1];
    *v5 = *v6;
    v5[1] = v10;
    v11 = v7[5];
    __dst = (char *)v5 + v11;
    v12 = (char *)v6 + v11;
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    v15 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v14 + 48);
    v16 = swift_bridgeObjectRetain(v10);
    if (v15(v12, 1, v13, v16))
    {
      v17 = sub_100003DB8(&qword_100317D58);
      memcpy(__dst, v12, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(__dst, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(__dst, 0, 1, v13);
    }
    v18 = v7[6];
    v19 = (char *)v5 + v18;
    v20 = (char *)v6 + v18;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    *(_QWORD *)((char *)v5 + v7[7]) = *(_QWORD *)((char *)v6 + v7[7]);
    *((_BYTE *)v5 + v7[8]) = *((_BYTE *)v6 + v7[8]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_BYTE *sub_1000F1910(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t, int *);
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *__dst;

  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  v4 = *(int *)(a3 + 32);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = (int *)type metadata accessor for TransmissionProgress(0);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (v11)
    {
      sub_10000AFFC((uint64_t)v5, type metadata accessor for TransmissionProgress);
      goto LABEL_7;
    }
    *v5 = *v6;
    v21 = v6[1];
    v22 = v5[1];
    v5[1] = v21;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(v22);
    v23 = v7[5];
    v24 = (char *)v5 + v23;
    v25 = (char *)v6 + v23;
    v26 = type metadata accessor for Date(0);
    v27 = *(_QWORD *)(v26 - 8);
    v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
    v29 = v28(v24, 1, v26);
    v30 = v28(v25, 1, v26);
    if (v29)
    {
      if (!v30)
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
LABEL_16:
        v36 = v7[6];
        v37 = (char *)v5 + v36;
        v38 = (char *)v6 + v36;
        v39 = *(_QWORD *)v38;
        v37[8] = v38[8];
        *(_QWORD *)v37 = v39;
        *(_QWORD *)((char *)v5 + v7[7]) = *(_QWORD *)((char *)v6 + v7[7]);
        *((_BYTE *)v5 + v7[8]) = *((_BYTE *)v6 + v7[8]);
        return a1;
      }
    }
    else
    {
      if (!v30)
      {
        (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v24, v25, v26);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
    }
    v35 = sub_100003DB8(&qword_100317D58);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    goto LABEL_16;
  }
  if (v11)
  {
LABEL_7:
    v20 = sub_100003DB8(&qword_100316B68);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    return a1;
  }
  *v5 = *v6;
  v12 = v6[1];
  v5[1] = v12;
  v13 = v7[5];
  __dst = (char *)v5 + v13;
  v14 = (char *)v6 + v13;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v16 + 48);
  v18 = swift_bridgeObjectRetain(v12);
  if (v17(v14, 1, v15, v18))
  {
    v19 = sub_100003DB8(&qword_100317D58);
    memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
  }
  v31 = v7[6];
  v32 = (char *)v5 + v31;
  v33 = (char *)v6 + v31;
  v34 = *(_QWORD *)v33;
  v32[8] = v33[8];
  *(_QWORD *)v32 = v34;
  *(_QWORD *)((char *)v5 + v7[7]) = *(_QWORD *)((char *)v6 + v7[7]);
  *((_BYTE *)v5 + v7[8]) = *((_BYTE *)v6 + v7[8]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

_DWORD *sub_1000F1C0C(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;

  *a1 = *a2;
  v4 = *(int *)(a3 + 32);
  v5 = (_OWORD *)((char *)a1 + v4);
  v6 = (_OWORD *)((char *)a2 + v4);
  v7 = (int *)type metadata accessor for TransmissionProgress(0);
  v8 = *((_QWORD *)v7 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_100003DB8(&qword_100316B68);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    *v5 = *v6;
    v10 = v7[5];
    v11 = (char *)v5 + v10;
    v12 = (char *)v6 + v10;
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = sub_100003DB8(&qword_100317D58);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    v16 = v7[6];
    v17 = (char *)v5 + v16;
    v18 = (char *)v6 + v16;
    *(_QWORD *)v17 = *(_QWORD *)v18;
    v17[8] = v18[8];
    *(_QWORD *)((char *)v5 + v7[7]) = *(_QWORD *)((char *)v6 + v7[7]);
    *((_BYTE *)v5 + v7[8]) = *((_BYTE *)v6 + v7[8]);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_1000F1D84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  int *v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t, int *);
  int v10;
  int v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  v4 = *(int *)(a3 + 32);
  v5 = (_QWORD *)(a1 + v4);
  v6 = (_QWORD *)(a2 + v4);
  v7 = (int *)type metadata accessor for TransmissionProgress(0);
  v8 = *((_QWORD *)v7 - 1);
  v9 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (v11)
    {
      sub_10000AFFC((uint64_t)v5, type metadata accessor for TransmissionProgress);
      goto LABEL_7;
    }
    v19 = v6[1];
    v20 = v5[1];
    *v5 = *v6;
    v5[1] = v19;
    swift_bridgeObjectRelease(v20);
    v21 = v7[5];
    v22 = (char *)v5 + v21;
    v23 = (char *)v6 + v21;
    v24 = type metadata accessor for Date(0);
    v25 = *(_QWORD *)(v24 - 8);
    v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
    v27 = v26(v22, 1, v24);
    v28 = v26(v23, 1, v24);
    if (v27)
    {
      if (!v28)
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_16:
        v33 = v7[6];
        v34 = (char *)v5 + v33;
        v35 = (char *)v6 + v33;
        *(_QWORD *)v34 = *(_QWORD *)v35;
        v34[8] = v35[8];
        *(_QWORD *)((char *)v5 + v7[7]) = *(_QWORD *)((char *)v6 + v7[7]);
        *((_BYTE *)v5 + v7[8]) = *((_BYTE *)v6 + v7[8]);
        return a1;
      }
    }
    else
    {
      if (!v28)
      {
        (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v22, v23, v24);
        goto LABEL_16;
      }
      (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
    }
    v32 = sub_100003DB8(&qword_100317D58);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_16;
  }
  if (v11)
  {
LABEL_7:
    v18 = sub_100003DB8(&qword_100316B68);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v5 = *(_OWORD *)v6;
  v12 = v7[5];
  v13 = (char *)v5 + v12;
  v14 = (char *)v6 + v12;
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    v17 = sub_100003DB8(&qword_100317D58);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v29 = v7[6];
  v30 = (char *)v5 + v29;
  v31 = (char *)v6 + v29;
  *(_QWORD *)v30 = *(_QWORD *)v31;
  v30[8] = v31[8];
  *(_QWORD *)((char *)v5 + v7[7]) = *(_QWORD *)((char *)v6 + v7[7]);
  *((_BYTE *)v5 + v7[8]) = *((_BYTE *)v6 + v7[8]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t sub_1000F2048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F2054);
}

uint64_t sub_1000F2054(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = sub_100003DB8(&qword_100316B68);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 32)], a2, v10);
  }
}

uint64_t sub_1000F20D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F20E0);
}

_BYTE *sub_1000F20E0(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = sub_100003DB8(&qword_100316B68);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 32)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for LinkState(uint64_t a1)
{
  return sub_10003D8E8(a1, (uint64_t *)&unk_10031F830, (uint64_t)&nominal type descriptor for LinkState);
}

void sub_1000F2168(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[5];

  v4[0] = &unk_100255758;
  v4[1] = &unk_100255770;
  v4[2] = &unk_100255770;
  v4[3] = &unk_100255788;
  sub_1000F03D4(319, (unint64_t *)&qword_10031F840, type metadata accessor for TransmissionProgress);
  if (v3 <= 0x3F)
  {
    v4[4] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
  }
}

_QWORD *sub_1000F2200(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  __int128 v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  _OWORD *v53;
  _OWORD *v54;
  __int128 v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  _BYTE *v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int (*v65)(_BYTE *, uint64_t, uint64_t, __n128);
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void (*v75)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v76;
  uint64_t v77;
  char *v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  uint64_t v96;
  unsigned int (*v97)(char *, uint64_t, uint64_t, __n128);
  uint64_t v98;
  char *v99;
  char *__dst;
  _BYTE *__dsta;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
    *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
    *(_WORD *)(a1 + 42) = *((_WORD *)a2 + 21);
    v7 = (int *)type metadata accessor for ConnectionAssistantState(0);
    v8 = v7[7];
    v9 = (char *)v4 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for ServiceOutages(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_100003DB8(&qword_10031F880);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v15 = type metadata accessor for Date(0);
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      v16(v9, v10, v15);
      v16(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v15);
      v17 = *(int *)(v11 + 24);
      v18 = *(_QWORD *)&v10[v17];
      *(_QWORD *)&v9[v17] = v18;
      v19 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v12 + 56);
      v20 = swift_bridgeObjectRetain(v18);
      v19(v9, 0, 1, v11, v20);
    }
    v21 = v7[8];
    v22 = (char *)v4 + v21;
    v23 = (char *)a2 + v21;
    v24 = type metadata accessor for SilencePeriod(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = sub_100003DB8(&qword_10031F888);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v27 = type metadata accessor for Date(0);
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
      v28(v22, v23, v27);
      v28(&v22[*(int *)(v24 + 20)], &v23[*(int *)(v24 + 20)], v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v29 = v7[9];
    v30 = (_DWORD *)((char *)v4 + v29);
    v31 = (_DWORD *)((char *)a2 + v29);
    v32 = type metadata accessor for LinkState(0);
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      v34 = sub_100003DB8((uint64_t *)&unk_10031B230);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      *v30 = *v31;
      v35 = *(int *)(v32 + 32);
      v36 = (_QWORD *)((char *)v30 + v35);
      v37 = (_QWORD *)((char *)v31 + v35);
      v38 = (int *)type metadata accessor for TransmissionProgress(0);
      v39 = *((_QWORD *)v38 - 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v39 + 48))(v37, 1, v38))
      {
        v40 = sub_100003DB8(&qword_100316B68);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        v96 = v39;
        v98 = v37[1];
        *v36 = *v37;
        v36[1] = v98;
        v41 = v38[5];
        v99 = (char *)v36 + v41;
        __dst = (char *)v37 + v41;
        v42 = type metadata accessor for Date(0);
        v95 = *(_QWORD *)(v42 - 8);
        v97 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v95 + 48);
        v43 = swift_bridgeObjectRetain(v98);
        if (v97(__dst, 1, v42, v43))
        {
          v44 = sub_100003DB8(&qword_100317D58);
          memcpy(v99, __dst, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v95 + 16))(v99, __dst, v42);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(v99, 0, 1, v42);
        }
        v45 = v38[6];
        v46 = (char *)v36 + v45;
        v47 = (char *)v37 + v45;
        *(_QWORD *)v46 = *(_QWORD *)v47;
        v46[8] = v47[8];
        *(_QWORD *)((char *)v36 + v38[7]) = *(_QWORD *)((char *)v37 + v38[7]);
        *((_BYTE *)v36 + v38[8]) = *((_BYTE *)v37 + v38[8]);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v96 + 56))(v36, 0, 1, v38);
      }
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    v48 = v7[10];
    v49 = (char *)v4 + v48;
    v50 = (uint64_t)a2 + v48;
    v51 = *(_OWORD *)(v50 + 16);
    *(_OWORD *)v49 = *(_OWORD *)v50;
    *((_OWORD *)v49 + 1) = v51;
    v49[32] = *(_BYTE *)(v50 + 32);
    v52 = v7[11];
    v53 = (_OWORD *)((char *)v4 + v52);
    v54 = (_OWORD *)((char *)a2 + v52);
    *(_OWORD *)((char *)v53 + 25) = *(_OWORD *)((char *)v54 + 25);
    v55 = v54[1];
    *v53 = *v54;
    v53[1] = v55;
    v56 = v7[12];
    v57 = (_QWORD *)((char *)v4 + v56);
    v58 = (uint64_t *)((char *)a2 + v56);
    v59 = v58[1];
    *v57 = *v58;
    v57[1] = v59;
    v60 = v7[13];
    v61 = (char *)v4 + v60;
    v62 = (char *)a2 + v60;
    v63 = type metadata accessor for ConnectionClosed(0);
    v64 = *(_QWORD *)(v63 - 8);
    v65 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v64 + 48);
    v66 = swift_bridgeObjectRetain(v59);
    if (v65(v62, 1, v63, v66))
    {
      v67 = sub_100003DB8(&qword_1003180C0);
      memcpy(v61, v62, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
    }
    else
    {
      *v61 = *v62;
      v68 = *(int *)(v63 + 20);
      __dsta = &v61[v68];
      v69 = &v62[v68];
      v70 = type metadata accessor for Date(0);
      v71 = *(_QWORD *)(v70 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v71 + 48))(v69, 1, v70))
      {
        v72 = sub_100003DB8(&qword_100317D58);
        memcpy(__dsta, v69, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v71 + 16))(__dsta, v69, v70);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v71 + 56))(__dsta, 0, 1, v70);
      }
      v73 = *(int *)(v63 + 24);
      v74 = *(_QWORD *)&v62[v73];
      *(_QWORD *)&v61[v73] = v74;
      v75 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128))(v64 + 56);
      v76 = swift_bridgeObjectRetain(v74);
      v75(v61, 0, 1, v63, v76);
    }
    v77 = v7[14];
    v78 = (char *)v4 + v77;
    v79 = (char *)a2 + v77;
    v80 = *((_QWORD *)v79 + 1);
    if (v80)
    {
      *v78 = *v79;
      *((_QWORD *)v78 + 1) = v80;
      *((_WORD *)v78 + 8) = *((_WORD *)v79 + 8);
      v81 = *((_QWORD *)v79 + 3);
      v82 = *((_QWORD *)v79 + 4);
      *((_QWORD *)v78 + 3) = v81;
      *((_QWORD *)v78 + 4) = v82;
      v83 = *((_QWORD *)v79 + 5);
      v84 = *((_QWORD *)v79 + 6);
      *((_QWORD *)v78 + 5) = v83;
      *((_QWORD *)v78 + 6) = v84;
      v85 = *((_QWORD *)v79 + 7);
      *((_QWORD *)v78 + 7) = v85;
      v78[64] = v79[64];
      v78[65] = v79[65];
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v84);
      swift_bridgeObjectRetain(v85);
    }
    else
    {
      v86 = *((_OWORD *)v79 + 3);
      *((_OWORD *)v78 + 2) = *((_OWORD *)v79 + 2);
      *((_OWORD *)v78 + 3) = v86;
      *((_WORD *)v78 + 32) = *((_WORD *)v79 + 32);
      v87 = *((_OWORD *)v79 + 1);
      *(_OWORD *)v78 = *(_OWORD *)v79;
      *((_OWORD *)v78 + 1) = v87;
    }
    v88 = a3[6];
    *(_QWORD *)((char *)v4 + a3[5]) = *(uint64_t *)((char *)a2 + a3[5]);
    *((_BYTE *)v4 + v88) = *((_BYTE *)a2 + v88);
    v89 = a3[7];
    v90 = (_QWORD *)((char *)v4 + v89);
    v91 = (uint64_t *)((char *)a2 + v89);
    if (*v91)
    {
      v92 = v91[1];
      *v90 = *v91;
      v90[1] = v92;
      swift_retain(v92);
    }
    else
    {
      *(_OWORD *)v90 = *(_OWORD *)v91;
    }
    v93 = a3[8];
    v14 = *(uint64_t *)((char *)a2 + v93);
    *(_QWORD *)((char *)v4 + v93) = v14;
  }
  swift_retain(v14);
  return v4;
}

uint64_t sub_1000F281C(uint64_t a1, uint64_t a2)
{
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;

  v4 = (int *)type metadata accessor for ConnectionAssistantState(0);
  v5 = a1 + v4[7];
  v6 = type metadata accessor for ServiceOutages(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6))
  {
    v7 = type metadata accessor for Date(0);
    v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
    v8(v5, v7);
    v8(v5 + *(int *)(v6 + 20), v7);
    swift_bridgeObjectRelease(*(_QWORD *)(v5 + *(int *)(v6 + 24)));
  }
  v9 = a1 + v4[8];
  v10 = type metadata accessor for SilencePeriod(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v9, 1, v10))
  {
    v11 = type metadata accessor for Date(0);
    v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
    v12(v9, v11);
    v12(v9 + *(int *)(v10 + 20), v11);
  }
  v13 = a1 + v4[9];
  v14 = type metadata accessor for LinkState(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14))
  {
    v15 = v13 + *(int *)(v14 + 32);
    v16 = type metadata accessor for TransmissionProgress(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v15, 1, v16))
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v15 + 8));
      v17 = v15 + *(int *)(v16 + 20);
      v18 = type metadata accessor for Date(0);
      v19 = *(_QWORD *)(v18 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
        (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    }
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + v4[12] + 8));
  v20 = a1 + v4[13];
  v21 = type metadata accessor for ConnectionClosed(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v20, 1, v21))
  {
    v22 = v20 + *(int *)(v21 + 20);
    v23 = type metadata accessor for Date(0);
    v24 = *(_QWORD *)(v23 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    swift_bridgeObjectRelease(*(_QWORD *)(v20 + *(int *)(v21 + 24)));
  }
  v25 = (_QWORD *)(a1 + v4[14]);
  v26 = v25[1];
  if (v26)
  {
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v25[3]);
    swift_bridgeObjectRelease(v25[4]);
    swift_bridgeObjectRelease(v25[5]);
    swift_bridgeObjectRelease(v25[6]);
    swift_bridgeObjectRelease(v25[7]);
  }
  v27 = (_QWORD *)(a1 + *(int *)(a2 + 28));
  if (*v27)
    swift_release(v27[1]);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 32)));
}

uint64_t sub_1000F2ABC(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  _OWORD *v52;
  _OWORD *v53;
  __int128 v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(_BYTE *, uint64_t, uint64_t, __n128);
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v95;
  unsigned int (*v96)(char *, uint64_t, uint64_t, __n128);
  _QWORD *v97;
  void *__src;
  uint64_t v99;
  char *__dst;
  _BYTE *__dsta;

  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
  v6 = (int *)type metadata accessor for ConnectionAssistantState(0);
  v7 = v6[7];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for ServiceOutages(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100003DB8(&qword_10031F880);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for Date(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v14(v8, v9, v13);
    v14(&v8[*(int *)(v10 + 20)], &v9[*(int *)(v10 + 20)], v13);
    v15 = *(int *)(v10 + 24);
    v16 = *(_QWORD *)&v9[v15];
    *(_QWORD *)&v8[v15] = v16;
    v17 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v11 + 56);
    v18 = swift_bridgeObjectRetain(v16);
    v17(v8, 0, 1, v10, v18);
  }
  v19 = v6[8];
  v20 = (char *)(a1 + v19);
  v21 = (char *)(a2 + v19);
  v22 = type metadata accessor for SilencePeriod(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = sub_100003DB8(&qword_10031F888);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v25 = type metadata accessor for Date(0);
    v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    v26(v20, v21, v25);
    v26(&v20[*(int *)(v22 + 20)], &v21[*(int *)(v22 + 20)], v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v27 = v6[9];
  v28 = (_DWORD *)(a1 + v27);
  v29 = (_DWORD *)(a2 + v27);
  v30 = type metadata accessor for LinkState(0);
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    v32 = sub_100003DB8((uint64_t *)&unk_10031B230);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    *v28 = *v29;
    v33 = *(int *)(v30 + 32);
    v34 = (_QWORD *)((char *)v28 + v33);
    v35 = (_QWORD *)((char *)v29 + v33);
    v36 = (int *)type metadata accessor for TransmissionProgress(0);
    v37 = *((_QWORD *)v36 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v37 + 48))(v35, 1, v36))
    {
      v38 = sub_100003DB8(&qword_100316B68);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      __src = (void *)v35[1];
      v99 = v37;
      *v34 = *v35;
      v34[1] = __src;
      v39 = v36[5];
      v97 = v34;
      __dst = (char *)v34 + v39;
      v40 = (char *)v35 + v39;
      v41 = type metadata accessor for Date(0);
      v95 = *(_QWORD *)(v41 - 8);
      v96 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v95 + 48);
      v42 = swift_bridgeObjectRetain(__src);
      if (v96(v40, 1, v41, v42))
      {
        v43 = sub_100003DB8(&qword_100317D58);
        memcpy(__dst, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v95 + 16))(__dst, v40, v41);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v95 + 56))(__dst, 0, 1, v41);
      }
      v44 = v36[6];
      v45 = (char *)v97 + v44;
      v46 = (char *)v35 + v44;
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v45[8] = v46[8];
      *(_QWORD *)((char *)v97 + v36[7]) = *(_QWORD *)((char *)v35 + v36[7]);
      *((_BYTE *)v97 + v36[8]) = *((_BYTE *)v35 + v36[8]);
      (*(void (**)(void))(v99 + 56))();
    }
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  v47 = v6[10];
  v48 = a1 + v47;
  v49 = a2 + v47;
  v50 = *(_OWORD *)(v49 + 16);
  *(_OWORD *)v48 = *(_OWORD *)v49;
  *(_OWORD *)(v48 + 16) = v50;
  *(_BYTE *)(v48 + 32) = *(_BYTE *)(v49 + 32);
  v51 = v6[11];
  v52 = (_OWORD *)(a1 + v51);
  v53 = (_OWORD *)(a2 + v51);
  *(_OWORD *)((char *)v52 + 25) = *(_OWORD *)((char *)v53 + 25);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  v55 = v6[12];
  v56 = (_QWORD *)(a1 + v55);
  v57 = (_QWORD *)(a2 + v55);
  v58 = v57[1];
  *v56 = *v57;
  v56[1] = v58;
  v59 = v6[13];
  v60 = (_BYTE *)(a1 + v59);
  v61 = (_BYTE *)(a2 + v59);
  v62 = type metadata accessor for ConnectionClosed(0);
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v63 + 48);
  v65 = swift_bridgeObjectRetain(v58);
  if (v64(v61, 1, v62, v65))
  {
    v66 = sub_100003DB8(&qword_1003180C0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    *v60 = *v61;
    v67 = *(int *)(v62 + 20);
    __dsta = &v60[v67];
    v68 = &v61[v67];
    v69 = type metadata accessor for Date(0);
    v70 = *(_QWORD *)(v69 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
    {
      v71 = sub_100003DB8(&qword_100317D58);
      memcpy(__dsta, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v70 + 16))(__dsta, v68, v69);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v70 + 56))(__dsta, 0, 1, v69);
    }
    v72 = *(int *)(v62 + 24);
    v73 = *(_QWORD *)&v61[v72];
    *(_QWORD *)&v60[v72] = v73;
    v74 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128))(v63 + 56);
    v75 = swift_bridgeObjectRetain(v73);
    v74(v60, 0, 1, v62, v75);
  }
  v76 = v6[14];
  v77 = a1 + v76;
  v78 = a2 + v76;
  v79 = *(_QWORD *)(v78 + 8);
  if (v79)
  {
    *(_BYTE *)v77 = *(_BYTE *)v78;
    *(_QWORD *)(v77 + 8) = v79;
    *(_WORD *)(v77 + 16) = *(_WORD *)(v78 + 16);
    v80 = *(_QWORD *)(v78 + 24);
    v81 = *(_QWORD *)(v78 + 32);
    *(_QWORD *)(v77 + 24) = v80;
    *(_QWORD *)(v77 + 32) = v81;
    v82 = *(_QWORD *)(v78 + 40);
    v83 = *(_QWORD *)(v78 + 48);
    *(_QWORD *)(v77 + 40) = v82;
    *(_QWORD *)(v77 + 48) = v83;
    v84 = *(_QWORD *)(v78 + 56);
    *(_QWORD *)(v77 + 56) = v84;
    *(_BYTE *)(v77 + 64) = *(_BYTE *)(v78 + 64);
    *(_BYTE *)(v77 + 65) = *(_BYTE *)(v78 + 65);
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(v82);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v84);
  }
  else
  {
    v85 = *(_OWORD *)(v78 + 48);
    *(_OWORD *)(v77 + 32) = *(_OWORD *)(v78 + 32);
    *(_OWORD *)(v77 + 48) = v85;
    *(_WORD *)(v77 + 64) = *(_WORD *)(v78 + 64);
    v86 = *(_OWORD *)(v78 + 16);
    *(_OWORD *)v77 = *(_OWORD *)v78;
    *(_OWORD *)(v77 + 16) = v86;
  }
  v87 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v87) = *(_BYTE *)(a2 + v87);
  v88 = a3[7];
  v89 = (_QWORD *)(a1 + v88);
  v90 = (_QWORD *)(a2 + v88);
  if (*v90)
  {
    v91 = v90[1];
    *v89 = *v90;
    v89[1] = v91;
    swift_retain(v91);
  }
  else
  {
    *(_OWORD *)v89 = *(_OWORD *)v90;
  }
  v92 = a3[8];
  v93 = *(_QWORD *)(a2 + v92);
  *(_QWORD *)(a1 + v92) = v93;
  swift_retain(v93);
  return a1;
}

uint64_t sub_1000F30C0(uint64_t a1, __int128 *a2, int *a3)
{
  __int128 v6;
  __int128 v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  int v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(_BYTE *, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  int *v46;
  unsigned int (**v47)(_QWORD *, uint64_t, int *);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(char *, char *, uint64_t);
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  int *v60;
  uint64_t v61;
  uint64_t (*v62)(_QWORD *, uint64_t, int *);
  int v63;
  int v64;
  int *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unsigned int (*v70)(char *, uint64_t, uint64_t, __n128);
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 *v85;
  __int128 v86;
  __int128 v87;
  uint64_t v88;
  _OWORD *v89;
  __int128 *v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _BYTE *v99;
  _BYTE *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(_BYTE *, uint64_t, uint64_t);
  int v104;
  uint64_t v105;
  int *v106;
  uint64_t v107;
  uint64_t v108;
  _BYTE *v109;
  _BYTE *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE *v115;
  _BYTE *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t (*v119)(_BYTE *, uint64_t, uint64_t);
  int v120;
  size_t v121;
  void *v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t (*v174)(char *, uint64_t, uint64_t);
  int v175;
  size_t v176;
  void *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  unsigned int (*v190)(char *, uint64_t, uint64_t, __n128);
  char *v191;
  _QWORD *v192;
  char *v193;
  void *v194;
  void *v195;
  char *__dst;
  void *__dsta;
  int *v198;
  int *v199;

  v6 = *a2;
  v7 = a2[1];
  *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
  *(_WORD *)(a1 + 42) = *((_WORD *)a2 + 21);
  v8 = (int *)type metadata accessor for ConnectionAssistantState(0);
  v9 = v8[7];
  v10 = (char *)(a1 + v9);
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for ServiceOutages(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      v17 = type metadata accessor for Date(0);
      v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
      v18(v10, v11, v17);
      v18(&v10[*(int *)(v12 + 20)], &v11[*(int *)(v12 + 20)], v17);
      v19 = *(int *)(v12 + 24);
      v20 = *(_QWORD *)&v11[v19];
      *(_QWORD *)&v10[v19] = v20;
      v21 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v13 + 56);
      v22 = swift_bridgeObjectRetain(v20);
      v21(v10, 0, 1, v12, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    sub_10000AFFC((uint64_t)v10, type metadata accessor for ServiceOutages);
LABEL_6:
    v23 = sub_100003DB8(&qword_10031F880);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
    goto LABEL_7;
  }
  v50 = type metadata accessor for Date(0);
  v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 24);
  v51(v10, v11, v50);
  v51(&v10[*(int *)(v12 + 20)], &v11[*(int *)(v12 + 20)], v50);
  v52 = *(int *)(v12 + 24);
  v53 = *(_QWORD *)&v11[v52];
  v54 = *(_QWORD *)&v10[v52];
  *(_QWORD *)&v10[v52] = v53;
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRelease(v54);
LABEL_7:
  v24 = v8[8];
  v25 = (char *)(a1 + v24);
  v26 = (char *)a2 + v24;
  v27 = type metadata accessor for SilencePeriod(0);
  v28 = *(_QWORD *)(v27 - 8);
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v28 + 48);
  v30 = v29(v25, 1, v27);
  v31 = v29(v26, 1, v27);
  v198 = a3;
  if (v30)
  {
    if (!v31)
    {
      v32 = type metadata accessor for Date(0);
      v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
      v33(v25, v26, v32);
      v33(&v25[*(int *)(v27 + 20)], &v26[*(int *)(v27 + 20)], v32);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v31)
  {
    sub_10000AFFC((uint64_t)v25, type metadata accessor for SilencePeriod);
LABEL_12:
    v34 = sub_100003DB8(&qword_10031F888);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_13;
  }
  v55 = type metadata accessor for Date(0);
  v56 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v55 - 8) + 24);
  v56(v25, v26, v55);
  v56(&v25[*(int *)(v27 + 20)], &v26[*(int *)(v27 + 20)], v55);
LABEL_13:
  v199 = v8;
  v35 = v8[9];
  v36 = (_BYTE *)(a1 + v35);
  v37 = (char *)a2 + v35;
  v38 = type metadata accessor for LinkState(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40(v37, 1, v38);
  if (v41)
  {
    if (!v42)
    {
      *v36 = *v37;
      v36[1] = v37[1];
      v36[2] = v37[2];
      v36[3] = v37[3];
      v43 = *(int *)(v38 + 32);
      v44 = &v36[v43];
      v45 = &v37[v43];
      v46 = (int *)type metadata accessor for TransmissionProgress(0);
      v47 = (unsigned int (**)(_QWORD *, uint64_t, int *))*((_QWORD *)v46 - 1);
      if (v47[6](v45, 1, v46))
      {
        v48 = sub_100003DB8(&qword_100316B68);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        __dsta = v47;
        *v44 = *v45;
        v73 = v45[1];
        v44[1] = v73;
        v74 = v46[5];
        v191 = (char *)v45 + v74;
        v193 = (char *)v44 + v74;
        v75 = type metadata accessor for Date(0);
        v189 = *(_QWORD *)(v75 - 8);
        v190 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v189 + 48);
        v76 = swift_bridgeObjectRetain(v73);
        if (v190(v191, 1, v75, v76))
        {
          v77 = sub_100003DB8(&qword_100317D58);
          memcpy(v193, v191, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v189 + 16))(v193, v191, v75);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v189 + 56))(v193, 0, 1, v75);
        }
        v79 = v46[6];
        v80 = (char *)v44 + v79;
        v81 = (char *)v45 + v79;
        v82 = *(_QWORD *)v81;
        v80[8] = v81[8];
        *(_QWORD *)v80 = v82;
        *(_QWORD *)((char *)v44 + v46[7]) = *(_QWORD *)((char *)v45 + v46[7]);
        *((_BYTE *)v44 + v46[8]) = *((_BYTE *)v45 + v46[8]);
        (*((void (**)(_QWORD *, _QWORD, uint64_t, int *))__dsta + 7))(v44, 0, 1, v46);
      }
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      goto LABEL_34;
    }
    goto LABEL_19;
  }
  if (v42)
  {
    sub_10000AFFC((uint64_t)v36, type metadata accessor for LinkState);
LABEL_19:
    v49 = sub_100003DB8((uint64_t *)&unk_10031B230);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
LABEL_34:
    v65 = v199;
    goto LABEL_35;
  }
  *v36 = *v37;
  v36[1] = v37[1];
  v36[2] = v37[2];
  v36[3] = v37[3];
  v57 = *(int *)(v38 + 32);
  v58 = &v36[v57];
  v59 = &v37[v57];
  v60 = (int *)type metadata accessor for TransmissionProgress(0);
  v61 = *((_QWORD *)v60 - 1);
  v62 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v61 + 48);
  v63 = v62(v58, 1, v60);
  v64 = v62(v59, 1, v60);
  v65 = v199;
  if (!v63)
  {
    if (v64)
    {
      sub_10000AFFC((uint64_t)v58, type metadata accessor for TransmissionProgress);
      goto LABEL_30;
    }
    *v58 = *v59;
    v167 = v59[1];
    v168 = v58[1];
    v58[1] = v167;
    swift_bridgeObjectRetain(v167);
    swift_bridgeObjectRelease(v168);
    v169 = v60[5];
    v170 = (char *)v58 + v169;
    v171 = (char *)v59 + v169;
    v172 = type metadata accessor for Date(0);
    v173 = *(_QWORD *)(v172 - 8);
    v174 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v173 + 48);
    v195 = v170;
    LODWORD(v170) = v174(v170, 1, v172);
    v175 = v174(v171, 1, v172);
    if ((_DWORD)v170)
    {
      if (!v175)
      {
        (*(void (**)(void *, char *, uint64_t))(v173 + 16))(v195, v171, v172);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v173 + 56))(v195, 0, 1, v172);
        goto LABEL_79;
      }
      v176 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8) + 64);
      v177 = v195;
    }
    else
    {
      if (!v175)
      {
        (*(void (**)(void *, char *, uint64_t))(v173 + 24))(v195, v171, v172);
        goto LABEL_79;
      }
      (*(void (**)(void *, uint64_t))(v173 + 8))(v195, v172);
      v176 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8) + 64);
      v177 = v195;
    }
    memcpy(v177, v171, v176);
LABEL_79:
    v185 = v60[6];
    v186 = (char *)v58 + v185;
    v187 = (char *)v59 + v185;
    v188 = *(_QWORD *)v187;
    v186[8] = v187[8];
    *(_QWORD *)v186 = v188;
    *(_QWORD *)((char *)v58 + v60[7]) = *(_QWORD *)((char *)v59 + v60[7]);
    *((_BYTE *)v58 + v60[8]) = *((_BYTE *)v59 + v60[8]);
    goto LABEL_34;
  }
  if (v64)
  {
LABEL_30:
    v78 = sub_100003DB8(&qword_100316B68);
    memcpy(v58, v59, *(_QWORD *)(*(_QWORD *)(v78 - 8) + 64));
    goto LABEL_35;
  }
  *v58 = *v59;
  v66 = v59[1];
  v58[1] = v66;
  v67 = v60[5];
  __dst = (char *)v58 + v67;
  v68 = (char *)v59 + v67;
  v69 = type metadata accessor for Date(0);
  v192 = *(_QWORD **)(v69 - 8);
  v70 = (unsigned int (*)(char *, uint64_t, uint64_t, __n128))v192[6];
  v71 = swift_bridgeObjectRetain(v66);
  if (v70(v68, 1, v69, v71))
  {
    v72 = sub_100003DB8(&qword_100317D58);
    memcpy(__dst, v68, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v192[2])(__dst, v68, v69);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v192[7])(__dst, 0, 1, v69);
  }
  v65 = v199;
  v181 = v60[6];
  v182 = (char *)v58 + v181;
  v183 = (char *)v59 + v181;
  v184 = *(_QWORD *)v183;
  v182[8] = v183[8];
  *(_QWORD *)v182 = v184;
  *(_QWORD *)((char *)v58 + v60[7]) = *(_QWORD *)((char *)v59 + v60[7]);
  *((_BYTE *)v58 + v60[8]) = *((_BYTE *)v59 + v60[8]);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v61 + 56))(v58, 0, 1, v60);
LABEL_35:
  v83 = v65[10];
  v84 = a1 + v83;
  v85 = (__int128 *)((char *)a2 + v83);
  v86 = *v85;
  v87 = v85[1];
  *(_BYTE *)(v84 + 32) = *((_BYTE *)v85 + 32);
  *(_OWORD *)v84 = v86;
  *(_OWORD *)(v84 + 16) = v87;
  v88 = v65[11];
  v89 = (_OWORD *)(a1 + v88);
  v90 = (__int128 *)((char *)a2 + v88);
  v91 = *v90;
  v92 = v90[1];
  *(_OWORD *)((char *)v89 + 25) = *(__int128 *)((char *)v90 + 25);
  *v89 = v91;
  v89[1] = v92;
  v93 = v65[12];
  v94 = (_QWORD *)(a1 + v93);
  v95 = (_QWORD *)((char *)a2 + v93);
  *v94 = *v95;
  v96 = v95[1];
  v97 = v94[1];
  v94[1] = v96;
  swift_bridgeObjectRetain(v96);
  swift_bridgeObjectRelease(v97);
  v98 = v65[13];
  v99 = (_BYTE *)(a1 + v98);
  v100 = (char *)a2 + v98;
  v101 = type metadata accessor for ConnectionClosed(0);
  v102 = *(_QWORD *)(v101 - 8);
  v103 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v102 + 48);
  LODWORD(v97) = v103(v99, 1, v101);
  v104 = v103(v100, 1, v101);
  if (!(_DWORD)v97)
  {
    v106 = v198;
    if (v104)
    {
      sub_10000AFFC((uint64_t)v99, type metadata accessor for ConnectionClosed);
      v107 = sub_100003DB8(&qword_1003180C0);
      memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v107 - 8) + 64));
      goto LABEL_48;
    }
    *v99 = *v100;
    v114 = *(int *)(v101 + 20);
    v115 = &v99[v114];
    v116 = &v100[v114];
    v117 = type metadata accessor for Date(0);
    v118 = *(_QWORD *)(v117 - 8);
    v119 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v118 + 48);
    v194 = v115;
    LODWORD(v115) = v119(v115, 1, v117);
    v120 = v119(v116, 1, v117);
    if ((_DWORD)v115)
    {
      if (!v120)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v118 + 16))(v194, v116, v117);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v118 + 56))(v194, 0, 1, v117);
        goto LABEL_71;
      }
      v121 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8) + 64);
      v122 = v194;
    }
    else
    {
      if (!v120)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v118 + 24))(v194, v116, v117);
        goto LABEL_71;
      }
      (*(void (**)(void *, uint64_t))(v118 + 8))(v194, v117);
      v121 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8) + 64);
      v122 = v194;
    }
    memcpy(v122, v116, v121);
LABEL_71:
    v106 = v198;
    v178 = *(int *)(v101 + 24);
    v179 = *(_QWORD *)&v100[v178];
    v180 = *(_QWORD *)&v99[v178];
    *(_QWORD *)&v99[v178] = v179;
    swift_bridgeObjectRetain(v179);
    swift_bridgeObjectRelease(v180);
    goto LABEL_48;
  }
  if (v104)
  {
    v105 = sub_100003DB8(&qword_1003180C0);
    memcpy(v99, v100, *(_QWORD *)(*(_QWORD *)(v105 - 8) + 64));
  }
  else
  {
    *v99 = *v100;
    v108 = *(int *)(v101 + 20);
    v109 = &v99[v108];
    v110 = &v100[v108];
    v111 = type metadata accessor for Date(0);
    v112 = *(_QWORD *)(v111 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v112 + 48))(v110, 1, v111))
    {
      v113 = sub_100003DB8(&qword_100317D58);
      memcpy(v109, v110, *(_QWORD *)(*(_QWORD *)(v113 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v112 + 16))(v109, v110, v111);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v112 + 56))(v109, 0, 1, v111);
    }
    v123 = *(int *)(v101 + 24);
    v124 = *(_QWORD *)&v100[v123];
    *(_QWORD *)&v99[v123] = v124;
    v125 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128))(v102 + 56);
    v126 = swift_bridgeObjectRetain(v124);
    v125(v99, 0, 1, v101, v126);
  }
  v106 = v198;
LABEL_48:
  v127 = v199[14];
  v128 = a1 + v127;
  v129 = (uint64_t)a2 + v127;
  v130 = *(_QWORD *)(a1 + v127 + 8);
  v131 = *(_QWORD *)((char *)a2 + v127 + 8);
  if (v130)
  {
    if (v131)
    {
      *(_BYTE *)v128 = *(_BYTE *)v129;
      v132 = *(_QWORD *)(v129 + 8);
      *(_QWORD *)(v128 + 8) = v132;
      swift_bridgeObjectRetain(v132);
      swift_bridgeObjectRelease(v130);
      *(_BYTE *)(v128 + 16) = *(_BYTE *)(v129 + 16);
      *(_BYTE *)(v128 + 17) = *(_BYTE *)(v129 + 17);
      v133 = *(_QWORD *)(v129 + 24);
      v134 = *(_QWORD *)(v128 + 24);
      *(_QWORD *)(v128 + 24) = v133;
      swift_bridgeObjectRetain(v133);
      swift_bridgeObjectRelease(v134);
      v135 = *(_QWORD *)(v129 + 32);
      v136 = *(_QWORD *)(v128 + 32);
      *(_QWORD *)(v128 + 32) = v135;
      swift_bridgeObjectRetain(v135);
      swift_bridgeObjectRelease(v136);
      v137 = *(_QWORD *)(v129 + 40);
      v138 = *(_QWORD *)(v128 + 40);
      *(_QWORD *)(v128 + 40) = v137;
      swift_bridgeObjectRetain(v137);
      swift_bridgeObjectRelease(v138);
      v139 = *(_QWORD *)(v129 + 48);
      v140 = *(_QWORD *)(v128 + 48);
      *(_QWORD *)(v128 + 48) = v139;
      swift_bridgeObjectRetain(v139);
      swift_bridgeObjectRelease(v140);
      v141 = *(_QWORD *)(v129 + 56);
      v142 = *(_QWORD *)(v128 + 56);
      *(_QWORD *)(v128 + 56) = v141;
      swift_bridgeObjectRetain(v141);
      swift_bridgeObjectRelease(v142);
      *(_BYTE *)(v128 + 64) = *(_BYTE *)(v129 + 64);
      *(_BYTE *)(v128 + 65) = *(_BYTE *)(v129 + 65);
    }
    else
    {
      sub_1000F3DBC((_QWORD *)v128);
      *(_OWORD *)v128 = *(_OWORD *)v129;
      v150 = *(_OWORD *)(v129 + 32);
      v149 = *(_OWORD *)(v129 + 48);
      v151 = *(_OWORD *)(v129 + 16);
      *(_WORD *)(v128 + 64) = *(_WORD *)(v129 + 64);
      *(_OWORD *)(v128 + 32) = v150;
      *(_OWORD *)(v128 + 48) = v149;
      *(_OWORD *)(v128 + 16) = v151;
    }
  }
  else if (v131)
  {
    *(_BYTE *)v128 = *(_BYTE *)v129;
    v143 = *(_QWORD *)(v129 + 8);
    *(_QWORD *)(v128 + 8) = v143;
    *(_BYTE *)(v128 + 16) = *(_BYTE *)(v129 + 16);
    *(_BYTE *)(v128 + 17) = *(_BYTE *)(v129 + 17);
    v144 = *(_QWORD *)(v129 + 24);
    *(_QWORD *)(v128 + 24) = v144;
    v145 = *(_QWORD *)(v129 + 32);
    *(_QWORD *)(v128 + 32) = v145;
    v146 = *(_QWORD *)(v129 + 40);
    *(_QWORD *)(v128 + 40) = v146;
    v147 = *(_QWORD *)(v129 + 48);
    *(_QWORD *)(v128 + 48) = v147;
    v148 = *(_QWORD *)(v129 + 56);
    *(_QWORD *)(v128 + 56) = v148;
    *(_BYTE *)(v128 + 64) = *(_BYTE *)(v129 + 64);
    *(_BYTE *)(v128 + 65) = *(_BYTE *)(v129 + 65);
    swift_bridgeObjectRetain(v143);
    swift_bridgeObjectRetain(v144);
    swift_bridgeObjectRetain(v145);
    swift_bridgeObjectRetain(v146);
    swift_bridgeObjectRetain(v147);
    swift_bridgeObjectRetain(v148);
  }
  else
  {
    *(_OWORD *)v128 = *(_OWORD *)v129;
    v152 = *(_OWORD *)(v129 + 16);
    v153 = *(_OWORD *)(v129 + 32);
    v154 = *(_OWORD *)(v129 + 48);
    *(_WORD *)(v128 + 64) = *(_WORD *)(v129 + 64);
    *(_OWORD *)(v128 + 32) = v153;
    *(_OWORD *)(v128 + 48) = v154;
    *(_OWORD *)(v128 + 16) = v152;
  }
  *(_QWORD *)(a1 + v106[5]) = *(_QWORD *)((char *)a2 + v106[5]);
  *(_BYTE *)(a1 + v106[6]) = *((_BYTE *)a2 + v106[6]);
  v155 = v106[7];
  v156 = (_QWORD *)(a1 + v155);
  v157 = (uint64_t)a2 + v155;
  v158 = *(_QWORD *)(a1 + v155);
  v159 = *(_QWORD *)((char *)a2 + v155);
  if (!v158)
  {
    if (v159)
    {
      v162 = *(_QWORD *)(v157 + 8);
      *v156 = v159;
      v156[1] = v162;
      swift_retain(v162);
      goto LABEL_62;
    }
LABEL_61:
    *(_OWORD *)v156 = *(_OWORD *)v157;
    goto LABEL_62;
  }
  if (!v159)
  {
    swift_release(v156[1]);
    goto LABEL_61;
  }
  v160 = *(_QWORD *)(v157 + 8);
  v161 = v156[1];
  *v156 = v159;
  v156[1] = v160;
  swift_retain(v160);
  swift_release(v161);
LABEL_62:
  v163 = v106[8];
  v164 = *(_QWORD *)(a1 + v163);
  v165 = *(_QWORD *)((char *)a2 + v163);
  *(_QWORD *)(a1 + v163) = v165;
  swift_retain(v165);
  swift_release(v164);
  return a1;
}

_QWORD *sub_1000F3DBC(_QWORD *a1)
{
  destroy for StewieState(a1);
  return a1;
}

uint64_t sub_1000F3DF0(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, char *, uint64_t);
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v75;
  void *__src;
  char *v77;
  _OWORD *__dst;
  _BYTE *__dsta;
  int *v80;
  int *v81;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
  v7 = (int *)type metadata accessor for ConnectionAssistantState(0);
  v8 = v7[7];
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = type metadata accessor for ServiceOutages(0);
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    v13 = sub_100003DB8(&qword_10031F880);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    v14 = type metadata accessor for Date(0);
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 32);
    v15(v9, v10, v14);
    v15(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v14);
    *(_QWORD *)&v9[*(int *)(v11 + 24)] = *(_QWORD *)&v10[*(int *)(v11 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v16 = v7[8];
  v17 = (char *)(a1 + v16);
  v18 = (char *)(a2 + v16);
  v19 = type metadata accessor for SilencePeriod(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = sub_100003DB8(&qword_10031F888);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    v22 = type metadata accessor for Date(0);
    v23 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 32);
    v23(v17, v18, v22);
    v23(&v17[*(int *)(v19 + 20)], &v18[*(int *)(v19 + 20)], v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v24 = v7[9];
  v25 = (_DWORD *)(a1 + v24);
  v26 = (_DWORD *)(a2 + v24);
  v27 = type metadata accessor for LinkState(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = sub_100003DB8((uint64_t *)&unk_10031B230);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    *v25 = *v26;
    v30 = *(int *)(v27 + 32);
    __dst = (_OWORD *)((char *)v25 + v30);
    v31 = (_OWORD *)((char *)v26 + v30);
    v32 = (int *)type metadata accessor for TransmissionProgress(0);
    v33 = *((_QWORD *)v32 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
    {
      v34 = sub_100003DB8(&qword_100316B68);
      memcpy(__dst, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v80 = a3;
      *__dst = *v31;
      v35 = v32[5];
      v77 = (char *)__dst + v35;
      v36 = (char *)v31 + v35;
      v37 = type metadata accessor for Date(0);
      v75 = *(_QWORD *)(v37 - 8);
      __src = v36;
      v38 = v36;
      v39 = v37;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v38, 1, v37))
      {
        v40 = sub_100003DB8(&qword_100317D58);
        memcpy(v77, __src, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, void *, uint64_t))(v75 + 32))(v77, __src, v39);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v77, 0, 1, v39);
      }
      a3 = v80;
      v41 = v32[6];
      v42 = (char *)__dst + v41;
      v43 = (char *)v31 + v41;
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v42[8] = v43[8];
      *(_QWORD *)((char *)__dst + v32[7]) = *(_QWORD *)((char *)v31 + v32[7]);
      *((_BYTE *)__dst + v32[8]) = *((_BYTE *)v31 + v32[8]);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v33 + 56))(__dst, 0, 1, v32);
    }
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v44 = v7[10];
  v45 = a1 + v44;
  v46 = a2 + v44;
  v47 = *(_OWORD *)(v46 + 16);
  *(_OWORD *)v45 = *(_OWORD *)v46;
  *(_OWORD *)(v45 + 16) = v47;
  *(_BYTE *)(v45 + 32) = *(_BYTE *)(v46 + 32);
  v48 = v7[11];
  v49 = (_OWORD *)(a1 + v48);
  v50 = (_OWORD *)(a2 + v48);
  *(_OWORD *)((char *)v49 + 25) = *(_OWORD *)((char *)v50 + 25);
  v51 = v50[1];
  *v49 = *v50;
  v49[1] = v51;
  *(_OWORD *)(a1 + v7[12]) = *(_OWORD *)(a2 + v7[12]);
  v52 = v7[13];
  v53 = (_BYTE *)(a1 + v52);
  v54 = (_BYTE *)(a2 + v52);
  v55 = type metadata accessor for ConnectionClosed(0);
  v56 = *(_QWORD *)(v55 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
  {
    v57 = sub_100003DB8(&qword_1003180C0);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    *v53 = *v54;
    v58 = *(int *)(v55 + 20);
    __dsta = &v53[v58];
    v81 = a3;
    v59 = &v54[v58];
    v60 = type metadata accessor for Date(0);
    v61 = *(_QWORD *)(v60 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
    {
      v62 = sub_100003DB8(&qword_100317D58);
      memcpy(__dsta, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v61 + 32))(__dsta, v59, v60);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v61 + 56))(__dsta, 0, 1, v60);
    }
    a3 = v81;
    *(_QWORD *)&v53[*(int *)(v55 + 24)] = *(_QWORD *)&v54[*(int *)(v55 + 24)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
  }
  v63 = v7[14];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = *(_OWORD *)(v65 + 48);
  *(_OWORD *)(v64 + 32) = *(_OWORD *)(v65 + 32);
  *(_OWORD *)(v64 + 48) = v66;
  *(_WORD *)(v64 + 64) = *(_WORD *)(v65 + 64);
  v67 = *(_OWORD *)(v65 + 16);
  *(_OWORD *)v64 = *(_OWORD *)v65;
  *(_OWORD *)(v64 + 16) = v67;
  v68 = a3[6];
  *(_QWORD *)(a1 + a3[5]) = *(_QWORD *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v68) = *(_BYTE *)(a2 + v68);
  v69 = a3[7];
  v70 = (_QWORD *)(a1 + v69);
  v71 = (uint64_t *)(a2 + v69);
  v72 = *v71;
  if (*v71)
  {
    v73 = v71[1];
    *v70 = v72;
    v70[1] = v73;
  }
  else
  {
    *(_OWORD *)v70 = *(_OWORD *)v71;
  }
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_1000F4358(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v5;
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  _OWORD *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, int *);
  int v58;
  int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  _OWORD *v79;
  _OWORD *v80;
  __int128 v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(_BYTE *, uint64_t, uint64_t);
  int v94;
  int v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int *v102;
  uint64_t v103;
  _BYTE *v104;
  _BYTE *v105;
  uint64_t v106;
  uint64_t (*v107)(_BYTE *, uint64_t, uint64_t);
  int v108;
  size_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  void *v114;
  char *v115;
  uint64_t v116;
  uint64_t (*v117)(void *, uint64_t, uint64_t);
  int v118;
  size_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  void *__src;
  void *__dst;
  char *__dsta;
  _BYTE *__dstb;
  void *__dstc;
  void *__dstd;

  v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
  v6 = (int *)type metadata accessor for ConnectionAssistantState(0);
  v7 = v6[7];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for ServiceOutages(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v15 = type metadata accessor for Date(0);
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
      v16(v8, v9, v15);
      v16(&v8[*(int *)(v10 + 20)], &v9[*(int *)(v10 + 20)], v15);
      *(_QWORD *)&v8[*(int *)(v10 + 24)] = *(_QWORD *)&v9[*(int *)(v10 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_10000AFFC((uint64_t)v8, type metadata accessor for ServiceOutages);
LABEL_6:
    v17 = sub_100003DB8(&qword_10031F880);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  v46 = type metadata accessor for Date(0);
  v47 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 40);
  v47(v8, v9, v46);
  v47(&v8[*(int *)(v10 + 20)], &v9[*(int *)(v10 + 20)], v46);
  v48 = *(int *)(v10 + 24);
  v49 = *(_QWORD *)&v8[v48];
  *(_QWORD *)&v8[v48] = *(_QWORD *)&v9[v48];
  swift_bridgeObjectRelease(v49);
LABEL_7:
  v18 = v6[8];
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  v21 = type metadata accessor for SilencePeriod(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      v26 = type metadata accessor for Date(0);
      v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
      v27(v19, v20, v26);
      v27(&v19[*(int *)(v21 + 20)], &v20[*(int *)(v21 + 20)], v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    sub_10000AFFC((uint64_t)v19, type metadata accessor for SilencePeriod);
LABEL_12:
    v28 = sub_100003DB8(&qword_10031F888);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  v50 = type metadata accessor for Date(0);
  v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 40);
  v51(v19, v20, v50);
  v51(&v19[*(int *)(v21 + 20)], &v20[*(int *)(v21 + 20)], v50);
LABEL_13:
  v29 = v6[9];
  v30 = a1 + v29;
  v31 = (char *)(a2 + v29);
  v32 = type metadata accessor for LinkState(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  v35 = v34(v30, 1, v32);
  v36 = v34((uint64_t)v31, 1, v32);
  if (!v35)
  {
    if (v36)
    {
      sub_10000AFFC(v30, type metadata accessor for LinkState);
      goto LABEL_19;
    }
    *(_BYTE *)v30 = *v31;
    *(_BYTE *)(v30 + 1) = v31[1];
    *(_WORD *)(v30 + 2) = *((_WORD *)v31 + 1);
    v52 = *(int *)(v32 + 32);
    v53 = v30 + v52;
    v54 = &v31[v52];
    v55 = (int *)type metadata accessor for TransmissionProgress(0);
    v56 = *((_QWORD *)v55 - 1);
    v57 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v56 + 48);
    v58 = v57(v53, 1, v55);
    v59 = v57((uint64_t)v54, 1, v55);
    if (v58)
    {
      if (!v59)
      {
        *(_OWORD *)v53 = *(_OWORD *)v54;
        v60 = v55[5];
        __dst = (void *)(v53 + v60);
        v61 = &v54[v60];
        v62 = type metadata accessor for Date(0);
        v63 = *(_QWORD *)(v62 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
        {
          v64 = sub_100003DB8(&qword_100317D58);
          memcpy(__dst, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v63 + 32))(__dst, v61, v62);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(__dst, 0, 1, v62);
        }
        v147 = v55[6];
        v148 = v53 + v147;
        v149 = &v54[v147];
        *(_QWORD *)v148 = *(_QWORD *)v149;
        *(_BYTE *)(v148 + 8) = v149[8];
        *(_QWORD *)(v53 + v55[7]) = *(_QWORD *)&v54[v55[7]];
        *(_BYTE *)(v53 + v55[8]) = v54[v55[8]];
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v56 + 56))(v53, 0, 1, v55);
        goto LABEL_35;
      }
      goto LABEL_31;
    }
    if (v59)
    {
      sub_10000AFFC(v53, type metadata accessor for TransmissionProgress);
LABEL_31:
      v43 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100316B68) - 8) + 64);
      v44 = (void *)v53;
      v45 = v54;
      goto LABEL_20;
    }
    v111 = *((_QWORD *)v54 + 1);
    v112 = *(_QWORD *)(v53 + 8);
    *(_QWORD *)v53 = *(_QWORD *)v54;
    *(_QWORD *)(v53 + 8) = v111;
    swift_bridgeObjectRelease(v112);
    v113 = v55[5];
    v114 = (void *)(v53 + v113);
    v115 = &v54[v113];
    v116 = type metadata accessor for Date(0);
    v156 = *(_QWORD *)(v116 - 8);
    v117 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v156 + 48);
    __dstd = v114;
    LODWORD(v114) = v117(v114, 1, v116);
    v118 = v117(v115, 1, v116);
    if ((_DWORD)v114)
    {
      if (!v118)
      {
        (*(void (**)(void *, char *, uint64_t))(v156 + 32))(__dstd, v115, v116);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v156 + 56))(__dstd, 0, 1, v116);
        goto LABEL_76;
      }
      v119 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8) + 64);
      v120 = __dstd;
    }
    else
    {
      if (!v118)
      {
        (*(void (**)(void *, char *, uint64_t))(v156 + 40))(__dstd, v115, v116);
        goto LABEL_76;
      }
      (*(void (**)(void *, uint64_t))(v156 + 8))(__dstd, v116);
      v119 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8) + 64);
      v120 = __dstd;
    }
    memcpy(v120, v115, v119);
LABEL_76:
    v150 = v55[6];
    v151 = v53 + v150;
    v152 = &v54[v150];
    *(_QWORD *)v151 = *(_QWORD *)v152;
    *(_BYTE *)(v151 + 8) = v152[8];
    *(_QWORD *)(v53 + v55[7]) = *(_QWORD *)&v54[v55[7]];
    *(_BYTE *)(v53 + v55[8]) = v54[v55[8]];
    goto LABEL_35;
  }
  if (v36)
  {
LABEL_19:
    v43 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8((uint64_t *)&unk_10031B230) - 8) + 64);
    v44 = (void *)v30;
    v45 = v31;
LABEL_20:
    memcpy(v44, v45, v43);
    goto LABEL_35;
  }
  *(_DWORD *)v30 = *(_DWORD *)v31;
  v37 = *(int *)(v32 + 32);
  v38 = (_OWORD *)(v30 + v37);
  v39 = &v31[v37];
  v40 = (int *)type metadata accessor for TransmissionProgress(0);
  v41 = *((_QWORD *)v40 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1, v40))
  {
    v42 = sub_100003DB8(&qword_100316B68);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    v154 = v41;
    *v38 = *(_OWORD *)v39;
    v65 = v40[5];
    __dsta = (char *)v38 + v65;
    v66 = &v39[v65];
    v67 = type metadata accessor for Date(0);
    v153 = *(_QWORD *)(v67 - 8);
    __src = v66;
    v68 = v66;
    v69 = v67;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v153 + 48))(v68, 1, v67))
    {
      v70 = sub_100003DB8(&qword_100317D58);
      memcpy(__dsta, __src, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, void *, uint64_t))(v153 + 32))(__dsta, __src, v69);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v153 + 56))(__dsta, 0, 1, v69);
    }
    v71 = v40[6];
    v72 = (char *)v38 + v71;
    v73 = &v39[v71];
    *(_QWORD *)v72 = *(_QWORD *)v73;
    v72[8] = v73[8];
    *(_QWORD *)((char *)v38 + v40[7]) = *(_QWORD *)&v39[v40[7]];
    *((_BYTE *)v38 + v40[8]) = v39[v40[8]];
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v154 + 56))(v38, 0, 1, v40);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
LABEL_35:
  v74 = v6[10];
  v75 = a1 + v74;
  v76 = a2 + v74;
  v77 = *(_OWORD *)(v76 + 16);
  *(_OWORD *)v75 = *(_OWORD *)v76;
  *(_OWORD *)(v75 + 16) = v77;
  *(_BYTE *)(v75 + 32) = *(_BYTE *)(v76 + 32);
  v78 = v6[11];
  v79 = (_OWORD *)(a1 + v78);
  v80 = (_OWORD *)(a2 + v78);
  *(_OWORD *)((char *)v79 + 25) = *(_OWORD *)((char *)v80 + 25);
  v81 = v80[1];
  *v79 = *v80;
  v79[1] = v81;
  v82 = v6[12];
  v83 = (_QWORD *)(a1 + v82);
  v84 = (uint64_t *)(a2 + v82);
  v86 = *v84;
  v85 = v84[1];
  v87 = v83[1];
  *v83 = v86;
  v83[1] = v85;
  swift_bridgeObjectRelease(v87);
  v88 = v6[13];
  v89 = (_BYTE *)(a1 + v88);
  v90 = (_BYTE *)(a2 + v88);
  v91 = type metadata accessor for ConnectionClosed(0);
  v92 = *(_QWORD *)(v91 - 8);
  v93 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v92 + 48);
  v94 = v93(v89, 1, v91);
  v95 = v93(v90, 1, v91);
  if (!v94)
  {
    if (v95)
    {
      sub_10000AFFC((uint64_t)v89, type metadata accessor for ConnectionClosed);
      goto LABEL_41;
    }
    *v89 = *v90;
    v103 = *(int *)(v91 + 20);
    v104 = &v89[v103];
    v105 = &v90[v103];
    v106 = type metadata accessor for Date(0);
    v155 = *(_QWORD *)(v106 - 8);
    v107 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v155 + 48);
    __dstc = v104;
    LODWORD(v104) = v107(v104, 1, v106);
    v108 = v107(v105, 1, v106);
    if ((_DWORD)v104)
    {
      if (!v108)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v155 + 32))(__dstc, v105, v106);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v155 + 56))(__dstc, 0, 1, v106);
        goto LABEL_55;
      }
      v109 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8) + 64);
      v110 = __dstc;
    }
    else
    {
      if (!v108)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v155 + 40))(__dstc, v105, v106);
        goto LABEL_55;
      }
      (*(void (**)(void *, uint64_t))(v155 + 8))(__dstc, v106);
      v109 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8) + 64);
      v110 = __dstc;
    }
    memcpy(v110, v105, v109);
LABEL_55:
    v102 = a3;
    v121 = *(int *)(v91 + 24);
    v122 = *(_QWORD *)&v89[v121];
    *(_QWORD *)&v89[v121] = *(_QWORD *)&v90[v121];
    swift_bridgeObjectRelease(v122);
    goto LABEL_56;
  }
  if (v95)
  {
LABEL_41:
    v101 = sub_100003DB8(&qword_1003180C0);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
    v102 = a3;
    goto LABEL_56;
  }
  *v89 = *v90;
  v96 = *(int *)(v91 + 20);
  __dstb = &v89[v96];
  v97 = &v90[v96];
  v98 = type metadata accessor for Date(0);
  v99 = *(_QWORD *)(v98 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
  {
    v100 = sub_100003DB8(&qword_100317D58);
    memcpy(__dstb, v97, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v99 + 32))(__dstb, v97, v98);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v99 + 56))(__dstb, 0, 1, v98);
  }
  v102 = a3;
  *(_QWORD *)&v89[*(int *)(v91 + 24)] = *(_QWORD *)&v90[*(int *)(v91 + 24)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
LABEL_56:
  v123 = v6[14];
  v124 = a1 + v123;
  v125 = a2 + v123;
  v126 = *(_QWORD *)(a1 + v123 + 8);
  if (v126)
  {
    v127 = *(_QWORD *)(v125 + 8);
    if (v127)
    {
      *(_BYTE *)v124 = *(_BYTE *)v125;
      *(_QWORD *)(v124 + 8) = v127;
      swift_bridgeObjectRelease(v126);
      *(_BYTE *)(v124 + 16) = *(_BYTE *)(v125 + 16);
      *(_BYTE *)(v124 + 17) = *(_BYTE *)(v125 + 17);
      v128 = *(_QWORD *)(v124 + 24);
      *(_QWORD *)(v124 + 24) = *(_QWORD *)(v125 + 24);
      swift_bridgeObjectRelease(v128);
      v129 = *(_QWORD *)(v124 + 32);
      *(_QWORD *)(v124 + 32) = *(_QWORD *)(v125 + 32);
      swift_bridgeObjectRelease(v129);
      v130 = *(_QWORD *)(v124 + 40);
      *(_QWORD *)(v124 + 40) = *(_QWORD *)(v125 + 40);
      swift_bridgeObjectRelease(v130);
      v131 = *(_QWORD *)(v124 + 48);
      *(_QWORD *)(v124 + 48) = *(_QWORD *)(v125 + 48);
      swift_bridgeObjectRelease(v131);
      v132 = *(_QWORD *)(v124 + 56);
      *(_QWORD *)(v124 + 56) = *(_QWORD *)(v125 + 56);
      swift_bridgeObjectRelease(v132);
      *(_WORD *)(v124 + 64) = *(_WORD *)(v125 + 64);
      goto LABEL_61;
    }
    sub_1000F3DBC((_QWORD *)v124);
  }
  v133 = *(_OWORD *)(v125 + 48);
  *(_OWORD *)(v124 + 32) = *(_OWORD *)(v125 + 32);
  *(_OWORD *)(v124 + 48) = v133;
  *(_WORD *)(v124 + 64) = *(_WORD *)(v125 + 64);
  v134 = *(_OWORD *)(v125 + 16);
  *(_OWORD *)v124 = *(_OWORD *)v125;
  *(_OWORD *)(v124 + 16) = v134;
LABEL_61:
  v135 = v102[6];
  *(_QWORD *)(a1 + v102[5]) = *(_QWORD *)(a2 + v102[5]);
  *(_BYTE *)(a1 + v135) = *(_BYTE *)(a2 + v135);
  v136 = v102[7];
  v137 = (_QWORD *)(a1 + v136);
  v138 = a2 + v136;
  v139 = *(_QWORD *)(a1 + v136);
  v140 = *(_QWORD *)(a2 + v136);
  if (!v139)
  {
    if (v140)
    {
      v143 = *(_QWORD *)(v138 + 8);
      *v137 = v140;
      v137[1] = v143;
      goto LABEL_68;
    }
LABEL_67:
    *(_OWORD *)v137 = *(_OWORD *)v138;
    goto LABEL_68;
  }
  if (!v140)
  {
    swift_release(v137[1]);
    goto LABEL_67;
  }
  v141 = *(_QWORD *)(v138 + 8);
  v142 = v137[1];
  *v137 = v140;
  v137[1] = v141;
  swift_release(v142);
LABEL_68:
  v144 = v102[8];
  v145 = *(_QWORD *)(a1 + v144);
  *(_QWORD *)(a1 + v144) = *(_QWORD *)(a2 + v144);
  swift_release(v145);
  return a1;
}

uint64_t sub_1000F4E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F4EA8);
}

uint64_t sub_1000F4EA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for ConnectionAssistantState(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1000F4F30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F4F3C);
}

uint64_t sub_1000F4F3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ConnectionAssistantState(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 28)) = a2;
  return result;
}

uint64_t type metadata accessor for TargetConnection(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_10031F8E8, (uint64_t)&nominal type descriptor for TargetConnection);
}

uint64_t sub_1000F4FC8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[5];

  result = type metadata accessor for ConnectionAssistantState(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = &unk_100255758;
    v4[3] = &unk_100255718;
    v4[4] = "\b";
    swift_initStructMetadata(a1, 256, 5, v4, a1 + 16);
    return 0;
  }
  return result;
}

_QWORD *sub_1000F505C(uint64_t a1, uint64_t *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  __int128 v53;
  _OWORD *v54;
  _OWORD *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  _BYTE *v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v66)(_BYTE *, uint64_t, uint64_t, __n128);
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void (*v76)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  __int128 v88;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  unsigned int (*v93)(char *, uint64_t, uint64_t, __n128);
  uint64_t v94;
  char *__dst;
  _BYTE *__dsta;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)((char *)a2 + 25);
    *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
    v8 = a3[7];
    v9 = (char *)(a1 + v8);
    v10 = (char *)a2 + v8;
    *(_WORD *)(a1 + 42) = *((_WORD *)a2 + 21);
    v11 = type metadata accessor for ServiceOutages(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_100003DB8(&qword_10031F880);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      v15 = type metadata accessor for Date(0);
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
      v16(v9, v10, v15);
      v16(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v15);
      v17 = *(int *)(v11 + 24);
      v18 = *(_QWORD *)&v10[v17];
      *(_QWORD *)&v9[v17] = v18;
      v19 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v12 + 56);
      v20 = swift_bridgeObjectRetain(v18);
      v19(v9, 0, 1, v11, v20);
    }
    v21 = a3[8];
    v22 = (char *)v4 + v21;
    v23 = (char *)a2 + v21;
    v24 = type metadata accessor for SilencePeriod(0);
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = sub_100003DB8(&qword_10031F888);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    }
    else
    {
      v27 = type metadata accessor for Date(0);
      v28 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 16);
      v28(v22, v23, v27);
      v28(&v22[*(int *)(v24 + 20)], &v23[*(int *)(v24 + 20)], v27);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
    }
    v29 = a3[9];
    v30 = (_DWORD *)((char *)v4 + v29);
    v31 = (_DWORD *)((char *)a2 + v29);
    v32 = type metadata accessor for LinkState(0);
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      v34 = sub_100003DB8((uint64_t *)&unk_10031B230);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      *v30 = *v31;
      v35 = *(int *)(v32 + 32);
      v36 = (_QWORD *)((char *)v30 + v35);
      v37 = (_QWORD *)((char *)v31 + v35);
      v38 = (int *)type metadata accessor for TransmissionProgress(0);
      v39 = *((_QWORD *)v38 - 1);
      if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v39 + 48))(v37, 1, v38))
      {
        v40 = sub_100003DB8(&qword_100316B68);
        memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        v91 = v36;
        v92 = v39;
        v94 = v37[1];
        *v36 = *v37;
        v36[1] = v94;
        v41 = v38[5];
        __dst = (char *)v36 + v41;
        v42 = (char *)v37 + v41;
        v43 = type metadata accessor for Date(0);
        v90 = *(_QWORD *)(v43 - 8);
        v93 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v90 + 48);
        v44 = swift_bridgeObjectRetain(v94);
        if (v93(v42, 1, v43, v44))
        {
          v45 = sub_100003DB8(&qword_100317D58);
          memcpy(__dst, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v90 + 16))(__dst, v42, v43);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v90 + 56))(__dst, 0, 1, v43);
        }
        v46 = v38[6];
        v47 = (char *)v91 + v46;
        v48 = (char *)v37 + v46;
        *(_QWORD *)v47 = *(_QWORD *)v48;
        v47[8] = v48[8];
        *(_QWORD *)((char *)v91 + v38[7]) = *(_QWORD *)((char *)v37 + v38[7]);
        *((_BYTE *)v91 + v38[8]) = *((_BYTE *)v37 + v38[8]);
        (*(void (**)(void))(v92 + 56))();
      }
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
    }
    v49 = a3[10];
    v50 = a3[11];
    v51 = (char *)v4 + v49;
    v52 = (uint64_t)a2 + v49;
    v53 = *(_OWORD *)(v52 + 16);
    *(_OWORD *)v51 = *(_OWORD *)v52;
    *((_OWORD *)v51 + 1) = v53;
    v51[32] = *(_BYTE *)(v52 + 32);
    v54 = (_OWORD *)((char *)v4 + v50);
    v55 = (_OWORD *)((char *)a2 + v50);
    *(_OWORD *)((char *)v54 + 25) = *(_OWORD *)((char *)v55 + 25);
    v56 = v55[1];
    *v54 = *v55;
    v54[1] = v56;
    v57 = a3[12];
    v58 = a3[13];
    v59 = (_QWORD *)((char *)v4 + v57);
    v60 = (uint64_t *)((char *)a2 + v57);
    v61 = v60[1];
    *v59 = *v60;
    v59[1] = v61;
    v62 = (char *)v4 + v58;
    v63 = (char *)a2 + v58;
    v64 = type metadata accessor for ConnectionClosed(0);
    v65 = *(_QWORD *)(v64 - 8);
    v66 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v65 + 48);
    v67 = swift_bridgeObjectRetain(v61);
    if (v66(v63, 1, v64, v67))
    {
      v68 = sub_100003DB8(&qword_1003180C0);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
    }
    else
    {
      *v62 = *v63;
      v69 = *(int *)(v64 + 20);
      __dsta = &v62[v69];
      v70 = &v63[v69];
      v71 = type metadata accessor for Date(0);
      v72 = *(_QWORD *)(v71 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
      {
        v73 = sub_100003DB8(&qword_100317D58);
        memcpy(__dsta, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v72 + 16))(__dsta, v70, v71);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v72 + 56))(__dsta, 0, 1, v71);
      }
      v74 = *(int *)(v64 + 24);
      v75 = *(_QWORD *)&v63[v74];
      *(_QWORD *)&v62[v74] = v75;
      v76 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128))(v65 + 56);
      v77 = swift_bridgeObjectRetain(v75);
      v76(v62, 0, 1, v64, v77);
    }
    v78 = a3[14];
    v79 = (char *)v4 + v78;
    v80 = (char *)a2 + v78;
    v81 = *((_QWORD *)v80 + 1);
    if (v81)
    {
      *v79 = *v80;
      *((_QWORD *)v79 + 1) = v81;
      *((_WORD *)v79 + 8) = *((_WORD *)v80 + 8);
      v82 = *((_QWORD *)v80 + 3);
      v83 = *((_QWORD *)v80 + 4);
      *((_QWORD *)v79 + 3) = v82;
      *((_QWORD *)v79 + 4) = v83;
      v84 = *((_QWORD *)v80 + 5);
      v85 = *((_QWORD *)v80 + 6);
      *((_QWORD *)v79 + 5) = v84;
      *((_QWORD *)v79 + 6) = v85;
      v86 = *((_QWORD *)v80 + 7);
      *((_QWORD *)v79 + 7) = v86;
      v79[64] = v80[64];
      v79[65] = v80[65];
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v84);
      swift_bridgeObjectRetain(v85);
      swift_bridgeObjectRetain(v86);
    }
    else
    {
      v87 = *((_OWORD *)v80 + 3);
      *((_OWORD *)v79 + 2) = *((_OWORD *)v80 + 2);
      *((_OWORD *)v79 + 3) = v87;
      *((_WORD *)v79 + 32) = *((_WORD *)v80 + 32);
      v88 = *((_OWORD *)v80 + 1);
      *(_OWORD *)v79 = *(_OWORD *)v80;
      *((_OWORD *)v79 + 1) = v88;
    }
  }
  return v4;
}

double sub_1000F5618(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  v4 = a1 + a2[7];
  v5 = type metadata accessor for ServiceOutages(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(v4, 1, v5))
  {
    v6 = type metadata accessor for Date(0);
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v7(v4, v6);
    v7(v4 + *(int *)(v5 + 20), v6);
    swift_bridgeObjectRelease(*(_QWORD *)(v4 + *(int *)(v5 + 24)));
  }
  v8 = a1 + a2[8];
  v9 = type metadata accessor for SilencePeriod(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    v10 = type metadata accessor for Date(0);
    v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8);
    v11(v8, v10);
    v11(v8 + *(int *)(v9 + 20), v10);
  }
  v12 = a1 + a2[9];
  v13 = type metadata accessor for LinkState(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
  {
    v14 = v12 + *(int *)(v13 + 32);
    v15 = type metadata accessor for TransmissionProgress(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
    {
      swift_bridgeObjectRelease(*(_QWORD *)(v14 + 8));
      v16 = v14 + *(int *)(v15 + 20);
      v17 = type metadata accessor for Date(0);
      v18 = *(_QWORD *)(v17 - 8);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
    }
  }
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[12] + 8));
  v19 = a1 + a2[13];
  v20 = type metadata accessor for ConnectionClosed(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48))(v19, 1, v20))
  {
    v22 = v19 + *(int *)(v20 + 20);
    v23 = type metadata accessor for Date(0);
    v24 = *(_QWORD *)(v23 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
    *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v19 + *(int *)(v20 + 24))).n128_u64[0];
  }
  v25 = (_QWORD *)(a1 + a2[14]);
  v26 = v25[1];
  if (v26)
  {
    swift_bridgeObjectRelease(v26);
    swift_bridgeObjectRelease(v25[3]);
    swift_bridgeObjectRelease(v25[4]);
    swift_bridgeObjectRelease(v25[5]);
    swift_bridgeObjectRelease(v25[6]);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v25[7]).n128_u64[0];
  }
  return result;
}

uint64_t sub_1000F58A0(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  _DWORD *v28;
  _DWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  int *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51;
  _OWORD *v52;
  _OWORD *v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int (*v64)(_BYTE *, uint64_t, uint64_t, __n128);
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  _BYTE *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void (*v74)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v88;
  unsigned int (*v89)(char *, uint64_t, uint64_t, __n128);
  _QWORD *v90;
  void *__src;
  uint64_t v92;
  char *__dst;
  _BYTE *__dsta;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
  v7 = a3[7];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for ServiceOutages(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100003DB8(&qword_10031F880);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for Date(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
    v14(v8, v9, v13);
    v14(&v8[*(int *)(v10 + 20)], &v9[*(int *)(v10 + 20)], v13);
    v15 = *(int *)(v10 + 24);
    v16 = *(_QWORD *)&v9[v15];
    *(_QWORD *)&v8[v15] = v16;
    v17 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v11 + 56);
    v18 = swift_bridgeObjectRetain(v16);
    v17(v8, 0, 1, v10, v18);
  }
  v19 = a3[8];
  v20 = (char *)(a1 + v19);
  v21 = (char *)(a2 + v19);
  v22 = type metadata accessor for SilencePeriod(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = sub_100003DB8(&qword_10031F888);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v25 = type metadata accessor for Date(0);
    v26 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
    v26(v20, v21, v25);
    v26(&v20[*(int *)(v22 + 20)], &v21[*(int *)(v22 + 20)], v25);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v27 = a3[9];
  v28 = (_DWORD *)(a1 + v27);
  v29 = (_DWORD *)(a2 + v27);
  v30 = type metadata accessor for LinkState(0);
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    v32 = sub_100003DB8((uint64_t *)&unk_10031B230);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    *v28 = *v29;
    v33 = *(int *)(v30 + 32);
    v34 = (_QWORD *)((char *)v28 + v33);
    v35 = (_QWORD *)((char *)v29 + v33);
    v36 = (int *)type metadata accessor for TransmissionProgress(0);
    v37 = *((_QWORD *)v36 - 1);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v37 + 48))(v35, 1, v36))
    {
      v38 = sub_100003DB8(&qword_100316B68);
      memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
    }
    else
    {
      __src = (void *)v35[1];
      v92 = v37;
      *v34 = *v35;
      v34[1] = __src;
      v39 = v36[5];
      v90 = v34;
      __dst = (char *)v34 + v39;
      v40 = (char *)v35 + v39;
      v41 = type metadata accessor for Date(0);
      v88 = *(_QWORD *)(v41 - 8);
      v89 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v88 + 48);
      v42 = swift_bridgeObjectRetain(__src);
      if (v89(v40, 1, v41, v42))
      {
        v43 = sub_100003DB8(&qword_100317D58);
        memcpy(__dst, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v88 + 16))(__dst, v40, v41);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v88 + 56))(__dst, 0, 1, v41);
      }
      v44 = v36[6];
      v45 = (char *)v90 + v44;
      v46 = (char *)v35 + v44;
      *(_QWORD *)v45 = *(_QWORD *)v46;
      v45[8] = v46[8];
      *(_QWORD *)((char *)v90 + v36[7]) = *(_QWORD *)((char *)v35 + v36[7]);
      *((_BYTE *)v90 + v36[8]) = *((_BYTE *)v35 + v36[8]);
      (*(void (**)(void))(v92 + 56))();
    }
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  v47 = a3[10];
  v48 = a3[11];
  v49 = a1 + v47;
  v50 = a2 + v47;
  v51 = *(_OWORD *)(v50 + 16);
  *(_OWORD *)v49 = *(_OWORD *)v50;
  *(_OWORD *)(v49 + 16) = v51;
  *(_BYTE *)(v49 + 32) = *(_BYTE *)(v50 + 32);
  v52 = (_OWORD *)(a1 + v48);
  v53 = (_OWORD *)(a2 + v48);
  *(_OWORD *)((char *)v52 + 25) = *(_OWORD *)((char *)v53 + 25);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  v55 = a3[12];
  v56 = a3[13];
  v57 = (_QWORD *)(a1 + v55);
  v58 = (_QWORD *)(a2 + v55);
  v59 = v58[1];
  *v57 = *v58;
  v57[1] = v59;
  v60 = (_BYTE *)(a1 + v56);
  v61 = (_BYTE *)(a2 + v56);
  v62 = type metadata accessor for ConnectionClosed(0);
  v63 = *(_QWORD *)(v62 - 8);
  v64 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v63 + 48);
  v65 = swift_bridgeObjectRetain(v59);
  if (v64(v61, 1, v62, v65))
  {
    v66 = sub_100003DB8(&qword_1003180C0);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
  }
  else
  {
    *v60 = *v61;
    v67 = *(int *)(v62 + 20);
    __dsta = &v60[v67];
    v68 = &v61[v67];
    v69 = type metadata accessor for Date(0);
    v70 = *(_QWORD *)(v69 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v70 + 48))(v68, 1, v69))
    {
      v71 = sub_100003DB8(&qword_100317D58);
      memcpy(__dsta, v68, *(_QWORD *)(*(_QWORD *)(v71 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v70 + 16))(__dsta, v68, v69);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v70 + 56))(__dsta, 0, 1, v69);
    }
    v72 = *(int *)(v62 + 24);
    v73 = *(_QWORD *)&v61[v72];
    *(_QWORD *)&v60[v72] = v73;
    v74 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128))(v63 + 56);
    v75 = swift_bridgeObjectRetain(v73);
    v74(v60, 0, 1, v62, v75);
  }
  v76 = a3[14];
  v77 = a1 + v76;
  v78 = a2 + v76;
  v79 = *(_QWORD *)(v78 + 8);
  if (v79)
  {
    *(_BYTE *)v77 = *(_BYTE *)v78;
    *(_QWORD *)(v77 + 8) = v79;
    *(_WORD *)(v77 + 16) = *(_WORD *)(v78 + 16);
    v80 = *(_QWORD *)(v78 + 24);
    v81 = *(_QWORD *)(v78 + 32);
    *(_QWORD *)(v77 + 24) = v80;
    *(_QWORD *)(v77 + 32) = v81;
    v82 = *(_QWORD *)(v78 + 40);
    v83 = *(_QWORD *)(v78 + 48);
    *(_QWORD *)(v77 + 40) = v82;
    *(_QWORD *)(v77 + 48) = v83;
    v84 = *(_QWORD *)(v78 + 56);
    *(_QWORD *)(v77 + 56) = v84;
    *(_BYTE *)(v77 + 64) = *(_BYTE *)(v78 + 64);
    *(_BYTE *)(v77 + 65) = *(_BYTE *)(v78 + 65);
    swift_bridgeObjectRetain(v79);
    swift_bridgeObjectRetain(v80);
    swift_bridgeObjectRetain(v81);
    swift_bridgeObjectRetain(v82);
    swift_bridgeObjectRetain(v83);
    swift_bridgeObjectRetain(v84);
  }
  else
  {
    v85 = *(_OWORD *)(v78 + 48);
    *(_OWORD *)(v77 + 32) = *(_OWORD *)(v78 + 32);
    *(_OWORD *)(v77 + 48) = v85;
    *(_WORD *)(v77 + 64) = *(_WORD *)(v78 + 64);
    v86 = *(_OWORD *)(v78 + 16);
    *(_OWORD *)v77 = *(_OWORD *)v78;
    *(_OWORD *)(v77 + 16) = v86;
  }
  return a1;
}

uint64_t sub_1000F5E3C(uint64_t a1, __int128 *a2, int *a3)
{
  int *v3;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (*v13)(char *, uint64_t, uint64_t);
  int v14;
  int v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(_BYTE *, uint64_t, uint64_t);
  int v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  int *v45;
  uint64_t v46;
  uint64_t v47;
  size_t v48;
  void *v49;
  const void *v50;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(char *, char *, uint64_t);
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  int *v61;
  uint64_t v62;
  uint64_t (*v63)(_QWORD *, uint64_t, int *);
  int v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  unsigned int (*v70)(char *, uint64_t, uint64_t, __n128);
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  _OWORD *v88;
  __int128 *v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  _QWORD *v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _BYTE *v98;
  _BYTE *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t (*v102)(_BYTE *, uint64_t, uint64_t);
  int v103;
  int v104;
  uint64_t v105;
  _BYTE *v106;
  _BYTE *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _BYTE *v113;
  _BYTE *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t (*v117)(_BYTE *, uint64_t, uint64_t);
  int v118;
  size_t v119;
  void *v120;
  uint64_t v121;
  uint64_t v122;
  void (*v123)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128);
  __n128 v124;
  int *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t (*v162)(char *, uint64_t, uint64_t);
  int v163;
  size_t v164;
  void *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int (*v178)(char *, uint64_t, uint64_t, __n128);
  char *v179;
  uint64_t v180;
  uint64_t v181;
  void *v182;
  void *v183;
  char *__dst;
  char *__dsta;
  int *v186;

  v3 = a3;
  v6 = *a2;
  v7 = a2[1];
  *(_OWORD *)(a1 + 25) = *(__int128 *)((char *)a2 + 25);
  *(_OWORD *)a1 = v6;
  *(_OWORD *)(a1 + 16) = v7;
  *(_BYTE *)(a1 + 41) = *((_BYTE *)a2 + 41);
  *(_WORD *)(a1 + 42) = *((_WORD *)a2 + 21);
  v8 = a3[7];
  v9 = (char *)(a1 + v8);
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for ServiceOutages(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  v14 = v13(v9, 1, v11);
  v15 = v13(v10, 1, v11);
  if (v14)
  {
    if (!v15)
    {
      v16 = type metadata accessor for Date(0);
      v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
      v17(v9, v10, v16);
      v17(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v16);
      v18 = *(int *)(v11 + 24);
      v19 = *(_QWORD *)&v10[v18];
      *(_QWORD *)&v9[v18] = v19;
      v20 = *(void (**)(char *, _QWORD, uint64_t, uint64_t, __n128))(v12 + 56);
      v21 = swift_bridgeObjectRetain(v19);
      v20(v9, 0, 1, v11, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v15)
  {
    sub_10000AFFC((uint64_t)v9, type metadata accessor for ServiceOutages);
LABEL_6:
    v22 = sub_100003DB8(&qword_10031F880);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  v51 = type metadata accessor for Date(0);
  v52 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v51 - 8) + 24);
  v52(v9, v10, v51);
  v52(&v9[*(int *)(v11 + 20)], &v10[*(int *)(v11 + 20)], v51);
  v53 = *(int *)(v11 + 24);
  v54 = *(_QWORD *)&v10[v53];
  v55 = *(_QWORD *)&v9[v53];
  *(_QWORD *)&v9[v53] = v54;
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRelease(v55);
LABEL_7:
  v23 = v3[8];
  v24 = (char *)(a1 + v23);
  v25 = (char *)a2 + v23;
  v26 = type metadata accessor for SilencePeriod(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      v31 = type metadata accessor for Date(0);
      v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 16);
      v32(v24, v25, v31);
      v32(&v24[*(int *)(v26 + 20)], &v25[*(int *)(v26 + 20)], v31);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    sub_10000AFFC((uint64_t)v24, type metadata accessor for SilencePeriod);
LABEL_12:
    v33 = sub_100003DB8(&qword_10031F888);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  v56 = type metadata accessor for Date(0);
  v57 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v56 - 8) + 24);
  v57(v24, v25, v56);
  v57(&v24[*(int *)(v26 + 20)], &v25[*(int *)(v26 + 20)], v56);
LABEL_13:
  v34 = v3[9];
  v35 = (_BYTE *)(a1 + v34);
  v36 = (char *)a2 + v34;
  v37 = type metadata accessor for LinkState(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  v186 = v3;
  if (!v40)
  {
    if (v41)
    {
      sub_10000AFFC((uint64_t)v35, type metadata accessor for LinkState);
      goto LABEL_19;
    }
    *v35 = *v36;
    v35[1] = v36[1];
    v35[2] = v36[2];
    v35[3] = v36[3];
    v58 = *(int *)(v37 + 32);
    v59 = &v35[v58];
    v60 = &v36[v58];
    v61 = (int *)type metadata accessor for TransmissionProgress(0);
    v62 = *((_QWORD *)v61 - 1);
    v63 = *(uint64_t (**)(_QWORD *, uint64_t, int *))(v62 + 48);
    v64 = v63(v59, 1, v61);
    v65 = v63(v60, 1, v61);
    if (v64)
    {
      if (!v65)
      {
        *v59 = *v60;
        v66 = v60[1];
        v59[1] = v66;
        v67 = v61[5];
        __dst = (char *)v59 + v67;
        v68 = (char *)v60 + v67;
        v69 = type metadata accessor for Date(0);
        v180 = *(_QWORD *)(v69 - 8);
        v70 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v180 + 48);
        v71 = swift_bridgeObjectRetain(v66);
        if (v70(v68, 1, v69, v71))
        {
          v72 = sub_100003DB8(&qword_100317D58);
          memcpy(__dst, v68, *(_QWORD *)(*(_QWORD *)(v72 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v180 + 16))(__dst, v68, v69);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v180 + 56))(__dst, 0, 1, v69);
        }
        v3 = v186;
        v169 = v61[6];
        v170 = (char *)v59 + v169;
        v171 = (char *)v60 + v169;
        v172 = *(_QWORD *)v171;
        v170[8] = v171[8];
        *(_QWORD *)v170 = v172;
        *(_QWORD *)((char *)v59 + v61[7]) = *(_QWORD *)((char *)v60 + v61[7]);
        *((_BYTE *)v59 + v61[8]) = *((_BYTE *)v60 + v61[8]);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v62 + 56))(v59, 0, 1, v61);
        goto LABEL_35;
      }
      goto LABEL_31;
    }
    if (v65)
    {
      sub_10000AFFC((uint64_t)v59, type metadata accessor for TransmissionProgress);
LABEL_31:
      v48 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100316B68) - 8) + 64);
      v49 = v59;
      v50 = v60;
      goto LABEL_20;
    }
    *v59 = *v60;
    v155 = v60[1];
    v156 = v59[1];
    v59[1] = v155;
    swift_bridgeObjectRetain(v155);
    swift_bridgeObjectRelease(v156);
    v157 = v61[5];
    v158 = (char *)v59 + v157;
    v159 = (char *)v60 + v157;
    v160 = type metadata accessor for Date(0);
    v161 = *(_QWORD *)(v160 - 8);
    v162 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v161 + 48);
    v183 = v158;
    LODWORD(v158) = v162(v158, 1, v160);
    v163 = v162(v159, 1, v160);
    if ((_DWORD)v158)
    {
      if (!v163)
      {
        (*(void (**)(void *, char *, uint64_t))(v161 + 16))(v183, v159, v160);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v161 + 56))(v183, 0, 1, v160);
        goto LABEL_72;
      }
      v164 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8) + 64);
      v165 = v183;
    }
    else
    {
      if (!v163)
      {
        (*(void (**)(void *, char *, uint64_t))(v161 + 24))(v183, v159, v160);
        goto LABEL_72;
      }
      (*(void (**)(void *, uint64_t))(v161 + 8))(v183, v160);
      v164 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8) + 64);
      v165 = v183;
    }
    memcpy(v165, v159, v164);
LABEL_72:
    v3 = v186;
    v173 = v61[6];
    v174 = (char *)v59 + v173;
    v175 = (char *)v60 + v173;
    v176 = *(_QWORD *)v175;
    v174[8] = v175[8];
    *(_QWORD *)v174 = v176;
    *(_QWORD *)((char *)v59 + v61[7]) = *(_QWORD *)((char *)v60 + v61[7]);
    *((_BYTE *)v59 + v61[8]) = *((_BYTE *)v60 + v61[8]);
    goto LABEL_35;
  }
  if (v41)
  {
LABEL_19:
    v48 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8((uint64_t *)&unk_10031B230) - 8) + 64);
    v49 = v35;
    v50 = v36;
LABEL_20:
    memcpy(v49, v50, v48);
    goto LABEL_35;
  }
  *v35 = *v36;
  v35[1] = v36[1];
  v35[2] = v36[2];
  v35[3] = v36[3];
  v42 = *(int *)(v37 + 32);
  v43 = &v35[v42];
  v44 = &v36[v42];
  v45 = (int *)type metadata accessor for TransmissionProgress(0);
  v46 = *((_QWORD *)v45 - 1);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, int *))(v46 + 48))(v44, 1, v45))
  {
    v47 = sub_100003DB8(&qword_100316B68);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    *v43 = *v44;
    v73 = v44[1];
    v43[1] = v73;
    v74 = v45[5];
    v181 = v46;
    __dsta = (char *)v43 + v74;
    v179 = (char *)v44 + v74;
    v75 = type metadata accessor for Date(0);
    v177 = *(_QWORD *)(v75 - 8);
    v178 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v177 + 48);
    v76 = swift_bridgeObjectRetain(v73);
    if (v178(v179, 1, v75, v76))
    {
      v77 = sub_100003DB8(&qword_100317D58);
      memcpy(__dsta, v179, *(_QWORD *)(*(_QWORD *)(v77 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v177 + 16))(__dsta, v179, v75);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v177 + 56))(__dsta, 0, 1, v75);
    }
    v3 = v186;
    v78 = v45[6];
    v79 = (char *)v43 + v78;
    v80 = (char *)v44 + v78;
    v81 = *(_QWORD *)v80;
    v79[8] = v80[8];
    *(_QWORD *)v79 = v81;
    *(_QWORD *)((char *)v43 + v45[7]) = *(_QWORD *)((char *)v44 + v45[7]);
    *((_BYTE *)v43 + v45[8]) = *((_BYTE *)v44 + v45[8]);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, int *))(v181 + 56))(v43, 0, 1, v45);
  }
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
LABEL_35:
  v82 = v3[10];
  v83 = a1 + v82;
  v84 = (__int128 *)((char *)a2 + v82);
  v85 = *v84;
  v86 = v84[1];
  *(_BYTE *)(v83 + 32) = *((_BYTE *)v84 + 32);
  *(_OWORD *)v83 = v85;
  *(_OWORD *)(v83 + 16) = v86;
  v87 = v3[11];
  v88 = (_OWORD *)(a1 + v87);
  v89 = (__int128 *)((char *)a2 + v87);
  v90 = *v89;
  v91 = v89[1];
  *(_OWORD *)((char *)v88 + 25) = *(__int128 *)((char *)v89 + 25);
  *v88 = v90;
  v88[1] = v91;
  v92 = v3[12];
  v93 = (_QWORD *)(a1 + v92);
  v94 = (_QWORD *)((char *)a2 + v92);
  *v93 = *v94;
  v95 = v94[1];
  v96 = v93[1];
  v93[1] = v95;
  swift_bridgeObjectRetain(v95);
  swift_bridgeObjectRelease(v96);
  v97 = v3[13];
  v98 = (_BYTE *)(a1 + v97);
  v99 = (char *)a2 + v97;
  v100 = type metadata accessor for ConnectionClosed(0);
  v101 = *(_QWORD *)(v100 - 8);
  v102 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v101 + 48);
  v103 = v102(v98, 1, v100);
  v104 = v102(v99, 1, v100);
  if (v103)
  {
    if (!v104)
    {
      *v98 = *v99;
      v105 = *(int *)(v100 + 20);
      v106 = &v98[v105];
      v107 = &v99[v105];
      v108 = type metadata accessor for Date(0);
      v109 = *(_QWORD *)(v108 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v109 + 48))(v107, 1, v108))
      {
        v110 = sub_100003DB8(&qword_100317D58);
        memcpy(v106, v107, *(_QWORD *)(*(_QWORD *)(v110 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v109 + 16))(v106, v107, v108);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v109 + 56))(v106, 0, 1, v108);
      }
      v121 = *(int *)(v100 + 24);
      v122 = *(_QWORD *)&v99[v121];
      *(_QWORD *)&v98[v121] = v122;
      v123 = *(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t, __n128))(v101 + 56);
      v124 = swift_bridgeObjectRetain(v122);
      v123(v98, 0, 1, v100, v124);
      goto LABEL_47;
    }
LABEL_41:
    v111 = sub_100003DB8(&qword_1003180C0);
    memcpy(v98, v99, *(_QWORD *)(*(_QWORD *)(v111 - 8) + 64));
LABEL_47:
    v125 = v186;
    goto LABEL_48;
  }
  if (v104)
  {
    sub_10000AFFC((uint64_t)v98, type metadata accessor for ConnectionClosed);
    goto LABEL_41;
  }
  *v98 = *v99;
  v112 = *(int *)(v100 + 20);
  v113 = &v98[v112];
  v114 = &v99[v112];
  v115 = type metadata accessor for Date(0);
  v116 = *(_QWORD *)(v115 - 8);
  v117 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v116 + 48);
  v182 = v113;
  LODWORD(v113) = v117(v113, 1, v115);
  v118 = v117(v114, 1, v115);
  if ((_DWORD)v113)
  {
    if (!v118)
    {
      (*(void (**)(void *, _BYTE *, uint64_t))(v116 + 16))(v182, v114, v115);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v116 + 56))(v182, 0, 1, v115);
      goto LABEL_64;
    }
    v119 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8) + 64);
    v120 = v182;
  }
  else
  {
    if (!v118)
    {
      (*(void (**)(void *, _BYTE *, uint64_t))(v116 + 24))(v182, v114, v115);
      goto LABEL_64;
    }
    (*(void (**)(void *, uint64_t))(v116 + 8))(v182, v115);
    v119 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8) + 64);
    v120 = v182;
  }
  memcpy(v120, v114, v119);
LABEL_64:
  v125 = v186;
  v166 = *(int *)(v100 + 24);
  v167 = *(_QWORD *)&v99[v166];
  v168 = *(_QWORD *)&v98[v166];
  *(_QWORD *)&v98[v166] = v167;
  swift_bridgeObjectRetain(v167);
  swift_bridgeObjectRelease(v168);
LABEL_48:
  v126 = v125[14];
  v127 = a1 + v126;
  v128 = (uint64_t)a2 + v126;
  v129 = *(_QWORD *)(a1 + v126 + 8);
  v130 = *(_QWORD *)(v128 + 8);
  if (v129)
  {
    if (v130)
    {
      *(_BYTE *)v127 = *(_BYTE *)v128;
      v131 = *(_QWORD *)(v128 + 8);
      *(_QWORD *)(v127 + 8) = v131;
      swift_bridgeObjectRetain(v131);
      swift_bridgeObjectRelease(v129);
      *(_BYTE *)(v127 + 16) = *(_BYTE *)(v128 + 16);
      *(_BYTE *)(v127 + 17) = *(_BYTE *)(v128 + 17);
      v132 = *(_QWORD *)(v128 + 24);
      v133 = *(_QWORD *)(v127 + 24);
      *(_QWORD *)(v127 + 24) = v132;
      swift_bridgeObjectRetain(v132);
      swift_bridgeObjectRelease(v133);
      v134 = *(_QWORD *)(v128 + 32);
      v135 = *(_QWORD *)(v127 + 32);
      *(_QWORD *)(v127 + 32) = v134;
      swift_bridgeObjectRetain(v134);
      swift_bridgeObjectRelease(v135);
      v136 = *(_QWORD *)(v128 + 40);
      v137 = *(_QWORD *)(v127 + 40);
      *(_QWORD *)(v127 + 40) = v136;
      swift_bridgeObjectRetain(v136);
      swift_bridgeObjectRelease(v137);
      v138 = *(_QWORD *)(v128 + 48);
      v139 = *(_QWORD *)(v127 + 48);
      *(_QWORD *)(v127 + 48) = v138;
      swift_bridgeObjectRetain(v138);
      swift_bridgeObjectRelease(v139);
      v140 = *(_QWORD *)(v128 + 56);
      v141 = *(_QWORD *)(v127 + 56);
      *(_QWORD *)(v127 + 56) = v140;
      swift_bridgeObjectRetain(v140);
      swift_bridgeObjectRelease(v141);
      *(_BYTE *)(v127 + 64) = *(_BYTE *)(v128 + 64);
      *(_BYTE *)(v127 + 65) = *(_BYTE *)(v128 + 65);
    }
    else
    {
      sub_1000F3DBC((_QWORD *)v127);
      *(_OWORD *)v127 = *(_OWORD *)v128;
      v149 = *(_OWORD *)(v128 + 32);
      v148 = *(_OWORD *)(v128 + 48);
      v150 = *(_OWORD *)(v128 + 16);
      *(_WORD *)(v127 + 64) = *(_WORD *)(v128 + 64);
      *(_OWORD *)(v127 + 32) = v149;
      *(_OWORD *)(v127 + 48) = v148;
      *(_OWORD *)(v127 + 16) = v150;
    }
  }
  else if (v130)
  {
    *(_BYTE *)v127 = *(_BYTE *)v128;
    v142 = *(_QWORD *)(v128 + 8);
    *(_QWORD *)(v127 + 8) = v142;
    *(_BYTE *)(v127 + 16) = *(_BYTE *)(v128 + 16);
    *(_BYTE *)(v127 + 17) = *(_BYTE *)(v128 + 17);
    v143 = *(_QWORD *)(v128 + 24);
    *(_QWORD *)(v127 + 24) = v143;
    v144 = *(_QWORD *)(v128 + 32);
    *(_QWORD *)(v127 + 32) = v144;
    v145 = *(_QWORD *)(v128 + 40);
    *(_QWORD *)(v127 + 40) = v145;
    v146 = *(_QWORD *)(v128 + 48);
    *(_QWORD *)(v127 + 48) = v146;
    v147 = *(_QWORD *)(v128 + 56);
    *(_QWORD *)(v127 + 56) = v147;
    *(_BYTE *)(v127 + 64) = *(_BYTE *)(v128 + 64);
    *(_BYTE *)(v127 + 65) = *(_BYTE *)(v128 + 65);
    swift_bridgeObjectRetain(v142);
    swift_bridgeObjectRetain(v143);
    swift_bridgeObjectRetain(v144);
    swift_bridgeObjectRetain(v145);
    swift_bridgeObjectRetain(v146);
    swift_bridgeObjectRetain(v147);
  }
  else
  {
    *(_OWORD *)v127 = *(_OWORD *)v128;
    v151 = *(_OWORD *)(v128 + 16);
    v152 = *(_OWORD *)(v128 + 32);
    v153 = *(_OWORD *)(v128 + 48);
    *(_WORD *)(v127 + 64) = *(_WORD *)(v128 + 64);
    *(_OWORD *)(v127 + 32) = v152;
    *(_OWORD *)(v127 + 48) = v153;
    *(_OWORD *)(v127 + 16) = v151;
  }
  return a1;
}

uint64_t sub_1000F6A6C(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, char *, uint64_t);
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  _OWORD *v31;
  int *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  _OWORD *v49;
  _OWORD *v50;
  __int128 v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _BYTE *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  uint64_t v69;
  void *__src;
  uint64_t v71;
  char *__dst;
  _BYTE *__dsta;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
  v7 = a3[7];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for ServiceOutages(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
  {
    v12 = sub_100003DB8(&qword_10031F880);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    v13 = type metadata accessor for Date(0);
    v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
    v14(v8, v9, v13);
    v14(&v8[*(int *)(v10 + 20)], &v9[*(int *)(v10 + 20)], v13);
    *(_QWORD *)&v8[*(int *)(v10 + 24)] = *(_QWORD *)&v9[*(int *)(v10 + 24)];
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v15 = a3[8];
  v16 = (char *)(a1 + v15);
  v17 = (char *)(a2 + v15);
  v18 = type metadata accessor for SilencePeriod(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = sub_100003DB8(&qword_10031F888);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    v21 = type metadata accessor for Date(0);
    v22 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 32);
    v22(v16, v17, v21);
    v22(&v16[*(int *)(v18 + 20)], &v17[*(int *)(v18 + 20)], v21);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v23 = a3[9];
  v24 = (_DWORD *)(a1 + v23);
  v25 = (_DWORD *)(a2 + v23);
  v26 = type metadata accessor for LinkState(0);
  v27 = *(_QWORD *)(v26 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
  {
    v28 = sub_100003DB8((uint64_t *)&unk_10031B230);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
  }
  else
  {
    *v24 = *v25;
    v29 = *(int *)(v26 + 32);
    v30 = (_OWORD *)((char *)v24 + v29);
    v31 = (_OWORD *)((char *)v25 + v29);
    v32 = (int *)type metadata accessor for TransmissionProgress(0);
    v33 = *((_QWORD *)v32 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v33 + 48))(v31, 1, v32))
    {
      v34 = sub_100003DB8(&qword_100316B68);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      *v30 = *v31;
      v35 = v32[5];
      v71 = v33;
      __dst = (char *)v30 + v35;
      v36 = (char *)v31 + v35;
      v37 = type metadata accessor for Date(0);
      v69 = *(_QWORD *)(v37 - 8);
      __src = v36;
      v38 = v36;
      v39 = v37;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v69 + 48))(v38, 1, v37))
      {
        v40 = sub_100003DB8(&qword_100317D58);
        memcpy(__dst, __src, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, void *, uint64_t))(v69 + 32))(__dst, __src, v39);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v69 + 56))(__dst, 0, 1, v39);
      }
      v41 = v32[6];
      v42 = (char *)v30 + v41;
      v43 = (char *)v31 + v41;
      *(_QWORD *)v42 = *(_QWORD *)v43;
      v42[8] = v43[8];
      *(_QWORD *)((char *)v30 + v32[7]) = *(_QWORD *)((char *)v31 + v32[7]);
      *((_BYTE *)v30 + v32[8]) = *((_BYTE *)v31 + v32[8]);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v71 + 56))(v30, 0, 1, v32);
    }
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
  }
  v44 = a3[10];
  v45 = a3[11];
  v46 = a1 + v44;
  v47 = a2 + v44;
  *(_BYTE *)(v46 + 32) = *(_BYTE *)(v47 + 32);
  v48 = *(_OWORD *)(v47 + 16);
  *(_OWORD *)v46 = *(_OWORD *)v47;
  *(_OWORD *)(v46 + 16) = v48;
  v49 = (_OWORD *)(a1 + v45);
  v50 = (_OWORD *)(a2 + v45);
  *(_OWORD *)((char *)v49 + 25) = *(_OWORD *)((char *)v50 + 25);
  v51 = v50[1];
  *v49 = *v50;
  v49[1] = v51;
  v52 = a3[13];
  *(_OWORD *)(a1 + a3[12]) = *(_OWORD *)(a2 + a3[12]);
  v53 = (_BYTE *)(a1 + v52);
  v54 = (_BYTE *)(a2 + v52);
  v55 = type metadata accessor for ConnectionClosed(0);
  v56 = *(_QWORD *)(v55 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55))
  {
    v57 = sub_100003DB8(&qword_1003180C0);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v57 - 8) + 64));
  }
  else
  {
    *v53 = *v54;
    v58 = *(int *)(v55 + 20);
    __dsta = &v53[v58];
    v59 = &v54[v58];
    v60 = type metadata accessor for Date(0);
    v61 = *(_QWORD *)(v60 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60))
    {
      v62 = sub_100003DB8(&qword_100317D58);
      memcpy(__dsta, v59, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v61 + 32))(__dsta, v59, v60);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v61 + 56))(__dsta, 0, 1, v60);
    }
    *(_QWORD *)&v53[*(int *)(v55 + 24)] = *(_QWORD *)&v54[*(int *)(v55 + 24)];
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
  }
  v63 = a3[14];
  v64 = a1 + v63;
  v65 = a2 + v63;
  v66 = *(_OWORD *)(v65 + 48);
  *(_OWORD *)(v64 + 32) = *(_OWORD *)(v65 + 32);
  *(_OWORD *)(v64 + 48) = v66;
  *(_WORD *)(v64 + 64) = *(_WORD *)(v65 + 64);
  v67 = *(_OWORD *)(v65 + 16);
  *(_OWORD *)v64 = *(_OWORD *)v65;
  *(_OWORD *)(v64 + 16) = v67;
  return a1;
}

uint64_t sub_1000F6F60(uint64_t a1, uint64_t a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(char *, uint64_t, uint64_t);
  int v13;
  int v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;
  _OWORD *v38;
  char *v39;
  int *v40;
  uint64_t v41;
  uint64_t v42;
  size_t v43;
  void *v44;
  char *v45;
  uint64_t v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char *v54;
  int *v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t, uint64_t, int *);
  int v58;
  int v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  _OWORD *v79;
  _OWORD *v80;
  __int128 v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t (*v93)(_BYTE *, uint64_t, uint64_t);
  int v94;
  int v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  _BYTE *v104;
  uint64_t v105;
  uint64_t (*v106)(_BYTE *, uint64_t, uint64_t);
  int v107;
  size_t v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void *v113;
  char *v114;
  uint64_t v115;
  uint64_t (*v116)(void *, uint64_t, uint64_t);
  int v117;
  size_t v118;
  void *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  void *__src;
  void *__dst;
  char *__dsta;
  _BYTE *__dstb;
  void *__dstc;
  void *__dstd;

  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v6;
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  *(_WORD *)(a1 + 42) = *(_WORD *)(a2 + 42);
  v7 = a3[7];
  v8 = (char *)(a1 + v7);
  v9 = (char *)(a2 + v7);
  v10 = type metadata accessor for ServiceOutages(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  v13 = v12(v8, 1, v10);
  v14 = v12(v9, 1, v10);
  if (v13)
  {
    if (!v14)
    {
      v15 = type metadata accessor for Date(0);
      v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32);
      v16(v8, v9, v15);
      v16(&v8[*(int *)(v10 + 20)], &v9[*(int *)(v10 + 20)], v15);
      *(_QWORD *)&v8[*(int *)(v10 + 24)] = *(_QWORD *)&v9[*(int *)(v10 + 24)];
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v14)
  {
    sub_10000AFFC((uint64_t)v8, type metadata accessor for ServiceOutages);
LABEL_6:
    v17 = sub_100003DB8(&qword_10031F880);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  v46 = type metadata accessor for Date(0);
  v47 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v46 - 8) + 40);
  v47(v8, v9, v46);
  v47(&v8[*(int *)(v10 + 20)], &v9[*(int *)(v10 + 20)], v46);
  v48 = *(int *)(v10 + 24);
  v49 = *(_QWORD *)&v8[v48];
  *(_QWORD *)&v8[v48] = *(_QWORD *)&v9[v48];
  swift_bridgeObjectRelease(v49);
LABEL_7:
  v18 = a3[8];
  v19 = (char *)(a1 + v18);
  v20 = (char *)(a2 + v18);
  v21 = type metadata accessor for SilencePeriod(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      v26 = type metadata accessor for Date(0);
      v27 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v26 - 8) + 32);
      v27(v19, v20, v26);
      v27(&v19[*(int *)(v21 + 20)], &v20[*(int *)(v21 + 20)], v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    sub_10000AFFC((uint64_t)v19, type metadata accessor for SilencePeriod);
LABEL_12:
    v28 = sub_100003DB8(&qword_10031F888);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_13;
  }
  v50 = type metadata accessor for Date(0);
  v51 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v50 - 8) + 40);
  v51(v19, v20, v50);
  v51(&v19[*(int *)(v21 + 20)], &v20[*(int *)(v21 + 20)], v50);
LABEL_13:
  v29 = a3[9];
  v30 = a1 + v29;
  v31 = (char *)(a2 + v29);
  v32 = type metadata accessor for LinkState(0);
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v33 + 48);
  v35 = v34(v30, 1, v32);
  v36 = v34((uint64_t)v31, 1, v32);
  if (!v35)
  {
    if (v36)
    {
      sub_10000AFFC(v30, type metadata accessor for LinkState);
      goto LABEL_19;
    }
    *(_BYTE *)v30 = *v31;
    *(_BYTE *)(v30 + 1) = v31[1];
    *(_WORD *)(v30 + 2) = *((_WORD *)v31 + 1);
    v52 = *(int *)(v32 + 32);
    v53 = v30 + v52;
    v54 = &v31[v52];
    v55 = (int *)type metadata accessor for TransmissionProgress(0);
    v56 = *((_QWORD *)v55 - 1);
    v57 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v56 + 48);
    v58 = v57(v53, 1, v55);
    v59 = v57((uint64_t)v54, 1, v55);
    if (v58)
    {
      if (!v59)
      {
        *(_OWORD *)v53 = *(_OWORD *)v54;
        v60 = v55[5];
        __dst = (void *)(v53 + v60);
        v61 = &v54[v60];
        v62 = type metadata accessor for Date(0);
        v63 = *(_QWORD *)(v62 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v63 + 48))(v61, 1, v62))
        {
          v64 = sub_100003DB8(&qword_100317D58);
          memcpy(__dst, v61, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, char *, uint64_t))(v63 + 32))(__dst, v61, v62);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v63 + 56))(__dst, 0, 1, v62);
        }
        v135 = v55[6];
        v136 = v53 + v135;
        v137 = &v54[v135];
        *(_QWORD *)v136 = *(_QWORD *)v137;
        *(_BYTE *)(v136 + 8) = v137[8];
        *(_QWORD *)(v53 + v55[7]) = *(_QWORD *)&v54[v55[7]];
        *(_BYTE *)(v53 + v55[8]) = v54[v55[8]];
        (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v56 + 56))(v53, 0, 1, v55);
        goto LABEL_35;
      }
      goto LABEL_31;
    }
    if (v59)
    {
      sub_10000AFFC(v53, type metadata accessor for TransmissionProgress);
LABEL_31:
      v43 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100316B68) - 8) + 64);
      v44 = (void *)v53;
      v45 = v54;
      goto LABEL_20;
    }
    v110 = *((_QWORD *)v54 + 1);
    v111 = *(_QWORD *)(v53 + 8);
    *(_QWORD *)v53 = *(_QWORD *)v54;
    *(_QWORD *)(v53 + 8) = v110;
    swift_bridgeObjectRelease(v111);
    v112 = v55[5];
    v113 = (void *)(v53 + v112);
    v114 = &v54[v112];
    v115 = type metadata accessor for Date(0);
    v144 = *(_QWORD *)(v115 - 8);
    v116 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v144 + 48);
    __dstd = v113;
    LODWORD(v113) = v116(v113, 1, v115);
    v117 = v116(v114, 1, v115);
    if ((_DWORD)v113)
    {
      if (!v117)
      {
        (*(void (**)(void *, char *, uint64_t))(v144 + 32))(__dstd, v114, v115);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v144 + 56))(__dstd, 0, 1, v115);
        goto LABEL_69;
      }
      v118 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8) + 64);
      v119 = __dstd;
    }
    else
    {
      if (!v117)
      {
        (*(void (**)(void *, char *, uint64_t))(v144 + 40))(__dstd, v114, v115);
        goto LABEL_69;
      }
      (*(void (**)(void *, uint64_t))(v144 + 8))(__dstd, v115);
      v118 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8) + 64);
      v119 = __dstd;
    }
    memcpy(v119, v114, v118);
LABEL_69:
    v138 = v55[6];
    v139 = v53 + v138;
    v140 = &v54[v138];
    *(_QWORD *)v139 = *(_QWORD *)v140;
    *(_BYTE *)(v139 + 8) = v140[8];
    *(_QWORD *)(v53 + v55[7]) = *(_QWORD *)&v54[v55[7]];
    *(_BYTE *)(v53 + v55[8]) = v54[v55[8]];
    goto LABEL_35;
  }
  if (v36)
  {
LABEL_19:
    v43 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8((uint64_t *)&unk_10031B230) - 8) + 64);
    v44 = (void *)v30;
    v45 = v31;
LABEL_20:
    memcpy(v44, v45, v43);
    goto LABEL_35;
  }
  *(_DWORD *)v30 = *(_DWORD *)v31;
  v37 = *(int *)(v32 + 32);
  v38 = (_OWORD *)(v30 + v37);
  v39 = &v31[v37];
  v40 = (int *)type metadata accessor for TransmissionProgress(0);
  v41 = *((_QWORD *)v40 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v41 + 48))(v39, 1, v40))
  {
    v42 = sub_100003DB8(&qword_100316B68);
    memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    v142 = v41;
    *v38 = *(_OWORD *)v39;
    v65 = v40[5];
    __dsta = (char *)v38 + v65;
    v66 = &v39[v65];
    v67 = type metadata accessor for Date(0);
    v141 = *(_QWORD *)(v67 - 8);
    __src = v66;
    v68 = v66;
    v69 = v67;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v141 + 48))(v68, 1, v67))
    {
      v70 = sub_100003DB8(&qword_100317D58);
      memcpy(__dsta, __src, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, void *, uint64_t))(v141 + 32))(__dsta, __src, v69);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v141 + 56))(__dsta, 0, 1, v69);
    }
    v71 = v40[6];
    v72 = (char *)v38 + v71;
    v73 = &v39[v71];
    *(_QWORD *)v72 = *(_QWORD *)v73;
    v72[8] = v73[8];
    *(_QWORD *)((char *)v38 + v40[7]) = *(_QWORD *)&v39[v40[7]];
    *((_BYTE *)v38 + v40[8]) = v39[v40[8]];
    (*(void (**)(_OWORD *, _QWORD, uint64_t, int *))(v142 + 56))(v38, 0, 1, v40);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
LABEL_35:
  v74 = a3[10];
  v75 = a3[11];
  v76 = a1 + v74;
  v77 = a2 + v74;
  v78 = *(_OWORD *)(v77 + 16);
  *(_OWORD *)v76 = *(_OWORD *)v77;
  *(_OWORD *)(v76 + 16) = v78;
  *(_BYTE *)(v76 + 32) = *(_BYTE *)(v77 + 32);
  v79 = (_OWORD *)(a1 + v75);
  v80 = (_OWORD *)(a2 + v75);
  *(_OWORD *)((char *)v79 + 25) = *(_OWORD *)((char *)v80 + 25);
  v81 = v80[1];
  *v79 = *v80;
  v79[1] = v81;
  v82 = a3[12];
  v83 = (_QWORD *)(a1 + v82);
  v84 = (uint64_t *)(a2 + v82);
  v86 = *v84;
  v85 = v84[1];
  v87 = v83[1];
  *v83 = v86;
  v83[1] = v85;
  swift_bridgeObjectRelease(v87);
  v88 = a3[13];
  v89 = (_BYTE *)(a1 + v88);
  v90 = (_BYTE *)(a2 + v88);
  v91 = type metadata accessor for ConnectionClosed(0);
  v92 = *(_QWORD *)(v91 - 8);
  v93 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v92 + 48);
  v94 = v93(v89, 1, v91);
  v95 = v93(v90, 1, v91);
  if (!v94)
  {
    if (v95)
    {
      sub_10000AFFC((uint64_t)v89, type metadata accessor for ConnectionClosed);
      goto LABEL_41;
    }
    *v89 = *v90;
    v102 = *(int *)(v91 + 20);
    v103 = &v89[v102];
    v104 = &v90[v102];
    v105 = type metadata accessor for Date(0);
    v143 = *(_QWORD *)(v105 - 8);
    v106 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v143 + 48);
    __dstc = v103;
    LODWORD(v103) = v106(v103, 1, v105);
    v107 = v106(v104, 1, v105);
    if ((_DWORD)v103)
    {
      if (!v107)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v143 + 32))(__dstc, v104, v105);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v143 + 56))(__dstc, 0, 1, v105);
        goto LABEL_55;
      }
      v108 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8) + 64);
      v109 = __dstc;
    }
    else
    {
      if (!v107)
      {
        (*(void (**)(void *, _BYTE *, uint64_t))(v143 + 40))(__dstc, v104, v105);
        goto LABEL_55;
      }
      (*(void (**)(void *, uint64_t))(v143 + 8))(__dstc, v105);
      v108 = *(_QWORD *)(*(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8) + 64);
      v109 = __dstc;
    }
    memcpy(v109, v104, v108);
LABEL_55:
    v120 = *(int *)(v91 + 24);
    v121 = *(_QWORD *)&v89[v120];
    *(_QWORD *)&v89[v120] = *(_QWORD *)&v90[v120];
    swift_bridgeObjectRelease(v121);
    goto LABEL_56;
  }
  if (v95)
  {
LABEL_41:
    v101 = sub_100003DB8(&qword_1003180C0);
    memcpy(v89, v90, *(_QWORD *)(*(_QWORD *)(v101 - 8) + 64));
    goto LABEL_56;
  }
  *v89 = *v90;
  v96 = *(int *)(v91 + 20);
  __dstb = &v89[v96];
  v97 = &v90[v96];
  v98 = type metadata accessor for Date(0);
  v99 = *(_QWORD *)(v98 - 8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v99 + 48))(v97, 1, v98))
  {
    v100 = sub_100003DB8(&qword_100317D58);
    memcpy(__dstb, v97, *(_QWORD *)(*(_QWORD *)(v100 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v99 + 32))(__dstb, v97, v98);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v99 + 56))(__dstb, 0, 1, v98);
  }
  *(_QWORD *)&v89[*(int *)(v91 + 24)] = *(_QWORD *)&v90[*(int *)(v91 + 24)];
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v92 + 56))(v89, 0, 1, v91);
LABEL_56:
  v122 = a3[14];
  v123 = a1 + v122;
  v124 = a2 + v122;
  v125 = *(_QWORD *)(a1 + v122 + 8);
  if (!v125)
  {
LABEL_60:
    v132 = *(_OWORD *)(v124 + 48);
    *(_OWORD *)(v123 + 32) = *(_OWORD *)(v124 + 32);
    *(_OWORD *)(v123 + 48) = v132;
    *(_WORD *)(v123 + 64) = *(_WORD *)(v124 + 64);
    v133 = *(_OWORD *)(v124 + 16);
    *(_OWORD *)v123 = *(_OWORD *)v124;
    *(_OWORD *)(v123 + 16) = v133;
    return a1;
  }
  v126 = *(_QWORD *)(v124 + 8);
  if (!v126)
  {
    sub_1000F3DBC((_QWORD *)v123);
    goto LABEL_60;
  }
  *(_BYTE *)v123 = *(_BYTE *)v124;
  *(_QWORD *)(v123 + 8) = v126;
  swift_bridgeObjectRelease(v125);
  *(_BYTE *)(v123 + 16) = *(_BYTE *)(v124 + 16);
  *(_BYTE *)(v123 + 17) = *(_BYTE *)(v124 + 17);
  v127 = *(_QWORD *)(v123 + 24);
  *(_QWORD *)(v123 + 24) = *(_QWORD *)(v124 + 24);
  swift_bridgeObjectRelease(v127);
  v128 = *(_QWORD *)(v123 + 32);
  *(_QWORD *)(v123 + 32) = *(_QWORD *)(v124 + 32);
  swift_bridgeObjectRelease(v128);
  v129 = *(_QWORD *)(v123 + 40);
  *(_QWORD *)(v123 + 40) = *(_QWORD *)(v124 + 40);
  swift_bridgeObjectRelease(v129);
  v130 = *(_QWORD *)(v123 + 48);
  *(_QWORD *)(v123 + 48) = *(_QWORD *)(v124 + 48);
  swift_bridgeObjectRelease(v130);
  v131 = *(_QWORD *)(v123 + 56);
  *(_QWORD *)(v123 + 56) = *(_QWORD *)(v124 + 56);
  swift_bridgeObjectRelease(v131);
  *(_WORD *)(v123 + 64) = *(_WORD *)(v124 + 64);
  return a1;
}

uint64_t sub_1000F7A10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F7A1C);
}

uint64_t sub_1000F7A1C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;

  v6 = sub_100003DB8(&qword_10031F880);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_100003DB8(&qword_10031F888);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = sub_100003DB8((uint64_t *)&unk_10031B230);
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[9];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 2147483646)
  {
    v8 = sub_100003DB8(&qword_1003180C0);
    v7 = *(_QWORD *)(v8 - 8);
    v9 = a3[13];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[12] + 8);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  v13 = v12 - 1;
  if (v13 < 0)
    v13 = -1;
  return (v13 + 1);
}

uint64_t sub_1000F7B28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F7B34);
}

uint64_t sub_1000F7B34(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  v8 = sub_100003DB8(&qword_10031F880);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[7];
  }
  else
  {
    v12 = sub_100003DB8(&qword_10031F888);
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[8];
    }
    else
    {
      result = sub_100003DB8((uint64_t *)&unk_10031B230);
      v9 = *(_QWORD *)(result - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = result;
        v11 = a4[9];
      }
      else
      {
        if (a3 == 2147483646)
        {
          *(_QWORD *)(a1 + a4[12] + 8) = a2;
          return result;
        }
        v10 = sub_100003DB8(&qword_1003180C0);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[13];
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_1000F7C30(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD v10[11];

  v10[0] = ")";
  v10[1] = &unk_100255788;
  v10[2] = &unk_1002557F8;
  sub_1000F03D4(319, &qword_10031F998, type metadata accessor for ServiceOutages);
  if (v3 <= 0x3F)
  {
    v10[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000F03D4(319, &qword_10031F9A0, type metadata accessor for SilencePeriod);
    if (v5 <= 0x3F)
    {
      v10[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000F03D4(319, &qword_10031F9A8, type metadata accessor for LinkState);
      if (v7 <= 0x3F)
      {
        v10[5] = *(_QWORD *)(v6 - 8) + 64;
        v10[6] = &unk_100255810;
        v10[7] = &unk_100255828;
        v10[8] = &unk_100255718;
        sub_1000F03D4(319, (unint64_t *)&unk_10031F9B0, type metadata accessor for ConnectionClosed);
        if (v9 <= 0x3F)
        {
          v10[9] = *(_QWORD *)(v8 - 8) + 64;
          v10[10] = &unk_100255840;
          swift_initStructMetadata(a1, 256, 11, v10, a1 + 16);
        }
      }
    }
  }
}

uint64_t getEnumTagSinglePayload for TargetVisibility(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  int v6;
  int v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  if (*a1 <= 3u)
    v6 = 3;
  else
    v6 = *a1;
  v7 = v6 - 4;
  if (*a1 < 3u)
    v8 = -1;
  else
    v8 = v7;
  return (v8 + 1);
}

ValueMetadata *type metadata accessor for TargetVisibility()
{
  return &type metadata for TargetVisibility;
}

uint64_t storeEnumTagSinglePayload for TargetVisibility.Degree(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1000F7E70 + 4 * byte_1002555B5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000F7EA4 + 4 * byte_1002555B0[v4]))();
}

uint64_t sub_1000F7EA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F7EAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000F7EB4);
  return result;
}

uint64_t sub_1000F7EC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000F7EC8);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000F7ECC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F7ED4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TargetVisibility.Degree()
{
  return &type metadata for TargetVisibility.Degree;
}

uint64_t getEnumTagSinglePayload for Target(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Target(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 40) = v3;
  return result;
}

ValueMetadata *type metadata accessor for Target()
{
  return &type metadata for Target;
}

unint64_t sub_1000F7F58()
{
  unint64_t result;

  result = qword_10031FA08;
  if (!qword_10031FA08)
  {
    result = swift_getWitnessTable(&unk_1002558E8, &type metadata for TargetVisibility.Degree);
    atomic_store(result, (unint64_t *)&qword_10031FA08);
  }
  return result;
}

uint64_t sub_1000F7F9C()
{
  return sub_1000052EC(&qword_10031FA10, type metadata accessor for ServiceOutages, (uint64_t)&unk_100255A18);
}

uint64_t sub_1000F7FC8()
{
  return sub_1000052EC(&qword_10031FA18, type metadata accessor for SilencePeriod, (uint64_t)&unk_100255A80);
}

double sub_1000F7FF4@<D0>(uint64_t a1@<X8>, double a2@<D0>, double a3@<D1>)
{
  void *v3;
  void *v4;
  id v8;
  double v9;
  double v10;
  double v11;
  id v12;
  double v13;
  double v14;
  double v15;
  double v16;
  unint64_t v17;
  BOOL v18;
  double v19;
  double v20;
  double v21;
  double v22;
  id v23;
  id v24;
  double result;
  double v26;

  v4 = v3;
  v8 = objc_msgSend(v3, "x");
  objc_msgSend(v8, "doubleValueSafe");
  v10 = v9;

  v11 = round(v10);
  v12 = objc_msgSend(v4, "y");
  objc_msgSend(v12, "doubleValueSafe");
  v14 = v13;

  v15 = round(v14);
  if (qword_100315728 != -1)
    swift_once(&qword_100315728, sub_100018E0C);
  v16 = v15 * 0.0174532925;
  v17 = qword_10033FBD0;
  v18 = *(double *)&qword_10033FBD0 == a2 && *(double *)algn_10033FBD8 == a3;
  v19 = v11 * 0.0174532925;
  if (!v18)
  {
    v19 = (v11 + a2) * 0.0174532925;
    if (v19 < 0.0 || v19 >= 6.28318531)
      v19 = v19 - floor(v19 / 6.28318531) * 6.28318531;
    v20 = (v15 + a3) * 0.0174532925;
    v21 = Angle.animatableData.getter(1.57079633);
    Angle.animatableData.setter(0.0 - v21);
    v17 = 0x3FF921FB54442D18;
    if (v20 < 1.57079633)
    {
      v22 = Angle.animatableData.getter(1.57079633);
      v17 = Angle.animatableData.setter(0.0 - v22).n128_u64[0];
      v20 = 1.57079633;
    }
    if (v20 <= 1.57079633)
      v16 = v20;
    else
      v16 = 1.57079633;
  }
  v23 = objc_msgSend(v4, "targetId", *(double *)&v17, v15 * 0.0174532925);
  v24 = objc_msgSend(v23, "int64ValueSafe");

  *(_QWORD *)a1 = v24;
  result = v26;
  *(double *)(a1 + 8) = v11 * 0.0174532925;
  *(double *)(a1 + 16) = v26;
  *(double *)(a1 + 24) = v19;
  *(double *)(a1 + 32) = v16;
  return result;
}

uint64_t sub_1000F81E8@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 v45;
  uint64_t v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  id v57;
  void *v58;
  char *v59;
  void (*v60)(uint64_t, char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  id v64;
  void *v65;
  char *v66;
  void (*v67)(char *, char *, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  char *v77;
  char *v78;
  __int128 v79;
  uint64_t (*v80)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v78 = a1;
  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  v4 = __chkstk_darwin(v1, v3);
  v77 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4, v6);
  v73 = (char *)&v71 - v8;
  __chkstk_darwin(v7, v9);
  v75 = (char *)&v71 - v10;
  v11 = type metadata accessor for ServiceOutages.Outage(0);
  v83 = *(_QWORD *)(v11 - 8);
  v84 = v11;
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003DB8(&qword_100317D58);
  v16 = *(_QWORD *)(v15 - 8);
  v18 = __chkstk_darwin(v15, v17);
  v72 = (char *)&v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18, v20);
  v74 = (char *)&v71 - v22;
  v24 = __chkstk_darwin(v21, v23);
  v26 = (char *)&v71 - v25;
  __chkstk_darwin(v24, v27);
  v29 = (char *)&v71 - v28;
  v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_100003DB8(&qword_10031FA80);
  v30 = *(unsigned __int8 *)(v16 + 80);
  v31 = (v30 + 32) & ~v30;
  v85 = *(_QWORD *)(v16 + 72);
  v32 = v31 + v85;
  v33 = v30 | 7;
  v34 = swift_allocObject(v80, v31 + v85, v30 | 7);
  v79 = xmmword_10024E070;
  *(_OWORD *)(v34 + 16) = xmmword_10024E070;
  v76 = v2;
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v2 + 56);
  v81 = v1;
  v35(v34 + v31, 1, 1, v1);
  v36 = objc_msgSend(v82, "changesAt");
  v37 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v36, v1);

  v38 = sub_1000ECCF0(v37);
  swift_bridgeObjectRelease(v37);
  v86 = v34;
  sub_1000EC7FC((uint64_t)v38);
  v39 = v86;
  v40 = swift_allocObject(v80, v32, v33);
  *(_OWORD *)(v40 + 16) = v79;
  v80 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))v35;
  v35(v40 + v31, 1, 1, v81);
  v86 = v39;
  sub_1000EC7FC(v40);
  v41 = v86;
  v42 = objc_msgSend(v82, "atStart");
  v43 = *(_QWORD *)(v41 + 16);
  if (!v43)
    __break(1u);
  v44 = v43 - 1;
  if (v43 == 1)
  {
    v50 = swift_bridgeObjectRelease(v41).n128_u64[0];
    v47 = _swiftEmptyArrayStorage;
  }
  else
  {
    v45 = v42;
    *(_QWORD *)&v79 = v41;
    v46 = v41 + v31;
    v47 = _swiftEmptyArrayStorage;
    do
    {
      sub_10000B234(v46, (uint64_t)v29, &qword_100317D58);
      v46 += v85;
      sub_10000B234(v46, (uint64_t)v26, &qword_100317D58);
      if ((v45 & 1) == 0)
      {
        sub_10000B234((uint64_t)v29, (uint64_t)v14, &qword_100317D58);
        sub_10000B234((uint64_t)v26, (uint64_t)&v14[*(int *)(v84 + 20)], &qword_100317D58);
        if ((swift_isUniquelyReferenced_nonNull_native(v47) & 1) == 0)
          v47 = (_QWORD *)sub_100172228(0, v47[2] + 1, 1, (unint64_t)v47);
        v49 = v47[2];
        v48 = v47[3];
        if (v49 >= v48 >> 1)
          v47 = (_QWORD *)sub_100172228(v48 > 1, v49 + 1, 1, (unint64_t)v47);
        v47[2] = v49 + 1;
        sub_1000E8D6C((uint64_t)v14, (uint64_t)v47+ ((*(unsigned __int8 *)(v83 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80))+ *(_QWORD *)(v83 + 72) * v49, type metadata accessor for ServiceOutages.Outage);
      }
      sub_100007FF0((uint64_t)v26, &qword_100317D58);
      sub_100007FF0((uint64_t)v29, &qword_100317D58);
      v45 ^= 1u;
      --v44;
    }
    while (v44);
    v50 = swift_bridgeObjectRelease(v79).n128_u64[0];
  }
  v52 = v77;
  v51 = v78;
  v53 = v81;
  v55 = v75;
  v54 = v76;
  v56 = (uint64_t)v74;
  if (!v47[2])
  {
    swift_bridgeObjectRelease(v47);
    v62 = type metadata accessor for ServiceOutages(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v51, 1, 1, v62);
  }
  v57 = objc_msgSend(v82, "startsAt", *(double *)&v50);
  if (v57)
  {
    v58 = v57;
    v59 = v73;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v60 = *(void (**)(uint64_t, char *, uint64_t))(v54 + 32);
    v60(v56, v59, v53);
    v80(v56, 0, 1, v53);
    v61 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v56, 1, v53);
    if ((_DWORD)v61 != 1)
    {
      v60((uint64_t)v55, (char *)v56, v53);
      goto LABEL_20;
    }
  }
  else
  {
    v61 = v80(v56, 1, 1, v53);
  }
  Date.init()(v61);
  sub_100007FF0(v56, &qword_100317D58);
LABEL_20:
  v64 = objc_msgSend(v82, "endsAt");
  if (!v64)
  {
    v68 = (uint64_t)v72;
    v69 = v80((uint64_t)v72, 1, 1, v53);
    goto LABEL_24;
  }
  v65 = v64;
  v66 = v73;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v67 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
  v68 = (uint64_t)v72;
  v67(v72, v66, v53);
  v80(v68, 0, 1, v53);
  v69 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v68, 1, v53);
  if ((_DWORD)v69 == 1)
  {
LABEL_24:
    Date.init()(v69);
    sub_100007FF0(v68, &qword_100317D58);
    v67 = *(void (**)(char *, char *, uint64_t))(v54 + 32);
    goto LABEL_25;
  }
  v67(v52, (char *)v68, v53);
LABEL_25:
  v67(v51, v55, v53);
  v70 = type metadata accessor for ServiceOutages(0);
  v67(&v51[*(int *)(v70 + 20)], v52, v53);
  *(_QWORD *)&v51[*(int *)(v70 + 24)] = v47;
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v51, 0, 1, v70);
}

uint64_t sub_1000F882C@<X0>(char *a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  id v25;
  void *v26;
  void (*v27)(char *, char *, uint64_t);
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  id v30;
  void *v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v36;
  char *v37;
  char *v38;

  v2 = v1;
  v4 = sub_100003DB8(&qword_100317D58);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v37 - v10;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v15 = __chkstk_darwin(v12, v14);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __chkstk_darwin(v15, v18);
  v21 = (char *)&v37 - v20;
  __chkstk_darwin(v19, v22);
  v24 = (char *)&v37 - v23;
  v25 = objc_msgSend(v2, "startsAt");
  if (v25)
  {
    v26 = v25;
    v37 = v17;
    v38 = a1;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v27 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v27(v11, v21, v12);
    v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
    v28(v11, 0, 1, v12);
    v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
    if (v29(v11, 1, v12) == 1)
    {
      v8 = v11;
    }
    else
    {
      v27(v24, v11, v12);
      v30 = objc_msgSend(v2, "endsAt");
      if (v30)
      {
        v31 = v30;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        v27(v8, v21, v12);
        v28(v8, 0, 1, v12);
        if (v29(v8, 1, v12) != 1)
        {
          v32 = v37;
          v27(v37, v8, v12);
          v33 = v38;
          v27(v38, v24, v12);
          v34 = type metadata accessor for SilencePeriod(0);
          v27(&v33[*(int *)(v34 + 20)], v32, v12);
          return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v33, 0, 1, v34);
        }
      }
      else
      {
        v28(v8, 1, 1, v12);
      }
      (*(void (**)(char *, uint64_t))(v13 + 8))(v24, v12);
    }
    a1 = v38;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, 1, 1, v12);
    v8 = v11;
  }
  sub_100007FF0((uint64_t)v8, &qword_100317D58);
  v36 = type metadata accessor for SilencePeriod(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(a1, 1, 1, v36);
}

uint64_t sub_1000F8B10@<X0>(BOOL *a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  id v7;
  unint64_t v8;
  unint64_t v9;
  id v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v19;

  v3 = sub_100003DB8(&qword_100316B68);
  __chkstk_darwin(v3, v4);
  v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = objc_msgSend(v1, "connectionStatus");
  v8 = (unint64_t)objc_msgSend(v1, "syncStatus");
  v9 = (unint64_t)objc_msgSend(v1, "registrationStatus");
  v10 = objc_msgSend(v1, "congestionStatus");
  v11 = objc_msgSend(v1, "currentTransmissionProgress");
  if (v11)
  {
    v12 = v11;
    sub_1000F8DE4(v6);

  }
  else
  {
    v13 = type metadata accessor for TransmissionProgress(0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
  }
  v14 = 0x302010004uLL >> (8 * v10);
  if ((unint64_t)v10 >= 5)
    LOBYTE(v14) = 4;
  v15 = 0x10002u >> (8 * v9);
  if (v9 >= 3)
    LOBYTE(v15) = 2;
  v16 = 0x10002u >> (8 * v8);
  if (v8 >= 3)
    LOBYTE(v16) = 2;
  *a1 = v7 == (id)3;
  a1[1] = v16;
  a1[2] = v15;
  a1[3] = v14;
  v17 = type metadata accessor for LinkState(0);
  return sub_10000B458((uint64_t)v6, (uint64_t)&a1[*(int *)(v17 + 32)], &qword_100316B68);
}

uint64_t sub_1000F8CAC@<X0>(_BYTE *a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v2 = v1;
  v4 = sub_100003DB8(&qword_100317D58);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_1000F92CC((uint64_t)objc_msgSend(v2, "reason"));
  v9 = objc_msgSend(v2, "closedAt");
  if (v9)
  {
    v10 = v9;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v11 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 0, 1, v11);
  }
  else
  {
    v12 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v7, 1, 1, v12);
  }
  v13 = sub_100155744((char)objc_msgSend(v2, "wasActiveServices"));
  *a1 = v8;
  v14 = type metadata accessor for ConnectionClosed(0);
  result = sub_10000B458((uint64_t)v7, (uint64_t)&a1[*(int *)(v14 + 20)], &qword_100317D58);
  *(_QWORD *)&a1[*(int *)(v14 + 24)] = v13;
  return result;
}

id sub_1000F8DE4@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id result;
  id v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  int *v27;
  char *v28;
  uint64_t v29;

  v2 = v1;
  v4 = sub_100003DB8(&qword_100317D58);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = (char *)objc_msgSend(v2, "payloadType");
  v9 = (_BYTE)v8 - 1;
  if ((unint64_t)(v8 - 1) > 6)
  {
    v15 = type metadata accessor for TransmissionProgress(0);
    return (id)(*(uint64_t (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 1, 1, v15);
  }
  v10 = objc_msgSend(v2, "messageId");
  if (v10)
  {
    v11 = v10;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v14 = v13;

  }
  else
  {
    v12 = 0;
    v14 = 0;
  }
  v17 = objc_msgSend(v2, "startedAt");
  if (v17)
  {
    v18 = v17;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v19 = type metadata accessor for Date(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v7, 0, 1, v19);
  }
  else
  {
    v20 = type metadata accessor for Date(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v7, 1, 1, v20);
  }
  v21 = objc_msgSend(v2, "estimatedDurationSeconds");

  if (v21)
  {
    result = objc_msgSend(v2, "estimatedDurationSeconds");
    if (!result)
    {
      __break(1u);
      return result;
    }
    v22 = result;
    v23 = objc_msgSend(result, "int64ValueSafe");

  }
  else
  {
    v23 = 0;
  }
  v24 = objc_msgSend(v2, "progressPercents");
  if (v24)
  {
    v25 = v24;
    v26 = objc_msgSend(v24, "int64ValueSafe");

  }
  else
  {
    v26 = 0;
  }
  *a1 = v12;
  a1[1] = v14;
  v27 = (int *)type metadata accessor for TransmissionProgress(0);
  sub_10000B458((uint64_t)v7, (uint64_t)a1 + v27[5], &qword_100317D58);
  v28 = (char *)a1 + v27[6];
  *(_QWORD *)v28 = v23;
  v28[8] = v21 == 0;
  *(uint64_t *)((char *)a1 + v27[7]) = (uint64_t)v26;
  *((_BYTE *)a1 + v27[8]) = v9;
  return (id)(*(uint64_t (**)(uint64_t *, _QWORD, uint64_t, int *))(*((_QWORD *)v27 - 1) + 56))(a1, 0, 1, v27);
}

uint64_t sub_1000F9068(uint64_t a1)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;

  result = 4;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0;
      break;
    case 2:
      result = 1;
      break;
    case 3:
      result = 2;
      break;
    case 4:
      result = 3;
      break;
    case 5:
      if (qword_100315848 != -1)
        swift_once(&qword_100315848, sub_1000D9674);
      v16 = type metadata accessor for Logger(0);
      v17 = sub_10000D744(v16, (uint64_t)qword_10033FD90);
      v6 = Logger.logObject.getter(v17);
      v18 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v6, v18))
        goto LABEL_15;
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v18, "CTCAStewieEmergencyRequestReasonTryOut should never reach SOSBuddy", v19, 2u);
      v15 = v19;
      goto LABEL_14;
    default:
      if (qword_100315848 != -1)
        swift_once(&qword_100315848, sub_1000D9674);
      v4 = type metadata accessor for Logger(0);
      v5 = sub_10000D744(v4, (uint64_t)qword_10033FD90);
      v6 = Logger.logObject.getter(v5);
      v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc(12, -1);
        v9 = swift_slowAlloc(32, -1);
        v20 = a1;
        v21 = v9;
        *(_DWORD *)v8 = 136446210;
        type metadata accessor for CTCAStewieEmergencyRequestReason(0);
        v12 = String.init<A>(describing:)(&v20, v10, v11);
        v14 = v13;
        v20 = sub_100172BEC(v12, v13, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v8 + 4, v8 + 12);
        swift_bridgeObjectRelease(v14);
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unhandled CTCAStewieEmergencyRequestReason value: %{public}s", v8, 0xCu);
        swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v9, -1, -1);
        v15 = v8;
LABEL_14:
        swift_slowDealloc(v15, -1, -1);
      }
LABEL_15:

      result = 4;
      break;
  }
  return result;
}

uint64_t sub_1000F92CC(uint64_t a1)
{
  if ((unint64_t)(a1 - 1) > 0xC)
    return 12;
  else
    return byte_100255E32[a1 - 1];
}

void sub_1000F92F0(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  void *v10;
  id v11;
  double v12;
  double v13;
  id v14;
  double v15;
  double v16;
  id v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  double *v21;
  uint64_t v22;
  id v23;
  _QWORD *v24;
  void *v25;
  uint64_t v26;
  _QWORD *v27;

  v27 = _swiftEmptyArrayStorage;
  v3 = objc_msgSend(v1, "targets");
  v4 = sub_10006477C(0, &qword_10031FA68, CTCATargetReading_ptr);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v3, v4);

  if (!((unint64_t)v5 >> 62))
  {
    v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v6)
      goto LABEL_3;
LABEL_18:
    swift_bridgeObjectRelease(v5);
LABEL_19:
    sub_1000F959C(&v27);
    v23 = objc_msgSend(v1, "at");
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v24 = v27;
    *(_QWORD *)(a1 + *(int *)(type metadata accessor for TargetTracks.TimePoint(0) + 20)) = v24;
    return;
  }
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v6 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  if (!v6)
    goto LABEL_18;
LABEL_3:
  if (v6 >= 1)
  {
    v25 = v1;
    v26 = a1;
    v7 = 0;
    v8 = _swiftEmptyArrayStorage;
    do
    {
      if ((v5 & 0xC000000000000001) != 0)
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
      else
        v9 = *(id *)(v5 + 8 * v7 + 32);
      v10 = v9;
      v11 = objc_msgSend(v9, "x", v25, v26);
      objc_msgSend(v11, "doubleValueSafe");
      v13 = v12;

      v14 = objc_msgSend(v10, "y");
      objc_msgSend(v14, "doubleValueSafe");
      v16 = v15;

      v17 = objc_msgSend(v10, "targetId");
      v18 = objc_msgSend(v17, "int64ValueSafe");

      if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        v8 = sub_100172658(0, v8[2] + 1, 1, v8);
      v20 = v8[2];
      v19 = v8[3];
      if (v20 >= v19 >> 1)
        v8 = sub_100172658((_QWORD *)(v19 > 1), v20 + 1, 1, v8);
      ++v7;
      v8[2] = v20 + 1;
      v21 = (double *)&v8[3 * v20];
      *((_QWORD *)v21 + 4) = v18;
      v21[5] = v13 * 0.0174532925;
      v21[6] = v16 * 0.0174532925;

    }
    while (v6 != v7);
    swift_bridgeObjectRelease(v5);
    v27 = v8;
    v1 = v25;
    a1 = v26;
    goto LABEL_19;
  }
  __break(1u);
}

Swift::Int sub_1000F959C(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  Swift::Int result;
  uint64_t v5[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_100190EF0(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_1000F9B4C(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1000F9608(unint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  Swift::Int result;
  _QWORD v6[2];

  v2 = *(_QWORD *)(type metadata accessor for TargetTracks.TimePoint(0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v3 = sub_100190F04(v3);
  v4 = *(_QWORD *)(v3 + 16);
  v6[0] = v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_1000FA260(v6);
  *a1 = v3;
  return result;
}

void sub_1000F968C(uint64_t a1@<X8>)
{
  void *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  void (*v29)(char *, char *, _QWORD *);
  uint64_t v30;
  uint64_t (*v31)(char *, uint64_t, uint64_t, _QWORD *);
  uint64_t v32;
  uint64_t v33;
  id v34;
  id v35;
  void *v36;
  void (*v37)(char *, char *, _QWORD *);
  uint64_t v38;
  uint64_t v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  id v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void (*v52)(uint64_t, char *, _QWORD *);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  char *v58;
  char *v59;
  _QWORD *v60;

  v3 = type metadata accessor for TargetTracks.TimePoint(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100317D58);
  v10 = __chkstk_darwin(v8, v9);
  v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v54 - v14;
  v16 = (_QWORD *)type metadata accessor for Date(0);
  v17 = *(v16 - 1);
  v19 = __chkstk_darwin(v16, v18);
  v59 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v19, v21);
  v24 = (char *)&v54 - v23;
  __chkstk_darwin(v22, v25);
  v58 = (char *)&v54 - v26;
  v56 = v1;
  v27 = objc_msgSend(v1, "startsAt");
  v57 = a1;
  if (!v27)
  {
    v32 = v17;
    v31 = *(uint64_t (**)(char *, uint64_t, uint64_t, _QWORD *))(v17 + 56);
    v33 = v31(v15, 1, 1, v16);
    goto LABEL_5;
  }
  v28 = v27;
  static Date._unconditionallyBridgeFromObjectiveC(_:)();

  v29 = *(void (**)(char *, char *, _QWORD *))(v17 + 32);
  v29(v15, v24, v16);
  v30 = v17;
  v31 = *(uint64_t (**)(char *, uint64_t, uint64_t, _QWORD *))(v17 + 56);
  v31(v15, 0, 1, v16);
  v32 = v30;
  v33 = (*(uint64_t (**)(char *, uint64_t, _QWORD *))(v30 + 48))(v15, 1, v16);
  if ((_DWORD)v33 == 1)
  {
    a1 = v57;
LABEL_5:
    Date.init()(v33);
    sub_100007FF0((uint64_t)v15, &qword_100317D58);
    goto LABEL_7;
  }
  v29(v58, v15, v16);
  a1 = v57;
LABEL_7:
  v34 = v56;
  v35 = objc_msgSend(v56, "endsAt");
  if (v35)
  {
    v36 = v35;
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v37 = *(void (**)(char *, char *, _QWORD *))(v32 + 32);
    v37(v12, v24, v16);
    v31(v12, 0, 1, v16);
    v38 = v32;
    v39 = (*(uint64_t (**)(char *, uint64_t, _QWORD *))(v32 + 48))(v12, 1, v16);
    if ((_DWORD)v39 != 1)
    {
      v37(v59, v12, v16);
      goto LABEL_12;
    }
  }
  else
  {
    v39 = v31(v12, 1, 1, v16);
    v38 = v32;
  }
  Date.init()(v39);
  sub_100007FF0((uint64_t)v12, &qword_100317D58);
LABEL_12:
  v60 = _swiftEmptyArrayStorage;
  v40 = objc_msgSend(v34, "readings");
  v41 = sub_10006477C(0, &qword_10031FA58, CTCAServicePlotReading_ptr);
  v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v40, v41);

  if (!((unint64_t)v42 >> 62))
  {
    v43 = *(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v43)
      goto LABEL_14;
LABEL_29:
    swift_bridgeObjectRelease(v42);
LABEL_30:
    sub_1000F9608((unint64_t *)&v60);
    v51 = v60;
    v52 = *(void (**)(uint64_t, char *, _QWORD *))(v38 + 32);
    v52(a1, v58, v16);
    v53 = type metadata accessor for TargetTracks(0);
    v52(a1 + *(int *)(v53 + 20), v59, v16);
    *(_QWORD *)(a1 + *(int *)(v53 + 24)) = v51;
    return;
  }
  if (v42 < 0)
    v50 = v42;
  else
    v50 = v42 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v42);
  v43 = _CocoaArrayWrapper.endIndex.getter(v50);
  swift_bridgeObjectRelease(v42);
  if (!v43)
    goto LABEL_29;
LABEL_14:
  if (v43 >= 1)
  {
    v55 = v38;
    v56 = v16;
    v44 = 0;
    v45 = _swiftEmptyArrayStorage;
    do
    {
      if ((v42 & 0xC000000000000001) != 0)
        v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v44, v42);
      else
        v46 = *(id *)(v42 + 8 * v44 + 32);
      v47 = v46;
      sub_1000F92F0((uint64_t)v7);
      if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
        v45 = (_QWORD *)sub_10017277C(0, v45[2] + 1, 1, (unint64_t)v45);
      v49 = v45[2];
      v48 = v45[3];
      if (v49 >= v48 >> 1)
        v45 = (_QWORD *)sub_10017277C(v48 > 1, v49 + 1, 1, (unint64_t)v45);
      ++v44;
      v45[2] = v49 + 1;
      sub_1000E8D6C((uint64_t)v7, (uint64_t)v45+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(_QWORD *)(v4 + 72) * v49, type metadata accessor for TargetTracks.TimePoint);

    }
    while (v43 != v44);
    swift_bridgeObjectRelease(v42);
    v60 = v45;
    v16 = v56;
    a1 = v57;
    v38 = v55;
    goto LABEL_30;
  }
  __break(1u);
}

Swift::Int sub_1000F9B4C(uint64_t *a1)
{
  uint64_t v1;
  Swift::Int v3;
  Swift::Int result;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  Swift::Int v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Swift::Int v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  Swift::Int v30;
  uint64_t v31;
  uint64_t v32;
  Swift::Int v33;
  uint64_t v34;
  __int128 v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  BOOL v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  char v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  void *v106;
  Swift::Int v107;
  Swift::Int v108;
  uint64_t v109;
  char *__dst;

  v3 = a1[1];
  result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if ((v3 & 0x8000000000000000) == 0)
    {
      if ((unint64_t)v3 < 2)
        return result;
      v89 = 0;
      v90 = *a1;
      v91 = 1;
      while (1)
      {
        v92 = *(_QWORD *)(v90 + 24 * v91);
        v93 = v89;
        do
        {
          v94 = v90 + v93;
          if (*(_QWORD *)(v90 + v93) < v92)
            break;
          if (!v90)
            goto LABEL_142;
          v95 = v90 + v93;
          v96 = *(_OWORD *)(v90 + v93 + 32);
          *(_OWORD *)(v90 + v93 + 24) = *(_OWORD *)v94;
          *(_QWORD *)(v90 + v93 + 40) = *(_QWORD *)(v94 + 16);
          *(_QWORD *)v95 = v92;
          *(_OWORD *)(v95 + 8) = v96;
          v93 -= 24;
        }
        while (v93 != -24);
        ++v91;
        v89 += 24;
        if (v91 == v3)
          return result;
      }
    }
    goto LABEL_138;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
  {
LABEL_147:
    result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
    __break(1u);
    return result;
  }
  v6 = result;
  v104 = a1;
  if (v3 < 2)
  {
    v9 = &_swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage + 32;
    if (v3 != 1)
    {
      v13 = *((_QWORD *)&_swiftEmptyArrayStorage + 2);
      v12 = (char *)&_swiftEmptyArrayStorage;
      goto LABEL_104;
    }
    v106 = &_swiftEmptyArrayStorage;
  }
  else
  {
    v7 = v5 >> 1;
    v8 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for TargetTracks.Target);
    *(_QWORD *)(v8 + 16) = v7;
    v106 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v105 = *a1 + 48;
  v103 = *a1 - 24;
  v12 = (char *)&_swiftEmptyArrayStorage;
  v107 = v6;
  v108 = v3;
  v109 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(_QWORD *)(v11 + 24 * v10);
      v16 = *(_QWORD *)(v11 + 24 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (uint64_t *)(v105 + 24 * v14);
        v18 = v15;
        while (1)
        {
          v20 = *v17;
          v17 += 3;
          v19 = v20;
          if (v16 >= v15 == v18 < v20)
            break;
          ++v10;
          v18 = v19;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v16 >= v15)
      {
        if (v10 < v14)
          goto LABEL_139;
        if (v14 < v10)
        {
          v21 = 24 * v10;
          v22 = 24 * v14;
          v23 = v10;
          v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11)
                goto LABEL_145;
              v25 = v11 + v22;
              v26 = v11 + v21;
              v27 = *(_QWORD *)(v11 + v22);
              v28 = *(_OWORD *)(v11 + v22 + 8);
              v29 = *(_OWORD *)(v11 + v21 - 24);
              *(_QWORD *)(v25 + 16) = *(_QWORD *)(v11 + v21 - 8);
              *(_OWORD *)v25 = v29;
              *(_QWORD *)(v26 - 24) = v27;
              *(_OWORD *)(v26 - 16) = v28;
            }
            ++v24;
            v21 -= 24;
            v22 += 24;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 < v3)
    {
      if (__OFSUB__(v10, v14))
        goto LABEL_137;
      if (v10 - v14 < v6)
      {
        v30 = v14 + v6;
        if (__OFADD__(v14, v6))
          goto LABEL_140;
        if (v30 >= v3)
          v30 = v3;
        if (v30 < v14)
          goto LABEL_141;
        if (v10 != v30)
        {
          v31 = v103 + 24 * v10;
          do
          {
            v32 = *(_QWORD *)(v11 + 24 * v10);
            v33 = v14;
            v34 = v31;
            do
            {
              if (*(_QWORD *)v34 < v32)
                break;
              if (!v11)
                goto LABEL_143;
              v35 = *(_OWORD *)(v34 + 32);
              *(_OWORD *)(v34 + 24) = *(_OWORD *)v34;
              *(_QWORD *)(v34 + 40) = *(_QWORD *)(v34 + 16);
              *(_QWORD *)v34 = v32;
              *(_OWORD *)(v34 + 8) = v35;
              v34 -= 24;
              ++v33;
            }
            while (v10 != v33);
            ++v10;
            v31 += 24;
          }
          while (v10 != v30);
          v10 = v30;
        }
      }
    }
    if (v10 < v14)
    {
LABEL_132:
      __break(1u);
      goto LABEL_133;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0)
      v12 = sub_100191FA8(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v37 = *((_QWORD *)v12 + 2);
    v36 = *((_QWORD *)v12 + 3);
    v13 = v37 + 1;
    v11 = v109;
    if (v37 >= v36 >> 1)
    {
      v86 = sub_100191FA8((char *)(v36 > 1), v37 + 1, 1, v12);
      v11 = v109;
      v12 = v86;
    }
    *((_QWORD *)v12 + 2) = v13;
    v38 = v12 + 32;
    v39 = &v12[16 * v37 + 32];
    *(_QWORD *)v39 = v14;
    *((_QWORD *)v39 + 1) = v10;
    if (v37)
      break;
    v13 = 1;
LABEL_15:
    v6 = v107;
    v3 = v108;
    if (v10 >= v108)
    {
      v9 = v106;
LABEL_104:
      v88 = v12;
      v106 = v9;
      if (v13 < 2)
        goto LABEL_95;
      v97 = *v104;
      while (1)
      {
        v98 = v13 - 2;
        if (v13 < 2)
          break;
        if (!v97)
          goto LABEL_146;
        v87 = v88;
        v99 = *(_QWORD *)&v88[16 * v98 + 32];
        v100 = *(_QWORD *)&v88[16 * v13 + 24];
        sub_1000FAF4C((char *)(v97 + 24 * v99), (char *)(v97 + 24 * *(_QWORD *)&v88[16 * v13 + 16]), v97 + 24 * v100, __dst);
        if (v1)
          goto LABEL_94;
        if (v100 < v99)
          goto LABEL_134;
        if ((swift_isUniquelyReferenced_nonNull_native(v87) & 1) == 0)
          v87 = sub_100192320((uint64_t)v87);
        if (v98 >= *((_QWORD *)v87 + 2))
          goto LABEL_135;
        v101 = &v87[16 * v98 + 32];
        *(_QWORD *)v101 = v99;
        *((_QWORD *)v101 + 1) = v100;
        v102 = *((_QWORD *)v87 + 2);
        if (v13 > v102)
          goto LABEL_136;
        memmove(&v87[16 * v13 + 16], &v87[16 * v13 + 32], 16 * (v102 - v13));
        v88 = v87;
        *((_QWORD *)v87 + 2) = v102 - 1;
        v13 = v102 - 1;
        if (v102 <= 2)
          goto LABEL_95;
      }
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
LABEL_140:
      __break(1u);
LABEL_141:
      __break(1u);
LABEL_142:
      __break(1u);
LABEL_143:
      __break(1u);
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
      goto LABEL_147;
    }
  }
  while (1)
  {
    v40 = v13 - 1;
    if (v13 >= 4)
    {
      v45 = &v38[16 * v13];
      v46 = *((_QWORD *)v45 - 8);
      v47 = *((_QWORD *)v45 - 7);
      v51 = __OFSUB__(v47, v46);
      v48 = v47 - v46;
      if (v51)
        goto LABEL_121;
      v50 = *((_QWORD *)v45 - 6);
      v49 = *((_QWORD *)v45 - 5);
      v51 = __OFSUB__(v49, v50);
      v43 = v49 - v50;
      v44 = v51;
      if (v51)
        goto LABEL_122;
      v52 = v13 - 2;
      v53 = &v38[16 * v13 - 32];
      v55 = *(_QWORD *)v53;
      v54 = *((_QWORD *)v53 + 1);
      v51 = __OFSUB__(v54, v55);
      v56 = v54 - v55;
      if (v51)
        goto LABEL_124;
      v51 = __OFADD__(v43, v56);
      v57 = v43 + v56;
      if (v51)
        goto LABEL_127;
      if (v57 >= v48)
      {
        v75 = &v38[16 * v40];
        v77 = *(_QWORD *)v75;
        v76 = *((_QWORD *)v75 + 1);
        v51 = __OFSUB__(v76, v77);
        v78 = v76 - v77;
        if (v51)
          goto LABEL_131;
        v68 = v43 < v78;
        goto LABEL_83;
      }
    }
    else
    {
      if (v13 != 3)
      {
        v69 = *((_QWORD *)v12 + 4);
        v70 = *((_QWORD *)v12 + 5);
        v51 = __OFSUB__(v70, v69);
        v62 = v70 - v69;
        v63 = v51;
        goto LABEL_77;
      }
      v42 = *((_QWORD *)v12 + 4);
      v41 = *((_QWORD *)v12 + 5);
      v51 = __OFSUB__(v41, v42);
      v43 = v41 - v42;
      v44 = v51;
    }
    if ((v44 & 1) != 0)
      goto LABEL_123;
    v52 = v13 - 2;
    v58 = &v38[16 * v13 - 32];
    v60 = *(_QWORD *)v58;
    v59 = *((_QWORD *)v58 + 1);
    v61 = __OFSUB__(v59, v60);
    v62 = v59 - v60;
    v63 = v61;
    if (v61)
      goto LABEL_126;
    v64 = &v38[16 * v40];
    v66 = *(_QWORD *)v64;
    v65 = *((_QWORD *)v64 + 1);
    v51 = __OFSUB__(v65, v66);
    v67 = v65 - v66;
    if (v51)
      goto LABEL_129;
    if (__OFADD__(v62, v67))
      goto LABEL_130;
    if (v62 + v67 >= v43)
    {
      v68 = v43 < v67;
LABEL_83:
      if (v68)
        v40 = v52;
      goto LABEL_85;
    }
LABEL_77:
    if ((v63 & 1) != 0)
      goto LABEL_125;
    v71 = &v38[16 * v40];
    v73 = *(_QWORD *)v71;
    v72 = *((_QWORD *)v71 + 1);
    v51 = __OFSUB__(v72, v73);
    v74 = v72 - v73;
    if (v51)
      goto LABEL_128;
    if (v74 < v62)
      goto LABEL_15;
LABEL_85:
    v79 = v40 - 1;
    if (v40 - 1 >= v13)
    {
      __break(1u);
LABEL_118:
      __break(1u);
LABEL_119:
      __break(1u);
LABEL_120:
      __break(1u);
LABEL_121:
      __break(1u);
LABEL_122:
      __break(1u);
LABEL_123:
      __break(1u);
LABEL_124:
      __break(1u);
LABEL_125:
      __break(1u);
LABEL_126:
      __break(1u);
LABEL_127:
      __break(1u);
LABEL_128:
      __break(1u);
LABEL_129:
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
      goto LABEL_132;
    }
    if (!v11)
      goto LABEL_144;
    v80 = v12;
    v81 = &v38[16 * v79];
    v82 = *(_QWORD *)v81;
    v83 = &v38[16 * v40];
    v84 = *((_QWORD *)v83 + 1);
    sub_1000FAF4C((char *)(v11 + 24 * *(_QWORD *)v81), (char *)(v11 + 24 * *(_QWORD *)v83), v11 + 24 * v84, __dst);
    if (v1)
      break;
    if (v84 < v82)
      goto LABEL_118;
    if (v40 > *((_QWORD *)v80 + 2))
      goto LABEL_119;
    *(_QWORD *)v81 = v82;
    *(_QWORD *)&v38[16 * v79 + 8] = v84;
    v85 = *((_QWORD *)v80 + 2);
    if (v40 >= v85)
      goto LABEL_120;
    v12 = v80;
    v13 = v85 - 1;
    memmove(&v38[16 * v40], v83 + 16, 16 * (v85 - 1 - v40));
    *((_QWORD *)v80 + 2) = v85 - 1;
    v11 = v109;
    if (v85 <= 2)
      goto LABEL_15;
  }
  v87 = v80;
LABEL_94:
  v88 = v87;
LABEL_95:
  swift_bridgeObjectRelease(v88);
  *((_QWORD *)v106 + 2) = 0;
  return swift_bridgeObjectRelease(v106);
}

Swift::Int sub_1000FA260(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Swift::Int v16;
  Swift::Int result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  Swift::Int v25;
  Swift::Int v26;
  Swift::Int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  Swift::Int v32;
  Swift::Int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  Swift::Int v40;
  uint64_t v41;
  Swift::Int v42;
  uint64_t v43;
  Swift::Int v44;
  unint64_t v45;
  Swift::Int v46;
  Swift::Int v47;
  uint64_t v48;
  uint64_t v49;
  Swift::Int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  unint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  BOOL v85;
  uint64_t v86;
  char v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  Swift::Int v119;
  char *v120;
  uint64_t v121;
  Swift::Int v122;
  uint64_t v123;
  Swift::Int v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  Swift::Int v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;

  v2 = v1;
  v127 = type metadata accessor for TargetTracks.TimePoint(0);
  v4 = *(_QWORD *)(v127 - 8);
  v6 = __chkstk_darwin(v127, v5);
  v123 = (uint64_t)&v117 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6, v8);
  v133 = (uint64_t)&v117 - v10;
  v12 = __chkstk_darwin(v9, v11);
  v130 = (uint64_t)&v117 - v13;
  __chkstk_darwin(v12, v14);
  v129 = (uint64_t)&v117 - v15;
  v16 = a1[1];
  result = _minimumMergeRunLength(_:)(v16);
  if (result >= v16)
  {
    if (v16 < 0)
      goto LABEL_141;
    if (v16)
      return sub_1000FACD0(0, v16, 1, a1);
  }
  else
  {
    if (v16 >= 0)
      v18 = v16;
    else
      v18 = v16 + 1;
    if (v16 < -1)
    {
LABEL_149:
      result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
      __break(1u);
      return result;
    }
    v126 = v4;
    v119 = result;
    if (v16 >= 2)
    {
      v19 = v18 >> 1;
      v20 = static Array._allocateBufferUninitialized(minimumCapacity:)(v18 >> 1, v127);
      *(_QWORD *)(v20 + 16) = v19;
      v21 = *(unsigned __int8 *)(v4 + 80);
      v118 = (_QWORD *)v20;
      v125 = v20 + ((v21 + 32) & ~v21);
      goto LABEL_12;
    }
    v22 = (char *)_swiftEmptyArrayStorage;
    v125 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    v118 = _swiftEmptyArrayStorage;
    if (v16 == 1)
    {
LABEL_12:
      v23 = 0;
      v22 = (char *)_swiftEmptyArrayStorage;
      v131 = a1;
      while (1)
      {
        v25 = v23;
        v26 = v23 + 1;
        v124 = v23;
        if (v23 + 1 >= v16)
        {
LABEL_39:
          if (v26 >= v16)
            goto LABEL_58;
          goto LABEL_40;
        }
        v27 = *a1;
        v28 = *(_QWORD *)(v126 + 72);
        v29 = v129;
        sub_1000E1F30(v27 + v28 * v26, v129, type metadata accessor for TargetTracks.TimePoint);
        v135 = v16;
        v30 = v130;
        sub_1000E1F30(v27 + v28 * v25, v130, type metadata accessor for TargetTracks.TimePoint);
        type metadata accessor for Date(0);
        v132 = sub_1000052EC((unint64_t *)&qword_10031FA60, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        LODWORD(v134) = dispatch thunk of static Comparable.< infix(_:_:)(v30, v29);
        v31 = v30;
        v16 = v135;
        sub_10000AFFC(v31, type metadata accessor for TargetTracks.TimePoint);
        sub_10000AFFC(v29, type metadata accessor for TargetTracks.TimePoint);
        v122 = v27;
        if (v25 + 2 >= v16)
          break;
        v120 = v22;
        v121 = v2;
        v128 = v28 * v26;
        v32 = v27;
        v33 = v25 + 2;
        v34 = v28 * (v25 + 2);
        do
        {
          v35 = v129;
          sub_1000E1F30(v32 + v34, v129, type metadata accessor for TargetTracks.TimePoint);
          v36 = v130;
          sub_1000E1F30(v32 + v128, v130, type metadata accessor for TargetTracks.TimePoint);
          v37 = dispatch thunk of static Comparable.< infix(_:_:)(v36, v35);
          sub_10000AFFC(v36, type metadata accessor for TargetTracks.TimePoint);
          sub_10000AFFC(v35, type metadata accessor for TargetTracks.TimePoint);
          if (((v134 ^ v37) & 1) != 0)
          {
            v22 = v120;
            v2 = v121;
            v26 = v33;
            v25 = v124;
            v16 = v135;
            if ((v134 & 1) == 0)
              goto LABEL_26;
            goto LABEL_23;
          }
          v32 += v28;
          ++v33;
        }
        while (v135 != v33);
        v16 = v135;
        v26 = v135;
        v22 = v120;
        v2 = v121;
        v25 = v124;
        if ((v134 & 1) != 0)
          goto LABEL_23;
LABEL_26:
        if (v26 < v25)
          goto LABEL_142;
        if (v25 >= v26)
        {
          a1 = v131;
          goto LABEL_39;
        }
        v120 = v22;
        v121 = v2;
        v38 = 0;
        v39 = v28 * (v26 - 1);
        v40 = v26 * v28;
        v41 = v25 * v28;
        do
        {
          if (v25 != v26 + v38 - 1)
          {
            v44 = v122;
            if (!v122)
              goto LABEL_147;
            v45 = v122 + v41;
            v134 = v122 + v39;
            sub_1000E8D6C(v122 + v41, v123, type metadata accessor for TargetTracks.TimePoint);
            if (v41 < v39 || v45 >= v44 + v40)
            {
              v42 = v44 + v41;
              v43 = v134;
              swift_arrayInitWithTakeFrontToBack(v42, v134, 1, v127);
            }
            else
            {
              v43 = v134;
              if (v41 != v39)
                swift_arrayInitWithTakeBackToFront(v45, v134);
            }
            sub_1000E8D6C(v123, v43, type metadata accessor for TargetTracks.TimePoint);
          }
          ++v25;
          --v38;
          v39 -= v28;
          v40 -= v28;
          v41 += v28;
        }
        while (v25 < v26 + v38);
        v22 = v120;
        v2 = v121;
        a1 = v131;
        v25 = v124;
        v16 = v135;
        if (v26 < v135)
          goto LABEL_40;
LABEL_58:
        if (v26 < v25)
          goto LABEL_135;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
        v132 = v26;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          v22 = sub_100191FA8(0, *((_QWORD *)v22 + 2) + 1, 1, v22);
        v59 = *((_QWORD *)v22 + 2);
        v58 = *((_QWORD *)v22 + 3);
        v24 = v59 + 1;
        if (v59 >= v58 >> 1)
          v22 = sub_100191FA8((char *)(v58 > 1), v59 + 1, 1, v22);
        v60 = v2;
        *((_QWORD *)v22 + 2) = v24;
        v61 = v22 + 32;
        v62 = &v22[16 * v59 + 32];
        v63 = v132;
        *(_QWORD *)v62 = v25;
        *((_QWORD *)v62 + 1) = v63;
        if (v59)
        {
          while (1)
          {
            v64 = v24 - 1;
            if (v24 >= 4)
            {
              v69 = &v61[16 * v24];
              v70 = *((_QWORD *)v69 - 8);
              v71 = *((_QWORD *)v69 - 7);
              v75 = __OFSUB__(v71, v70);
              v72 = v71 - v70;
              if (v75)
                goto LABEL_124;
              v74 = *((_QWORD *)v69 - 6);
              v73 = *((_QWORD *)v69 - 5);
              v75 = __OFSUB__(v73, v74);
              v67 = v73 - v74;
              v68 = v75;
              if (v75)
                goto LABEL_125;
              v76 = v24 - 2;
              v77 = &v61[16 * v24 - 32];
              v79 = *(_QWORD *)v77;
              v78 = *((_QWORD *)v77 + 1);
              v75 = __OFSUB__(v78, v79);
              v80 = v78 - v79;
              if (v75)
                goto LABEL_127;
              v75 = __OFADD__(v67, v80);
              v81 = v67 + v80;
              if (v75)
                goto LABEL_130;
              if (v81 >= v72)
              {
                v99 = &v61[16 * v64];
                v101 = *(_QWORD *)v99;
                v100 = *((_QWORD *)v99 + 1);
                v75 = __OFSUB__(v100, v101);
                v102 = v100 - v101;
                if (v75)
                  goto LABEL_134;
                v92 = v67 < v102;
                goto LABEL_95;
              }
            }
            else
            {
              if (v24 != 3)
              {
                v93 = *((_QWORD *)v22 + 4);
                v94 = *((_QWORD *)v22 + 5);
                v75 = __OFSUB__(v94, v93);
                v86 = v94 - v93;
                v87 = v75;
                goto LABEL_89;
              }
              v66 = *((_QWORD *)v22 + 4);
              v65 = *((_QWORD *)v22 + 5);
              v75 = __OFSUB__(v65, v66);
              v67 = v65 - v66;
              v68 = v75;
            }
            if ((v68 & 1) != 0)
              goto LABEL_126;
            v76 = v24 - 2;
            v82 = &v61[16 * v24 - 32];
            v84 = *(_QWORD *)v82;
            v83 = *((_QWORD *)v82 + 1);
            v85 = __OFSUB__(v83, v84);
            v86 = v83 - v84;
            v87 = v85;
            if (v85)
              goto LABEL_129;
            v88 = &v61[16 * v64];
            v90 = *(_QWORD *)v88;
            v89 = *((_QWORD *)v88 + 1);
            v75 = __OFSUB__(v89, v90);
            v91 = v89 - v90;
            if (v75)
              goto LABEL_132;
            if (__OFADD__(v86, v91))
              goto LABEL_133;
            if (v86 + v91 >= v67)
            {
              v92 = v67 < v91;
LABEL_95:
              if (v92)
                v64 = v76;
              goto LABEL_97;
            }
LABEL_89:
            if ((v87 & 1) != 0)
              goto LABEL_128;
            v95 = &v61[16 * v64];
            v97 = *(_QWORD *)v95;
            v96 = *((_QWORD *)v95 + 1);
            v75 = __OFSUB__(v96, v97);
            v98 = v96 - v97;
            if (v75)
              goto LABEL_131;
            if (v98 < v86)
              goto LABEL_14;
LABEL_97:
            v103 = v64 - 1;
            if (v64 - 1 >= v24)
            {
              __break(1u);
LABEL_121:
              __break(1u);
LABEL_122:
              __break(1u);
LABEL_123:
              __break(1u);
LABEL_124:
              __break(1u);
LABEL_125:
              __break(1u);
LABEL_126:
              __break(1u);
LABEL_127:
              __break(1u);
LABEL_128:
              __break(1u);
LABEL_129:
              __break(1u);
LABEL_130:
              __break(1u);
LABEL_131:
              __break(1u);
LABEL_132:
              __break(1u);
LABEL_133:
              __break(1u);
LABEL_134:
              __break(1u);
LABEL_135:
              __break(1u);
LABEL_136:
              __break(1u);
LABEL_137:
              __break(1u);
LABEL_138:
              __break(1u);
LABEL_139:
              __break(1u);
LABEL_140:
              __break(1u);
LABEL_141:
              __break(1u);
LABEL_142:
              __break(1u);
LABEL_143:
              __break(1u);
              goto LABEL_144;
            }
            if (!*v131)
              goto LABEL_146;
            v104 = v22;
            v105 = &v61[16 * v103];
            v106 = *(_QWORD *)v105;
            v107 = &v61[16 * v64];
            v108 = *((_QWORD *)v107 + 1);
            sub_1000FB200(*v131 + *(_QWORD *)(v126 + 72) * *(_QWORD *)v105, *v131 + *(_QWORD *)(v126 + 72) * *(_QWORD *)v107, *v131 + *(_QWORD *)(v126 + 72) * v108, v125);
            if (v60)
              goto LABEL_118;
            if (v108 < v106)
              goto LABEL_121;
            if (v64 > *((_QWORD *)v104 + 2))
              goto LABEL_122;
            *(_QWORD *)v105 = v106;
            *(_QWORD *)&v61[16 * v103 + 8] = v108;
            v109 = *((_QWORD *)v104 + 2);
            if (v64 >= v109)
              goto LABEL_123;
            v22 = v104;
            v24 = v109 - 1;
            memmove(&v61[16 * v64], v107 + 16, 16 * (v109 - 1 - v64));
            *((_QWORD *)v104 + 2) = v109 - 1;
            if (v109 <= 2)
              goto LABEL_14;
          }
        }
        v24 = 1;
LABEL_14:
        a1 = v131;
        v23 = v132;
        v16 = v131[1];
        v2 = v60;
        if (v132 >= v16)
          goto LABEL_107;
      }
      v26 = v25 + 2;
      if ((v134 & 1) == 0)
        goto LABEL_26;
LABEL_23:
      a1 = v131;
      if (v26 >= v16)
        goto LABEL_58;
LABEL_40:
      if (__OFSUB__(v26, v25))
        goto LABEL_140;
      if (v26 - v25 >= v119)
        goto LABEL_58;
      if (__OFADD__(v25, v119))
        goto LABEL_143;
      if (v25 + v119 < v16)
        v16 = v25 + v119;
      if (v16 >= v25)
      {
        if (v26 != v16)
        {
          v120 = v22;
          v121 = v2;
          type metadata accessor for Date(0);
          v46 = *(_QWORD *)(v126 + 72);
          v135 = v46 * (v26 - 1);
          v132 = v26;
          v128 = v46;
          v47 = v26 * v46;
          v122 = v16;
          do
          {
            v48 = 0;
            while (1)
            {
              v134 = v25;
              v49 = *a1;
              v50 = v47;
              v51 = v47 + v48 + *a1;
              v52 = v129;
              sub_1000E1F30(v51, v129, type metadata accessor for TargetTracks.TimePoint);
              v53 = v130;
              sub_1000E1F30(v135 + v48 + v49, v130, type metadata accessor for TargetTracks.TimePoint);
              sub_1000052EC((unint64_t *)&qword_10031FA60, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
              LOBYTE(v49) = dispatch thunk of static Comparable.< infix(_:_:)(v53, v52);
              sub_10000AFFC(v53, type metadata accessor for TargetTracks.TimePoint);
              sub_10000AFFC(v52, type metadata accessor for TargetTracks.TimePoint);
              if ((v49 & 1) != 0)
                break;
              v54 = *a1;
              if (!*a1)
                goto LABEL_145;
              v47 = v50;
              v55 = v54 + v50 + v48;
              v56 = v54 + v135 + v48;
              sub_1000E8D6C(v55, v133, type metadata accessor for TargetTracks.TimePoint);
              swift_arrayInitWithTakeFrontToBack(v55, v56, 1, v127);
              sub_1000E8D6C(v133, v56, type metadata accessor for TargetTracks.TimePoint);
              v48 -= v128;
              v25 = v134 + 1;
              a1 = v131;
              if (v132 == v134 + 1)
                goto LABEL_49;
            }
            v47 = v50;
LABEL_49:
            v135 += v128;
            v47 += v128;
            ++v132;
            v25 = v124;
          }
          while (v132 != v122);
          v26 = v122;
          v22 = v120;
          v2 = v121;
        }
        goto LABEL_58;
      }
LABEL_144:
      __break(1u);
LABEL_145:
      __break(1u);
LABEL_146:
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
      goto LABEL_149;
    }
    v24 = _swiftEmptyArrayStorage[2];
LABEL_107:
    v104 = v22;
    if (v24 >= 2)
    {
      v110 = *a1;
      do
      {
        v111 = v24 - 2;
        if (v24 < 2)
          goto LABEL_136;
        if (!v110)
          goto LABEL_148;
        v112 = *(_QWORD *)&v104[16 * v111 + 32];
        v113 = *(_QWORD *)&v104[16 * v24 + 24];
        sub_1000FB200(v110 + *(_QWORD *)(v126 + 72) * v112, v110 + *(_QWORD *)(v126 + 72) * *(_QWORD *)&v104[16 * v24 + 16], v110 + *(_QWORD *)(v126 + 72) * v113, v125);
        if (v2)
          break;
        if (v113 < v112)
          goto LABEL_137;
        if ((swift_isUniquelyReferenced_nonNull_native(v104) & 1) == 0)
          v104 = sub_100192320((uint64_t)v104);
        if (v111 >= *((_QWORD *)v104 + 2))
          goto LABEL_138;
        v114 = &v104[16 * v111 + 32];
        *(_QWORD *)v114 = v112;
        *((_QWORD *)v114 + 1) = v113;
        v115 = *((_QWORD *)v104 + 2);
        if (v24 > v115)
          goto LABEL_139;
        memmove(&v104[16 * v24 + 16], &v104[16 * v24 + 32], 16 * (v115 - v24));
        *((_QWORD *)v104 + 2) = v115 - 1;
        v24 = v115 - 1;
      }
      while (v115 > 2);
    }
LABEL_118:
    swift_bridgeObjectRelease(v104);
    v116 = v118;
    v118[2] = 0;
    return swift_bridgeObjectRelease(v116);
  }
  return result;
}

uint64_t sub_1000FACD0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v34 = a1;
  v35 = type metadata accessor for TargetTracks.TimePoint(0);
  v7 = *(_QWORD *)(v35 - 8);
  v9 = __chkstk_darwin(v35, v8);
  v43 = (uint64_t)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9, v11);
  v39 = (uint64_t)&v32 - v13;
  result = __chkstk_darwin(v12, v14);
  v38 = (uint64_t)&v32 - v16;
  v42 = a3;
  v33 = a2;
  if (a3 != a2)
  {
    v17 = type metadata accessor for Date(0);
    v36 = a4;
    v37 = v17;
    v18 = *(_QWORD *)(v7 + 72);
    v19 = v18 * (v42 - 1);
    v40 = v18;
    v44 = v18 * v42;
LABEL_5:
    v20 = 0;
    v21 = v34;
    v41 = v19;
    while (1)
    {
      v22 = *a4;
      v23 = v44 + v20 + *a4;
      v24 = v38;
      sub_1000E1F30(v23, v38, type metadata accessor for TargetTracks.TimePoint);
      v25 = v19 + v20 + v22;
      v26 = v39;
      sub_1000E1F30(v25, v39, type metadata accessor for TargetTracks.TimePoint);
      sub_1000052EC((unint64_t *)&qword_10031FA60, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      LOBYTE(v22) = dispatch thunk of static Comparable.< infix(_:_:)(v26, v24);
      v27 = v26;
      v19 = v41;
      sub_10000AFFC(v27, type metadata accessor for TargetTracks.TimePoint);
      v28 = v24;
      a4 = v36;
      result = sub_10000AFFC(v28, type metadata accessor for TargetTracks.TimePoint);
      if ((v22 & 1) != 0)
      {
LABEL_4:
        v19 += v40;
        v44 += v40;
        if (++v42 == v33)
          return result;
        goto LABEL_5;
      }
      v29 = *a4;
      if (!*a4)
        break;
      v30 = v29 + v44 + v20;
      v31 = v29 + v19 + v20;
      sub_1000E8D6C(v30, v43, type metadata accessor for TargetTracks.TimePoint);
      swift_arrayInitWithTakeFrontToBack(v30, v31, 1, v35);
      result = sub_1000E8D6C(v43, v31, type metadata accessor for TargetTracks.TimePoint);
      v20 -= v40;
      if (v42 == ++v21)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1000FAF4C(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  char *v14;
  __int128 v15;
  char *v16;
  unint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  uint64_t result;
  char *v24;
  char *v25;
  char *v26;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 24;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 24;
  v26 = __src;
  v25 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -23)
    {
      if (__dst != a2 || &a2[24 * v11] <= __dst)
        memmove(__dst, a2, 24 * v11);
      v16 = &v4[24 * v11];
      v24 = v16;
      v26 = v6;
      if (v7 < v6 && v10 >= 24)
      {
        v17 = a3 - 24;
        v18 = v6;
        while (1)
        {
          v19 = (char *)(v17 + 24);
          v20 = *((_QWORD *)v18 - 3);
          v18 -= 24;
          if (v20 >= *((_QWORD *)v16 - 3))
          {
            if (v19 != v6 || v17 >= (unint64_t)v6)
            {
              v22 = *(_OWORD *)v18;
              *(_QWORD *)(v17 + 16) = *((_QWORD *)v18 + 2);
              *(_OWORD *)v17 = v22;
            }
            v26 = v18;
            if (v18 <= v7)
              goto LABEL_38;
          }
          else
          {
            v24 = v16 - 24;
            if (v19 < v16 || v17 >= (unint64_t)v16 || v19 != v16)
            {
              v21 = *(_OWORD *)(v16 - 24);
              *(_QWORD *)(v17 + 16) = *((_QWORD *)v16 - 1);
              *(_OWORD *)v17 = v21;
            }
            v18 = v6;
            v16 -= 24;
            if (v6 <= v7)
              goto LABEL_38;
          }
          v17 -= 24;
          v6 = v18;
          if (v16 <= v4)
            goto LABEL_38;
        }
      }
      goto LABEL_38;
    }
  }
  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst)
      memmove(__dst, __src, 24 * v9);
    v12 = &v4[24 * v9];
    v24 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      do
      {
        if (*(_QWORD *)v4 >= *(_QWORD *)v6)
        {
          v14 = v6 + 24;
          if (v7 < v6 || v7 >= v14 || v7 != v6)
          {
            v15 = *(_OWORD *)v6;
            *((_QWORD *)v7 + 2) = *((_QWORD *)v6 + 2);
            *(_OWORD *)v7 = v15;
          }
        }
        else
        {
          if (v7 != v4)
          {
            v13 = *(_OWORD *)v4;
            *((_QWORD *)v7 + 2) = *((_QWORD *)v4 + 2);
            *(_OWORD *)v7 = v13;
          }
          v4 += 24;
          v25 = v4;
          v14 = v6;
        }
        v7 += 24;
        if (v4 >= v12)
          break;
        v6 = v14;
      }
      while ((unint64_t)v14 < a3);
      v26 = v7;
    }
LABEL_38:
    sub_1001920A0((void **)&v26, (const void **)&v25, &v24);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000FB200(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t result;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;

  v46 = type metadata accessor for TargetTracks.TimePoint(0);
  v9 = __chkstk_darwin(v46, v8);
  v48 = (uint64_t)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  v47 = (uint64_t)&v42 - v12;
  v14 = *(_QWORD *)(v13 + 72);
  if (!v14)
  {
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  if (a2 - a1 == 0x8000000000000000 && v14 == -1)
    goto LABEL_64;
  v15 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v14 == -1)
    goto LABEL_65;
  v16 = (uint64_t)(a2 - a1) / v14;
  v51 = a1;
  v50 = a4;
  v17 = v15 / v14;
  if (v16 >= v15 / v14)
  {
    if ((v17 & 0x8000000000000000) == 0)
    {
      v19 = v17 * v14;
      if (a4 < a2 || a2 + v19 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack(a4, a2, v17, v46);
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront(a4, a2);
      }
      v27 = a4 + v19;
      v49 = a4 + v19;
      v51 = a2;
      if (v19 >= 1 && a1 < a2)
      {
        v44 = type metadata accessor for Date(0);
        v45 = a1;
        v30 = -v14;
        v43 = a4;
        v31 = v48;
        do
        {
          v32 = a3 + v30;
          v33 = a3;
          v34 = v47;
          sub_1000E1F30(v27 + v30, v47, type metadata accessor for TargetTracks.TimePoint);
          v35 = a2 + v30;
          sub_1000E1F30(a2 + v30, v31, type metadata accessor for TargetTracks.TimePoint);
          sub_1000052EC((unint64_t *)&qword_10031FA60, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v36 = dispatch thunk of static Comparable.< infix(_:_:)(v31, v34);
          sub_10000AFFC(v31, type metadata accessor for TargetTracks.TimePoint);
          sub_10000AFFC(v34, type metadata accessor for TargetTracks.TimePoint);
          if ((v36 & 1) != 0)
          {
            v37 = v49;
            v38 = v49 + v30;
            v49 += v30;
            if (v33 < v37 || v32 >= v37)
            {
              swift_arrayInitWithTakeFrontToBack(v32, v38, 1, v46);
              v35 = a2;
              v40 = v45;
              v41 = v43;
            }
            else
            {
              v39 = v33 == v37;
              v40 = v45;
              v41 = v43;
              if (!v39)
                swift_arrayInitWithTakeBackToFront(v32, v38);
              v35 = a2;
            }
          }
          else
          {
            if (v33 < a2 || v32 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack(v32, a2 + v30, 1, v46);
              v40 = v45;
              v41 = v43;
            }
            else
            {
              v39 = v33 == a2;
              v40 = v45;
              v41 = v43;
              if (!v39)
                swift_arrayInitWithTakeBackToFront(v32, a2 + v30);
            }
            v51 += v30;
          }
          v27 = v49;
          if (v49 <= v41)
            break;
          a2 = v35;
          a3 = v32;
        }
        while (v35 > v40);
      }
      goto LABEL_45;
    }
  }
  else if ((v16 & 0x8000000000000000) == 0)
  {
    v18 = v16 * v14;
    if (a4 < a1 || a1 + v18 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack(a4, a1, v16, v46);
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront(a4, a1);
    }
    v45 = a4 + v18;
    v49 = a4 + v18;
    if (v18 >= 1 && a2 < a3)
    {
      type metadata accessor for Date(0);
      v21 = v47;
      do
      {
        sub_1000E1F30(a2, v21, type metadata accessor for TargetTracks.TimePoint);
        v22 = v48;
        sub_1000E1F30(a4, v48, type metadata accessor for TargetTracks.TimePoint);
        sub_1000052EC((unint64_t *)&qword_10031FA60, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v23 = dispatch thunk of static Comparable.< infix(_:_:)(v22, v21);
        sub_10000AFFC(v22, type metadata accessor for TargetTracks.TimePoint);
        sub_10000AFFC(v21, type metadata accessor for TargetTracks.TimePoint);
        v24 = v51;
        if ((v23 & 1) != 0)
        {
          v25 = v50 + v14;
          if (v51 < v50 || v51 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack(v51, v50, 1, v46);
          }
          else if (v51 != v50)
          {
            swift_arrayInitWithTakeBackToFront(v51, v50);
          }
          v50 = v25;
          v26 = a2;
        }
        else
        {
          v26 = a2 + v14;
          if (v51 < a2 || v51 >= v26)
          {
            swift_arrayInitWithTakeFrontToBack(v51, a2, 1, v46);
          }
          else if (v51 == a2)
          {
            v24 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront(v51, a2);
          }
        }
        v51 = v24 + v14;
        a4 = v50;
        if (v50 >= v45)
          break;
        a2 = v26;
      }
      while (v26 < a3);
    }
LABEL_45:
    sub_10019215C(&v51, &v50, (uint64_t *)&v49);
    return 1;
  }
LABEL_66:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

