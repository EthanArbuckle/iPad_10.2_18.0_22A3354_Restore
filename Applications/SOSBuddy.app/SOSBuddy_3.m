unint64_t sub_10017DECC(unint64_t result, uint64_t a2)
{
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int128 v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  _QWORD v24[9];

  v3 = result;
  v4 = a2 + 64;
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(a2 + 64 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    result = _HashTable.previousHole(before:)(result, a2 + 64, ~v5);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v8 = (result + 1) & v7;
      do
      {
        v10 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 48) + v6);
        Hasher.init(_seed:)(v24, *(_QWORD *)(a2 + 40));
        Hasher._combine(_:)(v10);
        result = Hasher._finalize()();
        v11 = result & v7;
        if (v3 >= (uint64_t)v8)
        {
          if (v11 < v8)
            goto LABEL_5;
        }
        else if (v11 >= v8)
        {
          goto LABEL_11;
        }
        if (v3 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(a2 + 48);
          v13 = (_BYTE *)(v12 + v3);
          v14 = (_BYTE *)(v12 + v6);
          if (v3 != v6 || v13 >= v14 + 1)
            *v13 = *v14;
          v15 = *(_QWORD *)(a2 + 56);
          v16 = (_OWORD *)(v15 + 32 * v3);
          v17 = (_OWORD *)(v15 + 32 * v6);
          if (v3 != v6 || (v3 = v6, v16 >= v17 + 2))
          {
            v9 = v17[1];
            *v16 = *v17;
            v16[1] = v9;
            v3 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    v18 = (uint64_t *)(v4 + 8 * ((unint64_t)v3 >> 6));
    v19 = *v18;
    v20 = (-1 << v3) - 1;
  }
  else
  {
    v18 = (uint64_t *)(v4 + 8 * (result >> 6));
    v20 = *v18;
    v19 = (-1 << result) - 1;
  }
  *v18 = v20 & v19;
  v21 = *(_QWORD *)(a2 + 16);
  v22 = __OFSUB__(v21, 1);
  v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v23;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

unint64_t sub_10017E084(int64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *v26;
  __int128 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, unint64_t, uint64_t);
  unint64_t v36;
  uint64_t v37;

  v4 = type metadata accessor for CodingUserInfoKey(0);
  v37 = *(_QWORD *)(v4 - 8);
  result = __chkstk_darwin();
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a2 + 64;
  v9 = -1 << *(_BYTE *)(a2 + 32);
  v10 = (a1 + 1) & ~v9;
  if (((1 << v10) & *(_QWORD *)(a2 + 64 + 8 * (v10 >> 6))) != 0)
  {
    v11 = ~v9;
    result = _HashTable.previousHole(before:)(a1, a2 + 64, ~v9);
    if ((*(_QWORD *)(v8 + 8 * (v10 >> 6)) & (1 << v10)) != 0)
    {
      v36 = (result + 1) & v11;
      v12 = *(_QWORD *)(v37 + 72);
      v35 = *(void (**)(char *, unint64_t, uint64_t))(v37 + 16);
      v13 = v11;
      do
      {
        v14 = v8;
        v15 = v12;
        v16 = v12 * v10;
        v17 = v13;
        v35(v7, *(_QWORD *)(a2 + 48) + v12 * v10, v4);
        v18 = dispatch thunk of Hashable._rawHashValue(seed:)(*(_QWORD *)(a2 + 40), v4, &protocol witness table for CodingUserInfoKey);
        result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v7, v4);
        v13 = v17;
        v19 = v18 & v17;
        if (a1 >= (uint64_t)v36)
        {
          if (v19 >= v36 && a1 >= (uint64_t)v19)
          {
LABEL_16:
            v22 = *(_QWORD *)(a2 + 48);
            result = v22 + v15 * a1;
            v23 = v22 + v16;
            v8 = v14;
            if (v15 * a1 < v16 || (v12 = v15, result >= v23 + v15))
            {
              result = swift_arrayInitWithTakeFrontToBack(result, v23, 1, v4);
LABEL_21:
              v12 = v15;
              v13 = v17;
            }
            else if (v15 * a1 != v16)
            {
              result = swift_arrayInitWithTakeBackToFront();
              goto LABEL_21;
            }
            v24 = *(_QWORD *)(a2 + 56);
            v25 = (_OWORD *)(v24 + 32 * a1);
            v26 = (_OWORD *)(v24 + 32 * v10);
            if (a1 != v10 || (a1 = v10, v25 >= v26 + 2))
            {
              v27 = v26[1];
              *v25 = *v26;
              v25[1] = v27;
              a1 = v10;
            }
            goto LABEL_5;
          }
        }
        else if (v19 >= v36 || a1 >= (uint64_t)v19)
        {
          goto LABEL_16;
        }
        v8 = v14;
        v12 = v15;
LABEL_5:
        v10 = (v10 + 1) & v13;
      }
      while (((*(_QWORD *)(v8 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0);
    }
    v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v29 = *v28;
    v30 = (-1 << a1) - 1;
  }
  else
  {
    v28 = (uint64_t *)(v8 + 8 * ((unint64_t)a1 >> 6));
    v30 = *v28;
    v29 = (-1 << a1) - 1;
  }
  *v28 = v30 & v29;
  v31 = *(_QWORD *)(a2 + 16);
  v32 = __OFSUB__(v31, 1);
  v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(a2 + 16) = v33;
    ++*(_DWORD *)(a2 + 36);
  }
  return result;
}

uint64_t sub_10017E308(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017E420(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10017E324(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017E5A8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017E340(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017E714(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017E35C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017E87C(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017E378(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017EA00(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017E394(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017EB68(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017E3B0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017ECCC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017E3CC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_10017EE50(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_10017E3E8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017F038(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017E404(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_10017F1B8(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_10017E420(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003DB8(&qword_1003214A0);
    v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    v11[2] = v8;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    v11 = _swiftEmptyArrayStorage;
  }
  v14 = (unint64_t)(v11 + 4);
  v15 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v8)
      memmove(v11 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v15 >= v14 + 16 * v8 || v14 >= v15 + 16 * v8)
  {
    sub_100003DB8(&qword_100318260);
    swift_arrayInitWithCopy(v11 + 4);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017E5A8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003DB8(&qword_100323D30);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017E714(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003DB8((uint64_t *)&unk_10031B300);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017E87C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003DB8(&qword_100323D60);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017EA00(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003DB8(&qword_100323D70);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017EB68(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  size_t v16;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003DB8(&qword_100323BB0);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  v16 = 16 * v8;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[v16])
      memmove(v14, v15, v16);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[v16] || v14 >= &v15[v16])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017ECCC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003DB8(&qword_100322CD0);
    v11 = (char *)swift_allocObject(v10, 88 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 88);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[88 * v8])
      memmove(v13, v14, 88 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[88 * v8] || v13 >= &v14[88 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017EE50(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  size_t v16;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (!v9)
  {
    v15 = _swiftEmptyArrayStorage;
    goto LABEL_19;
  }
  v10 = sub_100003DB8(&qword_10031FA80);
  v11 = *(_QWORD *)(sub_100003DB8(&qword_100317D58) - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = *(unsigned __int8 *)(v11 + 80);
  v14 = (v13 + 32) & ~v13;
  v15 = (_QWORD *)swift_allocObject(v10, v14 + v12 * v9, v13 | 7);
  v16 = j__malloc_size_0(v15);
  if (!v12)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v16 - v14 == 0x8000000000000000 && v12 == -1)
    goto LABEL_34;
  v15[2] = v8;
  v15[3] = 2 * ((uint64_t)(v16 - v14) / v12);
LABEL_19:
  v18 = sub_100003DB8(&qword_100317D58);
  v19 = *(_QWORD *)(v18 - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v15 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v15 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v8])
    {
      swift_arrayInitWithTakeFrontToBack(v21, v22, v8, v18);
    }
    else if (v15 != a4)
    {
      swift_arrayInitWithTakeBackToFront(v21, v22);
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v8;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy(v21);
LABEL_32:
    swift_release(a4);
    return (uint64_t)v15;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017F038(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003DB8(&qword_100323D68);
    v11 = (char *)swift_allocObject(v10, 40 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[40 * v8])
      memmove(v13, v14, 40 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[40 * v8] || v13 >= &v14[40 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10017F1B8(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003DB8(&qword_100323D08);
    v11 = (char *)swift_allocObject(v10, 24 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[24 * v8])
      memmove(v13, v14, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[24 * v8] || v13 >= &v14[24 * v8])
  {
    swift_arrayInitWithCopy(v13);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

unsigned __int8 *sub_10017F33C(uint64_t a1, uint64_t a2, int64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  uint64_t v15;

  v14 = a1;
  v15 = a2;
  swift_bridgeObjectRetain(a2);
  v4 = String.init<A>(_:)(&v14, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v6 = v4;
  v7 = v5;
  if ((v5 & 0x1000000000000000) == 0)
  {
    if ((v5 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v9 = HIBYTE(v7) & 0xF;
    v14 = v6;
    v15 = v7 & 0xFFFFFFFFFFFFFFLL;
    v8 = (unsigned __int8 *)&v14;
    goto LABEL_7;
  }
  v6 = sub_10017F69C(v4, v5);
  v11 = v10;
  swift_bridgeObjectRelease(v7);
  v7 = v11;
  if ((v11 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v6 & 0x1000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)((v7 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v9 = v6 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v8 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v6, v7);
  }
LABEL_7:
  v12 = sub_10017F420(v8, v9, a3);
  swift_bridgeObjectRelease(v7);
  return v12;
}

unsigned __int8 *sub_10017F420(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  unint64_t v9;
  unsigned __int8 *i;
  unsigned int v11;
  char v12;
  unint64_t v13;
  unsigned __int8 v14;
  BOOL v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unint64_t v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = a2;
  v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        v5 = a2 - 1;
        if (a2 != 1)
        {
          v6 = a3 + 48;
          v7 = a3 + 55;
          v8 = a3 + 87;
          if (a3 > 10)
          {
            v6 = 58;
          }
          else
          {
            v8 = 97;
            v7 = 65;
          }
          if (result)
          {
            v9 = 0;
            for (i = result + 1; ; ++i)
            {
              v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8)
                    return 0;
                  v12 = -87;
                }
                else
                {
                  v12 = -55;
                }
              }
              else
              {
                v12 = -48;
              }
              if (!is_mul_ok(v9, a3))
                return 0;
              v13 = v9 * a3;
              v14 = v11 + v12;
              v15 = v13 >= v14;
              v9 = v13 - v14;
              if (!v15)
                return 0;
              if (!--v5)
                return (unsigned __int8 *)v9;
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      v25 = a3 + 48;
      v26 = a3 + 55;
      v27 = a3 + 87;
      if (a3 > 10)
      {
        v25 = 58;
      }
      else
      {
        v27 = 97;
        v26 = 65;
      }
      if (result)
      {
        v28 = 0;
        do
        {
          v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27)
                return 0;
              v30 = -87;
            }
            else
            {
              v30 = -55;
            }
          }
          else
          {
            v30 = -48;
          }
          if (!is_mul_ok(v28, a3))
            return 0;
          v31 = v28 * a3;
          v32 = v29 + v30;
          v15 = __CFADD__(v31, v32);
          v28 = v31 + v32;
          if (v15)
            return 0;
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  v16 = a2 - 1;
  if (a2 == 1)
    return 0;
  v17 = a3 + 48;
  v18 = a3 + 55;
  v19 = a3 + 87;
  if (a3 > 10)
  {
    v17 = 58;
  }
  else
  {
    v19 = 97;
    v18 = 65;
  }
  if (!result)
    return 0;
  v9 = 0;
  v20 = result + 1;
  do
  {
    v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19)
          return 0;
        v22 = -87;
      }
      else
      {
        v22 = -55;
      }
    }
    else
    {
      v22 = -48;
    }
    if (!is_mul_ok(v9, a3))
      return 0;
    v23 = v9 * a3;
    v24 = v21 + v22;
    v15 = __CFADD__(v23, v24);
    v9 = v23 + v24;
    if (v15)
      return 0;
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

uint64_t sub_10017F69C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1;
  v3 = 7;
  if (((a2 >> 60) & ((a1 & 0x800000000000000) == 0)) != 0)
    v3 = 11;
  v4 = String.subscript.getter(15, v3 | (v2 << 16), a1, a2);
  v6 = v5;
  v9 = sub_10017F718(v4, v7, v8, v5);
  swift_bridgeObjectRelease(v6);
  return v9;
}

uint64_t sub_10017F718(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[5];

  v5 = a3;
  if ((a4 & 0x1000000000000000) != 0)
  {
    v12 = sub_10017F85C(a1, a2, a3, a4);
    if (v12)
    {
      v9 = v12;
      v8 = (unint64_t)sub_10017307C(v12, 0);
      v5 = sub_10017F948((unint64_t)v15, v8 + 32, v9, a1, a2, v5, a4);
      v13 = v15[3];
      swift_bridgeObjectRetain(a4);
      swift_bridgeObjectRelease(v13);
      if (v5 != v9)
      {
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      v8 = (unint64_t)_swiftEmptyArrayStorage;
    }
    v14 = static String._uncheckedFromUTF8(_:)(v8 + 32, *(_QWORD *)(v8 + 16));
    swift_release(v8);
    return v14;
  }
  else
  {
    v8 = a1 >> 16;
    v9 = a2 >> 16;
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
      {
        v10 = (a4 & 0xFFFFFFFFFFFFFFFLL) + 32;
LABEL_5:
        v10 += v8;
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      }
LABEL_11:
      v10 = _StringObject.sharedUTF8.getter(v5, a4);
      if (!v10)
        return static String._uncheckedFromUTF8(_:)(v10, v9 - v8);
      goto LABEL_5;
    }
    v15[0] = a3;
    v15[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return static String._uncheckedFromUTF8(_:)((char *)v15 + v8, v9 - v8);
  }
}

unint64_t sub_10017F85C(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_1001730E0(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_1001730E0(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return String.UTF8View._foreignDistance(from:to:)(v7, a2, a3, a4);
  }
  __break(1u);
  return result;
}

unint64_t sub_10017F948(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_1001730E0(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = String.UTF8View._foreignSubscript(position:)();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = _StringObject.sharedUTF8.getter(a6, a7);
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_1001730E0(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = String.UTF8View._foreignIndex(after:)(v12, a6, a7);
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

void sub_10017FB58(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  char v26;
  char v27;
  unsigned __int8 v28;
  BOOL v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned __int8 *v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unsigned int v49;
  unsigned __int8 v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;
  char v56;
  _QWORD v57[2];
  uint64_t v58;
  uint64_t v59;
  _QWORD v60[3];
  uint64_t v61;
  uint64_t v62;

  v3 = a1[3];
  v4 = a1[4];
  sub_100007BBC(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()(v60, v3, v4);
  if (v1)
    goto LABEL_47;
  v5 = v61;
  v6 = v62;
  sub_100007BBC(v60, v61);
  v7 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v5, v6);
  v9 = v8;
  v58 = v7;
  v59 = v8;
  v57[0] = 46;
  v57[1] = 0xE100000000000000;
  v10 = sub_10002B3F4();
  v11 = (_QWORD *)StringProtocol.components<A>(separatedBy:)(v57, &type metadata for String, &type metadata for String, v10, v10);
  swift_bridgeObjectRelease(v9);
  if (v11[2] <= 1uLL)
  {
    swift_bridgeObjectRelease(v11);
    v12 = type metadata accessor for DecodingError(0);
    swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
    v14 = v13;
    v15 = a1[3];
    v16 = a1[4];
    sub_100007BBC(a1, v15);
    v17 = dispatch thunk of Decoder.codingPath.getter(v15, v16);
    v18 = 0xD000000000000017;
    v19 = 0x800000010026CA60;
LABEL_46:
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v17, v18, v19, 0);
    v45 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(v14, enum case for DecodingError.dataCorrupted(_:), v12);
    swift_willThrow(v45);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v60);
LABEL_47:
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
    return;
  }
  v20 = v11[4];
  v21 = v11[5];
  v22 = HIBYTE(v21) & 0xF;
  v23 = v20 & 0xFFFFFFFFFFFFLL;
  if ((v21 & 0x2000000000000000) != 0)
    v24 = HIBYTE(v21) & 0xF;
  else
    v24 = v20 & 0xFFFFFFFFFFFFLL;
  if (!v24)
    goto LABEL_43;
  if ((v21 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain(v11[5]);
    sub_10017F33C(v20, v21, 10);
    v27 = v56;
    swift_bridgeObjectRelease(v21);
    goto LABEL_39;
  }
  if ((v21 & 0x2000000000000000) == 0)
  {
    if ((v20 & 0x1000000000000000) != 0)
      v25 = (unsigned __int8 *)((v21 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v25 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v11[4], v11[5]);
    sub_10017F420(v25, v23, 10);
    v27 = v26 & 1;
LABEL_39:
    if ((v27 & 1) == 0)
    {
      if (v11[2] >= 2uLL)
      {
        v35 = v11[6];
        v36 = v11[7];
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRelease(v11);
        sub_100176F40(v35, v36);
        if ((v37 & 1) == 0)
        {
          _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v60);
          _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
          return;
        }
        v12 = type metadata accessor for DecodingError(0);
        swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
        v14 = v42;
        v43 = a1[3];
        v44 = a1[4];
        sub_100007BBC(a1, v43);
        v17 = dispatch thunk of Decoder.codingPath.getter(v43, v44);
        v41 = "Invalid minor version component.";
        goto LABEL_45;
      }
      __break(1u);
      goto LABEL_70;
    }
LABEL_43:
    swift_bridgeObjectRelease(v11);
    v12 = type metadata accessor for DecodingError(0);
    swift_allocError(v12, &protocol witness table for DecodingError, 0, 0);
    v14 = v38;
    v39 = a1[3];
    v40 = a1[4];
    sub_100007BBC(a1, v39);
    v17 = dispatch thunk of Decoder.codingPath.getter(v39, v40);
    v41 = "Invalid major version component.";
LABEL_45:
    v19 = (unint64_t)(v41 - 32) | 0x8000000000000000;
    v18 = 0xD000000000000020;
    goto LABEL_46;
  }
  v58 = v11[4];
  v59 = v21 & 0xFFFFFFFFFFFFFFLL;
  if (v20 != 43)
  {
    if (v20 == 45)
    {
      if (!v22)
      {
LABEL_70:
        __break(1u);
        goto LABEL_71;
      }
      if (v22 == 1)
        goto LABEL_36;
      v28 = BYTE1(v20) - 48;
      if ((BYTE1(v20) - 48) > 9u)
        goto LABEL_36;
      v29 = v28 == 0;
      v30 = -(uint64_t)v28;
      if (!v29)
        goto LABEL_36;
      if (v22 == 2)
      {
        v27 = 0;
        goto LABEL_39;
      }
      v50 = BYTE2(v20) - 48;
      if ((BYTE2(v20) - 48) > 9u)
        goto LABEL_36;
      if (!is_mul_ok(v30, 0xAuLL))
        goto LABEL_36;
      v51 = 10 * v30;
      v52 = v51 - v50;
      if (v51 < v50)
        goto LABEL_36;
      v53 = v22 - 3;
      if (v22 != 3)
      {
        v54 = (unsigned __int8 *)&v58 + 3;
        while (1)
        {
          v55 = *v54 - 48;
          if (v55 > 9)
            goto LABEL_36;
          if (!is_mul_ok(v52, 0xAuLL))
            goto LABEL_36;
          v29 = 10 * v52 >= v55;
          v52 = 10 * v52 - v55;
          if (!v29)
            goto LABEL_36;
          v27 = 0;
          ++v54;
          if (!--v53)
            goto LABEL_39;
        }
      }
LABEL_38:
      v27 = 0;
      goto LABEL_39;
    }
    if (v22 && (v20 - 48) <= 9u)
    {
      if (v22 == 1)
        goto LABEL_38;
      if ((BYTE1(v20) - 48) <= 9u)
      {
        v46 = 10 * (v20 - 48) + (BYTE1(v20) - 48);
        v47 = v22 - 2;
        if (v22 != 2)
        {
          v48 = (unsigned __int8 *)&v58 + 2;
          while (1)
          {
            v49 = *v48 - 48;
            if (v49 > 9)
              goto LABEL_36;
            if (!is_mul_ok(v46, 0xAuLL))
              goto LABEL_36;
            v29 = __CFADD__(10 * v46, v49);
            v46 = 10 * v46 + v49;
            if (v29)
              goto LABEL_36;
            v27 = 0;
            ++v48;
            if (!--v47)
              goto LABEL_39;
          }
        }
        goto LABEL_38;
      }
    }
LABEL_36:
    v27 = 1;
    goto LABEL_39;
  }
  if (v22)
  {
    if (v22 != 1 && (BYTE1(v20) - 48) <= 9u)
    {
      if (v22 == 2)
        goto LABEL_38;
      if ((BYTE2(v20) - 48) <= 9u)
      {
        v31 = 10 * (BYTE1(v20) - 48) + (BYTE2(v20) - 48);
        v32 = v22 - 3;
        if (v22 != 3)
        {
          v33 = (unsigned __int8 *)&v58 + 3;
          while (1)
          {
            v34 = *v33 - 48;
            if (v34 > 9)
              goto LABEL_36;
            if (!is_mul_ok(v31, 0xAuLL))
              goto LABEL_36;
            v29 = __CFADD__(10 * v31, v34);
            v31 = 10 * v31 + v34;
            if (v29)
              goto LABEL_36;
            v27 = 0;
            ++v33;
            if (!--v32)
              goto LABEL_39;
          }
        }
        goto LABEL_38;
      }
    }
    goto LABEL_36;
  }
LABEL_71:
  __break(1u);
}

uint64_t sub_1001800C4(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  v2 = type metadata accessor for CodingUserInfoKey(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100007BBC(a1, v7);
  v9 = dispatch thunk of Decoder.userInfo.getter(v7, v8);
  if (qword_100315900 != -1)
    swift_once(&qword_100315900, sub_100177480);
  v10 = sub_10000D744(v2, (uint64_t)qword_10033FFA0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v10, v2);
  if (*(_QWORD *)(v9 + 16) && (v11 = sub_10017D55C((uint64_t)v6), (v12 & 1) != 0))
  {
    sub_10008CAC4(*(_QWORD *)(v9 + 56) + 32 * v11, (uint64_t)&v25);
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
  }
  v13 = swift_bridgeObjectRelease(v9);
  (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v6, v2, v13);
  if (*((_QWORD *)&v26 + 1))
  {
    v14 = type metadata accessor for QuestionnaireRevisionContainer();
    if ((swift_dynamicCast(&v24, &v25, (char *)&type metadata for Any + 8, v14, 6) & 1) != 0)
      return v24;
  }
  else
  {
    sub_100007FF0((uint64_t)&v25, &qword_100324AC0);
  }
  v16 = type metadata accessor for DecodingError(0);
  swift_allocError(v16, &protocol witness table for DecodingError, 0, 0);
  v18 = v17;
  v19 = a1[3];
  v20 = a1[4];
  sub_100007BBC(a1, v19);
  v21 = dispatch thunk of Decoder.codingPath.getter(v19, v20);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v21, 0xD00000000000001BLL, 0x800000010026CCF0, 0);
  v22 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, enum case for DecodingError.dataCorrupted(_:), v16);
  return swift_willThrow(v22);
}

uint64_t sub_1001802D8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;

  v2 = type metadata accessor for CodingUserInfoKey(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100007BBC(a1, v7);
  v9 = dispatch thunk of Decoder.userInfo.getter(v7, v8);
  if (qword_100315910 != -1)
    swift_once(&qword_100315910, sub_1001774C8);
  v10 = sub_10000D744(v2, (uint64_t)qword_10033FFD0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v10, v2);
  if (*(_QWORD *)(v9 + 16) && (v11 = sub_10017D55C((uint64_t)v6), (v12 & 1) != 0))
  {
    sub_10008CAC4(*(_QWORD *)(v9 + 56) + 32 * v11, (uint64_t)&v25);
  }
  else
  {
    v25 = 0u;
    v26 = 0u;
  }
  v13 = swift_bridgeObjectRelease(v9);
  (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v6, v2, v13);
  if (*((_QWORD *)&v26 + 1))
  {
    v14 = type metadata accessor for QuestionnairePresentationBuddyContainer();
    if ((swift_dynamicCast(&v24, &v25, (char *)&type metadata for Any + 8, v14, 6) & 1) != 0)
      return v24;
  }
  else
  {
    sub_100007FF0((uint64_t)&v25, &qword_100324AC0);
  }
  v16 = type metadata accessor for DecodingError(0);
  swift_allocError(v16, &protocol witness table for DecodingError, 0, 0);
  v18 = v17;
  v19 = a1[3];
  v20 = a1[4];
  sub_100007BBC(a1, v19);
  v21 = dispatch thunk of Decoder.codingPath.getter(v19, v20);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v21, 0xD000000000000023, 0x800000010026CD30, 0);
  v22 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(v18, enum case for DecodingError.dataCorrupted(_:), v16);
  return swift_willThrow(v22);
}

_QWORD *sub_1001804EC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v3 = a1[3];
  v4 = a1[4];
  v5 = sub_100007BBC(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()(v12, v3, v4);
  if (v1)
  {
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
  }
  else
  {
    v6 = v13;
    v7 = v14;
    sub_100007BBC(v12, v13);
    v8 = sub_100003DB8(&qword_100323D38);
    v9 = sub_10003418C(&qword_100323D40, &qword_100323D38, (void (*)(void))sub_100183C80, (uint64_t)&protocol conformance descriptor for <A> [A]);
    dispatch thunk of SingleValueDecodingContainer.decode<A>(_:)(&v11, v8, v8, v9, v6, v7);
    v5 = v11;
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v12);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
  }
  return v5;
}

uint64_t sub_100180774(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t inited;

  v2 = sub_100003DB8(&qword_100323A00);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = a1[3];
  v8 = a1[4];
  sub_100007BBC(a1, v7);
  v9 = type metadata accessor for QuestionnairePresentationBuddyAutoSendPolicy.Key();
  v10 = sub_1000052EC(&qword_100323A08, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnairePresentationBuddyAutoSendPolicy.Key, (uint64_t)&unk_10025A028);
  dispatch thunk of Decoder.container<A>(keyedBy:)(v9, v9, v10, v7, v8);
  inited = swift_initStaticObject(v9, &unk_1003159C0);
  v11 = KeyedDecodingContainer.decode(_:forKey:)(&inited, v2);
  inited = swift_initStaticObject(v9, &unk_1003159E8);
  KeyedDecodingContainer.decode(_:forKey:)(&inited, v2);
  inited = swift_initStaticObject(v9, &unk_100315A10);
  KeyedDecodingContainer.decode(_:forKey:)(&inited, v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
  return v11;
}

void sub_100180938(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[3];
  uint64_t inited;

  v26 = sub_100003DB8(&qword_100323A18);
  v5 = *(_QWORD *)(v26 - 8);
  __chkstk_darwin(v26, v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100007BBC(a1, v9);
  v11 = type metadata accessor for QuestionnairePresentationBuddy.Key();
  v12 = sub_1000052EC(&qword_100323A20, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnairePresentationBuddy.Key, (uint64_t)&unk_10025A028);
  dispatch thunk of Decoder.container<A>(keyedBy:)(v11, v11, v12, v9, v10);
  if (v2)
  {
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
  }
  else
  {
    v13 = v5;
    v27[0] = swift_initStaticObject(v11, &unk_100315A38);
    v14 = v26;
    v15 = KeyedDecodingContainer.decode(_:forKey:)(v27, v26);
    v16 = sub_100003DB8(&qword_100323A28);
    inited = swift_initStaticObject(v11, &unk_100315A60);
    v17 = sub_100180C88(&qword_100323A30, (void (*)(void))sub_100180C00, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v27, v16, &inited, v14, v16, v17);
    v25 = v27[0];
    swift_bridgeObjectRetain(v27[0]);
    v18 = swift_initStaticObject(v11, &unk_100315A88);
    v27[0] = v18;
    HIDWORD(v24) = KeyedDecodingContainer.contains(_:)(v27, v14);
    if ((v24 & 0x100000000) != 0)
    {
      inited = v18;
      v19 = sub_100180C44();
      KeyedDecodingContainer.decode<A>(_:forKey:)(v27, &type metadata for QuestionnairePresentationBuddyAutoSendPolicy, &inited, v14, &type metadata for QuestionnairePresentationBuddyAutoSendPolicy, v19);
      (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v14);
      v20 = v27[0];
      v21 = v27[1];
      v22 = v27[2];
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v14);
      v20 = 0;
      v21 = 0;
      v22 = 0;
    }
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
    v23 = v25;
    swift_bridgeObjectRelease(v25);
    *(_QWORD *)a2 = v15;
    *(_QWORD *)(a2 + 8) = v23;
    *(_QWORD *)(a2 + 16) = v20;
    *(_QWORD *)(a2 + 24) = v21;
    *(_QWORD *)(a2 + 32) = v22;
    *(_BYTE *)(a2 + 40) = (v24 & 0x100000000) == 0;
  }
}

unint64_t sub_100180C00()
{
  unint64_t result;

  result = qword_100323A38;
  if (!qword_100323A38)
  {
    result = swift_getWitnessTable(&unk_100259F00, &type metadata for QuestionPresentationBuddy);
    atomic_store(result, (unint64_t *)&qword_100323A38);
  }
  return result;
}

unint64_t sub_100180C44()
{
  unint64_t result;

  result = qword_100323A40;
  if (!qword_100323A40)
  {
    result = swift_getWitnessTable(&unk_100259FA0, &type metadata for QuestionnairePresentationBuddyAutoSendPolicy);
    atomic_store(result, (unint64_t *)&qword_100323A40);
  }
  return result;
}

uint64_t sub_100180C88(unint64_t *a1, void (*a2)(void), uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100007FAC(&qword_100323A28);
    a2();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100180CFC()
{
  unint64_t result;

  result = qword_100323A58;
  if (!qword_100323A58)
  {
    result = swift_getWitnessTable(&unk_100259ED8, &type metadata for QuestionPresentationBuddy);
    atomic_store(result, (unint64_t *)&qword_100323A58);
  }
  return result;
}

unint64_t sub_100180D40()
{
  unint64_t result;

  result = qword_100323A68;
  if (!qword_100323A68)
  {
    result = swift_getWitnessTable(&unk_100259F78, &type metadata for QuestionnairePresentationBuddyAutoSendPolicy);
    atomic_store(result, (unint64_t *)&qword_100323A68);
  }
  return result;
}

void sub_100180D84(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD v63[3];
  uint64_t v64;
  uint64_t v65;

  v61 = a2;
  v4 = sub_100003DB8(&qword_100323A70);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v9 = a1[4];
  sub_100007BBC(a1, v10);
  v11 = type metadata accessor for QuestionPresentationBuddy.Key();
  v12 = sub_1000052EC(&qword_100323A78, (uint64_t (*)(uint64_t))type metadata accessor for QuestionPresentationBuddy.Key, (uint64_t)&unk_10025A028);
  dispatch thunk of Decoder.container<A>(keyedBy:)(v11, v11, v12, v10, v9);
  if (v2)
  {
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
  }
  else
  {
    v60 = v5;
    inited = swift_initStaticObject(v11, &unk_100315B78);
    v63[0] = inited;
    v14 = v4;
    if ((KeyedDecodingContainer.contains(_:)(v63, v4) & 1) != 0)
    {
      v63[0] = inited;
      v15 = KeyedDecodingContainer.decode(_:forKey:)(v63, v4);
      v16 = a1;
      v58 = v15;
      v18 = v17;
    }
    else
    {
      v58 = 0;
      v18 = 0xE000000000000000;
      v16 = a1;
    }
    v19 = swift_initStaticObject(v11, &unk_100315B50);
    v63[0] = v19;
    if ((KeyedDecodingContainer.contains(_:)(v63, v14) & 1) != 0)
    {
      v63[0] = v19;
      v57 = KeyedDecodingContainer.decode(_:forKey:)(v63, v14);
      v59 = v20;
    }
    else
    {
      v57 = 0;
      v59 = 0xE000000000000000;
    }
    v21 = swift_initStaticObject(v11, &unk_100315AB0);
    v63[0] = v21;
    if ((KeyedDecodingContainer.contains(_:)(v63, v14) & 1) != 0)
    {
      v22 = v8;
      v23 = sub_100003DB8(&qword_10031C658);
      v65 = v21;
      v24 = sub_10003418C(&qword_100323AA0, &qword_10031C658, (void (*)(void))sub_100181488, (uint64_t)&protocol conformance descriptor for <A> [A]);
      v25 = v23;
      v26 = v23;
      v8 = v22;
      KeyedDecodingContainer.decode<A>(_:forKey:)(v63, v25, &v65, v14, v26, v24);
      v27 = (_QWORD *)v63[0];
    }
    else
    {
      v27 = _swiftEmptyArrayStorage;
    }
    v28 = swift_initStaticObject(v11, &unk_100315B28);
    v63[0] = v28;
    if ((KeyedDecodingContainer.contains(_:)(v63, v14) & 1) != 0)
    {
      v29 = sub_100003DB8(&qword_100317980);
      v65 = v28;
      v30 = sub_1001815C0(&qword_100323A98, (uint64_t)&protocol witness table for String, (uint64_t)&protocol conformance descriptor for <A> [A]);
      KeyedDecodingContainer.decode<A>(_:forKey:)(v63, v29, &v65, v14, v29, v30);
      v56 = v63[0];
    }
    else
    {
      v56 = 0;
    }
    v31 = swift_initStaticObject(v11, &unk_100315AD8);
    v63[0] = v31;
    if ((KeyedDecodingContainer.contains(_:)(v63, v14) & 1) != 0)
    {
      v63[0] = v31;
      v32 = KeyedDecodingContainer.decode(_:forKey:)(v63, v14);
      v34 = v33;
      v55 = v32;
    }
    else
    {
      v55 = 0;
      v34 = 0;
    }
    sub_1001775C8(v16, (uint64_t)v63);
    sub_100007BBC(v63, v64);
    v54 = v34;
    v53 = sub_100177828(v58, v18);
    v36 = v35;
    swift_bridgeObjectRelease(v18);
    sub_100007BBC(v63, v64);
    v37 = v59;
    v57 = sub_100177828(v57, v59);
    v38 = v27;
    v40 = v39;
    swift_bridgeObjectRelease(v37);
    v41 = sub_100003DB8(&qword_100323A80);
    swift_bridgeObjectRetain(v54);
    v59 = v36;
    v42 = v36;
    v43 = v38;
    swift_bridgeObjectRetain(v42);
    v58 = v40;
    swift_bridgeObjectRetain(v40);
    swift_bridgeObjectRetain(v38);
    v44 = v56;
    swift_bridgeObjectRetain(v56);
    v62 = swift_initStaticObject(v11, &unk_100315B00);
    v45 = sub_1001813D8();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v65, v41, &v62, v14, v41, v45);
    (*(void (**)(char *, uint64_t))(v60 + 8))(v8, v14);
    v46 = v65;
    swift_bridgeObjectRetain(v65);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v63);
    v47 = v59;
    swift_bridgeObjectRetain(v59);
    v48 = v58;
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRetain(v43);
    swift_bridgeObjectRetain(v44);
    swift_bridgeObjectRelease(v49);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v47);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v16);
    swift_bridgeObjectRelease(v46);
    v50 = v54;
    swift_bridgeObjectRelease(v54);
    swift_bridgeObjectRelease(v44);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v48);
    swift_bridgeObjectRelease(v47);
    v51 = v61;
    *v61 = v53;
    v51[1] = v47;
    v51[2] = v57;
    v51[3] = v48;
    v51[4] = (uint64_t)v43;
    v51[5] = v44;
    v51[6] = v55;
    v51[7] = v50;
    v51[8] = v46;
  }
}

unint64_t sub_1001813D8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100323A88;
  if (!qword_100323A88)
  {
    v1 = sub_100007FAC(&qword_100323A80);
    sub_100181444();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100323A88);
  }
  return result;
}

unint64_t sub_100181444()
{
  unint64_t result;

  result = qword_100323A90;
  if (!qword_100323A90)
  {
    result = swift_getWitnessTable(&unk_100259EB0, &type metadata for OptionPresentationBuddy);
    atomic_store(result, (unint64_t *)&qword_100323A90);
  }
  return result;
}

unint64_t sub_100181488()
{
  unint64_t result;

  result = qword_100323AA8;
  if (!qword_100323AA8)
  {
    result = swift_getWitnessTable(&unk_100259C40, &type metadata for QuestionPresentation.Flag);
    atomic_store(result, (unint64_t *)&qword_100323AA8);
  }
  return result;
}

unint64_t sub_1001814CC()
{
  unint64_t result;

  result = qword_100323AD8;
  if (!qword_100323AD8)
  {
    result = swift_getWitnessTable(&unk_100259C18, &type metadata for QuestionPresentation.Flag);
    atomic_store(result, (unint64_t *)&qword_100323AD8);
  }
  return result;
}

unint64_t sub_100181510()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100323AE0;
  if (!qword_100323AE0)
  {
    v1 = sub_100007FAC(&qword_100323A80);
    sub_10018157C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100323AE0);
  }
  return result;
}

unint64_t sub_10018157C()
{
  unint64_t result;

  result = qword_100323AE8;
  if (!qword_100323AE8)
  {
    result = swift_getWitnessTable(&unk_100259E88, &type metadata for OptionPresentationBuddy);
    atomic_store(result, (unint64_t *)&qword_100323AE8);
  }
  return result;
}

uint64_t sub_1001815C0(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007FAC(&qword_100317980);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

_QWORD *sub_100181620(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t inited;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __n128 v63;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  _QWORD v78[5];
  uint64_t v79;

  v2 = sub_100003DB8(&qword_100323AF8);
  v75 = *(_QWORD *)(v2 - 8);
  v76 = v2;
  v4 = __chkstk_darwin(v2, v3);
  v74 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v67 - v8;
  v11 = __chkstk_darwin(v7, v10);
  v13 = (char *)&v67 - v12;
  v15 = __chkstk_darwin(v11, v14);
  v17 = (char *)&v67 - v16;
  __chkstk_darwin(v15, v18);
  v20 = (uint64_t *)((char *)&v67 - v19);
  v22 = a1[3];
  v21 = a1[4];
  v77 = a1;
  v23 = sub_100007BBC(a1, v22);
  v24 = type metadata accessor for OptionPresentationBuddy.Key();
  v25 = sub_1000052EC(&qword_100323B00, (uint64_t (*)(uint64_t))type metadata accessor for OptionPresentationBuddy.Key, (uint64_t)&unk_10025A028);
  v26 = v79;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v24, v24, v25, v22, v21);
  if (!v26)
  {
    v79 = v25;
    v70 = v9;
    v71 = (uint64_t)v13;
    v73 = v17;
    v27 = v75;
    inited = swift_initStaticObject(v24, &unk_100315C90);
    v78[0] = inited;
    v29 = v76;
    if ((KeyedDecodingContainer.contains(_:)(v78, v76) & 1) != 0)
    {
      v78[0] = inited;
      v31 = KeyedDecodingContainer.decode(_:forKey:)(v78, v29);
      v72 = v32;
    }
    else
    {
      v31 = 0;
      v72 = 0xE000000000000000;
    }
    v33 = static Color.clear.getter(v30);
    v34 = swift_initStaticObject(v24, &unk_100315BF0);
    v78[0] = v34;
    if ((KeyedDecodingContainer.contains(_:)(v78, v29) & 1) != 0)
    {
      v69 = v31;
      v78[0] = v34;
      v35 = v73;
      v36 = v79;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(v24, v78, v29, v24, v79);
      v68 = swift_initStaticObject(v24, &unk_100315BA0);
      v78[0] = v68;
      if ((KeyedDecodingContainer.contains(_:)(v78, v29) & 1) != 0)
      {
        v78[0] = v68;
        KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(v24, v78, v29, v24, v36);
        v40 = v77;
        v79 = v33;
        v78[0] = swift_initStaticObject(v24, &unk_100315C18);
        v52 = v71;
        KeyedDecodingContainer.decode(_:forKey:)(v78, v29);
        v39 = v54;
        v55 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
        v55(v52, v29);
        v55((uint64_t)v73, v29);
        v37 = 0;
        v38 = 0;
      }
      else
      {
        v71 = swift_initStaticObject(v24, &unk_100315C68);
        v78[0] = v71;
        v51 = KeyedDecodingContainer.contains(_:)(v78, v29);
        v40 = v77;
        if ((v51 & 1) != 0)
        {
          v78[0] = v71;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(v24, v78, v29, v24, v79);
          v78[0] = swift_initStaticObject(v24, &unk_100315C18);
          v68 = KeyedDecodingContainer.decode(_:forKey:)(v78, v29);
          v71 = v56;
          v78[0] = swift_initStaticObject(v24, &unk_100315BC8);
          v57 = v74;
          KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(v24, v78, v29, v24, v79);
          v78[0] = swift_initStaticObject(v24, &unk_100315C40);
          v58 = KeyedDecodingContainer.decode(_:forKey:)(v78, v29);
          v60 = v59;
          v61 = v33;
          v62 = sub_1000935E4(v58, v59);
          v63 = swift_bridgeObjectRelease(v60);
          if (v62)
          {
            swift_release(v61);
            v79 = v62;
          }
          else
          {
            v64 = static Color.clear.getter(v63);
            swift_release(v61);
            v79 = v64;
          }
          v37 = v68;
          v65 = *(void (**)(char *, uint64_t))(v75 + 8);
          v66 = v57;
          v27 = v75;
          v65(v66, v29);
          v65(v70, v29);
          v65(v73, v29);
          v39 = 0;
          v31 = v69;
          v38 = v71;
          goto LABEL_9;
        }
        v79 = v33;
        (*(void (**)(char *, uint64_t))(v27 + 8))(v35, v29);
        v37 = 0;
        v38 = 0;
        v39 = 0;
      }
      v31 = v69;
    }
    else
    {
      v79 = v33;
      v37 = 0;
      v38 = 0;
      v39 = 0;
      v40 = v77;
    }
LABEL_9:
    sub_1001775C8(v40, (uint64_t)v78);
    sub_100007BBC(v78, v78[3]);
    v71 = v38;
    v41 = v31;
    v42 = v72;
    v43 = sub_100177828(v41, v72);
    v77 = v20;
    v44 = v27;
    v45 = v43;
    v46 = v37;
    v48 = v47;
    swift_bridgeObjectRelease(v39);
    swift_bridgeObjectRelease(v42);
    v49 = type metadata accessor for OptionPresentation();
    v23 = (_QWORD *)swift_allocObject(v49, 72, 7);
    v23[2] = v45;
    v23[3] = v48;
    v50 = v71;
    v23[6] = v46;
    v23[7] = v50;
    v23[8] = v79;
    v23[4] = 0;
    v23[5] = 0;
    (*(void (**)(_QWORD *, uint64_t))(v44 + 8))(v77, v76);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v78);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v40);
    return v23;
  }
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v77);
  return v23;
}

uint64_t sub_100181D0C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _BYTE v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t inited;

  v3 = sub_100003DB8(&qword_100323B10);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  v10 = (uint64_t)sub_100007BBC(a1, v8);
  v11 = _s3KeyCMa();
  v12 = sub_1000052EC(&qword_100323B18, (uint64_t (*)(uint64_t))_s3KeyCMa, (uint64_t)&unk_10025A028);
  dispatch thunk of Decoder.container<A>(keyedBy:)(v11, v11, v12, v8, v9);
  if (!v1)
  {
    inited = swift_initStaticObject(v11, &unk_100315CE0);
    v13 = sub_100182164();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v46, &type metadata for QuestionnairePolicy.QuestionnaireScope, &inited, v3, &type metadata for QuestionnairePolicy.QuestionnaireScope, v13);
    v14 = v46;
    inited = swift_initStaticObject(v11, &unk_100315D08);
    v16 = KeyedDecodingContainer.decode(_:forKey:)(&inited, v3);
    v45 = v17;
    v18 = sub_1001802D8(a1);
    v19 = v18;
    if (*(_QWORD *)(v18 + 24))
    {
      v20 = *(_QWORD *)(v18 + 48);
      v43 = *(_QWORD *)(v18 + 40);
      v44 = v20;
      v42 = *(_QWORD *)(v18 + 32);
      v41 = *(unsigned __int8 *)(v18 + 56);
      swift_release(v18);
      v47[0] = v14;
      v21 = v42;
      v22 = v43;
      if ((v41 & 1) != 0)
      {
        v21 = 0;
        v22 = 0;
      }
      v23 = v44;
      if ((v41 & 1) != 0)
        v23 = 0;
      v48 = v16;
      v49 = v45;
      v50 = v21;
      v51 = v22;
      v52 = v23;
      v53 = v41 & 1;
      v24 = sub_1001800C4(a1);
      v19 = v24;
      if ((*(_BYTE *)(v24 + 32) & 1) == 0)
      {
        v34 = *(_QWORD *)(v24 + 24);
        v44 = *(_QWORD *)(v24 + 16);
        swift_release(v24);
        inited = swift_initStaticObject(v11, &unk_100315CB8);
        v35 = KeyedDecodingContainer.decode(_:forKey:)(&inited, v3);
        v43 = v34;
        v36 = sub_100003DB8(&qword_100323B28);
        v46 = swift_initStaticObject(v11, &unk_100315D30);
        v37 = sub_1001821A8();
        KeyedDecodingContainer.decode<A>(_:forKey:)(&inited, v36, &v46, v3, v36, v37);
        v38 = inited;
        v39 = type metadata accessor for Questionnaire();
        swift_allocObject(v39, 120, 7);
        v10 = sub_1000847A4(v44, v43, (uint64_t)v47, v35, v38);
        (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
        _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
        return v10;
      }
      v25 = type metadata accessor for DecodingError(0);
      swift_allocError(v25, &protocol witness table for DecodingError, 0, 0);
      v26 = a1[3];
      v43 = a1[4];
      v44 = v27;
      sub_100007BBC(a1, v26);
      v28 = dispatch thunk of Decoder.codingPath.getter(v26, v43);
      v29 = 0x800000010026CB10;
      v10 = v44;
      v30 = 0xD000000000000024;
    }
    else
    {
      v25 = type metadata accessor for DecodingError(0);
      swift_allocError(v25, &protocol witness table for DecodingError, 0, 0);
      v31 = a1[3];
      v43 = a1[4];
      v44 = v32;
      sub_100007BBC(a1, v31);
      v28 = dispatch thunk of Decoder.codingPath.getter(v31, v43);
      v30 = 0xD00000000000002ELL;
      v29 = 0x800000010026CAE0;
      v10 = v44;
    }
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v28, v30, v29, 0);
    v33 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v25 - 8) + 104))(v10, enum case for DecodingError.dataCorrupted(_:), v25);
    swift_willThrow(v33);
    swift_release(v19);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    swift_bridgeObjectRelease(v45);
  }
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
  return v10;
}

unint64_t sub_100182164()
{
  unint64_t result;

  result = qword_100323B20;
  if (!qword_100323B20)
  {
    result = swift_getWitnessTable(&unk_100259E60, &type metadata for QuestionnairePolicy.QuestionnaireScope);
    atomic_store(result, (unint64_t *)&qword_100323B20);
  }
  return result;
}

unint64_t sub_1001821A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100323B30;
  if (!qword_100323B30)
  {
    v1 = sub_100007FAC(&qword_100323B28);
    sub_1000052EC(&qword_100323B38, (uint64_t (*)(uint64_t))type metadata accessor for Question, (uint64_t)&unk_100259DB0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100323B30);
  }
  return result;
}

unint64_t sub_100182224()
{
  unint64_t result;

  result = qword_100323B48;
  if (!qword_100323B48)
  {
    result = swift_getWitnessTable(&unk_100259E38, &type metadata for QuestionnairePolicy.QuestionnaireScope);
    atomic_store(result, (unint64_t *)&qword_100323B48);
  }
  return result;
}

unint64_t sub_100182268()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100323B50;
  if (!qword_100323B50)
  {
    v1 = sub_100007FAC(&qword_100323B28);
    sub_1000052EC(&qword_100323B58, (uint64_t (*)(uint64_t))type metadata accessor for Question, (uint64_t)&unk_100259D88);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100323B50);
  }
  return result;
}

uint64_t sub_1001822E4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  Swift::String v25;
  void *object;
  Swift::String v27;
  unint64_t v29;
  unint64_t v30;
  unsigned __int8 v31;
  unint64_t v32;
  unint64_t v33;

  v10 = sub_100177DAC(a1, (uint64_t)a2);
  if (v10 == 3)
  {
    v11 = type metadata accessor for DecodingError(0);
    v12 = swift_allocError(v11, &protocol witness table for DecodingError, 0, 0);
    v14 = v13;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease(0xE000000000000000);
    v29 = 0xD000000000000014;
    v30 = 0x800000010026CAC0;
    v15._countAndFlagsBits = a1;
    v15._object = a2;
    String.append(_:)(v15);
    v16._countAndFlagsBits = 11815;
    v16._object = (void *)0xE200000000000000;
    String.append(_:)(v16);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(_swiftEmptyArrayStorage, 0xD000000000000014, 0x800000010026CAC0, 0);
    v17 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v11 - 8) + 104))(v14, enum case for DecodingError.dataCorrupted(_:), v11);
LABEL_6:
    v20 = v12;
    swift_willThrow(v17);
    return v20;
  }
  if (a5 != 2)
  {
    v21 = type metadata accessor for DecodingError(0);
    v12 = swift_allocError(v21, &protocol witness table for DecodingError, 0, 0);
    v23 = v22;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease(0xE000000000000000);
    v32 = 0xD000000000000024;
    v33 = 0x800000010026CEA0;
    v29 = a3;
    v30 = a4;
    v31 = a5;
    sub_100183D24(a3, a4, a5);
    v25._countAndFlagsBits = String.init<A>(describing:)(&v29, &type metadata for JSONView, v24);
    object = v25._object;
    String.append(_:)(v25);
    swift_bridgeObjectRelease(object);
    v27._countAndFlagsBits = 46;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(_swiftEmptyArrayStorage, v32, v33, 0);
    v17 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, enum case for DecodingError.dataCorrupted(_:), v21);
    goto LABEL_6;
  }
  v18 = v10;
  v19 = type metadata accessor for QuestionCondition();
  v20 = swift_allocObject(v19, 40, 7);
  *(_BYTE *)(v20 + 16) = v18;
  *(_QWORD *)(v20 + 24) = a3;
  *(_QWORD *)(v20 + 32) = a4;
  swift_bridgeObjectRetain(a4);
  return v20;
}

uint64_t sub_10018252C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  BOOL v8;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  Swift::String v18;
  void *object;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  Swift::String v26;
  unint64_t v28;
  unint64_t v29;
  unsigned __int8 v30;
  unint64_t v31;
  unint64_t v32;

  v8 = a1 == 0x64657463656C6573 && a2 == (void *)0xE800000000000000;
  if (!v8
    && (_stringCompareWithSmolCheck(_:_:expecting:)(0x64657463656C6573, 0xE800000000000000, a1, a2, 0) & 1) == 0)
  {
    v22 = type metadata accessor for DecodingError(0);
    v14 = swift_allocError(v22, &protocol witness table for DecodingError, 0, 0);
    v24 = v23;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease(0xE000000000000000);
    v28 = 0xD000000000000014;
    v29 = 0x800000010026CAC0;
    v25._countAndFlagsBits = a1;
    v25._object = a2;
    String.append(_:)(v25);
    v26._countAndFlagsBits = 11815;
    v26._object = (void *)0xE200000000000000;
    String.append(_:)(v26);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(_swiftEmptyArrayStorage, 0xD000000000000014, 0x800000010026CAC0, 0);
    v21 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v24, enum case for DecodingError.dataCorrupted(_:), v22);
    goto LABEL_10;
  }
  if (a5 != 2)
  {
    v13 = type metadata accessor for DecodingError(0);
    v14 = swift_allocError(v13, &protocol witness table for DecodingError, 0, 0);
    v16 = v15;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease(0xE000000000000000);
    v31 = 0xD000000000000024;
    v32 = 0x800000010026CEA0;
    v28 = a3;
    v29 = a4;
    v30 = a5;
    sub_100183D24(a3, a4, a5);
    v18._countAndFlagsBits = String.init<A>(describing:)(&v28, &type metadata for JSONView, v17);
    object = v18._object;
    String.append(_:)(v18);
    swift_bridgeObjectRelease(object);
    v20._countAndFlagsBits = 46;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(_swiftEmptyArrayStorage, v31, v32, 0);
    v21 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v13 - 8) + 104))(v16, enum case for DecodingError.dataCorrupted(_:), v13);
LABEL_10:
    v12 = v14;
    swift_willThrow(v21);
    return v12;
  }
  v11 = type metadata accessor for OptionCondition();
  v12 = swift_allocObject(v11, 32, 7);
  *(_QWORD *)(v12 + 16) = a3;
  *(_QWORD *)(v12 + 24) = a4;
  swift_bridgeObjectRetain(a4);
  return v12;
}

void sub_1001827A8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  Swift::String v30;
  void *object;
  Swift::String v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  Swift::String v45;
  uint64_t v46;
  _QWORD v47[2];
  char v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;

  LOBYTE(v6) = a5;
  v9 = sub_100178A6C(a1, a2);
  if (v5)
    return;
  v10 = v9;
  if (v6 == 1)
  {
    v24 = sub_100003DB8(&qword_100328A00);
    v12 = swift_allocObject(v24, 40, 7);
    *(_OWORD *)(v12 + 16) = xmmword_10024E820;
    type metadata accessor for Condition();
    v25 = sub_100182C44(a3, a4, 1);
    *(_QWORD *)(v12 + 32) = v25;
    v47[0] = v12;
    specialized Array._endMutation()(v25);
    v21 = v10;
    if (v10)
      goto LABEL_9;
LABEL_15:
    v34 = type metadata accessor for AndCondition();
    v35 = swift_allocObject(v34, 32, 7);
    *(_BYTE *)(v35 + 16) = 0;
    *(_QWORD *)(v35 + 24) = v12;
    return;
  }
  if ((_BYTE)v6)
  {
    v26 = type metadata accessor for DecodingError(0);
    swift_allocError(v26, &protocol witness table for DecodingError, 0, 0);
    v28 = v27;
    v47[0] = 0;
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease(0xE000000000000000);
    v49 = 0xD00000000000002DLL;
    v50 = 0x800000010026CE30;
LABEL_13:
    v47[0] = a3;
    v47[1] = a4;
    v48 = v6;
    sub_100183D24(a3, a4, v6);
    v30._countAndFlagsBits = String.init<A>(describing:)(v47, &type metadata for JSONView, v29);
    object = v30._object;
    String.append(_:)(v30);
    swift_bridgeObjectRelease(object);
    v32._countAndFlagsBits = 46;
    v32._object = (void *)0xE100000000000000;
    String.append(_:)(v32);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(_swiftEmptyArrayStorage, v49, v50, 0);
    v33 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v26 - 8) + 104))(v28, enum case for DecodingError.dataCorrupted(_:), v26);
    swift_willThrow(v33);
    return;
  }
  v11 = *(_QWORD *)(a3 + 16);
  v12 = (uint64_t)_swiftEmptyArrayStorage;
  if (v11)
  {
    v51 = a4;
    v47[0] = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v11);
    type metadata accessor for Condition();
    v46 = a3;
    v13 = (unsigned __int8 *)(a3 + 48);
    do
    {
      v14 = *((_QWORD *)v13 - 2);
      v15 = *((_QWORD *)v13 - 1);
      v16 = *v13;
      sub_100183D24(v14, v15, *v13);
      v17 = sub_100182C44(v14, v15, v16);
      v13 += 24;
      v18 = sub_100183CC4(v14, v15, v16);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v18);
      v19 = *(_QWORD *)(v47[0] + 16);
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v19);
      v20 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v19, v17);
      specialized ContiguousArray._endMutation()(v20);
      --v11;
    }
    while (v11);
    a3 = v46;
    v12 = v47[0];
    a4 = v51;
  }
  v21 = v10;
  if (!v10)
    goto LABEL_15;
LABEL_9:
  if (v21 == 1)
  {
    v22 = type metadata accessor for OrCondition();
    v23 = swift_allocObject(v22, 32, 7);
    *(_BYTE *)(v23 + 16) = 1;
    *(_QWORD *)(v23 + 24) = v12;
    return;
  }
  if ((unint64_t)v12 >> 62)
  {
    if (v12 < 0)
      v42 = v12;
    else
      v42 = v12 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v12);
    v43 = _CocoaArrayWrapper.endIndex.getter(v42);
    swift_bridgeObjectRelease(v12);
    if (v43 == 1)
    {
      swift_bridgeObjectRetain(v12);
      v6 = _CocoaArrayWrapper.endIndex.getter(v42);
      swift_bridgeObjectRelease(v12);
      if (v6)
        goto LABEL_18;
      swift_bridgeObjectRelease(v12);
      __break(1u);
    }
    goto LABEL_28;
  }
  if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10) != 1)
  {
LABEL_28:
    swift_bridgeObjectRelease(v12);
    v26 = type metadata accessor for DecodingError(0);
    swift_allocError(v26, &protocol witness table for DecodingError, 0, 0);
    v28 = v44;
    _StringGuts.grow(_:)(58);
    v49 = 0;
    v50 = 0xE000000000000000;
    v45._countAndFlagsBits = 0xD000000000000037;
    v45._object = (void *)0x800000010026CE60;
    String.append(_:)(v45);
    goto LABEL_13;
  }
LABEL_18:
  if ((v12 & 0xC000000000000001) != 0)
  {
    v36 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v12);
    goto LABEL_21;
  }
  if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v36 = *(_QWORD *)(v12 + 32);
    swift_retain(v36);
LABEL_21:
    swift_bridgeObjectRelease(v12);
    v37 = type metadata accessor for NotCondition();
    v38 = swift_allocObject(v37, 32, 7);
    v39 = sub_100003DB8(&qword_100328A00);
    v40 = swift_allocObject(v39, 40, 7);
    *(_OWORD *)(v40 + 16) = xmmword_10024E820;
    *(_QWORD *)(v40 + 32) = v36;
    v47[0] = v40;
    specialized Array._endMutation()(v40);
    v41 = v47[0];
    *(_BYTE *)(v38 + 16) = 2;
    *(_QWORD *)(v38 + 24) = v41;
    return;
  }
  __break(1u);
}

void sub_100182C44(uint64_t a1, void *a2, unsigned __int8 a3)
{
  uint64_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  Swift::String v20;
  void *object;
  Swift::String v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  unint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::String v46;
  Swift::String v47;
  char v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  char v52;
  unint64_t v53;
  unint64_t v54;

  if (a3 != 1)
  {
    v15 = type metadata accessor for DecodingError(0);
    swift_allocError(v15, &protocol witness table for DecodingError, 0, 0);
    v17 = v16;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease(0xE000000000000000);
    v53 = 0xD000000000000024;
    v54 = 0x800000010026CDB0;
    v50 = a1;
    v51 = (unint64_t)a2;
    v52 = a3;
    sub_100183D24(a1, (uint64_t)a2, a3);
LABEL_12:
    v20._countAndFlagsBits = String.init<A>(describing:)(&v50, &type metadata for JSONView, v18);
    object = v20._object;
    String.append(_:)(v20);
    swift_bridgeObjectRelease(object);
    v22._countAndFlagsBits = 46;
    v22._object = (void *)0xE100000000000000;
    String.append(_:)(v22);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(_swiftEmptyArrayStorage, v53, v54, 0);
    v23 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v15 - 8) + 104))(v17, enum case for DecodingError.dataCorrupted(_:), v15);
LABEL_13:
    swift_willThrow(v23);
    return;
  }
  if (*(_QWORD *)(a1 + 16) != 1)
  {
    v15 = type metadata accessor for DecodingError(0);
    swift_allocError(v15, &protocol witness table for DecodingError, 0, 0);
    v17 = v19;
    _StringGuts.grow(_:)(48);
    swift_bridgeObjectRelease(0xE000000000000000);
    v53 = 0xD00000000000002DLL;
    v54 = 0x800000010026CDE0;
    v50 = a1;
    v51 = (unint64_t)a2;
    v52 = 1;
    v18 = swift_bridgeObjectRetain(a1);
    goto LABEL_12;
  }
  v5 = sub_100100DC8(a1);
  if (!v6)
  {
LABEL_40:
    __break(1u);
LABEL_41:
    swift_bridgeObjectRelease(a2);
    __break(1u);
LABEL_42:
    swift_bridgeObjectRelease(a2);
    __break(1u);
LABEL_43:
    swift_bridgeObjectRelease(a2);
    __break(1u);
    goto LABEL_44;
  }
  v7 = v5;
  a2 = v6;
  if (qword_100315918 != -1)
    swift_once(&qword_100315918, sub_10017B810);
  if ((sub_100101040(v7, (uint64_t)a2, (_QWORD *)qword_100322E60) & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      swift_bridgeObjectRetain(a2);
      v8 = sub_10017D3B0(v7, (uint64_t)a2);
      if ((v9 & 1) != 0)
      {
        v10 = *(_QWORD *)(a1 + 56) + 24 * v8;
        v11 = *(_QWORD *)v10;
        v12 = *(_QWORD *)(v10 + 8);
        v13 = *(_BYTE *)(v10 + 16);
        sub_100183D24(*(_QWORD *)v10, v12, v13);
        swift_bridgeObjectRelease(a2);
        sub_1001827A8(v7, a2, v11, v12, v13);
LABEL_24:
        swift_bridgeObjectRelease(a2);
        sub_100183CC4(v11, v12, v13);
        return;
      }
      goto LABEL_41;
    }
    __break(1u);
  }
  else if (qword_100315920 == -1)
  {
    goto LABEL_15;
  }
  swift_once(&qword_100315920, sub_10017B9DC);
LABEL_15:
  if ((sub_100101040(v7, (uint64_t)a2, (_QWORD *)qword_100322E68) & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      swift_bridgeObjectRetain(a2);
      v24 = sub_10017D3B0(v7, (uint64_t)a2);
      if ((v25 & 1) != 0)
      {
        v26 = *(_QWORD *)(a1 + 56) + 24 * v24;
        v11 = *(_QWORD *)v26;
        v12 = *(_QWORD *)(v26 + 8);
        v13 = *(_BYTE *)(v26 + 16);
        sub_100183D24(*(_QWORD *)v26, v12, v13);
        swift_bridgeObjectRelease(a2);
        sub_1001822E4(v7, a2, v11, v12, v13);
        goto LABEL_24;
      }
      goto LABEL_42;
    }
    __break(1u);
  }
  else if (qword_100315928 == -1)
  {
    goto LABEL_20;
  }
  swift_once(&qword_100315928, sub_10017BBE4);
LABEL_20:
  if ((sub_100101040(v7, (uint64_t)a2, (_QWORD *)qword_100322E70) & 1) != 0)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      swift_bridgeObjectRetain(a2);
      v27 = sub_10017D3B0(v7, (uint64_t)a2);
      if ((v28 & 1) != 0)
      {
        v29 = *(_QWORD *)(a1 + 56) + 24 * v27;
        v11 = *(_QWORD *)v29;
        v12 = *(_QWORD *)(v29 + 8);
        v13 = *(_BYTE *)(v29 + 16);
        sub_100183D24(*(_QWORD *)v29, v12, v13);
        swift_bridgeObjectRelease(a2);
        sub_10018252C(v7, a2, v11, v12, v13);
        goto LABEL_24;
      }
      goto LABEL_43;
    }
    __break(1u);
  }
  else if (qword_100315930 == -1)
  {
    goto LABEL_26;
  }
  swift_once(&qword_100315930, sub_10017BC88);
LABEL_26:
  if ((sub_100101040(v7, (uint64_t)a2, (_QWORD *)qword_100322E78) & 1) == 0)
  {
    v43 = type metadata accessor for DecodingError(0);
    swift_allocError(v43, &protocol witness table for DecodingError, 0, 0);
    v45 = v44;
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease(0xE000000000000000);
    v50 = 0xD000000000000018;
    v51 = 0x800000010026CE10;
    v46._countAndFlagsBits = v7;
    v46._object = a2;
    String.append(_:)(v46);
    swift_bridgeObjectRelease(a2);
    v47._countAndFlagsBits = 46;
    v47._object = (void *)0xE100000000000000;
    String.append(_:)(v47);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(_swiftEmptyArrayStorage, 0xD000000000000018, 0x800000010026CE10, 0);
    v23 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v43 - 8) + 104))(v45, enum case for DecodingError.dataCorrupted(_:), v43);
    goto LABEL_13;
  }
  if (!*(_QWORD *)(a1 + 16))
  {
    __break(1u);
    goto LABEL_40;
  }
  swift_bridgeObjectRetain(a2);
  v30 = sub_10017D3B0(v7, (uint64_t)a2);
  if ((v31 & 1) == 0)
  {
LABEL_44:
    swift_bridgeObjectRelease(a2);
    __break(1u);
    return;
  }
  v32 = *(_QWORD *)(a1 + 56) + 24 * v30;
  v33 = *(_QWORD *)v32;
  v34 = *(_QWORD *)(v32 + 8);
  v35 = *(_BYTE *)(v32 + 16);
  sub_100183D24(*(_QWORD *)v32, v34, v35);
  swift_bridgeObjectRelease(a2);
  sub_100177F88();
  if (v36 == 10)
  {
    v37 = type metadata accessor for DecodingError(0);
    swift_allocError(v37, &protocol witness table for DecodingError, 0, 0);
    v39 = v38;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease(0xE000000000000000);
    v50 = 0xD000000000000014;
    v51 = 0x800000010026CAC0;
    v40._countAndFlagsBits = v7;
    v40._object = a2;
    String.append(_:)(v40);
    v41._countAndFlagsBits = 11815;
    v41._object = (void *)0xE200000000000000;
    String.append(_:)(v41);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(_swiftEmptyArrayStorage, 0xD000000000000014, 0x800000010026CAC0, 0);
    v42 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 104))(v39, enum case for DecodingError.dataCorrupted(_:), v37);
    swift_willThrow(v42);
    swift_bridgeObjectRelease(a2);
    sub_100183CC4(v33, v34, v35);
  }
  else
  {
    v48 = v36;
    swift_bridgeObjectRelease(a2);
    sub_100183CC4(v33, v34, v35);
    v49 = type metadata accessor for BuiltInCondition();
    *(_BYTE *)(swift_allocObject(v49, 17, 7) + 16) = v48;
  }
}

_QWORD *sub_100183330(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  Swift::String v60;
  Swift::String v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *inited;
  void *v82;
  unsigned __int8 v83;
  uint64_t v84;
  _QWORD v85[9];
  uint64_t v86;

  v3 = sub_100003DB8(&qword_100323B60);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  v10 = sub_100007BBC(a1, v8);
  v11 = _s3KeyCMa_0();
  v12 = sub_1000052EC(&qword_100323B68, (uint64_t (*)(uint64_t))_s3KeyCMa_0, (uint64_t)&unk_10025A028);
  dispatch thunk of Decoder.container<A>(keyedBy:)(v11, v11, v12, v8, v9);
  if (!v1)
  {
    inited = (_QWORD *)swift_initStaticObject(v11, &unk_100315D58);
    v13 = KeyedDecodingContainer.decode(_:forKey:)(&inited, v3);
    v16 = v15;
    v78 = v13;
    v17 = swift_initStaticObject(v11, &unk_100315D80);
    inited = (_QWORD *)v17;
    if ((KeyedDecodingContainer.contains(_:)(&inited, v3) & 1) != 0)
    {
      v79 = v4;
      v18 = sub_100003DB8(&qword_10031C550);
      v84 = v17;
      v19 = sub_10003418C(&qword_100323BA0, &qword_10031C550, (void (*)(void))sub_100183CE0, (uint64_t)&protocol conformance descriptor for <A> [A]);
      KeyedDecodingContainer.decode<A>(_:forKey:)(&inited, v18, &v84, v3, v18, v19);
      v80 = inited;
      v4 = v79;
    }
    else
    {
      v80 = _swiftEmptyArrayStorage;
    }
    v20 = swift_initStaticObject(v11, &unk_100315DD0);
    inited = (_QWORD *)v20;
    if ((KeyedDecodingContainer.contains(_:)(&inited, v3) & 1) != 0)
    {
      v84 = v20;
      v21 = sub_100183C80();
      KeyedDecodingContainer.decode<A>(_:forKey:)(&inited, &type metadata for JSONView, &v84, v3, &type metadata for JSONView, v21);
      v76 = v16;
      v22 = v4;
      v23 = (uint64_t)inited;
      v24 = (uint64_t)v82;
      v25 = v83;
      sub_100182C44((uint64_t)inited, v82, v83);
      v77 = v44;
      sub_100183CC4(v23, v24, v25);
      v4 = v22;
      v16 = v76;
    }
    else
    {
      v26 = type metadata accessor for NoPrerequisites();
      v77 = swift_allocObject(v26, 16, 7);
    }
    v27 = swift_initStaticObject(v11, &unk_100315E20);
    inited = (_QWORD *)v27;
    if ((KeyedDecodingContainer.contains(_:)(&inited, v3) & 1) != 0)
    {
      inited = (_QWORD *)v27;
      v28 = sub_100183C3C();
      KeyedDecodingContainer.decode<A>(_:forKey:)(&v84, &type metadata for Question.BuiltInParameters, &inited, v3, &type metadata for Question.BuiltInParameters, v28);
      v29 = v84;
    }
    else
    {
      v29 = 7;
    }
    v30 = sub_1001802D8(a1);
    v31 = v30;
    LODWORD(v76) = v29;
    v32 = *(_QWORD **)(v30 + 24);
    if (v32)
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v30 + 24));
      swift_release(v31);
      v33 = v32[2];
      v79 = v4;
      if (v33)
      {
        swift_bridgeObjectRetain(v16);
        v34 = sub_10017D3B0(v78, (uint64_t)v16);
        if ((v35 & 1) != 0)
        {
          v36 = (uint64_t *)(v32[7] + 72 * v34);
          v37 = v36[1];
          v72 = *v36;
          v73 = v37;
          v71 = v36[2];
          v38 = (_QWORD *)v36[3];
          v39 = v36[4];
          v74 = v36[5];
          v75 = v38;
          v40 = v36[7];
          v70 = v36[6];
          v68 = v40;
          v69 = v36[8];
          v41 = v69;
          swift_bridgeObjectRetain(v40);
          swift_bridgeObjectRetain(v41);
          swift_bridgeObjectRetain(v37);
          swift_bridgeObjectRetain(v75);
          swift_bridgeObjectRetain(v39);
          v42 = v74;
          swift_bridgeObjectRetain(v74);
          swift_bridgeObjectRelease(v16);
          v85[0] = v72;
          v85[1] = v73;
          v85[2] = v71;
          v85[3] = v75;
          v85[4] = v39;
          v85[5] = v42;
          v85[6] = v70;
          v85[7] = v68;
          swift_bridgeObjectRelease(v32);
          swift_bridgeObjectRelease(v69);
          inited = (_QWORD *)swift_initStaticObject(v11, &unk_100315DF8);
          v43 = sub_100183B7C();
          KeyedDecodingContainer.decode<A>(_:forKey:)(&v86, &type metadata for Question.QuestionType, &inited, v3, &type metadata for Question.QuestionType, v43);
          v72 = v39;
          LODWORD(v71) = v86;
          v63 = sub_100003DB8(&qword_100323B78);
          v84 = swift_initStaticObject(v11, &unk_100315DA8);
          v64 = sub_100183BC0();
          KeyedDecodingContainer.decode<A>(_:forKey:)(&inited, v63, &v84, v3, v63, v64);
          v65 = v79;
          v66 = (uint64_t)inited;
          v67 = type metadata accessor for Question();
          swift_allocObject(v67, 160, 7);
          v10 = (_QWORD *)sub_100085664(v78, (uint64_t)v16, v71, (uint64_t)v85, v66, v77, (uint64_t)v80, (char)v76);
          (*(void (**)(char *, uint64_t))(v65 + 8))(v7, v3);
          _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
          return v10;
        }
        swift_bridgeObjectRelease(v80);
        swift_bridgeObjectRelease(v32);
        v54 = v16;
      }
      else
      {
        swift_bridgeObjectRelease(v80);
        v54 = v32;
      }
      swift_bridgeObjectRelease(v54);
      v55 = type metadata accessor for DecodingError(0);
      swift_allocError(v55, &protocol witness table for DecodingError, 0, 0);
      v80 = v56;
      v58 = a1[3];
      v57 = a1[4];
      sub_100007BBC(a1, v58);
      v59 = dispatch thunk of Decoder.codingPath.getter(v58, v57);
      inited = 0;
      v82 = (void *)0xE000000000000000;
      _StringGuts.grow(_:)(39);
      swift_bridgeObjectRelease(v82);
      inited = (_QWORD *)0xD000000000000023;
      v82 = (void *)0x800000010026CD80;
      v60._countAndFlagsBits = v78;
      v60._object = v16;
      String.append(_:)(v60);
      swift_bridgeObjectRelease(v16);
      v61._countAndFlagsBits = 11815;
      v61._object = (void *)0xE200000000000000;
      String.append(_:)(v61);
      v10 = v80;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v59, inited, v82, 0);
      v62 = (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v55 - 8) + 104))(v10, enum case for DecodingError.dataCorrupted(_:), v55);
      swift_willThrow(v62);
      swift_release(v77);
      (*(void (**)(char *, uint64_t))(v79 + 8))(v7, v3);
    }
    else
    {
      v78 = type metadata accessor for DecodingError(0);
      swift_allocError(v78, &protocol witness table for DecodingError, 0, 0);
      v75 = v45;
      v76 = v16;
      v46 = v4;
      v48 = a1[3];
      v47 = a1[4];
      sub_100007BBC(a1, v48);
      v49 = v48;
      v50 = v46;
      v51 = v76;
      v52 = dispatch thunk of Decoder.codingPath.getter(v49, v47);
      v10 = v75;
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v52, 0xD00000000000002ELL, 0x800000010026CAE0, 0);
      v53 = (*(uint64_t (**)(_QWORD *, _QWORD))(*(_QWORD *)(v78 - 8) + 104))(v10, enum case for DecodingError.dataCorrupted(_:));
      swift_willThrow(v53);
      swift_release(v31);
      (*(void (**)(char *, uint64_t))(v50 + 8))(v7, v3);
      swift_bridgeObjectRelease(v51);
      swift_bridgeObjectRelease(v80);
      swift_release(v77);
    }
  }
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
  return v10;
}

unint64_t sub_100183B7C()
{
  unint64_t result;

  result = qword_100323B70;
  if (!qword_100323B70)
  {
    result = swift_getWitnessTable(&unk_100259D60, &type metadata for Question.QuestionType);
    atomic_store(result, (unint64_t *)&qword_100323B70);
  }
  return result;
}

unint64_t sub_100183BC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100323B80;
  if (!qword_100323B80)
  {
    v1 = sub_100007FAC(&qword_100323B78);
    sub_1000052EC(&qword_100323B88, (uint64_t (*)(uint64_t))type metadata accessor for Option, (uint64_t)&unk_100259B90);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100323B80);
  }
  return result;
}

unint64_t sub_100183C3C()
{
  unint64_t result;

  result = qword_100323B90;
  if (!qword_100323B90)
  {
    result = swift_getWitnessTable(&unk_100259BE0, &type metadata for Question.BuiltInParameters);
    atomic_store(result, (unint64_t *)&qword_100323B90);
  }
  return result;
}

unint64_t sub_100183C80()
{
  unint64_t result;

  result = qword_100323B98;
  if (!qword_100323B98)
  {
    result = swift_getWitnessTable(&unk_10025A11C, &type metadata for JSONView);
    atomic_store(result, (unint64_t *)&qword_100323B98);
  }
  return result;
}

uint64_t sub_100183CC4(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 >= 2u)
  {
    if (a3 != 2)
      return result;
    result = a2;
  }
  return swift_bridgeObjectRelease(result);
}

unint64_t sub_100183CE0()
{
  unint64_t result;

  result = qword_100323BA8;
  if (!qword_100323BA8)
  {
    result = swift_getWitnessTable(&unk_100259D00, &type metadata for Question.Flag);
    atomic_store(result, (unint64_t *)&qword_100323BA8);
  }
  return result;
}

uint64_t sub_100183D24(uint64_t result, uint64_t a2, unsigned __int8 a3)
{
  if (a3 >= 2u)
  {
    if (a3 != 2)
      return result;
    result = a2;
  }
  return swift_bridgeObjectRetain(result);
}

unint64_t sub_100183D40()
{
  unint64_t result;

  result = qword_100323BC0;
  if (!qword_100323BC0)
  {
    result = swift_getWitnessTable(&unk_100259D38, &type metadata for Question.QuestionType);
    atomic_store(result, (unint64_t *)&qword_100323BC0);
  }
  return result;
}

unint64_t sub_100183D84()
{
  unint64_t result;

  result = qword_100323BD0;
  if (!qword_100323BD0)
  {
    result = swift_getWitnessTable(&unk_100259CD8, &type metadata for Question.Flag);
    atomic_store(result, (unint64_t *)&qword_100323BD0);
  }
  return result;
}

unint64_t sub_100183DC8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100323BD8;
  if (!qword_100323BD8)
  {
    v1 = sub_100007FAC(&qword_100323B78);
    sub_1000052EC(&qword_100323BE0, (uint64_t (*)(uint64_t))type metadata accessor for Option, (uint64_t)&unk_100259B68);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_100323BD8);
  }
  return result;
}

unint64_t sub_100183E44()
{
  unint64_t result;

  result = qword_100323BF8;
  if (!qword_100323BF8)
  {
    result = swift_getWitnessTable(&unk_100259BB8, &type metadata for Question.BuiltInParameters);
    atomic_store(result, (unint64_t *)&qword_100323BF8);
  }
  return result;
}

uint64_t sub_100183E88(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;

  v3 = a1[3];
  v4 = a1[4];
  sub_100007BBC(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()(v11, v3, v4);
  if (!v1)
  {
    v5 = v12;
    v6 = v13;
    sub_100007BBC(v11, v12);
    v7 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v5, v6);
    v9 = v8;
    sub_100178CAC(v7, v8);
    swift_bridgeObjectRelease(v9);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v11);
  }
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
}

_QWORD *sub_100183F44(_QWORD *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[3];
  uint64_t v15;
  uint64_t v16;

  v5 = a1[3];
  v6 = a1[4];
  v7 = sub_100007BBC(a1, v5);
  dispatch thunk of Decoder.singleValueContainer()(v14, v5, v6);
  if (!v2)
  {
    v8 = v15;
    v9 = v16;
    sub_100007BBC(v14, v15);
    v10 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v8, v9);
    v12 = v11;
    v7 = (_QWORD *)a2(v10);
    swift_bridgeObjectRelease(v12);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v14);
  }
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
  return v7;
}

_QWORD *sub_10018402C(_QWORD *a1, uint64_t (*a2)(void))
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  char v14;
  _QWORD v15[3];
  uint64_t v16;
  uint64_t v17;

  v5 = a1[3];
  v6 = a1[4];
  v7 = sub_100007BBC(a1, v5);
  dispatch thunk of Decoder.singleValueContainer()(v15, v5, v6);
  if (!v2)
  {
    v8 = v16;
    v9 = v17;
    sub_100007BBC(v15, v16);
    v10 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v8, v9);
    v12 = v11;
    v14 = sub_100178F1C(v10, v11, a2);
    swift_bridgeObjectRelease(v12);
    v7 = (_QWORD *)(v14 & 1);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v15);
  }
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
  return v7;
}

unint64_t sub_10018411C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t inited;
  uint64_t v17;

  v3 = sub_100003DB8(&qword_100323C00);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  v10 = (unint64_t)sub_100007BBC(a1, v8);
  v11 = _s3KeyCMa_1();
  v12 = sub_1000052EC(&qword_100323C08, (uint64_t (*)(uint64_t))_s3KeyCMa_1, (uint64_t)&unk_10025A028);
  dispatch thunk of Decoder.container<A>(keyedBy:)(v11, v11, v12, v8, v9);
  if (v1)
  {
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
  }
  else
  {
    inited = swift_initStaticObject(v11, &unk_100315E48);
    v13 = sub_10018427C();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, &type metadata for Question.BuiltInId, &inited, v3, &type metadata for Question.BuiltInId, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v10 = v17;
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
  }
  return v10;
}

unint64_t sub_10018427C()
{
  unint64_t result;

  result = qword_100323C10;
  if (!qword_100323C10)
  {
    result = swift_getWitnessTable(&unk_100259CA0, &type metadata for Question.BuiltInId);
    atomic_store(result, (unint64_t *)&qword_100323C10);
  }
  return result;
}

unint64_t sub_1001842C0()
{
  unint64_t result;

  result = qword_100323C20;
  if (!qword_100323C20)
  {
    result = swift_getWitnessTable(&unk_100259C78, &type metadata for Question.BuiltInId);
    atomic_store(result, (unint64_t *)&qword_100323C20);
  }
  return result;
}

uint64_t sub_100184304(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t, _QWORD, uint64_t);
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t inited;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  uint64_t v68;

  v58 = sub_100003DB8(&qword_100323C28);
  v2 = *(_QWORD *)(v58 - 8);
  v4 = __chkstk_darwin(v58, v3);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  v9 = (char *)&v55 - v8;
  v11 = a1[3];
  v10 = a1[4];
  v60 = a1;
  sub_100007BBC(a1, v11);
  v12 = _s3KeyCMa_2();
  v13 = sub_1000052EC(&qword_100323C30, (uint64_t (*)(uint64_t))_s3KeyCMa_2, (uint64_t)&unk_10025A028);
  v14 = v59;
  dispatch thunk of Decoder.container<A>(keyedBy:)(v12, v12, v13, v11, v10);
  if (v14)
  {
    v17 = v60;
  }
  else
  {
    v57 = (char *)v13;
    v59 = v2;
    inited = swift_initStaticObject(v12, &unk_100315E70);
    v15 = v58;
    v16 = KeyedDecodingContainer.decode(_:forKey:)(&inited, v58);
    v20 = v19;
    v56 = v16;
    v21 = swift_initStaticObject(v12, &unk_100315E98);
    inited = v21;
    if ((KeyedDecodingContainer.contains(_:)(&inited, v15) & 1) != 0)
    {
      inited = v21;
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)(v12, &inited, v15, v12, v57);
      inited = swift_initStaticObject(v12, &unk_100315EC0);
      v32 = sub_1001848AC();
      KeyedDecodingContainer.decode<A>(_:forKey:)(&v68, &type metadata for Option.InputType, &inited, v15, &type metadata for Option.InputType, v32);
      v57 = v9;
      v44 = v68;
      inited = swift_initStaticObject(v12, &unk_100315EE8);
      v45 = KeyedDecodingContainer.decode(_:forKey:)(&inited, v15);
      v17 = v60;
      v54 = v45;
      v10 = v20;
      (*(void (**)(char *, uint64_t))(v59 + 8))(v6, v15);
    }
    else
    {
      v10 = v20;
      v57 = v9;
      v44 = 0;
      v54 = 40;
      v17 = v60;
    }
    v22 = sub_1001802D8(v17);
    v23 = v22;
    v24 = *(_QWORD *)(v22 + 24);
    if (v24)
    {
      v25 = *(_BYTE *)(v22 + 56);
      v26 = *(_QWORD *)(v22 + 48);
      v63 = *(_QWORD *)(v22 + 16);
      v64 = v24;
      v65 = *(_OWORD *)(v22 + 32);
      v66 = v26;
      v67 = v25 & 1;
      swift_bridgeObjectRetain(v24);
      swift_release(v23);
      v27 = (void *)v10;
      sub_100179264(v56, v10);
      v29 = v28;
      v30 = swift_bridgeObjectRelease(v24);
      if (v29)
      {
        (*(void (**)(char *, uint64_t, __n128))(v59 + 8))(v57, v15, v30);
        v31 = type metadata accessor for Option();
        v10 = swift_allocObject(v31, 56, 7);
        *(_QWORD *)(v10 + 16) = v56;
        *(_QWORD *)(v10 + 24) = v27;
        *(_QWORD *)(v10 + 32) = v29;
        *(_BYTE *)(v10 + 40) = v44;
        *(_QWORD *)(v10 + 48) = v54;
        _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v17);
        return v10;
      }
      v46 = type metadata accessor for DecodingError(0);
      swift_allocError(v46, &protocol witness table for DecodingError, 0, 0);
      v48 = v47;
      v49 = v17[3];
      v50 = v17[4];
      sub_100007BBC(v17, v49);
      v10 = dispatch thunk of Decoder.codingPath.getter(v49, v50);
      inited = 0;
      v62 = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease(v62);
      inited = 0xD000000000000021;
      v62 = 0x800000010026CFB0;
      v51._countAndFlagsBits = v56;
      v51._object = v27;
      String.append(_:)(v51);
      swift_bridgeObjectRelease(v27);
      v52._countAndFlagsBits = 11815;
      v52._object = (void *)0xE200000000000000;
      String.append(_:)(v52);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v10, inited, v62, 0);
      v53 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v46 - 8) + 104))(v48, enum case for DecodingError.dataCorrupted(_:), v46);
      swift_willThrow(v53);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v57, v15);
    }
    else
    {
      v33 = v15;
      v34 = type metadata accessor for DecodingError(0);
      swift_allocError(v34, &protocol witness table for DecodingError, 0, 0);
      v36 = v35;
      v37 = v60[3];
      v38 = v60[4];
      sub_100007BBC(v60, v37);
      v39 = dispatch thunk of Decoder.codingPath.getter(v37, v38);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(v39, 0xD00000000000002ELL, 0x800000010026CAE0, 0);
      v40 = *(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v34 - 8) + 104);
      v41 = v34;
      v42 = v33;
      v17 = v60;
      v43 = v40(v36, enum case for DecodingError.dataCorrupted(_:), v41);
      swift_willThrow(v43);
      swift_release(v23);
      (*(void (**)(char *, uint64_t))(v59 + 8))(v57, v42);
      swift_bridgeObjectRelease(v10);
    }
  }
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v17);
  return v10;
}

unint64_t sub_1001848AC()
{
  unint64_t result;

  result = qword_100323C38;
  if (!qword_100323C38)
  {
    result = swift_getWitnessTable(&unk_100259B40, &type metadata for Option.InputType);
    atomic_store(result, (unint64_t *)&qword_100323C38);
  }
  return result;
}

unint64_t sub_1001848F0()
{
  unint64_t result;

  result = qword_100323C48;
  if (!qword_100323C48)
  {
    result = swift_getWitnessTable(&unk_100259B18, &type metadata for Option.InputType);
    atomic_store(result, (unint64_t *)&qword_100323C48);
  }
  return result;
}

uint64_t sub_100184934(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = sub_100003DB8(&qword_100323C50);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100007BBC(a1, v8);
  v10 = type metadata accessor for QuestionnaireStringsBundle.Key();
  v11 = sub_1000052EC(&qword_100323C58, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireStringsBundle.Key, (uint64_t)&unk_10025A028);
  dispatch thunk of Decoder.container<A>(keyedBy:)(v10, v10, v11, v8, v9);
  if (v1)
  {
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
  }
  else
  {
    inited = swift_initStaticObject(v10, &unk_100315F10);
    v19 = inited;
    if ((KeyedDecodingContainer.contains(_:)(&v19, v3) & 1) != 0)
    {
      v19 = inited;
      v9 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v3);
      v15 = v14;
    }
    else
    {
      v9 = 0;
      v15 = 0;
    }
    swift_bridgeObjectRetain(v15);
    v19 = swift_initStaticObject(v10, &unk_100315F38);
    KeyedDecodingContainer.decode(_:forKey:)(&v19, v3);
    v17 = v16;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    swift_bridgeObjectRetain(v17);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
    swift_bridgeObjectRelease(v17);
    swift_bridgeObjectRelease(v15);
  }
  return v9;
}

_QWORD *sub_100184B48(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t inited;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  int64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  _QWORD v58[5];
  uint64_t v59;

  v3 = sub_100003DB8(&qword_100323C68);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = (_QWORD *)a1[4];
  sub_100007BBC(a1, v8);
  v10 = type metadata accessor for QuestionnaireRepresentation.Key();
  v11 = sub_1000052EC(&qword_100323C70, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireRepresentation.Key, (uint64_t)&unk_10025A028);
  dispatch thunk of Decoder.container<A>(keyedBy:)(v10, v10, v11, v8, v9);
  if (!v1)
  {
    inited = swift_initStaticObject(v10, &unk_100315F60);
    v52 = (_QWORD *)inited;
    if ((KeyedDecodingContainer.contains(_:)(&v52, v3) & 1) != 0)
    {
      v58[0] = inited;
      v13 = sub_1001850C8();
      KeyedDecodingContainer.decode<A>(_:forKey:)(&v52, &type metadata for QuestionnaireRevision, v58, v3, &type metadata for QuestionnaireRevision, v13);
      v9 = v52;
      v14 = v53;
    }
    else
    {
      v9 = 0;
      v14 = 0;
    }
    v15 = sub_1001800C4(a1);
    *(_QWORD *)(v15 + 16) = v9;
    *(_QWORD *)(v15 + 24) = v14;
    *(_BYTE *)(v15 + 32) = 0;
    swift_release(v15);
    if (v9 == (_QWORD *)1)
    {
      sub_1001775C8(a1, (uint64_t)v58);
      v49 = v14;
      v17 = sub_100003DB8(&qword_100323C78);
      v59 = swift_initStaticObject(v10, &unk_100316000);
      v18 = sub_10003418C(&qword_100323C80, &qword_100323C78, (void (*)(void))sub_100185040, (uint64_t)&protocol conformance descriptor for <A> [A]);
      KeyedDecodingContainer.decode<A>(_:forKey:)(&v52, v17, &v59, v3, v17, v18);
      v48 = v4;
      v19 = v52;
      v20 = sub_100007BBC(v58, v58[3]);
      v21 = v20;
      v22 = v19[2];
      if (v22)
      {
        v45 = v20;
        v46 = 1;
        v47 = v3;
        v52 = _swiftEmptyArrayStorage;
        v23 = v19;
        sub_10017E340(0, v22, 0);
        v24 = v52;
        v44 = v23;
        v25 = v23 + 7;
        do
        {
          v26 = *(v25 - 1);
          v27 = *v25;
          v52 = v24;
          v29 = v24[2];
          v28 = v24[3];
          v50 = v26;
          v51 = v29 + 1;
          swift_bridgeObjectRetain(v27);
          if (v29 >= v28 >> 1)
          {
            sub_10017E340(v28 > 1, v51, 1);
            v24 = v52;
          }
          v30 = v50;
          v24[2] = v51;
          v31 = &v24[2 * v29];
          v31[4] = v30;
          v31[5] = v27;
          v25 += 4;
          --v22;
        }
        while (v22);
        swift_bridgeObjectRelease(v44);
        v9 = (_QWORD *)v46;
        v3 = v47;
        v21 = v45;
      }
      else
      {
        swift_bridgeObjectRelease(v19);
        v24 = _swiftEmptyArrayStorage;
      }
      v32 = *(_QWORD *)(*v21 + 24);
      *(_QWORD *)(*v21 + 24) = v24;
      swift_bridgeObjectRelease(v32);
      v52 = (_QWORD *)swift_initStaticObject(v10, &unk_100315F88);
      KeyedDecodingContainer.decode(_:forKey:)(&v52, v3);
      v59 = swift_initStaticObject(v10, &unk_100315FD8);
      v33 = sub_100185084();
      KeyedDecodingContainer.decode<A>(_:forKey:)(&v52, &type metadata for QuestionnairePresentationBuddy, &v59, v3, &type metadata for QuestionnairePresentationBuddy, v33);
      v46 = (uint64_t)v9;
      v47 = v3;
      v35 = v52;
      v34 = v53;
      v36 = v54;
      v37 = v55;
      v38 = v56;
      LODWORD(v51) = v57;
      v39 = sub_1001802D8(a1);
      v50 = *(_QWORD *)(v39 + 24);
      *(_QWORD *)(v39 + 16) = v35;
      *(_QWORD *)(v39 + 24) = v34;
      *(_QWORD *)(v39 + 32) = v36;
      *(_QWORD *)(v39 + 40) = v37;
      *(_QWORD *)(v39 + 48) = v38;
      *(_BYTE *)(v39 + 56) = v51;
      swift_release(v39);
      swift_bridgeObjectRelease(v50);
      v40 = type metadata accessor for Questionnaire();
      v59 = swift_initStaticObject(v10, &unk_100315FB0);
      v41 = sub_1000052EC(&qword_100323C98, (uint64_t (*)(uint64_t))type metadata accessor for Questionnaire, (uint64_t)&unk_100259E00);
      v42 = v47;
      KeyedDecodingContainer.decode<A>(_:forKey:)(&v52, v40, &v59, v47, v40, v41);
      (*(void (**)(char *, uint64_t))(v48 + 8))(v7, v42);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v58);
      v9 = (_QWORD *)v46;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    }
  }
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
  return v9;
}

unint64_t sub_100185040()
{
  unint64_t result;

  result = qword_100323C88;
  if (!qword_100323C88)
  {
    result = swift_getWitnessTable(&unk_100259A80, &type metadata for QuestionnaireStringsBundle);
    atomic_store(result, (unint64_t *)&qword_100323C88);
  }
  return result;
}

unint64_t sub_100185084()
{
  unint64_t result;

  result = qword_100323C90;
  if (!qword_100323C90)
  {
    result = swift_getWitnessTable(&unk_100259F50, &type metadata for QuestionnairePresentationBuddy);
    atomic_store(result, (unint64_t *)&qword_100323C90);
  }
  return result;
}

unint64_t sub_1001850C8()
{
  unint64_t result;

  result = qword_100323CA0;
  if (!qword_100323CA0)
  {
    result = swift_getWitnessTable(&unk_10025A0A0, &type metadata for QuestionnaireRevision);
    atomic_store(result, (unint64_t *)&qword_100323CA0);
  }
  return result;
}

unint64_t sub_10018510C()
{
  unint64_t result;

  result = qword_100323CB8;
  if (!qword_100323CB8)
  {
    result = swift_getWitnessTable(&unk_10025A078, &type metadata for QuestionnaireRevision);
    atomic_store(result, (unint64_t *)&qword_100323CB8);
  }
  return result;
}

unint64_t sub_100185150()
{
  unint64_t result;

  result = qword_100323CC8;
  if (!qword_100323CC8)
  {
    result = swift_getWitnessTable(&unk_100259F28, &type metadata for QuestionnairePresentationBuddy);
    atomic_store(result, (unint64_t *)&qword_100323CC8);
  }
  return result;
}

unint64_t sub_100185194()
{
  unint64_t result;

  result = qword_100323CD8;
  if (!qword_100323CD8)
  {
    result = swift_getWitnessTable(&unk_100259A58, &type metadata for QuestionnaireStringsBundle);
    atomic_store(result, (unint64_t *)&qword_100323CD8);
  }
  return result;
}

_QWORD *sub_1001851D8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  char isUniquelyReferenced_nonNull_native;
  __n128 v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t inited;
  _QWORD *v30;

  v3 = sub_100003DB8(&qword_100323CE0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  v10 = sub_100007BBC(a1, v8);
  v11 = type metadata accessor for QuestionnaireRegion.Key();
  v12 = sub_1000052EC(&qword_100323CE8, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireRegion.Key, (uint64_t)&unk_10025A028);
  dispatch thunk of Decoder.container<A>(keyedBy:)(v11, v11, v12, v8, v9);
  if (v1)
  {
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
  }
  else
  {
    v13 = sub_100003DB8(&qword_100323CF0);
    inited = swift_initStaticObject(v11, &unk_100316028);
    v14 = sub_10003418C(&qword_100323CF8, &qword_100323CF0, (void (*)(void))sub_100185440, (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, v13, &inited, v3, v13, v14);
    v26 = v4;
    v27 = v3;
    v16 = v30[2];
    v25 = v30;
    if (v16)
    {
      v17 = v30 + 6;
      v10 = _swiftEmptyArrayStorage;
      do
      {
        v21 = *v17;
        if (*v17)
        {
          v28 = *((_OWORD *)v17 - 1);
          swift_retain(v21);
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
          v30 = v10;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_10017E404(0, v10[2] + 1, 1);
            v10 = v30;
          }
          v19 = v10[2];
          v18 = v10[3];
          if (v19 >= v18 >> 1)
          {
            sub_10017E404(v18 > 1, v19 + 1, 1);
            v10 = v30;
          }
          v10[2] = v19 + 1;
          v20 = &v10[3 * v19];
          *((_OWORD *)v20 + 2) = v28;
          v20[6] = v21;
        }
        v17 += 3;
        --v16;
      }
      while (v16);
    }
    else
    {
      v10 = _swiftEmptyArrayStorage;
    }
    v23 = swift_bridgeObjectRelease(v25);
    (*(void (**)(char *, uint64_t, __n128))(v26 + 8))(v7, v27, v23);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
  }
  return v10;
}

unint64_t sub_100185440()
{
  unint64_t result;

  result = qword_100323D00;
  if (!qword_100323D00)
  {
    result = swift_getWitnessTable(&unk_100259A30, &type metadata for QuestionnaireRepresentation);
    atomic_store(result, (unint64_t *)&qword_100323D00);
  }
  return result;
}

unint64_t sub_100185484()
{
  unint64_t result;

  result = qword_100323D20;
  if (!qword_100323D20)
  {
    result = swift_getWitnessTable(&unk_100259A08, &type metadata for QuestionnaireRepresentation);
    atomic_store(result, (unint64_t *)&qword_100323D20);
  }
  return result;
}

uint64_t sub_1001854C8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, _QWORD, uint64_t);
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  void (*v27)(_BYTE *, _QWORD);
  uint64_t v28;
  uint64_t v29;
  _OWORD *v30;
  void (*v31)(_BYTE *, _QWORD);
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t (*v36)(_BYTE *, _QWORD);
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD v58[2];
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _BYTE v65[32];
  _QWORD v66[3];
  uint64_t v67;
  uint64_t v68;

  v60 = a3;
  v63 = a1;
  v64 = a2;
  v68 = type metadata accessor for String.Encoding(0);
  v62 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68, v3);
  v61 = (char *)v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CodingUserInfoKey(0);
  v59 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v8 = (char *)v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for JSONDecoder.KeyDecodingStrategy(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for JSONDecoder.DataDecodingStrategy(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for JSONDecoder(0);
  swift_allocObject(v19, *(unsigned int *)(v19 + 48), *(unsigned __int16 *)(v19 + 52));
  v20 = JSONDecoder.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for JSONDecoder.DataDecodingStrategy.base64(_:), v14);
  dispatch thunk of JSONDecoder.dataDecodingStrategy.setter(v18);
  v21 = *(void (**)(char *, _QWORD, uint64_t))(v10 + 104);
  v22 = v20;
  v21(v13, enum case for JSONDecoder.KeyDecodingStrategy.useDefaultKeys(_:), v9);
  dispatch thunk of JSONDecoder.keyDecodingStrategy.setter(v13);
  if (qword_100315900 != -1)
    swift_once(&qword_100315900, sub_100177480);
  v23 = sub_10000D744(v5, (uint64_t)qword_10033FFA0);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v59 + 16);
  v24(v8, v23, v5);
  v25 = type metadata accessor for QuestionnaireRevisionContainer();
  v26 = swift_allocObject(v25, 33, 7);
  *(_QWORD *)(v26 + 16) = 0;
  *(_QWORD *)(v26 + 24) = 0;
  *(_BYTE *)(v26 + 32) = 1;
  v67 = v25;
  v66[0] = v26;
  v27 = (void (*)(_BYTE *, _QWORD))dispatch thunk of JSONDecoder.userInfo.modify(v65);
  sub_100176D80((uint64_t)v66, (uint64_t)v8);
  v27(v65, 0);
  if (qword_100315910 != -1)
    swift_once(&qword_100315910, sub_1001774C8);
  v28 = sub_10000D744(v5, (uint64_t)qword_10033FFD0);
  v24(v8, v28, v5);
  v29 = type metadata accessor for QuestionnairePresentationBuddyContainer();
  v30 = (_OWORD *)swift_allocObject(v29, 57, 7);
  v30[1] = 0u;
  v30[2] = 0u;
  *(_OWORD *)((char *)v30 + 41) = 0u;
  swift_bridgeObjectRelease(0);
  v67 = v29;
  v66[0] = v30;
  v31 = (void (*)(_BYTE *, _QWORD))dispatch thunk of JSONDecoder.userInfo.modify(v65);
  sub_100176D80((uint64_t)v66, (uint64_t)v8);
  v31(v65, 0);
  if (qword_100315908 != -1)
    swift_once(&qword_100315908, sub_1001774A4);
  v32 = sub_10000D744(v5, (uint64_t)qword_10033FFB8);
  v24(v8, v32, v5);
  v33 = v60[3];
  v34 = sub_100007BBC(v60, v33);
  v67 = v33;
  v35 = sub_10010CD10(v66);
  (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v33 - 8) + 16))(v35, v34, v33);
  v36 = (uint64_t (*)(_BYTE *, _QWORD))dispatch thunk of JSONDecoder.userInfo.modify(v65);
  sub_100176D80((uint64_t)v66, (uint64_t)v8);
  v37 = v36(v65, 0);
  v38 = v61;
  static String.Encoding.utf8.getter(v37);
  v39 = String.data(using:allowLossyConversion:)(v38, 0, v63, v64);
  v41 = v40;
  (*(void (**)(char *, uint64_t))(v62 + 8))(v38, v68);
  if (v41 >> 60 == 15)
  {
    v42 = type metadata accessor for DecodingError(0);
    swift_allocError(v42, &protocol witness table for DecodingError, 0, 0);
    v44 = v43;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(_swiftEmptyArrayStorage, 0xD000000000000025, 0x800000010026D050, 0);
    v45 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v42 - 8) + 104))(v44, enum case for DecodingError.dataCorrupted(_:), v42);
    swift_willThrow(v45);
LABEL_20:
    swift_release(v22);
    return v42;
  }
  v46 = sub_100185E88();
  v42 = v22;
  v47 = v58[1];
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v66, &type metadata for QuestionnaireRegion, v39, v41, &type metadata for QuestionnaireRegion, v46);
  if (v47)
  {
LABEL_19:
    sub_10000D730(v39, v41);
    goto LABEL_20;
  }
  v48 = v66[0];
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v49 = type metadata accessor for Logger(0);
  v50 = sub_10000D744(v49, (uint64_t)qword_10033FEC8);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v53 = 0;
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Successfully created questionnaire region instance from JSON", v53, 2u);
    swift_slowDealloc(v53, -1, -1);
  }

  if (!*(_QWORD *)(v48 + 16))
  {
    swift_bridgeObjectRelease(v48);
    goto LABEL_18;
  }
  v42 = *(_QWORD *)(v48 + 48);
  swift_retain(v42);
  swift_bridgeObjectRelease(v48);
  if (!v42)
  {
LABEL_18:
    v42 = type metadata accessor for DecodingError(0);
    swift_allocError(v42, &protocol witness table for DecodingError, 0, 0);
    v55 = v54;
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)(_swiftEmptyArrayStorage, 0xD000000000000033, 0x800000010026D080, 0);
    v56 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v42 - 8) + 104))(v55, enum case for DecodingError.dataCorrupted(_:), v42);
    swift_willThrow(v56);
    goto LABEL_19;
  }
  sub_10000D730(v39, v41);
  swift_release(v22);
  return v42;
}

id sub_100185AEC(id a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  NSString v11;
  NSString v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39[5];
  uint64_t v40;
  uint64_t v41;

  v7 = type metadata accessor for String.Encoding(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = String._bridgeToObjectiveC()();
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(a1, "pathForResource:ofType:", v11, v12);

  if (v13)
  {
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

    static String.Encoding.utf8.getter(v17);
    v18 = String.init(contentsOfFile:encoding:)(v14, v16, v10);
    if (v3)
    {
      swift_bridgeObjectRelease(v16);
    }
    else
    {
      v27 = v18;
      v28 = v19;
      swift_bridgeObjectRelease(v16);
      v29 = type metadata accessor for BundleTranslationProvider();
      v30 = swift_allocObject(v29, 32, 7);
      *(_QWORD *)(v30 + 16) = a1;
      *(_QWORD *)(v30 + 24) = _swiftEmptyArrayStorage;
      v39[3] = v29;
      v39[4] = (uint64_t)&off_1002F48C0;
      v39[0] = v30;
      v31 = a1;
      a1 = (id)sub_1001854C8(v27, v28, v39);
      swift_bridgeObjectRelease(v28);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v39);
    }
  }
  else
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v20 = type metadata accessor for Logger(0);
    sub_10000D744(v20, (uint64_t)qword_10033FEC8);
    v22 = swift_bridgeObjectRetain_n(a3, 2, v21);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc(22, -1);
      v26 = swift_slowAlloc(64, -1);
      v39[0] = v26;
      *(_DWORD *)v25 = 136446466;
      swift_bridgeObjectRetain(a3);
      v40 = sub_100172BEC(a2, a3, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v25 + 4, v25 + 12);
      swift_bridgeObjectRelease_n(a3, 3);
      *(_WORD *)(v25 + 12) = 2082;
      v40 = sub_100172BEC(1852797802, 0xE400000000000000, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v25 + 14, v25 + 22);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to retrieve resource file name for %{public}s.%{public}s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a3, 2);
    }
    a1 = objc_msgSend(a1, "bundlePath");
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    v34 = v33;

    v35 = sub_10008BA68();
    v36 = swift_allocError(&type metadata for QuestionnaireError, v35, 0, 0);
    *(_QWORD *)v37 = v32;
    *(_QWORD *)(v37 + 8) = v34;
    *(_QWORD *)(v37 + 16) = 0;
    *(_QWORD *)(v37 + 24) = 0;
    *(_BYTE *)(v37 + 32) = 16;
    swift_willThrow(v36);
  }
  return a1;
}

unint64_t sub_100185E88()
{
  unint64_t result;

  result = qword_100323D28;
  if (!qword_100323D28)
  {
    result = swift_getWitnessTable(&unk_1002599E0, &type metadata for QuestionnaireRegion);
    atomic_store(result, (unint64_t *)&qword_100323D28);
  }
  return result;
}

uint64_t destroy for JSONView(uint64_t a1)
{
  return sub_100183CC4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s8SOSBuddy8JSONViewOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100183D24(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for JSONView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  sub_100183D24(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  sub_100183CC4(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for JSONView(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  sub_100183CC4(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for JSONView(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for JSONView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t sub_10018604C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t sub_100186054(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for JSONView()
{
  return &type metadata for JSONView;
}

uint64_t getEnumTagSinglePayload for QuestionnaireStringsBundle(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnaireStringsBundle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionnaireStringsBundle()
{
  return &type metadata for QuestionnaireStringsBundle;
}

ValueMetadata *type metadata accessor for QuestionnaireRegion()
{
  return &type metadata for QuestionnaireRegion;
}

ValueMetadata *type metadata accessor for QuestionnairePresentationBuddyAutoSendPolicy()
{
  return &type metadata for QuestionnairePresentationBuddyAutoSendPolicy;
}

uint64_t destroy for QuestionPresentationBuddy(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[7]);
  return swift_bridgeObjectRelease(a1[8]);
}

_QWORD *initializeWithCopy for QuestionPresentationBuddy(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[4];
  v6 = a2[5];
  a1[4] = v5;
  a1[5] = v6;
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  v8 = a2[8];
  a1[8] = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

_QWORD *assignWithCopy for QuestionPresentationBuddy(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a1[5];
  v11 = a2[5];
  a1[5] = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v10);
  a1[6] = a2[6];
  v12 = a2[7];
  v13 = a1[7];
  a1[7] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a2[8];
  v15 = a1[8];
  a1[8] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

_QWORD *assignWithTake for QuestionPresentationBuddy(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  v6 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v6);
  v7 = a1[5];
  a1[5] = *(_QWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v7);
  a1[6] = *(_QWORD *)(a2 + 48);
  swift_bridgeObjectRelease(a1[7]);
  v8 = a1[8];
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionPresentationBuddy(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionPresentationBuddy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionPresentationBuddy()
{
  return &type metadata for QuestionPresentationBuddy;
}

ValueMetadata *type metadata accessor for OptionPresentationBuddy()
{
  return &type metadata for OptionPresentationBuddy;
}

ValueMetadata *type metadata accessor for QuestionnaireRepresentation()
{
  return &type metadata for QuestionnaireRepresentation;
}

unint64_t sub_100186410()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100323D50;
  if (!qword_100323D50)
  {
    v1 = sub_100007FAC(&qword_100323D48);
    sub_100183C80();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_100323D50);
  }
  return result;
}

uint64_t sub_100186480(uint64_t result, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[7];

  v4 = v2[7];
  if (v4)
  {
    v5 = v2;
    v6 = result;
    v7 = (uint64_t)(v2 + 6);
    v8 = v2[6];
    v9 = v8 == v6 && v4 == a2;
    if (v9 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v4, v6, a2, 0), (result & 1) != 0))
    {
      if (qword_100315820 != -1)
        swift_once(&qword_100315820, sub_1000D95E4);
      v10 = type metadata accessor for Logger(0);
      sub_10000D744(v10, (uint64_t)qword_10033FD18);
      v12 = swift_bridgeObjectRetain_n(a2, 2, v11);
      v13 = Logger.logObject.getter(v12);
      v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        v15 = (uint8_t *)swift_slowAlloc(12, -1);
        v16 = swift_slowAlloc(32, -1);
        v35[0] = v16;
        *(_DWORD *)v15 = 136315138;
        swift_bridgeObjectRetain(a2);
        v33 = sub_100172BEC(v6, a2, v35);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v15 + 4, v15 + 12);
        swift_bridgeObjectRelease_n(a2, 3);
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Canceling alert with id == %s", v15, 0xCu);
        swift_arrayDestroy(v16, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v16, -1, -1);
        swift_slowDealloc(v15, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n(a2, 2);
      }
      sub_10000B458(v7, (uint64_t)&v33, &qword_100323E40);
      v17 = v5[6];
      v18 = v5[7];
      v19 = v5[8];
      v20 = v5[9];
      v21 = v5[10];
      v22 = v5[11];
      v23 = v5[12];
      sub_10000B458((uint64_t)&v33, (uint64_t)v35, &qword_100323E40);
      if (v35[1])
      {
        sub_1001878A4(&v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001878DC);
        swift_bridgeObjectRetain(v18);
        swift_bridgeObjectRetain(v20);
        swift_bridgeObjectRetain(v22);
        swift_bridgeObjectRetain(v23);
        sub_1001877B0(v17, v18, v19, v20, v21, v22, v23);
        sub_1001877B0(0, 0, 0, 0, 0, 0, 0);
        v24 = sub_100003DB8(&qword_10032B0E0);
        v25 = sub_100016B20();
        Subject<>.send()(v24, v25);
      }
      v26 = v5[6];
      v27 = v5[7];
      v28 = v5[8];
      v29 = v5[9];
      v30 = v5[10];
      v31 = v5[11];
      v32 = v5[12];
      *(_OWORD *)v7 = 0u;
      *(_OWORD *)(v7 + 16) = 0u;
      *(_OWORD *)(v7 + 32) = 0u;
      *(_QWORD *)(v7 + 48) = 0;
      sub_1001877B0(v26, v27, v28, v29, v30, v31, v32);
      sub_100186F58(&v33);
      return (uint64_t)sub_1001878A4(&v33, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001877B0);
    }
  }
  return result;
}

uint64_t sub_100186770(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  v5 = a1[1];
  v6 = a2[1];
  if (v4 == *a2 && v5 == v6)
    return 1;
  else
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0);
}

_QWORD *sub_1001867A0(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[7];
  _BYTE v30[8];
  uint64_t v31;
  _QWORD v32[7];
  _BYTE v33[8];
  uint64_t v34;

  v2 = v1;
  sub_10000B458((uint64_t)a1, (uint64_t)v29, &qword_100323E40);
  v5 = v29[0];
  v4 = v29[1];
  v24 = v29[3];
  v25 = v29[2];
  v22 = v29[5];
  v23 = v29[4];
  v21 = v29[6];
  v28 = (uint64_t)(v1 + 6);
  sub_10000B458((uint64_t)(v1 + 6), (uint64_t)v32, &qword_100323E40);
  v6 = v1[6];
  v7 = v1[7];
  v8 = v1[8];
  v10 = v2[9];
  v9 = v2[10];
  v26 = v2[11];
  v27 = v2[12];
  sub_10000B458((uint64_t)v32, (uint64_t)v33, &qword_100323E40);
  if (!v34)
  {
    sub_10000B458((uint64_t)a1, (uint64_t)v30, &qword_100323E40);
    if (!v31)
      goto LABEL_10;
    goto LABEL_8;
  }
  sub_10000B458((uint64_t)a1, (uint64_t)v30, &qword_100323E40);
  if (!v31)
  {
LABEL_8:
    sub_1001878A4(v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001878DC);
    sub_1001878A4(v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001878DC);
    sub_1001878A4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001878DC);
    sub_1001877B0(v6, v7, v8, v10, v9, v26, v27);
    sub_1001877B0(v5, v4, v25, v24, v23, v22, v21);
LABEL_9:
    v11 = sub_100003DB8(&qword_10032B0E0);
    v12 = sub_100016B20();
    Subject<>.send()(v11, v12);
    goto LABEL_10;
  }
  if ((v6 != v5 || v7 != v4) && (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v5, v4, 0) & 1) == 0)
  {
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v10);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRetain(v27);
    goto LABEL_9;
  }
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRetain(v27);
LABEL_10:
  v13 = v2[6];
  v14 = v2[7];
  v15 = v2[8];
  v16 = v2[9];
  v17 = v2[10];
  v18 = v2[11];
  v19 = v2[12];
  sub_10000B458((uint64_t)a1, v28, &qword_100323E40);
  sub_1001877B0(v13, v14, v15, v16, v17, v18, v19);
  sub_100186F58(v32);
  return sub_1001878A4(v32, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001877B0);
}

void sub_1001869F8(uint64_t *a1@<X0>, Swift::String *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  Swift::String v7;
  void *object;
  void *v9;
  void *v10;
  id v11;
  Swift::String v12;
  Swift::String_optional v13;
  Swift::String v14;
  Swift::String v15;
  id v16;
  Swift::String v17;
  Swift::String_optional v18;
  Swift::String v19;
  Swift::String v20;
  id v21;
  Swift::String v22;
  Swift::String_optional v23;
  Swift::String v24;
  Swift::String v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD v35[2];
  uint64_t v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;

  v35[0] = 0;
  v35[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease(0xE000000000000000);
  v33 = 0xD000000000000014;
  v34 = 0x800000010026D160;
  sub_10000B458((uint64_t)a1, (uint64_t)v35, &qword_100319D68);
  v4 = v35[0];
  if (!v36)
    v4 = 0;
  v31 = v4;
  v32 = v36 == 0;
  v5 = sub_100003DB8(&qword_100319D40);
  v7._countAndFlagsBits = String.init<A>(describing:)(&v31, v5, v6);
  object = v7._object;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(object);
  v9 = (void *)v34;
  v30 = v33;
  v10 = (void *)objc_opt_self(NSBundle);
  v11 = objc_msgSend(v10, "mainBundle");
  v37._countAndFlagsBits = 0xD000000000000067;
  v37._object = (void *)0x800000010026D1A0;
  v12._object = (void *)0x800000010026D180;
  v12._countAndFlagsBits = 0xD000000000000012;
  v13.value._countAndFlagsBits = 0xD000000000000012;
  v13.value._object = (void *)0x80000001002621B0;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, (NSBundle)v11, v14, v37);

  v16 = objc_msgSend(v10, "mainBundle");
  v17._countAndFlagsBits = 0xD000000000000038;
  v38._countAndFlagsBits = 0xD00000000000006ALL;
  v38._object = (void *)0x800000010026D250;
  v17._object = (void *)0x800000010026D210;
  v18.value._countAndFlagsBits = 0xD000000000000012;
  v18.value._object = (void *)0x80000001002621B0;
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v17, v18, (NSBundle)v16, v19, v38);

  v21 = objc_msgSend(v10, "mainBundle");
  v22._countAndFlagsBits = 0xD000000000000011;
  v39._countAndFlagsBits = 0xD000000000000030;
  v39._object = (void *)0x800000010026D2C0;
  v22._object = (void *)0x8000000100263FB0;
  v23.value._countAndFlagsBits = 0xD000000000000012;
  v23.value._object = (void *)0x80000001002621B0;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  v25 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, v23, (NSBundle)v21, v24, v39);

  v26 = sub_100003DB8(&qword_100323E38);
  v27 = swift_allocObject(v26, 64, 7);
  *(_OWORD *)(v27 + 16) = xmmword_10024E070;
  v28 = swift_allocObject(&unk_1002F4D38, 24, 7);
  swift_weakInit(v28 + 16);
  v29 = (_QWORD *)swift_allocObject(&unk_1002F4D60, 80, 7);
  v29[2] = v28;
  sub_10000B458((uint64_t)a1, (uint64_t)(v29 + 3), &qword_100319D68);
  v29[8] = v30;
  v29[9] = v9;
  *(Swift::String *)(v27 + 32) = v25;
  *(_QWORD *)(v27 + 48) = sub_100187864;
  *(_QWORD *)(v27 + 56) = v29;
  sub_100187874(a1);
  swift_bridgeObjectRetain(v9);
  a2->_countAndFlagsBits = v30;
  a2->_object = v9;
  a2[1] = v15;
  a2[2] = v20;
  a2[3]._countAndFlagsBits = v27;
}

_QWORD *sub_100186D04@<X0>(Swift::String *a1@<X8>)
{
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String_optional v5;
  Swift::String v6;
  Swift::String v7;
  id v8;
  Swift::String v9;
  Swift::String_optional v10;
  Swift::String v11;
  Swift::String v12;
  id v13;
  Swift::String v14;
  Swift::String_optional v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *result;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;

  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v4._countAndFlagsBits = 0xD000000000000018;
  v22._countAndFlagsBits = 0xD000000000000067;
  v22._object = (void *)0x800000010026D320;
  v4._object = (void *)0x800000010026D300;
  v5.value._countAndFlagsBits = 0xD000000000000012;
  v5.value._object = (void *)0x80000001002621B0;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v3, v6, v22);

  v8 = objc_msgSend(v2, "mainBundle");
  v9._countAndFlagsBits = 0xD000000000000038;
  v23._countAndFlagsBits = 0xD00000000000006ALL;
  v23._object = (void *)0x800000010026D3D0;
  v9._object = (void *)0x800000010026D390;
  v10.value._countAndFlagsBits = 0xD000000000000012;
  v10.value._object = (void *)0x80000001002621B0;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v23);

  v13 = objc_msgSend(v2, "mainBundle");
  v14._countAndFlagsBits = 0xD000000000000017;
  v24._countAndFlagsBits = 0xD000000000000030;
  v24._object = (void *)0x800000010026D460;
  v14._object = (void *)0x800000010026D440;
  v15.value._countAndFlagsBits = 0xD000000000000012;
  v15.value._object = (void *)0x80000001002621B0;
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, v15, (NSBundle)v13, v16, v24);

  v18 = sub_100003DB8(&qword_100323E38);
  v19 = swift_allocObject(v18, 64, 7);
  *(_OWORD *)(v19 + 16) = xmmword_10024E070;
  v20 = swift_allocObject(&unk_1002F4D38, 24, 7);
  swift_weakInit(v20 + 16);
  result = (_QWORD *)swift_allocObject(&unk_1002F4D88, 40, 7);
  result[2] = v20;
  result[3] = 0xD000000000000013;
  result[4] = 0x80000001002605B0;
  *(Swift::String *)(v19 + 32) = v17;
  *(_QWORD *)(v19 + 48) = sub_100187958;
  *(_QWORD *)(v19 + 56) = result;
  a1->_countAndFlagsBits = 0xD000000000000013;
  a1->_object = (void *)0x80000001002605B0;
  a1[1] = v7;
  a1[2] = v12;
  a1[3]._countAndFlagsBits = v19;
  return result;
}

uint64_t sub_100186F58(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD v43[6];
  uint64_t v44;
  _QWORD v45[7];
  _BYTE v46[8];
  uint64_t v47;

  v2 = v1;
  sub_10000B458((uint64_t)a1, (uint64_t)v45, &qword_100323E40);
  v4 = v45[0];
  v40 = v45[2];
  v41 = v45[1];
  v38 = v45[4];
  v39 = v45[3];
  v36 = v45[6];
  v37 = v45[5];
  v6 = v2[6];
  v5 = v2[7];
  v7 = v2[8];
  v8 = v2[9];
  v9 = v2[10];
  v10 = v2[11];
  v11 = v2[12];
  if (v5)
  {
    result = sub_10000B458((uint64_t)a1, (uint64_t)v46, &qword_100323E40);
    if (v47)
    {
      if (v6 == v4 && v5 == v41)
        return result;
      result = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, v4, v41, 0);
      if ((result & 1) != 0)
        return result;
      goto LABEL_9;
    }
  }
  else
  {
    result = sub_10000B458((uint64_t)a1, (uint64_t)v46, &qword_100323E40);
    if (!v47)
      return result;
  }
  sub_1001878DC(v6, v5, v7, v8, v9, v10, v11);
  sub_1001878A4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001878DC);
  sub_1001877B0(v6, v5, v7, v8, v9, v10, v11);
  sub_1001877B0(v4, v41, v40, v39, v38, v37, v36);
LABEL_9:
  if (qword_100315828 != -1)
    swift_once(&qword_100315828, sub_1000D95FC);
  v13 = type metadata accessor for Logger(0);
  sub_10000D744(v13, (uint64_t)qword_10033FD30);
  sub_1001878A4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001878DC);
  swift_retain(v2);
  sub_1001878A4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001878DC);
  swift_retain(v2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(64, -1);
    v44 = v18;
    *(_DWORD *)v17 = 136446466;
    sub_10000B458((uint64_t)a1, (uint64_t)&v42, &qword_100323E40);
    sub_1001878A4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001878DC);
    v19 = sub_100003DB8(&qword_100323E40);
    v21 = String.init<A>(describing:)(&v42, v19, v20);
    v23 = v22;
    v42 = sub_100172BEC(v21, v22, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v23);
    sub_1001878A4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001877B0);
    sub_1001878A4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001877B0);
    *(_WORD *)(v17 + 12) = 2082;
    v24 = v2[7];
    v25 = v2[8];
    v26 = v2[9];
    v27 = v2[10];
    v28 = v2[11];
    v29 = v2[12];
    v42 = v2[6];
    v43[0] = v24;
    v43[1] = v25;
    v43[2] = v26;
    v43[3] = v27;
    v43[4] = v28;
    v43[5] = v29;
    sub_1001878DC(v42, v24, v25, v26, v27, v28, v29);
    v31 = String.init<A>(describing:)(&v42, v19, v30);
    v33 = v32;
    v42 = sub_100172BEC(v31, v32, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, v43, v17 + 14, v17 + 22);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "activeAlert changed from: %{public}s to: %{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
    sub_1001878A4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001877B0);
    sub_1001878A4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001877B0);

    swift_release_n(v2, 2);
  }
  v34 = sub_100003DB8(&qword_10032B0E0);
  v35 = sub_100016B20();
  return Subject<>.send()(v34, v35);
}

uint64_t sub_10018732C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  _BYTE v13[24];
  uint64_t v14;
  uint64_t v15;

  v7 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  result = swift_weakLoadStrong(v7);
  if (result)
  {
    v9 = result;
    sub_10000B458(a2, (uint64_t)&v14, &qword_100319D68);
    v10 = v14;
    if (!v15)
      v10 = 0;
    v11 = v10;
    v12 = v15 == 0;
    PassthroughSubject.send(_:)(&v11);
    sub_100186480(a3, a4);
    return swift_release(v9);
  }
  return result;
}

uint64_t sub_1001873E4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE v11[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)(result + 32);
    swift_retain(v8);
    v9 = sub_100003DB8(&qword_10032B0E0);
    v10 = sub_100016B20();
    Subject<>.send()(v9, v10);
    swift_release(v8);
    sub_100186480(a2, a3);
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_100187490()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  __n128 v4;
  __n128 v5;
  __n128 v6;

  v1 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v2 = swift_retain(v0);
  *(_QWORD *)(v0 + 32) = PassthroughSubject.init()(v2);
  v3 = sub_100003DB8(&qword_100322CA0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)(v0 + 40) = PassthroughSubject.init()(v4);
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_QWORD *)(v0 + 96) = 0;
  swift_release(v0);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  *(_QWORD *)(v0 + 16) = PassthroughSubject.init()(v5);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  *(_QWORD *)(v0 + 24) = PassthroughSubject.init()(v6);
  return v0;
}

uint64_t sub_10018755C()
{
  _QWORD *v0;

  swift_release(v0[4]);
  swift_release(v0[5]);
  return sub_1001877B0(v0[6], v0[7], v0[8], v0[9], v0[10], v0[11], v0[12]);
}

uint64_t sub_10018758C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  sub_1001877B0(v0[6], v0[7], v0[8], v0[9], v0[10], v0[11], v0[12]);
  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t type metadata accessor for TransitionAlertModel()
{
  return objc_opt_self(_TtC8SOSBuddy20TransitionAlertModel);
}

uint64_t destroy for TransitionAlertModel.Alert(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[6]);
}

_QWORD *initializeWithCopy for TransitionAlertModel.Alert(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[6];
  a1[6] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithCopy for TransitionAlertModel.Alert(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = a2[6];
  v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

_QWORD *assignWithTake for TransitionAlertModel.Alert(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = a1[1];
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(a1[5]);
  v8 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  return a1;
}

ValueMetadata *type metadata accessor for TransitionAlertModel.Alert()
{
  return &type metadata for TransitionAlertModel.Alert;
}

uint64_t sub_1001877B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    return swift_bridgeObjectRelease(a7);
  }
  return result;
}

uint64_t sub_100187800()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100187824()
{
  _QWORD *v0;
  uint64_t v1;

  swift_release(v0[2]);
  v1 = v0[5];
  if (v1)
  {
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v0[7]);
  }
  swift_bridgeObjectRelease(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100187864()
{
  uint64_t v0;

  return sub_10018732C(*(_QWORD *)(v0 + 16), v0 + 24, *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72));
}

uint64_t *sub_100187874(uint64_t *a1)
{
  sub_1000648A4(*a1, a1[1], a1[2], a1[3], a1[4]);
  return a1;
}

_QWORD *sub_1001878A4(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6]);
  return a1;
}

uint64_t sub_1001878DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a6);
    return swift_bridgeObjectRetain(a7);
  }
  return result;
}

uint64_t sub_10018792C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100187958()
{
  uint64_t v0;

  return sub_1001873E4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t initializeWithCopy for TransitionAlertModel.AlertButton(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v4);
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for TransitionAlertModel.AlertButton(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v7 = a2[2];
  v6 = a2[3];
  v8 = a1[3];
  a1[2] = v7;
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

_QWORD *assignWithTake for TransitionAlertModel.AlertButton(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  v5 = a1[3];
  a1[3] = v4;
  swift_release(v5);
  return a1;
}

ValueMetadata *type metadata accessor for TransitionAlertModel.AlertButton()
{
  return &type metadata for TransitionAlertModel.AlertButton;
}

uint64_t sub_100187A6C()
{
  return sub_100187AD8((uint64_t (*)(void))sub_100187A80, (uint64_t)&type metadata for _TryOutViewEmbeddedPresentationEnvironmentKey);
}

unint64_t sub_100187A80()
{
  unint64_t result;

  result = qword_100323E48;
  if (!qword_100323E48)
  {
    result = swift_getWitnessTable(&unk_10025A258, &type metadata for _TryOutViewEmbeddedPresentationEnvironmentKey);
    atomic_store(result, (unint64_t *)&qword_100323E48);
  }
  return result;
}

uint64_t sub_100187AC4()
{
  return sub_100187AD8((uint64_t (*)(void))sub_1000FF5F0, (uint64_t)&type metadata for _TryOutViewExplorerPresentationEnvironmentKey);
}

uint64_t sub_100187AD8(uint64_t (*a1)(void), uint64_t a2)
{
  uint64_t v3;
  uint64_t v5;

  v3 = a1();
  EnvironmentValues.subscript.getter(&v5, a2, a2, v3);
  return v5;
}

ValueMetadata *type metadata accessor for _TryOutViewExplorerPresentationEnvironmentKey()
{
  return &type metadata for _TryOutViewExplorerPresentationEnvironmentKey;
}

ValueMetadata *type metadata accessor for _TryOutViewEmbeddedPresentationEnvironmentKey()
{
  return &type metadata for _TryOutViewEmbeddedPresentationEnvironmentKey;
}

uint64_t sub_100187B38(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_100187B58(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_100187B78(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4[2];

  v2 = (_QWORD *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0)
    v2 = sub_100190F18(v2);
  v3 = v2[2];
  v4[0] = (uint64_t)(v2 + 4);
  v4[1] = v3;
  sub_100191204(v4);
  *a1 = v2;
}

BOOL sub_100187BE4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  uint64_t v8;
  _OWORD v9[4];
  uint64_t v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_QWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_QWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_100192494((double *)v7, (double *)v9);
}

BOOL static CMQuaternion.== infix(_:_:)(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  _BOOL4 v8;

  v8 = a1 == a5;
  if (a2 != a6)
    v8 = 0;
  if (a3 != a7)
    v8 = 0;
  return a4 == a8 && v8;
}

BOOL sub_100187C60(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t sub_100187C9C()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v11;
  __int128 v12;
  __int128 v13;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1 != 1)
  {
    v9 = *(_QWORD *)(v0 + 8);
    swift_bridgeObjectRetain(v1);
    return v9;
  }
  v2 = objc_msgSend(*(id *)v0, "userInfo");
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  v6 = v5;
  if (!*(_QWORD *)(v3 + 16) || (v7 = sub_10017D3B0(v4, v5), (v8 & 1) == 0))
  {
    v12 = 0u;
    v13 = 0u;
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v3);
    goto LABEL_10;
  }
  sub_10008CAC4(*(_QWORD *)(v3 + 56) + 32 * v7, (uint64_t)&v12);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v3);
  if (!*((_QWORD *)&v13 + 1))
  {
LABEL_10:
    sub_100007FF0((uint64_t)&v12, &qword_100324AC0);
    return 0;
  }
  if (swift_dynamicCast(&v11, &v12, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v11;
  else
    return 0;
}

uint64_t sub_100187DDC()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  __int128 v12;

  if (*(_QWORD *)(v0 + 16) != 1)
  {
    v8 = *(_QWORD *)(v0 + 24);
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 32));
    return v8;
  }
  v1 = objc_msgSend(*(id *)v0, "userInfo");
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, (char *)&type metadata for Any + 8, &protocol witness table for String);

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedRecoverySuggestionErrorKey);
  v5 = v4;
  if (!*(_QWORD *)(v2 + 16) || (v6 = sub_10017D3B0(v3, v4), (v7 & 1) == 0))
  {
    v11 = 0u;
    v12 = 0u;
    swift_bridgeObjectRelease(v5);
    swift_bridgeObjectRelease(v2);
    goto LABEL_10;
  }
  sub_10008CAC4(*(_QWORD *)(v2 + 56) + 32 * v6, (uint64_t)&v11);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v2);
  if (!*((_QWORD *)&v12 + 1))
  {
LABEL_10:
    sub_100007FF0((uint64_t)&v11, &qword_100324AC0);
    return 0;
  }
  if (swift_dynamicCast(&v10, &v11, (char *)&type metadata for Any + 8, &type metadata for String, 6))
    return v10;
  else
    return 0;
}

id sub_100187F1C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  char *v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  Swift::String v24;
  unint64_t v25;
  Swift::String v26;
  unint64_t v27;
  Swift::String v28;
  __n128 v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  char *v37;
  uint64_t v38;
  objc_class *v39;
  _QWORD v41[2];
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  objc_super v48;
  _QWORD *v49;
  unint64_t v50;

  v46 = a3;
  v47 = a4;
  v45 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v43 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45, v7);
  v44 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v42, v9);
  v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v4[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_locationManager] = 0;
  v16 = &v4[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_handler];
  *v16 = 0;
  v16[1] = 0;
  v4[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_authorized] = 1;
  v17 = (void *)objc_opt_self(NSBundle);
  v18 = v4;
  v19 = objc_msgSend(v17, "mainBundle");
  v20 = objc_msgSend(v19, "bundleIdentifier");

  if (v20)
  {
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

  }
  else
  {
    v23 = 0x8000000100260990;
    v21 = 0xD000000000000012;
  }
  v41[1] = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v49 = (_QWORD *)v21;
  v50 = v23;
  swift_bridgeObjectRetain(v23);
  v24._countAndFlagsBits = 46;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v23);
  v25 = v50;
  swift_bridgeObjectRetain(v50);
  v26._countAndFlagsBits = a1;
  v26._object = a2;
  String.append(_:)(v26);
  swift_bridgeObjectRelease(v25);
  v27 = v50;
  swift_bridgeObjectRetain(v50);
  v28._countAndFlagsBits = 0x69726F687475412ELL;
  v28._object = (void *)0xEE006E6F6974617ALL;
  String.append(_:)(v28);
  v29 = swift_bridgeObjectRelease(v27);
  v30 = v49;
  v31 = v50;
  static DispatchQoS.unspecified.getter(v29);
  v49 = _swiftEmptyArrayStorage;
  v32 = sub_1000052EC((unint64_t *)&unk_1003178B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v33 = sub_100003DB8((uint64_t *)&unk_100324AE0);
  v34 = sub_10000F138((unint64_t *)&unk_1003178C0, (uint64_t *)&unk_100324AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v33, v34, v42, v32);
  v35 = v44;
  (*(void (**)(char *, _QWORD, uint64_t))(v43 + 104))(v44, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v45);
  *(_QWORD *)&v18[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_locationManagerQueue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v30, v31, v15, v11, v35, 0);
  v36 = (uint64_t *)&v18[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_name];
  *v36 = a1;
  v36[1] = (uint64_t)a2;
  v37 = &v18[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_effectiveBundlePath];
  v38 = v47;
  *(_QWORD *)v37 = v46;
  *((_QWORD *)v37 + 1) = v38;

  v39 = (objc_class *)type metadata accessor for LocationAuthorization();
  v48.receiver = v18;
  v48.super_class = v39;
  return objc_msgSendSuper2(&v48, "init");
}

void sub_100188278(char *a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  id v10;
  char *v11;
  NSString v12;
  id v13;
  void *v14;

  v4 = &a1[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_handler];
  v5 = *(_QWORD *)&a1[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_handler];
  v6 = *(_QWORD *)&a1[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_handler + 8];
  *(_QWORD *)v4 = a2;
  *((_QWORD *)v4 + 1) = a3;
  swift_retain(a3);
  sub_10004DA00(v5, v6);
  v7 = *(_QWORD *)&a1[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_effectiveBundlePath
                    + 8];
  v8 = *(void **)&a1[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_locationManagerQueue];
  v9 = objc_allocWithZone((Class)CLLocationManager);
  swift_bridgeObjectRetain(v7);
  v10 = v8;
  v11 = a1;
  v12 = String._bridgeToObjectiveC()();
  v13 = objc_msgSend(v9, "initWithEffectiveBundlePath:delegate:onQueue:", v12, v11, v10, swift_bridgeObjectRelease(v7).n128_f64[0]);

  v14 = *(void **)&v11[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_locationManager];
  *(_QWORD *)&v11[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_locationManager] = v13;

}

uint64_t sub_100188364(uint64_t a1)
{
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v2 = *(void **)(a1
                + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_locationManager);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_locationManager) = 0;

  v3 = (_QWORD *)(a1 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_handler);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_handler);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_handler + 8);
  *v3 = 0;
  v3[1] = 0;
  result = sub_10004DA00(v4, v5);
  *(_BYTE *)(a1 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_authorized) = 1;
  return result;
}

void sub_1001883BC(void *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  id v9;
  unsigned int v10;
  uint64_t v11;
  id v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  void (*v27)(uint64_t, __n128);
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;

  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(void **)&v1[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_locationManagerQueue];
  *v7 = v8;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v8 & 1) != 0)
  {
    v10 = objc_msgSend(a1, "authorizationStatus");
    v3 = (v10 < 5) & (0x19u >> v10);
    if (qword_100315820 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315820, sub_1000D95E4);
LABEL_3:
  v11 = type metadata accessor for Logger(0);
  sub_10000D744(v11, (uint64_t)qword_10033FD18);
  v12 = a1;
  v13 = v1;
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(28, -1);
    v17 = swift_slowAlloc(64, -1);
    v31 = v17;
    *(_DWORD *)v16 = 136446722;
    v18 = *(_QWORD *)&v13[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_name];
    v19 = *(_QWORD *)&v13[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_name + 8];
    swift_bridgeObjectRetain(v19);
    v30 = sub_100172BEC(v18, v19, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 4, v16 + 12);

    *(_QWORD *)&v20 = swift_bridgeObjectRelease(v19).n128_u64[0];
    *(_WORD *)(v16 + 12) = 2082;
    LODWORD(v30) = objc_msgSend(v12, "authorizationStatus", v20);
    type metadata accessor for CLAuthorizationStatus(0);
    v23 = String.init<A>(describing:)(&v30, v21, v22);
    v25 = v24;
    v30 = sub_100172BEC(v23, v24, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 14, v16 + 22);

    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v16 + 22) = 1026;
    LODWORD(v30) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, (char *)&v30 + 4, v16 + 24, v16 + 28);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s location auth status received: %{public}s, authorized: %{BOOL,public}d", (uint8_t *)v16, 0x1Cu);
    swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

  }
  if ((_DWORD)v3 != v13[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_authorized])
  {
    v13[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_authorized] = v3;
    v26 = &v13[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_handler];
    v27 = *(void (**)(uint64_t, __n128))&v13[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_handler];
    if (v27)
    {
      v28 = *((_QWORD *)v26 + 1);
      v29 = swift_retain(v28);
      v27(v3, v29);
      sub_10004DA00((uint64_t)v27, v28);
    }
  }
}

id sub_100188778()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LocationAuthorization();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LocationAuthorization()
{
  return objc_opt_self(_TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization);
}

uint64_t sub_100188840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for ConsistencyCheckOnMainQueue(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1
     + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10527ConsistencyCheckOnMainQueue__lastConsistencyCheckAt;
  v3 = type metadata accessor for DispatchTime(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  *(_QWORD *)(v1
            + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10527ConsistencyCheckOnMainQueue__updatesSinceLastConsistencyCheck) = 0;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10527ConsistencyCheckOnMainQueue__skippedUpdatesSinceLastConsistencyCheck) = 0;
  qword_100323E50 = v1;
  return result;
}

uint64_t sub_1001888C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v0 = type metadata accessor for ConsistencyCheckOnCMQueue(0);
  v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  v2 = v1 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10525ConsistencyCheckOnCMQueue__lastPingAt;
  v3 = type metadata accessor for DispatchTime(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  qword_100323E58 = v1;
  return result;
}

uint64_t sub_100188928()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  __n128 v5;
  objc_class *v6;
  id v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  NSString v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  uint64_t v36[2];

  v1 = v0;
  v2 = sub_100003DB8(&qword_100324AC8);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(_QWORD *)(v0 + 16) = PassthroughSubject.init()(v3);
  v4 = sub_100003DB8((uint64_t *)&unk_100324AD0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  *(_QWORD *)(v0 + 24) = PassthroughSubject.init()(v5);
  *(_QWORD *)(v0 + 32) = objc_msgSend(objc_allocWithZone((Class)CMMotionManager), "init");
  v6 = (objc_class *)type metadata accessor for LocationAuthorization();
  v7 = objc_allocWithZone(v6);
  *(_QWORD *)(v0 + 40) = sub_100187F1C(0xD000000000000012, (void *)0x800000010026DD10, 0xD000000000000039, 0x800000010026DD30);
  v8 = objc_allocWithZone(v6);
  *(_QWORD *)(v0 + 48) = sub_100187F1C(0xD000000000000013, (void *)0x800000010026DD70, 0xD00000000000002ELL, 0x8000000100267EF0);
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 128) = 0u;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_BYTE *)(v0 + 176) = 1;
  v9 = v0 + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__lastDeviceOrientationForwardedToMainThreadAt;
  v10 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 1, 1, v10);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__currentRateRatio) = 0x3FF0000000000000;
  *(_QWORD *)(v1
            + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__skippedDeviceOrientationsSinceLastForwardedToMainThread) = 0;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__coreMotionErrors) = 0;
  v11 = objc_msgSend(objc_allocWithZone((Class)NSOperationQueue), "init");
  *(_QWORD *)(v1 + 56) = v11;
  v12 = (void *)objc_opt_self(NSBundle);
  v13 = v11;
  v14 = objc_msgSend(v12, "mainBundle");
  v15 = objc_msgSend(v14, "bundleIdentifier");

  if (v15)
  {
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

  }
  else
  {
    v18 = 0x8000000100260990;
    v16 = 0xD000000000000012;
  }
  v36[0] = v16;
  v36[1] = v18;
  swift_bridgeObjectRetain(v18);
  v19._countAndFlagsBits = 0xD000000000000017;
  v19._object = (void *)0x800000010025A320;
  String.append(_:)(v19);
  swift_bridgeObjectRelease(v18);
  v20 = v18;
  v21 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "setName:", v21, swift_bridgeObjectRelease(v20).n128_f64[0]);

  objc_msgSend(*(id *)(v1 + 56), "setMaxConcurrentOperationCount:", 1);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v22 = type metadata accessor for Logger(0);
  sub_10000D744(v22, (uint64_t)qword_10033FD18);
  v24 = swift_retain_n(v1, v23);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v35 = v1;
    v36[0] = v28;
    *(_DWORD *)v27 = 136446210;
    v29 = type metadata accessor for DeviceOrientationSource(0);
    v30 = swift_retain(v1);
    v31 = String.init<A>(describing:)(&v35, v29, v30);
    v33 = v32;
    v35 = sub_100172BEC(v31, v32, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v27 + 4, v27 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "init: %{public}s", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  return v1;
}

uint64_t sub_100188D64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = swift_retain_n(v0, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v1;
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for DeviceOrientationSource(0);
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v9, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "deinit: %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 24));

  sub_100007FF0(v1 + 64, &qword_10031EDA0);
  sub_100007FF0(v1 + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__lastDeviceOrientationForwardedToMainThreadAt, &qword_1003180C8);
  swift_release(*(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__coreMotionErrors));
  return v1;
}

uint64_t sub_100188F8C()
{
  uint64_t v0;

  sub_100188D64();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100188FB0()
{
  return type metadata accessor for DeviceOrientationSource(0);
}

uint64_t type metadata accessor for DeviceOrientationSource(uint64_t a1)
{
  return sub_10003D8E8(a1, (uint64_t *)&unk_100323F00, (uint64_t)&nominal type descriptor for DeviceOrientationSource);
}

void sub_100188FCC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[5] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[6] = "(";
  v4[7] = &unk_10025A370;
  sub_1000F03D4(319, (unint64_t *)&qword_100323F10, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime);
  if (v3 <= 0x3F)
  {
    v4[8] = *(_QWORD *)(v2 - 8) + 64;
    v4[9] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[10] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[11] = &unk_10025A388;
    swift_updateClassMetadata2(a1, 256, 12, v4, a1 + 80);
  }
}

void sub_100189094()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  _QWORD *v18;
  __n128 v19;
  char *v20;
  char *v21;
  uint64_t v22;
  NSObject *v23;
  _QWORD *v24;
  uint64_t v25;
  void *v26;
  _QWORD *v27;
  __n128 v28;
  char *v29;
  NSObject *oslog;
  void **aBlock;
  uint64_t v32;
  void *v33;
  void *v34;
  uint64_t (*v35)();
  _QWORD *v36;

  v1 = (void *)v0[4];
  if (!objc_msgSend(v1, "isDeviceMotionAvailable"))
  {
    if (qword_100315898 != -1)
      swift_once(&qword_100315898, sub_1000D97F4);
    v7 = type metadata accessor for Logger(0);
    v8 = sub_10000D744(v7, (uint64_t)qword_10033FE80);
    oslog = Logger.logObject.getter(v8);
    v4 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v4))
      goto LABEL_12;
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    v6 = "Device motion is not available";
    goto LABEL_11;
  }
  if ((objc_msgSend(v1, "isDeviceMotionActive") & 1) != 0)
  {
    if (qword_100315898 != -1)
      swift_once(&qword_100315898, sub_1000D97F4);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10000D744(v2, (uint64_t)qword_10033FE80);
    oslog = Logger.logObject.getter(v3);
    v4 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(oslog, v4))
      goto LABEL_12;
    v5 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v5 = 0;
    v6 = "DeviceOrientationSource is already active";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, v6, v5, 2u);
    swift_slowDealloc(v5, -1, -1);
LABEL_12:

    return;
  }
  objc_msgSend(v1, "setDeviceMotionUpdateInterval:", 0.1);
  v9 = v0[7];
  v35 = sub_100193310;
  v36 = v0;
  aBlock = _NSConcreteStackBlock;
  v32 = 1107296256;
  v33 = sub_1000187D0;
  v34 = &unk_1002F5308;
  v10 = _Block_copy(&aBlock);
  v11 = v36;
  swift_retain(v0);
  swift_release(v11);
  objc_msgSend(v1, "startDeviceMotionUpdatesUsingReferenceFrame:toQueue:withHandler:", 8, v9, v10);
  _Block_release(v10);
  v12 = (char *)v0[5];
  v13 = swift_allocObject(&unk_1002F5048, 24, 7);
  swift_weakInit(v13 + 16);
  v14 = *(NSObject **)&v12[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_locationManagerQueue];
  v15 = (_QWORD *)swift_allocObject(&unk_1002F5340, 40, 7);
  v15[2] = v12;
  v15[3] = sub_100193314;
  v15[4] = v13;
  v16 = swift_allocObject(&unk_1002F5368, 32, 7);
  *(_QWORD *)(v16 + 16) = sub_100193340;
  *(_QWORD *)(v16 + 24) = v15;
  v35 = sub_100193598;
  v36 = (_QWORD *)v16;
  aBlock = _NSConcreteStackBlock;
  v32 = 1107296256;
  v33 = sub_100187B58;
  v34 = &unk_1002F5380;
  v17 = _Block_copy(&aBlock);
  v18 = v36;
  swift_retain_n(v13, v19);
  v20 = v12;
  swift_retain(v16);
  swift_release(v18);
  dispatch_sync(v14, v17);
  _Block_release(v17);
  LOBYTE(v14) = swift_isEscapingClosureAtFileLocation(v16, "", 97, 93, 35, 1);
  swift_release_n(v13);
  swift_release(v15);
  swift_release(v16);
  if ((v14 & 1) != 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  v21 = (char *)v0[6];
  v22 = swift_allocObject(&unk_1002F5048, 24, 7);
  swift_weakInit(v22 + 16);
  v23 = *(NSObject **)&v21[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_locationManagerQueue];
  v24 = (_QWORD *)swift_allocObject(&unk_1002F53B8, 40, 7);
  v24[2] = v21;
  v24[3] = sub_10019335C;
  v24[4] = v22;
  v25 = swift_allocObject(&unk_1002F53E0, 32, 7);
  *(_QWORD *)(v25 + 16) = sub_1001935FC;
  *(_QWORD *)(v25 + 24) = v24;
  v35 = sub_100193598;
  v36 = (_QWORD *)v25;
  aBlock = _NSConcreteStackBlock;
  v32 = 1107296256;
  v33 = sub_100187B58;
  v34 = &unk_1002F53F8;
  v26 = _Block_copy(&aBlock);
  v27 = v36;
  swift_retain_n(v22, v28);
  v29 = v21;
  swift_retain(v25);
  swift_release(v27);
  dispatch_sync(v23, v26);
  _Block_release(v26);
  LOBYTE(v23) = swift_isEscapingClosureAtFileLocation(v25, "", 97, 93, 35, 1);
  swift_release_n(v22);
  swift_release(v24);
  swift_release(v25);
  if ((v23 & 1) != 0)
LABEL_17:
    __break(1u);
}

void sub_10018955C(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t Strong;
  uint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 v16;
  void *v17;
  _BYTE v18[24];
  id v19;
  _BYTE v20[24];

  v7 = a2 + 16;
  swift_beginAccess(a2 + 16, v20, 0, 0);
  Strong = swift_weakLoadStrong(v7);
  if (Strong)
  {
    v9 = Strong;
    v10 = *(id *)(Strong + 56);
    swift_release(v9);
    v19 = v10;
    v11 = swift_allocObject(&unk_1002F5048, 24, 7);
    swift_beginAccess(v7, v18, 0, 0);
    v12 = swift_weakLoadStrong(v7);
    swift_weakInit(v11 + 16);
    swift_release(v12);
    v13 = swift_allocObject(a3, 25, 7);
    *(_QWORD *)(v13 + 16) = v11;
    *(_BYTE *)(v13 + 24) = a1 & 1;
    v14 = sub_10006477C(0, &qword_100324AB0, NSOperationQueue_ptr);
    v15 = sub_1001932AC();
    v16 = swift_retain(v11);
    Scheduler.schedule(_:)(a4, v13, v14, v15, v16);
    swift_release(v13);
    v17 = v19;
    swift_release(v11);

  }
}

uint64_t sub_1001896A4(uint64_t a1, char a2, char a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_10018A304(a3, a2 & 1);
    return swift_release(v7);
  }
  return result;
}

void sub_100189714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  __n128 v12;
  char v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  __n128 v19;
  void *v20;
  uint64_t v21;
  void *v22;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100315898 != -1)
    swift_once(&qword_100315898, sub_1000D97F4);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10000D744(v7, (uint64_t)qword_10033FE80);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "onStartConnectionAssistance", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v6 = static OS_dispatch_queue.main.getter(v12);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v13 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v13 & 1) != 0)
  {
    v22 = *(void **)(v1 + 56);
    v14 = v22;
    v15 = swift_allocObject(&unk_1002F5048, 24, 7);
    swift_weakInit(v15 + 16);
    v16 = sub_10006477C(0, &qword_100324AB0, NSOperationQueue_ptr);
    v17 = sub_1001932AC();
    v18 = v14;
    v19 = swift_retain(v15);
    Scheduler.schedule(_:)(sub_100193304, v15, v16, v17, v19);
    swift_release(v15);
    v20 = v22;
    swift_release(v15);

  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_100189928(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t Strong;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  __n128 v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD aBlock[5];
  uint64_t v48;
  char v49[24];

  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v2 - 8);
  v46 = v2;
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v43 = *(_QWORD *)(v6 - 8);
  v44 = v6;
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8((uint64_t *)&unk_100324A90);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DeviceOrientationSource.DeviceOrientationErrorState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(_QWORD *)(v15 + 64);
  v18 = __chkstk_darwin(v14, v17);
  v19 = (char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  v22 = (_WORD *)((char *)&v42 - v21);
  v42 = a1;
  a1 += 16;
  swift_beginAccess(a1, v49, 0, 0);
  Strong = swift_weakLoadStrong(a1);
  if (!Strong
    || (v24 = Strong,
        v25 = *(_QWORD *)(Strong + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__coreMotionErrors),
        swift_retain(v25),
        swift_release(v24),
        !v25))
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
    goto LABEL_6;
  }
  sub_10018E524(v13);
  swift_release(v25);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
LABEL_6:
    v26 = (char *)v22 + *(int *)(v14 + 24);
    v27 = type metadata accessor for DeviceOrientationError(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
    *v22 = 257;
    sub_100007FF0((uint64_t)v13, (uint64_t *)&unk_100324A90);
    goto LABEL_7;
  }
  sub_100193100((uint64_t)v13, (uint64_t)v22);
LABEL_7:
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v29 = (void *)static OS_dispatch_queue.main.getter(v28);
  sub_1000E1F30((uint64_t)v22, (uint64_t)v19, type metadata accessor for DeviceOrientationSource.DeviceOrientationErrorState);
  v30 = *(unsigned __int8 *)(v15 + 80);
  v31 = (v30 + 24) & ~v30;
  v32 = swift_allocObject(&unk_1002F52C8, v31 + v16, v30 | 7);
  v33 = v42;
  *(_QWORD *)(v32 + 16) = v42;
  sub_100193100((uint64_t)v19, v32 + v31);
  aBlock[4] = sub_100193144;
  v48 = v32;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002F52E0;
  v34 = _Block_copy(aBlock);
  v35 = v48;
  swift_retain(v33);
  swift_release(v35);
  static DispatchQoS.unspecified.getter(v36);
  aBlock[0] = _swiftEmptyArrayStorage;
  v37 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v38 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v39 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
  v40 = v46;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v38, v39, v46, v37);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v5, v34);
  _Block_release(v34);

  (*(void (**)(char *, uint64_t))(v45 + 8))(v5, v40);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v9, v44);
  return sub_10000AFFC((uint64_t)v22, type metadata accessor for DeviceOrientationSource.DeviceOrientationErrorState);
}

void sub_100189CE8()
{
  uint64_t *v0;
  char *v1;
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  NSObject *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  __n128 v26;
  void *v27;
  uint64_t v28;
  __int128 aBlock;
  __int128 v30;
  uint64_t (*v31)();
  uint64_t v32;
  _BYTE v33[24];

  v28 = *v0;
  v31 = 0;
  aBlock = 0u;
  v30 = 0u;
  swift_beginAccess(v0 + 8, v33, 33, 0);
  sub_100123FDC((uint64_t)&aBlock, (uint64_t)(v0 + 8), &qword_10031EDA0);
  swift_endAccess(v33);
  objc_msgSend((id)v0[4], "stopDeviceMotionUpdates");
  v1 = (char *)v0[5];
  v2 = *(NSObject **)&v1[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_locationManagerQueue];
  v3 = swift_allocObject(&unk_1002F51B0, 24, 7);
  *(_QWORD *)(v3 + 16) = v1;
  v4 = swift_allocObject(&unk_1002F51D8, 32, 7);
  *(_QWORD *)(v4 + 16) = sub_10019327C;
  *(_QWORD *)(v4 + 24) = v3;
  v31 = sub_10002BF7C;
  v32 = v4;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v30 = sub_100187B58;
  *((_QWORD *)&v30 + 1) = &unk_1002F51F0;
  v5 = _Block_copy(&aBlock);
  v6 = v32;
  v7 = v1;
  swift_retain(v4);
  swift_release(v6);
  dispatch_sync(v2, v5);
  _Block_release(v5);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation(v4, "", 97, 100, 35, 1);
  swift_release(v3);
  swift_release(v4);
  if ((v2 & 1) != 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  v8 = (char *)v0[6];
  v9 = *(NSObject **)&v8[OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10521LocationAuthorization_locationManagerQueue];
  v10 = swift_allocObject(&unk_1002F5228, 24, 7);
  *(_QWORD *)(v10 + 16) = v8;
  v11 = swift_allocObject(&unk_1002F5250, 32, 7);
  *(_QWORD *)(v11 + 16) = sub_1001935E4;
  *(_QWORD *)(v11 + 24) = v10;
  v31 = sub_100193598;
  v32 = v11;
  *(_QWORD *)&aBlock = _NSConcreteStackBlock;
  *((_QWORD *)&aBlock + 1) = 1107296256;
  *(_QWORD *)&v30 = sub_100187B58;
  *((_QWORD *)&v30 + 1) = &unk_1002F5268;
  v12 = _Block_copy(&aBlock);
  v13 = v32;
  v14 = v8;
  swift_retain(v11);
  swift_release(v13);
  dispatch_sync(v9, v12);
  _Block_release(v12);
  LOBYTE(v9) = swift_isEscapingClosureAtFileLocation(v11, "", 97, 100, 35, 1);
  swift_release(v10);
  swift_release(v11);
  if ((v9 & 1) != 0)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (qword_100315938 != -1)
LABEL_7:
    swift_once(&qword_100315938, sub_100188840);
  v15 = type metadata accessor for ConsistencyCheckOnMainQueue(0);
  v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  v17 = v16
      + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10527ConsistencyCheckOnMainQueue__lastConsistencyCheckAt;
  v18 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(_QWORD *)(v16
            + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10527ConsistencyCheckOnMainQueue__updatesSinceLastConsistencyCheck) = 0;
  *(_QWORD *)(v16
            + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10527ConsistencyCheckOnMainQueue__skippedUpdatesSinceLastConsistencyCheck) = 0;
  v19 = qword_100323E50;
  qword_100323E50 = v16;
  swift_release(v19);
  *(_QWORD *)&aBlock = v0[7];
  v20 = (void *)aBlock;
  v21 = swift_allocObject(&unk_1002F5048, 24, 7);
  swift_weakInit(v21 + 16);
  v22 = swift_allocObject(&unk_1002F52A0, 32, 7);
  *(_QWORD *)(v22 + 16) = v21;
  *(_QWORD *)(v22 + 24) = v28;
  v23 = sub_10006477C(0, &qword_100324AB0, NSOperationQueue_ptr);
  v24 = sub_1001932AC();
  v25 = v20;
  v26 = swift_retain(v21);
  Scheduler.schedule(_:)(sub_1001932A4, v22, v23, v24, v26);
  swift_release(v22);
  v27 = (void *)aBlock;
  swift_release(v21);

}

uint64_t sub_10018A0AC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t Strong;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v23[24];
  _BYTE v24[24];
  _BYTE v25[24];
  _BYTE v26[24];
  _BYTE v27[24];

  v2 = sub_100003DB8(&qword_1003180C8);
  __chkstk_darwin(v2, v3);
  v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = a1 + 16;
  swift_beginAccess(v6, v27, 0, 0);
  Strong = swift_weakLoadStrong(v6);
  if (Strong)
  {
    *(_QWORD *)(Strong + 168) = 0;
    *(_OWORD *)(Strong + 152) = 0u;
    *(_OWORD *)(Strong + 136) = 0u;
    *(_OWORD *)(Strong + 120) = 0u;
    *(_OWORD *)(Strong + 104) = 0u;
    *(_BYTE *)(Strong + 176) = 1;
    swift_release(Strong);
  }
  swift_beginAccess(v6, v26, 0, 0);
  v8 = swift_weakLoadStrong(v6);
  if (v8)
  {
    v9 = v8;
    v10 = type metadata accessor for DispatchTime(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v5, 1, 1, v10);
    v11 = v9 + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__lastDeviceOrientationForwardedToMainThreadAt;
    swift_beginAccess(v9 + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__lastDeviceOrientationForwardedToMainThreadAt, v25, 33, 0);
    sub_100123FDC((uint64_t)v5, v11, &qword_1003180C8);
    swift_endAccess(v25);
    swift_release(v9);
  }
  swift_beginAccess(v6, v25, 0, 0);
  v12 = swift_weakLoadStrong(v6);
  if (v12)
  {
    *(_QWORD *)(v12 + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__currentRateRatio) = 0x3FF0000000000000;
    swift_release(v12);
  }
  swift_beginAccess(v6, v24, 0, 0);
  v13 = swift_weakLoadStrong(v6);
  if (v13)
  {
    *(_QWORD *)(v13
              + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__skippedDeviceOrientationsSinceLastForwardedToMainThread) = 0;
    swift_release(v13);
  }
  swift_beginAccess(v6, v23, 0, 0);
  v14 = swift_weakLoadStrong(v6);
  if (v14)
  {
    v15 = *(_QWORD *)(v14 + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__coreMotionErrors);
    *(_QWORD *)(v14 + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__coreMotionErrors) = 0;
    swift_release(v14);
    swift_release(v15);
  }
  if (qword_100315940 != -1)
    swift_once(&qword_100315940, sub_1001888C0);
  v16 = type metadata accessor for ConsistencyCheckOnCMQueue(0);
  v17 = swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v18 = v17 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10525ConsistencyCheckOnCMQueue__lastPingAt;
  v19 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = qword_100323E58;
  qword_100323E58 = v17;
  return swift_release(v20);
}

uint64_t sub_10018A304(char a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _WORD *v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  __n128 v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  char *v57;
  __n128 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v65;
  _BYTE *v66;
  _WORD *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t aBlock[5];
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v3 = v2;
  v76 = a2;
  v4 = a1 & 1;
  v70 = type metadata accessor for DispatchWorkItemFlags(0);
  v74 = *(_QWORD *)(v70 - 8);
  __chkstk_darwin(v70, v5);
  v7 = (char *)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for DispatchQoS(0);
  v75 = *(_QWORD *)(v72 - 8);
  __chkstk_darwin(v72, v8);
  v73 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8((uint64_t *)&unk_100324A90);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DeviceOrientationSource.DeviceOrientationErrorState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = __chkstk_darwin(v14, v16);
  v19 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = v18;
  __chkstk_darwin(v17, v20);
  v22 = (_WORD *)((char *)&v65 - v21);
  if (qword_100315898 != -1)
    swift_once(&qword_100315898, sub_1000D97F4);
  v69 = v14;
  v23 = type metadata accessor for Logger(0);
  v24 = sub_10000D744(v23, (uint64_t)qword_10033FE80);
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter();
  v27 = os_log_type_enabled(v25, v26);
  v68 = v4;
  if (v27)
  {
    v28 = swift_slowAlloc(18, -1);
    v29 = swift_slowAlloc(32, -1);
    v67 = v22;
    v30 = v29;
    aBlock[0] = v29;
    v31.n128_u64[0] = 136315394;
    *(_DWORD *)v28 = 136315394;
    v66 = v13;
    LOBYTE(v79) = v4;
    v32 = String.init<A>(describing:)(&v79, &type metadata for LocationAuthorizationType, v31);
    v34 = v33;
    v79 = sub_100172BEC(v32, v33, aBlock);
    v13 = v66;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease(v34);
    *(_WORD *)(v28 + 12) = 1026;
    LODWORD(v79) = v76 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, (char *)&v79 + 4, v28 + 14, v28 + 18);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Location authorization changed for %s: %{BOOL,public}d", (uint8_t *)v28, 0x12u);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    v35 = v30;
    v22 = v67;
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v28, -1, -1);
  }

  v36 = OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__coreMotionErrors;
  v37 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__coreMotionErrors);
  if (!v37)
  {
    v38 = type metadata accessor for CoreMotionErrors(0);
    v39 = swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
    *(_QWORD *)(v39 + 16) = _swiftEmptyArrayStorage;
    v40 = v39 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10516CoreMotionErrors__lastPeriodicCheckAt;
    v41 = type metadata accessor for DispatchTime(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
    v42 = *(_QWORD *)(v3 + v36);
    *(_QWORD *)(v3 + v36) = v39;
    swift_release(v42);
    v37 = *(_QWORD *)(v3 + v36);
    if (!v37)
      goto LABEL_13;
  }
  swift_retain(v37);
  sub_10018EC48(v68, v76 & 1);
  swift_release(v37);
  v43 = *(_QWORD *)(v3 + v36);
  if (!v43)
    goto LABEL_13;
  swift_beginAccess(v43 + 16, &v79, 0, 0);
  if (*(_QWORD *)(*(_QWORD *)(v43 + 16) + 16))
  {
    v44 = *(_QWORD *)(v3 + v36);
    if (v44)
      goto LABEL_10;
LABEL_13:
    v45 = v69;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v69);
    goto LABEL_14;
  }
  v46 = *(_QWORD *)(v3 + v36);
  *(_QWORD *)(v3 + v36) = 0;
  swift_release(v46);
  v44 = *(_QWORD *)(v3 + v36);
  if (!v44)
    goto LABEL_13;
LABEL_10:
  swift_retain(v44);
  sub_10018E524(v13);
  swift_release(v44);
  v45 = v69;
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v69) == 1)
  {
LABEL_14:
    v47 = (char *)v22 + *(int *)(v45 + 24);
    v48 = type metadata accessor for DeviceOrientationError(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v48 - 8) + 56))(v47, 1, 1, v48);
    *v22 = 257;
    sub_100007FF0((uint64_t)v13, (uint64_t *)&unk_100324A90);
    goto LABEL_15;
  }
  sub_100193100((uint64_t)v13, (uint64_t)v22);
LABEL_15:
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v50 = (void *)static OS_dispatch_queue.main.getter(v49);
  v51 = swift_allocObject(&unk_1002F5048, 24, 7);
  swift_weakInit(v51 + 16);
  sub_1000E1F30((uint64_t)v22, (uint64_t)v19, type metadata accessor for DeviceOrientationSource.DeviceOrientationErrorState);
  v52 = *(unsigned __int8 *)(v15 + 80);
  v53 = (uint64_t)v22;
  v54 = (v52 + 24) & ~v52;
  v55 = swift_allocObject(&unk_1002F5160, v54 + v71, v52 | 7);
  *(_QWORD *)(v55 + 16) = v51;
  sub_100193100((uint64_t)v19, v55 + v54);
  aBlock[4] = (uint64_t)sub_100193144;
  v78 = v55;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1001BAACC;
  aBlock[3] = (uint64_t)&unk_1002F5178;
  v56 = _Block_copy(aBlock);
  swift_release(v78);
  v57 = v73;
  static DispatchQoS.unspecified.getter(v58);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v59 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v60 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v61 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
  v62 = v60;
  v63 = v70;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v62, v61, v70, v59);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v57, v7, v56);
  _Block_release(v56);

  (*(void (**)(char *, uint64_t))(v74 + 8))(v7, v63);
  (*(void (**)(char *, uint64_t))(v75 + 8))(v57, v72);
  return sub_10000AFFC(v53, type metadata accessor for DeviceOrientationSource.DeviceOrientationErrorState);
}

uint64_t sub_10018A934(void *a1, _QWORD *a2)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(char *, uint64_t);
  uint64_t result;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  _BOOL4 v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _BYTE *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _WORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  __n128 v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  _WORD *v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  __n128 v115;
  void *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  char *v122;
  __n128 v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  __n128 v132;
  void *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  char *v140;
  __n128 v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  char *v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  void (*v165)(char *, uint64_t, uint64_t);
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  __n128 v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint64_t v178;
  char *v179;
  uint64_t v180;
  unint64_t v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  void *v185;
  uint64_t v186;
  char *v187;
  __n128 v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  void *v193;
  char *v194;
  uint64_t v195;
  double v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  unint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  __n128 v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  char *v209;
  __n128 v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t (*v213)(char *, uint64_t);
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  void *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  char *v230;
  char *v231;
  char *v232;
  uint64_t v233;
  _WORD *v234;
  char *v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  id v240;
  uint64_t v241;
  char *v242;
  _WORD *v243;
  uint64_t v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  void (*v249)(uint64_t, uint64_t);
  char *v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  char v258[8];
  char v259[8];
  _QWORD *v260;
  uint64_t v261;
  uint64_t (*v262)(uint64_t);
  void *v263;
  uint64_t (*v264)();
  uint64_t v265;
  char v266[8];
  __int128 aBlock;
  __int128 v268;
  __int128 v269;
  __int128 v270;
  uint64_t v271;

  v240 = a1;
  v239 = *v2;
  v4 = sub_100003DB8(&qword_1003180C8);
  v6 = __chkstk_darwin(v4, v5);
  v233 = (uint64_t)&v221 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6, v8);
  v238 = (uint64_t)&v221 - v10;
  __chkstk_darwin(v9, v11);
  v237 = (char *)&v221 - v12;
  v252 = type metadata accessor for DispatchWorkItemFlags(0);
  v13 = *(_QWORD *)(v252 - 8);
  __chkstk_darwin(v252, v14);
  v250 = (char *)&v221 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v257 = type metadata accessor for DispatchQoS(0);
  v253 = *(_QWORD *)(v257 - 8);
  __chkstk_darwin(v257, v16);
  v251 = (char *)&v221 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003DB8((uint64_t *)&unk_100324A90);
  v20 = __chkstk_darwin(v18, v19);
  v235 = (char *)&v221 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v22);
  v242 = (char *)&v221 - v23;
  v244 = type metadata accessor for DeviceOrientationSource.DeviceOrientationErrorState(0);
  v248 = *(_QWORD *)(v244 - 8);
  v25 = __chkstk_darwin(v244, v24);
  v234 = (_WORD *)((char *)&v221 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = __chkstk_darwin(v25, v27);
  v245 = (uint64_t)&v221 - v29;
  v246 = v30;
  __chkstk_darwin(v28, v31);
  v243 = (_WORD *)((char *)&v221 - v32);
  v33 = type metadata accessor for DispatchTime(0);
  v34 = *(_QWORD *)(v33 - 8);
  v35 = *(_QWORD *)(v34 + 64);
  v37 = __chkstk_darwin(v33, v36);
  v231 = (char *)&v221 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __chkstk_darwin(v37, v38);
  v232 = (char *)&v221 - v40;
  v42 = __chkstk_darwin(v39, v41);
  v230 = (char *)&v221 - v43;
  v45 = __chkstk_darwin(v42, v44);
  v236 = (char *)&v221 - v46;
  v48 = __chkstk_darwin(v45, v47);
  v50 = (char *)&v221 - v49;
  __chkstk_darwin(v48, v51);
  v53 = (char *)&v221 - v52;
  if (qword_100315940 != -1)
    swift_once(&qword_100315940, sub_1001888C0);
  v54 = qword_100323E58;
  swift_retain(qword_100323E58);
  static DispatchTime.now()(v55);
  v56 = OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__currentRateRatio;
  v255 = (uint64_t)v2;
  sub_10018C6BC((uint64_t)v53, *(double *)((char *)v2 + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__currentRateRatio));
  swift_release(v54);
  v241 = v34;
  v57 = *(uint64_t (**)(char *, uint64_t))(v34 + 8);
  v256 = (uint64_t)v53;
  v254 = v33;
  result = v57(v53, v33);
  if (a2)
  {
    swift_errorRetain(a2);
    v59 = a2;
    if (qword_100315898 != -1)
      swift_once(&qword_100315898, sub_1000D97F4);
    v60 = type metadata accessor for Logger(0);
    sub_10000D744(v60, (uint64_t)qword_10033FE80);
    swift_errorRetain(a2);
    v61 = swift_errorRetain(a2);
    v62 = Logger.logObject.getter(v61);
    v63 = static os_log_type_t.error.getter();
    v64 = os_log_type_enabled(v62, v63);
    v247 = v13;
    v249 = (void (*)(uint64_t, uint64_t))v57;
    if (v64)
    {
      v65 = (uint8_t *)swift_slowAlloc(12, -1);
      v66 = swift_slowAlloc(32, -1);
      *(_QWORD *)&aBlock = v66;
      *(_DWORD *)v65 = 136446210;
      v260 = v59;
      swift_errorRetain(v59);
      v67 = sub_100003DB8((uint64_t *)&unk_100324AA0);
      v69 = String.init<A>(describing:)(&v260, v67, v68);
      v71 = v70;
      v260 = (_QWORD *)sub_100172BEC(v69, v70, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v260, &v261, v65 + 4, v65 + 12);
      swift_bridgeObjectRelease(v71);
      swift_errorRelease(v59);
      swift_errorRelease(v59);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Error getting device motion data: %{public}s", v65, 0xCu);
      swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1, -1);
      swift_slowDealloc(v65, -1, -1);
    }
    else
    {
      swift_errorRelease(v59);
      swift_errorRelease(v59);
    }

    v95 = v254;
    v96 = v248;
    v97 = OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__coreMotionErrors;
    v98 = v255;
    v99 = *(_QWORD *)(v255 + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__coreMotionErrors);
    if (v99)
      goto LABEL_57;
    v100 = type metadata accessor for CoreMotionErrors(0);
    v101 = swift_allocObject(v100, *(unsigned int *)(v100 + 48), *(unsigned __int16 *)(v100 + 52));
    *(_QWORD *)(v101 + 16) = _swiftEmptyArrayStorage;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v241 + 56))(v101 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10516CoreMotionErrors__lastPeriodicCheckAt, 1, 1, v95);
    v102 = *(_QWORD *)(v98 + v97);
    *(_QWORD *)(v98 + v97) = v101;
    swift_release(v102);
    v99 = *(_QWORD *)(v98 + v97);
    if (v99)
    {
LABEL_57:
      v103 = swift_retain(v99);
      v104 = (void *)_convertErrorToNSError(_:)(v59, v103);
      v105 = v256;
      static DispatchTime.now()(v104);
      sub_10018E74C(v104, v105);
      swift_release(v99);

      v249(v105, v95);
      v106 = *(_QWORD *)(v98 + v97);
      if (v106)
      {
        swift_beginAccess(v106 + 16, &v260, 0, 0);
        if (*(_QWORD *)(*(_QWORD *)(v106 + 16) + 16))
        {
          v107 = *(_QWORD *)(v98 + v97);
          if (v107)
            goto LABEL_27;
        }
        else
        {
          v111 = *(_QWORD *)(v98 + v97);
          *(_QWORD *)(v98 + v97) = 0;
          swift_release(v111);
          v107 = *(_QWORD *)(v98 + v97);
          if (v107)
          {
LABEL_27:
            swift_retain(v107);
            v108 = v242;
            sub_10018E524(v242);
            swift_release(v107);
            v109 = v244;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v108, 1, v244) != 1)
            {
              v110 = v243;
              sub_100193100((uint64_t)v108, (uint64_t)v243);
LABEL_32:
              v114 = v245;
              sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
              v116 = (void *)static OS_dispatch_queue.main.getter(v115);
              v117 = swift_allocObject(&unk_1002F5048, 24, 7);
              swift_weakInit(v117 + 16);
              sub_1000E1F30((uint64_t)v110, v114, type metadata accessor for DeviceOrientationSource.DeviceOrientationErrorState);
              v118 = *(unsigned __int8 *)(v96 + 80);
              v119 = (v118 + 24) & ~v118;
              v120 = swift_allocObject(&unk_1002F5110, v119 + v246, v118 | 7);
              *(_QWORD *)(v120 + 16) = v117;
              sub_100193100(v114, v120 + v119);
              *(_QWORD *)&v269 = sub_100193144;
              *((_QWORD *)&v269 + 1) = v120;
              *(_QWORD *)&aBlock = _NSConcreteStackBlock;
              *((_QWORD *)&aBlock + 1) = 1107296256;
              *(_QWORD *)&v268 = sub_1001BAACC;
              *((_QWORD *)&v268 + 1) = &unk_1002F5128;
              v121 = _Block_copy(&aBlock);
              swift_release(*((_QWORD *)&v269 + 1));
              v122 = v251;
              static DispatchQoS.unspecified.getter(v123);
              *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
              v124 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              v125 = sub_100003DB8((uint64_t *)&unk_1003178D0);
              v126 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
              v127 = v250;
              v128 = v125;
              v129 = v252;
              dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v128, v126, v252, v124);
              OS_dispatch_queue.async(group:qos:flags:execute:)(0, v122, v127, v121);
              _Block_release(v121);

              swift_errorRelease(v59);
              (*(void (**)(char *, uint64_t))(v247 + 8))(v127, v129);
              (*(void (**)(char *, uint64_t))(v253 + 8))(v122, v257);
              return sub_10000AFFC((uint64_t)v110, type metadata accessor for DeviceOrientationSource.DeviceOrientationErrorState);
            }
LABEL_31:
            v110 = v243;
            v112 = (char *)v243 + *(int *)(v109 + 24);
            v113 = type metadata accessor for DeviceOrientationError(0);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 56))(v112, 1, 1, v113);
            *v110 = 257;
            sub_100007FF0((uint64_t)v108, (uint64_t *)&unk_100324A90);
            goto LABEL_32;
          }
        }
      }
    }
    v108 = v242;
    v109 = v244;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v96 + 56))(v242, 1, 1, v244);
    goto LABEL_31;
  }
  v243 = (_WORD *)v56;
  v72 = v257;
  if (!v240)
    return result;
  v247 = v13;
  v242 = (char *)v240;
  result = (uint64_t)sub_100192CA0(v242, (uint64_t)&aBlock);
  v74 = *((_QWORD *)&aBlock + 1);
  v73 = aBlock;
  v229 = *((_QWORD *)&v268 + 1);
  v240 = (id)v268;
  v227 = *((_QWORD *)&v269 + 1);
  v228 = v269;
  v225 = *((_QWORD *)&v270 + 1);
  v226 = v270;
  v224 = v271;
  v75 = v255;
  v221 = OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__coreMotionErrors;
  v76 = *(_QWORD *)(v255 + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__coreMotionErrors);
  v77 = v256;
  v249 = (void (*)(uint64_t, uint64_t))v57;
  if (v76)
  {
    v222 = *((_QWORD *)&aBlock + 1);
    v223 = aBlock;
    swift_retain(v76);
    static DispatchTime.now()(v78);
    swift_beginAccess(v76 + 16, v266, 0, 0);
    v79 = *(_QWORD *)(v76 + 16);
    v80 = *(_QWORD *)(v79 + 16);
    if (v80)
    {
      v81 = (_QWORD *)(v79 + 32);
      swift_bridgeObjectRetain(*(_QWORD *)(v76 + 16));
      v82 = v242;
      do
      {
        v83 = v81[3];
        v84 = v81[4];
        sub_100007BBC(v81, v83);
        (*(void (**)(char *, char *, uint64_t, uint64_t))(v84 + 8))(v82, v50, v83, v84);
        v81 += 5;
        --v80;
      }
      while (v80);
      swift_bridgeObjectRelease(v79);
      v72 = v257;
      v77 = v256;
    }
    sub_10018EE98((uint64_t)v50);
    sub_10018F218();
    v86 = v85;
    swift_release(v76);
    v57 = (uint64_t (*)(char *, uint64_t))v249;
    result = ((uint64_t (*)(char *, uint64_t))v249)(v50, v254);
    v75 = v255;
    v73 = v223;
    v74 = v222;
    if ((v86 & 1) != 0)
    {
      v87 = v221;
      v88 = *(_QWORD *)(v255 + v221);
      v89 = v248;
      v90 = v235;
      if (!v88)
        goto LABEL_33;
      swift_beginAccess(v88 + 16, v258, 0, 0);
      if (!*(_QWORD *)(*(_QWORD *)(v88 + 16) + 16))
      {
        v91 = *(_QWORD *)(v75 + v87);
        *(_QWORD *)(v75 + v87) = 0;
        swift_release(v91);
      }
      v92 = *(_QWORD *)(v75 + v87);
      if (v92)
      {
        swift_retain(v92);
        sub_10018E524(v90);
        swift_release(v92);
        v93 = v244;
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v89 + 48))(v90, 1, v244) != 1)
        {
          v94 = v234;
          sub_100193100((uint64_t)v90, (uint64_t)v234);
LABEL_35:
          sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
          v133 = (void *)static OS_dispatch_queue.main.getter(v132);
          v134 = swift_allocObject(&unk_1002F5048, 24, 7);
          swift_weakInit(v134 + 16);
          v135 = v245;
          sub_1000E1F30((uint64_t)v94, v245, type metadata accessor for DeviceOrientationSource.DeviceOrientationErrorState);
          v136 = *(unsigned __int8 *)(v248 + 80);
          v137 = (v136 + 24) & ~v136;
          v138 = swift_allocObject(&unk_1002F50C0, v137 + v246, v136 | 7);
          *(_QWORD *)(v138 + 16) = v134;
          sub_100193100(v135, v138 + v137);
          v264 = sub_100193144;
          v265 = v138;
          v260 = _NSConcreteStackBlock;
          v261 = 1107296256;
          v262 = sub_1001BAACC;
          v263 = &unk_1002F50D8;
          v139 = _Block_copy(&v260);
          swift_release(v265);
          v140 = v251;
          static DispatchQoS.unspecified.getter(v141);
          v260 = _swiftEmptyArrayStorage;
          v142 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          v143 = sub_100003DB8((uint64_t *)&unk_1003178D0);
          v144 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
          v145 = v250;
          v146 = v143;
          v147 = v252;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v260, v146, v144, v252, v142);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0, v140, v145, v139);
          _Block_release(v139);

          (*(void (**)(char *, uint64_t))(v247 + 8))(v145, v147);
          v72 = v257;
          (*(void (**)(char *, uint64_t))(v253 + 8))(v140, v257);
          result = sub_10000AFFC((uint64_t)v94, type metadata accessor for DeviceOrientationSource.DeviceOrientationErrorState);
          v57 = (uint64_t (*)(char *, uint64_t))v249;
          v77 = v256;
          v73 = v223;
          v74 = v222;
          goto LABEL_36;
        }
      }
      else
      {
LABEL_33:
        v93 = v244;
        (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v89 + 56))(v90, 1, 1, v244);
      }
      v94 = v234;
      v130 = (char *)v234 + *(int *)(v93 + 24);
      v131 = type metadata accessor for DeviceOrientationError(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v131 - 8) + 56))(v130, 1, 1, v131);
      *v94 = 257;
      sub_100007FF0((uint64_t)v90, (uint64_t *)&unk_100324A90);
      goto LABEL_35;
    }
  }
LABEL_36:
  v148 = v75;
  if ((*(_BYTE *)(v75 + 176) & 1) != 0
    || vabdd_f64(*(double *)(v75 + 104), *(double *)&aBlock) >= 0.0436332313
    || vabdd_f64(*(double *)(v75 + 112), *((double *)&aBlock + 1)) >= 0.0436332313)
  {
    static DispatchTime.now()(result);
    *(_QWORD *)(v75 + 104) = v73;
    *(_QWORD *)(v75 + 112) = v74;
    v160 = v229;
    *(_QWORD *)(v75 + 120) = v240;
    *(_QWORD *)(v75 + 128) = v160;
    v161 = v227;
    *(_QWORD *)(v75 + 136) = v228;
    *(_QWORD *)(v75 + 144) = v161;
    v162 = v225;
    *(_QWORD *)(v75 + 152) = v226;
    *(_QWORD *)(v75 + 160) = v162;
    *(_QWORD *)(v75 + 168) = v224;
    *(_BYTE *)(v75 + 176) = 0;
    v163 = v75;
    v164 = v241;
    v165 = *(void (**)(char *, uint64_t, uint64_t))(v241 + 16);
    v166 = (uint64_t)v237;
    v167 = v254;
    v165(v237, v77, v254);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v164 + 56))(v166, 0, 1, v167);
    v168 = v238;
    sub_10013E3D4(v166, v238);
    v169 = v163 + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__lastDeviceOrientationForwardedToMainThreadAt;
    swift_beginAccess(v163 + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__lastDeviceOrientationForwardedToMainThreadAt, &v260, 33, 0);
    sub_100123FDC(v168, v169, &qword_1003180C8);
    swift_endAccess(&v260);
    *(_QWORD *)((char *)v243 + v163) = 0x3FF0000000000000;
    v248 = *(_QWORD *)(v163
                     + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__skippedDeviceOrientationsSinceLastForwardedToMainThread);
    *(_QWORD *)(v163
              + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__skippedDeviceOrientationsSinceLastForwardedToMainThread) = 0;
    sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
    v255 = static OS_dispatch_queue.main.getter(v170);
    v171 = v236;
    v165(v236, v77, v167);
    v172 = *(unsigned __int8 *)(v164 + 80);
    v173 = (v172 + 24) & ~v172;
    v174 = (v35 + v173 + 7) & 0xFFFFFFFFFFFFFFF8;
    v175 = v252;
    v176 = (v174 + 15) & 0xFFFFFFFFFFFFFFF8;
    v177 = (v176 + 79) & 0xFFFFFFFFFFFFFFF8;
    v178 = swift_allocObject(&unk_1002F4FF8, v177 + 8, v172 | 7);
    *(_QWORD *)(v178 + 16) = v163;
    v179 = v171;
    v180 = v167;
    (*(void (**)(uint64_t, char *, uint64_t))(v164 + 32))(v178 + v173, v179, v167);
    *(_QWORD *)(v178 + v174) = v248;
    v181 = v178 + v176;
    v182 = v270;
    v183 = v268;
    *(_OWORD *)(v181 + 32) = v269;
    *(_OWORD *)(v181 + 48) = v182;
    v184 = aBlock;
    *(_QWORD *)(v181 + 64) = v271;
    *(_OWORD *)v181 = v184;
    *(_OWORD *)(v181 + 16) = v183;
    *(_QWORD *)(v178 + v177) = v239;
    v264 = sub_100193038;
    v265 = v178;
    v260 = _NSConcreteStackBlock;
    v261 = 1107296256;
    v262 = sub_1001BAACC;
    v263 = &unk_1002F5010;
    v185 = _Block_copy(&v260);
    v186 = v265;
    swift_retain(v163);
    swift_release(v186);
    v187 = v251;
    static DispatchQoS.unspecified.getter(v188);
    v260 = _swiftEmptyArrayStorage;
    v189 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v190 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v191 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
    v192 = v250;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v260, v190, v191, v175, v189);
    v193 = (void *)v255;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v187, v192, v185);
    _Block_release(v185);

    (*(void (**)(char *, uint64_t))(v247 + 8))(v192, v175);
    (*(void (**)(char *, uint64_t))(v253 + 8))(v187, v257);
    return ((uint64_t (*)(uint64_t, uint64_t))v249)(v256, v180);
  }
  else
  {
    v149 = *(_QWORD *)(v75
                     + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__skippedDeviceOrientationsSinceLastForwardedToMainThread);
    v150 = __CFADD__(v149, 1);
    v151 = v149 + 1;
    if (!v150)
    {
      *(_QWORD *)(v75
                + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__skippedDeviceOrientationsSinceLastForwardedToMainThread) = v151;
      v152 = v75 + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__lastDeviceOrientationForwardedToMainThreadAt;
      swift_beginAccess(v75 + OBJC_IVAR____TtC8SOSBuddy23DeviceOrientationSource__lastDeviceOrientationForwardedToMainThreadAt, v259, 0, 0);
      v153 = v233;
      sub_10013E2E0(v152, v233);
      v154 = v241;
      v155 = v254;
      v156 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v241 + 48))(v153, 1, v254);
      v157 = v253;
      v158 = v232;
      v159 = v231;
      if (v156 == 1)
      {

        return sub_100007FF0(v153, &qword_1003180C8);
      }
      v194 = v230;
      (*(void (**)(char *, uint64_t, uint64_t))(v154 + 32))(v230, v153, v155);
      v195 = (uint64_t)v243;
      v196 = *(double *)((char *)v243 + v148);
      v197 = (*(uint64_t (**)(char *, char *, uint64_t))(v154 + 16))(v158, v194, v155);
      if (v196 >= 10.0)
        goto LABEL_48;
      v198 = static DispatchTime.now()(v197);
      v199 = DispatchTime.uptimeNanoseconds.getter(v198);
      v200 = DispatchTime.uptimeNanoseconds.getter(v199);
      if (v200 >= v199)
      {
        v203 = 0;
      }
      else
      {
        v201 = DispatchTime.uptimeNanoseconds.getter(v200);
        v202 = DispatchTime.uptimeNanoseconds.getter(v201);
        v150 = v201 >= v202;
        v203 = v201 - v202;
        if (!v150)
        {
          __break(1u);
LABEL_48:

          v57(v158, v155);
          return v57(v230, v155);
        }
      }
      v57(v159, v155);
      v57(v158, v155);
      if (v203 > 0x12A15343FLL)
      {
        *(_QWORD *)(v148 + v195) = 0x4024000000000000;
        sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
        v256 = static OS_dispatch_queue.main.getter(v204);
        v205 = swift_allocObject(&unk_1002F5048, 24, 7);
        swift_weakInit(v205 + 16);
        v206 = swift_allocObject(&unk_1002F5070, 32, 7);
        v207 = v239;
        *(_QWORD *)(v206 + 16) = v205;
        *(_QWORD *)(v206 + 24) = v207;
        v264 = (uint64_t (*)())sub_1001930F4;
        v265 = v206;
        v260 = _NSConcreteStackBlock;
        v261 = 1107296256;
        v262 = sub_1001BAACC;
        v263 = &unk_1002F5088;
        v208 = _Block_copy(&v260);
        swift_release(v265);
        v209 = v251;
        static DispatchQoS.unspecified.getter(v210);
        v260 = _swiftEmptyArrayStorage;
        v211 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v212 = v72;
        v213 = v57;
        v214 = sub_100003DB8((uint64_t *)&unk_1003178D0);
        v215 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
        v216 = v155;
        v217 = v250;
        v218 = v214;
        v219 = v252;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v260, v218, v215, v252, v211);
        v220 = (void *)v256;
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v209, v217, v208);

        _Block_release(v208);
        (*(void (**)(char *, uint64_t))(v247 + 8))(v217, v219);
        (*(void (**)(char *, uint64_t))(v157 + 8))(v209, v212);
        return v213(v230, v216);
      }

      return v57(v230, v155);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10018BE7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 24);
    swift_retain(v6);
    swift_release(v5);
    PassthroughSubject.send(_:)(a2);
    return swift_release(v6);
  }
  return result;
}

void sub_10018BEF8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t Strong;
  uint64_t v8;
  id v9;
  _BYTE v10[24];

  v1 = a1 + 16;
  if (qword_100315898 != -1)
    swift_once(&qword_100315898, sub_1000D97F4);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FE80);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Reducing deviceMotionUpdateInterval due to the lack of motion", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  swift_beginAccess(v1, v10, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v8 = Strong;
    v9 = *(id *)(Strong + 32);
    swift_release(v8);
    objc_msgSend(v9, "setDeviceMotionUpdateInterval:", 1.0);

  }
}

uint64_t sub_10018C020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  double v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  uint64_t v32;
  uint64_t v33;
  _OWORD v34[4];
  uint64_t v35;

  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static DispatchTime.now()(v11);
  v14 = *(void **)(a1 + 32);
  objc_msgSend(v14, "deviceMotionUpdateInterval");
  if (v15 > 0.1)
  {
    if (qword_100315898 != -1)
      swift_once(&qword_100315898, sub_1000D97F4);
    v16 = type metadata accessor for Logger(0);
    v17 = sub_10000D744(v16, (uint64_t)qword_10033FE80);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(2, -1);
      v33 = a2;
      v21 = a3;
      v22 = v20;
      *(_WORD *)v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Returning deviceMotionUpdateInterval back to normal rate", v20, 2u);
      v23 = v22;
      a3 = v21;
      a2 = v33;
      swift_slowDealloc(v23, -1, -1);
    }

    objc_msgSend(v14, "setDeviceMotionUpdateInterval:", 0.1);
  }
  if (qword_100315938 != -1)
    swift_once(&qword_100315938, sub_100188840);
  v24 = qword_100323E50;
  swift_retain(qword_100323E50);
  sub_10018CACC(a2, (unint64_t)v13, a3);
  swift_release(v24);
  v25 = qword_100323E50;
  v26 = *(double *)(a4 + 64);
  swift_retain(qword_100323E50);
  v27 = sub_10018CD20((uint64_t)v13, v26);
  v28 = swift_release(v25);
  if ((v27 & 1) != 0)
    sub_10018C268(v28, a4);
  v29 = *(_OWORD *)(a4 + 48);
  v34[2] = *(_OWORD *)(a4 + 32);
  v34[3] = v29;
  v35 = *(_QWORD *)(a4 + 64);
  v30 = *(_OWORD *)(a4 + 16);
  v34[0] = *(_OWORD *)a4;
  v34[1] = v30;
  PassthroughSubject.send(_:)(v34);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
}

void sub_10018C268(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v4;
  void *v5;
  double v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  uint64_t v25;
  double v26[9];

  v4 = objc_msgSend(*(id *)(v2 + 32), "deviceMotion");
  if (!v4)
  {
    if (qword_100315898 == -1)
      goto LABEL_14;
    goto LABEL_30;
  }
  v5 = v4;
  sub_100192CA0(v4, (uint64_t)v26);
  v6 = round(*(double *)a2 * 57.2957795);
  if ((~*(_QWORD *)&v6 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (v6 <= -9.22337204e18)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (v6 >= 9.22337204e18)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  v7 = round(v26[0] * 57.2957795);
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_29:
    __break(1u);
LABEL_30:
    swift_once(&qword_100315898, sub_1000D97F4);
LABEL_14:
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10000D744(v15, (uint64_t)qword_10033FE80);
    v24 = Logger.logObject.getter(v16);
    v17 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, v17, "DeviceOrientationSource: checkConsistency: deviceMotion is not available", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }
    goto LABEL_23;
  }
  v8 = (uint64_t)v6;
  v9 = (uint64_t)v7;
  if (*(uint64_t *)&v6 == *(uint64_t *)&v7)
  {
    if (qword_100315898 != -1)
      swift_once(&qword_100315898, sub_1000D97F4);
    v10 = type metadata accessor for Logger(0);
    sub_10000D744(v10, (uint64_t)qword_10033FE80);
    v24 = v5;
    v11 = Logger.logObject.getter(v24);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v13 = 134349056;
      -[NSObject timestamp](v24, "timestamp");
      v25 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v13 + 4, v13 + 12);

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "DeviceOrientationSource: checkConsistency: pull motion recorded at %{public}f", v13, 0xCu);
      swift_slowDealloc(v13, -1, -1);

      return;
    }

  }
  else
  {
    if (qword_100315898 != -1)
      swift_once(&qword_100315898, sub_1000D97F4);
    v19 = type metadata accessor for Logger(0);
    sub_10000D744(v19, (uint64_t)qword_10033FE80);
    v24 = v5;
    v20 = Logger.logObject.getter(v24);
    v21 = static os_log_type_t.default.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      v22 = swift_slowAlloc(42, -1);
      *(_DWORD *)v22 = 134349824;
      v25 = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v22 + 4, v22 + 12);
      *(_WORD *)(v22 + 12) = 2050;
      v25 = *(_QWORD *)(a2 + 64);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v22 + 14, v22 + 22);
      *(_WORD *)(v22 + 22) = 2050;
      v25 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v22 + 24, v22 + 32);
      *(_WORD *)(v22 + 32) = 2050;
      -[NSObject timestamp](v24, "timestamp");
      v25 = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v22 + 34, v22 + 42);

      _os_log_impl((void *)&_mh_execute_header, v20, v21, "DeviceOrientationSource: checkConsistency: push heading = %{public}lld at %{public}f, pull heading = %{public}lld at %{public}f", (uint8_t *)v22, 0x2Au);
      swift_slowDealloc(v22, -1, -1);

      return;
    }

  }
LABEL_23:

}

void sub_10018C6BC(uint64_t a1, double a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint8_t *v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _BYTE v42[24];

  v6 = sub_100003DB8(&qword_1003180C8);
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v8, v11);
  v14 = (char *)&v38 - v13;
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v38 - v16;
  v18 = type metadata accessor for DispatchTime(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v2 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10525ConsistencyCheckOnCMQueue__lastPingAt;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10525ConsistencyCheckOnCMQueue__lastPingAt, v42, 0, 0);
  sub_10013E2E0(v23, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
  {
    v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v22, v17, v18);
    v25 = DispatchTime.uptimeNanoseconds.getter(v24);
    v26 = DispatchTime.uptimeNanoseconds.getter(v25);
    if (v26 < v25)
    {
      v27 = DispatchTime.uptimeNanoseconds.getter(v26);
      v28 = DispatchTime.uptimeNanoseconds.getter(v27);
      v29 = v27 - v28;
      if (v27 >= v28)
        goto LABEL_7;
      __break(1u);
    }
    v29 = 0;
LABEL_7:
    v30 = a2 * 100.0;
    if ((~COERCE__INT64(a2 * 100.0) & 0x7FF0000000000000) != 0)
    {
      if (v30 > -1.0)
      {
        if (v30 < 1.84467441e19)
        {
          if ((unint64_t)v30 < 0xFFFFFFFFFFFFFF9CLL)
          {
            v3 = v29 / 0xF4240;
            if ((unint64_t)v30 + 100 >= v29 / 0xF4240)
            {
LABEL_16:
              (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
              goto LABEL_17;
            }
            if (qword_100315898 == -1)
            {
LABEL_13:
              v31 = type metadata accessor for Logger(0);
              v32 = sub_10000D744(v31, (uint64_t)qword_10033FE80);
              v33 = Logger.logObject.getter(v32);
              v34 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v33, v34))
              {
                v35 = (uint8_t *)swift_slowAlloc(12, -1);
                v39 = a1;
                v40 = v3;
                v36 = v35;
                *(_DWORD *)v35 = 134349056;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v35 + 4, v35 + 12);
                _os_log_impl((void *)&_mh_execute_header, v33, v34, "DeviceOrientationSource: updates from CoreMotion are lagging, delay is %{public}llu ms", v36, 0xCu);
                v37 = v36;
                a1 = v39;
                swift_slowDealloc(v37, -1, -1);
              }

              goto LABEL_16;
            }
LABEL_22:
            swift_once(&qword_100315898, sub_1000D97F4);
            goto LABEL_13;
          }
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }
LABEL_20:
        __break(1u);
        goto LABEL_21;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_20;
  }
  sub_100007FF0((uint64_t)v17, &qword_1003180C8);
LABEL_17:
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v14, a1, v18);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v14, 0, 1, v18);
  sub_10013E3D4((uint64_t)v14, (uint64_t)v10);
  swift_beginAccess(v23, &v40, 33, 0);
  sub_100123FDC((uint64_t)v10, v23, &qword_1003180C8);
  swift_endAccess(&v40);
}

uint64_t sub_10018CA28()
{
  return sub_10018D1A4(&OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10525ConsistencyCheckOnCMQueue__lastPingAt);
}

uint64_t sub_10018CA34()
{
  return type metadata accessor for ConsistencyCheckOnCMQueue(0);
}

uint64_t type metadata accessor for ConsistencyCheckOnCMQueue(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_1003240F0, (uint64_t)&nominal type descriptor for ConsistencyCheckOnCMQueue);
}

void sub_10018CA50(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1000F03D4(319, (unint64_t *)&qword_100323F10, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 1, &v4, a1 + 80);
  }
}

void sub_10018CACC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  __n128 v12;
  char v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v4 = v3;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (uint64_t *)((char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v11 = static OS_dispatch_queue.main.getter(v12);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = _dispatchPreconditionTest(_:)(v11);
  v14 = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  v15 = DispatchTime.uptimeNanoseconds.getter(v14);
  v16 = DispatchTime.uptimeNanoseconds.getter(v15);
  if (v16 >= v15)
    goto LABEL_10;
  v17 = DispatchTime.uptimeNanoseconds.getter(v16);
  v18 = DispatchTime.uptimeNanoseconds.getter(v17);
  v19 = v17 >= v18;
  a2 = v17 - v18;
  if (v19)
  {
    if (a2 >= 0x6052340)
    {
      if (qword_100315898 == -1)
        goto LABEL_7;
      goto LABEL_17;
    }
    goto LABEL_10;
  }
  while (1)
  {
    __break(1u);
LABEL_17:
    swift_once(&qword_100315898, sub_1000D97F4);
LABEL_7:
    v20 = type metadata accessor for Logger(0);
    v21 = sub_10000D744(v20, (uint64_t)qword_10033FE80);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = a2 / 0xF4240;
      a2 = swift_slowAlloc(12, -1);
      *(_DWORD *)a2 = 134349056;
      v30 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, a2 + 4, a2 + 12);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "DeviceOrientationSource: updates on main thread are lagging, delay is %{public}llu ms", (uint8_t *)a2, 0xCu);
      swift_slowDealloc(a2, -1, -1);
    }

LABEL_10:
    v25 = *(_QWORD *)(v4
                    + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10527ConsistencyCheckOnMainQueue__updatesSinceLastConsistencyCheck);
    v19 = __CFADD__(v25, 1);
    v26 = v25 + 1;
    if (!v19)
      break;
LABEL_14:
    __break(1u);
LABEL_15:
    __break(1u);
  }
  *(_QWORD *)(v4
            + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10527ConsistencyCheckOnMainQueue__updatesSinceLastConsistencyCheck) = v26;
  v27 = *(_QWORD *)(v4
                  + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10527ConsistencyCheckOnMainQueue__skippedUpdatesSinceLastConsistencyCheck);
  v19 = __CFADD__(v27, a3);
  v28 = v27 + a3;
  if (v19)
    goto LABEL_15;
  *(_QWORD *)(v4
            + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10527ConsistencyCheckOnMainQueue__skippedUpdatesSinceLastConsistencyCheck) = v28;
}

uint64_t sub_10018CD20(uint64_t a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _DWORD *v36;
  _DWORD *v37;
  unint64_t v38;
  _DWORD *v39;
  uint64_t v40;
  _DWORD *v42;
  NSObject *v43;
  uint64_t v44;
  int v45;
  unint64_t v46;
  _BYTE v47[16];
  char v48[24];

  v3 = v2;
  v6 = sub_100003DB8(&qword_1003180C8);
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v8, v11);
  v14 = (char *)&v42 - v13;
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v42 - v16;
  v18 = type metadata accessor for DispatchTime(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v3
      + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10527ConsistencyCheckOnMainQueue__lastConsistencyCheckAt;
  swift_beginAccess(v3+ OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10527ConsistencyCheckOnMainQueue__lastConsistencyCheckAt, v48, 0, 0);
  sub_10013E2E0(v23, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_100007FF0((uint64_t)v17, &qword_1003180C8);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v14, a1, v18);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v14, 0, 1, v18);
    sub_10013E3D4((uint64_t)v14, (uint64_t)v10);
    swift_beginAccess(v23, &v46, 33, 0);
    sub_100123FDC((uint64_t)v10, v23, &qword_1003180C8);
    swift_endAccess(&v46);
    return 0;
  }
  v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v22, v17, v18);
  v25 = DispatchTime.uptimeNanoseconds.getter(v24);
  v26 = DispatchTime.uptimeNanoseconds.getter(v25);
  if (v26 >= v25)
    goto LABEL_10;
  v27 = DispatchTime.uptimeNanoseconds.getter(v26);
  v28 = DispatchTime.uptimeNanoseconds.getter(v27);
  v29 = v27 >= v28;
  v30 = v27 - v28;
  if (!v29)
  {
    __break(1u);
LABEL_15:
    swift_once(&qword_100315898, sub_1000D97F4);
    goto LABEL_8;
  }
  if (v30 < 0x12A153440)
  {
LABEL_10:
    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    return 0;
  }
  if (qword_100315898 != -1)
    goto LABEL_15;
LABEL_8:
  v31 = type metadata accessor for Logger(0);
  sub_10000D744(v31, (uint64_t)qword_10033FE80);
  v33 = swift_retain_n(v3, v32);
  v34 = Logger.logObject.getter(v33);
  v35 = static os_log_type_t.default.getter(v34);
  v45 = v35;
  if (os_log_type_enabled(v34, v35))
  {
    v43 = v34;
    v36 = (_DWORD *)swift_slowAlloc(42, -1);
    v44 = a1;
    v37 = v36;
    *v36 = 134349824;
    v46 = v30 / 0xF4240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v36 + 1, v36 + 3);
    *((_WORD *)v37 + 6) = 2050;
    v46 = *(_QWORD *)(v3
                    + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10527ConsistencyCheckOnMainQueue__updatesSinceLastConsistencyCheck);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, (char *)v37 + 14, (char *)v37 + 22);
    *((_WORD *)v37 + 11) = 2050;
    v42 = v37 + 6;
    v38 = *(_QWORD *)(v3
                    + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10527ConsistencyCheckOnMainQueue__skippedUpdatesSinceLastConsistencyCheck);
    swift_release(v3);
    v46 = v38;
    v34 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, v42, v37 + 8);
    swift_release(v3);
    *((_WORD *)v37 + 16) = 2050;
    v46 = *(_QWORD *)&a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, v47, (char *)v37 + 34, (char *)v37 + 42);
    _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v45, "DeviceOrientationSource: checkConsistency: in last %{public}llu ms received %{public}llu (+ %{public}llu skipped) CoreMotion updates on main queue, last one recorded at %{public}f", (uint8_t *)v37, 0x2Au);
    v39 = v37;
    a1 = v44;
    swift_slowDealloc(v39, -1, -1);
  }
  else
  {
    swift_release_n(v3);
  }

  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  *(_QWORD *)(v3
            + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10527ConsistencyCheckOnMainQueue__updatesSinceLastConsistencyCheck) = 0;
  *(_QWORD *)(v3
            + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10527ConsistencyCheckOnMainQueue__skippedUpdatesSinceLastConsistencyCheck) = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v14, a1, v18);
  v40 = 1;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v14, 0, 1, v18);
  sub_10013E3D4((uint64_t)v14, (uint64_t)v10);
  swift_beginAccess(v23, &v46, 33, 0);
  sub_100123FDC((uint64_t)v10, v23, &qword_1003180C8);
  swift_endAccess(&v46);
  return v40;
}

uint64_t sub_10018D198()
{
  return sub_10018D1A4(&OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10527ConsistencyCheckOnMainQueue__lastConsistencyCheckAt);
}

uint64_t sub_10018D1A4(_QWORD *a1)
{
  uint64_t v1;

  sub_100007FF0(v1 + *a1, &qword_1003180C8);
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t sub_10018D1D8()
{
  return type metadata accessor for ConsistencyCheckOnMainQueue(0);
}

uint64_t type metadata accessor for ConsistencyCheckOnMainQueue(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_1003241D8, (uint64_t)&nominal type descriptor for ConsistencyCheckOnMainQueue);
}

void sub_10018D1F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  sub_1000F03D4(319, (unint64_t *)&qword_100323F10, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

uint64_t sub_10018D280()
{
  return 255;
}

uint64_t sub_10018D288()
{
  uint64_t v0;

  sub_10000AFFC(v0 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__error, type metadata accessor for DeviceOrientationError);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10018D2C0()
{
  return type metadata accessor for CoreMotionErrorBase(0);
}

uint64_t type metadata accessor for CoreMotionErrorBase(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100324300, (uint64_t)&nominal type descriptor for CoreMotionErrorBase);
}

uint64_t sub_10018D2DC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for DeviceOrientationError(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10025A418;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for DeviceOrientationError(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100324988, (uint64_t)&nominal type descriptor for DeviceOrientationError);
}

uint64_t sub_10018D364()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

uint64_t sub_10018D38C(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)v1 + 136))(a1 & 1);
}

uint64_t sub_10018D3B8()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

uint64_t sub_10018D3E0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_1000E1F30(*v1 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__error, a1, type metadata accessor for DeviceOrientationError);
}

uint64_t sub_10018D410()
{
  _QWORD *v0;

  return *(unsigned __int8 *)(*v0
                            + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__isExpired);
}

uint64_t sub_10018D424()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 168))();
}

void sub_10018D44C(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0 && (a2 & 1) != 0)
  {
    *(_BYTE *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__isExpired) = 1;
    if (qword_100315898 != -1)
      swift_once(&qword_100315898, sub_1000D97F4);
    v11 = type metadata accessor for Logger(0);
    sub_10000D744(v11, (uint64_t)qword_10033FE80);
    v13 = swift_retain_n(v3, v12);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      *(_DWORD *)v16 = 136446210;
      v27 = v17;
      v25 = v16 + 4;
      v18 = v3 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__error;
      v19 = type metadata accessor for DeviceOrientationError(0);
      v20.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v18 + *(int *)(v19 + 24), v6);
      v21 = String.init<A>(describing:)(v10, v6, v20);
      v23 = v22;
      v26 = sub_100172BEC(v21, v22, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v25, v16 + 12);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "SatelliteErrorLocationAccessNotAuthorized reported at %{public}s has expired", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      swift_release_n(v3);
    }
  }
}

uint64_t sub_10018D680()
{
  return type metadata accessor for SatelliteErrorLocationAccessNotAuthorized(0);
}

uint64_t type metadata accessor for SatelliteErrorLocationAccessNotAuthorized(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100324400, (uint64_t)&nominal type descriptor for SatelliteErrorLocationAccessNotAuthorized);
}

uint64_t sub_10018D6A0(void *a1, uint64_t a2, uint64_t a3, void *a4, const char *a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  id v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  id v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __n128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;
  char *v44;
  const char *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  Swift::String v51;
  Swift::String v52;

  v45 = a5;
  v46 = a1;
  v48 = a2;
  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v44 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (void *)objc_opt_self(NSBundle);
  v13 = objc_msgSend(v12, "mainBundle");
  v51._countAndFlagsBits = 0xD000000000000068;
  v51._object = (void *)0x800000010026DAE0;
  v14._countAndFlagsBits = a3;
  v14._object = a4;
  v15._countAndFlagsBits = 0;
  v15._object = (void *)0xE000000000000000;
  v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v51);

  v17 = objc_msgSend(v12, "mainBundle");
  v52._countAndFlagsBits = 0xD000000000000066;
  v52._object = (void *)0x800000010026DB70;
  v18._object = (void *)0x800000010026DB50;
  v18._countAndFlagsBits = 0xD000000000000015;
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v52);

  v21 = v5 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__error;
  v22 = type metadata accessor for DeviceOrientationError(0);
  v23 = v21 + *(int *)(v22 + 24);
  v47 = v9;
  v24 = *(double (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v25 = v5;
  v24(v23, v48, v8);
  *(_BYTE *)(v5 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__isExpired) = 0;
  v26 = v46;
  *(_QWORD *)v21 = v46;
  *(Swift::String *)(v21 + 8) = v16;
  *(Swift::String *)(v21 + 24) = v20;
  v27 = qword_100315898;
  v28 = v26;
  swift_retain(v5);
  if (v27 != -1)
    swift_once(&qword_100315898, sub_1000D97F4);
  v29 = type metadata accessor for Logger(0);
  sub_10000D744(v29, (uint64_t)qword_10033FE80);
  swift_retain(v5);
  v31 = Logger.logObject.getter(v30);
  v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc(12, -1);
    v34 = swift_slowAlloc(32, -1);
    v46 = v28;
    v35 = v34;
    *(_DWORD *)v33 = 136446210;
    v50 = v34;
    v36 = v25
        + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__error
        + *(int *)(v22 + 24);
    v37 = v44;
    v38.n128_f64[0] = v24((uint64_t)v44, v36, v8);
    v39 = String.init<A>(describing:)(v37, v8, v38);
    v41 = v40;
    v49 = sub_100172BEC(v39, v40, &v50);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v33 + 4, v33 + 12);
    swift_release_n(v25);
    swift_bridgeObjectRelease(v41);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, v45, v33, 0xCu);
    swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v33, -1, -1);

  }
  else
  {
    swift_release_n(v25);

  }
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v48, v8);
  return v25;
}

void sub_10018DA1C(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;

  v3 = v2;
  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0 && (a2 & 1) != 0)
  {
    *(_BYTE *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__isExpired) = 1;
    if (qword_100315898 != -1)
      swift_once(&qword_100315898, sub_1000D97F4);
    v11 = type metadata accessor for Logger(0);
    sub_10000D744(v11, (uint64_t)qword_10033FE80);
    v13 = swift_retain_n(v3, v12);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      *(_DWORD *)v16 = 136446210;
      v27 = v17;
      v25 = v16 + 4;
      v18 = v3 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__error;
      v19 = type metadata accessor for DeviceOrientationError(0);
      v20.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v18 + *(int *)(v19 + 24), v6);
      v21 = String.init<A>(describing:)(v10, v6, v20);
      v23 = v22;
      v26 = sub_100172BEC(v21, v22, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v25, v16 + 12);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "CompassErrorLocationAccessNotAuthorized reported at %{public}s has expired", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      swift_release_n(v3);
    }
  }
}

uint64_t sub_10018DC4C()
{
  return 2;
}

uint64_t sub_10018DC54()
{
  return type metadata accessor for CompassErrorLocationAccessNotAuthorized(0);
}

uint64_t type metadata accessor for CompassErrorLocationAccessNotAuthorized(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100324508, (uint64_t)&nominal type descriptor for CompassErrorLocationAccessNotAuthorized);
}

uint64_t sub_10018DC70(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __n128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  id v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;

  v3 = v2;
  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v36 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v40._countAndFlagsBits = 0xD00000000000006FLL;
  v40._object = (void *)0x800000010026DC50;
  v11._object = (void *)0x800000010026DC30;
  v11._countAndFlagsBits = 0xD00000000000001ALL;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v40);

  v14 = v3 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__error;
  v15 = type metadata accessor for DeviceOrientationError(0);
  v16 = v14 + *(int *)(v15 + 24);
  v37 = v7;
  v17 = *(double (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v17(v16, a2, v6);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__isExpired) = 0;
  *(_QWORD *)v14 = a1;
  *(_QWORD *)(v14 + 8) = 0;
  *(_QWORD *)(v14 + 16) = 0;
  *(Swift::String *)(v14 + 24) = v13;
  v18 = qword_100315898;
  v19 = a1;
  swift_retain(v3);
  if (v18 != -1)
    swift_once(&qword_100315898, sub_1000D97F4);
  v20 = type metadata accessor for Logger(0);
  sub_10000D744(v20, (uint64_t)qword_10033FE80);
  swift_retain(v3);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v35 = v19;
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v34 = a2;
    v26 = v25;
    *(_DWORD *)v24 = 136446210;
    v39 = v25;
    v27 = v3
        + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__error
        + *(int *)(v15 + 24);
    v28 = v36;
    v29.n128_f64[0] = v17((uint64_t)v36, v27, v6);
    v30 = String.init<A>(describing:)(v28, v6, v29);
    v32 = v31;
    v38 = sub_100172BEC(v30, v31, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v24 + 4, v24 + 12);
    swift_release_n(v3);
    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "CoreMotionErrorDeviceNeedsToBeMoved reported at %{public}s", v24, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v24, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v34, v6);
  }
  else
  {
    swift_release_n(v3);

    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(a2, v6);
  }
  return v3;
}

void sub_10018DF94(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26[3];
  int v27;

  v2 = v1;
  v4 = type metadata accessor for DispatchTime(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__isExpired;
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__isExpired) & 1) == 0)
  {
    objc_msgSend(a1, "magneticField");
    v10 = v27 == -1;
    *(_BYTE *)(v2 + v9) = v27 != -1;
    if (!v10)
    {
      if (qword_100315898 != -1)
        swift_once(&qword_100315898, sub_1000D97F4);
      v11 = type metadata accessor for Logger(0);
      sub_10000D744(v11, (uint64_t)qword_10033FE80);
      v13 = swift_retain_n(v2, v12);
      v14 = Logger.logObject.getter(v13);
      v15 = static os_log_type_t.default.getter(v14);
      if (os_log_type_enabled(v14, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc(12, -1);
        v17 = swift_slowAlloc(32, -1);
        *(_DWORD *)v16 = 136446210;
        v26[0] = v17;
        v24 = v16 + 4;
        v18 = v2 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__error;
        v19 = type metadata accessor for DeviceOrientationError(0);
        v20.n128_f64[0] = (*(double (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v18 + *(int *)(v19 + 24), v4);
        v21 = String.init<A>(describing:)(v8, v4, v20);
        v23 = v22;
        v25 = sub_100172BEC(v21, v22, v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v24, v16 + 12);
        swift_release_n(v2);
        swift_bridgeObjectRelease(v23);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "CoreMotionErrorDeviceNeedsToBeMoved reported at %{public}s has expired", v16, 0xCu);
        swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v17, -1, -1);
        swift_slowDealloc(v16, -1, -1);

      }
      else
      {

        swift_release_n(v2);
      }
    }
  }
}

uint64_t sub_10018E1E0()
{
  return 3;
}

uint64_t sub_10018E1E8()
{
  return type metadata accessor for CoreMotionErrorDeviceNeedsToBeMoved(0);
}

uint64_t type metadata accessor for CoreMotionErrorDeviceNeedsToBeMoved(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100324610, (uint64_t)&nominal type descriptor for CoreMotionErrorDeviceNeedsToBeMoved);
}

void sub_10018E204(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char v14;
  double (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;

  v2 = v1;
  v4 = type metadata accessor for DispatchTime(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (char *)&v35 - v11;
  v13 = OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__isExpired;
  v14 = *(_BYTE *)(v2 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__isExpired);
  v15 = *(double (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v15((char *)&v35 - v11, a1, v4);
  if ((v14 & 1) != 0
    || (v16 = v2 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10519CoreMotionErrorBase__error,
        v17 = type metadata accessor for DeviceOrientationError(0),
        v18 = v16 + *(int *)(v17 + 24),
        v19 = DispatchTime.uptimeNanoseconds.getter(v17),
        v20 = DispatchTime.uptimeNanoseconds.getter(v19),
        v20 >= v19))
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    return;
  }
  v21 = DispatchTime.uptimeNanoseconds.getter(v20);
  v22 = DispatchTime.uptimeNanoseconds.getter(v21);
  v23 = v21 - v22;
  if (v21 < v22)
  {
    __break(1u);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
    if (v23 < 0x37E11D600)
      return;
    *(_BYTE *)(v2 + v13) = 1;
    if (qword_100315898 == -1)
      goto LABEL_6;
  }
  swift_once(&qword_100315898, sub_1000D97F4);
LABEL_6:
  v24 = type metadata accessor for Logger(0);
  sub_10000D744(v24, (uint64_t)qword_10033FE80);
  v26 = swift_retain_n(v2, v25);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v38 = v30;
    *(_DWORD *)v29 = 136446210;
    v36 = v29 + 4;
    v31.n128_f64[0] = v15(v9, v18, v4);
    v32 = String.init<A>(describing:)(v9, v4, v31);
    v34 = v33;
    v37 = sub_100172BEC(v32, v33, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v36, v29 + 12);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "CoreMotionErrorGeneric reported at %{public}s has expired", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {

    swift_release_n(v2);
  }
}

uint64_t sub_10018E4D4()
{
  return type metadata accessor for CoreMotionErrorGeneric(0);
}

uint64_t type metadata accessor for CoreMotionErrorGeneric(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100324718, (uint64_t)&nominal type descriptor for CoreMotionErrorGeneric);
}

uint64_t sub_10018E4F0(uint64_t a1)
{
  _BYTE v2[8];

  return swift_updateClassMetadata2(a1, 256, 0, v2, a1 + 176);
}

uint64_t sub_10018E524@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[40];
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v25[24];

  v3 = v1 + 16;
  swift_beginAccess(v1 + 16, v25, 0, 0);
  v4 = *(_QWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v4 + 16);
  if (v5)
  {
    v6 = v4 + 32;
    swift_bridgeObjectRetain(v4);
    v7 = 1;
    v8 = 1;
    do
    {
      sub_100007CBC(v6, (uint64_t)&v22);
      sub_100007CBC((uint64_t)&v22, (uint64_t)v21);
      v9 = sub_100003DB8((uint64_t *)&unk_100324A70);
      v10 = type metadata accessor for SatelliteErrorLocationAccessNotAuthorized(0);
      if (swift_dynamicCast(&v20, v21, v9, v10, 6))
      {
        swift_release(v20);
        v8 = 0;
      }
      sub_100007D04(&v22, (uint64_t)v21);
      v11 = type metadata accessor for CompassErrorLocationAccessNotAuthorized(0);
      if (swift_dynamicCast(&v20, v21, v9, v11, 6))
      {
        swift_release(v20);
        v7 = 0;
      }
      v6 += 40;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease(v4);
    v12 = type metadata accessor for DeviceOrientationSource.DeviceOrientationErrorState(0);
    v13 = &a1[*(int *)(v12 + 24)];
    if (*(_QWORD *)(*(_QWORD *)v3 + 16))
    {
      sub_100007CBC(*(_QWORD *)v3 + 32, (uint64_t)&v22);
      v14 = v23;
      v15 = v24;
      sub_100007BBC(&v22, v23);
      (*(void (**)(uint64_t, uint64_t))(v15 + 32))(v14, v15);
      v16 = type metadata accessor for DeviceOrientationError(0);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v13, 0, 1, v16);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(&v22);
    }
    else
    {
      v19 = type metadata accessor for DeviceOrientationError(0);
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v13, 1, 1, v19);
    }
    *a1 = v8 & 1;
    a1[1] = v7 & 1;
    return (*(uint64_t (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 0, 1, v12);
  }
  else
  {
    v17 = type metadata accessor for DeviceOrientationSource.DeviceOrientationErrorState(0);
    return (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(a1, 1, 1, v17);
  }
}

void sub_10018E74C(void *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  char v19;
  double v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  const char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(a1, "domain");
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  v14 = v13;

  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(CMErrorDomain);
  if (v12 == v15 && v14 == v16)
  {
    swift_bridgeObjectRelease_n(v14, 2);
  }
  else
  {
    v18 = v16;
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, v16, 0);
    swift_bridgeObjectRelease(v14);
    *(_QWORD *)&v20 = swift_bridgeObjectRelease(v18).n128_u64[0];
    if ((v19 & 1) == 0)
    {
      if (qword_100315898 != -1)
        swift_once(&qword_100315898, sub_1000D97F4);
      v21 = type metadata accessor for Logger(0);
      sub_10000D744(v21, (uint64_t)qword_10033FE80);
      v41 = a1;
      v22 = Logger.logObject.getter(v41);
      v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(12, -1);
        v25 = swift_slowAlloc(32, -1);
        v43 = v25;
        *(_DWORD *)v24 = 136446210;
        v26 = objc_msgSend(v41, "domain");
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
        v29 = v28;

        v42 = sub_100172BEC(v27, v29, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v24 + 4, v24 + 12);

        swift_bridgeObjectRelease(v29);
        v30 = "Error domain %{public}s != CMErrorDomain";
LABEL_19:
        _os_log_impl((void *)&_mh_execute_header, v22, v23, v30, v24, 0xCu);
        swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v25, -1, -1);
        swift_slowDealloc(v24, -1, -1);

        return;
      }
LABEL_20:

      return;
    }
  }
  v31 = (unint64_t)objc_msgSend(a1, "code", v20);
  if ((v31 & 0x8000000000000000) != 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  }
  else
  {
    if (!HIDWORD(v31))
    {
      if (v31 == 101)
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a2, v6);
        v32 = type metadata accessor for CoreMotionErrorDeviceNeedsToBeMoved(0);
        swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
        v33 = sub_10018DC70(a1, (uint64_t)v10);
        sub_100192348(v33, v3, type metadata accessor for CoreMotionErrorDeviceNeedsToBeMoved, (uint64_t (*)(uint64_t, __n128))sub_100193580);
        swift_release(v33);
        return;
      }
      if (qword_100315898 != -1)
        swift_once(&qword_100315898, sub_1000D97F4);
      v34 = type metadata accessor for Logger(0);
      sub_10000D744(v34, (uint64_t)qword_10033FE80);
      v41 = a1;
      v22 = Logger.logObject.getter(v41);
      v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc(12, -1);
        v25 = swift_slowAlloc(32, -1);
        v43 = v25;
        *(_DWORD *)v24 = 136446210;
        v35 = v41;
        v36 = objc_msgSend(v35, "description");
        v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
        v39 = v38;

        v42 = sub_100172BEC(v37, v39, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v24 + 4, v24 + 12);

        swift_bridgeObjectRelease(v39);
        v30 = "Ignoring error: %{public}s";
        goto LABEL_19;
      }
      goto LABEL_20;
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  }
  __break(1u);
}

void sub_10018EC48(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  NSString v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t (*v22)(uint64_t, __n128);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[24];

  v3 = v2;
  v5 = a1 & 1;
  v6 = type metadata accessor for DispatchTime(0);
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) == 0)
  {
    static POSIXError.errorDomain.getter(v8);
    v12 = v11;
    v13 = (int)POSIXErrorCode.rawValue.getter(80);
    v14 = objc_allocWithZone((Class)NSError);
    v15 = String._bridgeToObjectiveC()();
    v16 = objc_msgSend(v14, "initWithDomain:code:userInfo:", v15, v13, 0, swift_bridgeObjectRelease(v12).n128_f64[0]);

    static DispatchTime.now()(v17);
    if ((_DWORD)v5)
    {
      v23 = type metadata accessor for SatelliteErrorLocationAccessNotAuthorized(0);
      v19 = type metadata accessor for SatelliteErrorLocationAccessNotAuthorized;
      swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
      v20 = sub_10018D6A0(v16, (uint64_t)v10, 0xD000000000000041, (void *)0x800000010026DBE0, "SatelliteErrorLocationAccessNotAuthorized reported at %{public}s");
      v21 = v20;
      v22 = (uint64_t (*)(uint64_t, __n128))sub_100193580;
    }
    else
    {
      v18 = type metadata accessor for CompassErrorLocationAccessNotAuthorized(0);
      v19 = type metadata accessor for CompassErrorLocationAccessNotAuthorized;
      swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
      v20 = sub_10018D6A0(v16, (uint64_t)v10, 0xD000000000000040, (void *)0x800000010026DA90, "CompassErrorLocationAccessNotAuthorized reported at %{public}s");
      v21 = v20;
      v22 = (uint64_t (*)(uint64_t, __n128))sub_100192F8C;
    }
    sub_100192348(v20, v3, v19, v22);
    swift_release(v21);
  }
  swift_beginAccess(v3 + 16, v33, 0, 0);
  v24 = *(_QWORD *)(v3 + 16);
  v25 = *(_QWORD *)(v24 + 16);
  if (v25)
  {
    v26 = v24 + 32;
    swift_bridgeObjectRetain(*(_QWORD *)(v3 + 16));
    v27 = a2 & 1;
    do
    {
      sub_100007CBC(v26, (uint64_t)v30);
      v28 = v31;
      v29 = v32;
      sub_100007BBC(v30, v31);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 16))(v5, v27, v28, v29);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v30);
      v26 += 40;
      --v25;
    }
    while (v25);
    swift_bridgeObjectRelease(v24);
  }
  sub_10018F218();
}

void sub_10018EE98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  _BYTE v38[24];
  _BYTE v39[24];
  char v40[24];

  v2 = v1;
  v4 = sub_100003DB8(&qword_1003180C8);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v6, v9);
  v12 = (char *)&v35 - v11;
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v35 - v14;
  v16 = type metadata accessor for DispatchTime(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = v2 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10516CoreMotionErrors__lastPeriodicCheckAt;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10516CoreMotionErrors__lastPeriodicCheckAt, v40, 0, 0);
  sub_10013E2E0(v21, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    sub_100007FF0((uint64_t)v15, &qword_1003180C8);
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v12, a1, v16);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v12, 0, 1, v16);
    sub_10013E3D4((uint64_t)v12, (uint64_t)v8);
    swift_beginAccess(v21, v39, 33, 0);
    sub_100123FDC((uint64_t)v8, v21, &qword_1003180C8);
    v22 = v39;
LABEL_3:
    swift_endAccess(v22);
    return;
  }
  v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(v20, v15, v16);
  v24 = DispatchTime.uptimeNanoseconds.getter(v23);
  v25 = DispatchTime.uptimeNanoseconds.getter(v24);
  if (v25 < v24)
  {
    v26 = DispatchTime.uptimeNanoseconds.getter(v25);
    v27 = DispatchTime.uptimeNanoseconds.getter(v26);
    if (v26 < v27)
    {
      __break(1u);
      return;
    }
    if (v26 - v27 >= 0x12A153440)
    {
      v37 = v12;
      v28 = swift_beginAccess(v2 + 16, v39, 0, 0);
      v29 = *(_QWORD *)(v2 + 16);
      v30 = *(_QWORD *)(v29 + 16);
      if (v30)
      {
        v35 = *(_QWORD *)(v2 + 16);
        v36 = v8;
        v31 = (_QWORD *)(v29 + 32);
        swift_bridgeObjectRetain(v29);
        do
        {
          v33 = v31[3];
          v32 = v31[4];
          sub_100007BBC(v31, v33);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 24))(a1, v33, v32);
          v31 += 5;
          --v30;
        }
        while (v30);
        v28 = swift_bridgeObjectRelease(v35);
        v8 = v36;
      }
      (*(void (**)(char *, uint64_t, __n128))(v17 + 8))(v20, v16, v28);
      v34 = (uint64_t)v37;
      (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v37, a1, v16);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v17 + 56))(v34, 0, 1, v16);
      sub_10013E3D4(v34, (uint64_t)v8);
      swift_beginAccess(v21, v38, 33, 0);
      sub_100123FDC((uint64_t)v8, v21, &qword_1003180C8);
      v22 = v38;
      goto LABEL_3;
    }
  }
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
}

BOOL sub_10018F1AC(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t DynamicType;
  uint64_t v6;
  _QWORD *v7;

  v3 = a1[3];
  v4 = sub_100007BBC(a1, v3);
  DynamicType = swift_getDynamicType(v4, v3, 1);
  v6 = a2[3];
  v7 = sub_100007BBC(a2, v6);
  return DynamicType == swift_getDynamicType(v7, v6, 1);
}

void sub_10018F218()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  _QWORD *v16;
  unint64_t v17;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v23[2];
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];
  char v28[24];

  v1 = (uint64_t *)(v0 + 16);
  swift_beginAccess(v0 + 16, v28, 0, 0);
  swift_beginAccess(v0 + 16, v27, 33, 0);
  v2 = *(_QWORD *)(v0 + 16);
  v3 = *(_QWORD *)(v2 + 16);
  if (v3)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v0 + 16));
    v4 = 0;
    v5 = 72;
    while (1)
    {
      sub_100007CBC(v2 + v5 - 40, (uint64_t)&v24);
      v6 = v25;
      v7 = v26;
      sub_100007BBC(&v24, v25);
      v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 40))(v6, v7);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(&v24);
      if ((v8 & 1) != 0)
        break;
      ++v4;
      v5 += 40;
      if (v3 == v4)
      {
        swift_bridgeObjectRelease(v2);
        v9 = *(_QWORD *)(*v1 + 16);
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease(v2);
    v9 = v4 + 1;
    if (__OFADD__(v4, 1))
      goto LABEL_37;
    v10 = *v1;
    v11 = *(_QWORD *)(*v1 + 16);
    if (v9 != v11)
    {
      v12 = v4 + 1;
      while (v12 < v11)
      {
        sub_100007CBC(v10 + v5, (uint64_t)&v24);
        v13 = v25;
        v14 = v26;
        sub_100007BBC(&v24, v25);
        v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 40))(v13, v14);
        _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(&v24);
        if ((v15 & 1) == 0)
        {
          if (v12 != v4)
          {
            if ((v4 & 0x8000000000000000) != 0)
              goto LABEL_31;
            v16 = (_QWORD *)*v1;
            v17 = *(_QWORD *)(*v1 + 16);
            if (v4 >= v17)
              goto LABEL_32;
            sub_100007CBC((uint64_t)&v16[5 * v4 + 4], (uint64_t)&v24);
            if (v12 >= v17)
              goto LABEL_33;
            sub_100007CBC((uint64_t)&v16[(unint64_t)v5 / 8], (uint64_t)v23);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
            *v1 = (uint64_t)v16;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v16 = sub_100190F18(v16);
              *v1 = (uint64_t)v16;
            }
            if (v4 >= v16[2])
              goto LABEL_34;
            v19 = &v16[5 * v4 + 4];
            _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v19);
            sub_100007D04(v23, (uint64_t)v19);
            v20 = *v1;
            if (v12 >= *(_QWORD *)(*v1 + 16))
              goto LABEL_35;
            v21 = v20 + v5;
            _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((_QWORD *)(v20 + v5));
            sub_100007D04(&v24, v21);
          }
          if (__OFADD__(v4++, 1))
            goto LABEL_30;
        }
        v9 = v12 + 1;
        if (__OFADD__(v12, 1))
          goto LABEL_29;
        v10 = *v1;
        v11 = *(_QWORD *)(*v1 + 16);
        ++v12;
        v5 += 40;
        if (v9 == v11)
          goto LABEL_9;
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
      goto LABEL_36;
    }
LABEL_9:
    v3 = v4;
LABEL_10:
    if (v9 >= v3)
      goto LABEL_11;
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
  }
  else
  {
    v9 = 0;
LABEL_11:
    sub_100192E10(v3, v9);
    swift_endAccess(v27);
  }
}

uint64_t sub_10018F4C0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[2]);
  sub_100007FF0((uint64_t)v0 + OBJC_IVAR____TtC8SOSBuddyP33_EA0A6DD3813AFCA28C36541F1A14F10516CoreMotionErrors__lastPeriodicCheckAt, &qword_1003180C8);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_10018F500()
{
  return type metadata accessor for CoreMotionErrors(0);
}

uint64_t type metadata accessor for CoreMotionErrors(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100324828, (uint64_t)&nominal type descriptor for CoreMotionErrors);
}

void sub_10018F51C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_1000F03D4(319, (unint64_t *)&qword_100323F10, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
  }
}

char *sub_10018F5A8(char *a1, char **a2, uint64_t a3)
{
  int v4;
  char *v5;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain(v5);
  }
  else
  {
    v8 = a2[2];
    v9 = v5;
    if (v8 == (char *)1)
    {
      v10 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(a1 + 24) = v10;
    }
    else
    {
      *((_QWORD *)a1 + 1) = a2[1];
      *((_QWORD *)a1 + 2) = v8;
      v11 = a2[4];
      *((_QWORD *)a1 + 3) = a2[3];
      *((_QWORD *)a1 + 4) = v11;
      swift_bridgeObjectRetain(v8);
      swift_bridgeObjectRetain(v11);
    }
    v12 = *(int *)(a3 + 24);
    v13 = &a1[v12];
    v14 = (uint64_t)a2 + v12;
    v15 = type metadata accessor for DispatchTime(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  }
  return a1;
}

uint64_t sub_10018F67C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *(_QWORD *)(a1 + 16);
  if (v4 != 1)
  {
    swift_bridgeObjectRelease(v4);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  }
  v5 = a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for DispatchTime(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

_QWORD *sub_10018F6DC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  _OWORD *v7;
  uint64_t v8;
  id v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(void **)a2;
  *a1 = *(_QWORD *)a2;
  v7 = a1 + 1;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = v6;
  if (v8 == 1)
  {
    v10 = *(_OWORD *)(a2 + 24);
    *v7 = *(_OWORD *)(a2 + 8);
    v7[1] = v10;
  }
  else
  {
    a1[1] = *(_QWORD *)(a2 + 8);
    a1[2] = v8;
    v11 = *(_QWORD *)(a2 + 32);
    a1[3] = *(_QWORD *)(a2 + 24);
    a1[4] = v11;
    swift_bridgeObjectRetain(v8);
    swift_bridgeObjectRetain(v11);
  }
  v12 = *(int *)(a3 + 24);
  v13 = (char *)a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for DispatchTime(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t sub_10018F78C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v6;
  void *v7;
  id v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = *(void **)a2;
  v7 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v8 = v6;

  v9 = (_OWORD *)(a1 + 8);
  v10 = (_OWORD *)(a2 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a2 + 16);
  if (v11 == 1)
  {
    if (v12 == 1)
    {
      v13 = *(_OWORD *)(a2 + 24);
      *v9 = *v10;
      *(_OWORD *)(a1 + 24) = v13;
    }
    else
    {
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      v15 = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a1 + 16) = v15;
      *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
      v16 = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 32) = v16;
      swift_bridgeObjectRetain(v15);
      swift_bridgeObjectRetain(v16);
    }
  }
  else if (v12 == 1)
  {
    sub_10005A86C(a1 + 8);
    v14 = *(_OWORD *)(a2 + 24);
    *v9 = *v10;
    *(_OWORD *)(a1 + 24) = v14;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v17 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 16) = v17;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRelease(v11);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    v18 = *(_QWORD *)(a2 + 32);
    v19 = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = v18;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRelease(v19);
  }
  v20 = *(int *)(a3 + 24);
  v21 = a1 + v20;
  v22 = a2 + v20;
  v23 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 24))(v21, v22, v23);
  return a1;
}

uint64_t sub_10018F8B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_10018F924(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v6 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v7 = *(_QWORD *)(a1 + 16);
  if (v7 != 1)
  {
    v8 = a2[2];
    if (v8 != 1)
    {
      *(_QWORD *)(a1 + 8) = a2[1];
      *(_QWORD *)(a1 + 16) = v8;
      swift_bridgeObjectRelease(v7);
      v10 = a2[4];
      v11 = *(_QWORD *)(a1 + 32);
      *(_QWORD *)(a1 + 24) = a2[3];
      *(_QWORD *)(a1 + 32) = v10;
      swift_bridgeObjectRelease(v11);
      goto LABEL_6;
    }
    sub_10005A86C(a1 + 8);
  }
  v9 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  *(_OWORD *)(a1 + 24) = v9;
LABEL_6:
  v12 = *(int *)(a3 + 24);
  v13 = a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_10018F9E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10018F9F4);
}

uint64_t sub_10018F9F4(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for DispatchTime(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v8);
  }
}

uint64_t sub_10018FA70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10018FA7C);
}

char *sub_10018FA7C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for DispatchTime(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_10018FAF0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = " ";
  result = type metadata accessor for DispatchTime(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceOrientationErrorOverrideMessage()
{
  return &type metadata for DeviceOrientationErrorOverrideMessage;
}

uint64_t *sub_10018FB80(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  int v4;
  uint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  __int128 v15;
  void *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    v11 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v11);
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    v5 = *(int *)(a3 + 24);
    v6 = (void **)((char *)a1 + v5);
    v7 = (void **)((char *)a2 + v5);
    v8 = type metadata accessor for DeviceOrientationError(0);
    v9 = *(_QWORD *)(v8 - 8);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
    {
      v10 = sub_100003DB8(&qword_1003249C8);
      memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
    }
    else
    {
      v12 = *v7;
      *v6 = *v7;
      v13 = v7[2];
      v14 = v12;
      if (v13 == (void *)1)
      {
        v15 = *(_OWORD *)(v7 + 3);
        *(_OWORD *)(v6 + 1) = *(_OWORD *)(v7 + 1);
        *(_OWORD *)(v6 + 3) = v15;
      }
      else
      {
        v6[1] = v7[1];
        v6[2] = v13;
        v16 = v7[4];
        v6[3] = v7[3];
        v6[4] = v16;
        swift_bridgeObjectRetain(v13);
        swift_bridgeObjectRetain(v16);
      }
      v17 = *(int *)(v8 + 24);
      v18 = (char *)v6 + v17;
      v19 = (char *)v7 + v17;
      v20 = type metadata accessor for DispatchTime(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
      (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
    }
  }
  return v3;
}

uint64_t sub_10018FCD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1 + *(int *)(a2 + 24);
  v3 = type metadata accessor for DeviceOrientationError(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 48))(v2, 1, v3);
  if (!(_DWORD)result)
  {

    v5 = *(_QWORD *)(v2 + 16);
    if (v5 != 1)
    {
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(*(_QWORD *)(v2 + 32));
    }
    v6 = v2 + *(int *)(v3 + 24);
    v7 = type metadata accessor for DispatchTime(0);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  }
  return result;
}

_WORD *sub_10018FD68(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4;
  void **v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  __int128 v13;
  void *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (void **)((char *)a1 + v4);
  v6 = (void **)((char *)a2 + v4);
  v7 = type metadata accessor for DeviceOrientationError(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_100003DB8(&qword_1003249C8);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    v10 = *v6;
    *v5 = *v6;
    v11 = v6[2];
    v12 = v10;
    if (v11 == (void *)1)
    {
      v13 = *(_OWORD *)(v6 + 3);
      *(_OWORD *)(v5 + 1) = *(_OWORD *)(v6 + 1);
      *(_OWORD *)(v5 + 3) = v13;
    }
    else
    {
      v5[1] = v6[1];
      v5[2] = v11;
      v14 = v6[4];
      v5[3] = v6[3];
      v5[4] = v14;
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain(v14);
    }
    v15 = *(int *)(v7 + 24);
    v16 = (char *)v5 + v15;
    v17 = (char *)v6 + v15;
    v18 = type metadata accessor for DispatchTime(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
    (*(void (**)(void **, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_BYTE *sub_10018FE90(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  int v10;
  int v11;
  void *v12;
  uint64_t v13;
  id v14;
  __int128 v15;
  uint64_t v16;
  void *v17;
  void *v18;
  id v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 24);
  v5 = (uint64_t)&a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for DeviceOrientationError(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9((uint64_t)v6, 1, v7);
  if (v10)
  {
    if (!v11)
    {
      v12 = *(void **)v6;
      *(_QWORD *)v5 = *(_QWORD *)v6;
      v13 = *((_QWORD *)v6 + 2);
      v14 = v12;
      if (v13 == 1)
      {
        v15 = *(_OWORD *)(v6 + 24);
        *(_OWORD *)(v5 + 8) = *(_OWORD *)(v6 + 8);
        *(_OWORD *)(v5 + 24) = v15;
      }
      else
      {
        *(_QWORD *)(v5 + 8) = *((_QWORD *)v6 + 1);
        v25 = *((_QWORD *)v6 + 2);
        *(_QWORD *)(v5 + 16) = v25;
        *(_QWORD *)(v5 + 24) = *((_QWORD *)v6 + 3);
        v26 = *((_QWORD *)v6 + 4);
        *(_QWORD *)(v5 + 32) = v26;
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v26);
      }
      v27 = *(int *)(v7 + 24);
      v28 = v5 + v27;
      v29 = &v6[v27];
      v30 = type metadata accessor for DispatchTime(0);
      (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v30 - 8) + 16))(v28, v29, v30);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
      return a1;
    }
LABEL_7:
    v16 = sub_100003DB8(&qword_1003249C8);
    memcpy((void *)v5, v6, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  if (v11)
  {
    sub_10000AFFC(v5, type metadata accessor for DeviceOrientationError);
    goto LABEL_7;
  }
  v17 = *(void **)v6;
  v18 = *(void **)v5;
  *(_QWORD *)v5 = *(_QWORD *)v6;
  v19 = v17;

  v20 = (_OWORD *)(v5 + 8);
  v21 = v6 + 8;
  v22 = *(_QWORD *)(v5 + 16);
  v23 = *((_QWORD *)v6 + 2);
  if (v22 == 1)
  {
    if (v23 == 1)
    {
      v24 = *(_OWORD *)(v6 + 24);
      *v20 = *v21;
      *(_OWORD *)(v5 + 24) = v24;
    }
    else
    {
      *(_QWORD *)(v5 + 8) = *((_QWORD *)v6 + 1);
      v32 = *((_QWORD *)v6 + 2);
      *(_QWORD *)(v5 + 16) = v32;
      *(_QWORD *)(v5 + 24) = *((_QWORD *)v6 + 3);
      v33 = *((_QWORD *)v6 + 4);
      *(_QWORD *)(v5 + 32) = v33;
      swift_bridgeObjectRetain(v32);
      swift_bridgeObjectRetain(v33);
    }
  }
  else if (v23 == 1)
  {
    sub_10005A86C(v5 + 8);
    v31 = *(_OWORD *)(v6 + 24);
    *v20 = *v21;
    *(_OWORD *)(v5 + 24) = v31;
  }
  else
  {
    *(_QWORD *)(v5 + 8) = *((_QWORD *)v6 + 1);
    v34 = *((_QWORD *)v6 + 2);
    *(_QWORD *)(v5 + 16) = v34;
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRelease(v22);
    *(_QWORD *)(v5 + 24) = *((_QWORD *)v6 + 3);
    v35 = *((_QWORD *)v6 + 4);
    v36 = *(_QWORD *)(v5 + 32);
    *(_QWORD *)(v5 + 32) = v35;
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRelease(v36);
  }
  v37 = *(int *)(v7 + 24);
  v38 = v5 + v37;
  v39 = &v6[v37];
  v40 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)(v40 - 8) + 24))(v38, v39, v40);
  return a1;
}

_WORD *sub_1001900F0(_WORD *a1, _WORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  *a1 = *a2;
  v4 = *(int *)(a3 + 24);
  v5 = (_QWORD *)((char *)a1 + v4);
  v6 = (_QWORD *)((char *)a2 + v4);
  v7 = type metadata accessor for DeviceOrientationError(0);
  v8 = *(_QWORD *)(v7 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    v9 = sub_100003DB8(&qword_1003249C8);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v9 - 8) + 64));
  }
  else
  {
    *v5 = *v6;
    *(_OWORD *)(v5 + 1) = *(_OWORD *)(v6 + 1);
    *(_OWORD *)(v5 + 3) = *(_OWORD *)(v6 + 3);
    v10 = *(int *)(v7 + 24);
    v11 = (char *)v5 + v10;
    v12 = (char *)v6 + v10;
    v13 = type metadata accessor for DispatchTime(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32))(v11, v12, v13);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

_BYTE *sub_1001901DC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(_QWORD *, uint64_t, uint64_t);
  int v10;
  int v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;

  *a1 = *a2;
  a1[1] = a2[1];
  v4 = *(int *)(a3 + 24);
  v5 = &a1[v4];
  v6 = &a2[v4];
  v7 = type metadata accessor for DeviceOrientationError(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v8 + 48);
  v10 = v9(v5, 1, v7);
  v11 = v9(v6, 1, v7);
  if (!v10)
  {
    if (v11)
    {
      sub_10000AFFC((uint64_t)v5, type metadata accessor for DeviceOrientationError);
      goto LABEL_6;
    }
    v18 = (void *)*v5;
    *v5 = *v6;

    v19 = v5[2];
    if (v19 != 1)
    {
      v20 = v6[2];
      if (v20 != 1)
      {
        v5[1] = v6[1];
        v5[2] = v20;
        swift_bridgeObjectRelease(v19);
        v22 = v6[4];
        v23 = v5[4];
        v5[3] = v6[3];
        v5[4] = v22;
        swift_bridgeObjectRelease(v23);
        goto LABEL_13;
      }
      sub_10005A86C((uint64_t)(v5 + 1));
    }
    v21 = *(_OWORD *)(v6 + 3);
    *(_OWORD *)(v5 + 1) = *(_OWORD *)(v6 + 1);
    *(_OWORD *)(v5 + 3) = v21;
LABEL_13:
    v24 = *(int *)(v7 + 24);
    v25 = (char *)v5 + v24;
    v26 = (char *)v6 + v24;
    v27 = type metadata accessor for DispatchTime(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v27 - 8) + 40))(v25, v26, v27);
    return a1;
  }
  if (v11)
  {
LABEL_6:
    v16 = sub_100003DB8(&qword_1003249C8);
    memcpy(v5, v6, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    return a1;
  }
  *v5 = *v6;
  *(_OWORD *)(v5 + 1) = *(_OWORD *)(v6 + 1);
  *(_OWORD *)(v5 + 3) = *(_OWORD *)(v6 + 3);
  v12 = *(int *)(v7 + 24);
  v13 = (char *)v5 + v12;
  v14 = (char *)v6 + v12;
  v15 = type metadata accessor for DispatchTime(0);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 32))(v13, v14, v15);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  return a1;
}

uint64_t sub_100190394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001903A0);
}

uint64_t sub_1001903A0(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4;
  BOOL v5;
  int v6;
  uint64_t v10;

  if ((_DWORD)a2 == 254)
  {
    v4 = *a1;
    v5 = v4 >= 2;
    v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5)
      return (v6 + 1);
    else
      return 0;
  }
  else
  {
    v10 = sub_100003DB8(&qword_1003249C8);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(&a1[*(int *)(a3 + 24)], a2, v10);
  }
}

uint64_t sub_100190420(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10019042C);
}

_BYTE *sub_10019042C(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  _BYTE *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 254)
  {
    *result = a2 + 1;
  }
  else
  {
    v7 = sub_100003DB8(&qword_1003249C8);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for DeviceOrientationSource.DeviceOrientationErrorState(uint64_t a1)
{
  return sub_10003D8E8(a1, (uint64_t *)&unk_100324A28, (uint64_t)&nominal type descriptor for DeviceOrientationSource.DeviceOrientationErrorState);
}

void sub_1001904B4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = &unk_10025A418;
  v4[1] = &unk_10025A418;
  sub_1000F03D4(319, (unint64_t *)&unk_100324A38, type metadata accessor for DeviceOrientationError);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
  }
}

uint64_t getEnumTagSinglePayload for DeviceOrientation(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 72))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DeviceOrientation(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 72) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DeviceOrientation()
{
  return &type metadata for DeviceOrientation;
}

void sub_1001905A4(uint64_t (*a1)(unint64_t, __n128))
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  __n128 v19;
  unint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = v1;
  v5 = type metadata accessor for MessageSimulationEngineImplementation.MessageProgress(0);
  v7 = __chkstk_darwin(v5, v6);
  v38 = (uint64_t)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7, v9);
  v37 = (uint64_t)&v34 - v11;
  __chkstk_darwin(v10, v12);
  v39 = (uint64_t)&v34 - v14;
  v15 = *v1;
  v16 = *(_QWORD *)(*v1 + 16);
  if (v16)
  {
    v17 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v18 = *(_QWORD *)(v13 + 72);
    v19 = swift_bridgeObjectRetain(*v1);
    v20 = 0;
    v35 = v17;
    while (1)
    {
      v21 = a1(v15 + v17, v19);
      if (v2)
      {
LABEL_6:
        swift_bridgeObjectRelease(v15);
        return;
      }
      if ((v21 & 1) != 0)
        break;
      ++v20;
      v17 += v18;
      if (v16 == v20)
        goto LABEL_6;
    }
    swift_bridgeObjectRelease(v15);
    if (!__OFADD__(v20, 1))
    {
      v22 = *(_QWORD *)(v15 + 16);
      if (v20 + 1 == v22)
        return;
      v23 = v18 + v17;
      v24 = v20 + 1;
      v34 = v1;
      v36 = v18;
      while (v24 < v22)
      {
        v25 = v3;
        v40 = v23;
        v26 = v39;
        sub_1000E1F30(v15 + v23, v39, type metadata accessor for MessageSimulationEngineImplementation.MessageProgress);
        v27 = ((uint64_t (*)(uint64_t))a1)(v26);
        sub_10000AFFC(v26, type metadata accessor for MessageSimulationEngineImplementation.MessageProgress);
        if ((v27 & 1) != 0)
        {
          v3 = v25;
          v28 = v36;
        }
        else
        {
          v3 = v25;
          v28 = v36;
          if (v24 != v20)
          {
            if ((v20 & 0x8000000000000000) != 0)
              goto LABEL_31;
            v29 = *v3;
            v30 = *(_QWORD *)(*v3 + 16);
            if (v20 >= v30)
              goto LABEL_32;
            sub_1000E1F30(v29 + v35 + v20 * v36, v37, type metadata accessor for MessageSimulationEngineImplementation.MessageProgress);
            if (v24 >= v30)
              goto LABEL_33;
            sub_1000E1F30(v29 + v40, v38, type metadata accessor for MessageSimulationEngineImplementation.MessageProgress);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v29);
            v3 = v34;
            *v34 = v29;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v29 = sub_100190E4C(v29);
              *v3 = v29;
            }
            if (v20 >= *(_QWORD *)(v29 + 16))
              goto LABEL_34;
            sub_100193428(v38, v29 + v35 + v20 * v28);
            if (v24 >= *(_QWORD *)(*v3 + 16))
              goto LABEL_35;
            sub_100193428(v37, *v3 + v40);
          }
          if (__OFADD__(v20++, 1))
            goto LABEL_30;
        }
        v33 = v24 + 1;
        if (__OFADD__(v24, 1))
          goto LABEL_29;
        v15 = *v3;
        v22 = *(_QWORD *)(*v3 + 16);
        ++v24;
        v23 = v40 + v28;
        if (v33 == v22)
          return;
      }
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
LABEL_35:
      __break(1u);
    }
    __break(1u);
  }
}

uint64_t sub_1001908AC(uint64_t (*a1)(uint64_t *), uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;

  v4 = v2;
  v7 = *v2;
  swift_bridgeObjectRetain(*v2);
  v8 = sub_10003D12C(a1, a2, v7);
  v10 = v9;
  swift_bridgeObjectRelease(v7);
  if (v3)
    return v8;
  if ((v10 & 1) == 0)
  {
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
      goto LABEL_57;
    v10 = *v4;
    if ((unint64_t)*v4 >> 62)
    {
LABEL_58:
      if (v10 < 0)
        v31 = v10;
      else
        v31 = v10 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v10);
      v32 = _CocoaArrayWrapper.endIndex.getter(v31);
      swift_bridgeObjectRelease(v10);
      if (v11 != v32)
        goto LABEL_6;
    }
    else if (v11 != *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      v11 = v8 + 5;
      v35 = a2;
      while (1)
      {
        v12 = v11 - 4;
        v13 = *v4;
        if ((*v4 & 0xC000000000000001) != 0)
        {
          v14 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v13);
        }
        else
        {
          if ((v12 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
LABEL_55:
            __break(1u);
LABEL_56:
            __break(1u);
LABEL_57:
            __break(1u);
            goto LABEL_58;
          }
          if (v12 >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_48;
          v14 = *(_QWORD *)(v13 + 8 * v11);
          v15 = swift_retain(v14);
        }
        v36 = v14;
        v10 = ((uint64_t (*)(uint64_t *, __n128))a1)(&v36, v15);
        swift_release(v14);
        if ((v10 & 1) == 0)
          break;
LABEL_32:
        v26 = v11 - 3;
        if (__OFADD__(v12, 1))
          goto LABEL_49;
        v10 = *v4;
        if ((unint64_t)*v4 >> 62)
        {
          if (v10 < 0)
            v28 = *v4;
          else
            v28 = v10 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*v4);
          v27 = _CocoaArrayWrapper.endIndex.getter(v28);
          swift_bridgeObjectRelease(v10);
        }
        else
        {
          v27 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10);
        }
        ++v11;
        if (v26 == v27)
          return v8;
      }
      if (v12 == v8)
      {
LABEL_31:
        if (__OFADD__(v8++, 1))
          goto LABEL_50;
        goto LABEL_32;
      }
      v10 = *v4;
      if ((*v4 & 0xC000000000000001) != 0)
      {
        v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, *v4);
        v10 = *v4;
        if ((*v4 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v12 & 0x8000000000000000) != 0)
            goto LABEL_53;
          if (v12 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
            goto LABEL_54;
          v17 = *(_QWORD *)(v10 + 8 * v11);
          swift_retain(v17);
          goto LABEL_20;
        }
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_51;
        if (v8 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFF8) + 0x10))
          goto LABEL_52;
        v16 = *(_QWORD *)(v10 + 8 * v8 + 32);
        swift_retain(v16);
        if ((v10 & 0xC000000000000001) == 0)
          goto LABEL_17;
      }
      v17 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11 - 4, v10);
      v10 = *v4;
LABEL_20:
      isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(v10);
      *v4 = v10;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v10 < 0 || (v10 & 0x4000000000000000) != 0)
      {
        v10 = sub_100190E74(v10);
        *v4 = v10;
      }
      v19 = *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20);
      *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v17;
      v20 = swift_release(v19);
      specialized Array._endMutation()(v20);
      v10 = *v4;
      v21 = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
      *v4 = v10;
      if (!v21 || v10 < 0 || (v10 & 0x4000000000000000) != 0)
      {
        v10 = sub_100190E74(v10);
        *v4 = v10;
      }
      a2 = v35;
      if ((v12 & 0x8000000000000000) != 0)
        goto LABEL_55;
      v22 = v10 & 0xFFFFFFFFFFFFFF8;
      if (v12 >= *(_QWORD *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10))
        goto LABEL_56;
      v23 = *(_QWORD *)(v22 + 8 * v11);
      *(_QWORD *)(v22 + 8 * v11) = v16;
      v24 = swift_release(v23);
      v10 = (uint64_t)v4;
      specialized Array._endMutation()(v24);
      goto LABEL_31;
    }
    return v8;
  }
  v29 = *v4;
  if (!((unint64_t)*v4 >> 62))
    return *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v29 < 0)
    v33 = *v4;
  else
    v33 = v29 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v4);
  v34 = _CocoaArrayWrapper.endIndex.getter(v33);
  swift_bridgeObjectRelease(v29);
  return v34;
}

void sub_100190C0C(uint64_t (*a1)(uint64_t, __n128))
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  unint64_t i;
  char v12;
  _QWORD *v13;
  unint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v20;
  __int128 v21[2];
  __int128 v22[2];

  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  if (v4)
  {
    v6 = swift_bridgeObjectRetain(v3);
    v7 = 0;
    v8 = 72;
    while (1)
    {
      v9 = a1(v3 + v8 - 40, v6);
      if (v2)
      {
LABEL_6:
        swift_bridgeObjectRelease(v3);
        return;
      }
      if ((v9 & 1) != 0)
        break;
      ++v7;
      v8 += 40;
      if (v4 == v7)
        goto LABEL_6;
    }
    swift_bridgeObjectRelease(v3);
    if (!__OFADD__(v7, 1))
    {
      v10 = *(_QWORD *)(v3 + 16);
      if (v7 + 1 == v10)
        return;
      for (i = v7 + 1; i < v10; ++i)
      {
        sub_100007CBC(v3 + v8, (uint64_t)v22);
        v12 = ((uint64_t (*)(__int128 *))a1)(v22);
        _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v22);
        if ((v12 & 1) == 0)
        {
          if (i != v7)
          {
            if ((v7 & 0x8000000000000000) != 0)
              goto LABEL_30;
            v13 = (_QWORD *)*v1;
            v14 = *(_QWORD *)(*v1 + 16);
            if (v7 >= v14)
              goto LABEL_31;
            sub_100007CBC((uint64_t)&v13[5 * v7 + 4], (uint64_t)v22);
            if (i >= v14)
              goto LABEL_32;
            sub_100007CBC((uint64_t)&v13[(unint64_t)v8 / 8], (uint64_t)v21);
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
            *v1 = (uint64_t)v13;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              v13 = sub_100190F18(v13);
              *v1 = (uint64_t)v13;
            }
            if (v7 >= v13[2])
              goto LABEL_33;
            v16 = &v13[5 * v7 + 4];
            _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v16);
            sub_100007D04(v21, (uint64_t)v16);
            v17 = *v1;
            if (i >= *(_QWORD *)(*v1 + 16))
              goto LABEL_34;
            v18 = v17 + v8;
            _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((_QWORD *)(v17 + v8));
            sub_100007D04(v22, v18);
          }
          if (__OFADD__(v7++, 1))
            goto LABEL_29;
        }
        v20 = i + 1;
        if (__OFADD__(i, 1))
          goto LABEL_28;
        v3 = *v1;
        v10 = *(_QWORD *)(*v1 + 16);
        v8 += 40;
        if (v20 == v10)
          return;
      }
      __break(1u);
LABEL_28:
      __break(1u);
LABEL_29:
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      __break(1u);
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
LABEL_34:
      __break(1u);
    }
    __break(1u);
  }
}

_QWORD *sub_100190E34(_QWORD *a1)
{
  return sub_100171950(0, a1[2], 0, a1);
}

uint64_t sub_100190E4C(unint64_t a1)
{
  return sub_100171C9C(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_100190E60(_QWORD *a1)
{
  return sub_100171CB0(0, a1[2], 0, a1);
}

uint64_t sub_100190E74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v4 = a1;
    else
      v4 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0, a1);
}

_QWORD *sub_100190EDC(_QWORD *a1)
{
  return sub_100171EC8(0, a1[2], 0, a1);
}

_QWORD *sub_100190EF0(_QWORD *a1)
{
  return sub_100172658(0, a1[2], 0, a1);
}

uint64_t sub_100190F04(unint64_t a1)
{
  return sub_10017277C(0, *(_QWORD *)(a1 + 16), 0, a1);
}

_QWORD *sub_100190F18(_QWORD *a1)
{
  return sub_100172790(0, a1[2], 0, a1);
}

uint64_t sub_100190F2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v6 = a1;
    v7 = *v4;
    if (!((unint64_t)*v4 >> 62))
    {
      v9 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v9 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v7 < 0)
    v24 = v7;
  else
    v24 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v9 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v7);
  if (v9 < v5)
    goto LABEL_34;
LABEL_4:
  v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v7 = *v4;
  if (!((unint64_t)*v4 >> 62))
  {
    v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v7 < 0)
      v26 = v7;
    else
      v26 = v7 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v7);
    v14 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v7);
    goto LABEL_15;
  }
LABEL_37:
  if (v7 < 0)
    v25 = v7;
  else
    v25 = v7 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v7);
  v10 = _CocoaArrayWrapper.endIndex.getter(v25);
  swift_bridgeObjectRelease(v7);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_42;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v4);
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if ((unint64_t)v7 >> 62)
    goto LABEL_43;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain(v7);
  v7 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10, v14, 1, v7);
  swift_bridgeObjectRelease(*v4);
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v6);
  v16 = type metadata accessor for TryOutTranscriptMessageItem(0);
  v17 = (char *)swift_arrayDestroy(v15, v9, v16);
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return specialized Array._endMutation()(v17);
  }
  if (!((unint64_t)v7 >> 62))
  {
    v18 = *(_QWORD *)(v13 + 16);
    v19 = v18 - v5;
    if (!__OFSUB__(v18, v5))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v7 < 0)
    v27 = v7;
  else
    v27 = v13;
  swift_bridgeObjectRetain(v7);
  v28 = _CocoaArrayWrapper.endIndex.getter(v27);
  swift_bridgeObjectRelease(v7);
  v19 = v28 - v5;
  if (__OFSUB__(v28, v5))
    goto LABEL_52;
LABEL_21:
  if ((v19 & 0x8000000000000000) == 0)
  {
    v17 = (char *)(v15 + 1);
    v20 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v20 || v17 >= &v20[8 * v19])
      v17 = (char *)memmove(v17, v20, 8 * v19);
    if (!((unint64_t)v7 >> 62))
    {
      v21 = *(_QWORD *)(v13 + 16);
      v22 = v21 + v8;
      if (!__OFADD__(v21, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v22;
        goto LABEL_28;
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v7 < 0)
      v29 = v7;
    else
      v29 = v13;
    swift_bridgeObjectRetain(v7);
    v30 = _CocoaArrayWrapper.endIndex.getter(v29);
    swift_bridgeObjectRelease(v7);
    v22 = v30 + v8;
    if (!__OFADD__(v30, v8))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void sub_100191204(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  unint64_t v12;
  Swift::Int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  Swift::Int v27;
  uint64_t v28;
  Swift::Int v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  Swift::Int v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  char v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  char *v105;
  char *v106;
  _QWORD *v107;
  Swift::Int v108;
  uint64_t v109;
  unsigned __int8 v110;
  unsigned __int8 v111;
  Swift::Int v112;
  Swift::Int v113;
  Swift::Int v114;
  Swift::Int v115;
  char *__dst;
  _QWORD v117[3];
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  v2 = v1;
  v3 = a1;
  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_134;
    if (v4)
      sub_100191A64(0, v4, 1, v3);
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_142;
  v108 = v5;
  if (v4 < 2)
  {
    v10 = (char *)_swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    v107 = _swiftEmptyArrayStorage;
    if (v4 != 1)
    {
      v12 = _swiftEmptyArrayStorage[2];
      if (v12 < 2)
      {
LABEL_111:
        swift_bridgeObjectRelease(v10);
        v107[2] = 0;
        swift_bridgeObjectRelease(v107);
        return;
      }
LABEL_99:
      v99 = *v3;
      while (1)
      {
        v100 = v12 - 2;
        if (v12 < 2)
          goto LABEL_129;
        if (!v99)
          goto LABEL_141;
        v101 = *(_QWORD *)&v10[16 * v100 + 32];
        v102 = *(_QWORD *)&v10[16 * v12 + 24];
        sub_100191BC8((char *)(v99 + 40 * v101), (char *)(v99 + 40 * *(_QWORD *)&v10[16 * v12 + 16]), v99 + 40 * v102, __dst);
        if (v2)
          goto LABEL_111;
        if (v102 < v101)
          goto LABEL_130;
        if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
          v10 = sub_100192320((uint64_t)v10);
        if (v100 >= *((_QWORD *)v10 + 2))
          goto LABEL_131;
        v103 = &v10[16 * v100 + 32];
        *(_QWORD *)v103 = v101;
        *((_QWORD *)v103 + 1) = v102;
        v104 = *((_QWORD *)v10 + 2);
        if (v12 > v104)
          goto LABEL_132;
        memmove(&v10[16 * v12 + 16], &v10[16 * v12 + 32], 16 * (v104 - v12));
        *((_QWORD *)v10 + 2) = v104 - 1;
        v12 = v104 - 1;
        if (v104 <= 2)
          goto LABEL_111;
      }
    }
    v123 = v1;
  }
  else
  {
    v123 = v1;
    v7 = v6 >> 1;
    v8 = sub_100003DB8((uint64_t *)&unk_100324A70);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(_QWORD *)(v9 + 16) = v7;
    v107 = (_QWORD *)v9;
    __dst = (char *)(v9 + 32);
  }
  v11 = 0;
  v10 = (char *)_swiftEmptyArrayStorage;
  while (1)
  {
    v13 = v11++;
    v114 = v13;
    if (v11 < v4)
    {
      v14 = *v3;
      sub_100007CBC(*v3 + 40 * v11, (uint64_t)&v120);
      sub_100007CBC(v14 + 40 * v13, (uint64_t)v117);
      v15 = v121;
      v16 = v122;
      sub_100007BBC(&v120, v121);
      v111 = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 48))(v15, v16);
      v17 = v118;
      v18 = v119;
      sub_100007BBC(v117, v118);
      v110 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 48))(v17, v18);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v117);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(&v120);
      v11 = v13 + 2;
      v109 = v14;
      if (v13 + 2 < v4)
      {
        v105 = v10;
        v19 = v14 + 40 * v13 + 40;
        while (1)
        {
          v20 = v19 + 40;
          sub_100007CBC(v19 + 40, (uint64_t)&v120);
          sub_100007CBC(v19, (uint64_t)v117);
          v21 = v121;
          v22 = v122;
          sub_100007BBC(&v120, v121);
          LOBYTE(v21) = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 48))(v21, v22);
          v24 = v118;
          v23 = v119;
          sub_100007BBC(v117, v118);
          v25 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v23 + 48))(v24, v23) < v21;
          _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v117);
          _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(&v120);
          if (v110 >= v111 == v25)
            break;
          ++v11;
          v19 = v20;
          if (v4 == v11)
          {
            v11 = v4;
            break;
          }
        }
        v10 = v105;
        v13 = v114;
      }
      if (v110 >= v111)
      {
        if (v11 < v13)
          goto LABEL_135;
        if (v13 < v11)
        {
          v112 = v4;
          v26 = 40 * v11 - 40;
          v27 = v13;
          v28 = 40 * v13;
          v29 = v11;
          do
          {
            if (v27 != --v29)
            {
              if (!v109)
                goto LABEL_140;
              v30 = v109 + v28;
              sub_100007D04((__int128 *)(v109 + v28), (uint64_t)&v120);
              v31 = *(_QWORD *)(v109 + v26 + 32);
              v32 = *(_OWORD *)(v109 + v26 + 16);
              *(_OWORD *)v30 = *(_OWORD *)(v109 + v26);
              *(_OWORD *)(v30 + 16) = v32;
              *(_QWORD *)(v30 + 32) = v31;
              sub_100007D04(&v120, v109 + v26);
            }
            ++v27;
            v26 -= 40;
            v28 += 40;
          }
          while (v27 < v29);
          v4 = v112;
          v13 = v114;
        }
      }
    }
    if (v11 >= v4)
      goto LABEL_49;
    if (__OFSUB__(v11, v13))
      goto LABEL_133;
    if (v11 - v13 >= v108)
      goto LABEL_49;
    if (__OFADD__(v13, v108))
      goto LABEL_136;
    v33 = v13 + v108 >= v4 ? v4 : v13 + v108;
    if (v33 < v13)
      break;
    if (v11 != v33)
    {
      v106 = v10;
      v34 = 40 * v11 - 40;
      v113 = v33;
      do
      {
        v35 = v13;
        v36 = v34;
        do
        {
          v37 = *v3 + v36;
          sub_100007CBC(v37 + 40, (uint64_t)&v120);
          sub_100007CBC(v37, (uint64_t)v117);
          v38 = v121;
          v39 = v122;
          sub_100007BBC(&v120, v121);
          LOBYTE(v38) = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 48))(v38, v39);
          v40 = v118;
          v41 = v119;
          sub_100007BBC(v117, v118);
          LODWORD(v37) = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v41 + 48))(v40, v41);
          _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v117);
          _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(&v120);
          if (v37 < v38)
            break;
          v42 = *v3;
          if (!*v3)
            goto LABEL_138;
          v43 = v42 + v36;
          sub_100007D04((__int128 *)(v42 + v36 + 40), (uint64_t)&v120);
          v44 = *(_OWORD *)(v43 + 16);
          *(_OWORD *)(v43 + 40) = *(_OWORD *)v43;
          *(_OWORD *)(v43 + 56) = v44;
          *(_QWORD *)(v43 + 72) = *(_QWORD *)(v43 + 32);
          sub_100007D04(&v120, v43);
          v36 -= 40;
          ++v35;
        }
        while (v11 != v35);
        ++v11;
        v34 += 40;
        v13 = v114;
      }
      while (v11 != v113);
      v11 = v113;
      v10 = v106;
    }
LABEL_49:
    if (v11 < v13)
      goto LABEL_128;
    if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0)
      v10 = sub_100191FA8(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v46 = *((_QWORD *)v10 + 2);
    v45 = *((_QWORD *)v10 + 3);
    v12 = v46 + 1;
    if (v46 >= v45 >> 1)
      v10 = sub_100191FA8((char *)(v45 > 1), v46 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v12;
    v47 = v10 + 32;
    v48 = &v10[16 * v46 + 32];
    *(_QWORD *)v48 = v13;
    *((_QWORD *)v48 + 1) = v11;
    if (v46)
    {
      v115 = v11;
      while (1)
      {
        v49 = v12 - 1;
        if (v12 >= 4)
        {
          v54 = &v47[16 * v12];
          v55 = *((_QWORD *)v54 - 8);
          v56 = *((_QWORD *)v54 - 7);
          v60 = __OFSUB__(v56, v55);
          v57 = v56 - v55;
          if (v60)
            goto LABEL_117;
          v59 = *((_QWORD *)v54 - 6);
          v58 = *((_QWORD *)v54 - 5);
          v60 = __OFSUB__(v58, v59);
          v52 = v58 - v59;
          v53 = v60;
          if (v60)
            goto LABEL_118;
          v61 = v12 - 2;
          v62 = &v47[16 * v12 - 32];
          v64 = *(_QWORD *)v62;
          v63 = *((_QWORD *)v62 + 1);
          v60 = __OFSUB__(v63, v64);
          v65 = v63 - v64;
          if (v60)
            goto LABEL_120;
          v60 = __OFADD__(v52, v65);
          v66 = v52 + v65;
          if (v60)
            goto LABEL_123;
          if (v66 >= v57)
          {
            v84 = &v47[16 * v49];
            v86 = *(_QWORD *)v84;
            v85 = *((_QWORD *)v84 + 1);
            v60 = __OFSUB__(v85, v86);
            v87 = v85 - v86;
            if (v60)
              goto LABEL_127;
            v77 = v52 < v87;
            goto LABEL_87;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v78 = *((_QWORD *)v10 + 4);
            v79 = *((_QWORD *)v10 + 5);
            v60 = __OFSUB__(v79, v78);
            v71 = v79 - v78;
            v72 = v60;
            goto LABEL_81;
          }
          v51 = *((_QWORD *)v10 + 4);
          v50 = *((_QWORD *)v10 + 5);
          v60 = __OFSUB__(v50, v51);
          v52 = v50 - v51;
          v53 = v60;
        }
        if ((v53 & 1) != 0)
          goto LABEL_119;
        v61 = v12 - 2;
        v67 = &v47[16 * v12 - 32];
        v69 = *(_QWORD *)v67;
        v68 = *((_QWORD *)v67 + 1);
        v70 = __OFSUB__(v68, v69);
        v71 = v68 - v69;
        v72 = v70;
        if (v70)
          goto LABEL_122;
        v73 = &v47[16 * v49];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        v60 = __OFSUB__(v74, v75);
        v76 = v74 - v75;
        if (v60)
          goto LABEL_125;
        if (__OFADD__(v71, v76))
          goto LABEL_126;
        if (v71 + v76 >= v52)
        {
          v77 = v52 < v76;
LABEL_87:
          if (v77)
            v49 = v61;
          goto LABEL_89;
        }
LABEL_81:
        if ((v72 & 1) != 0)
          goto LABEL_121;
        v80 = &v47[16 * v49];
        v82 = *(_QWORD *)v80;
        v81 = *((_QWORD *)v80 + 1);
        v60 = __OFSUB__(v81, v82);
        v83 = v81 - v82;
        if (v60)
          goto LABEL_124;
        if (v83 < v71)
          goto LABEL_15;
LABEL_89:
        v88 = v49 - 1;
        if (v49 - 1 >= v12)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }
        v89 = v3;
        v90 = *v3;
        if (!*v3)
          goto LABEL_139;
        v91 = v10;
        v92 = &v47[16 * v88];
        v93 = *(_QWORD *)v92;
        v94 = v49;
        v95 = &v47[16 * v49];
        v96 = *((_QWORD *)v95 + 1);
        v97 = v123;
        sub_100191BC8((char *)(v90 + 40 * *(_QWORD *)v92), (char *)(v90 + 40 * *(_QWORD *)v95), v90 + 40 * v96, __dst);
        v123 = v97;
        if (v97)
        {
          v10 = v91;
          goto LABEL_111;
        }
        if (v96 < v93)
          goto LABEL_114;
        if (v94 > *((_QWORD *)v91 + 2))
          goto LABEL_115;
        *(_QWORD *)v92 = v93;
        *(_QWORD *)&v47[16 * v88 + 8] = v96;
        v98 = *((_QWORD *)v91 + 2);
        if (v94 >= v98)
          goto LABEL_116;
        v10 = v91;
        v12 = v98 - 1;
        memmove(v95, v95 + 16, 16 * (v98 - 1 - v94));
        *((_QWORD *)v91 + 2) = v98 - 1;
        v3 = v89;
        v11 = v115;
        if (v98 <= 2)
          goto LABEL_15;
      }
    }
    v12 = 1;
LABEL_15:
    v4 = v3[1];
    if (v11 >= v4)
    {
      v2 = v123;
      if (v12 < 2)
        goto LABEL_111;
      goto LABEL_99;
    }
  }
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Can't construct Array with count < 0", 36, 2, "Swift/Array.swift", 17, 2, 936, 0);
  __break(1u);
}

uint64_t sub_100191A64(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  _QWORD v18[3];
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = result;
  if (a3 != a2)
  {
    v5 = a3;
    v6 = 40 * a3 - 40;
LABEL_5:
    v7 = v24;
    v8 = v6;
    while (1)
    {
      v9 = *a4 + v8;
      sub_100007CBC(v9 + 40, (uint64_t)&v21);
      sub_100007CBC(v9, (uint64_t)v18);
      v10 = v22;
      v11 = v23;
      sub_100007BBC(&v21, v22);
      LOBYTE(v10) = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 48))(v10, v11);
      v12 = v19;
      v13 = v20;
      sub_100007BBC(v18, v19);
      LODWORD(v9) = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v13 + 48))(v12, v13);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v18);
      result = _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(&v21);
      if (v9 < v10)
      {
LABEL_4:
        ++v5;
        v6 += 40;
        if (v5 == a2)
          return result;
        goto LABEL_5;
      }
      v14 = *a4;
      if (!*a4)
        break;
      v15 = v14 + v8;
      sub_100007D04((__int128 *)(v14 + v8 + 40), (uint64_t)&v21);
      v16 = *(_OWORD *)(v15 + 16);
      *(_OWORD *)(v15 + 40) = *(_OWORD *)v15;
      *(_OWORD *)(v15 + 56) = v16;
      *(_QWORD *)(v15 + 72) = *(_QWORD *)(v15 + 32);
      result = sub_100007D04(&v21, v15);
      v8 -= 40;
      if (v5 == ++v7)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100191BC8(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _OWORD *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  __int128 v23;
  __int128 v24;
  char *v25;
  unint64_t v26;
  __int128 v27;
  __int128 v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  char *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t result;
  char *v43;
  _QWORD v44[3];
  uint64_t v45;
  uint64_t v46;
  _QWORD v47[3];
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  char *v52;

  v4 = __dst;
  v6 = a2;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 40;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  v52 = __src;
  v51 = __dst;
  if (v9 >= v11)
  {
    if (v10 < -39)
      goto LABEL_43;
    if (__dst != a2 || &a2[40 * v11] <= __dst)
      memmove(__dst, a2, 40 * v11);
    v25 = &v4[40 * v11];
    v50 = v25;
    v52 = v6;
    if (__src >= v6 || v10 < 40)
      goto LABEL_42;
    v26 = a3 - 40;
    v43 = __src;
    while (1)
    {
      v31 = (char *)(v26 + 40);
      sub_100007CBC((uint64_t)(v25 - 40), (uint64_t)v47);
      v29 = v6 - 40;
      sub_100007CBC((uint64_t)(v6 - 40), (uint64_t)v44);
      v32 = v48;
      v33 = v49;
      sub_100007BBC(v47, v48);
      LOBYTE(v32) = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 48))(v32, v33);
      v34 = v45;
      v35 = v46;
      sub_100007BBC(v44, v45);
      v36 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v35 + 48))(v34, v35);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v44);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v47);
      if (v36 >= v32)
        break;
      v37 = v50;
      v25 = v50 - 40;
      v50 -= 40;
      if (v31 < v37 || v26 >= (unint64_t)v37)
      {
        v27 = *(_OWORD *)v25;
        v28 = *(_OWORD *)(v37 - 24);
        *(_QWORD *)(v26 + 32) = *((_QWORD *)v37 - 1);
        *(_OWORD *)v26 = v27;
        *(_OWORD *)(v26 + 16) = v28;
        v29 = v6;
        goto LABEL_29;
      }
      v30 = v43;
      if (v31 != v37)
      {
        v38 = *(_OWORD *)v25;
        v39 = *(_OWORD *)(v37 - 24);
        *(_QWORD *)(v26 + 32) = *((_QWORD *)v37 - 1);
        *(_OWORD *)v26 = v38;
        *(_OWORD *)(v26 + 16) = v39;
      }
      v29 = v6;
      if (v25 <= v4)
        goto LABEL_42;
LABEL_30:
      v26 -= 40;
      v6 = v29;
      if (v29 <= v30)
        goto LABEL_42;
    }
    if (v31 != v6 || v26 >= (unint64_t)v6)
    {
      v40 = *(_OWORD *)v29;
      v41 = *(_OWORD *)(v6 - 24);
      *(_QWORD *)(v26 + 32) = *((_QWORD *)v6 - 1);
      *(_OWORD *)v26 = v40;
      *(_OWORD *)(v26 + 16) = v41;
    }
    v52 -= 40;
    v25 = v50;
LABEL_29:
    v30 = v43;
    if (v25 <= v4)
      goto LABEL_42;
    goto LABEL_30;
  }
  if (v8 >= -39)
  {
    if (__dst != __src || &__src[40 * v9] <= __dst)
      memmove(__dst, __src, 40 * v9);
    v12 = (unint64_t)&v4[40 * v9];
    v50 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      do
      {
        sub_100007CBC((uint64_t)v6, (uint64_t)v47);
        sub_100007CBC((uint64_t)v4, (uint64_t)v44);
        v13 = v48;
        v14 = v49;
        sub_100007BBC(v47, v48);
        LOBYTE(v13) = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 48))(v13, v14);
        v15 = v45;
        v16 = v46;
        sub_100007BBC(v44, v45);
        v17 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v16 + 48))(v15, v16);
        _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v44);
        _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v47);
        v18 = v52;
        if (v17 >= v13)
        {
          v22 = (unint64_t)(v6 + 40);
          if (v52 >= v6 && (unint64_t)v52 < v22 && v52 == v6)
          {
            v18 = v6;
          }
          else
          {
            v23 = *(_OWORD *)v6;
            v24 = *((_OWORD *)v6 + 1);
            *((_QWORD *)v52 + 4) = *((_QWORD *)v6 + 4);
            *v18 = v23;
            v18[1] = v24;
          }
        }
        else
        {
          v19 = v51 + 40;
          if (v52 != v51 || v52 >= v19)
          {
            v20 = *(_OWORD *)v51;
            v21 = *((_OWORD *)v51 + 1);
            *((_QWORD *)v52 + 4) = *((_QWORD *)v51 + 4);
            *v18 = v20;
            v18[1] = v21;
          }
          v51 = v19;
          v22 = (unint64_t)v6;
        }
        v52 = (char *)v18 + 40;
        v4 = v51;
        if ((unint64_t)v51 >= v12)
          break;
        v6 = (char *)v22;
      }
      while (v22 < a3);
    }
LABEL_42:
    sub_100192268((void **)&v52, (const void **)&v51, &v50);
    return 1;
  }
LABEL_43:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

char *sub_100191FA8(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_100003DB8((uint64_t *)&unk_100324A80);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)&_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v14, v15, 16 * v8);
  }
  swift_bridgeObjectRelease(a4);
  return v11;
}

char *sub_1001920A0(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -24)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6])
      return (char *)memmove(result, v3, 24 * v6);
  }
  return result;
}

uint64_t sub_10019215C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for TargetTracks.TimePoint(0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  v10 = v8 / v7;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v10 * v7)
    return swift_arrayInitWithTakeFrontToBack(v3, v4, v10, result);
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront(v3, v4);
  return result;
}

char *sub_100192268(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;
  char v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -40)
  {
    v7 = 2;
    result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v7, 1046, 0);
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
      return (char *)memmove(result, v3, 40 * v6);
  }
  return result;
}

char *sub_100192320(uint64_t a1)
{
  return sub_100191FA8(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100192334(uint64_t a1)
{
  return sub_10017F038(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_100192348(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t (*a4)(uint64_t, __n128))
{
  uint64_t (**v7)(uint64_t, __n128);
  uint64_t v8;
  int64_t v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  __int128 v14[3];
  _BYTE v15[24];
  _QWORD v16[5];

  v16[3] = a3(0);
  v16[4] = &off_1002F4FB0;
  v16[0] = a1;
  v7 = (uint64_t (**)(uint64_t, __n128))(a2 + 16);
  swift_beginAccess(a2 + 16, v15, 33, 0);
  swift_retain(a1);
  sub_100190C0C(a4);
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 16) + 16);
  if (v9 < v8)
  {
    __break(1u);
  }
  else
  {
    sub_100192E10(v8, v9);
    sub_100007CBC((uint64_t)v16, (uint64_t)v14);
    a4 = *v7;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    *v7 = a4;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      goto LABEL_3;
  }
  a4 = (uint64_t (*)(uint64_t, __n128))sub_100172790(0, *((_QWORD *)a4 + 2) + 1, 1, a4);
  *v7 = a4;
LABEL_3:
  v12 = *((_QWORD *)a4 + 2);
  v11 = *((_QWORD *)a4 + 3);
  if (v12 >= v11 >> 1)
  {
    a4 = (uint64_t (*)(uint64_t, __n128))sub_100172790((_QWORD *)(v11 > 1), v12 + 1, 1, a4);
    *v7 = a4;
  }
  *((_QWORD *)a4 + 2) = v12 + 1;
  sub_100007D04(v14, (uint64_t)a4 + 40 * v12 + 32);
  sub_100187B78(v7);
  swift_endAccess(v15);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v16);
}

BOOL sub_100192494(double *a1, double *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL8 result;

  v4 = static Angle.== infix(_:_:)(a1, *a1, *a2);
  if ((v4 & 1) == 0)
    return 0;
  v5 = static Angle.== infix(_:_:)(v4, a1[1], a2[1]);
  if ((v5 & 1) == 0)
    return 0;
  v6 = static Angle.== infix(_:_:)(v5, a1[2], a2[2]);
  if ((v6 & 1) == 0 || (static Angle.== infix(_:_:)(v6, a1[3], a2[3]) & 1) == 0)
    return 0;
  result = 0;
  if (a1[4] == a2[4] && a1[5] == a2[5] && a1[6] == a2[6] && a1[7] == a2[7])
    return a1[8] == a2[8];
  return result;
}

uint64_t sub_100192550(uint64_t a1, int64_t a2)
{
  unint64_t *v2;
  unint64_t v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  char v26;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_27;
  }
  v4 = *v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!isUniquelyReferenced_nonNull_native || v9 > *(_QWORD *)(v4 + 24) >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_100171C9C(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = type metadata accessor for MessageSimulationEngineImplementation.MessageProgress(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = v4 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v15 * a1;
  v17 = v14 + v15 * a1;
  result = swift_arrayDestroy(v17, v7, v12);
  if (!v7)
    goto LABEL_25;
  v19 = *(_QWORD *)(v4 + 16);
  v20 = v19 - a2;
  if (__OFSUB__(v19, a2))
    goto LABEL_31;
  if ((v20 & 0x8000000000000000) == 0)
  {
    v21 = v14 + v15 * a2;
    if (v16 < v15 * a2 || v17 >= v21 + v20 * v15)
    {
      result = swift_arrayInitWithTakeFrontToBack(v17, v21, v20, v12);
    }
    else if (v16 != v15 * a2)
    {
      result = swift_arrayInitWithTakeBackToFront(v17, v21);
    }
    v23 = *(_QWORD *)(v4 + 16);
    v24 = __OFADD__(v23, v8);
    v25 = v23 - v7;
    if (!v24)
    {
      *(_QWORD *)(v4 + 16) = v25;
LABEL_25:
      *v2 = v4;
      return result;
    }
    goto LABEL_32;
  }
LABEL_33:
  v26 = 2;
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v26, 1046, 0);
  __break(1u);
  return result;
}

void *sub_1001926F8(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_100171DBC(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[4 * a1 + 4], v7, &type metadata for MessageSimulationEngineImplementation.EmergencyConversationTranscriptItem);
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[4 * a2 + 4];
    if (a1 != a2 || &v4[4 * a1 + 4] >= (_QWORD *)&v16[32 * v15])
      result = memmove(&v4[4 * a1 + 4], v16, 32 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v19 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
  __break(1u);
  return result;
}

uint64_t sub_100192860(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v2 = a2;
    v4 = a1;
    v5 = *v3;
    if (!((unint64_t)*v3 >> 62))
    {
      v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v7 >= a2)
        goto LABEL_4;
LABEL_34:
      __break(1u);
      goto LABEL_35;
    }
  }
  if (v5 < 0)
    v21 = v5;
  else
    v21 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v7 = _CocoaArrayWrapper.endIndex.getter(v21);
  swift_bridgeObjectRelease(v5);
  if (v7 < v2)
    goto LABEL_34;
LABEL_4:
  v7 = v2 - v4;
  if (__OFSUB__(v2, v4))
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v6 = v4 - v2;
  if (__OFSUB__(0, v7))
  {
LABEL_36:
    __break(1u);
    goto LABEL_37;
  }
  v5 = *v3;
  if (!((unint64_t)*v3 >> 62))
  {
    v8 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
    v9 = v8 - v7;
    if (!__OFADD__(v8, v6))
      goto LABEL_8;
LABEL_42:
    __break(1u);
LABEL_43:
    if (v5 < 0)
      v23 = v5;
    else
      v23 = v5 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5);
    v12 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease(v5);
    goto LABEL_15;
  }
LABEL_37:
  if (v5 < 0)
    v22 = v5;
  else
    v22 = v5 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v5);
  v8 = _CocoaArrayWrapper.endIndex.getter(v22);
  swift_bridgeObjectRelease(v5);
  v9 = v8 + v6;
  if (__OFADD__(v8, v6))
    goto LABEL_42;
LABEL_8:
  v5 = *v3;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject(*v3);
  *v3 = v5;
  v8 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v5 & 0x8000000000000000) == 0 && (v5 & 0x4000000000000000) == 0)
  {
    v11 = v5 & 0xFFFFFFFFFFFFFF8;
    if (v9 <= *(_QWORD *)((v5 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v8 = 1;
  }
  if ((unint64_t)v5 >> 62)
    goto LABEL_43;
  v12 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v12 <= v9)
    v12 = v9;
  swift_bridgeObjectRetain(v5);
  v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v8, v12, 1, v5);
  swift_bridgeObjectRelease(*v3);
  *v3 = v5;
  v11 = v5 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v13 = type metadata accessor for TryOutTranscriptMessageItem(0);
  v14 = (void *)swift_arrayDestroy(v11 + 32 + 8 * v4, v7, v13);
  if (!v6)
    return specialized Array._endMutation()(v14);
  if (!((unint64_t)v5 >> 62))
  {
    v15 = *(_QWORD *)(v11 + 16);
    v16 = v15 - v2;
    if (!__OFSUB__(v15, v2))
      goto LABEL_21;
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v5 < 0)
    v24 = v5;
  else
    v24 = v11;
  swift_bridgeObjectRetain(v5);
  v25 = _CocoaArrayWrapper.endIndex.getter(v24);
  swift_bridgeObjectRelease(v5);
  v16 = v25 - v2;
  if (__OFSUB__(v25, v2))
    goto LABEL_52;
LABEL_21:
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (const void *)(v11 + 32 + 8 * v2);
    if (v4 != v2 || v11 + 32 + 8 * v4 >= (unint64_t)v17 + 8 * v16)
      v14 = memmove((void *)(v11 + 32 + 8 * v4), v17, 8 * v16);
    if (!((unint64_t)v5 >> 62))
    {
      v18 = *(_QWORD *)(v11 + 16);
      v19 = v18 + v6;
      if (!__OFADD__(v18, v6))
      {
LABEL_27:
        *(_QWORD *)(v11 + 16) = v19;
        return specialized Array._endMutation()(v14);
      }
      goto LABEL_58;
    }
LABEL_53:
    if (v5 < 0)
      v26 = v5;
    else
      v26 = v11;
    swift_bridgeObjectRetain(v5);
    v27 = _CocoaArrayWrapper.endIndex.getter(v26);
    swift_bridgeObjectRelease(v5);
    v19 = v27 + v6;
    if (!__OFADD__(v27, v6))
      goto LABEL_27;
LABEL_58:
    __break(1u);
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, 2, 1046, 0);
  __break(1u);
  return result;
}

void *sub_100192B2C(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  void *result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char v19;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_100171FE0(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  result = (void *)swift_arrayDestroy(&v4[5 * a1 + 4], v7, &type metadata for QuestionnaireNavigationPage);
  if (!v7)
    goto LABEL_20;
  v13 = v4[2];
  v14 = __OFSUB__(v13, a2);
  v15 = v13 - a2;
  if (v14)
    goto LABEL_26;
  if ((v15 & 0x8000000000000000) == 0)
  {
    v16 = (char *)&v4[5 * a2 + 4];
    if (a1 != a2 || &v4[5 * a1 + 4] >= (_QWORD *)&v16[40 * v15])
      result = memmove(&v4[5 * a1 + 4], v16, 40 * v15);
    v17 = v4[2];
    v14 = __OFADD__(v17, v8);
    v18 = v17 - v7;
    if (!v14)
    {
      v4[2] = v18;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v19 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v19, 1046, 0);
  __break(1u);
  return result;
}

id sub_100192CA0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id result;
  uint64_t v25;

  objc_msgSend(a1, "heading");
  v5 = v4 * 0.0174532925;
  if (v4 * 0.0174532925 < 0.0 || v5 >= 6.28318531)
    v5 = v5 - floor(v5 / 6.28318531) * 6.28318531;
  v6 = objc_msgSend(a1, "attitude");
  objc_msgSend(v6, "pitch");
  v8 = v7;

  v9 = objc_msgSend(a1, "attitude");
  objc_msgSend(v9, "roll");
  v11 = v10;

  v12 = objc_msgSend(a1, "attitude");
  objc_msgSend(v12, "yaw");
  v14 = v13;

  v15 = objc_msgSend(a1, "attitude");
  objc_msgSend(v15, "quaternion");
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;

  result = objc_msgSend(a1, "timestamp");
  *(double *)a2 = v5;
  *(_QWORD *)(a2 + 8) = v8;
  *(_QWORD *)(a2 + 16) = v11;
  *(_QWORD *)(a2 + 24) = v14;
  *(_QWORD *)(a2 + 32) = v17;
  *(_QWORD *)(a2 + 40) = v19;
  *(_QWORD *)(a2 + 48) = v21;
  *(_QWORD *)(a2 + 56) = v23;
  *(_QWORD *)(a2 + 64) = v25;
  return result;
}

void *sub_100192E10(uint64_t a1, int64_t a2)
{
  _QWORD *v2;
  _QWORD *v4;
  int64_t v5;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v4 = (_QWORD *)*v2;
  v5 = *(_QWORD *)(*v2 + 16);
  if (v5 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v7 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v8 = a1 - a2;
  if (__OFSUB__(0, v7))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v9 = v5 - v7;
  if (__OFADD__(v5, v8))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native(*v2);
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v9 > v4[3] >> 1)
  {
    if (v5 <= v9)
      v11 = v5 + v8;
    else
      v11 = v5;
    v4 = sub_100172790(isUniquelyReferenced_nonNull_native, v11, 1, v4);
  }
  v12 = sub_100003DB8((uint64_t *)&unk_100324A70);
  result = (void *)swift_arrayDestroy(&v4[5 * a1 + 4], v7, v12);
  if (!v7)
    goto LABEL_20;
  v14 = v4[2];
  v15 = __OFSUB__(v14, a2);
  v16 = v14 - a2;
  if (v15)
    goto LABEL_26;
  if ((v16 & 0x8000000000000000) == 0)
  {
    v17 = (char *)&v4[5 * a2 + 4];
    if (a1 != a2 || &v4[5 * a1 + 4] >= (_QWORD *)&v17[40 * v16])
      result = memmove(&v4[5 * a1 + 4], v17, 40 * v16);
    v18 = v4[2];
    v15 = __OFADD__(v18, v8);
    v19 = v18 - v7;
    if (!v15)
    {
      v4[2] = v19;
LABEL_20:
      *v2 = v4;
      return result;
    }
    goto LABEL_27;
  }
LABEL_28:
  v20 = 2;
  result = (void *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.moveInitialize with negative count", 55, 2, "Swift/UnsafePointer.swift", 25, v20, 1046, 0);
  __break(1u);
  return result;
}

BOOL sub_100192F8C(_QWORD *a1)
{
  uint64_t v1;

  return sub_10018F1AC(a1, *(_QWORD **)(v1 + 16));
}

uint64_t sub_100192FA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = type metadata accessor for DispatchTime(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v3 | 7;
  v6 = ((((((*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 79) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100193038()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for DispatchTime(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_10018C020(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));
}

double sub_100193094(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1001930A4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001930AC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001930D0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

void sub_1001930F4()
{
  uint64_t v0;

  sub_10018BEF8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100193100(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for DeviceOrientationSource.DeviceOrientationErrorState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019314C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = type metadata accessor for DeviceOrientationSource.DeviceOrientationErrorState(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + 16));
  v6 = v0 + *(int *)(v1 + 24) + v4;
  v7 = type metadata accessor for DeviceOrientationError(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {

    v8 = *(_QWORD *)(v6 + 16);
    if (v8 != 1)
    {
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(*(_QWORD *)(v6 + 32));
    }
    v9 = v6 + *(int *)(v7 + 24);
    v10 = type metadata accessor for DispatchTime(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100193220()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for DeviceOrientationSource.DeviceOrientationErrorState(0)
                                      - 8)
                          + 80);
  return sub_10018BE7C(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_100193258()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10019327C()
{
  uint64_t v0;

  return sub_100188364(*(_QWORD *)(v0 + 16));
}

uint64_t sub_100193284()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100193294()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001932A4()
{
  uint64_t v0;

  return sub_10018A0AC(*(_QWORD *)(v0 + 16));
}

unint64_t sub_1001932AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100324AB8;
  if (!qword_100324AB8)
  {
    v1 = sub_10006477C(255, &qword_100324AB0, NSOperationQueue_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSOperationQueue, v1);
    atomic_store(result, (unint64_t *)&qword_100324AB8);
  }
  return result;
}

uint64_t sub_100193304()
{
  uint64_t v0;

  return sub_100189928(v0);
}

void sub_100193314(char a1)
{
  uint64_t v1;

  sub_10018955C(a1, v1, (uint64_t)&unk_1002F5458, (uint64_t)sub_100193408);
}

void sub_100193340()
{
  uint64_t v0;

  sub_100188278(*(char **)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10019334C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10019335C(char a1)
{
  uint64_t v1;

  sub_10018955C(a1, v1, (uint64_t)&unk_1002F5430, (uint64_t)sub_1001933E8);
}

uint64_t sub_100193388()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001933B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001933C4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1001933E8()
{
  uint64_t v0;

  return sub_1001896A4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), 1);
}

uint64_t sub_100193408()
{
  uint64_t v0;

  return sub_1001896A4(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24), 0);
}

uint64_t sub_100193428(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MessageSimulationEngineImplementation.MessageProgress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for LocationAuthorizationType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001934B8 + 4 * byte_10025A2A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001934EC + 4 * byte_10025A2A0[v4]))();
}

uint64_t sub_1001934EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001934F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001934FCLL);
  return result;
}

uint64_t sub_100193508(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100193510);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100193514(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019351C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationAuthorizationType()
{
  return &type metadata for LocationAuthorizationType;
}

unint64_t sub_10019353C()
{
  unint64_t result;

  result = qword_100324AF0;
  if (!qword_100324AF0)
  {
    result = swift_getWitnessTable(&unk_10025A62C, &type metadata for LocationAuthorizationType);
    atomic_store(result, (unint64_t *)&qword_100324AF0);
  }
  return result;
}

BOOL sub_100193580(_QWORD *a1)
{
  return sub_100192F8C(a1);
}

uint64_t destroy for TryOutInitialConnectionView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[7]);
  swift_release(a1[8]);
  swift_release(a1[9]);
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t initializeWithCopy for TryOutInitialConnectionView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v8 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v9 = a2[7];
  v10 = a2[8];
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v10;
  v11 = a2[9];
  v12 = a2[10];
  *(_QWORD *)(a1 + 72) = v11;
  *(_QWORD *)(a1 + 80) = v12;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t *assignWithCopy for TryOutInitialConnectionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a1[4];
  v9 = a2[4];
  a1[4] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[5] = a2[5];
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  v10 = a1[7];
  v11 = a2[7];
  a1[7] = v11;
  swift_retain(v11);
  swift_release(v10);
  v12 = a1[8];
  v13 = a2[8];
  a1[8] = v13;
  swift_retain(v13);
  swift_release(v12);
  v14 = a2[9];
  v15 = a1[9];
  a1[9] = v14;
  swift_retain(v14);
  swift_release(v15);
  v16 = a2[10];
  v17 = a1[10];
  a1[10] = v16;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRelease(v17);
  return a1;
}

uint64_t *assignWithTake for TryOutInitialConnectionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = a1[4];
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_release(v7);
  a1[5] = a2[5];
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  swift_release(a1[7]);
  v9 = a1[8];
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
  swift_release(v9);
  swift_release(a1[9]);
  v10 = a1[10];
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for TryOutInitialConnectionView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TryOutInitialConnectionView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 72) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TryOutInitialConnectionView()
{
  return &type metadata for TryOutInitialConnectionView;
}

uint64_t sub_100193924(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029D5A0, 1);
}

uint64_t sub_100193934@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __int128 v49;
  unint64_t v50;
  char *v51;
  __n128 v52;
  void (*v53)(char *, char *, uint64_t);
  char *v54;
  uint64_t v55;
  uint64_t result;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t);
  unint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  __int128 v78;
  _OWORD v79[4];
  __int128 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  char v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  _OWORD v88[5];
  uint64_t v89;
  _QWORD v90[7];

  v2 = v1;
  v77 = a1;
  v3 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v63 = *(_QWORD *)(v3 - 8);
  v64 = v3;
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100003DB8(&qword_100324B00);
  v65 = *(_QWORD *)(v62 - 8);
  __chkstk_darwin(v62, v7);
  v9 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_100324B08);
  v66 = *(_QWORD *)(v10 - 8);
  v67 = v10;
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003DB8(&qword_100324B10);
  v69 = *(_QWORD *)(v14 - 8);
  v70 = v14;
  __chkstk_darwin(v14, v15);
  v68 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = sub_100003DB8(&qword_100324B18);
  __chkstk_darwin(v74, v17);
  v75 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_100003DB8(&qword_100324B20);
  v73 = *(_QWORD *)(v76 - 8);
  v20 = __chkstk_darwin(v76, v19);
  v72 = (char *)&v62 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v22);
  v71 = (char *)&v62 - v23;
  v24 = *(_QWORD **)(v1 + 32);
  if (v24)
  {
    v25 = v24[9];
    v26 = v24[10];
    sub_100007BBC(v24 + 6, v25);
    v27 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v26 + 32))(v90, v25, v26);
    v28 = static HorizontalAlignment.center.getter(v27);
    sub_100193EB4(v2, (uint64_t)v90, (uint64_t)&v85);
    v84 = 0;
    v78 = (unint64_t)v28;
    LOBYTE(v79[0]) = 0;
    *(_OWORD *)((char *)v79 + 8) = v85;
    *(_OWORD *)((char *)&v79[1] + 8) = v86;
    *(_OWORD *)((char *)&v79[2] + 8) = v87;
    *((_QWORD *)&v79[3] + 1) = *(_QWORD *)&v88[0];
    v80 = *(_OWORD *)((char *)v88 + 8);
    v81 = *(_OWORD *)((char *)&v88[1] + 8);
    v82 = *(_OWORD *)((char *)&v88[2] + 8);
    v83 = *((_QWORD *)&v88[3] + 1);
    v30 = v63;
    v29 = v64;
    (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v6, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v64);
    v31 = sub_100003DB8(&qword_100324B28);
    v32 = sub_1000084FC(&qword_100324B30, &qword_100324B28, (uint64_t)&protocol conformance descriptor for VStack<A>);
    View.navigationBarTitleDisplayMode(_:)(v6, v31, v32);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v29);
    v88[3] = v81;
    v88[4] = v82;
    v89 = v83;
    v87 = v79[1];
    v88[0] = v79[2];
    v88[1] = v79[3];
    v88[2] = v80;
    v85 = v78;
    v86 = v79[0];
    sub_100194D1C(&v85);
    *(_QWORD *)&v78 = v31;
    *((_QWORD *)&v78 + 1) = v32;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v78, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v34 = v62;
    View.navigationBarBackButtonHidden(_:)(1, v62, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v9, v34);
    *(_QWORD *)&v78 = v34;
    *((_QWORD *)&v78 + 1) = OpaqueTypeConformance2;
    v35 = swift_getOpaqueTypeConformance2(&v78, &opaque type descriptor for <<opaque return type of View.navigationBarBackButtonHidden(_:)>>, 1);
    v36 = v67;
    v37 = v68;
    View.navigationBarHidden(_:)(1, v67, v35);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v13, v36);
    v38 = swift_allocObject(&unk_1002F55D8, 104, 7);
    v39 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(v38 + 48) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v38 + 64) = v39;
    *(_OWORD *)(v38 + 80) = *(_OWORD *)(v2 + 64);
    *(_QWORD *)(v38 + 96) = *(_QWORD *)(v2 + 80);
    v40 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v38 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v38 + 32) = v40;
    v42 = v69;
    v41 = v70;
    v43 = (uint64_t)v75;
    (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v75, v37, v70);
    v44 = v74;
    v45 = (_QWORD *)(v43 + *(int *)(v74 + 36));
    *v45 = sub_100194D90;
    v45[1] = v38;
    v45[2] = 0;
    v45[3] = 0;
    sub_100194D98((uint64_t *)v2);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v37, v41);
    v46 = *(_QWORD *)(v2 + 16);
    if (v46)
    {
      LOBYTE(v78) = *(_BYTE *)(*(_QWORD *)(v46 + 56) + 106) & 1;
      v47 = swift_allocObject(&unk_1002F5600, 104, 7);
      v48 = *(_OWORD *)(v2 + 48);
      *(_OWORD *)(v47 + 48) = *(_OWORD *)(v2 + 32);
      *(_OWORD *)(v47 + 64) = v48;
      *(_OWORD *)(v47 + 80) = *(_OWORD *)(v2 + 64);
      *(_QWORD *)(v47 + 96) = *(_QWORD *)(v2 + 80);
      v49 = *(_OWORD *)(v2 + 16);
      *(_OWORD *)(v47 + 16) = *(_OWORD *)v2;
      *(_OWORD *)(v47 + 32) = v49;
      sub_100194D98((uint64_t *)v2);
      v50 = sub_100194E48();
      v51 = v72;
      View.onChange<A>(of:initial:_:)(&v78, 0, sub_100194E1C, v47, v44, &type metadata for Bool, v50, &protocol witness table for Bool, v52);
      swift_release(v47);
      sub_100194F54(v43);
      v53 = *(void (**)(char *, char *, uint64_t))(v73 + 32);
      v54 = v71;
      v55 = v76;
      v53(v71, v51, v76);
      v53(v77, v54, v55);
      return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v90);
    }
    v57 = *(_QWORD *)(v2 + 24);
    v58 = type metadata accessor for ConnectionModel(0);
    v59 = type metadata accessor for ConnectionModel;
    v60 = &qword_100316B10;
  }
  else
  {
    v57 = *(_QWORD *)(v1 + 40);
    v58 = type metadata accessor for UIMetrics();
    v59 = (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics;
    v60 = (unint64_t *)&qword_100316A00;
  }
  v61 = sub_1000052EC(v60, v59, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v57, v58, v61);
  __break(1u);
  return result;
}

__n128 sub_100193EB4@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 result;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = type metadata accessor for UIMetrics();
  v7 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v8 = EnvironmentObject.init()(v6, v7);
  v10 = v9;
  type metadata accessor for CGSize(0);
  v12 = v11;
  v25 = 0;
  v26 = 0;
  State.init(wrappedValue:)(&v23, &v25, v11);
  v13 = (__int128)v23;
  v14 = v24;
  sub_100007CBC(a2, (uint64_t)&v23);
  v15 = swift_allocObject(&unk_1002F5678, 144, 7);
  v16 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v15 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v15 + 64) = v16;
  *(_OWORD *)(v15 + 80) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(v15 + 96) = *(_QWORD *)(a1 + 80);
  v17 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v15 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v15 + 32) = v17;
  sub_100007D04((__int128 *)&v23, v15 + 104);
  sub_100194D98((uint64_t *)a1);
  v18 = EnvironmentObject.init()(v6, v7);
  v20 = v19;
  v25 = 0;
  v26 = 0;
  State.init(wrappedValue:)(&v23, &v25, v12);
  v21 = v24;
  result = v23;
  *(_QWORD *)a3 = v8;
  *(_QWORD *)(a3 + 8) = v10;
  *(_OWORD *)(a3 + 16) = v13;
  *(_QWORD *)(a3 + 32) = v14;
  *(_QWORD *)(a3 + 40) = v18;
  *(_QWORD *)(a3 + 48) = v20;
  *(_QWORD *)(a3 + 56) = sub_100194028;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = sub_100195068;
  *(_QWORD *)(a3 + 80) = v15;
  *(__n128 *)(a3 + 88) = result;
  *(_QWORD *)(a3 + 104) = v21;
  return result;
}

double sub_100194028@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  double result;
  __int128 v10;
  _OWORD v11[12];
  _BYTE v12[199];

  v3 = static HorizontalAlignment.center.getter(a1);
  sub_100194110((uint64_t)v11);
  *(_OWORD *)&v12[135] = v11[8];
  *(_OWORD *)&v12[151] = v11[9];
  *(_OWORD *)&v12[167] = v11[10];
  *(_OWORD *)&v12[183] = v11[11];
  *(_OWORD *)&v12[71] = v11[4];
  *(_OWORD *)&v12[87] = v11[5];
  *(_OWORD *)&v12[103] = v11[6];
  *(_OWORD *)&v12[119] = v11[7];
  *(_OWORD *)&v12[7] = v11[0];
  *(_OWORD *)&v12[23] = v11[1];
  *(_OWORD *)&v12[39] = v11[2];
  *(_OWORD *)&v12[55] = v11[3];
  v4 = *(_OWORD *)&v12[128];
  *(_OWORD *)(a2 + 161) = *(_OWORD *)&v12[144];
  v5 = *(_OWORD *)&v12[176];
  *(_OWORD *)(a2 + 177) = *(_OWORD *)&v12[160];
  *(_OWORD *)(a2 + 193) = v5;
  v6 = *(_OWORD *)&v12[64];
  *(_OWORD *)(a2 + 97) = *(_OWORD *)&v12[80];
  v7 = *(_OWORD *)&v12[112];
  *(_OWORD *)(a2 + 113) = *(_OWORD *)&v12[96];
  *(_OWORD *)(a2 + 129) = v7;
  *(_OWORD *)(a2 + 145) = v4;
  v8 = *(_OWORD *)v12;
  *(_OWORD *)(a2 + 33) = *(_OWORD *)&v12[16];
  result = *(double *)&v12[32];
  v10 = *(_OWORD *)&v12[48];
  *(_OWORD *)(a2 + 49) = *(_OWORD *)&v12[32];
  *(_OWORD *)(a2 + 65) = v10;
  *(_OWORD *)(a2 + 81) = v6;
  *(_QWORD *)a2 = v3;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 208) = *(_QWORD *)&v12[191];
  *(_OWORD *)(a2 + 17) = v8;
  return result;
}

uint64_t sub_100194110@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  v2 = type metadata accessor for ConnectionClosedModel(0);
  v3 = sub_1000052EC(&qword_10031CB58, type metadata accessor for ConnectionClosedModel, (uint64_t)&unk_10024D2FC);
  v46 = EnvironmentObject.init()(v2, v3);
  v47 = v4;
  v5 = type metadata accessor for ConnectivityModel();
  v6 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
  v44 = EnvironmentObject.init()(v5, v6);
  v45 = v7;
  v8 = type metadata accessor for GuidanceModel();
  v9 = sub_1000052EC(&qword_100316B08, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceModel, (uint64_t)&unk_10024D2FC);
  v42 = EnvironmentObject.init()(v8, v9);
  v43 = v10;
  v11 = type metadata accessor for OrientationModel();
  v12 = sub_1000052EC(&qword_10031CB60, (uint64_t (*)(uint64_t))type metadata accessor for OrientationModel, (uint64_t)&unk_10024D2FC);
  v40 = EnvironmentObject.init()(v11, v12);
  v41 = v13;
  v14 = type metadata accessor for StewieModel();
  v15 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
  v16 = EnvironmentObject.init()(v14, v15);
  v39 = v17;
  v18 = type metadata accessor for UIMetrics();
  v19 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v20 = EnvironmentObject.init()(v18, v19);
  v37 = v21;
  v38 = v20;
  v36 = EnvironmentObject.init()(v5, v6);
  v23 = v22;
  v24 = EnvironmentObject.init()(v18, v19);
  v26 = v25;
  v27 = type metadata accessor for GuidanceMessagesModel();
  v28 = sub_1000052EC(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel, (uint64_t)&unk_10024D2FC);
  v29 = EnvironmentObject.init()(v27, v28);
  v31 = v30;
  v32 = EnvironmentObject.init()(v18, v19);
  *(_QWORD *)a1 = v46;
  *(_QWORD *)(a1 + 8) = v47;
  *(_QWORD *)(a1 + 16) = v44;
  *(_QWORD *)(a1 + 24) = v45;
  *(_QWORD *)(a1 + 32) = v42;
  *(_QWORD *)(a1 + 40) = v43;
  *(_QWORD *)(a1 + 48) = v40;
  *(_QWORD *)(a1 + 56) = v41;
  *(_QWORD *)(a1 + 64) = v16;
  *(_QWORD *)(a1 + 72) = v39;
  *(_QWORD *)(a1 + 80) = v38;
  *(_QWORD *)(a1 + 88) = v37;
  *(_BYTE *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = v36;
  *(_QWORD *)(a1 + 120) = v23;
  *(_QWORD *)(a1 + 128) = v24;
  *(_QWORD *)(a1 + 136) = v26;
  *(_QWORD *)(a1 + 144) = 32;
  *(_QWORD *)(a1 + 152) = 0xE100000000000000;
  *(_QWORD *)(a1 + 160) = v29;
  *(_QWORD *)(a1 + 168) = v31;
  *(_QWORD *)(a1 + 176) = v32;
  *(_QWORD *)(a1 + 184) = v33;
  swift_retain(v46);
  swift_retain(v44);
  swift_retain(v42);
  swift_retain(v40);
  swift_retain(v16);
  swift_release(v34);
  swift_release(v40);
  swift_release(v42);
  swift_release(v44);
  return swift_release(v46);
}

uint64_t sub_1001943B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  unint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  char v29;
  uint64_t KeyPath;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  char v42;
  double v43;
  uint64_t v44;
  char v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t result;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  char v59;
  _QWORD *v60;
  __int128 v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  _OWORD v65[10];
  _OWORD v66[10];
  uint64_t v67;
  double v68;
  char v69;
  __int128 v70;
  __int128 v71;
  char v72;
  char v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  char v78;
  __int128 v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  BOOL v88;
  _OWORD v89[21];
  Swift::String v90;

  v89[0] = *(_OWORD *)(a1 + 48);
  v6 = sub_100003DB8(&qword_100316780);
  State.wrappedValue.getter(v66, v6);
  if (LOBYTE(v66[0]) != 1)
  {
    sub_1000E9690(v66);
    sub_100195074((uint64_t)v66, (uint64_t)v89);
    return sub_100195074((uint64_t)v89, a3);
  }
  v60 = a2;
  v64 = a3;
  v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v90._object = (void *)0x800000010026DDC0;
  v8._object = (void *)0x800000010026DD90;
  v8._countAndFlagsBits = 0x1000000000000026;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v90._countAndFlagsBits = 0xD000000000000067;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v90);

  v89[0] = v10;
  v11 = sub_10002B3F4();
  v13 = Text.init<A>(_:)(v89, &type metadata for String, v11, v12);
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  v20 = static Font.title2.getter(v13);
  static Font.Weight.semibold.getter(v20);
  v21 = Font.weight(_:)(v20);
  swift_release(v20);
  v22 = Text.font(_:)(v21, v13, v15, v19, v17);
  v24 = v23;
  v59 = v25;
  v62 = v26;
  swift_release(v21);
  sub_10002B438(v13, v15, v19);
  swift_bridgeObjectRelease(v17);
  v27 = *(_QWORD *)(a1 + 32);
  if (v27)
  {
    v28 = *(id *)(v27 + 112);
    v29 = static UIContentSizeCategory.>= infix(_:_:)(v28, UIContentSizeCategoryAccessibilityExtraLarge);

    v58 = (v29 & 1) == 0;
    KeyPath = swift_getKeyPath(&unk_10025A6D0);
    v31 = *(id *)(v27 + 112);
    v32 = static Alignment.center.getter(v31);
    v34 = v33;
    v35 = static UIContentSizeCategory.>= infix(_:_:)(v31, UIContentSizeCategoryAccessibilityExtraLarge);
    if ((v35 & 1) != 0)
    {
      v36 = static Alignment.center.getter(v35);
      v38 = static Alignment.== infix(_:_:)(v32, v34, v36, v37);
      if ((v38 & 1) != 0)
      {
        v32 = static Alignment.leading.getter(v38, v39);
        v34 = v40;
      }
    }

    v83 = v22;
    v84 = v24;
    v85 = v59 & 1;
    v86 = v62;
    v87 = KeyPath;
    v88 = v58;
    sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v65, 0.0, 1, 0.0, 1, v32, v34);
    sub_10002B438(v22, v24, v59 & 1);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v62);
    v41 = *(id *)(v27 + 112);
    v42 = static UIContentSizeCategory.>= infix(_:_:)(v41, UIContentSizeCategoryAccessibilityExtraLarge);

    if ((v42 & 1) != 0)
      v43 = 1.0;
    else
      v43 = 0.5;
    v44 = swift_getKeyPath(&unk_10025A700);
    v45 = static Edge.Set.top.getter(v44);
    v46 = sub_100007BBC(v60, v60[3]);
    v63 = *(_OWORD *)(*v46 + 184);
    v47 = *(_QWORD *)(*v46 + 200);
    v48 = *(_QWORD *)(*v46 + 208);
    v49 = static Edge.Set.all.getter(*(double *)(*v46 + 184));
    v50 = sub_100007BBC(v60, v60[3]);
    v61 = *(_OWORD *)(*v50 + 80);
    v51 = *(_QWORD *)(*v50 + 96);
    v52 = *(_QWORD *)(*v50 + 104);
    v53 = static Edge.Set.all.getter(*(double *)(*v50 + 80));
    v66[6] = v65[6];
    v66[7] = v65[7];
    v66[8] = v65[8];
    v66[9] = v65[9];
    v66[2] = v65[2];
    v66[3] = v65[3];
    v66[4] = v65[4];
    v66[5] = v65[5];
    v66[0] = v65[0];
    v66[1] = v65[1];
    v67 = v44;
    v68 = v43;
    v69 = v45;
    v70 = 0u;
    v71 = 0u;
    v72 = 1;
    v73 = v49;
    v74 = v63;
    v75 = v47;
    v76 = v48;
    v77 = 0;
    v78 = v53;
    v79 = v61;
    v80 = v51;
    v81 = v52;
    v82 = 0;
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(v66);
    sub_100195074((uint64_t)v66, (uint64_t)v89);
    a3 = v64;
    return sub_100195074((uint64_t)v89, a3);
  }
  v55 = *(_QWORD *)(a1 + 40);
  v56 = type metadata accessor for UIMetrics();
  v57 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v55, v56, v57);
  __break(1u);
  return result;
}

_QWORD *sub_100194824(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = result[2];
  if (v1)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v1 + 56) + 106) & 1) != 0)
      return sub_10019489C();
  }
  else
  {
    v2 = result[3];
    v3 = type metadata accessor for ConnectionModel(0);
    v4 = sub_1000052EC(&qword_100316B10, type metadata accessor for ConnectionModel, (uint64_t)&unk_10024D2FC);
    result = (_QWORD *)EnvironmentObject.error()(0, v2, v3, v4);
    __break(1u);
  }
  return result;
}

_QWORD *sub_10019489C()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *result;
  __n128 v21;
  void *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  void *v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 aBlock;
  uint64_t (*v37)(uint64_t);
  void *v38;
  _QWORD *(*v39)();
  uint64_t v40;
  char v41;
  __int128 v42;

  v1 = (uint64_t *)v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v6 - 8);
  v34 = v6;
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchTime(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v18 = (char *)&v32 - v17;
  v42 = *(_OWORD *)(v0 + 48);
  aBlock = *(_OWORD *)(v0 + 48);
  v19 = sub_100003DB8(&qword_100316780);
  result = State.wrappedValue.getter(&v41, v19);
  if ((v41 & 1) == 0)
  {
    aBlock = v42;
    v41 = 1;
    State.wrappedValue.setter(&v41, v19);
    sub_10000D75C();
    v22 = (void *)static OS_dispatch_queue.main.getter(v21);
    static DispatchTime.now()(v22);
    + infix(_:_:)(v15, 6.0);
    v32 = *(void (**)(char *, uint64_t))(v11 + 8);
    v32(v15, v10);
    v23 = swift_allocObject(&unk_1002F5628, 104, 7);
    v24 = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v23 + 48) = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v23 + 64) = v24;
    *(_OWORD *)(v23 + 80) = *(_OWORD *)(v0 + 64);
    *(_QWORD *)(v23 + 96) = *(_QWORD *)(v0 + 80);
    v25 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v23 + 16) = *(_OWORD *)v0;
    *(_OWORD *)(v23 + 32) = v25;
    v39 = sub_100194FEC;
    v40 = v23;
    *(_QWORD *)&aBlock = _NSConcreteStackBlock;
    *((_QWORD *)&aBlock + 1) = 1107296256;
    v37 = sub_1001BAACC;
    v38 = &unk_1002F5640;
    v26 = _Block_copy(&aBlock);
    v27 = v40;
    sub_100194D98(v1);
    swift_release(v27);
    static DispatchQoS.unspecified.getter(v28);
    *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
    v29 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v30 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v31 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v30, v31, v2, v29);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v18, v9, v5, v26);
    _Block_release(v26);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v34);
    return (_QWORD *)((uint64_t (*)(char *, uint64_t))v32)(v18, v10);
  }
  return result;
}

_QWORD *sub_100194B9C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __n128 v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[8];
  v1 = a1[9];
  v3 = a1[10];
  v16 = v2;
  v17 = v3;
  v12 = v2;
  v13 = v1;
  v14 = v3;
  sub_100031A88(&v16);
  swift_retain(v1);
  sub_100034218(&v17);
  v4 = sub_100003DB8(&qword_100319240);
  Binding.wrappedValue.getter(&v15);
  v5 = v15;
  if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
    v5 = sub_100171738(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
  v8 = *((_QWORD *)v5 + 2);
  v7 = *((_QWORD *)v5 + 3);
  if (v8 >= v7 >> 1)
    v5 = sub_100171738((char *)(v7 > 1), v8 + 1, 1, v5);
  *((_QWORD *)v5 + 2) = v8 + 1;
  v9 = &v5[16 * v8];
  *((_QWORD *)v9 + 4) = 0xD000000000000024;
  *((_QWORD *)v9 + 5) = 0x800000010026AFE0;
  v12 = v2;
  v13 = v1;
  v14 = v3;
  v11 = v5;
  Binding.wrappedValue.setter(&v11, v4, v6);
  sub_100042AD0(&v16);
  swift_release(v1);
  return sub_100042AF8(&v17);
}

uint64_t sub_100194CD4@<X0>(char *a1@<X8>)
{
  return sub_100193934(a1);
}

_QWORD *sub_100194D1C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[3];
  v3 = a1[7];
  v4 = a1[8];
  v5 = a1[11];
  v6 = a1[16];
  swift_release(a1[13]);
  swift_release(v5);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v6);
  return a1;
}

_QWORD *sub_100194D90()
{
  uint64_t v0;

  return sub_100194824((_QWORD *)(v0 + 16));
}

uint64_t *sub_100194D98(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[7];
  v6 = a1[9];
  v7 = a1[10];
  swift_retain(a1[8]);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

_QWORD *sub_100194E1C(uint64_t a1, _BYTE *a2)
{
  _QWORD *result;

  if (*a2 == 1)
    return sub_10019489C();
  return result;
}

unint64_t sub_100194E48()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = qword_100324B38;
  if (!qword_100324B38)
  {
    v1 = sub_100007FAC(&qword_100324B18);
    v2 = sub_100007FAC(&qword_100324B08);
    v3 = sub_100007FAC(&qword_100324B00);
    v6 = sub_100007FAC(&qword_100324B28);
    v7 = sub_1000084FC(&qword_100324B30, &qword_100324B28, (uint64_t)&protocol conformance descriptor for VStack<A>);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v6 = v3;
    v7 = OpaqueTypeConformance2;
    v5 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.navigationBarBackButtonHidden(_:)>>, 1);
    v6 = v2;
    v7 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.navigationBarHidden(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100324B38);
  }
  return result;
}

uint64_t sub_100194F54(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003DB8(&qword_100324B18);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100194F98()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  return swift_deallocObject(v0, 104, 7);
}

_QWORD *sub_100194FEC()
{
  uint64_t v0;

  return sub_100194B9C((_QWORD *)(v0 + 16));
}

double sub_100194FF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_100195004(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10019500C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 13);
  return swift_deallocObject(v0, 144, 7);
}

uint64_t sub_100195068@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001943B4(v1 + 16, (_QWORD *)(v1 + 104), a1);
}

uint64_t sub_100195074(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031F2A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001950CC()
{
  _QWORD v1[4];

  v1[0] = sub_100007FAC(&qword_100324B18);
  v1[1] = &type metadata for Bool;
  v1[2] = sub_100194E48();
  v1[3] = &protocol witness table for Bool;
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t destroy for QuestionnaireLikeButton(_QWORD *a1)
{
  swift_release(*a1);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_release(a1[8]);
}

uint64_t initializeWithCopy for QuestionnaireLikeButton(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  v5 = a2[3];
  v4 = a2[4];
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  v6 = a2[5];
  *(_QWORD *)(a1 + 40) = v6;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v7 = a2[8];
  *(_QWORD *)(a1 + 56) = a2[7];
  *(_QWORD *)(a1 + 64) = v7;
  swift_retain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t *assignWithCopy for QuestionnaireLikeButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  v11 = a2[7];
  v10 = a2[8];
  v12 = a1[8];
  a1[7] = v11;
  a1[8] = v10;
  swift_retain(v10);
  swift_release(v12);
  return a1;
}

uint64_t *assignWithTake for QuestionnaireLikeButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  v5 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v5);
  v6 = a2[5];
  v7 = a1[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease(v7);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  v8 = a1[8];
  *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
  swift_release(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionnaireLikeButton(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnaireLikeButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionnaireLikeButton()
{
  return &type metadata for QuestionnaireLikeButton;
}

uint64_t sub_1001953A0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029D608, 1);
}

uint64_t sub_1001953B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  unint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v27 = a1;
  v2 = sub_100003DB8(&qword_100318730);
  v26 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100003DB8(&qword_100324B40);
  v6 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25, v7);
  v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = v1[2];
  v11 = *(_QWORD *)(v10 + 24);
  v28 = *(_QWORD *)(v10 + 16);
  v29 = v11;
  v12 = v1[5];
  v13 = v1[6];
  v14 = sub_10002B3F4();
  swift_bridgeObjectRetain(v11);
  swift_retain(v13);
  Button<>.init<A>(_:action:)(&v28, v12, v13, &type metadata for String, v14);
  v15 = *v1;
  if (*v1)
  {
    v16 = v1[3];
    v17 = v1[4];
    KeyPath = swift_getKeyPath(&unk_10025A798);
    v28 = KeyPath;
    LOBYTE(v29) = 0;
    v30 = v10;
    v31 = 0;
    v32 = 0xE000000000000000;
    v33 = v16;
    v34 = v17;
    v35 = 0;
    v36 = v15;
    v19 = sub_1000084FC(&qword_100318738, &qword_100318730, (uint64_t)&protocol conformance descriptor for Button<A>);
    v20 = sub_100198954();
    swift_retain(v10);
    swift_retain(v15);
    View.buttonStyle<A>(_:)(&v28, v2, &type metadata for QuestionnaireButtonStyle, v19, v20);
    sub_100040294(KeyPath, 0);
    swift_release(v15);
    swift_bridgeObjectRelease(0xE000000000000000);
    swift_release(v10);
    (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v2);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(v27, v9, v25);
  }
  else
  {
    v22 = v1[1];
    v23 = type metadata accessor for UIMetrics();
    v24 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    swift_retain(v10);
    result = EnvironmentObject.error()(0, v22, v23, v24);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001955F8@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t KeyPath;
  uint64_t v22;
  unint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  __int128 v40;

  v31 = a1;
  v2 = sub_100003DB8(&qword_100318730);
  v30 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_100003DB8(&qword_100324B40);
  v6 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29, v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *((_OWORD *)v1 + 1);
  v32 = *((_OWORD *)v1 + 1);
  v10 = v1[7];
  v11 = v1[8];
  v12 = *((_QWORD *)&v40 + 1);
  sub_100030F08((uint64_t)&v40);
  v13 = sub_10002B3F4();
  swift_retain(v11);
  Button<>.init<A>(_:action:)(&v32, v10, v11, &type metadata for String, v13);
  v14 = type metadata accessor for OptionPresentation();
  v15 = swift_allocObject(v14, 72, 7);
  *(_OWORD *)(v15 + 16) = v40;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = 0;
  v16 = swift_bridgeObjectRetain(v12);
  *(_QWORD *)(v15 + 64) = static Color.clear.getter(v16);
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 40) = 0;
  v17 = v1[5];
  v18 = *v1;
  if (*v1)
  {
    v19 = v1[4];
    v20 = *((_BYTE *)v1 + 48);
    KeyPath = swift_getKeyPath(&unk_10025A798);
    *(_QWORD *)&v32 = KeyPath;
    BYTE8(v32) = 0;
    v33 = v15;
    v34 = v19;
    v36 = 0;
    v37 = 0;
    v35 = v17;
    v38 = v20;
    v39 = v18;
    v22 = sub_1000084FC(&qword_100318738, &qword_100318730, (uint64_t)&protocol conformance descriptor for Button<A>);
    v23 = sub_100198954();
    swift_bridgeObjectRetain(v17);
    swift_retain(v18);
    View.buttonStyle<A>(_:)(&v32, v2, &type metadata for QuestionnaireButtonStyle, v22, v23);
    sub_100040294(KeyPath, 0);
    swift_release(v18);
    swift_bridgeObjectRelease(v17);
    swift_release(v15);
    (*(void (**)(char *, uint64_t))(v30 + 8))(v5, v2);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(v31, v9, v29);
  }
  else
  {
    v25 = v1[1];
    v26 = type metadata accessor for UIMetrics();
    v27 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    swift_bridgeObjectRetain(v17);
    result = EnvironmentObject.error()(0, v25, v26, v27);
    __break(1u);
  }
  return result;
}

uint64_t sub_10019587C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  id v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[3];
  uint64_t v67;
  uint64_t v68;

  v3 = v2;
  v63 = a2;
  v64 = a1;
  v61 = sub_100003DB8(&qword_100318808);
  __chkstk_darwin(v61, v4);
  v62 = (uint64_t)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v57, v6);
  v8 = (double *)((char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for OpacityTransition(0);
  v10 = *(_QWORD *)(v9 - 8);
  v12 = __chkstk_darwin(v9, v11);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v55 - v16;
  v56 = sub_100003DB8(&qword_100324B50);
  __chkstk_darwin(v56, v18);
  v20 = (char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100003DB8(&qword_100324B58);
  v22 = __chkstk_darwin(v60, v21);
  v59 = (uint64_t)&v55 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v24);
  v58 = (uint64_t)&v55 - v25;
  v26 = (_QWORD *)v2[8];
  v27 = v26[9];
  v28 = v26[10];
  sub_100007BBC(v26 + 6, v27);
  v29 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v28 + 24))(v66, v27, v28);
  v55 = static HorizontalAlignment.center.getter(v29);
  sub_100195CEC((uint64_t)v2, v64, &v65);
  v30 = v65;
  OpacityTransition.init()(v31);
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v14, v17, v9);
  v32 = sub_1000052EC(&qword_100318760, (uint64_t (*)(uint64_t))&type metadata accessor for OpacityTransition, (uint64_t)&protocol conformance descriptor for OpacityTransition);
  v33 = AnyTransition.init<A>(_:)(v14, v9, v32);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v17, v9);
  v34 = *v2;
  LOBYTE(v9) = *((_BYTE *)v3 + 8);
  sub_100040244(*v3, v9);
  LOBYTE(v3) = sub_100042548(v34, v9);
  sub_100040294(v34, v9);
  if ((v3 & 1) != 0)
  {
    v35 = v67;
    v36 = v68;
    sub_100007BBC(v66, v67);
    v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 192))(v35, v36);
  }
  else
  {
    v39 = objc_msgSend((id)objc_opt_self(UIColor), "systemGrayColor");
    v37 = Color.init(uiColor:)(v39);
  }
  v40 = v37;
  v41 = static Edge.Set.all.getter(v38);
  v42 = v67;
  v43 = v68;
  sub_100007BBC(v66, v67);
  v44 = (*(double (**)(uint64_t, uint64_t))(v43 + 176))(v42, v43);
  v45 = (char *)v8 + *(int *)(v57 + 20);
  v46 = enum case for RoundedCornerStyle.continuous(_:);
  v47 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 104))(v45, v46, v47);
  *v8 = v44;
  v8[1] = v44;
  v48 = v62;
  sub_10002C428((uint64_t)v8, v62);
  *(_WORD *)(v48 + *(int *)(v61 + 36)) = 256;
  sub_10000B234(v48, (uint64_t)&v20[*(int *)(v56 + 36)], &qword_100318808);
  *(_QWORD *)v20 = v55;
  *((_QWORD *)v20 + 1) = 0;
  v20[16] = 0;
  *((_QWORD *)v20 + 3) = v30;
  *((_QWORD *)v20 + 4) = v33;
  v20[40] = 0;
  *((_QWORD *)v20 + 6) = v40;
  v20[56] = v41;
  swift_retain(v30);
  swift_retain(v33);
  swift_retain(v40);
  sub_100007FF0(v48, &qword_100318808);
  sub_10002C46C((uint64_t)v8);
  swift_release(v40);
  swift_release(v33);
  v49 = swift_release(v30);
  if ((ButtonStyleConfiguration.isPressed.getter(v49) & 1) != 0)
    v50 = 0.8;
  else
    v50 = 1.0;
  v51 = v59;
  sub_10000B234((uint64_t)v20, v59, &qword_100324B50);
  *(double *)(v51 + *(int *)(v60 + 36)) = v50;
  sub_100007FF0((uint64_t)v20, &qword_100324B50);
  v52 = v51;
  v53 = v58;
  sub_10000B458(v52, v58, &qword_100324B58);
  sub_10000B458(v53, v63, &qword_100324B58);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v66);
}

uint64_t sub_100195CEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;

  v28 = a3;
  v5 = sub_100003DB8(&qword_100324B60);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_100324B68);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003DB8(&qword_100324B70);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003DB8(&qword_100324B78);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    sub_100195F48((uint64_t)&v27 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
    v22 = sub_10002B614(&qword_100324C20, &qword_100324B78, (void (*)(void))sub_1000C995C);
    v23 = v20;
    v24 = v17;
    goto LABEL_6;
  }
  v21 = *(_QWORD *)(a1 + 16);
  if (!*(_QWORD *)(v21 + 40) && !*(_QWORD *)(v21 + 56))
  {
    v26 = *(_QWORD *)(a1 + 32);
    if ((v26 & 0x2000000000000000) != 0)
    {
      if ((v26 & 0xF00000000000000) != 0)
        goto LABEL_9;
    }
    else if ((*(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFLL) != 0)
    {
LABEL_9:
      sub_100196D38((uint64_t)v8);
      v22 = sub_10002B614(&qword_100324B80, &qword_100324B60, (void (*)(void))sub_100198C2C);
      v23 = v8;
      v24 = v5;
      goto LABEL_6;
    }
    sub_1001967EC(a2, (uint64_t)v12);
    v22 = sub_10002B614(&qword_100324BA8, &qword_100324B68, (void (*)(void))sub_100198CB0);
    v23 = v12;
    v24 = v9;
    goto LABEL_6;
  }
  sub_100196494(a2, (uint64_t)v16);
  v22 = sub_100198EE0();
  v23 = v16;
  v24 = v13;
LABEL_6:
  result = AnyView.init<A>(_:)(v23, v24, v22);
  *v28 = result;
  return result;
}

uint64_t sub_100195F48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t KeyPath;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _OWORD *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD v66[3];
  uint64_t v67;
  uint64_t v68;
  _OWORD v69[7];

  v65 = a1;
  v63 = type metadata accessor for ControlSize(0);
  v62 = *(_QWORD *)(v63 - 8);
  __chkstk_darwin(v63, v2);
  v61 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for CircularProgressViewStyle(0);
  v58 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100316B28);
  v57 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_100003DB8(&qword_100316B30);
  v59 = *(_QWORD *)(v60 - 8);
  __chkstk_darwin(v60, v12);
  v14 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100003DB8(&qword_100316B38);
  __chkstk_darwin(v56, v15);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64 = sub_100003DB8(&qword_1003199A0);
  __chkstk_darwin(v64, v18);
  v20 = (char *)&v56 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *(_QWORD **)(v1 + 64);
  v22 = v21[9];
  v23 = v21[10];
  sub_100007BBC(v21 + 6, v22);
  v24 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v23 + 24))(v66, v22, v23);
  v25 = ProgressView<>.init<>()(v24);
  CircularProgressViewStyle.init()(v25);
  v26 = sub_1000084FC(&qword_100316C20, &qword_100316B28, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
  v27 = sub_1000052EC(&qword_100316C28, (uint64_t (*)(uint64_t))&type metadata accessor for CircularProgressViewStyle, (uint64_t)&protocol conformance descriptor for CircularProgressViewStyle);
  View.progressViewStyle<A>(_:)(v7, v8, v4, v26, v27);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v11, v8);
  v28 = v62;
  v29 = v61;
  v30 = v63;
  (*(void (**)(char *, _QWORD, uint64_t))(v62 + 104))(v61, enum case for ControlSize.regular(_:), v63);
  KeyPath = swift_getKeyPath(&unk_10025A828);
  v32 = (uint64_t *)&v17[*(int *)(v56 + 36)];
  v33 = sub_100003DB8(&qword_100316C38);
  (*(void (**)(char *, char *, uint64_t))(v28 + 16))((char *)v32 + *(int *)(v33 + 28), v29, v30);
  *v32 = KeyPath;
  v34 = v59;
  v35 = v60;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v17, v14, v60);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v30);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v35);
  v36 = v67;
  v37 = v68;
  sub_100007BBC(v66, v67);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 216))(v36, v37);
  v39 = swift_getKeyPath(&unk_10025A858);
  *(_QWORD *)&v69[0] = v38;
  v40 = swift_retain(v38);
  v41 = AnyShapeStyle.init<A>(_:)(v69, &type metadata for Color, &protocol witness table for Color, v40);
  sub_10000B234((uint64_t)v17, (uint64_t)v20, &qword_100316B38);
  swift_release(v38);
  v42 = (uint64_t *)&v20[*(int *)(v64 + 36)];
  *v42 = v39;
  v42[1] = v41;
  sub_100007FF0((uint64_t)v17, &qword_100316B38);
  v43 = v67;
  v44 = v68;
  sub_100007BBC(v66, v67);
  v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 184))(v43, v44);
  v47 = v46;
  v48 = static Alignment.center.getter(v45);
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v69, 0, 1, 0, 1, 0x7FF0000000000000, 0, v47, 0, 0, 1, 0, 1, v48, v49);
  v50 = v65;
  sub_10000B234((uint64_t)v20, v65, &qword_1003199A0);
  v51 = (_OWORD *)(v50 + *(int *)(sub_100003DB8(&qword_100324B78) + 36));
  v52 = v69[5];
  v51[4] = v69[4];
  v51[5] = v52;
  v51[6] = v69[6];
  v53 = v69[1];
  *v51 = v69[0];
  v51[1] = v53;
  v54 = v69[3];
  v51[2] = v69[2];
  v51[3] = v54;
  sub_100007FF0((uint64_t)v20, &qword_1003199A0);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v66);
}

uint64_t sub_100196494@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  uint64_t v50;
  uint64_t v51;
  _OWORD v52[7];

  v48 = a2;
  v4 = sub_100003DB8(&qword_100324C28);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100324C30);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_100324C18);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD **)(v2 + 64);
  v18 = v16[9];
  v17 = v16[10];
  sub_100007BBC(v16 + 6, v18);
  v19 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v17 + 24))(v49, v18, v17);
  *(_QWORD *)v15 = static HorizontalAlignment.leading.getter(v19);
  *((_QWORD *)v15 + 1) = 0;
  v15[16] = 0;
  v20 = sub_100003DB8(&qword_100324C38);
  v21 = (uint64_t)&v15[*(int *)(v20 + 44)];
  *(_QWORD *)v7 = static VerticalAlignment.center.getter(v20);
  *((_QWORD *)v7 + 1) = 0;
  v7[16] = 0;
  v22 = sub_100003DB8(&qword_100324C40);
  sub_100197EB0(v2, v49, a1, (uint64_t)&v7[*(int *)(v22 + 44)]);
  v23 = v50;
  v24 = v51;
  sub_100007BBC(v49, v50);
  v25 = (*(double (**)(uint64_t, uint64_t))(v24 + 224))(v23, v24);
  LOBYTE(v23) = static Edge.Set.all.getter(v25);
  v26 = EdgeInsets.init(_all:)(v25);
  v28 = v27;
  v30 = v29;
  v32 = v31;
  sub_10000B234((uint64_t)v7, (uint64_t)v11, &qword_100324C28);
  v33 = &v11[*(int *)(v8 + 36)];
  *v33 = v23;
  *((double *)v33 + 1) = v26;
  *((_QWORD *)v33 + 2) = v28;
  *((_QWORD *)v33 + 3) = v30;
  *((_QWORD *)v33 + 4) = v32;
  v33[40] = 0;
  sub_100007FF0((uint64_t)v7, &qword_100324C28);
  sub_10000B458((uint64_t)v11, v21, &qword_100324C30);
  v34 = v50;
  v35 = v51;
  sub_100007BBC(v49, v50);
  v36 = (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 184))(v34, v35);
  v38 = v37;
  v39 = static Alignment.center.getter(v36);
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v52, 0, 1, 0, 1, 0x7FF0000000000000, 0, v38, 0, 0, 1, 0, 1, v39, v40);
  v41 = v48;
  sub_10000B234((uint64_t)v15, v48, &qword_100324C18);
  v42 = (_OWORD *)(v41 + *(int *)(sub_100003DB8(&qword_100324B70) + 36));
  v43 = v52[5];
  v42[4] = v52[4];
  v42[5] = v43;
  v42[6] = v52[6];
  v44 = v52[1];
  *v42 = v52[0];
  v42[1] = v44;
  v45 = v52[3];
  v42[2] = v52[2];
  v42[3] = v45;
  sub_100007FF0((uint64_t)v15, &qword_100324C18);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v49);
}

uint64_t sub_1001967EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t KeyPath;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD *v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  _QWORD v64[2];
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD v71[3];
  uint64_t v72;
  uint64_t v73;
  _OWORD v74[7];

  v64[1] = a1;
  v70 = a2;
  v3 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v64[0] = sub_100003DB8(&qword_100324BF8);
  __chkstk_darwin(v64[0], v8);
  v10 = (char *)v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = sub_100003DB8(&qword_100324BE8);
  __chkstk_darwin(v65, v11);
  v13 = (char *)v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_100003DB8(&qword_100324BD8);
  __chkstk_darwin(v66, v14);
  v16 = (char *)v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100003DB8(&qword_100324BC8);
  __chkstk_darwin(v68, v17);
  v19 = (char *)v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100003DB8(&qword_100324BB8);
  __chkstk_darwin(v69, v20);
  v67 = (char *)v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = *(_QWORD **)(v2 + 64);
  v23 = v22[9];
  v24 = v22[10];
  sub_100007BBC(v22 + 6, v23);
  v25 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v24 + 24))(v71, v23, v24);
  ButtonStyleConfiguration.label.getter(v25);
  (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v10, v7, v3);
  v10[*(int *)(v64[0] + 36)] = 0;
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v26 = v72;
  v27 = v73;
  sub_100007BBC(v71, v72);
  v28 = (*(uint64_t (**)(uint64_t, uint64_t))(v27 + 216))(v26, v27);
  KeyPath = swift_getKeyPath(&unk_10025A888);
  sub_10000B234((uint64_t)v10, (uint64_t)v13, &qword_100324BF8);
  v30 = (uint64_t *)&v13[*(int *)(v65 + 36)];
  *v30 = KeyPath;
  v30[1] = v28;
  sub_100007FF0((uint64_t)v10, &qword_100324BF8);
  v31 = v72;
  v32 = v73;
  sub_100007BBC(v71, v72);
  v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 200))(v31, v32);
  v34 = swift_getKeyPath(&unk_10025A8B8);
  sub_10000B234((uint64_t)v13, (uint64_t)v16, &qword_100324BE8);
  v35 = (uint64_t *)&v16[*(int *)(v66 + 36)];
  *v35 = v34;
  v35[1] = v33;
  sub_100007FF0((uint64_t)v13, &qword_100324BE8);
  v36 = v72;
  v37 = v73;
  sub_100007BBC(v71, v72);
  v38 = (*(double (**)(uint64_t, uint64_t))(v37 + 224))(v36, v37);
  LOBYTE(v36) = static Edge.Set.all.getter(v38);
  v39 = EdgeInsets.init(_all:)(v38);
  v41 = v40;
  v43 = v42;
  v45 = v44;
  sub_10000B234((uint64_t)v16, (uint64_t)v19, &qword_100324BD8);
  v46 = &v19[*(int *)(v68 + 36)];
  *v46 = v36;
  *((double *)v46 + 1) = v39;
  *((_QWORD *)v46 + 2) = v41;
  *((_QWORD *)v46 + 3) = v43;
  *((_QWORD *)v46 + 4) = v45;
  v46[40] = 0;
  v47 = (uint64_t)v16;
  v48 = (uint64_t)v67;
  sub_100007FF0(v47, &qword_100324BD8);
  v49 = swift_getKeyPath(&unk_10025A8E8);
  sub_10000B234((uint64_t)v19, v48, &qword_100324BC8);
  v50 = v48 + *(int *)(v69 + 36);
  *(_QWORD *)v50 = v49;
  *(_BYTE *)(v50 + 8) = 1;
  sub_100007FF0((uint64_t)v19, &qword_100324BC8);
  v51 = v72;
  v52 = v73;
  sub_100007BBC(v71, v72);
  v53 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 184))(v51, v52);
  v55 = v54;
  v56 = static Alignment.center.getter(v53);
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v74, 0, 1, 0, 1, 0x7FF0000000000000, 0, v55, 0, 0, 1, 0, 1, v56, v57);
  v58 = v70;
  sub_10000B234(v48, v70, &qword_100324BB8);
  v59 = (_OWORD *)(v58 + *(int *)(sub_100003DB8(&qword_100324B68) + 36));
  v60 = v74[5];
  v59[4] = v74[4];
  v59[5] = v60;
  v59[6] = v74[6];
  v61 = v74[1];
  *v59 = v74[0];
  v59[1] = v61;
  v62 = v74[3];
  v59[2] = v74[2];
  v59[3] = v62;
  sub_100007FF0(v48, &qword_100324BB8);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v71);
}

uint64_t sub_100196D38@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  char v19;
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _QWORD v40[3];
  uint64_t v41;
  uint64_t v42;
  _OWORD v43[7];

  v3 = sub_100003DB8(&qword_100324BA0);
  __chkstk_darwin(v3, v4);
  v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_100324B90);
  __chkstk_darwin(v7, v8);
  v10 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD **)(v1 + 64);
  v12 = v11[9];
  v13 = v11[10];
  sub_100007BBC(v11 + 6, v12);
  v14 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v13 + 24))(v40, v12, v13);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v14);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v15 = sub_100003DB8(&qword_100324D00);
  sub_100197018(v40, v1, (uint64_t)&v6[*(int *)(v15 + 44)]);
  v16 = v41;
  v17 = v42;
  sub_100007BBC(v40, v41);
  v18 = (*(double (**)(uint64_t, uint64_t))(v17 + 224))(v16, v17);
  v19 = static Edge.Set.all.getter(v18);
  v20 = EdgeInsets.init(_all:)(v18);
  v22 = v21;
  v24 = v23;
  v26 = v25;
  sub_10000B234((uint64_t)v6, (uint64_t)v10, &qword_100324BA0);
  v27 = &v10[*(int *)(v7 + 36)];
  *v27 = v19;
  *((double *)v27 + 1) = v20;
  *((_QWORD *)v27 + 2) = v22;
  *((_QWORD *)v27 + 3) = v24;
  *((_QWORD *)v27 + 4) = v26;
  v27[40] = 0;
  sub_100007FF0((uint64_t)v6, &qword_100324BA0);
  v28 = v41;
  v29 = v42;
  sub_100007BBC(v40, v41);
  v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 184))(v28, v29);
  v32 = v31;
  v33 = static Alignment.center.getter(v30);
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v43, 0, 1, 0, 1, 0x7FF0000000000000, 0, v32, 0, 0, 1, 0, 1, v33, v34);
  sub_10000B234((uint64_t)v10, a1, &qword_100324B90);
  v35 = (_OWORD *)(a1 + *(int *)(sub_100003DB8(&qword_100324B60) + 36));
  v36 = v43[5];
  v35[4] = v43[4];
  v35[5] = v36;
  v35[6] = v43[6];
  v37 = v43[1];
  *v35 = v43[0];
  v35[1] = v37;
  v38 = v43[3];
  v35[2] = v43[2];
  v35[3] = v38;
  sub_100007FF0((uint64_t)v10, &qword_100324B90);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v40);
}

uint64_t sub_100197018@<X0>(_QWORD *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t KeyPath;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _OWORD *v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  _OWORD v131[10];
  uint64_t v132;
  double v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  uint64_t v145;
  char v146;
  uint64_t v147;
  uint64_t v148;
  char v149;

  v116 = a2;
  v118 = a3;
  v106 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v4 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106, v5);
  v7 = (char *)&v104 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100003DB8(&qword_100324C48);
  __chkstk_darwin(v104, v8);
  v10 = (char *)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_100003DB8(&qword_100324C50);
  __chkstk_darwin(v114, v11);
  v13 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_100003DB8(&qword_1003214E8);
  __chkstk_darwin(v115, v14);
  v105 = (uint64_t)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003DB8(&qword_1003214F0);
  __chkstk_darwin(v16, v17);
  v107 = (uint64_t)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100003DB8(&qword_100324C58);
  v20 = __chkstk_darwin(v109, v19);
  v117 = (uint64_t)&v104 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20, v22);
  v108 = (uint64_t)&v104 - v24;
  v26 = __chkstk_darwin(v23, v25);
  v119 = (uint64_t)&v104 - v27;
  ButtonStyleConfiguration.label.getter(v26);
  v29 = a1[3];
  v28 = a1[4];
  v112 = v29;
  v110 = sub_100007BBC(a1, v29);
  v111 = v28;
  v30 = *(uint64_t (**)(uint64_t, uint64_t))(v28 + 216);
  v31 = v30(v29, v28);
  KeyPath = swift_getKeyPath(&unk_10025A888);
  v33 = v4;
  v34 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v35 = v106;
  v34(v10, v7, v106);
  v36 = (uint64_t *)&v10[*(int *)(v104 + 36)];
  *v36 = KeyPath;
  v36[1] = v31;
  (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v35);
  v113 = a1;
  v37 = a1[3];
  v38 = a1[4];
  sub_100007BBC(a1, v37);
  v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 200))(v37, v38);
  v40 = swift_getKeyPath(&unk_10025A8B8);
  sub_10000B234((uint64_t)v10, (uint64_t)v13, &qword_100324C48);
  v41 = (uint64_t *)&v13[*(int *)(v114 + 36)];
  *v41 = v40;
  v41[1] = v39;
  sub_100007FF0((uint64_t)v10, &qword_100324C48);
  v42 = swift_getKeyPath(&unk_10025A8E8);
  v43 = v105;
  sub_10000B234((uint64_t)v13, v105, &qword_100324C50);
  v44 = v43 + *(int *)(v115 + 36);
  *(_QWORD *)v44 = v42;
  *(_BYTE *)(v44 + 8) = 1;
  v45 = sub_100007FF0((uint64_t)v13, &qword_100324C50);
  v46 = static Alignment.center.getter(v45);
  v47 = v107;
  sub_100133658(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v107, 0.0, 1, 0.0, 1, v46, v48);
  sub_100007FF0(v43, &qword_1003214E8);
  v49 = v116;
  v115 = *(_QWORD *)(v116 + 64);
  v50 = *(void **)(v115 + 112);
  v114 = (uint64_t)UIContentSizeCategoryAccessibilityExtraLarge;
  v51 = v50;
  LOBYTE(v40) = static UIContentSizeCategory.>= infix(_:_:)(v51, UIContentSizeCategoryAccessibilityExtraLarge);

  v52 = 0.5;
  if ((v40 & 1) != 0)
    v53 = 1.0;
  else
    v53 = 0.5;
  v54 = swift_getKeyPath(&unk_10025A918);
  v55 = v108;
  sub_10000B234(v47, v108, &qword_1003214F0);
  v56 = v55 + *(int *)(v109 + 36);
  *(_QWORD *)v56 = v54;
  *(double *)(v56 + 8) = v53;
  sub_100007FF0(v47, &qword_1003214F0);
  sub_10000B458(v55, v119, &qword_100324C58);
  v57 = *(_QWORD *)(v49 + 32);
  *(_QWORD *)&v131[0] = *(_QWORD *)(v49 + 24);
  *((_QWORD *)&v131[0] + 1) = v57;
  v58 = sub_10002B3F4();
  v59 = swift_bridgeObjectRetain(v57);
  v60 = Text.init<A>(_:)(v131, &type metadata for String, v58, v59);
  v62 = v61;
  v64 = v63;
  v66 = v65 & 1;
  v67 = v30(v112, v111);
  v68 = Text.foregroundColor(_:)(v67, v60, v62, v66, v64);
  v70 = v69;
  v72 = v71;
  v74 = v73;
  swift_release(v67);
  v75 = v72 & 1;
  sub_10002B438(v60, v62, v66);
  swift_bridgeObjectRelease(v64);
  v76 = v113[3];
  v77 = v113[4];
  sub_100007BBC(v113, v76);
  v78 = (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 208))(v76, v77);
  v79 = Text.font(_:)(v78, v68, v70, v75, v74);
  v81 = v80;
  LOBYTE(v66) = v82;
  v84 = v83;
  swift_release(v78);
  LOBYTE(v66) = v66 & 1;
  sub_10002B438(v68, v70, v75);
  swift_bridgeObjectRelease(v74);
  v85 = swift_getKeyPath(&unk_10025A8E8);
  v144 = v79;
  v145 = v81;
  v146 = v66;
  v147 = v84;
  v148 = v85;
  v149 = 1;
  v86 = static Alignment.center.getter(v85);
  sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v134, 0.0, 1, 0.0, 1, v86, v87);
  sub_10002B438(v79, v81, v66);
  swift_release(v85);
  swift_bridgeObjectRelease(v84);
  v88 = *(id *)(v115 + 112);
  LOBYTE(v85) = static UIContentSizeCategory.>= infix(_:_:)(v88, v114);

  if ((v85 & 1) != 0)
    v52 = 1.0;
  v89 = swift_getKeyPath(&unk_10025A918);
  v90 = v119;
  v91 = v117;
  sub_10000B234(v119, v117, &qword_100324C58);
  v92 = v118;
  sub_10000B234(v91, v118, &qword_100324C58);
  v93 = (_OWORD *)(v92 + *(int *)(sub_100003DB8(&qword_100324D08) + 48));
  v126 = v140;
  v127 = v141;
  v128 = v142;
  v129 = v143;
  v124 = v138;
  v125 = v139;
  v94 = v136;
  v122 = v136;
  v123 = v137;
  v120 = v134;
  v121 = v135;
  *(_QWORD *)&v130 = v89;
  *((double *)&v130 + 1) = v52;
  v95 = v141;
  v96 = v143;
  v97 = v130;
  v93[8] = v142;
  v93[9] = v96;
  v98 = v123;
  v99 = v124;
  v93[2] = v94;
  v93[3] = v98;
  v100 = v125;
  v101 = v126;
  v93[4] = v99;
  v93[5] = v100;
  v93[6] = v101;
  v93[7] = v95;
  v102 = v121;
  *v93 = v120;
  v93[1] = v102;
  v93[10] = v97;
  sub_10003893C((uint64_t)&v120);
  sub_100007FF0(v90, &qword_100324C58);
  v131[6] = v140;
  v131[7] = v141;
  v131[8] = v142;
  v131[9] = v143;
  v131[2] = v136;
  v131[3] = v137;
  v131[4] = v138;
  v131[5] = v139;
  v131[0] = v134;
  v131[1] = v135;
  v132 = v89;
  v133 = v52;
  sub_100038994((uint64_t)v131);
  return sub_100007FF0(v91, &qword_100324C58);
}

uint64_t sub_1001977C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t KeyPath;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  void (*v73)(char *, uint64_t, __n128);
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD v103[3];
  uint64_t v104;
  uint64_t v105;

  v96 = a2;
  v87 = sub_100003DB8(&qword_100316A20);
  __chkstk_darwin(v87, v3);
  v93 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003DB8(&qword_100324CC0);
  v89 = *(_QWORD *)(v5 - 8);
  v90 = v5;
  __chkstk_darwin(v5, v6);
  v92 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100003DB8(&qword_100324CC8);
  v9 = __chkstk_darwin(v98, v8);
  v88 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  v91 = (uint64_t)&v83 - v12;
  v95 = sub_100003DB8(&qword_100324CD0);
  __chkstk_darwin(v95, v13);
  v97 = (uint64_t)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = sub_100003DB8(&qword_100324CD8);
  __chkstk_darwin(v94, v15);
  v17 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100003DB8(&qword_100324CE0);
  __chkstk_darwin(v99, v18);
  v20 = (char *)&v83 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Image.ResizingMode(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  v25 = (char *)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100003DB8(&qword_100324CE8);
  __chkstk_darwin(v26, v27);
  v29 = (char *)&v83 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = *(_QWORD **)(a1 + 64);
  v32 = v30[9];
  v31 = v30[10];
  sub_100007BBC(v30 + 6, v32);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v31 + 24))(v103, v32, v31);
  v33 = *(_QWORD **)(a1 + 16);
  v34 = v33[5];
  if (v34)
  {
    v35 = v33[4];
    swift_bridgeObjectRetain(v33[5]);
    v36 = Image.init(_:bundle:)(v35, v34, 0);
    (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v25, enum case for Image.ResizingMode.stretch(_:), v21);
    v37 = Image.resizable(capInsets:resizingMode:)(v25, v36, 0.0, 0.0, 0.0, 0.0);
    swift_release(v36);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v25, v21);
    *(_QWORD *)v17 = v37;
    *((_QWORD *)v17 + 1) = 0;
    *((_WORD *)v17 + 8) = 1;
    swift_storeEnumTagMultiPayload(v17, v94, 0);
    swift_retain(v37);
    v38 = sub_100003DB8(&qword_100318840);
    v39 = sub_100034DFC();
    v40 = sub_1001990C0();
    _ConditionalContent<>.init(storage:)(v17, v38, v98, v39, v40);
    v41 = v97;
    sub_10000B234((uint64_t)v20, v97, &qword_100324CE0);
    swift_storeEnumTagMultiPayload(v41, v95, 0);
    v42 = sub_100199054();
    _ConditionalContent<>.init(storage:)(v41, v99, &type metadata for EmptyView, v42, &protocol witness table for EmptyView);
    sub_100007FF0((uint64_t)v20, &qword_100324CE0);
    swift_release(v37);
    v43 = (uint64_t)v29;
LABEL_7:
    sub_10000B458(v43, v96, &qword_100324CE8);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v103);
  }
  v45 = v92;
  v44 = v93;
  v85 = v17;
  v84 = v20;
  v46 = v98;
  v86 = v29;
  v47 = v99;
  v48 = v97;
  v49 = v33[7];
  if (!v49)
  {
    swift_storeEnumTagMultiPayload(v97, v95, 1);
    v82 = sub_100199054();
    v43 = (uint64_t)v86;
    _ConditionalContent<>.init(storage:)(v48, v47, &type metadata for EmptyView, v82, &protocol witness table for EmptyView);
    goto LABEL_7;
  }
  v50 = v33[6];
  v51 = swift_bridgeObjectRetain(v33[7]);
  v52 = Image.init(systemName:)(v50, v49, v51);
  v53 = v104;
  v54 = v105;
  sub_100007BBC(v103, v104);
  v55 = (*(uint64_t (**)(uint64_t, uint64_t))(v54 + 200))(v53, v54);
  KeyPath = swift_getKeyPath(&unk_10025A8B8);
  v100 = v52;
  v101 = KeyPath;
  v102 = v55;
  v57 = enum case for DynamicTypeSize.accessibility2(_:);
  v58 = type metadata accessor for DynamicTypeSize(0);
  v59 = (uint64_t)v44;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 104))(v44, v57, v58);
  v60 = sub_1000052EC(&qword_100316A30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v44, v44, v58, v60);
  if ((result & 1) != 0)
  {
    v62 = v48;
    v63 = sub_100003DB8(&qword_100316BE8);
    v64 = sub_10000AAB8();
    v65 = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v66 = v45;
    View.dynamicTypeSize<A>(_:)(v59, v63, v87, v64, v65);
    sub_100007FF0(v59, &qword_100316A20);
    swift_release(v100);
    swift_release(v101);
    swift_release(v102);
    v67 = v33[8];
    v68 = swift_getKeyPath(&unk_10025A888);
    v69 = (uint64_t)v88;
    v70 = v89;
    v71 = v90;
    (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v88, v66, v90);
    v72 = (uint64_t *)(v69 + *(int *)(v46 + 36));
    *v72 = v68;
    v72[1] = v67;
    v73 = *(void (**)(char *, uint64_t, __n128))(v70 + 8);
    v74 = swift_retain(v67);
    v73(v66, v71, v74);
    v75 = v91;
    sub_10000B458(v69, v91, &qword_100324CC8);
    v76 = (uint64_t)v85;
    sub_10000B234(v75, (uint64_t)v85, &qword_100324CC8);
    swift_storeEnumTagMultiPayload(v76, v94, 1);
    v77 = sub_100003DB8(&qword_100318840);
    v78 = sub_100034DFC();
    v79 = sub_1001990C0();
    v80 = (uint64_t)v84;
    _ConditionalContent<>.init(storage:)(v76, v77, v46, v78, v79);
    sub_10000B234(v80, v62, &qword_100324CE0);
    swift_storeEnumTagMultiPayload(v62, v95, 0);
    v81 = sub_100199054();
    v43 = (uint64_t)v86;
    _ConditionalContent<>.init(storage:)(v62, v99, &type metadata for EmptyView, v81, &protocol witness table for EmptyView);
    sub_100007FF0(v80, &qword_100324CE0);
    sub_100007FF0(v75, &qword_100324CC8);
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t sub_100197EB0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  id v50;
  char v51;
  uint64_t v52;
  double v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  double (*v57)(uint64_t, uint64_t);
  double v58;
  uint64_t v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  double (*v73)(uint64_t, uint64_t);
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t KeyPath;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  id v103;
  UIContentSizeCategory v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  id v114;
  char v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  UIContentSizeCategory v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;

  v137 = a3;
  v7 = type metadata accessor for ButtonStyleConfiguration.Label(0);
  v141 = *(_QWORD *)(v7 - 8);
  v142 = v7;
  __chkstk_darwin(v7, v8);
  v139 = (char *)&v127 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_100003DB8(&qword_100324C48);
  __chkstk_darwin(v138, v10);
  v143 = (char *)&v127 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v140 = sub_100003DB8(&qword_100324C50);
  __chkstk_darwin(v140, v12);
  v145 = (uint64_t)&v127 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100003DB8(&qword_1003214E8);
  __chkstk_darwin(v144, v14);
  v147 = (uint64_t)&v127 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003DB8(&qword_1003214F0);
  __chkstk_darwin(v16, v17);
  v150 = (uint64_t)&v127 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = sub_100003DB8(&qword_100324C58);
  v20 = __chkstk_darwin(v149, v19);
  v152 = (uint64_t)&v127 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __chkstk_darwin(v20, v22);
  v148 = (uint64_t)&v127 - v24;
  __chkstk_darwin(v23, v25);
  v151 = (uint64_t)&v127 - v26;
  v27 = sub_100003DB8(&qword_100324C60);
  __chkstk_darwin(v27, v28);
  v30 = (char *)&v127 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100003DB8(&qword_1003214F8);
  __chkstk_darwin(v129, v31);
  v33 = (char *)&v127 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100003DB8(&qword_100321500);
  __chkstk_darwin(v34, v35);
  v131 = (uint64_t)&v127 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100003DB8(&qword_100324C68);
  __chkstk_darwin(v132, v37);
  v39 = (char *)&v127 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v134 = sub_100003DB8(&qword_100324C70);
  v133 = *(_QWORD *)(v134 - 8);
  __chkstk_darwin(v134, v40);
  v130 = (char *)&v127 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100003DB8(&qword_100324C78);
  v44 = __chkstk_darwin(v42, v43);
  v146 = (uint64_t)&v127 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44, v46);
  v48 = (char *)&v127 - v47;
  v49 = a1;
  v135 = *(_QWORD *)(a1 + 64);
  v50 = *(id *)(v135 + 112);
  v136 = UIContentSizeCategoryAccessibilityExtraLarge;
  v51 = static UIContentSizeCategory.>= infix(_:_:)(v50, UIContentSizeCategoryAccessibilityExtraLarge);

  v52 = 1;
  v153 = v48;
  if ((v51 & 1) == 0)
  {
    v53 = *(double *)(v49 + 40);
    v54 = *(double *)(v49 + 48);
    v128 = a4;
    v55 = a2[3];
    v56 = a2[4];
    sub_100007BBC(a2, v55);
    v57 = *(double (**)(uint64_t, uint64_t))(v56 + 240);
    v58 = v57(v55, v56);
    if (v53 <= v58)
      v53 = v58;
    v59 = ((uint64_t (*)(uint64_t, uint64_t))v57)(v55, v56);
    if (v54 <= v60)
      v54 = v60;
    *(_QWORD *)v30 = static HorizontalAlignment.center.getter(v59);
    *((_QWORD *)v30 + 1) = 0;
    v30[16] = 1;
    v61 = sub_100003DB8(&qword_100324C80);
    v62 = sub_1001977C0(v49, (uint64_t)&v30[*(int *)(v61 + 44)]);
    v63 = static Alignment.center.getter(v62);
    v65 = v64;
    sub_10000B234((uint64_t)v30, (uint64_t)v33, &qword_100324C60);
    v66 = (uint64_t *)&v33[*(int *)(v129 + 36)];
    *v66 = v63;
    v66[1] = v65;
    a4 = v128;
    v67 = sub_100007FF0((uint64_t)v30, &qword_100324C60);
    v68 = static Alignment.center.getter(v67);
    v69 = v131;
    sub_1001336B0(v53, 0, 0.0, 1, v53, 0, v54, 0, v131, 0.0, 1, v54, 0, v68, v70);
    sub_100007FF0((uint64_t)v33, &qword_1003214F8);
    v71 = a2[3];
    v72 = a2[4];
    sub_100007BBC(a2, v71);
    v73 = *(double (**)(uint64_t, uint64_t))(v72 + 264);
    v74 = v72;
    v48 = v153;
    v75 = v73(v71, v74);
    v77 = v76;
    v79 = v78;
    v81 = v80;
    LOBYTE(v63) = static Edge.Set.all.getter(v75);
    sub_10000B234(v69, (uint64_t)v39, &qword_100321500);
    v82 = v132;
    v83 = &v39[*(int *)(v132 + 36)];
    *v83 = v63;
    *((double *)v83 + 1) = v75;
    *((_QWORD *)v83 + 2) = v77;
    *((_QWORD *)v83 + 3) = v79;
    *((_QWORD *)v83 + 4) = v81;
    v83[40] = 0;
    sub_100007FF0(v69, &qword_100321500);
    v84 = sub_10002B614(&qword_100324C88, &qword_100324C68, (void (*)(void))sub_100198F74);
    v85 = (uint64_t)v130;
    View.accessibilityHidden(_:)(1, v82, v84);
    sub_100007FF0((uint64_t)v39, &qword_100324C68);
    sub_10000B458(v85, (uint64_t)v48, &qword_100324C70);
    v52 = 0;
  }
  v86 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v133 + 56))(v48, v52, 1, v134);
  v87 = v139;
  ButtonStyleConfiguration.label.getter(v86);
  v88 = a2[3];
  v89 = a2[4];
  sub_100007BBC(a2, v88);
  v90 = (*(uint64_t (**)(uint64_t, uint64_t))(v89 + 216))(v88, v89);
  KeyPath = swift_getKeyPath(&unk_10025A888);
  v93 = v141;
  v92 = v142;
  v94 = (uint64_t)v143;
  (*(void (**)(char *, char *, uint64_t))(v141 + 16))(v143, v87, v142);
  v95 = (uint64_t *)(v94 + *(int *)(v138 + 36));
  *v95 = KeyPath;
  v95[1] = v90;
  (*(void (**)(char *, uint64_t))(v93 + 8))(v87, v92);
  v96 = a2[3];
  v97 = a2[4];
  sub_100007BBC(a2, v96);
  v98 = (*(uint64_t (**)(uint64_t, uint64_t))(v97 + 200))(v96, v97);
  v99 = swift_getKeyPath(&unk_10025A8B8);
  v100 = v145;
  sub_10000B234(v94, v145, &qword_100324C48);
  v101 = (uint64_t *)(v100 + *(int *)(v140 + 36));
  *v101 = v99;
  v101[1] = v98;
  sub_100007FF0(v94, &qword_100324C48);
  v102 = v135;
  v103 = *(id *)(v135 + 112);
  v104 = v136;
  LOBYTE(v99) = static UIContentSizeCategory.>= infix(_:_:)(v103, v136);

  v105 = swift_getKeyPath(&unk_10025A8E8);
  v106 = v147;
  sub_10000B234(v100, v147, &qword_100324C50);
  v107 = v106 + *(int *)(v144 + 36);
  *(_QWORD *)v107 = v105;
  *(_BYTE *)(v107 + 8) = v99 & 1;
  sub_100007FF0(v100, &qword_100324C50);
  v108 = *(id *)(v102 + 112);
  LOBYTE(v99) = static UIContentSizeCategory.>= infix(_:_:)(v108, v104);

  if ((v99 & 1) != 0)
    v111 = static Alignment.center.getter(v109);
  else
    v111 = static Alignment.leading.getter(v109, v110);
  v113 = v150;
  sub_100133658(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v150, 0.0, 1, 0.0, 1, v111, v112);
  sub_100007FF0(v106, &qword_1003214E8);
  v114 = *(id *)(v102 + 112);
  v115 = static UIContentSizeCategory.>= infix(_:_:)(v114, v104);

  if ((v115 & 1) != 0)
    v116 = 1.0;
  else
    v116 = 0.5;
  v117 = swift_getKeyPath(&unk_10025A918);
  v118 = v148;
  sub_10000B234(v113, v148, &qword_1003214F0);
  v119 = v118 + *(int *)(v149 + 36);
  *(_QWORD *)v119 = v117;
  *(double *)(v119 + 8) = v116;
  sub_100007FF0(v113, &qword_1003214F0);
  v120 = v118;
  v121 = v151;
  sub_10000B458(v120, v151, &qword_100324C58);
  v122 = (uint64_t)v153;
  v123 = v146;
  sub_10000B234((uint64_t)v153, v146, &qword_100324C78);
  v124 = v152;
  sub_10000B234(v121, v152, &qword_100324C58);
  sub_10000B234(v123, a4, &qword_100324C78);
  v125 = sub_100003DB8(&qword_100324CB8);
  sub_10000B234(v124, a4 + *(int *)(v125 + 48), &qword_100324C58);
  sub_100007FF0(v121, &qword_100324C58);
  sub_100007FF0(v122, &qword_100324C78);
  sub_100007FF0(v124, &qword_100324C58);
  return sub_100007FF0(v123, &qword_100324C78);
}

uint64_t sub_100198818@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10019587C(a1, a2);
}

void sub_100198858()
{
  xmmword_10033FFF0 = 0uLL;
}

double sub_100198868@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (qword_100315948 != -1)
    swift_once(&qword_100315948, sub_100198858);
  result = *(double *)&xmmword_10033FFF0;
  *a1 = xmmword_10033FFF0;
  return result;
}

float64x2_t sub_1001988B8(float64x2_t *a1, void (*a2)(float64x2_t *__return_ptr))
{
  float64x2_t result;
  float64x2_t v4;

  a2(&v4);
  result = (float64x2_t)vbslq_s8((int8x16_t)vcgeq_f64(v4, *a1), (int8x16_t)v4, *(int8x16_t *)a1);
  *a1 = result;
  return result;
}

uint64_t sub_100198904@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_100198930(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

unint64_t sub_100198954()
{
  unint64_t result;

  result = qword_100324B48;
  if (!qword_100324B48)
  {
    result = swift_getWitnessTable(&unk_10025A7EC, &type metadata for QuestionnaireButtonStyle);
    atomic_store(result, (unint64_t *)&qword_100324B48);
  }
  return result;
}

uint64_t destroy for QuestionnaireButtonStyle(uint64_t a1)
{
  sub_100040294(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  swift_release(*(_QWORD *)(a1 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
  return swift_release(*(_QWORD *)(a1 + 64));
}

uint64_t initializeWithCopy for QuestionnaireButtonStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_100040244(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 64) = v9;
  swift_retain(v6);
  swift_bridgeObjectRetain(v8);
  swift_retain(v9);
  return a1;
}

uint64_t assignWithCopy for QuestionnaireButtonStyle(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_100040244(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_100040294(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v8;
  swift_retain(v8);
  swift_release(v9);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  v12 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v12;
  swift_retain(v12);
  swift_release(v13);
  return a1;
}

uint64_t assignWithTake for QuestionnaireButtonStyle(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_100040294(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = a2[2];
  swift_release(v8);
  v9 = a2[4];
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = a2[3];
  *(_QWORD *)(a1 + 32) = v9;
  swift_bridgeObjectRelease(v10);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = a2[8];
  swift_release(v11);
  return a1;
}

ValueMetadata *type metadata accessor for QuestionnaireButtonStyle()
{
  return &type metadata for QuestionnaireButtonStyle;
}

uint64_t sub_100198BA4()
{
  _QWORD v1[4];

  v1[0] = sub_100007FAC(&qword_100318730);
  v1[1] = &type metadata for QuestionnaireButtonStyle;
  v1[2] = sub_1000084FC(&qword_100318738, &qword_100318730, (uint64_t)&protocol conformance descriptor for Button<A>);
  v1[3] = sub_100198954();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
}

uint64_t sub_100198C1C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029D64C, 1);
}

unint64_t sub_100198C2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100324B88;
  if (!qword_100324B88)
  {
    v1 = sub_100007FAC(&qword_100324B90);
    sub_1000084FC(&qword_100324B98, &qword_100324BA0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100324B88);
  }
  return result;
}

unint64_t sub_100198CB0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100324BB0;
  if (!qword_100324BB0)
  {
    v1 = sub_100007FAC(&qword_100324BB8);
    sub_10002B614(&qword_100324BC0, &qword_100324BC8, (void (*)(void))sub_100198D54);
    sub_1000084FC(&qword_100318300, &qword_100318308, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100324BB0);
  }
  return result;
}

unint64_t sub_100198D54()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100324BD0;
  if (!qword_100324BD0)
  {
    v1 = sub_100007FAC(&qword_100324BD8);
    sub_100198DD8();
    sub_1000084FC(&qword_100316BF0, &qword_100316BF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100324BD0);
  }
  return result;
}

unint64_t sub_100198DD8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100324BE0;
  if (!qword_100324BE0)
  {
    v1 = sub_100007FAC(&qword_100324BE8);
    sub_100198E5C();
    sub_1000084FC(&qword_100316C00, &qword_100316C08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100324BE0);
  }
  return result;
}

unint64_t sub_100198E5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100324BF0;
  if (!qword_100324BF0)
  {
    v1 = sub_100007FAC(&qword_100324BF8);
    sub_1000052EC(&qword_100324C00, (uint64_t (*)(uint64_t))&type metadata accessor for ButtonStyleConfiguration.Label, (uint64_t)&protocol conformance descriptor for ButtonStyleConfiguration.Label);
    sub_10004E0D4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100324BF0);
  }
  return result;
}

unint64_t sub_100198EE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100324C08;
  if (!qword_100324C08)
  {
    v1 = sub_100007FAC(&qword_100324B70);
    sub_1000084FC(&qword_100324C10, &qword_100324C18, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100324C08);
  }
  return result;
}

uint64_t sub_100198F74()
{
  return sub_10002B614(&qword_100324C90, &qword_100321500, (void (*)(void))sub_100198F98);
}

unint64_t sub_100198F98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100324C98;
  if (!qword_100324C98)
  {
    v1 = sub_100007FAC(&qword_1003214F8);
    sub_1000084FC(&qword_100324CA0, &qword_100324C60, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_1000084FC(&qword_100324CA8, &qword_100324CB0, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100324C98);
  }
  return result;
}

unint64_t sub_100199054()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100324CF0;
  if (!qword_100324CF0)
  {
    v1 = sub_100007FAC(&qword_100324CE0);
    sub_100034DFC();
    sub_1001990C0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100324CF0);
  }
  return result;
}

unint64_t sub_1001990C0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100324CF8;
  if (!qword_100324CF8)
  {
    v1 = sub_100007FAC(&qword_100324CC8);
    v2[0] = sub_100007FAC(&qword_100316BE8);
    v2[1] = sub_100007FAC(&qword_100316A20);
    v2[2] = sub_10000AAB8();
    v2[3] = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    sub_1000084FC(&qword_100316C00, &qword_100316C08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100324CF8);
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionnaireButtonIconSizeKey()
{
  return &type metadata for QuestionnaireButtonIconSizeKey;
}

uint64_t sub_1001991C0()
{
  return sub_10002B614(&qword_100324D10, &qword_100324B58, (void (*)(void))sub_1001991F4);
}

unint64_t sub_1001991F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100324D18;
  if (!qword_100324D18)
  {
    v1 = sub_100007FAC(&qword_100324B50);
    sub_100199278();
    sub_1000084FC(&qword_100318850, &qword_100318808, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100324D18);
  }
  return result;
}

unint64_t sub_100199278()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100324D20;
  if (!qword_100324D20)
  {
    v1 = sub_100007FAC(&qword_100324D28);
    sub_1001992FC();
    sub_1000084FC(&qword_10031F3D0, &qword_10031F3D8, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100324D20);
  }
  return result;
}

unint64_t sub_1001992FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100324D30;
  if (!qword_100324D30)
  {
    v1 = sub_100007FAC(&qword_100324D38);
    sub_100199368();
    sub_10004E0D4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100324D30);
  }
  return result;
}

unint64_t sub_100199368()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100324D40;
  if (!qword_100324D40)
  {
    v1 = sub_100007FAC(&qword_100324D48);
    sub_1000084FC(&qword_100324D50, &qword_100324D58, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_1000084FC(&qword_1003187A0, &qword_1003187A8, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100324D40);
  }
  return result;
}

uint64_t destroy for QuestionnaireButton(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  return swift_release(a1[6]);
}

uint64_t initializeWithCopy for QuestionnaireButton(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  v6 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v6;
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t *assignWithCopy for QuestionnaireButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[3] = a2[3];
  a1[4] = a2[4];
  v9 = a2[5];
  v8 = a2[6];
  v10 = a1[6];
  a1[5] = v9;
  a1[6] = v8;
  swift_retain(v8);
  swift_release(v10);
  return a1;
}

uint64_t *assignWithTake for QuestionnaireButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_release(v6);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  v7 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
  swift_release(v7);
  return a1;
}

ValueMetadata *type metadata accessor for QuestionnaireButton()
{
  return &type metadata for QuestionnaireButton;
}

uint64_t sub_100199588(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029D690, 1);
}

uint64_t initializeBufferWithCopyOfBuffer for ExplorerSuggestion(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for ExplorerSuggestion(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for ExplorerSuggestion(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for ExplorerSuggestion()
{
  return &type metadata for ExplorerSuggestion;
}

uint64_t getEnumTagSinglePayload for GuidanceMessagesModel.StatesForStats(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ExplorerSuggestion.Action(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_100199730 + 4 * byte_10025AA35[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_100199764 + 4 * byte_10025AA30[v4]))();
}

uint64_t sub_100199764(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019976C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100199774);
  return result;
}

uint64_t sub_100199780(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100199788);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10019978C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100199794(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExplorerSuggestion.Action()
{
  return &type metadata for ExplorerSuggestion.Action;
}

unint64_t sub_1001997B4()
{
  unint64_t result;

  result = qword_100324D60;
  if (!qword_100324D60)
  {
    result = swift_getWitnessTable(&unk_10025AAAC, &type metadata for ExplorerSuggestion.Action);
    atomic_store(result, (unint64_t *)&qword_100324D60);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectivityModel.ConnectivityStatus(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ExplorerSuggestion.Content(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1001998D4 + 4 * byte_10025AA3F[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_100199908 + 4 * byte_10025AA3A[v4]))();
}

uint64_t sub_100199908(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100199910(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100199918);
  return result;
}

uint64_t sub_100199924(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10019992CLL);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_100199930(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100199938(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExplorerSuggestion.Content()
{
  return &type metadata for ExplorerSuggestion.Content;
}

unint64_t sub_100199958()
{
  unint64_t result;

  result = qword_100324D68;
  if (!qword_100324D68)
  {
    result = swift_getWitnessTable(&unk_10025AB1C, &type metadata for ExplorerSuggestion.Content);
    atomic_store(result, (unint64_t *)&qword_100324D68);
  }
  return result;
}

uint64_t type metadata accessor for HapticFeedbackFactory()
{
  return objc_opt_self(_TtC8SOSBuddy21HapticFeedbackFactory);
}

uint64_t sub_1001999C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  int *v6;
  _BYTE *v7;
  uint64_t v8;
  void (*v9)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = type metadata accessor for HapticAgent();
  swift_allocObject(v2, 24, 7);
  *(_QWORD *)(v0 + 16) = sub_10009B948();
  v3 = type metadata accessor for ToneLibraryAgent();
  swift_allocObject(v3, 40, 7);
  *(_QWORD *)(v0 + 24) = sub_100159278();
  v4 = type metadata accessor for TorchAgent();
  swift_allocObject(v4, 56, 7);
  *(_QWORD *)(v0 + 32) = sub_100153A28();
  *(_OWORD *)(v0 + 40) = xmmword_10025AB50;
  *(_QWORD *)(v0 + 64) = 0;
  swift_unknownObjectWeakInit(v0 + 56, 0);
  *(_QWORD *)(v0 + 72) = 0;
  v5 = (_BYTE *)(v0 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached);
  *v5 = 4;
  v6 = (int *)type metadata accessor for _HapticFeedback.Cached(0);
  v7 = &v5[v6[5]];
  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v9(v7, 1, 1, v8);
  v9(&v5[v6[6]], 1, 1, v8);
  v5[v6[7]] = 9;
  *(_QWORD *)&v5[v6[8]] = &_swiftEmptySetSingleton;
  v5[v6[9]] = 0;
  v10 = &v5[v6[10]];
  *(_QWORD *)v10 = 0;
  v10[8] = 1;
  if (qword_100315870 != -1)
    swift_once(&qword_100315870, sub_1000D975C);
  v11 = type metadata accessor for Logger(0);
  sub_10000D744(v11, (uint64_t)qword_10033FE08);
  v13 = swift_retain_n(v1, v12);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v24 = v1;
    v25 = v17;
    *(_DWORD *)v16 = 136446210;
    v18 = type metadata accessor for _HapticFeedback(0);
    v19 = swift_retain(v1);
    v20 = String.init<A>(describing:)(&v24, v18, v19);
    v22 = v21;
    v24 = sub_100172BEC(v20, v21, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v16 + 4, v16 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%{public}s] init", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  return v1;
}

_QWORD *sub_100199CA0()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (qword_100315870 != -1)
    swift_once(&qword_100315870, sub_1000D975C);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FE08);
  v4 = swift_retain_n(v0, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = (uint64_t)v1;
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for _HapticFeedback(0);
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v9, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] deinit", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  swift_release(v1[2]);
  swift_release(v1[3]);
  swift_release(v1[4]);
  sub_100025CF8((uint64_t)(v1 + 7));
  swift_release(v1[9]);
  sub_10019AAA4((uint64_t)v1 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached);
  return v1;
}

uint64_t sub_100199E98()
{
  _QWORD *v0;

  v0 = sub_100199CA0();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_100199EB8()
{
  return type metadata accessor for _HapticFeedback(0);
}

uint64_t type metadata accessor for _HapticFeedback(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100324E38, (uint64_t)&nominal type descriptor for _HapticFeedback);
}

uint64_t sub_100199ED4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[5] = &unk_10025AC00;
  v4[6] = &unk_10025AC18;
  result = type metadata accessor for _HapticFeedback.Cached(319);
  if (v3 <= 0x3F)
  {
    v4[7] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t type metadata accessor for _HapticFeedback.Cached(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100324F98, (uint64_t)&nominal type descriptor for _HapticFeedback.Cached);
}

_QWORD *sub_100199F8C(char *a1, char *a2, int *a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *(_QWORD *)a2;
    *v4 = *(_QWORD *)a2;
    v4 = (_QWORD *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v14);
  }
  else
  {
    *a1 = *a2;
    v7 = a3[5];
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for DispatchTime(0);
    v11 = *(_QWORD *)(v10 - 8);
    v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1, v10))
    {
      v13 = sub_100003DB8(&qword_1003180C8);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v15 = a3[6];
    v16 = (char *)v4 + v15;
    v17 = &a2[v15];
    if (v12(&a2[v15], 1, v10))
    {
      v18 = sub_100003DB8(&qword_1003180C8);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    v19 = a3[8];
    *((_BYTE *)v4 + a3[7]) = a2[a3[7]];
    v20 = *(_QWORD *)&a2[v19];
    *(_QWORD *)((char *)v4 + v19) = v20;
    v21 = a3[10];
    *((_BYTE *)v4 + a3[9]) = a2[a3[9]];
    v22 = (char *)v4 + v21;
    v23 = &a2[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    swift_bridgeObjectRetain(v20);
  }
  return v4;
}

uint64_t sub_10019A130(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;

  v4 = a1 + a2[5];
  v5 = type metadata accessor for DispatchTime(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = a1 + a2[6];
  if (!v7(v8, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + a2[8]));
}

_BYTE *sub_10019A1D4(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  _BYTE *v21;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = sub_100003DB8(&qword_1003180C8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  if (v11(&a2[v13], 1, v9))
  {
    v16 = sub_100003DB8(&qword_1003180C8);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  v17 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  v18 = *(_QWORD *)&a2[v17];
  *(_QWORD *)&a1[v17] = v18;
  v19 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  v20 = &a1[v19];
  v21 = &a2[v19];
  *(_QWORD *)v20 = *(_QWORD *)v21;
  v20[8] = v21[8];
  swift_bridgeObjectRetain(v18);
  return a1;
}

_BYTE *sub_10019A34C(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  uint64_t v27;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100003DB8(&qword_1003180C8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = v11(&a1[v15], 1, v9);
  v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = sub_100003DB8(&qword_1003180C8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  a1[a3[7]] = a2[a3[7]];
  v21 = a3[8];
  v22 = *(_QWORD *)&a2[v21];
  v23 = *(_QWORD *)&a1[v21];
  *(_QWORD *)&a1[v21] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  a1[a3[9]] = a2[a3[9]];
  v24 = a3[10];
  v25 = &a1[v24];
  v26 = &a2[v24];
  v27 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)v25 = v27;
  return a1;
}

_BYTE *sub_10019A568(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(_BYTE *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1, v9))
  {
    v12 = sub_100003DB8(&qword_1003180C8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = a3[6];
  v14 = &a1[v13];
  v15 = &a2[v13];
  if (v11(&a2[v13], 1, v9))
  {
    v16 = sub_100003DB8(&qword_1003180C8);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v14, 0, 1, v9);
  }
  v17 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  *(_QWORD *)&a1[v17] = *(_QWORD *)&a2[v17];
  v18 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  v19 = &a1[v18];
  v20 = &a2[v18];
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  return a1;
}

_BYTE *sub_10019A6DC(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(_BYTE *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE *v25;

  *a1 = *a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = type metadata accessor for DispatchTime(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    v14 = sub_100003DB8(&qword_1003180C8);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  v15 = a3[6];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = v11(&a1[v15], 1, v9);
  v19 = v11(v17, 1, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v16, v17, v9);
      goto LABEL_13;
    }
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }
  if (v19)
  {
LABEL_12:
    v20 = sub_100003DB8(&qword_1003180C8);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v16, v17, v9);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v16, 0, 1, v9);
LABEL_13:
  v21 = a3[8];
  a1[a3[7]] = a2[a3[7]];
  v22 = *(_QWORD *)&a1[v21];
  *(_QWORD *)&a1[v21] = *(_QWORD *)&a2[v21];
  swift_bridgeObjectRelease(v22);
  v23 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  v24 = &a1[v23];
  v25 = &a2[v23];
  *(_QWORD *)v24 = *(_QWORD *)v25;
  v24[8] = v25[8];
  return a1;
}

uint64_t sub_10019A8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10019A8F4);
}

uint64_t sub_10019A8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = sub_100003DB8(&qword_1003180C8);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10019A978(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10019A984);
}

uint64_t sub_10019A984(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = sub_100003DB8(&qword_1003180C8);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  return result;
}

void sub_10019AA04(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  void *v9;
  void *v10;

  v4 = &unk_10025AC38;
  sub_100025B34(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(v2 - 8) + 64;
    v6 = v5;
    v7 = &unk_10025AC50;
    v8 = (char *)&value witness table for Builtin.BridgeObject + 64;
    v9 = &unk_10025AC68;
    v10 = &unk_10025AC80;
    swift_initStructMetadata(a1, 256, 7, &v4, a1 + 16);
  }
}

uint64_t sub_10019AAA4(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for _HapticFeedback.Cached(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_10019AAE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  NSObject *oslog;

  v1 = v0;
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 56);
  if (Strong)
  {
    v3 = (_QWORD *)Strong;
    sub_10000D75C();
    v4 = swift_retain(v0);
    v5 = static OS_dispatch_queue.main.getter(v4);
    v6 = sub_100003DB8(&qword_100324FE8);
    v7 = swift_allocObject(v6, 40, 7);
    swift_weakInit(v7 + 16);
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
      && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_100209204((uint64_t)_swiftEmptyArrayStorage);
    }
    else
    {
      v8 = &_swiftEmptySetSingleton;
    }
    *(_QWORD *)(v7 + 32) = v8;
    swift_weakAssign(v7 + 16, v1);
    swift_release(v1);
    *(_QWORD *)(v7 + 24) = v5;
    v9 = *(_QWORD *)(*(_QWORD *)(v3[6] + 96) + 24);
    swift_retain(v9);
    v11 = sub_100245400(v10, (uint64_t)sub_10019AD84, 0);
    swift_retain(v11);
    swift_release(v9);
    swift_release(v7);
    v12 = *(_QWORD *)(*(_QWORD *)(v3[6] + 56) + 24);
    swift_retain(v12);
    v14 = sub_100245400(v13, (uint64_t)sub_10019AF20, 0);
    swift_retain(v14);
    swift_release(v12);
    swift_release(v11);
    v15 = *(_QWORD *)(v3[7] + 32);
    swift_retain(v15);
    v17 = sub_100245400(v16, (uint64_t)sub_10019B084, 0);
    swift_retain(v17);
    swift_release(v15);
    swift_release(v14);
    v18 = *(_QWORD *)(v3[3] + 32);
    swift_retain(v18);
    v20 = sub_100245658(v19, (uint64_t)sub_10019B1E0, 0);
    swift_retain(v20);
    swift_release(v18);
    swift_unknownObjectRelease(v3);
    swift_release(v17);
    v21 = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v1 + 72) = v20;
    swift_release(v21);
  }
  else
  {
    if (qword_100315870 != -1)
      swift_once(&qword_100315870, sub_1000D975C);
    v22 = type metadata accessor for Logger(0);
    v23 = sub_10000D744(v22, (uint64_t)qword_10033FE08);
    oslog = Logger.logObject.getter(v23);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v24, "Unexpected _deps == nil", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

  }
}

void sub_10019AD84()
{
  sub_10019ADA4();
}

void sub_10019ADA4()
{
  uint64_t v0;
  uint64_t Strong;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _BYTE v12[24];

  Strong = swift_unknownObjectWeakLoadStrong(v0 + 56);
  if (Strong)
  {
    v2 = (_QWORD *)Strong;
    v3 = v0 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached;
    swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached, v12, 1, 0);
    v4 = type metadata accessor for _HapticFeedback.Cached(0);
    v5 = *(unsigned __int8 *)(v3 + *(int *)(v4 + 28));
    v6 = *(_QWORD *)(v2[6] + 96);
    v7 = *(unsigned __int8 *)(*(_QWORD *)(v6 + 48) + 120);
    if (v5 != 9)
    {
      if ((_DWORD)v7 == 9 || v5 != (_DWORD)v7)
        __asm { BR              X11 }
      goto LABEL_11;
    }
    if (((1 << v7) & 0x1DF) == 0)
    {
      if ((_DWORD)v7 != 5)
      {
LABEL_11:
        swift_unknownObjectRelease(v2);
        return;
      }
      if ((*(_BYTE *)(v2[4] + 42) & 1) != 0)
      {
        v9 = v2[27];
        v10 = v2[28];
        sub_100007BBC(v2 + 24, v9);
        if (((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 104))(v9, v10) & 1) != 0 || sub_10016DCB4())
          sub_10019BA54();
      }
    }
    swift_retain(v6);
    swift_unknownObjectRelease(v2);
    v11 = *(_BYTE *)(*(_QWORD *)(v6 + 48) + 120);
    swift_release(v6);
    *(_BYTE *)(v3 + *(int *)(v4 + 28)) = v11;
  }
}

uint64_t sub_10019AF20()
{
  return sub_10019AF40();
}

uint64_t sub_10019AF40()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE v14[24];

  v1 = v0;
  result = swift_unknownObjectWeakLoadStrong(v0 + 56);
  if (result)
  {
    v3 = (_QWORD *)result;
    if ((sub_10019C260((uint64_t)&off_1002E1F78, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 48) + 56) + 200)) & 1) != 0
      || (v4 = v3[4], *(_BYTE *)(v4 + 41) == 6)
      || (*(_BYTE *)(v4 + 42) & 1) == 0)
    {
      v5 = 1;
    }
    else
    {
      v12 = v3[27];
      v13 = v3[28];
      sub_100007BBC(v3 + 24, v12);
      v5 = ((*(uint64_t (**)(uint64_t, uint64_t))(v13 + 104))(v12, v13) & 1) == 0 && !sub_10016DCB4();
    }
    v6 = v1 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached;
    swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached, v14, 1, 0);
    v7 = type metadata accessor for _HapticFeedback.Cached(0);
    if (sub_100067058(0, *(_QWORD *)(v6 + *(int *)(v7 + 32))) && !v5)
      sub_10019BA54();
    v8 = *(_QWORD *)(v3[6] + 56);
    swift_retain(v8);
    swift_unknownObjectRelease(v3);
    v9 = *(_QWORD *)(v8 + 200);
    swift_bridgeObjectRetain(v9);
    swift_release(v8);
    v10 = *(int *)(v7 + 32);
    v11 = *(_QWORD *)(v6 + v10);
    *(_QWORD *)(v6 + v10) = v9;
    return swift_bridgeObjectRelease(v11);
  }
  return result;
}

uint64_t sub_10019B084()
{
  return sub_10019B0A4();
}

uint64_t sub_10019B0A4()
{
  uint64_t v0;
  uint64_t Strong;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];

  Strong = swift_unknownObjectWeakLoadStrong(v0 + 56);
  v2 = Strong;
  if (!Strong)
    goto LABEL_5;
  v3 = *(_QWORD *)(Strong + 56);
  swift_retain(v3);
  swift_unknownObjectRelease(v2);
  v2 = *(_QWORD *)(v3 + 88);
  swift_retain(v2);
  swift_release(v3);
  if (!v2)
    goto LABEL_5;
  swift_beginAccess(v2 + 48, &v18, 0, 0);
  v4 = *(_QWORD *)(v2 + 224);
  if (v4)
  {
    v5 = 0;
    v6 = *(_QWORD *)(v4 + 48);
  }
  else
  {
LABEL_5:
    v6 = 0;
    v5 = 1;
  }
  v7 = v0 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached, v19, 1, 0);
  v8 = type metadata accessor for _HapticFeedback.Cached(0);
  v9 = v7 + *(int *)(v8 + 40);
  v10 = *(_BYTE *)(v9 + 8);
  if ((v5 & 1) != 0)
  {
    if ((*(_BYTE *)(v9 + 8) & 1) != 0)
      goto LABEL_16;
    goto LABEL_12;
  }
  if (v6 != *(_QWORD *)v9)
    v10 = 1;
  if ((v10 & 1) != 0)
  {
LABEL_12:
    if (v2)
    {
      v11 = *(_QWORD *)(v2 + 264);
      v12 = *(_QWORD *)(v11 + 56);
      v13 = *(_QWORD *)(v11 + 64);
      v14 = *(_QWORD *)(v11 + 72);
      v15 = *(unsigned __int8 *)(v11 + 80);
    }
    else
    {
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v15 = 1;
    }
    sub_10019BDB0(v6, v5, v12, v13, v14, v15);
  }
LABEL_16:
  result = swift_release(v2);
  v17 = v7 + *(int *)(v8 + 40);
  *(_QWORD *)v17 = v6;
  *(_BYTE *)(v17 + 8) = v5;
  return result;
}

uint64_t sub_10019B1E0(uint64_t a1, char *a2)
{
  return sub_10019B204(*a2);
}

uint64_t sub_10019B204(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  int v12;
  _BYTE v13[24];

  v2 = v1;
  v4 = v2 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached, v13, 1, 0);
  v5 = type metadata accessor for _HapticFeedback.Cached(0);
  *(_BYTE *)(v4 + *(int *)(v5 + 36)) = a1;
  if (qword_100315870 != -1)
    swift_once(&qword_100315870, sub_1000D975C);
  v6 = type metadata accessor for Logger(0);
  sub_10000D744(v6, (uint64_t)qword_10033FE08);
  swift_retain(v2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 67240192;
    v12 = *(unsigned __int8 *)(v4 + *(int *)(v5 + 36));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, v13, v10 + 4, v10 + 8);
    swift_release(v2);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "onAppActiveChanged, haptic allowed: %{BOOL,public}d", v10, 8u);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release(v2);
  }
  return sub_10019BE9C();
}

void sub_10019B37C()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;
  char v12;
  _BYTE *v13;
  uint64_t v14;
  void (*v15)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  _BYTE v26[24];

  v1 = v0;
  v2 = (int *)type metadata accessor for _HapticFeedback.Cached(0);
  __chkstk_darwin(v2, v3);
  v5 = &v26[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000D75C();
  *v10 = static OS_dispatch_queue.main.getter(v11);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v12 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once(&qword_100315870, sub_1000D975C);
    goto LABEL_6;
  }
  *v5 = 4;
  v13 = &v5[v2[5]];
  v14 = type metadata accessor for DispatchTime(0);
  v15 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56);
  v15(v13, 1, 1, v14);
  v15(&v5[v2[6]], 1, 1, v14);
  v5[v2[7]] = 9;
  *(_QWORD *)&v5[v2[8]] = &_swiftEmptySetSingleton;
  v5[v2[9]] = 0;
  v16 = &v5[v2[10]];
  *(_QWORD *)v16 = 0;
  v16[8] = 1;
  v17 = v1 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached, v26, 33, 0);
  sub_10019C21C((uint64_t)v5, v17);
  swift_endAccess(v26);
  LOBYTE(v17) = sub_10009BD0C();
  v18 = sub_10015A7CC();
  v19 = sub_100155528();
  if ((v17 & 1) != 0 && (v18 & 1) != 0 && (v19 & 1) != 0)
    return;
  if (qword_100315870 != -1)
    goto LABEL_11;
LABEL_6:
  v20 = type metadata accessor for Logger(0);
  v21 = sub_10000D744(v20, (uint64_t)qword_10033FE08);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to start hapticFeedback", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

}

uint64_t sub_10019B608()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;
  char v12;
  uint64_t result;
  _BYTE *v14;
  uint64_t v15;
  void (*v16)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v17;
  uint64_t v18;
  _BYTE v20[24];

  v1 = v0;
  v2 = (int *)type metadata accessor for _HapticFeedback.Cached(0);
  __chkstk_darwin(v2, v3);
  v5 = &v20[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000D75C();
  *v10 = static OS_dispatch_queue.main.getter(v11);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = _dispatchPreconditionTest(_:)(v10);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v12 & 1) != 0)
  {
    sub_100154024();
    sub_100159870();
    sub_10009C1E4();
    *v5 = 4;
    v14 = &v5[v2[5]];
    v15 = type metadata accessor for DispatchTime(0);
    v16 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
    v16(v14, 1, 1, v15);
    v16(&v5[v2[6]], 1, 1, v15);
    v5[v2[7]] = 9;
    *(_QWORD *)&v5[v2[8]] = &_swiftEmptySetSingleton;
    v5[v2[9]] = 0;
    v17 = &v5[v2[10]];
    *(_QWORD *)v17 = 0;
    v17[8] = 1;
    v18 = v1 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached;
    swift_beginAccess(v18, v20, 33, 0);
    sub_10019C21C((uint64_t)v5, v18);
    return swift_endAccess(v20);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10019B7DC(int a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24[3];
  _BYTE v25[24];

  v3 = sub_100003DB8(&qword_1003180C8);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (_BYTE *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached);
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached, v25, 1, 0);
  v8 = type metadata accessor for _HapticFeedback.Cached(0);
  if ((v7[*(int *)(v8 + 36)] & 1) != 0)
  {
    if (a1 == 1)
      sub_10019BA54();
    else
      sub_10009C798(a1);
  }
  else
  {
    v9 = v8;
    if (qword_100315870 != -1)
      swift_once(&qword_100315870, sub_1000D975C);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_10000D744(v10, (uint64_t)qword_10033FE08);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v24[0] = v15;
      v16.n128_u64[0] = 136315138;
      *(_DWORD *)v14 = 136315138;
      v22 = v14 + 4;
      LOBYTE(v23) = a1;
      v17 = String.init<A>(describing:)(&v23, &type metadata for HapticAgent.HapticType, v16);
      v19 = v18;
      v23 = sub_100172BEC(v17, v18, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v22, v14 + 12);
      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "onHapticRequired - %s not allowed right now, cached till allowed", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }

    *v7 = a1;
    static DispatchTime.now()(v20);
    v21 = type metadata accessor for DispatchTime(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v6, 0, 1, v21);
    swift_beginAccess(v7, v24, 33, 0);
    sub_100025C08((uint64_t)v6, (uint64_t)&v7[*(int *)(v9 + 20)]);
    swift_endAccess(v24);
  }
}

void sub_10019BA54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(char *, uint64_t);
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[24];
  _BYTE v39[24];

  v0 = sub_100003DB8(&qword_1003180C8);
  v2 = __chkstk_darwin(v0, v1);
  v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2, v5);
  v7 = (char *)&v36 - v6;
  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v36 - v15;
  if (qword_100315870 != -1)
    swift_once(&qword_100315870, sub_1000D975C);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_10000D744(v17, (uint64_t)qword_10033FE08);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "onUserActionRequired", v21, 2u);
    swift_slowDealloc(v21, -1, -1);
  }

  v22 = v37 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached;
  swift_beginAccess(v37 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached, v39, 0, 0);
  v23 = type metadata accessor for _HapticFeedback.Cached(0);
  sub_10013E2E0(v22 + *(int *)(v23 + 24), (uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    v24 = sub_1001241F4((uint64_t)v7);
LABEL_15:
    static DispatchTime.now()(v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v4, 0, 1, v8);
    swift_beginAccess(v22, v38, 33, 0);
    sub_100025C08((uint64_t)v4, v22 + *(int *)(v23 + 24));
    swift_endAccess(v38);
    sub_10009C798(1);
    return;
  }
  v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 32))(v16, v7, v8);
  v26 = static DispatchTime.now()(v25);
  v27 = DispatchTime.uptimeNanoseconds.getter(v26);
  v28 = DispatchTime.uptimeNanoseconds.getter(v27);
  if (v28 < v27)
  {
    v29 = DispatchTime.uptimeNanoseconds.getter(v28);
    v30 = DispatchTime.uptimeNanoseconds.getter(v29);
    v31 = v29 - v30;
    if (v29 >= v30)
      goto LABEL_11;
    __break(1u);
  }
  v31 = 0;
LABEL_11:
  v32 = *(void (**)(char *, uint64_t))(v9 + 8);
  v32(v13, v8);
  v24 = ((uint64_t (*)(char *, uint64_t))v32)(v16, v8);
  if (v31 > 0x2CB4177F)
    goto LABEL_15;
  v33 = Logger.logObject.getter(v24);
  v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "onUserActionRequired - throttled", v35, 2u);
    swift_slowDealloc(v35, -1, -1);
  }

}

void sub_10019BDB0(uint64_t a1, int a2, uint64_t a3, unint64_t a4, unint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t Strong;
  uint64_t v12;
  unsigned int v13;
  int v14;
  char v15;

  v7 = v6;
  if (((a2 | a6) & 1) != 0)
  {
    sub_100159D34();
    sub_1001544F8();
    return;
  }
  Strong = swift_unknownObjectWeakLoadStrong(v7 + 56);
  if (Strong)
  {
    v12 = Strong;
    v13 = objc_msgSend((id)objc_opt_self(SOSUtilities), "shouldPlayAudioDuringCountdown");
    swift_unknownObjectRelease(v12);
  }
  else
  {
    v13 = 0;
  }
  v14 = sub_10019C360(a4, a5, a1);
  if (v14)
  {
    if (v14 == 1)
      v15 = 1;
    else
      v15 = v13 ^ 1;
    sub_100159AB4(v15);
    if (v13)
      goto LABEL_13;
  }
  else
  {
    sub_10019B7DC(2);
    if (v13)
LABEL_13:
      sub_100154268(0.5);
  }
}

uint64_t sub_10019BE9C()
{
  uint64_t v0;
  void (*v1)(char *, uint64_t);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _BYTE *v16;
  uint64_t result;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40[3];
  _BYTE v41[24];

  v2 = v0;
  v3 = sub_100003DB8(&qword_1003180C8);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchTime(0);
  v8 = *(_QWORD *)(v7 - 8);
  v10 = __chkstk_darwin(v7, v9);
  v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v38 - v14;
  v16 = (_BYTE *)(v2 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached);
  swift_beginAccess(v2 + OBJC_IVAR____TtC8SOSBuddyP33_D74E797C4F8DB0A82ADB6A7E065FE21D15_HapticFeedback__cached, v41, 0, 0);
  result = type metadata accessor for _HapticFeedback.Cached(0);
  if (v16[*(int *)(result + 36)] == 1)
  {
    v18 = *v16;
    if (v18 != 4)
    {
      v19 = result;
      sub_10013E2E0((uint64_t)&v16[*(int *)(result + 20)], (uint64_t)v6);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
        return sub_1001241F4((uint64_t)v6);
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v6, v7);
      swift_beginAccess(v16, v40, 33, 0);
      *v16 = 4;
      v20 = (uint64_t)&v16[*(int *)(v19 + 20)];
      sub_1001241F4(v20);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v20, 1, 1, v7);
      v21 = swift_endAccess(v40);
      v22 = static DispatchTime.now()(v21);
      v23 = DispatchTime.uptimeNanoseconds.getter(v22);
      v24 = DispatchTime.uptimeNanoseconds.getter(v23);
      if (v24 >= v23)
      {
        v1 = *(void (**)(char *, uint64_t))(v8 + 8);
        v1(v12, v7);
      }
      else
      {
        v25 = DispatchTime.uptimeNanoseconds.getter(v24);
        v26 = DispatchTime.uptimeNanoseconds.getter(v25);
        v27 = v25 - v26;
        if (v25 < v26)
        {
          __break(1u);
          goto LABEL_17;
        }
        v1 = *(void (**)(char *, uint64_t))(v8 + 8);
        v1(v12, v7);
        if (v27 >= 0x30A32C0)
        {
          if (qword_100315870 == -1)
          {
LABEL_9:
            v28 = type metadata accessor for Logger(0);
            v29 = sub_10000D744(v28, (uint64_t)qword_10033FE08);
            v30 = Logger.logObject.getter(v29);
            v31 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v30, v31))
            {
              v32 = (uint8_t *)swift_slowAlloc(12, -1);
              v33 = swift_slowAlloc(32, -1);
              v40[0] = v33;
              v34.n128_u64[0] = 136446210;
              *(_DWORD *)v32 = 136446210;
              LOBYTE(v39) = v18;
              v35 = String.init<A>(describing:)(&v39, &type metadata for HapticAgent.HapticType, v34);
              v37 = v36;
              v39 = sub_100172BEC(v35, v36, v40);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v32 + 4, v32 + 12);
              swift_bridgeObjectRelease(v37);
              _os_log_impl((void *)&_mh_execute_header, v30, v31, "Pending haptic expired - %{public}s", v32, 0xCu);
              swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v33, -1, -1);
              swift_slowDealloc(v32, -1, -1);
            }

            return ((uint64_t (*)(char *, uint64_t))v1)(v15, v7);
          }
LABEL_17:
          swift_once(&qword_100315870, sub_1000D975C);
          goto LABEL_9;
        }
      }
      sub_10009C798(v18);
      return ((uint64_t (*)(char *, uint64_t))v1)(v15, v7);
    }
  }
  return result;
}

uint64_t sub_10019C21C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for _HapticFeedback.Cached(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10019C260(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[9];

  if (*(_QWORD *)(a2 + 16))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v4 = 0;
      v5 = a1 + 32;
      v6 = a2 + 56;
      do
      {
        if (*(_QWORD *)(a2 + 16))
        {
          v7 = *(unsigned __int8 *)(v5 + v4);
          Hasher.init(_seed:)(v14, *(_QWORD *)(a2 + 40));
          Hasher._combine(_:)(v7);
          v8 = Hasher._finalize()();
          v9 = -1 << *(_BYTE *)(a2 + 32);
          v10 = v8 & ~v9;
          if (((*(_QWORD *)(v6 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) != 0)
          {
            v11 = *(_QWORD *)(a2 + 48);
            if (*(unsigned __int8 *)(v11 + v10) == (_DWORD)v7)
              return 0;
            v12 = ~v9;
            while (1)
            {
              v10 = (v10 + 1) & v12;
              if (((*(_QWORD *)(v6 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
                break;
              if (*(unsigned __int8 *)(v11 + v10) == (_DWORD)v7)
                return 0;
            }
          }
        }
        ++v4;
      }
      while (v4 != v2);
    }
  }
  return 1;
}

uint64_t sub_10019C360(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t result;
  BOOL v5;
  unint64_t v6;
  BOOL v7;

  if (!a2)
  {
    v7 = a3 >= 1 && a3 > a1 >> 1;
    return !v7;
  }
  result = 2;
  if (a3 >= 1 && a2 < a3)
  {
    v5 = __CFADD__(a1, a2);
    v6 = a1 + a2;
    if (v5)
    {
      __break(1u);
      return result;
    }
    v7 = a3 > v6 >> 1;
    return !v7;
  }
  return result;
}

uint64_t sub_10019C3A4()
{
  return UUID.uuidString.getter();
}

uint64_t sub_10019C3CC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10019C41C()
{
  return type metadata accessor for TryOutTranscriptItem(0);
}

uint64_t type metadata accessor for TryOutTranscriptItem(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100325018, (uint64_t)&nominal type descriptor for TryOutTranscriptItem);
}

uint64_t sub_10019C438(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = &unk_10025ACF8;
  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    result = swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_10019C4B0@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *v1 + OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id;
  v4 = type metadata accessor for UUID(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

Swift::Int sub_10019C4F8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  v0 = type metadata accessor for UUID(0);
  v1 = sub_1000052EC(&qword_1003254D8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_10019C574(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = type metadata accessor for UUID(0);
  v3 = sub_1000052EC(&qword_1003254D8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_10019C5E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD v4[9];

  Hasher.init(_seed:)(v4, a1);
  v1 = type metadata accessor for UUID(0);
  v2 = sub_1000052EC(&qword_1003254D8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10019C658(_QWORD *a1, _QWORD *a2)
{
  return static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id, *a2 + OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id);
}

uint64_t sub_10019C674()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8SOSBuddy26TryOutTranscriptStatusItem_content + 8));
}

uint64_t sub_10019C688()
{
  return sub_10019CB90(&OBJC_IVAR____TtC8SOSBuddy26TryOutTranscriptStatusItem_content);
}

uint64_t sub_10019C694()
{
  return type metadata accessor for TryOutTranscriptStatusItem(0);
}

uint64_t type metadata accessor for TryOutTranscriptStatusItem(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_1003250F0, (uint64_t)&nominal type descriptor for TryOutTranscriptStatusItem);
}

uint64_t sub_10019C6B4(char *a1, unsigned __int8 *a2)
{
  return sub_10022B110(*a1, *a2);
}

Swift::Int sub_10019C6C0()
{
  unsigned __int8 *v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  _QWORD v6[9];

  v1 = *v0;
  Hasher.init(_seed:)(v6, 0);
  v2 = 1953391987;
  if (v1 != 1)
    v2 = 1701736302;
  if (v1)
    v3 = v2;
  else
    v3 = 0x676E69646E6573;
  if (v1)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10019C750(uint64_t a1)
{
  _BYTE *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v2 = 1953391987;
  if (*v1 != 1)
    v2 = 1701736302;
  if (*v1)
    v3 = v2;
  else
    v3 = 0x676E69646E6573;
  if (*v1)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE700000000000000;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_10019C7BC(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v2 = *v1;
  Hasher.init(_seed:)(v7, a1);
  v3 = 1953391987;
  if (v2 != 1)
    v3 = 1701736302;
  if (v2)
    v4 = v3;
  else
    v4 = 0x676E69646E6573;
  if (v2)
    v5 = 0xE400000000000000;
  else
    v5 = 0xE700000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

unint64_t sub_10019C848@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10019D18C(*a1);
  *a2 = result;
  return result;
}

void sub_10019C874(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 1953391987;
  if (v2 != 1)
    v4 = 1701736302;
  v5 = v2 == 0;
  if (*v1)
    v6 = v4;
  else
    v6 = 0x676E69646E6573;
  if (!v5)
    v3 = 0xE400000000000000;
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_10019C8C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  Swift::String v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v13;
  uint64_t v14;

  v1 = UUID.uuidString.getter();
  v3 = v2;
  v13 = v1;
  v14 = v2;
  swift_bridgeObjectRetain(v2);
  v4._countAndFlagsBits = 95;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(v3);
  v5 = 1953391987;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_status) != 1)
    v5 = 1701736302;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_status))
    v6 = v5;
  else
    v6 = 0x676E69646E6573;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_status))
    v7 = (void *)0xE400000000000000;
  else
    v7 = (void *)0xE700000000000000;
  swift_bridgeObjectRetain(v14);
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease(v14);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRetain(v14);
  v9._countAndFlagsBits = 95;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(v14);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_lastConsecutiveMessage))
    v10 = 76;
  else
    v10 = 67;
  swift_bridgeObjectRetain(v14);
  v11._countAndFlagsBits = v10;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v14);
  return v13;
}

uint64_t sub_10019CA20()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_content + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_content + 24));
  return swift_bridgeObjectRelease(v1);
}

uint64_t sub_10019CA54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0 + OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id;
  v2 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  v3 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_content + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_content + 24));
  swift_bridgeObjectRelease(v3);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10019CAC4()
{
  return type metadata accessor for TryOutTranscriptMessageItem(0);
}

uint64_t type metadata accessor for TryOutTranscriptMessageItem(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_1003251D8, (uint64_t)&nominal type descriptor for TryOutTranscriptMessageItem);
}

uint64_t sub_10019CAE0(uint64_t a1)
{
  _QWORD v2[4];

  v2[0] = "!";
  v2[1] = &unk_10025AD88;
  v2[2] = &unk_10025ADA0;
  v2[3] = &unk_10025AD88;
  return swift_updateClassMetadata2(a1, 256, 4, v2, a1 + 136);
}

uint64_t sub_10019CB34()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8SOSBuddy26TryOutTranscriptHeaderItem_content + 8));
}

uint64_t sub_10019CB48()
{
  return sub_10019CB90(&OBJC_IVAR____TtC8SOSBuddy26TryOutTranscriptHeaderItem_content);
}

uint64_t sub_10019CB54()
{
  return type metadata accessor for TryOutTranscriptHeaderItem(0);
}

uint64_t type metadata accessor for TryOutTranscriptHeaderItem(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100325310, (uint64_t)&nominal type descriptor for TryOutTranscriptHeaderItem);
}

uint64_t sub_10019CB70()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + OBJC_IVAR____TtC8SOSBuddy26TryOutTranscriptFooterItem_content + 8));
}

uint64_t sub_10019CB84()
{
  return sub_10019CB90(&OBJC_IVAR____TtC8SOSBuddy26TryOutTranscriptFooterItem_content);
}

uint64_t sub_10019CB90(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id;
  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(v3, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + *a1 + 8));
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t sub_10019CBFC()
{
  return type metadata accessor for TryOutTranscriptFooterItem(0);
}

uint64_t type metadata accessor for TryOutTranscriptFooterItem(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_1003253F8, (uint64_t)&nominal type descriptor for TryOutTranscriptFooterItem);
}

uint64_t sub_10019CC18(uint64_t a1)
{
  void *v2;

  v2 = &unk_10025AD30;
  return swift_updateClassMetadata2(a1, 256, 1, &v2, a1 + 136);
}

uint64_t storeEnumTagSinglePayload for TryOutTranscriptMessageItem.Status(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10019CCA4 + 4 * byte_10025ACB5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10019CCD8 + 4 * byte_10025ACB0[v4]))();
}

uint64_t sub_10019CCD8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019CCE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10019CCE8);
  return result;
}

uint64_t sub_10019CCF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10019CCFCLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10019CD00(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019CD08(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TryOutTranscriptMessageItem.Status()
{
  return &type metadata for TryOutTranscriptMessageItem.Status;
}

uint64_t storeEnumTagSinglePayload for TryOutTranscriptMessageItem.Sender(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10019CD70 + 4 * byte_10025ACBF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10019CDA4 + 4 * byte_10025ACBA[v4]))();
}

uint64_t sub_10019CDA4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019CDAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10019CDB4);
  return result;
}

uint64_t sub_10019CDC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10019CDC8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10019CDCC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019CDD4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TryOutTranscriptMessageItem.Sender()
{
  return &type metadata for TryOutTranscriptMessageItem.Sender;
}

uint64_t initializeWithCopy for TryOutTranscriptMessageItem.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for TryOutTranscriptMessageItem.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for TryOutTranscriptMessageItem.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for TryOutTranscriptMessageItem.Content(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 33))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TryOutTranscriptMessageItem.Content(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 33) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TryOutTranscriptMessageItem.Content()
{
  return &type metadata for TryOutTranscriptMessageItem.Content;
}

uint64_t storeEnumTagSinglePayload for TryOutTranscriptItem.ItemType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10019CFDC + 4 * byte_10025ACC9[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10019D010 + 4 * byte_10025ACC4[v4]))();
}

uint64_t sub_10019D010(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019D018(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10019D020);
  return result;
}

uint64_t sub_10019D02C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10019D034);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10019D038(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10019D040(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TryOutTranscriptItem.ItemType()
{
  return &type metadata for TryOutTranscriptItem.ItemType;
}

unint64_t sub_10019D060()
{
  unint64_t result;

  result = qword_1003254B8;
  if (!qword_1003254B8)
  {
    result = swift_getWitnessTable(&unk_10025AE5C, &type metadata for TryOutTranscriptItem.ItemType);
    atomic_store(result, (unint64_t *)&qword_1003254B8);
  }
  return result;
}

unint64_t sub_10019D0A8()
{
  unint64_t result;

  result = qword_1003254C0;
  if (!qword_1003254C0)
  {
    result = swift_getWitnessTable(&unk_10025AEC4, &type metadata for TryOutTranscriptMessageItem.Sender);
    atomic_store(result, (unint64_t *)&qword_1003254C0);
  }
  return result;
}

unint64_t sub_10019D0F0()
{
  unint64_t result;

  result = qword_1003254C8;
  if (!qword_1003254C8)
  {
    result = swift_getWitnessTable(&unk_10025AF64, &type metadata for TryOutTranscriptMessageItem.Status);
    atomic_store(result, (unint64_t *)&qword_1003254C8);
  }
  return result;
}

uint64_t sub_10019D134()
{
  return sub_1000052EC(&qword_1003254D0, type metadata accessor for TryOutTranscriptItem, (uint64_t)&unk_10025AF8C);
}

uint64_t sub_10019D160()
{
  return sub_1000052EC(&qword_1003254D8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

unint64_t sub_10019D18C(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002E1FA0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

ValueMetadata *type metadata accessor for BuiltInSelectRoadsideProviderHeaderView()
{
  return &type metadata for BuiltInSelectRoadsideProviderHeaderView;
}

uint64_t sub_10019D1E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029DB74, 1);
}

uint64_t sub_10019D1F4@<X0>(uint64_t a1@<X2>, Swift::String *a2@<X8>)
{
  void *v3;
  uint64_t v4;
  void *v5;
  id v6;
  Swift::String v7;
  Swift::String_optional v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t result;
  void *v14;
  Swift::String v15;

  v4 = *(_QWORD *)(a1 + 72);
  v3 = *(void **)(a1 + 80);
  v5 = (void *)objc_opt_self(NSBundle);
  v6 = objc_msgSend(v5, "mainBundle", swift_bridgeObjectRetain(v3).n128_f64[0]);
  v15._countAndFlagsBits = 0xD00000000000003BLL;
  v15._object = (void *)0x800000010026E0C0;
  v7._object = (void *)0x800000010026E060;
  v8.value._object = (void *)0x8000000100267FB0;
  v7._countAndFlagsBits = 0x1000000000000058;
  v8.value._countAndFlagsBits = 0xD000000000000017;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)v6, v9, v15);

  v11 = type metadata accessor for UIMetrics();
  v12 = sub_10007DE90();
  result = EnvironmentObject.init()(v11, v12);
  a2->_countAndFlagsBits = result;
  a2->_object = v14;
  a2[1]._countAndFlagsBits = v4;
  a2[1]._object = v3;
  a2[2] = v10;
  return result;
}

uint64_t sub_10019D2F4@<X0>(Swift::String *a1@<X8>)
{
  uint64_t v1;

  return sub_10019D1F4(*(_QWORD *)(v1 + 16), a1);
}

ValueMetadata *type metadata accessor for TryOutMessagesView()
{
  return &type metadata for TryOutMessagesView;
}

uint64_t sub_10019D310(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029DBDC, 1);
}

uint64_t sub_10019D320@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t OpaqueTypeConformance2;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _BYTE v29[225];
  _OWORD v30[12];
  _OWORD v31[2];
  _OWORD v32[14];
  char v33;
  _OWORD v34[15];
  char v35;

  v27 = a1;
  v1 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8(&qword_1003254E0);
  v24 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_1003254E8);
  v11 = *(_QWORD *)(v10 - 8);
  v25 = v10;
  v26 = v11;
  v13 = __chkstk_darwin(v10, v12);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = static HorizontalAlignment.center.getter(v13);
  sub_10019D64C((uint64_t)v30);
  *(_OWORD *)((char *)&v32[10] + 7) = v30[10];
  *(_OWORD *)((char *)&v32[11] + 7) = v30[11];
  *(_OWORD *)((char *)&v32[12] + 7) = v31[0];
  v32[13] = *(_OWORD *)((char *)v31 + 9);
  *(_OWORD *)((char *)&v32[6] + 7) = v30[6];
  *(_OWORD *)((char *)&v32[7] + 7) = v30[7];
  *(_OWORD *)((char *)&v32[8] + 7) = v30[8];
  *(_OWORD *)((char *)&v32[9] + 7) = v30[9];
  *(_OWORD *)((char *)&v32[2] + 7) = v30[2];
  *(_OWORD *)((char *)&v32[3] + 7) = v30[3];
  *(_OWORD *)((char *)&v32[4] + 7) = v30[4];
  *(_OWORD *)((char *)&v32[5] + 7) = v30[5];
  *(_OWORD *)((char *)v32 + 7) = v30[0];
  *(_OWORD *)((char *)&v32[1] + 7) = v30[1];
  *(_OWORD *)&v29[161] = v32[10];
  *(_OWORD *)&v29[177] = v32[11];
  *(_OWORD *)&v29[193] = v32[12];
  *(_OWORD *)&v29[209] = *(_OWORD *)((char *)v31 + 9);
  *(_OWORD *)&v29[97] = v32[6];
  *(_OWORD *)&v29[113] = v32[7];
  *(_OWORD *)&v29[129] = v32[8];
  *(_OWORD *)&v29[145] = v32[9];
  *(_OWORD *)&v29[33] = v32[2];
  *(_OWORD *)&v29[49] = v32[3];
  *(_OWORD *)&v29[65] = v32[4];
  *(_OWORD *)&v29[81] = v32[5];
  *(_OWORD *)&v29[1] = v32[0];
  v33 = 0;
  v28 = (unint64_t)v23;
  v29[0] = 0;
  *(_OWORD *)&v29[17] = v32[1];
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v5, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v1);
  v16 = sub_100003DB8(&qword_1003254F0);
  v17 = sub_1000084FC(&qword_1003254F8, &qword_1003254F0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  View.navigationBarTitleDisplayMode(_:)(v5, v16, v17);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  v34[12] = *(_OWORD *)&v29[176];
  v34[13] = *(_OWORD *)&v29[192];
  v34[14] = *(_OWORD *)&v29[208];
  v35 = v29[224];
  v34[8] = *(_OWORD *)&v29[112];
  v34[9] = *(_OWORD *)&v29[128];
  v34[10] = *(_OWORD *)&v29[144];
  v34[11] = *(_OWORD *)&v29[160];
  v34[4] = *(_OWORD *)&v29[48];
  v34[5] = *(_OWORD *)&v29[64];
  v34[6] = *(_OWORD *)&v29[80];
  v34[7] = *(_OWORD *)&v29[96];
  v34[0] = v28;
  v34[1] = *(_OWORD *)v29;
  v34[2] = *(_OWORD *)&v29[16];
  v34[3] = *(_OWORD *)&v29[32];
  sub_10019D954(v34);
  *(_QWORD *)&v28 = v16;
  *((_QWORD *)&v28 + 1) = v17;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  View.navigationBarBackButtonHidden(_:)(1, v6, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v6);
  *(_QWORD *)&v28 = v6;
  *((_QWORD *)&v28 + 1) = OpaqueTypeConformance2;
  v19 = swift_getOpaqueTypeConformance2(&v28, &opaque type descriptor for <<opaque return type of View.navigationBarBackButtonHidden(_:)>>, 1);
  v20 = v25;
  View.navigationBarHidden(_:)(1, v25, v19);
  return (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v15, v20);
}

uint64_t sub_10019D64C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  char v66;

  v2 = type metadata accessor for UIMetrics();
  v3 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
  v4 = EnvironmentObject.init()(v2, v3);
  v6 = v5;
  type metadata accessor for CGSize(0);
  v42 = 0uLL;
  v8 = State.init(wrappedValue:)(&v54, &v42, v7);
  v9 = v54;
  v10 = v55;
  v11 = v56;
  v12 = static Alignment.center.getter(v8);
  v14 = v13;
  sub_10019D854((uint64_t)&v31);
  *(_QWORD *)&v42 = v12;
  *((_QWORD *)&v42 + 1) = v14;
  v15 = v39;
  v16 = v40;
  v51 = v39;
  v52 = v40;
  v17 = v35;
  v18 = v36;
  v47 = v35;
  v48 = v36;
  v19 = v38;
  v20 = v37;
  v49 = v37;
  v50 = v38;
  v21 = v31;
  v22 = v32;
  v43 = v31;
  v44 = v32;
  v23 = v34;
  v24 = v33;
  v45 = v33;
  v46 = v34;
  v25 = v39;
  *(_OWORD *)(a1 + 168) = v38;
  *(_OWORD *)(a1 + 184) = v25;
  *(_OWORD *)(a1 + 200) = v52;
  v26 = v47;
  *(_OWORD *)(a1 + 104) = v46;
  *(_OWORD *)(a1 + 120) = v26;
  v27 = v49;
  *(_OWORD *)(a1 + 136) = v48;
  *(_OWORD *)(a1 + 152) = v27;
  v28 = v43;
  *(_OWORD *)(a1 + 40) = v42;
  *(_OWORD *)(a1 + 56) = v28;
  v29 = v45;
  *(_OWORD *)(a1 + 72) = v44;
  *(_OWORD *)(a1 + 88) = v29;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v10;
  v64 = v15;
  v65 = v16;
  v60 = v17;
  v61 = v18;
  v63 = v19;
  v62 = v20;
  v53 = v41;
  *(_BYTE *)(a1 + 216) = v41;
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 32) = v11;
  v54 = v12;
  v55 = v14;
  v66 = v41;
  v56 = v21;
  v57 = v22;
  v59 = v23;
  v58 = v24;
  swift_retain(v11);
  swift_retain(v4);
  sub_10019D9FC(&v42);
  sub_10019DA84(&v54);
  swift_release(v11);
  return swift_release(v4);
}

double sub_10019D854@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  _OWORD v19[2];
  double v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v2 = sub_1001F47C0((uint64_t)v19);
  v3 = static HorizontalAlignment.center.getter(v2);
  v4 = type metadata accessor for BannerAppearanceModel(0);
  v5 = sub_100056D60(&qword_100316AA8, type metadata accessor for BannerAppearanceModel);
  v6 = EnvironmentObject.init()(v4, v5);
  result = v20;
  v8 = v21;
  v9 = v22;
  v10 = v23;
  v11 = v25;
  v12 = v27;
  v13 = v29;
  v14 = v24 & 1;
  v15 = v26 & 1;
  v16 = v28 & 1;
  v17 = v19[1];
  *(_OWORD *)a1 = v19[0];
  *(_OWORD *)(a1 + 16) = v17;
  *(double *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_BYTE *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 72) = v11;
  *(_BYTE *)(a1 + 80) = v15;
  *(_QWORD *)(a1 + 88) = v12;
  *(_BYTE *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v13;
  *(_QWORD *)(a1 + 112) = v3;
  *(_QWORD *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v6;
  *(_QWORD *)(a1 + 144) = v18;
  *(_QWORD *)(a1 + 152) = 0;
  *(_BYTE *)(a1 + 160) = 1;
  return result;
}

uint64_t sub_10019D940@<X0>(uint64_t a1@<X8>)
{
  return sub_10019D320(a1);
}

_QWORD *sub_10019D954(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[7];
  v3 = a1[10];
  v4 = a1[12];
  v5 = a1[15];
  v6 = a1[17];
  v7 = a1[19];
  v8 = a1[21];
  v9 = a1[27];
  swift_release(a1[3]);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  swift_release(v6);
  swift_release(v7);
  swift_release(v8);
  swift_release(v9);
  return a1;
}

_QWORD *sub_10019D9FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[7];
  v5 = a1[9];
  v6 = a1[11];
  v7 = a1[13];
  swift_retain(a1[19]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

_QWORD *sub_10019DA84(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[4];
  v3 = a1[7];
  v4 = a1[9];
  v5 = a1[11];
  v6 = a1[13];
  v7 = a1[19];
  swift_release(a1[2]);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_release(v5);
  swift_release(v6);
  swift_release(v7);
  return a1;
}

uint64_t sub_10019DB0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t result;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[12];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v6 = static Alignment.center.getter(a1);
  if (a1)
  {
    v22 = v6;
    v23 = v7;
    v24 = 0x4038000000000000;
    v25 = 9;
    v26 = xmmword_10025B0B0;
    v27 = 0;
    v28 = 0x4038000000000000;
    v29 = 9;
    v30 = 0x3FF0000000000000;
    v8 = *(double *)(a1 + 40);
    v9 = static Alignment.center.getter(v6);
    *(_QWORD *)&v11 = sub_100133708(0.0, 1, 0.0, 1, 0.0, 1, 0.0, 1, (uint64_t)v21, 0.0, 1, v8, 0, v9, v10).n128_u64[0];
    result = static Edge.Set.all.getter(v11);
    v13 = v21[9];
    *(_OWORD *)(a3 + 128) = v21[8];
    *(_OWORD *)(a3 + 144) = v13;
    v14 = v21[11];
    *(_OWORD *)(a3 + 160) = v21[10];
    *(_OWORD *)(a3 + 176) = v14;
    v15 = v21[5];
    *(_OWORD *)(a3 + 64) = v21[4];
    *(_OWORD *)(a3 + 80) = v15;
    v16 = v21[7];
    *(_OWORD *)(a3 + 96) = v21[6];
    *(_OWORD *)(a3 + 112) = v16;
    v17 = v21[1];
    *(_OWORD *)a3 = v21[0];
    *(_OWORD *)(a3 + 16) = v17;
    v18 = v21[3];
    *(_OWORD *)(a3 + 32) = v21[2];
    *(_OWORD *)(a3 + 48) = v18;
    *(_BYTE *)(a3 + 192) = result;
    *(_OWORD *)(a3 + 200) = 0u;
    *(_OWORD *)(a3 + 216) = 0u;
    *(_BYTE *)(a3 + 232) = 1;
  }
  else
  {
    v19 = type metadata accessor for BannerAppearanceModel(0);
    v20 = sub_100056D60(&qword_100316AA8, type metadata accessor for BannerAppearanceModel);
    result = EnvironmentObject.error()(0, a2, v19, v20);
    __break(1u);
  }
  return result;
}

uint64_t sub_10019DC54@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10019DB0C(*v1, v1[1], a1);
}

ValueMetadata *type metadata accessor for TryOutMessagesRegularBannerView()
{
  return &type metadata for TryOutMessagesRegularBannerView;
}

uint64_t sub_10019DC6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_100007FAC(&qword_1003254E8);
  v1 = sub_100007FAC(&qword_1003254E0);
  v5 = sub_100007FAC(&qword_1003254F0);
  v6 = sub_1000084FC(&qword_1003254F8, &qword_1003254F0, (uint64_t)&protocol conformance descriptor for VStack<A>);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v5 = v1;
  v6 = OpaqueTypeConformance2;
  v3 = swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.navigationBarBackButtonHidden(_:)>>, 1);
  v5 = v0;
  v6 = v3;
  return swift_getOpaqueTypeConformance2(&v5, &opaque type descriptor for <<opaque return type of View.navigationBarHidden(_:)>>, 1);
}

uint64_t sub_10019DD28(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029DC04, 1);
}

unint64_t sub_10019DD3C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100325500;
  if (!qword_100325500)
  {
    v1 = sub_100007FAC(&qword_100325508);
    sub_10019DDA8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100325500);
  }
  return result;
}

unint64_t sub_10019DDA8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100325510;
  if (!qword_100325510)
  {
    v1 = sub_100007FAC(&qword_100325518);
    sub_1000084FC(&qword_100325520, &qword_100325528, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100325510);
  }
  return result;
}

ValueMetadata *type metadata accessor for BlurBackgroundView()
{
  return &type metadata for BlurBackgroundView;
}

id sub_10019DE3C(double a1, double a2, uint64_t a3, uint64_t a4)
{
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;

  v6 = objc_msgSend((id)objc_opt_self(UIBlurEffect), "effectWithStyle:", a4);
  v7 = objc_msgSend(objc_allocWithZone((Class)UIVisualEffectView), "initWithEffect:", v6);
  objc_msgSend(v7, "setAlpha:", a2);
  if (a1 > 0.0)
  {
    v8 = objc_msgSend(v7, "layer");
    objc_msgSend(v8, "setCornerRadius:", a1);

    v9 = objc_msgSend(v7, "layer");
    objc_msgSend(v9, "setCornerCurve:", kCACornerCurveContinuous);

    v10 = objc_msgSend(v7, "layer");
    objc_msgSend(v10, "setMasksToBounds:", 1);

  }
  return v7;
}

id sub_10019DF68(uint64_t a1)
{
  uint64_t v1;

  return sub_10019DE3C(*(double *)v1, *(double *)(v1 + 16), a1, *(_QWORD *)(v1 + 8));
}

uint64_t sub_10019DF7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10019E044();
  return static UIViewRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_10019DFCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_10019E044();
  return static UIViewRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_10019E01C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_10019E044();
  UIViewRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_10019E044()
{
  unint64_t result;

  result = qword_100325530;
  if (!qword_100325530)
  {
    result = swift_getWitnessTable(&unk_10025B204, &type metadata for BlurBackgroundView);
    atomic_store(result, (unint64_t *)&qword_100325530);
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssitantBannerMode()
{
  return &type metadata for ConnectionAssitantBannerMode;
}

uint64_t *sub_10019E098(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain(v15);
  }
  else if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v8 = type metadata accessor for ConnectionClosed(0);
    v9 = *(int *)(v8 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = sub_100003DB8(&qword_100317D58);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v16 = *(int *)(v8 + 24);
    v17 = *(uint64_t *)((char *)a2 + v16);
    *(uint64_t *)((char *)a1 + v16) = v17;
    swift_bridgeObjectRetain(v17);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(v5 + 64));
  }
  return a1;
}

double sub_10019E1E4(uint64_t a1, uint64_t a2)
{
  double result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (swift_getEnumCaseMultiPayload(a1, a2) == 1)
  {
    v4 = type metadata accessor for ConnectionClosed(0);
    v5 = a1 + *(int *)(v4 + 20);
    v6 = type metadata accessor for Date(0);
    v7 = *(_QWORD *)(v6 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6))
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
    *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v4 + 24))).n128_u64[0];
  }
  return result;
}

_BYTE *sub_10019E284(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *a1 = *a2;
    v6 = type metadata accessor for ConnectionClosed(0);
    v7 = *(int *)(v6 + 20);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_100003DB8(&qword_100317D58);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    v13 = *(int *)(v6 + 24);
    v14 = *(_QWORD *)&a2[v13];
    *(_QWORD *)&a1[v13] = v14;
    swift_bridgeObjectRetain(v14);
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *sub_10019E3A8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  if (a1 != a2)
  {
    sub_10000AFFC((uint64_t)a1, type metadata accessor for ConnectionAssitantBannerMode.Mode);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      v6 = type metadata accessor for ConnectionClosed(0);
      v7 = *(int *)(v6 + 20);
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = type metadata accessor for Date(0);
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        v12 = sub_100003DB8(&qword_100317D58);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 16))(v8, v9, v10);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      v13 = *(int *)(v6 + 24);
      v14 = *(_QWORD *)&a2[v13];
      *(_QWORD *)&a1[v13] = v14;
      swift_bridgeObjectRetain(v14);
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t type metadata accessor for ConnectionAssitantBannerMode.Mode(uint64_t a1)
{
  uint64_t result;

  result = qword_1003255A8;
  if (!qword_1003255A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConnectionAssitantBannerMode.Mode);
  return result;
}

_BYTE *sub_10019E520(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
  {
    *a1 = *a2;
    v6 = type metadata accessor for ConnectionClosed(0);
    v7 = *(int *)(v6 + 20);
    v8 = &a1[v7];
    v9 = &a2[v7];
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = sub_100003DB8(&qword_100317D58);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *(_QWORD *)&a1[*(int *)(v6 + 24)] = *(_QWORD *)&a2[*(int *)(v6 + 24)];
    swift_storeEnumTagMultiPayload(a1, a3, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  return a1;
}

_BYTE *sub_10019E640(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_10000AFFC((uint64_t)a1, type metadata accessor for ConnectionAssitantBannerMode.Mode);
    if (swift_getEnumCaseMultiPayload(a2, a3) == 1)
    {
      *a1 = *a2;
      v6 = type metadata accessor for ConnectionClosed(0);
      v7 = *(int *)(v6 + 20);
      v8 = &a1[v7];
      v9 = &a2[v7];
      v10 = type metadata accessor for Date(0);
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        v12 = sub_100003DB8(&qword_100317D58);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      *(_QWORD *)&a1[*(int *)(v6 + 24)] = *(_QWORD *)&a2[*(int *)(v6 + 24)];
      swift_storeEnumTagMultiPayload(a1, a3, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_10019E778(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t sub_10019E784(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t sub_10019E794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_10019E7A4(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_10025B2D8;
  result = type metadata accessor for ConnectionClosed(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(result - 8) + 64;
    v4[2] = &unk_10025B2F0;
    v4[3] = &unk_10025B2D8;
    swift_initEnumMetadataMultiPayload(a1, 256, 4, v4);
    return 0;
  }
  return result;
}

void sub_10019E824(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;

  v4 = type metadata accessor for ConnectionClosed(0);
  __chkstk_darwin(v4, v5);
  v6 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  v8 = __chkstk_darwin(v6, v7);
  v10 = __chkstk_darwin(v8, v9);
  v12 = __chkstk_darwin(v10, v11);
  __chkstk_darwin(v12, v13);
  v14 = sub_100003DB8(&qword_1003255E0);
  v16 = __chkstk_darwin(v14, v15);
  v18 = (char *)&v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (uint64_t)&v18[*(int *)(v16 + 48)];
  sub_100114310(a1, (uint64_t)v18);
  sub_100114310(a2, v19);
  v20 = (char *)sub_10019E988 + 4 * byte_10025B2A0[swift_getEnumCaseMultiPayload(v18, v6)];
  __asm { BR              X10 }
}

uint64_t sub_10019E988()
{
  uint64_t v0;
  uint64_t v1;
  _BYTE *v2;
  _BYTE *v3;
  char v4;
  char v5;

  sub_100114310(v0, (uint64_t)v3);
  if (swift_getEnumCaseMultiPayload(v2, v1))
  {
    sub_10019EB18(v0);
    v5 = 0;
  }
  else
  {
    v4 = *v3 ^ *v2;
    sub_10000AFFC(v0, type metadata accessor for ConnectionAssitantBannerMode.Mode);
    v5 = v4 ^ 1;
  }
  return v5 & 1;
}

uint64_t sub_10019EB18(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003DB8(&qword_1003255E0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10019EB58@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _BYTE v5[88];

  sub_10019EBA0(a2, *a1, (uint64_t)v5);
  return sub_10019F1C0((uint64_t)v5, a3);
}

uint64_t sub_10019EBA0@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unsigned __int8 *v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v4 = *(_QWORD *)result;
  v5 = 0uLL;
  if (*(_QWORD *)(*(_QWORD *)result + 16))
  {
    swift_retain(a2);
    v8 = sub_10017D414(v7);
    if ((v9 & 1) == 0)
    {
      v17 = a2;
      goto LABEL_10;
    }
    v10 = (unsigned __int8 *)(*(_QWORD *)(v4 + 56) + 16 * v8);
    v11 = *v10;
    v12 = (_QWORD *)*((_QWORD *)v10 + 1);
    swift_retain(v12);
    swift_release(a2);
    if (v11 < 3)
      __asm { BR              X10 }
    if (v11 != 3)
    {
      v17 = v12;
LABEL_10:
      result = swift_release(v17);
      v13 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v5 = 0uLL;
      goto LABEL_11;
    }
    v13 = a2[2];
    v14 = a2[3];
    v15 = a2[9];
    v16 = a2[10];
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRetain(v16);
    result = swift_release(v12);
    v5 = xmmword_10025B330;
  }
  else
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
  }
LABEL_11:
  *(_QWORD *)a3 = v13;
  *(_QWORD *)(a3 + 8) = v14;
  *(_QWORD *)(a3 + 16) = v15;
  *(_QWORD *)(a3 + 24) = v16;
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_OWORD *)(a3 + 56) = v5;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  return result;
}

uint64_t sub_10019F1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_1003255E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_10019F208()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003255F0;
  if (!qword_1003255F0)
  {
    v1 = sub_100007FAC(&qword_100317980);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1003255F0);
  }
  return result;
}

uint64_t sub_10019F254(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[4]);
  swift_release(a1[6]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t sub_10019F28C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  *(_QWORD *)(a1 + 24) = a2[3];
  v9 = *((_OWORD *)a2 + 2);
  *(_OWORD *)(a1 + 32) = v9;
  v5 = a2[6];
  v4 = a2[7];
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v4;
  v7 = a2[8];
  v6 = a2[9];
  *(_QWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v6;
  swift_retain(v3);
  swift_retain(v9);
  swift_retain(v5);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *sub_10019F310(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = a2[4];
  v7 = a1[4];
  a1[3] = a2[3];
  a1[4] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[6];
  v9 = a1[6];
  a1[5] = a2[5];
  a1[6] = v8;
  swift_retain(v8);
  swift_release(v9);
  a1[7] = a2[7];
  v10 = a2[8];
  v11 = a1[8];
  a1[8] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[9] = a2[9];
  return a1;
}

uint64_t *sub_10019F3BC(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  a1[2] = a2[2];
  v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  swift_release(v5);
  v6 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
  swift_release(v6);
  v7 = a2[8];
  v8 = a1[8];
  a1[7] = a2[7];
  a1[8] = v7;
  swift_bridgeObjectRelease(v8);
  a1[9] = a2[9];
  return a1;
}

uint64_t sub_10019F438(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_10019F480(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for ExplorerScrollContentWithOffsetView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ExplorerScrollContentWithOffsetView);
}

uint64_t sub_10019F4E0(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10029DCEC, 1);
}

uint64_t sub_10019F514@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  _OWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v3 = v2;
  v6 = (_OWORD *)swift_allocObject(&unk_1002F61E8, 112, 7);
  v34 = *(_OWORD *)(a1 + 16);
  v7 = v3[2];
  v8 = v3[3];
  v9 = *v3;
  v6[3] = v3[1];
  v6[4] = v7;
  v10 = v3[4];
  v6[5] = v8;
  v6[6] = v10;
  v6[1] = v34;
  v6[2] = v9;
  sub_1001A04B8(v3);
  v11 = sub_100007FAC(&qword_100325698);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v11, v34, 0, 0);
  v13 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v13);
  v15 = type metadata accessor for VStack(255, v13, WitnessTable);
  v16 = sub_100007FAC(&qword_1003256A0);
  v17 = type metadata accessor for ModifiedContent(255, v15, v16);
  v18 = sub_100007FAC(&qword_1003256A8);
  v19 = type metadata accessor for ModifiedContent(255, v17, v18);
  v41 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v15);
  v42 = sub_1000084FC(&qword_1003256B0, &qword_1003256A0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v39 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
  v40 = sub_1000084FC(&qword_1003256B8, &qword_1003256A8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  v21 = type metadata accessor for ScrollView(255, v19, v20);
  v22 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v21);
  v43 = v21;
  v44 = v22;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v43, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 0);
  v43 = v21;
  v44 = v22;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v43, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 1);
  v43 = OpaqueTypeMetadata2;
  v44 = OpaqueTypeConformance2;
  v25 = swift_getOpaqueTypeMetadata2(255, &v43, &opaque type descriptor for <<opaque return type of View.coordinateSpace(_:)>>, 0);
  v26 = type metadata accessor for ModifiedContent(0, v25, &type metadata for _AppearanceActionModifier);
  v43 = OpaqueTypeMetadata2;
  v44 = OpaqueTypeConformance2;
  v37 = swift_getOpaqueTypeConformance2(&v43, &opaque type descriptor for <<opaque return type of View.coordinateSpace(_:)>>, 1);
  v38 = &protocol witness table for _AppearanceActionModifier;
  v27 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v26);
  v28 = ScrollViewReader.init(content:)(sub_1001A04AC, v6, v26, v27);
  v30 = v29;
  v35 = v28;
  v36 = v29;
  v31 = type metadata accessor for ScrollViewReader(0, v26, v27);
  swift_getWitnessTable(&protocol conformance descriptor for ScrollViewReader<A>, v31);
  sub_100092E98((uint64_t)&v35, v31, (uint64_t)&v43);
  swift_release(v30);
  v32 = v44;
  v35 = v43;
  v36 = v44;
  sub_1000903EC((uint64_t)&v35, v31, a2);
  return swift_release(v32);
}

uint64_t sub_10019F80C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t TupleTypeMetadata2;
  uint64_t v13;
  uint64_t WitnessTable;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t OpaqueTypeConformance2;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _OWORD *v57;
  uint64_t v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  void (*v66)(uint64_t, uint64_t);
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90[16];
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  void *v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v80 = a4;
  v88 = a5;
  v89 = a2;
  v87 = a1;
  v85 = type metadata accessor for ScrollViewProxy(0);
  v81 = *(_QWORD *)(v85 - 8);
  v86 = *(_QWORD *)(v81 + 64);
  __chkstk_darwin(v85, v6);
  v84 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = type metadata accessor for NamedCoordinateSpace(0);
  v82 = *(_QWORD *)(v83 - 8);
  __chkstk_darwin(v83, v8);
  v77 = (char *)&v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100007FAC(&qword_100325698);
  v11 = a3;
  v69 = a3;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v10, a3, 0, 0);
  v13 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v13);
  v15 = type metadata accessor for VStack(255, v13, WitnessTable);
  v16 = sub_100007FAC(&qword_1003256A0);
  v17 = type metadata accessor for ModifiedContent(255, v15, v16);
  v18 = sub_100007FAC(&qword_1003256A8);
  v19 = type metadata accessor for ModifiedContent(255, v17, v18);
  v20 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v15);
  v21 = sub_1000084FC(&qword_1003256B0, &qword_1003256A0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v99 = v20;
  v100 = v21;
  v22 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
  v23 = sub_1000084FC(&qword_1003256B8, &qword_1003256A8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v97 = v22;
  v98 = v23;
  v71 = v19;
  v70 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  v24 = type metadata accessor for ScrollView(0, v19, v70);
  v72 = *(_QWORD *)(v24 - 8);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v68 - v26;
  v28 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v24);
  *(_QWORD *)&v96 = v24;
  *((_QWORD *)&v96 + 1) = v28;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v96, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 0);
  v73 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2, v30);
  v32 = (char *)&v68 - v31;
  *(_QWORD *)&v96 = v24;
  *((_QWORD *)&v96 + 1) = v28;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v96, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 1);
  *(_QWORD *)&v96 = OpaqueTypeMetadata2;
  *((_QWORD *)&v96 + 1) = OpaqueTypeConformance2;
  v68 = OpaqueTypeConformance2;
  v34 = swift_getOpaqueTypeMetadata2(0, &v96, &opaque type descriptor for <<opaque return type of View.coordinateSpace(_:)>>, 0);
  v78 = *(_QWORD *)(v34 - 8);
  v75 = v34;
  __chkstk_darwin(v34, v34);
  v36 = (char *)&v68 - v35;
  v38 = type metadata accessor for ModifiedContent(0, v37, &type metadata for _AppearanceActionModifier);
  v79 = *(_QWORD *)(v38 - 8);
  v40 = __chkstk_darwin(v38, v39);
  v74 = (char *)&v68 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = __chkstk_darwin(v40, v42);
  v76 = (uint64_t)&v68 - v44;
  v45 = static Axis.Set.vertical.getter(v43);
  v91 = v11;
  v46 = v80;
  v47 = v89;
  v92 = v80;
  v93 = v89;
  ScrollView.init(_:showsIndicators:content:)(v45, 0, sub_1001A050C, v90, v71, v70);
  View.scrollClipDisabled(_:)(1, v24, v28);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v27, v24);
  v96 = *(_OWORD *)(v47 + 56);
  v48 = v77;
  static CoordinateSpaceProtocol<>.named<A>(_:)(&v96, &type metadata for String, &protocol witness table for String);
  View.coordinateSpace(_:)(v48, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v48, v83);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v32, OpaqueTypeMetadata2);
  v49 = v81;
  v51 = v84;
  v50 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v84, v87, v85);
  v52 = *(unsigned __int8 *)(v49 + 80);
  v53 = v49;
  v54 = (v52 + 32) & ~v52;
  v55 = (v86 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
  v56 = swift_allocObject(&unk_1002F6210, v55 + 80, v52 | 7);
  *(_QWORD *)(v56 + 16) = v69;
  *(_QWORD *)(v56 + 24) = v46;
  (*(void (**)(uint64_t, char *, uint64_t))(v53 + 32))(v56 + v54, v51, v50);
  v57 = (_OWORD *)(v56 + v55);
  v58 = v89;
  v59 = *(_OWORD *)(v89 + 48);
  v57[2] = *(_OWORD *)(v89 + 32);
  v57[3] = v59;
  v57[4] = *(_OWORD *)(v58 + 64);
  v60 = *(_OWORD *)(v58 + 16);
  *v57 = *(_OWORD *)v58;
  v57[1] = v60;
  sub_1001A04B8((_QWORD *)v58);
  *(_QWORD *)&v96 = OpaqueTypeMetadata2;
  *((_QWORD *)&v96 + 1) = v68;
  v61 = swift_getOpaqueTypeConformance2(&v96, &opaque type descriptor for <<opaque return type of View.coordinateSpace(_:)>>, 1);
  v62 = (uint64_t)v74;
  v63 = v75;
  View.onAppear(perform:)(sub_1001A05A8, v56, v75, v61, v64);
  swift_release(v56);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v36, v63);
  v94 = v61;
  v95 = &protocol witness table for _AppearanceActionModifier;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v38);
  v65 = v76;
  sub_100092E98(v62, v38, v76);
  v66 = *(void (**)(uint64_t, uint64_t))(v79 + 8);
  v66(v62, v38);
  sub_1000903EC(v65, v38, v88);
  return ((uint64_t (*)(uint64_t, uint64_t))v66)(v65, v38);
}

uint64_t sub_10019FE2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t TupleTypeMetadata2;
  uint64_t v11;
  uint64_t WitnessTable;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[16];
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;

  v42 = a3;
  v49 = a4;
  v6 = type metadata accessor for NamedCoordinateSpace(0);
  v47 = *(_QWORD *)(v6 - 8);
  v48 = v6;
  __chkstk_darwin(v6, v7);
  v43 = (char *)&v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100007FAC(&qword_100325698);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v9, a2, 0, 0);
  v11 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v11);
  v13 = type metadata accessor for VStack(0, v11, WitnessTable);
  v45 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v42 - v15;
  v17 = sub_100007FAC(&qword_1003256A0);
  v18 = type metadata accessor for ModifiedContent(255, v13, v17);
  v44 = v18;
  v19 = sub_100007FAC(&qword_1003256A8);
  v20 = type metadata accessor for ModifiedContent(0, v18, v19);
  v46 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20, v21);
  v24 = (char *)&v42 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __chkstk_darwin(v22, v25);
  v28 = (char *)&v42 - v27;
  v29 = v42;
  v51 = a2;
  v52 = v42;
  v53 = a1;
  v30 = static HorizontalAlignment.center.getter(v26);
  VStack.init(alignment:spacing:content:)(v30, 0, 0, sub_1001A0664, v50, v11, WitnessTable);
  v58 = *(_OWORD *)(a1 + 56);
  v31 = (uint64_t)v43;
  static CoordinateSpaceProtocol<>.named<A>(_:)(&v58, &type metadata for String, &protocol witness table for String);
  v32 = swift_allocObject(&unk_1002F6238, 112, 7);
  *(_QWORD *)(v32 + 16) = a2;
  *(_QWORD *)(v32 + 24) = v29;
  v33 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v32 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v32 + 80) = v33;
  *(_OWORD *)(v32 + 96) = *(_OWORD *)(a1 + 64);
  v34 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v32 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v32 + 48) = v34;
  sub_1001A04B8((_QWORD *)a1);
  v35 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v13);
  v36 = sub_1001A06D4();
  sub_10002E6BC(v31, (uint64_t)sub_1001A06B0, v32, v13, (uint64_t)&type metadata for ExplorerScrollContentFrame, v35, v36, (uint64_t)v24);
  swift_release(v32);
  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v31, v48);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v16, v13);
  v37 = sub_1000084FC(&qword_1003256B0, &qword_1003256A0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v56 = v35;
  v57 = v37;
  v38 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v44);
  v39 = sub_1000084FC(&qword_1003256B8, &qword_1003256A8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v54 = v38;
  v55 = v39;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v20);
  sub_100092E98((uint64_t)v24, v20, (uint64_t)v28);
  v40 = *(void (**)(char *, uint64_t))(v46 + 8);
  v40(v24, v20);
  sub_1000903EC((uint64_t)v28, v20, v49);
  return ((uint64_t (*)(char *, uint64_t))v40)(v28, v20);
}

_QWORD *sub_1001A0198@<X0>(double *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  __n128 v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  _QWORD v23[4];
  _QWORD v24[2];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33[2];
  _OWORD v34[8];
  _OWORD v35[9];

  v23[1] = a4;
  v7 = *(_QWORD *)(a2 - 8);
  v8 = __chkstk_darwin(a1, a2);
  v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  v13 = (char *)v23 - v12;
  v15 = static Color.clear.getter(v14);
  v16 = a1[2];
  v17 = static Alignment.center.getter(v15);
  sub_1001338AC(0.0, 1, 0.0, 1, INFINITY, 0, v16, 0, (uint64_t)v34, 0.0, 1, v16, 0, v17, v18, v15, 0, 1);
  swift_release(v15);
  v19 = (void (*)(uint64_t))*((_QWORD *)a1 + 5);
  v20 = Namespace.wrappedValue.getter(*((_QWORD *)a1 + 9));
  v19(v20);
  sub_100092E98((uint64_t)v10, a2, (uint64_t)v13);
  v21 = *(void (**)(char *, uint64_t))(v7 + 8);
  v21(v10, a2);
  v29 = v34[4];
  v30 = v34[5];
  v31 = v34[6];
  v32 = v34[7];
  v25 = v34[0];
  v26 = v34[1];
  v27 = v34[2];
  v28 = v34[3];
  v33[0] = (uint64_t)&v25;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v10, v13, a2);
  v33[1] = (uint64_t)v10;
  sub_100031A88(v34);
  v24[0] = sub_100003DB8(&qword_100325698);
  v24[1] = a2;
  v23[2] = sub_1001A0718();
  v23[3] = a3;
  sub_10009058C(v33, 2uLL, (uint64_t)v24);
  v21(v13, a2);
  sub_100042AD0(v34);
  v21(v10, a2);
  v35[4] = v29;
  v35[5] = v30;
  v35[6] = v31;
  v35[7] = v32;
  v35[0] = v25;
  v35[1] = v26;
  v35[2] = v27;
  v35[3] = v28;
  return sub_100042AD0(v35);
}

uint64_t sub_1001A0398()
{
  uint64_t v0;

  v0 = static Animation.default.getter();
  withAnimation<A>(_:_:)(v0, sub_1001A0604);
  return swift_release(v0);
}

uint64_t sub_1001A03F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  v8 = Namespace.wrappedValue.getter(*(_QWORD *)(a2 + 72));
  v3 = static UnitPoint.bottom.getter(v8, v2);
  v5 = v4;
  v6 = sub_1001A0620();
  return ScrollViewProxy.scrollTo<A>(_:anchor:)(&v8, *(_QWORD *)&v3, v5, 0, &type metadata for Namespace.ID, v6);
}

uint64_t sub_1001A0468@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10019F514(a1, a2);
}

uint64_t sub_1001A04AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10019F80C(a1, v2 + 32, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

_QWORD *sub_1001A04B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[8];
  swift_retain(*a1);
  swift_retain(v2);
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t sub_1001A050C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10019FE2C(v1[4], v1[2], v1[3], a1);
}

uint64_t sub_1001A0518()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v1 = type metadata accessor for ScrollViewProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v3 | 7;
  v6 = (*(_QWORD *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  v7 = v6 + 80;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  v8 = (_QWORD *)(v0 + v6);
  swift_release(*v8);
  swift_release(v8[4]);
  swift_release(v8[6]);
  swift_bridgeObjectRelease(v8[8]);
  return swift_deallocObject(v0, v7, v5);
}

uint64_t sub_1001A05A8()
{
  type metadata accessor for ScrollViewProxy(0);
  return sub_1001A0398();
}

uint64_t sub_1001A0604()
{
  uint64_t v0;

  return sub_1001A03F8(*(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40));
}

unint64_t sub_1001A0620()
{
  unint64_t result;

  result = qword_1003256C0;
  if (!qword_1003256C0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for Namespace.ID, &type metadata for Namespace.ID);
    atomic_store(result, (unint64_t *)&qword_1003256C0);
  }
  return result;
}

_QWORD *sub_1001A0664@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001A0198(*(double **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1001A0674()
{
  _QWORD *v0;

  swift_release(v0[4]);
  swift_release(v0[8]);
  swift_release(v0[10]);
  swift_bridgeObjectRelease(v0[12]);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_1001A06B0(double a1, double a2, double a3, double a4)
{
  uint64_t v4;
  uint64_t (*v5)(double);
  CGFloat MinY;

  v5 = *(uint64_t (**)(double))(v4 + 56);
  MinY = CGRectGetMinY(*(CGRect *)&a1);
  return v5(MinY);
}

unint64_t sub_1001A06D4()
{
  unint64_t result;

  result = qword_1003256C8;
  if (!qword_1003256C8)
  {
    result = swift_getWitnessTable(&unk_10025B40C, &type metadata for ExplorerScrollContentFrame);
    atomic_store(result, (unint64_t *)&qword_1003256C8);
  }
  return result;
}

unint64_t sub_1001A0718()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003256D0;
  if (!qword_1003256D0)
  {
    v1 = sub_100007FAC(&qword_100325698);
    sub_1000084FC(&qword_1003256D8, &qword_1003256E0, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003256D0);
  }
  return result;
}

ValueMetadata *type metadata accessor for ExplorerScrollContentFrame()
{
  return &type metadata for ExplorerScrollContentFrame;
}

uint64_t sub_1001A07AC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t TupleTypeMetadata2;
  uint64_t v4;
  uint64_t WitnessTable;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = *a1;
  v2 = sub_100007FAC(&qword_100325698);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, v2, v1, 0, 0);
  v4 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v4);
  v6 = type metadata accessor for VStack(255, v4, WitnessTable);
  v7 = sub_100007FAC(&qword_1003256A0);
  v8 = type metadata accessor for ModifiedContent(255, v6, v7);
  v9 = sub_100007FAC(&qword_1003256A8);
  v10 = type metadata accessor for ModifiedContent(255, v8, v9);
  v25 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v6);
  v26 = sub_1000084FC(&qword_1003256B0, &qword_1003256A0, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v23 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
  v24 = sub_1000084FC(&qword_1003256B8, &qword_1003256A8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  v12 = type metadata accessor for ScrollView(255, v10, v11);
  v13 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v12);
  v21 = v12;
  v22 = v13;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v21, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 0);
  v21 = v12;
  v22 = v13;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v21, &opaque type descriptor for <<opaque return type of View.scrollClipDisabled(_:)>>, 1);
  v21 = OpaqueTypeMetadata2;
  v22 = OpaqueTypeConformance2;
  v16 = swift_getOpaqueTypeMetadata2(255, &v21, &opaque type descriptor for <<opaque return type of View.coordinateSpace(_:)>>, 0);
  v17 = type metadata accessor for ModifiedContent(255, v16, &type metadata for _AppearanceActionModifier);
  v21 = OpaqueTypeMetadata2;
  v22 = OpaqueTypeConformance2;
  swift_getOpaqueTypeConformance2(&v21, &opaque type descriptor for <<opaque return type of View.coordinateSpace(_:)>>, 1);
  v18 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v17);
  v19 = type metadata accessor for ScrollViewReader(255, v17, v18);
  return swift_getWitnessTable(&protocol conformance descriptor for ScrollViewReader<A>, v19);
}

double sub_1001A09E4()
{
  double result;

  result = 0.0;
  xmmword_1003255F8 = 0u;
  unk_100325608 = 0u;
  return result;
}

double sub_1001A09F8@<D0>(_OWORD *a1@<X8>)
{
  double result;
  __int128 v3;

  if (qword_100315950 != -1)
    swift_once(&qword_100315950, sub_1001A09E4);
  result = *(double *)&xmmword_1003255F8;
  v3 = unk_100325608;
  *a1 = xmmword_1003255F8;
  a1[1] = v3;
  return result;
}

BOOL sub_1001A0A4C(CGFloat *a1, void (*a2)(CGRect *__return_ptr))
{
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  _BOOL8 result;
  CGRect v8;
  CGRect v9;

  a2(&v8);
  x = v8.origin.x;
  y = v8.origin.y;
  width = v8.size.width;
  height = v8.size.height;
  v9.origin.x = 0.0;
  v9.origin.y = 0.0;
  v9.size.width = 0.0;
  v9.size.height = 0.0;
  result = CGRectEqualToRect(v8, v9);
  if (!result)
  {
    *a1 = x;
    a1[1] = y;
    a1[2] = width;
    a1[3] = height;
  }
  return result;
}

double ConnectionAssistantSatellite.init(radius:angle:pointHeight:color:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>)
{
  __int128 v7;
  __int128 v8;
  __int128 v9;
  double result;
  __int128 v11;
  _OWORD v12[9];
  __int16 v13;

  sub_1001A13F8(a1, (uint64_t)v12, a3, a4, a5);

  v7 = v12[7];
  *(_OWORD *)(a2 + 96) = v12[6];
  *(_OWORD *)(a2 + 112) = v7;
  *(_OWORD *)(a2 + 128) = v12[8];
  *(_WORD *)(a2 + 144) = v13;
  v8 = v12[3];
  *(_OWORD *)(a2 + 32) = v12[2];
  *(_OWORD *)(a2 + 48) = v8;
  v9 = v12[5];
  *(_OWORD *)(a2 + 64) = v12[4];
  *(_OWORD *)(a2 + 80) = v9;
  result = *(double *)v12;
  v11 = v12[1];
  *(_OWORD *)a2 = v12[0];
  *(_OWORD *)(a2 + 16) = v11;
  return result;
}

void ConnectionAssistantSatellite.cone(camera:earth:)(float32x4_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  float *v3;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  double v17;
  double v18;
  char v19;
  __float2 v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  float32x4_t v28;
  float32x4_t v29;
  int32x4_t v30;
  int8x16_t v31;
  float32x4_t v32;
  float32x4_t v33;
  double v34;
  float v35;
  float v36;
  float v37;
  float32x2_t v38;
  float v39;
  float32x2_t v40;
  float32x4_t v41;
  __int128 v42;
  __int128 v43;
  _BYTE v44[112];
  unsigned int v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  __int128 v51;
  __int128 v52;
  char v53;
  char v54;

  sub_1001A14DC((uint64_t)(v3 + 12), (uint64_t)v44);
  sub_1001A14DC((uint64_t)v44, (uint64_t)&v45);
  v7 = v54;
  if ((v54 & 1) != 0)
  {
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0uLL;
    v14 = 0uLL;
    v15 = 0uLL;
    v16 = 0uLL;
  }
  else
  {
    v8 = v45;
    v17 = v46;
    v18 = v47;
    v9 = v48;
    v10 = v49;
    v11 = v50;
    v42 = v52;
    v43 = v51;
    v19 = v53;
    v41 = a1[5];
    v20 = __sincosf_stret(v3[1] * -0.5);
    v21 = vmulq_n_f32(v41, v20.__sinval);
    v22 = v21;
    v22.i32[3] = LODWORD(v20.__cosval);
    v23 = a1[7];
    v24 = vmulq_f32(v22, (float32x4_t)xmmword_100252120);
    v25 = (int32x4_t)vnegq_f32(v24);
    v26 = (int8x16_t)vtrn2q_s32((int32x4_t)v24, vtrn1q_s32((int32x4_t)v24, v25));
    v27 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v25, 8uLL), *(float32x2_t *)v23.f32, 1), (float32x4_t)vextq_s8(v26, v26, 8uLL), v23.f32[0]);
    v28 = (float32x4_t)vrev64q_s32((int32x4_t)v24);
    v28.i32[0] = v25.i32[1];
    v28.i32[3] = v25.i32[2];
    v29 = vmlaq_laneq_f32(v27, v28, v23, 2);
    v30 = (int32x4_t)vnegq_f32(v29);
    v31 = (int8x16_t)vtrn2q_s32((int32x4_t)v29, vtrn1q_s32((int32x4_t)v29, v30));
    v32 = (float32x4_t)vrev64q_s32((int32x4_t)v29);
    v32.i32[0] = v30.i32[1];
    v32.i32[3] = v30.i32[2];
    v33 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v29, v22, 3), v32, v21, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v29, (int8x16_t)v30, 8uLL), *(float32x2_t *)v21.f32, 1), (float32x4_t)vextq_s8(v31, v31, 8uLL), v21.f32[0]));
    v39 = *v3;
    v40 = *(float32x2_t *)v33.f32;
    v41.i32[0] = vmuls_lane_f32(*v3, v33, 2);
    v34 = ConnectionAssistantEarth.direction(for:)(v17, v18);
    v36 = *(float *)(a2 + 68);
    v37 = v36 * (float)(0.0 - v35);
    v38 = vmul_n_f32(v40, v39);
    *(float32x2_t *)&v14 = vsub_f32(vmul_n_f32(vsub_f32(0, *(float32x2_t *)&v34), v36), v38);
    *(float32x2_t *)&v13 = v38;
    *((_QWORD *)&v13 + 1) = v41.u32[0];
    *((float *)&v14 + 2) = v37 - v41.f32[0];
    v16 = v42;
    v15 = v43;
    HIDWORD(v14) = 0;
    v12 = v19 & 1;
  }
  *(_OWORD *)a3 = v13;
  *(_OWORD *)(a3 + 16) = v14;
  *(_QWORD *)(a3 + 32) = v8;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = v9;
  *(_QWORD *)(a3 + 56) = v10;
  *(_QWORD *)(a3 + 64) = v11;
  *(_QWORD *)(a3 + 72) = 0;
  *(_OWORD *)(a3 + 80) = v15;
  *(_OWORD *)(a3 + 96) = v16;
  *(_BYTE *)(a3 + 112) = v12;
  *(_BYTE *)(a3 + 113) = v7;
}

float32x2_t ConnectionAssistantSatellite.center(camera:earthCenter:)(float32x4_t *a1, float32x2_t a2)
{
  float *v2;
  __float2 v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  float32x4_t v8;
  int32x4_t v9;
  int8x16_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v13;
  int32x4_t v14;
  int8x16_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v19;

  v19 = a1[5];
  v4 = __sincosf_stret(v2[1] * -0.5);
  v5 = vmulq_n_f32(v19, v4.__sinval);
  v6 = v5;
  v6.i32[3] = LODWORD(v4.__cosval);
  v7 = a1[7];
  v8 = vmulq_f32(v6, (float32x4_t)xmmword_100252120);
  v9 = (int32x4_t)vnegq_f32(v8);
  v10 = (int8x16_t)vtrn2q_s32((int32x4_t)v8, vtrn1q_s32((int32x4_t)v8, v9));
  v11 = vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v8, (int8x16_t)v9, 8uLL), *(float32x2_t *)v7.f32, 1);
  v12 = (float32x4_t)vrev64q_s32((int32x4_t)v8);
  v12.i32[0] = v9.i32[1];
  v12.i32[3] = v9.i32[2];
  v13 = vmlaq_laneq_f32(vmlaq_n_f32(v11, (float32x4_t)vextq_s8(v10, v10, 8uLL), v7.f32[0]), v12, v7, 2);
  v14 = (int32x4_t)vnegq_f32(v13);
  v15 = (int8x16_t)vtrn2q_s32((int32x4_t)v13, vtrn1q_s32((int32x4_t)v13, v14));
  v16 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v13, (int8x16_t)v14, 8uLL), *(float32x2_t *)v5.f32, 1), (float32x4_t)vextq_s8(v15, v15, 8uLL), v5.f32[0]);
  v17 = (float32x4_t)vrev64q_s32((int32x4_t)v13);
  v17.i32[0] = v14.i32[1];
  v17.i32[3] = v14.i32[2];
  return vadd_f32(a2, vmul_n_f32((float32x2_t)*(_OWORD *)&vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v13, v6, 3), v17, v5, 2), v16), *v2));
}

double ConnectionAssistantSatellite.model(projectedCenter:textureSize:camera:)(uint64_t a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v4;
  float v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  __float2 v11;
  __n128 v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  BOOL v17;
  float v18;
  float v19;
  float v20;
  unsigned int v21;
  unint64_t v22;
  float32x4_t v23;
  float32x4_t v24;
  unsigned int v25;
  float32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  double result;

  v7 = *(float *)(v4 + 8);
  v8 = *(_QWORD *)a3;
  v9 = *(_QWORD *)(a3 + 8);
  v10 = ConnectionAssistantCamera.Viewport.normalizedPointSize.getter(*(_QWORD *)a3, v9, *(double *)(a3 + 16));
  v11 = __sincosf_stret(*(float *)(v4 + 4) * 0.5);
  v12 = (__n128)vmulq_n_f32((float32x4_t)xmmword_1002520E0, v11.__sinval);
  v12.n128_u32[3] = LODWORD(v11.__cosval);
  *(double *)v13.i64 = simd_float4x4.init(_:)(v12);
  if (v8)
    v17 = v9 == 0;
  else
    v17 = 1;
  v18 = 1.0;
  v19 = 1.0;
  if (!v17)
  {
    v20 = (float)v8 / (float)v9;
    v18 = fminf(v20, 1.0);
    v19 = fmaxf(v20, 1.0);
  }
  *(float *)&v21 = 1.0 / v19;
  LODWORD(v22) = 0;
  *((float *)&v22 + 1) = 1.0 / (float)(1.0 / v18);
  v23 = vmulq_n_f32((float32x4_t)v21, *(float *)&a4);
  v24 = vaddq_f32(vmlaq_f32((float32x4_t)v21, (float32x4_t)0, (float32x4_t)v22), (float32x4_t)0);
  *(float *)&v25 = *(float *)&v21 * 0.0;
  v26 = vaddq_f32(vaddq_f32((float32x4_t)v22, (float32x4_t)COERCE_UNSIGNED_INT(*(float *)&v21 * 0.0)), (float32x4_t)0);
  v27 = vaddq_f32(vmlaq_f32((float32x4_t)v25, (float32x4_t)0, (float32x4_t)v22), (float32x4_t)xmmword_100254AF0);
  v28 = vaddq_f32(vaddq_f32(vmlaq_lane_f32(v23, (float32x4_t)v22, *(float32x2_t *)&a4, 1), (float32x4_t)0), (float32x4_t)xmmword_100252130);
  *(_QWORD *)&result = vmlaq_f32(vmlaq_f32(vmlaq_f32(vmulq_n_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, v13.f32[0]), v26, *(float32x2_t *)v13.f32, 1), v27, v13, 2), v28, v13, 3), (float)((float)((float)(v7 / (float)((float)a2 / (float)a1)) * 3.0) * 0.5) * v10), (float32x4_t)0, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, v14.f32[0]), v26, *(float32x2_t *)v14.f32, 1), v27, v14,
                                 2),
                               v28,
                               v14,
                               3)),
                           (float32x4_t)0,
                           vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, v15.f32[0]), v26, *(float32x2_t *)v15.f32, 1), v27, v15, 2), v28, v15, 3)), (float32x4_t)0, vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, v16.f32[0]), v26, *(float32x2_t *)v16.f32, 1), v27, v16, 2), v28, v16, 3)).u64[0];
  return result;
}

uint64_t sub_1001A0FB4(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[6];
  char v12;
  _OWORD v13[6];
  char v14;

  v2 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v2;
  v12 = *(_BYTE *)(a1 + 96);
  v3 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v4;
  v5 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v5;
  v6 = *(_OWORD *)(a2 + 32);
  v7 = *(_OWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 64);
  v9 = *(_OWORD *)(a2 + 80);
  v14 = *(_BYTE *)(a2 + 96);
  v13[4] = v8;
  v13[5] = v9;
  v13[2] = v6;
  v13[3] = v7;
  return sub_1001A116C((uint64_t)v11, (uint64_t)v13) & 1;
}

double ConnectionAssistantSatellite.direction(camera:)(float32x4_t *a1)
{
  uint64_t v1;
  __float2 v3;
  float32x4_t v4;
  float32x4_t v5;
  float32x4_t v6;
  float32x4_t v7;
  int32x4_t v8;
  int8x16_t v9;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  int32x4_t v13;
  int8x16_t v14;
  float32x4_t v15;
  float32x4_t v16;
  double result;
  float32x4_t v18;

  v18 = a1[5];
  v3 = __sincosf_stret(*(float *)(v1 + 4) * -0.5);
  v4 = vmulq_n_f32(v18, v3.__sinval);
  v5 = v4;
  v5.i32[3] = LODWORD(v3.__cosval);
  v6 = a1[7];
  v7 = vmulq_f32(v5, (float32x4_t)xmmword_100252120);
  v8 = (int32x4_t)vnegq_f32(v7);
  v9 = (int8x16_t)vtrn2q_s32((int32x4_t)v7, vtrn1q_s32((int32x4_t)v7, v8));
  v10 = vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v7, (int8x16_t)v8, 8uLL), *(float32x2_t *)v6.f32, 1);
  v11 = (float32x4_t)vrev64q_s32((int32x4_t)v7);
  v11.i32[0] = v8.i32[1];
  v11.i32[3] = v8.i32[2];
  v12 = vmlaq_laneq_f32(vmlaq_n_f32(v10, (float32x4_t)vextq_s8(v9, v9, 8uLL), v6.f32[0]), v11, v6, 2);
  v13 = (int32x4_t)vnegq_f32(v12);
  v14 = (int8x16_t)vtrn2q_s32((int32x4_t)v12, vtrn1q_s32((int32x4_t)v12, v13));
  v15 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v12, (int8x16_t)v13, 8uLL), *(float32x2_t *)v4.f32, 1), (float32x4_t)vextq_s8(v14, v14, 8uLL), v4.f32[0]);
  v16 = (float32x4_t)vrev64q_s32((int32x4_t)v12);
  v16.i32[0] = v13.i32[1];
  v16.i32[3] = v13.i32[2];
  *(_QWORD *)&result = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v12, v5, 3), v16, v4, 2), v15).u64[0];
  return result;
}

uint64_t sub_1001A10DC(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _OWORD v11[9];
  __int16 v12;
  _OWORD v13[9];
  __int16 v14;

  v2 = *(_OWORD *)(a1 + 112);
  v11[6] = *(_OWORD *)(a1 + 96);
  v11[7] = v2;
  v11[8] = *(_OWORD *)(a1 + 128);
  v12 = *(_WORD *)(a1 + 144);
  v3 = *(_OWORD *)(a1 + 48);
  v11[2] = *(_OWORD *)(a1 + 32);
  v11[3] = v3;
  v4 = *(_OWORD *)(a1 + 80);
  v11[4] = *(_OWORD *)(a1 + 64);
  v11[5] = v4;
  v5 = *(_OWORD *)(a1 + 16);
  v11[0] = *(_OWORD *)a1;
  v11[1] = v5;
  v6 = *(_OWORD *)(a2 + 112);
  v13[6] = *(_OWORD *)(a2 + 96);
  v13[7] = v6;
  v13[8] = *(_OWORD *)(a2 + 128);
  v14 = *(_WORD *)(a2 + 144);
  v7 = *(_OWORD *)(a2 + 48);
  v13[2] = *(_OWORD *)(a2 + 32);
  v13[3] = v7;
  v8 = *(_OWORD *)(a2 + 80);
  v13[4] = *(_OWORD *)(a2 + 64);
  v13[5] = v8;
  v9 = *(_OWORD *)(a2 + 16);
  v13[0] = *(_OWORD *)a2;
  v13[1] = v9;
  return _s8SOSBuddy28ConnectionAssistantSatelliteV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v11, (uint64_t)v13) & 1;
}

uint64_t sub_1001A116C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  BOOL v5;
  uint64_t v6;
  float v7;
  float v8;
  __int128 v10;
  __int128 v11;

  if (*(float *)a1 != *(float *)a2
    || *(double *)(a1 + 8) != *(double *)(a2 + 8)
    || *(double *)(a1 + 16) != *(double *)(a2 + 16))
  {
    return 0;
  }
  v2 = 0;
  v3 = *(_OWORD *)(a1 + 32);
  v4 = *(_OWORD *)(a2 + 32);
  while (1)
  {
    v10 = v3;
    v7 = *(float *)((unint64_t)&v10 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v11 = v4;
    v8 = *(float *)((unint64_t)&v11 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v5 = v7 == v8;
    if (v2 == 3)
      break;
    while (1)
    {
      ++v2;
      if (v5)
        break;
      v5 = 0;
      v6 = 0;
      if (v2 == 3)
        return v6;
    }
  }
  if (v7 != v8 || *(float *)(a1 + 48) != *(float *)(a2 + 48))
    return 0;
  if ((*(_BYTE *)(a1 + 96) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 96) & 1) == 0)
      return 0;
  }
  else if ((*(_BYTE *)(a2 + 96) & 1) != 0
         || !_s8SOSBuddy23ConnectionAssistantConeV5PulseV23__derived_struct_equalsySbAE_AEtFZ_0(*(float *)(a1 + 64), *(__n128 *)(a1 + 80), COERCE_FLOAT(*(_QWORD *)(a2 + 64)), *(__n128 *)(a2 + 80)))
  {
    return 0;
  }
  return 1;
}

uint64_t _s8SOSBuddy28ConnectionAssistantSatelliteV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  BOOL v5;
  uint64_t v6;
  float v7;
  float v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v25;
  __int128 v26;
  int v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  __int128 v32;
  __int128 v33;
  char v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  __int128 v40;
  __int128 v41;
  char v42;

  if (*(float *)a1 != *(float *)a2
    || *(float *)(a1 + 4) != *(float *)(a2 + 4)
    || *(float *)(a1 + 8) != *(float *)(a2 + 8))
  {
    return 0;
  }
  v2 = 0;
  v3 = *(_OWORD *)(a1 + 16);
  v4 = *(_OWORD *)(a2 + 16);
  while (1)
  {
    v25 = v3;
    v7 = *(float *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v26 = v4;
    v8 = *(float *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v5 = v7 == v8;
    if (v2 == 3)
      break;
    while (1)
    {
      ++v2;
      if (v5)
        break;
      v5 = 0;
      v6 = 0;
      if (v2 == 3)
        return v6;
    }
  }
  if (v7 != v8 || *(float *)(a1 + 32) != *(float *)(a2 + 32))
    return 0;
  if ((*(_BYTE *)(a1 + 145) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 145) & 1) == 0)
      return 0;
  }
  else
  {
    if ((*(_BYTE *)(a2 + 145) & 1) != 0)
      return 0;
    v9 = *(_OWORD *)(a1 + 56);
    v10 = *(_OWORD *)(a1 + 112);
    v11 = *(_OWORD *)(a1 + 128);
    v12 = *(_BYTE *)(a1 + 144);
    v13 = *(_QWORD *)(a2 + 48);
    v14 = *(_OWORD *)(a2 + 56);
    v15 = *(_QWORD *)(a2 + 80);
    v16 = *(_QWORD *)(a2 + 88);
    v17 = *(_QWORD *)(a2 + 96);
    v18 = *(_OWORD *)(a2 + 112);
    v19 = *(_OWORD *)(a2 + 128);
    v20 = *(_BYTE *)(a2 + 144);
    v22 = *(_QWORD *)(a1 + 88);
    v21 = *(_QWORD *)(a1 + 96);
    v23 = *(_QWORD *)(a1 + 80);
    v27 = *(_QWORD *)(a1 + 48);
    v28 = v9;
    v29 = v23;
    v30 = v22;
    v31 = v21;
    v32 = v10;
    v33 = v11;
    v34 = v12 & 1;
    v35 = v13;
    v36 = v14;
    v37 = v15;
    v38 = v16;
    v39 = v17;
    v40 = v18;
    v41 = v19;
    v42 = v20 & 1;
    if ((sub_1001A116C((uint64_t)&v27, (uint64_t)&v35) & 1) == 0)
      return 0;
  }
  return 1;
}

id sub_1001A13F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, float a4@<S1>, float a5@<S2>)
{
  id result;
  float64x2_t v10;
  float64x2_t v11;
  float64_t v12;
  float64_t v13;
  float64_t v14;
  float64_t v15;

  v14 = 0.0;
  v15 = 0.0;
  v12 = 0.0;
  v13 = 0.0;
  result = objc_msgSend(a1, "getRed:green:blue:alpha:", &v15, &v14, &v13, &v12);
  v10.f64[0] = v15;
  v11.f64[0] = v13;
  v10.f64[1] = v14;
  v11.f64[1] = v12;
  *(float *)a2 = a3;
  *(float *)(a2 + 4) = a4;
  *(float *)(a2 + 8) = a5;
  *(float32x4_t *)(a2 + 16) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v10), v11);
  *(_DWORD *)(a2 + 32) = 1065353216;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_WORD *)(a2 + 144) = 256;
  return result;
}

uint64_t sub_1001A14DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_1003256E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

__n128 initializeWithCopy for ConnectionAssistantSatellite(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 128);
  *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantSatellite(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 146))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantSatellite(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 144) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 146) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantSatellite()
{
  return &type metadata for ConnectionAssistantSatellite;
}

__n128 initializeWithCopy for ConnectionAssistantSatellite.Cone(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantSatellite.Cone(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 97))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantSatellite.Cone(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 96) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 97) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantSatellite.Cone()
{
  return &type metadata for ConnectionAssistantSatellite.Cone;
}

id sub_1001A1680@<X0>(void *a1@<X0>, uint64_t a2@<X8>, float a3@<S0>, double a4@<D1>, double a5@<D2>)
{
  id result;
  float64x2_t v10;
  float64x2_t v11;
  float64_t v12;
  float64_t v13;
  float64_t v14;
  float64_t v15;

  v14 = 0.0;
  v15 = 0.0;
  v12 = 0.0;
  v13 = 0.0;
  result = objc_msgSend(a1, "getRed:green:blue:alpha:", &v15, &v14, &v13, &v12);
  v10.f64[0] = v15;
  v11.f64[0] = v13;
  v10.f64[1] = v14;
  v11.f64[1] = v12;
  *(float *)a2 = a3;
  *(double *)(a2 + 8) = a4;
  *(double *)(a2 + 16) = a5;
  *(float32x4_t *)(a2 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v10), v11);
  *(_DWORD *)(a2 + 48) = 1065353216;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_BYTE *)(a2 + 96) = 1;
  return result;
}

ValueMetadata *type metadata accessor for TryOutIntroView()
{
  return &type metadata for TryOutIntroView;
}

uint64_t sub_1001A176C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029DD74, 1);
}

_QWORD *sub_1001A177C@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_100187A80();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for _TryOutViewEmbeddedPresentationEnvironmentKey, &type metadata for _TryOutViewEmbeddedPresentationEnvironmentKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_1001A17C8(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_100187A80();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for _TryOutViewEmbeddedPresentationEnvironmentKey, &type metadata for _TryOutViewEmbeddedPresentationEnvironmentKey, v1);
}

double sub_1001A1810(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t KeyPath;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  double result;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;

  v21 = a1;
  v22 = a2;
  v4 = sub_100003DB8(&qword_10031F198);
  State.projectedValue.getter(&v16, v4);
  v5 = v16;
  v15 = v17;
  KeyPath = swift_getKeyPath(&unk_10025B548);
  v7 = type metadata accessor for UIMetrics();
  v8 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v16 = EnvironmentObject.init()(v7, v8);
  *(_QWORD *)&v17 = v9;
  *((_QWORD *)&v17 + 1) = KeyPath;
  v18 = 0;
  v19 = v5;
  v20 = v15;
  v10 = swift_allocObject(&unk_1002F6498, 32, 7);
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v10 + 24) = a2;
  swift_retain(a2);
  swift_bridgeObjectRetain(a1);
  v11 = sub_100003DB8(&qword_1003256F8);
  v12 = sub_1001A1D7C();
  v13 = sub_1001A1DC0();
  View.navigationDestination<A, B>(for:destination:)(&type metadata for String, sub_1001A1FD8, v10, &type metadata for TryOutIntroductionView, &type metadata for String, v11, v12, &protocol witness table for String, v13);
  swift_release(v10);
  swift_release(v16);
  sub_100040294(*((uint64_t *)&v17 + 1), v18);
  swift_release(v19);
  swift_release(v20);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*((_QWORD *)&v20 + 1)).n128_u64[0];
  return result;
}

uint64_t sub_1001A198C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t result;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;
  _BYTE v39[32];
  __int128 v40;
  __int128 v41;
  char v42;

  v3 = *a1;
  v4 = a1[1];
  if (*a1 == 0xD000000000000024 && v4 == 0x8000000100263860
    || (_stringCompareWithSmolCheck(_:_:expecting:)(*a1, v4, 0xD000000000000024, 0x8000000100263860, 0) & 1) != 0)
  {
    v5 = sub_100003DB8(&qword_10031F198);
    State.projectedValue.getter(v39, v5);
    v6 = *(_QWORD *)v39;
    v30 = *(_OWORD *)&v39[8];
    KeyPath = swift_getKeyPath(&unk_10025B548);
    v8 = type metadata accessor for UIMetrics();
    v9 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v31 = EnvironmentObject.init()(v8, v9);
    v32 = v10;
    v33 = KeyPath;
    v34 = 0;
    v35 = v6;
    v36 = v30;
    v37 = 0;
    v38 = 0;
  }
  else
  {
    if (v3 != 0xD000000000000024 || v4 != 0x8000000100267AC0)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v4, 0xD000000000000024, 0x8000000100267AC0, 0);
      if ((result & 1) == 0)
      {
        v14 = 0uLL;
        v18 = -1;
        v15 = 0uLL;
        v16 = 0uLL;
        v17 = 0uLL;
        goto LABEL_6;
      }
    }
    v19 = type metadata accessor for AppEvents();
    v20 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    v21 = EnvironmentObject.init()(v19, v20);
    v23 = v22;
    v24 = type metadata accessor for UIMetrics();
    v25 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v26 = EnvironmentObject.init()(v24, v25);
    v28 = v27;
    v29 = swift_getKeyPath(&unk_10025B548);
    LOBYTE(v31) = 0;
    State.init(wrappedValue:)(v39, &v31, &type metadata for Bool);
    v31 = v21;
    v32 = v23;
    v33 = v26;
    v34 = v28;
    v35 = v29;
    *(_QWORD *)&v36 = 0;
    *((_QWORD *)&v36 + 1) = v39[0];
    v37 = *(_QWORD *)&v39[8];
    v38 = 1;
  }
  v11 = sub_1001A1E90();
  v12 = sub_1001A1ED4();
  result = _ConditionalContent<>.init(storage:)(&v31, &type metadata for TryOutQuestionnaireIntroView, &type metadata for TryOutMessagesIntroView, v11, v12);
  v14 = *(_OWORD *)v39;
  v15 = *(_OWORD *)&v39[16];
  v16 = v40;
  v17 = v41;
  v18 = v42;
LABEL_6:
  *(_OWORD *)a2 = v14;
  *(_OWORD *)(a2 + 16) = v15;
  *(_OWORD *)(a2 + 32) = v16;
  *(_OWORD *)(a2 + 48) = v17;
  *(_BYTE *)(a2 + 64) = v18;
  return result;
}

uint64_t sub_1001A1C08()
{
  ValueMetadata **v0;
  ValueMetadata *v1;
  ValueMetadata *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t OpaqueTypeConformance2;
  char v14[16];
  ValueMetadata *v15;
  ValueMetadata *v16;
  ValueMetadata *v17;
  __int128 v18;
  unint64_t v19;
  void *v20;
  unint64_t v21;
  ValueMetadata *v22;
  __int128 v23;

  v2 = v0[1];
  v22 = *v0;
  v1 = v22;
  *(_QWORD *)&v23 = v2;
  v3 = sub_100003DB8(&qword_10031F198);
  State.projectedValue.getter(&v17, v3);
  v22 = v17;
  v23 = v18;
  v15 = v1;
  v16 = v2;
  v4 = sub_100003DB8(&qword_100317980);
  v5 = sub_100003DB8(&qword_1003256F0);
  v6 = sub_1000084FC(&qword_10031F1A8, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
  v7 = sub_1000084FC(&qword_100319618, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
  v8 = sub_1000084FC(&qword_10031F1B0, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
  v9 = sub_100007FAC(&qword_1003256F8);
  v10 = sub_1001A1D7C();
  v11 = sub_1001A1DC0();
  v17 = &type metadata for TryOutIntroductionView;
  *(_QWORD *)&v18 = &type metadata for String;
  *((_QWORD *)&v18 + 1) = v9;
  v19 = v10;
  v20 = &protocol witness table for String;
  v21 = v11;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v17, &opaque type descriptor for <<opaque return type of View.navigationDestination<A, B>(for:destination:)>>, 1);
  return NavigationStack.init<>(path:root:)(&v22, sub_1001A1D74, v14, v4, v5, v6, v7, v8, OpaqueTypeConformance2, &protocol witness table for String);
}

double sub_1001A1D74()
{
  uint64_t v0;

  return sub_1001A1810(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_1001A1D7C()
{
  unint64_t result;

  result = qword_100325700;
  if (!qword_100325700)
  {
    result = swift_getWitnessTable(")~\t", &type metadata for TryOutIntroductionView);
    atomic_store(result, (unint64_t *)&qword_100325700);
  }
  return result;
}

unint64_t sub_1001A1DC0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100325708;
  if (!qword_100325708)
  {
    v1 = sub_100007FAC(&qword_1003256F8);
    sub_1001A1E24();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100325708);
  }
  return result;
}

unint64_t sub_1001A1E24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100325710;
  if (!qword_100325710)
  {
    v1 = sub_100007FAC(&qword_100325718);
    sub_1001A1E90();
    sub_1001A1ED4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100325710);
  }
  return result;
}

unint64_t sub_1001A1E90()
{
  unint64_t result;

  result = qword_100325720;
  if (!qword_100325720)
  {
    result = swift_getWitnessTable(&unk_100252B90, &type metadata for TryOutQuestionnaireIntroView);
    atomic_store(result, (unint64_t *)&qword_100325720);
  }
  return result;
}

unint64_t sub_1001A1ED4()
{
  unint64_t result;

  result = qword_100325728;
  if (!qword_100325728)
  {
    result = swift_getWitnessTable(&unk_1002565D8, &type metadata for TryOutMessagesIntroView);
    atomic_store(result, (unint64_t *)&qword_100325728);
  }
  return result;
}

_QWORD *sub_1001A1F18@<X0>(_BYTE *a1@<X8>)
{
  unint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v2 = sub_100187A80();
  result = EnvironmentValues.subscript.getter(&v4, &type metadata for _TryOutViewEmbeddedPresentationEnvironmentKey, &type metadata for _TryOutViewEmbeddedPresentationEnvironmentKey, v2);
  *a1 = v4;
  return result;
}

uint64_t sub_1001A1F64(char *a1)
{
  unint64_t v1;
  char v3;

  v3 = *a1;
  v1 = sub_100187A80();
  return EnvironmentValues.subscript.setter(&v3, &type metadata for _TryOutViewEmbeddedPresentationEnvironmentKey, &type metadata for _TryOutViewEmbeddedPresentationEnvironmentKey, v1);
}

uint64_t sub_1001A1FAC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001A1FD8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001A198C(a1, a2);
}

uint64_t sub_1001A1FE0()
{
  return sub_1000084FC(&qword_100325730, &qword_100325738, (uint64_t)&protocol conformance descriptor for NavigationStack<A, B>);
}

uint64_t *sub_1001A200C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = sub_100003DB8(&qword_1003192E0);
  v5 = *(_DWORD *)(*(_QWORD *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v6 = v4;
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
    v8 = *a2;
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      v9 = a2[1];
      a1[1] = v9;
      swift_retain(v8);
      swift_retain(v9);
      v10 = *(int *)(sub_100003DB8(&qword_1003192E8) + 32);
      v11 = (char *)a1 + v10;
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for PresentationMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
      v14 = a1;
      v15 = v6;
      v16 = 1;
    }
    else
    {
      swift_retain(v8);
      v14 = a1;
      v15 = v6;
      v16 = 0;
    }
    swift_storeEnumTagMultiPayload(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_1001A2104(_QWORD *a1)
{
  uint64_t v2;
  int EnumCaseMultiPayload;
  uint64_t result;
  char *v5;
  uint64_t v6;

  v2 = sub_100003DB8(&qword_1003192E0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, v2);
  result = swift_release(*a1);
  if (EnumCaseMultiPayload == 1)
  {
    swift_release(a1[1]);
    v5 = (char *)a1 + *(int *)(sub_100003DB8(&qword_1003192E8) + 32);
    v6 = type metadata accessor for PresentationMode(0);
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
  }
  return result;
}

uint64_t *sub_1001A218C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = sub_100003DB8(&qword_1003192E0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
  v6 = *a2;
  *a1 = *a2;
  if (EnumCaseMultiPayload == 1)
  {
    v7 = a2[1];
    a1[1] = v7;
    swift_retain(v6);
    swift_retain(v7);
    v8 = *(int *)(sub_100003DB8(&qword_1003192E8) + 32);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for PresentationMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
    v12 = 1;
  }
  else
  {
    swift_retain(v6);
    v12 = 0;
  }
  swift_storeEnumTagMultiPayload(a1, v4, v12);
  return a1;
}

uint64_t *sub_1001A2250(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  int EnumCaseMultiPayload;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  if (a1 != a2)
  {
    sub_100007FF0((uint64_t)a1, &qword_1003192E0);
    v4 = sub_100003DB8(&qword_1003192E0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, v4);
    v6 = *a2;
    *a1 = *a2;
    if (EnumCaseMultiPayload == 1)
    {
      v7 = a2[1];
      a1[1] = v7;
      swift_retain(v6);
      swift_retain(v7);
      v8 = *(int *)(sub_100003DB8(&qword_1003192E8) + 32);
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for PresentationMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
      v12 = 1;
    }
    else
    {
      swift_retain(v6);
      v12 = 0;
    }
    swift_storeEnumTagMultiPayload(a1, v4, v12);
  }
  return a1;
}

_QWORD *sub_1001A232C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = sub_100003DB8(&qword_1003192E0);
  if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = *(int *)(sub_100003DB8(&qword_1003192E8) + 32);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = type metadata accessor for PresentationMode(0);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
    swift_storeEnumTagMultiPayload(a1, v4, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
  }
  return a1;
}

_QWORD *sub_1001A23E4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  if (a1 != a2)
  {
    sub_100007FF0((uint64_t)a1, &qword_1003192E0);
    v4 = sub_100003DB8(&qword_1003192E0);
    if (swift_getEnumCaseMultiPayload(a2, v4) == 1)
    {
      v5 = a2[1];
      *a1 = *a2;
      a1[1] = v5;
      v6 = *(int *)(sub_100003DB8(&qword_1003192E8) + 32);
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for PresentationMode(0);
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
      swift_storeEnumTagMultiPayload(a1, v4, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v4 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1001A24B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001A24C0);
}

uint64_t sub_1001A24C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100325740);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1001A2500(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001A250C);
}

uint64_t sub_1001A250C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100325740);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for TryOutBackButtonView(uint64_t a1)
{
  uint64_t result;

  result = qword_1003257A0;
  if (!qword_1003257A0)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TryOutBackButtonView);
  return result;
}

void sub_1001A258C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  sub_1001A25F4(319);
  if (v3 <= 0x3F)
  {
    v4 = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 1, &v4, a1 + 16);
  }
}

void sub_1001A25F4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1003257B0)
  {
    v2 = sub_100007FAC(&qword_1003192E8);
    v3 = type metadata accessor for Environment.Content(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1003257B0);
  }
}

uint64_t sub_1001A264C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029DDC4, 1);
}

uint64_t sub_1001A265C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 v8;
  uint64_t v10;

  v0 = type metadata accessor for PresentationMode(0);
  __chkstk_darwin(v0, v1);
  v3 = (uint64_t *)((char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = sub_100003DB8(&qword_1003192E8);
  __chkstk_darwin(v4, v5);
  v7 = (uint64_t *)((char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100042700(v7);
  Binding.wrappedValue.getter(v3);
  PresentationMode.dismiss()();
  Binding.wrappedValue.setter(v3, v4, v8);
  return sub_100007FF0((uint64_t)v7, &qword_1003192E8);
}

uint64_t sub_1001A273C(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  double v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t KeyPath;

  v1 = Image.init(systemName:)(0xD000000000000010, 0x800000010026E100, a1);
  v2 = static Color.accentColor.getter();
  KeyPath = swift_getKeyPath(&unk_10025B5D8);
  v3 = static Font.Weight.bold.getter(KeyPath);
  v4 = sub_100003DB8(&qword_1003257E8);
  v5 = sub_1001A2A7C();
  View.fontWeight(_:)(*(_QWORD *)&v3, 0, v4, v5);
  swift_release(v2);
  swift_release(KeyPath);
  return swift_release(v1);
}

uint64_t sub_1001A2810(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t OpaqueTypeConformance2;
  _QWORD v13[2];

  v3 = *(_QWORD *)(a1 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(a1, a2);
  sub_1001A2910(v2, (uint64_t)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = *(unsigned __int8 *)(v3 + 80);
  v6 = (v5 + 16) & ~v5;
  v7 = swift_allocObject(&unk_1002F64F8, v6 + v4, v5 | 7);
  sub_1001A2A0C((uint64_t)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v7 + v6);
  v8 = sub_100003DB8(&qword_1003257E0);
  v9 = sub_100007FAC(&qword_1003257E8);
  v10 = sub_1001A2A7C();
  v13[0] = v9;
  v13[1] = v10;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v13, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
  return Button.init(action:label:)(sub_1001A2A50, v7, sub_1001A273C, 0, v8, OpaqueTypeConformance2);
}

uint64_t sub_1001A2910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TryOutBackButtonView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A2954()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;

  v1 = *(_QWORD *)(type metadata accessor for TryOutBackButtonView(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = *(_QWORD *)(v1 + 64);
  v5 = v0 + v3;
  v6 = sub_100003DB8(&qword_1003192E0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v3, v6);
  swift_release(*(_QWORD *)(v0 + v3));
  if (EnumCaseMultiPayload == 1)
  {
    swift_release(*(_QWORD *)(v5 + 8));
    v8 = v5 + *(int *)(sub_100003DB8(&qword_1003192E8) + 32);
    v9 = type metadata accessor for PresentationMode(0);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 8))(v8, v9);
  }
  return swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1001A2A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TryOutBackButtonView(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001A2A50()
{
  type metadata accessor for TryOutBackButtonView(0);
  return sub_1001A265C();
}

unint64_t sub_1001A2A7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003257F0;
  if (!qword_1003257F0)
  {
    v1 = sub_100007FAC(&qword_1003257E8);
    sub_100034DFC();
    sub_1000084FC(&qword_100316C00, &qword_100316C08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003257F0);
  }
  return result;
}

uint64_t sub_1001A2B08()
{
  return sub_1000084FC(&qword_1003257F8, &qword_100325800, (uint64_t)&protocol conformance descriptor for Button<A>);
}

ValueMetadata *type metadata accessor for InitialConnectionView()
{
  return &type metadata for InitialConnectionView;
}

uint64_t sub_1001A2B44(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029DE2C, 1);
}

uint64_t sub_1001A2B54@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)();
  __int128 v25;
  __int128 v26;
  uint64_t (**v27)();
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  double (*v34)@<D0>(uint64_t@<X0>, uint64_t@<X8>);
  uint64_t v35;
  uint64_t (*v36)@<X0>(uint64_t@<X8>);
  _OWORD *v37;
  __int128 v38;
  uint64_t v39;
  _QWORD v40[2];
  __int128 v41;
  uint64_t v42;
  _QWORD v43[6];

  v2 = v1;
  v4 = sub_100003DB8(&qword_100325808);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD **)(v1 + 32);
  if (v9)
  {
    v10 = v9[9];
    v11 = v9[10];
    sub_100007BBC(v9 + 6, v10);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v11 + 32))(v43, v10, v11);
    sub_100007CBC((uint64_t)v43, (uint64_t)&v33);
    v12 = (_OWORD *)swift_allocObject(&unk_1002F65E8, 120, 7);
    v13 = *(_OWORD *)(v1 + 16);
    v12[1] = *(_OWORD *)v1;
    v12[2] = v13;
    v14 = *(_OWORD *)(v1 + 48);
    v12[3] = *(_OWORD *)(v1 + 32);
    v12[4] = v14;
    sub_100007D04(&v33, (uint64_t)(v12 + 5));
    sub_1000A2318((uint64_t *)v1);
    v15 = type metadata accessor for UIMetrics();
    v16 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v17 = EnvironmentObject.init()(v15, v16);
    v19 = v18;
    type metadata accessor for CGSize(0);
    v40[0] = 0;
    v40[1] = 0;
    State.init(wrappedValue:)(&v41, v40, v20);
    v21 = v42;
    *(_QWORD *)&v33 = v17;
    *((_QWORD *)&v33 + 1) = v19;
    v34 = sub_100194028;
    v35 = 0;
    v36 = sub_1001A31B4;
    v37 = v12;
    v38 = v41;
    v39 = v42;
    v22 = sub_100003DB8(&qword_100325810);
    v23 = sub_1000084FC(&qword_100325818, &qword_100325810, (uint64_t)&unk_1002525D0);
    View.navigationBarBackButtonHidden(_:)(1, v22, v23);
    swift_release(v12);
    swift_release(v17);
    swift_release(v21);
    v24 = (uint64_t (*)())swift_allocObject(&unk_1002F6610, 80, 7);
    v25 = *(_OWORD *)(v2 + 16);
    *((_OWORD *)v24 + 1) = *(_OWORD *)v2;
    *((_OWORD *)v24 + 2) = v25;
    v26 = *(_OWORD *)(v2 + 48);
    *((_OWORD *)v24 + 3) = *(_OWORD *)(v2 + 32);
    *((_OWORD *)v24 + 4) = v26;
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 16))(a1, v8, v4);
    v27 = (uint64_t (**)())(a1 + *(int *)(sub_100003DB8(&qword_100325820) + 36));
    *v27 = sub_1001A31FC;
    v27[1] = v24;
    v27[2] = 0;
    v27[3] = 0;
    sub_1000A2318((uint64_t *)v2);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v43);
  }
  else
  {
    v29 = *(_QWORD *)(v1 + 40);
    v30 = type metadata accessor for UIMetrics();
    v31 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v29, v30, v31);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001A2DF4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  double v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v6 = static HorizontalAlignment.center.getter(a1);
  v7 = *(_QWORD *)(a1 + 48);
  if (v7)
  {
    v8 = v6;
    swift_retain(*(_QWORD *)(a1 + 48));
    v9 = sub_1000AD998();
    v11 = v10;
    v13 = v12;
    v14 = swift_release(v7);
    v37 = v8;
    if (v11)
    {
      if ((v13 & 1) != 0)
      {
        v22 = type metadata accessor for AppEvents();
        v23 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
        v24 = EnvironmentObject.init()(v22, v23);
        v35 = v25;
        v36 = v24;
        v26 = type metadata accessor for UIMetrics();
        v27 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
        v15 = EnvironmentObject.init()(v26, v27);
        v16 = v28;
        v29 = sub_100007BBC(a2, a2[3]);
        v18 = *(_QWORD *)(*v29 + 80);
        v19 = *(_QWORD *)(*v29 + 88);
        v20 = *(_QWORD *)(*v29 + 96);
        v21 = *(_QWORD *)(*v29 + 104);
        v14 = static Edge.Set.all.getter(v30);
        v17 = v14;
      }
      else
      {
        swift_bridgeObjectRelease(v11);
        v35 = 0;
        v36 = 0;
        v15 = 0;
        v16 = 0;
        v9 = 0;
        v11 = 0;
        v17 = 0;
        v18 = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
      }
    }
    else
    {
      v35 = 0;
      v36 = 0;
      v15 = 0;
      v16 = 0;
      v9 = 0;
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v11 = 1;
    }
    result = static Edge.Set.top.getter(v14);
    *(_QWORD *)a3 = v37;
    *(_QWORD *)(a3 + 8) = 0;
    *(_BYTE *)(a3 + 16) = 0;
    *(_QWORD *)(a3 + 24) = v36;
    *(_QWORD *)(a3 + 32) = v35;
    *(_QWORD *)(a3 + 40) = v15;
    *(_QWORD *)(a3 + 48) = v16;
    *(_QWORD *)(a3 + 56) = v9;
    *(_QWORD *)(a3 + 64) = v11;
    *(_QWORD *)(a3 + 72) = v17;
    *(_QWORD *)(a3 + 80) = v18;
    *(_QWORD *)(a3 + 88) = v19;
    *(_QWORD *)(a3 + 96) = v20;
    *(_QWORD *)(a3 + 104) = v21;
    *(_BYTE *)(a3 + 112) = 0;
    *(_BYTE *)(a3 + 120) = result;
    *(_OWORD *)(a3 + 128) = 0u;
    *(_OWORD *)(a3 + 144) = 0u;
    *(_BYTE *)(a3 + 160) = 1;
  }
  else
  {
    v32 = *(_QWORD *)(a1 + 56);
    v33 = type metadata accessor for QuestionnaireState();
    v34 = sub_1000052EC(&qword_100316A18, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v32, v33, v34);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001A300C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  unint64_t *v11;
  void *v12;
  uint64_t v13;
  char v14;

  v2 = a1[2];
  if (!v2)
  {
    v8 = a1[3];
    v9 = type metadata accessor for ConnectionModel(0);
    v10 = type metadata accessor for ConnectionModel;
    v11 = &qword_100316B10;
    goto LABEL_11;
  }
  if ((*(_BYTE *)(*(_QWORD *)(v2 + 56) + 106) & 1) == 0)
  {
    v3 = a1[6];
    if (v3)
    {
      swift_retain(a1[6]);
      sub_1000AD998();
      v5 = v4;
      swift_release(v3);
      if (v5)
        swift_bridgeObjectRelease(v5);
      goto LABEL_6;
    }
    v8 = a1[7];
    v9 = type metadata accessor for QuestionnaireState();
    v10 = (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState;
    v11 = &qword_100316A18;
LABEL_11:
    v12 = &unk_10024D2FC;
    goto LABEL_12;
  }
LABEL_6:
  if (*a1)
  {
    v6 = *(_QWORD *)(*a1 + 168);
    v14 = 2;
    swift_retain(v6);
    PassthroughSubject.send(_:)(&v14);
    return swift_release(v6);
  }
  v8 = a1[1];
  v9 = type metadata accessor for AppEvents();
  v10 = (uint64_t (*)(uint64_t))type metadata accessor for AppEvents;
  v11 = (unint64_t *)&qword_100316A10;
  v12 = &unk_100254EA8;
LABEL_12:
  v13 = sub_1000052EC(v11, v10, (uint64_t)v12);
  result = EnvironmentObject.error()(0, v8, v9, v13);
  __break(1u);
  return result;
}

uint64_t sub_1001A3138@<X0>(uint64_t a1@<X8>)
{
  return sub_1001A2B54(a1);
}

uint64_t sub_1001A3170()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 10);
  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_1001A31B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001A2DF4(v1 + 16, (_QWORD *)(v1 + 80), a1);
}

uint64_t sub_1001A31C0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1001A31FC()
{
  uint64_t v0;

  return sub_1001A300C((_QWORD *)(v0 + 16));
}

uint64_t destroy for OpeningMessagesButtonView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t initializeWithCopy for OpeningMessagesButtonView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  v6 = a2[5];
  *(_QWORD *)(a1 + 40) = v6;
  swift_retain(v3);
  swift_retain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for OpeningMessagesButtonView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t *assignWithTake for OpeningMessagesButtonView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  v7 = a1[5];
  a1[5] = a2[5];
  swift_bridgeObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for OpeningMessagesButtonView()
{
  return &type metadata for OpeningMessagesButtonView;
}

unint64_t sub_1001A338C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100325828;
  if (!qword_100325828)
  {
    v1 = sub_100007FAC(&qword_100325820);
    v2[0] = sub_100007FAC(&qword_100325810);
    v2[1] = sub_1000084FC(&qword_100325818, &qword_100325810, (uint64_t)&unk_1002525D0);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.navigationBarBackButtonHidden(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100325828);
  }
  return result;
}

uint64_t sub_1001A3440(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029DE78, 1);
}

uint64_t sub_1001A3450@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  _OWORD *v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  double v62;
  _QWORD *v63;
  double v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t result;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  _QWORD v113[3];
  uint64_t v114;
  _OWORD v115[7];
  __int128 v116;
  __int128 v117;

  v112 = a1;
  v108 = type metadata accessor for KeyboardShortcut(0);
  v107 = *(_QWORD *)(v108 - 8);
  __chkstk_darwin(v108, v2);
  v106 = (char *)&v91 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for ButtonBorderShape(0);
  v103 = *(_QWORD *)(v105 - 8);
  __chkstk_darwin(v105, v4);
  v100 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for BorderedButtonStyle(0);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95, v6);
  v8 = (char *)&v91 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = sub_100003DB8(&qword_100325830);
  v92 = *(_QWORD *)(v93 - 8);
  __chkstk_darwin(v93, v9);
  v11 = (char *)&v91 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100003DB8(&qword_100325838);
  v96 = *(_QWORD *)(v98 - 8);
  __chkstk_darwin(v98, v12);
  v14 = (char *)&v91 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100003DB8(&qword_100325840);
  __chkstk_darwin(v97, v15);
  v17 = (char *)&v91 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100003DB8(&qword_100325848);
  v101 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102, v18);
  v20 = (char *)&v91 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100003DB8(&qword_100325850);
  __chkstk_darwin(v99, v21);
  v104 = (char *)&v91 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100003DB8(&qword_100325858);
  __chkstk_darwin(v110, v23);
  v111 = (uint64_t)&v91 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100003DB8(&qword_100325860);
  __chkstk_darwin(v25, v26);
  v109 = (char *)&v91 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = (_QWORD *)*((_QWORD *)v1 + 2);
  if (v28)
  {
    v30 = v28[9];
    v29 = v28[10];
    sub_100007BBC(v28 + 6, v30);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v29 + 32))(v113, v30, v29);
    v31 = *v1;
    v116 = v1[2];
    v117 = v31;
    v32 = (_OWORD *)swift_allocObject(&unk_1002F66C0, 64, 7);
    v33 = v1[1];
    v32[1] = *v1;
    v32[2] = v33;
    v32[3] = v1[2];
    sub_100031A88(&v117);
    swift_retain(v28);
    sub_100030F08((uint64_t)&v116);
    v34 = sub_1001A3DB4();
    v35 = Button.init(action:label:)(sub_1001A3DAC, v32, sub_10011A0E4, 0, &type metadata for OpeningMessagesButtonLabelView, v34);
    BorderedButtonStyle.init()(v35);
    v36 = sub_1000084FC(&qword_100325870, &qword_100325830, (uint64_t)&protocol conformance descriptor for Button<A>);
    v37 = sub_1000052EC((unint64_t *)&qword_100319760, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedButtonStyle);
    v38 = v93;
    v39 = v95;
    View.buttonStyle<A>(_:)(v8, v93, v95, v36, v37);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v8, v39);
    v40 = (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v11, v38);
    v41 = v100;
    static ButtonBorderShape.capsule.getter(v40);
    KeyPath = swift_getKeyPath(&unk_10025B6F0);
    v43 = v97;
    v44 = (uint64_t *)&v17[*(int *)(v97 + 36)];
    v45 = sub_100003DB8(&qword_100318968);
    v46 = v103;
    v47 = v105;
    (*(void (**)(char *, char *, uint64_t))(v103 + 16))((char *)v44 + *(int *)(v45 + 28), v41, v105);
    *v44 = KeyPath;
    v48 = v96;
    v49 = v98;
    (*(void (**)(char *, char *, uint64_t))(v96 + 16))(v17, v14, v98);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v41, v47);
    v50 = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v14, v49);
    v51 = v106;
    static KeyboardShortcut.defaultAction.getter(v50);
    v52 = sub_1001A4BC0();
    View.keyboardShortcut(_:)(v51, v43, v52);
    (*(void (**)(char *, uint64_t))(v107 + 8))(v51, v108);
    sub_100007FF0((uint64_t)v17, &qword_100325840);
    v54 = static Color.green.getter(v53);
    v55 = swift_getKeyPath(&unk_10025B720);
    *(_QWORD *)&v115[0] = v54;
    v56 = swift_retain(v54);
    v57 = AnyShapeStyle.init<A>(_:)(v115, &type metadata for Color, &protocol witness table for Color, v56);
    v58 = v101;
    v59 = (uint64_t)v104;
    v60 = v102;
    (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v104, v20, v102);
    swift_release(v54);
    v61 = (uint64_t *)(v59 + *(int *)(v99 + 36));
    *v61 = v55;
    v61[1] = v57;
    (*(void (**)(char *, uint64_t))(v58 + 8))(v20, v60);
    v62 = *(double *)(*sub_100007BBC(v113, v114) + 216);
    v63 = sub_100007BBC(v113, v114);
    v64 = *(double *)(*v63 + 216);
    v65 = static Alignment.center.getter(v63);
    v68 = v67;
    if (v62 > v64)
    {
      v69 = static os_log_type_t.fault.getter(v66);
      v70 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)(v69, &_mh_execute_header, v70, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    }
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v115, *(_QWORD *)&v62, 0, 0, 1, *(_QWORD *)&v64, 0, 0, 1, 0, 1, 0, 1, v65, v68);
    v71 = v111;
    sub_10000B234(v59, v111, &qword_100325850);
    v72 = v110;
    v73 = (_OWORD *)(v71 + *(int *)(v110 + 36));
    v74 = v115[5];
    v73[4] = v115[4];
    v73[5] = v74;
    v73[6] = v115[6];
    v75 = v115[1];
    *v73 = v115[0];
    v73[1] = v75;
    v76 = v115[3];
    v73[2] = v115[2];
    v73[3] = v76;
    sub_100007FF0(v59, &qword_100325850);
    v77 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x800000010026E120);
    v78 = Text.init(_:tableName:bundle:comment:)(v77);
    v80 = v79;
    v82 = v81;
    v84 = v83 & 1;
    v85 = sub_1001A4CD0();
    v86 = (uint64_t)v109;
    View.accessibility(label:)(v78, v80, v84, v82, v72, v85);
    sub_10002B438(v78, v80, v84);
    swift_bridgeObjectRelease(v82);
    sub_100007FF0(v71, &qword_100325858);
    sub_10000B458(v86, v112, &qword_100325860);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v113);
  }
  else
  {
    v88 = *((_QWORD *)v1 + 3);
    v89 = type metadata accessor for UIMetrics();
    v90 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v88, v89, v90);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001A3C9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;

  if (*(_QWORD *)a1)
  {
    v1 = *(_QWORD *)(*(_QWORD *)a1 + 144);
    v6 = *(_OWORD *)(a1 + 32);
    v7 = v6;
    swift_retain(v1);
    sub_100030F08((uint64_t)&v7);
    PassthroughSubject.send(_:)(&v6);
    swift_release(v1);
    return sub_100031198((uint64_t)&v7);
  }
  else
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = type metadata accessor for AppEvents();
    v5 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    result = EnvironmentObject.error()(0, v3, v4, v5);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001A3D40@<X0>(uint64_t a1@<X8>)
{
  return sub_1001A3450(a1);
}

uint64_t sub_1001A3D78()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001A3DAC()
{
  uint64_t v0;

  return sub_1001A3C9C(v0 + 16);
}

unint64_t sub_1001A3DB4()
{
  unint64_t result;

  result = qword_100325868;
  if (!qword_100325868)
  {
    result = swift_getWitnessTable(&unk_10025B770, &type metadata for OpeningMessagesButtonLabelView);
    atomic_store(result, (unint64_t *)&qword_100325868);
  }
  return result;
}

uint64_t sub_1001A3DF8@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  _OWORD v34[7];

  v6 = sub_100003DB8(&qword_100320650);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_100320658);
  __chkstk_darwin(v10, v11);
  v13 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003DB8(&qword_100320660);
  __chkstk_darwin(v14, v15);
  v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v18 = a1[9];
    v19 = a1[10];
    sub_100007BBC(a1 + 6, v18);
    v20 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v19 + 32))(v33, v18, v19);
    *(_QWORD *)v9 = static VerticalAlignment.center.getter(v20);
    *((_QWORD *)v9 + 1) = 0;
    v9[16] = 1;
    v21 = sub_100003DB8(&qword_100320668);
    v22 = sub_1001A4078((uint64_t)a1, a2, &v9[*(int *)(v21 + 44)]);
    v23 = static Alignment.center.getter(v22);
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v34, 0, 1, 0, 1, 0x7FF0000000000000, 0, 0x4042000000000000, 0, 0, 1, 0, 1, v23, v24);
    sub_10000B234((uint64_t)v9, (uint64_t)v13, &qword_100320650);
    v25 = &v13[*(int *)(v10 + 36)];
    v26 = v34[5];
    *((_OWORD *)v25 + 4) = v34[4];
    *((_OWORD *)v25 + 5) = v26;
    *((_OWORD *)v25 + 6) = v34[6];
    v27 = v34[1];
    *(_OWORD *)v25 = v34[0];
    *((_OWORD *)v25 + 1) = v27;
    v28 = v34[3];
    *((_OWORD *)v25 + 2) = v34[2];
    *((_OWORD *)v25 + 3) = v28;
    sub_100007FF0((uint64_t)v9, &qword_100320650);
    v29 = sub_10011B1CC();
    View.accessibility(hidden:)(1, v10, v29);
    sub_100007FF0((uint64_t)v13, &qword_100320658);
    sub_10000B458((uint64_t)v17, a3, &qword_100320660);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v33);
  }
  else
  {
    v31 = type metadata accessor for UIMetrics();
    v32 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v31, v32);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001A4078@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  char v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t KeyPath;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  uint64_t v85;
  __n128 v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  id v94;
  UIContentSizeCategory v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _OWORD *v114;
  __int128 v115;
  id v116;
  double v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  _QWORD *v125;
  int *v126;
  char *v127;
  uint64_t result;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  UIContentSizeCategory v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  char v160;

  v148 = a3;
  v136 = sub_100003DB8(&qword_100316A20);
  __chkstk_darwin(v136, v5);
  v154 = (char *)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100003DB8(&qword_100320680);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141, v7);
  v138 = (char *)&v131 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_100003DB8(&qword_100320688);
  __chkstk_darwin(v137, v9);
  v142 = (char *)&v131 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = sub_100003DB8(&qword_100320690);
  __chkstk_darwin(v139, v11);
  v145 = (uint64_t)&v131 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_100003DB8(&qword_100320698);
  v14 = __chkstk_darwin(v144, v13);
  v147 = (uint64_t)&v131 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v14, v16);
  v143 = (uint64_t)&v131 - v18;
  __chkstk_darwin(v17, v19);
  v146 = (uint64_t)&v131 - v20;
  v21 = type metadata accessor for Font.Leading(0);
  v151 = *(_QWORD *)(v21 - 8);
  v152 = v21;
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v131 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = sub_100003DB8(&qword_10031A218);
  __chkstk_darwin(v132, v25);
  v27 = (uint64_t *)((char *)&v131 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v28 = type metadata accessor for Image.Scale(0);
  v29 = *(_QWORD *)(v28 - 8);
  __chkstk_darwin(v28, v30);
  v32 = (char *)&v131 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100003DB8(&qword_10031A208);
  __chkstk_darwin(v33, v34);
  v36 = (uint64_t *)((char *)&v131 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  v133 = sub_100003DB8(&qword_10031A1F0);
  __chkstk_darwin(v133, v37);
  v39 = (char *)&v131 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = sub_100003DB8(&qword_1003206A0);
  v149 = *(_QWORD *)(v40 - 8);
  v150 = v40;
  __chkstk_darwin(v40, v41);
  v134 = (uint64_t)&v131 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100003DB8(&qword_1003206A8);
  v45 = __chkstk_darwin(v43, v44);
  v135 = (uint64_t)&v131 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45, v47);
  v156 = (uint64_t)&v131 - v48;
  if (!a1)
    goto LABEL_11;
  v155 = a1;
  v49 = *(id *)(a1 + 112);
  v153 = UIContentSizeCategoryAccessibilityExtraLarge;
  v50 = static UIContentSizeCategory.>= infix(_:_:)(v49, UIContentSizeCategoryAccessibilityExtraLarge);

  if ((v50 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v149 + 56))(v156, 1, 1, v150);
    v52 = enum case for Font.Leading.tight(_:);
    v54 = v151;
    v53 = v152;
  }
  else
  {
    v55 = Image.init(systemName:)(0x2E6567617373656DLL, 0xEC0000006C6C6966, v51);
    (*(void (**)(char *, _QWORD, uint64_t))(v29 + 104))(v32, enum case for Image.Scale.medium(_:), v28);
    KeyPath = swift_getKeyPath(&unk_10025B7C0);
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))((char *)v27 + *(int *)(v132 + 28), v32, v28);
    *v27 = KeyPath;
    sub_10000B234((uint64_t)v27, (uint64_t)v36 + *(int *)(v33 + 36), &qword_10031A218);
    *v36 = v55;
    swift_retain(v55);
    sub_100007FF0((uint64_t)v27, &qword_10031A218);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v32, v28);
    v57 = swift_release(v55);
    v58 = static Font.title3.getter(v57);
    static Font.Weight.semibold.getter(v58);
    v59 = Font.weight(_:)(v58);
    swift_release(v58);
    v52 = enum case for Font.Leading.tight(_:);
    v54 = v151;
    v53 = v152;
    (*(void (**)(char *, _QWORD, uint64_t))(v151 + 104))(v24, enum case for Font.Leading.tight(_:), v152);
    v60 = Font.leading(_:)(v24, v59);
    swift_release(v59);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v24, v53);
    v61 = swift_getKeyPath(&unk_10025B7F0);
    sub_10000B234((uint64_t)v36, (uint64_t)v39, &qword_10031A208);
    v62 = (uint64_t *)&v39[*(int *)(v133 + 36)];
    *v62 = v61;
    v62[1] = v60;
    sub_100007FF0((uint64_t)v36, &qword_10031A208);
    v64 = static Color.green.getter(v63);
    v65 = v134;
    sub_10000B234((uint64_t)v39, v134, &qword_10031A1F0);
    v66 = v150;
    *(_QWORD *)(v65 + *(int *)(v150 + 36)) = v64;
    sub_100007FF0((uint64_t)v39, &qword_10031A1F0);
    v67 = v156;
    sub_10000B458(v65, v156, &qword_1003206A0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v149 + 56))(v67, 0, 1, v66);
  }
  v68 = LocalizedStringKey.init(stringLiteral:)(0x1000000000000013, 0x800000010026E140);
  v69 = Text.init(_:tableName:bundle:comment:)(v68);
  v71 = v70;
  v73 = v72;
  v75 = v74 & 1;
  v76 = static Font.title3.getter(v69);
  static Font.Weight.semibold.getter(v76);
  v77 = Font.weight(_:)(v76);
  swift_release(v76);
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 104))(v24, v52, v53);
  v78 = Font.leading(_:)(v24, v77);
  swift_release(v77);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v24, v53);
  v79 = Text.font(_:)(v78, v69, v71, v75, v73);
  v81 = v80;
  v83 = v82;
  v85 = v84;
  swift_release(v78);
  LOBYTE(v78) = v83 & 1;
  sub_10002B438(v69, v71, v75);
  v86 = swift_bridgeObjectRelease(v73);
  v87 = static Color.green.getter(v86);
  v88 = Text.foregroundColor(_:)(v87, v79, v81, v83 & 1, v85);
  v90 = v89;
  LOBYTE(v75) = v91;
  v93 = v92;
  swift_release(v87);
  sub_10002B438(v79, v81, v78);
  swift_bridgeObjectRelease(v85);
  a2 = v155;
  v94 = *(id *)(v155 + 112);
  v95 = v153;
  LOBYTE(v78) = static UIContentSizeCategory.>= infix(_:_:)(v94, v153);

  v96 = swift_getKeyPath(&unk_10025B820);
  *(_QWORD *)&v157 = v88;
  *((_QWORD *)&v157 + 1) = v90;
  LOBYTE(v158) = v75 & 1;
  *((_QWORD *)&v158 + 1) = v93;
  *(_QWORD *)&v159 = v96;
  *((_QWORD *)&v159 + 1) = (v78 & 1) == 0;
  v160 = v78 & 1;
  v97 = enum case for DynamicTypeSize.accessibility2(_:);
  v98 = type metadata accessor for DynamicTypeSize(0);
  v99 = (uint64_t)v154;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v98 - 8) + 104))(v154, v97, v98);
  v100 = sub_1000052EC(&qword_100316A30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v99, v99, v98, v100) & 1) == 0)
  {
    __break(1u);
LABEL_11:
    v129 = type metadata accessor for UIMetrics();
    v130 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v129, v130);
    __break(1u);
    return result;
  }
  v101 = sub_100003DB8(&qword_100320050);
  v102 = sub_10010D0B0();
  v103 = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  v104 = v138;
  View.dynamicTypeSize<A>(_:)(v99, v101, v136, v102, v103);
  sub_100007FF0(v99, &qword_100316A20);
  sub_10002B438(v157, *((uint64_t *)&v157 + 1), v158);
  swift_bridgeObjectRelease(*((_QWORD *)&v158 + 1));
  swift_release(v159);
  v105 = swift_getKeyPath(&unk_10025B850);
  v106 = v140;
  v107 = (uint64_t)v142;
  v108 = v141;
  (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v142, v104, v141);
  v109 = v107 + *(int *)(v137 + 36);
  *(_QWORD *)v109 = v105;
  *(_BYTE *)(v109 + 8) = 1;
  v110 = (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v104, v108);
  v111 = static Alignment.center.getter(v110);
  _FrameLayout.init(width:height:alignment:)(&v157, 0, 1, 0, 1, v111, v112);
  v113 = v145;
  sub_10000B234(v107, v145, &qword_100320688);
  v114 = (_OWORD *)(v113 + *(int *)(v139 + 36));
  v115 = v158;
  *v114 = v157;
  v114[1] = v115;
  v114[2] = v159;
  sub_100007FF0(v107, &qword_100320688);
  v116 = *(id *)(a2 + 112);
  LOBYTE(v107) = static UIContentSizeCategory.>= infix(_:_:)(v116, v95);

  if ((v107 & 1) != 0)
    v117 = 1.0;
  else
    v117 = 0.5;
  v118 = swift_getKeyPath(&unk_10025B880);
  v119 = v143;
  sub_10000B234(v113, v143, &qword_100320690);
  v120 = v119 + *(int *)(v144 + 36);
  *(_QWORD *)v120 = v118;
  *(double *)(v120 + 8) = v117;
  sub_100007FF0(v113, &qword_100320690);
  v121 = v146;
  sub_10000B458(v119, v146, &qword_100320698);
  v122 = v156;
  v123 = v135;
  sub_10000B234(v156, v135, &qword_1003206A8);
  v124 = v147;
  sub_10000B234(v121, v147, &qword_100320698);
  v125 = v148;
  *v148 = 0;
  *((_BYTE *)v125 + 8) = 1;
  v126 = (int *)sub_100003DB8(&qword_1003206B0);
  sub_10000B234(v123, (uint64_t)v125 + v126[12], &qword_1003206A8);
  sub_10000B234(v124, (uint64_t)v125 + v126[16], &qword_100320698);
  v127 = (char *)v125 + v126[20];
  *(_QWORD *)v127 = 0;
  v127[8] = 1;
  sub_100007FF0(v121, &qword_100320698);
  sub_100007FF0(v122, &qword_1003206A8);
  sub_100007FF0(v124, &qword_100320698);
  return sub_100007FF0(v123, &qword_1003206A8);
}

uint64_t sub_1001A4BB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001A3DF8(*(_QWORD **)v1, *(_QWORD *)(v1 + 8), a1);
}

unint64_t sub_1001A4BC0()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100325878;
  if (!qword_100325878)
  {
    v1 = sub_100007FAC(&qword_100325840);
    v2[0] = sub_100007FAC(&qword_100325830);
    v2[1] = type metadata accessor for BorderedButtonStyle(255);
    v2[2] = sub_1000084FC(&qword_100325870, &qword_100325830, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_1000052EC((unint64_t *)&qword_100319760, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_1000084FC(&qword_100318978, &qword_100318968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100325878);
  }
  return result;
}

unint64_t sub_1001A4CD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100325880;
  if (!qword_100325880)
  {
    v1 = sub_100007FAC(&qword_100325858);
    sub_1001A4D3C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100325880);
  }
  return result;
}

unint64_t sub_1001A4D3C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100325888;
  if (!qword_100325888)
  {
    v1 = sub_100007FAC(&qword_100325850);
    v2[0] = sub_100007FAC(&qword_100325840);
    v2[1] = sub_1001A4BC0();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.keyboardShortcut(_:)>>, 1);
    sub_1000084FC(&qword_100318880, &qword_100318888, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100325888);
  }
  return result;
}

ValueMetadata *type metadata accessor for OpeningMessagesButtonLabelView()
{
  return &type metadata for OpeningMessagesButtonLabelView;
}

uint64_t sub_1001A4DF8()
{
  return sub_10000A9B0(&qword_100325890, &qword_100325860, (void (*)(void))sub_1001A4CD0);
}

uint64_t sub_1001A4E24(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029DEA0, 1);
}

uint64_t sub_1001A4E5C()
{
  return sub_10000A9B0(&qword_1003206B8, &qword_100320660, (void (*)(void))sub_10011B1CC);
}

uint64_t sub_1001A4E88(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[48];

  v2 = v1;
  v4 = type metadata accessor for Date(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = &v21[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = type metadata accessor for DispatchTime(0);
  __chkstk_darwin(v9, v10);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_BYTE *)(v2 + 73) = sub_100067058(0, *(_QWORD *)(a1 + 200));
  result = sub_100067058(4u, *(_QWORD *)(a1 + 200));
  *(_BYTE *)(v2 + 74) = result & 1;
  if ((result & 1) != 0)
  {
    if (!*(_QWORD *)(v2 + 24))
    {
      static DispatchTime.now()(result);
      v14 = *(_BYTE *)(v2 + 73);
      sub_1001A5D34(v2 + 32, (uint64_t)v21);
      v15 = _s8SOSBuddy4DataCMa_0(0);
      swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
      v16 = sub_1001A53FC(v12, v14, (uint64_t)v21, 0, 0, 1);
      v17 = *(_QWORD *)(v2 + 24);
      *(_QWORD *)(v2 + 24) = v16;
      return swift_release(v17);
    }
  }
  else
  {
    if (*(_BYTE *)(v2 + 72) == 1
      && (Date.init()(result),
          sub_1001C8194((uint64_t)v8),
          v19 = v18,
          (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v8, v4),
          v19))
    {
      swift_bridgeObjectRelease(v19);
      v20 = 1;
    }
    else
    {
      v20 = 0;
    }
    return sub_1001A527C(v20);
  }
  return result;
}

void sub_1001A5018(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  char v11;
  __n128 v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[48];

  v2 = v1;
  v4 = type metadata accessor for DispatchTime(0);
  __chkstk_darwin(v4, v5);
  v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = *(_QWORD *)(a1 + 48);
  if (!v8)
  {
    if ((*(_BYTE *)(v2 + 74) & 1) != 0)
    {
      swift_bridgeObjectRelease(0);
      if (*(_QWORD *)(v2 + 24))
        return;
      v15 = 0;
      v16 = 0;
      v17 = 1;
      goto LABEL_27;
    }
    goto LABEL_25;
  }
  v9 = *(_QWORD *)(v8 + 48);
  v10 = *(double *)(v8 + 56);
  v11 = *(_BYTE *)(v8 + 64);
  if (sub_100067058(2u, v9))
  {
    swift_bridgeObjectRetain_n(v9, 2, v12);
    v13 = 1;
  }
  else
  {
    v13 = *(_BYTE *)(v2 + 74) & 1;
    swift_bridgeObjectRetain(v9);
    if (!v9)
    {
      v16 = 0;
      goto LABEL_16;
    }
    swift_bridgeObjectRetain(v9);
  }
  v16 = sub_100067058(5u, v9);
  swift_bridgeObjectRelease(v9);
  if ((v11 & 1) == 0)
  {
    v18 = round(v10);
    if ((~*(_QWORD *)&v18 & 0x7FF0000000000000) != 0)
    {
      if (v18 > -9.22337204e18)
      {
        if (v18 < 9.22337204e18)
        {
          if ((v13 & 1) != 0)
          {
            v17 = 0;
            v15 = (uint64_t)v18;
            goto LABEL_18;
          }
LABEL_23:
          if (v9)
          {
            v22 = sub_100067058(4u, v9);
            swift_bridgeObjectRelease(v9);
LABEL_26:
            sub_1001A527C(v22);
            return;
          }
LABEL_25:
          v22 = 0;
          goto LABEL_26;
        }
LABEL_31:
        __break(1u);
LABEL_32:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_31;
  }
LABEL_16:
  if (!v13)
    goto LABEL_23;
  v15 = 0;
  v17 = 1;
LABEL_18:
  swift_bridgeObjectRelease(v9);
  v19 = *(_QWORD *)(v2 + 24);
  if (!v19)
  {
LABEL_27:
    static DispatchTime.now()(v14);
    v23 = *(_BYTE *)(v2 + 73);
    sub_1001A5D34(v2 + 32, (uint64_t)v27);
    v24 = _s8SOSBuddy4DataCMa_0(0);
    swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
    v25 = sub_1001A53FC(v7, v23, (uint64_t)v27, v16, v15, v17);
    v26 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(v2 + 24) = v25;
    swift_release(v26);
    return;
  }
  if (v16
    && (*(_BYTE *)(v19
                 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_skimmerDetectedDuringObstruction) & 1) == 0)
  {
    *(_BYTE *)(v19 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_skimmerDetectedDuringObstruction) = 1;
    v20 = *(_QWORD *)(v2 + 24);
    if (v20)
    {
      v21 = v20 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_firstBetterTargetInSeconds;
      *(_QWORD *)v21 = v15;
      *(_BYTE *)(v21 + 8) = v17;
      return;
    }
    goto LABEL_32;
  }
}

uint64_t sub_1001A527C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(v1 + 24);
  if (v2)
  {
    v3 = v1;
    if ((*(_BYTE *)(v1 + 72) & 1) != 0
      || (*(_BYTE *)(v2 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_endIsOriented) = *(_BYTE *)(v1 + 73),
          (v2 = *(_QWORD *)(v1 + 24)) != 0))
    {
      v4 = *(_QWORD *)(v1 + 64);
      v5 = *(_BYTE *)(v1 + 72);
      v6 = v2 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_endTarget;
      v7 = *(_OWORD *)(v1 + 48);
      *(_OWORD *)v6 = *(_OWORD *)(v1 + 32);
      *(_OWORD *)(v6 + 16) = v7;
      *(_QWORD *)(v6 + 32) = v4;
      *(_BYTE *)(v6 + 40) = v5;
      v8 = *(_QWORD *)(v1 + 24);
      if (v8)
      {
        *(_BYTE *)(v8 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_endInOutage) = result & 1;
        v9 = *(_QWORD *)(v1 + 24);
        if (v9)
        {
          swift_retain(*(_QWORD *)(v3 + 24));
          sub_1001A5714();
          v11 = v10;
          swift_release(v9);
          sub_100176278(2, v11);
          swift_bridgeObjectRelease(v11);
          v12 = *(_QWORD *)(v3 + 24);
          *(_QWORD *)(v3 + 24) = 0;
          return swift_release(v12);
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1001A5364()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 75, 7);
}

uint64_t type metadata accessor for AnalyticsObstruction()
{
  return objc_opt_self(_TtC8SOSBuddy20AnalyticsObstruction);
}

uint64_t sub_1001A53B0(uint64_t a1)
{
  _QWORD *v1;

  return sub_1001A5D34(a1, *v1 + 32);
}

uint64_t sub_1001A53BC(uint64_t a1)
{
  return sub_1001A4E88(a1);
}

void sub_1001A53DC(uint64_t a1)
{
  sub_1001A5018(a1);
}

uint64_t sub_1001A53FC(char *a1, char a2, uint64_t a3, char a4, uint64_t a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  char *v31;
  __n128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __n128 v36;
  void (*v37)(char *, uint64_t, __n128);
  void (*v38)(char *, uint64_t);
  uint8_t *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v7 = v6;
  LODWORD(v42) = a6;
  v13 = type metadata accessor for DispatchTime(0);
  v15 = __chkstk_darwin(v13, v14);
  v41 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v40 - v18;
  v20 = v7 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_firstBetterTargetInSeconds;
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  *(_BYTE *)(v7 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_endIsOriented) = 2;
  v21 = v7 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_endTarget;
  *(_OWORD *)v21 = 0u;
  *(_OWORD *)(v21 + 16) = 0u;
  *(_QWORD *)(v21 + 32) = 0;
  *(_BYTE *)(v21 + 40) = 1;
  *(_BYTE *)(v7 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_endInOutage) = 2;
  v43 = v22;
  v23 = *(void (**)(uint64_t, char *, uint64_t))(v22 + 16);
  v23(v7 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_startTimestamp, a1, v13);
  *(_BYTE *)(v7 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_startIsOriented) = a2;
  sub_1001A5D34(a3, v7 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_startTarget);
  *(_BYTE *)(v7 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_skimmerDetectedDuringObstruction) = a4;
  v24 = v7 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_firstBetterTargetInSeconds;
  *(_QWORD *)v24 = a5;
  *(_BYTE *)(v24 + 8) = v42 & 1;
  if (qword_100315818 != -1)
    swift_once(&qword_100315818, sub_1000D95C0);
  v25 = type metadata accessor for Logger(0);
  sub_10000D744(v25, (uint64_t)qword_10033FD00);
  v26 = ((uint64_t (*)(char *, char *, uint64_t))v23)(v19, a1, v13);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v42 = a1;
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    v45 = v30;
    *(_DWORD *)v29 = 136315138;
    v40 = v29 + 4;
    v31 = v41;
    v32.n128_f64[0] = ((double (*)(char *, char *, uint64_t))v23)(v41, v19, v13);
    v33 = String.init<A>(describing:)(v31, v13, v32);
    v35 = v34;
    v44 = sub_100172BEC(v33, v34, &v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v40, v29 + 12);
    v36 = swift_bridgeObjectRelease(v35);
    v37 = *(void (**)(char *, uint64_t, __n128))(v43 + 8);
    v37(v19, v13, v36);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "SatelliteObstruction: started tracking at %s", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

    ((void (*)(char *, uint64_t))v37)(v42, v13);
  }
  else
  {

    v38 = *(void (**)(char *, uint64_t))(v43 + 8);
    v38(v19, v13);
    v38(a1, v13);
  }
  return v7;
}

void sub_1001A5714()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int v13;
  const char *v14;
  uint64_t v15;
  unint64_t v16;
  double v17;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v20;
  double v21;
  Class v22;
  char v23;
  uint64_t v24;
  Class v25;
  char v26;
  double v27;
  Class v28;
  char v29;
  Class v30;
  char v31;
  Class v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  char v36[128];

  v1 = v0;
  v2 = type metadata accessor for DispatchTime(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_100319FC8);
  inited = swift_initStackObject(v7, v36);
  *(_OWORD *)(inited + 16) = xmmword_10024EEB0;
  *(_QWORD *)(inited + 32) = 0x6E6F697461727564;
  *(_QWORD *)(inited + 40) = 0xE800000000000000;
  v9 = static DispatchTime.now()(inited);
  v10 = DispatchTime.uptimeNanoseconds.getter(v9);
  v11 = DispatchTime.uptimeNanoseconds.getter(v10);
  if (v11 < v10)
  {
    v12 = DispatchTime.uptimeNanoseconds.getter(v11);
    if (v12 < DispatchTime.uptimeNanoseconds.getter(v12))
    {
      __break(1u);
      goto LABEL_23;
    }
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *(NSNumber *)(inited + 48) = UInt64._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 56) = 1701869940;
  *(_QWORD *)(inited + 64) = 0xE400000000000000;
  v13 = *(unsigned __int8 *)(v0
                           + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_skimmerDetectedDuringObstruction);
  sub_100066F24();
  if (v13 == 1)
  {
    v14 = "Skimmer";
    v15 = 7;
  }
  else
  {
    v14 = "Obstruction";
    v15 = 11;
  }
  *(_QWORD *)(inited + 72) = NSString.init(stringLiteral:)(v14, v15, 2);
  strcpy((char *)(inited + 80), "prev_isOrient");
  *(_WORD *)(inited + 94) = -4864;
  *(NSNumber *)(inited + 96) = Bool._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 104) = 0xD000000000000010;
  *(_QWORD *)(inited + 112) = 0x800000010026E320;
  *(NSNumber *)(inited + 120) = Bool._bridgeToObjectiveC()();
  v16 = sub_100224F60(inited);
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_startTarget + 40) & 1) == 0)
  {
    v17 = *(double *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_startTarget + 16);
    isa = Int64._bridgeToObjectiveC()().super.super.isa;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
    v35 = v16;
    sub_10020D010((uint64_t)isa, 0x7461735F76657270, 0xEA00000000004449, isUniquelyReferenced_nonNull_native);
    v20 = v35;
    swift_bridgeObjectRelease(0x8000000000000000);
    v21 = round(v17 * 57.2957795);
    if ((~*(_QWORD *)&v21 & 0x7FF0000000000000) != 0)
    {
      if (v21 > -9.22337204e18)
      {
        if (v21 < 9.22337204e18)
        {
          v22 = Int64._bridgeToObjectiveC()().super.super.isa;
          v23 = swift_isUniquelyReferenced_nonNull_native(v20);
          v35 = v20;
          sub_10020D010((uint64_t)v22, 0x656C655F76657270, 0xEE006E6F69746176, v23);
          v16 = v35;
          swift_bridgeObjectRelease(0x8000000000000000);
          goto LABEL_11;
        }
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
LABEL_11:
  v24 = v1 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_endTarget;
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_endTarget + 40) & 1) != 0)
    goto LABEL_17;
  v25 = Int64._bridgeToObjectiveC()().super.super.isa;
  v26 = swift_isUniquelyReferenced_nonNull_native(v16);
  v35 = v16;
  sub_10020D010((uint64_t)v25, 0x7461735F74736F70, 0xEA00000000004449, v26);
  v16 = v35;
  swift_bridgeObjectRelease(0x8000000000000000);
  if ((*(_BYTE *)(v24 + 40) & 1) != 0)
    goto LABEL_17;
  v27 = round(*(double *)(v24 + 16) * 57.2957795);
  if ((~*(_QWORD *)&v27 & 0x7FF0000000000000) == 0)
    goto LABEL_26;
  if (v27 <= -9.22337204e18)
  {
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (v27 >= 9.22337204e18)
  {
LABEL_28:
    __break(1u);
    return;
  }
  v28 = Int64._bridgeToObjectiveC()().super.super.isa;
  v29 = swift_isUniquelyReferenced_nonNull_native(v16);
  v35 = v16;
  sub_10020D010((uint64_t)v28, 0x656C655F74736F70, 0xEE006E6F69746176, v29);
  v16 = v35;
  swift_bridgeObjectRelease(0x8000000000000000);
LABEL_17:
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_endIsOriented) != 2)
  {
    v30 = Bool._bridgeToObjectiveC()().super.super.isa;
    v31 = swift_isUniquelyReferenced_nonNull_native(v16);
    v35 = v16;
    sub_10020D010((uint64_t)v30, 0x4F73695F74736F70, 0xED0000746E656972, v31);
    v16 = v35;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_firstBetterTargetInSeconds + 8) & 1) == 0)
  {
    v32 = Int64._bridgeToObjectiveC()().super.super.isa;
    v33 = swift_isUniquelyReferenced_nonNull_native(v16);
    v35 = v16;
    sub_10020D010((uint64_t)v32, 0xD000000000000019, 0x800000010026E340, v33);
    swift_bridgeObjectRelease(0x8000000000000000);
  }
}

uint64_t sub_1001A5C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8SOSBuddyP33_39CE8DA68D44C068915A9101E6ACAAB94Data_startTimestamp;
  v2 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001A5C58()
{
  return _s8SOSBuddy4DataCMa_0(0);
}

uint64_t _s8SOSBuddy4DataCMa_0(uint64_t a1)
{
  uint64_t result;

  result = qword_100325AA8;
  if (!qword_100325AA8)
    return swift_getSingletonMetadata(a1, &_s8SOSBuddy4DataCMn_0);
  return result;
}

uint64_t sub_1001A5C9C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[8];

  result = type metadata accessor for DispatchTime(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10025B900;
    v4[2] = &unk_10025B918;
    v4[3] = &unk_10025B900;
    v4[4] = &unk_10025B930;
    v4[5] = &unk_10025B948;
    v4[6] = &unk_10025B918;
    v4[7] = &unk_10025B948;
    result = swift_updateClassMetadata2(a1, 256, 8, v4, a1 + 80);
    if (!result)
      return 0;
  }
  return result;
}

uint64_t sub_1001A5D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100319FB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for BuiltInQuestionHeaderView()
{
  return &type metadata for BuiltInQuestionHeaderView;
}

uint64_t sub_1001A5D8C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029E0D8, 1);
}

void sub_1001A5D9C(uint64_t a1)
{
  __asm { BR              X10 }
}

double sub_1001A5DDC()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  double result;
  __int128 v12;
  __int16 v13;
  char v14;
  __int128 v15;
  __int128 v16;
  __int16 v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int16 v21;
  char v22;

  v15 = v1;
  v16 = 0uLL;
  LOBYTE(v17) = 1;
  v2 = sub_1001A63A0();
  v3 = sub_100128994();
  swift_retain(v1);
  _ConditionalContent<>.init(storage:)(&v15, &type metadata for BuiltInNotifyContactsConsentHeaderView, &type metadata for DefaultQuestionHeaderView, v2, v3);
  v15 = v19;
  v16 = v20;
  v17 = v21;
  v4 = sub_100003DB8(&qword_100325C00);
  v5 = sub_100003DB8(&qword_100325C18);
  v6 = sub_1001A637C();
  v7 = sub_1001A63E4();
  _ConditionalContent<>.init(storage:)(&v15, v4, v5, v6, v7);
  if (HIBYTE(v21))
    v8 = 256;
  else
    v8 = 0;
  v15 = v19;
  v16 = v20;
  v17 = v8 | v21;
  v18 = 0;
  v9 = sub_100003DB8(&qword_100325BE8);
  v10 = sub_100008140(&qword_100325BF0, &qword_100325BE8, (void (*)(void))sub_1001A637C, (void (*)(void))sub_1001A63E4);
  _ConditionalContent<>.init(storage:)(&v15, v9, &type metadata for EmptyView, v10, &protocol witness table for EmptyView);
  result = *(double *)&v19;
  v12 = v20;
  v13 = v21;
  v14 = v22;
  *(_OWORD *)v0 = v19;
  *(_OWORD *)(v0 + 16) = v12;
  *(_WORD *)(v0 + 32) = v13;
  *(_BYTE *)(v0 + 34) = v14;
  return result;
}

void sub_1001A6374()
{
  uint64_t *v0;

  sub_1001A5D9C(*v0);
}

uint64_t sub_1001A637C()
{
  return sub_100008140(&qword_100325BF8, &qword_100325C00, (void (*)(void))sub_1001A63A0, (void (*)(void))sub_100128994);
}

unint64_t sub_1001A63A0()
{
  unint64_t result;

  result = qword_100325C08;
  if (!qword_100325C08)
  {
    result = swift_getWitnessTable(&unk_100253078, &type metadata for BuiltInNotifyContactsConsentHeaderView);
    atomic_store(result, (unint64_t *)&qword_100325C08);
  }
  return result;
}

uint64_t sub_1001A63E4()
{
  return sub_100008140(&qword_100325C10, &qword_100325C18, (void (*)(void))sub_1001A6408, (void (*)(void))sub_1001A644C);
}

unint64_t sub_1001A6408()
{
  unint64_t result;

  result = qword_100325C20;
  if (!qword_100325C20)
  {
    result = swift_getWitnessTable(&unk_10025B058, &type metadata for BuiltInSelectRoadsideProviderHeaderView);
    atomic_store(result, (unint64_t *)&qword_100325C20);
  }
  return result;
}

unint64_t sub_1001A644C()
{
  unint64_t result;

  result = qword_100325C28;
  if (!qword_100325C28)
  {
    result = swift_getWitnessTable(&unk_10025682C, &type metadata for BuiltInEnterRoadsidePhoneNumberHeaderView);
    atomic_store(result, (unint64_t *)&qword_100325C28);
  }
  return result;
}

unint64_t sub_1001A6494()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100325C30;
  if (!qword_100325C30)
  {
    v1 = sub_100007FAC(&qword_100325C38);
    sub_100008140(&qword_100325BF0, &qword_100325BE8, (void (*)(void))sub_1001A637C, (void (*)(void))sub_1001A63E4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100325C30);
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssitantSessionBannerView()
{
  return &type metadata for ConnectionAssitantSessionBannerView;
}

uint64_t sub_1001A6530(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029E144, 1);
}

uint64_t sub_1001A6540@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40[24];

  v37 = a2;
  v39 = a3;
  v4 = type metadata accessor for ConnectionAssitantSessionBannerContentView(0);
  v38 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (uint64_t *)((char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = sub_100003DB8(&qword_100316AD8);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003DB8(&qword_100325C40);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (char *)&v37 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    if (sub_100067058(2u, *(_QWORD *)(a1 + 200)))
    {
      v22 = a1 + OBJC_IVAR____TtC8SOSBuddy21BannerAppearanceModel_bannerMode;
      swift_beginAccess(v22, v40, 0, 0);
      sub_10000B234(v22, (uint64_t)v11, &qword_100316AD8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
      {
        sub_100007FF0((uint64_t)v11, &qword_100316AD8);
        v23 = 1;
      }
      else
      {
        sub_1000E8D6C((uint64_t)v11, (uint64_t)v16, type metadata accessor for ConnectionAssitantBannerMode.Mode);
        sub_1000E1F30((uint64_t)v16, (uint64_t)v7 + *(int *)(v4 + 28), type metadata accessor for ConnectionAssitantBannerMode.Mode);
        v25 = type metadata accessor for AppEvents();
        v26 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
        *v7 = EnvironmentObject.init()(v25, v26);
        v7[1] = v27;
        v28 = type metadata accessor for BannerAppearanceModel(0);
        v29 = sub_1000052EC(&qword_100316AA8, type metadata accessor for BannerAppearanceModel, (uint64_t)&unk_10024D2FC);
        v7[2] = EnvironmentObject.init()(v28, v29);
        v7[3] = v30;
        v31 = type metadata accessor for UIMetrics();
        v32 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
        v7[4] = EnvironmentObject.init()(v31, v32);
        v7[5] = v33;
        sub_10000AFFC((uint64_t)v16, type metadata accessor for ConnectionAssitantBannerMode.Mode);
        sub_1000E8D6C((uint64_t)v7, (uint64_t)v21, type metadata accessor for ConnectionAssitantSessionBannerContentView);
        v23 = 0;
      }
      v34 = v39;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v21, v23, 1, v4);
      sub_10000B458((uint64_t)v21, v34, &qword_100325C40);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v34, 0, 1, v17);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v39, 1, 1, v17);
    }
  }
  else
  {
    v35 = type metadata accessor for BannerAppearanceModel(0);
    v36 = sub_1000052EC(&qword_100316AA8, type metadata accessor for BannerAppearanceModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v37, v35, v36);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001A68A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1001A6540(*v1, v1[1], a1);
}

uint64_t type metadata accessor for ConnectionAssitantSessionBannerContentView(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100325CA0, (uint64_t)&nominal type descriptor for ConnectionAssitantSessionBannerContentView);
}

uint64_t *sub_1001A68C0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain(v4);
  }
  else
  {
    v5 = a1;
    v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    v7 = a2[4];
    a1[3] = a2[3];
    a1[4] = v7;
    v8 = *(int *)(a3 + 28);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    a1[5] = a2[5];
    v11 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    swift_retain(v4);
    swift_retain(v6);
    swift_retain(v7);
    if (swift_getEnumCaseMultiPayload(v10, v11) == 1)
    {
      *v9 = *v10;
      v12 = type metadata accessor for ConnectionClosed(0);
      v13 = *(int *)(v12 + 20);
      v14 = &v9[v13];
      v15 = &v10[v13];
      v16 = type metadata accessor for Date(0);
      v17 = *(_QWORD *)(v16 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      {
        v18 = sub_100003DB8(&qword_100317D58);
        memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 16))(v14, v15, v16);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
      }
      v19 = *(int *)(v12 + 24);
      v20 = *(_QWORD *)&v10[v19];
      *(_QWORD *)&v9[v19] = v20;
      swift_bridgeObjectRetain(v20);
      swift_storeEnumTagMultiPayload(v9, v11, 1);
    }
    else
    {
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
    }
  }
  return v5;
}

double sub_1001A6A5C(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;
  double result;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  v4 = (char *)a1 + *(int *)(a2 + 28);
  v5 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  if (swift_getEnumCaseMultiPayload(v4, v5) == 1)
  {
    v7 = type metadata accessor for ConnectionClosed(0);
    v8 = &v4[*(int *)(v7 + 20)];
    v9 = type metadata accessor for Date(0);
    v10 = *(_QWORD *)(v9 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)&v4[*(int *)(v7 + 24)]).n128_u64[0];
  }
  return result;
}

uint64_t *sub_1001A6B30(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v7 = a2[2];
  v6 = a2[3];
  a1[2] = v7;
  a1[3] = v6;
  v9 = a2[4];
  v8 = a2[5];
  v10 = *(int *)(a3 + 28);
  v11 = (char *)a2 + v10;
  v12 = (char *)a1 + v10;
  a1[4] = v9;
  a1[5] = v8;
  v13 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  swift_retain(v5);
  swift_retain(v7);
  swift_retain(v9);
  if (swift_getEnumCaseMultiPayload(v11, v13) == 1)
  {
    *v12 = *v11;
    v14 = type metadata accessor for ConnectionClosed(0);
    v15 = *(int *)(v14 + 20);
    v16 = &v12[v15];
    v17 = &v11[v15];
    v18 = type metadata accessor for Date(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = sub_100003DB8(&qword_100317D58);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v21 = *(int *)(v14 + 24);
    v22 = *(_QWORD *)&v11[v21];
    *(_QWORD *)&v12[v21] = v22;
    swift_bridgeObjectRetain(v22);
    swift_storeEnumTagMultiPayload(v12, v13, 1);
  }
  else
  {
    memcpy(v12, v11, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_1001A6C9C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v6 = *a1;
  v7 = *a2;
  *a1 = *a2;
  swift_retain(v7);
  swift_release(v6);
  a1[1] = a2[1];
  v8 = a1[2];
  v9 = a2[2];
  a1[2] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[3] = a2[3];
  v10 = a1[4];
  v11 = a2[4];
  a1[4] = v11;
  swift_retain(v11);
  swift_release(v10);
  a1[5] = a2[5];
  if (a1 != a2)
  {
    v12 = *(int *)(a3 + 28);
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    sub_10000AFFC((uint64_t)a1 + v12, type metadata accessor for ConnectionAssitantBannerMode.Mode);
    v15 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    if (swift_getEnumCaseMultiPayload(v14, v15) == 1)
    {
      *v13 = *v14;
      v16 = type metadata accessor for ConnectionClosed(0);
      v17 = *(int *)(v16 + 20);
      v18 = &v13[v17];
      v19 = &v14[v17];
      v20 = type metadata accessor for Date(0);
      v21 = *(_QWORD *)(v20 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
      {
        v22 = sub_100003DB8(&qword_100317D58);
        memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v21 + 16))(v18, v19, v20);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
      }
      v23 = *(int *)(v16 + 24);
      v24 = *(_QWORD *)&v14[v23];
      *(_QWORD *)&v13[v23] = v24;
      swift_bridgeObjectRetain(v24);
      swift_storeEnumTagMultiPayload(v13, v15, 1);
    }
    else
    {
      memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
  }
  return a1;
}

_OWORD *sub_1001A6E58(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  if (swift_getEnumCaseMultiPayload(v7, v8) == 1)
  {
    *v6 = *v7;
    v9 = type metadata accessor for ConnectionClosed(0);
    v10 = *(int *)(v9 + 20);
    v11 = &v6[v10];
    v12 = &v7[v10];
    v13 = type metadata accessor for Date(0);
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = sub_100003DB8(&qword_100317D58);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *(_QWORD *)&v6[*(int *)(v9 + 24)] = *(_QWORD *)&v7[*(int *)(v9 + 24)];
    swift_storeEnumTagMultiPayload(v6, v8, 1);
  }
  else
  {
    memcpy(v6, v7, *(_QWORD *)(*(_QWORD *)(v8 - 8) + 64));
  }
  return a1;
}

uint64_t *sub_1001A6FA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  v7 = a1[2];
  v8 = a2[2];
  a1[1] = a2[1];
  a1[2] = v8;
  swift_release(v7);
  v9 = a1[4];
  v10 = a2[4];
  a1[3] = a2[3];
  a1[4] = v10;
  swift_release(v9);
  a1[5] = a2[5];
  if (a1 != a2)
  {
    v11 = *(int *)(a3 + 28);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    sub_10000AFFC((uint64_t)a1 + v11, type metadata accessor for ConnectionAssitantBannerMode.Mode);
    v14 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    if (swift_getEnumCaseMultiPayload(v13, v14) == 1)
    {
      *v12 = *v13;
      v15 = type metadata accessor for ConnectionClosed(0);
      v16 = *(int *)(v15 + 20);
      v17 = &v12[v16];
      v18 = &v13[v16];
      v19 = type metadata accessor for Date(0);
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = sub_100003DB8(&qword_100317D58);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v20 + 32))(v17, v18, v19);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      *(_QWORD *)&v12[*(int *)(v15 + 24)] = *(_QWORD *)&v13[*(int *)(v15 + 24)];
      swift_storeEnumTagMultiPayload(v12, v14, 1);
    }
    else
    {
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
  }
  return a1;
}

uint64_t sub_1001A7130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001A713C);
}

uint64_t sub_1001A713C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  uint64_t v9;

  if ((_DWORD)a2 == 2147483646)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    v5 = v4 - 1;
    if (v5 < 0)
      v5 = -1;
    return (v5 + 1);
  }
  else
  {
    v9 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(&a1[*(int *)(a3 + 28)], a2, v9);
  }
}

uint64_t sub_1001A71C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001A71D0);
}

char *sub_1001A71D0(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 2147483646)
  {
    *(_QWORD *)result = a2;
  }
  else
  {
    v7 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_1001A7244(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  v4[0] = &unk_10025BB10;
  v4[1] = &unk_10025BB10;
  v4[2] = &unk_10025BB10;
  result = type metadata accessor for ConnectionAssitantBannerMode.Mode(319);
  if (v3 <= 0x3F)
  {
    v4[3] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001A72BC()
{
  return sub_100152C98(&qword_100325CE0, &qword_100325CE8, (void (*)(void))sub_1001A72E8);
}

unint64_t sub_1001A72E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100325CF0;
  if (!qword_100325CF0)
  {
    v1 = sub_100007FAC(&qword_100325C40);
    sub_1000052EC(&qword_100325CF8, type metadata accessor for ConnectionAssitantSessionBannerContentView, (uint64_t)&unk_10025BB28);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100325CF0);
  }
  return result;
}

uint64_t sub_1001A7364(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029E224, 1);
}

uint64_t sub_1001A7374@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[5];

  v2 = v1;
  v26 = a1;
  v3 = sub_100003DB8(&qword_100325D00);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v27[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100325D08);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v27[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD **)(v1 + 32);
  if (v13)
  {
    v14 = v13[9];
    v15 = v13[10];
    sub_100007BBC(v13 + 6, v14);
    v16 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v15 + 16))(v27, v14, v15);
    v17 = static Axis.Set.vertical.getter(v16);
    __chkstk_darwin(v17, v18);
    *(&v26 - 2) = v2;
    *(&v26 - 1) = (uint64_t)v27;
    v19 = sub_100003DB8(&qword_100325D10);
    v20 = sub_1001A8524();
    ScrollView.init(_:showsIndicators:content:)(v17, 0, sub_1001A851C, &v26 - 4, v19, v20);
    v21 = sub_1000084FC(&qword_100325D30, &qword_100325D00, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
    View.scrollDisabled(_:)(1, v3, v21);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v26, v12, v8);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v27);
  }
  else
  {
    v23 = *(_QWORD *)(v1 + 40);
    v24 = type metadata accessor for UIMetrics();
    v25 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v23, v24, v25);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001A7574@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;

  v6 = type metadata accessor for ConnectionAssitantSessionBannerContentView(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  __chkstk_darwin(v6, v9);
  v10 = sub_100003DB8(&qword_100325D28);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v14 = static HorizontalAlignment.center.getter(v12);
  *((_QWORD *)v14 + 1) = 0;
  v14[16] = 0;
  v15 = sub_100003DB8(&qword_100325D38);
  sub_1001A76F4(a1, a2, (uint64_t)&v14[*(int *)(v15 + 44)]);
  sub_1000E1F30(a1, (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for ConnectionAssitantSessionBannerContentView);
  v16 = *(unsigned __int8 *)(v7 + 80);
  v17 = (v16 + 16) & ~v16;
  v18 = swift_allocObject(&unk_1002F6948, v17 + v8, v16 | 7);
  v19 = sub_1000E8D6C((uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, type metadata accessor for ConnectionAssitantSessionBannerContentView);
  v20 = static Alignment.center.getter(v19);
  v22 = v21;
  sub_10000B234((uint64_t)v14, a3, &qword_100325D28);
  v23 = (_QWORD *)(a3 + *(int *)(sub_100003DB8(&qword_100325D10) + 36));
  *v23 = 0;
  v23[1] = 0;
  v23[2] = sub_1001A86BC;
  v23[3] = v18;
  v23[4] = v20;
  v23[5] = v22;
  return sub_100007FF0((uint64_t)v14, &qword_100325D28);
}

uint64_t sub_1001A76F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  CGFloat *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  double *v29;
  CGFloat v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t result;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v97 = a2;
  v100 = a3;
  v101 = sub_100003DB8(&qword_100325D40);
  __chkstk_darwin(v101, v4);
  v98 = (uint64_t)&v94 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (int *)type metadata accessor for CASessionBannerPossibleButtonView(0);
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  v13 = (char *)&v94 - v12;
  v14 = sub_100003DB8(&qword_100325D48);
  v16 = __chkstk_darwin(v14, v15);
  v18 = (char *)&v94 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v94 - v20;
  v99 = sub_100003DB8(&qword_100325D50);
  __chkstk_darwin(v99, v22);
  v24 = (CGFloat *)((char *)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  __chkstk_darwin(v25, v26);
  v28 = (char *)&v94 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = *(double **)(a1 + 16);
  if (v29)
  {
    v31 = v29[20];
    v30 = v29[21];
    v33 = v29[22];
    v32 = v29[23];
    v34 = a1 + *(int *)(type metadata accessor for ConnectionAssitantSessionBannerContentView(0) + 28);
    swift_storeEnumTagMultiPayload(v28, v25, 5);
    sub_10019E824(v34, (uint64_t)v28);
    v36 = v35;
    v37 = sub_10000AFFC((uint64_t)v28, type metadata accessor for ConnectionAssitantBannerMode.Mode);
    if ((v36 & 1) != 0)
    {
      v38 = type metadata accessor for ConnectivityModel();
      v39 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
      v40 = EnvironmentObject.init()(v38, v39);
      v97 = v41;
      v98 = v40;
      v42 = type metadata accessor for GeoLocationModel();
      v43 = sub_1000052EC(&qword_10031CD28, (uint64_t (*)(uint64_t))type metadata accessor for GeoLocationModel, (uint64_t)&unk_10024D2FC);
      v44 = EnvironmentObject.init()(v42, v43);
      v95 = v45;
      v96 = v44;
      v46 = type metadata accessor for GuidanceMessagesModel();
      v47 = sub_1000052EC(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel, (uint64_t)&unk_10024D2FC);
      v94 = EnvironmentObject.init()(v46, v47);
      v49 = v48;
      v50 = type metadata accessor for GuidanceModel();
      v51 = sub_1000052EC(&qword_100316B08, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceModel, (uint64_t)&unk_10024D2FC);
      v52 = EnvironmentObject.init()(v50, v51);
      v54 = v53;
      v55 = type metadata accessor for StewieModel();
      v56 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
      v57 = EnvironmentObject.init()(v55, v56);
      v59 = v58;
      v60 = type metadata accessor for TimeZoneModel(0);
      v61 = sub_1000052EC(&qword_10031CD30, type metadata accessor for TimeZoneModel, (uint64_t)&unk_10024D2FC);
      v62 = EnvironmentObject.init()(v60, v61);
      v64 = v63;
      v65 = type metadata accessor for TryOutModel(0);
      v66 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
      v67 = EnvironmentObject.init()(v65, v66);
      v68 = v97;
      *(_QWORD *)v24 = v98;
      *((_QWORD *)v24 + 1) = v68;
      v69 = v95;
      *((_QWORD *)v24 + 2) = v96;
      *((_QWORD *)v24 + 3) = v69;
      *((_QWORD *)v24 + 4) = v94;
      *((_QWORD *)v24 + 5) = v49;
      *((_QWORD *)v24 + 6) = v52;
      *((_QWORD *)v24 + 7) = v54;
      *((_QWORD *)v24 + 8) = v57;
      *((_QWORD *)v24 + 9) = v59;
      *((_QWORD *)v24 + 10) = v62;
      *((_QWORD *)v24 + 11) = v64;
      *((_QWORD *)v24 + 12) = v67;
      *((_QWORD *)v24 + 13) = v70;
      v24[14] = v31;
      v24[15] = v30;
      v24[16] = v33;
      v24[17] = v32;
      swift_storeEnumTagMultiPayload(v24, v99, 0);
      v71 = sub_10015027C();
      v72 = sub_1000084FC(&qword_100325D68, &qword_100325D40, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      return _ConditionalContent<>.init(storage:)(v24, &type metadata for ExplorerConnectionAssistantBannerView, v101, v71, v72);
    }
    else
    {
      *(_QWORD *)v21 = static VerticalAlignment.top.getter(v37);
      *((_QWORD *)v21 + 1) = 0;
      v21[16] = 0;
      v74 = sub_100003DB8(&qword_100325D58);
      sub_1001A7D64(a1, (uint64_t)&v21[*(int *)(v74 + 44)], v31, v30, v33, v32);
      sub_1000E1F30(v34, (uint64_t)v13, type metadata accessor for ConnectionAssitantBannerMode.Mode);
      v75 = &v13[v6[5]];
      v76 = type metadata accessor for AppEvents();
      v77 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
      *(_QWORD *)v75 = EnvironmentObject.init()(v76, v77);
      *((_QWORD *)v75 + 1) = v78;
      v79 = &v13[v6[6]];
      v80 = type metadata accessor for StewieModel();
      v81 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
      *(_QWORD *)v79 = EnvironmentObject.init()(v80, v81);
      *((_QWORD *)v79 + 1) = v82;
      v83 = &v13[v6[7]];
      v84 = type metadata accessor for UIMetrics();
      v85 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
      *(_QWORD *)v83 = EnvironmentObject.init()(v84, v85);
      *((_QWORD *)v83 + 1) = v86;
      sub_10000B234((uint64_t)v21, (uint64_t)v18, &qword_100325D48);
      sub_1000E1F30((uint64_t)v13, (uint64_t)v10, type metadata accessor for CASessionBannerPossibleButtonView);
      v87 = v98;
      sub_10000B234((uint64_t)v18, v98, &qword_100325D48);
      v88 = sub_100003DB8(&qword_100325D60);
      sub_1000E1F30((uint64_t)v10, v87 + *(int *)(v88 + 48), type metadata accessor for CASessionBannerPossibleButtonView);
      sub_10000AFFC((uint64_t)v10, type metadata accessor for CASessionBannerPossibleButtonView);
      sub_100007FF0((uint64_t)v18, &qword_100325D48);
      sub_10000B234(v87, (uint64_t)v24, &qword_100325D40);
      swift_storeEnumTagMultiPayload(v24, v99, 1);
      v89 = sub_10015027C();
      v90 = sub_1000084FC(&qword_100325D68, &qword_100325D40, (uint64_t)&protocol conformance descriptor for TupleView<A>);
      _ConditionalContent<>.init(storage:)(v24, &type metadata for ExplorerConnectionAssistantBannerView, v101, v89, v90);
      sub_100007FF0(v87, &qword_100325D40);
      sub_10000AFFC((uint64_t)v13, type metadata accessor for CASessionBannerPossibleButtonView);
      return sub_100007FF0((uint64_t)v21, &qword_100325D48);
    }
  }
  else
  {
    v91 = *(_QWORD *)(a1 + 24);
    v92 = type metadata accessor for BannerAppearanceModel(0);
    v93 = sub_1000052EC(&qword_100316AA8, type metadata accessor for BannerAppearanceModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v91, v92, v93);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001A7D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, CGFloat a3@<D0>, CGFloat a4@<D1>, CGFloat a5@<D2>, CGFloat a6@<D3>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  double Height;
  double v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  char *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  CGRect v83;

  v82 = a2;
  v80 = type metadata accessor for CASessionBannerStaticContentTrailingView(0);
  v12 = __chkstk_darwin(v80, v11);
  v81 = (uint64_t)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v14);
  v79 = (char *)&v73 - v15;
  v16 = type metadata accessor for CASessionBannerVariableContentView(0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = sub_100003DB8(&qword_100325D70);
  __chkstk_darwin(v75, v20);
  v22 = (char *)&v73 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100003DB8(&qword_1003214B8);
  __chkstk_darwin(v23, v24);
  v26 = (char *)&v73 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100003DB8(&qword_1003214C0);
  __chkstk_darwin(v27, v28);
  v30 = (char *)&v73 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = sub_100003DB8(&qword_100325D78);
  v32 = __chkstk_darwin(v77, v31);
  v34 = (char *)&v73 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32, v35);
  v76 = (uint64_t)&v73 - v36;
  v37 = type metadata accessor for CASessionBannerStaticContentLeadingView(0);
  v39 = __chkstk_darwin(v37, v38);
  v78 = (uint64_t)&v73 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v39, v41);
  v43 = (uint64_t *)((char *)&v73 - v42);
  v44 = a1 + *(int *)(type metadata accessor for ConnectionAssitantSessionBannerContentView(0) + 28);
  sub_1000E1F30(v44, (uint64_t)v43 + *(int *)(v37 + 20), type metadata accessor for ConnectionAssitantBannerMode.Mode);
  v45 = type metadata accessor for UIMetrics();
  v74 = v45;
  v73 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v46 = EnvironmentObject.init()(v45, v73);
  *v43 = v46;
  v43[1] = v47;
  *(_QWORD *)v26 = static VerticalAlignment.top.getter(v46);
  *((_QWORD *)v26 + 1) = 0;
  v26[16] = 0;
  v48 = (uint64_t)&v26[*(int *)(sub_100003DB8(&qword_100325D80) + 44)];
  v49 = sub_1000E1F30(v44, (uint64_t)v19, type metadata accessor for ConnectionAssitantBannerMode.Mode);
  LOBYTE(v37) = static Edge.Set.top.getter(v49);
  v83.origin.x = a3;
  v83.origin.y = a4;
  v83.size.width = a5;
  v83.size.height = a6;
  Height = CGRectGetHeight(v83);
  v51 = EdgeInsets.init(_all:)(Height);
  v53 = v52;
  v55 = v54;
  v57 = v56;
  sub_1000E1F30((uint64_t)v19, (uint64_t)v22, type metadata accessor for CASessionBannerVariableContentView);
  v58 = &v22[*(int *)(v75 + 36)];
  *v58 = v37;
  *((double *)v58 + 1) = v51;
  *((_QWORD *)v58 + 2) = v53;
  *((_QWORD *)v58 + 3) = v55;
  *((_QWORD *)v58 + 4) = v57;
  v58[40] = 0;
  sub_10000AFFC((uint64_t)v19, type metadata accessor for CASessionBannerVariableContentView);
  v59 = sub_10000B458((uint64_t)v22, v48, &qword_100325D70);
  v60 = static Alignment.center.getter(v59);
  sub_100133A64(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v30, 0.0, 1, INFINITY, 0, v60, v61);
  sub_100007FF0((uint64_t)v26, &qword_1003214B8);
  LOBYTE(v48) = static Edge.Set.all.getter(v62);
  sub_10000B234((uint64_t)v30, (uint64_t)v34, &qword_1003214C0);
  v63 = &v34[*(int *)(v77 + 36)];
  *v63 = v48;
  *((_QWORD *)v63 + 1) = 0;
  *((_QWORD *)v63 + 2) = 0;
  *(_OWORD *)(v63 + 24) = xmmword_10025B9F0;
  v63[40] = 0;
  sub_100007FF0((uint64_t)v30, &qword_1003214C0);
  v64 = v76;
  sub_10000B458((uint64_t)v34, v76, &qword_100325D78);
  v65 = v79;
  sub_1000E1F30(v44, (uint64_t)&v79[*(int *)(v80 + 20)], type metadata accessor for ConnectionAssitantBannerMode.Mode);
  *v65 = EnvironmentObject.init()(v74, v73);
  v65[1] = v66;
  v67 = v78;
  sub_1000E1F30((uint64_t)v43, v78, type metadata accessor for CASessionBannerStaticContentLeadingView);
  v68 = v64;
  sub_10000B234(v64, (uint64_t)v34, &qword_100325D78);
  v69 = v81;
  sub_1000E1F30((uint64_t)v65, v81, type metadata accessor for CASessionBannerStaticContentTrailingView);
  v70 = v82;
  sub_1000E1F30(v67, v82, type metadata accessor for CASessionBannerStaticContentLeadingView);
  v71 = sub_100003DB8(&qword_100325D88);
  sub_10000B234((uint64_t)v34, v70 + *(int *)(v71 + 48), &qword_100325D78);
  sub_1000E1F30(v69, v70 + *(int *)(v71 + 64), type metadata accessor for CASessionBannerStaticContentTrailingView);
  sub_10000AFFC((uint64_t)v65, type metadata accessor for CASessionBannerStaticContentTrailingView);
  sub_100007FF0(v68, &qword_100325D78);
  sub_10000AFFC((uint64_t)v43, type metadata accessor for CASessionBannerStaticContentLeadingView);
  sub_10000AFFC(v69, type metadata accessor for CASessionBannerStaticContentTrailingView);
  sub_100007FF0((uint64_t)v34, &qword_100325D78);
  return sub_10000AFFC(v67, type metadata accessor for CASessionBannerStaticContentLeadingView);
}

uint64_t sub_1001A82C0(_QWORD *a1, double a2, double a3)
{
  double v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  double v30;

  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v6 = ceil(a3);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10000D744(v7, (uint64_t)qword_10033FD60);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v28 = v12;
    *(_DWORD *)v11 = 136446466;
    v29 = *(_QWORD *)&a2;
    v30 = a3;
    type metadata accessor for CGSize(0);
    v14 = v13;
    v16 = String.init<A>(describing:)(&v29, v13, v15);
    v18 = v17;
    v29 = sub_100172BEC(v16, v17, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v11 + 4, v11 + 12);
    v19 = swift_bridgeObjectRelease(v18);
    *(_WORD *)(v11 + 12) = 2082;
    v29 = *(_QWORD *)&a2;
    v30 = v6;
    v20 = String.init<A>(describing:)(&v29, v14, v19);
    v22 = v21;
    v29 = sub_100172BEC(v20, v21, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Banner content changed, size: %{public}s, reporting rounded: %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }

  if (*a1)
  {
    v23 = *(_QWORD *)(*a1 + 192);
    v29 = *(_QWORD *)&a2;
    v30 = v6;
    swift_retain(v23);
    PassthroughSubject.send(_:)(&v29);
    return swift_release(v23);
  }
  else
  {
    v25 = a1[1];
    v26 = type metadata accessor for AppEvents();
    v27 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    result = EnvironmentObject.error()(0, v25, v26, v27);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001A851C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001A7574(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

unint64_t sub_1001A8524()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100325D18;
  if (!qword_100325D18)
  {
    v1 = sub_100007FAC(&qword_100325D10);
    sub_1000084FC(&qword_100325D20, &qword_100325D28, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_1000084FC(&qword_100321C60, &qword_100321C68, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100325D18);
  }
  return result;
}

uint64_t sub_1001A85C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = type metadata accessor for ConnectionAssitantSessionBannerContentView(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  swift_release(*(_QWORD *)(v0 + v4));
  swift_release(*(_QWORD *)(v0 + v4 + 16));
  swift_release(*(_QWORD *)(v0 + v4 + 32));
  v6 = v0 + v4 + *(int *)(v1 + 28);
  v7 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  if (swift_getEnumCaseMultiPayload(v6, v7) == 1)
  {
    v8 = type metadata accessor for ConnectionClosed(0);
    v9 = v6 + *(int *)(v8 + 20);
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v8 + 24)));
  }
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001A86BC(double a1, double a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ConnectionAssitantSessionBannerContentView(0) - 8)
                          + 80);
  return sub_1001A82C0((_QWORD *)(v2 + ((v5 + 16) & ~v5)), a1, a2);
}

uint64_t sub_1001A8700@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t result;
  _QWORD v45[8];
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD v56[6];

  v55 = a1;
  v2 = sub_100003DB8(&qword_1003214D8);
  __chkstk_darwin(v2, v3);
  v45[5] = (char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_100003DB8(&qword_1003214E0);
  __chkstk_darwin(v5, v6);
  v45[6] = (char *)v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = sub_100003DB8(&qword_1003260D0);
  v9 = __chkstk_darwin(v49, v8);
  v45[4] = (char *)v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  v45[7] = (char *)v45 - v12;
  v52 = sub_100003DB8(&qword_1003260D8);
  __chkstk_darwin(v52, v13);
  v51 = (char *)v45 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100003DB8(&qword_1003260E0);
  __chkstk_darwin(v47, v15);
  v48 = (char *)v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100003DB8(&qword_1003260E8);
  __chkstk_darwin(v54, v17);
  v50 = (char *)v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100003DB8(&qword_1003214C8);
  __chkstk_darwin(v19, v20);
  v21 = sub_100003DB8(&qword_1003214D0);
  __chkstk_darwin(v21, v22);
  v45[2] = (char *)v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100003DB8(&qword_1003260F0);
  v25 = __chkstk_darwin(v46, v24);
  v45[1] = (char *)v45 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v27);
  v45[3] = (char *)v45 - v28;
  v29 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  __chkstk_darwin(v29, v30);
  v32 = (char *)v45 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100003DB8(&qword_1003260F8);
  __chkstk_darwin(v33, v34);
  v53 = (char *)v45 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = (_QWORD *)*v1;
  if (*v1)
  {
    v38 = v36[9];
    v37 = v36[10];
    sub_100007BBC(v36 + 6, v38);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v37 + 16))(v56, v38, v37);
    v39 = type metadata accessor for CASessionBannerStaticContentLeadingView(0);
    sub_1000E1F30((uint64_t)v1 + *(int *)(v39 + 20), (uint64_t)v32, type metadata accessor for ConnectionAssitantBannerMode.Mode);
    v40 = (char *)&loc_1001A8A88 + 4 * word_10025BA40[swift_getEnumCaseMultiPayload(v32, v29)];
    __asm { BR              X10 }
  }
  v41 = v1[1];
  v42 = type metadata accessor for UIMetrics();
  v43 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v41, v42, v43);
  __break(1u);
  return result;
}

uint64_t sub_1001A928C@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t KeyPath;
  uint64_t v31;
  unint64_t v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t OpaqueTypeConformance2;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;

  v63 = a2;
  v3 = type metadata accessor for Image.Scale(0);
  v61 = *(_QWORD *)(v3 - 8);
  v62 = v3;
  __chkstk_darwin(v3, v4);
  v60 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SymbolVariants(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100003DB8(&qword_10031AAF0);
  v57 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54, v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100003DB8(&qword_10031E778);
  v56 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58, v14);
  v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100003DB8(&qword_10031E780);
  __chkstk_darwin(v53, v17);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100003DB8(&qword_100321FF8);
  __chkstk_darwin(v55, v20);
  v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100003DB8(&qword_100322000);
  __chkstk_darwin(v23, v24);
  v59 = (char *)&v53 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
    v27 = 7496035;
  else
    v27 = 7565171;
  v28 = Image.init(_internalSystemName:)(v27, 0xE300000000000000, v25);
  v29 = static Font.largeTitle.getter();
  KeyPath = swift_getKeyPath(&unk_10025BDD8);
  v64 = v28;
  v65 = KeyPath;
  v66 = v29;
  static SymbolVariants.circle.getter();
  v31 = sub_100003DB8(&qword_100316BE8);
  v32 = sub_10000AAB8();
  View.symbolVariant(_:)(v10, v31, v32);
  v33 = *(void (**)(char *, uint64_t))(v7 + 8);
  v33(v10, v6);
  swift_release(v64);
  swift_release(v65);
  v34 = swift_release(v66);
  static SymbolVariants.fill.getter(v34);
  v64 = v31;
  v65 = v32;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v64, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
  v36 = v54;
  View.symbolVariant(_:)(v10, v54, OpaqueTypeConformance2);
  v33(v10, v6);
  v37 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v13, v36);
  v38 = static Color.white.getter(v37);
  v39 = static Color.red.getter();
  v40 = v56;
  v41 = v58;
  (*(void (**)(char *, char *, uint64_t))(v56 + 16))(v19, v16, v58);
  v42 = (uint64_t *)&v19[*(int *)(v53 + 36)];
  *v42 = v38;
  v42[1] = v39;
  (*(void (**)(char *, uint64_t))(v40 + 8))(v16, v41);
  v44 = v60;
  v43 = v61;
  v45 = v62;
  (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v60, enum case for Image.Scale.large(_:), v62);
  v46 = swift_getKeyPath(&unk_10025BE08);
  v47 = v55;
  v48 = (uint64_t *)&v22[*(int *)(v55 + 36)];
  v49 = sub_100003DB8(&qword_10031A218);
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))((char *)v48 + *(int *)(v49 + 28), v44, v45);
  *v48 = v46;
  sub_10000B234((uint64_t)v19, (uint64_t)v22, &qword_10031E780);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v44, v45);
  sub_100007FF0((uint64_t)v19, &qword_10031E780);
  v50 = sub_10015195C();
  v51 = (uint64_t)v59;
  View.accessibility(hidden:)(1, v47, v50);
  sub_100007FF0((uint64_t)v22, &qword_100321FF8);
  return sub_10000B458(v51, v63, &qword_100322000);
}

void sub_1001A96A8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;

  v36 = a2;
  v3 = type metadata accessor for CASessionBannerConnectionClosedView(0);
  __chkstk_darwin(v3, v4);
  v5 = type metadata accessor for ConnectionClosed(0);
  __chkstk_darwin(v5, v6);
  v27 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100003DB8(&qword_100326040);
  __chkstk_darwin(v31, v8);
  v33 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100003DB8(&qword_100326048);
  __chkstk_darwin(v28, v10);
  v11 = sub_100003DB8(&qword_100326050);
  __chkstk_darwin(v11, v12);
  v29 = sub_100003DB8(&qword_100326058);
  __chkstk_darwin(v29, v13);
  v32 = sub_100003DB8(&qword_100326060);
  __chkstk_darwin(v32, v14);
  v30 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003DB8(&qword_100326068);
  v22 = __chkstk_darwin(v20, v21);
  v35 = (char *)&v27 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v24);
  v34 = (char *)&v27 - v25;
  sub_1000E1F30(a1, (uint64_t)v19, type metadata accessor for ConnectionAssitantBannerMode.Mode);
  v26 = (char *)sub_1001A9948 + 4 * word_10025BA4C[swift_getEnumCaseMultiPayload(v19, v16)];
  __asm { BR              X10 }
}

uint64_t sub_1001A9948()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v6 = type metadata accessor for UIMetrics();
  v7 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v8 = EnvironmentObject.init()(v6, v7);
  *v0 = v8;
  v0[1] = v9;
  swift_storeEnumTagMultiPayload(v0, v1, 0);
  v10 = sub_1001AF890();
  v11 = sub_1000052EC(&qword_100326098, type metadata accessor for CASessionBannerConnectionClosedView, (uint64_t)&unk_10025BFE4);
  swift_retain(v8);
  _ConditionalContent<>.init(storage:)(v0, &type metadata for CASessionBannerQuestionnaireView, v2, v10, v11);
  sub_10000B234(v4, v3, &qword_100326058);
  swift_storeEnumTagMultiPayload(v3, *(_QWORD *)(v5 - 248), 0);
  v12 = sub_100003DB8(&qword_1003260A8);
  v13 = sub_1001AF80C();
  v14 = sub_1001AF8D4();
  v15 = *(_QWORD *)(v5 - 232);
  _ConditionalContent<>.init(storage:)(v3, *(_QWORD *)(v5 - 240), v12, v13, v14);
  sub_100007FF0(v4, &qword_100326058);
  v16 = *(_QWORD *)(v5 - 208);
  sub_10000B234(v15, v16, &qword_100326060);
  swift_storeEnumTagMultiPayload(v16, *(_QWORD *)(v5 - 224), 0);
  v17 = sub_100003DB8(&qword_100326078);
  v18 = sub_100008140(&qword_100326080, &qword_100326060, (void (*)(void))sub_1001AF80C, (void (*)(void))sub_1001AF8D4);
  v19 = sub_1001AF980();
  v20 = *(_QWORD *)(v5 - 200);
  _ConditionalContent<>.init(storage:)(v16, *(_QWORD *)(v5 - 216), v17, v18, v19);
  sub_100007FF0(v15, &qword_100326060);
  swift_release(v8);
  v21 = *(_QWORD *)(v5 - 192);
  sub_10000B234(v20, v21, &qword_100326068);
  v22 = *(_QWORD *)(v5 - 184);
  sub_10000B234(v21, v22, &qword_100326068);
  v23 = v22 + *(int *)(sub_100003DB8(&qword_1003260C8) + 48);
  *(_QWORD *)v23 = 0;
  *(_BYTE *)(v23 + 8) = 0;
  sub_100007FF0(v20, &qword_100326068);
  return sub_100007FF0(v21, &qword_100326068);
}

void sub_1001AA140(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  *(_QWORD *)a2 = static HorizontalAlignment.leading.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v4 = sub_100003DB8(&qword_100326038);
  sub_1001A96A8(v2, a2 + *(int *)(v4 + 44));
}

uint64_t sub_1001AA184@<X0>(_QWORD *a1@<X8>)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(_QWORD);
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  char v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(char *, _QWORD, uint64_t);
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  uint64_t v112;
  void (*v113)(_QWORD, _QWORD, _QWORD);
  uint64_t v114;
  uint64_t result;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  void (*v122)(char *, uint64_t);
  unsigned int v123;
  void (*v124)(char *, _QWORD, uint64_t);
  unint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  _QWORD *v135;
  char *v136;
  uint64_t KeyPath;
  uint64_t v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  uint64_t v161;
  _OWORD v162[12];
  uint64_t v163;
  _OWORD v164[21];
  _OWORD v165[12];
  uint64_t v166;
  _QWORD v167[2];
  char v168;
  _BYTE v169[7];
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char v173;
  _BYTE v174[7];
  uint64_t v175;
  char v176;
  _BYTE v177[7];
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  char v181;
  _BYTE v182[7];
  uint64_t v183;
  char v184;
  _BYTE v185[7];
  uint64_t v186;
  uint64_t v187;
  _OWORD v188[12];
  uint64_t v189;
  _BYTE v190[7];
  unsigned __int8 v191;
  _BYTE v192[7];
  unsigned __int8 v193;
  _BYTE v194[7];
  _BYTE v195[7];
  unsigned __int8 v196;
  _BYTE v197[7];
  unsigned __int8 v198;
  _QWORD v199[5];
  uint64_t v200;
  unsigned __int8 v201;
  uint64_t v202;
  unsigned __int8 v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  char v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char v212;
  uint64_t v213;
  char v214;
  uint64_t v215;
  uint64_t v216;
  Swift::String v217;

  v135 = a1;
  v2 = type metadata accessor for Font.Leading(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v119 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = v1;
  v7 = *(_QWORD **)v1;
  if (*(_QWORD *)v1)
  {
    v8 = v7[9];
    v9 = v7[10];
    sub_100007BBC(v7 + 6, v8);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v9 + 16))(v199, v8, v9);
    v10 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v217._countAndFlagsBits = 0xD00000000000003DLL;
    v217._object = (void *)0x8000000100269360;
    v11._object = (void *)0x8000000100269340;
    v11._countAndFlagsBits = 0xD000000000000010;
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, (Swift::String_optional)0, (NSBundle)v10, v12, v217);

    v164[0] = v13;
    v125 = sub_10002B3F4();
    v15 = Text.init<A>(_:)(v164, &type metadata for String, v125, v14);
    v17 = v16;
    v19 = v18;
    v21 = v20 & 1;
    v22 = static Font.footnote.getter(v15);
    static Font.Weight.medium.getter(v22);
    v23 = Font.weight(_:)(v22);
    swift_release(v22);
    v24 = *(void (**)(_QWORD))(v3 + 104);
    v123 = enum case for Font.Leading.tight(_:);
    v124 = (void (*)(char *, _QWORD, uint64_t))v24;
    v24(v6);
    v25 = v6;
    v26 = Font.leading(_:)(v6, v23);
    swift_release(v23);
    v27 = *(void (**)(char *, uint64_t))(v3 + 8);
    v126 = v25;
    v127 = v2;
    v122 = v27;
    v27(v25, v2);
    v28 = Text.font(_:)(v26, v15, v17, v21, v19);
    v30 = v29;
    v32 = v31;
    v34 = v33;
    swift_release(v26);
    sub_10002B438(v15, v17, v21);
    swift_bridgeObjectRelease(v19);
    v35 = v136;
    v36 = *(_QWORD **)v136;
    if (!*(_QWORD *)v136)
      goto LABEL_6;
    v37 = v32 & 1;
    v38 = v36[9];
    v39 = v36[10];
    sub_100007BBC(v36 + 6, v38);
    v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v39 + 80))(v38, v39);
    v138 = Text.foregroundColor(_:)(v40, v28, v30, v37, v34);
    v139 = v41;
    v134 = v42;
    v44 = v43;
    sub_10002B438(v28, v30, v37);
    swift_release(v40);
    swift_bridgeObjectRelease(v34);
    KeyPath = swift_getKeyPath(&unk_10025C128);
    v133 = swift_getKeyPath(&unk_10025C158);
    v132 = swift_getKeyPath(&unk_10025C188);
    v46 = static Alignment.leading.getter(v132, v45);
    _FrameLayout.init(width:height:alignment:)(&v200, 0, 1, 0, 1, v46, v47);
    v128 = v200;
    v129 = v202;
    v130 = v205;
    v131 = v204;
    v198 = v44 & 1;
    v196 = 0;
    v193 = v201;
    v191 = v203;
    v48 = *(_QWORD **)v35;
    if (*(_QWORD *)v35)
    {
      v49 = v48[9];
      v50 = v48[10];
      sub_100007BBC(v48 + 6, v49);
      v51 = type metadata accessor for CASessionBannerConnectionClosedView(0);
      *(_QWORD *)&v164[0] = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 120))(&v35[*(int *)(v51 + 20)], v49, v50);
      *((_QWORD *)&v164[0] + 1) = v52;
      v54 = Text.init<A>(_:)(v164, &type metadata for String, v125, v53);
      v56 = v55;
      v58 = v57;
      v60 = v59 & 1;
      v61 = static Font.body.getter(v54);
      static Font.Weight.medium.getter(v61);
      v62 = Font.weight(_:)(v61);
      swift_release(v61);
      v64 = v126;
      v63 = v127;
      v124(v126, v123, v127);
      v65 = Font.leading(_:)(v64, v62);
      swift_release(v62);
      v122(v64, v63);
      v66 = Text.font(_:)(v65, v54, v56, v60, v58);
      v68 = v67;
      v70 = v69;
      v72 = v71;
      swift_release(v65);
      v73 = v136;
      sub_10002B438(v54, v56, v60);
      swift_bridgeObjectRelease(v58);
      v74 = *(_QWORD **)v73;
      if (*(_QWORD *)v73)
      {
        v75 = v70 & 1;
        v76 = v74[9];
        v77 = v74[10];
        sub_100007BBC(v74 + 6, v76);
        v78 = (*(uint64_t (**)(uint64_t, uint64_t))(v77 + 64))(v76, v77);
        v79 = Text.foregroundColor(_:)(v78, v66, v68, v75, v72);
        v81 = v80;
        v83 = v82;
        v85 = v84 & 1;
        sub_10002B438(v66, v68, v75);
        swift_release(v78);
        swift_bridgeObjectRelease(v72);
        v86 = swift_getKeyPath(&unk_10025C128);
        v87 = swift_getKeyPath(&unk_10025C158);
        v88 = swift_getKeyPath(&unk_10025C188);
        v206 = v79;
        v207 = v81;
        v208 = v85;
        v209 = v83;
        v210 = v86;
        v211 = 3;
        v212 = 0;
        v213 = v87;
        v214 = 0;
        v215 = v88;
        v216 = 0x3FE0000000000000;
        v90 = static Alignment.leading.getter(v88, v89);
        sub_1001332C8(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v188, v92, 0.0, 1, 0.0, 1, v90, v91);
        sub_10002B438(v79, v81, v85);
        swift_release(v88);
        swift_release(v87);
        swift_release(v86);
        swift_bridgeObjectRelease(v83);
        v150 = v188[10];
        v151 = v188[11];
        v152 = v189;
        v146 = v188[6];
        v147 = v188[7];
        v148 = v188[8];
        v149 = v188[9];
        v142 = v188[2];
        v143 = v188[3];
        v144 = v188[4];
        v145 = v188[5];
        v140 = v188[0];
        v141 = v188[1];
        v93 = type metadata accessor for ConnectionModel(0);
        v94 = sub_1000052EC(&qword_100316B10, type metadata accessor for ConnectionModel, (uint64_t)&unk_10024D2FC);
        v136 = (char *)EnvironmentObject.init()(v93, v94);
        v127 = v95;
        v96 = type metadata accessor for ConnectivityModel();
        v97 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
        v98 = EnvironmentObject.init()(v96, v97);
        v124 = v99;
        v125 = v98;
        v100 = type metadata accessor for UIMetrics();
        v101 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
        v102 = EnvironmentObject.init()(v100, v101);
        v119 = v103;
        v120 = v102;
        LODWORD(v126) = v198;
        v121 = v196;
        LODWORD(v122) = v193;
        v123 = v191;
        v105 = v133;
        v104 = v134;
        *(_QWORD *)&v153 = v138;
        *((_QWORD *)&v153 + 1) = v134;
        LOBYTE(v154) = v198;
        *(_DWORD *)((char *)&v154 + 1) = *(_DWORD *)v197;
        DWORD1(v154) = *(_DWORD *)&v197[3];
        *((_QWORD *)&v154 + 1) = v139;
        *(_QWORD *)&v155 = KeyPath;
        *((_QWORD *)&v155 + 1) = 2;
        LOBYTE(v156) = v196;
        DWORD1(v156) = *(_DWORD *)&v195[3];
        *(_DWORD *)((char *)&v156 + 1) = *(_DWORD *)v195;
        *((_QWORD *)&v156 + 1) = v133;
        LOBYTE(v157) = 0;
        DWORD1(v157) = *(_DWORD *)&v194[3];
        *(_DWORD *)((char *)&v157 + 1) = *(_DWORD *)v194;
        v107 = v131;
        v106 = v132;
        *((_QWORD *)&v157 + 1) = v132;
        *(_QWORD *)&v158 = 0x3FE0000000000000;
        v109 = v128;
        v108 = v129;
        *((_QWORD *)&v158 + 1) = v128;
        LOBYTE(v159) = v193;
        *(_DWORD *)((char *)&v159 + 1) = *(_DWORD *)v192;
        DWORD1(v159) = *(_DWORD *)&v192[3];
        *((_QWORD *)&v159 + 1) = v129;
        LOBYTE(v160) = v191;
        *(_DWORD *)((char *)&v160 + 1) = *(_DWORD *)v190;
        DWORD1(v160) = *(_DWORD *)&v190[3];
        *((_QWORD *)&v160 + 1) = v131;
        v162[10] = v150;
        v162[11] = v151;
        v162[6] = v146;
        v162[7] = v147;
        v162[8] = v148;
        v162[9] = v149;
        v162[2] = v142;
        v162[3] = v143;
        v162[4] = v144;
        v162[5] = v145;
        v162[0] = v140;
        v162[1] = v141;
        v164[6] = v159;
        v164[7] = v160;
        v164[2] = v155;
        v164[3] = v156;
        v164[4] = v157;
        v164[5] = v158;
        v164[0] = v153;
        v164[1] = v154;
        *(_OWORD *)((char *)&v164[18] + 8) = v150;
        *(_OWORD *)((char *)&v164[19] + 8) = v151;
        *(_OWORD *)((char *)&v164[16] + 8) = v148;
        *(_OWORD *)((char *)&v164[17] + 8) = v149;
        *(_OWORD *)((char *)&v164[13] + 8) = v145;
        *(_OWORD *)((char *)&v164[14] + 8) = v146;
        *(_OWORD *)((char *)&v164[15] + 8) = v147;
        *(_OWORD *)((char *)&v164[9] + 8) = v141;
        *(_OWORD *)((char *)&v164[10] + 8) = v142;
        *(_OWORD *)((char *)&v164[11] + 8) = v143;
        *(_OWORD *)((char *)&v164[12] + 8) = v144;
        v110 = v130;
        v161 = v130;
        v163 = v152;
        *(_QWORD *)&v164[8] = v130;
        *((_QWORD *)&v164[20] + 1) = v152;
        *(_OWORD *)((char *)&v164[8] + 8) = v140;
        v111 = v135;
        memcpy(v135, v164, 0x150uLL);
        v112 = v127;
        v111[42] = v136;
        v111[43] = v112;
        v113 = (void (*)(_QWORD, _QWORD, _QWORD))v124;
        v111[44] = v125;
        v111[45] = v113;
        v114 = v119;
        v111[46] = v120;
        v111[47] = v114;
        sub_100135360((uint64_t)&v153);
        sub_100135360((uint64_t)v162);
        v165[10] = v150;
        v165[11] = v151;
        v166 = v152;
        v165[6] = v146;
        v165[7] = v147;
        v165[8] = v148;
        v165[9] = v149;
        v165[2] = v142;
        v165[3] = v143;
        v165[4] = v144;
        v165[5] = v145;
        v165[0] = v140;
        v165[1] = v141;
        sub_100152A78((uint64_t)v165);
        v167[0] = v138;
        v167[1] = v104;
        v168 = (char)v126;
        *(_DWORD *)v169 = *(_DWORD *)v197;
        *(_DWORD *)&v169[3] = *(_DWORD *)&v197[3];
        v170 = v139;
        v171 = KeyPath;
        v172 = 2;
        v173 = v121;
        *(_DWORD *)v174 = *(_DWORD *)v195;
        *(_DWORD *)&v174[3] = *(_DWORD *)&v195[3];
        v175 = v105;
        v176 = 0;
        *(_DWORD *)&v177[3] = *(_DWORD *)&v194[3];
        *(_DWORD *)v177 = *(_DWORD *)v194;
        v178 = v106;
        v179 = 0x3FE0000000000000;
        v180 = v109;
        v181 = (char)v122;
        *(_DWORD *)&v182[3] = *(_DWORD *)&v192[3];
        *(_DWORD *)v182 = *(_DWORD *)v192;
        v183 = v108;
        v184 = v123;
        *(_DWORD *)v185 = *(_DWORD *)v190;
        *(_DWORD *)&v185[3] = *(_DWORD *)&v190[3];
        v186 = v107;
        v187 = v110;
        sub_100152A78((uint64_t)v167);
        return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v199);
      }
      v116 = *((_QWORD *)v73 + 1);
    }
    else
    {
LABEL_6:
      v116 = *((_QWORD *)v35 + 1);
    }
  }
  else
  {
    v116 = *((_QWORD *)v136 + 1);
  }
  v117 = type metadata accessor for UIMetrics();
  v118 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v116, v117, v118);
  __break(1u);
  return result;
}

uint64_t sub_1001AAB88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, void *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t result;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  void (*v112)(char *, uint64_t);
  unsigned int v113;
  void (*v114)(char *);
  unint64_t v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t KeyPath;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  uint64_t v142;
  _BYTE v143[7];
  unsigned __int8 v144;
  _BYTE v145[7];
  unsigned __int8 v146;
  _BYTE v147[7];
  _BYTE v148[7];
  unsigned __int8 v149;
  _BYTE v150[7];
  unsigned __int8 v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  _OWORD v161[12];
  uint64_t v162;
  _OWORD v163[21];
  _OWORD v164[12];
  uint64_t v165;
  _QWORD v166[2];
  char v167;
  _BYTE v168[7];
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char v172;
  _BYTE v173[7];
  uint64_t v174;
  char v175;
  _BYTE v176[7];
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  char v180;
  _BYTE v181[7];
  uint64_t v182;
  char v183;
  _BYTE v184[7];
  uint64_t v185;
  uint64_t v186;
  _QWORD v187[5];
  uint64_t v188;
  unsigned __int8 v189;
  uint64_t v190;
  unsigned __int8 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  char v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  uint64_t v204;
  Swift::String v205;

  v116 = a3;
  v125 = a4;
  v6 = type metadata accessor for Font.Leading(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v110 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v11 = (_QWORD *)(a1 + 48);
    v126 = a1;
    v127 = (_QWORD *)(a1 + 48);
    v12 = a1;
    v13 = *(_QWORD *)(a1 + 72);
    v14 = *(_QWORD *)(v12 + 80);
    sub_100007BBC(v11, v13);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v14 + 16))(v187, v13, v14);
    v15 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v205._countAndFlagsBits = 0xD00000000000003DLL;
    v205._object = (void *)0x8000000100269360;
    v16._object = (void *)0x8000000100269340;
    v16._countAndFlagsBits = 0xD000000000000010;
    v17._countAndFlagsBits = 0;
    v17._object = (void *)0xE000000000000000;
    v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v205);

    v163[0] = v18;
    v115 = sub_10002B3F4();
    v20 = Text.init<A>(_:)(v163, &type metadata for String, v115, v19);
    v22 = v21;
    v24 = v23;
    v26 = v25 & 1;
    v27 = static Font.footnote.getter(v20);
    static Font.Weight.medium.getter(v27);
    v28 = Font.weight(_:)(v27);
    swift_release(v27);
    v113 = enum case for Font.Leading.tight(_:);
    v114 = *(void (**)(char *))(v7 + 104);
    v114(v10);
    v29 = Font.leading(_:)(v10, v28);
    swift_release(v28);
    v112 = *(void (**)(char *, uint64_t))(v7 + 8);
    v112(v10, v6);
    v30 = Text.font(_:)(v29, v20, v22, v26, v24);
    v32 = v31;
    v110 = v10;
    v111 = v6;
    v34 = v33;
    v36 = v35;
    swift_release(v29);
    v37 = v34 & 1;
    sub_10002B438(v20, v22, v26);
    swift_bridgeObjectRelease(v24);
    v39 = v126;
    v38 = v127;
    v40 = *(_QWORD *)(v126 + 72);
    v41 = *(_QWORD *)(v126 + 80);
    sub_100007BBC(v127, v40);
    v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 80))(v40, v41);
    v43 = Text.foregroundColor(_:)(v42, v30, v32, v37, v36);
    v121 = v44;
    v122 = v43;
    LOBYTE(v24) = v45;
    v123 = v46;
    sub_10002B438(v30, v32, v37);
    swift_release(v42);
    swift_bridgeObjectRelease(v36);
    KeyPath = swift_getKeyPath(&unk_10025C128);
    v120 = swift_getKeyPath(&unk_10025C158);
    v119 = swift_getKeyPath(&unk_10025C188);
    v48 = static Alignment.leading.getter(v119, v47);
    _FrameLayout.init(width:height:alignment:)(&v188, 0, 1, 0, 1, v48, v49);
    v128 = v188;
    v129 = v190;
    v117 = v192;
    v124 = v193;
    v151 = v24 & 1;
    v149 = 0;
    v146 = v189;
    v144 = v191;
    v50 = *(_QWORD *)(v39 + 72);
    v51 = *(_QWORD *)(v39 + 80);
    sub_100007BBC(v38, v50);
    *(_QWORD *)&v163[0] = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v51 + 136))(v116, v50, v51);
    *((_QWORD *)&v163[0] + 1) = v52;
    v54 = Text.init<A>(_:)(v163, &type metadata for String, v115, v53);
    v56 = v55;
    v58 = v57;
    v60 = v59 & 1;
    v61 = static Font.body.getter(v54);
    static Font.Weight.medium.getter(v61);
    v62 = Font.weight(_:)(v61);
    swift_release(v61);
    v64 = v110;
    v63 = v111;
    ((void (*)(char *, _QWORD, uint64_t))v114)(v110, v113, v111);
    v65 = Font.leading(_:)(v64, v62);
    swift_release(v62);
    v112(v64, v63);
    v66 = v58;
    v67 = Text.font(_:)(v65, v54, v56, v60, v58);
    v69 = v68;
    LOBYTE(v62) = v70;
    v72 = v71;
    swift_release(v65);
    v73 = v62 & 1;
    sub_10002B438(v54, v56, v60);
    swift_bridgeObjectRelease(v66);
    v74 = *(_QWORD *)(v126 + 72);
    v75 = *(_QWORD *)(v126 + 80);
    sub_100007BBC(v127, v74);
    v76 = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 64))(v74, v75);
    v77 = Text.foregroundColor(_:)(v76, v67, v69, v73, v72);
    v79 = v78;
    v81 = v80;
    LOBYTE(v60) = v82 & 1;
    sub_10002B438(v67, v69, v73);
    swift_release(v76);
    swift_bridgeObjectRelease(v72);
    v83 = swift_getKeyPath(&unk_10025C128);
    v84 = swift_getKeyPath(&unk_10025C158);
    v85 = swift_getKeyPath(&unk_10025C188);
    v194 = v77;
    v195 = v79;
    v196 = v60;
    v197 = v81;
    v198 = v83;
    v199 = 3;
    v200 = 0;
    v201 = v84;
    v202 = 0;
    v203 = v85;
    v204 = 0x3FE0000000000000;
    v87 = static Alignment.leading.getter(v85, v86);
    sub_1001332C8(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v163, v89, 0.0, 1, 0.0, 1, v87, v88);
    sub_10002B438(v77, v79, v60);
    swift_release(v85);
    swift_release(v84);
    swift_release(v83);
    swift_bridgeObjectRelease(v81);
    v140 = v163[10];
    v141 = v163[11];
    v136 = v163[6];
    v137 = v163[7];
    v138 = v163[8];
    v139 = v163[9];
    v132 = v163[2];
    v133 = v163[3];
    v134 = v163[4];
    v135 = v163[5];
    v130 = v163[0];
    v131 = v163[1];
    LODWORD(v127) = v151;
    LODWORD(v115) = v149;
    v116 = v146;
    LODWORD(v126) = v144;
    v90 = v121;
    v91 = v122;
    *(_QWORD *)&v152 = v122;
    *((_QWORD *)&v152 + 1) = v121;
    LOBYTE(v153) = v151;
    *(_DWORD *)((char *)&v153 + 1) = *(_DWORD *)v150;
    DWORD1(v153) = *(_DWORD *)&v150[3];
    v92 = v123;
    v94 = KeyPath;
    v93 = v119;
    *((_QWORD *)&v153 + 1) = v123;
    *(_QWORD *)&v154 = KeyPath;
    *((_QWORD *)&v154 + 1) = 2;
    LOBYTE(v155) = v149;
    DWORD1(v155) = *(_DWORD *)&v148[3];
    *(_DWORD *)((char *)&v155 + 1) = *(_DWORD *)v148;
    v95 = v120;
    *((_QWORD *)&v155 + 1) = v120;
    LOBYTE(v156) = 0;
    DWORD1(v156) = *(_DWORD *)&v147[3];
    *(_DWORD *)((char *)&v156 + 1) = *(_DWORD *)v147;
    *((_QWORD *)&v156 + 1) = v119;
    *(_QWORD *)&v157 = 0x3FE0000000000000;
    *((_QWORD *)&v157 + 1) = v128;
    LOBYTE(v158) = v146;
    *(_DWORD *)((char *)&v158 + 1) = *(_DWORD *)v145;
    DWORD1(v158) = *(_DWORD *)&v145[3];
    *((_QWORD *)&v158 + 1) = v129;
    LOBYTE(v159) = v144;
    *(_DWORD *)((char *)&v159 + 1) = *(_DWORD *)v143;
    DWORD1(v159) = *(_DWORD *)&v143[3];
    v96 = v117;
    *((_QWORD *)&v159 + 1) = v117;
    v161[10] = v163[10];
    v161[11] = v163[11];
    v97 = v163[6];
    v98 = v163[7];
    v161[6] = v163[6];
    v161[7] = v163[7];
    v161[8] = v163[8];
    v161[9] = v163[9];
    v99 = v163[2];
    v100 = v163[3];
    v161[2] = v163[2];
    v161[3] = v163[3];
    v102 = v163[4];
    v101 = v163[5];
    v161[4] = v163[4];
    v161[5] = v163[5];
    v104 = v163[0];
    v103 = v163[1];
    v161[0] = v163[0];
    v161[1] = v163[1];
    v163[6] = v158;
    v163[7] = v159;
    v163[2] = v154;
    v163[3] = v155;
    v163[4] = v156;
    v163[5] = v157;
    v163[0] = v152;
    v163[1] = v153;
    *(_OWORD *)((char *)&v163[18] + 8) = v163[10];
    *(_OWORD *)((char *)&v163[19] + 8) = v163[11];
    *(_OWORD *)((char *)&v163[16] + 8) = v163[8];
    *(_OWORD *)((char *)&v163[17] + 8) = v163[9];
    *(_OWORD *)((char *)&v163[13] + 8) = v101;
    *(_OWORD *)((char *)&v163[14] + 8) = v97;
    *(_OWORD *)((char *)&v163[15] + 8) = v98;
    v105 = *(_QWORD *)&v163[12];
    *(_OWORD *)((char *)&v163[9] + 8) = v103;
    *(_OWORD *)((char *)&v163[10] + 8) = v99;
    *(_OWORD *)((char *)&v163[11] + 8) = v100;
    *(_OWORD *)((char *)&v163[12] + 8) = v102;
    v142 = v105;
    v106 = v124;
    v160 = v124;
    v162 = v105;
    *(_QWORD *)&v163[8] = v124;
    *((_QWORD *)&v163[20] + 1) = v105;
    *(_OWORD *)((char *)&v163[8] + 8) = v104;
    memcpy(v125, v163, 0x150uLL);
    v164[10] = v140;
    v164[11] = v141;
    v165 = v142;
    v164[6] = v136;
    v164[7] = v137;
    v164[9] = v139;
    v164[8] = v138;
    v164[2] = v132;
    v164[3] = v133;
    v164[5] = v135;
    v164[4] = v134;
    v164[1] = v131;
    v164[0] = v130;
    sub_100135360((uint64_t)&v152);
    sub_100135360((uint64_t)v161);
    sub_100152A78((uint64_t)v164);
    v166[0] = v91;
    v166[1] = v90;
    v167 = (char)v127;
    *(_DWORD *)v168 = *(_DWORD *)v150;
    *(_DWORD *)&v168[3] = *(_DWORD *)&v150[3];
    v169 = v92;
    v170 = v94;
    v171 = 2;
    v172 = v115;
    *(_DWORD *)v173 = *(_DWORD *)v148;
    *(_DWORD *)&v173[3] = *(_DWORD *)&v148[3];
    v174 = v95;
    v175 = 0;
    *(_DWORD *)&v176[3] = *(_DWORD *)&v147[3];
    *(_DWORD *)v176 = *(_DWORD *)v147;
    v177 = v93;
    v178 = 0x3FE0000000000000;
    v179 = v128;
    v180 = v116;
    *(_DWORD *)&v181[3] = *(_DWORD *)&v145[3];
    *(_DWORD *)v181 = *(_DWORD *)v145;
    v182 = v129;
    v183 = v126;
    *(_DWORD *)v184 = *(_DWORD *)v143;
    *(_DWORD *)&v184[3] = *(_DWORD *)&v143[3];
    v185 = v96;
    v186 = v106;
    sub_100152A78((uint64_t)v166);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v187);
  }
  else
  {
    v108 = type metadata accessor for UIMetrics();
    v109 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v108, v109);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001AB460@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return sub_1001AAB88(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), a1);
}

uint64_t sub_1001AB46C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t KeyPath;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __n128 v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t result;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD v68[10];
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  _QWORD v85[7];
  char v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  uint64_t v94;

  v64 = a4;
  v7 = type metadata accessor for Font.Leading(0);
  v66 = *(_QWORD *)(v7 - 8);
  v67 = v7;
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v11 = a1[9];
    v12 = a1[10];
    v65 = a1 + 6;
    sub_100007BBC(a1 + 6, v11);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v12 + 16))(v85, v11, v12);
    v13 = a1[9];
    v14 = a1[10];
    sub_100007BBC(a1 + 6, v13);
    *(_QWORD *)&v72 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v14 + 168))(a3 & 1, v13, v14);
    *((_QWORD *)&v72 + 1) = v15;
    v16 = sub_10002B3F4();
    v18 = Text.init<A>(_:)(&v72, &type metadata for String, v16, v17);
    v20 = v19;
    v63 = v21;
    v23 = v22 & 1;
    v24 = static Font.body.getter(v18);
    static Font.Weight.medium.getter(v24);
    v25 = Font.weight(_:)(v24);
    swift_release(v24);
    v27 = v66;
    v26 = v67;
    (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v10, enum case for Font.Leading.tight(_:), v67);
    v28 = Font.leading(_:)(v10, v25);
    swift_release(v25);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v10, v26);
    v29 = v63;
    v30 = Text.font(_:)(v28, v18, v20, v23, v63);
    v32 = v31;
    LOBYTE(v26) = v33;
    v67 = v34;
    swift_release(v28);
    v35 = v26 & 1;
    sub_10002B438(v18, v20, v23);
    swift_bridgeObjectRelease(v29);
    v37 = a1[9];
    v36 = a1[10];
    sub_100007BBC(v65, v37);
    v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 64))(v37, v36);
    v39 = v67;
    v40 = Text.foregroundColor(_:)(v38, v30, v32, v35, v67);
    v42 = v41;
    v44 = v43;
    LOBYTE(v20) = v45 & 1;
    sub_10002B438(v30, v32, v35);
    swift_release(v38);
    swift_bridgeObjectRelease(v39);
    KeyPath = swift_getKeyPath(&unk_10025C128);
    v47 = swift_getKeyPath(&unk_10025C158);
    v48 = swift_getKeyPath(&unk_10025C188);
    v85[5] = v40;
    v85[6] = v42;
    v86 = v20;
    v87 = v44;
    v88 = KeyPath;
    v89 = 3;
    v90 = 0;
    v91 = v47;
    v92 = 0;
    v93 = v48;
    v94 = 0x3FE0000000000000;
    v50 = static Alignment.leading.getter(v48, v49);
    sub_1001332C8(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v68, v52, 0.0, 1, 0.0, 1, v50, v51);
    sub_10002B438(v40, v42, v20);
    swift_release(v48);
    swift_release(v47);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v44);
    v82 = v69;
    v83 = v70;
    v84 = v71;
    v78 = v68[6];
    v79 = v68[7];
    v80 = v68[8];
    v81 = v68[9];
    v74 = v68[2];
    v75 = v68[3];
    v76 = v68[4];
    v77 = v68[5];
    v72 = v68[0];
    v73 = v68[1];
    v53 = v70;
    v54 = v64;
    *(_OWORD *)(v64 + 160) = v69;
    *(_OWORD *)(v54 + 176) = v53;
    *(_QWORD *)(v54 + 192) = v84;
    v55 = v79;
    *(_OWORD *)(v54 + 96) = v78;
    *(_OWORD *)(v54 + 112) = v55;
    v56 = v81;
    *(_OWORD *)(v54 + 128) = v80;
    *(_OWORD *)(v54 + 144) = v56;
    v57 = v75;
    *(_OWORD *)(v54 + 32) = v74;
    *(_OWORD *)(v54 + 48) = v57;
    v58 = v77;
    *(_OWORD *)(v54 + 64) = v76;
    *(_OWORD *)(v54 + 80) = v58;
    v59 = v73;
    *(_OWORD *)v54 = v72;
    *(_OWORD *)(v54 + 16) = v59;
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v85);
  }
  else
  {
    v61 = type metadata accessor for UIMetrics();
    v62 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v61, v62);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001AB858@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001AB46C(*(_QWORD **)v1, *(_QWORD *)(v1 + 8), *(_BYTE *)(v1 + 16), a1);
}

uint64_t sub_1001AB864@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  unint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  __int128 v54;
  uint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t result;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  _OWORD v69[10];
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  Swift::String v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  uint64_t v85;
  _QWORD v86[7];
  char v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  Swift::String v96;

  v64 = a3;
  v5 = type metadata accessor for Font.Leading(0);
  v66 = *(_QWORD *)(v5 - 8);
  v67 = v5;
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v68 = a1 + 6;
    v9 = a1[9];
    v10 = a1[10];
    sub_100007BBC(a1 + 6, v9);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v10 + 16))(v86, v9, v10);
    v11 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v96._countAndFlagsBits = 0xD000000000000067;
    v96._object = (void *)0x8000000100262500;
    v12._object = (void *)0x80000001002624D0;
    v12._countAndFlagsBits = 0xD00000000000002FLL;
    v13._countAndFlagsBits = 0;
    v13._object = (void *)0xE000000000000000;
    v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)v11, v13, v96);

    v73 = v14;
    v15 = sub_10002B3F4();
    v17 = Text.init<A>(_:)(&v73, &type metadata for String, v15, v16);
    v65 = a1;
    v18 = v17;
    v20 = v19;
    v22 = v21;
    v24 = v23 & 1;
    v25 = static Font.body.getter(v17);
    static Font.Weight.medium.getter(v25);
    v26 = Font.weight(_:)(v25);
    swift_release(v25);
    v28 = v66;
    v27 = v67;
    (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v8, enum case for Font.Leading.tight(_:), v67);
    v29 = Font.leading(_:)(v8, v26);
    swift_release(v26);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v8, v27);
    v30 = v22;
    v31 = Text.font(_:)(v29, v18, v20, v24, v22);
    v33 = v32;
    LOBYTE(v27) = v34;
    v36 = v35;
    swift_release(v29);
    v37 = v27 & 1;
    sub_10002B438(v18, v20, v24);
    swift_bridgeObjectRelease(v30);
    v39 = v65[9];
    v38 = v65[10];
    sub_100007BBC(v68, v39);
    v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 64))(v39, v38);
    v41 = Text.foregroundColor(_:)(v40, v31, v33, v37, v36);
    v43 = v42;
    v45 = v44;
    LOBYTE(v24) = v46 & 1;
    sub_10002B438(v31, v33, v37);
    swift_release(v40);
    swift_bridgeObjectRelease(v36);
    KeyPath = swift_getKeyPath(&unk_10025C128);
    v48 = swift_getKeyPath(&unk_10025C158);
    v49 = swift_getKeyPath(&unk_10025C188);
    v86[5] = v41;
    v86[6] = v43;
    v87 = v24;
    v88 = v45;
    v89 = KeyPath;
    v90 = 3;
    v91 = 0;
    v92 = v48;
    v93 = 0;
    v94 = v49;
    v95 = 0x3FE0000000000000;
    v51 = static Alignment.leading.getter(v49, v50);
    sub_1001332C8(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v69, v53, 0.0, 1, 0.0, 1, v51, v52);
    sub_10002B438(v41, v43, v24);
    swift_release(v49);
    swift_release(v48);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v45);
    v83 = v70;
    v84 = v71;
    v85 = v72;
    v79 = v69[6];
    v80 = v69[7];
    v81 = v69[8];
    v82 = v69[9];
    v75 = v69[2];
    v76 = v69[3];
    v77 = v69[4];
    v78 = v69[5];
    v73 = (Swift::String)v69[0];
    v74 = v69[1];
    v54 = v71;
    v55 = v64;
    *(_OWORD *)(v64 + 160) = v70;
    *(_OWORD *)(v55 + 176) = v54;
    *(_QWORD *)(v55 + 192) = v85;
    v56 = v80;
    *(_OWORD *)(v55 + 96) = v79;
    *(_OWORD *)(v55 + 112) = v56;
    v57 = v82;
    *(_OWORD *)(v55 + 128) = v81;
    *(_OWORD *)(v55 + 144) = v57;
    v58 = v76;
    *(_OWORD *)(v55 + 32) = v75;
    *(_OWORD *)(v55 + 48) = v58;
    v59 = v78;
    *(_OWORD *)(v55 + 64) = v77;
    *(_OWORD *)(v55 + 80) = v59;
    v60 = v74;
    *(Swift::String *)v55 = v73;
    *(_OWORD *)(v55 + 16) = v60;
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v86);
  }
  else
  {
    v62 = type metadata accessor for UIMetrics();
    v63 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v62, v63);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001ABCA8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001AB864(*(_QWORD **)v1, *(_QWORD *)(v1 + 8), a1);
}

uint64_t sub_1001ABCB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t (*v42)(__n128);
  __n128 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t KeyPath;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t result;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v120;
  _OWORD v121[12];
  uint64_t v122;
  _OWORD v123[12];
  uint64_t v124;
  _OWORD v125[12];
  uint64_t v126;
  _QWORD v127[7];
  char v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;

  v10 = type metadata accessor for Font.Leading(0);
  v12 = __chkstk_darwin(v10, v11);
  v15 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v105 = v13;
    v106 = v12;
    v16 = a3[9];
    v17 = a3[10];
    v104 = a3;
    v107 = a3 + 6;
    sub_100007BBC(a3 + 6, v16);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v17 + 16))(v127, v16, v17);
    if (a1)
    {
      swift_retain(a1);
      sub_1001BFA30();
      v19 = v18;
      v21 = v20;
      v23 = v22;
      swift_release(a1);
      swift_bridgeObjectRelease(v23);
      *(_QWORD *)&v125[0] = v19;
      *((_QWORD *)&v125[0] + 1) = v21;
      v24 = sub_10002B3F4();
      v26 = Text.init<A>(_:)(v125, &type metadata for String, v24, v25);
      v102 = v27;
      v103 = v28;
      v30 = v29 & 1;
      v31 = static Font.footnote.getter(v26);
      static Font.Weight.medium.getter(v31);
      v32 = Font.weight(_:)(v31);
      swift_release(v31);
      v34 = v105;
      v33 = v106;
      (*(void (**)(char *, _QWORD, uint64_t))(v105 + 104))(v15, enum case for Font.Leading.tight(_:), v106);
      v35 = Font.leading(_:)(v15, v32);
      swift_release(v32);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v33);
      v37 = v102;
      v36 = v103;
      v105 = Text.font(_:)(v35, v26, v102, v30, v103);
      v106 = v38;
      v101 = v39;
      LOBYTE(v34) = v40;
      swift_release(v35);
      LOBYTE(v32) = v34 & 1;
      sub_10002B438(v26, v37, v30);
      swift_bridgeObjectRelease(v36);
      v41 = v104[10];
      sub_100007BBC(v107, v104[9]);
      v42 = *(uint64_t (**)(__n128))(v41 + 96);
      v43 = swift_retain(a1);
      v44 = v42(v43);
      swift_release(a1);
      v46 = v105;
      v45 = v106;
      v47 = v101;
      v107 = (_QWORD *)Text.foregroundColor(_:)(v44, v105, v101, v34 & 1, v106);
      v49 = v48;
      v51 = v50;
      LOBYTE(v26) = v52 & 1;
      sub_10002B438(v46, v47, v32);
      swift_release(v44);
      swift_bridgeObjectRelease(v45);
      KeyPath = swift_getKeyPath(&unk_10025C128);
      v54 = swift_getKeyPath(&unk_10025C158);
      v55 = swift_getKeyPath(&unk_10025C188);
      v56 = v107;
      v127[5] = v107;
      v127[6] = v49;
      v128 = v26;
      v129 = v51;
      v130 = KeyPath;
      v131 = 2;
      v132 = 0;
      v133 = v54;
      v134 = 0;
      v135 = v55;
      v136 = 0x3FE0000000000000;
      v58 = static Alignment.leading.getter(v55, v57);
      sub_1001332C8(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v125, v60, 0.0, 1, 0.0, 1, v58, v59);
      sub_10002B438((uint64_t)v56, v49, v26);
      swift_release(v55);
      swift_release(v54);
      swift_release(KeyPath);
      swift_bridgeObjectRelease(v51);
      v118 = v125[10];
      v119 = v125[11];
      v120 = v126;
      v114 = v125[6];
      v115 = v125[7];
      v116 = v125[8];
      v117 = v125[9];
      v110 = v125[2];
      v111 = v125[3];
      v112 = v125[4];
      v113 = v125[5];
      v108 = v125[0];
      v109 = v125[1];
      v61 = type metadata accessor for GuidanceMessagesModel();
      v62 = sub_1000052EC(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel, (uint64_t)&unk_10024D2FC);
      v63 = (_QWORD *)EnvironmentObject.init()(v61, v62);
      v106 = v64;
      v107 = v63;
      v65 = type metadata accessor for UIMetrics();
      v66 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
      v67 = EnvironmentObject.init()(v65, v66);
      v69 = v68;
      v70 = type metadata accessor for ConnectionModel(0);
      v71 = sub_1000052EC(&qword_100316B10, type metadata accessor for ConnectionModel, (uint64_t)&unk_10024D2FC);
      v72 = EnvironmentObject.init()(v70, v71);
      v74 = v73;
      v75 = type metadata accessor for ConnectivityModel();
      v76 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
      v77 = EnvironmentObject.init()(v75, v76);
      v79 = v78;
      v80 = EnvironmentObject.init()(v65, v66);
      v81 = v119;
      v121[10] = v118;
      v121[11] = v119;
      v82 = v114;
      v83 = v115;
      v121[6] = v114;
      v121[7] = v115;
      v85 = v116;
      v84 = v117;
      v121[8] = v116;
      v121[9] = v117;
      v86 = v110;
      v87 = v111;
      v121[2] = v110;
      v121[3] = v111;
      v89 = v112;
      v88 = v113;
      v121[4] = v112;
      v121[5] = v113;
      v91 = v108;
      v90 = v109;
      v121[0] = v108;
      v121[1] = v109;
      *(_OWORD *)(a5 + 160) = v118;
      *(_OWORD *)(a5 + 176) = v81;
      *(_OWORD *)(a5 + 96) = v82;
      *(_OWORD *)(a5 + 112) = v83;
      *(_OWORD *)(a5 + 128) = v85;
      *(_OWORD *)(a5 + 144) = v84;
      *(_OWORD *)(a5 + 32) = v86;
      *(_OWORD *)(a5 + 48) = v87;
      *(_OWORD *)(a5 + 64) = v89;
      *(_OWORD *)(a5 + 80) = v88;
      v92 = v120;
      v122 = v120;
      *(_OWORD *)a5 = v91;
      *(_OWORD *)(a5 + 16) = v90;
      v93 = v107;
      *(_QWORD *)(a5 + 192) = v92;
      *(_QWORD *)(a5 + 200) = v93;
      *(_QWORD *)(a5 + 208) = v106;
      *(_QWORD *)(a5 + 216) = v67;
      *(_QWORD *)(a5 + 224) = v69;
      *(_QWORD *)(a5 + 232) = v72;
      *(_QWORD *)(a5 + 240) = v74;
      *(_QWORD *)(a5 + 248) = v77;
      *(_QWORD *)(a5 + 256) = v79;
      *(_QWORD *)(a5 + 264) = v80;
      *(_QWORD *)(a5 + 272) = v94;
      sub_100135360((uint64_t)v121);
      v123[10] = v118;
      v123[11] = v119;
      v124 = v120;
      v123[6] = v114;
      v123[7] = v115;
      v123[8] = v116;
      v123[9] = v117;
      v123[2] = v110;
      v123[3] = v111;
      v123[4] = v112;
      v123[5] = v113;
      v123[0] = v108;
      v123[1] = v109;
      sub_100152A78((uint64_t)v123);
      return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v127);
    }
  }
  else
  {
    v96 = type metadata accessor for UIMetrics();
    v97 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, a4, v96, v97);
    __break(1u);
  }
  v98 = type metadata accessor for ConnectivityModel();
  v99 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, a2, v98, v99);
  __break(1u);
  return result;
}

uint64_t sub_1001AC278@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001ABCB0(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1001AC284@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  unint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[3];
  uint64_t v76;
  uint64_t v77;
  _QWORD v78[6];

  v2 = v1;
  v74 = a1;
  v3 = sub_100003DB8(&qword_100322178);
  __chkstk_darwin(v3, v4);
  v68 = (uint64_t *)((char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v65 = sub_100003DB8(&qword_100322180);
  __chkstk_darwin(v65, v6);
  v67 = (uint64_t)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100322188);
  v70 = *(_QWORD *)(v8 - 8);
  v71 = v8;
  __chkstk_darwin(v8, v9);
  v66 = (uint64_t)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003DB8(&qword_100322190);
  v72 = *(_QWORD *)(v11 - 8);
  v73 = v11;
  __chkstk_darwin(v11, v12);
  v69 = (uint64_t)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003DB8(&qword_100316B68);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for TransmissionProgress(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (char *)&v64 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100003DB8(&qword_100322198);
  __chkstk_darwin(v23, v24);
  v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = (_QWORD *)v1[4];
  if (v27)
  {
    v28 = (uint64_t)(v27 + 6);
    v30 = v27[9];
    v29 = v27[10];
    sub_100007BBC(v27 + 6, v30);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v29 + 16))(v78, v30, v29);
    v31 = *v1;
    if (*v2)
    {
      swift_retain(*v2);
      sub_1001BF244((uint64_t)v17);
      swift_release(v31);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
      {
        sub_100007FF0((uint64_t)v17, &qword_100316B68);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56))(v26, 1, 1, v73);
LABEL_12:
        sub_10000B458((uint64_t)v26, v74, &qword_100322198);
        return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v78);
      }
      sub_1000E8D6C((uint64_t)v17, (uint64_t)v22, type metadata accessor for TransmissionProgress);
      sub_100007CBC(v28, (uint64_t)v75);
      v32 = v76;
      v33 = v77;
      sub_100007BBC(v75, v76);
      v34 = v2[2];
      if (v34)
      {
        v35 = (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 112))(v22, *(unsigned __int8 *)(*(_QWORD *)(v34 + 48) + 120), v32, v33);
        v37 = v36;
        v38 = _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v75);
        v39 = HIBYTE(v37) & 0xF;
        if ((v37 & 0x2000000000000000) == 0)
          v39 = v35 & 0xFFFFFFFFFFFFLL;
        if (v39)
        {
          v40 = static HorizontalAlignment.leading.getter(v38);
          v41 = (uint64_t)v68;
          *v68 = v40;
          *(_QWORD *)(v41 + 8) = 0;
          *(_BYTE *)(v41 + 16) = 0;
          v42 = sub_100003DB8(&qword_1003221A0);
          sub_1001AC7C0((uint64_t)v2, (uint64_t)v22, v78, v35, v37, v41 + *(int *)(v42 + 44));
          swift_bridgeObjectRelease(v37);
          v44 = static Edge.Set.top.getter(v43);
          v45 = EdgeInsets.init(_all:)(12.0);
          v47 = v46;
          v49 = v48;
          v51 = v50;
          v52 = v67;
          sub_10000B234(v41, v67, &qword_100322178);
          v53 = v52 + *(int *)(v65 + 36);
          *(_BYTE *)v53 = v44;
          *(double *)(v53 + 8) = v45;
          *(_QWORD *)(v53 + 16) = v47;
          *(_QWORD *)(v53 + 24) = v49;
          *(_QWORD *)(v53 + 32) = v51;
          *(_BYTE *)(v53 + 40) = 0;
          sub_100007FF0(v41, &qword_100322178);
          v54 = v66;
          sub_10000B234(v52, v66, &qword_100322180);
          v55 = v71;
          *(_WORD *)(v54 + *(int *)(v71 + 36)) = 256;
          sub_100007FF0(v52, &qword_100322180);
          v56 = v69;
          sub_10000B458(v54, v69, &qword_100322188);
          v57 = 0;
        }
        else
        {
          swift_bridgeObjectRelease(v37);
          v57 = 1;
          v55 = v71;
          v56 = v69;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v70 + 56))(v56, v57, 1, v55);
        sub_10000B458(v56, (uint64_t)v26, &qword_100322190);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v26, 0, 1, v73);
        sub_10000AFFC((uint64_t)v22, type metadata accessor for TransmissionProgress);
        goto LABEL_12;
      }
      v59 = v2[3];
      v60 = type metadata accessor for ConnectivityModel();
      v61 = (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel;
      v62 = &qword_100316B00;
    }
    else
    {
      v59 = v2[1];
      v60 = type metadata accessor for ConnectionModel(0);
      v61 = type metadata accessor for ConnectionModel;
      v62 = &qword_100316B10;
    }
  }
  else
  {
    v59 = v1[5];
    v60 = type metadata accessor for UIMetrics();
    v61 = (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics;
    v62 = (unint64_t *)&qword_100316A00;
  }
  v63 = sub_1000052EC(v62, v61, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v59, v60, v63);
  __break(1u);
  return result;
}

void sub_1001AC7C0(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  unint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  _BYTE *v63;
  id v64;
  uint64_t v65;
  _BYTE *v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  char v70;
  uint64_t v71;
  uint64_t KeyPath;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  char v79;
  uint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  unint64_t v91;
  _BYTE *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  _QWORD *v96;
  _QWORD *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  double v104;
  uint64_t v105;
  _BYTE *v106;
  uint64_t v107;
  __n128 v108;
  __n128 v109;
  uint64_t v110;
  unint64_t v111;
  __n128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  double v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE *v148;
  uint64_t v149;
  _BYTE *v150;
  uint64_t v151;
  int v152;
  int v153;
  _OWORD *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  char v163;
  char v164;
  uint64_t v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  _BYTE *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  unint64_t v190;
  __n128 v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  char v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t (*v212)(__n128);
  __n128 v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  double v228;
  char v229;
  uint64_t v230;
  char v231;
  char v232;
  uint64_t *v233;
  int v234;
  int v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t (*v241)();
  unint64_t *v242;
  uint64_t v243;
  _BYTE v244[4];
  int v245;
  int v246;
  int v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _BYTE *v258;
  uint64_t v259;
  _BYTE *v260;
  uint64_t v261;
  _BYTE *v262;
  _BYTE *v263;
  double v264;
  double v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  unsigned __int8 v270;
  _DWORD v271[2];
  _DWORD v272[2];
  _DWORD v273[2];
  unsigned __int8 v274;
  _DWORD v275[2];
  char v276;
  _BYTE v277[7];
  unsigned __int8 v278;
  _BYTE v279[7];
  char v280;
  _BYTE v281[7];
  __int128 v282;
  __int128 v283;
  __int128 v284;
  __int128 v285;
  __int128 v286;
  __int128 v287;
  __int128 v288;
  __int128 v289;
  __int128 v290;
  __int128 v291;
  _OWORD v292[2];
  double v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  __int128 v297;
  char v298;
  _BYTE v299[7];
  uint64_t v300;
  char v301;
  _BYTE v302[7];
  uint64_t v303;
  uint64_t v304;
  char v305;
  _BYTE v306[7];
  double v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  char v311;
  _BYTE v312[7];
  uint64_t v313;
  char v314;
  _BYTE v315[7];
  uint64_t v316;
  char v317;
  _BYTE v318[7];
  uint64_t v319;
  uint64_t v320;
  __int16 v321;
  uint64_t v322;
  char v323;
  uint64_t v324;
  unsigned __int8 v325;
  uint64_t v326;
  uint64_t v327;

  v264 = *(double *)&a4;
  v265 = *(double *)&a5;
  v255 = a2;
  v261 = sub_100003DB8(&qword_1003221A8);
  __chkstk_darwin(v261, v9);
  v258 = &v244[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100003DB8(&qword_100316B28);
  v256 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v14 = &v244[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = sub_100003DB8(&qword_10031FFC8);
  v257 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  v18 = &v244[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = sub_100003DB8(&qword_10031FFD0);
  v21 = __chkstk_darwin(v19, v20);
  v262 = &v244[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v21, v23);
  v263 = &v244[-v24];
  v266 = sub_100003DB8(&qword_1003221B0);
  __chkstk_darwin(v266, v25);
  v27 = (uint64_t *)&v244[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v259 = sub_100003DB8(&qword_1003221B8);
  __chkstk_darwin(v259, v28);
  v30 = &v244[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v267 = sub_100003DB8(&qword_1003221C0);
  __chkstk_darwin(v267, v31);
  v260 = &v244[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v33 = type metadata accessor for Font.Leading(0);
  v35 = __chkstk_darwin(v33, v34);
  v38 = &v244[-((v37 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v254 = a1;
  v39 = *(_QWORD *)(a1 + 16);
  if (!v39)
  {
    v239 = *(_QWORD *)(v254 + 24);
    v240 = type metadata accessor for ConnectivityModel();
    v241 = type metadata accessor for ConnectivityModel;
    v242 = &qword_100316B00;
    goto LABEL_9;
  }
  v40 = 1 << *(_BYTE *)(*(_QWORD *)(v39 + 48) + 120);
  v268 = v27;
  v269 = a6;
  if ((v40 & 0x1D8) != 0)
  {
    v41 = *(_QWORD *)&v265;
    v293 = v264;
    v294 = *(_QWORD *)&v265;
    v42 = v35;
    v43 = v36;
    v44 = v38;
    v45 = sub_10002B3F4();
    v46 = swift_bridgeObjectRetain(v41);
    v47 = Text.init<A>(_:)(&v293, &type metadata for String, v45, v46);
    v264 = *(double *)&v48;
    v265 = *(double *)&v47;
    v50 = v49;
    v52 = v51 & 1;
    v53 = static Font.subheadline.getter();
    static Font.Weight.medium.getter(v53);
    v54 = Font.weight(_:)(v53);
    swift_release(v53);
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v43 + 104))(v44, enum case for Font.Leading.tight(_:), v42);
    v55 = Font.leading(_:)(v44, v54);
    swift_release(v54);
    (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v44, v42);
    v56 = *(_QWORD *)&v264;
    v57 = *(_QWORD *)&v265;
    v58 = v50;
    v59 = Text.font(_:)(v55, *(_QWORD *)&v265, *(_QWORD *)&v264, v52, v50);
    v61 = v60;
    LOBYTE(v50) = v62;
    v262 = v63;
    swift_release(v55);
    LOBYTE(v55) = v50 & 1;
    sub_10002B438(v57, v56, v52);
    swift_bridgeObjectRelease(v58);
    v64 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
    v65 = Color.init(_:)(v64);
    v66 = v262;
    *(double *)&v67 = COERCE_DOUBLE(Text.foregroundColor(_:)(v65, v59, v61, v50 & 1, v262));
    v69 = v68;
    LOBYTE(v57) = v70;
    v265 = *(double *)&v71;
    swift_release(v65);
    LOBYTE(v65) = v57 & 1;
    sub_10002B438(v59, v61, v55);
    swift_bridgeObjectRelease(v66);
    KeyPath = swift_getKeyPath(&unk_10025C128);
    v73 = swift_getKeyPath(&unk_10025C158);
    v74 = swift_getKeyPath(&unk_10025C188);
    v76 = static Alignment.leading.getter(v74, v75);
    _FrameLayout.init(width:height:alignment:)(&v293, 0, 1, 0, 1, v76, v77);
    v78 = v293;
    v79 = v294;
    v80 = v295;
    v81 = v296;
    LOBYTE(v275[0]) = v65;
    LOBYTE(v273[0]) = 0;
    LOBYTE(v272[0]) = v294;
    LOBYTE(v271[0]) = v296;
    v263 = v69;
    v264 = *(double *)&v67;
    *(double *)v30 = *(double *)&v67;
    *((_QWORD *)v30 + 1) = v69;
    v82 = (uint64_t)v69;
    v30[16] = v65;
    *(_DWORD *)(v30 + 17) = v282;
    *((_DWORD *)v30 + 5) = *(_DWORD *)((char *)&v282 + 3);
    v83 = *(_QWORD *)&v265;
    *((double *)v30 + 3) = v265;
    *((_QWORD *)v30 + 4) = KeyPath;
    *((_QWORD *)v30 + 5) = 1;
    v30[48] = 0;
    v84 = v322;
    *((_DWORD *)v30 + 13) = *(_DWORD *)((char *)&v322 + 3);
    *(_DWORD *)(v30 + 49) = v84;
    *((_QWORD *)v30 + 7) = v73;
    v30[64] = 0;
    v85 = *(_DWORD *)v281;
    *((_DWORD *)v30 + 17) = *(_DWORD *)&v281[3];
    *(_DWORD *)(v30 + 65) = v85;
    *((_QWORD *)v30 + 9) = v74;
    *((_QWORD *)v30 + 10) = 0x3FE0000000000000;
    *((double *)v30 + 11) = v78;
    v30[96] = v79;
    LODWORD(v78) = *(_DWORD *)v279;
    *((_DWORD *)v30 + 25) = *(_DWORD *)&v279[3];
    *(_DWORD *)(v30 + 97) = LODWORD(v78);
    *((_QWORD *)v30 + 13) = v80;
    v30[112] = v81;
    LODWORD(v78) = *(_DWORD *)v277;
    *((_DWORD *)v30 + 29) = *(_DWORD *)&v277[3];
    *(_DWORD *)(v30 + 113) = LODWORD(v78);
    *(_OWORD *)(v30 + 120) = v297;
    *((_WORD *)v30 + 68) = 256;
    swift_storeEnumTagMultiPayload(v30, v259, 1);
    sub_10002B750(v67, v82, v65);
    swift_bridgeObjectRetain(v83);
    swift_retain(KeyPath);
    swift_retain(v73);
    swift_retain(v74);
    v86 = sub_100003DB8(&qword_1003221D0);
    v87 = sub_1000084FC(&qword_1003221D8, &qword_1003221A8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v88 = sub_100152AE4();
    v89 = (uint64_t)v260;
    _ConditionalContent<>.init(storage:)(v30, v261, v86, v87, v88);
    v90 = v268;
    sub_10000B234(v89, (uint64_t)v268, &qword_1003221C0);
    swift_storeEnumTagMultiPayload(v90, v266, 0);
    v91 = sub_100152BBC();
    _ConditionalContent<>.init(storage:)(v90, v267, v86, v91, v88);
    sub_100007FF0(v89, &qword_1003221C0);
    sub_10002B438(*(uint64_t *)&v264, (uint64_t)v263, v65);
    swift_release(v74);
    swift_release(v73);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(*(_QWORD *)&v265);
  }
  else if ((v40 & 0x203) != 0)
  {
    v253 = v36;
    v254 = v35;
    v252 = v15;
    v92 = v38;
    v293 = (double)*(uint64_t *)(v255 + *(int *)(type metadata accessor for TransmissionProgress(0) + 28));
    LOBYTE(v294) = 0;
    *(_QWORD *)&v282 = 0x4059000000000000;
    v93 = sub_10010CCCC();
    ProgressView.init<A>(value:total:)(&v293, &v282, &type metadata for Double, v93);
    v94 = a3[3];
    v95 = a3[4];
    v96 = sub_100007BBC(a3, v94);
    v296 = v94;
    *(_QWORD *)&v297 = *(_QWORD *)(v95 + 8);
    v97 = sub_10010CD10(&v293);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v94 - 8) + 16))(v97, v96, v94);
    v98 = sub_1000084FC(&qword_100316C20, &qword_100316B28, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    v99 = sub_10010CD4C();
    View.progressViewStyle<A>(_:)(&v293, v11, &type metadata for MessageProgressViewStyle, v98, v99);
    sub_10010CD90(&v293);
    (*(void (**)(_BYTE *, uint64_t))(v256 + 8))(v14, v11);
    v101 = a3[3];
    v100 = a3[4];
    sub_100007BBC(a3, v101);
    v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v100 + 8) + 8))(v101);
    v104 = v103;
    v105 = static Alignment.center.getter(v102);
    v106 = v262;
    v109 = sub_100132A38(0, 1, 0.0, 1, 0.0, 1, 0, 1, (uint64_t)v262, v108, 0.0, 1, v104, 0, v105, v107);
    (*(void (**)(_BYTE *, uint64_t, __n128))(v257 + 8))(v18, v252, v109);
    sub_10000B458((uint64_t)v106, (uint64_t)v263, &qword_10031FFD0);
    v110 = *(_QWORD *)&v265;
    v293 = v264;
    v294 = *(_QWORD *)&v265;
    v111 = sub_10002B3F4();
    v112 = swift_bridgeObjectRetain(v110);
    v113 = Text.init<A>(_:)(&v293, &type metadata for String, v111, v112);
    v115 = v114;
    v265 = *(double *)&v116;
    v118 = v117 & 1;
    v119 = static Font.subheadline.getter();
    static Font.Weight.medium.getter(v119);
    v120 = Font.weight(_:)(v119);
    swift_release(v119);
    v122 = v253;
    v121 = v254;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v253 + 104))(v92, enum case for Font.Leading.tight(_:), v254);
    v123 = Font.leading(_:)(v92, v120);
    swift_release(v120);
    (*(void (**)(_BYTE *, uint64_t))(v122 + 8))(v92, v121);
    v124 = *(_QWORD *)&v265;
    v125 = Text.font(_:)(v123, v113, v115, v118, *(_QWORD *)&v265);
    v127 = v126;
    LOBYTE(v92) = v128;
    v256 = v129;
    swift_release(v123);
    v130 = v92 & 1;
    sub_10002B438(v113, v115, v118);
    swift_bridgeObjectRelease(v124);
    v131 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
    v132 = Color.init(_:)(v131);
    v133 = v256;
    v265 = COERCE_DOUBLE(Text.foregroundColor(_:)(v132, v125, v127, v130, v256));
    v255 = v134;
    LOBYTE(v113) = v135;
    v257 = v136;
    swift_release(v132);
    LODWORD(v264) = v113 & 1;
    sub_10002B438(v125, v127, v130);
    swift_bridgeObjectRelease(v133);
    v256 = swift_getKeyPath(&unk_10025C128);
    v254 = swift_getKeyPath(&unk_10025C158);
    v253 = swift_getKeyPath(&unk_10025C188);
    LODWORD(v252) = static Edge.Set.top.getter(v253);
    v137 = EdgeInsets.init(_all:)(4.0);
    v139 = v138;
    v141 = v140;
    v143 = v142;
    v276 = v113 & 1;
    v274 = 0;
    v270 = 0;
    v146 = static Alignment.leading.getter(v144, v145);
    _FrameLayout.init(width:height:alignment:)(&v322, 0, 1, 0, 1, v146, v147);
    LOBYTE(v125) = v323;
    v250 = v324;
    v251 = v322;
    v248 = v327;
    v249 = v326;
    LOBYTE(v118) = v276;
    v245 = v325;
    v246 = v274;
    v247 = v270;
    v280 = v323;
    v278 = v325;
    v148 = v262;
    sub_10000B234((uint64_t)v263, (uint64_t)v262, &qword_10031FFD0);
    v149 = (uint64_t)v148;
    v150 = v258;
    sub_10000B234(v149, (uint64_t)v258, &qword_10031FFD0);
    v151 = *(int *)(sub_100003DB8(&qword_1003221C8) + 48);
    *(_DWORD *)((char *)&v283 + 1) = v275[0];
    DWORD1(v283) = *(_DWORD *)((char *)v275 + 3);
    *(_DWORD *)((char *)&v285 + 1) = v273[0];
    DWORD1(v285) = *(_DWORD *)((char *)v273 + 3);
    DWORD1(v286) = *(_DWORD *)((char *)v272 + 3);
    LODWORD(v130) = v272[0];
    *(_DWORD *)((char *)&v286 + 1) = v272[0];
    HIDWORD(v287) = *(_DWORD *)((char *)v271 + 3);
    LODWORD(v127) = v271[0];
    *(_DWORD *)((char *)&v287 + 9) = v271[0];
    DWORD1(v290) = *(_DWORD *)&v281[3];
    LODWORD(v115) = *(_DWORD *)v281;
    *(_DWORD *)((char *)&v290 + 1) = *(_DWORD *)v281;
    v152 = *(_DWORD *)v279;
    *(_DWORD *)((char *)&v291 + 1) = *(_DWORD *)v279;
    DWORD1(v291) = *(_DWORD *)&v279[3];
    v153 = *(_DWORD *)v277;
    *(_DWORD *)((char *)v292 + 1) = *(_DWORD *)v277;
    DWORD1(v292[0]) = *(_DWORD *)&v277[3];
    v154 = &v150[v151];
    *(double *)&v155 = v265;
    v156 = v255;
    v157 = v256;
    *(double *)&v282 = v265;
    *((_QWORD *)&v282 + 1) = v255;
    v158 = v118;
    LOBYTE(v283) = v118;
    v159 = v257;
    *((_QWORD *)&v283 + 1) = v257;
    *(_QWORD *)&v284 = v256;
    *((_QWORD *)&v284 + 1) = 1;
    v160 = v246;
    LOBYTE(v285) = v246;
    v162 = v253;
    v161 = v254;
    *((_QWORD *)&v285 + 1) = v254;
    LOBYTE(v286) = 0;
    *(_DWORD *)((char *)&v295 + 1) = v275[0];
    *((_QWORD *)&v286 + 1) = v253;
    *(_QWORD *)&v287 = 0x3FE0000000000000;
    v163 = v252;
    BYTE8(v287) = v252;
    *(double *)&v288 = v137;
    *((_QWORD *)&v288 + 1) = v139;
    *(_QWORD *)&v289 = v141;
    *((_QWORD *)&v289 + 1) = v143;
    v164 = v247;
    LOBYTE(v290) = v247;
    v165 = v250;
    v166 = v251;
    *((_QWORD *)&v290 + 1) = v251;
    LOBYTE(v291) = v125;
    *((_QWORD *)&v291 + 1) = v250;
    v167 = v245;
    LOBYTE(v292[0]) = v245;
    v169 = v248;
    v168 = v249;
    *((_QWORD *)&v292[0] + 1) = v249;
    *(_QWORD *)&v292[1] = v248;
    *(_DWORD *)v299 = v273[0];
    WORD4(v292[1]) = 256;
    v170 = v282;
    v171 = v283;
    v172 = v285;
    v173 = v286;
    v154[2] = v284;
    v154[3] = v172;
    *v154 = v170;
    v154[1] = v171;
    v174 = v287;
    v175 = v289;
    v176 = v290;
    v154[6] = v288;
    v154[7] = v175;
    v154[4] = v173;
    v154[5] = v174;
    v177 = v291;
    v178 = v292[0];
    *(_OWORD *)((char *)v154 + 170) = *(_OWORD *)((char *)v292 + 10);
    v154[9] = v177;
    v154[10] = v178;
    v154[8] = v176;
    LOBYTE(v295) = v158;
    HIDWORD(v295) = *(_DWORD *)((char *)v275 + 3);
    *((_QWORD *)&v297 + 1) = 1;
    v293 = *(double *)&v155;
    v294 = v156;
    v296 = v159;
    *(_QWORD *)&v297 = v157;
    v298 = v160;
    *(_DWORD *)&v299[3] = *(_DWORD *)((char *)v273 + 3);
    v300 = v161;
    v179 = v161;
    v301 = 0;
    *(_DWORD *)&v302[3] = *(_DWORD *)((char *)v272 + 3);
    *(_DWORD *)v302 = v130;
    v303 = v162;
    v180 = v162;
    v304 = 0x3FE0000000000000;
    v305 = v163;
    *(_DWORD *)&v306[3] = *(_DWORD *)((char *)v271 + 3);
    *(_DWORD *)v306 = v127;
    v307 = v137;
    v308 = v139;
    v309 = v141;
    v310 = v143;
    v311 = v164;
    *(_DWORD *)v312 = v115;
    *(_DWORD *)&v312[3] = *(_DWORD *)&v281[3];
    v313 = v166;
    v314 = v125;
    *(_DWORD *)v315 = v152;
    *(_DWORD *)&v315[3] = *(_DWORD *)&v279[3];
    v316 = v165;
    v317 = v167;
    *(_DWORD *)v318 = v153;
    *(_DWORD *)&v318[3] = *(_DWORD *)&v277[3];
    v319 = v168;
    v320 = v169;
    v321 = 256;
    sub_10002B750(v155, v156, SLOBYTE(v264));
    swift_bridgeObjectRetain(v159);
    swift_retain(v157);
    swift_retain(v179);
    v181 = v180;
    swift_retain(v180);
    sub_100135360((uint64_t)&v282);
    sub_100152A78((uint64_t)&v293);
    sub_100007FF0((uint64_t)v262, &qword_10031FFD0);
    v182 = v258;
    sub_10000B234((uint64_t)v258, (uint64_t)v30, &qword_1003221A8);
    swift_storeEnumTagMultiPayload(v30, v259, 0);
    v183 = sub_100003DB8(&qword_1003221D0);
    v184 = sub_1000084FC(&qword_1003221D8, &qword_1003221A8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v185 = sub_100152AE4();
    v186 = (uint64_t)v260;
    _ConditionalContent<>.init(storage:)(v30, v261, v183, v184, v185);
    sub_100007FF0((uint64_t)v182, &qword_1003221A8);
    v187 = v268;
    sub_10000B234(v186, (uint64_t)v268, &qword_1003221C0);
    swift_storeEnumTagMultiPayload(v187, v266, 0);
    v188 = sub_100152BBC();
    _ConditionalContent<>.init(storage:)(v187, v267, v183, v188, v185);
    sub_100007FF0(v186, &qword_1003221C0);
    sub_10002B438(*(uint64_t *)&v265, v255, SLOBYTE(v264));
    swift_release(v181);
    swift_release(v179);
    swift_release(v256);
    swift_bridgeObjectRelease(v257);
    sub_100007FF0((uint64_t)v263, &qword_10031FFD0);
  }
  else
  {
    v189 = *(_QWORD *)&v265;
    v293 = v264;
    v294 = *(_QWORD *)&v265;
    v190 = sub_10002B3F4();
    v191 = swift_bridgeObjectRetain(v189);
    v192 = Text.init<A>(_:)(&v293, &type metadata for String, v190, v191);
    v194 = v193;
    v196 = v195;
    v198 = v197 & 1;
    v200 = a3[3];
    v199 = a3[4];
    sub_100007BBC(a3, v200);
    v201 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v199 + 8) + 32))(v200);
    v202 = Text.font(_:)(v201, v192, v194, v198, v196);
    v204 = v203;
    v206 = v205;
    v265 = *(double *)&v207;
    swift_release(v201);
    sub_10002B438(v192, v194, v198);
    swift_bridgeObjectRelease(v196);
    v208 = v254;
    v209 = *(_QWORD **)(v254 + 32);
    if (!v209)
    {
      while (1)
      {
        v239 = *(_QWORD *)(v208 + 40);
        v240 = type metadata accessor for UIMetrics();
        v241 = type metadata accessor for UIMetrics;
        v242 = (unint64_t *)&qword_100316A00;
LABEL_9:
        v243 = sub_1000052EC(v242, (uint64_t (*)(uint64_t))v241, (uint64_t)&unk_10024D2FC);
        EnvironmentObject.error()(0, v239, v240, v243);
        __break(1u);
      }
    }
    v210 = v206 & 1;
    v211 = v209[10];
    sub_100007BBC(v209 + 6, v209[9]);
    v212 = *(uint64_t (**)(__n128))(v211 + 96);
    v213 = swift_retain(v39);
    v214 = v212(v213);
    swift_release(v39);
    v215 = *(_QWORD *)&v265;
    v216 = Text.foregroundColor(_:)(v214, v202, v204, v210, *(_QWORD *)&v265);
    v218 = v217;
    LOBYTE(v212) = v219;
    v221 = v220;
    sub_10002B438(v202, v204, v210);
    swift_release(v214);
    swift_bridgeObjectRelease(v215);
    v222 = swift_getKeyPath(&unk_10025C128);
    v223 = swift_getKeyPath(&unk_10025C158);
    v224 = swift_getKeyPath(&unk_10025C188);
    v226 = static Alignment.leading.getter(v224, v225);
    _FrameLayout.init(width:height:alignment:)(&v293, 0, 1, 0, 1, v226, v227);
    v228 = v293;
    v229 = v294;
    v230 = v295;
    v231 = v296;
    v232 = v212 & 1;
    LOBYTE(v275[0]) = v212 & 1;
    LOBYTE(v273[0]) = 0;
    LOBYTE(v272[0]) = v294;
    LOBYTE(v271[0]) = v296;
    v233 = v268;
    *v268 = v216;
    v233[1] = v218;
    *((_BYTE *)v233 + 16) = v232;
    *(_DWORD *)((char *)v233 + 17) = v282;
    *((_DWORD *)v233 + 5) = *(_DWORD *)((char *)&v282 + 3);
    v233[3] = v221;
    v233[4] = v222;
    v233[5] = 1;
    *((_BYTE *)v233 + 48) = 0;
    v234 = v322;
    *((_DWORD *)v233 + 13) = *(_DWORD *)((char *)&v322 + 3);
    *(_DWORD *)((char *)v233 + 49) = v234;
    v233[7] = v223;
    *((_BYTE *)v233 + 64) = 0;
    v235 = *(_DWORD *)v281;
    *((_DWORD *)v233 + 17) = *(_DWORD *)&v281[3];
    *(_DWORD *)((char *)v233 + 65) = v235;
    v233[9] = v224;
    v233[10] = 0x3FE0000000000000;
    *((double *)v233 + 11) = v228;
    *((_BYTE *)v233 + 96) = v229;
    LODWORD(v228) = *(_DWORD *)v279;
    *((_DWORD *)v233 + 25) = *(_DWORD *)&v279[3];
    *(_DWORD *)((char *)v233 + 97) = LODWORD(v228);
    v233[13] = v230;
    *((_BYTE *)v233 + 112) = v231;
    LODWORD(v228) = *(_DWORD *)v277;
    *((_DWORD *)v233 + 29) = *(_DWORD *)&v277[3];
    *(_DWORD *)((char *)v233 + 113) = LODWORD(v228);
    *(_OWORD *)(v233 + 15) = v297;
    *((_WORD *)v233 + 68) = 256;
    swift_storeEnumTagMultiPayload(v233, v266, 1);
    v236 = sub_100003DB8(&qword_1003221D0);
    v237 = sub_100152BBC();
    v238 = sub_100152AE4();
    _ConditionalContent<>.init(storage:)(v233, v267, v236, v237, v238);
  }
}

uint64_t sub_1001AD918@<X0>(uint64_t a1@<X8>)
{
  return sub_1001AC284(a1);
}

uint64_t sub_1001AD950@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  double v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v3 = (_QWORD *)*v1;
  if (*v1)
  {
    v4 = v3[9];
    v5 = v3[10];
    sub_100007BBC(v3 + 6, v4);
    v6 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v5 + 16))(v14, v4, v5);
    v7 = static HorizontalAlignment.center.getter(v6);
    v9 = static Edge.Set.all.getter(v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
    *(_BYTE *)(a1 + 24) = v9;
    *(_OWORD *)(a1 + 32) = xmmword_10025BA10;
    *(_OWORD *)(a1 + 48) = xmmword_10025BA00;
    *(_BYTE *)(a1 + 64) = 0;
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v14);
  }
  else
  {
    v11 = v1[1];
    v12 = type metadata accessor for UIMetrics();
    v13 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v11, v12, v13);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001ADA2C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  __int16 v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t KeyPath;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  unint64_t v72;
  char *v73;
  __n128 v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  double v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t result;
  uint64_t v98;
  uint64_t v99;
  uint64_t (*v100)();
  unint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  __int16 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[4];

  v2 = v1;
  v130 = a1;
  v3 = type metadata accessor for KeyboardShortcut(0);
  v127 = *(_QWORD *)(v3 - 8);
  v128 = v3;
  __chkstk_darwin(v3, v4);
  v126 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for ButtonBorderShape(0);
  v120 = *(_QWORD *)(v6 - 8);
  v121 = v6;
  __chkstk_darwin(v6, v7);
  v119 = (char *)&v105 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v113 = type metadata accessor for BorderedButtonStyle(0);
  v110 = *(_QWORD *)(v113 - 8);
  __chkstk_darwin(v113, v9);
  v108 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for CASessionBannerPossibleButtonView(0);
  v105 = *(_QWORD *)(v11 - 8);
  v12 = *(_QWORD *)(v105 + 64);
  __chkstk_darwin(v11, v13);
  v14 = (char *)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v107 = sub_100003DB8(&qword_100325FD8);
  v106 = *(_QWORD *)(v107 - 8);
  __chkstk_darwin(v107, v15);
  v17 = (char *)&v105 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_100003DB8(&qword_100325FE0);
  v111 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114, v18);
  v109 = (char *)&v105 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_100003DB8(&qword_100325FE8);
  __chkstk_darwin(v112, v20);
  v115 = (char *)&v105 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100003DB8(&qword_100325FF0);
  v117 = *(_QWORD *)(v22 - 8);
  v118 = v22;
  __chkstk_darwin(v22, v23);
  v116 = (char *)&v105 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100003DB8(&qword_100325FF8);
  __chkstk_darwin(v122, v25);
  v124 = (char *)&v105 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100003DB8(&qword_100326000);
  __chkstk_darwin(v27, v28);
  v125 = (char *)&v105 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100003DB8(&qword_100326008);
  v129 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30, v31);
  v123 = (uint64_t)&v105 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = sub_100003DB8(&qword_100326010);
  __chkstk_darwin(v33, v34);
  v36 = (char *)&v105 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = (_QWORD *)(v1 + *(int *)(v11 + 28));
  v38 = (_QWORD *)*v37;
  if (!*v37)
  {
    v98 = v37[1];
    v99 = type metadata accessor for UIMetrics();
    v100 = type metadata accessor for UIMetrics;
    v101 = (unint64_t *)&qword_100316A00;
LABEL_12:
    v102 = sub_1000052EC(v101, (uint64_t (*)(uint64_t))v100, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v98, v99, v102);
    __break(1u);
    return result;
  }
  v39 = v38[9];
  v40 = v38[10];
  sub_100007BBC(v38 + 6, v39);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v40 + 16))(v132, v39, v40);
  v41 = (uint64_t *)(v1 + *(int *)(v11 + 24));
  v42 = *v41;
  if (!*v41)
  {
    v98 = v41[1];
    v99 = type metadata accessor for StewieModel();
    v100 = type metadata accessor for StewieModel;
    v101 = &qword_1003186E0;
    goto LABEL_12;
  }
  if (*(_QWORD *)(v42 + 64))
  {
    v43 = *(_WORD *)(v42 + 120);
    v44 = sub_100067058(0, *(_QWORD *)(v42 + 88));
    v45 = 1;
    if (v44 && (v43 & 0xFF00) != 0x200 && (v43 & 0x100) != 0)
    {
      sub_1000E1F30(v2, (uint64_t)&v105 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for CASessionBannerPossibleButtonView);
      v46 = *(unsigned __int8 *)(v105 + 80);
      v47 = (v46 + 16) & ~v46;
      v48 = swift_allocObject(&unk_1002F6970, v47 + v12, v46 | 7);
      v49 = sub_1000E8D6C((uint64_t)v14, v48 + v47, type metadata accessor for CASessionBannerPossibleButtonView);
      __chkstk_darwin(v49, v50);
      v103 = (uint64_t)v132;
      v51 = sub_1001AF5AC();
      v52 = Button.init(action:label:)(sub_1001AF580, v48, sub_1001525C8, &v105 - 4, &_s8SOSBuddy36CallEmergencyServicesButtonLabelViewVN_0, v51);
      v53 = v108;
      BorderedButtonStyle.init()(v52);
      v54 = sub_1000084FC(&qword_100326020, &qword_100325FD8, (uint64_t)&protocol conformance descriptor for Button<A>);
      v55 = sub_1000052EC((unint64_t *)&qword_100319760, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedButtonStyle);
      v56 = v109;
      v57 = v107;
      v58 = v113;
      View.buttonStyle<A>(_:)(v53, v107, v113, v54, v55);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v53, v58);
      v59 = (*(uint64_t (**)(char *, uint64_t))(v106 + 8))(v17, v57);
      v60 = v119;
      static ButtonBorderShape.capsule.getter(v59);
      KeyPath = swift_getKeyPath(&unk_10025BD78);
      v62 = v112;
      v63 = (uint64_t)v115;
      v64 = (uint64_t *)&v115[*(int *)(v112 + 36)];
      v65 = sub_100003DB8(&qword_100318968);
      v67 = v120;
      v66 = v121;
      (*(void (**)(char *, char *, uint64_t))(v120 + 16))((char *)v64 + *(int *)(v65 + 28), v60, v121);
      *v64 = KeyPath;
      v68 = v111;
      v69 = v114;
      (*(void (**)(uint64_t, char *, uint64_t))(v111 + 16))(v63, v56, v114);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v60, v66);
      v70 = (*(uint64_t (**)(char *, uint64_t))(v68 + 8))(v56, v69);
      v71 = v126;
      static KeyboardShortcut.defaultAction.getter(v70);
      v72 = sub_1001AF5F8();
      v73 = v116;
      View.keyboardShortcut(_:)(v71, v62, v72);
      (*(void (**)(char *, uint64_t))(v127 + 8))(v71, v128);
      sub_100007FF0(v63, &qword_100325FE8);
      v75 = static Color.green.getter(v74);
      v76 = swift_getKeyPath(&unk_10025BDA8);
      v131 = v75;
      v77 = swift_retain(v75);
      v78 = AnyShapeStyle.init<A>(_:)(&v131, &type metadata for Color, &protocol witness table for Color, v77);
      v80 = v117;
      v79 = v118;
      v81 = (uint64_t)v124;
      (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v124, v73, v118);
      swift_release(v75);
      v82 = v122;
      v83 = (uint64_t *)(v81 + *(int *)(v122 + 36));
      *v83 = v76;
      v83[1] = v78;
      (*(void (**)(char *, uint64_t))(v80 + 8))(v73, v79);
      v84 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000017, 0x800000010026B980);
      v104 = 2;
      v103 = 58;
      v85 = Text.init(_:tableName:bundle:comment:)(v84);
      v87 = v86;
      v89 = v88;
      v91 = v90 & 1;
      v92 = sub_1001AF708();
      v93 = (uint64_t)v125;
      View.accessibility(label:)(v85, v87, v91, v89, v82, v92);
      sub_10002B438(v85, v87, v91);
      swift_bridgeObjectRelease(v89);
      sub_100007FF0(v81, &qword_100325FF8);
      LOBYTE(v85) = static Edge.Set.all.getter(v94);
      v95 = v123;
      sub_10000B234(v93, v123, &qword_100326000);
      v96 = v95 + *(int *)(v30 + 36);
      *(_BYTE *)v96 = v85;
      *(_OWORD *)(v96 + 8) = xmmword_10025BA20;
      *(_OWORD *)(v96 + 24) = xmmword_10025BA30;
      *(_BYTE *)(v96 + 40) = 0;
      sub_100007FF0(v93, &qword_100326000);
      sub_10000B458(v95, (uint64_t)v36, &qword_100326008);
      v45 = 0;
    }
  }
  else
  {
    v45 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v129 + 56))(v36, v45, 1, v30);
  sub_10000B458((uint64_t)v36, v130, &qword_100326010);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v132);
}

uint64_t sub_1001AE2B0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;

  v1 = (uint64_t *)(a1 + *(int *)(type metadata accessor for CASessionBannerPossibleButtonView(0) + 20));
  v2 = *v1;
  if (*v1)
  {
    v3 = *(_QWORD *)(v2 + 168);
    v11 = 0;
    swift_retain(v3);
    PassthroughSubject.send(_:)(&v11);
    swift_release(v3);
    v4 = *(_QWORD *)(v2 + 96);
    swift_retain(v4);
    v5 = sub_100003DB8(&qword_10032B0E0);
    v6 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v5, v6);
    return swift_release(v4);
  }
  else
  {
    v8 = v1[1];
    v9 = type metadata accessor for AppEvents();
    v10 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    result = EnvironmentObject.error()(0, v8, v9, v10);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001AE3A8(uint64_t a1)
{
  uint64_t v1;
  __int128 v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  static VerticalAlignment.center.getter(a1);
  v1 = sub_1001AE588((uint64_t)&v14);
  v2 = v14;
  v3 = v15;
  v4 = v16;
  v5 = v17;
  v6 = v18;
  v7 = v19;
  v8 = static Alignment.center.getter(v1);
  sub_100133B6C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, &v14, v10, 0.0, 1, 0.0, 1, v8, v9);
  sub_10002B438(v2, *((uint64_t *)&v2 + 1), v3);
  swift_release(v7);
  swift_release(v6);
  swift_release(v5);
  swift_bridgeObjectRelease(v4);
  v11 = sub_100003DB8(&qword_1003261E8);
  v12 = sub_1001AFEE0();
  View.accessibility(hidden:)(1, v11, v12);
  return sub_1001AFF64((uint64_t)&v14);
}

uint64_t sub_1001AE588@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  unint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t KeyPath;
  uint64_t v39;
  uint64_t result;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;

  v2 = type metadata accessor for Font.Leading(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v43._countAndFlagsBits = 0xD00000000000002CLL;
  v43._object = (void *)0x800000010026E370;
  v8._object = (void *)0x800000010026B980;
  v8._countAndFlagsBits = 0xD000000000000017;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v43);

  v42 = v10;
  v11 = sub_10002B3F4();
  v13 = Text.init<A>(_:)(&v42, &type metadata for String, v11, v12);
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  v20 = static Font.title3.getter(v13);
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for Font.Leading.tight(_:), v2);
  v21 = Font.leading(_:)(v6, v20);
  swift_release(v20);
  v22 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  static Font.Weight.semibold.getter(v22);
  v23 = Font.weight(_:)(v21);
  swift_release(v21);
  v24 = Text.font(_:)(v23, v13, v15, v19, v17);
  v26 = v25;
  LOBYTE(v21) = v27;
  v29 = v28;
  swift_release(v23);
  LOBYTE(v23) = v21 & 1;
  sub_10002B438(v13, v15, v19);
  v30 = swift_bridgeObjectRelease(v17);
  v31 = static Color.green.getter(v30);
  v32 = Text.foregroundColor(_:)(v31, v24, v26, v21 & 1, v29);
  v34 = v33;
  LOBYTE(v19) = v35;
  v37 = v36;
  swift_release(v31);
  sub_10002B438(v24, v26, v23);
  swift_bridgeObjectRelease(v29);
  KeyPath = swift_getKeyPath(&unk_10025C128);
  v39 = swift_getKeyPath(&unk_10025C158);
  result = swift_getKeyPath(&unk_10025C188);
  *(_QWORD *)a1 = v32;
  *(_QWORD *)(a1 + 8) = v34;
  *(_BYTE *)(a1 + 16) = v19 & 1;
  *(_QWORD *)(a1 + 24) = v37;
  *(_QWORD *)(a1 + 32) = KeyPath;
  *(_QWORD *)(a1 + 40) = 1;
  *(_BYTE *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v39;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 72) = result;
  *(_QWORD *)(a1 + 80) = 0x3FE0000000000000;
  return result;
}

uint64_t type metadata accessor for CASessionBannerPossibleButtonView(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100325DE8, (uint64_t)&nominal type descriptor for CASessionBannerPossibleButtonView);
}

uint64_t type metadata accessor for CASessionBannerStaticContentTrailingView(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100325E80, (uint64_t)&nominal type descriptor for CASessionBannerStaticContentTrailingView);
}

uint64_t type metadata accessor for CASessionBannerVariableContentView(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100325F10, (uint64_t)&nominal type descriptor for CASessionBannerVariableContentView);
}

uint64_t type metadata accessor for CASessionBannerStaticContentLeadingView(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100325FA0, (uint64_t)&nominal type descriptor for CASessionBannerStaticContentLeadingView);
}

uint64_t *sub_1001AE85C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t *v30;
  uint64_t v31;

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    if (swift_getEnumCaseMultiPayload(a2, v7) == 1)
    {
      *(_BYTE *)v4 = *(_BYTE *)a2;
      v8 = type metadata accessor for ConnectionClosed(0);
      v9 = *(int *)(v8 + 20);
      v10 = (char *)v4 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for Date(0);
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = sub_100003DB8(&qword_100317D58);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      v16 = *(int *)(v8 + 24);
      v17 = *(uint64_t *)((char *)a2 + v16);
      *(uint64_t *)((char *)v4 + v16) = v17;
      swift_bridgeObjectRetain(v17);
      swift_storeEnumTagMultiPayload(v4, v7, 1);
    }
    else
    {
      memcpy(v4, a2, *(_QWORD *)(*(_QWORD *)(v7 - 8) + 64));
    }
    v18 = a3[5];
    v19 = a3[6];
    v20 = (uint64_t *)((char *)v4 + v18);
    v21 = (uint64_t *)((char *)a2 + v18);
    v22 = *v21;
    v23 = v21[1];
    *v20 = v22;
    v20[1] = v23;
    v24 = (uint64_t *)((char *)v4 + v19);
    v25 = (uint64_t *)((char *)a2 + v19);
    v27 = *v25;
    v26 = v25[1];
    *v24 = v27;
    v24[1] = v26;
    v28 = a3[7];
    v29 = (uint64_t *)((char *)v4 + v28);
    v30 = (uint64_t *)((char *)a2 + v28);
    v15 = *v30;
    v31 = v30[1];
    *v29 = v15;
    v29[1] = v31;
    swift_retain(v22);
    swift_retain(v27);
  }
  swift_retain(v15);
  return v4;
}

uint64_t sub_1001AEA08(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  if (swift_getEnumCaseMultiPayload(a1, v4) == 1)
  {
    v5 = type metadata accessor for ConnectionClosed(0);
    v6 = a1 + *(int *)(v5 + 20);
    v7 = type metadata accessor for Date(0);
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(v5 + 24)));
  }
  swift_release(*(_QWORD *)(a1 + a2[5]));
  swift_release(*(_QWORD *)(a1 + a2[6]));
  return swift_release(*(_QWORD *)(a1 + a2[7]));
}

_BYTE *sub_1001AEACC(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    *a1 = *a2;
    v7 = type metadata accessor for ConnectionClosed(0);
    v8 = *(int *)(v7 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_100003DB8(&qword_100317D58);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v14 = *(int *)(v7 + 24);
    v15 = *(_QWORD *)&a2[v14];
    *(_QWORD *)&a1[v14] = v15;
    swift_bridgeObjectRetain(v15);
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v16 = a3[5];
  v17 = a3[6];
  v18 = &a1[v16];
  v19 = (uint64_t *)&a2[v16];
  v20 = *v19;
  v21 = v19[1];
  *v18 = v20;
  v18[1] = v21;
  v22 = &a1[v17];
  v23 = (uint64_t *)&a2[v17];
  v25 = *v23;
  v24 = v23[1];
  *v22 = v25;
  v22[1] = v24;
  v26 = a3[7];
  v27 = &a1[v26];
  v28 = (uint64_t *)&a2[v26];
  v30 = *v28;
  v29 = v28[1];
  *v27 = v30;
  v27[1] = v29;
  swift_retain(v20);
  swift_retain(v25);
  swift_retain(v30);
  return a1;
}

_BYTE *sub_1001AEC50(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;

  if (a1 != a2)
  {
    sub_10000AFFC((uint64_t)a1, type metadata accessor for ConnectionAssitantBannerMode.Mode);
    v6 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      *a1 = *a2;
      v7 = type metadata accessor for ConnectionClosed(0);
      v8 = *(int *)(v7 + 20);
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = type metadata accessor for Date(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        v13 = sub_100003DB8(&qword_100317D58);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      v14 = *(int *)(v7 + 24);
      v15 = *(_QWORD *)&a2[v14];
      *(_QWORD *)&a1[v14] = v15;
      swift_bridgeObjectRetain(v15);
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v16 = a3[5];
  v17 = &a1[v16];
  v18 = &a2[v16];
  v19 = *(_QWORD *)&a1[v16];
  v20 = *(_QWORD *)&a2[v16];
  *(_QWORD *)&a1[v16] = v20;
  swift_retain(v20);
  swift_release(v19);
  *((_QWORD *)v17 + 1) = *((_QWORD *)v18 + 1);
  v21 = a3[6];
  v22 = &a1[v21];
  v23 = &a2[v21];
  v24 = *(_QWORD *)&a1[v21];
  v25 = *(_QWORD *)&a2[v21];
  *(_QWORD *)&a1[v21] = v25;
  swift_retain(v25);
  swift_release(v24);
  *((_QWORD *)v22 + 1) = *((_QWORD *)v23 + 1);
  v26 = a3[7];
  v27 = &a1[v26];
  v28 = (uint64_t *)&a2[v26];
  v29 = *(_QWORD *)&a1[v26];
  v30 = *v28;
  *(_QWORD *)&a1[v26] = *v28;
  swift_retain(v30);
  swift_release(v29);
  *((_QWORD *)v27 + 1) = v28[1];
  return a1;
}

_BYTE *sub_1001AEE24(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
  {
    *a1 = *a2;
    v7 = type metadata accessor for ConnectionClosed(0);
    v8 = *(int *)(v7 + 20);
    v9 = &a1[v8];
    v10 = &a2[v8];
    v11 = type metadata accessor for Date(0);
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = sub_100003DB8(&qword_100317D58);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v9, v10, v11);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *(_QWORD *)&a1[*(int *)(v7 + 24)] = *(_QWORD *)&a2[*(int *)(v7 + 24)];
    swift_storeEnumTagMultiPayload(a1, v6, 1);
  }
  else
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
  }
  v14 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v14] = *(_OWORD *)&a2[v14];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

_BYTE *sub_1001AEF78(_BYTE *a1, _BYTE *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  _QWORD *v24;
  uint64_t v25;

  if (a1 != a2)
  {
    sub_10000AFFC((uint64_t)a1, type metadata accessor for ConnectionAssitantBannerMode.Mode);
    v6 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    if (swift_getEnumCaseMultiPayload(a2, v6) == 1)
    {
      *a1 = *a2;
      v7 = type metadata accessor for ConnectionClosed(0);
      v8 = *(int *)(v7 + 20);
      v9 = &a1[v8];
      v10 = &a2[v8];
      v11 = type metadata accessor for Date(0);
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        v13 = sub_100003DB8(&qword_100317D58);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v9, v10, v11);
        (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *(_QWORD *)&a1[*(int *)(v7 + 24)] = *(_QWORD *)&a2[*(int *)(v7 + 24)];
      swift_storeEnumTagMultiPayload(a1, v6, 1);
    }
    else
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v6 - 8) + 64));
    }
  }
  v14 = a3[5];
  v15 = &a1[v14];
  v16 = &a2[v14];
  v17 = *(_QWORD *)&a1[v14];
  *(_QWORD *)&a1[v14] = *(_QWORD *)&a2[v14];
  swift_release(v17);
  *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
  v18 = a3[6];
  v19 = &a1[v18];
  v20 = &a2[v18];
  v21 = *(_QWORD *)&a1[v18];
  *(_QWORD *)&a1[v18] = *(_QWORD *)&a2[v18];
  swift_release(v21);
  *((_QWORD *)v19 + 1) = *((_QWORD *)v20 + 1);
  v22 = a3[7];
  v23 = &a1[v22];
  v24 = &a2[v22];
  v25 = *(_QWORD *)&a1[v22];
  *(_QWORD *)&a1[v22] = *v24;
  swift_release(v25);
  *((_QWORD *)v23 + 1) = v24[1];
  return a1;
}

uint64_t sub_1001AF130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001AF13C);
}

uint64_t sub_1001AF13C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;
  int v10;

  v6 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  v10 = v9 - 1;
  if (v10 < 0)
    v10 = -1;
  return (v10 + 1);
}

uint64_t sub_1001AF1C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001AF1D0);
}

uint64_t sub_1001AF1D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20)) = a2;
  return result;
}

uint64_t sub_1001AF248(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for ConnectionAssitantBannerMode.Mode(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = &unk_10025BB10;
    v4[2] = &unk_10025BB10;
    v4[3] = &unk_10025BB10;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_1001AF2D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001AF2E0);
}

uint64_t sub_1001AF2E0(char *a1, uint64_t a2, uint64_t a3)
{
  return sub_100152244(a1, a2, a3, type metadata accessor for ConnectionAssitantBannerMode.Mode);
}

uint64_t sub_1001AF2EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001AF2F8);
}

char *sub_1001AF2F8(char *a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1001522E4(a1, a2, a3, a4, type metadata accessor for ConnectionAssitantBannerMode.Mode);
}

uint64_t sub_1001AF304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AFC7C(a1, a2, a3, type metadata accessor for ConnectionAssitantBannerMode.Mode);
}

uint64_t sub_1001AF310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001AF31C);
}

uint64_t sub_1001AF31C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1001AF358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001AF364);
}

uint64_t sub_1001AF364(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1001AF3A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001AF3B0);
}

uint64_t sub_1001AF3B0(char *a1, uint64_t a2, uint64_t a3)
{
  return sub_100152244(a1, a2, a3, type metadata accessor for ConnectionAssitantBannerMode.Mode);
}

uint64_t sub_1001AF3BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001AF3C8);
}

char *sub_1001AF3C8(char *a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1001522E4(a1, a2, a3, a4, type metadata accessor for ConnectionAssitantBannerMode.Mode);
}

uint64_t sub_1001AF3D4()
{
  _QWORD v1[2];

  v1[0] = sub_100007FAC(&qword_100325D00);
  v1[1] = sub_1000084FC(&qword_100325D30, &qword_100325D00, (uint64_t)&protocol conformance descriptor for ScrollView<A>);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
}

uint64_t sub_1001AF438(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029E3A8, 1);
}

uint64_t sub_1001AF448(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029E380, 1);
}

uint64_t sub_1001AF458(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029E358, 1);
}

uint64_t sub_1001AF468(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029E330, 1);
}

uint64_t sub_1001AF478()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = (int *)type metadata accessor for CASessionBannerPossibleButtonView(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = *(_QWORD *)(v2 + 64);
  v6 = v0 + v4;
  v7 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v7) == 1)
  {
    v8 = type metadata accessor for ConnectionClosed(0);
    v9 = v6 + *(int *)(v8 + 20);
    v10 = type metadata accessor for Date(0);
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    swift_bridgeObjectRelease(*(_QWORD *)(v6 + *(int *)(v8 + 24)));
  }
  swift_release(*(_QWORD *)(v6 + v1[5]));
  swift_release(*(_QWORD *)(v6 + v1[6]));
  swift_release(*(_QWORD *)(v6 + v1[7]));
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1001AF580()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for CASessionBannerPossibleButtonView(0) - 8) + 80);
  return sub_1001AE2B0(v0 + ((v1 + 16) & ~v1));
}

unint64_t sub_1001AF5AC()
{
  unint64_t result;

  result = qword_100326018;
  if (!qword_100326018)
  {
    result = swift_getWitnessTable(&unk_10025C0D4, &_s8SOSBuddy36CallEmergencyServicesButtonLabelViewVN_0);
    atomic_store(result, (unint64_t *)&qword_100326018);
  }
  return result;
}

unint64_t sub_1001AF5F8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100326028;
  if (!qword_100326028)
  {
    v1 = sub_100007FAC(&qword_100325FE8);
    v2[0] = sub_100007FAC(&qword_100325FD8);
    v2[1] = type metadata accessor for BorderedButtonStyle(255);
    v2[2] = sub_1000084FC(&qword_100326020, &qword_100325FD8, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_1000052EC((unint64_t *)&qword_100319760, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_1000084FC(&qword_100318978, &qword_100318968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100326028);
  }
  return result;
}

unint64_t sub_1001AF708()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100326030;
  if (!qword_100326030)
  {
    v1 = sub_100007FAC(&qword_100325FF8);
    v2[0] = sub_100007FAC(&qword_100325FE8);
    v2[1] = sub_1001AF5F8();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.keyboardShortcut(_:)>>, 1);
    sub_1000084FC(&qword_100318880, &qword_100318888, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100326030);
  }
  return result;
}

uint64_t type metadata accessor for CASessionBannerConnectionClosedView(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100326180, (uint64_t)&nominal type descriptor for CASessionBannerConnectionClosedView);
}

unint64_t sub_1001AF7C8()
{
  unint64_t result;

  result = qword_100326070;
  if (!qword_100326070)
  {
    result = swift_getWitnessTable(&unk_10025C084, &type metadata for CASessionBannerConnectionActiveView);
    atomic_store(result, (unint64_t *)&qword_100326070);
  }
  return result;
}

unint64_t sub_1001AF80C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100326088;
  if (!qword_100326088)
  {
    v1 = sub_100007FAC(&qword_100326058);
    sub_1001AF890();
    sub_1000052EC(&qword_100326098, type metadata accessor for CASessionBannerConnectionClosedView, (uint64_t)&unk_10025BFE4);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100326088);
  }
  return result;
}

unint64_t sub_1001AF890()
{
  unint64_t result;

  result = qword_100326090;
  if (!qword_100326090)
  {
    result = swift_getWitnessTable(&unk_10025C034, &type metadata for CASessionBannerQuestionnaireView);
    atomic_store(result, (unint64_t *)&qword_100326090);
  }
  return result;
}

uint64_t sub_1001AF8D4()
{
  return sub_100008140(&qword_1003260A0, &qword_1003260A8, (void (*)(void))sub_1001AF8F8, (void (*)(void))sub_1001AF93C);
}

unint64_t sub_1001AF8F8()
{
  unint64_t result;

  result = qword_1003260B0;
  if (!qword_1003260B0)
  {
    result = swift_getWitnessTable(&unk_10025BF94, &type metadata for CASessionBannerStewieUnavailableView);
    atomic_store(result, (unint64_t *)&qword_1003260B0);
  }
  return result;
}

unint64_t sub_1001AF93C()
{
  unint64_t result;

  result = qword_1003260B8;
  if (!qword_1003260B8)
  {
    result = swift_getWitnessTable(&unk_10025BF44, &type metadata for CASessionBannerOverInternetView);
    atomic_store(result, (unint64_t *)&qword_1003260B8);
  }
  return result;
}

unint64_t sub_1001AF980()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003260C0;
  if (!qword_1003260C0)
  {
    v1 = sub_100007FAC(&qword_100326078);
    sub_1001AF7C8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003260C0);
  }
  return result;
}

uint64_t sub_1001AF9EC()
{
  return sub_100008140(&qword_100326100, &qword_1003260E8, (void (*)(void))sub_1001AFA10, (void (*)(void))sub_1001AFB00);
}

unint64_t sub_1001AFA10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100326108;
  if (!qword_100326108)
  {
    v1 = sub_100007FAC(&qword_1003260F0);
    sub_1001AFA7C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100326108);
  }
  return result;
}

unint64_t sub_1001AFA7C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100326110;
  if (!qword_100326110)
  {
    v1 = sub_100007FAC(&qword_1003214D0);
    sub_1000084FC(&qword_100321FB8, &qword_1003214C8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100326110);
  }
  return result;
}

unint64_t sub_1001AFB00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100326118;
  if (!qword_100326118)
  {
    v1 = sub_100007FAC(&qword_1003260D0);
    sub_1001AFB6C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100326118);
  }
  return result;
}

unint64_t sub_1001AFB6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100326120;
  if (!qword_100326120)
  {
    v1 = sub_100007FAC(&qword_1003214E0);
    sub_1000084FC(&qword_100321FD0, &qword_1003214D8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100326120);
  }
  return result;
}

ValueMetadata *_s8SOSBuddy36CallEmergencyServicesButtonLabelViewVMa_0()
{
  return &_s8SOSBuddy36CallEmergencyServicesButtonLabelViewVN_0;
}

ValueMetadata *type metadata accessor for CASessionBannerConnectionActiveView()
{
  return &type metadata for CASessionBannerConnectionActiveView;
}

ValueMetadata *type metadata accessor for CASessionBannerOverInternetView()
{
  return &type metadata for CASessionBannerOverInternetView;
}

ValueMetadata *type metadata accessor for CASessionBannerStewieUnavailableView()
{
  return &type metadata for CASessionBannerStewieUnavailableView;
}

uint64_t sub_1001AFC40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001AFC4C);
}

uint64_t sub_1001AFC4C(char *a1, uint64_t a2, uint64_t a3)
{
  return sub_100152244(a1, a2, a3, type metadata accessor for ConnectionClosed);
}

uint64_t sub_1001AFC58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001AFC64);
}

char *sub_1001AFC64(char *a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1001522E4(a1, a2, a3, a4, type metadata accessor for ConnectionClosed);
}

uint64_t sub_1001AFC70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1001AFC7C(a1, a2, a3, type metadata accessor for ConnectionClosed);
}

uint64_t sub_1001AFC7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result;
  unint64_t v6;
  _QWORD v7[2];

  v7[0] = &unk_10025BB10;
  result = a4(319);
  if (v6 <= 0x3F)
  {
    v7[1] = *(_QWORD *)(result - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v7, a1 + 16);
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for CASessionBannerQuestionnaireView()
{
  return &type metadata for CASessionBannerQuestionnaireView;
}

uint64_t sub_1001AFD00()
{
  return sub_100152C98(&qword_1003261B8, &qword_100326010, (void (*)(void))sub_1001AFD2C);
}

unint64_t sub_1001AFD2C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003261C0;
  if (!qword_1003261C0)
  {
    v1 = sub_100007FAC(&qword_100326008);
    sub_1001AFD98();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003261C0);
  }
  return result;
}

unint64_t sub_1001AFD98()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003261C8;
  if (!qword_1003261C8)
  {
    v1 = sub_100007FAC(&qword_100326000);
    sub_1001AF708();
    sub_1000052EC(&qword_100316C10, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003261C8);
  }
  return result;
}

uint64_t sub_1001AFE20()
{
  return sub_1000084FC(&qword_1003261D0, &qword_1003261D8, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_1001AFE4C()
{
  return sub_100008140(&qword_1003261E0, &qword_1003260F8, (void (*)(void))sub_1001AF9EC, (void (*)(void))sub_100151898);
}

uint64_t sub_1001AFE80(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029E4BC, 1);
}

uint64_t sub_1001AFE90(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029E494, 1);
}

uint64_t sub_1001AFEA0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029E46C, 1);
}

uint64_t sub_1001AFEB0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029E444, 1);
}

uint64_t sub_1001AFEC0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029E41C, 1);
}

uint64_t sub_1001AFED0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029E3F4, 1);
}

unint64_t sub_1001AFEE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003261F0;
  if (!qword_1003261F0)
  {
    v1 = sub_100007FAC(&qword_1003261E8);
    sub_1000084FC(&qword_1003261F8, &qword_100326200, (uint64_t)&protocol conformance descriptor for HStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003261F0);
  }
  return result;
}

uint64_t sub_1001AFF64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 80);
  v5 = *(_QWORD *)(a1 + 96);
  sub_10002B438(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

ValueMetadata *type metadata accessor for CASessionBannerTransmissionProgressView()
{
  return &type metadata for CASessionBannerTransmissionProgressView;
}

unint64_t sub_1001AFFFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100326208;
  if (!qword_100326208)
  {
    v1 = sub_100007FAC(&qword_100326210);
    sub_1001AFEE0();
    sub_1000052EC(&qword_100316C10, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100326208);
  }
  return result;
}

uint64_t sub_1001B0080()
{
  return sub_1000084FC(&qword_100326218, &qword_100326220, (uint64_t)&protocol conformance descriptor for TupleView<A>);
}

unint64_t sub_1001B00B0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100326228;
  if (!qword_100326228)
  {
    v1 = sub_100007FAC(&qword_100326230);
    sub_10015296C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100326228);
  }
  return result;
}

uint64_t sub_1001B011C()
{
  return sub_1000084FC(&qword_100326238, &qword_100326240, (uint64_t)&protocol conformance descriptor for TupleView<A>);
}

uint64_t sub_1001B0148()
{
  return sub_1000084FC(&qword_100326248, &qword_100326250, (uint64_t)&protocol conformance descriptor for TupleView<A>);
}

uint64_t sub_1001B0174(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029E4E4, 1);
}

uint64_t sub_1001B0184()
{
  return sub_100152C98(&qword_100322210, &qword_100322198, (void (*)(void))sub_100152CFC);
}

uint64_t ConnectionAssistantConeRenderer.init(device:buffers:renderPipelines:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = sub_1001B0888(a1, a2, a3);
  if (v3)
    return v5;
  return result;
}

void ConnectionAssistantConeRenderer.compute(dt:cone:computeCommandEncoder:)(float32x4_t *a1, void *a2, double a3)
{
  float32x4_t v6;
  float32x4_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float32x2_t v11;
  float32x2_t v12;
  uint64_t v13;
  float32x4_t v14;
  float32x4_t v20;
  float32x4_t v21;
  _QWORD v22[4];
  float32x4_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  float32x4_t v27;
  char v28;
  __int128 v29;
  char v30;
  char v31;

  v6 = a1[1];
  v7 = vmulq_f32(v6, v6);
  v9 = a1->i64[0];
  v8 = a1->i64[1];
  LODWORD(v10) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).u32[0];
  v11 = vrsqrte_f32((float32x2_t)LODWORD(v10));
  v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)LODWORD(v10), vmul_f32(v11, v11)));
  v21 = vmulq_n_f32(v6, vmul_f32(v12, vrsqrts_f32((float32x2_t)LODWORD(v10), vmul_f32(v12, v12))).f32[0]);
  v13 = COERCE_UNSIGNED_INT(atan2f(a1[2].f32[0], sqrtf(v10))) | 0x3B03126F00000000;
  v14 = a1[3];
  __asm { FMOV            V1.4S, #1.0 }
  v20.i64[0] = 0x3F0000003F000000;
  v20.i64[1] = 0x3F0000003F000000;
  v31 = 0;
  v30 = 0;
  v22[0] = 100;
  v22[2] = v9;
  v22[3] = v8;
  v23 = v21;
  v24 = v13;
  v25 = xmmword_100254F60;
  v26 = 0;
  v27 = vmlaq_f32(v14, v20, vsubq_f32(_Q1, v14));
  v28 = 0;
  v29 = xmmword_100254F70;
  ConnectionAssistantStarsRenderer.compute(dt:stars:computeCommandEncoder:)((uint64_t)v22, a2, a3);
}

void ConnectionAssistantConeRenderer.render(cone:parameters:camera:destination:renderCommandEncoder:)(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, void *a7, __n128 a8, float32x4_t a9)
{
  float32x4_t v16;
  float32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x4_t v20;
  int v21;
  float32x4_t v22;
  float v23;
  float32x4_t v24;
  float32x4_t v25;
  float32x4_t v26;
  float32x4_t v27;
  char v28;
  unsigned int v29;
  int8x8_t v30;
  float v31;
  unsigned int v32;
  int8x8_t v33;
  int8x8_t v34;
  int8x8_t v35;
  unsigned int v36;
  float32x4_t v37;
  float32x4_t v38;
  int v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  float *v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  NSString v48;
  float32x4_t v49;
  int8x16_t v50;
  float32x4_t v51;
  float32x2_t v52;
  float32x2_t v53;
  float32x2_t v54;
  float32x2_t v55;
  __n128 v56;
  float32x2_t v57;
  float32x2_t v58;
  id v59;
  id v60;
  float v61;
  float32x2_t v62;
  float v63;
  float v64;
  float v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  __int128 v75;
  int8x16_t v76;
  float v77;
  int8x8_t v78;
  int8x8_t v79;
  int8x8_t v80;
  float v81;
  float32x4_t v83;
  float32x4_t v84;
  float32x4_t v86;
  float32x4_t v87;
  _QWORD v88[4];
  char v89[24];
  _BYTE v90[112];
  _OWORD v91[5];
  _BYTE v92[29];
  char v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  _OWORD v99[2];
  __int128 v100;
  __int128 v101;
  int v102;
  _BYTE v103[40];
  _BYTE v104[48];
  __int128 v105;
  __int128 v106;
  int v107;
  char v108[16];
  int8x16_t v109;
  char v110;
  float v111[8];
  char v112;
  _OWORD v113[2];
  int v114;
  char v115;
  int8x8_t v116[4];
  int v117;
  char v118;

  ConnectionAssistantCone.project(from:camera:)((int32x4_t *)a2, (uint64_t)v90, a8);
  sub_10000B458((uint64_t)v90, (uint64_t)v91, &qword_100326258);
  if ((v93 & 1) == 0)
  {
    v74 = a3;
    v98 = v91[4];
    v99[0] = *(_OWORD *)v92;
    *(_OWORD *)((char *)v99 + 13) = *(_OWORD *)&v92[13];
    v94 = v91[0];
    v95 = v91[1];
    v96 = v91[2];
    v97 = v91[3];
    v16 = *(float32x4_t *)(a1 + 16);
    v17 = vmulq_f32(v16, v16);
    v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v17, 2), vadd_f32(*(float32x2_t *)v17.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.f32, 1))).u32[0];
    v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
    v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)));
    v20 = vmulq_n_f32(v16, vmul_f32(v19, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v19, v19))).f32[0]);
    *(float32x2_t *)v17.f32 = vsub_f32(0, *(float32x2_t *)(a2 + 80));
    v21 = 0;
    v17.f32[2] = 0.0 - *(float *)(a2 + 88);
    v22 = vmulq_f32(v20, v17);
    v22.f32[0] = fminf(fmaxf((float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]+ 0.1)/ 0.2, 0.0), 1.0);
    v23 = (float)(v22.f32[0] * v22.f32[0]) * (float)((float)(v22.f32[0] * -2.0) + 3.0);
    v24 = *(float32x4_t *)(a2 + 128);
    v25 = *(float32x4_t *)(a2 + 144);
    v26 = *(float32x4_t *)(a2 + 160);
    v27 = *(float32x4_t *)(a2 + 176);
    v83 = vaddq_f32(v27, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, v20.f32[0]), v25, *(float32x2_t *)v20.f32, 1), v26, v20, 2));
    v86 = vaddq_f32(v27, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, a9.f32[0]), v25, *(float32x2_t *)a9.f32, 1), v26, a9, 2));
    v72 = *(_QWORD *)(a2 + 8);
    v73 = *(_QWORD *)a2;
    v81 = ConnectionAssistantCamera.Viewport.normalizedPointSize.getter(*(_QWORD *)a2, v72, *(double *)(a2 + 16));
    v28 = v98;
    if ((_BYTE)v98)
      v29 = -1;
    else
      v29 = 0;
    v30 = (int8x8_t)vdup_n_s32(v29);
    v69 = *((_QWORD *)&v97 + 1);
    v70 = v97;
    v71 = *((_QWORD *)&v96 + 1);
    v79 = vbic_s8(*(int8x8_t *)((char *)&v96 + 8), v30);
    v80 = vbic_s8(*(int8x8_t *)((char *)&v97 + 8), v30);
    v78 = vbic_s8(*(int8x8_t *)&v97, v30);
    v100 = v94;
    v101 = v95;
    v102 = v96;
    sub_10000B458(a1 + 80, (uint64_t)v104, &qword_100326260);
    sub_10000B458((uint64_t)v104, (uint64_t)v111, &qword_100326260);
    v31 = v111[0];
    if (v112)
      v31 = 0.0;
    v77 = v31;
    sub_10000B458((uint64_t)&v98 + 8, (uint64_t)v103, &qword_10031EBF8);
    sub_10000B458((uint64_t)v103, (uint64_t)v116, &qword_10031EBF8);
    if (v118)
    {
      v32 = -1;
    }
    else
    {
      v21 = v117;
      v32 = 0;
    }
    v33 = (int8x8_t)vdup_n_s32(v32);
    v34 = vbic_s8(v116[3], v33);
    v35 = vbic_s8(v116[0], v33);
    sub_10000B458((uint64_t)v104, (uint64_t)v108, &qword_100326260);
    if (v110)
      v36 = -1;
    else
      v36 = 0;
    v37 = v86;
    v37.i32[3] = 0;
    v87 = v37;
    v38 = v83;
    v38.i32[3] = 0;
    v84 = v38;
    v39 = *(_DWORD *)(a2 + 32);
    v75 = *(_OWORD *)(a1 + 48);
    v76 = vbicq_s8(v109, (int8x16_t)vdupq_n_s32(v36));
    v40 = v23 * *(float *)(a1 + 64);
    v41 = v100;
    v42 = *((_QWORD *)&v101 + 1);
    v43 = v102;
    v44 = (float *)objc_msgSend((id)swift_unknownObjectRetain(a7), "contents");
    v45 = a7;
    *(float32x4_t *)v44 = v87;
    *((float32x4_t *)v44 + 1) = v84;
    v44[8] = v81;
    *((_DWORD *)v44 + 9) = v39;
    *((_OWORD *)v44 + 3) = v75;
    v44[16] = v40;
    *((int8x8_t *)v44 + 9) = v79;
    *((int8x8_t *)v44 + 10) = v78;
    *((int8x8_t *)v44 + 11) = v80;
    *((_QWORD *)v44 + 12) = v41;
    *((_QWORD *)v44 + 13) = v42;
    *((_DWORD *)v44 + 28) = v43;
    v44[30] = v77;
    *((int8x8_t *)v44 + 16) = v35;
    *((int8x8_t *)v44 + 17) = v34;
    *((_DWORD *)v44 + 36) = v21;
    *((int8x16_t *)v44 + 10) = v76;
    v46 = sub_10022634C(5);
    if (v46)
    {
      v47 = v46;
      v48 = String._bridgeToObjectiveC()();
      objc_msgSend(a4, "setLabel:", v48);

      objc_msgSend(a4, "setRenderPipelineState:", v47);
      v52 = ConnectionAssistantRendererProjection.Ellipse.boundingBox.getter();
      v53 = *(float32x2_t *)v50.i8;
      if ((v28 & 1) == 0)
      {
        v50.i64[0] = v70;
        v49.i64[0] = v71;
        v51.i64[0] = v69;
        v52 = vminnm_f32(v52, COERCE_FLOAT32X2_T(ConnectionAssistantRendererProjection.Triangle.boundingBox.getter(v49, v50, v51)));
        v53 = vmaxnm_f32(v53, v54);
      }
      sub_10000B458((uint64_t)v103, (uint64_t)v113, &qword_10031EBF8);
      if ((v115 & 1) == 0)
      {
        v105 = v113[0];
        v106 = v113[1];
        v107 = v114;
        v52 = vminnm_f32(v52, ConnectionAssistantRendererProjection.Ellipse.boundingBox.getter());
        v53 = vmaxnm_f32(v53, v55);
      }
      v56 = swift_beginAccess(a6 + 48, v89, 0, 0);
      v56.n128_f32[0] = (float)(v81 * *(float *)(a6 + 188)) * 2.8;
      v56.n128_u64[0] = (unint64_t)vdup_lane_s32((int32x2_t)v56.n128_u64[0], 0);
      v57 = vsub_f32(v52, (float32x2_t)v56.n128_u64[0]);
      v58 = vadd_f32(v53, (float32x2_t)v56.n128_u64[0]);
      v59 = objc_msgSend(v74, "width");
      v60 = objc_msgSend(v74, "height");
      v61 = 1.0;
      v62.i32[0] = 1.0;
      if (v73)
      {
        v63 = (float)v73 / (float)v72;
        v64 = fminf(v63, 1.0);
        v65 = fmaxf(v63, 1.0);
        if (v72)
          v61 = v64;
        else
          v61 = 1.0;
        if (v72)
          v62.f32[0] = v65;
        else
          v62.f32[0] = 1.0;
      }
      v62.f32[1] = 1.0 / v61;
      v88[0] = sub_100106E90((uint64_t)v59, (uint64_t)v60, v57, v58, v62);
      v88[1] = v66;
      v88[2] = v67;
      v88[3] = v68;
      objc_msgSend(a4, "setScissorRect:", v88);
      objc_msgSend(a4, "setVertexBuffer:offset:atIndex:", *(_QWORD *)(a5 + 24), 0, 0);
      objc_msgSend(a4, "setVertexBuffer:offset:atIndex:", *(_QWORD *)(a5 + 32), 0, 1);
      objc_msgSend(a4, "setFragmentBuffer:offset:atIndex:", v45, 0, 0);
      objc_msgSend(a4, "drawPrimitives:vertexStart:vertexCount:", 4, 0, 4);
      swift_unknownObjectRelease(v47);
    }
    sub_10001DD44(a2, a4, a8, v40);
  }
}

uint64_t sub_1001B0888(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  swift_retain(a2);
  swift_retain(a3);
  swift_unknownObjectRetain(a1);
  v7 = objc_msgSend(a1, "newBufferWithLength:options:", 176, 1);
  if (v7)
  {
    v8 = v7;
    swift_unknownObjectRelease(a1);
    v9 = type metadata accessor for ConnectionAssistantStarsRenderer();
    swift_allocObject(v9, 96, 7);
    swift_retain(a2);
    swift_retain(a3);
    swift_unknownObjectRetain(v8);
    ConnectionAssistantStarsRenderer.init(device:buffers:renderPipelines:)(a1, a2, a3);
    swift_unknownObjectRelease(v8);
    if (v3)
    {
      swift_unknownObjectRelease(v8);
      swift_release_n(a2);
      swift_release_n(a3);
    }
    else
    {
      swift_release(a3);
      swift_release(a2);
    }
  }
  else
  {
    v10 = sub_10001D534();
    v11 = swift_allocError(&type metadata for ConnectionAssistantRenderer.Buffers.Error, v10, 0, 0);
    swift_willThrow(v11);
    swift_release_n(a2);
    swift_release_n(a3);
    swift_unknownObjectRelease_n(a1, 2);
  }
  return a2;
}

uint64_t destroy for ConnectionAssistantConeRenderer(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_unknownObjectRelease(a1[2]);
  return swift_release(a1[3]);
}

uint64_t *initializeWithCopy for ConnectionAssistantConeRenderer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_retain(v3);
  swift_retain(v4);
  swift_unknownObjectRetain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t *assignWithCopy for ConnectionAssistantConeRenderer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_unknownObjectRetain(v8);
  swift_unknownObjectRelease(v9);
  v10 = a2[3];
  v11 = a1[3];
  a1[3] = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

_QWORD *assignWithTake for ConnectionAssistantConeRenderer(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  swift_unknownObjectRelease(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  swift_release(v5);
  return a1;
}

ValueMetadata *type metadata accessor for ConnectionAssistantConeRenderer()
{
  return &type metadata for ConnectionAssistantConeRenderer;
}

ValueMetadata *type metadata accessor for ConnectionAssistantConeRenderer.Parameters()
{
  return &type metadata for ConnectionAssistantConeRenderer.Parameters;
}

uint64_t storeEnumTagSinglePayload for RecordedForkAnswer(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001B0BCC + 4 * byte_10025C285[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1001B0C00 + 4 * asc_10025C280[v4]))();
}

uint64_t sub_1001B0C00(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001B0C08(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1001B0C10);
  return result;
}

uint64_t sub_1001B0C1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1001B0C24);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001B0C28(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001B0C30(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RecordedForkAnswer()
{
  return &type metadata for RecordedForkAnswer;
}

id sub_1001B0C4C(void *a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  NSString v7;
  objc_class *v8;
  id v9;
  uint64_t v10;
  NSString v11;
  id v12;
  id v13;
  objc_super v15;
  objc_super v16;

  v7 = String._bridgeToObjectiveC()();
  v8 = (objc_class *)type metadata accessor for ShadowView();
  v16.receiver = v3;
  v16.super_class = v8;
  v9 = objc_msgSendSuper2(&v16, "actionForLayer:forKey:", a1, v7);

  if (v9)
  {
    v10 = objc_opt_self(NSNull);
    if (swift_dynamicCastObjCClass(v9, v10))
    {
      if (a2 == 0x6150776F64616873 && a3 == 0xEA00000000006874
        || (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, 0x6150776F64616873, 0xEA00000000006874, 0) & 1) != 0
        || a2 == 0x6F43776F64616873 && a3 == 0xEB00000000726F6CLL
        || (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, 0x6F43776F64616873, 0xEB00000000726F6CLL, 0) & 1) != 0
        || a2 == 0x664F776F64616873 && a3 == 0xEC00000074657366
        || (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, 0x664F776F64616873, 0xEC00000074657366, 0) & 1) != 0
        || a2 == 0x704F776F64616873 && a3 == 0xED00007974696361
        || (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, 0x704F776F64616873, 0xED00007974696361, 0) & 1) != 0
        || a2 == 0x6152776F64616873 && a3 == 0xEC00000073756964
        || (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, 0x6152776F64616873, 0xEC00000073756964, 0) & 1) != 0)
      {
        v11 = String._bridgeToObjectiveC()();
        v15.receiver = v3;
        v15.super_class = v8;
        v12 = objc_msgSendSuper2(&v15, "actionForLayer:forKey:", a1, v11);

        v13 = sub_100220114(a2, a3, a1, (uint64_t)v12);
        swift_unknownObjectRelease(v12);
        if (v13)
        {
          swift_unknownObjectRelease(v9);
          return v13;
        }
      }
    }
  }
  return v9;
}

id sub_1001B1064()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ShadowView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ShadowView()
{
  return objc_opt_self(_TtC8SOSBuddy10ShadowView);
}

ValueMetadata *type metadata accessor for BannerActionTextView()
{
  return &type metadata for BannerActionTextView;
}

uint64_t sub_1001B10C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029E628, 1);
}

uint64_t sub_1001B10D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v44;
  unint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t KeyPath;
  uint64_t v73;
  uint64_t v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t OpaqueTypeConformance2;
  uint64_t v95;
  void *object;
  __int128 v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t result;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  Swift::String v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  _OWORD v136[17];
  __int128 v137;
  __int128 v138;
  __n128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t v152;
  uint64_t v153;
  __int128 v154;
  char v155;
  _BYTE v156[7];
  _BYTE v157[7];
  _BYTE v158[7];
  char v159;
  _BYTE v160[7];
  char v161;
  __int128 v162;
  __int128 v163;
  __n128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  uint64_t v177;
  _QWORD v178[7];
  char v179;
  _BYTE v180[7];
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  char v184;
  _BYTE v185[7];
  uint64_t v186;
  char v187;
  _BYTE v188[7];
  uint64_t v189;
  uint64_t v190;
  char v191;
  _BYTE v192[7];
  double v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char v197;

  v124 = a2;
  v9 = sub_100003DB8(&qword_100326290);
  v11 = __chkstk_darwin(v9, v10);
  v134 = (uint64_t)&v119 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  v133 = (char *)&v119 - v14;
  v129 = type metadata accessor for OpacityTransition(0);
  v126 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129, v15);
  v125 = (char *)&v119 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003DB8(&qword_1003195D0);
  v130 = *(_QWORD *)(v17 - 8);
  v131 = v17;
  v19 = __chkstk_darwin(v17, v18);
  v127 = (char *)&v119 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19, v21);
  v128 = (char *)&v119 - v22;
  v23 = type metadata accessor for Font.Leading(0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23, v25);
  v27 = (char *)&v119 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100003DB8(&qword_100326298);
  v30 = __chkstk_darwin(v28, v29);
  v132 = (char *)&v119 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30, v32);
  v135 = (uint64_t)&v119 - v33;
  if (a3)
  {
    v34 = a3[9];
    v35 = a3[10];
    sub_100007BBC(a3 + 6, v34);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v35 + 8))(v178, v34, v35);
    if (a1)
    {
      v36 = *(_QWORD *)(a1 + 48);
      if (v36)
      {
        v37 = *(_QWORD *)(v36 + 24);
        if ((v37 & 0x2000000000000000) == 0)
        {
          v38 = *(_QWORD *)(v36 + 16);
          if ((v38 & 0xFFFFFFFFFFFFLL) == 0)
            goto LABEL_17;
LABEL_9:
          v121._countAndFlagsBits = v38;
          v124 = a5;
          swift_bridgeObjectRetain(v37);
          swift_retain(a1);
          v122 = a1;
          sub_1001BF7E0();
          v40 = v39;
          v42 = v41;
          swift_release(a1);
          if (v42)
            v43 = v40;
          else
            v43 = 0;
          v119 = v43;
          v44 = (void *)0xE000000000000000;
          if (v42)
            v44 = v42;
          v123 = v44;
          *(_QWORD *)&v137 = v38;
          *((_QWORD *)&v137 + 1) = v37;
          v121._object = (void *)v37;
          v45 = sub_10002B3F4();
          v46 = swift_bridgeObjectRetain(v37);
          v47 = Text.init<A>(_:)(&v137, &type metadata for String, v45, v46);
          v49 = v48;
          v51 = v50;
          v53 = v52 & 1;
          v54 = static Font.body.getter(v47);
          static Font.Weight.medium.getter(v54);
          v55 = Font.weight(_:)(v54);
          swift_release(v54);
          (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v27, enum case for Font.Leading.tight(_:), v23);
          v56 = Font.leading(_:)(v27, v55);
          swift_release(v55);
          (*(void (**)(char *, uint64_t))(v24 + 8))(v27, v23);
          v57 = Text.font(_:)(v56, v47, v49, v53, v51);
          v59 = v58;
          v61 = v60;
          v63 = v62;
          swift_release(v56);
          v64 = v61 & 1;
          sub_10002B438(v47, v49, v53);
          swift_bridgeObjectRelease(v51);
          v66 = static Color.white.getter(v65);
          v67 = Text.foregroundColor(_:)(v66, v57, v59, v64, v63);
          v69 = v68;
          LOBYTE(v47) = v70;
          v120 = v71;
          swift_release(v66);
          LOBYTE(v56) = v47 & 1;
          sub_10002B438(v57, v59, v64);
          swift_bridgeObjectRelease(v63);
          KeyPath = swift_getKeyPath(&unk_10025C318);
          v73 = swift_getKeyPath(&unk_10025C348);
          v74 = swift_getKeyPath(&unk_10025C378);
          LOBYTE(v66) = static Edge.Set.top.getter(v74);
          v75 = EdgeInsets.init(_all:)(0.0);
          v161 = v56;
          v159 = 0;
          v155 = 0;
          v178[5] = v67;
          v178[6] = v69;
          v179 = v56;
          *(_DWORD *)v180 = *(_DWORD *)v160;
          *(_DWORD *)&v180[3] = *(_DWORD *)&v160[3];
          v76 = v120;
          v181 = v120;
          v182 = KeyPath;
          v183 = 3;
          v184 = 0;
          *(_DWORD *)&v185[3] = *(_DWORD *)&v158[3];
          *(_DWORD *)v185 = *(_DWORD *)v158;
          v186 = v73;
          v187 = 0;
          *(_DWORD *)&v188[3] = *(_DWORD *)&v157[3];
          *(_DWORD *)v188 = *(_DWORD *)v157;
          v189 = v74;
          v190 = 0x3FE0000000000000;
          v191 = v66;
          *(_DWORD *)&v192[3] = *(_DWORD *)&v156[3];
          *(_DWORD *)v192 = *(_DWORD *)v156;
          v193 = v75;
          v194 = v77;
          v195 = v78;
          v196 = v79;
          v197 = 0;
          v82 = static Alignment.leading.getter(v80, v81);
          sub_10013348C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)&v137, v84, 0.0, 1, 0.0, 1, v82, v83);
          sub_10002B438(v67, v69, v56);
          swift_release(v74);
          swift_release(v73);
          swift_release(KeyPath);
          swift_bridgeObjectRelease(v76);
          v174 = v149;
          v175 = v150;
          v176 = v151;
          v177 = v152;
          v170 = v145;
          v171 = v146;
          v172 = v147;
          v173 = v148;
          v166 = v141;
          v167 = v142;
          v168 = v143;
          v169 = v144;
          v162 = v137;
          v163 = v138;
          v164 = v139;
          v165 = v140;
          v85 = v125;
          v86 = OpacityTransition.init()(v139);
          v87 = static Animation.easeInOut.getter(v86);
          v88 = sub_1000052EC(&qword_100318760, (uint64_t (*)(uint64_t))&type metadata accessor for OpacityTransition, (uint64_t)&protocol conformance descriptor for OpacityTransition);
          v90 = v128;
          v89 = v129;
          Transition.animation(_:)(v87, v129, v88);
          swift_release(v87);
          (*(void (**)(char *, uint64_t))(v126 + 8))(v85, v89);
          v92 = v130;
          v91 = v131;
          v93 = v127;
          (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v127, v90, v131);
          *(_QWORD *)&v136[0] = v89;
          *((_QWORD *)&v136[0] + 1) = v88;
          OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v136, &opaque type descriptor for <<opaque return type of Transition.animation(_:)>>, 1);
          v95 = AnyTransition.init<A>(_:)(v93, v91, OpaqueTypeConformance2);
          (*(void (**)(char *, uint64_t))(v92 + 8))(v90, v91);
          strcpy((char *)&v137, "GuidanceText-");
          HIWORD(v137) = -4864;
          object = v121._object;
          String.append(_:)(v121);
          swift_bridgeObjectRelease(object);
          v97 = v137;
          v98 = *(_QWORD *)(v122 + 48);
          v99 = v133;
          if (v98)
          {
            v100 = *(_QWORD *)(v98 + 72);
            if (v100)
            {
              v101 = *(_QWORD *)(v98 + 72);
LABEL_20:
              swift_bridgeObjectRetain(v100);
              *v99 = static Alignment.top.getter(v104);
              v99[1] = v105;
              v106 = sub_100003DB8(&qword_1003262B8);
              v107 = v123;
              sub_1001B1A3C(v101, (uint64_t)v178, v119, v123, (uint64_t)v99 + *(int *)(v106 + 44));
              swift_bridgeObjectRelease(v107);
              swift_bridgeObjectRelease(v101);
              v108 = sub_100003DB8(&qword_1003262A0);
              (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v108 - 8) + 56))(v99, 0, 1, v108);
LABEL_22:
              a5 = v124;
              v110 = v134;
              sub_10000B234((uint64_t)v99, v134, &qword_100326290);
              v136[12] = v174;
              v136[13] = v175;
              v136[14] = v176;
              v136[8] = v170;
              v136[9] = v171;
              v136[10] = v172;
              v136[11] = v173;
              v136[4] = v166;
              v136[5] = v167;
              v136[6] = v168;
              v136[7] = v169;
              v136[0] = v162;
              v136[1] = v163;
              v136[2] = v164;
              v136[3] = v165;
              *(_QWORD *)&v136[15] = v177;
              *((_QWORD *)&v136[15] + 1) = v95;
              v136[16] = v97;
              v111 = v132;
              memcpy(v132, v136, 0x110uLL);
              v112 = sub_100003DB8(&qword_1003262A8);
              sub_10000B234(v110, (uint64_t)v111 + *(int *)(v112 + 48), &qword_100326290);
              sub_1001B25C4((uint64_t)v136);
              sub_100007FF0((uint64_t)v99, &qword_100326290);
              sub_100007FF0(v110, &qword_100326290);
              v149 = v174;
              v150 = v175;
              v151 = v176;
              v145 = v170;
              v146 = v171;
              v147 = v172;
              v148 = v173;
              v141 = v166;
              v142 = v167;
              v143 = v168;
              v144 = v169;
              v137 = v162;
              v138 = v163;
              v139 = v164;
              v140 = v165;
              v152 = v177;
              v153 = v95;
              v154 = v97;
              sub_1001B2650((uint64_t)&v137);
              v113 = sub_100003DB8(&qword_1003262B0);
              (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v113 - 8) + 56))(v111, 0, 1, v113);
              v103 = v135;
              sub_1001B26DC((uint64_t)v111, v135);
              goto LABEL_23;
            }
            swift_retain(*(_QWORD *)(v122 + 48));
            v101 = sub_1001DD7D8();
            swift_bridgeObjectRetain(v101);
            swift_release(v98);
            if (v101)
            {
              v100 = 0;
              goto LABEL_20;
            }
          }
          swift_bridgeObjectRelease(v123);
          v109 = sub_100003DB8(&qword_1003262A0);
          (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v109 - 8) + 56))(v99, 1, 1, v109);
          goto LABEL_22;
        }
        if ((v37 & 0xF00000000000000) != 0)
        {
          v38 = *(_QWORD *)(v36 + 16);
          goto LABEL_9;
        }
      }
LABEL_17:
      v102 = sub_100003DB8(&qword_1003262B0);
      v103 = v135;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 56))(v135, 1, 1, v102);
LABEL_23:
      sub_1001B26DC(v103, a5);
      return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v178);
    }
  }
  else
  {
    v115 = type metadata accessor for UIMetrics();
    v116 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, a4, v115, v116);
    __break(1u);
  }
  v117 = type metadata accessor for GuidanceMessagesModel();
  v118 = sub_1000052EC(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v124, v117, v118);
  __break(1u);
  return result;
}

uint64_t sub_1001B1A3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t KeyPath;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *object;
  unint64_t v34;
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  double v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t OpaqueTypeConformance2;
  uint64_t v85;
  Swift::String v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  Swift::String v107;
  char v108;
  _BYTE v109[7];
  _BYTE v110[7];
  _BYTE v111[7];
  char v112;
  _BYTE v113[7];
  char v114;
  __int128 v115;
  __int128 v116;
  __n128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  _OWORD v131[17];
  Swift::String v132;
  __int128 v133;
  __n128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  uint64_t v147;
  uint64_t v148;
  Swift::String v149;
  uint64_t v150;
  uint64_t v151;
  char v152;
  _BYTE v153[7];
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char v157;
  _BYTE v158[7];
  uint64_t v159;
  char v160;
  _BYTE v161[7];
  uint64_t v162;
  uint64_t v163;
  char v164;
  _BYTE v165[7];
  double v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char v170;

  v107._countAndFlagsBits = a3;
  v107._object = a4;
  v105 = a5;
  v102 = type metadata accessor for OpacityTransition(0);
  v100 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102, v7);
  v97 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_100003DB8(&qword_1003195D0);
  v101 = *(_QWORD *)(v103 - 8);
  v10 = __chkstk_darwin(v103, v9);
  v99 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  v98 = (char *)&v92 - v13;
  v14 = type metadata accessor for Font.Leading(0);
  v95 = *(_QWORD *)(v14 - 8);
  v96 = v14;
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003DB8(&qword_1003262C0);
  v20 = __chkstk_darwin(v18, v19);
  v104 = (uint64_t)&v92 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v22);
  v106 = (uint64_t)&v92 - v23;
  if (*(_QWORD *)(a1 + 16) < 2uLL)
  {
    v32 = sub_100003DB8(&qword_1003262C8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v106, 1, 1, v32);
  }
  else
  {
    *(_QWORD *)&v131[0] = a1;
    KeyPath = swift_getKeyPath(&unk_10025C3B0);
    sub_100007CBC(a2, (uint64_t)&v132);
    v25 = swift_allocObject(&unk_1002F6F18, 56, 7);
    sub_100007D04((__int128 *)&v132._countAndFlagsBits, v25 + 16);
    swift_bridgeObjectRetain(a1);
    v26 = sub_100003DB8(&qword_100317980);
    v27 = sub_100003DB8(&qword_1003262D8);
    v28 = sub_1000084FC(&qword_100319618, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
    v29 = sub_1001B2750();
    v30 = v106;
    ForEach<>.init(_:id:content:)(v131, KeyPath, sub_1001B2748, v25, v26, v27, v28, &protocol witness table for String, v29);
    v31 = sub_100003DB8(&qword_1003262C8);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 0, 1, v31);
  }
  object = v107._object;
  v132 = v107;
  v34 = sub_10002B3F4();
  v35 = swift_bridgeObjectRetain(object);
  v36 = Text.init<A>(_:)(&v132, &type metadata for String, v34, v35);
  v38 = v37;
  v94 = v39;
  v41 = v40 & 1;
  v42 = static Font.footnote.getter(v36);
  static Font.Weight.medium.getter(v42);
  v43 = Font.weight(_:)(v42);
  swift_release(v42);
  v44 = v95;
  v45 = v96;
  (*(void (**)(char *, _QWORD, uint64_t))(v95 + 104))(v17, enum case for Font.Leading.tight(_:), v96);
  v46 = Font.leading(_:)(v17, v43);
  swift_release(v43);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v17, v45);
  v47 = v94;
  v48 = Text.font(_:)(v46, v36, v38, v41, v94);
  v50 = v49;
  LOBYTE(v44) = v51;
  v93 = v52;
  swift_release(v46);
  v53 = v44 & 1;
  sub_10002B438(v36, v38, v41);
  swift_bridgeObjectRelease(v47);
  v54 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  v55 = Color.init(_:)(v54);
  v56 = v93;
  v57 = Text.foregroundColor(_:)(v55, v48, v50, v53, v93);
  v95 = v58;
  v96 = v57;
  v60 = v59;
  LOBYTE(v38) = v61;
  swift_release(v55);
  LOBYTE(v55) = v38 & 1;
  sub_10002B438(v48, v50, v53);
  swift_bridgeObjectRelease(v56);
  v62 = swift_getKeyPath(&unk_10025C318);
  v63 = swift_getKeyPath(&unk_10025C348);
  v64 = swift_getKeyPath(&unk_10025C378);
  LOBYTE(v50) = static Edge.Set.top.getter(v64);
  v65 = EdgeInsets.init(_all:)(4.0);
  v114 = v55;
  v112 = 0;
  v108 = 0;
  v150 = v57;
  v151 = v60;
  v152 = v55;
  *(_DWORD *)v153 = *(_DWORD *)v113;
  *(_DWORD *)&v153[3] = *(_DWORD *)&v113[3];
  v66 = v95;
  v154 = v95;
  v155 = v62;
  v156 = 3;
  v157 = 0;
  *(_DWORD *)&v158[3] = *(_DWORD *)&v111[3];
  *(_DWORD *)v158 = *(_DWORD *)v111;
  v159 = v63;
  v160 = 0;
  *(_DWORD *)&v161[3] = *(_DWORD *)&v110[3];
  *(_DWORD *)v161 = *(_DWORD *)v110;
  v162 = v64;
  v163 = 0x3FE0000000000000;
  v164 = v50;
  *(_DWORD *)&v165[3] = *(_DWORD *)&v109[3];
  *(_DWORD *)v165 = *(_DWORD *)v109;
  v166 = v65;
  v167 = v67;
  v168 = v68;
  v169 = v69;
  v170 = 0;
  v72 = static Alignment.leading.getter(v70, v71);
  sub_10013348C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)&v132, v74, 0.0, 1, 0.0, 1, v72, v73);
  sub_10002B438(v96, v60, v55);
  swift_release(v64);
  swift_release(v63);
  swift_release(v62);
  swift_bridgeObjectRelease(v66);
  v128 = v145;
  v129 = v146;
  v124 = v141;
  v125 = v142;
  v126 = v143;
  v127 = v144;
  v120 = v137;
  v121 = v138;
  v130 = v147;
  v122 = v139;
  v123 = v140;
  v115 = (__int128)v132;
  v116 = v133;
  v117 = v134;
  v118 = v135;
  v119 = v136;
  v75 = v97;
  v76 = OpacityTransition.init()(v134);
  v77 = static Animation.easeInOut.getter(v76);
  v78 = sub_1000052EC(&qword_100318760, (uint64_t (*)(uint64_t))&type metadata accessor for OpacityTransition, (uint64_t)&protocol conformance descriptor for OpacityTransition);
  v79 = v98;
  v80 = v102;
  Transition.animation(_:)(v77, v102, v78);
  swift_release(v77);
  (*(void (**)(char *, uint64_t))(v100 + 8))(v75, v80);
  v81 = v101;
  v82 = v99;
  v83 = v103;
  (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v99, v79, v103);
  *(_QWORD *)&v131[0] = v80;
  *((_QWORD *)&v131[0] + 1) = v78;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v131, &opaque type descriptor for <<opaque return type of Transition.animation(_:)>>, 1);
  v85 = AnyTransition.init<A>(_:)(v82, v83, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v81 + 8))(v79, v83);
  v132._countAndFlagsBits = 0xD000000000000010;
  v132._object = (void *)0x8000000100264230;
  String.append(_:)(v107);
  v86 = v132;
  v87 = v106;
  v88 = v104;
  sub_10000B234(v106, v104, &qword_1003262C0);
  v89 = v105;
  sub_10000B234(v88, v105, &qword_1003262C0);
  v90 = *(int *)(sub_100003DB8(&qword_1003262D0) + 48);
  v131[12] = v127;
  v131[13] = v128;
  v131[14] = v129;
  v131[8] = v123;
  v131[9] = v124;
  v131[10] = v125;
  v131[11] = v126;
  v131[4] = v119;
  v131[5] = v120;
  v131[6] = v121;
  v131[7] = v122;
  v131[0] = v115;
  v131[1] = v116;
  v131[2] = v117;
  v131[3] = v118;
  *(_QWORD *)&v131[15] = v130;
  *((_QWORD *)&v131[15] + 1) = v85;
  v131[16] = v86;
  memcpy((void *)(v89 + v90), v131, 0x110uLL);
  sub_1001B25C4((uint64_t)v131);
  sub_100007FF0(v87, &qword_1003262C0);
  v144 = v127;
  v145 = v128;
  v146 = v129;
  v140 = v123;
  v141 = v124;
  v142 = v125;
  v143 = v126;
  v136 = v119;
  v137 = v120;
  v138 = v121;
  v139 = v122;
  v132 = (Swift::String)v115;
  v133 = v116;
  v134 = v117;
  v135 = v118;
  v147 = v130;
  v148 = v85;
  v149 = v86;
  sub_1001B2650((uint64_t)&v132);
  return sub_100007FF0(v88, &qword_1003262C0);
}

uint64_t sub_1001B2218@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __n128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  unint64_t v41;
  _QWORD v43[2];
  _OWORD v44[15];
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  _BYTE v51[7];
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  _BYTE v56[7];
  uint64_t v57;
  char v58;
  _BYTE v59[7];
  uint64_t v60;
  uint64_t v61;
  char v62;
  _BYTE v63[7];
  double v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  _BYTE v70[7];
  _BYTE v71[7];
  _BYTE v72[7];
  char v73;
  _BYTE v74[7];
  char v75;
  _OWORD v76[15];
  uint64_t v77;

  v43[1] = a2;
  v3 = type metadata accessor for Font.Leading(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *a1;
  v9 = a1[1];
  *(_QWORD *)&v44[0] = v8;
  *((_QWORD *)&v44[0] + 1) = v9;
  v10 = sub_10002B3F4();
  v11 = swift_bridgeObjectRetain(v9);
  v12 = Text.init<A>(_:)(v44, &type metadata for String, v10, v11);
  v14 = v13;
  v43[0] = v15;
  v17 = v16 & 1;
  v18 = static Font.footnote.getter(v12);
  static Font.Weight.medium.getter(v18);
  v19 = Font.weight(_:)(v18);
  swift_release(v18);
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for Font.Leading.tight(_:), v3);
  v20 = Font.leading(_:)(v7, v19);
  swift_release(v19);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  v21 = v43[0];
  v22 = Text.font(_:)(v20, v12, v14, v17, v43[0]);
  v24 = v23;
  LOBYTE(v3) = v25;
  v27 = v26;
  swift_release(v20);
  LOBYTE(v20) = v3 & 1;
  sub_10002B438(v12, v14, v17);
  swift_bridgeObjectRelease(v21);
  KeyPath = swift_getKeyPath(&unk_10025C318);
  v29 = swift_getKeyPath(&unk_10025C348);
  v30 = swift_getKeyPath(&unk_10025C378);
  LOBYTE(v3) = static Edge.Set.top.getter(v30);
  v31 = EdgeInsets.init(_all:)(4.0);
  v75 = v20;
  v73 = 0;
  v69 = 0;
  v48 = v22;
  v49 = v24;
  v50 = v20;
  *(_DWORD *)v51 = *(_DWORD *)v74;
  *(_DWORD *)&v51[3] = *(_DWORD *)&v74[3];
  v52 = v27;
  v53 = KeyPath;
  v54 = 3;
  v55 = 0;
  *(_DWORD *)&v56[3] = *(_DWORD *)&v72[3];
  *(_DWORD *)v56 = *(_DWORD *)v72;
  v57 = v29;
  v58 = 0;
  *(_DWORD *)&v59[3] = *(_DWORD *)&v71[3];
  *(_DWORD *)v59 = *(_DWORD *)v71;
  v60 = v30;
  v61 = 0x3FE0000000000000;
  v62 = v3;
  *(_DWORD *)&v63[3] = *(_DWORD *)&v70[3];
  *(_DWORD *)v63 = *(_DWORD *)v70;
  v64 = v31;
  v65 = v32;
  v66 = v33;
  v67 = v34;
  v68 = 0;
  v37 = static Alignment.leading.getter(v35, v36);
  sub_10013348C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v44, v39, 0.0, 1, 0.0, 1, v37, v38);
  sub_10002B438(v22, v24, v20);
  swift_release(v30);
  swift_release(v29);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v27);
  v76[12] = v44[12];
  v76[13] = v44[13];
  v76[14] = v44[14];
  v77 = v45;
  v76[8] = v44[8];
  v76[9] = v44[9];
  v76[10] = v44[10];
  v76[11] = v44[11];
  v76[4] = v44[4];
  v76[5] = v44[5];
  v76[6] = v44[6];
  v76[7] = v44[7];
  v76[0] = v44[0];
  v76[1] = v44[1];
  v76[2] = v44[2];
  v76[3] = v44[3];
  v46 = 0;
  v47 = 0;
  v40 = sub_100003DB8(&qword_1003262F0);
  v41 = sub_1001B27D4();
  View.accessibilityHidden(_:)(1, v40, v41);
  return sub_100152A78((uint64_t)v76);
}

uint64_t sub_1001B25A0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001B10D4(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1001B25C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 248);
  v7 = *(_QWORD *)(a1 + 264);
  sub_10002B750(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t sub_1001B2650(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 56);
  v5 = *(_QWORD *)(a1 + 72);
  v6 = *(_QWORD *)(a1 + 248);
  v7 = *(_QWORD *)(a1 + 264);
  sub_10002B438(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v7);
  swift_release(v6);
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1001B26DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100326298);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001B2724()
{
  uint64_t v0;

  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1001B2748@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001B2218(a1, a2);
}

unint64_t sub_1001B2750()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003262E0;
  if (!qword_1003262E0)
  {
    v1 = sub_100007FAC(&qword_1003262D8);
    sub_1001B27D4();
    sub_1000052EC(&qword_100316C10, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003262E0);
  }
  return result;
}

unint64_t sub_1001B27D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003262E8;
  if (!qword_1003262E8)
  {
    v1 = sub_100007FAC(&qword_1003262F0);
    sub_10002B614(&qword_1003262F8, &qword_100326300, (void (*)(void))sub_100152894);
    sub_10004E0D4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003262E8);
  }
  return result;
}

unint64_t sub_1001B2864()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100326308;
  if (!qword_100326308)
  {
    v1 = sub_100007FAC(&qword_100326298);
    sub_1000084FC((unint64_t *)&unk_100326310, &qword_1003262B0, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100326308);
  }
  return result;
}

uint64_t sub_1001B28E0(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001B291C + 4 * byte_10025C3D0[a1]))(0xD000000000000011, 0x800000010026E520);
}

uint64_t sub_1001B291C()
{
  return 0x697261657070612ELL;
}

uint64_t sub_1001B2938()
{
  return 0x657261657070612ELL;
}

unint64_t sub_1001B2954()
{
  return 0xD000000000000010;
}

uint64_t sub_1001B2970()
{
  return 0x657070617369642ELL;
}

uint64_t sub_1001B29A4()
{
  unsigned __int8 *v0;

  return sub_1001B28E0(*v0);
}

uint64_t sub_1001B29AC(void *a1, unsigned int a2)
{
  char v2;
  unsigned int v4;
  Swift::String v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  void *v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  __n128 v15;
  Swift::String v16;
  void *object;
  Swift::String v18;
  char v20;
  _QWORD v21[2];

  v2 = a2;
  v4 = a2 >> 8;
  v21[0] = 0;
  v21[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(55);
  v5._countAndFlagsBits = 0x746E657365727028;
  v5._object = (void *)0xEE00203A656C6261;
  String.append(_:)(v5);
  v6 = a1;
  v7 = objc_msgSend(v6, "description");
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  v10 = v9;

  v11._countAndFlagsBits = v8;
  v11._object = v10;
  String.append(_:)(v11);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 0x3A6567617473202CLL;
  v12._object = (void *)0xE900000000000020;
  String.append(_:)(v12);
  v20 = v2;
  _print_unlocked<A, B>(_:_:)(&v20, v21, &type metadata for BannerAgent.Stage, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v13._object = (void *)0x800000010026E4A0;
  v13._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v13);
  v20 = v4;
  v14 = sub_100003DB8((uint64_t *)&unk_1003263F0);
  v16._countAndFlagsBits = String.init<A>(describing:)(&v20, v14, v15);
  object = v16._object;
  String.append(_:)(v16);
  swift_bridgeObjectRelease(object);
  v18._countAndFlagsBits = 41;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  return v21[0];
}

uint64_t sub_1001B2B24()
{
  uint64_t v0;

  return sub_1001B29AC(*(void **)v0, *(unsigned __int16 *)(v0 + 8));
}

void sub_1001B2B30(void *a1, __int16 a2)
{
  uint64_t v2;
  uint64_t v4;
  void *v5;
  id v6;
  id v7;
  id v8;
  char v9;
  char v10;

  v4 = v2 + OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable;
  v5 = *(void **)(v2 + OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable);
  *(_QWORD *)v4 = a1;
  *(_WORD *)(v4 + 8) = a2;
  v6 = a1;
  if (v5)
  {
    v7 = v6;
    if (a1)
    {

    }
    else
    {
      v9 = 0;
      PassthroughSubject.send(_:)(&v9);

    }
  }
  else if (a1)
  {
    v10 = 1;
    v8 = v6;
    PassthroughSubject.send(_:)(&v10);

  }
  else
  {

  }
}

void (*sub_1001B2BF0(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  void *v2;
  __int16 v3;
  id v4;

  *(_QWORD *)(a1 + 16) = v1;
  v2 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable);
  v3 = *(_WORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable + 8);
  *(_QWORD *)a1 = v2;
  *(_WORD *)(a1 + 8) = v3;
  v4 = v2;
  return sub_1001B2C40;
}

void sub_1001B2C40(uint64_t a1, char a2)
{
  void *v2;
  __int16 v3;
  id v4;

  v2 = *(void **)a1;
  v3 = *(_WORD *)(a1 + 8);
  if ((a2 & 1) != 0)
  {
    v4 = v2;
    sub_1001B2B30(v2, v3);

  }
  else
  {
    sub_1001B2B30(*(void **)a1, v3);
  }
}

char *sub_1001B2CB0(uint64_t a1, unint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __n128 v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  __n128 v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t *v23;
  NSString v24;
  id v25;
  void *v26;
  id v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  id v31;
  char *v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  id v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  id v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  objc_super v48;

  v5 = OBJC_IVAR____TtC8SOSBuddy11BannerAgent_bannerTapped;
  v6 = sub_100003DB8(&qword_10031EF78);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  v7 = v2;
  *(_QWORD *)&v2[v5] = PassthroughSubject.init()(v8);
  v9 = OBJC_IVAR____TtC8SOSBuddy11BannerAgent_bannerDismissedByUser;
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(_QWORD *)&v7[v9] = PassthroughSubject.init()(v10);
  v11 = OBJC_IVAR____TtC8SOSBuddy11BannerAgent_anyBannerPresentedChanged;
  v12 = sub_100003DB8(&qword_10031D150);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(_QWORD *)&v7[v11] = PassthroughSubject.init()(v13);
  v14 = OBJC_IVAR____TtC8SOSBuddy11BannerAgent_preferredBannerSizeWillChange;
  v15 = sub_100003DB8(&qword_10031EF80);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  *(_QWORD *)&v7[v14] = PassthroughSubject.init()(v16);
  v17 = OBJC_IVAR____TtC8SOSBuddy11BannerAgent_preferredBannerSizeDidChange;
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  *(_QWORD *)&v7[v17] = PassthroughSubject.init()(v18);
  v19 = &unk_100326000;
  v20 = OBJC_IVAR____TtC8SOSBuddy11BannerAgent__bannerSource;
  *(_QWORD *)&v7[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__bannerSource] = 0;
  v21 = &v7[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__contentProducer];
  *((_QWORD *)v21 + 1) = 0;
  swift_unknownObjectWeakInit(v21, 0);
  v22 = &v7[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable];
  *(_QWORD *)v22 = 0;
  *((_WORD *)v22 + 4) = 0;
  v23 = (uint64_t *)&v7[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__requesterId];
  *v23 = a1;
  v23[1] = a2;
  swift_bridgeObjectRetain(a2);
  v24 = String._bridgeToObjectiveC()();
  v25 = objc_msgSend((id)objc_opt_self(BNBannerSource), "bannerSourceForDestination:forRequesterIdentifier:", 0, v24);

  v26 = *(void **)&v7[v20];
  *(_QWORD *)&v7[v20] = v25;

  v48.receiver = v7;
  v48.super_class = (Class)type metadata accessor for BannerAgent();
  v27 = objc_msgSendSuper2(&v48, "init");
  v28 = qword_100315820;
  v29 = v27;
  if (v28 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v30 = type metadata accessor for Logger(0);
  sub_10000D744(v30, (uint64_t)qword_10033FD18);
  v31 = v29;
  swift_bridgeObjectRetain(a2);
  v32 = (char *)v31;
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = swift_slowAlloc(22, -1);
    v45 = a1;
    v36 = swift_slowAlloc(64, -1);
    v47 = v36;
    *(_DWORD *)v35 = 136446466;
    v37 = v32;
    v38 = objc_msgSend(v37, "description");
    v39 = static String._unconditionallyBridgeFromObjectiveC(_:)(v38);
    v41 = v40;

    v46 = sub_100172BEC(v39, v41, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v35 + 4, v35 + 12);

    swift_bridgeObjectRelease(v41);
    *(_WORD *)(v35 + 12) = 2080;
    swift_bridgeObjectRetain(a2);
    v46 = sub_100172BEC(v45, a2, &v47);
    v19 = (_QWORD *)&unk_100326000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v35 + 14, v35 + 22);
    swift_bridgeObjectRelease_n(a2, 3);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "[%{public}s] init for '%s'", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy(v36, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
  }
  v42 = *(void **)&v32[v19[106]];
  if (v42)
  {
    v43 = v42;
    objc_msgSend(v43, "setDelegate:", v32);

  }
  return v32;
}

id sub_1001B30BC()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  objc_class *v14;
  uint64_t v16;
  uint64_t v17;
  objc_super v18;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD18);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = swift_slowAlloc(22, -1);
    v6 = swift_slowAlloc(64, -1);
    v17 = v6;
    *(_DWORD *)v5 = 136446466;
    v7 = (char *)v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v16 = sub_100172BEC(v9, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    *(_WORD *)(v5 + 12) = 2080;
    v12 = *(_QWORD *)&v7[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__requesterId];
    v13 = *(_QWORD *)&v7[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__requesterId + 8];
    swift_bridgeObjectRetain(v13);
    v16 = sub_100172BEC(v12, v13, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v5 + 14, v5 + 22);

    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] deinit for '%s'", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy(v6, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v14 = (objc_class *)type metadata accessor for BannerAgent();
  v18.receiver = v2;
  v18.super_class = v14;
  return objc_msgSendSuper2(&v18, "dealloc");
}

void sub_1001B33D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  void *v9;
  id v10;
  uint64_t v11;
  void (*v12)(uint64_t, char);
  char *v13;
  __int16 v14;
  _BYTE v15[32];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    v9 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable);
    if (v9)
    {
      if (*(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable + 8) >= 3u)
      {
        v10 = v9;
        v12 = sub_1001B2BF0((uint64_t)v15);
        if (*(_QWORD *)v11)
          *(_BYTE *)(v11 + 9) = 1;
        v12((uint64_t)v15, 0);

      }
    }
    else
    {
      v13 = sub_1001B3510();
      sub_1001B2B30(v13, v14);
    }
  }
  else
  {
    __break(1u);
  }
}

char *sub_1001B3510()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  char *v14;
  void *v15;
  char *v16;
  uint64_t Strong;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  id v23;
  char *v24;
  uint64_t v25;
  uint64_t inited;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  Class isa;
  double v31;
  char *v32;
  char *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  char **v37;
  char *v38;
  uint64_t v39;
  char *v40;
  NSObject *v41;
  uint64_t v42;
  uint8_t *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  id v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  char *v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  id v66;
  uint64_t v67;
  _BYTE v68[56];
  char *v69;
  uint64_t v70;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (id *)((char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_100315838 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315838, sub_1000D9630);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FD60);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = (char *)swift_slowAlloc(32, -1);
    v69 = v14;
    *(_DWORD *)v13 = 136446210;
    v67 = sub_100172BEC(0xD00000000000001ALL, 0x800000010026E4C0, (uint64_t *)&v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v13 + 4, v13 + 12);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "_presentBanner for '%{public}s'", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }

  v15 = *(void **)&v1[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__bannerSource];
  if (!v15)
  {
    v40 = v1;
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, (os_log_type_t)v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(12, -1);
      v44 = (char *)swift_slowAlloc(32, -1);
      v69 = v44;
      *(_DWORD *)v43 = 136446210;
      v45 = *(_QWORD *)&v40[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__requesterId];
      v46 = *(_QWORD *)&v40[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__requesterId + 8];
      swift_bridgeObjectRetain(v46);
      v67 = sub_100172BEC(v45, v46, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v43 + 4, v43 + 12);

      swift_bridgeObjectRelease(v46);
      _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v42, "_presentBanner: _bannerSource for '%{public}s' has expired", v43, 0xCu);
      swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1, -1);
      swift_slowDealloc(v43, -1, -1);

    }
    else
    {

    }
    return 0;
  }
  v16 = &v1[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__contentProducer];
  Strong = swift_unknownObjectWeakLoadStrong(&v1[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__contentProducer]);
  if (!Strong)
  {
    v47 = v15;
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(12, -1);
      v51 = (char *)swift_slowAlloc(32, -1);
      v69 = v51;
      *(_DWORD *)v50 = 136446210;
      v67 = sub_100172BEC(0xD00000000000001ALL, 0x800000010026E4C0, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v50 + 4, v50 + 12);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "contentProducer for '%{public}s' has expired", v50, 0xCu);
      swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1, -1);
      swift_slowDealloc(v50, -1, -1);
    }

    return 0;
  }
  v18 = Strong;
  v19 = *((_QWORD *)v16 + 1);
  v20 = *(_QWORD *)&v1[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__requesterId];
  v21 = *(_QWORD *)&v1[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__requesterId + 8];
  v22 = (char *)objc_allocWithZone((Class)type metadata accessor for BannerViewController());
  v23 = v15;
  swift_bridgeObjectRetain(v21);
  swift_unknownObjectRetain(v18);
  v24 = sub_1001B693C(v20, v21, 0xD00000000000001ALL, 0x800000010026E4C0, v18, v19, v1, v22);
  v25 = sub_100003DB8((uint64_t *)&unk_100326470);
  inited = swift_initStackObject(v25, v68);
  *(_OWORD *)(inited + 16) = xmmword_10024E070;
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSBUIPresentableWantsDismissalPreventionContextUserInfoKey);
  *(_QWORD *)(inited + 40) = v27;
  sub_10006477C(0, (unint64_t *)&unk_10032B1C0, NSNumber_ptr);
  *(NSNumber *)(inited + 48) = NSNumber.init(integerLiteral:)(1);
  v28 = sub_100224768(inited);
  v29 = v24;
  sub_100003DB8((uint64_t *)&unk_100326480);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  *(_QWORD *)&v31 = swift_bridgeObjectRelease(v28).n128_u64[0];
  v69 = 0;
  LODWORD(v22) = objc_msgSend(v23, "postPresentable:options:userInfo:error:", v29, 1, isa, &v69, v31);

  v32 = v69;
  if (!(_DWORD)v22)
  {
    v52 = v69;
    v53 = _convertNSErrorToError(_:)(v32);

    swift_willThrow(v54);
    swift_errorRetain(v53);
    v55 = swift_errorRetain(v53);
    v56 = Logger.logObject.getter(v55);
    v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc(12, -1);
      v59 = (char *)swift_slowAlloc(32, -1);
      v69 = v59;
      v66 = v23;
      *(_DWORD *)v58 = 136446210;
      v67 = v53;
      swift_errorRetain(v53);
      v60 = sub_100003DB8((uint64_t *)&unk_100324AA0);
      v62 = String.init<A>(describing:)(&v67, v60, v61);
      v64 = v63;
      v67 = sub_100172BEC(v62, v63, (uint64_t *)&v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, v68, v58 + 4, v58 + 12);
      swift_bridgeObjectRelease(v64);
      swift_errorRelease(v53);
      swift_errorRelease(v53);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "_presentBanner failed: %{public}s", v58, 0xCu);
      swift_arrayDestroy(v59, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v59, -1, -1);
      swift_slowDealloc(v58, -1, -1);

      swift_errorRelease(v53);
      swift_unknownObjectRelease(v18);

    }
    else
    {

      swift_unknownObjectRelease(v18);
      swift_errorRelease(v53);
      swift_errorRelease(v53);
      swift_errorRelease(v53);

    }
    return 0;
  }
  v33 = v29;
  v34 = Logger.logObject.getter(v32);
  v35 = static os_log_type_t.default.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    v66 = v23;
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = (char **)swift_slowAlloc(8, -1);
    *(_DWORD *)v36 = 138543362;
    v69 = v33;
    v38 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v36 + 4, v36 + 12);
    *v37 = v24;

    _os_log_impl((void *)&_mh_execute_header, v34, v35, "_presentBanner: presenting '%{public}@'", v36, 0xCu);
    v39 = sub_100003DB8(&qword_1003178F0);
    swift_arrayDestroy(v37, 1, v39);
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v36, -1, -1);
    swift_unknownObjectRelease(v18);

  }
  else
  {

    swift_unknownObjectRelease(v18);
  }
  return v24;
}

void sub_1001B3E0C(void *a1, int a2, void *a3)
{
  char *v3;
  char *v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v13;
  char v14;
  void *v15;
  char *v16;
  void *v17;
  __int16 v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  const char *v35;
  uint64_t v36;
  char *v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  id v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  void (*v52)(uint64_t, char);
  uint64_t v53;
  id v54;
  NSObject *v55;
  os_log_type_t v56;
  int v57;
  uint64_t v58;
  uint8_t *v59;
  uint8_t *v60;
  id v61;
  id v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint8_t *v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  char v72;
  id v73;
  id v74;
  id v75;
  id v76;
  uint64_t v77;
  void (*v78)(uint64_t, char);
  id v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  id v83;
  uint64_t v84;
  NSObject *v85;
  os_log_type_t v86;
  uint64_t v87;
  id v88;
  id v89;
  id v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  uint64_t v95;
  __n128 v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  void *v101;
  __n128 v102;
  void *v103;
  id v104;
  uint64_t v105;
  uint8_t *v106;
  uint8_t *v107;
  void *v108;
  int v109;
  id v110;
  void *v111;
  id v112;
  id v113;
  uint64_t v114;
  id v115[4];

  v4 = v3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v12 = static OS_dispatch_queue.main.getter(v13);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_58:
    swift_once(&qword_100315838, sub_1000D9630);
LABEL_14:
    v36 = type metadata accessor for Logger(0);
    sub_10000D744(v36, (uint64_t)qword_10033FD60);
    v37 = v4;
    v38 = Logger.logObject.getter(v37);
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc(12, -1);
      v41 = (void *)swift_slowAlloc(32, -1);
      v115[0] = v41;
      *(_DWORD *)v40 = 136446210;
      v42 = *(_QWORD *)&v37[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__requesterId];
      v43 = *(_QWORD *)&v37[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__requesterId + 8];
      swift_bridgeObjectRetain(v43);
      v114 = sub_100172BEC(v42, v43, (uint64_t *)v115);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v40 + 4, v40 + 12);

      swift_bridgeObjectRelease(v43);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "_revokeBanner: _bannerSource for '%{public}s' has expired", v40, 0xCu);
      swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1, -1);
      swift_slowDealloc(v40, -1, -1);

    }
    else
    {

    }
    return;
  }
  v15 = *(void **)&v4[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__bannerSource];
  if (!v15)
  {
    if (qword_100315838 == -1)
      goto LABEL_14;
    goto LABEL_58;
  }
  v16 = &v4[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable];
  v17 = *(void **)&v4[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable];
  if (v17)
  {
    LODWORD(v111) = a2;
    v112 = a3;
    v18 = *((_WORD *)v16 + 4);
    v19 = v15;
    v113 = v17;
    v20 = objc_msgSend(v113, "requestIdentifier");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v24 = objc_msgSend(a1, "requestIdentifier");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    if (v21 == v25 && v23 == v27)
    {
      swift_bridgeObjectRelease_n(v23, 2);
    }
    else
    {
      v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v25, v27, 0);
      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v27);
      if ((v29 & 1) == 0)
      {
        if (qword_100315838 != -1)
          swift_once(&qword_100315838, sub_1000D9630);
        v30 = type metadata accessor for Logger(0);
        v31 = sub_10000D744(v30, (uint64_t)qword_10033FD60);
        v32 = Logger.logObject.getter(v31);
        v33 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v32, v33))
        {
          v34 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v34 = 0;
          v35 = "_revokeBanner for non-active presentable, ignoring";
LABEL_34:
          _os_log_impl((void *)&_mh_execute_header, v32, v33, v35, v34, 2u);
          swift_slowDealloc(v34, -1, -1);

LABEL_56:
          return;
        }
        goto LABEL_35;
      }
    }
    v52 = sub_1001B2BF0((uint64_t)v115);
    if (*(_QWORD *)v51)
      *(_BYTE *)(v51 + 9) = 2;
    v52((uint64_t)v115, 0);
    if (v18 < 3u)
    {
      if (qword_100315838 != -1)
        swift_once(&qword_100315838, sub_1000D9630);
      v53 = type metadata accessor for Logger(0);
      sub_10000D744(v53, (uint64_t)qword_10033FD60);
      v54 = a1;
      v55 = Logger.logObject.getter(v54);
      v56 = static os_log_type_t.default.getter(v55);
      v57 = v56;
      if (os_log_type_enabled(v55, v56))
      {
        v109 = v57;
        v58 = swift_slowAlloc(12, -1);
        v110 = v19;
        v59 = (uint8_t *)v58;
        v108 = (void *)swift_slowAlloc(32, -1);
        v115[0] = v108;
        *(_DWORD *)v59 = 136446210;
        v60 = v59 + 12;
        v106 = v59 + 4;
        v107 = v59;
        v61 = v54;
        v62 = v54;
        v63 = objc_msgSend(v61, "description");
        v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
        v66 = v65;

        v54 = v62;
        v114 = sub_100172BEC(v64, v66, (uint64_t *)v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v106, v60);

        swift_bridgeObjectRelease(v66);
        v67 = v107;
        _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v109, "_revokeBanner: revoking %{public}s", v107, 0xCu);
        v68 = v108;
        swift_arrayDestroy(v108, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v68, -1, -1);
        v19 = v110;
        swift_slowDealloc(v67, -1, -1);

      }
      else
      {

      }
      v71 = v112;
      v72 = (char)v111;
      v73 = objc_msgSend(v54, "requestIdentifier");
      v115[0] = 0;
      v74 = objc_msgSend(v19, "revokePresentableWithRequestIdentifier:reason:animated:userInfo:error:", v73, v71, v72 & 1, 0, v115);

      v75 = v115[0];
      if (v74)
      {
        v76 = v115[0];

        if (*(_QWORD *)v16 && !v16[8])
        {
          if (qword_1003157A8 != -1)
            swift_once(&qword_1003157A8, sub_10008E038);
          sub_1001B48B4(v54, (void *)qword_10033FCD8);
        }
        else
        {
          v78 = sub_1001B2BF0((uint64_t)v115);
          if (*(_QWORD *)v77)
            *(_BYTE *)(v77 + 8) = 3;
          v78((uint64_t)v115, 0);
        }

        goto LABEL_56;
      }
      v79 = v115[0];
      v80 = _convertNSErrorToError(_:)(v75);

      swift_willThrow(v81);
      v82 = v54;
      swift_errorRetain(v80);
      v83 = v82;
      v84 = swift_errorRetain(v80);
      v85 = Logger.logObject.getter(v84);
      v86 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v85, v86))
      {
        v87 = swift_slowAlloc(22, -1);
        v111 = (void *)swift_slowAlloc(64, -1);
        v115[0] = v111;
        *(_DWORD *)v87 = 136446466;
        v88 = v83;
        v110 = v19;
        v89 = v88;
        v90 = objc_msgSend(v88, "description");
        v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
        v112 = v83;
        v92 = v91;
        v94 = v93;

        v114 = sub_100172BEC(v92, v94, (uint64_t *)v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v87 + 4, v87 + 12);

        swift_bridgeObjectRelease(v94);
        *(_WORD *)(v87 + 12) = 2082;
        v114 = v80;
        swift_errorRetain(v80);
        v95 = sub_100003DB8((uint64_t *)&unk_100324AA0);
        v97 = String.init<A>(describing:)(&v114, v95, v96);
        v99 = v98;
        v114 = sub_100172BEC(v97, v98, (uint64_t *)v115);
        v19 = v110;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v87 + 14, v87 + 22);
        v100 = v99;
        v83 = v112;
        swift_bridgeObjectRelease(v100);
        swift_errorRelease(v80);
        swift_errorRelease(v80);
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "_revokeBanner(%{public}s) failed: %{public}s", (uint8_t *)v87, 0x16u);
        v101 = v111;
        swift_arrayDestroy(v111, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v101, -1, -1);
        swift_slowDealloc(v87, -1, -1);
      }
      else
      {

        swift_errorRelease(v80);
        swift_errorRelease(v80);
      }

      v103 = (void *)_convertErrorToNSError(_:)(v80, v102);
      v104 = objc_msgSend(v103, "code");

      if (v104 == (id)3)
      {
        if (qword_1003157A0 != -1)
          swift_once(&qword_1003157A0, sub_10008E004);
        sub_1001B48B4(v83, (void *)qword_10033FCD0);
      }

      swift_errorRelease(v80);
LABEL_51:

      return;
    }
    if (qword_100315838 != -1)
      swift_once(&qword_100315838, sub_1000D9630);
    v69 = type metadata accessor for Logger(0);
    v70 = sub_10000D744(v69, (uint64_t)qword_10033FD60);
    v32 = Logger.logObject.getter(v70);
    v33 = static os_log_type_t.default.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      v35 = "_revokeBanner for presentable for which revoke is already in progress, ignoring";
      goto LABEL_34;
    }
LABEL_35:

    goto LABEL_51;
  }
  v44 = qword_100315838;
  v45 = v15;
  if (v44 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v46 = type metadata accessor for Logger(0);
  v47 = sub_10000D744(v46, (uint64_t)qword_10033FD60);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v50 = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "_revokeBanner when no presentable is active, ignoring", v50, 2u);
    swift_slowDealloc(v50, -1, -1);
  }

}

void sub_1001B48B4(void *a1, void *a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  char *v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  char **p_name;
  uint64_t v28;
  id v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  __int16 v37;
  _QWORD *v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  char *v49;
  id *v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  uint64_t v65;
  void (*v66)(uint64_t, char);
  __n128 v67;
  uint64_t v68;
  char *v69;
  void *v70;
  uint64_t v71;
  void *v72;
  char *v73;
  __n128 v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *aBlock;
  _QWORD v93[4];
  uint64_t v94;

  v87 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v87 - 8);
  __chkstk_darwin(v87, v6);
  v8 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v85 = *(_QWORD *)(v9 - 8);
  v86 = v9;
  __chkstk_darwin(v9, v10);
  v84 = (char *)&v80 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v89 = *(_QWORD *)(v12 - 8);
  v90 = v12;
  __chkstk_darwin(v12, v13);
  v15 = (uint64_t *)((char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v16 = type metadata accessor for Logger(0);
  v17 = sub_10000D744(v16, (uint64_t)qword_10033FD60);
  v18 = a1;
  v19 = a2;
  v20 = v2;
  v21 = v18;
  v22 = v19;
  v23 = (char *)v20;
  v88 = v17;
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter(v24);
  v26 = os_log_type_enabled(v24, v25);
  p_name = &ResourceBundleClass.name;
  v82 = v8;
  v83 = v5;
  if (v26)
  {
    v28 = swift_slowAlloc(32, -1);
    v80 = swift_slowAlloc(96, -1);
    v91 = v80;
    *(_DWORD *)v28 = 136446722;
    v81 = v23;
    v29 = objc_msgSend(v21, "requestIdentifier");
    v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
    v32 = v31;

    aBlock = (_QWORD *)sub_100172BEC(v30, v32, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v93, v28 + 4, v28 + 12);

    swift_bridgeObjectRelease(v32);
    *(_WORD *)(v28 + 12) = 2082;
    v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v35 = v34;
    aBlock = (_QWORD *)sub_100172BEC(v33, v34, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v93, v28 + 14, v28 + 22);

    v36 = v35;
    v23 = v81;
    swift_bridgeObjectRelease(v36);
    *(_WORD *)(v28 + 22) = 2082;
    p_name = (char **)(&ResourceBundleClass + 24);
    v37 = *(_WORD *)&v23[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable + 8];
    aBlock = *(_QWORD **)&v23[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable];
    LOWORD(v93[0]) = v37;
    v38 = aBlock;
    v39 = sub_100003DB8((uint64_t *)&unk_100326400);
    v41 = String.init<A>(describing:)(&aBlock, v39, v40);
    v43 = v42;
    aBlock = (_QWORD *)sub_100172BEC(v41, v42, &v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v93, v28 + 24, v28 + 32);

    swift_bridgeObjectRelease(v43);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "didDisappear: for %{public}s, for reason '%{public}s', active presentable == %{public}s", (uint8_t *)v28, 0x20u);
    v44 = v80;
    swift_arrayDestroy(v80, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v28, -1, -1);

  }
  else
  {

  }
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v15 = static OS_dispatch_queue.main.getter(v45);
  v47 = v89;
  v46 = v90;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v89 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v90);
  v48 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(_QWORD *, uint64_t))(v47 + 8))(v15, v46);
  if ((v48 & 1) == 0)
  {
    __break(1u);
    return;
  }
  v49 = v23;
  v50 = (id *)&v23[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable];
  if (*v50)
  {
    v51 = *v50;
    v52 = objc_msgSend(v51, p_name[491]);

    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    v55 = v54;

  }
  else
  {
    v53 = 0;
    v55 = 0;
  }
  v56 = objc_msgSend(v21, p_name[491]);
  v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
  v59 = v58;

  if (v55)
  {
    if (v53 == v57 && v55 == v59)
    {
      swift_bridgeObjectRelease(v55);
      swift_bridgeObjectRelease(v59);
LABEL_16:
      if (*v50 && *((unsigned __int8 *)v50 + 9) << 8 != 512)
      {
        v66 = sub_1001B2BF0((uint64_t)&aBlock);
        if (*(_QWORD *)v65)
          *(_BYTE *)(v65 + 8) = 5;
        v67.n128_f64[0] = ((double (*)(_QWORD **, _QWORD))v66)(&aBlock, 0);
        v69 = v82;
        v68 = v83;
        v70 = (void *)static OS_dispatch_queue.main.getter(v67);
        v71 = swift_allocObject(&unk_1002F7070, 24, 7);
        swift_unknownObjectWeakInit(v71 + 16, v49);
        v93[3] = sub_1001B691C;
        v94 = v71;
        aBlock = _NSConcreteStackBlock;
        v93[0] = 1107296256;
        v93[1] = sub_1001BAACC;
        v93[2] = &unk_1002F7088;
        v72 = _Block_copy(&aBlock);
        swift_release(v94);
        v73 = v84;
        static DispatchQoS.unspecified.getter(v74);
        aBlock = _swiftEmptyArrayStorage;
        v75 = sub_10006A7F8();
        v76 = sub_100003DB8((uint64_t *)&unk_1003178D0);
        v77 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
        v78 = v76;
        v79 = v87;
        dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v78, v77, v87, v75);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v73, v69, v72);
        _Block_release(v72);

        (*(void (**)(char *, uint64_t))(v68 + 8))(v69, v79);
        (*(void (**)(char *, uint64_t))(v85 + 8))(v73, v86);
      }
      else
      {
        sub_1001B2B30(0, 0);
      }
      return;
    }
    v61 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v55, v57, v59, 0);
    swift_bridgeObjectRelease(v55);
    swift_bridgeObjectRelease(v59);
    if ((v61 & 1) != 0)
      goto LABEL_16;
  }
  else
  {
    swift_bridgeObjectRelease(v59);
  }
  v62 = Logger.logObject.getter(v60);
  v63 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, "Received didDisappear for non-active presentable", v64, 2u);
    swift_slowDealloc(v64, -1, -1);
  }

}

uint64_t type metadata accessor for BannerAgent()
{
  return objc_opt_self(_TtC8SOSBuddy11BannerAgent);
}

void sub_1001B4FD0(void *a1)
{
  sub_1001B5000(a1, "willAppear: for %{public}s, active presentable == %{public}s", 1, "Received willAppear for non-active presentable");
}

void sub_1001B4FE8(void *a1)
{
  sub_1001B5000(a1, "didAppear: for %{public}s, active presentable == %{public}s", 2, "Received didAppear for non-active presentable");
}

void sub_1001B5000(void *a1, const char *a2, int a3, const char *a4)
{
  void *v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  __int16 v29;
  id v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  char v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  void (*v54)(uint64_t, char);
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const char *v62;
  int v63;
  const char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  id v68;
  _WORD v69[12];

  v63 = a3;
  v64 = a2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (uint64_t *)((char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10000D744(v12, (uint64_t)qword_10033FD60);
  v14 = a1;
  v15 = v4;
  v16 = v14;
  v17 = (char *)v15;
  v65 = v13;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = v19;
  if (os_log_type_enabled(v18, v19))
  {
    v21 = swift_slowAlloc(22, -1);
    v66 = v17;
    v22 = v21;
    v59 = swift_slowAlloc(64, -1);
    v67 = v59;
    *(_DWORD *)v22 = 136446466;
    v60 = v8;
    HIDWORD(v58) = v20;
    v23 = v16;
    v24 = objc_msgSend(v16, "requestIdentifier");
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v61 = v7;
    v62 = a4;
    v26 = v25;
    v28 = v27;

    v68 = (id)sub_100172BEC(v26, v28, &v67);
    v8 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v22 + 4, v22 + 12);

    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v22 + 12) = 2082;
    v29 = *(_WORD *)&v66[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable + 8];
    v68 = *(id *)&v66[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable];
    v69[0] = v29;
    v30 = v68;
    v31 = sub_100003DB8((uint64_t *)&unk_100326400);
    v33 = String.init<A>(describing:)(&v68, v31, v32);
    v35 = v34;
    v68 = (id)sub_100172BEC(v33, v34, &v67);
    v7 = v61;
    a4 = v62;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v22 + 14, v22 + 22);

    v36 = v35;
    v16 = v23;
    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v18, BYTE4(v58), v64, (uint8_t *)v22, 0x16u);
    v37 = v59;
    swift_arrayDestroy(v59, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1, -1);
    v38 = v22;
    v17 = v66;
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {

  }
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v11 = static OS_dispatch_queue.main.getter(v39);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v40 = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
  if ((v40 & 1) == 0)
  {
    __break(1u);
    return;
  }
  v41 = *(void **)&v17[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable];
  if (v41)
  {
    v42 = v41;
    v43 = objc_msgSend(v42, "requestIdentifier");

    v44 = static String._unconditionallyBridgeFromObjectiveC(_:)(v43);
    v46 = v45;

  }
  else
  {
    v44 = 0;
    v46 = 0;
  }
  v47 = objc_msgSend(v16, "requestIdentifier");
  v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(v47);
  v50 = v49;

  if (v46)
  {
    if (v44 == v48 && v46 == v50)
    {
      swift_bridgeObjectRelease(v46);
      swift_bridgeObjectRelease(v50);
LABEL_16:
      v54 = sub_1001B2BF0((uint64_t)&v68);
      if (*(_QWORD *)v53)
        *(_BYTE *)(v53 + 8) = v63;
      v54((uint64_t)&v68, 0);
      return;
    }
    v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v44, v46, v48, v50, 0);
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(v50);
    if ((v52 & 1) != 0)
      goto LABEL_16;
  }
  else
  {
    swift_bridgeObjectRelease(v50);
  }
  v55 = Logger.logObject.getter(v51);
  v56 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, a4, v57, 2u);
    swift_slowDealloc(v57, -1, -1);
  }

}

double sub_1001B54B8(void *a1, void *a2)
{
  void *v2;
  uint64_t v5;
  void (**v6)(SEL *, _QWORD, uint64_t);
  uint64_t v7;
  uint64_t v8;
  SEL *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  char *v17;
  NSObject *v18;
  os_log_type_t v19;
  int v20;
  _BOOL4 v21;
  char **p_name;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  __int16 v35;
  id v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  unint64_t v40;
  os_log_t v41;
  uint64_t v42;
  uint64_t v43;
  __n128 v44;
  char v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  void (*v59)(uint64_t, char);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  double result;
  char v71;
  id v72;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  os_log_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  id v84;
  _QWORD v85[3];

  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(void (***)(SEL *, _QWORD, uint64_t))(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (SEL *)((char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10000D744(v10, (uint64_t)qword_10033FD60);
  v12 = a1;
  v13 = a2;
  v14 = v2;
  v15 = v12;
  v16 = v13;
  v17 = (char *)v14;
  v81 = v11;
  v18 = Logger.logObject.getter(v17);
  v19 = static os_log_type_t.default.getter(v18);
  v20 = v19;
  v21 = os_log_type_enabled(v18, v19);
  p_name = &ResourceBundleClass.name;
  v82 = v15;
  if (v21)
  {
    v23 = swift_slowAlloc(32, -1);
    v79 = v5;
    v24 = v23;
    v78 = swift_slowAlloc(96, -1);
    v83 = v78;
    *(_DWORD *)v24 = 136446722;
    v80 = v17;
    v25 = objc_msgSend(v15, "requestIdentifier");
    v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
    v77 = v18;
    v27 = v26;
    HIDWORD(v76) = v20;
    v28 = v16;
    v30 = v29;

    v84 = (id)sub_100172BEC(v27, v30, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v24 + 4, v24 + 12);

    v31 = v30;
    v16 = v28;
    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v24 + 12) = 2082;
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v34 = v33;
    v84 = (id)sub_100172BEC(v32, v33, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v24 + 14, v24 + 22);

    swift_bridgeObjectRelease(v34);
    *(_WORD *)(v24 + 22) = 2082;
    v17 = v80;
    v35 = *(_WORD *)&v80[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable + 8];
    v84 = *(id *)&v80[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable];
    LOWORD(v85[0]) = v35;
    v36 = v84;
    v37 = sub_100003DB8((uint64_t *)&unk_100326400);
    v39 = String.init<A>(describing:)(&v84, v37, v38);
    v15 = (id)v40;
    v84 = (id)sub_100172BEC(v39, v40, &v83);
    p_name = (char **)(&ResourceBundleClass + 24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v24 + 24, v24 + 32);

    swift_bridgeObjectRelease(v15);
    v41 = v77;
    _os_log_impl((void *)&_mh_execute_header, v77, BYTE4(v76), "willDisappear: for %{public}s, for reason '%{public}s', active presentable == %{public}s", (uint8_t *)v24, 0x20u);
    v42 = v78;
    swift_arrayDestroy(v78, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    v43 = v24;
    v5 = v79;
    swift_slowDealloc(v43, -1, -1);

  }
  else
  {

  }
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v9 = (SEL)static OS_dispatch_queue.main.getter(v44);
  v6[13](v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v45 = _dispatchPreconditionTest(_:)(v9);
  ((void (*)(SEL *, uint64_t))v6[1])(v9, v5);
  if ((v45 & 1) != 0)
  {
    v6 = (void (**)(SEL *, _QWORD, uint64_t))v16;
    v46 = *(void **)&v17[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable];
    if (v46)
    {
      v47 = v46;
      v48 = objc_msgSend(v47, p_name[491]);

      v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      v51 = v50;

    }
    else
    {
      v49 = 0;
      v51 = 0;
    }
    v15 = v82;
    v52 = objc_msgSend(v82, p_name[491]);
    v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
    v55 = v54;

    if (v51)
    {
      if (v49 == v53 && v51 == v55)
      {
        swift_bridgeObjectRelease(v51);
        swift_bridgeObjectRelease(v55);
        goto LABEL_16;
      }
      v57 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v51, v53, v55, 0);
      swift_bridgeObjectRelease(v51);
      swift_bridgeObjectRelease(v55);
      if ((v57 & 1) != 0)
      {
LABEL_16:
        v59 = sub_1001B2BF0((uint64_t)&v84);
        if (*(_QWORD *)v58)
          *(_BYTE *)(v58 + 8) = 4;
        v59((uint64_t)&v84, 0);
        v9 = (SEL *)p_name;
        if (qword_1003157B8 == -1)
          goto LABEL_19;
        goto LABEL_29;
      }
    }
    else
    {
      swift_bridgeObjectRelease(v55);
    }
    v67 = Logger.logObject.getter(v56);
    v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v69 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "Received willDisappear for non-active presentable", v69, 2u);
      swift_slowDealloc(v69, -1, -1);
    }

    return result;
  }
  __break(1u);
LABEL_29:
  swift_once(&qword_1003157B8, sub_10008E09C);
LABEL_19:
  v60 = qword_10033FCE8;
  v61 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  v63 = v62;
  v65 = static String._unconditionallyBridgeFromObjectiveC(_:)(v60);
  v66 = v64;
  if (v61 == v65 && v63 == v64)
  {
    swift_bridgeObjectRelease_n(v63, 2);
  }
  else
  {
    v71 = _stringCompareWithSmolCheck(_:_:expecting:)(v61, v63, v65, v64, 0);
    swift_bridgeObjectRelease(v63);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v66).n128_u64[0];
    if ((v71 & 1) == 0)
      return result;
  }
  v72 = objc_msgSend(v15, v9[491]);
  v73 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v72);
  v75 = v74;

  v84 = v73;
  v85[0] = v75;
  PassthroughSubject.send(_:)(&v84);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v75).n128_u64[0];
  return result;
}

void sub_1001B5ABC(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    sub_1001B5B0C();

  }
}

void sub_1001B5B0C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  __n128 v12;
  char v13;
  char *v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  __int16 v20;
  id v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  __int16 v32;
  id v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  __int16 v40;
  uint64_t v41;
  id v42;
  __int16 v43;
  uint64_t v44;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10000D744(v7, (uint64_t)qword_10033FD60);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "executePendingStateUpdate", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v6 = static OS_dispatch_queue.main.getter(v12);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v13 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v13 & 1) != 0)
  {
    v14 = &v1[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable];
    if (*(_QWORD *)&v1[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable]
      && *((_WORD *)v14 + 4) == 5)
    {
      if ((*((_WORD *)v14 + 4) & 0xFF00) == 0x200)
      {
        v15 = v1;
        v16 = Logger.logObject.getter(v15);
        v17 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v16, v17))
        {
          v18 = (uint8_t *)swift_slowAlloc(12, -1);
          v19 = swift_slowAlloc(32, -1);
          *(_DWORD *)v18 = 136446210;
          v44 = v19;
          v20 = *((_WORD *)v14 + 4);
          v42 = *(id *)v14;
          v43 = v20;
          v21 = v42;
          v22 = sub_100003DB8((uint64_t *)&unk_100326400);
          v24 = String.init<A>(describing:)(&v42, v22, v23);
          v26 = v25;
          v42 = (id)sub_100172BEC(v24, v25, &v44);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v18 + 4, v18 + 12);

          swift_bridgeObjectRelease(v26);
          _os_log_impl((void *)&_mh_execute_header, v16, v17, "executePendingStateUpdate request expired, current presentable == %{public}s", v18, 0xCu);
          swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v19, -1, -1);
          swift_slowDealloc(v18, -1, -1);

        }
        else
        {

        }
        v39 = 0;
        v40 = 0;
      }
      else
      {
        v39 = sub_1001B3510();
      }
      sub_1001B2B30(v39, v40);
    }
    else
    {
      v27 = v1;
      v28 = Logger.logObject.getter(v27);
      v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc(12, -1);
        v31 = swift_slowAlloc(32, -1);
        *(_DWORD *)v30 = 136446210;
        v44 = v31;
        v32 = *((_WORD *)v14 + 4);
        v42 = *(id *)v14;
        v43 = v32;
        v33 = v42;
        v34 = sub_100003DB8((uint64_t *)&unk_100326400);
        v36 = String.init<A>(describing:)(&v42, v34, v35);
        v38 = v37;
        v42 = (id)sub_100172BEC(v36, v37, &v44);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v30 + 4, v30 + 12);

        swift_bridgeObjectRelease(v38);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "executePendingStateUpdate request overridden, current presentable == %{public}s", v30, 0xCu);
        swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1, -1);
        swift_slowDealloc(v30, -1, -1);

      }
      else
      {

      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_1001B5F6C(void *a1, void *a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  char *v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  char **p_name;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  __int16 v32;
  id v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  char v43;
  void *v44;
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  void *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  __int16 v66;
  uint64_t v67;

  v5 = type metadata accessor for DispatchPredicate(0);
  v64 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v8 = (uint64_t *)((char *)&v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FD60);
  v11 = a1;
  v12 = a2;
  v13 = v2;
  v14 = v11;
  v15 = v12;
  v16 = (char *)v13;
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = os_log_type_enabled(v17, v18);
  p_name = &ResourceBundleClass.name;
  v63 = v10;
  if (v19)
  {
    v21 = swift_slowAlloc(32, -1);
    v60 = swift_slowAlloc(96, -1);
    v67 = v60;
    *(_DWORD *)v21 = 136446722;
    v22 = objc_msgSend(v14, "requestIdentifier");
    v62 = v16;
    v23 = v14;
    v24 = v22;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v61 = v5;
    v26 = v25;
    v28 = v27;

    v65 = (id)sub_100172BEC(v26, v28, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v21 + 4, v21 + 12);

    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v21 + 12) = 2082;
    v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v31 = v30;
    v65 = (id)sub_100172BEC(v29, v30, &v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v21 + 14, v21 + 22);

    swift_bridgeObjectRelease(v31);
    *(_WORD *)(v21 + 22) = 2082;
    v14 = v23;
    v16 = v62;
    v32 = *(_WORD *)&v62[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable + 8];
    v65 = *(id *)&v62[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable];
    v66 = v32;
    v33 = v65;
    v34 = sub_100003DB8((uint64_t *)&unk_100326400);
    v36 = String.init<A>(describing:)(&v65, v34, v35);
    v38 = v37;
    v65 = (id)sub_100172BEC(v36, v37, &v67);
    v5 = v61;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v21 + 24, v21 + 32);

    swift_bridgeObjectRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "willNotAppear: for %{public}s, for reason '%{public}s', active presentable == %{public}s", (uint8_t *)v21, 0x20u);
    v39 = v60;
    swift_arrayDestroy(v60, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1, -1);
    v40 = v21;
    p_name = (char **)(&ResourceBundleClass + 24);
    swift_slowDealloc(v40, -1, -1);

  }
  else
  {

  }
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v8 = static OS_dispatch_queue.main.getter(v41);
  v42 = v64;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v64 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  v43 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v42 + 8))(v8, v5);
  if ((v43 & 1) == 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  v44 = *(void **)&v16[OBJC_IVAR____TtC8SOSBuddy11BannerAgent__activePresentable];
  if (v44)
  {
    v45 = v44;
    v46 = objc_msgSend(v45, p_name[491]);

    v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
    v49 = v48;

  }
  else
  {
    v47 = 0;
    v49 = 0;
  }
  v50 = objc_msgSend(v14, p_name[491]);
  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
  v53 = v52;

  if (v49)
  {
    if (v47 == v51 && v49 == v53)
    {
      swift_bridgeObjectRelease(v49);
      swift_bridgeObjectRelease(v53);
      goto LABEL_16;
    }
    v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v49, v51, v53, 0);
    swift_bridgeObjectRelease(v49);
    swift_bridgeObjectRelease(v53);
    if ((v55 & 1) != 0)
    {
LABEL_16:
      if (qword_1003157B8 == -1)
      {
LABEL_17:
        v56 = (void *)qword_10033FCE8;
        sub_1001B54B8(v14, (void *)qword_10033FCE8);
        sub_1001B48B4(v14, v56);
        return;
      }
LABEL_22:
      swift_once(&qword_1003157B8, sub_10008E09C);
      goto LABEL_17;
    }
  }
  else
  {
    swift_bridgeObjectRelease(v53);
  }
  v57 = Logger.logObject.getter(v54);
  v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v59 = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Received willNotAppear for non-active presentable", v59, 2u);
    swift_slowDealloc(v59, -1, -1);
  }

}

void sub_1001B6498(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  id v13;
  _QWORD *v14;
  uint64_t v15;
  __n128 v16;
  char v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v7 = type metadata accessor for Logger(0);
  sub_10000D744(v7, (uint64_t)qword_10033FD60);
  v8 = a1;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v23 = (_QWORD *)swift_slowAlloc(8, -1);
    v24 = v3;
    *(_DWORD *)v11 = 138543362;
    v26 = (uint64_t)v8;
    v12 = v8;
    v25 = v2;
    v13 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v11 + 4, v11 + 12);
    v14 = v23;
    *v23 = v8;

    v2 = v25;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "handleTap: %{public}@", v11, 0xCu);
    v15 = sub_100003DB8(&qword_1003178F0);
    swift_arrayDestroy(v14, 1, v15);
    v3 = v24;
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v6 = static OS_dispatch_queue.main.getter(v16);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v17 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v17 & 1) != 0)
  {
    v18 = objc_msgSend(v8, "requestIdentifier");
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v26 = v19;
    v27 = v21;
    PassthroughSubject.send(_:)(&v26);
    swift_bridgeObjectRelease(v21);
  }
  else
  {
    __break(1u);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for BannerAgent.ActivePresentable(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v4 = v3;
  return a1;
}

void destroy for BannerAgent.ActivePresentable(id *a1)
{

}

uint64_t assignWithCopy for BannerAgent.ActivePresentable(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a2;
  v5 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v4;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  return a1;
}

uint64_t initializeWithTake for BannerAgent.ActivePresentable(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_WORD *)(result + 8) = *((_WORD *)a2 + 4);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t assignWithTake for BannerAgent.ActivePresentable(uint64_t a1, uint64_t a2)
{
  void *v4;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *(_QWORD *)a2;

  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for BannerAgent.ActivePresentable(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 10))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BannerAgent.ActivePresentable(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 8) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 10) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 10) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BannerAgent.ActivePresentable()
{
  return &type metadata for BannerAgent.ActivePresentable;
}

uint64_t sub_1001B68F8()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1001B691C()
{
  uint64_t v0;

  sub_1001B5ABC(v0);
}

double sub_1001B6924(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1001B6934(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

char *sub_1001B693C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7, char *a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  id v22;
  char *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  char *v28;
  objc_class *v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  id v34;
  char *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  char *v61;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73[3];
  id v74;
  objc_super v75;

  v70 = a5;
  v71 = a1;
  v72 = a3;
  v13 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v13, v14);
  v66 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003DB8((uint64_t *)&unk_100326490);
  v68 = *(_QWORD *)(v16 - 8);
  v69 = v16;
  __chkstk_darwin(v16, v17);
  v67 = (char *)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = &a8[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_contentProducer];
  *((_QWORD *)v19 + 1) = 0;
  swift_unknownObjectWeakInit(v19, 0);
  v20 = &a8[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_delegate];
  *((_QWORD *)v20 + 1) = 0;
  swift_unknownObjectWeakInit(v20, 0);
  v21 = OBJC_IVAR____TtC8SOSBuddy20BannerViewController_tapGesture;
  v22 = objc_allocWithZone((Class)UITapGestureRecognizer);
  v23 = a8;
  *(_QWORD *)&a8[v21] = objc_msgSend(v22, "init");
  swift_unknownObjectWeakInit(&v23[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_presentableContext], 0);
  *(_QWORD *)&v23[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_dismissalPreventionAssertion] = 0;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100209204((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v24 = &_swiftEmptySetSingleton;
  }
  v26 = v70;
  v25 = v71;
  *(_QWORD *)&v23[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_subscriptions] = v24;
  v27 = (uint64_t *)&v23[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_requesterId];
  *v27 = v25;
  v27[1] = a2;
  v28 = &v23[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_requestId];
  *(_QWORD *)v28 = v72;
  *((_QWORD *)v28 + 1) = a4;
  *((_QWORD *)v19 + 1) = a6;
  swift_unknownObjectWeakAssign(v19, v26);
  *((_QWORD *)v20 + 1) = &off_1002F7008;
  swift_unknownObjectWeakAssign(v20, a7);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);

  v29 = (objc_class *)type metadata accessor for BannerViewController();
  v75.receiver = v23;
  v75.super_class = v29;
  v30 = objc_msgSendSuper2(&v75, "initWithNibName:bundle:", 0, 0);
  v31 = qword_100315838;
  v32 = v30;
  if (v31 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v33 = type metadata accessor for Logger(0);
  sub_10000D744(v33, (uint64_t)qword_10033FD60);
  v34 = v32;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRetain(a4);
  v35 = (char *)v34;
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = swift_slowAlloc(32, -1);
    v64 = swift_slowAlloc(96, -1);
    v73[0] = v64;
    *(_DWORD *)v38 = 136446722;
    v63 = v38 + 4;
    v39 = v35;
    v65 = a7;
    v40 = v39;
    v41 = objc_msgSend(v39, "description");
    v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(v41);
    v44 = v43;

    v74 = (id)sub_100172BEC(v42, v44, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v63, v38 + 12);

    a7 = v65;
    swift_bridgeObjectRelease(v44);
    *(_WORD *)(v38 + 12) = 2080;
    swift_bridgeObjectRetain(a2);
    v74 = (id)sub_100172BEC(v71, a2, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v38 + 14, v38 + 22);
    swift_bridgeObjectRelease_n(a2, 3);
    *(_WORD *)(v38 + 22) = 2080;
    v26 = v70;
    swift_bridgeObjectRetain(a4);
    v74 = (id)sub_100172BEC(v72, a4, v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v38 + 24, v38 + 32);
    swift_bridgeObjectRelease_n(a4, 3);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "[%{public}s] init for '%s' and %s", (uint8_t *)v38, 0x20u);
    v45 = v64;
    swift_arrayDestroy(v64, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1, -1);
    swift_slowDealloc(v38, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a4, 2);
    swift_bridgeObjectRelease_n(a2, 2);

  }
  objc_msgSend(v35, "setPreferredContentSize:", *(double *)(*(_QWORD *)(v26 + 40) + 32), *(double *)(*(_QWORD *)(v26 + 40) + 40));
  v73[0] = *(_QWORD *)(v26 + 328);
  v46 = v73[0];
  v47 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v48 = swift_retain(v46);
  v74 = (id)static OS_dispatch_queue.main.getter(v48);
  v49 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v50 = (uint64_t)v66;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v66, 1, 1, v49);
  v51 = sub_100003DB8(&qword_10032B0E0);
  v52 = sub_1000084FC((unint64_t *)&qword_1003264A0, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v53 = sub_10002158C();
  v54 = v67;
  Publisher.receive<A>(on:options:)(&v74, v50, v51, v47, v52, v53);
  sub_1000215D4(v50);

  swift_release(v73[0]);
  v55 = swift_allocObject(&unk_1002F70C0, 24, 7);
  swift_unknownObjectWeakInit(v55 + 16, v35);
  v56 = swift_allocObject(&unk_1002F70E8, 32, 7);
  *(_QWORD *)(v56 + 16) = sub_1001B7084;
  *(_QWORD *)(v56 + 24) = v55;
  v57 = sub_1000084FC((unint64_t *)&unk_1003264B0, (uint64_t *)&unk_100326490, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v58 = v69;
  v60 = Publisher<>.sink(receiveValue:)(sub_100021640, v56, v69, v57, v59);
  swift_release(v56);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v54, v58);
  v61 = &v35[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_subscriptions];
  swift_beginAccess(&v35[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_subscriptions], v73, 33, 0);
  AnyCancellable.store(in:)(v61);
  swift_endAccess(v73);
  swift_release(v60);

  swift_unknownObjectRelease(v26);
  return v35;
}

void sub_1001B6FA4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;

  v1 = v0;
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FD60);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "bannerSourceDidInvalidate", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy11BannerAgent__bannerSource);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy11BannerAgent__bannerSource) = 0;

}

double sub_1001B7084()
{
  uint64_t v0;

  return sub_1001EC214(v0);
}

uint64_t sub_1001B708C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t storeEnumTagSinglePayload for BannerAgent.Stage(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1001B70FC + 4 * byte_10025C3DB[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1001B7130 + 4 * byte_10025C3D6[v4]))();
}

uint64_t sub_1001B7130(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001B7138(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001B7140);
  return result;
}

uint64_t sub_1001B714C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001B7154);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1001B7158(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001B7160(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BannerAgent.Stage()
{
  return &type metadata for BannerAgent.Stage;
}

unint64_t sub_1001B7180()
{
  unint64_t result;

  result = qword_1003264C0;
  if (!qword_1003264C0)
  {
    result = swift_getWitnessTable(&unk_10025C4C8, &type metadata for BannerAgent.Stage);
    atomic_store(result, (unint64_t *)&qword_1003264C0);
  }
  return result;
}

id sub_1001B71CC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  __n128 v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  objc_super v22;

  v1 = OBJC_IVAR____TtC8SOSBuddy27AccessibilitySettingsSource_contentSizeCategoryDidChange;
  v2 = sub_100003DB8(&qword_10031AAD8);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = v0;
  *(_QWORD *)&v0[v1] = PassthroughSubject.init()(v4);
  *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy27AccessibilitySettingsSource_observers] = _swiftEmptyArrayStorage;

  v22.receiver = v3;
  v22.super_class = (Class)type metadata accessor for AccessibilitySettingsSource();
  v5 = objc_msgSendSuper2(&v22, "init");
  v6 = qword_100315820;
  v7 = v5;
  if (v6 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v8 = type metadata accessor for Logger(0);
  sub_10000D744(v8, (uint64_t)qword_10033FD18);
  v9 = v7;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v21 = v13;
    *(_DWORD *)v12 = 136446210;
    v14 = v9;
    v15 = objc_msgSend(v14, "description");
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v20 = sub_100172BEC(v16, v18, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v12 + 4, v12 + 12);

    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "init: %{public}s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
  return v9;
}

id sub_1001B7434()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  objc_class *v12;
  uint64_t v14;
  uint64_t v15;
  objc_super v16;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD18);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v15 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v14 = sub_100172BEC(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "deinit: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v12 = (objc_class *)type metadata accessor for AccessibilitySettingsSource();
  v16.receiver = v2;
  v16.super_class = v12;
  return objc_msgSendSuper2(&v16, "dealloc");
}

uint64_t type metadata accessor for AccessibilitySettingsSource()
{
  return objc_opt_self(_TtC8SOSBuddy27AccessibilitySettingsSource);
}

uint64_t sub_1001B7698()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD aBlock[5];
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (_QWORD *)((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_1003158D8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003158D8, sub_1000D9904);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FF40);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "AccessibilitySettingsSource::start", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v15 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v16 = swift_allocObject(&unk_1002F71F0, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16, v1);
  aBlock[4] = sub_1001B7F00;
  v26 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001FC2A0;
  aBlock[3] = &unk_1002F7208;
  v17 = _Block_copy(aBlock);
  swift_release(v26);
  v18 = objc_msgSend(v14, "addObserverForName:object:queue:usingBlock:", UIContentSizeCategoryDidChangeNotification, 0, v15, v17);
  _Block_release(v17);

  v19 = (_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy27AccessibilitySettingsSource_observers);
  v20 = swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy27AccessibilitySettingsSource_observers, aBlock, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
  v22 = *(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = *(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v22 >= v21 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
  v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v18);
  specialized Array._endMutation()(v23);
  swift_endAccess(aBlock);
  return 1;
}

uint64_t sub_1001B7970(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t result;
  void *v21;
  uint64_t v22;
  uint64_t Strong;
  void *v24;
  id v25;
  NSString *v26;
  uint64_t v27;
  NSString *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31[3];

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a2 + 16;
  if (qword_1003158D8 != -1)
    swift_once(&qword_1003158D8, sub_1000D9904);
  v10 = type metadata accessor for Logger(0);
  sub_10000D744(v10, (uint64_t)qword_10033FF40);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v27 = v9;
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v31[0] = v15;
    *(_DWORD *)v14 = 136446210;
    v16 = sub_1001B7F20();
    v17 = dispatch thunk of CustomStringConvertible.description.getter(v4, v16);
    v19 = v18;
    v29 = sub_100172BEC(v17, v18, v31);
    v9 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v19);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "AccessibilitySettingsSource::UIContentSizeCategory changed to %{public}s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }

  swift_beginAccess(v9, v31, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v9);
  if (result)
  {
    v21 = (void *)result;
    v22 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy27AccessibilitySettingsSource_contentSizeCategoryDidChange);
    swift_retain(v22);

    swift_beginAccess(v9, &v29, 0, 0);
    Strong = swift_unknownObjectWeakLoadStrong(v9);
    if (Strong)
    {
      v24 = (void *)Strong;
      v25 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
      v26 = (NSString *)objc_msgSend(v25, "preferredContentSizeCategory");

    }
    else
    {
      v26 = UIContentSizeCategoryUnspecified;
    }
    v28 = v26;
    PassthroughSubject.send(_:)(&v28);

    return swift_release(v22);
  }
  return result;
}

void sub_1001B7C4C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_1003158D8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003158D8, sub_1000D9904);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FF40);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "AccessibilitySettingsSource::stop", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = (uint64_t *)(v1 + OBJC_IVAR____TtC8SOSBuddy27AccessibilitySettingsSource_observers);
  swift_beginAccess(v14, v25, 1, 0);
  v15 = *v14;
  if (!((unint64_t)*v14 >> 62))
  {
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*v14);
    if (v16)
      goto LABEL_7;
LABEL_19:
    swift_bridgeObjectRelease(v15);
    v23 = *v14;
    *v14 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v23);
    return;
  }
  if (v15 < 0)
    v22 = *v14;
  else
    v22 = v15 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v14);
  v16 = _CocoaArrayWrapper.endIndex.getter(v22);
  if (!v16)
    goto LABEL_19;
LABEL_7:
  v17 = objc_opt_self(NSNotificationCenter);
  if (v16 >= 1)
  {
    v18 = (void *)v17;
    v19 = 0;
    do
    {
      if ((v15 & 0xC000000000000001) != 0)
      {
        v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v15);
      }
      else
      {
        v20 = *(_QWORD *)(v15 + 8 * v19 + 32);
        swift_unknownObjectRetain(v20);
      }
      ++v19;
      v21 = objc_msgSend(v18, "defaultCenter");
      objc_msgSend(v21, "removeObserver:", v20);
      swift_unknownObjectRelease(v20);

    }
    while (v16 != v19);
    goto LABEL_19;
  }
  __break(1u);
}

uint64_t sub_1001B7EDC()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001B7F00(uint64_t a1)
{
  uint64_t v1;

  return sub_1001B7970(a1, v1);
}

double sub_1001B7F08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1001B7F18(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_1001B7F20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100326508;
  if (!qword_100326508)
  {
    v1 = type metadata accessor for Notification(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for Notification, v1);
    atomic_store(result, (unint64_t *)&qword_100326508);
  }
  return result;
}

float static ConnectionAssistantCone.coneRadius(angle:height:)(float a1, float a2)
{
  return tanf(a1 * 0.5) * a2;
}

double ConnectionAssistantCone.init(baseOffset:height:tilt:towards:radius:color:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float a4@<S1>, int32x4_t a5@<Q2>, float a6@<S3>, float a7@<S4>)
{
  __int128 v9;
  __int128 v10;
  double result;
  __int128 v12;
  _OWORD v13[2];
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  char v19;

  sub_1001B8954(a1, (uint64_t)v13, a3, a4, a5, a6, a7);

  v9 = v17;
  *(_OWORD *)(a2 + 64) = v16;
  *(_OWORD *)(a2 + 80) = v9;
  *(_OWORD *)(a2 + 96) = v18;
  *(_BYTE *)(a2 + 112) = v19;
  v10 = v13[1];
  *(_OWORD *)a2 = v13[0];
  *(_OWORD *)(a2 + 16) = v10;
  result = *(double *)&v14;
  v12 = v15;
  *(_OWORD *)(a2 + 32) = v14;
  *(_OWORD *)(a2 + 48) = v12;
  return result;
}

float ConnectionAssistantCone.Pulse.init(progress:color:)(void *a1, float a2)
{
  float v3;

  v3 = sub_1001B8B20(a1, a2);

  return v3;
}

double ConnectionAssistantCone.init(baseOffset:topOffset:radius:color:)@<D0>(uint64_t a1@<X8>, __n128 a2@<Q0>, __n128 a3@<Q1>, float a4@<S2>, __n128 a5@<Q3>)
{
  double result;

  *(__n128 *)a1 = a2;
  *(__n128 *)(a1 + 16) = a3;
  *(float *)(a1 + 32) = a4;
  *(__n128 *)(a1 + 48) = a5;
  *(_DWORD *)(a1 + 64) = 1065353216;
  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_BYTE *)(a1 + 112) = 1;
  return result;
}

void ConnectionAssistantCone.project(from:camera:)(int32x4_t *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v3;
  float32x2_t v6;
  float v7;
  float32x4_t v8;
  __n128 v9;
  float32x2_t v10;
  float32x2_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  const mach_header_64 *v27;
  __int128 v28;
  float v29;
  __int128 v30;
  __n128 v31;
  float32x2_t v32;
  __n128 v33;
  float32x2_t v34[5];
  _OWORD v35[2];
  unsigned int v36;
  char v37;
  __int128 v38;
  __int128 v39;
  unsigned int v40;
  char v41;
  __int128 v42;
  __int128 v43;
  unsigned int v44;

  v6 = vadd_f32((float32x2_t)a3.n128_u64[0], *(float32x2_t *)v3);
  v7 = a3.n128_f32[2] + *(float *)(v3 + 8);
  v8 = *(float32x4_t *)(v3 + 16);
  v9 = (__n128)vmulq_f32(v8, v8);
  v9.n128_u32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v9, 2), vadd_f32((float32x2_t)v9.n128_u64[0], (float32x2_t)vdup_lane_s32((int32x2_t)v9.n128_u64[0], 1))).u32[0];
  v10 = vrsqrte_f32((float32x2_t)v9.n128_u32[0]);
  v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v9.n128_u32[0], vmul_f32(v10, v10)));
  v31 = (__n128)vmulq_n_f32(v8, vmul_f32(v11, vrsqrts_f32((float32x2_t)v9.n128_u32[0], vmul_f32(v11, v11))).f32[0]);
  v32 = v6;
  v9.n128_u64[0] = (unint64_t)vadd_f32(v6, *(float32x2_t *)v8.f32);
  v29 = v7;
  v9.n128_f32[2] = v7 + v8.f32[2];
  v9.n128_u32[3] = 0;
  sub_10022AC4C(a1, v34, v9, v31, *(float *)(v3 + 32));
  sub_10000B458((uint64_t)v34, (uint64_t)&v38, &qword_10031EBF8);
  v12 = v41;
  if ((v41 & 1) != 0)
  {
    v13 = 0;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 0uLL;
    v20 = 0uLL;
    v21 = 0uLL;
    v22 = 0uLL;
  }
  else
  {
    *(float32x2_t *)v23.f32 = v32;
    v23.i64[1] = LODWORD(v29);
    v33 = (__n128)v23;
    v28 = v39;
    v30 = v38;
    v42 = v38;
    v43 = v39;
    v13 = v40;
    v44 = v40;
    v14 = sub_1001B83A0(a1->i64, v23);
    v15 = v24;
    v16 = v25;
    v17 = v26 & 1;
    sub_1001B845C((float32x2_t *)v3, v3, a1, (uint64_t)v35, v33, v31);
    v20 = v28;
    v19 = v30;
    v21 = v35[0];
    v22 = v35[1];
    v27 = &_mh_execute_header;
    if (!v37)
      v27 = 0;
    v18 = (unint64_t)v27 | v36;
  }
  *(_OWORD *)a2 = v19;
  *(_OWORD *)(a2 + 16) = v20;
  *(_QWORD *)(a2 + 32) = v13;
  *(_QWORD *)(a2 + 40) = v14;
  *(_QWORD *)(a2 + 48) = v15;
  *(_QWORD *)(a2 + 56) = v16;
  *(_QWORD *)(a2 + 64) = v17;
  *(_OWORD *)(a2 + 72) = v21;
  *(_OWORD *)(a2 + 88) = v22;
  *(_BYTE *)(a2 + 108) = BYTE4(v18);
  *(_DWORD *)(a2 + 104) = v18;
  *(_BYTE *)(a2 + 109) = v12;
}

double ConnectionAssistantCone.Projection.boundingBox.getter()
{
  __int128 *v0;
  __int128 v1;
  float32x2_t v2;
  float32x4_t v3;
  int8x16_t v4;
  float32x4_t v5;
  _BYTE v7[40];
  _BYTE v8[32];
  __int128 v9;
  __int128 v10;
  int v11;
  __int128 v12;
  __int128 v13;
  int v14;
  _QWORD v15[3];
  char v16;
  _OWORD v17[2];
  int v18;
  char v19;

  v1 = v0[1];
  v9 = *v0;
  v10 = v1;
  v11 = *((_DWORD *)v0 + 8);
  v2 = ConnectionAssistantRendererProjection.Ellipse.boundingBox.getter();
  sub_10000B458((uint64_t)v0 + 40, (uint64_t)v8, &qword_100326510);
  sub_10000B458((uint64_t)v8, (uint64_t)v15, &qword_100326510);
  if ((v16 & 1) == 0)
  {
    v3.i64[0] = v15[0];
    v4.i64[0] = v15[1];
    v5.i64[0] = v15[2];
    v2 = vminnm_f32(v2, COERCE_FLOAT32X2_T(ConnectionAssistantRendererProjection.Triangle.boundingBox.getter(v3, v4, v5)));
  }
  sub_10000B458((uint64_t)v0 + 72, (uint64_t)v7, &qword_10031EBF8);
  sub_10000B458((uint64_t)v7, (uint64_t)v17, &qword_10031EBF8);
  if ((v19 & 1) == 0)
  {
    v12 = v17[0];
    v13 = v17[1];
    v14 = v18;
    v2 = vminnm_f32(v2, ConnectionAssistantRendererProjection.Ellipse.boundingBox.getter());
  }
  return *(double *)&v2;
}

BOOL sub_1001B830C(__n128 *a1, __n128 *a2)
{
  return _s8SOSBuddy23ConnectionAssistantConeV5PulseV23__derived_struct_equalsySbAE_AEtFZ_0(a1->n128_f32[0], a1[1], a2->n128_f32[0], a2[1]);
}

__n128 ConnectionAssistantCone.pulse.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  __n128 result;
  __int128 v4;

  v2 = *(_BYTE *)(v1 + 112);
  result = *(__n128 *)(v1 + 80);
  v4 = *(_OWORD *)(v1 + 96);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 32) = v2;
  return result;
}

uint64_t ConnectionAssistantCone.pulse.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10000B458(a1, v1 + 80, &qword_100326260);
}

__n128 ConnectionAssistantCone.Projection.ellipse.getter@<Q0>(__n128 *a1@<X8>)
{
  __n128 *v1;
  __n128 result;
  unint64_t v3;
  unint64_t v4;
  unsigned __int32 v5;

  result = *v1;
  v3 = v1[1].n128_u64[0];
  v4 = v1[1].n128_u64[1];
  v5 = v1[2].n128_u32[0];
  *a1 = *v1;
  a1[1].n128_u64[0] = v3;
  a1[1].n128_u64[1] = v4;
  a1[2].n128_u32[0] = v5;
  return result;
}

uint64_t ConnectionAssistantCone.Projection.triangle.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 40);
}

__n128 ConnectionAssistantCone.Projection.pulse.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  int v2;
  char v3;
  __n128 result;
  __int128 v5;

  v2 = *(_DWORD *)(v1 + 104);
  v3 = *(_BYTE *)(v1 + 108);
  result = *(__n128 *)(v1 + 72);
  v5 = *(_OWORD *)(v1 + 88);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 32) = v2;
  *(_BYTE *)(a1 + 36) = v3;
  return result;
}

uint64_t sub_1001B83A0(uint64_t *a1, float32x4_t a2)
{
  unint64_t v3;
  char v4;
  float32x2_t v5;
  uint64_t v6;
  float v8;
  float v9;
  char v10;
  float32x2_t v12;

  v3 = ConnectionAssistantCamera.projectNormalized(point:)(a2);
  if ((v4 & 1) != 0)
    return 0;
  v5.i32[0] = v3;
  v6 = a1[1];
  if (!*a1 || v6 == 0)
  {
    v9 = 1.0;
  }
  else
  {
    v8 = (float)*a1 / (float)v6;
    v5.f32[0] = fmaxf(v8, 1.0) * *(float *)&v3;
    v9 = fminf(v8, 1.0);
  }
  v5.f32[1] = *((float *)&v3 + 1) / v9;
  v12 = v5;
  ConnectionAssistantRendererProjection.Ellipse.tangents(from:)(v5);
  if ((v10 & 1) != 0)
    return 0;
  else
    return (uint64_t)v12;
}

void sub_1001B845C(float32x2_t *a1@<X0>, uint64_t a2@<X1>, int32x4_t *a3@<X2>, uint64_t a4@<X8>, __n128 a5@<Q0>, __n128 a6@<Q1>)
{
  int v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __n128 v14;
  _OWORD v17[2];
  int v18;
  char v19;
  _BYTE v20[48];
  float v21[8];
  char v22;

  sub_10000B458((uint64_t)&a1[10], (uint64_t)v20, &qword_100326260);
  sub_10000B458((uint64_t)v20, (uint64_t)v21, &qword_100326260);
  if ((v22 & 1) != 0)
  {
    v10 = 0;
    v11 = 0uLL;
    v12 = 1;
    v13 = 0uLL;
  }
  else
  {
    v14.n128_u64[0] = (unint64_t)vadd_f32((float32x2_t)a5.n128_u64[0], vmul_n_f32(a1[2], v21[0]));
    v14.n128_f32[2] = a5.n128_f32[2] + (float)(v21[0] * a1[3].f32[0]);
    v14.n128_u32[3] = 0;
    sub_10022AC4C(a3, (float32x2_t *)v17, v14, a6, v21[0] * *(float *)(a2 + 32));
    v11 = v17[0];
    v13 = v17[1];
    v10 = v18;
    v12 = v19;
  }
  *(_OWORD *)a4 = v11;
  *(_OWORD *)(a4 + 16) = v13;
  *(_DWORD *)(a4 + 32) = v10;
  *(_BYTE *)(a4 + 36) = v12;
}

BOOL sub_1001B8544(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[7];
  char v13;
  _OWORD v14[7];
  char v15;

  v2 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  v12[5] = v2;
  v12[6] = *(_OWORD *)(a1 + 96);
  v13 = *(_BYTE *)(a1 + 112);
  v3 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v4;
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[3];
  v14[2] = a2[2];
  v14[3] = v7;
  v14[0] = v5;
  v14[1] = v6;
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v15 = *((_BYTE *)a2 + 112);
  v14[5] = v9;
  v14[6] = v10;
  v14[4] = v8;
  return _s8SOSBuddy23ConnectionAssistantConeV23__derived_struct_equalsySbAC_ACtFZ_0((float *)v12, (float *)v14);
}

BOOL _s8SOSBuddy23ConnectionAssistantConeV5PulseV23__derived_struct_equalsySbAE_AEtFZ_0(float a1, __n128 a2, float a3, __n128 a4)
{
  uint64_t v4;
  BOOL v5;
  float v6;
  float v7;
  __n128 v9;
  __n128 v10;

  if (a1 != a3)
    return 0;
  v4 = 0;
  while (1)
  {
    v9 = a2;
    v6 = *(float *)((unint64_t)&v9 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
    v10 = a4;
    v7 = *(float *)((unint64_t)&v10 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
    v5 = v6 == v7;
    if (v4 == 3)
      break;
    while (1)
    {
      ++v4;
      if (v5)
        break;
      if (v4 == 3)
        return 0;
      v5 = 0;
    }
  }
  return v6 == v7;
}

BOOL _s8SOSBuddy23ConnectionAssistantConeV23__derived_struct_equalsySbAC_ACtFZ_0(float *a1, float *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  BOOL v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  BOOL v12;
  float v13;
  float v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  BOOL v18;
  float v19;
  float v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  BOOL v24;
  float v26;
  float v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  v2 = 0;
  v3 = *(_OWORD *)a1;
  v4 = *(_OWORD *)a2;
  while (1)
  {
    v34 = v3;
    v7 = *(float *)((unint64_t)&v34 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v35 = v4;
    v8 = *(float *)((unint64_t)&v35 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v5 = v7 == v8;
    if (v2 == 2)
      break;
    while (1)
    {
      ++v2;
      if (v5)
        break;
      v5 = 0;
      v6 = 0;
      if (v2 == 2)
        return v6;
    }
  }
  if (v7 != v8)
    return 0;
  v9 = 0;
  v10 = *((_OWORD *)a1 + 1);
  v11 = *((_OWORD *)a2 + 1);
  while (1)
  {
    v32 = v10;
    v13 = *(float *)((unint64_t)&v32 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    v33 = v11;
    v14 = *(float *)((unint64_t)&v33 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    v12 = v13 == v14;
    if (v9 == 2)
      break;
    while (1)
    {
      ++v9;
      if (v12)
        break;
      v12 = 0;
      v6 = 0;
      if (v9 == 2)
        return v6;
    }
  }
  if (v13 != v14 || a1[8] != a2[8])
    return 0;
  v15 = 0;
  v16 = *((_OWORD *)a1 + 3);
  v17 = *((_OWORD *)a2 + 3);
  while (1)
  {
    v30 = v16;
    v19 = *(float *)((unint64_t)&v30 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    v31 = v17;
    v20 = *(float *)((unint64_t)&v31 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3)));
    v18 = v19 == v20;
    if (v15 == 3)
      break;
    while (1)
    {
      ++v15;
      if (v18)
        break;
      v18 = 0;
      v6 = 0;
      if (v15 == 3)
        return v6;
    }
  }
  if (v19 != v20 || a1[16] != a2[16])
    return 0;
  if (((_BYTE)a1[28] & 1) == 0)
  {
    if (((_BYTE)a2[28] & 1) == 0 && a1[20] == COERCE_FLOAT(*((_QWORD *)a2 + 10)))
    {
      v21 = 0;
      v22 = *((_OWORD *)a1 + 6);
      v23 = *((_OWORD *)a2 + 6);
      while (1)
      {
        v28 = v22;
        v26 = *(float *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
        v29 = v23;
        v27 = *(float *)((unint64_t)&v29 & 0xFFFFFFFFFFFFFFF3 | (4 * (v21 & 3)));
        v24 = v26 == v27;
        if (v21 == 3)
          break;
        while (1)
        {
          ++v21;
          if (v24)
            break;
          if (v21 == 3)
            return 0;
          v24 = 0;
        }
      }
      if (v26 == v27)
        return 1;
    }
    return 0;
  }
  return ((_BYTE)a2[28] & 1) != 0;
}

double sub_1001B8880(int32x4_t a1, float a2, int32x4_t a3)
{
  float32x4_t v3;
  float32x4_t v4;
  float32x4_t v5;
  __float2 v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x4_t v9;
  int32x4_t v10;
  float32x2_t v11;
  float32x2_t v12;
  double result;
  int8x16_t v14;
  int32x4_t v15;

  *(float *)a3.i32 = -*(float *)&a1.i32[2];
  *(uint64_t *)((char *)a3.i64 + 4) = a1.i64[0];
  v3 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a1, a1), (int8x16_t)a1, 0xCuLL);
  v4 = vnegq_f32((float32x4_t)a1);
  v15 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a3, a3), (int8x16_t)a3, 0xCuLL), v4), (float32x4_t)a3, v3);
  v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v15, v15), (int8x16_t)v15, 0xCuLL);
  v14 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL), v4), v5, v3);
  v6 = __sincosf_stret(a2);
  v7.i32[0] = vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL).u32[0];
  v7.i32[1] = v15.i32[0];
  v8.i32[0] = vextq_s8(v14, v14, 8uLL).u32[0];
  v8.i32[1] = v14.i32[0];
  *(float32x2_t *)v9.f32 = vadd_f32(vmul_n_f32(v7, v6.__sinval), vmul_n_f32(v8, v6.__cosval));
  v9.f32[2] = vmuls_lane_f32(v6.__sinval, *(float32x2_t *)v15.i8, 1)
            + vmuls_lane_f32(v6.__cosval, *(float32x2_t *)v14.i8, 1);
  v10 = (int32x4_t)vmulq_f32(v9, v9);
  v10.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v10, 2), vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v10.i8, 1))).u32[0];
  v11 = vrsqrte_f32((float32x2_t)v10.u32[0]);
  v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v11, v11)));
  *(_QWORD *)&result = vmulq_n_f32(v9, vmul_f32(v12, vrsqrts_f32((float32x2_t)v10.u32[0], vmul_f32(v12, v12))).f32[0]).u64[0];
  return result;
}

id sub_1001B8954@<X0>(void *a1@<X0>, uint64_t a2@<X8>, float32x4_t a3@<Q0>, float a4@<S1>, int32x4_t a5@<Q2>, float a6@<S3>, float a7@<S4>)
{
  float v9;
  int32x4_t v11;
  unsigned __int32 v13;
  float32x2_t v14;
  float32x2_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  int32x4_t v20;
  int8x16_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  id result;
  float64x2_t v29;
  float64x2_t v30;
  float32x4_t v31;
  float32x4_t v34;
  float32x4_t v35;
  float64_t v36;
  float64_t v37;
  float64_t v38;
  float64_t v39;

  v9 = *(float *)a5.i32;
  v11 = (int32x4_t)vmulq_f32(a3, a3);
  v13 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2), vadd_f32(*(float32x2_t *)v11.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1))).u32[0];
  v14 = vrsqrte_f32((float32x2_t)v13);
  v15 = vmul_f32(v14, vrsqrts_f32((float32x2_t)v13, vmul_f32(v14, v14)));
  *(float32x2_t *)a5.i8 = vmul_f32(v15, v15);
  v34 = vmulq_n_f32(a3, vmul_f32(v15, vrsqrts_f32((float32x2_t)v13, *(float32x2_t *)a5.i8)).f32[0]);
  *(double *)v16.i64 = sub_1001B8880((int32x4_t)v34, a6, a5);
  *(double *)v17.i64 = sub_1001B8D20(v34, v16);
  sub_1001B905C(v17, v9);
  v19 = vmulq_f32(v18, (float32x4_t)xmmword_100252120);
  v20 = (int32x4_t)vnegq_f32(v19);
  v21 = (int8x16_t)vtrn2q_s32((int32x4_t)v19, vtrn1q_s32((int32x4_t)v19, v20));
  v22 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v19, (int8x16_t)v20, 8uLL), *(float32x2_t *)v34.f32, 1), (float32x4_t)vextq_s8(v21, v21, 8uLL), v34.f32[0]);
  v23 = (float32x4_t)vrev64q_s32((int32x4_t)v19);
  v23.i32[0] = v20.i32[1];
  v23.i32[3] = v20.i32[2];
  v24 = vmlaq_laneq_f32(v22, v23, v34, 2);
  v25 = (int32x4_t)vnegq_f32(v24);
  v26 = (int8x16_t)vtrn2q_s32((int32x4_t)v24, vtrn1q_s32((int32x4_t)v24, v25));
  v27 = (float32x4_t)vrev64q_s32((int32x4_t)v24);
  v27.i32[0] = v25.i32[1];
  v27.i32[3] = v25.i32[2];
  v35 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v24, v18, 3), v27, v18, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v25, 8uLL), *(float32x2_t *)v18.f32, 1), (float32x4_t)vextq_s8(v26, v26, 8uLL), v18.f32[0]));
  v39 = 0.0;
  v37 = 0.0;
  v38 = 0.0;
  v36 = 0.0;
  result = objc_msgSend(a1, "getRed:green:blue:alpha:", &v39, &v38, &v37, &v36);
  v29.f64[0] = v39;
  v30.f64[0] = v37;
  v29.f64[1] = v38;
  v30.f64[1] = v36;
  v31 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v29), v30);
  *(float32x2_t *)&v30.f64[0] = vmul_n_f32(*(float32x2_t *)v35.f32, a4);
  *(_QWORD *)&v30.f64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(a4, v35, 2));
  *(float32x4_t *)a2 = a3;
  *(float64x2_t *)(a2 + 16) = v30;
  *(float *)(a2 + 32) = a7;
  *(float32x4_t *)(a2 + 48) = v31;
  *(_DWORD *)(a2 + 64) = 1065353216;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_BYTE *)(a2 + 112) = 1;
  return result;
}

float sub_1001B8B20(void *a1, float a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v6 = 0;
  v7 = 0;
  v4 = 0;
  v5 = 0;
  objc_msgSend(a1, "getRed:green:blue:alpha:", &v7, &v6, &v5, &v4);
  return a2;
}

__n128 initializeWithCopy for ConnectionAssistantCone(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_BYTE *)(a1 + 112) = *((_BYTE *)a2 + 112);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantCone(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 113))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantCone(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 112) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 113) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantCone()
{
  return &type metadata for ConnectionAssistantCone;
}

ValueMetadata *type metadata accessor for ConnectionAssistantCone.Pulse()
{
  return &type metadata for ConnectionAssistantCone.Pulse;
}

__n128 initializeWithCopy for ConnectionAssistantCone.Projection(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 93) = *(__int128 *)((char *)a2 + 93);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantCone.Projection(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 109))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantCone.Projection(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 108) = 0;
    *(_DWORD *)(result + 104) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 109) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantCone.Projection()
{
  return &type metadata for ConnectionAssistantCone.Projection;
}

double sub_1001B8D20(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2;
  int32x4_t v3;
  float32x2_t v4;
  float32x2_t v5;
  int32x4_t v6;
  float32x2_t v7;
  float32x2_t v8;
  float32x4_t v9;
  float32x4_t v10;
  float v11;
  float v12;
  float32x2_t v13;
  float32x2_t v14;
  float32x4_t v15;
  float32x4_t v16;
  int32x4_t v17;
  float32x2_t v18;
  float32x2_t v19;
  float32x4_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  int32x4_t v24;
  float32x4_t v25;
  int32x4_t v26;
  float32x4_t v27;
  float32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  unint64_t v32;
  float32x4_t v33;
  int32x4_t v34;
  float32x2_t v35;
  float32x2_t v36;
  float32x4_t v37;
  int32x4_t v38;
  float32x4_t v39;
  float v40;
  float v41;
  float32x4_t v42;
  float32x4_t v43;
  float32x4_t v44;
  float32x4_t v45;
  float32x4_t v46;
  int32x4_t v47;
  float32x2_t v48;
  float32x2_t v49;

  v2 = vmulq_f32(a1, a2);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).f32[0] >= 0.0)
  {
    v33 = vaddq_f32(a1, a2);
    v34 = (int32x4_t)vmulq_f32(v33, v33);
    v34.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v34, 2), vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1))).u32[0];
    v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
    v36 = vmul_f32(v35, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)));
    v37 = vmulq_n_f32(v33, vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36))).f32[0]);
    v38 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL), vnegq_f32(a1)), v37, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL));
    v32 = vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL).u64[0];
  }
  else
  {
    v3 = (int32x4_t)vmulq_f32(a1, a1);
    v3.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
    v4 = vrsqrte_f32((float32x2_t)v3.u32[0]);
    v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
    v3.i32[0] = vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).u32[0];
    v6 = (int32x4_t)vmulq_f32(a2, a2);
    v6.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v6, 2), vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1))).u32[0];
    v7 = vrsqrte_f32((float32x2_t)v6.u32[0]);
    v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v7, v7)));
    v9 = vaddq_f32(vmulq_n_f32(a1, *(float *)v3.i32), vmulq_n_f32(a2, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v8, v8))).f32[0]));
    v10 = vmulq_f32(v9, v9);
    v11 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0];
    if (v11 <= 1.4211e-14)
    {
      v39 = vabsq_f32(a1);
      v40 = v39.f32[1];
      v41 = v39.f32[2];
      if (v39.f32[0] > v39.f32[1] || v39.f32[0] > v39.f32[2])
      {
        v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL);
        if (v40 <= v41)
        {
          v43 = vmulq_f32(a1, (float32x4_t)xmmword_100252100);
          v44 = (float32x4_t)xmmword_100252110;
        }
        else
        {
          v43 = vmulq_f32(a1, (float32x4_t)xmmword_10025C530);
          v44 = (float32x4_t)xmmword_100254AF0;
        }
      }
      else
      {
        v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL);
        v43 = vmulq_f32(a1, (float32x4_t)xmmword_10025C520);
        v44 = (float32x4_t)xmmword_100254B00;
      }
      v45 = vmlaq_f32(v43, v44, v42);
      v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL);
      v47 = (int32x4_t)vmulq_f32(v45, v45);
      v47.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v47, 2), *(float32x2_t *)v47.i8)).u32[0];
      v48 = vrsqrte_f32((float32x2_t)v47.u32[0]);
      v49 = vmul_f32(v48, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v48, v48)));
      v32 = vmulq_n_f32(v46, vmul_f32(v49, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v49, v49))).f32[0]).u64[0];
    }
    else
    {
      v12 = v11;
      v13 = vrsqrte_f32((float32x2_t)LODWORD(v11));
      v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v13, v13)));
      v15 = vmulq_n_f32(v9, vmul_f32(v14, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v14, v14))).f32[0]);
      v16 = vaddq_f32(a1, v15);
      v17 = (int32x4_t)vmulq_f32(v16, v16);
      v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1))).u32[0];
      v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
      v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)));
      v20 = vmulq_n_f32(v16, vmul_f32(v19, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v19, v19))).f32[0]);
      v21 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), vnegq_f32(a1)), v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL));
      v22 = vmulq_f32(v20, a1);
      v23 = vaddq_f32(a2, v15);
      v24 = (int32x4_t)vmulq_f32(v23, v23);
      v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2), vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1))).u32[0];
      *(float32x2_t *)v20.f32 = vrsqrte_f32((float32x2_t)v24.u32[0]);
      *(float32x2_t *)v20.f32 = vmul_f32(*(float32x2_t *)v20.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32)));
      v25 = vmulq_n_f32(v23, vmul_f32(*(float32x2_t *)v20.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32))).f32[0]);
      v26 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL), vnegq_f32(v15)), v25, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL));
      v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v26, v26), (int8x16_t)v26, 0xCuLL);
      v28 = vmulq_f32(v15, v25);
      v27.i32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).u32[0];
      v29 = (int32x4_t)vnegq_f32(v27);
      v30 = (int8x16_t)vtrn2q_s32((int32x4_t)v27, vtrn1q_s32((int32x4_t)v27, v29));
      v31 = (float32x4_t)vrev64q_s32((int32x4_t)v27);
      v31.i32[0] = v29.i32[1];
      v31.i32[3] = v29.i32[2];
      v32 = vaddq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]), v31, *(float32x2_t *)v21.f32, 1), vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v29, 8uLL), v21.f32[0]), (float32x4_t)vextq_s8(v30, v30, 8uLL), v21, 2)).u64[0];
    }
  }
  return *(double *)&v32;
}

void sub_1001B905C(float32x4_t a1, float a2)
{
  float32x4_t v2;
  float32x4_t v3;

  v2 = vmulq_f32(a1, (float32x4_t)xmmword_100252130);
  v3 = (float32x4_t)vextq_s8((int8x16_t)v2, (int8x16_t)v2, 8uLL);
  *(float32x2_t *)v2.f32 = vadd_f32(*(float32x2_t *)v2.f32, *(float32x2_t *)v3.f32);
  v2.f32[0] = vaddv_f32(*(float32x2_t *)v2.f32);
  v3.i32[0] = 0;
  sub_1001B9090((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v2, v3)), 0), (int8x16_t)vnegq_f32(a1), (int8x16_t)a1), a2);
}

void sub_1001B9090(float32x4_t a1, float a2)
{
  float v4;
  float32x4_t v5;
  int8x16_t v6;
  float32x4_t v7;
  int8x16_t v8;
  float v9;
  float v10;
  float v11;

  v4 = 1.0 - a2;
  v5 = vsubq_f32((float32x4_t)xmmword_100252130, a1);
  v6 = (int8x16_t)vmulq_f32(v5, v5);
  v7 = vaddq_f32(a1, (float32x4_t)xmmword_100252130);
  v8 = (int8x16_t)vmulq_f32(v7, v7);
  v9 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v8, v8, 8uLL)))));
  v10 = v9 + v9;
  if ((float)(v9 + v9) != 0.0)
    sinf(v10);
  if ((float)(v4 * v10) != 0.0)
    sinf(v4 * v10);
  v11 = v10 * a2;
  if (v11 != 0.0)
    sinf(v11);
}

uint64_t sub_1001B91F4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v30[5];
  _OWORD v31[2];
  uint64_t v32;

  v10 = sub_100003DB8(&qword_10031B208);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v30[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for AppEvents();
  v15 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  *(_QWORD *)a5 = EnvironmentObject.init()(v14, v15);
  *(_QWORD *)(a5 + 8) = v16;
  v17 = type metadata accessor for UIMetrics();
  v18 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  *(_QWORD *)(a5 + 16) = EnvironmentObject.init()(v17, v18);
  *(_QWORD *)(a5 + 24) = v19;
  *(_QWORD *)(a5 + 32) = a1;
  *(_QWORD *)(a5 + 40) = a2;
  *(_QWORD *)(a5 + 48) = a3;
  *(_QWORD *)(a5 + 56) = a4;
  LOBYTE(v30[0]) = 0;
  State.init(wrappedValue:)(v31, v30, &type metadata for Bool);
  v20 = *((_QWORD *)&v31[0] + 1);
  *(_BYTE *)(a5 + 64) = v31[0];
  *(_QWORD *)(a5 + 72) = v20;
  LOBYTE(v30[0]) = 0;
  State.init(wrappedValue:)(v31, v30, &type metadata for Bool);
  v21 = *((_QWORD *)&v31[0] + 1);
  *(_BYTE *)(a5 + 80) = v31[0];
  *(_QWORD *)(a5 + 88) = v21;
  sub_1000DDD64();
  v22 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v23 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v13, 1, 1, v23);
  v24 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v22, NSRunLoopCommonModes, v13, 1000000.0);

  sub_100007FF0((uint64_t)v13, &qword_10031B208);
  v30[0] = v24;
  v25 = type metadata accessor for NSTimer.TimerPublisher(0);
  State.init(wrappedValue:)(v31, v30, v25);
  v26 = *((_QWORD *)&v31[0] + 1);
  *(_QWORD *)(a5 + 96) = *(_QWORD *)&v31[0];
  *(_QWORD *)(a5 + 104) = v26;
  v32 = 0;
  memset(v31, 0, sizeof(v31));
  sub_1000DDDA0((uint64_t)v31, (uint64_t)v30);
  v27 = sub_100003DB8(&qword_10031EDA0);
  State.init(wrappedValue:)((_QWORD *)(a5 + 112), v30, v27);
  return sub_100007FF0((uint64_t)v31, &qword_10031EDA0);
}

uint64_t destroy for BuiltInRoadsideForkFailedContentView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[5]);
  swift_release(a1[7]);
  swift_release(a1[9]);
  swift_release(a1[11]);
  swift_release(a1[12]);
  swift_release(a1[13]);
  if (a1[17])
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1 + 14);
  return swift_release(a1[19]);
}

uint64_t initializeWithCopy for BuiltInRoadsideForkFailedContentView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v20;
  uint64_t *v21;
  _OWORD *v22;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  v7 = a2[2];
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  v8 = a2[4];
  *(_QWORD *)(a1 + 32) = v8;
  v9 = a2[7];
  v20 = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v9;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  v10 = a2[9];
  *(_QWORD *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  v12 = a2[11];
  v11 = a2[12];
  *(_QWORD *)(a1 + 88) = v12;
  *(_QWORD *)(a1 + 96) = v11;
  v13 = a2[13];
  *(_QWORD *)(a1 + 104) = v13;
  v21 = a2 + 14;
  v22 = (_OWORD *)(a1 + 112);
  v14 = a2[17];
  swift_retain(v4);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v20);
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v12);
  swift_retain(v11);
  v15 = swift_retain(v13);
  if (v14)
  {
    v16 = a2[18];
    *(_QWORD *)(a1 + 136) = v14;
    *(_QWORD *)(a1 + 144) = v16;
    (**(void (***)(_OWORD *, uint64_t, uint64_t, __n128))(v14 - 8))(v22, (uint64_t)v21, v14, v15);
  }
  else
  {
    v17 = *((_OWORD *)v21 + 1);
    *v22 = *(_OWORD *)v21;
    *(_OWORD *)(a1 + 128) = v17;
    *(_QWORD *)(a1 + 144) = v21[4];
  }
  v18 = a2[19];
  *(_QWORD *)(a1 + 152) = v18;
  swift_retain(v18);
  return a1;
}

uint64_t *assignWithCopy for BuiltInRoadsideForkFailedContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[7];
  v13 = a1[7];
  a1[6] = a2[6];
  a1[7] = v12;
  swift_retain(v12);
  swift_release(v13);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  v14 = a1[9];
  v15 = a2[9];
  a1[9] = v15;
  swift_retain(v15);
  swift_release(v14);
  *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
  v16 = a1[11];
  v17 = a2[11];
  a1[11] = v17;
  swift_retain(v17);
  swift_release(v16);
  v18 = a2[12];
  v19 = a1[12];
  a1[12] = v18;
  swift_retain(v18);
  swift_release(v19);
  v20 = a1[13];
  v21 = a2[13];
  a1[13] = v21;
  swift_retain(v21);
  swift_release(v20);
  v22 = a2[17];
  if (!a1[17])
  {
    if (v22)
    {
      a1[17] = v22;
      a1[18] = a2[18];
      (**(void (***)(uint64_t, uint64_t))(v22 - 8))((uint64_t)(a1 + 14), (uint64_t)(a2 + 14));
      goto LABEL_8;
    }
LABEL_7:
    v23 = *((_OWORD *)a2 + 7);
    v24 = *((_OWORD *)a2 + 8);
    a1[18] = a2[18];
    *((_OWORD *)a1 + 7) = v23;
    *((_OWORD *)a1 + 8) = v24;
    goto LABEL_8;
  }
  if (!v22)
  {
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1 + 14);
    goto LABEL_7;
  }
  sub_1000B8938(a1 + 14, a2 + 14);
LABEL_8:
  v25 = a1[19];
  v26 = a2[19];
  a1[19] = v26;
  swift_retain(v26);
  swift_release(v25);
  return a1;
}

__n128 initializeWithTake for BuiltInRoadsideForkFailedContentView(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;
  __int128 v7;
  __int128 v8;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  result = *(__n128 *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 112);
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t *assignWithTake for BuiltInRoadsideForkFailedContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = a2[4];
  v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_release(v8);
  v9 = a1[5];
  a1[5] = a2[5];
  swift_release(v9);
  v10 = a1[7];
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  swift_release(v10);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  v11 = a1[9];
  a1[9] = a2[9];
  swift_release(v11);
  *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
  v12 = a1[11];
  a1[11] = a2[11];
  swift_release(v12);
  v13 = a1[12];
  a1[12] = a2[12];
  swift_release(v13);
  v14 = a1[13];
  a1[13] = a2[13];
  swift_release(v14);
  if (a1[17])
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1 + 14);
  v15 = *((_OWORD *)a2 + 8);
  *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
  *((_OWORD *)a1 + 8) = v15;
  v16 = a2[19];
  a1[18] = a2[18];
  v17 = a1[19];
  a1[19] = v16;
  swift_release(v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for BuiltInRoadsideForkFailedContentView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 160))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltInRoadsideForkFailedContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 160) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 160) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BuiltInRoadsideForkFailedContentView()
{
  return &type metadata for BuiltInRoadsideForkFailedContentView;
}

uint64_t sub_1001B9988(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029E830, 1);
}

__n128 sub_1001B9998@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _OWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  char v24;
  __n128 result;
  __n128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _BYTE v33[48];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v3 = v2;
  v5 = static HorizontalAlignment.center.getter(a1);
  sub_1001B9B50((uint64_t)v2, (uint64_t)&v30);
  v28 = v31;
  v29 = v30;
  v6 = v32;
  v7 = v33[0];
  v8 = *(_QWORD *)&v33[40];
  v26 = *(__n128 *)&v33[24];
  v27 = *(_OWORD *)&v33[8];
  v9 = v2[13];
  *(_QWORD *)&v30 = v2[12];
  *((_QWORD *)&v30 + 1) = v9;
  v10 = sub_100003DB8(&qword_10031EDA8);
  State.wrappedValue.getter(&v38, v10);
  v11 = v38;
  sub_1000310E8(v2, (uint64_t)&v30);
  v12 = (_OWORD *)swift_allocObject(&unk_1002F7488, 176, 7);
  v13 = v35;
  v12[7] = v34;
  v12[8] = v13;
  v14 = v37;
  v12[9] = v36;
  v12[10] = v14;
  v15 = *(_OWORD *)v33;
  v12[3] = v32;
  v12[4] = v15;
  v16 = *(_OWORD *)&v33[32];
  v12[5] = *(_OWORD *)&v33[16];
  v12[6] = v16;
  v17 = v31;
  v12[1] = v30;
  v12[2] = v17;
  LOBYTE(v38) = 1;
  sub_1000310E8(v3, (uint64_t)&v30);
  v18 = (_OWORD *)swift_allocObject(&unk_1002F74B0, 176, 7);
  v19 = v35;
  v18[7] = v34;
  v18[8] = v19;
  v20 = v37;
  v18[9] = v36;
  v18[10] = v20;
  v21 = *(_OWORD *)v33;
  v18[3] = v32;
  v18[4] = v21;
  v22 = *(_OWORD *)&v33[32];
  v18[5] = *(_OWORD *)&v33[16];
  v18[6] = v22;
  v23 = v31;
  v18[1] = v30;
  v18[2] = v23;
  v24 = v38;
  *(_QWORD *)a2 = v5;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = v24;
  *(_OWORD *)(a2 + 24) = v29;
  *(_OWORD *)(a2 + 40) = v28;
  *(_OWORD *)(a2 + 56) = v6;
  *(_BYTE *)(a2 + 72) = v7;
  result = v26;
  *(_OWORD *)(a2 + 80) = v27;
  *(__n128 *)(a2 + 96) = v26;
  *(_QWORD *)(a2 + 112) = v8;
  *(_QWORD *)(a2 + 120) = v11;
  *(_QWORD *)(a2 + 128) = sub_1001BA854;
  *(_QWORD *)(a2 + 136) = v12;
  *(_QWORD *)(a2 + 144) = 0;
  *(_QWORD *)(a2 + 152) = 0;
  *(_QWORD *)(a2 + 160) = sub_1001BA860;
  *(_QWORD *)(a2 + 168) = v18;
  return result;
}

uint64_t sub_1001B9B50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v4;
  Swift::String_optional v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t KeyPath;
  uint64_t result;
  _QWORD v28[2];
  char v29;
  _OWORD v30[5];
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  Swift::String v36;

  v4 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v36._countAndFlagsBits = 0xD00000000000005CLL;
  v36._object = (void *)0x800000010026E590;
  v5.value._object = (void *)0x80000001002621B0;
  v6._countAndFlagsBits = 0x6961674120797254;
  v6._object = (void *)0xE90000000000006ELL;
  v5.value._countAndFlagsBits = 0xD000000000000012;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v8 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v5, (NSBundle)v4, v7, v36);

  v9 = *(_QWORD *)(a1 + 72);
  LOBYTE(v30[0]) = *(_BYTE *)(a1 + 64);
  *((_QWORD *)&v30[0] + 1) = v9;
  v10 = sub_100003DB8(&qword_100316780);
  State.wrappedValue.getter(v28, v10);
  LODWORD(v4) = LOBYTE(v28[0]);
  sub_1000310E8((uint64_t *)a1, (uint64_t)v30);
  if ((_DWORD)v4 == 1)
  {
    sub_100031124(v30);
    v11 = 1;
  }
  else
  {
    LOBYTE(v28[0]) = v31;
    v28[1] = *((_QWORD *)&v31 + 1);
    State.wrappedValue.getter(&v29, v10);
    sub_100031124(v30);
    v11 = v29;
  }
  sub_1000310E8((uint64_t *)a1, (uint64_t)v30);
  v12 = (_OWORD *)swift_allocObject(&unk_1002F74D8, 176, 7);
  v13 = v33;
  v14 = v34;
  v12[7] = v32;
  v12[8] = v13;
  v15 = v35;
  v12[9] = v14;
  v12[10] = v15;
  v16 = v30[3];
  v12[3] = v30[2];
  v12[4] = v16;
  v17 = v31;
  v12[5] = v30[4];
  v12[6] = v17;
  v18 = v30[1];
  v12[1] = v30[0];
  v12[2] = v18;
  v19 = type metadata accessor for UIMetrics();
  v20 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v21 = EnvironmentObject.init()(v19, v20);
  v23 = v22;
  v24 = *(_QWORD *)(a1 + 72);
  LOBYTE(v30[0]) = *(_BYTE *)(a1 + 64);
  *((_QWORD *)&v30[0] + 1) = v24;
  State.wrappedValue.getter(v28, v10);
  v25 = v28[0];
  KeyPath = swift_getKeyPath(&unk_10025C648);
  result = swift_allocObject(&unk_1002F7500, 17, 7);
  *(_BYTE *)(result + 16) = v25;
  *(_QWORD *)a2 = v21;
  *(_QWORD *)(a2 + 8) = v23;
  *(Swift::String *)(a2 + 16) = v8;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0xE000000000000000;
  *(_BYTE *)(a2 + 48) = v11;
  *(_QWORD *)(a2 + 56) = sub_1001BA884;
  *(_QWORD *)(a2 + 64) = v12;
  *(_QWORD *)(a2 + 72) = KeyPath;
  *(_QWORD *)(a2 + 80) = sub_10006E0A8;
  *(_QWORD *)(a2 + 88) = result;
  return result;
}

_QWORD *sub_1001B9DC0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v18[10];
  _QWORD v19[2];
  _QWORD v20[10];
  char v21;
  uint64_t v22;

  v1 = v0;
  if (!*(_QWORD *)v0)
    goto LABEL_8;
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 104);
  v20[0] = *(_QWORD *)(v1 + 32);
  v3 = v20[0];
  swift_retain(v2);
  swift_retain(v20[0]);
  PassthroughSubject.send(_:)(v20);
  swift_release(v3);
  swift_release(v2);
  v4 = *(_QWORD *)(v1 + 72);
  LOBYTE(v20[0]) = *(_BYTE *)(v1 + 64);
  v20[1] = v4;
  v5 = sub_100003DB8(&qword_100316780);
  State.wrappedValue.getter(v18, v5);
  LOBYTE(v2) = v18[0];
  sub_1000310E8((uint64_t *)v1, (uint64_t)v20);
  if ((v2 & 1) != 0)
    return sub_100031124(v20);
  LOBYTE(v18[0]) = v21;
  *((_QWORD *)&v18[0] + 1) = v22;
  State.wrappedValue.getter(v19, v5);
  result = sub_100031124(v20);
  if ((v19[0] & 1) == 0)
  {
    v7 = *(_QWORD *)(v1 + 72);
    LOBYTE(v18[0]) = *(_BYTE *)(v1 + 64);
    *((_QWORD *)&v18[0] + 1) = v7;
    LOBYTE(v19[0]) = 1;
    State.wrappedValue.setter(v19, v5);
    if (*(_QWORD *)v1)
    {
      v8 = *(_QWORD *)(*(_QWORD *)v1 + 112);
      sub_1000310E8((uint64_t *)v1, (uint64_t)v18);
      v9 = (_OWORD *)swift_allocObject(&unk_1002F7528, 176, 7);
      v10 = v18[7];
      v9[7] = v18[6];
      v9[8] = v10;
      v11 = v18[9];
      v9[9] = v18[8];
      v9[10] = v11;
      v12 = v18[3];
      v9[3] = v18[2];
      v9[4] = v12;
      v13 = v18[5];
      v9[5] = v18[4];
      v9[6] = v13;
      v14 = v18[1];
      v9[1] = v18[0];
      v9[2] = v14;
      v19[0] = sub_1001BA93C;
      v19[1] = v9;
      swift_retain(v8);
      PassthroughSubject.send(_:)(v19);
      swift_release(v9);
      swift_release(v8);
      return (_QWORD *)sub_1001BA444();
    }
LABEL_8:
    v15 = *(_QWORD *)(v1 + 8);
    v16 = type metadata accessor for AppEvents();
    v17 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    result = (_QWORD *)EnvironmentObject.error()(0, v15, v16, v17);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001B9F9C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[5];
  uint64_t v18;
  _QWORD v19[4];

  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v3 = type metadata accessor for Logger(0);
  sub_10000D744(v3, (uint64_t)qword_10033FEC8);
  sub_1000310E8(a2, (uint64_t)v19);
  v4 = sub_1000310E8(a2, (uint64_t)v17);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v16 = v8;
    *(_DWORD *)v7 = 136446467;
    v9 = sub_1000AD18C();
    v11 = v10;
    v15 = sub_100172BEC(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v11);
    sub_100031124(v19);
    *(_WORD *)(v7 + 12) = 2081;
    v12 = *(_QWORD *)(v18 + 16);
    v13 = *(_QWORD *)(v18 + 24);
    swift_bridgeObjectRetain(v13);
    v15 = sub_100172BEC(v12, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v13);
    sub_100031124(v17);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] Throttle timer fired for %{private}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }
  else
  {
    sub_100031124(v19);
    sub_100031124(v17);
  }

  return sub_1001BA1A0();
}

uint64_t sub_1001BA1A0()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[3];
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];

  v1 = v0;
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FEC8);
  sub_1000310E8(v0, (uint64_t)v25);
  v3 = sub_1000310E8(v0, (uint64_t)v21);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v20 = v7;
    *(_DWORD *)v6 = 136446467;
    v8 = sub_1000AD18C();
    v10 = v9;
    v19 = sub_100172BEC(v8, v9, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    sub_100031124(v25);
    *(_WORD *)(v6 + 12) = 2081;
    v11 = *(_QWORD *)(v24 + 16);
    v12 = *(_QWORD *)(v24 + 24);
    swift_bridgeObjectRetain(v12);
    v19 = sub_100172BEC(v11, v12, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v6 + 14, v6 + 22);
    swift_bridgeObjectRelease(v12);
    sub_100031124(v21);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%{public}s] _cancelThrottleTimer for %{private}s", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }
  else
  {
    sub_100031124(v25);
    sub_100031124(v21);
  }

  v13 = sub_100003DB8(&qword_10031EDB0);
  State.wrappedValue.getter(v25, v13);
  if (v25[3])
  {
    sub_100007CBC((uint64_t)v25, (uint64_t)v21);
    sub_100007FF0((uint64_t)v25, &qword_10031EDA0);
    v14 = v22;
    v15 = v23;
    sub_100007BBC(v21, v22);
    dispatch thunk of Cancellable.cancel()(v14, v15);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v21);
  }
  else
  {
    sub_100007FF0((uint64_t)v25, &qword_10031EDA0);
  }
  v16 = v1[11];
  LOBYTE(v25[0]) = *((_BYTE *)v1 + 80);
  v25[1] = v16;
  LOBYTE(v21[0]) = 0;
  v17 = sub_100003DB8(&qword_100316780);
  return State.wrappedValue.setter(v21, v17);
}

uint64_t sub_1001BA444()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD v35[3];
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v1 = v0;
  v2 = sub_100003DB8(&qword_10031B208);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v6 = type metadata accessor for Logger(0);
  sub_10000D744(v6, (uint64_t)qword_10033FEC8);
  sub_1000310E8(v0, (uint64_t)&v39);
  v7 = sub_1000310E8(v0, (uint64_t)v35);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v34 = v11;
    *(_DWORD *)v10 = 136446467;
    v32 = v5;
    v12 = sub_1000AD18C();
    v14 = v13;
    v33 = sub_100172BEC(v12, v13, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v14);
    sub_100031124(&v39);
    *(_WORD *)(v10 + 12) = 2081;
    v16 = *(_QWORD *)(v38 + 16);
    v15 = *(_QWORD *)(v38 + 24);
    swift_bridgeObjectRetain(v15);
    v17 = v16;
    v5 = v32;
    v33 = sub_100172BEC(v17, v15, &v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease(v15);
    sub_100031124(v35);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s] _resetThrottleTimer for %{private}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);
  }
  else
  {
    sub_100031124(&v39);
    sub_100031124(v35);
  }

  v18 = sub_100003DB8(&qword_10031EDB0);
  State.wrappedValue.getter(&v39, v18);
  if (v41)
  {
    sub_100007CBC((uint64_t)&v39, (uint64_t)v35);
    sub_100007FF0((uint64_t)&v39, &qword_10031EDA0);
    v19 = v36;
    v20 = v37;
    sub_100007BBC(v35, v36);
    dispatch thunk of Cancellable.cancel()(v19, v20);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v35);
  }
  else
  {
    sub_100007FF0((uint64_t)&v39, &qword_10031EDA0);
  }
  sub_1000DDD64();
  v21 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
  v22 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v5, 1, 1, v22);
  v23 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v21, NSRunLoopCommonModes, v5, 5.0);

  sub_100007FF0((uint64_t)v5, &qword_10031B208);
  v25 = v1[13];
  v39 = v1[12];
  v24 = v39;
  v40 = v25;
  v35[0] = v23;
  v26 = sub_100003DB8(&qword_10031EDA8);
  State.wrappedValue.setter(v35, v26);
  v39 = v24;
  v40 = v25;
  v27 = State.wrappedValue.getter(v35, v26);
  v28 = v35[0];
  NSTimer.TimerPublisher.connect()(&v39, v27);
  swift_release(v28);
  sub_1000DDDA0((uint64_t)&v39, (uint64_t)v35);
  State.wrappedValue.setter(v35, v18);
  sub_100007FF0((uint64_t)&v39, &qword_10031EDA0);
  v29 = v1[11];
  LOBYTE(v39) = *((_BYTE *)v1 + 80);
  v40 = v29;
  LOBYTE(v35[0]) = 1;
  v30 = sub_100003DB8(&qword_100316780);
  return State.wrappedValue.setter(v35, v30);
}

uint64_t sub_1001BA854(uint64_t a1)
{
  uint64_t v1;

  return sub_1001B9F9C(a1, (uint64_t *)(v1 + 16));
}

uint64_t sub_1001BA860()
{
  return sub_1001BA1A0();
}

_QWORD *sub_1001BA884()
{
  return sub_1001B9DC0();
}

uint64_t sub_1001BA8AC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1001BA8C0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  swift_release(v0[11]);
  swift_release(v0[13]);
  swift_release(v0[14]);
  swift_release(v0[15]);
  if (v0[19])
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 16);
  swift_release(v0[21]);
  return swift_deallocObject(v0, 176, 7);
}

uint64_t sub_1001BA93C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[9];
  uint64_t v5;

  v1 = *(_QWORD *)(v0 + 88);
  v4[1] = *(_BYTE *)(v0 + 80);
  v5 = v1;
  v4[0] = 0;
  v2 = sub_100003DB8(&qword_100316780);
  return State.wrappedValue.setter(v4, v2);
}

unint64_t sub_1001BA990()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100326518;
  if (!qword_100326518)
  {
    v1 = sub_100007FAC(&qword_100326520);
    sub_1001BA9FC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100326518);
  }
  return result;
}

unint64_t sub_1001BA9FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100326528;
  if (!qword_100326528)
  {
    v1 = sub_100007FAC((uint64_t *)&unk_100326530);
    result = swift_getWitnessTable(&protocol conformance descriptor for SubscriptionView<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100326528);
  }
  return result;
}

uint64_t sub_1001BAA48(uint64_t a1)
{
  _QWORD v2[14];

  v2[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[5] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[6] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[7] = &unk_10025C718;
  v2[8] = &unk_10025C730;
  v2[9] = &unk_10025C748;
  v2[10] = &unk_10025C760;
  v2[11] = &unk_10025C778;
  v2[12] = &unk_10025C778;
  v2[13] = &unk_10025C778;
  return swift_initClassMetadata2(a1, 0, 14, v2, a1 + 96);
}

uint64_t sub_1001BAACC(uint64_t a1)
{
  void (*v1)(__n128);
  uint64_t v2;
  __n128 v3;

  v1 = *(void (**)(__n128))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

uint64_t sub_1001BAAF8(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  v2 = *(double *)a1 == *(double *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
  if (v2
    && (v3 = *(_QWORD *)(a1 + 56),
        v4 = *(_QWORD *)(a2 + 56),
        v5 = *(unsigned __int8 *)(a2 + 48),
        v6 = *(unsigned __int8 *)(a1 + 48),
        CGRectEqualToRect(*(CGRect *)(a1 + 16), *(CGRect *)(a2 + 16)))
    && ((v5 ^ v6) & 1) == 0)
  {
    return sub_1001BF404(v3, v4);
  }
  else
  {
    return 0;
  }
}

void sub_1001BAB78(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + qword_1003265E0);
  *(_QWORD *)(v1 + qword_1003265E0) = a1;

}

uint64_t sub_1001BAB8C()
{
  uint64_t v0;

  return swift_unknownObjectWeakLoadStrong(v0 + qword_1003265E8);
}

uint64_t sub_1001BAB9C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1001BABD8 + 4 * byte_10025C680[a1]))(0xD000000000000011, 0x800000010026E520);
}

uint64_t sub_1001BABD8()
{
  return 0x697261657070612ELL;
}

uint64_t sub_1001BABF4()
{
  return 0x657261657070612ELL;
}

unint64_t sub_1001BAC10()
{
  return 0xD000000000000010;
}

uint64_t sub_1001BAC2C()
{
  return 0x657070617369642ELL;
}

BOOL sub_1001BAC60(char *a1, char *a2)
{
  return static ConnectionAssistantRendererEarthOutline.Error.__derived_enum_equals(_:_:)(*a1, *a2);
}

Swift::Int sub_1001BAC74()
{
  unsigned __int8 *v0;

  return ConnectionAssistantRendererEarthOutline.Error.hashValue.getter(*v0);
}

void sub_1001BAC80(uint64_t a1)
{
  unsigned __int8 *v1;

  ConnectionAssistantRendererEarthOutline.Error.hash(into:)(a1, *v1);
}

Swift::Int sub_1001BAC8C(uint64_t a1)
{
  unsigned __int8 *v1;
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, a1);
  ConnectionAssistantRendererEarthOutline.Error.hash(into:)((uint64_t)v3, *v1);
  return Hasher._finalize()();
}

uint64_t sub_1001BACD0()
{
  unsigned __int8 *v0;

  return sub_1001BAB9C(*v0);
}

uint64_t sub_1001BACDC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  char v7;
  unsigned int v10;
  Swift::String v11;
  uint64_t v12;
  __n128 v13;
  Swift::String v14;
  void *object;
  Swift::String v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  Swift::String v24;
  void *v25;
  Swift::String v26;
  _QWORD v28[2];
  uint64_t v29;
  unint64_t v30;

  v7 = a3;
  v10 = a3 >> 8;
  v29 = 0;
  v30 = 0xE000000000000000;
  _StringGuts.grow(_:)(52);
  v11._countAndFlagsBits = 0x746E657365727028;
  v11._object = (void *)0xEE00203A656C6261;
  String.append(_:)(v11);
  v28[0] = a1;
  v28[1] = a2;
  swift_unknownObjectRetain(a1);
  v12 = sub_100003DB8(qword_100326818);
  v14._countAndFlagsBits = String.init<A>(describing:)(v28, v12, v13);
  object = v14._object;
  String.append(_:)(v14);
  swift_bridgeObjectRelease(object);
  v16._countAndFlagsBits = 0x3A6567617473202CLL;
  v16._object = (void *)0xE900000000000020;
  String.append(_:)(v16);
  LOBYTE(v28[0]) = v7;
  v18 = type metadata accessor for SessionBannerAgent.Stage(0, a4, a5, v17);
  DefaultStringInterpolation.appendInterpolation<A>(_:)(v28, v18);
  v19._object = (void *)0x800000010026E730;
  v19._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v19);
  LOBYTE(v28[0]) = v10;
  v21 = type metadata accessor for SessionBannerAgent.State(255, a4, a5, v20);
  v22 = type metadata accessor for Optional(0, v21);
  v24._countAndFlagsBits = String.init<A>(describing:)(v28, v22, v23);
  v25 = v24._object;
  String.append(_:)(v24);
  swift_bridgeObjectRelease(v25);
  v26._countAndFlagsBits = 41;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  return v29;
}

uint64_t sub_1001BAE60(uint64_t a1)
{
  uint64_t v1;

  return sub_1001BACDC(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int16 *)(v1 + 16), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

uint64_t sub_1001BAE74()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v30;
  _BYTE v31[24];
  uint64_t v32;

  v1 = *v0;
  v2 = swift_isaMask;
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v3 = type metadata accessor for Logger(0);
  sub_10000D744(v3, (uint64_t)qword_10033FD60);
  v4 = v0;
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = v2 & v1;
    v8 = swift_slowAlloc(22, -1);
    v9 = swift_slowAlloc(64, -1);
    v32 = v9;
    *(_DWORD *)v8 = 136446466;
    v10 = (char *)v4 + qword_1003265F0;
    swift_beginAccess((char *)v4 + qword_1003265F0, v31, 0, 0);
    if (*(_QWORD *)v10)
      v12 = v10[16];
    else
      v12 = 6;
    LOBYTE(v30) = v12;
    v13 = *(_QWORD *)(v7 + 80);
    v14 = *(_QWORD *)(v7 + 88);
    v15 = type metadata accessor for SessionBannerAgent.Stage(255, v13, v14, v11);
    v16 = type metadata accessor for Optional(0, v15);
    v18 = String.init<A>(describing:)(&v30, v16, v17);
    v20 = v19;
    v30 = sub_100172BEC(v18, v19, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v8 + 12) = 2082;
    if (*(_QWORD *)v10)
      v22 = v10[17];
    else
      v22 = 2;
    LOBYTE(v30) = v22;
    v23 = type metadata accessor for SessionBannerAgent.State(255, v13, v14, v21);
    v24 = type metadata accessor for Optional(0, v23);
    v26 = String.init<A>(describing:)(&v30, v24, v25);
    v28 = v27;
    v30 = sub_100172BEC(v26, v27, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v8 + 14, v8 + 22);

    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "_activePresentable changed: stage = %{public}s: pendingStateUpdate = %{public}s", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy(v9, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  return sub_1001BB518();
}

void (*sub_1001BB11C(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess(v1 + qword_1003265F0, a1, 33, 0);
  return sub_1001BB164;
}

void sub_1001BB164(uint64_t a1, char a2)
{
  swift_endAccess(a1);
  if ((a2 & 1) == 0)
    sub_1001BAE74();
}

uint64_t sub_1001BB194()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + qword_1003265F8);
}

uint64_t sub_1001BB1A4()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + qword_100326600);
}

uint64_t sub_1001BB1B4(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + qword_100326600) = result;
  return result;
}

id sub_1001BB1C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  objc_class *v9;
  uint64_t WitnessTable;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  objc_super v20;

  v1 = swift_isaMask & *v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v3 = v0;
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = swift_slowAlloc(22, -1);
    v7 = swift_slowAlloc(64, -1);
    v18 = (uint64_t)v3;
    v19 = v7;
    *(_DWORD *)v6 = 136446466;
    v9 = (objc_class *)type metadata accessor for SessionBannerAgent(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v8);
    WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v9);
    v11 = dispatch thunk of CustomStringConvertible.description.getter(v9, WitnessTable);
    v13 = v12;
    v18 = sub_100172BEC(v11, v12, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v6 + 4, v6 + 12);

    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v6 + 12) = 2080;
    v14 = *(_QWORD *)((char *)v3 + qword_1003265D8);
    v15 = *(_QWORD *)((char *)v3 + qword_1003265D8 + 8);
    swift_bridgeObjectRetain(v15);
    v18 = sub_100172BEC(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v6 + 14, v6 + 22);

    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%{public}s] deinit for '%s'", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy(v7, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    v9 = (objc_class *)type metadata accessor for SessionBannerAgent(0, *(_QWORD *)(v1 + 80), *(_QWORD *)(v1 + 88), v16);
  }
  v20.receiver = v3;
  v20.super_class = v9;
  return objc_msgSendSuper2(&v20, "dealloc");
}

id sub_1001BB428(void *a1)
{
  id v1;

  v1 = a1;
  return sub_1001BB1C4();
}

double sub_1001BB44C(uint64_t a1)
{
  double result;

  swift_release(*(_QWORD *)(a1 + qword_1003265A0));
  swift_release(*(_QWORD *)(a1 + qword_1003265A8));
  swift_release(*(_QWORD *)(a1 + qword_1003265B0));
  swift_release(*(_QWORD *)(a1 + qword_1003265B8));
  swift_release(*(_QWORD *)(a1 + qword_1003265C0));
  swift_release(*(_QWORD *)(a1 + qword_1003265C8));
  swift_release(*(_QWORD *)(a1 + qword_1003265D0));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + qword_1003265D8 + 8));

  sub_100025CF8(a1 + qword_1003265E8);
  *(_QWORD *)&result = swift_unknownObjectRelease(*(_QWORD *)(a1 + qword_1003265F0)).n128_u64[0];
  return result;
}

uint64_t sub_1001BB518()
{
  uint64_t v0;
  int v1;
  uint64_t result;
  char v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  int v11;
  int v12;

  v1 = *(unsigned __int8 *)(v0 + qword_100326600);
  result = sub_1001BB6AC();
  if (v1 == 2 || (result & 1) != (v1 & 1))
  {
    v4 = sub_1001BB6AC();
    v5 = v4 & 1;
    *(_BYTE *)(v0 + qword_100326600) = v4 & 1;
    if (qword_100315838 != -1)
      swift_once(&qword_100315838, sub_1000D9630);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10000D744(v6, (uint64_t)qword_10033FD60);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v10 = 67240192;
      v11 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v10 + 4, v10 + 8);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "isAnyBannerPresented changed to %{BOOL,public}d", v10, 8u);
      swift_slowDealloc(v10, -1, -1);
    }

    HIBYTE(v12) = v5;
    return PassthroughSubject.send(_:)((char *)&v12 + 3);
  }
  return result;
}

BOOL sub_1001BB670(int a1, int a2)
{
  return ((a1 ^ a2) & 1) == 0;
}

uint64_t sub_1001BB680()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + qword_100326608);
}

uint64_t sub_1001BB690(uint64_t result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + qword_100326608) = result;
  return result;
}

BOOL sub_1001BB6A0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1001BB670(*a1, *a2);
}

uint64_t sub_1001BB6AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  _BYTE v13[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if ((*(_BYTE *)(v1 + qword_1003265F8) & 1) != 0)
      return 0;
    v10 = v1 + qword_1003265F0;
    swift_beginAccess(v10, v13, 0, 0);
    if (!*(_QWORD *)v10)
      return 0;
    if (*(_QWORD *)(*(_QWORD *)v10 + OBJC_IVAR____TtC8SOSBuddy27SessionBannerViewController__activeLayoutMode) == 4)
      return 1;
    v11 = *(unsigned __int16 *)(v10 + 16);
    if ((v11 & 0xFF00) == 0x200)
      return 0;
    else
      return (v11 >> 8) & 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1001BB7EC(void *a1, uint64_t a2, uint64_t a3)
{
  id v5;

  swift_unknownObjectRetain(a3);
  v5 = a1;
  sub_1001BE050();
  swift_unknownObjectRelease(a3);

}

void sub_1001BB838(int a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  __n128 v14;
  char v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  uint64_t Strong;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, char *, _UNKNOWN **, uint64_t, uint64_t);
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t inited;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  Class isa;
  double v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  void *v49;
  id v50;
  void *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  __n128 v55;
  char *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  void *v60;
  uint64_t v61;
  unint64_t v62;
  id v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  void *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  void *v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  __n128 v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _BYTE v88[80];
  id v89;

  v2 = v1;
  v4 = *(_QWORD *)v1;
  v85 = swift_isaMask;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v83 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchPredicate(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (uint64_t *)((char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v13 = static OS_dispatch_queue.main.getter(v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v10 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v9);
  v15 = _dispatchPreconditionTest(_:)(v13);
  (*(void (**)(_QWORD *, uint64_t))(v10 + 8))(v13, v9);
  if ((v15 & 1) != 0)
  {
    if (qword_100315838 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315838, sub_1000D9630);
LABEL_3:
  v16 = sub_10000D744(v5, (uint64_t)qword_10033FD60);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  v19 = os_log_type_enabled(v17, v18);
  LODWORD(v84) = a1;
  if (v19)
  {
    v20 = (uint8_t *)swift_slowAlloc(12, -1);
    v21 = (void *)swift_slowAlloc(32, -1);
    v86 = v16;
    v22 = v4;
    v23 = v21;
    v89 = v21;
    *(_DWORD *)v20 = 136446210;
    v87 = sub_100172BEC(0xD00000000000001ALL, 0x800000010026E4C0, (uint64_t *)&v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88, v20 + 4, v20 + 12);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "presentBanner for '%{public}s'", v20, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    v24 = v23;
    v4 = v22;
    v16 = v86;
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v20, -1, -1);
  }

  v25 = *(void **)&v2[qword_1003265E0];
  if (v25)
  {
    v82 = v5;
    Strong = swift_unknownObjectWeakLoadStrong(&v2[qword_1003265E8]);
    if (Strong)
    {
      v27 = Strong;
      v86 = v16;
      v29 = *(_QWORD *)&v2[qword_1003265D8];
      v28 = *(_QWORD *)&v2[qword_1003265D8 + 8];
      v30 = *(_QWORD *)((v85 & v4) + 0x50);
      v31 = *(_QWORD *)((v85 & v4) + 0x58);
      v32 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, uint64_t, uint64_t, char *, _UNKNOWN **, uint64_t, uint64_t))(v31 + 16);
      v33 = v25;
      v34 = (void *)v32(v29, v28, 0xD00000000000001ALL, 0x800000010026E4C0, v27, v84 & 1, v2, &off_1002F77C8, v30, v31);
      v35 = sub_100003DB8((uint64_t *)&unk_100326470);
      inited = swift_initStackObject(v35, v88);
      *(_OWORD *)(inited + 16) = xmmword_10024DEE0;
      *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSBUIPresentableWantsDismissalPreventionContextUserInfoKey);
      *(_QWORD *)(inited + 40) = v37;
      sub_10006477C(0, (unint64_t *)&unk_10032B1C0, NSNumber_ptr);
      *(NSNumber *)(inited + 48) = NSNumber.init(integerLiteral:)(1);
      *(_QWORD *)(inited + 56) = static String._unconditionallyBridgeFromObjectiveC(_:)(kSBUIPresentableSystemApertureSupportingUserInfoKey);
      *(_QWORD *)(inited + 64) = v38;
      *(NSNumber *)(inited + 72) = NSNumber.init(integerLiteral:)(1);
      v39 = sub_100224768(inited);
      sub_100003DB8((uint64_t *)&unk_100326480);
      isa = Dictionary._bridgeToObjectiveC()().super.isa;
      *(_QWORD *)&v41 = swift_bridgeObjectRelease(v39).n128_u64[0];
      v89 = 0;
      v85 = (unint64_t)v33;
      LODWORD(v29) = objc_msgSend(v33, "postPresentable:options:userInfo:error:", v34, 1, isa, &v89, v41);

      v42 = v89;
      v43 = v27;
      if ((_DWORD)v29)
      {
        v44 = v82;
        v45 = v83;
        (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v83, v86, v82);
        swift_unknownObjectRetain_n(v34, 3);
        v46 = Logger.logObject.getter(v42);
        v47 = static os_log_type_t.default.getter(v46);
        if (os_log_type_enabled(v46, v47))
        {
          v86 = v43;
          v84 = v6;
          v48 = (uint8_t *)swift_slowAlloc(12, -1);
          v49 = (void *)swift_slowAlloc(32, -1);
          v89 = v49;
          *(_DWORD *)v48 = 136446210;
          v50 = objc_msgSend(v34, "requestIdentifier");
          if (v50)
          {
            v51 = v50;
            v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
            v54 = v53;

            v87 = sub_100172BEC(v52, v54, (uint64_t *)&v89);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88, v48 + 4, v48 + 12);
            swift_unknownObjectRelease_n(v34, 2);
            swift_bridgeObjectRelease(v54);
            _os_log_impl((void *)&_mh_execute_header, v46, v47, "presentBanner: presenting '%{public}s'", v48, 0xCu);
            swift_arrayDestroy(v49, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v49, -1, -1);
            swift_slowDealloc(v48, -1, -1);
            swift_unknownObjectRelease(v34);

            v55 = swift_unknownObjectRelease(v86);
            (*(void (**)(char *, uint64_t, __n128))(v84 + 8))(v83, v82, v55);
          }
          else
          {
            swift_unknownObjectRelease(v34);
            __break(1u);
          }
        }
        else
        {

          swift_unknownObjectRelease(v43);
          swift_unknownObjectRelease_n(v34, 3);
          (*(void (**)(char *, uint64_t, __n128))(v6 + 8))(v45, v44, v81);
        }
      }
      else
      {
        v68 = v89;
        v69 = _convertNSErrorToError(_:)(v42);

        swift_willThrow(v70);
        swift_errorRetain(v69);
        v71 = swift_errorRetain(v69);
        v72 = Logger.logObject.getter(v71);
        v73 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v72, v73))
        {
          v74 = (uint8_t *)swift_slowAlloc(12, -1);
          v75 = (void *)swift_slowAlloc(32, -1);
          v89 = v75;
          v86 = v43;
          *(_DWORD *)v74 = 136446210;
          v87 = v69;
          swift_errorRetain(v69);
          v76 = sub_100003DB8((uint64_t *)&unk_100324AA0);
          v78 = String.init<A>(describing:)(&v87, v76, v77);
          v80 = v79;
          v87 = sub_100172BEC(v78, v79, (uint64_t *)&v89);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88, v74 + 4, v74 + 12);
          swift_bridgeObjectRelease(v80);
          swift_errorRelease(v69);
          swift_errorRelease(v69);
          _os_log_impl((void *)&_mh_execute_header, v72, v73, "presentBanner failed: %{public}s", v74, 0xCu);
          swift_arrayDestroy(v75, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v75, -1, -1);
          swift_slowDealloc(v74, -1, -1);
          swift_unknownObjectRelease(v34);

          swift_unknownObjectRelease(v86);
          swift_errorRelease(v69);
        }
        else
        {

          swift_unknownObjectRelease(v43);
          swift_unknownObjectRelease(v34);
          swift_errorRelease(v69);
          swift_errorRelease(v69);
          swift_errorRelease(v69);

        }
      }
    }
    else
    {
      v63 = v25;
      v64 = Logger.logObject.getter(v63);
      v65 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v64, v65))
      {
        v66 = (uint8_t *)swift_slowAlloc(12, -1);
        v67 = (void *)swift_slowAlloc(32, -1);
        v89 = v67;
        *(_DWORD *)v66 = 136446210;
        v87 = sub_100172BEC(0xD00000000000001ALL, 0x800000010026E4C0, (uint64_t *)&v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88, v66 + 4, v66 + 12);
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "contentProducer for '%{public}s' has expired", v66, 0xCu);
        swift_arrayDestroy(v67, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v67, -1, -1);
        swift_slowDealloc(v66, -1, -1);
      }

    }
  }
  else
  {
    v56 = v2;
    v57 = Logger.logObject.getter(v56);
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc(12, -1);
      v60 = (void *)swift_slowAlloc(32, -1);
      v89 = v60;
      *(_DWORD *)v59 = 136446210;
      v61 = *(_QWORD *)&v56[qword_1003265D8];
      v62 = *(_QWORD *)&v56[qword_1003265D8 + 8];
      swift_bridgeObjectRetain(v62);
      v87 = sub_100172BEC(v61, v62, (uint64_t *)&v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88, v59 + 4, v59 + 12);

      swift_bridgeObjectRelease(v62);
      _os_log_impl((void *)&_mh_execute_header, v57, v58, "_bannerSource for '%{public}s' has expired", v59, 0xCu);
      swift_arrayDestroy(v60, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1, -1);
      swift_slowDealloc(v59, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1001BC23C()
{
  sub_1001BEA88();
}

uint64_t type metadata accessor for SessionBannerAgent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionBannerAgent);
}

uint64_t sub_1001BC264(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001BC2B0 + 4 * byte_10025C68B[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001BC2E4 + 4 * byte_10025C686[v4]))();
}

uint64_t sub_1001BC2E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001BC2EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001BC2F4);
  return result;
}

uint64_t sub_1001BC300(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001BC308);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001BC30C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001BC314(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t type metadata accessor for SessionBannerAgent.State(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionBannerAgent.State);
}

double sub_1001BC330(_QWORD *a1)
{
  double result;

  *(_QWORD *)&result = swift_unknownObjectRelease(*a1).n128_u64[0];
  return result;
}

uint64_t sub_1001BC338(uint64_t a1, __int128 *a2)
{
  __int128 v3;

  v3 = *a2;
  *(_OWORD *)a1 = *a2;
  *(_WORD *)(a1 + 16) = *((_WORD *)a2 + 8);
  swift_unknownObjectRetain(v3);
  return a1;
}

uint64_t *sub_1001BC370(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = a2[1];
  v6 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v6);
  a1[1] = v5;
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17);
  return a1;
}

__n128 sub_1001BC3C8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t sub_1001BC3DC(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectRelease(*(_QWORD *)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  return a1;
}

uint64_t sub_1001BC418(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 18))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1001BC460(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 18) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for SessionBannerAgent.ActivePresentable(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionBannerAgent.ActivePresentable);
}

uint64_t initializeWithCopy for PreferredBannerLayout(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v4;
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for PreferredBannerLayout(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for PreferredBannerLayout(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;

  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PreferredBannerLayout(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 64))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PreferredBannerLayout(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 56) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 64) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PreferredBannerLayout()
{
  return &type metadata for PreferredBannerLayout;
}

uint64_t sub_1001BC654(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t sub_1001BC688(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t sub_1001BC6DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for TryOutTranscriptWarningView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TryOutTranscriptWarningView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for SessionBannerAgent.BannerTransitionEvent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionBannerAgent.BannerTransitionEvent);
}

void sub_1001BC7AC(void *a1, uint64_t a2, const char *a3, int a4, const char *a5)
{
  uint64_t *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *);
  char *v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  char *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t active;
  uint64_t v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  void *v42;
  os_log_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  void *v51;
  char **p_name;
  id v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  char v65;
  uint64_t v66;
  void (*v67)(uint64_t, char);
  uint64_t v68;
  uint64_t v69;
  os_log_t v70;
  uint64_t v71;
  char *v72;
  int v73;
  const char *v74;
  int v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  __int16 v81;
  char v82[24];
  uint64_t v83[4];

  v74 = a5;
  v73 = a4;
  v76 = a3;
  v7 = *v5;
  v8 = swift_isaMask;
  v9 = type metadata accessor for DispatchPredicate(0);
  v78 = *(_QWORD *)(v9 - 8);
  v79 = v9;
  __chkstk_darwin(v9, v10);
  v12 = (uint64_t *)((char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for Logger(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v68 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v18 = sub_10000D744(v13, (uint64_t)qword_10033FD60);
  v19 = *(void (**)(char *))(v14 + 16);
  v77 = v18;
  v19(v17);
  swift_unknownObjectRetain_n(a1, 2);
  v20 = v5;
  v21 = Logger.logObject.getter(v20);
  v75 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, (os_log_type_t)v75))
  {
    v70 = v21;
    v71 = v14;
    v72 = v20;
    v22 = (uint64_t)a1;
    v23 = swift_slowAlloc(22, -1);
    v69 = swift_slowAlloc(64, -1);
    v83[0] = v69;
    *(_DWORD *)v23 = 136446466;
    v24 = objc_msgSend((id)v22, "requestIdentifier");
    if (!v24)
    {
LABEL_32:

      swift_unknownObjectRelease(v22);
      __break(1u);
      return;
    }
    v25 = v24;
    v26 = v8 & v7;
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v29 = v28;

    *(_QWORD *)&v80 = sub_100172BEC(v27, v29, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, (char *)&v80 + 8, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease(v29);
    swift_unknownObjectRelease_n(v22, 2);
    *(_WORD *)(v23 + 12) = 2082;
    v68 = v23 + 14;
    v30 = v72;
    v31 = &v72[qword_1003265F0];
    swift_beginAccess(&v72[qword_1003265F0], v82, 0, 0);
    v32 = *((_WORD *)v31 + 8);
    v80 = *(_OWORD *)v31;
    v81 = v32;
    v33 = v80;
    active = type metadata accessor for SessionBannerAgent.ActivePresentable(255, *(_QWORD *)(v26 + 80), *(_QWORD *)(v26 + 88), v34);
    v36 = type metadata accessor for Optional(0, active);
    swift_unknownObjectRetain(v33);
    v37 = v36;
    v20 = v30;
    v39 = String.init<A>(describing:)(&v80, v37, v38);
    v41 = v40;
    *(_QWORD *)&v80 = sub_100172BEC(v39, v40, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, (char *)&v80 + 8, v68, v23 + 22);
    swift_bridgeObjectRelease(v41);

    v42 = (void *)v22;
    v43 = v70;
    _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v75, v76, (uint8_t *)v23, 0x16u);
    v44 = v69;
    swift_arrayDestroy(v69, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    (*(void (**)(char *, uint64_t))(v71 + 8))(v17, v13);
    a1 = v42;
  }
  else
  {
    swift_unknownObjectRelease_n(a1, 2);

    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  }
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v12 = static OS_dispatch_queue.main.getter(v45);
  v47 = v78;
  v46 = v79;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v78 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v79);
  v22 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v47 + 8))(v12, v46);
  if ((v22 & 1) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  v48 = (uint64_t *)&v20[qword_1003265F0];
  v49 = swift_beginAccess(&v20[qword_1003265F0], v83, 0, 0).n128_u64[0];
  v50 = *v48;
  if (v50)
  {
    v51 = a1;
    p_name = &ResourceBundleClass.name;
    v53 = objc_msgSend((id)swift_unknownObjectRetain(v50), "requestIdentifier");
    v49 = swift_unknownObjectRelease(v50).n128_u64[0];
    if (v53)
    {
      v54 = static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      v50 = v55;

    }
    else
    {
      v54 = 0;
      v50 = 0;
    }
    a1 = v51;
  }
  else
  {
    v54 = 0;
    p_name = (char **)(&ResourceBundleClass + 24);
  }
  v56 = objc_msgSend(a1, p_name[491], *(double *)&v49);
  if (!v56)
  {
    if (!v50)
      goto LABEL_28;
    goto LABEL_21;
  }
  v57 = v56;
  v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
  v60 = v59;

  if (!v50)
  {
    if (!v60)
      goto LABEL_28;
    goto LABEL_23;
  }
  if (!v60)
  {
LABEL_21:
    v60 = v50;
LABEL_23:
    swift_bridgeObjectRelease(v60);
    goto LABEL_24;
  }
  if (v54 == v58 && v50 == v60)
  {
    swift_bridgeObjectRelease(v60);
    swift_bridgeObjectRelease(v50);
LABEL_28:
    v67 = sub_1001BB11C((uint64_t)&v80);
    if (*(_QWORD *)v66)
      *(_BYTE *)(v66 + 16) = v73;
    v67((uint64_t)&v80, 0);
    return;
  }
  v65 = _stringCompareWithSmolCheck(_:_:expecting:)(v54, v50, v58, v60, 0);
  swift_bridgeObjectRelease(v60);
  swift_bridgeObjectRelease(v50);
  if ((v65 & 1) != 0)
    goto LABEL_28;
LABEL_24:
  v62 = Logger.logObject.getter(v61);
  v63 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v64 = 0;
    _os_log_impl((void *)&_mh_execute_header, v62, v63, v74, v64, 2u);
    swift_slowDealloc(v64, -1, -1);
  }

}

void sub_1001BCD70(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  void *v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (void *)Strong;
    sub_1001BCDC0();

  }
}

void sub_1001BCDC0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  __n128 v14;
  char v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  char *v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  char *v31;
  __int16 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __n128 v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  char *v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t active;
  uint64_t v51;
  __n128 v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  __int128 v56;
  __int16 v57;
  uint64_t v58;
  char v59[24];
  __int128 v60;
  __int16 v61;
  _BYTE v62[24];

  v1 = v0;
  v2 = *(_QWORD *)v0;
  v3 = swift_isaMask;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (_QWORD *)((char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FD60);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "executePendingStateUpdate", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v8 = static OS_dispatch_queue.main.getter(v14);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v15 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v15 & 1) != 0)
  {
    v16 = v3 & v2;
    v17 = &v1[qword_1003265F0];
    swift_beginAccess(&v1[qword_1003265F0], v59, 0, 0);
    if (*(_QWORD *)v17 && v17[16] == 5)
    {
      v18 = *(_QWORD *)(v16 + 80);
      v19 = *(_QWORD *)(v16 + 88);
      v20 = &v1[qword_1003265F0];
      swift_beginAccess(&v1[qword_1003265F0], &v60, 0, 0);
      if (!*(_QWORD *)v20 || (v21 = *((unsigned __int16 *)v20 + 8), (v21 & 0xFF00) == 0x200))
      {
        v41 = v1;
        v42 = Logger.logObject.getter(v41);
        v43 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v42, v43))
        {
          v44 = (uint8_t *)swift_slowAlloc(12, -1);
          v45 = swift_slowAlloc(32, -1);
          v58 = v45;
          *(_DWORD *)v44 = 136446210;
          v46 = &v41[qword_1003265F0];
          swift_beginAccess(&v41[qword_1003265F0], v62, 0, 0);
          v47 = *((_WORD *)v46 + 8);
          v56 = *(_OWORD *)v46;
          v57 = v47;
          v48 = v56;
          active = type metadata accessor for SessionBannerAgent.ActivePresentable(255, v18, v19, v49);
          v51 = type metadata accessor for Optional(0, active);
          swift_unknownObjectRetain(v48);
          v53 = String.init<A>(describing:)(&v56, v51, v52);
          v55 = v54;
          *(_QWORD *)&v56 = sub_100172BEC(v53, v54, &v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, (char *)&v56 + 8, v44 + 4, v44 + 12);

          swift_bridgeObjectRelease(v55);
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "executePendingStateUpdate request expired, current presentable == %{public}s", v44, 0xCu);
          swift_arrayDestroy(v45, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v45, -1, -1);
          swift_slowDealloc(v44, -1, -1);

        }
        else
        {

        }
        sub_1001BDFC8(0, 0, 0);
      }
      else
      {
        sub_1001BB838((v21 >> 8) & 1);
        v23 = v22;
        sub_1001BDFC8(v22, v24, v25);
        swift_unknownObjectRelease(v23);
      }
    }
    else
    {
      v26 = v1;
      v27 = Logger.logObject.getter(v26);
      v28 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v27, v28))
      {
        v29 = (uint8_t *)swift_slowAlloc(12, -1);
        v30 = swift_slowAlloc(32, -1);
        *(_QWORD *)&v56 = v30;
        *(_DWORD *)v29 = 136446210;
        v31 = &v26[qword_1003265F0];
        swift_beginAccess(&v26[qword_1003265F0], v62, 0, 0);
        v32 = *((_WORD *)v31 + 8);
        v60 = *(_OWORD *)v31;
        v61 = v32;
        v33 = v60;
        v35 = type metadata accessor for SessionBannerAgent.ActivePresentable(255, *(_QWORD *)(v16 + 80), *(_QWORD *)(v16 + 88), v34);
        v36 = type metadata accessor for Optional(0, v35);
        swift_unknownObjectRetain(v33);
        v38 = String.init<A>(describing:)(&v60, v36, v37);
        v40 = v39;
        *(_QWORD *)&v60 = sub_100172BEC(v38, v39, (uint64_t *)&v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, (char *)&v60 + 8, v29 + 4, v29 + 12);

        swift_bridgeObjectRelease(v40);
        _os_log_impl((void *)&_mh_execute_header, v27, v28, "executePendingStateUpdate request overridden, current presentable == %{public}s", v29, 0xCu);
        swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v30, -1, -1);
        swift_slowDealloc(v29, -1, -1);

      }
      else
      {

      }
    }
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001BD2F4(char a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  int v12;
  int v13;
  uint64_t v14;

  v3 = v2;
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000D744(v6, (uint64_t)qword_10033FD60);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(14, -1);
    *(_DWORD *)v10 = 67240448;
    v13 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v10 + 4, v10 + 8);
    *(_WORD *)(v10 + 8) = 1026;
    v12 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v10 + 10, v10 + 14);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "didChangeLayout: present - %{BOOL,public}d, expanded - %{BOOL,public}d", (uint8_t *)v10, 0xEu);
    swift_slowDealloc(v10, -1, -1);
  }

  if ((a1 & 1) != 0 && *(_BYTE *)(v3 + qword_100326608) != 2)
    *(_BYTE *)(v3 + qword_100326608) = a2 & 1;
  return sub_1001BB518();
}

void sub_1001BD454(void (**a1)(char *, uint64_t, uint64_t), uint64_t a2, int a3, const char *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void (**v14)(char *, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  char **p_name;
  uint64_t v22;
  id v23;
  void *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (**v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  const char *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55[2];
  char v56;

  v51 = a4;
  v7 = v5;
  v53 = a3;
  v9 = type metadata accessor for DispatchPredicate(0);
  v52 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  v12 = (uint64_t *)((char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for Logger(0);
  v14 = *(void (***)(char *, uint64_t, uint64_t))(v13 - 8);
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v18 = sub_10000D744(v13, (uint64_t)qword_10033FD60);
  v14[2](v17, v18, v13);
  v19 = swift_unknownObjectRetain_n(a1, 2);
  v20 = Logger.logObject.getter(v19);
  v50 = static os_log_type_t.default.getter(v20);
  p_name = &ResourceBundleClass.name;
  if (os_log_type_enabled(v20, (os_log_type_t)v50))
  {
    v46 = v14;
    v47 = v9;
    v48 = v7;
    v49 = a5;
    v22 = swift_slowAlloc(22, -1);
    v45 = swift_slowAlloc(64, -1);
    v55[0] = v45;
    *(_DWORD *)v22 = 136446466;
    v23 = objc_msgSend(a1, "requestIdentifier");
    v14 = a1;
    if (!v23)
      goto LABEL_12;
    v24 = v23;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v23);
    v27 = v26;

    v54 = sub_100172BEC(v25, v27, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v22 + 4, v22 + 12);
    swift_unknownObjectRelease_n(v14, 2);
    swift_bridgeObjectRelease(v27);
    *(_WORD *)(v22 + 12) = 2082;
    LOBYTE(v54) = v53;
    v28 = sub_100003DB8((uint64_t *)&unk_1003263F0);
    v30 = String.init<A>(describing:)(&v54, v28, v29);
    v32 = v31;
    v54 = sub_100172BEC(v30, v31, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v50, v51, (uint8_t *)v22, 0x16u);
    v33 = v45;
    swift_arrayDestroy(v45, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v33, -1, -1);
    swift_slowDealloc(v22, -1, -1);

    ((void (*)(char *, uint64_t))v46[1])(v17, v13);
    a1 = v14;
    v9 = v47;
    p_name = (char **)(&ResourceBundleClass + 24);
  }
  else
  {

    swift_unknownObjectRelease_n(a1, 2);
    ((void (*)(char *, uint64_t))v14[1])(v17, v13);
  }
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v12 = static OS_dispatch_queue.main.getter(v34);
  v35 = v52;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v52 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  v36 = _dispatchPreconditionTest(_:)(v12);
  v37 = v9;
  v38 = v36;
  (*(void (**)(_QWORD *, uint64_t))(v35 + 8))(v12, v37);
  if ((v38 & 1) != 0)
  {
    v39 = objc_msgSend(a1, p_name[491]);
    if (v39)
    {
      v40 = v39;
      v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v43 = v42;

      v55[0] = v41;
      v55[1] = v43;
      v56 = v53;
      PassthroughSubject.send(_:)(v55);
      swift_bridgeObjectRelease(v43);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_12:
  swift_unknownObjectRelease(v14);
  __break(1u);
}

void sub_1001BD814(char **a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  char **p_name;
  uint8_t *v18;
  id v19;
  void *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  char v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40[2];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v14 = sub_10000D744(v9, (uint64_t)qword_10033FD60);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v13, v14, v9);
  v15 = swift_unknownObjectRetain_n(a1, 2);
  v16 = Logger.logObject.getter(v15);
  v38 = static os_log_type_t.default.getter(v16);
  p_name = &ResourceBundleClass.name;
  if (os_log_type_enabled(v16, (os_log_type_t)v38))
  {
    v34 = v10;
    v35 = v5;
    v36 = v4;
    v37 = v2;
    v18 = (uint8_t *)swift_slowAlloc(12, -1);
    v33 = swift_slowAlloc(32, -1);
    v40[0] = v33;
    *(_DWORD *)v18 = 136446210;
    v19 = objc_msgSend(a1, "requestIdentifier");
    p_name = a1;
    if (!v19)
      goto LABEL_12;
    v20 = v19;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v23 = v22;

    v39 = sub_100172BEC(v21, v23, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v18 + 4, v18 + 12);
    swift_unknownObjectRelease_n(p_name, 2);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v38, "wasRemoved: %{public}s", v18, 0xCu);
    v24 = v33;
    swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v18, -1, -1);

    (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v9);
    a1 = p_name;
    v4 = v36;
    v2 = v37;
    v5 = v35;
  }
  else
  {

    swift_unknownObjectRelease_n(a1, 2);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  }
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v8 = static OS_dispatch_queue.main.getter(v25);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v26 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v26 & 1) != 0)
  {
    *(_BYTE *)(v2 + qword_100326608) = 2;
    sub_1001BDFC8(0, 0, 0);
    v27 = objc_msgSend(a1, "requestIdentifier");
    if (v27)
    {
      v28 = v27;
      v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
      v31 = v30;

      v40[0] = v29;
      v40[1] = v31;
      PassthroughSubject.send(_:)(v40);
      swift_bridgeObjectRelease(v31);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_12:
  swift_unknownObjectRelease(p_name);
  __break(1u);
}

void sub_1001BDB88(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  char v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37[2];

  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v12 = sub_10000D744(v7, (uint64_t)qword_10033FD60);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v12, v7);
  v13 = swift_unknownObjectRetain_n(a1, 2);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v32 = v8;
    v33 = v3;
    v34 = v2;
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v31 = swift_slowAlloc(32, -1);
    v37[0] = v31;
    *(_DWORD *)v16 = 136446210;
    v17 = objc_msgSend(a1, "requestIdentifier");
    v35 = a1;
    if (!v17)
      goto LABEL_12;
    v18 = v17;
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v21 = v20;

    v36 = sub_100172BEC(v19, v21, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, v37, v16 + 4, v16 + 12);
    a1 = v35;
    swift_unknownObjectRelease_n(v35, 2);
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "handleTap: %{public}s", v16, 0xCu);
    v22 = v31;
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    (*(void (**)(char *, uint64_t))(v32 + 8))(v11, v7);
    v3 = v33;
    v2 = v34;
  }
  else
  {

    swift_unknownObjectRelease_n(a1, 2);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v6 = static OS_dispatch_queue.main.getter(v23);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v24 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v24 & 1) != 0)
  {
    v25 = objc_msgSend(a1, "requestIdentifier");
    if (v25)
    {
      v26 = v25;
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v29 = v28;

      v37[0] = v27;
      v37[1] = v29;
      PassthroughSubject.send(_:)(v37);
      swift_bridgeObjectRelease(v29);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_12:
  swift_unknownObjectRelease(v35);
  __break(1u);
}

uint64_t sub_1001BDED4(_OWORD *a1)
{
  __int128 v1;
  __int128 v2;
  _OWORD v4[4];

  v1 = a1[1];
  v4[0] = *a1;
  v4[1] = v1;
  v2 = a1[3];
  v4[2] = a1[2];
  v4[3] = v2;
  return PassthroughSubject.send(_:)(v4);
}

void sub_1001BDF18(void *a1, uint64_t a2)
{
  sub_1001BC7AC(a1, a2, "willAppear: for %{public}s, active presentable == %{public}s", 1, "Received willAppear for non-active presentable");
}

void sub_1001BDF40(void *a1, uint64_t a2)
{
  sub_1001BC7AC(a1, a2, "didAppear: for %{public}s, active presentable == %{public}s", 2, "Received didAppear for non-active presentable");
}

void sub_1001BDF74(void (**a1)(char *, uint64_t, uint64_t), uint64_t a2, int a3)
{
  sub_1001BD454(a1, a2, a3, "wasCollapsed: %{public}s, user initiated: %{public}s", (uint64_t)&qword_1003265A8);
}

void sub_1001BDF98(void (**a1)(char *, uint64_t, uint64_t), uint64_t a2, int a3)
{
  sub_1001BD454(a1, a2, a3, "wasExpanded: %{public}s, user initiated: %{public}s", (uint64_t)&qword_1003265B0);
}

uint64_t sub_1001BDFC8(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v3;
  uint64_t *v7;
  uint64_t v8;
  _BYTE v10[24];

  v7 = (uint64_t *)(v3 + qword_1003265F0);
  swift_beginAccess(v3 + qword_1003265F0, v10, 1, 0);
  v8 = *v7;
  *v7 = a1;
  v7[1] = a2;
  *((_WORD *)v7 + 8) = a3;
  swift_unknownObjectRetain(a1);
  swift_unknownObjectRelease(v8);
  return sub_1001BAE74();
}

uint64_t type metadata accessor for SessionBannerAgent.Stage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SessionBannerAgent.Stage);
}

void sub_1001BE050()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;

  v1 = v0;
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FD60);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "bannerSourceDidInvalidate", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = *(void **)(v1 + qword_1003265E0);
  *(_QWORD *)(v1 + qword_1003265E0) = 0;

}

void sub_1001BE130(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void (*v23)(char *);
  char *v24;
  NSObject *v25;
  int v26;
  uint64_t v27;
  id v28;
  void *v29;
  void *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t active;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  char v49;
  _QWORD *v50;
  uint64_t *v51;
  uint64_t v52;
  char **p_name;
  id v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  char v66;
  char *v67;
  uint64_t v68;
  void (*v69)(uint64_t, char);
  __n128 v70;
  void *v71;
  char *v72;
  char *v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  void *v79;
  char *v80;
  __n128 v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void (**v104)(_QWORD *, _QWORD, uint64_t);
  uint64_t v105;
  __int128 aBlock;
  uint64_t (*v107)(uint64_t);
  void *v108;
  void (*v109)();
  _QWORD *v110;
  char v111[24];
  char v112[24];
  uint64_t v113;

  v103 = swift_isaMask & *v1;
  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v101 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  v100 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for DispatchQoS(0);
  v98 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99, v6);
  v97 = (char *)&v86 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for DispatchTime(0);
  v94 = *(_QWORD *)(v96 - 8);
  v9 = __chkstk_darwin(v96, v8);
  v93 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v11);
  v95 = (char *)&v86 - v12;
  v13 = type metadata accessor for DispatchPredicate(0);
  v104 = *(void (***)(_QWORD *, _QWORD, uint64_t))(v13 - 8);
  v105 = v13;
  __chkstk_darwin(v13, v14);
  v16 = (uint64_t *)((char *)&v86 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for Logger(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (char *)&v86 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v22 = sub_10000D744(v17, (uint64_t)qword_10033FD60);
  v23 = *(void (**)(char *))(v18 + 16);
  v102 = v22;
  v23(v21);
  swift_unknownObjectRetain_n(a1, 2);
  v24 = v1;
  v25 = Logger.logObject.getter(v24);
  v26 = static os_log_type_t.default.getter(v25);
  if (os_log_type_enabled(v25, (os_log_type_t)v26))
  {
    v89 = v26;
    v90 = v18;
    v92 = v24;
    v91 = v3;
    v27 = swift_slowAlloc(22, -1);
    v88 = swift_slowAlloc(64, -1);
    v113 = v88;
    *(_DWORD *)v27 = 136446466;
    v28 = objc_msgSend(a1, "requestIdentifier");
    v29 = a1;
    if (!v28)
    {
LABEL_34:

      swift_unknownObjectRelease(v29);
      __break(1u);
      return;
    }
    v30 = v28;
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    v33 = v32;

    *(_QWORD *)&aBlock = sub_100172BEC(v31, v33, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease(v33);
    swift_unknownObjectRelease_n(v29, 2);
    *(_WORD *)(v27 + 12) = 2082;
    v87 = v27 + 14;
    v34 = v92;
    v35 = &v92[qword_1003265F0];
    swift_beginAccess(&v92[qword_1003265F0], v111, 0, 0);
    v36 = *((_WORD *)v35 + 8);
    aBlock = *(_OWORD *)v35;
    LOWORD(v107) = v36;
    v37 = aBlock;
    active = type metadata accessor for SessionBannerAgent.ActivePresentable(255, *(_QWORD *)(v103 + 80), *(_QWORD *)(v103 + 88), v38);
    v40 = type metadata accessor for Optional(0, active);
    swift_unknownObjectRetain(v37);
    v42 = String.init<A>(describing:)(&aBlock, v40, v41);
    v44 = v43;
    *(_QWORD *)&aBlock = sub_100172BEC(v42, v43, &v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v87, v27 + 22);
    v45 = v44;
    v24 = v34;
    swift_bridgeObjectRelease(v45);

    _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v89, "didDisappear: for %{public}s, active presentable == %{public}s", (uint8_t *)v27, 0x16u);
    v46 = v88;
    swift_arrayDestroy(v88, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v27, -1, -1);

    (*(void (**)(char *, uint64_t))(v90 + 8))(v21, v17);
    v3 = v91;
    a1 = v29;
  }
  else
  {
    swift_unknownObjectRelease_n(a1, 2);

    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
  }
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v16 = static OS_dispatch_queue.main.getter(v47);
  v29 = v104;
  v48 = v105;
  v104[13](v16, enum case for DispatchPredicate.onQueue(_:), v105);
  v49 = _dispatchPreconditionTest(_:)(v16);
  (*((void (**)(_QWORD *, uint64_t))v29 + 1))(v16, v48);
  if ((v49 & 1) == 0)
  {
    __break(1u);
    goto LABEL_34;
  }
  v50 = v24;
  v51 = (uint64_t *)&v24[qword_1003265F0];
  swift_beginAccess(&v24[qword_1003265F0], v112, 0, 0);
  v52 = *v51;
  if (v52)
  {
    p_name = &ResourceBundleClass.name;
    v54 = objc_msgSend((id)swift_unknownObjectRetain(v52), "requestIdentifier");
    swift_unknownObjectRelease(v52);
    if (v54)
    {
      v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
      v52 = v56;

    }
    else
    {
      v55 = 0;
      v52 = 0;
    }
  }
  else
  {
    v55 = 0;
    p_name = (char **)(&ResourceBundleClass + 24);
  }
  v57 = objc_msgSend(a1, p_name[491]);
  if (!v57)
  {
    if (!v52)
      goto LABEL_27;
    goto LABEL_20;
  }
  v58 = v57;
  v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
  v61 = v60;

  if (!v52)
  {
    if (!v61)
      goto LABEL_27;
    goto LABEL_22;
  }
  if (!v61)
  {
LABEL_20:
    v61 = v52;
LABEL_22:
    swift_bridgeObjectRelease(v61);
    goto LABEL_23;
  }
  if (v55 == v59 && v52 == v61)
  {
    swift_bridgeObjectRelease(v61);
    swift_bridgeObjectRelease(v52);
LABEL_27:
    v67 = (char *)v50 + qword_1003265F0;
    swift_beginAccess((char *)v50 + qword_1003265F0, &v113, 0, 0);
    if (*(_QWORD *)v67 && v67[17] << 8 != 512)
    {
      v69 = sub_1001BB11C((uint64_t)&aBlock);
      if (*(_QWORD *)v68)
        *(_BYTE *)(v68 + 16) = 5;
      v70.n128_f64[0] = ((double (*)(__int128 *, _QWORD))v69)(&aBlock, 0);
      v71 = (void *)static OS_dispatch_queue.main.getter(v70);
      v72 = v93;
      static DispatchTime.now()(v71);
      v73 = v95;
      + infix(_:_:)(v72, 0.2);
      v74 = *(void (**)(char *, uint64_t))(v94 + 8);
      v75 = v96;
      v74(v72, v96);
      v76 = swift_allocObject(&unk_1002F7850, 24, 7);
      swift_unknownObjectWeakInit(v76 + 16, v50);
      v77 = (_QWORD *)swift_allocObject(&unk_1002F7878, 40, 7);
      v78 = v103;
      v77[2] = *(_QWORD *)(v103 + 80);
      v77[3] = *(_QWORD *)(v78 + 88);
      v77[4] = v76;
      v109 = sub_1001BEA64;
      v110 = v77;
      *(_QWORD *)&aBlock = _NSConcreteStackBlock;
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v107 = sub_1001BAACC;
      v108 = &unk_1002F7890;
      v79 = _Block_copy(&aBlock);
      swift_release(v110);
      v80 = v97;
      static DispatchQoS.unspecified.getter(v81);
      *(_QWORD *)&aBlock = _swiftEmptyArrayStorage;
      v82 = sub_10006A7F8();
      v83 = sub_100003DB8((uint64_t *)&unk_1003178D0);
      v84 = sub_10003E608();
      v85 = v100;
      dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v83, v84, v3, v82);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v73, v80, v85, v79);
      _Block_release(v79);

      (*(void (**)(char *, uint64_t))(v101 + 8))(v85, v3);
      (*(void (**)(char *, uint64_t))(v98 + 8))(v80, v99);
      v74(v73, v75);
    }
    else
    {
      sub_1001BDFC8(0, 0, 0);
    }
    return;
  }
  v66 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v52, v59, v61, 0);
  swift_bridgeObjectRelease(v61);
  swift_bridgeObjectRelease(v52);
  if ((v66 & 1) != 0)
    goto LABEL_27;
LABEL_23:
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v63, v64))
  {
    v65 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v65 = 0;
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Received didDisappear for non-active presentable", v65, 2u);
    swift_slowDealloc(v65, -1, -1);
  }

}

uint64_t sub_1001BEA1C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001BEA40()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_1001BEA64()
{
  uint64_t v0;

  sub_1001BCD70(*(_QWORD *)(v0 + 32));
}

double sub_1001BEA70(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1001BEA80(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1001BEA88()
{
  _swift_stdlib_reportUnimplementedInitializer("SOSBuddy.SessionBannerAgent", 27, "init()", 6, 0);
  __break(1u);
}

void sub_1001BEAB4(void *a1)
{
  void **v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void **v14;
  NSObject *v15;
  uint64_t v16;
  id v17;
  uint64_t *v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void **v24;
  char *v25;
  __int16 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t active;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  os_log_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t *v43;
  uint64_t v44;
  char **p_name;
  id v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  char v58;
  uint64_t v59;
  void (*v60)(uint64_t, char);
  uint64_t v61;
  uint64_t v62;
  os_log_t v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  unint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int16 v72;
  char v73[24];
  uint64_t v74[4];

  v67 = (unint64_t)*v1;
  v3 = swift_isaMask;
  v4 = type metadata accessor for DispatchPredicate(0);
  v69 = *(_QWORD *)(v4 - 8);
  v70 = v4;
  __chkstk_darwin(v4, v5);
  v7 = (uint64_t *)((char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for Logger(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v13 = sub_10000D744(v8, (uint64_t)qword_10033FD60);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v12, v13, v8);
  swift_unknownObjectRetain_n(a1, 2);
  v14 = v1;
  v15 = Logger.logObject.getter(v14);
  v68 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, (os_log_type_t)v68))
  {
    v63 = v15;
    v64 = v9;
    v65 = v13;
    v66 = v14;
    v16 = swift_slowAlloc(22, -1);
    v62 = swift_slowAlloc(64, -1);
    v74[0] = v62;
    *(_DWORD *)v16 = 136446466;
    v17 = objc_msgSend(a1, "requestIdentifier");
    v18 = (uint64_t *)a1;
    if (!v17)
    {
LABEL_31:

      swift_unknownObjectRelease(v18);
      __break(1u);
      return;
    }
    v19 = v17;
    v20 = v3 & v67;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v23 = v22;

    *(_QWORD *)&v71 = sub_100172BEC(v21, v23, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 8, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v23);
    swift_unknownObjectRelease_n(a1, 2);
    *(_WORD *)(v16 + 12) = 2082;
    v67 = (unint64_t)a1;
    v18 = &qword_100326000;
    v24 = v66;
    v25 = (char *)v66 + qword_1003265F0;
    swift_beginAccess((char *)v66 + qword_1003265F0, v73, 0, 0);
    v26 = *((_WORD *)v25 + 8);
    v71 = *(_OWORD *)v25;
    v72 = v26;
    v27 = v71;
    v28 = *(_QWORD *)(v20 + 80);
    v29 = *(_QWORD *)(v20 + 88);
    v14 = v24;
    active = type metadata accessor for SessionBannerAgent.ActivePresentable(255, v28, v29, v30);
    v32 = type metadata accessor for Optional(0, active);
    swift_unknownObjectRetain(v27);
    v34 = String.init<A>(describing:)(&v71, v32, v33);
    v36 = v35;
    *(_QWORD *)&v71 = sub_100172BEC(v34, v35, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, (char *)&v71 + 8, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease(v36);

    v37 = v63;
    _os_log_impl((void *)&_mh_execute_header, v63, (os_log_type_t)v68, "willDisappear: for %{public}s, active presentable == %{public}s", (uint8_t *)v16, 0x16u);
    v38 = v62;
    swift_arrayDestroy(v62, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    (*(void (**)(char *, uint64_t))(v64 + 8))(v12, v8);
    a1 = (void *)v67;
  }
  else
  {
    swift_unknownObjectRelease_n(a1, 2);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    v18 = &qword_100326000;
  }
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v7 = static OS_dispatch_queue.main.getter(v39);
  v41 = v69;
  v40 = v70;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v69 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v70);
  v42 = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v41 + 8))(v7, v40);
  if ((v42 & 1) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  v43 = (uint64_t *)((char *)v14 + qword_1003265F0);
  swift_beginAccess((char *)v14 + qword_1003265F0, v74, 0, 0);
  v44 = *v43;
  if (v44)
  {
    p_name = &ResourceBundleClass.name;
    v46 = objc_msgSend((id)swift_unknownObjectRetain(v44), "requestIdentifier");
    swift_unknownObjectRelease(v44);
    if (v46)
    {
      v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      v44 = v48;

    }
    else
    {
      v47 = 0;
      v44 = 0;
    }
  }
  else
  {
    v47 = 0;
    p_name = (char **)(&ResourceBundleClass + 24);
  }
  v49 = objc_msgSend(a1, p_name[491]);
  if (!v49)
  {
    if (!v44)
      goto LABEL_27;
    goto LABEL_20;
  }
  v50 = v49;
  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v49);
  v53 = v52;

  if (!v44)
  {
    if (!v53)
      goto LABEL_27;
    goto LABEL_22;
  }
  if (!v53)
  {
LABEL_20:
    v53 = v44;
LABEL_22:
    swift_bridgeObjectRelease(v53);
    goto LABEL_23;
  }
  if (v47 == v51 && v44 == v53)
  {
    swift_bridgeObjectRelease(v53);
    swift_bridgeObjectRelease(v44);
LABEL_27:
    v60 = sub_1001BB11C((uint64_t)&v71);
    if (*(_QWORD *)v59)
      *(_BYTE *)(v59 + 16) = 4;
    v60((uint64_t)&v71, 0);
    return;
  }
  v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v47, v44, v51, v53, 0);
  swift_bridgeObjectRelease(v53);
  swift_bridgeObjectRelease(v44);
  if ((v58 & 1) != 0)
    goto LABEL_27;
LABEL_23:
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v55, v56))
  {
    v57 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v57 = 0;
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Received willDisappear for non-active presentable", v57, 2u);
    swift_slowDealloc(v57, -1, -1);
  }

}

uint64_t sub_1001BF064(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1001BF0B0 + 4 * byte_10025C695[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1001BF0E4 + 4 * byte_10025C690[v4]))();
}

uint64_t sub_1001BF0E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001BF0EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001BF0F4);
  return result;
}

uint64_t sub_1001BF100(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001BF108);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1001BF10C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001BF114(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t storeEnumTagSinglePayload for PreferredBannerLayout.Mode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001BF16C + 4 * byte_10025C69F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001BF1A0 + 4 * byte_10025C69A[v4]))();
}

uint64_t sub_1001BF1A0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001BF1A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001BF1B0);
  return result;
}

uint64_t sub_1001BF1BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001BF1C4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001BF1C8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001BF1D0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PreferredBannerLayout.Mode()
{
  return &type metadata for PreferredBannerLayout.Mode;
}

uint64_t sub_1001BF1EC(uint64_t a1)
{
  return swift_getWitnessTable(&unk_10025C9B0, a1);
}

unint64_t sub_1001BF200()
{
  unint64_t result;

  result = qword_1003268A0;
  if (!qword_1003268A0)
  {
    result = swift_getWitnessTable(&unk_10025C920, &type metadata for PreferredBannerLayout.Mode);
    atomic_store(result, (unint64_t *)&qword_1003268A0);
  }
  return result;
}

uint64_t sub_1001BF244@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  _BYTE v20[24];
  _BYTE v21[24];
  _BYTE v22[24];

  v3 = type metadata accessor for TransmissionProgress(0);
  v4 = *(_QWORD *)(v3 - 8);
  v6 = __chkstk_darwin(v3, v5);
  v8 = &v20[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v6, v9);
  v11 = &v20[-v10 - 8];
  v12 = v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__overrideTransmissionProgress;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__overrideTransmissionProgress, v22, 0, 0);
  v13 = type metadata accessor for ConnectionModel.OverrideTransmissionProgress(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13))
  {
    v14 = v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress;
    swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress, v21, 0, 0);
    v15 = type metadata accessor for ConnectionModel.UserTransmissionProgress(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 48))(v14, 1, v15))
    {
      v16 = v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__simulatedTransmissionProgress;
      swift_beginAccess(v16, v20, 0, 0);
      return sub_10000B234(v16, a1, &qword_100316B68);
    }
    sub_1000E1F30(v14 + *(int *)(v15 + 20), (uint64_t)v8, type metadata accessor for TransmissionProgress);
    v18 = (uint64_t)v8;
  }
  else
  {
    sub_1000E1F30(v12 + *(int *)(v13 + 20), (uint64_t)v11, type metadata accessor for TransmissionProgress);
    v18 = (uint64_t)v11;
  }
  sub_1000E8D6C(v18, a1, type metadata accessor for TransmissionProgress);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v4 + 56))(a1, 0, 1, v3);
}

Swift::Int sub_1001BF408(Swift::Int result, uint64_t a2)
{
  Swift::Int v3;
  int64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  Swift::UInt v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[9];

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_23;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_33:
      __break(1u);
      return result;
    }
    if (v13 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (v14)
      goto LABEL_22;
    v4 = v13 + 1;
    if (v13 + 1 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_22;
    v4 = v13 + 2;
    if (v13 + 2 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_22;
    v15 = v13 + 3;
    if (v15 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v4 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_33;
        if (v4 >= v9)
          return 1;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        ++v15;
        if (v14)
          goto LABEL_22;
      }
    }
    v4 = v15;
LABEL_22:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_23:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v12);
    Hasher.init(_seed:)(v21, *(_QWORD *)(a2 + 40));
    Hasher._combine(_:)(v16);
    result = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = result & ~v17;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v19 = *(_QWORD *)(a2 + 48);
  }
  while (*(unsigned __int8 *)(v19 + v18) == (_DWORD)v16);
  v20 = ~v17;
  while (1)
  {
    v18 = (v18 + 1) & v20;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    if (*(unsigned __int8 *)(v19 + v18) == (_DWORD)v16)
      goto LABEL_7;
  }
}

Swift::Int sub_1001BF5EC(Swift::Int result, uint64_t a2)
{
  Swift::Int v3;
  int64_t v4;
  Swift::Int v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  Swift::UInt v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[9];

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 56;
  v6 = 1 << *(_BYTE *)(result + 32);
  if (v6 < 64)
    v7 = ~(-1 << v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(result + 56);
  v9 = (unint64_t)(v6 + 63) >> 6;
  v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v4 << 6);
      goto LABEL_25;
    }
    v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return result;
    }
    if (v13 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v13);
    ++v4;
    if (v14)
      goto LABEL_24;
    v4 = v13 + 1;
    if (v13 + 1 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 2;
    if (v13 + 2 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v4 = v13 + 3;
    if (v13 + 3 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v4);
    if (v14)
      goto LABEL_24;
    v15 = v13 + 4;
    if (v15 >= v9)
      return 1;
    v14 = *(_QWORD *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        v4 = v15 + 1;
        if (__OFADD__(v15, 1))
          goto LABEL_35;
        if (v4 >= v9)
          return 1;
        v14 = *(_QWORD *)(v5 + 8 * v4);
        ++v15;
        if (v14)
          goto LABEL_24;
      }
    }
    v4 = v15;
LABEL_24:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_25:
    v16 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v12);
    Hasher.init(_seed:)(v21, *(_QWORD *)(a2 + 40));
    Hasher._combine(_:)(v16);
    result = Hasher._finalize()();
    v17 = -1 << *(_BYTE *)(a2 + 32);
    v18 = result & ~v17;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    v19 = *(_QWORD *)(a2 + 48);
  }
  while (*(unsigned __int8 *)(v19 + v18) == (_DWORD)v16);
  v20 = ~v17;
  while (1)
  {
    v18 = (v18 + 1) & v20;
    if (((*(_QWORD *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8)) >> v18) & 1) == 0)
      return 0;
    if (*(unsigned __int8 *)(v19 + v18) == (_DWORD)v16)
      goto LABEL_7;
  }
}

void sub_1001BF7E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 48);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 72);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 72);
    }
    else
    {
      swift_retain(v2);
      v4 = sub_1001DD7D8();
      swift_bridgeObjectRetain(v4);
      swift_release(v2);
      if (!v4)
        return;
    }
    v5 = *(_QWORD *)(v4 + 16);
    if ((*(_BYTE *)(v1 + 64) & 1) != 0 || (v6 = *(_QWORD *)(v1 + 56), v6 >= v5))
    {
      if (v5)
      {
        v7 = *(_QWORD *)(v4 + 40);
        goto LABEL_11;
      }
      swift_bridgeObjectRetain(v3);
      swift_bridgeObjectRelease(v4);
    }
    else
    {
      if ((v6 & 0x8000000000000000) == 0)
      {
        v7 = *(_QWORD *)(v4 + 16 * v6 + 40);
LABEL_11:
        swift_bridgeObjectRetain(v3);
        swift_bridgeObjectRetain(v7);
        swift_bridgeObjectRelease(v4);
        return;
      }
      __break(1u);
    }
  }
}

void sub_1001BF8AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_100315830, sub_1000D961C);
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(v1 + 104);
  if (v9)
  {
    *(_QWORD *)(v1 + 104) = v9 - 1;
    sub_1001D1814();
    return;
  }
  if (qword_100315830 != -1)
    goto LABEL_9;
LABEL_5:
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10000D744(v10, (uint64_t)qword_10033FD48);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "onConnectionGuidanceDisappear called when _connectionGuidancePresent == 0", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

}

void sub_1001BFA30()
{
  __asm { BR              X10 }
}

uint64_t sub_1001BFA7C()
{
  return sub_10001C164();
}

uint64_t sub_1001BFFDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t Strong;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[24];
  _BYTE v29[24];

  v2 = v1;
  v4 = sub_100003DB8(&qword_100322C80);
  v6 = __chkstk_darwin(v4, v5);
  v8 = &v28[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6, v9);
  v11 = &v28[-v10];
  v12 = sub_100003DB8(&qword_1003180C8);
  v14 = __chkstk_darwin(v12, v13);
  v16 = &v28[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v14, v17);
  v19 = &v28[-v18];
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v21 = Strong;
    static DispatchTime.now()(Strong);
    v22 = type metadata accessor for DispatchTime(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v19, 0, 1, v22);
    sub_10000B458((uint64_t)v19, (uint64_t)v16, &qword_1003180C8);
    v23 = v21 + OBJC_IVAR____TtCC8SOSBuddy23ServicePredictionsModel7Request_responseReceivedAt;
    swift_beginAccess(v21 + OBJC_IVAR____TtCC8SOSBuddy23ServicePredictionsModel7Request_responseReceivedAt, v29, 33, 0);
    sub_100123FDC((uint64_t)v16, v23, &qword_1003180C8);
    swift_endAccess(v29);
    swift_release(v21);
  }
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v25 = result;
    v26 = *(_QWORD *)(result + OBJC_IVAR____TtCC8SOSBuddy23ServicePredictionsModel7Request_model);
    swift_retain(v26);
    swift_release(v25);
    sub_10000B234(a1, (uint64_t)v11, &qword_100322C80);
    v27 = v26 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__targetTracks;
    swift_beginAccess(v26 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__targetTracks, v29, 0, 0);
    sub_10000B234(v27, (uint64_t)v8, &qword_100322C80);
    sub_1001D70A8((uint64_t)v11);
    swift_beginAccess(v27, v28, 33, 0);
    sub_100175998((uint64_t)v11, v27, &qword_100322C80);
    swift_endAccess(v28);
    sub_1001D737C((uint64_t)v8);
    sub_100007FF0((uint64_t)v11, &qword_100322C80);
    sub_100007FF0((uint64_t)v8, &qword_100322C80);
    return swift_release(v26);
  }
  return result;
}

uint64_t sub_1001C022C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  __n128 v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  __n128 v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __n128 v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  __n128 v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __n128 v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  __n128 v87;
  uint64_t v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  __n128 v92;
  uint64_t v93;
  uint64_t v94;
  __n128 v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  void *v100;
  uint64_t v101;
  __n128 v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  id v106;
  unint64_t v107;
  __n128 v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __n128 v116;
  uint64_t v117;
  uint64_t v118;
  __n128 v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __n128 v128;
  uint64_t v129;
  uint64_t v130;
  __n128 v131;
  uint64_t v132;
  void (*v133)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  __n128 v140;
  uint64_t v141;
  uint64_t v142;
  __n128 v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  __n128 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  uint64_t v156;
  double (*v157)(char *, uint64_t);
  char *v158;
  char *v159;
  char *v160;
  char *v161;
  __n128 v162;
  unint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __n128 v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  char *v173;
  __n128 v174;
  unint64_t v175;
  void *v176;
  char *v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  __n128 v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __n128 v190;
  uint64_t v191;
  void (*v192)(char *, uint64_t);
  __n128 v193;
  uint64_t v194;
  unint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  char *v213;
  char *v214;
  char *v215;
  char *v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  uint64_t v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  void (*v231)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  id v235;
  id v236;
  char v237[8];

  v1 = v0;
  v2 = sub_100003DB8(&qword_100328530);
  v228 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v196 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0);
  v223 = *(_QWORD *)(v6 - 8);
  v224 = v6;
  __chkstk_darwin(v6, v7);
  v222 = (char *)&v196 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_100328538);
  v226 = *(_QWORD *)(v9 - 8);
  v227 = v9;
  __chkstk_darwin(v9, v10);
  v225 = (char *)&v196 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v221 = sub_100003DB8(&qword_100328540);
  v212 = *(_QWORD *)(v221 - 8);
  v13 = __chkstk_darwin(v221, v12);
  v211 = (char *)&v196 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13, v15);
  v213 = (char *)&v196 - v17;
  v19 = __chkstk_darwin(v16, v18);
  v214 = (char *)&v196 - v20;
  v22 = __chkstk_darwin(v19, v21);
  v215 = (char *)&v196 - v23;
  v25 = __chkstk_darwin(v22, v24);
  v216 = (char *)&v196 - v26;
  __chkstk_darwin(v25, v27);
  v220 = (char *)&v196 - v28;
  v29 = sub_100003DB8(&qword_100328548);
  v218 = *(_QWORD *)(v29 - 8);
  v219 = v29;
  __chkstk_darwin(v29, v30);
  v217 = (char *)&v196 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v198 = sub_100003DB8(&qword_100328550);
  v209 = *(_QWORD *)(v198 - 8);
  __chkstk_darwin(v198, v32);
  v208 = (char *)&v196 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = sub_100003DB8(&qword_100328558);
  v206 = *(_QWORD *)(v207 - 8);
  __chkstk_darwin(v207, v34);
  v205 = (char *)&v196 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v203 = sub_100003DB8(&qword_100328560);
  v202 = *(_QWORD *)(v203 - 8);
  __chkstk_darwin(v203, v36);
  v201 = (char *)&v196 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v38, v39);
  v210 = (char *)&v196 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = sub_100003DB8(&qword_100328568);
  v199 = *(_QWORD *)(v200 - 8);
  __chkstk_darwin(v200, v41);
  v197 = (char *)&v196 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = type metadata accessor for SystemSettingsModel();
  v44 = swift_allocObject(v43, 44, 7);
  *(_QWORD *)(v44 + 32) = 0;
  *(_DWORD *)(v44 + 40) = 33685504;
  v45 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  *(_QWORD *)(v44 + 16) = PassthroughSubject.init()(v46);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  *(_QWORD *)(v44 + 24) = PassthroughSubject.init()(v47);
  *(_QWORD *)(v0 + 16) = v44;
  v48 = type metadata accessor for OrientationModel();
  v49 = swift_allocObject(v48, 105, 7);
  *(_OWORD *)(v49 + 32) = 0u;
  *(_OWORD *)(v49 + 48) = 0u;
  *(_OWORD *)(v49 + 64) = 0u;
  *(_OWORD *)(v49 + 80) = 0u;
  *(_QWORD *)(v49 + 96) = 0;
  *(_BYTE *)(v49 + 104) = 1;
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  *(_QWORD *)(v49 + 16) = PassthroughSubject.init()(v50);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  *(_QWORD *)(v49 + 24) = PassthroughSubject.init()(v51);
  *(_QWORD *)(v0 + 24) = v49;
  v52 = type metadata accessor for StewieModel();
  v53 = swift_allocObject(v52, 136, 7);
  sub_1001D5794();
  *(_QWORD *)(v1 + 32) = v53;
  v54 = type metadata accessor for TargetModel(0);
  v55 = swift_allocObject(v54, *(unsigned int *)(v54 + 48), *(unsigned __int16 *)(v54 + 52));
  *(_OWORD *)(v55 + 48) = 0u;
  *(_OWORD *)(v55 + 64) = 0u;
  *(_QWORD *)(v55 + 80) = 0;
  *(_BYTE *)(v55 + 88) = 1;
  v56 = v55 + OBJC_IVAR____TtC8SOSBuddy11TargetModel_link;
  v57 = type metadata accessor for LinkState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v56, 1, 1, v57);
  *(_QWORD *)(v55 + 32) = 0;
  *(_WORD *)(v55 + 40) = 0;
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  *(_QWORD *)(v55 + 16) = PassthroughSubject.init()(v58);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  *(_QWORD *)(v55 + 24) = PassthroughSubject.init()(v59);
  *(_QWORD *)(v1 + 40) = v55;
  v60 = type metadata accessor for LocationModel();
  v61 = swift_allocObject(v60, 44, 7);
  *(_QWORD *)(v61 + 32) = 0;
  *(_DWORD *)(v61 + 40) = 0x1000000;
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  *(_QWORD *)(v61 + 16) = PassthroughSubject.init()(v62);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  *(_QWORD *)(v61 + 24) = PassthroughSubject.init()(v63);
  *(_QWORD *)(v1 + 48) = v61;
  v64 = type metadata accessor for GuidanceModel();
  swift_allocObject(v64, 216, 7);
  *(_QWORD *)(v1 + 56) = sub_1001D049C();
  v65 = type metadata accessor for GuidanceMessagesModel();
  v66 = swift_allocObject(v65, 113, 7);
  sub_1001D3510();
  *(_QWORD *)(v1 + 64) = v66;
  v67 = type metadata accessor for ConnectionModel(0);
  swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
  *(_QWORD *)(v1 + 72) = sub_1001CAB44();
  v68 = type metadata accessor for ConversationModel();
  v69 = swift_allocObject(v68, 81, 7);
  *(_QWORD *)(v69 + 48) = 0;
  *(_QWORD *)(v69 + 56) = 0;
  *(_OWORD *)(v69 + 64) = xmmword_10025CA70;
  *(_BYTE *)(v69 + 80) = 0;
  *(_QWORD *)(v69 + 32) = 0;
  *(_WORD *)(v69 + 40) = 0;
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  *(_QWORD *)(v69 + 16) = PassthroughSubject.init()(v70);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  *(_QWORD *)(v69 + 24) = PassthroughSubject.init()(v71);
  *(_QWORD *)(v1 + 80) = v69;
  v72 = type metadata accessor for RoadsideAssistanceConversationModel();
  v73 = swift_allocObject(v72, 89, 7);
  *(_OWORD *)(v73 + 48) = xmmword_1002500E0;
  *(_QWORD *)(v73 + 32) = 0;
  *(_WORD *)(v73 + 40) = 0;
  *(_QWORD *)(v73 + 72) = 0;
  *(_QWORD *)(v73 + 80) = 0;
  *(_QWORD *)(v73 + 64) = 0;
  *(_BYTE *)(v73 + 88) = 0;
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  *(_QWORD *)(v73 + 16) = PassthroughSubject.init()(v74);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  *(_QWORD *)(v73 + 24) = PassthroughSubject.init()(v75);
  *(_QWORD *)(v1 + 88) = v73;
  v76 = type metadata accessor for ConnectivityModel();
  swift_allocObject(v76, 88, 7);
  *(_QWORD *)(v1 + 96) = sub_1001D39C0();
  v77 = type metadata accessor for CountryModel();
  v78 = swift_allocObject(v77, 65, 7);
  *(_QWORD *)(v78 + 32) = 0;
  *(_WORD *)(v78 + 40) = 0;
  *(_QWORD *)(v78 + 48) = 0;
  *(_QWORD *)(v78 + 56) = 0;
  *(_BYTE *)(v78 + 64) = 0;
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  *(_QWORD *)(v78 + 16) = PassthroughSubject.init()(v79);
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  *(_QWORD *)(v78 + 24) = PassthroughSubject.init()(v80);
  *(_QWORD *)(v1 + 104) = v78;
  v81 = type metadata accessor for ConnectionClosedModel(0);
  v82 = swift_allocObject(v81, *(unsigned int *)(v81 + 48), *(unsigned __int16 *)(v81 + 52));
  sub_1001D4EC8();
  *(_QWORD *)(v1 + 112) = v82;
  v83 = type metadata accessor for ServicePredictionsModel(0);
  v84 = swift_allocObject(v83, *(unsigned int *)(v83 + 48), *(unsigned __int16 *)(v83 + 52));
  sub_1001D89FC();
  *(_QWORD *)(v1 + 120) = v84;
  v85 = type metadata accessor for DeviceOrientationSource(0);
  swift_allocObject(v85, *(unsigned int *)(v85 + 48), *(unsigned __int16 *)(v85 + 52));
  *(_QWORD *)(v1 + 128) = sub_100188928();
  *(_QWORD *)(v1 + 136) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TargetConnectionSource(0)), "init");
  v229 = v5;
  v230 = v2;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100209204((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v86 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)(v1 + 144) = v86;
  swift_allocObject(v45, *(unsigned int *)(v45 + 48), *(unsigned __int16 *)(v45 + 52));
  *(_QWORD *)(v1 + 152) = PassthroughSubject.init()(v87);
  *(_BYTE *)(v1 + 160) = 0;
  v88 = sub_100003DB8(&qword_10031EF78);
  swift_allocObject(v88, *(unsigned int *)(v88 + 48), *(unsigned __int16 *)(v88 + 52));
  *(_QWORD *)(v1 + 168) = PassthroughSubject.init()(v89);
  v90 = *(unsigned int *)(v88 + 48);
  v91 = *(unsigned __int16 *)(v88 + 52);
  v204 = v88;
  swift_allocObject(v88, v90, v91);
  v93 = PassthroughSubject.init()(v92);
  v234 = v1 + 144;
  *(_QWORD *)(v1 + 176) = v93;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v94 = type metadata accessor for Logger(0);
  sub_10000D744(v94, (uint64_t)qword_10033FD18);
  v96 = swift_retain_n(v1, v95);
  v97 = Logger.logObject.getter(v96);
  v98 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v97, v98))
  {
    v99 = (uint8_t *)swift_slowAlloc(12, -1);
    v100 = (void *)swift_slowAlloc(32, -1);
    v235 = v100;
    *(_DWORD *)v99 = 136446210;
    v236 = (id)v1;
    v101 = type metadata accessor for ConnectionAssistantModels();
    v102 = swift_retain(v1);
    v103 = String.init<A>(describing:)(&v236, v101, v102);
    v105 = v104;
    v236 = (id)sub_100172BEC(v103, v104, (uint64_t *)&v235);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v236, v237, v99 + 4, v99 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v105);
    _os_log_impl((void *)&_mh_execute_header, v97, v98, "[%{public}s] init", v99, 0xCu);
    swift_arrayDestroy(v100, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v100, -1, -1);
    swift_slowDealloc(v99, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  v235 = *(id *)(*(_QWORD *)(v1 + 128) + 16);
  v106 = v235;
  v107 = sub_10000D75C();
  v108 = swift_retain(v106);
  v236 = (id)static OS_dispatch_queue.main.getter(v108);
  v233 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v231 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v233 - 8) + 56);
  v109 = (uint64_t)v210;
  v231(v210, 1, 1, v233);
  v110 = sub_100003DB8(&qword_100324AC8);
  v111 = sub_1000084FC(&qword_100328570, &qword_100324AC8, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v232 = sub_1000052EC((unint64_t *)&qword_10032B100, (uint64_t (*)(uint64_t))sub_10000D75C, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  v112 = v197;
  Publisher.receive<A>(on:options:)(&v236, v109, v110, v107, v111, v232);
  sub_100007FF0(v109, &qword_100329AF0);

  swift_release(v235);
  v113 = swift_allocObject(&unk_1002F7E88, 24, 7);
  swift_weakInit(v113 + 16);
  v114 = sub_1000084FC(&qword_100328578, &qword_100328568, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v115 = v200;
  v117 = Publisher<>.sink(receiveValue:)(sub_1001DE6E8, v113, v200, v114, v116);
  swift_release(v113);
  (*(void (**)(char *, uint64_t))(v199 + 8))(v112, v115);
  v118 = v234;
  swift_beginAccess(v234, &v235, 33, 0);
  AnyCancellable.store(in:)(v118);
  swift_endAccess(&v235);
  swift_release(v117);
  v235 = *(id *)(*(_QWORD *)(v1 + 128) + 24);
  v119 = swift_retain(v235);
  v236 = (id)static OS_dispatch_queue.main.getter(v119);
  v120 = v233;
  v231((char *)v109, 1, 1, v233);
  v121 = sub_100003DB8((uint64_t *)&unk_100324AD0);
  v122 = sub_1000084FC(&qword_100328580, (uint64_t *)&unk_100324AD0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v123 = v201;
  v124 = v232;
  Publisher.receive<A>(on:options:)(&v236, v109, v121, v107, v122, v232);
  sub_100007FF0(v109, &qword_100329AF0);

  swift_release(v235);
  v125 = swift_allocObject(&unk_1002F7E88, 24, 7);
  swift_weakInit(v125 + 16);
  v126 = sub_1000084FC(&qword_100328588, &qword_100328560, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v127 = v203;
  v129 = Publisher<>.sink(receiveValue:)(sub_1001DE6F0, v125, v203, v126, v128);
  swift_release(v125);
  (*(void (**)(char *, uint64_t))(v202 + 8))(v123, v127);
  v130 = v234;
  swift_beginAccess(v234, &v235, 33, 0);
  AnyCancellable.store(in:)(v130);
  swift_endAccess(&v235);
  swift_release(v129);
  v235 = *(id *)(*(_QWORD *)(v1 + 136) + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource_connectionDidChange);
  v131 = swift_retain(v235);
  v236 = (id)static OS_dispatch_queue.main.getter(v131);
  v132 = v120;
  v133 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v231;
  v231((char *)v109, 1, 1, v132);
  v134 = sub_100003DB8(&qword_10031FA88);
  v135 = sub_1000084FC(&qword_100328590, &qword_10031FA88, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v136 = v205;
  Publisher.receive<A>(on:options:)(&v236, v109, v134, v107, v135, v124);
  sub_100007FF0(v109, &qword_100329AF0);

  swift_release(v235);
  v137 = swift_allocObject(&unk_1002F7E88, 24, 7);
  swift_weakInit(v137 + 16);
  v138 = sub_1000084FC(&qword_100328598, &qword_100328558, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v139 = v207;
  v141 = Publisher<>.sink(receiveValue:)(sub_1001DE6F8, v137, v207, v138, v140);
  swift_release(v137);
  (*(void (**)(char *, uint64_t))(v206 + 8))(v136, v139);
  v142 = v234;
  swift_beginAccess(v234, &v235, 33, 0);
  AnyCancellable.store(in:)(v142);
  swift_endAccess(&v235);
  swift_release(v141);
  v235 = *(id *)(*(_QWORD *)(v1 + 136) + OBJC_IVAR____TtC8SOSBuddy22TargetConnectionSource_carrierNameDidChange);
  v143 = swift_retain(v235);
  v236 = (id)static OS_dispatch_queue.main.getter(v143);
  v133(v109, 1, 1, v233);
  v144 = sub_100003DB8(&qword_10031FA90);
  v145 = sub_1000084FC(&qword_1003285A0, &qword_10031FA90, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v146 = v208;
  Publisher.receive<A>(on:options:)(&v236, v109, v144, v107, v145, v124);
  sub_100007FF0(v109, &qword_100329AF0);

  swift_release(v235);
  v147 = swift_allocObject(&unk_1002F7E88, 24, 7);
  swift_weakInit(v147 + 16);
  v148 = sub_1000084FC(&qword_1003285A8, &qword_100328550, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v149 = v198;
  v151 = Publisher<>.sink(receiveValue:)(sub_1001DE700, v147, v198, v148, v150);
  swift_release(v147);
  (*(void (**)(char *, uint64_t))(v209 + 8))(v146, v149);
  v152 = v234;
  swift_beginAccess(v234, &v235, 33, 0);
  AnyCancellable.store(in:)(v152);
  swift_endAccess(&v235);
  swift_release(v151);
  v153 = *(_QWORD *)(v1 + 32);
  v235 = *(id *)(*(_QWORD *)(v1 + 24) + 24);
  v236 = *(id *)(v153 + 24);
  v209 = sub_1000084FC((unint64_t *)&qword_1003264A0, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v154 = v211;
  Publisher.merge(with:)(&v236, v45, v209);
  v235 = *(id *)(*(_QWORD *)(v1 + 40) + 24);
  v155 = v213;
  v156 = v221;
  Publishers.MergeMany.merge(with:)(&v235, v221);
  v157 = *(double (**)(char *, uint64_t))(v212 + 8);
  v157(v154, v156);
  v235 = *(id *)(*(_QWORD *)(v1 + 72) + 24);
  v158 = v214;
  Publishers.MergeMany.merge(with:)(&v235, v156);
  v157(v155, v156);
  v235 = *(id *)(*(_QWORD *)(v1 + 48) + 24);
  v159 = v215;
  Publishers.MergeMany.merge(with:)(&v235, v156);
  v157(v158, v156);
  v235 = *(id *)(*(_QWORD *)(v1 + 120) + 24);
  v160 = v216;
  Publishers.MergeMany.merge(with:)(&v235, v156);
  v157(v159, v156);
  v235 = *(id *)(v1 + 152);
  v161 = v220;
  Publishers.MergeMany.merge(with:)(&v235, v156);
  v162.n128_f64[0] = v157(v160, v156);
  v163 = v107;
  v196 = v107;
  v235 = (id)static OS_dispatch_queue.main.getter(v162);
  v231((char *)v109, 1, 1, v233);
  v233 = sub_1000084FC(&qword_1003285B0, &qword_100328540, (uint64_t)&protocol conformance descriptor for Publishers.MergeMany<A>);
  v164 = v217;
  Publisher.receive<A>(on:options:)(&v235, v109, v156, v163, v233, v232);
  sub_100007FF0(v109, &qword_100329AF0);

  v157(v161, v156);
  v165 = swift_allocObject(&unk_1002F7E88, 24, 7);
  swift_weakInit(v165 + 16);
  v166 = swift_allocObject(&unk_1002F7EB0, 32, 7);
  *(_QWORD *)(v166 + 16) = sub_1001DE708;
  *(_QWORD *)(v166 + 24) = v165;
  v167 = sub_1000084FC(&qword_1003285B8, &qword_100328548, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v168 = v219;
  v170 = Publisher<>.sink(receiveValue:)(sub_100021640, v166, v219, v167, v169);
  swift_release(v166);
  (*(void (**)(char *, uint64_t))(v218 + 8))(v164, v168);
  v171 = v234;
  swift_beginAccess(v234, &v235, 33, 0);
  AnyCancellable.store(in:)(v171);
  swift_endAccess(&v235);
  swift_release(v170);
  v235 = *(id *)(*(_QWORD *)(v1 + 24) + 24);
  v236 = *(id *)(*(_QWORD *)(v1 + 56) + 24);
  v172 = Publisher.merge(with:)(&v236, v45, v209);
  v173 = v222;
  v174.n128_f64[0] = OS_dispatch_queue.SchedulerTimeType.Stride.init(floatLiteral:)(v172, 1.0);
  v175 = v196;
  v176 = (void *)static OS_dispatch_queue.main.getter(v174);
  v235 = v176;
  v177 = v225;
  Publisher.throttle<A>(for:scheduler:latest:)(v173, &v235, 1, v156, v175, v233, v232);

  (*(void (**)(char *, uint64_t))(v223 + 8))(v173, v224);
  v157(v161, v156);
  v178 = swift_allocObject(&unk_1002F7E88, 24, 7);
  swift_weakInit(v178 + 16);
  v179 = swift_allocObject(&unk_1002F7ED8, 32, 7);
  *(_QWORD *)(v179 + 16) = sub_1001DE710;
  *(_QWORD *)(v179 + 24) = v178;
  v180 = sub_1000084FC(&qword_1003285C0, &qword_100328538, (uint64_t)&protocol conformance descriptor for Publishers.Throttle<A, B>);
  v181 = v227;
  v183 = Publisher<>.sink(receiveValue:)(sub_1000216F8, v179, v227, v180, v182);
  swift_release(v179);
  (*(void (**)(char *, uint64_t))(v226 + 8))(v177, v181);
  v184 = v171;
  swift_beginAccess(v171, &v235, 33, 0);
  AnyCancellable.store(in:)(v171);
  swift_endAccess(&v235);
  swift_release(v183);
  v235 = *(id *)(v1 + 168);
  v185 = sub_1000084FC(&qword_10032B1A0, &qword_10031EF78, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v186 = v229;
  v187 = v204;
  Publisher<>.removeDuplicates()(v204, v185, &protocol witness table for String);
  v188 = sub_1000084FC(&qword_1003285C8, &qword_100328530, (uint64_t)&protocol conformance descriptor for Publishers.RemoveDuplicates<A>);
  v189 = v230;
  v191 = Publisher<>.sink(receiveValue:)(sub_1001C4A98, 0, v230, v188, v190);
  v192 = *(void (**)(char *, uint64_t))(v228 + 8);
  v192(v186, v189);
  swift_beginAccess(v184, &v235, 33, 0);
  AnyCancellable.store(in:)(v184);
  swift_endAccess(&v235);
  swift_release(v191);
  v235 = *(id *)(v1 + 176);
  v193.n128_f64[0] = Publisher<>.removeDuplicates()(v187, v185, &protocol witness table for String);
  v194 = Publisher<>.sink(receiveValue:)(sub_1001C4A98, 0, v189, v188, v193);
  v192(v186, v189);
  swift_beginAccess(v184, &v235, 33, 0);
  AnyCancellable.store(in:)(v184);
  swift_endAccess(&v235);
  swift_release(v194);
  return v1;
}

uint64_t sub_1001C17C8(uint64_t *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  char v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  uint64_t v35;
  _BYTE v36[24];
  _OWORD v37[4];
  uint64_t v38;
  double v39[9];
  double v40[10];

  v2 = *((_OWORD *)a1 + 1);
  v3 = *((_OWORD *)a1 + 3);
  v37[2] = *((_OWORD *)a1 + 2);
  v37[3] = v3;
  v5 = a1[7];
  v4 = a1[8];
  v38 = v4;
  v37[0] = *(_OWORD *)a1;
  v37[1] = v2;
  v6 = *a1;
  v7 = a1[1];
  v9 = a1[2];
  v8 = a1[3];
  v10 = a1[4];
  v11 = a1[5];
  v12 = a2 + 16;
  v35 = a1[6];
  swift_beginAccess(a2 + 16, v36, 0, 0);
  result = swift_weakLoadStrong(v12);
  if (result)
  {
    v14 = result;
    v15 = *(_QWORD *)(result + 24);
    swift_retain(v15);
    swift_release(v14);
    v16 = *(double *)(v15 + 32);
    v33 = *(double *)(v15 + 48);
    v34 = *(double *)(v15 + 40);
    v31 = *(double *)(v15 + 64);
    v32 = *(double *)(v15 + 56);
    v29 = *(double *)(v15 + 80);
    v30 = *(double *)(v15 + 72);
    v27 = *(double *)(v15 + 96);
    v28 = *(double *)(v15 + 88);
    v26 = *(_BYTE *)(v15 + 104);
    if ((v26 & 1) != 0)
      goto LABEL_4;
    v40[0] = *(double *)(v15 + 32);
    v40[1] = v34;
    v40[2] = v33;
    v40[3] = v32;
    v40[4] = v31;
    v40[5] = v30;
    v40[6] = v29;
    v40[7] = v28;
    v40[8] = v27;
    if (!sub_100192494(v40, (double *)v37))
    {
LABEL_4:
      v25 = v16;
      v17 = v5;
      v18 = v11;
      v19 = v7;
      v20 = sub_100003DB8(&qword_10032B0E0);
      v21 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      v22 = v20;
      v7 = v19;
      v11 = v18;
      v5 = v17;
      Subject<>.send()(v22, v21);
      v16 = v25;
    }
    *(_QWORD *)(v15 + 32) = v6;
    *(_QWORD *)(v15 + 40) = v7;
    *(_QWORD *)(v15 + 48) = v9;
    *(_QWORD *)(v15 + 56) = v8;
    *(_QWORD *)(v15 + 64) = v10;
    *(_QWORD *)(v15 + 72) = v11;
    *(_QWORD *)(v15 + 80) = v35;
    *(_QWORD *)(v15 + 88) = v5;
    *(_QWORD *)(v15 + 96) = v4;
    *(_BYTE *)(v15 + 104) = 0;
    if ((v26 & 1) != 0)
      goto LABEL_7;
    v39[0] = v16;
    v39[1] = v34;
    v39[2] = v33;
    v39[3] = v32;
    v39[4] = v31;
    v39[5] = v30;
    v39[6] = v29;
    v39[7] = v28;
    v39[8] = v27;
    if (!sub_100192494((double *)v37, v39))
    {
LABEL_7:
      v23 = sub_100003DB8(&qword_10032B0E0);
      v24 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v23, v24);
    }
    return swift_release(v15);
  }
  return result;
}

_QWORD *sub_1001C1A04(char *a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *result;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t ObjectType;
  void (*v30)(uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  _BYTE v37[64];
  _BYTE v38[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v38, 0, 0);
  result = (_QWORD *)swift_weakLoadStrong(v3);
  if (!result)
    return result;
  v5 = result;
  v6 = result[2];
  v7 = *(_QWORD *)(v6 + 32);
  v8 = __CFADD__(v7, 1);
  v9 = v7 + 1;
  if (v8)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  *(_QWORD *)(v6 + 32) = v9;
  v10 = *a1;
  swift_retain(v6);
  sub_1001C6D00(v10);
  sub_1001C7044(a1[1]);
  sub_1001EDB64(v6);
  swift_release(v6);
  if (*((_BYTE *)v5 + 160) != 1)
    return (_QWORD *)swift_release(v5);
  v11 = sub_100003DB8(&qword_1003285D0);
  result = (_QWORD *)swift_initStackObject(v11, v37);
  *((_OWORD *)result + 1) = xmmword_10024DEE0;
  v12 = v5[7];
  result[4] = v12;
  v13 = result + 4;
  result[5] = &off_1002F8F58;
  v14 = v5[8];
  result[6] = v14;
  result[7] = &off_1002F8F58;
  v15 = *(_QWORD *)(v12 + 32);
  v8 = __CFADD__(v15, 1);
  v16 = v15 + 1;
  if (v8)
    goto LABEL_12;
  *(_QWORD *)(v12 + 32) = v16;
  v17 = *(_QWORD *)(v14 + 32);
  v8 = __CFADD__(v17, 1);
  v18 = v17 + 1;
  if (v8)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  v19 = result;
  *(_QWORD *)(v14 + 32) = v18;
  v20 = (uint64_t)&a1[*(int *)(type metadata accessor for DeviceOrientationSource.DeviceOrientationErrorState(0) + 24)];
  swift_retain_n(v12, v21);
  swift_retain(v14);
  sub_1001C1C58(v20);
  swift_release(v12);
  v22 = v5[8];
  swift_retain(v22);
  v23 = sub_1001DDD40(v20);
  v24 = *(_QWORD *)(v22 + 80);
  *(_QWORD *)(v22 + 80) = v23;
  swift_release(v24);
  v25 = *(_QWORD *)(v22 + 80);
  v26 = v25;
  if (!v25)
  {
    v26 = *(_QWORD *)(v22 + 88);
    swift_retain(v26);
  }
  swift_retain(v25);
  sub_1001D1238(v26);
  swift_release(v22);
  v27 = v19[6];
  v28 = v19[7];
  swift_bridgeObjectRetain(v19);
  ObjectType = swift_getObjectType(v27);
  v30 = *(void (**)(uint64_t, uint64_t))(v28 + 16);
  swift_unknownObjectRetain(v27);
  v30(ObjectType, v28);
  swift_unknownObjectRelease(v27);
  v31 = v19[4];
  v32 = v19[5];
  v33 = swift_getObjectType(v31);
  v34 = *(void (**)(uint64_t, uint64_t))(v32 + 16);
  swift_unknownObjectRetain(v31);
  v34(v33, v32);
  swift_release(v5);
  swift_bridgeObjectRelease(v19);
  swift_unknownObjectRelease(v31);
  swift_setDeallocating(v19);
  v35 = v19[2];
  v36 = sub_100003DB8(&qword_1003285E0);
  return (_QWORD *)swift_arrayDestroy(v13, v35, v36);
}

double sub_1001C1C58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  double result;
  uint64_t v8;
  uint64_t v9;

  if (*(_QWORD *)(v1 + 32))
  {
    *(_BYTE *)(v1 + 40) = 1;
  }
  else
  {
    v3 = sub_100003DB8(&qword_10032B0E0);
    v4 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v3, v4);
  }
  v5 = type metadata accessor for DeviceOrientationError(0);
  v6 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 48))(a1, 1, v5) != 1;
  sub_1001D03E4(v6);
  sub_1001CF5FC();
  if (*(_QWORD *)(v1 + 32))
  {
    *(_BYTE *)(v1 + 41) = 1;
  }
  else
  {
    v8 = sub_100003DB8(&qword_10032B0E0);
    v9 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v8, v9).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001C1D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double *v29;
  uint64_t result;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  double *v40;
  double v41;
  double v42;
  double v43;
  uint64_t v44;
  double v45;
  double v46;
  double v47;
  double v48;
  double v49;
  double v50;
  char v51;
  __n128 v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int16 v68;
  unint64_t v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  double *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  _BYTE *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  BOOL v141;
  char v142;
  unint64_t v143;
  uint64_t i;
  uint64_t v145;
  uint64_t v146;
  uint64_t ObjectType;
  void (*v148)(uint64_t, uint64_t);
  uint64_t v149;
  void (*v150)(__n128);
  uint64_t v151;
  __n128 v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  char *v163;
  char *v164;
  char *v165;
  _QWORD *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  double *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int *v177;
  _BYTE v178[24];
  _BYTE v179[24];
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  __int16 v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  __int16 v199;
  uint64_t v200;
  _BYTE v201[48];
  _BYTE v202[48];
  _BYTE v203[40];
  _BYTE v204[40];
  _BYTE v205[72];
  _BYTE v206[48];
  _BYTE v207[48];
  _BYTE v208[72];
  char v209[8];
  uint64_t v210;
  char v211;
  char v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  __int16 v218;
  _QWORD v219[9];
  _BYTE v220[56];

  v4 = sub_100003DB8(&qword_10031F888);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v153 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v153 - v10;
  v12 = sub_100003DB8(&qword_10031F880);
  v14 = __chkstk_darwin(v12, v13);
  v16 = (char *)&v153 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v153 - v18;
  v20 = sub_100003DB8((uint64_t *)&unk_10031B230);
  v22 = __chkstk_darwin(v20, v21);
  v24 = (char *)&v153 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  v167 = (uint64_t)&v153 - v26;
  v177 = (int *)type metadata accessor for ConnectionAssistantState(0);
  __chkstk_darwin(v177, v27);
  v29 = (double *)((char *)&v153 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  a2 += 16;
  swift_beginAccess(a2, &v200, 0, 0);
  result = swift_weakLoadStrong(a2);
  if (!result)
    return result;
  v31 = (_QWORD *)result;
  v161 = v24;
  v162 = v19;
  v163 = v16;
  v164 = v11;
  v165 = v8;
  v32 = sub_100003DB8(&qword_1003285D0);
  v33 = swift_allocObject(v32, 240, 7);
  *(_OWORD *)(v33 + 16) = xmmword_10025CA80;
  v34 = v31[4];
  *(_QWORD *)(v33 + 32) = v34;
  *(_QWORD *)(v33 + 40) = &off_1002F8F58;
  v174 = a1;
  v35 = v31[5];
  *(_QWORD *)(v33 + 48) = v35;
  *(_QWORD *)(v33 + 56) = &off_1002F8F58;
  v36 = v31[6];
  *(_QWORD *)(v33 + 64) = v36;
  *(_QWORD *)(v33 + 72) = &off_1002F8F58;
  v37 = v31[9];
  *(_QWORD *)(v33 + 80) = v37;
  *(_QWORD *)(v33 + 88) = &off_1002F8F58;
  v168 = v31[10];
  *(_QWORD *)(v33 + 96) = v168;
  *(_QWORD *)(v33 + 104) = &off_1002F8F58;
  v169 = v31[11];
  *(_QWORD *)(v33 + 112) = v169;
  *(_QWORD *)(v33 + 120) = &off_1002F8F58;
  v38 = v31[7];
  *(_QWORD *)(v33 + 128) = v38;
  *(_QWORD *)(v33 + 136) = &off_1002F8F58;
  v170 = *(_QWORD *)(v38 + 72);
  *(_QWORD *)(v33 + 144) = v170;
  *(_QWORD *)(v33 + 152) = &off_1002F8F58;
  v171 = v31[8];
  *(_QWORD *)(v33 + 160) = v171;
  *(_QWORD *)(v33 + 168) = &off_1002F8F58;
  v172 = v31[13];
  *(_QWORD *)(v33 + 176) = v172;
  *(_QWORD *)(v33 + 184) = &off_1002F8F58;
  v175 = v31[14];
  *(_QWORD *)(v33 + 192) = v175;
  *(_QWORD *)(v33 + 200) = &off_1002F8F58;
  v176 = v31[12];
  *(_QWORD *)(v33 + 208) = v176;
  *(_QWORD *)(v33 + 216) = &off_1002F8F58;
  v166 = v31;
  v155 = v31[15];
  *(_QWORD *)(v33 + 224) = v155;
  *(_QWORD *)(v33 + 232) = &off_1002F8F58;
  swift_getObjectType(v34);
  v173 = v29;
  v156 = v34;
  sub_1001EDC38();
  swift_getObjectType(v35);
  v157 = v35;
  sub_1001EDC38();
  swift_getObjectType(v36);
  v158 = v36;
  sub_1001EDC38();
  swift_getObjectType(v37);
  v159 = v37;
  sub_1001EDC38();
  swift_getObjectType(v168);
  sub_1001EDC38();
  swift_getObjectType(v169);
  sub_1001EDC38();
  swift_getObjectType(v38);
  v160 = v38;
  sub_1001EDC38();
  swift_getObjectType(v170);
  sub_1001EDC38();
  swift_getObjectType(v171);
  v39 = v155;
  sub_1001EDC38();
  swift_getObjectType(v172);
  sub_1001EDC38();
  swift_getObjectType(v175);
  sub_1001EDC38();
  swift_getObjectType(v176);
  sub_1001EDC38();
  swift_getObjectType(v39);
  sub_1001EDC38();
  v40 = v173;
  sub_1000E1F30(v174, (uint64_t)v173, type metadata accessor for ConnectionAssistantState);
  sub_10000B458((uint64_t)v40, (uint64_t)v207, &qword_100319FB8);
  v41 = *v40;
  v43 = v40[1];
  v42 = v40[2];
  v44 = *(_QWORD *)(v39 + 56);
  v46 = v40[3];
  v45 = v40[4];
  v48 = *(double *)(v39 + 64);
  v47 = *(double *)(v39 + 72);
  v50 = *(double *)(v39 + 80);
  v49 = *(double *)(v39 + 88);
  v51 = *(_BYTE *)(v39 + 96);
  sub_10000B458((uint64_t)v207, v39 + 56, &qword_100319FB8);
  sub_10000B458((uint64_t)v207, (uint64_t)v220, &qword_100319FB8);
  if ((v220[40] & 1) != 0)
  {
    swift_retain(v39);
    v53 = v166;
    if ((v51 & 1) != 0)
    {
      swift_retain(v156);
      swift_retain(v157);
      swift_retain(v158);
      swift_retain(v159);
      swift_retain(v168);
      swift_retain(v169);
      swift_retain(v160);
      swift_retain(v170);
      swift_retain(v171);
      swift_retain(v172);
      swift_retain(v175);
      swift_retain(v176);
      goto LABEL_16;
    }
  }
  else
  {
    if ((v51 & 1) == 0)
    {
      swift_retain_n(v39, v52);
      swift_retain(v156);
      swift_retain(v157);
      swift_retain(v158);
      swift_retain(v159);
      swift_retain(v168);
      swift_retain(v169);
      swift_retain(v160);
      swift_retain(v170);
      swift_retain(v171);
      swift_retain(v172);
      swift_retain(v175);
      swift_retain(v176);
      v141 = *(_QWORD *)&v41 == v44;
      v53 = v166;
      if (v141)
      {
        v55 = static Angle.== infix(_:_:)(v54, v43, v48);
        if ((v55 & 1) != 0)
        {
          v56 = static Angle.== infix(_:_:)(v55, v42, v47);
          if ((v56 & 1) != 0)
          {
            v57 = static Angle.== infix(_:_:)(v56, v46, v50);
            if ((v57 & 1) != 0 && (static Angle.== infix(_:_:)(v57, v45, v49) & 1) != 0)
              goto LABEL_15;
          }
        }
      }
      goto LABEL_14;
    }
    swift_retain(v39);
    v53 = v166;
  }
  swift_retain(v39);
  swift_retain(v156);
  swift_retain(v157);
  swift_retain(v158);
  swift_retain(v159);
  swift_retain(v168);
  swift_retain(v169);
  swift_retain(v160);
  swift_retain(v170);
  swift_retain(v171);
  swift_retain(v172);
  swift_retain(v175);
  swift_retain(v176);
LABEL_14:
  sub_1001D6CD8();
  sub_1001D59C4();
LABEL_15:
  swift_release(v39);
LABEL_16:
  v58 = v53[4];
  v59 = (uint64_t)v40 + v177[14];
  v60 = *(_QWORD *)(v59 + 8);
  v170 = *(_QWORD *)v59;
  v171 = v59;
  v172 = *(_QWORD *)(v59 + 16);
  v61 = *(_QWORD *)(v59 + 24);
  v175 = *(_QWORD *)(v59 + 32);
  v176 = v61;
  v62 = *(_QWORD *)(v59 + 40);
  v159 = *(_QWORD *)(v59 + 48);
  v160 = v62;
  v168 = *(_QWORD *)(v59 + 56);
  LODWORD(v169) = *(unsigned __int16 *)(v59 + 64);
  sub_10000B458(v58 + 56, (uint64_t)v208, &qword_100319FD8);
  v64 = *(_QWORD *)(v58 + 56);
  v63 = *(_QWORD *)(v58 + 64);
  v65 = *(_QWORD *)(v58 + 72);
  v66 = *(_QWORD *)(v58 + 88);
  v154 = *(_QWORD *)(v58 + 80);
  v155 = v66;
  v67 = *(_QWORD *)(v58 + 104);
  v156 = *(_QWORD *)(v58 + 96);
  v157 = v67;
  v158 = *(_QWORD *)(v58 + 112);
  v68 = *(_WORD *)(v58 + 120);
  sub_10000B458((uint64_t)v208, (uint64_t)v219, &qword_100319FD8);
  if (!v219[1])
  {
    v77 = v60;
    if (!v60)
    {
      v60 = 0;
      swift_retain(v58);
      v70 = v159;
      v72 = v160;
      v75 = v168;
      sub_10007F464(v170, 0, v172, v176, v175, v160, v159, v168);
      v76 = v173;
      goto LABEL_26;
    }
LABEL_24:
    v182 = v64;
    v183 = v63;
    v184 = v65;
    v185 = v154;
    v186 = v155;
    v187 = v156;
    v70 = v159;
    v188 = v157;
    v189 = v158;
    v190 = v68;
    v78 = v170;
    v191 = v170;
    v192 = v77;
    v79 = v172;
    v193 = v172;
    v194 = v176;
    v80 = v168;
    v72 = v160;
    v195 = v175;
    v196 = v160;
    v197 = v159;
    v198 = v168;
    v199 = v169;
    v81 = v77;
    sub_10007F464(v170, v77, v172, v176, v175, v160, v159, v168);
    sub_10007F4D4((uint64_t)v208, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007F464);
    swift_retain(v58);
    v82 = v78;
    v53 = v166;
    v83 = v79;
    v75 = v80;
    sub_10007F464(v82, v81, v83, v176, v175, v72, v70, v80);
    sub_10007F3C0(&v182);
    v76 = v173;
    v60 = v81;
    if (*(_QWORD *)(v58 + 32))
      goto LABEL_20;
    goto LABEL_25;
  }
  if (!v60)
  {
    sub_10007F4D4((uint64_t)v208, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007F464);
    v77 = 0;
    goto LABEL_24;
  }
  LOBYTE(v182) = v170;
  v183 = v60;
  LOWORD(v184) = v172 & 0xFF01;
  v185 = v176;
  v186 = v175;
  v187 = v160;
  v188 = v159;
  v189 = v168;
  v190 = v169;
  v69 = v65 >> 8;
  v209[0] = v64;
  v210 = v63;
  v70 = v159;
  v71 = v65 & 1;
  v72 = v160;
  v73 = v170;
  v211 = v71;
  v212 = v69;
  v213 = v154;
  v214 = v155;
  v215 = v156;
  v216 = v157;
  v217 = v158;
  v218 = v68;
  v74 = sub_10001AC88((uint64_t)v209, (uint64_t)&v182);
  sub_10007F4D4((uint64_t)v208, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007F464);
  swift_retain(v58);
  v75 = v168;
  sub_10007F464(v73, v60, v172, v176, v175, v72, v70, v168);
  v76 = v173;
  if ((v74 & 1) == 0)
  {
    if (*(_QWORD *)(v58 + 32))
    {
LABEL_20:
      *(_BYTE *)(v58 + 40) = 1;
      goto LABEL_26;
    }
LABEL_25:
    v168 = *(_QWORD *)(v58 + 16);
    v84 = sub_100003DB8(&qword_10032B0E0);
    v85 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v84, v85);
  }
LABEL_26:
  v86 = *(_QWORD *)(v58 + 56);
  v87 = *(_QWORD *)(v58 + 64);
  v88 = *(_QWORD *)(v58 + 72);
  v89 = *(_QWORD *)(v58 + 80);
  v90 = *(_QWORD *)(v58 + 88);
  v91 = *(_QWORD *)(v58 + 96);
  v92 = *(_QWORD *)(v58 + 104);
  v93 = *(_QWORD *)(v58 + 112);
  *(_QWORD *)(v58 + 56) = v170;
  *(_QWORD *)(v58 + 64) = v60;
  v94 = v176;
  *(_QWORD *)(v58 + 72) = v172;
  *(_QWORD *)(v58 + 80) = v94;
  *(_QWORD *)(v58 + 88) = v175;
  *(_QWORD *)(v58 + 96) = v72;
  *(_QWORD *)(v58 + 104) = v70;
  *(_QWORD *)(v58 + 112) = v75;
  *(_WORD *)(v58 + 120) = v169;
  sub_10007ED6C(v86, v87, v88, v89, v90, v91, v92, v93);
  sub_1001D5288((uint64_t)v208);
  sub_10007F4D4((uint64_t)v208, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007ED6C);
  swift_release(v58);
  v95 = v53[5];
  sub_10000B458(v95 + 48, (uint64_t)v206, &qword_100319FB8);
  swift_retain(v95);
  sub_1001C714C((uint64_t)v207);
  sub_10000B458((uint64_t)v207, v95 + 48, &qword_100319FB8);
  sub_1001C729C((uint64_t)v206);
  swift_release(v95);
  v96 = v53[5];
  v97 = (uint64_t)v76 + v177[9];
  v98 = v167;
  sub_10000B234(v97, v167, (uint64_t *)&unk_10031B230);
  v99 = v96 + OBJC_IVAR____TtC8SOSBuddy11TargetModel_link;
  swift_beginAccess(v96 + OBJC_IVAR____TtC8SOSBuddy11TargetModel_link, &v181, 0, 0);
  v100 = (uint64_t)v161;
  sub_10000B234(v99, (uint64_t)v161, (uint64_t *)&unk_10031B230);
  sub_1001C7660(v98);
  swift_beginAccess(v99, v205, 33, 0);
  sub_100175998(v98, v99, (uint64_t *)&unk_10031B230);
  swift_endAccess(v205);
  sub_1001C78D8(v100);
  sub_100007FF0(v98, (uint64_t *)&unk_10031B230);
  sub_100007FF0(v100, (uint64_t *)&unk_10031B230);
  v101 = v53[9];
  sub_10000B458(v171, (uint64_t)v205, &qword_100319FD8);
  swift_retain(v101);
  sub_10007F4D4((uint64_t)v205, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007F464);
  sub_1001C2DF0(v97, (uint64_t)v205);
  sub_10007F4D4((uint64_t)v205, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007ED6C);
  swift_release(v101);
  v102 = v53[10];
  v103 = v177;
  sub_10000B458((uint64_t)v76 + v177[10], (uint64_t)v204, &qword_100322A58);
  sub_10000B458(v102 + 48, (uint64_t)v203, &qword_100322A58);
  swift_retain(v102);
  sub_1001D3F64((uint64_t)v204);
  sub_10000B458((uint64_t)v204, v102 + 48, &qword_100322A58);
  sub_1001D40BC((uint64_t)v203);
  swift_release(v102);
  v104 = v53[11];
  sub_10000B458((uint64_t)v76 + v103[11], (uint64_t)v202, &qword_100319D78);
  sub_10000B458(v104 + 48, (uint64_t)v201, &qword_100319D78);
  swift_retain(v104);
  sub_1001D441C((uint64_t)v202);
  sub_10000B458((uint64_t)v202, v104 + 48, &qword_100319D78);
  sub_1001D4598((uint64_t)v201);
  swift_release(v104);
  v105 = v53[7];
  LOBYTE(v97) = *((_BYTE *)v76 + 41);
  swift_retain(v105);
  sub_1001C3198(v97);
  swift_release(v105);
  v106 = *(_QWORD *)(v53[7] + 72);
  v107 = (uint64_t)v162;
  sub_10000B234((uint64_t)v76 + v103[7], (uint64_t)v162, &qword_10031F880);
  v108 = v106 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__serviceOutages;
  swift_beginAccess(v106 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__serviceOutages, &v180, 0, 0);
  v109 = (uint64_t)v163;
  sub_10000B234(v108, (uint64_t)v163, &qword_10031F880);
  swift_retain(v106);
  sub_1001C8B08(v107);
  swift_beginAccess(v108, v179, 33, 0);
  sub_100175998(v107, v108, &qword_10031F880);
  swift_endAccess(v179);
  sub_1001C8DDC(v109);
  sub_100007FF0(v107, &qword_10031F880);
  sub_100007FF0(v109, &qword_10031F880);
  swift_release(v106);
  v110 = *(_QWORD *)(v53[7] + 72);
  v111 = (uint64_t)v164;
  sub_10000B234((uint64_t)v76 + v103[8], (uint64_t)v164, &qword_10031F888);
  v112 = v110 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__silencePeriod;
  swift_beginAccess(v110 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__silencePeriod, v179, 0, 0);
  v113 = (uint64_t)v165;
  sub_10000B234(v112, (uint64_t)v165, &qword_10031F888);
  swift_retain(v110);
  sub_1001C96BC(v111);
  swift_beginAccess(v112, v178, 33, 0);
  sub_100175998(v111, v112, &qword_10031F888);
  swift_endAccess(v178);
  sub_1001C997C(v113);
  sub_100007FF0(v111, &qword_10031F888);
  sub_100007FF0(v113, &qword_10031F888);
  swift_release(v110);
  v114 = v53[6];
  LOWORD(v97) = *((unsigned __int8 *)v76 + 42);
  LOWORD(v112) = *((unsigned __int8 *)v76 + 43);
  swift_retain(v114);
  sub_1001C3270(v97 | ((_WORD)v112 << 8));
  swift_release(v114);
  v115 = v53[13];
  v116 = (uint64_t *)((char *)v76 + v103[12]);
  v117 = *v116;
  v118 = v116[1];
  v119 = *(_QWORD *)(v115 + 48);
  v120 = *(_QWORD *)(v115 + 56);
  swift_bridgeObjectRetain(v120);
  swift_retain(v115);
  swift_bridgeObjectRetain(v118);
  sub_1001D4958(v117, v118);
  v121 = *(_QWORD *)(v115 + 56);
  *(_QWORD *)(v115 + 48) = v117;
  *(_QWORD *)(v115 + 56) = v118;
  swift_bridgeObjectRelease(v121);
  sub_1001D4A08(v119, v120);
  swift_release(v115);
  swift_bridgeObjectRelease(v120);
  v122 = v53[14];
  v123 = (uint64_t)v76 + v103[13];
  v124 = type metadata accessor for TargetConnection(0);
  LODWORD(v119) = *(unsigned __int8 *)(v174 + *(int *)(v124 + 24));
  swift_retain(v122);
  sub_1001C3338(v123, v119);
  swift_release(v122);
  v125 = v53[7];
  LOBYTE(v123) = *(_BYTE *)(v125 + 65);
  *(_BYTE *)(v125 + 65) = *(_BYTE *)(*(_QWORD *)(v53[9] + 56) + 120);
  swift_retain(v125);
  sub_1001CF890(v123);
  swift_release(v125);
  v126 = v53[6];
  v127 = v53[7];
  v128 = (*(_BYTE *)(v126 + 43) & 1) == 0 && (*(_BYTE *)(v126 + 42) & 1) == 0;
  v129 = *(_BYTE *)(v127 + 66);
  *(_BYTE *)(v127 + 66) = v128;
  swift_retain(v127);
  sub_1001CFB54(v129);
  swift_release(v127);
  v130 = v53[8];
  v131 = v53[9];
  v132 = v53[6];
  v133 = (_BYTE *)v53[7];
  v134 = v53[4];
  v135 = v53[15];
  swift_retain(v130);
  swift_retain(v131);
  swift_retain(v132);
  swift_retain(v133);
  swift_retain(v134);
  swift_retain(v135);
  sub_1001C3B7C(v131, v132, v133, v134, v135);
  swift_release(v130);
  swift_release(v131);
  swift_release(v132);
  swift_release(v133);
  swift_release(v134);
  swift_release(v135);
  v136 = v53[12];
  v137 = v53[9];
  v138 = v53[6];
  v139 = v53[7];
  v140 = v53[4];
  swift_retain(v136);
  swift_retain(v137);
  swift_retain(v138);
  swift_retain(v139);
  swift_retain(v140);
  sub_1001C3C64(v137, v138, v139, v140);
  swift_release(v136);
  swift_release(v137);
  swift_release(v138);
  swift_release(v139);
  swift_release(v140);
  if (*(_QWORD *)(v171 + 8))
  {
    v141 = *(_BYTE *)v171 == 5 && (unint64_t)*(unsigned __int8 *)(v171 + 17) << 8 == 256;
    v142 = v141;
    sub_1001C6254(v142);
  }
  v143 = *(_QWORD *)(v33 + 16);
  swift_bridgeObjectRetain(v33);
  for (i = 0; i != -208; i -= 16)
  {
    if (v143 < 0xD)
    {
      __break(1u);
      goto LABEL_44;
    }
    v145 = *(_QWORD *)(v33 + i + 224);
    v146 = *(_QWORD *)(v33 + i + 232);
    ObjectType = swift_getObjectType(v145);
    v148 = *(void (**)(uint64_t, uint64_t))(v146 + 16);
    swift_unknownObjectRetain(v145);
    v148(ObjectType, v146);
    swift_unknownObjectRelease(v145);
  }
  swift_bridgeObjectRelease_n(v33, 2);
  v149 = v174 + *(int *)(v124 + 28);
  v150 = *(void (**)(__n128))v149;
  if (*(_QWORD *)v149)
  {
    v151 = *(_QWORD *)(v149 + 8);
    v152 = swift_retain(v151);
    v150(v152);
    sub_10004DA00((uint64_t)v150, v151);
    swift_release(v53);
    return sub_10000AFFC((uint64_t)v173, type metadata accessor for ConnectionAssistantState);
  }
LABEL_44:
  sub_10000AFFC((uint64_t)v173, type metadata accessor for ConnectionAssistantState);
  return swift_release(v53);
}

uint64_t sub_1001C2DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __n128 v21;
  uint64_t v22;
  void (*v23)(_QWORD *, uint64_t, uint64_t);
  char v24;
  uint64_t (*v25)(_QWORD *, uint64_t);
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(_QWORD *, uint64_t);
  unsigned __int8 v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  __n128 v34;
  char v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(unsigned __int8 *, uint64_t, uint64_t);
  uint64_t v43;
  char *v44;
  uint64_t v45;
  void (*v46)(_QWORD *, uint64_t, uint64_t);
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  char v50[8];
  uint64_t v51;
  char v52;

  v3 = v2;
  v49 = a2;
  v5 = sub_100003DB8(&qword_100316B68);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8((uint64_t *)&unk_10031B230);
  v11 = __chkstk_darwin(v9, v10);
  v47 = (uint64_t)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  v15 = (unsigned __int8 *)&v41 - v14;
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v20 = (uint64_t *)((char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v48 = sub_10000D75C();
  *v20 = static OS_dispatch_queue.main.getter(v21);
  v22 = enum case for DispatchPredicate.onQueue(_:);
  v23 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v17 + 104);
  v23(v20, enum case for DispatchPredicate.onQueue(_:), v16);
  v24 = _dispatchPreconditionTest(_:)(v20);
  v25 = *(uint64_t (**)(_QWORD *, uint64_t))(v17 + 8);
  result = v25(v20, v16);
  if ((v24 & 1) == 0)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v46 = v23;
  v43 = a1;
  v44 = v8;
  v27 = *(_QWORD *)(v3 + 56);
  sub_10000B234(a1, (uint64_t)v15, (uint64_t *)&unk_10031B230);
  v28 = type metadata accessor for LinkState(0);
  v42 = *(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 48);
  v29 = v25;
  if (v42(v15, 1, v28) == 1)
  {
    swift_retain(v27);
    sub_100007FF0((uint64_t)v15, (uint64_t *)&unk_10031B230);
    v30 = 2;
  }
  else
  {
    v30 = *v15;
    swift_retain(v27);
    sub_10000AFFC((uint64_t)v15, type metadata accessor for LinkState);
  }
  sub_10001F660(v30);
  swift_release(v27);
  v45 = v3;
  v31 = *(_QWORD *)(v3 + 56);
  sub_10000B458(v49, (uint64_t)v50, &qword_100319FD8);
  v32 = v51;
  if (v51)
    v33 = v52 & 1;
  else
    v33 = 2;
  v34 = swift_retain(v31);
  *v20 = static OS_dispatch_queue.main.getter(v34);
  v46(v20, v22, v16);
  v35 = _dispatchPreconditionTest(_:)(v20);
  result = v29(v20, v16);
  if ((v35 & 1) == 0)
    goto LABEL_20;
  v36 = *(unsigned __int8 *)(v31 + 105);
  if (v32)
  {
    v37 = v43;
    if (v36 == 2 || (((v33 == 0) ^ v36) & 1) == 0)
      goto LABEL_14;
  }
  else
  {
    v37 = v43;
    if (v36 != 2)
    {
LABEL_14:
      *(_BYTE *)(v31 + 105) = v33;
      sub_1001DC9E4((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_1001DEA64, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1001DEA60, (uint64_t (*)(uint64_t *, __n128))sub_1001DB134);
      sub_100020898();
    }
  }
  swift_release(v31);
  v38 = v47;
  sub_10000B234(v37, v47, (uint64_t *)&unk_10031B230);
  if (v42((unsigned __int8 *)v38, 1, v28) == 1)
  {
    sub_100007FF0(v38, (uint64_t *)&unk_10031B230);
    v39 = type metadata accessor for TransmissionProgress(0);
    v40 = (uint64_t)v44;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v44, 1, 1, v39);
  }
  else
  {
    v40 = (uint64_t)v44;
    sub_10000B234(v38 + *(int *)(v28 + 32), (uint64_t)v44, &qword_100316B68);
    sub_10000AFFC(v38, type metadata accessor for LinkState);
  }
  sub_1001CB10C(v40);
  return sub_100007FF0(v40, &qword_100316B68);
}

double sub_1001C3198(unsigned __int8 a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(v1 + 64);
  if (v3 == 4)
  {
    if (a1 == 4)
      goto LABEL_11;
    goto LABEL_5;
  }
  if (a1 == 4)
    goto LABEL_5;
  if (v3 == 3)
  {
    if (a1 == 3)
      goto LABEL_11;
    goto LABEL_5;
  }
  if (a1 == 3 || v3 != a1)
  {
LABEL_5:
    if (*(_QWORD *)(v1 + 32))
    {
      *(_BYTE *)(v1 + 40) = 1;
    }
    else
    {
      v4 = sub_100003DB8(&qword_10032B0E0);
      v5 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v4, v5);
    }
  }
LABEL_11:
  *(_BYTE *)(v1 + 64) = a1;
  return sub_1001CF354(v3);
}

double sub_1001C3270(__int16 a1)
{
  uint64_t v1;
  __int16 v3;
  __int16 v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(unsigned __int8 *)(v1 + 42);
  v4 = *(unsigned __int8 *)(v1 + 43);
  if ((v4 & 1) != 0)
  {
    if ((a1 & 0x100) != 0)
      goto LABEL_12;
  }
  else if ((a1 & 0x100) == 0)
  {
    if ((v3 & 1) != 0)
    {
      if ((a1 & 1) != 0)
        goto LABEL_12;
    }
    else if ((a1 & 1) == 0)
    {
      goto LABEL_12;
    }
  }
  if (*(_QWORD *)(v1 + 32))
  {
    *(_BYTE *)(v1 + 40) = 1;
  }
  else
  {
    v5 = sub_100003DB8(&qword_10032B0E0);
    v6 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v5, v6);
  }
LABEL_12:
  *(_BYTE *)(v1 + 42) = a1;
  *(_BYTE *)(v1 + 43) = HIBYTE(a1) & 1;
  return sub_1001C7ED4(v3 | (unsigned __int16)(v4 << 8));
}

double sub_1001C3338(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)(char *, uint64_t, uint64_t);
  int v45;
  double result;
  uint64_t v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(char *, uint64_t, uint64_t);
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  __n128 v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _BOOL4 v74;
  _BOOL4 v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103[3];
  char v104[32];

  v94 = a2;
  v4 = type metadata accessor for ConnectionClosed(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v99 = (uint64_t)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  v11 = (unsigned __int8 *)&v88 - v10;
  v91 = sub_100003DB8(&qword_1003180C0);
  v13 = __chkstk_darwin(v91, v12);
  v97 = (uint64_t)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13, v15);
  v96 = (char *)&v88 - v17;
  v19 = __chkstk_darwin(v16, v18);
  v93 = (uint64_t)&v88 - v20;
  v22 = __chkstk_darwin(v19, v21);
  v95 = (uint64_t)&v88 - v23;
  v25 = __chkstk_darwin(v22, v24);
  v92 = (uint64_t)&v88 - v26;
  v28 = __chkstk_darwin(v25, v27);
  v90 = (uint64_t)&v88 - v29;
  v31 = __chkstk_darwin(v28, v30);
  v33 = (char *)&v88 - v32;
  __chkstk_darwin(v31, v34);
  v36 = (unsigned __int8 *)&v88 - v35;
  v37 = sub_100003DB8(&qword_10031FA38);
  __chkstk_darwin(v37, v38);
  v40 = (char *)&v88 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = v2;
  v41 = v2 + OBJC_IVAR____TtC8SOSBuddy21ConnectionClosedModel__connectionClosed;
  swift_beginAccess(v41, v104, 0, 0);
  v42 = (uint64_t)&v40[*(int *)(v37 + 48)];
  v100 = v41;
  sub_10000B234(v41, (uint64_t)v40, &qword_1003180C0);
  v43 = a1;
  sub_10000B234(a1, v42, &qword_1003180C0);
  v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48);
  v45 = v44(v40, 1, v4);
  v98 = v4;
  if (v45 == 1)
  {
    if (v44((char *)v42, 1, v4) == 1)
    {
      sub_100007FF0((uint64_t)v40, &qword_1003180C0);
      return result;
    }
    goto LABEL_6;
  }
  sub_10000B234((uint64_t)v40, (uint64_t)v36, &qword_1003180C0);
  if (v44((char *)v42, 1, v4) == 1)
  {
    sub_10000AFFC((uint64_t)v36, type metadata accessor for ConnectionClosed);
LABEL_6:
    sub_100007FF0((uint64_t)v40, &qword_10031FA38);
    v47 = v101;
    v48 = v43;
    goto LABEL_7;
  }
  sub_1000E8D6C(v42, (uint64_t)v11, type metadata accessor for ConnectionClosed);
  v49 = sub_1000FD004(v36, v11);
  sub_10000AFFC((uint64_t)v11, type metadata accessor for ConnectionClosed);
  sub_10000AFFC((uint64_t)v36, type metadata accessor for ConnectionClosed);
  sub_100007FF0((uint64_t)v40, &qword_1003180C0);
  v47 = v101;
  v48 = v43;
  if ((v49 & 1) != 0)
    return result;
LABEL_7:
  if (*(_QWORD *)(v47 + 32))
  {
    *(_BYTE *)(v47 + 40) = 1;
  }
  else
  {
    v50 = sub_100003DB8(&qword_10032B0E0);
    v51 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v50, v51);
  }
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v52 = type metadata accessor for Logger(0);
  sub_10000D744(v52, (uint64_t)qword_10033FD48);
  sub_10000B234(v48, (uint64_t)v33, &qword_1003180C0);
  v54 = swift_retain_n(v47, v53);
  v55 = Logger.logObject.getter(v54);
  v56 = static os_log_type_t.default.getter(v55);
  if (os_log_type_enabled(v55, v56))
  {
    v57 = swift_slowAlloc(22, -1);
    v88 = swift_slowAlloc(64, -1);
    v103[0] = v88;
    *(_DWORD *)v57 = 136446466;
    v58 = v90;
    sub_10000B234(v100, v90, &qword_1003180C0);
    v89 = v48;
    v59 = v44;
    v60 = v91;
    v62 = String.init<A>(describing:)(v58, v91, v61);
    v64 = v63;
    v102 = sub_100172BEC(v62, v63, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103, v57 + 4, v57 + 12);
    swift_release_n(v101);
    swift_bridgeObjectRelease(v64);
    *(_WORD *)(v57 + 12) = 2082;
    sub_10000B234((uint64_t)v33, v58, &qword_1003180C0);
    v65 = v60;
    v44 = v59;
    v48 = v89;
    v67 = String.init<A>(describing:)(v58, v65, v66);
    v69 = v68;
    v102 = sub_100172BEC(v67, v68, v103);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v102, v103, v57 + 14, v57 + 22);
    swift_bridgeObjectRelease(v69);
    sub_100007FF0((uint64_t)v33, &qword_1003180C0);
    _os_log_impl((void *)&_mh_execute_header, v55, v56, "connectionClosed changed from: %{public}s to: %{public}s", (uint8_t *)v57, 0x16u);
    v70 = v88;
    swift_arrayDestroy(v88, 2, (char *)&type metadata for Any + 8);
    v47 = v101;
    swift_slowDealloc(v70, -1, -1);
    swift_slowDealloc(v57, -1, -1);
  }
  else
  {
    swift_release_n(v47);
    sub_100007FF0((uint64_t)v33, &qword_1003180C0);
  }

  v72 = v95;
  v71 = (uint64_t)v96;
  v73 = v98;
  if ((v94 & 1) != 0)
  {
    sub_10000B234(v48, v95, &qword_1003180C0);
    sub_100007FF0(v72, &qword_1003180C0);
    sub_10000B234(v48, v71, &qword_1003180C0);
    v74 = 0;
    v75 = 0;
    v76 = v100;
  }
  else
  {
    v76 = v100;
    v77 = v92;
    sub_10000B234(v100, v92, &qword_1003180C0);
    v78 = v44((char *)v77, 1, v73);
    sub_100007FF0(v77, &qword_1003180C0);
    sub_10000B234(v48, v72, &qword_1003180C0);
    v74 = v78 == 1 && v44((char *)v72, 1, v73) != 1;
    sub_100007FF0(v72, &qword_1003180C0);
    v79 = v93;
    sub_10000B234(v76, v93, &qword_1003180C0);
    v80 = v44((char *)v79, 1, v73);
    sub_100007FF0(v79, &qword_1003180C0);
    sub_10000B234(v48, v71, &qword_1003180C0);
    v75 = v80 != 1 && v44((char *)v71, 1, v73) == 1;
  }
  sub_100007FF0(v71, &qword_1003180C0);
  swift_beginAccess(v76, v103, 33, 0);
  sub_100175998(v48, v76, &qword_1003180C0);
  swift_endAccess(v103);
  if (*(_QWORD *)(v47 + 32))
  {
    *(_BYTE *)(v47 + 41) = 1;
  }
  else
  {
    v81 = sub_100003DB8(&qword_10032B0E0);
    v82 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v81, v82);
  }
  v83 = v97;
  sub_10000B234(v48, v97, &qword_1003180C0);
  v84 = v44((char *)v83, 1, v73);
  v85 = v99;
  if (v84 == 1)
  {
    sub_100007FF0(v83, &qword_1003180C0);
    if (!v75)
      return result;
LABEL_34:
    v86 = sub_100003DB8(&qword_10032B0E0);
    v87 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v86, v87).n128_u64[0];
    return result;
  }
  sub_1000E8D6C(v83, v99, type metadata accessor for ConnectionClosed);
  if (v74)
    PassthroughSubject.send(_:)(v85);
  sub_10000AFFC(v85, type metadata accessor for ConnectionClosed);
  if (v75)
    goto LABEL_34;
  return result;
}

uint64_t sub_1001C3B7C(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v6 = v5;
  if ((a3[80] & 1) != 0 || (a3[66] & 1) != 0)
    v12 = 0;
  else
    v12 = a3[192] ^ 1;
  v13 = v12 & 1;
  v14 = *(unsigned __int8 *)(v5 + 112);
  *(_BYTE *)(v5 + 112) = v13;
  if (v14 == 2 || ((v14 & 1) == 0) == v13)
    sub_1001D1814();
  v15 = sub_1001D1CFC(a1, a2, (uint64_t)a3, a4, a5);
  v16 = *(_QWORD *)(v5 + 88);
  *(_QWORD *)(v5 + 88) = v15;
  swift_release(v16);
  v17 = *(_QWORD *)(v5 + 80);
  v18 = v17;
  if (!v17)
  {
    v18 = *(_QWORD *)(v6 + 88);
    swift_retain(v18);
  }
  swift_retain(v17);
  return sub_1001D1238(v18);
}

uint64_t sub_1001C3C64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unsigned __int8 v16;

  v5 = v4;
  v10 = sub_100067058(4u, *(_QWORD *)(a3 + 200));
  v11 = *(unsigned __int8 *)(v4 + 56);
  if (v10 != v11)
  {
    if (*(_QWORD *)(v4 + 32))
    {
      *(_BYTE *)(v4 + 40) = 1;
    }
    else
    {
      v12 = sub_100003DB8(&qword_10032B0E0);
      v13 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v12, v13);
    }
  }
  *(_BYTE *)(v4 + 56) = v10;
  sub_1001D373C(v11);
  v14 = *(_QWORD *)(v4 + 48);
  v15 = *(_BYTE *)(v5 + 57);
  swift_retain(v14);
  v16 = sub_1001DDFF8(a1, a2, a3, a4, v15);
  sub_10001F884(v16);
  return swift_release(v14);
}

uint64_t sub_1001C3D5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  _BYTE v4[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
    return swift_release(result);
  return result;
}

void sub_1001C3DA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  char v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  char v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  float64x2_t v50;
  float64x2_t v51;
  uint64_t v52;
  double v53;
  double v54;
  double v55;
  double v56;
  double v57;
  double v58;
  double v59;
  double v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t ObjectType;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(uint64_t, uint64_t);
  uint64_t v85;
  uint64_t v86;
  float64x2_t v87;
  float64x2_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int8 v91;
  double v92;
  double v93;
  double v94;
  double v95;
  double v96;
  double v97;
  double v98;
  double v99;
  float64x2_t v100;
  float64x2_t v101;
  __int128 v102;
  uint64_t v103;
  _BYTE v104[24];
  _BYTE v105[48];
  _BYTE v106[80];
  _BYTE v107[24];
  _BYTE v108[40];
  char v109;

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v107, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = (_QWORD *)Strong;
    if (*(_BYTE *)(Strong + 160) != 1)
    {
      swift_release(Strong);
      return;
    }
    v4 = sub_100003DB8(&qword_1003285D0);
    inited = swift_initStackObject(v4, v106);
    *(_OWORD *)(inited + 16) = xmmword_10024FB80;
    v6 = v3[7];
    *(_QWORD *)(inited + 32) = v6;
    v7 = inited + 32;
    *(_QWORD *)(inited + 40) = &off_1002F8F58;
    v8 = v3[8];
    *(_QWORD *)(inited + 48) = v8;
    *(_QWORD *)(inited + 56) = &off_1002F8F58;
    v9 = v3[12];
    *(_QWORD *)(inited + 64) = v9;
    *(_QWORD *)(inited + 72) = &off_1002F8F58;
    v10 = *(_QWORD *)(v6 + 32);
    v11 = __CFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v6 + 32) = v12;
      v13 = *(_QWORD *)(v8 + 32);
      v11 = __CFADD__(v13, 1);
      v14 = v13 + 1;
      if (!v11)
      {
        *(_QWORD *)(v8 + 32) = v14;
        v15 = *(_QWORD *)(v9 + 32);
        v11 = __CFADD__(v15, 1);
        v16 = v15 + 1;
        if (!v11)
        {
          v17 = (_QWORD *)inited;
          *(_QWORD *)(v9 + 32) = v16;
          v18 = *(_BYTE *)(v6 + 65);
          *(_BYTE *)(v6 + 65) = *(_BYTE *)(*(_QWORD *)(v3[9] + 56) + 120);
          swift_retain_n(v6, (__n128)xmmword_10024FB80);
          swift_retain(v8);
          swift_retain(v9);
          sub_1001CF890(v18);
          swift_release(v6);
          v19 = v3[6];
          v20 = v3[7];
          v21 = (*(_BYTE *)(v19 + 43) & 1) == 0 && (*(_BYTE *)(v19 + 42) & 1) == 0;
          v22 = *(_BYTE *)(v20 + 66);
          *(_BYTE *)(v20 + 66) = v21;
          swift_retain(v20);
          sub_1001CFB54(v22);
          swift_release(v20);
          v23 = v3[3];
          if ((*(_BYTE *)(v23 + 104) & 1) != 0)
            goto LABEL_22;
          v24 = *(_QWORD *)(v23 + 40);
          v25 = sub_100003DB8(&qword_1003285D8);
          v100 = *(float64x2_t *)(v23 + 64);
          v101 = *(float64x2_t *)(v23 + 80);
          v26 = swift_initStackObject(v25, v105);
          *(_OWORD *)(v26 + 16) = xmmword_10024EEB0;
          *(float32x4_t *)(v26 + 32) = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v100), v101);
          sub_1001DE180(v26);
          v102 = v27;
          swift_setDeallocating(v26);
          v28 = v3[5];
          if ((*(_BYTE *)(v28 + 88) & 1) != 0)
          {
            v29 = 0;
            v30 = 0;
          }
          else
          {
            v29 = *(_QWORD *)(v28 + 56);
            v30 = *(_QWORD *)(v28 + 64);
          }
          v31 = sub_1001C647C(v24, 0, v102, *((uint64_t *)&v102 + 1), 0, v29, v30, *(_BYTE *)(v28 + 88));
          if ((v34 & 1) != 0)
            goto LABEL_22;
          v35 = v31;
          v36 = v32;
          v37 = v33;
          v38 = v3[5];
          if ((*(_BYTE *)(v38 + 88) & 1) != 0)
          {
            v39 = 0;
            v40 = 0;
          }
          else
          {
            v39 = *(_QWORD *)(v38 + 72);
            v40 = *(_QWORD *)(v38 + 80);
          }
          v41 = sub_1001C647C(v24, 0, v102, *((uint64_t *)&v102 + 1), 0, v39, v40, *(_BYTE *)(v38 + 88));
          if ((v44 & 1) != 0)
          {
LABEL_22:
            v52 = v3[7];
            memset(v108, 0, sizeof(v108));
            v109 = 1;
            *(_QWORD *)&v53 = swift_retain(v52).n128_u64[0];
            sub_1001C435C((uint64_t)v108, 2u, 0, 0, 0, 1, 0, 0, v53, v54, v55, v56, v57, v58, v59, v60, 0.0, 1);
          }
          else
          {
            v45 = v42;
            v46 = v43;
            v47 = v3[5];
            v48 = *(_BYTE *)(v47 + 88);
            v103 = v41;
            if ((v48 & 1) != 0)
            {
              v49 = 0;
              v50 = 0uLL;
              v51 = 0uLL;
            }
            else
            {
              v49 = *(_QWORD *)(v47 + 48);
              v87 = (float64x2_t)vdupq_n_s64(0x404CA5DC1A63C1F8uLL);
              v88 = (float64x2_t)vdupq_n_s64(0x3F91DF46A2529D39uLL);
              v50 = vmulq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(v47 + 56), v87)), v88);
              v51 = vmulq_f64(vrndaq_f64(vmulq_f64(*(float64x2_t *)(v47 + 72), v87)), v88);
            }
            *(_QWORD *)v108 = v49;
            *(float64x2_t *)&v108[8] = v50;
            *(float64x2_t *)&v108[24] = v51;
            v109 = v48;
            v52 = v3[7];
            v89 = v47 + OBJC_IVAR____TtC8SOSBuddy11TargetModel_link;
            swift_beginAccess(v47 + OBJC_IVAR____TtC8SOSBuddy11TargetModel_link, v104, 0, 0);
            v90 = type metadata accessor for LinkState(0);
            if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v90 - 8) + 48))(v89, 1, v90))
            {
              v91 = 2;
            }
            else
            {
              v91 = *(_BYTE *)(v89 + 1);
            }
            *(_QWORD *)&v92 = swift_retain(v52).n128_u64[0];
            sub_1001C435C((uint64_t)v108, v91, v35, v36, v37, 0, v103, v45, v92, v93, v94, v95, v96, v97, v98, v99, v46, 0);
          }
          swift_release(v52);
          v61 = v3[8];
          v62 = v3[9];
          v63 = v3[6];
          v64 = (_BYTE *)v3[7];
          v65 = v3[4];
          v66 = v3[15];
          swift_retain(v61);
          swift_retain(v62);
          swift_retain(v63);
          swift_retain(v64);
          swift_retain(v65);
          swift_retain(v66);
          sub_1001C3B7C(v62, v63, v64, v65, v66);
          swift_release(v61);
          swift_release(v62);
          swift_release(v63);
          swift_release(v64);
          swift_release(v65);
          swift_release(v66);
          v67 = v3[12];
          v68 = v3[9];
          v69 = v3[6];
          v70 = v3[7];
          v71 = v3[4];
          swift_retain(v67);
          swift_retain(v68);
          swift_retain(v69);
          swift_retain(v70);
          swift_retain(v71);
          sub_1001C3C64(v68, v69, v70, v71);
          swift_release(v67);
          swift_release(v68);
          swift_release(v69);
          swift_release(v70);
          swift_release(v71);
          v72 = v17[2];
          swift_bridgeObjectRetain(v17);
          if (v72 >= 3)
          {
            v73 = v17[8];
            v74 = v17[9];
            ObjectType = swift_getObjectType(v73);
            v76 = *(void (**)(uint64_t, uint64_t))(v74 + 16);
            swift_unknownObjectRetain(v73);
            v76(ObjectType, v74);
            swift_unknownObjectRelease(v73);
            v77 = v17[6];
            v78 = v17[7];
            v79 = swift_getObjectType(v77);
            v80 = *(void (**)(uint64_t, uint64_t))(v78 + 16);
            swift_unknownObjectRetain(v77);
            v80(v79, v78);
            swift_unknownObjectRelease(v77);
            v81 = v17[4];
            v82 = v17[5];
            v83 = swift_getObjectType(v81);
            v84 = *(void (**)(uint64_t, uint64_t))(v82 + 16);
            swift_unknownObjectRetain(v81);
            v84(v83, v82);
            swift_release(v3);
            swift_bridgeObjectRelease(v17);
            swift_unknownObjectRelease(v81);
            swift_setDeallocating(v17);
            v85 = v17[2];
            v86 = sub_100003DB8(&qword_1003285E0);
            swift_arrayDestroy(v7, v85, v86);
            return;
          }
LABEL_34:
          __break(1u);
          return;
        }
LABEL_33:
        __break(1u);
        goto LABEL_34;
      }
    }
    __break(1u);
    goto LABEL_33;
  }
}

void sub_1001C435C(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8, double a9, double a10, double a11, double a12, double a13, double a14, double a15, double a16, double a17, char a18)
{
  uint64_t v10;
  uint64_t v11;
  char v18;
  double v19;
  uint64_t v20;
  int v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _BOOL4 v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v55;
  _QWORD v56[6];
  _BYTE v57[40];
  char v58;

  v11 = v10;
  v18 = a18;
  v19 = a17;
  v55 = a2;
  sub_10000B458(a1, (uint64_t)v56, &qword_100319FB8);
  v53 = a1;
  if ((*(_BYTE *)(v11 + 128) & 1) != 0)
  {
    v20 = sub_10000B458(a1, (uint64_t)v57, &qword_100319FB8);
    if ((v58 & 1) == 0)
      goto LABEL_29;
  }
  else
  {
    v23 = *(double *)&v56[1];
    v22 = *(double *)&v56[2];
    v25 = *(double *)&v56[3];
    v24 = *(double *)&v56[4];
    v27 = *(double *)(v11 + 96);
    v26 = *(double *)(v11 + 104);
    v29 = *(double *)(v11 + 112);
    v28 = *(double *)(v11 + 120);
    v30 = a1;
    v31 = *(_QWORD *)(v11 + 88);
    v32 = v56[0];
    v33 = sub_10000B458(v30, (uint64_t)v57, &qword_100319FB8);
    if ((v58 & 1) != 0)
      goto LABEL_29;
    if (v31 != v32)
      goto LABEL_29;
    v34 = static Angle.== infix(_:_:)(v33, v27, v23);
    if ((v34 & 1) == 0)
      goto LABEL_29;
    v35 = static Angle.== infix(_:_:)(v34, v26, v22);
    if ((v35 & 1) == 0)
      goto LABEL_29;
    v36 = static Angle.== infix(_:_:)(v35, v29, v25);
    if ((v36 & 1) == 0)
      goto LABEL_29;
    v20 = static Angle.== infix(_:_:)(v36, v28, v24);
    if ((v20 & 1) == 0)
      goto LABEL_29;
  }
  v21 = *(unsigned __int8 *)(v11 + 129);
  if (v21 == 2)
  {
    if (v55 != 2)
      goto LABEL_29;
  }
  else
  {
    v37 = (v21 & 1) == 0;
    if (v55 == 2 || ((v55 ^ v37) & 1) == 0)
      goto LABEL_29;
  }
  if ((*(_BYTE *)(v11 + 160) & 1) != 0)
  {
    if ((a6 & 1) == 0)
      goto LABEL_29;
  }
  else
  {
    if ((a6 & 1) != 0)
      goto LABEL_29;
    v38 = *(double *)(v11 + 144);
    v39 = *(double *)(v11 + 152);
    v40 = static Angle.== infix(_:_:)(v20, *(double *)(v11 + 136), *(double *)&a3);
    if ((v40 & 1) == 0)
      goto LABEL_29;
    v41 = static Angle.== infix(_:_:)(v40, v38, *(double *)&a4);
    if ((v41 & 1) == 0)
      goto LABEL_29;
    v20 = static Angle.== infix(_:_:)(v41, v39, *(double *)&a5);
    if ((v20 & 1) == 0)
      goto LABEL_29;
  }
  if ((*(_BYTE *)(v11 + 192) & 1) != 0)
  {
    if ((a18 & 1) != 0)
      return;
  }
  else if ((a18 & 1) == 0)
  {
    v42 = *(double *)(v11 + 176);
    v43 = *(double *)(v11 + 184);
    v44 = static Angle.== infix(_:_:)(v20, *(double *)(v11 + 168), *(double *)&a7);
    if ((v44 & 1) != 0)
    {
      v45 = static Angle.== infix(_:_:)(v44, v42, *(double *)&a8);
      if ((v45 & 1) != 0 && (static Angle.== infix(_:_:)(v45, v43, a17) & 1) != 0)
        return;
    }
  }
LABEL_29:
  if (*(_QWORD *)(v11 + 32))
  {
    *(_BYTE *)(v11 + 40) = 1;
  }
  else
  {
    v46 = a7;
    v47 = a8;
    v48 = sub_100003DB8(&qword_10032B0E0);
    v49 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v50 = v48;
    a8 = v47;
    a7 = v46;
    v18 = a18;
    v19 = a17;
    Subject<>.send()(v50, v49);
  }
  sub_10000B458(v53, v11 + 88, &qword_100319FB8);
  *(_BYTE *)(v11 + 129) = v55;
  *(_QWORD *)(v11 + 136) = a3;
  *(_QWORD *)(v11 + 144) = a4;
  *(_QWORD *)(v11 + 152) = a5;
  *(_BYTE *)(v11 + 160) = a6 & 1;
  *(_QWORD *)(v11 + 168) = a7;
  *(_QWORD *)(v11 + 176) = a8;
  *(double *)(v11 + 184) = v19;
  *(_BYTE *)(v11 + 192) = v18 & 1;
  sub_1001CF5FC();
  if (*(_QWORD *)(v11 + 32))
  {
    *(_BYTE *)(v11 + 41) = 1;
  }
  else
  {
    v51 = sub_100003DB8(&qword_10032B0E0);
    v52 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v51, v52);
  }
}

void sub_1001C4690(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[2];
  _BYTE v30[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v30, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    if (*(_BYTE *)(Strong + 160) == 1)
    {
      v4 = *(_QWORD *)(Strong + 56);
      if ((*(_BYTE *)(v4 + 80) & 1) != 0
        || (*(_BYTE *)(v4 + 66) & 1) != 0
        || (*(_BYTE *)(v4 + 192) & 1) != 0
        || (v5 = *(_QWORD *)(Strong + 24), (*(_BYTE *)(v5 + 104) & 1) != 0)
        || (*(_BYTE *)(v4 + 128) & 1) != 0)
      {
        v6 = 0x800000010026F350;
        v7 = 0xD00000000000002DLL;
LABEL_9:
        v8 = String.init(format:_:)(v7, v6);
        v10 = v9;
        v29[0] = v8;
        v29[1] = v9;
        PassthroughSubject.send(_:)(v29);
        swift_release(v3);
        swift_bridgeObjectRelease(v10);
        return;
      }
      v11 = round(*(double *)(v5 + 32) * 57.2957795);
      if ((~*(_QWORD *)&v11 & 0x7FF0000000000000) != 0)
      {
        if (v11 > -9.22337204e18)
        {
          if (v11 < 9.22337204e18)
          {
            v12 = round(*(double *)(v5 + 40) * 57.2957795);
            if ((~*(_QWORD *)&v12 & 0x7FF0000000000000) != 0)
            {
              if (v12 > -9.22337204e18)
              {
                if (v12 < 9.22337204e18)
                {
                  v13 = round(*(double *)(v5 + 48) * 57.2957795);
                  if ((~*(_QWORD *)&v13 & 0x7FF0000000000000) != 0)
                  {
                    if (v13 > -9.22337204e18)
                    {
                      if (v13 < 9.22337204e18)
                      {
                        v14 = round(*(double *)(v5 + 56) * 57.2957795);
                        if ((~*(_QWORD *)&v14 & 0x7FF0000000000000) != 0)
                        {
                          if (v14 > -9.22337204e18)
                          {
                            if (v14 < 9.22337204e18)
                            {
                              v15 = round(*(double *)(v4 + 112) * 57.2957795);
                              if ((~*(_QWORD *)&v15 & 0x7FF0000000000000) != 0)
                              {
                                if (v15 > -9.22337204e18)
                                {
                                  if (v15 < 9.22337204e18)
                                  {
                                    v16 = round(*(double *)(v4 + 120) * 57.2957795);
                                    if ((~*(_QWORD *)&v16 & 0x7FF0000000000000) != 0)
                                    {
                                      if (v16 > -9.22337204e18)
                                      {
                                        if (v16 < 9.22337204e18)
                                        {
                                          v17 = round(*(double *)(v4 + 168) * 57.2957795);
                                          if ((~*(_QWORD *)&v17 & 0x7FF0000000000000) != 0)
                                          {
                                            if (v17 > -9.22337204e18)
                                            {
                                              if (v17 < 9.22337204e18)
                                              {
                                                v18 = round(*(double *)(v4 + 176) * 57.2957795);
                                                if ((~*(_QWORD *)&v18 & 0x7FF0000000000000) != 0)
                                                {
                                                  if (v18 > -9.22337204e18)
                                                  {
                                                    if (v18 < 9.22337204e18)
                                                    {
                                                      v19 = (uint64_t)v11;
                                                      v20 = (uint64_t)v12;
                                                      v21 = (uint64_t)v13;
                                                      v22 = (uint64_t)v14;
                                                      v23 = (uint64_t)v15;
                                                      v24 = (uint64_t)v16;
                                                      v25 = (uint64_t)v17;
                                                      v26 = (uint64_t)v18;
                                                      v27 = sub_100003DB8(&qword_100317970);
                                                      v28 = swift_allocObject(v27, 352, 7);
                                                      *(_OWORD *)(v28 + 16) = xmmword_10024D550;
                                                      *(_QWORD *)(v28 + 56) = &type metadata for Int;
                                                      *(_QWORD *)(v28 + 64) = &protocol witness table for Int;
                                                      *(_QWORD *)(v28 + 32) = v19;
                                                      *(_QWORD *)(v28 + 96) = &type metadata for Int;
                                                      *(_QWORD *)(v28 + 104) = &protocol witness table for Int;
                                                      *(_QWORD *)(v28 + 72) = v20;
                                                      *(_QWORD *)(v28 + 136) = &type metadata for Int;
                                                      *(_QWORD *)(v28 + 144) = &protocol witness table for Int;
                                                      *(_QWORD *)(v28 + 112) = v21;
                                                      *(_QWORD *)(v28 + 176) = &type metadata for Int;
                                                      *(_QWORD *)(v28 + 184) = &protocol witness table for Int;
                                                      *(_QWORD *)(v28 + 152) = v22;
                                                      *(_QWORD *)(v28 + 216) = &type metadata for Int;
                                                      *(_QWORD *)(v28 + 224) = &protocol witness table for Int;
                                                      *(_QWORD *)(v28 + 192) = v23;
                                                      *(_QWORD *)(v28 + 256) = &type metadata for Int;
                                                      *(_QWORD *)(v28 + 264) = &protocol witness table for Int;
                                                      *(_QWORD *)(v28 + 232) = v24;
                                                      *(_QWORD *)(v28 + 296) = &type metadata for Int;
                                                      *(_QWORD *)(v28 + 304) = &protocol witness table for Int;
                                                      *(_QWORD *)(v28 + 272) = v25;
                                                      *(_QWORD *)(v28 + 336) = &type metadata for Int;
                                                      *(_QWORD *)(v28 + 344) = &protocol witness table for Int;
                                                      v7 = 0xD000000000000080;
                                                      *(_QWORD *)(v28 + 312) = v26;
                                                      v6 = 0x800000010026F380;
                                                      goto LABEL_9;
                                                    }
                                                    goto LABEL_60;
                                                  }
LABEL_59:
                                                  __break(1u);
LABEL_60:
                                                  __break(1u);
                                                  return;
                                                }
LABEL_58:
                                                __break(1u);
                                                goto LABEL_59;
                                              }
LABEL_57:
                                              __break(1u);
                                              goto LABEL_58;
                                            }
LABEL_56:
                                            __break(1u);
                                            goto LABEL_57;
                                          }
LABEL_55:
                                          __break(1u);
                                          goto LABEL_56;
                                        }
LABEL_54:
                                        __break(1u);
                                        goto LABEL_55;
                                      }
LABEL_53:
                                      __break(1u);
                                      goto LABEL_54;
                                    }
LABEL_52:
                                    __break(1u);
                                    goto LABEL_53;
                                  }
LABEL_51:
                                  __break(1u);
                                  goto LABEL_52;
                                }
LABEL_50:
                                __break(1u);
                                goto LABEL_51;
                              }
LABEL_49:
                              __break(1u);
                              goto LABEL_50;
                            }
LABEL_48:
                            __break(1u);
                            goto LABEL_49;
                          }
LABEL_47:
                          __break(1u);
                          goto LABEL_48;
                        }
LABEL_46:
                        __break(1u);
                        goto LABEL_47;
                      }
LABEL_45:
                      __break(1u);
                      goto LABEL_46;
                    }
LABEL_44:
                    __break(1u);
                    goto LABEL_45;
                  }
LABEL_43:
                  __break(1u);
                  goto LABEL_44;
                }
LABEL_42:
                __break(1u);
                goto LABEL_43;
              }
LABEL_41:
              __break(1u);
              goto LABEL_42;
            }
LABEL_40:
            __break(1u);
            goto LABEL_41;
          }
LABEL_39:
          __break(1u);
          goto LABEL_40;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_39;
    }
    swift_release(Strong);
  }
}

void sub_1001C4A9C(uint64_t *a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  v1 = a1[1];
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v3 = type metadata accessor for Logger(0);
  sub_10000D744(v3, (uint64_t)qword_10033FD48);
  v5 = swift_bridgeObjectRetain_n(v1, 2, v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v11 = v9;
    *(_DWORD *)v8 = 136446210;
    swift_bridgeObjectRetain(v1);
    v10 = sub_100172BEC(v2, v1, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v1, 3);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v1, 2);
  }
}

uint64_t sub_1001C4C34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = swift_retain_n(v0, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v1;
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for ConnectionAssistantModels();
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v9, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] deinit", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 24));
  swift_release(*(_QWORD *)(v1 + 32));
  swift_release(*(_QWORD *)(v1 + 40));
  swift_release(*(_QWORD *)(v1 + 48));
  swift_release(*(_QWORD *)(v1 + 56));
  swift_release(*(_QWORD *)(v1 + 64));
  swift_release(*(_QWORD *)(v1 + 72));
  swift_release(*(_QWORD *)(v1 + 80));
  swift_release(*(_QWORD *)(v1 + 88));
  swift_release(*(_QWORD *)(v1 + 96));
  swift_release(*(_QWORD *)(v1 + 104));
  swift_release(*(_QWORD *)(v1 + 112));
  swift_release(*(_QWORD *)(v1 + 120));
  swift_release(*(_QWORD *)(v1 + 128));

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 144));
  swift_release(*(_QWORD *)(v1 + 152));
  swift_release(*(_QWORD *)(v1 + 168));
  swift_release(*(_QWORD *)(v1 + 176));
  return v1;
}

uint64_t sub_1001C4E90()
{
  uint64_t v0;

  sub_1001C4C34();
  return swift_deallocClassInstance(v0, 184, 7);
}

uint64_t type metadata accessor for ConnectionAssistantModels()
{
  return objc_opt_self(_TtC8SOSBuddy25ConnectionAssistantModels);
}

void sub_1001C4ED0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = v0;
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD48);
  v4 = swift_retain_n(v0, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v14 = v1;
    v15 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for ConnectionAssistantModels();
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v14, v9, v10);
    v13 = v12;
    v14 = sub_100172BEC(v11, v12, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v7 + 4, v7 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "start: %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  sub_1000EE1FC();
  sub_100189094();
}

void sub_1001C5098()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65[8];
  __int16 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int16 v71;
  _BYTE v72[72];
  uint64_t v73;
  uint64_t v74[9];

  v1 = v0;
  v2 = sub_100003DB8(&qword_1003180C0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v11 = type metadata accessor for Logger(0);
  sub_10000D744(v11, (uint64_t)qword_10033FD48);
  v13 = swift_retain_n(v0, v12);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v62 = v7;
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v64 = v5;
    v65[0] = v17;
    v18 = v17;
    v63 = v6;
    *(_DWORD *)v16 = 136446210;
    v73 = v1;
    v19 = type metadata accessor for ConnectionAssistantModels();
    v20 = swift_retain(v1);
    v21 = String.init<A>(describing:)(&v73, v19, v20);
    v23 = v22;
    v73 = sub_100172BEC(v21, v22, v65);
    v7 = v62;
    v6 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v16 + 4, v16 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "stop: %{public}s", v16, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    v24 = v18;
    v5 = v64;
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v16, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  sub_10000D75C();
  *v10 = static OS_dispatch_queue.main.getter(v25);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v26 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v26 & 1) != 0)
  {
    if ((*(_BYTE *)(v1 + 160) & 1) != 0)
    {
      sub_1001C56B8();
      v27 = *(unsigned __int8 *)(v1 + 160);
      *(_BYTE *)(v1 + 160) = 0;
      if (v27 == 1)
      {
        v28 = sub_100003DB8(&qword_10032B0E0);
        v29 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
        Subject<>.send()(v28, v29);
      }
    }
    sub_100189CE8();
    v30 = *(_QWORD *)(v1 + 24);
    v31 = (_OWORD *)(v30 + 32);
    if ((*(_BYTE *)(v30 + 104) & 1) != 0)
    {
      *(_QWORD *)(v30 + 96) = 0;
      *(_OWORD *)(v30 + 64) = 0u;
      *(_OWORD *)(v30 + 80) = 0u;
      *v31 = 0u;
      *(_OWORD *)(v30 + 48) = 0u;
      *(_BYTE *)(v30 + 104) = 1;
    }
    else
    {
      v32 = sub_100003DB8(&qword_10032B0E0);
      v33 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v32, v33);
      *(_QWORD *)(v30 + 96) = 0;
      *(_OWORD *)(v30 + 64) = 0u;
      *(_OWORD *)(v30 + 80) = 0u;
      *v31 = 0u;
      *(_OWORD *)(v30 + 48) = 0u;
      *(_BYTE *)(v30 + 104) = 1;
      v34 = sub_100003DB8(&qword_10032B0E0);
      Subject<>.send()(v34, v33);
    }
    sub_1000EF9E4();
    v35 = *(_QWORD *)(v1 + 104);
    *(_BYTE *)(v35 + 64) = 0;
    v36 = *(_QWORD *)(v35 + 48);
    v37 = *(_QWORD *)(v35 + 56);
    if (*(_QWORD *)(v35 + 32))
    {
      *(_BYTE *)(v35 + 40) = 1;
      swift_bridgeObjectRetain(v37);
    }
    else
    {
      swift_bridgeObjectRetain(*(_QWORD *)(v35 + 56));
      v39 = sub_100003DB8(&qword_10032B0E0);
      v40 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v39, v40);
      v38 = *(_QWORD *)(v35 + 56);
    }
    *(_QWORD *)(v35 + 48) = 0;
    *(_QWORD *)(v35 + 56) = 0;
    swift_bridgeObjectRelease(v38);
    sub_1001D4A08(v36, v37);
    swift_bridgeObjectRelease(v37);
    v41 = *(_QWORD *)(v1 + 112);
    v42 = type metadata accessor for ConnectionClosed(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v5, 1, 1, v42);
    v43 = v41 + OBJC_IVAR____TtC8SOSBuddy21ConnectionClosedModel__connectionClosed;
    swift_beginAccess(v43, v65, 33, 0);
    sub_100123FDC((uint64_t)v5, v43, &qword_1003180C0);
    swift_endAccess(v65);
    v64 = (char *)v1;
    v44 = *(_QWORD *)(v1 + 32);
    sub_10000B458(v44 + 56, (uint64_t)v72, &qword_100319FD8);
    v45 = *(_QWORD *)(v44 + 64);
    v63 = *(_QWORD *)(v44 + 56);
    v47 = *(_QWORD *)(v44 + 72);
    v46 = *(_QWORD *)(v44 + 80);
    v49 = *(_QWORD *)(v44 + 88);
    v48 = *(_QWORD *)(v44 + 96);
    v51 = *(_QWORD *)(v44 + 104);
    v50 = *(_QWORD *)(v44 + 112);
    LODWORD(v62) = *(unsigned __int16 *)(v44 + 120);
    sub_10000B458((uint64_t)v72, (uint64_t)&v73, &qword_100319FD8);
    if (v74[0])
    {
      v65[0] = v63;
      v65[1] = v45;
      v65[2] = v47;
      v65[3] = v46;
      v65[4] = v49;
      v65[5] = v48;
      v65[6] = v51;
      v65[7] = v50;
      v66 = v62;
      v67 = 0u;
      v68 = 0u;
      v69 = 0u;
      v70 = 0u;
      v71 = 0;
      sub_10007F4D4((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007F464);
      swift_bridgeObjectRetain(v45);
      swift_bridgeObjectRetain(v46);
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRetain(v48);
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRetain(v50);
      sub_10007F3C0(v65);
      if (*(_QWORD *)(v44 + 32))
      {
        *(_BYTE *)(v44 + 40) = 1;
      }
      else
      {
        v52 = sub_100003DB8(&qword_10032B0E0);
        v53 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
        Subject<>.send()(v52, v53);
      }
    }
    v54 = *(_QWORD *)(v44 + 56);
    v55 = *(_QWORD *)(v44 + 64);
    v56 = *(_QWORD *)(v44 + 72);
    v57 = *(_QWORD *)(v44 + 80);
    v58 = *(_QWORD *)(v44 + 88);
    v59 = *(_QWORD *)(v44 + 96);
    v60 = *(_QWORD *)(v44 + 104);
    v61 = *(_QWORD *)(v44 + 112);
    *(_OWORD *)(v44 + 56) = 0u;
    *(_OWORD *)(v44 + 72) = 0u;
    *(_OWORD *)(v44 + 88) = 0u;
    *(_OWORD *)(v44 + 104) = 0u;
    *(_WORD *)(v44 + 120) = 0;
    sub_10007ED6C(v54, v55, v56, v57, v58, v59, v60, v61);
    sub_1001D5288((uint64_t)v72);
    sub_10007F4D4((uint64_t)v72, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007ED6C);
    sub_1001C6D00(2);
    sub_1001C7044(2);
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1001C56B8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v22[48];
  _BYTE v23[40];
  _BYTE v24[48];
  _BYTE v25[48];
  _BYTE v26[40];
  _BYTE v27[48];

  v1 = v0;
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FD48);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "stop_connection_assistance", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v7 = v1[5];
  sub_10000B458(v7 + 48, (uint64_t)v24, &qword_100319FB8);
  sub_10000B458((uint64_t)v24, (uint64_t)v25, &qword_100319FB8);
  if ((v25[40] & 1) == 0)
  {
    if (*(_QWORD *)(v7 + 32))
    {
      *(_BYTE *)(v7 + 40) = 1;
    }
    else
    {
      v8 = sub_100003DB8(&qword_10032B0E0);
      v9 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v8, v9);
    }
  }
  *(_QWORD *)(v7 + 80) = 0;
  *(_OWORD *)(v7 + 48) = 0u;
  *(_OWORD *)(v7 + 64) = 0u;
  *(_BYTE *)(v7 + 88) = 1;
  sub_1001C729C((uint64_t)v24);
  v10 = v1[6];
  v11 = *(unsigned __int8 *)(v10 + 42);
  v12 = *(unsigned __int8 *)(v10 + 43);
  if ((v12 & 1) == 0)
  {
    if (*(_QWORD *)(v10 + 32))
    {
      *(_BYTE *)(v10 + 40) = 1;
    }
    else
    {
      v13 = sub_100003DB8(&qword_10032B0E0);
      v14 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v13, v14);
    }
  }
  *(_WORD *)(v10 + 42) = 256;
  sub_1001C7ED4(v11 | (v12 << 8));
  sub_1001C5A3C();
  sub_1001C5B54();
  sub_1001C5BD4();
  v15 = v1[10];
  sub_10000B458(v15 + 48, (uint64_t)v23, &qword_100322A58);
  sub_10000B458((uint64_t)v23, (uint64_t)v26, &qword_100322A58);
  if (v26[16] != 2)
  {
    if (*(_QWORD *)(v15 + 32))
    {
      *(_BYTE *)(v15 + 40) = 1;
    }
    else
    {
      v16 = sub_100003DB8(&qword_10032B0E0);
      v17 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v16, v17);
    }
  }
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = 0;
  *(_OWORD *)(v15 + 64) = xmmword_10025CA70;
  *(_BYTE *)(v15 + 80) = 0;
  sub_1001D40BC((uint64_t)v23);
  v18 = v1[11];
  sub_10000B458(v18 + 48, (uint64_t)v22, &qword_100319D78);
  sub_10000B458((uint64_t)v22, (uint64_t)v27, &qword_100319D78);
  if (v27[8] != 2)
  {
    if (*(_QWORD *)(v18 + 32))
    {
      *(_BYTE *)(v18 + 40) = 1;
    }
    else
    {
      v19 = sub_100003DB8(&qword_10032B0E0);
      v20 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v19, v20);
    }
  }
  *(_OWORD *)(v18 + 48) = xmmword_1002500E0;
  *(_QWORD *)(v18 + 72) = 0;
  *(_QWORD *)(v18 + 80) = 0;
  *(_QWORD *)(v18 + 64) = 0;
  *(_BYTE *)(v18 + 88) = 0;
  sub_1001D4598((uint64_t)v22);
  sub_1001C5F2C();
  return sub_1001C5FE0();
}

double sub_1001C5A3C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  double result;

  *(_QWORD *)(v0 + 120) = 0;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_WORD *)(v0 + 128) = 513;
  *(_QWORD *)(v0 + 144) = 0;
  *(_QWORD *)(v0 + 152) = 0;
  *(_QWORD *)(v0 + 136) = 0;
  *(_BYTE *)(v0 + 160) = 1;
  *(_QWORD *)(v0 + 176) = 0;
  *(_QWORD *)(v0 + 184) = 0;
  *(_QWORD *)(v0 + 168) = 0;
  *(_BYTE *)(v0 + 192) = 1;
  v1 = *(unsigned __int8 *)(v0 + 64);
  if (v1 != 4)
  {
    if (*(_QWORD *)(v0 + 32))
    {
      *(_BYTE *)(v0 + 40) = 1;
    }
    else
    {
      v2 = sub_100003DB8(&qword_10032B0E0);
      v3 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v2, v3);
    }
  }
  *(_BYTE *)(v0 + 64) = 4;
  sub_1001CF354(v1);
  v4 = *(_BYTE *)(v0 + 65);
  *(_BYTE *)(v0 + 65) = 2;
  sub_1001CF890(v4);
  v5 = *(_BYTE *)(v0 + 66);
  *(_BYTE *)(v0 + 66) = 2;
  sub_1001CFB54(v5);
  sub_1001C9EAC();
  sub_1001D00A0(2);
  sub_1001D03E4(2);
  v6 = *(_QWORD *)(v0 + 200);
  *(_QWORD *)(v0 + 200) = &_swiftEmptySetSingleton;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v6).n128_u64[0];
  return result;
}

uint64_t sub_1001C5B54()
{
  uint64_t v0;
  double v1;
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  int v7;

  v1 = sub_1001D0F58(0, 1);
  v2 = *(void **)(v0 + 72);
  if (v2)
  {
    objc_msgSend(v2, "invalidate", v1);
    v3 = *(void **)(v0 + 72);
  }
  else
  {
    v3 = 0;
  }
  *(_QWORD *)(v0 + 72) = 0;

  v4 = *(_QWORD *)(v0 + 80);
  *(_QWORD *)(v0 + 80) = 0;
  swift_release(v4);
  v5 = *(_QWORD *)(v0 + 88);
  *(_QWORD *)(v0 + 88) = 0;
  swift_release(v5);
  result = sub_1001D1238(0);
  v7 = *(unsigned __int8 *)(v0 + 112);
  *(_BYTE *)(v0 + 112) = 2;
  if (v7 != 2)
    return sub_1001D1814();
  return result;
}

uint64_t sub_1001C5BD4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];

  v1 = v0;
  v2 = sub_100003DB8(&qword_100316B68);
  v4 = __chkstk_darwin(v2, v3);
  v6 = &v32[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4, v7);
  v9 = &v32[-v8];
  v10 = sub_100003DB8(&qword_1003284E8);
  v12 = __chkstk_darwin(v10, v11);
  v14 = &v32[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12, v15);
  v17 = &v32[-v16];
  v18 = *(_QWORD *)(v0 + 56);
  swift_retain(v18);
  sub_1001DC9E4((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_1001DEA64, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1001DEA60, (uint64_t (*)(uint64_t *, __n128))sub_1001DB134);
  swift_beginAccess(v18 + 80, v35, 1, 0);
  v19 = *(_QWORD *)(v18 + 80);
  v20 = *(_QWORD *)(v18 + 88);
  *(_OWORD *)(v18 + 80) = xmmword_10024E030;
  *(_QWORD *)(v18 + 96) = 0;
  *(_BYTE *)(v18 + 104) = 0;
  sub_10002117C(v19, v20);
  *(_BYTE *)(v18 + 105) = 2;
  v21 = *(unsigned __int8 *)(v18 + 106);
  if (v21 != 2)
  {
    v22 = sub_100003DB8(&qword_10032B0E0);
    v23 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v22, v23);
  }
  *(_BYTE *)(v18 + 106) = 2;
  sub_1001DB49C(v21);
  sub_1001DC50C(2u);
  swift_release(v18);
  v24 = type metadata accessor for ConnectionModel.UserTransmissionProgress(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v17, 1, 1, v24);
  v25 = v0 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress, v34, 0, 0);
  sub_10000B234(v25, (uint64_t)v14, &qword_1003284E8);
  sub_1001CCEB8((uint64_t)v17);
  swift_beginAccess(v25, v33, 33, 0);
  sub_100175998((uint64_t)v17, v25, &qword_1003284E8);
  swift_endAccess(v33);
  sub_1001CD188((uint64_t)v14);
  sub_100007FF0((uint64_t)v17, &qword_1003284E8);
  sub_100007FF0((uint64_t)v14, &qword_1003284E8);
  v26 = OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__userVisibleProgressTimer;
  v27 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__userVisibleProgressTimer);
  if (v27)
  {
    objc_msgSend(v27, "invalidate");
    v28 = *(void **)(v1 + v26);
  }
  else
  {
    v28 = 0;
  }
  *(_QWORD *)(v1 + v26) = 0;

  v29 = type metadata accessor for TransmissionProgress(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v9, 1, 1, v29);
  v30 = v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__simulatedTransmissionProgress;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__simulatedTransmissionProgress, v33, 0, 0);
  sub_10000B234(v30, (uint64_t)v6, &qword_100316B68);
  sub_1001CE084((uint64_t)v9);
  swift_beginAccess(v30, v32, 33, 0);
  sub_100175998((uint64_t)v9, v30, &qword_100316B68);
  swift_endAccess(v32);
  sub_1001CE2FC((uint64_t)v6);
  sub_100007FF0((uint64_t)v9, &qword_100316B68);
  return sub_100007FF0((uint64_t)v6, &qword_100316B68);
}

uint64_t sub_1001C5F2C()
{
  uint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = v0;
  *(_BYTE *)(v0 + 57) = 1;
  v2 = *(unsigned __int8 *)(v0 + 56);
  if (v2 == 1)
  {
    if (*(_QWORD *)(v0 + 32))
    {
      *(_BYTE *)(v0 + 40) = 1;
    }
    else
    {
      v3 = sub_100003DB8(&qword_10032B0E0);
      v4 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v3, v4);
    }
  }
  *(_BYTE *)(v0 + 56) = 0;
  sub_1001D373C(v2);
  v5 = *(_QWORD *)(v0 + 48);
  swift_retain(*(_QWORD *)(v1 + 48));
  sub_1001DAF70();
  return swift_release(v5);
}

uint64_t sub_1001C5FE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v25[24];
  _BYTE v26[24];
  _BYTE v27[24];

  v1 = sub_100003DB8(&qword_1003284E0);
  v3 = __chkstk_darwin(v1, v2);
  v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v3, v6);
  v8 = &v25[-v7 - 8];
  v9 = sub_100003DB8(&qword_100322C80);
  v11 = __chkstk_darwin(v9, v10);
  v13 = &v25[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v11, v14);
  v16 = &v25[-v15 - 8];
  v17 = *(_BYTE *)(v0 + 96);
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_QWORD *)(v0 + 88) = 0;
  *(_BYTE *)(v0 + 96) = 1;
  if ((v17 & 1) == 0)
  {
    sub_1001D6CD8();
    sub_1001D59C4();
  }
  v18 = *(_QWORD *)(v0 + 104);
  *(_QWORD *)(v0 + 104) = 0;
  swift_release(v18);
  v19 = type metadata accessor for TargetTracks(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v16, 1, 1, v19);
  v20 = v0 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__targetTracks;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__targetTracks, v27, 0, 0);
  sub_10000B234(v20, (uint64_t)v13, &qword_100322C80);
  sub_1001D70A8((uint64_t)v16);
  swift_beginAccess(v20, v26, 33, 0);
  sub_100175998((uint64_t)v16, v20, &qword_100322C80);
  swift_endAccess(v26);
  sub_1001D737C((uint64_t)v13);
  sub_100007FF0((uint64_t)v16, &qword_100322C80);
  sub_100007FF0((uint64_t)v13, &qword_100322C80);
  v21 = type metadata accessor for ServicePredictionsModel.SkimmerPrediction(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v8, 1, 1, v21);
  v22 = v0 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__skimmerPrediction;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__skimmerPrediction, v26, 0, 0);
  sub_10000B234(v22, (uint64_t)v5, &qword_1003284E0);
  sub_1001D8184((uint64_t)v8);
  swift_beginAccess(v22, v25, 33, 0);
  sub_100175998((uint64_t)v8, v22, &qword_1003284E0);
  swift_endAccess(v25);
  sub_1001D8488((uint64_t)v5);
  sub_100007FF0((uint64_t)v8, &qword_1003284E0);
  return sub_100007FF0((uint64_t)v5, &qword_1003284E0);
}

double sub_1001C6254(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __n128 v9;
  char v10;
  double result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v8 = static OS_dispatch_queue.main.getter(v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once(&qword_100315830, sub_1000D961C);
LABEL_7:
    v15 = type metadata accessor for Logger(0);
    v16 = sub_10000D744(v15, (uint64_t)qword_10033FD48);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "start_connection_assistance", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }

    sub_100189714();
    return result;
  }
  v12 = *(unsigned __int8 *)(v2 + 160);
  if (v12 == (a1 & 1))
    return result;
  if ((a1 & 1) != 0)
  {
    *(_BYTE *)(v2 + 160) = 1;
    if ((v12 & 1) == 0)
    {
      v13 = sub_100003DB8(&qword_10032B0E0);
      v14 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v13, v14);
    }
    if (qword_100315830 == -1)
      goto LABEL_7;
    goto LABEL_14;
  }
  sub_1001C56B8();
  v20 = *(unsigned __int8 *)(v2 + 160);
  *(_BYTE *)(v2 + 160) = 0;
  if (v20 == 1)
  {
    v21 = sub_100003DB8(&qword_10032B0E0);
    v22 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v21, v22).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001C647C(unint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, char a8)
{
  char v12;
  int v13;
  uint64_t v15;
  char v16;
  double v17;
  uint64_t v18;
  char v19;
  double v20;
  double v21;
  uint64_t result;

  if ((a2 & 1) != 0)
    goto LABEL_11;
  v12 = a5 & 1;
  v13 = a8 & 1;
  if ((a8 & 1) != 0)
    a6 = 0;
  v15 = sub_1001DE260(a3, a4, a5 & 1, a6, a8 & 1);
  if ((v16 & 1) != 0
    || ((v17 = *(double *)&v15, v13) ? (v18 = 0) : (v18 = a7),
        sub_1001C65C0(a1, 0, a3, a4, v12, v18, v13),
        (v19 & 1) != 0))
  {
LABEL_11:
    *(double *)&result = 0.0;
  }
  else
  {
    v20 = Angle.animatableData.getter(round(*(double *)&a1 * 57.2957795) * 0.0174532925);
    v21 = Angle.animatableData.getter(1.57079633);
    Angle.animatableData.setter(v21 - v20);
    *(double *)&result = round(v17 * 57.2957795) * 0.0174532925;
  }
  return result;
}

uint64_t sub_1001C65C0(unint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, char a7)
{
  double v10;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  float32x4_t v22;
  Swift::String v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  float32x4_t v28;
  int32x4_t v29;
  int8x16_t v30;
  float32x4_t v31;
  float32x4_t v32;
  float32x4_t v33;
  float32x4_t v34;
  int32x4_t v35;
  int8x16_t v36;
  float32x4_t v37;
  float32x4_t v38;
  double v39;
  double v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  float32x4_t v51;
  char v52[24];
  double v53;
  uint64_t v54;
  double v55;
  double v56;
  unint64_t v57;
  unint64_t v58;

  if ((a2 & 1) != 0)
    return 0;
  v58 = a1;
  if ((a5 & 1) != 0 || (a7 & 1) != 0)
    return 0;
  v56 = 1.57079633;
  v10 = Angle.animatableData.getter(1.57079633);
  Angle.animatableData.setter(0.0 - v10);
  if (*(double *)&a1 > 1.57079633 || v56 > *(double *)&a1)
  {
    if (qword_100315898 != -1)
      swift_once(&qword_100315898, sub_1000D97F4);
    v12 = type metadata accessor for Logger(0);
    v13 = sub_10000D744(v12, (uint64_t)qword_10033FE80);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      *(double *)&v17 = COERCE_DOUBLE(swift_slowAlloc(32, -1));
      v56 = *(double *)&v17;
      *(_DWORD *)v16 = 136446210;
      swift_beginAccess(&v58, v52, 0, 0);
      v18.n128_u64[0] = v58;
      v53 = *(double *)&v58;
      v19 = String.init<A>(describing:)(&v53, &type metadata for Angle, v18);
      v21 = v20;
      v53 = COERCE_DOUBLE(sub_100172BEC(v19, v20, (uint64_t *)&v56));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Unexpected device pitch value %{public}s", v16, 0xCu);
      swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);
    }

  }
  v22.i64[0] = a3;
  v22.i64[1] = a4;
  v51 = v22;
  if (*(double *)&a6 < 0.0 || *(double *)&a6 > 1.57079633)
  {
    v56 = 0.0;
    v57 = 0xE000000000000000;
    _StringGuts.grow(_:)(31);
    v23._object = (void *)0x800000010026F310;
    v23._countAndFlagsBits = 0xD00000000000001DLL;
    String.append(_:)(v23);
    v53 = round(*(double *)&a6 * 57.2957795) * 0.0174532925;
    _print_unlocked<A, B>(_:_:)(&v53, &v56, &type metadata for Angle, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
    v24 = v57;
    *(double *)&v25 = COERCE_DOUBLE(String.init(format:_:)(*(_QWORD *)&v56, v57));
    v27 = v26;
    swift_bridgeObjectRelease(v24);
    v56 = *(double *)&v25;
    v57 = v27;
    PassthroughSubject.send(_:)(&v56);
    swift_bridgeObjectRelease(v27);
  }
  sub_1001DE1F0((uint64_t)&off_1002E21F0);
  v28 = vmulq_f32(v51, (float32x4_t)xmmword_100252120);
  v29 = (int32x4_t)vnegq_f32(v28);
  v30 = (int8x16_t)vtrn2q_s32((int32x4_t)v28, vtrn1q_s32((int32x4_t)v28, v29));
  v32 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v28, (int8x16_t)v29, 8uLL), *(float32x2_t *)v31.f32, 1), (float32x4_t)vextq_s8(v30, v30, 8uLL), v31.f32[0]);
  v33 = (float32x4_t)vrev64q_s32((int32x4_t)v28);
  v33.i32[0] = v29.i32[1];
  v33.i32[3] = v29.i32[2];
  v34 = vmlaq_laneq_f32(v32, v33, v31, 2);
  v35 = (int32x4_t)vnegq_f32(v34);
  v36 = (int8x16_t)vtrn2q_s32((int32x4_t)v34, vtrn1q_s32((int32x4_t)v34, v35));
  v37 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v35, 8uLL), *(float32x2_t *)v51.f32, 1), (float32x4_t)vextq_s8(v36, v36, 8uLL), v51.f32[0]);
  v38 = (float32x4_t)vrev64q_s32((int32x4_t)v34);
  v38.i32[0] = v35.i32[1];
  v38.i32[3] = v35.i32[2];
  if (COERCE_FLOAT(vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v34, v51, 3), v38, v51, 2), v37).i32[2]) < 0.0)
  {
    swift_beginAccess(&v58, &v53, 1, 0);
    v56 = 3.14159265;
    v39 = Angle.animatableData.getter(*(double *)&v58);
    v40 = Angle.animatableData.getter(3.14159265);
    Angle.animatableData.setter(v40 - v39);
    *(double *)&v58 = v56;
  }
  v56 = 1.57079633;
  v41 = Angle.animatableData.getter(*(double *)&a6);
  v42 = Angle.animatableData.getter(1.57079633);
  Angle.animatableData.setter(v41 + v42);
  v43 = v56;
  swift_beginAccess(&v58, &v56, 0, 0);
  v55 = v43;
  v44 = Angle.animatableData.getter(*(double *)&v58);
  v45 = Angle.animatableData.getter(v43);
  Angle.animatableData.setter(v45 - v44);
  v46 = v55;
  if (v55 < 0.0 || v55 >= 6.28318531)
    v46 = v55 - floor(v55 / 6.28318531) * 6.28318531;
  if (v46 > 3.14159265)
  {
    v55 = v46;
    v47 = Angle.animatableData.getter(6.28318531);
    v48 = Angle.animatableData.getter(v46);
    Angle.animatableData.setter(v48 - v47);
    v46 = v55;
  }
  return *(_QWORD *)&v46;
}

double sub_1001C6A74(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = *(unsigned __int8 *)(v1 + 42);
  if (v4 == 2)
  {
    if (a1 == 2)
      return result;
LABEL_6:
    if (qword_100315830 != -1)
      swift_once(&qword_100315830, sub_1000D961C);
    v5 = type metadata accessor for Logger(0);
    sub_10000D744(v5, (uint64_t)qword_10033FD48);
    v7 = swift_retain_n(v1, v6);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(22, -1);
      v11 = swift_slowAlloc(64, -1);
      v25 = v11;
      *(_DWORD *)v10 = 136446466;
      LOBYTE(v24) = a1;
      v12 = sub_100003DB8((uint64_t *)&unk_1003263F0);
      v14 = String.init<A>(describing:)(&v24, v12, v13);
      v16 = v15;
      v24 = sub_100172BEC(v14, v15, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 4, v10 + 12);
      v17 = swift_bridgeObjectRelease(v16);
      *(_WORD *)(v10 + 12) = 2082;
      LOBYTE(v24) = *(_BYTE *)(v2 + 42);
      v18 = String.init<A>(describing:)(&v24, v12, v17);
      v20 = v19;
      v24 = sub_100172BEC(v18, v19, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 14, v10 + 22);
      swift_release_n(v2);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "locationServicesForSatelliteAuthorized changed from: %{public}s to: %{public}s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      if (*(_QWORD *)(v2 + 32))
      {
LABEL_10:
        *(_BYTE *)(v2 + 41) = 1;
        return result;
      }
    }
    else
    {

      swift_release_n(v2);
      if (*(_QWORD *)(v2 + 32))
        goto LABEL_10;
    }
    v22 = sub_100003DB8(&qword_10032B0E0);
    v23 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v22, v23).n128_u64[0];
    return result;
  }
  if (a1 == 2 || ((((a1 & 1) == 0) ^ v4) & 1) == 0)
    goto LABEL_6;
  return result;
}

double sub_1001C6D00(char a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(v1 + 42);
  if (v3 == 2)
  {
    if (a1 == 2)
      goto LABEL_9;
    goto LABEL_6;
  }
  if (a1 == 2 || ((((a1 & 1) == 0) ^ v3) & 1) == 0)
  {
LABEL_6:
    if (*(_QWORD *)(v1 + 32))
    {
      *(_BYTE *)(v1 + 40) = 1;
    }
    else
    {
      v4 = sub_100003DB8(&qword_10032B0E0);
      v5 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v4, v5);
    }
  }
LABEL_9:
  *(_BYTE *)(v1 + 42) = a1;
  return sub_1001C6A74(v3);
}

double sub_1001C6DB8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = *(unsigned __int8 *)(v1 + 43);
  if (v4 == 2)
  {
    if (a1 == 2)
      return result;
LABEL_6:
    if (qword_100315830 != -1)
      swift_once(&qword_100315830, sub_1000D961C);
    v5 = type metadata accessor for Logger(0);
    sub_10000D744(v5, (uint64_t)qword_10033FD48);
    v7 = swift_retain_n(v1, v6);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(22, -1);
      v11 = swift_slowAlloc(64, -1);
      v25 = v11;
      *(_DWORD *)v10 = 136446466;
      LOBYTE(v24) = a1;
      v12 = sub_100003DB8((uint64_t *)&unk_1003263F0);
      v14 = String.init<A>(describing:)(&v24, v12, v13);
      v16 = v15;
      v24 = sub_100172BEC(v14, v15, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 4, v10 + 12);
      v17 = swift_bridgeObjectRelease(v16);
      *(_WORD *)(v10 + 12) = 2082;
      LOBYTE(v24) = *(_BYTE *)(v2 + 43);
      v18 = String.init<A>(describing:)(&v24, v12, v17);
      v20 = v19;
      v24 = sub_100172BEC(v18, v19, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 14, v10 + 22);
      swift_release_n(v2);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "locationServicesForCompassAuthorized changed from: %{public}s to: %{public}s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      if (*(_QWORD *)(v2 + 32))
      {
LABEL_10:
        *(_BYTE *)(v2 + 41) = 1;
        return result;
      }
    }
    else
    {

      swift_release_n(v2);
      if (*(_QWORD *)(v2 + 32))
        goto LABEL_10;
    }
    v22 = sub_100003DB8(&qword_10032B0E0);
    v23 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v22, v23).n128_u64[0];
    return result;
  }
  if (a1 == 2 || ((((a1 & 1) == 0) ^ v4) & 1) == 0)
    goto LABEL_6;
  return result;
}

double sub_1001C7044(char a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(v1 + 43);
  if (v3 == 2)
  {
    if (a1 == 2)
      goto LABEL_9;
    goto LABEL_6;
  }
  if (a1 == 2 || ((((a1 & 1) == 0) ^ v3) & 1) == 0)
  {
LABEL_6:
    if (*(_QWORD *)(v1 + 32))
    {
      *(_BYTE *)(v1 + 40) = 1;
    }
    else
    {
      v4 = sub_100003DB8(&qword_10032B0E0);
      v5 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v4, v5);
    }
  }
LABEL_9:
  *(_BYTE *)(v1 + 43) = a1;
  return sub_1001C6DB8(v3);
}

uint64_t sub_1001C70FC()
{
  return sub_1001D4900(44);
}

uint64_t type metadata accessor for SystemSettingsModel()
{
  return objc_opt_self(_TtC8SOSBuddy19SystemSettingsModel);
}

uint64_t sub_1001C7124()
{
  return sub_1001D4900(105);
}

uint64_t type metadata accessor for OrientationModel()
{
  return objc_opt_self(_TtC8SOSBuddy16OrientationModel);
}

void sub_1001C714C(uint64_t a1)
{
  uint64_t v1;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[6];
  _BYTE v20[40];
  char v21;

  sub_10000B458(a1, (uint64_t)v19, &qword_100319FB8);
  if ((*(_BYTE *)(v1 + 88) & 1) != 0)
  {
    sub_10000B458(a1, (uint64_t)v20, &qword_100319FB8);
    if ((v21 & 1) != 0)
      return;
    goto LABEL_10;
  }
  v4 = *(double *)&v19[1];
  v3 = *(double *)&v19[2];
  v6 = *(double *)&v19[3];
  v5 = *(double *)&v19[4];
  v8 = *(double *)(v1 + 56);
  v7 = *(double *)(v1 + 64);
  v10 = *(double *)(v1 + 72);
  v9 = *(double *)(v1 + 80);
  v11 = *(_QWORD *)(v1 + 48);
  v12 = v19[0];
  v13 = sub_10000B458(a1, (uint64_t)v20, &qword_100319FB8);
  if ((v21 & 1) != 0
    || v11 != v12
    || (v14 = static Angle.== infix(_:_:)(v13, v8, v4), (v14 & 1) == 0)
    || (v15 = static Angle.== infix(_:_:)(v14, v7, v3), (v15 & 1) == 0)
    || (v16 = static Angle.== infix(_:_:)(v15, v10, v6), (v16 & 1) == 0)
    || (static Angle.== infix(_:_:)(v16, v9, v5) & 1) == 0)
  {
LABEL_10:
    if (*(_QWORD *)(v1 + 32))
    {
      *(_BYTE *)(v1 + 40) = 1;
    }
    else
    {
      v17 = sub_100003DB8(&qword_10032B0E0);
      v18 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v17, v18);
    }
  }
}

void sub_1001C729C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __n128 v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42[8];
  uint64_t v43;
  _QWORD v44[6];
  uint64_t v45[5];
  char v46;
  _QWORD v47[5];
  char v48;
  _BYTE v49[40];
  char v50;

  v2 = v1;
  sub_10000B458(a1, (uint64_t)v44, &qword_100319FB8);
  if ((*(_BYTE *)(v1 + 88) & 1) != 0)
  {
    sub_10000B458(a1, (uint64_t)v49, &qword_100319FB8);
    if ((v50 & 1) != 0)
      return;
LABEL_10:
    if ((*(_BYTE *)(v2 + 88) & 1) != 0)
    {
      sub_10000B458(a1, (uint64_t)v47, &qword_100319FB8);
      if ((v48 & 1) != 0)
        goto LABEL_25;
    }
    else
    {
      v18 = *(_QWORD *)(v2 + 48);
      sub_10000B458(a1, (uint64_t)v47, &qword_100319FB8);
      v19 = v47[0];
      if (v48)
        v19 = 0;
      if ((v48 & 1) == 0 && v18 == v19)
        goto LABEL_25;
    }
    if (qword_100315830 != -1)
      swift_once(&qword_100315830, sub_1000D961C);
    v20 = type metadata accessor for Logger(0);
    sub_10000D744(v20, (uint64_t)qword_10033FD48);
    v22 = swift_retain_n(v2, v21);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v23, v24))
    {

      swift_release_n(v2);
      if (*(_QWORD *)(v2 + 32))
        goto LABEL_26;
      goto LABEL_28;
    }
    v25 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(64, -1);
    v43 = v26;
    *(_DWORD *)v25 = 136446466;
    sub_10000B458(a1, (uint64_t)v45, &qword_100319FB8);
    v27 = v45[0];
    if (v46)
      v27 = 0;
    v41 = v27;
    v42[0] = v46;
    v28 = sub_100003DB8(&qword_100328528);
    v30 = String.init<A>(describing:)(&v41, v28, v29);
    v32 = v31;
    v41 = sub_100172BEC(v30, v31, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v25 + 4, v25 + 12);
    v33 = swift_bridgeObjectRelease(v32);
    v34 = 0;
    *(_WORD *)(v25 + 12) = 2082;
    v35 = *(_BYTE *)(v2 + 88);
    if ((v35 & 1) == 0)
      v34 = *(_QWORD *)(v2 + 48);
    v41 = v34;
    v42[0] = v35;
    v36 = String.init<A>(describing:)(&v41, v28, v33);
    v38 = v37;
    v41 = sub_100172BEC(v36, v37, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v25 + 14, v25 + 22);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v38);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Primary target id changed from: %{public}s to: %{public}s", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

LABEL_25:
    if (*(_QWORD *)(v2 + 32))
    {
LABEL_26:
      *(_BYTE *)(v2 + 41) = 1;
      return;
    }
LABEL_28:
    v39 = sub_100003DB8(&qword_10032B0E0);
    v40 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v39, v40);
    return;
  }
  v5 = *(double *)&v44[1];
  v4 = *(double *)&v44[2];
  v7 = *(double *)&v44[3];
  v6 = *(double *)&v44[4];
  v9 = *(double *)(v1 + 56);
  v8 = *(double *)(v1 + 64);
  v11 = *(double *)(v1 + 72);
  v10 = *(double *)(v1 + 80);
  v12 = *(_QWORD *)(v1 + 48);
  v13 = v44[0];
  v14 = sub_10000B458(a1, (uint64_t)v49, &qword_100319FB8);
  if ((v50 & 1) != 0)
    goto LABEL_10;
  if (v12 != v13)
    goto LABEL_10;
  v15 = static Angle.== infix(_:_:)(v14, v9, v5);
  if ((v15 & 1) == 0)
    goto LABEL_10;
  v16 = static Angle.== infix(_:_:)(v15, v8, v4);
  if ((v16 & 1) == 0)
    goto LABEL_10;
  v17 = static Angle.== infix(_:_:)(v16, v11, v7);
  if ((v17 & 1) == 0 || (static Angle.== infix(_:_:)(v17, v10, v6) & 1) == 0)
    goto LABEL_10;
}

double sub_1001C7660(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  double result;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[24];

  v3 = type metadata accessor for LinkState(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_100003DB8((uint64_t *)&unk_10031B230);
  __chkstk_darwin(v8, v9);
  v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = sub_100003DB8(&qword_10031FA40);
  __chkstk_darwin(v12, v13);
  v15 = &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = v1 + OBJC_IVAR____TtC8SOSBuddy11TargetModel_link;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy11TargetModel_link, v24, 0, 0);
  v17 = (uint64_t)&v15[*(int *)(v12 + 48)];
  sub_10000B234(v16, (uint64_t)v15, (uint64_t *)&unk_10031B230);
  sub_10000B234(a1, v17, (uint64_t *)&unk_10031B230);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v18((uint64_t)v15, 1, v3) == 1)
  {
    if (v18(v17, 1, v3) == 1)
    {
      sub_100007FF0((uint64_t)v15, (uint64_t *)&unk_10031B230);
      return result;
    }
  }
  else
  {
    sub_10000B234((uint64_t)v15, (uint64_t)v11, (uint64_t *)&unk_10031B230);
    if (v18(v17, 1, v3) != 1)
    {
      sub_1000E8D6C(v17, (uint64_t)v7, type metadata accessor for LinkState);
      v20 = sub_1000FBC9C(v11, v7);
      sub_10000AFFC((uint64_t)v7, type metadata accessor for LinkState);
      sub_10000AFFC((uint64_t)v11, type metadata accessor for LinkState);
      sub_100007FF0((uint64_t)v15, (uint64_t *)&unk_10031B230);
      if (v20)
        return result;
      goto LABEL_8;
    }
    sub_10000AFFC((uint64_t)v11, type metadata accessor for LinkState);
  }
  sub_100007FF0((uint64_t)v15, &qword_10031FA40);
LABEL_8:
  if (*(_QWORD *)(v1 + 32))
  {
    *(_BYTE *)(v1 + 40) = 1;
  }
  else
  {
    v21 = sub_100003DB8(&qword_10032B0E0);
    v22 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v21, v22).n128_u64[0];
  }
  return result;
}

void sub_1001C78D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char v55[24];

  v3 = type metadata accessor for LinkState(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (unsigned __int8 *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100003DB8((uint64_t *)&unk_10031B230);
  v9 = __chkstk_darwin(v50, v8);
  v49 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9, v11);
  v51 = (char *)&v48 - v13;
  __chkstk_darwin(v12, v14);
  v16 = (unsigned __int8 *)&v48 - v15;
  v17 = sub_100003DB8(&qword_10031FA40);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = v1;
  v21 = v1 + OBJC_IVAR____TtC8SOSBuddy11TargetModel_link;
  v22 = a1;
  swift_beginAccess(v21, v55, 0, 0);
  v23 = (uint64_t)&v20[*(int *)(v17 + 48)];
  sub_10000B234(v21, (uint64_t)v20, (uint64_t *)&unk_10031B230);
  sub_10000B234(a1, v23, (uint64_t *)&unk_10031B230);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v24((uint64_t)v20, 1, v3) == 1)
  {
    if (v24(v23, 1, v3) == 1)
    {
      sub_100007FF0((uint64_t)v20, (uint64_t *)&unk_10031B230);
      return;
    }
  }
  else
  {
    sub_10000B234((uint64_t)v20, (uint64_t)v16, (uint64_t *)&unk_10031B230);
    if (v24(v23, 1, v3) != 1)
    {
      sub_1000E8D6C(v23, (uint64_t)v7, type metadata accessor for LinkState);
      v47 = sub_1000FBC9C(v16, v7);
      sub_10000AFFC((uint64_t)v7, type metadata accessor for LinkState);
      sub_10000AFFC((uint64_t)v16, type metadata accessor for LinkState);
      sub_100007FF0((uint64_t)v20, (uint64_t *)&unk_10031B230);
      v25 = (uint64_t)v51;
      if (v47)
        return;
      goto LABEL_7;
    }
    sub_10000AFFC((uint64_t)v16, type metadata accessor for LinkState);
  }
  sub_100007FF0((uint64_t)v20, &qword_10031FA40);
  v25 = (uint64_t)v51;
LABEL_7:
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v26 = type metadata accessor for Logger(0);
  sub_10000D744(v26, (uint64_t)qword_10033FD48);
  sub_10000B234(v22, v25, (uint64_t *)&unk_10031B230);
  v27 = v52;
  v29 = swift_retain_n(v52, v28);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc(22, -1);
    v51 = (char *)swift_slowAlloc(64, -1);
    v54 = v51;
    *(_DWORD *)v32 = 136446466;
    v33 = v49;
    sub_10000B234(v25, v49, (uint64_t *)&unk_10031B230);
    v34 = v50;
    v36 = String.init<A>(describing:)(v33, v50, v35);
    v38 = v37;
    v53 = sub_100172BEC(v36, v37, (uint64_t *)&v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v32 + 4, v32 + 12);
    v39 = v38;
    v27 = v52;
    swift_bridgeObjectRelease(v39);
    sub_100007FF0(v25, (uint64_t *)&unk_10031B230);
    *(_WORD *)(v32 + 12) = 2082;
    sub_10000B234(v21, v33, (uint64_t *)&unk_10031B230);
    v41 = String.init<A>(describing:)(v33, v34, v40);
    v43 = v42;
    v53 = sub_100172BEC(v41, v42, (uint64_t *)&v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v32 + 14, v32 + 22);
    swift_release_n(v27);
    swift_bridgeObjectRelease(v43);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Link state changed from: %{public}s to: %{public}s", (uint8_t *)v32, 0x16u);
    v44 = v51;
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v32, -1, -1);

    if (*(_QWORD *)(v27 + 32))
    {
LABEL_11:
      *(_BYTE *)(v27 + 41) = 1;
      return;
    }
  }
  else
  {
    sub_100007FF0(v25, (uint64_t *)&unk_10031B230);

    swift_release_n(v27);
    if (*(_QWORD *)(v27 + 32))
      goto LABEL_11;
  }
  v45 = sub_100003DB8(&qword_10032B0E0);
  v46 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Subject<>.send()(v45, v46);
}

uint64_t sub_1001C7DC0()
{
  uint64_t v0;

  return sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy11TargetModel_link, (uint64_t *)&unk_10031B230);
}

uint64_t sub_1001C7DE8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  sub_100007FF0((uint64_t)v0 + OBJC_IVAR____TtC8SOSBuddy11TargetModel_link, (uint64_t *)&unk_10031B230);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1001C7E30()
{
  return type metadata accessor for TargetModel(0);
}

uint64_t type metadata accessor for TargetModel(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100326D68, (uint64_t)&nominal type descriptor for TargetModel);
}

void sub_1001C7E4C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = ")";
  sub_1000F03D4(319, &qword_10031F9A8, type metadata accessor for LinkState);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 2, v4, a1 + 256);
  }
}

double sub_1001C7ED4(__int16 a1)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = v1;
  v3 = a1;
  v4 = HIBYTE(a1);
  if ((*(_BYTE *)(v1 + 43) & 1) != 0)
  {
    if ((a1 & 0x100) != 0)
      return result;
LABEL_5:
    if (qword_100315830 != -1)
      swift_once(&qword_100315830, sub_1000D961C);
    v5 = type metadata accessor for Logger(0);
    sub_10000D744(v5, (uint64_t)qword_10033FD48);
    v7 = swift_retain_n(v1, v6);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = v3;
      v11 = swift_slowAlloc(22, -1);
      v12 = swift_slowAlloc(64, -1);
      v27 = v12;
      *(_DWORD *)v11 = 136446466;
      LOBYTE(v26) = v10;
      BYTE1(v26) = v4 & 1;
      v13 = sub_100003DB8(&qword_100328520);
      v15 = String.init<A>(describing:)(&v26, v13, v14);
      v17 = v16;
      v26 = sub_100172BEC(v15, v16, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v11 + 4, v11 + 12);
      v18 = swift_bridgeObjectRelease(v17);
      *(_WORD *)(v11 + 12) = 2082;
      v19 = *(_BYTE *)(v2 + 43);
      LOBYTE(v26) = *(_BYTE *)(v2 + 42);
      BYTE1(v26) = v19;
      v20 = String.init<A>(describing:)(&v26, v13, v18);
      v22 = v21;
      v26 = sub_100172BEC(v20, v21, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v11 + 14, v11 + 22);
      swift_release_n(v2);
      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Location state changed from: %{public}s to: %{public}s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      if (*(_QWORD *)(v2 + 32))
      {
LABEL_9:
        *(_BYTE *)(v2 + 41) = 1;
        return result;
      }
    }
    else
    {

      swift_release_n(v2);
      if (*(_QWORD *)(v2 + 32))
        goto LABEL_9;
    }
    v24 = sub_100003DB8(&qword_10032B0E0);
    v25 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v24, v25).n128_u64[0];
    return result;
  }
  if ((a1 & 0x100) != 0)
    goto LABEL_5;
  if ((*(_BYTE *)(v1 + 42) & 1) != 0)
  {
    if ((a1 & 1) != 0)
      return result;
    goto LABEL_5;
  }
  if ((a1 & 1) != 0)
    goto LABEL_5;
  return result;
}

uint64_t type metadata accessor for LocationModel()
{
  return objc_opt_self(_TtC8SOSBuddy13LocationModel);
}

_QWORD *sub_1001C8194(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t (*v63)(uint64_t);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unsigned int (*v67)(uint64_t, uint64_t, uint64_t);
  char *v68;
  void (*v69)(char *, uint64_t, uint64_t);
  uint64_t v70;
  char v71;
  char *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char v76;
  char *v77;
  char v78;
  uint64_t v80;
  _QWORD v81[2];
  void (*v82)(char *, uint64_t, uint64_t);
  char *v83;
  char *v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char v98[32];

  v3 = sub_100003DB8(&qword_100317D58);
  v5 = __chkstk_darwin(v3, v4);
  v88 = (char *)v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  v92 = (uint64_t)v81 - v8;
  v89 = type metadata accessor for ServiceOutages.Outage(0);
  v87 = *(_QWORD *)(v89 - 8);
  v10 = __chkstk_darwin(v89, v9);
  v95 = (uint64_t)v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v12);
  v97 = (uint64_t)v81 - v13;
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  v93 = v14;
  v94 = v15;
  v17 = __chkstk_darwin(v14, v16);
  v90 = (char *)v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17, v19);
  v96 = (char *)v81 - v21;
  v23 = __chkstk_darwin(v20, v22);
  v91 = (char *)v81 - v24;
  __chkstk_darwin(v23, v25);
  v27 = (char *)v81 - v26;
  v28 = sub_100003DB8(&qword_10031F880);
  __chkstk_darwin(v28, v29);
  v31 = (char *)v81 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for ServiceOutages(0);
  v33 = *(_QWORD *)(v32 - 8);
  v35 = __chkstk_darwin(v32, v34);
  v37 = (char *)v81 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35, v38);
  v40 = (char *)v81 - v39;
  v41 = v1;
  v42 = sub_1001C87F4(a1);
  if (v43)
    return v42;
  v83 = v37;
  v84 = v40;
  v85 = v27;
  v86 = a1;
  v45 = v93;
  v46 = v1 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__serviceOutages;
  swift_beginAccess(v41 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__serviceOutages, v98, 0, 0);
  sub_10000B234(v46, (uint64_t)v31, &qword_10031F880);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32) == 1)
  {
    sub_100007FF0((uint64_t)v31, &qword_10031F880);
    return 0;
  }
  v81[1] = v41;
  v47 = (uint64_t)v84;
  sub_1000E8D6C((uint64_t)v31, (uint64_t)v84, type metadata accessor for ServiceOutages);
  v48 = sub_1000052EC((unint64_t *)&qword_10031FA60, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v49 = v86;
  v50 = dispatch thunk of static Comparable.< infix(_:_:)(v86, v47);
  v51 = v94;
  v52 = v85;
  v82 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 16);
  v82(v85, v49, v45);
  v53 = v83;
  sub_1000E1F30(v47, (uint64_t)v83, type metadata accessor for ServiceOutages);
  if ((v50 & 1) != 0)
  {
    sub_10000AFFC((uint64_t)v53, type metadata accessor for ServiceOutages);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v45);
LABEL_20:
    sub_10000AFFC(v47, type metadata accessor for ServiceOutages);
    return 0;
  }
  v54 = v45;
  v55 = dispatch thunk of static Comparable.< infix(_:_:)(&v53[*(int *)(v32 + 20)], v52);
  sub_10000AFFC((uint64_t)v53, type metadata accessor for ServiceOutages);
  v56 = *(void (**)(char *, uint64_t))(v51 + 8);
  v56(v52, v45);
  if ((v55 & 1) != 0)
    goto LABEL_20;
  v85 = (char *)v48;
  v57 = *(_QWORD *)(v47 + *(int *)(v32 + 24));
  v58 = *(_QWORD *)(v57 + 16);
  if (!v58)
    goto LABEL_20;
  v83 = (char *)v56;
  v59 = v57 + ((*(unsigned __int8 *)(v87 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80));
  v87 = *(_QWORD *)(v87 + 72);
  v81[0] = v57;
  swift_bridgeObjectRetain(v57);
  v60 = type metadata accessor for ServiceOutages.Outage;
  v61 = (uint64_t)v88;
  v62 = v97;
  while (1)
  {
    v63 = v60;
    sub_1000E1F30(v59, v62, v60);
    v64 = v62;
    v65 = v92;
    sub_10000B234(v64, v92, &qword_100317D58);
    v66 = v51;
    v67 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
    if (v67(v65, 1, v54) == 1)
    {
      v68 = v91;
      static Date.distantPast.getter();
      sub_100007FF0(v65, &qword_100317D58);
    }
    else
    {
      v69 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 32);
      v68 = v91;
      v69(v91, v65, v54);
    }
    v70 = v86;
    v71 = dispatch thunk of static Comparable.< infix(_:_:)(v68, v86);
    v72 = v83;
    ((void (*)(char *, uint64_t))v83)(v68, v45);
    v82(v96, v70, v45);
    v73 = v95;
    sub_1000E1F30(v97, v95, v63);
    if ((v71 & 1) == 0)
      break;
    sub_10000B234(v73 + *(int *)(v89 + 20), v61, &qword_100317D58);
    if (v67(v61, 1, v45) == 1)
    {
      v74 = v90;
      static Date.distantFuture.getter();
      sub_100007FF0(v61, &qword_100317D58);
      v51 = v94;
    }
    else
    {
      v51 = v94;
      v74 = v90;
      (*(void (**)(char *, uint64_t, uint64_t))(v94 + 32))(v90, v61, v45);
    }
    v75 = v96;
    v54 = v45;
    v76 = dispatch thunk of static Comparable.< infix(_:_:)(v74, v96);
    v77 = v74;
    v78 = v76;
    ((void (*)(char *, uint64_t))v72)(v77, v45);
    sub_10000AFFC(v95, v63);
    ((void (*)(char *, uint64_t))v72)(v75, v45);
    if ((v78 & 1) == 0)
      goto LABEL_24;
    v62 = v97;
    sub_10000AFFC(v97, v63);
    v59 += v87;
    --v58;
    v60 = v63;
    if (!v58)
    {
      swift_bridgeObjectRelease(v81[0]);
      v47 = (uint64_t)v84;
      goto LABEL_20;
    }
  }
  sub_10000AFFC(v73, type metadata accessor for ServiceOutages.Outage);
  ((void (*)(char *, uint64_t))v72)(v96, v45);
LABEL_24:
  swift_bridgeObjectRelease(v81[0]);
  v80 = v97;
  v44 = sub_1001CA10C(v97, v86);
  sub_10000AFFC(v80, type metadata accessor for ServiceOutages.Outage);
  sub_10000AFFC((uint64_t)v84, type metadata accessor for ServiceOutages);
  return (_QWORD *)v44;
}

_QWORD *sub_1001C87F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  _QWORD *v24;
  double v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE v29[24];
  Swift::String v30[4];

  v28 = a1;
  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v29[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_100003DB8(&qword_10031F888);
  __chkstk_darwin(v7, v8);
  v10 = &v29[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = type metadata accessor for SilencePeriod(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = &v29[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v14, v17);
  v19 = &v29[-v18 - 8];
  v20 = v1 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__silencePeriod;
  swift_beginAccess(v20, v29, 0, 0);
  sub_10000B234(v20, (uint64_t)v10, &qword_10031F888);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_100007FF0((uint64_t)v10, &qword_10031F888);
    return 0;
  }
  sub_1000E8D6C((uint64_t)v10, (uint64_t)v19, type metadata accessor for SilencePeriod);
  sub_1000052EC((unint64_t *)&qword_10031FA60, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v21 = v28;
  v22 = dispatch thunk of static Comparable.< infix(_:_:)(v28, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v21, v2);
  sub_1000E1F30((uint64_t)v19, (uint64_t)v16, type metadata accessor for SilencePeriod);
  if ((v22 & 1) != 0)
  {
    sub_10000AFFC((uint64_t)v16, type metadata accessor for SilencePeriod);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
LABEL_6:
    sub_10000AFFC((uint64_t)v19, type metadata accessor for SilencePeriod);
    return 0;
  }
  v23 = dispatch thunk of static Comparable.< infix(_:_:)(&v16[*(int *)(v11 + 20)], v6);
  sub_10000AFFC((uint64_t)v16, type metadata accessor for SilencePeriod);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  if ((v23 & 1) != 0)
    goto LABEL_6;
  v26 = Date.timeIntervalSince(_:)(v21);
  if (qword_100315958 != -1)
    swift_once(&qword_100315958, sub_1001C8AFC);
  v27 = qword_100326970;
  swift_retain(qword_100326970);
  sub_10001C4D0(v30);
  v24 = sub_1001DDB18(v30, v26);
  sub_1001DE694(v30);
  swift_release(v27);
  sub_10000AFFC((uint64_t)v19, type metadata accessor for SilencePeriod);
  return v24;
}

uint64_t sub_1001C8AFC(uint64_t a1)
{
  return sub_1001D1CC8(a1, &qword_100326970);
}

void sub_1001C8B08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[24];

  v3 = type metadata accessor for ServiceOutages(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_100003DB8(&qword_10031F880);
  __chkstk_darwin(v8, v9);
  v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = sub_100003DB8(&qword_10031FA50);
  __chkstk_darwin(v12, v13);
  v15 = &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = v1 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__serviceOutages;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__serviceOutages, v24, 0, 0);
  v17 = (uint64_t)&v15[*(int *)(v12 + 48)];
  sub_10000B234(v16, (uint64_t)v15, &qword_10031F880);
  sub_10000B234(a1, v17, &qword_10031F880);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v18((uint64_t)v15, 1, v3) == 1)
  {
    if (v18(v17, 1, v3) == 1)
    {
      sub_100007FF0((uint64_t)v15, &qword_10031F880);
      return;
    }
    v19 = &qword_10031FA50;
  }
  else
  {
    sub_10000B234((uint64_t)v15, (uint64_t)v11, &qword_10031F880);
    if (v18(v17, 1, v3) == 1)
    {
      v19 = &qword_10031FA50;
    }
    else
    {
      sub_1000E8D6C(v17, (uint64_t)v7, type metadata accessor for ServiceOutages);
      if ((static Date.== infix(_:_:)(v11, v7) & 1) != 0
        && (static Date.== infix(_:_:)(&v11[*(int *)(v3 + 20)], &v7[*(int *)(v3 + 20)]) & 1) != 0)
      {
        v20 = sub_1001DCD78(*(_QWORD *)&v11[*(int *)(v3 + 24)], *(_QWORD *)&v7[*(int *)(v3 + 24)]);
        sub_10000AFFC((uint64_t)v7, type metadata accessor for ServiceOutages);
        sub_10000AFFC((uint64_t)v11, type metadata accessor for ServiceOutages);
        sub_100007FF0((uint64_t)v15, &qword_10031F880);
        if ((v20 & 1) != 0)
          return;
        if (*(_QWORD *)(v1 + 32))
          goto LABEL_15;
LABEL_11:
        v21 = sub_100003DB8(&qword_10032B0E0);
        v22 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
        Subject<>.send()(v21, v22);
        return;
      }
      sub_10000AFFC((uint64_t)v7, type metadata accessor for ServiceOutages);
      v19 = &qword_10031F880;
    }
    sub_10000AFFC((uint64_t)v11, type metadata accessor for ServiceOutages);
  }
  sub_100007FF0((uint64_t)v15, v19);
  if (!*(_QWORD *)(v1 + 32))
    goto LABEL_11;
LABEL_15:
  *(_BYTE *)(v1 + 40) = 1;
}

double sub_1001C8DDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  double result;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __n128 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[24];

  v3 = type metadata accessor for ServiceOutages(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = &qword_10031F880;
  v53 = sub_100003DB8(&qword_10031F880);
  v10 = __chkstk_darwin(v53, v9);
  v51 = (uint64_t)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10, v12);
  v54 = (char *)&v51 - v14;
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v51 - v16;
  v18 = sub_100003DB8(&qword_10031FA50);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = v1;
  v22 = v1 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__serviceOutages;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__serviceOutages, v58, 0, 0);
  v23 = (uint64_t)&v21[*(int *)(v18 + 48)];
  v52 = v22;
  v24 = v22;
  v25 = a1;
  sub_10000B234(v24, (uint64_t)v21, &qword_10031F880);
  sub_10000B234(a1, v23, &qword_10031F880);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v26((uint64_t)v21, 1, v3) == 1)
  {
    if (v26(v23, 1, v3) == 1)
    {
      sub_100007FF0((uint64_t)v21, &qword_10031F880);
      return result;
    }
    v8 = &qword_10031FA50;
    v28 = (uint64_t)v54;
    v29 = v55;
  }
  else
  {
    sub_10000B234((uint64_t)v21, (uint64_t)v17, &qword_10031F880);
    if (v26(v23, 1, v3) == 1)
    {
      v8 = &qword_10031FA50;
      v28 = (uint64_t)v54;
    }
    else
    {
      sub_1000E8D6C(v23, (uint64_t)v7, type metadata accessor for ServiceOutages);
      v30 = static Date.== infix(_:_:)(v17, v7);
      v28 = (uint64_t)v54;
      if ((v30 & 1) != 0 && (static Date.== infix(_:_:)(&v17[*(int *)(v3 + 20)], &v7[*(int *)(v3 + 20)]) & 1) != 0)
      {
        v31 = sub_1001DCD78(*(_QWORD *)&v17[*(int *)(v3 + 24)], *(_QWORD *)&v7[*(int *)(v3 + 24)]);
        sub_10000AFFC((uint64_t)v7, type metadata accessor for ServiceOutages);
        sub_10000AFFC((uint64_t)v17, type metadata accessor for ServiceOutages);
        sub_100007FF0((uint64_t)v21, &qword_10031F880);
        v29 = v55;
        if ((v31 & 1) != 0)
          return result;
        goto LABEL_14;
      }
      sub_10000AFFC((uint64_t)v7, type metadata accessor for ServiceOutages);
    }
    v29 = v55;
    sub_10000AFFC((uint64_t)v17, type metadata accessor for ServiceOutages);
  }
  sub_100007FF0((uint64_t)v21, v8);
LABEL_14:
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v32 = type metadata accessor for Logger(0);
  sub_10000D744(v32, (uint64_t)qword_10033FD48);
  sub_10000B234(v25, v28, &qword_10031F880);
  v34 = swift_retain_n(v29, v33);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = swift_slowAlloc(22, -1);
    v55 = swift_slowAlloc(64, -1);
    v57 = v55;
    *(_DWORD *)v37 = 136446466;
    v38 = v51;
    sub_10000B234(v28, v51, &qword_10031F880);
    v39 = v53;
    v41 = String.init<A>(describing:)(v38, v53, v40);
    v43 = v42;
    v56 = sub_100172BEC(v41, v42, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease(v43);
    sub_100007FF0(v28, &qword_10031F880);
    *(_WORD *)(v37 + 12) = 2082;
    sub_10000B234(v52, v38, &qword_10031F880);
    v45 = String.init<A>(describing:)(v38, v39, v44);
    v47 = v46;
    v56 = sub_100172BEC(v45, v46, &v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v37 + 14, v37 + 22);
    swift_release_n(v29);
    swift_bridgeObjectRelease(v47);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Outages changed from: %{public}s to: %{public}s", (uint8_t *)v37, 0x16u);
    v48 = v55;
    swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {
    sub_100007FF0(v28, &qword_10031F880);

    swift_release_n(v29);
  }
  sub_1001C9320();
  if (*(_QWORD *)(v29 + 32))
  {
    *(_BYTE *)(v29 + 41) = 1;
  }
  else
  {
    v49 = sub_100003DB8(&qword_10032B0E0);
    v50 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v49, v50).n128_u64[0];
  }
  return result;
}

void sub_1001C9320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  __n128 v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  void *v33;
  id v34;
  _QWORD aBlock[5];
  uint64_t v36;
  _BYTE v37[24];
  _BYTE v38[24];

  v1 = v0;
  v2 = sub_100003DB8(&qword_10031F888);
  __chkstk_darwin(v2, v3);
  v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8(&qword_10031F880);
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8, v11);
  v13 = (char *)aBlock - v12;
  v14 = type metadata accessor for DispatchPredicate(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (_QWORD *)((char *)aBlock - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v18 = static OS_dispatch_queue.main.getter(v19);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v14);
  v20 = _dispatchPreconditionTest(_:)(v18);
  (*(void (**)(_QWORD *, uint64_t))(v15 + 8))(v18, v14);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    return;
  }
  v21 = v1 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__serviceOutages;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__serviceOutages, v38, 0, 0);
  sub_10000B234(v21, (uint64_t)v13, &qword_10031F880);
  v22 = type metadata accessor for ServiceOutages(0);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48);
  v24 = v23(v13, 1, v22);
  sub_100007FF0((uint64_t)v13, &qword_10031F880);
  if (v24 != 1)
  {
    sub_10000B234(v21, (uint64_t)v10, &qword_10031F880);
    if (v23(v10, 1, v22) == 1)
    {
      sub_100007FF0((uint64_t)v10, &qword_10031F880);
      goto LABEL_9;
    }
    v29 = *(_QWORD *)&v10[*(int *)(v22 + 24)];
    swift_bridgeObjectRetain(v29);
    sub_10000AFFC((uint64_t)v10, type metadata accessor for ServiceOutages);
    v30 = *(_QWORD *)(v29 + 16);
    swift_bridgeObjectRelease(v29);
    if (v30)
      goto LABEL_9;
  }
  v25 = v1 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__silencePeriod;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__silencePeriod, v37, 0, 0);
  sub_10000B234(v25, (uint64_t)v5, &qword_10031F888);
  v26 = type metadata accessor for SilencePeriod(0);
  LODWORD(v25) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 48))(v5, 1, v26);
  sub_100007FF0((uint64_t)v5, &qword_10031F888);
  if ((_DWORD)v25 == 1)
  {
    v27 = *(void **)(v1 + 48);
    if (v27)
    {
      objc_msgSend(v27, "invalidate");
      v28 = *(void **)(v1 + 48);
    }
    else
    {
      v28 = 0;
    }
    *(_QWORD *)(v1 + 48) = 0;
    goto LABEL_13;
  }
LABEL_9:
  if (*(_QWORD *)(v1 + 48))
    return;
  v31 = (void *)objc_opt_self(NSTimer);
  v32 = swift_allocObject(&unk_1002F7E38, 24, 7);
  swift_weakInit(v32 + 16);
  aBlock[4] = sub_1001DE648;
  v36 = v32;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100076C24;
  aBlock[3] = &unk_1002F7E50;
  v33 = _Block_copy(aBlock);
  swift_release(v36);
  v34 = objc_msgSend(v31, "scheduledTimerWithTimeInterval:repeats:block:", 1, v33, 1.0);
  _Block_release(v33);
  v28 = *(void **)(v1 + 48);
  *(_QWORD *)(v1 + 48) = v34;
LABEL_13:

}

double sub_1001C96BC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  double result;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[24];

  v3 = type metadata accessor for SilencePeriod(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_100003DB8(&qword_10031F888);
  __chkstk_darwin(v8, v9);
  v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = sub_100003DB8(&qword_10031FA48);
  __chkstk_darwin(v12, v13);
  v15 = &v25[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = v1 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__silencePeriod;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__silencePeriod, v25, 0, 0);
  v17 = (uint64_t)&v15[*(int *)(v12 + 48)];
  sub_10000B234(v16, (uint64_t)v15, &qword_10031F888);
  sub_10000B234(a1, v17, &qword_10031F888);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v18((uint64_t)v15, 1, v3) == 1)
  {
    if (v18(v17, 1, v3) == 1)
    {
      sub_100007FF0((uint64_t)v15, &qword_10031F888);
      return result;
    }
    v20 = &qword_10031FA48;
  }
  else
  {
    sub_10000B234((uint64_t)v15, (uint64_t)v11, &qword_10031F888);
    if (v18(v17, 1, v3) == 1)
    {
      v20 = &qword_10031FA48;
    }
    else
    {
      sub_1000E8D6C(v17, (uint64_t)v7, type metadata accessor for SilencePeriod);
      if ((static Date.== infix(_:_:)(v11, v7) & 1) != 0)
      {
        v21 = static Date.== infix(_:_:)(&v11[*(int *)(v3 + 20)], &v7[*(int *)(v3 + 20)]);
        sub_10000AFFC((uint64_t)v7, type metadata accessor for SilencePeriod);
        sub_10000AFFC((uint64_t)v11, type metadata accessor for SilencePeriod);
        sub_100007FF0((uint64_t)v15, &qword_10031F888);
        if ((v21 & 1) != 0)
          return result;
        if (!*(_QWORD *)(v1 + 32))
          goto LABEL_14;
LABEL_10:
        *(_BYTE *)(v1 + 40) = 1;
        return result;
      }
      sub_10000AFFC((uint64_t)v7, type metadata accessor for SilencePeriod);
      v20 = &qword_10031F888;
    }
    sub_10000AFFC((uint64_t)v11, type metadata accessor for SilencePeriod);
  }
  sub_100007FF0((uint64_t)v15, v20);
  if (*(_QWORD *)(v1 + 32))
    goto LABEL_10;
LABEL_14:
  v22 = sub_100003DB8(&qword_10032B0E0);
  v23 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  *(_QWORD *)&result = Subject<>.send()(v22, v23).n128_u64[0];
  return result;
}

double sub_1001C997C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  double result;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __n128 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  _BYTE v58[24];

  v3 = type metadata accessor for SilencePeriod(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = &qword_10031F888;
  v53 = sub_100003DB8(&qword_10031F888);
  v10 = __chkstk_darwin(v53, v9);
  v51 = (uint64_t)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10, v12);
  v55 = (char *)&v51 - v14;
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v51 - v16;
  v18 = sub_100003DB8(&qword_10031FA48);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v51 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = v1;
  v22 = v1 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__silencePeriod;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__silencePeriod, v58, 0, 0);
  v23 = (uint64_t)&v21[*(int *)(v18 + 48)];
  v52 = v22;
  v24 = v22;
  v25 = a1;
  sub_10000B234(v24, (uint64_t)v21, &qword_10031F888);
  sub_10000B234(a1, v23, &qword_10031F888);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v26((uint64_t)v21, 1, v3) == 1)
  {
    if (v26(v23, 1, v3) == 1)
    {
      sub_100007FF0((uint64_t)v21, &qword_10031F888);
      return result;
    }
    v8 = &qword_10031FA48;
    v29 = v54;
    v28 = (uint64_t)v55;
  }
  else
  {
    sub_10000B234((uint64_t)v21, (uint64_t)v17, &qword_10031F888);
    if (v26(v23, 1, v3) == 1)
    {
      v8 = &qword_10031FA48;
      v28 = (uint64_t)v55;
    }
    else
    {
      sub_1000E8D6C(v23, (uint64_t)v7, type metadata accessor for SilencePeriod);
      v30 = static Date.== infix(_:_:)(v17, v7);
      v28 = (uint64_t)v55;
      if ((v30 & 1) != 0)
      {
        v31 = static Date.== infix(_:_:)(&v17[*(int *)(v3 + 20)], &v7[*(int *)(v3 + 20)]);
        sub_10000AFFC((uint64_t)v7, type metadata accessor for SilencePeriod);
        sub_10000AFFC((uint64_t)v17, type metadata accessor for SilencePeriod);
        sub_100007FF0((uint64_t)v21, &qword_10031F888);
        v29 = v54;
        if ((v31 & 1) != 0)
          return result;
        goto LABEL_13;
      }
      sub_10000AFFC((uint64_t)v7, type metadata accessor for SilencePeriod);
    }
    v29 = v54;
    sub_10000AFFC((uint64_t)v17, type metadata accessor for SilencePeriod);
  }
  sub_100007FF0((uint64_t)v21, v8);
LABEL_13:
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v32 = type metadata accessor for Logger(0);
  sub_10000D744(v32, (uint64_t)qword_10033FD48);
  sub_10000B234(v25, v28, &qword_10031F888);
  v34 = swift_retain_n(v29, v33);
  v35 = Logger.logObject.getter(v34);
  v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = swift_slowAlloc(22, -1);
    v55 = (char *)swift_slowAlloc(64, -1);
    v57 = v55;
    *(_DWORD *)v37 = 136446466;
    v38 = v51;
    sub_10000B234(v28, v51, &qword_10031F888);
    v39 = v53;
    v41 = String.init<A>(describing:)(v38, v53, v40);
    v43 = v42;
    v56 = sub_100172BEC(v41, v42, (uint64_t *)&v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease(v43);
    sub_100007FF0(v28, &qword_10031F888);
    *(_WORD *)(v37 + 12) = 2082;
    sub_10000B234(v52, v38, &qword_10031F888);
    v45 = String.init<A>(describing:)(v38, v39, v44);
    v47 = v46;
    v56 = sub_100172BEC(v45, v46, (uint64_t *)&v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v37 + 14, v37 + 22);
    swift_release_n(v29);
    swift_bridgeObjectRelease(v47);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Silence period changed from: %{public}s to: %{public}s", (uint8_t *)v37, 0x16u);
    v48 = v55;
    swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    swift_slowDealloc(v37, -1, -1);

  }
  else
  {
    sub_100007FF0(v28, &qword_10031F888);

    swift_release_n(v29);
  }
  sub_1001C9320();
  if (*(_QWORD *)(v29 + 32))
  {
    *(_BYTE *)(v29 + 41) = 1;
  }
  else
  {
    v49 = sub_100003DB8(&qword_10032B0E0);
    v50 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v49, v50).n128_u64[0];
  }
  return result;
}

void sub_1001C9EAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  _BYTE v24[24];
  _BYTE v25[24];
  _BYTE v26[24];

  v1 = sub_100003DB8(&qword_10031F888);
  v3 = __chkstk_darwin(v1, v2);
  v5 = &v24[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v3, v6);
  v8 = &v24[-v7 - 8];
  v9 = sub_100003DB8(&qword_10031F880);
  v11 = __chkstk_darwin(v9, v10);
  v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v11, v14);
  v16 = &v24[-v15 - 8];
  v17 = type metadata accessor for ServiceOutages(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  v18 = v0 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__serviceOutages;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__serviceOutages, v26, 0, 0);
  sub_10000B234(v18, (uint64_t)v13, &qword_10031F880);
  sub_1001C8B08((uint64_t)v16);
  swift_beginAccess(v18, v25, 33, 0);
  sub_100175998((uint64_t)v16, v18, &qword_10031F880);
  swift_endAccess(v25);
  sub_1001C8DDC((uint64_t)v13);
  sub_100007FF0((uint64_t)v16, &qword_10031F880);
  sub_100007FF0((uint64_t)v13, &qword_10031F880);
  v19 = type metadata accessor for SilencePeriod(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v8, 1, 1, v19);
  v20 = v0 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__silencePeriod;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__silencePeriod, v25, 0, 0);
  sub_10000B234(v20, (uint64_t)v5, &qword_10031F888);
  sub_1001C96BC((uint64_t)v8);
  swift_beginAccess(v20, v24, 33, 0);
  sub_100175998((uint64_t)v8, v20, &qword_10031F888);
  swift_endAccess(v24);
  sub_1001C997C((uint64_t)v5);
  sub_100007FF0((uint64_t)v8, &qword_10031F888);
  sub_100007FF0((uint64_t)v5, &qword_10031F888);
  v21 = *(void **)(v0 + 48);
  if (v21)
  {
    objc_msgSend(v21, "invalidate");
    v22 = *(void **)(v0 + 48);
  }
  else
  {
    v22 = 0;
  }
  *(_QWORD *)(v0 + 48) = 0;

}

uint64_t sub_1001CA10C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char v44;
  void (*v45)(char *, uint64_t);
  void (*v46)(char *, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  char v52;
  uint64_t v53;
  char *v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  uint64_t v61;
  char *v62;
  double v63;
  uint64_t v64;
  _QWORD *v65;
  void (*v66)(char *, uint64_t, uint64_t);
  char *v67;
  double v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  char v82[24];
  Swift::String v83[4];

  v81 = a2;
  v3 = sub_100003DB8(&qword_10031F880);
  __chkstk_darwin(v3, v4);
  v73 = (uint64_t)&v70 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = type metadata accessor for ServiceOutages.Outage(0);
  __chkstk_darwin(v78, v6);
  v79 = (uint64_t)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100317D58);
  v10 = __chkstk_darwin(v8, v9);
  v74 = (uint64_t)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10, v12);
  v77 = (uint64_t)&v70 - v14;
  v16 = __chkstk_darwin(v13, v15);
  v75 = (uint64_t)&v70 - v17;
  __chkstk_darwin(v16, v18);
  v20 = (char *)&v70 - v19;
  v21 = type metadata accessor for Date(0);
  v22 = *(_QWORD *)(v21 - 8);
  v24 = __chkstk_darwin(v21, v23);
  v70 = (char *)&v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24, v26);
  v71 = (char *)&v70 - v28;
  v30 = __chkstk_darwin(v27, v29);
  v76 = (char *)&v70 - v31;
  v33 = __chkstk_darwin(v30, v32);
  v35 = (char *)&v70 - v34;
  v37 = __chkstk_darwin(v33, v36);
  v39 = (char *)&v70 - v38;
  __chkstk_darwin(v37, v40);
  v42 = (char *)&v70 - v41;
  sub_10000B234(a1, (uint64_t)v20, &qword_100317D58);
  v80 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (v80(v20, 1, v21) == 1)
  {
    static Date.distantPast.getter();
    sub_100007FF0((uint64_t)v20, &qword_100317D58);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v42, v20, v21);
  }
  sub_1000052EC((unint64_t *)&qword_10031FA60, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v43 = v81;
  v44 = dispatch thunk of static Comparable.< infix(_:_:)(v42, v81);
  v45 = *(void (**)(char *, uint64_t))(v22 + 8);
  v45(v42, v21);
  v46 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v46(v39, v43, v21);
  v47 = a1;
  v48 = a1;
  v49 = v79;
  sub_1000E1F30(v48, v79, type metadata accessor for ServiceOutages.Outage);
  if ((v44 & 1) != 0)
  {
    v50 = v75;
    sub_10000B234(v49 + *(int *)(v78 + 20), v75, &qword_100317D58);
    if (v80((char *)v50, 1, v21) == 1)
    {
      static Date.distantFuture.getter();
      sub_100007FF0(v50, &qword_100317D58);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v35, v50, v21);
    }
    v52 = dispatch thunk of static Comparable.< infix(_:_:)(v35, v39);
    v51 = v45;
    v45(v35, v21);
    sub_10000AFFC(v79, type metadata accessor for ServiceOutages.Outage);
    v45(v39, v21);
    if ((v52 & 1) != 0)
      return 0;
  }
  else
  {
    sub_10000AFFC(v49, type metadata accessor for ServiceOutages.Outage);
    v45(v39, v21);
    v51 = v45;
  }
  v53 = v77;
  sub_10000B234(v47, v77, &qword_100317D58);
  if (v80((char *)v53, 1, v21) == 1)
  {
    v54 = v76;
    static Date.distantPast.getter();
    sub_100007FF0(v53, &qword_100317D58);
  }
  else
  {
    v54 = v76;
    (*(void (**)(char *, uint64_t, uint64_t))(v22 + 32))(v76, v53, v21);
  }
  v55 = static Date.< infix(_:_:)(v54, v81);
  v51(v54, v21);
  if ((v55 & 1) == 0)
    return 0;
  v56 = v74;
  sub_10000B234(v47 + *(int *)(v78 + 20), v74, &qword_100317D58);
  if (v80((char *)v56, 1, v21) != 1)
  {
    v66 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 32);
    v67 = v71;
    v66(v71, v56, v21);
    v68 = Date.timeIntervalSince(_:)(v81);
    if (qword_100315958 != -1)
      swift_once(&qword_100315958, sub_1001C8AFC);
    v69 = qword_100326970;
    swift_retain(qword_100326970);
    sub_10001C4D0(v83);
    v65 = sub_1001DDB18(v83, v68);
    sub_1001DE694(v83);
    swift_release(v69);
    v51(v67, v21);
    return (uint64_t)v65;
  }
  sub_100007FF0(v56, &qword_100317D58);
  v57 = v72 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__serviceOutages;
  swift_beginAccess(v72 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__serviceOutages, v82, 0, 0);
  v58 = v73;
  sub_10000B234(v57, v73, &qword_10031F880);
  v59 = type metadata accessor for ServiceOutages(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 48))(v58, 1, v59);
  if ((_DWORD)result != 1)
  {
    v61 = v58 + *(int *)(v59 + 20);
    v62 = v70;
    v46(v70, v61, v21);
    sub_10000AFFC(v58, type metadata accessor for ServiceOutages);
    v63 = Date.timeIntervalSince(_:)(v81);
    v51(v62, v21);
    if (qword_100315958 != -1)
      swift_once(&qword_100315958, sub_1001C8AFC);
    v64 = qword_100326970;
    swift_retain(qword_100326970);
    sub_10001C4D0(v83);
    v65 = sub_1001DDB18(v83, v63);
    sub_1001DE694(v83);
    swift_release(v64);
    return (uint64_t)v65;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001CA7C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE v12[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v12, 0, 0);
  Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    v4 = Strong;
    if (*(_QWORD *)(Strong + 32))
    {
      *(_BYTE *)(Strong + 40) = 1;
    }
    else
    {
      v5 = sub_100003DB8(&qword_10032B0E0);
      v6 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v5, v6);
    }
    swift_release(v4);
  }
  swift_beginAccess(v2, &v11, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v8 = result;
    if (*(_QWORD *)(result + 32))
    {
      *(_BYTE *)(result + 41) = 1;
    }
    else
    {
      v9 = sub_100003DB8(&qword_10032B0E0);
      v10 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v9, v10);
    }
    return swift_release(v8);
  }
  return result;
}

uint64_t sub_1001CA8EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  __n128 v8;

  v1 = v0;
  *(_QWORD *)(v0 + 48) = 0;
  v2 = v0 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__serviceOutages;
  v3 = type metadata accessor for ServiceOutages(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 56))(v2, 1, 1, v3);
  v4 = v1 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__silencePeriod;
  v5 = type metadata accessor for SilencePeriod(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  *(_QWORD *)(v1 + 32) = 0;
  *(_WORD *)(v1 + 40) = 0;
  v6 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(_QWORD *)(v1 + 16) = PassthroughSubject.init()(v7);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(_QWORD *)(v1 + 24) = PassthroughSubject.init()(v8);
  return v1;
}

uint64_t sub_1001CA9C4()
{
  uint64_t v0;

  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__serviceOutages, &qword_10031F880);
  return sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__silencePeriod, &qword_10031F888);
}

uint64_t sub_1001CAA0C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));

  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__serviceOutages, &qword_10031F880);
  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy18ServiceOutageModel__silencePeriod, &qword_10031F888);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001CAA74()
{
  return type metadata accessor for ServiceOutageModel(0);
}

uint64_t type metadata accessor for ServiceOutageModel(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100327020, (uint64_t)&nominal type descriptor for ServiceOutageModel);
}

void sub_1001CAA90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v6[0] = "\b";
  sub_1000F03D4(319, &qword_10031F998, type metadata accessor for ServiceOutages);
  if (v3 <= 0x3F)
  {
    v6[1] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000F03D4(319, &qword_10031F9A0, type metadata accessor for SilencePeriod);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 3, v6, a1 + 256);
    }
  }
}

uint64_t sub_1001CAB44()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  __n128 v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  id v50;

  v1 = v0;
  v2 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8((uint64_t *)&unk_100326490);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain(v0);
  v48 = v7;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100209204((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v11 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)(v0 + 48) = v11;
  v47 = v0 + 48;
  v12 = type metadata accessor for TimerBasedHysteresisScheduler();
  v13 = swift_allocObject(v12, 16, 7);
  v14 = sub_100003DB8(&qword_1003285F8);
  v15 = swift_allocObject(v14, 136, 7);
  *(_QWORD *)(v1 + 56) = sub_1001DD530(v13, 0xD000000000000010, 0x800000010026F9B0, (uint64_t)sub_1001CB0D0, 0, v15, 2);
  v16 = v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress;
  v17 = type metadata accessor for ConnectionModel.UserTransmissionProgress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 1, 1, v17);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__userVisibleProgressTimer) = 0;
  v18 = v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__overrideTransmissionProgress;
  v19 = type metadata accessor for ConnectionModel.OverrideTransmissionProgress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  v20 = v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__simulatedTransmissionProgress;
  v21 = type metadata accessor for TransmissionProgress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v20, 1, 1, v21);
  swift_release(v1);
  *(_QWORD *)(v1 + 32) = 0;
  *(_WORD *)(v1 + 40) = 0;
  v22 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  *(_QWORD *)(v1 + 16) = PassthroughSubject.init()(v23);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  *(_QWORD *)(v1 + 24) = PassthroughSubject.init()(v24);
  v49[0] = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 16);
  v25 = v49[0];
  v26 = sub_10000D75C();
  swift_retain(v1);
  v27 = swift_retain(v25);
  v50 = (id)static OS_dispatch_queue.main.getter(v27);
  v28 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v46(v5, 1, 1, v28);
  v29 = sub_1000084FC((unint64_t *)&qword_1003264A0, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v45 = v29;
  v44 = sub_1000052EC((unint64_t *)&qword_10032B100, (uint64_t (*)(uint64_t))sub_10000D75C, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v50, v5, v22, v26, v29, v44);
  sub_100007FF0((uint64_t)v5, &qword_100329AF0);

  swift_release(v49[0]);
  v30 = (uint64_t)v5;
  v31 = v10;
  v32 = swift_allocObject(&unk_1002F8040, 32, 7);
  *(_QWORD *)(v32 + 16) = sub_1001DE8BC;
  *(_QWORD *)(v32 + 24) = v1;
  v33 = sub_1000084FC((unint64_t *)&unk_1003264B0, (uint64_t *)&unk_100326490, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v43 = v33;
  v34 = swift_retain(v1);
  v35 = Publisher<>.sink(receiveValue:)(sub_1000216F8, v32, v6, v33, v34);
  swift_release(v32);
  v36 = *(void (**)(char *, uint64_t))(v48 + 8);
  v36(v31, v6);
  v37 = v47;
  swift_beginAccess(v47, v49, 33, 0);
  AnyCancellable.store(in:)(v37);
  swift_endAccess(v49);
  swift_release(v35);
  v49[0] = *(_QWORD *)(*(_QWORD *)(v1 + 56) + 24);
  v38 = swift_retain(v49[0]);
  v50 = (id)static OS_dispatch_queue.main.getter(v38);
  v46((char *)v30, 1, 1, v28);
  Publisher.receive<A>(on:options:)(&v50, v30, v22, v26, v45, v44);
  sub_100007FF0(v30, &qword_100329AF0);

  swift_release(v49[0]);
  v39 = swift_allocObject(&unk_1002F8068, 32, 7);
  *(_QWORD *)(v39 + 16) = sub_1001DE8DC;
  *(_QWORD *)(v39 + 24) = v1;
  v40 = swift_retain(v1);
  v41 = Publisher<>.sink(receiveValue:)(sub_1000216F8, v39, v6, v43, v40);
  swift_release(v39);
  v36(v31, v6);
  swift_beginAccess(v37, v49, 33, 0);
  AnyCancellable.store(in:)(v37);
  swift_endAccess(v49);
  swift_release(v41);
  swift_release(v1);
  return v1;
}

double sub_1001CB060(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  if (*(_QWORD *)(a1 + 32))
  {
    *(_BYTE *)(a1 + 41) = 1;
  }
  else
  {
    v1 = sub_100003DB8(&qword_10032B0E0);
    v2 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v1, v2).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001CB0D0(_BYTE *a1, _BYTE *a2)
{
  if ((*a2 == 2) | *a2 & 1 | (*a1 == 2 || (*a1 & 1) == 0))
    return 0;
  else
    return 0x4024000000000000;
}

uint64_t sub_1001CB10C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint8_t *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[3];

  v77 = a1;
  v1 = sub_100003DB8(&qword_1003284E8);
  v3 = __chkstk_darwin(v1, v2);
  v76 = (uint64_t)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __chkstk_darwin(v3, v5);
  v8 = (char *)&v69 - v7;
  __chkstk_darwin(v6, v9);
  v74 = (char *)&v69 - v10;
  v11 = type metadata accessor for ConnectionModel.UserTransmissionProgress(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v75 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003DB8(&qword_100316B68);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for TransmissionProgress(0);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = __chkstk_darwin(v19, v21);
  v73 = (uint64_t)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22, v24);
  v27 = (char *)&v69 - v26;
  v29 = __chkstk_darwin(v25, v28);
  v31 = (char *)&v69 - v30;
  __chkstk_darwin(v29, v32);
  v34 = (char *)&v69 - v33;
  sub_10000B234(v77, (uint64_t)v18, &qword_100316B68);
  v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v77 = v19;
  if (v35(v18, 1, v19) == 1)
  {
    sub_100007FF0((uint64_t)v18, &qword_100316B68);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v8, 1, 1, v11);
    v36 = v78 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress;
    swift_beginAccess(v78 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress, v81, 0, 0);
    v37 = v76;
    sub_10000B234(v36, v76, &qword_1003284E8);
    sub_1001CCEB8((uint64_t)v8);
    swift_beginAccess(v36, &v79, 33, 0);
    sub_100175998((uint64_t)v8, v36, &qword_1003284E8);
    swift_endAccess(&v79);
    sub_1001CD188(v37);
    sub_100007FF0((uint64_t)v8, &qword_1003284E8);
    return sub_100007FF0(v37, &qword_1003284E8);
  }
  v72 = v12;
  sub_1000E8D6C((uint64_t)v18, (uint64_t)v34, type metadata accessor for TransmissionProgress);
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v39 = type metadata accessor for Logger(0);
  sub_10000D744(v39, (uint64_t)qword_10033FD48);
  v40 = sub_1000E1F30((uint64_t)v34, (uint64_t)v31, type metadata accessor for TransmissionProgress);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter(v41);
  v43 = os_log_type_enabled(v41, v42);
  v44 = (uint64_t)v8;
  v45 = (uint64_t)v75;
  if (v43)
  {
    v46 = swift_slowAlloc(12, -1);
    v71 = v34;
    v47 = (uint8_t *)v46;
    v48 = swift_slowAlloc(32, -1);
    v81[0] = v48;
    *(_DWORD *)v47 = 136446210;
    v70 = v47 + 4;
    sub_1000E1F30((uint64_t)v31, (uint64_t)v27, type metadata accessor for TransmissionProgress);
    v50 = String.init<A>(describing:)(v27, v77, v49);
    v52 = v51;
    v79 = sub_100172BEC(v50, v51, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v70, v47 + 12);
    swift_bridgeObjectRelease(v52);
    sub_10000AFFC((uint64_t)v31, type metadata accessor for TransmissionProgress);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "Transmission progress received: %{public}s", v47, 0xCu);
    swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1, -1);
    v53 = v47;
    v34 = v71;
    swift_slowDealloc(v53, -1, -1);
  }
  else
  {
    sub_10000AFFC((uint64_t)v31, type metadata accessor for TransmissionProgress);
  }

  v54 = (uint64_t)v74;
  v55 = v78 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress;
  swift_beginAccess(v78 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress, v81, 0, 0);
  sub_10000B234(v55, v54, &qword_1003284E8);
  v56 = v72;
  v57 = v11;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v54, 1, v11) != 1)
  {
    sub_1000E8D6C(v54, v45, type metadata accessor for ConnectionModel.UserTransmissionProgress);
    v59 = *(int *)(v77 + 28);
    v60 = *(_QWORD *)(v45 + v59);
    if (*(_QWORD *)&v34[v59] < v60)
    {
      sub_1001CB8B4((uint64_t)v34, v44);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v56 + 56))(v44, 0, 1, v11);
      v61 = v76;
      sub_10000B234(v55, v76, &qword_1003284E8);
      sub_1001CCEB8(v44);
      swift_beginAccess(v55, &v79, 33, 0);
      sub_100175998(v44, v55, &qword_1003284E8);
      swift_endAccess(&v79);
      sub_1001CD188(v61);
      sub_100007FF0(v44, &qword_1003284E8);
      sub_100007FF0(v61, &qword_1003284E8);
      sub_10000AFFC(v45, type metadata accessor for ConnectionModel.UserTransmissionProgress);
      goto LABEL_12;
    }
    v63 = v73;
    sub_1000E1F30((uint64_t)v34, v73, type metadata accessor for TransmissionProgress);
    if (v60 > 99)
    {
      sub_10000AFFC(v63, type metadata accessor for TransmissionProgress);
    }
    else
    {
      v64 = *(_QWORD *)(v63 + *(int *)(v77 + 28));
      sub_10000AFFC(v63, type metadata accessor for TransmissionProgress);
      if (v64 >= 100)
      {
        sub_1001CBA98((uint64_t)v34);
        sub_1000E1F30((uint64_t)v34, v44, type metadata accessor for TransmissionProgress);
        v65 = v44 + *(int *)(v57 + 20);
        v66 = (uint64_t)v34;
LABEL_18:
        sub_1000E1F30(v66, v65, type metadata accessor for TransmissionProgress);
        *(_QWORD *)(v44 + *(int *)(v57 + 24)) = *(_QWORD *)(v45 + *(int *)(v57 + 24));
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v56 + 56))(v44, 0, 1, v57);
        v68 = v76;
        sub_10000B234(v55, v76, &qword_1003284E8);
        sub_1001CCEB8(v44);
        swift_beginAccess(v55, &v79, 33, 0);
        sub_100175998(v44, v55, &qword_1003284E8);
        swift_endAccess(&v79);
        sub_1001CD188(v68);
        sub_100007FF0(v44, &qword_1003284E8);
        sub_100007FF0(v68, &qword_1003284E8);
        sub_10000AFFC(v45, type metadata accessor for ConnectionModel.UserTransmissionProgress);
        v62 = (uint64_t)v34;
        return sub_10000AFFC(v62, type metadata accessor for TransmissionProgress);
      }
    }
    sub_1000E1F30((uint64_t)v34, v44, type metadata accessor for TransmissionProgress);
    v67 = *(int *)(v57 + 20);
    v66 = v45 + v67;
    v65 = v44 + v67;
    goto LABEL_18;
  }
  sub_100007FF0(v54, &qword_1003284E8);
  sub_1001CB8B4((uint64_t)v34, v44);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v56 + 56))(v44, 0, 1, v11);
  v58 = v76;
  sub_10000B234(v55, v76, &qword_1003284E8);
  sub_1001CCEB8(v44);
  swift_beginAccess(v55, &v79, 33, 0);
  sub_100175998(v44, v55, &qword_1003284E8);
  swift_endAccess(&v79);
  sub_1001CD188(v58);
  sub_100007FF0(v44, &qword_1003284E8);
  sub_100007FF0(v58, &qword_1003284E8);
LABEL_12:
  v62 = (uint64_t)v34;
  return sub_10000AFFC(v62, type metadata accessor for TransmissionProgress);
}

uint64_t sub_1001CB8B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  double v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for TransmissionProgress(0);
  v5 = a1 + *(int *)(v4 + 24);
  v6 = (double)*(uint64_t *)v5;
  if (*(_BYTE *)(v5 + 8))
    v6 = 0.0;
  v7 = round((double)*(uint64_t *)(a1 + *(int *)(v4 + 28)) / 100.0 * v6);
  if (v7 < 0.0)
    v8 = 0.0;
  else
    v8 = v7;
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  if (v8 <= -1.0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (v8 < 1.84467441e19)
  {
    if (qword_100315830 == -1)
      goto LABEL_10;
    goto LABEL_16;
  }
LABEL_15:
  __break(1u);
LABEL_16:
  swift_once(&qword_100315830, sub_1000D961C);
LABEL_10:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FD48);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v13 = 134349056;
    v16 = (unint64_t)v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v13 + 4, v13 + 12);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Starting new transmission progress with %{public}llu seconds in", v13, 0xCu);
    swift_slowDealloc(v13, -1, -1);
  }

  sub_1000E1F30(a1, a2, type metadata accessor for TransmissionProgress);
  v14 = type metadata accessor for ConnectionModel.UserTransmissionProgress(0);
  result = sub_1000E1F30(a1, a2 + *(int *)(v14 + 20), type metadata accessor for TransmissionProgress);
  *(_QWORD *)(a2 + *(int *)(v14 + 24)) = (unint64_t)v8;
  return result;
}

uint64_t sub_1001CBA98(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  char *v25;
  double v26;
  uint64_t v27;
  void (*v28)(char *, char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE v43[24];
  _QWORD aBlock[5];
  uint64_t v45;

  v2 = v1;
  v42 = a1;
  v3 = sub_100003DB8(&qword_1003284F0);
  v5 = __chkstk_darwin(v3, v4);
  v41 = (uint64_t)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v40 - v8;
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  v14 = __chkstk_darwin(v10, v13);
  v15 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v40 - v17;
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10000D744(v19, (uint64_t)qword_10033FD48);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Scheduling 100%% transmission usability timer", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  UUID.init()(v24);
  v25 = v18;
  if (*(_BYTE *)(v42 + *(int *)(type metadata accessor for TransmissionProgress(0) + 32)) == 3)
    v26 = 4.0;
  else
    v26 = 2.0;
  v40 = (id)objc_opt_self(NSTimer);
  v27 = swift_allocObject(&unk_1002F7D48, 24, 7);
  swift_weakInit(v27 + 16);
  v28 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
  v28(v15, v18, v10);
  v29 = *(unsigned __int8 *)(v11 + 80);
  v30 = v2;
  v31 = (v29 + 24) & ~v29;
  v32 = swift_allocObject(&unk_1002F7F50, v31 + v12, v29 | 7);
  *(_QWORD *)(v32 + 16) = v27;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v32 + v31, v15, v10);
  aBlock[4] = sub_1001DE7D8;
  v45 = v32;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100076C24;
  aBlock[3] = &unk_1002F7F68;
  v33 = _Block_copy(aBlock);
  swift_release(v45);
  v34 = objc_msgSend(v40, "scheduledTimerWithTimeInterval:repeats:block:", 0, v33, v26);
  _Block_release(v33);
  v28(v9, v25, v10);
  v35 = type metadata accessor for ConnectionModel.OverrideTransmissionProgress(0);
  sub_1000E1F30(v42, (uint64_t)&v9[*(int *)(v35 + 20)], type metadata accessor for TransmissionProgress);
  *(_QWORD *)&v9[*(int *)(v35 + 24)] = v34;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v9, 0, 1, v35);
  v36 = v30 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__overrideTransmissionProgress;
  swift_beginAccess(v30 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__overrideTransmissionProgress, aBlock, 0, 0);
  v37 = v41;
  sub_10000B234(v36, v41, &qword_1003284F0);
  v38 = v34;
  sub_1001CD924((uint64_t)v9);
  swift_beginAccess(v36, v43, 33, 0);
  sub_100175998((uint64_t)v9, v36, &qword_1003284F0);
  swift_endAccess(v43);
  sub_1001CDB9C(v37);
  sub_100007FF0((uint64_t)v9, &qword_1003284F0);
  sub_100007FF0(v37, &qword_1003284F0);

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v25, v10);
}

uint64_t sub_1001CBE7C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  void (*v40)(char *, uint64_t, uint64_t, uint64_t);
  void (*v41)(char *, uint64_t, uint64_t);
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  char v49;
  void (*v50)(char *, uint64_t);
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _BYTE v79[24];
  char v80[24];
  char v81[32];

  v78 = a1;
  v2 = sub_100003DB8(&qword_1003284F0);
  v4 = __chkstk_darwin(v2, v3);
  v6 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  v9 = (char *)&v67 - v8;
  v69 = type metadata accessor for TransmissionProgress(0);
  v11 = __chkstk_darwin(v69, v10);
  v68 = (uint64_t)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11, v13);
  v67 = (uint64_t)&v67 - v15;
  __chkstk_darwin(v14, v16);
  v70 = (uint64_t *)((char *)&v67 - v17);
  v18 = type metadata accessor for UUID(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v71 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100003DB8(&qword_100316EA8);
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v67 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100003DB8(&qword_100316EB0);
  v28 = __chkstk_darwin(v26, v27);
  v77 = (uint64_t)&v67 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __chkstk_darwin(v28, v30);
  v33 = (char *)&v67 - v32;
  __chkstk_darwin(v31, v34);
  v36 = (char *)&v67 - v35;
  v37 = v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__overrideTransmissionProgress;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__overrideTransmissionProgress, v81, 0, 0);
  v38 = type metadata accessor for ConnectionModel.OverrideTransmissionProgress(0);
  v72 = *(_QWORD *)(v38 - 8);
  v73 = v38;
  v39 = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 48))(v37, 1);
  v75 = v6;
  v76 = v1;
  v74 = v9;
  if (v39)
  {
    v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v40(v36, 1, 1, v18);
    (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v33, v78, v18);
  }
  else
  {
    v41 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 16);
    v41(v36, v37, v18);
    v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
    v40(v36, 0, 1, v18);
    v41(v33, v78, v18);
  }
  v40(v33, 0, 1, v18);
  v42 = (uint64_t)&v25[*(int *)(v22 + 48)];
  sub_10000B234((uint64_t)v36, (uint64_t)v25, &qword_100316EB0);
  sub_10000B234((uint64_t)v33, v42, &qword_100316EB0);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
  if (v43((uint64_t)v25, 1, v18) == 1)
  {
    sub_100007FF0((uint64_t)v33, &qword_100316EB0);
    sub_100007FF0((uint64_t)v36, &qword_100316EB0);
    if (v43(v42, 1, v18) == 1)
    {
      v78 = v37;
      sub_100007FF0((uint64_t)v25, &qword_100316EB0);
      goto LABEL_11;
    }
  }
  else
  {
    v44 = v77;
    sub_10000B234((uint64_t)v25, v77, &qword_100316EB0);
    if (v43(v42, 1, v18) != 1)
    {
      v78 = v37;
      v47 = v71;
      (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v71, v42, v18);
      v48 = sub_1000052EC(&qword_100316EC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v49 = dispatch thunk of static Equatable.== infix(_:_:)(v44, v47, v18, v48);
      v50 = *(void (**)(char *, uint64_t))(v19 + 8);
      v50(v47, v18);
      sub_100007FF0((uint64_t)v33, &qword_100316EB0);
      sub_100007FF0((uint64_t)v36, &qword_100316EB0);
      v50((char *)v44, v18);
      result = sub_100007FF0((uint64_t)v25, &qword_100316EB0);
      if ((v49 & 1) == 0)
        return result;
LABEL_11:
      v52 = v76 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress;
      swift_beginAccess(v76 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress, v80, 0, 0);
      v53 = type metadata accessor for ConnectionModel.UserTransmissionProgress(0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 48))(v52, 1, v53))
      {
        v54 = (uint64_t)v74;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56))(v74, 1, 1, v73);
        v55 = v78;
        v56 = (uint64_t)v75;
        sub_10000B234(v78, (uint64_t)v75, &qword_1003284F0);
        sub_1001CD924(v54);
        swift_beginAccess(v55, v79, 33, 0);
        sub_100175998(v54, v55, &qword_1003284F0);
        swift_endAccess(v79);
        sub_1001CDB9C(v56);
        sub_100007FF0(v54, &qword_1003284F0);
        v46 = v56;
        v45 = &qword_1003284F0;
        return sub_100007FF0(v46, v45);
      }
      v57 = v52;
      v58 = v67;
      sub_1000E1F30(v57, v67, type metadata accessor for TransmissionProgress);
      v59 = v70;
      sub_1000E8D6C(v58, (uint64_t)v70, type metadata accessor for TransmissionProgress);
      v61 = v68;
      v60 = v69;
      v62 = *(_QWORD *)((char *)v59 + *(int *)(v69 + 28));
      sub_1000E1F30((uint64_t)v59, v68, type metadata accessor for TransmissionProgress);
      if (v62 < 1)
      {
        sub_10000AFFC(v61, type metadata accessor for TransmissionProgress);
      }
      else
      {
        v63 = *(_QWORD *)(v61 + *(int *)(v60 + 28));
        sub_10000AFFC(v61, type metadata accessor for TransmissionProgress);
        if (v63 < 100)
        {
          sub_1001CC4F0(v59);
          return sub_10000AFFC((uint64_t)v59, type metadata accessor for TransmissionProgress);
        }
      }
      v64 = (uint64_t)v74;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v72 + 56))(v74, 1, 1, v73);
      v65 = v78;
      v66 = (uint64_t)v75;
      sub_10000B234(v78, (uint64_t)v75, &qword_1003284F0);
      sub_1001CD924(v64);
      swift_beginAccess(v65, v79, 33, 0);
      sub_100175998(v64, v65, &qword_1003284F0);
      swift_endAccess(v79);
      sub_1001CDB9C(v66);
      sub_100007FF0(v64, &qword_1003284F0);
      sub_100007FF0(v66, &qword_1003284F0);
      return sub_10000AFFC((uint64_t)v59, type metadata accessor for TransmissionProgress);
    }
    sub_100007FF0((uint64_t)v33, &qword_100316EB0);
    sub_100007FF0((uint64_t)v36, &qword_100316EB0);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v44, v18);
  }
  v45 = &qword_100316EA8;
  v46 = (uint64_t)v25;
  return sub_100007FF0(v46, v45);
}

uint64_t sub_1001CC4F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v49;
  id v50;
  char *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _BYTE v58[24];
  _QWORD aBlock[5];
  uint64_t v60;

  v2 = sub_100003DB8(&qword_1003284F0);
  v4 = __chkstk_darwin(v2, v3);
  v56 = (uint64_t)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  v53 = (char *)&v49 - v7;
  v8 = type metadata accessor for UUID(0);
  v54 = *(_QWORD *)(v8 - 8);
  v55 = v8;
  v10 = __chkstk_darwin(v8, v9);
  v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = v11;
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v49 - v14;
  v16 = (int *)type metadata accessor for TransmissionProgress(0);
  __chkstk_darwin(v16, v17);
  v19 = (uint64_t *)((char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v20 = type metadata accessor for Logger(0);
  v21 = sub_10000D744(v20, (uint64_t)qword_10033FD48);
  v22 = Logger.logObject.getter(v21);
  v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Scheduling 0%% transmission usability timer", v24, 2u);
    swift_slowDealloc(v24, -1, -1);
  }

  v26 = *a1;
  v25 = a1[1];
  sub_10000B234((uint64_t)a1 + v16[5], (uint64_t)v19 + v16[5], &qword_100317D58);
  v27 = v16[6];
  v28 = *(_QWORD *)((char *)a1 + v27);
  v29 = *((_BYTE *)a1 + v16[8]);
  v30 = *((_BYTE *)a1 + v27 + 8);
  *v19 = v26;
  v19[1] = v25;
  v31 = (char *)v19 + v27;
  *(_QWORD *)v31 = v28;
  v31[8] = v30;
  *(_QWORD *)((char *)v19 + v16[7]) = 0;
  *((_BYTE *)v19 + v16[8]) = v29;
  swift_bridgeObjectRetain(v25);
  UUID.init()(v32);
  v50 = (id)objc_opt_self(NSTimer);
  v33 = swift_allocObject(&unk_1002F7D48, 24, 7);
  v34 = v57;
  swift_weakInit(v33 + 16);
  v36 = v54;
  v35 = v55;
  v37 = *(void (**)(char *, char *, uint64_t))(v54 + 16);
  v51 = v15;
  v37(v12, v15, v55);
  v38 = *(unsigned __int8 *)(v36 + 80);
  v39 = (v38 + 24) & ~v38;
  v40 = swift_allocObject(&unk_1002F7FA0, v39 + v52, v38 | 7);
  *(_QWORD *)(v40 + 16) = v33;
  (*(void (**)(uint64_t, char *, uint64_t))(v36 + 32))(v40 + v39, v12, v35);
  aBlock[4] = sub_1001DE85C;
  v60 = v40;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100076C24;
  aBlock[3] = &unk_1002F7FB8;
  v41 = _Block_copy(aBlock);
  swift_release(v60);
  v42 = objc_msgSend(v50, "scheduledTimerWithTimeInterval:repeats:block:", 0, v41, 1.0);
  _Block_release(v41);
  v43 = (uint64_t)v53;
  v37(v53, v15, v35);
  v44 = type metadata accessor for ConnectionModel.OverrideTransmissionProgress(0);
  sub_1000E1F30((uint64_t)v19, v43 + *(int *)(v44 + 20), type metadata accessor for TransmissionProgress);
  *(_QWORD *)(v43 + *(int *)(v44 + 24)) = v42;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(v43, 0, 1, v44);
  v45 = v34 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__overrideTransmissionProgress;
  swift_beginAccess(v34 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__overrideTransmissionProgress, aBlock, 0, 0);
  v46 = v56;
  sub_10000B234(v45, v56, &qword_1003284F0);
  v47 = v42;
  sub_1001CD924(v43);
  swift_beginAccess(v45, v58, 33, 0);
  sub_100175998(v43, v45, &qword_1003284F0);
  swift_endAccess(v58);
  sub_1001CDB9C(v46);
  sub_100007FF0(v43, &qword_1003284F0);
  sub_100007FF0(v46, &qword_1003284F0);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v51, v35);
  return sub_10000AFFC((uint64_t)v19, type metadata accessor for TransmissionProgress);
}

uint64_t sub_1001CC964(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[24];

  v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    v8 = result;
    a4(a3);
    return swift_release(v8);
  }
  return result;
}

uint64_t sub_1001CC9D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(char *, uint64_t, uint64_t, uint64_t);
  void (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  unsigned int (*v32)(uint64_t, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  char v39;
  void (*v40)(char *, uint64_t);
  uint64_t result;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE v52[24];
  char v53[24];

  v51 = a1;
  v2 = sub_100003DB8(&qword_1003284F0);
  v4 = __chkstk_darwin(v2, v3);
  v48 = (uint64_t)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  v47 = (char *)&v44 - v7;
  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v45 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_100316EA8);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003DB8(&qword_100316EB0);
  v18 = __chkstk_darwin(v16, v17);
  v50 = (uint64_t)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v18, v20);
  v23 = (char *)&v44 - v22;
  __chkstk_darwin(v21, v24);
  v26 = (char *)&v44 - v25;
  v49 = v1;
  v27 = v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__overrideTransmissionProgress;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__overrideTransmissionProgress, v53, 0, 0);
  v28 = type metadata accessor for ConnectionModel.OverrideTransmissionProgress(0);
  v46 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v27, 1, v28))
  {
    v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v29(v26, 1, 1, v8);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v23, v51, v8);
  }
  else
  {
    v30 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
    v30(v26, v27, v8);
    v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v29(v26, 0, 1, v8);
    v30(v23, v51, v8);
  }
  v29(v23, 0, 1, v8);
  v31 = (uint64_t)&v15[*(int *)(v12 + 48)];
  sub_10000B234((uint64_t)v26, (uint64_t)v15, &qword_100316EB0);
  sub_10000B234((uint64_t)v23, v31, &qword_100316EB0);
  v32 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (v32((uint64_t)v15, 1, v8) == 1)
  {
    sub_100007FF0((uint64_t)v23, &qword_100316EB0);
    sub_100007FF0((uint64_t)v26, &qword_100316EB0);
    if (v32(v31, 1, v8) == 1)
    {
      sub_100007FF0((uint64_t)v15, &qword_100316EB0);
LABEL_11:
      v42 = (uint64_t)v47;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v46 + 56))(v47, 1, 1, v28);
      v43 = v48;
      sub_10000B234(v27, v48, &qword_1003284F0);
      sub_1001CD924(v42);
      swift_beginAccess(v27, v52, 33, 0);
      sub_100175998(v42, v27, &qword_1003284F0);
      swift_endAccess(v52);
      sub_1001CDB9C(v43);
      sub_100007FF0(v42, &qword_1003284F0);
      v35 = v43;
      v34 = &qword_1003284F0;
      return sub_100007FF0(v35, v34);
    }
  }
  else
  {
    v33 = v50;
    sub_10000B234((uint64_t)v15, v50, &qword_100316EB0);
    if (v32(v31, 1, v8) != 1)
    {
      v36 = v33;
      v37 = v45;
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v45, v31, v8);
      v38 = sub_1000052EC(&qword_100316EC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v39 = dispatch thunk of static Equatable.== infix(_:_:)(v36, v37, v8, v38);
      v40 = *(void (**)(char *, uint64_t))(v9 + 8);
      v40(v37, v8);
      sub_100007FF0((uint64_t)v23, &qword_100316EB0);
      sub_100007FF0((uint64_t)v26, &qword_100316EB0);
      v40((char *)v36, v8);
      result = sub_100007FF0((uint64_t)v15, &qword_100316EB0);
      if ((v39 & 1) == 0)
        return result;
      goto LABEL_11;
    }
    sub_100007FF0((uint64_t)v23, &qword_100316EB0);
    sub_100007FF0((uint64_t)v26, &qword_100316EB0);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v33, v8);
  }
  v34 = &qword_100316EA8;
  v35 = (uint64_t)v15;
  return sub_100007FF0(v35, v34);
}

BOOL sub_1001CCE54(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  return (sub_1000FD360(a1, a2) & 1) != 0
      && (sub_1000FD360((_QWORD *)((char *)a1 + *(int *)(a3 + 20)), (_QWORD *)((char *)a2 + *(int *)(a3 + 20))) & 1) != 0
      && *(_QWORD *)((char *)a1 + *(int *)(a3 + 24)) == *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
}

void sub_1001CCEB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE v26[24];

  v3 = type metadata accessor for ConnectionModel.UserTransmissionProgress(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = &v26[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_100003DB8(&qword_1003284E8);
  __chkstk_darwin(v8, v9);
  v11 = &v26[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = sub_100003DB8(&qword_100328508);
  __chkstk_darwin(v12, v13);
  v15 = &v26[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress, v26, 0, 0);
  v17 = (uint64_t)&v15[*(int *)(v12 + 48)];
  sub_10000B234(v16, (uint64_t)v15, &qword_1003284E8);
  sub_10000B234(a1, v17, &qword_1003284E8);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v18((uint64_t)v15, 1, v3) == 1)
  {
    if (v18(v17, 1, v3) == 1)
    {
      sub_100007FF0((uint64_t)v15, &qword_1003284E8);
      return;
    }
    v19 = &qword_100328508;
  }
  else
  {
    sub_10000B234((uint64_t)v15, (uint64_t)v11, &qword_1003284E8);
    if (v18(v17, 1, v3) == 1)
    {
      v19 = &qword_100328508;
    }
    else
    {
      sub_1000E8D6C(v17, (uint64_t)v7, type metadata accessor for ConnectionModel.UserTransmissionProgress);
      if ((sub_1000FD360(v11, v7) & 1) != 0
        && (sub_1000FD360((_QWORD *)((char *)v11 + *(int *)(v3 + 20)), (_QWORD *)((char *)v7 + *(int *)(v3 + 20))) & 1) != 0)
      {
        v20 = *(int *)(v3 + 24);
        v21 = *(_QWORD *)((char *)v11 + v20);
        v22 = *(_QWORD *)((char *)v7 + v20);
        sub_10000AFFC((uint64_t)v7, type metadata accessor for ConnectionModel.UserTransmissionProgress);
        sub_10000AFFC((uint64_t)v11, type metadata accessor for ConnectionModel.UserTransmissionProgress);
        sub_100007FF0((uint64_t)v15, &qword_1003284E8);
        if (v21 == v22)
          return;
        if (*(_QWORD *)(v1 + 32))
          goto LABEL_15;
LABEL_11:
        v23 = sub_100003DB8(&qword_10032B0E0);
        v24 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
        Subject<>.send()(v23, v24);
        return;
      }
      sub_10000AFFC((uint64_t)v7, type metadata accessor for ConnectionModel.UserTransmissionProgress);
      v19 = &qword_1003284E8;
    }
    sub_10000AFFC((uint64_t)v11, type metadata accessor for ConnectionModel.UserTransmissionProgress);
  }
  sub_100007FF0((uint64_t)v15, v19);
  if (!*(_QWORD *)(v1 + 32))
    goto LABEL_11;
LABEL_15:
  *(_BYTE *)(v1 + 40) = 1;
}

double sub_1001CD188(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  double result;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  __n128 v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE v60[24];

  v3 = type metadata accessor for ConnectionModel.UserTransmissionProgress(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = &qword_1003284E8;
  v55 = sub_100003DB8(&qword_1003284E8);
  v10 = __chkstk_darwin(v55, v9);
  v53 = (uint64_t)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10, v12);
  v56 = (char *)&v53 - v14;
  __chkstk_darwin(v13, v15);
  v17 = (uint64_t *)((char *)&v53 - v16);
  v18 = sub_100003DB8(&qword_100328508);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v53 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = v1;
  v22 = v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress, v60, 0, 0);
  v23 = (uint64_t)&v21[*(int *)(v18 + 48)];
  v54 = v22;
  v24 = v22;
  v25 = a1;
  sub_10000B234(v24, (uint64_t)v21, &qword_1003284E8);
  sub_10000B234(a1, v23, &qword_1003284E8);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v26((uint64_t)v21, 1, v3) == 1)
  {
    if (v26(v23, 1, v3) == 1)
    {
      sub_100007FF0((uint64_t)v21, &qword_1003284E8);
      return result;
    }
    v8 = &qword_100328508;
    v28 = (uint64_t)v56;
    v29 = v57;
  }
  else
  {
    sub_10000B234((uint64_t)v21, (uint64_t)v17, &qword_1003284E8);
    if (v26(v23, 1, v3) == 1)
    {
      v8 = &qword_100328508;
      v28 = (uint64_t)v56;
    }
    else
    {
      sub_1000E8D6C(v23, (uint64_t)v7, type metadata accessor for ConnectionModel.UserTransmissionProgress);
      v30 = sub_1000FD360(v17, v7);
      v28 = (uint64_t)v56;
      if ((v30 & 1) != 0
        && (sub_1000FD360((_QWORD *)((char *)v17 + *(int *)(v3 + 20)), (_QWORD *)((char *)v7 + *(int *)(v3 + 20))) & 1) != 0)
      {
        v31 = *(int *)(v3 + 24);
        v32 = *(_QWORD *)((char *)v17 + v31);
        v33 = *(_QWORD *)((char *)v7 + v31);
        sub_10000AFFC((uint64_t)v7, type metadata accessor for ConnectionModel.UserTransmissionProgress);
        sub_10000AFFC((uint64_t)v17, type metadata accessor for ConnectionModel.UserTransmissionProgress);
        sub_100007FF0((uint64_t)v21, &qword_1003284E8);
        v29 = v57;
        if (v32 == v33)
          return result;
        goto LABEL_14;
      }
      sub_10000AFFC((uint64_t)v7, type metadata accessor for ConnectionModel.UserTransmissionProgress);
    }
    v29 = v57;
    sub_10000AFFC((uint64_t)v17, type metadata accessor for ConnectionModel.UserTransmissionProgress);
  }
  sub_100007FF0((uint64_t)v21, v8);
LABEL_14:
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v34 = type metadata accessor for Logger(0);
  sub_10000D744(v34, (uint64_t)qword_10033FD48);
  sub_10000B234(v25, v28, &qword_1003284E8);
  v36 = swift_retain_n(v29, v35);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = swift_slowAlloc(22, -1);
    v57 = swift_slowAlloc(64, -1);
    v59 = v57;
    *(_DWORD *)v39 = 136446466;
    v40 = v53;
    sub_10000B234(v28, v53, &qword_1003284E8);
    v41 = v55;
    v43 = String.init<A>(describing:)(v40, v55, v42);
    v45 = v44;
    v58 = sub_100172BEC(v43, v44, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease(v45);
    sub_100007FF0(v28, &qword_1003284E8);
    *(_WORD *)(v39 + 12) = 2082;
    sub_10000B234(v54, v40, &qword_1003284E8);
    v47 = String.init<A>(describing:)(v40, v41, v46);
    v49 = v48;
    v58 = sub_100172BEC(v47, v48, &v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v39 + 14, v39 + 22);
    swift_release_n(v29);
    swift_bridgeObjectRelease(v49);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Transmission progress changed from: %{public}s to: %{public}s", (uint8_t *)v39, 0x16u);
    v50 = v57;
    swift_arrayDestroy(v57, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1, -1);
    swift_slowDealloc(v39, -1, -1);

  }
  else
  {
    sub_100007FF0(v28, &qword_1003284E8);

    swift_release_n(v29);
  }
  sub_1001CD6C8();
  if (*(_QWORD *)(v29 + 32))
  {
    *(_BYTE *)(v29 + 41) = 1;
  }
  else
  {
    v51 = sub_100003DB8(&qword_10032B0E0);
    v52 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v51, v52).n128_u64[0];
  }
  return result;
}

void sub_1001CD6C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  _QWORD aBlock[5];
  uint64_t v24;
  _BYTE v25[24];

  v1 = v0;
  v2 = sub_100003DB8(&qword_1003284E8);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (_QWORD *)((char *)&aBlock[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v10 = static OS_dispatch_queue.main.getter(v11);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    return;
  }
  v13 = v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress, v25, 0, 0);
  sub_10000B234(v13, (uint64_t)v5, &qword_1003284E8);
  v14 = type metadata accessor for ConnectionModel.UserTransmissionProgress(0);
  LODWORD(v13) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v5, 1, v14);
  sub_100007FF0((uint64_t)v5, &qword_1003284E8);
  v15 = OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__userVisibleProgressTimer;
  v16 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__userVisibleProgressTimer);
  if ((_DWORD)v13 == 1)
  {
    if (v16)
    {
      objc_msgSend(v16, "invalidate");
      v17 = *(void **)(v1 + v15);
    }
    else
    {
      v17 = 0;
    }
    *(_QWORD *)(v1 + v15) = 0;
  }
  else
  {
    if (v16)
      return;
    v18 = (void *)objc_opt_self(NSTimer);
    v19 = swift_allocObject(&unk_1002F7D48, 24, 7);
    swift_weakInit(v19 + 16);
    aBlock[4] = sub_1001DE5CC;
    v24 = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100076C24;
    aBlock[3] = &unk_1002F7D60;
    v20 = _Block_copy(aBlock);
    swift_release(v24);
    v21 = objc_msgSend(v18, "scheduledTimerWithTimeInterval:repeats:block:", 1, v20, 1.0);
    _Block_release(v20);
    v17 = *(void **)(v1 + v15);
    *(_QWORD *)(v1 + v15) = v21;
  }

}

double sub_1001CD924(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  double result;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[24];

  v3 = type metadata accessor for ConnectionModel.OverrideTransmissionProgress(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_100003DB8(&qword_1003284F0);
  __chkstk_darwin(v8, v9);
  v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = sub_100003DB8(&qword_1003285E8);
  __chkstk_darwin(v12, v13);
  v15 = &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__overrideTransmissionProgress;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__overrideTransmissionProgress, v24, 0, 0);
  v17 = (uint64_t)&v15[*(int *)(v12 + 48)];
  sub_10000B234(v16, (uint64_t)v15, &qword_1003284F0);
  sub_10000B234(a1, v17, &qword_1003284F0);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v18((uint64_t)v15, 1, v3) == 1)
  {
    if (v18(v17, 1, v3) == 1)
    {
      sub_100007FF0((uint64_t)v15, &qword_1003284F0);
      return result;
    }
  }
  else
  {
    sub_10000B234((uint64_t)v15, (uint64_t)v11, &qword_1003284F0);
    if (v18(v17, 1, v3) != 1)
    {
      sub_1000E8D6C(v17, (uint64_t)v7, type metadata accessor for ConnectionModel.OverrideTransmissionProgress);
      v20 = static UUID.== infix(_:_:)(v11, v7);
      sub_10000AFFC((uint64_t)v7, type metadata accessor for ConnectionModel.OverrideTransmissionProgress);
      sub_10000AFFC((uint64_t)v11, type metadata accessor for ConnectionModel.OverrideTransmissionProgress);
      sub_100007FF0((uint64_t)v15, &qword_1003284F0);
      if ((v20 & 1) != 0)
        return result;
      goto LABEL_8;
    }
    sub_10000AFFC((uint64_t)v11, type metadata accessor for ConnectionModel.OverrideTransmissionProgress);
  }
  sub_100007FF0((uint64_t)v15, &qword_1003285E8);
LABEL_8:
  if (*(_QWORD *)(v1 + 32))
  {
    *(_BYTE *)(v1 + 40) = 1;
  }
  else
  {
    v21 = sub_100003DB8(&qword_10032B0E0);
    v22 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v21, v22).n128_u64[0];
  }
  return result;
}

void sub_1001CDB9C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char v55[24];

  v3 = type metadata accessor for ConnectionModel.OverrideTransmissionProgress(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_100003DB8(&qword_1003284F0);
  v9 = __chkstk_darwin(v50, v8);
  v49 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9, v11);
  v51 = (char *)&v48 - v13;
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v48 - v15;
  v17 = sub_100003DB8(&qword_1003285E8);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = v1;
  v21 = v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__overrideTransmissionProgress;
  v22 = a1;
  swift_beginAccess(v21, v55, 0, 0);
  v23 = (uint64_t)&v20[*(int *)(v17 + 48)];
  sub_10000B234(v21, (uint64_t)v20, &qword_1003284F0);
  sub_10000B234(a1, v23, &qword_1003284F0);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v24((uint64_t)v20, 1, v3) == 1)
  {
    if (v24(v23, 1, v3) == 1)
    {
      sub_100007FF0((uint64_t)v20, &qword_1003284F0);
      return;
    }
  }
  else
  {
    sub_10000B234((uint64_t)v20, (uint64_t)v16, &qword_1003284F0);
    if (v24(v23, 1, v3) != 1)
    {
      sub_1000E8D6C(v23, (uint64_t)v7, type metadata accessor for ConnectionModel.OverrideTransmissionProgress);
      v47 = static UUID.== infix(_:_:)(v16, v7);
      sub_10000AFFC((uint64_t)v7, type metadata accessor for ConnectionModel.OverrideTransmissionProgress);
      sub_10000AFFC((uint64_t)v16, type metadata accessor for ConnectionModel.OverrideTransmissionProgress);
      sub_100007FF0((uint64_t)v20, &qword_1003284F0);
      v25 = (uint64_t)v51;
      if ((v47 & 1) != 0)
        return;
      goto LABEL_7;
    }
    sub_10000AFFC((uint64_t)v16, type metadata accessor for ConnectionModel.OverrideTransmissionProgress);
  }
  sub_100007FF0((uint64_t)v20, &qword_1003285E8);
  v25 = (uint64_t)v51;
LABEL_7:
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v26 = type metadata accessor for Logger(0);
  sub_10000D744(v26, (uint64_t)qword_10033FD48);
  sub_10000B234(v22, v25, &qword_1003284F0);
  v27 = v52;
  v29 = swift_retain_n(v52, v28);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc(22, -1);
    v51 = (char *)swift_slowAlloc(64, -1);
    v54 = v51;
    *(_DWORD *)v32 = 136446466;
    v33 = v49;
    sub_10000B234(v25, v49, &qword_1003284F0);
    v34 = v50;
    v36 = String.init<A>(describing:)(v33, v50, v35);
    v38 = v37;
    v53 = sub_100172BEC(v36, v37, (uint64_t *)&v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v32 + 4, v32 + 12);
    v39 = v38;
    v27 = v52;
    swift_bridgeObjectRelease(v39);
    sub_100007FF0(v25, &qword_1003284F0);
    *(_WORD *)(v32 + 12) = 2082;
    sub_10000B234(v21, v33, &qword_1003284F0);
    v41 = String.init<A>(describing:)(v33, v34, v40);
    v43 = v42;
    v53 = sub_100172BEC(v41, v42, (uint64_t *)&v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v32 + 14, v32 + 22);
    swift_release_n(v27);
    swift_bridgeObjectRelease(v43);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Override transmission progress changed from: %{public}s to: %{public}s", (uint8_t *)v32, 0x16u);
    v44 = v51;
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v32, -1, -1);

    if (*(_QWORD *)(v27 + 32))
    {
LABEL_11:
      *(_BYTE *)(v27 + 41) = 1;
      return;
    }
  }
  else
  {
    sub_100007FF0(v25, &qword_1003284F0);

    swift_release_n(v27);
    if (*(_QWORD *)(v27 + 32))
      goto LABEL_11;
  }
  v45 = sub_100003DB8(&qword_10032B0E0);
  v46 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Subject<>.send()(v45, v46);
}

uint64_t sub_1001CE084(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  char v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v24[24];

  v3 = type metadata accessor for TransmissionProgress(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = &v24[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_100003DB8(&qword_100316B68);
  __chkstk_darwin(v8, v9);
  v11 = &v24[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = sub_100003DB8(&qword_10031FA30);
  __chkstk_darwin(v12, v13);
  v15 = &v24[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__simulatedTransmissionProgress;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__simulatedTransmissionProgress, v24, 0, 0);
  v17 = (uint64_t)&v15[*(int *)(v12 + 48)];
  sub_10000B234(v16, (uint64_t)v15, &qword_100316B68);
  sub_10000B234(a1, v17, &qword_100316B68);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v18((uint64_t)v15, 1, v3) == 1)
  {
    if (v18(v17, 1, v3) == 1)
      return sub_100007FF0((uint64_t)v15, &qword_100316B68);
  }
  else
  {
    sub_10000B234((uint64_t)v15, (uint64_t)v11, &qword_100316B68);
    if (v18(v17, 1, v3) != 1)
    {
      sub_1000E8D6C(v17, (uint64_t)v7, type metadata accessor for TransmissionProgress);
      v20 = sub_1000FD360(v11, v7);
      sub_10000AFFC((uint64_t)v7, type metadata accessor for TransmissionProgress);
      sub_10000AFFC((uint64_t)v11, type metadata accessor for TransmissionProgress);
      result = sub_100007FF0((uint64_t)v15, &qword_100316B68);
      if ((v20 & 1) != 0)
        return result;
      goto LABEL_8;
    }
    sub_10000AFFC((uint64_t)v11, type metadata accessor for TransmissionProgress);
  }
  result = sub_100007FF0((uint64_t)v15, &qword_10031FA30);
LABEL_8:
  if (*(_QWORD *)(v1 + 32))
  {
    *(_BYTE *)(v1 + 40) = 1;
  }
  else
  {
    v21 = sub_100003DB8(&qword_10032B0E0);
    v22 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    return Subject<>.send()(v21, v22);
  }
  return result;
}

void sub_1001CE2FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char v55[24];

  v3 = type metadata accessor for TransmissionProgress(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v50 = sub_100003DB8(&qword_100316B68);
  v9 = __chkstk_darwin(v50, v8);
  v49 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9, v11);
  v51 = (char *)&v48 - v13;
  __chkstk_darwin(v12, v14);
  v16 = (uint64_t *)((char *)&v48 - v15);
  v17 = sub_100003DB8(&qword_10031FA30);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = v1;
  v21 = v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__simulatedTransmissionProgress;
  v22 = a1;
  swift_beginAccess(v21, v55, 0, 0);
  v23 = (uint64_t)&v20[*(int *)(v17 + 48)];
  sub_10000B234(v21, (uint64_t)v20, &qword_100316B68);
  sub_10000B234(a1, v23, &qword_100316B68);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v24((uint64_t)v20, 1, v3) == 1)
  {
    if (v24(v23, 1, v3) == 1)
    {
      sub_100007FF0((uint64_t)v20, &qword_100316B68);
      return;
    }
  }
  else
  {
    sub_10000B234((uint64_t)v20, (uint64_t)v16, &qword_100316B68);
    if (v24(v23, 1, v3) != 1)
    {
      sub_1000E8D6C(v23, (uint64_t)v7, type metadata accessor for TransmissionProgress);
      v47 = sub_1000FD360(v16, v7);
      sub_10000AFFC((uint64_t)v7, type metadata accessor for TransmissionProgress);
      sub_10000AFFC((uint64_t)v16, type metadata accessor for TransmissionProgress);
      sub_100007FF0((uint64_t)v20, &qword_100316B68);
      v25 = (uint64_t)v51;
      if ((v47 & 1) != 0)
        return;
      goto LABEL_7;
    }
    sub_10000AFFC((uint64_t)v16, type metadata accessor for TransmissionProgress);
  }
  sub_100007FF0((uint64_t)v20, &qword_10031FA30);
  v25 = (uint64_t)v51;
LABEL_7:
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v26 = type metadata accessor for Logger(0);
  sub_10000D744(v26, (uint64_t)qword_10033FD48);
  sub_10000B234(v22, v25, &qword_100316B68);
  v27 = v52;
  v29 = swift_retain_n(v52, v28);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc(22, -1);
    v51 = (char *)swift_slowAlloc(64, -1);
    v54 = v51;
    *(_DWORD *)v32 = 136446466;
    v33 = v49;
    sub_10000B234(v25, v49, &qword_100316B68);
    v34 = v50;
    v36 = String.init<A>(describing:)(v33, v50, v35);
    v38 = v37;
    v53 = sub_100172BEC(v36, v37, (uint64_t *)&v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v32 + 4, v32 + 12);
    v39 = v38;
    v27 = v52;
    swift_bridgeObjectRelease(v39);
    sub_100007FF0(v25, &qword_100316B68);
    *(_WORD *)(v32 + 12) = 2082;
    sub_10000B234(v21, v33, &qword_100316B68);
    v41 = String.init<A>(describing:)(v33, v34, v40);
    v43 = v42;
    v53 = sub_100172BEC(v41, v42, (uint64_t *)&v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v32 + 14, v32 + 22);
    swift_release_n(v27);
    swift_bridgeObjectRelease(v43);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "Simulated transmission progress changed from: %{public}s to: %{public}s", (uint8_t *)v32, 0x16u);
    v44 = v51;
    swift_arrayDestroy(v51, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v32, -1, -1);

    if (*(_QWORD *)(v27 + 32))
    {
LABEL_11:
      *(_BYTE *)(v27 + 41) = 1;
      return;
    }
  }
  else
  {
    sub_100007FF0(v25, &qword_100316B68);

    swift_release_n(v27);
    if (*(_QWORD *)(v27 + 32))
      goto LABEL_11;
  }
  v45 = sub_100003DB8(&qword_10032B0E0);
  v46 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Subject<>.send()(v45, v46);
}

uint64_t sub_1001CE7E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_1001CE83C(1);
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_1001CE83C(uint64_t a1)
{
  uint64_t v1;
  double v2;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  unint64_t v29;
  double v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  NSObject *v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  NSObject *v45;
  uint8_t *v46;
  const char *v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint8_t *v51;
  double v52;
  double v53;
  uint64_t v54;
  uint64_t v55;
  uint8_t *v56;
  double v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint8_t *v61;
  double v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint8_t *v66;
  NSObject *v67;
  double v68;
  double v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char v74;
  char v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  _BYTE v84[24];
  char v85[24];

  v4 = (int *)type metadata accessor for TransmissionProgress(0);
  __chkstk_darwin(v4, v5);
  v82 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_1003284E8);
  v9 = __chkstk_darwin(v7, v8);
  v81 = (uint64_t)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9, v11);
  v14 = (char *)&v78 - v13;
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v78 - v16;
  v18 = type metadata accessor for ConnectionModel.UserTransmissionProgress(0);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = (uint64_t *)((char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v83 = v1;
  v23 = v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress, v85, 0, 0);
  sub_10000B234(v23, (uint64_t)v17, &qword_1003284E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
    return sub_100007FF0((uint64_t)v17, &qword_1003284E8);
  sub_1000E8D6C((uint64_t)v17, (uint64_t)v22, type metadata accessor for ConnectionModel.UserTransmissionProgress);
  v25 = (char *)v22 + v4[6];
  if ((v25[8] & 1) == 0)
  {
    v26 = *(_QWORD *)v25;
    if (*(uint64_t *)v25 >= 1
      && *(uint64_t *)((char *)v22 + *(int *)(v18 + 20) + v4[7]) <= 99
      && (*(_BYTE *)(*(_QWORD *)(v83 + 56) + 120) & 1) != 0)
    {
      v27 = *(_QWORD *)((char *)v22 + *(int *)(v18 + 24));
      v28 = __CFADD__(v27, a1);
      v29 = v27 + a1;
      if (v28)
      {
        __break(1u);
        goto LABEL_47;
      }
      v30 = (double)v29;
      v31 = (double)v26;
      v2 = (double)v29 / (double)v26;
      v80 = v29;
      if (v2 <= 0.5)
      {
        if (qword_100315830 != -1)
          goto LABEL_50;
        goto LABEL_18;
      }
      if (v2 <= 1.0)
      {
        v48 = (v30 - v31 * 0.5) * 0.3 / (v31 * 0.5);
        if (qword_100315830 != -1)
        {
          v79 = *(_QWORD *)&v48;
          swift_once(&qword_100315830, sub_1000D961C);
          v48 = *(double *)&v79;
        }
        v2 = v48 + 0.5;
        v49 = type metadata accessor for Logger(0);
        v50 = sub_10000D744(v49, (uint64_t)qword_10033FD48);
        v42 = Logger.logObject.getter(v50);
        v43 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v42, v43))
          goto LABEL_37;
        v51 = (uint8_t *)swift_slowAlloc(2, -1);
        v45 = v42;
        v46 = v51;
        *(_WORD *)v51 = 0;
        v47 = "Slowing the progress down a bit";
        goto LABEL_36;
      }
      v32 = v30 - v31;
      if (v32 <= 30.0)
      {
        v52 = v32 * 0.00333333333;
        v53 = 0.8;
        if (qword_100315830 != -1)
        {
          v79 = 0x3FE999999999999ALL;
          swift_once(&qword_100315830, sub_1000D961C);
          v53 = *(double *)&v79;
        }
        v2 = v52 + v53;
        v54 = type metadata accessor for Logger(0);
        v55 = sub_10000D744(v54, (uint64_t)qword_10033FD48);
        v42 = Logger.logObject.getter(v55);
        v43 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v42, v43))
          goto LABEL_37;
        v56 = (uint8_t *)swift_slowAlloc(2, -1);
        v45 = v42;
        v46 = v56;
        *(_WORD *)v56 = 0;
        v47 = "Less than 30 seconds over the estimation";
        goto LABEL_36;
      }
      if (v32 <= 60.0)
      {
        v57 = (v32 + -30.0) * 0.00166666667;
        v58 = 0.9;
        if (qword_100315830 != -1)
        {
          v79 = 0x3FECCCCCCCCCCCCDLL;
          swift_once(&qword_100315830, sub_1000D961C);
          v58 = *(double *)&v79;
        }
        v2 = v57 + v58;
        v59 = type metadata accessor for Logger(0);
        v60 = sub_10000D744(v59, (uint64_t)qword_10033FD48);
        v42 = Logger.logObject.getter(v60);
        v43 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v42, v43))
          goto LABEL_37;
        v61 = (uint8_t *)swift_slowAlloc(2, -1);
        v45 = v42;
        v46 = v61;
        *(_WORD *)v61 = 0;
        v47 = "Less than 60 seconds over the estimation";
        goto LABEL_36;
      }
      if (v32 <= 105.0)
      {
        v62 = (v32 + -60.0) * 0.000666666667;
        v63 = 0.95;
        if (qword_100315830 != -1)
        {
          v79 = 0x3FEE666666666666;
          swift_once(&qword_100315830, sub_1000D961C);
          v63 = *(double *)&v79;
        }
        v2 = v62 + v63;
        v64 = type metadata accessor for Logger(0);
        v65 = sub_10000D744(v64, (uint64_t)qword_10033FD48);
        v42 = Logger.logObject.getter(v65);
        v43 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v42, v43))
          goto LABEL_37;
        v66 = (uint8_t *)swift_slowAlloc(2, -1);
        v45 = v42;
        v46 = v66;
        *(_WORD *)v66 = 0;
        v47 = "Less than 105 seconds over the estimation";
        goto LABEL_36;
      }
      if (qword_100315830 != -1)
        swift_once(&qword_100315830, sub_1000D961C);
      v33 = type metadata accessor for Logger(0);
      v34 = sub_10000D744(v33, (uint64_t)qword_10033FD48);
      v35 = Logger.logObject.getter(v34);
      v36 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc(2, -1);
        v38 = v35;
        v79 = (uint64_t)v35;
        v39 = v37;
        *(_WORD *)v37 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v36, "Cap the progress at 98 percent", v37, 2u);
        swift_slowDealloc(v39, -1, -1);

      }
      else
      {

      }
      v68 = 98.0;
      while (1)
      {
        v69 = round(v68);
        if ((~*(_QWORD *)&v69 & 0x7FF0000000000000) == 0)
          break;
        if (v69 <= -9.22337204e18)
          goto LABEL_48;
        if (v69 < 9.22337204e18)
        {
          v79 = (uint64_t)v69;
          v70 = *v22;
          v71 = v22[1];
          v72 = v82;
          sub_10000B234((uint64_t)v22 + v4[5], (uint64_t)&v82[v4[5]], &qword_100317D58);
          v73 = *(_QWORD *)v25;
          v74 = v25[8];
          v75 = *((_BYTE *)v22 + v4[8]);
          *v72 = v70;
          v72[1] = v71;
          v76 = (char *)v72 + v4[6];
          *(_QWORD *)v76 = v73;
          v76[8] = v74;
          *(_QWORD *)((char *)v72 + v4[7]) = v79;
          *((_BYTE *)v72 + v4[8]) = v75;
          sub_1000E1F30((uint64_t)v22, (uint64_t)v14, type metadata accessor for TransmissionProgress);
          sub_1000E1F30((uint64_t)v72, (uint64_t)&v14[*(int *)(v18 + 20)], type metadata accessor for TransmissionProgress);
          *(_QWORD *)&v14[*(int *)(v18 + 24)] = v80;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v14, 0, 1, v18);
          v77 = v81;
          sub_10000B234(v23, v81, &qword_1003284E8);
          swift_bridgeObjectRetain(v71);
          sub_1001CCEB8((uint64_t)v14);
          swift_beginAccess(v23, v84, 33, 0);
          sub_100175998((uint64_t)v14, v23, &qword_1003284E8);
          swift_endAccess(v84);
          sub_1001CD188(v77);
          sub_100007FF0((uint64_t)v14, &qword_1003284E8);
          sub_100007FF0(v77, &qword_1003284E8);
          sub_10000AFFC((uint64_t)v72, type metadata accessor for TransmissionProgress);
          return sub_10000AFFC((uint64_t)v22, type metadata accessor for ConnectionModel.UserTransmissionProgress);
        }
LABEL_49:
        __break(1u);
LABEL_50:
        swift_once(&qword_100315830, sub_1000D961C);
LABEL_18:
        v40 = type metadata accessor for Logger(0);
        v41 = sub_10000D744(v40, (uint64_t)qword_10033FD48);
        v42 = Logger.logObject.getter(v41);
        v43 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v42, v43))
        {
          v44 = (uint8_t *)swift_slowAlloc(2, -1);
          v45 = v42;
          v46 = v44;
          *(_WORD *)v44 = 0;
          v47 = "Keeping up with actual progress";
LABEL_36:
          v67 = v45;
          _os_log_impl((void *)&_mh_execute_header, v45, v43, v47, v46, 2u);
          swift_slowDealloc(v46, -1, -1);
          v42 = v67;
        }
LABEL_37:

        v68 = v2 * 100.0;
        if (v2 >= 0.98)
          v68 = 98.0;
      }
LABEL_47:
      __break(1u);
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
  }
  return sub_10000AFFC((uint64_t)v22, type metadata accessor for ConnectionModel.UserTransmissionProgress);
}

uint64_t sub_1001CF0A8()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress, &qword_1003284E8);

  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__overrideTransmissionProgress, &qword_1003284F0);
  return sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__simulatedTransmissionProgress, &qword_100316B68);
}

_QWORD *sub_1001CF120()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[7]);
  sub_100007FF0((uint64_t)v0 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__transmissionProgress, &qword_1003284E8);

  sub_100007FF0((uint64_t)v0 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__overrideTransmissionProgress, &qword_1003284F0);
  sub_100007FF0((uint64_t)v0 + OBJC_IVAR____TtC8SOSBuddy15ConnectionModel__simulatedTransmissionProgress, &qword_100316B68);
  return v0;
}

uint64_t sub_1001CF1AC()
{
  return sub_1001D0E20((void (*)(void))sub_1001CF120);
}

uint64_t sub_1001CF1B8()
{
  return type metadata accessor for ConnectionModel(0);
}

uint64_t type metadata accessor for ConnectionModel(uint64_t a1)
{
  return sub_10003D8E8(a1, (uint64_t *)&unk_1003271A8, (uint64_t)&nominal type descriptor for ConnectionModel);
}

void sub_1001CF1D4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[6];

  v8[0] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v8[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1000F03D4(319, &qword_1003271B8, type metadata accessor for ConnectionModel.UserTransmissionProgress);
  if (v3 <= 0x3F)
  {
    v8[2] = *(_QWORD *)(v2 - 8) + 64;
    v8[3] = "\b";
    sub_1000F03D4(319, (unint64_t *)&unk_1003271C0, type metadata accessor for ConnectionModel.OverrideTransmissionProgress);
    if (v5 <= 0x3F)
    {
      v8[4] = *(_QWORD *)(v4 - 8) + 64;
      sub_1000F03D4(319, (unint64_t *)&qword_10031F840, type metadata accessor for TransmissionProgress);
      if (v7 <= 0x3F)
      {
        v8[5] = *(_QWORD *)(v6 - 8) + 64;
        swift_updateClassMetadata2(a1, 256, 6, v8, a1 + 256);
      }
    }
  }
}

uint64_t type metadata accessor for ConnectionModel.UserTransmissionProgress(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100328488, (uint64_t)&nominal type descriptor for ConnectionModel.UserTransmissionProgress);
}

uint64_t type metadata accessor for ConnectionModel.OverrideTransmissionProgress(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_1003283F0, (uint64_t)&nominal type descriptor for ConnectionModel.OverrideTransmissionProgress);
}

uint64_t sub_1001CF2F0(double *a1, double *a2)
{
  double v2;
  double v3;
  double v4;
  double v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[1];
  v3 = a1[2];
  v4 = a2[1];
  v5 = a2[2];
  v6 = static Angle.== infix(_:_:)(a1, *a1, *a2);
  if ((v6 & 1) != 0 && (v7 = static Angle.== infix(_:_:)(v6, v2, v4), (v7 & 1) != 0))
    return static Angle.== infix(_:_:)(v7, v3, v5);
  else
    return 0;
}

double sub_1001CF354(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = *(unsigned __int8 *)(v1 + 64);
  if (v4 == 4)
  {
    if (a1 == 4)
      return result;
  }
  else if (a1 != 4)
  {
    if (v4 == 3)
    {
      if (a1 == 3)
        return result;
    }
    else if (a1 != 3 && v4 == a1)
    {
      return result;
    }
  }
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FD48);
  v7 = swift_retain_n(v1, v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v25 = v11;
    *(_DWORD *)v10 = 136446466;
    LOBYTE(v24) = a1;
    v12 = sub_100003DB8(&qword_100328518);
    v14 = String.init<A>(describing:)(&v24, v12, v13);
    v16 = v15;
    v24 = sub_100172BEC(v14, v15, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 4, v10 + 12);
    v17 = swift_bridgeObjectRelease(v16);
    *(_WORD *)(v10 + 12) = 2082;
    LOBYTE(v24) = *(_BYTE *)(v2 + 64);
    v18 = String.init<A>(describing:)(&v24, v12, v17);
    v20 = v19;
    v24 = sub_100172BEC(v18, v19, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 14, v10 + 22);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Target visibility changed from: %{public}s to: %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v2);
  }
  sub_1001CF5FC();
  if (*(_QWORD *)(v2 + 32))
  {
    *(_BYTE *)(v2 + 41) = 1;
  }
  else
  {
    v22 = sub_100003DB8(&qword_10032B0E0);
    v23 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v22, v23).n128_u64[0];
  }
  return result;
}

BOOL sub_1001CF5FC()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  char v3;
  void *v4;
  uint64_t v5;
  __n128 v6;
  __n128 v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  os_log_type_t type;
  uint64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = sub_1001D0AB0();
  v3 = sub_1001BF5EC((Swift::Int)v2, *(_QWORD *)(v0 + 200));
  if ((v3 & 1) != 0)
  {
    v4 = v2;
  }
  else
  {
    if (qword_100315830 != -1)
      swift_once(&qword_100315830, sub_1000D961C);
    v5 = type metadata accessor for Logger(0);
    sub_10000D744(v5, (uint64_t)qword_10033FD48);
    swift_retain_n(v0, v6);
    v8 = swift_bridgeObjectRetain_n(v2, 2, v7);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      type = v10;
      v11 = swift_slowAlloc(22, -1);
      v22 = swift_slowAlloc(64, -1);
      v25 = v22;
      *(_DWORD *)v11 = 136446466;
      v12 = *(_QWORD *)(v1 + 200);
      sub_1001DE650();
      v13 = swift_bridgeObjectRetain(v12);
      v14 = Set.description.getter(v13);
      v16 = v15;
      swift_bridgeObjectRelease(v12);
      v24 = sub_100172BEC(v14, v16, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v11 + 4, v11 + 12);
      swift_release_n(v1);
      swift_bridgeObjectRelease(v16);
      *(_WORD *)(v11 + 12) = 2082;
      v17 = swift_bridgeObjectRetain(v2);
      v18 = Set.description.getter(v17);
      v20 = v19;
      swift_bridgeObjectRelease(v2);
      v24 = sub_100172BEC(v18, v20, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease_n(v2, 2);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v9, type, "Suggested actions changed from: %{public}s to: %{public}s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v22, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v11, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(v2, 2);
      swift_release_n(v1);
    }
    v4 = *(void **)(v1 + 200);
    *(_QWORD *)(v1 + 200) = v2;
  }
  swift_bridgeObjectRelease(v4);
  return (v3 & 1) == 0;
}

double sub_1001CF890(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = *(unsigned __int8 *)(v1 + 65);
  if (v4 == 2)
  {
    if (a1 == 2)
      return result;
  }
  else if (a1 != 2 && ((((a1 & 1) == 0) ^ v4) & 1) != 0)
  {
    return result;
  }
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FD48);
  v7 = swift_retain_n(v1, v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v26 = v11;
    *(_DWORD *)v10 = 136446466;
    LOBYTE(v25) = a1;
    v12 = sub_100003DB8((uint64_t *)&unk_1003263F0);
    v14 = String.init<A>(describing:)(&v25, v12, v13);
    v16 = v15;
    v25 = sub_100172BEC(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v10 + 4, v10 + 12);
    v17 = swift_bridgeObjectRelease(v16);
    *(_WORD *)(v10 + 12) = 2082;
    LOBYTE(v25) = *(_BYTE *)(v2 + 65);
    v18 = String.init<A>(describing:)(&v25, v12, v17);
    v20 = v19;
    v25 = sub_100172BEC(v18, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v10 + 14, v10 + 22);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "__cachedConnectedWithHysteresisApplied changed from: %{public}s to: %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v2);
  }
  if (sub_1001CF5FC())
  {
    if (*(_QWORD *)(v2 + 32))
    {
      *(_BYTE *)(v2 + 40) = 1;
    }
    else
    {
      v22 = sub_100003DB8(&qword_10032B0E0);
      v23 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      *(_QWORD *)&result = Subject<>.send()(v22, v23).n128_u64[0];
      if (!*(_QWORD *)(v2 + 32))
      {
        v24 = sub_100003DB8(&qword_10032B0E0);
        *(_QWORD *)&result = Subject<>.send()(v24, v23).n128_u64[0];
        return result;
      }
    }
    *(_BYTE *)(v2 + 41) = 1;
  }
  return result;
}

double sub_1001CFB54(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = *(unsigned __int8 *)(v1 + 66);
  if (v4 == 2)
  {
    if (a1 == 2)
      return result;
  }
  else if (a1 != 2 && ((((a1 & 1) == 0) ^ v4) & 1) != 0)
  {
    return result;
  }
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FD48);
  v7 = swift_retain_n(v1, v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v26 = v11;
    *(_DWORD *)v10 = 136446466;
    LOBYTE(v25) = a1;
    v12 = sub_100003DB8((uint64_t *)&unk_1003263F0);
    v14 = String.init<A>(describing:)(&v25, v12, v13);
    v16 = v15;
    v25 = sub_100172BEC(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v10 + 4, v10 + 12);
    v17 = swift_bridgeObjectRelease(v16);
    *(_WORD *)(v10 + 12) = 2082;
    LOBYTE(v25) = *(_BYTE *)(v2 + 66);
    v18 = String.init<A>(describing:)(&v25, v12, v17);
    v20 = v19;
    v25 = sub_100172BEC(v18, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v10 + 14, v10 + 22);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "__cachedLocationAcquisitionInProgress changed from: %{public}s to: %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v2);
  }
  sub_1001CF5FC();
  if (*(_QWORD *)(v2 + 32))
  {
    *(_BYTE *)(v2 + 40) = 1;
  }
  else
  {
    v22 = sub_100003DB8(&qword_10032B0E0);
    v23 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v22, v23).n128_u64[0];
    if (!*(_QWORD *)(v2 + 32))
    {
      v24 = sub_100003DB8(&qword_10032B0E0);
      *(_QWORD *)&result = Subject<>.send()(v24, v23).n128_u64[0];
      return result;
    }
  }
  *(_BYTE *)(v2 + 41) = 1;
  return result;
}

double sub_1001CFE14(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = *(unsigned __int8 *)(v1 + 80);
  if (v4 == 2)
  {
    if (a1 == 2)
      return result;
LABEL_6:
    if (qword_100315830 != -1)
      swift_once(&qword_100315830, sub_1000D961C);
    v5 = type metadata accessor for Logger(0);
    sub_10000D744(v5, (uint64_t)qword_10033FD48);
    v7 = swift_retain_n(v1, v6);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(22, -1);
      v11 = swift_slowAlloc(64, -1);
      v25 = v11;
      *(_DWORD *)v10 = 136446466;
      LOBYTE(v24) = a1;
      v12 = sub_100003DB8((uint64_t *)&unk_1003263F0);
      v14 = String.init<A>(describing:)(&v24, v12, v13);
      v16 = v15;
      v24 = sub_100172BEC(v14, v15, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 4, v10 + 12);
      v17 = swift_bridgeObjectRelease(v16);
      *(_WORD *)(v10 + 12) = 2082;
      LOBYTE(v24) = *(_BYTE *)(v2 + 80);
      v18 = String.init<A>(describing:)(&v24, v12, v17);
      v20 = v19;
      v24 = sub_100172BEC(v18, v19, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 14, v10 + 22);
      swift_release_n(v2);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Cached _inSilencePeriod changed from: %{public}s to: %{public}s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      if (*(_QWORD *)(v2 + 32))
      {
LABEL_10:
        *(_BYTE *)(v2 + 41) = 1;
        return result;
      }
    }
    else
    {

      swift_release_n(v2);
      if (*(_QWORD *)(v2 + 32))
        goto LABEL_10;
    }
    v22 = sub_100003DB8(&qword_10032B0E0);
    v23 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v22, v23).n128_u64[0];
    return result;
  }
  if (a1 == 2 || ((((a1 & 1) == 0) ^ v4) & 1) == 0)
    goto LABEL_6;
  return result;
}

double sub_1001D00A0(char a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(v1 + 80);
  if (v3 == 2)
  {
    if (a1 == 2)
      goto LABEL_9;
    goto LABEL_6;
  }
  if (a1 == 2 || ((((a1 & 1) == 0) ^ v3) & 1) == 0)
  {
LABEL_6:
    if (*(_QWORD *)(v1 + 32))
    {
      *(_BYTE *)(v1 + 40) = 1;
    }
    else
    {
      v4 = sub_100003DB8(&qword_10032B0E0);
      v5 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v4, v5);
    }
  }
LABEL_9:
  *(_BYTE *)(v1 + 80) = a1;
  return sub_1001CFE14(v3);
}

double sub_1001D0158(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  double result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = *(unsigned __int8 *)(v1 + 81);
  if (v4 == 2)
  {
    if (a1 == 2)
      return result;
LABEL_6:
    if (qword_100315830 != -1)
      swift_once(&qword_100315830, sub_1000D961C);
    v5 = type metadata accessor for Logger(0);
    sub_10000D744(v5, (uint64_t)qword_10033FD48);
    v7 = swift_retain_n(v1, v6);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(22, -1);
      v11 = swift_slowAlloc(64, -1);
      v25 = v11;
      *(_DWORD *)v10 = 136446466;
      LOBYTE(v24) = a1;
      v12 = sub_100003DB8((uint64_t *)&unk_1003263F0);
      v14 = String.init<A>(describing:)(&v24, v12, v13);
      v16 = v15;
      v24 = sub_100172BEC(v14, v15, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 4, v10 + 12);
      v17 = swift_bridgeObjectRelease(v16);
      *(_WORD *)(v10 + 12) = 2082;
      LOBYTE(v24) = *(_BYTE *)(v2 + 81);
      v18 = String.init<A>(describing:)(&v24, v12, v17);
      v20 = v19;
      v24 = sub_100172BEC(v18, v19, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 14, v10 + 22);
      swift_release_n(v2);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Cached _coreMotionErrorPresent changed from: %{public}s to: %{public}s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

      if (*(_QWORD *)(v2 + 32))
      {
LABEL_10:
        *(_BYTE *)(v2 + 41) = 1;
        return result;
      }
    }
    else
    {

      swift_release_n(v2);
      if (*(_QWORD *)(v2 + 32))
        goto LABEL_10;
    }
    v22 = sub_100003DB8(&qword_10032B0E0);
    v23 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v22, v23).n128_u64[0];
    return result;
  }
  if (a1 == 2 || ((((a1 & 1) == 0) ^ v4) & 1) == 0)
    goto LABEL_6;
  return result;
}

double sub_1001D03E4(char a1)
{
  uint64_t v1;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(unsigned __int8 *)(v1 + 81);
  if (v3 == 2)
  {
    if (a1 == 2)
      goto LABEL_9;
    goto LABEL_6;
  }
  if (a1 == 2 || ((((a1 & 1) == 0) ^ v3) & 1) == 0)
  {
LABEL_6:
    if (*(_QWORD *)(v1 + 32))
    {
      *(_BYTE *)(v1 + 40) = 1;
    }
    else
    {
      v4 = sub_100003DB8(&qword_10032B0E0);
      v5 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v4, v5);
    }
  }
LABEL_9:
  *(_BYTE *)(v1 + 81) = a1;
  return sub_1001D0158(v3);
}

uint64_t sub_1001D049C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  __n128 v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  _QWORD v37[3];
  id v38;

  v1 = v0;
  v2 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8((uint64_t *)&unk_100326490);
  v36 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v0 + 48) = xmmword_10025CA90;
  *(_WORD *)(v0 + 64) = 516;
  *(_BYTE *)(v0 + 66) = 2;
  v10 = type metadata accessor for ServiceOutageModel(0);
  v11 = swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  swift_retain(v1);
  sub_1001CA8EC();
  *(_QWORD *)(v1 + 72) = v11;
  *(_WORD *)(v1 + 80) = 514;
  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 104) = 0u;
  *(_QWORD *)(v1 + 120) = 0;
  *(_WORD *)(v1 + 128) = 513;
  *(_QWORD *)(v1 + 144) = 0;
  *(_QWORD *)(v1 + 152) = 0;
  *(_QWORD *)(v1 + 136) = 0;
  *(_BYTE *)(v1 + 160) = 1;
  *(_QWORD *)(v1 + 176) = 0;
  *(_QWORD *)(v1 + 184) = 0;
  *(_QWORD *)(v1 + 168) = 0;
  *(_BYTE *)(v1 + 192) = 1;
  v12 = &_swiftEmptySetSingleton;
  *(_QWORD *)(v1 + 200) = &_swiftEmptySetSingleton;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0)
  {
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
      sub_100209204((uint64_t)_swiftEmptyArrayStorage);
    else
      v12 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)(v1 + 208) = v12;
  v35 = v1 + 208;
  swift_release(v1);
  *(_QWORD *)(v1 + 32) = 0;
  *(_WORD *)(v1 + 40) = 0;
  v13 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  *(_QWORD *)(v1 + 16) = PassthroughSubject.init()(v14);
  swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
  *(_QWORD *)(v1 + 24) = PassthroughSubject.init()(v15);
  v37[0] = *(_QWORD *)(*(_QWORD *)(v1 + 72) + 16);
  v16 = v37[0];
  v17 = sub_10000D75C();
  swift_retain(v1);
  v18 = swift_retain(v16);
  v38 = (id)static OS_dispatch_queue.main.getter(v18);
  v19 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56);
  v34(v5, 1, 1, v19);
  v20 = sub_1000084FC((unint64_t *)&qword_1003264A0, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v33 = v20;
  v32 = sub_1000052EC((unint64_t *)&qword_10032B100, (uint64_t (*)(uint64_t))sub_10000D75C, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v38, v5, v13, v17, v20, v32);
  sub_100007FF0((uint64_t)v5, &qword_100329AF0);

  swift_release(v37[0]);
  v21 = swift_allocObject(&unk_1002F8090, 32, 7);
  *(_QWORD *)(v21 + 16) = sub_1001DE8BC;
  *(_QWORD *)(v21 + 24) = v1;
  v22 = sub_1000084FC((unint64_t *)&unk_1003264B0, (uint64_t *)&unk_100326490, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v31 = v22;
  v23 = swift_retain(v1);
  v24 = Publisher<>.sink(receiveValue:)(sub_1000216F8, v21, v6, v22, v23);
  swift_release(v21);
  v36 = *(_QWORD *)(v36 + 8);
  ((void (*)(char *, uint64_t))v36)(v9, v6);
  v25 = v35;
  swift_beginAccess(v35, v37, 33, 0);
  AnyCancellable.store(in:)(v25);
  swift_endAccess(v37);
  swift_release(v24);
  v37[0] = *(_QWORD *)(*(_QWORD *)(v1 + 72) + 24);
  v26 = swift_retain(v37[0]);
  v38 = (id)static OS_dispatch_queue.main.getter(v26);
  v34(v5, 1, 1, v19);
  Publisher.receive<A>(on:options:)(&v38, v5, v13, v17, v33, v32);
  sub_100007FF0((uint64_t)v5, &qword_100329AF0);

  swift_release(v37[0]);
  v27 = swift_allocObject(&unk_1002F80B8, 32, 7);
  *(_QWORD *)(v27 + 16) = sub_1001DE8E4;
  *(_QWORD *)(v27 + 24) = v1;
  v28 = swift_retain(v1);
  v29 = Publisher<>.sink(receiveValue:)(sub_1000216F8, v27, v6, v31, v28);
  swift_release(v27);
  ((void (*)(char *, uint64_t))v36)(v9, v6);
  swift_beginAccess(v25, v37, 33, 0);
  AnyCancellable.store(in:)(v25);
  swift_endAccess(v37);
  swift_release(v29);
  swift_release(v1);
  return v1;
}

double sub_1001D0940(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  if (*(_QWORD *)(a1 + 32))
  {
    *(_BYTE *)(a1 + 40) = 1;
  }
  else
  {
    v1 = sub_100003DB8(&qword_10032B0E0);
    v2 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v1, v2).n128_u64[0];
  }
  return result;
}

double sub_1001D09B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = type metadata accessor for Date(0);
  v3 = *(_QWORD *)(v2 - 8);
  v5 = __chkstk_darwin(v2, v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  Date.init()(v5);
  sub_1001C87F4((uint64_t)v7);
  v9 = v8;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v7, v2);
  if (v9)
    swift_bridgeObjectRelease(v9);
  sub_1001D00A0(v9 != 0);
  sub_1001CF5FC();
  if (*(_QWORD *)(a1 + 32))
  {
    *(_BYTE *)(a1 + 41) = 1;
  }
  else
  {
    v11 = sub_100003DB8(&qword_10032B0E0);
    v12 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v11, v12).n128_u64[0];
  }
  return result;
}

void *sub_1001D0AB0()
{
  uint64_t v0;
  char v1;
  double v2;
  double v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char v8;
  char v9;
  char v10;
  char v11;
  char v12;
  void *v13;

  v13 = &_swiftEmptySetSingleton;
  if ((*(_BYTE *)(v0 + 66) & 1) != 0 && *(unsigned __int8 *)(v0 + 64) - 2 >= 3)
    sub_100103260(&v8, 4);
  v1 = *(_BYTE *)(v0 + 80);
  if ((v1 & 1) == 0 && (*(_BYTE *)(v0 + 66) & 1) == 0)
  {
    if ((*(_BYTE *)(v0 + 65) & 1) == 0 && *(unsigned __int8 *)(v0 + 64) - 2 >= 3)
    {
      sub_100103260(&v9, 4);
      v1 = *(_BYTE *)(v0 + 80);
    }
    if ((v1 & 1) == 0 && (*(_BYTE *)(v0 + 66) & 1) == 0 && (*(_BYTE *)(v0 + 192) & 1) == 0)
    {
      v2 = *(double *)(v0 + 168);
      if (v2 < 0.0)
        v3 = -v2;
      else
        v3 = *(double *)(v0 + 168);
      if (v3 <= 0.785398163)
      {
        v5 = &v12;
        v6 = 0;
        goto LABEL_22;
      }
      if (v2 <= 0.0)
        v4 = 1;
      else
        v4 = 2;
      sub_100103260(&v11, v4);
      if (v3 > 2.75762022)
      {
        v5 = &v10;
        v6 = 3;
LABEL_22:
        sub_100103260(v5, v6);
      }
    }
  }
  return v13;
}

uint64_t sub_1001D0BCC()
{
  _QWORD *v0;

  swift_release(v0[9]);
  swift_bridgeObjectRelease(v0[25]);
  return swift_bridgeObjectRelease(v0[26]);
}

uint64_t sub_1001D0BF0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[9]);
  swift_bridgeObjectRelease(v0[25]);
  swift_bridgeObjectRelease(v0[26]);
  return swift_deallocClassInstance(v0, 216, 7);
}

uint64_t type metadata accessor for GuidanceModel()
{
  return objc_opt_self(_TtC8SOSBuddy13GuidanceModel);
}

uint64_t sub_1001D0C54(uint64_t a1, uint64_t a2)
{
  double v2;
  char v3;
  double v4;
  int v5;
  char v7;

  v2 = *(double *)(a1 + 8);
  v3 = *(_BYTE *)(a1 + 16);
  v4 = *(double *)(a2 + 8);
  v5 = *(unsigned __int8 *)(a2 + 16);
  if ((sub_1001BF408(*(_QWORD *)a1, *(_QWORD *)a2) & 1) != 0)
  {
    if ((v3 & 1) != 0)
    {
      if (v5)
        return 1;
    }
    else
    {
      if (v2 == v4)
        v7 = v5;
      else
        v7 = 1;
      if ((v7 & 1) == 0)
        return 1;
    }
  }
  return 0;
}

uint64_t sub_1001D0CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  uint64_t v9;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_QWORD *)(v9 + 112) = 0;
  v17 = v9 + OBJC_IVAR____TtCC8SOSBuddy21GuidanceMessagesModel13NudgeMessages__lastProducedExtraDetailsAt;
  v18 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  *(_QWORD *)(v9 + 32) = a3;
  *(_QWORD *)(v9 + 40) = a4;
  v19 = sub_100003DB8((uint64_t *)&unk_10031B300);
  v20 = swift_allocObject(v19, 48, 7);
  *(_OWORD *)(v20 + 16) = xmmword_10024E070;
  *(_QWORD *)(v20 + 32) = a5;
  *(_QWORD *)(v20 + 40) = a6;
  *(_QWORD *)(v9 + 72) = v20;
  *(_OWORD *)(v9 + 80) = 0u;
  *(_OWORD *)(v9 + 96) = 0u;
  *(_QWORD *)(v9 + 48) = a7;
  *(_QWORD *)(v9 + 56) = a8;
  *(_BYTE *)(v9 + 64) = a9 & 1;
  return v9;
}

_QWORD *sub_1001D0DA4()
{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[3];
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v1);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[9]);
  sub_10004DA00(v0[10], v0[11]);
  swift_bridgeObjectRelease(v0[13]);
  swift_bridgeObjectRelease(v0[14]);
  sub_100007FF0((uint64_t)v0 + OBJC_IVAR____TtCC8SOSBuddy21GuidanceMessagesModel13NudgeMessages__lastProducedExtraDetailsAt, &qword_1003180C8);
  return v0;
}

uint64_t sub_1001D0E14()
{
  return sub_1001D0E20((void (*)(void))sub_1001D0DA4);
}

uint64_t sub_1001D0E20(void (*a1)(void))
{
  uint64_t v1;

  a1();
  return swift_deallocClassInstance(v1, *(unsigned int *)(*(_QWORD *)v1 + 48), *(unsigned __int16 *)(*(_QWORD *)v1 + 52));
}

uint64_t sub_1001D0E44(uint64_t *a1, uint64_t *a2)
{
  return sub_1001DD608(*a1, *a2);
}

double sub_1001D0E50(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 48);
  if (!v3)
  {
    if (!a1)
      return result;
    goto LABEL_13;
  }
  if (!a1)
    goto LABEL_5;
  if ((sub_1001DD608(v3, a1) & 1) != 0)
    return result;
  v3 = *(_QWORD *)(v2 + 48);
  if (v3)
  {
LABEL_5:
    v5 = *(_QWORD *)(v3 + 72);
    if (v5)
    {
      v6 = *(_QWORD *)(v3 + 72);
    }
    else
    {
      swift_retain(v3);
      v6 = sub_1001DD7D8();
      swift_bridgeObjectRetain(v6);
      swift_release(v3);
      if (!v6)
        goto LABEL_13;
      v5 = 0;
    }
    v7 = *(_QWORD *)(v6 + 16);
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRelease(v6);
    if (v7 > 1)
    {
      v8 = 0;
      goto LABEL_14;
    }
  }
LABEL_13:
  v8 = 1;
LABEL_14:
  sub_1001D0F58(0, v8);
  sub_1001D1018();
  if (*(_QWORD *)(v2 + 32))
  {
    *(_BYTE *)(v2 + 41) = 1;
  }
  else
  {
    v9 = sub_100003DB8(&qword_10032B0E0);
    v10 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v9, v10).n128_u64[0];
  }
  return result;
}

double sub_1001D0F58(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *(_QWORD *)(v2 + 56);
  v6 = *(_BYTE *)(v2 + 64);
  if ((v6 & 1) != 0)
  {
    if ((a2 & 1) != 0)
      goto LABEL_9;
    goto LABEL_6;
  }
  if ((a2 & 1) != 0 || v5 != a1)
  {
LABEL_6:
    if (*(_QWORD *)(v2 + 32))
    {
      *(_BYTE *)(v2 + 40) = 1;
    }
    else
    {
      v7 = sub_100003DB8(&qword_10032B0E0);
      v8 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v7, v8);
    }
  }
LABEL_9:
  *(_QWORD *)(v2 + 56) = a1;
  *(_BYTE *)(v2 + 64) = a2 & 1;
  return sub_1001D1324(v5, v6);
}

void sub_1001D1018()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  _QWORD aBlock[5];
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (_QWORD *)((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    return;
  }
  v9 = *(_QWORD **)(v1 + 48);
  if (!v9)
    goto LABEL_10;
  v10 = v9[9];
  if (v10 && *(_QWORD *)(v10 + 16) > 1uLL)
    goto LABEL_7;
  v11 = v9[10];
  v12 = v9[11];
  if (!v11)
  {
    sub_100018F00(0, v9[11]);
    sub_10004DA00(0, 0);
LABEL_10:
    v19 = *(void **)(v1 + 72);
    if (v19)
    {
      objc_msgSend(v19, "invalidate");
      v18 = *(void **)(v1 + 72);
    }
    else
    {
      v18 = 0;
    }
    *(_QWORD *)(v1 + 72) = 0;
    goto LABEL_14;
  }
  v13 = swift_allocObject(&unk_1002F7E10, 32, 7);
  *(_QWORD *)(v13 + 16) = v11;
  *(_QWORD *)(v13 + 24) = v12;
  sub_100018F00(v11, v12);
  sub_10004DA00((uint64_t)sub_1001DE620, v13);
LABEL_7:
  if (*(_QWORD *)(v1 + 72))
    return;
  v14 = (void *)objc_opt_self(NSTimer);
  v15 = swift_allocObject(&unk_1002F7D98, 24, 7);
  swift_weakInit(v15 + 16);
  aBlock[4] = sub_1001DE5F4;
  v21 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100076C24;
  aBlock[3] = &unk_1002F7DD8;
  v16 = _Block_copy(aBlock);
  swift_release(v21);
  v17 = objc_msgSend(v14, "scheduledTimerWithTimeInterval:repeats:block:", 1, v16, 5.0);
  _Block_release(v16);
  v18 = *(void **)(v1 + 72);
  *(_QWORD *)(v1 + 72) = v17;
LABEL_14:

}

uint64_t sub_1001D1238(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = v1;
  v4 = *(_QWORD *)(v1 + 48);
  if (!v4)
  {
    if (!a1)
      goto LABEL_10;
    goto LABEL_4;
  }
  v5 = *(_QWORD *)(v1 + 48);
  if (!a1)
  {
    swift_retain(v5);
    if (*(_QWORD *)(v1 + 32))
      goto LABEL_5;
    goto LABEL_9;
  }
  v6 = sub_1001DD608(v5, a1);
  swift_retain(v4);
  if ((v6 & 1) == 0)
  {
LABEL_4:
    if (*(_QWORD *)(v2 + 32))
    {
LABEL_5:
      *(_BYTE *)(v2 + 40) = 1;
      goto LABEL_10;
    }
LABEL_9:
    v7 = sub_100003DB8(&qword_10032B0E0);
    v8 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v7, v8);
  }
LABEL_10:
  v9 = *(_QWORD *)(v2 + 48);
  *(_QWORD *)(v2 + 48) = a1;
  swift_retain(a1);
  swift_release(v9);
  sub_1001D0E50(v4);
  swift_release(a1);
  return swift_release(v4);
}

double sub_1001D1324(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  double result;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[8];
  uint64_t v28;

  v3 = v2;
  if ((*(_BYTE *)(v2 + 64) & 1) != 0)
  {
    if ((a2 & 1) != 0)
      return result;
LABEL_6:
    if (qword_100315830 != -1)
      swift_once(&qword_100315830, sub_1000D961C);
    v6 = type metadata accessor for Logger(0);
    sub_10000D744(v6, (uint64_t)qword_10033FD48);
    v8 = swift_retain_n(v2, v7);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = swift_slowAlloc(22, -1);
      v12 = swift_slowAlloc(64, -1);
      v28 = v12;
      *(_DWORD *)v11 = 136446466;
      v26 = a1;
      v27[0] = a2 & 1;
      v13 = sub_100003DB8(&qword_1003188D0);
      v15 = String.init<A>(describing:)(&v26, v13, v14);
      v17 = v16;
      v26 = sub_100172BEC(v15, v16, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v11 + 4, v11 + 12);
      v18 = swift_bridgeObjectRelease(v17);
      *(_WORD *)(v11 + 12) = 2082;
      v19 = *(_BYTE *)(v3 + 64);
      v26 = *(_QWORD *)(v3 + 56);
      v27[0] = v19;
      v20 = String.init<A>(describing:)(&v26, v13, v18);
      v22 = v21;
      v26 = sub_100172BEC(v20, v21, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, v27, v11 + 14, v11 + 22);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Extra detail index changed from: %{public}s to: %{public}s", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v12, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      if (*(_QWORD *)(v3 + 32))
      {
LABEL_10:
        *(_BYTE *)(v3 + 41) = 1;
        return result;
      }
    }
    else
    {

      swift_release_n(v3);
      if (*(_QWORD *)(v3 + 32))
        goto LABEL_10;
    }
    v24 = sub_100003DB8(&qword_10032B0E0);
    v25 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v24, v25).n128_u64[0];
    return result;
  }
  if ((a2 & 1) != 0 || *(_QWORD *)(v2 + 56) != a1)
    goto LABEL_6;
  return result;
}

double sub_1001D15B4(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  double result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (*(unsigned __int8 *)(v1 + 96) != a1)
  {
    v2 = v1;
    if (qword_100315830 != -1)
      swift_once(&qword_100315830, sub_1000D961C);
    v4 = type metadata accessor for Logger(0);
    sub_10000D744(v4, (uint64_t)qword_10033FD48);
    v6 = swift_retain_n(v1, v5);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v23 = v10;
      v11.n128_u64[0] = 136446466;
      *(_DWORD *)v9 = 136446466;
      LOBYTE(v22) = a1;
      v12 = String.init<A>(describing:)(&v22, &type metadata for GuidanceMessagesModel.HowToConnectGuidance, v11);
      v14 = v13;
      v22 = sub_100172BEC(v12, v13, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v9 + 4, v9 + 12);
      v15 = swift_bridgeObjectRelease(v14);
      *(_WORD *)(v9 + 12) = 2082;
      LOBYTE(v22) = *(_BYTE *)(v2 + 96);
      v16 = String.init<A>(describing:)(&v22, &type metadata for GuidanceMessagesModel.HowToConnectGuidance, v15);
      v18 = v17;
      v22 = sub_100172BEC(v16, v17, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v9 + 14, v9 + 22);
      swift_release_n(v2);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "_howToConnectGuidance changed from: %{public}s to: %{public}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      if (*(_QWORD *)(v2 + 32))
      {
LABEL_6:
        *(_BYTE *)(v2 + 41) = 1;
        return result;
      }
    }
    else
    {

      swift_release_n(v2);
      if (*(_QWORD *)(v2 + 32))
        goto LABEL_6;
    }
    v20 = sub_100003DB8(&qword_10032B0E0);
    v21 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v20, v21).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001D1814()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  __n128 v21;
  char v22;
  uint64_t result;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  __n128 v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _QWORD aBlock[5];
  uint64_t v44;

  v1 = v0;
  v37 = (_QWORD *)type metadata accessor for DispatchWorkItemFlags(0);
  v42 = *(v37 - 1);
  __chkstk_darwin(v37, v2);
  v41 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v39 = *(_QWORD *)(v4 - 8);
  v40 = v4;
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for DispatchTime(0);
  v8 = *(_QWORD *)(v38 - 8);
  v10 = __chkstk_darwin(v38, v9);
  v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v37 - v14;
  v16 = type metadata accessor for DispatchPredicate(0);
  v17 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v18);
  v20 = (_QWORD **)((char *)&v37 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v20 = static OS_dispatch_queue.main.getter(v21);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v17 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v16);
  v22 = _dispatchPreconditionTest(_:)(v20);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v17 + 8))(v20, v16);
  if ((v22 & 1) != 0)
  {
    if ((*(_BYTE *)(v1 + 112) & 1) != 0 && *(_QWORD *)(v1 + 104) && !*(_BYTE *)(v1 + 96))
    {
      if (*(_QWORD *)(v1 + 32))
      {
        *(_BYTE *)(v1 + 40) = 1;
      }
      else
      {
        v24 = sub_100003DB8(&qword_10032B0E0);
        v25 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
        Subject<>.send()(v24, v25);
      }
      v26 = v37;
      *(_BYTE *)(v1 + 96) = 1;
      v27.n128_f64[0] = sub_1001D15B4(0);
      v28 = (void *)static OS_dispatch_queue.main.getter(v27);
      static DispatchTime.now()(v28);
      + infix(_:_:)(v12, 5.0);
      v37 = *(_QWORD **)(v8 + 8);
      v29 = v38;
      ((void (*)(char *, uint64_t))v37)(v12, v38);
      v30 = swift_allocObject(&unk_1002F7D98, 24, 7);
      swift_weakInit(v30 + 16);
      aBlock[4] = sub_1001DE5EC;
      v44 = v30;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1001BAACC;
      aBlock[3] = &unk_1002F7DB0;
      v31 = _Block_copy(aBlock);
      swift_release(v44);
      static DispatchQoS.unspecified.getter(v32);
      aBlock[0] = _swiftEmptyArrayStorage;
      v33 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v34 = sub_100003DB8((uint64_t *)&unk_1003178D0);
      v35 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
      v36 = v41;
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v34, v35, v26, v33);
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v15, v7, v36, v31);
      _Block_release(v31);

      (*(void (**)(char *, _QWORD *))(v42 + 8))(v36, v26);
      (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v40);
      return ((uint64_t (*)(char *, uint64_t))v37)(v15, v29);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1001D1BBC(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = *(unsigned __int8 *)(result + 96);
    result = swift_release(result);
    if (v3 == 1)
    {
      swift_beginAccess(v1, &v8, 0, 0);
      result = swift_weakLoadStrong(v1);
      if (result)
      {
        v4 = result;
        v5 = *(unsigned __int8 *)(result + 96);
        if (v5 != 2)
        {
          if (*(_QWORD *)(result + 32))
          {
            *(_BYTE *)(result + 40) = 1;
          }
          else
          {
            v6 = sub_100003DB8(&qword_10032B0E0);
            v7 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
            Subject<>.send()(v6, v7);
          }
        }
        *(_BYTE *)(v4 + 96) = 2;
        sub_1001D15B4(v5);
        return swift_release(v4);
      }
    }
  }
  return result;
}

uint64_t sub_1001D1CBC(uint64_t a1)
{
  return sub_1001D1CC8(a1, &qword_100326978);
}

uint64_t sub_1001D1CC8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = type metadata accessor for ApproximateTimeIntervalFormatter();
  result = swift_allocObject(v3, 24, 7);
  *(_QWORD *)(result + 16) = 0;
  *a2 = result;
  return result;
}

uint64_t sub_1001D1CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  _QWORD *v32;
  void *v33;
  void *v34;
  uint64_t (*v35)(char *, uint64_t);
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *object;
  _QWORD *v43;
  void *v44;
  void *v45;
  Swift::Int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  id v51;
  Swift::String v52;
  Swift::String v53;
  Swift::String v54;
  id v55;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  Swift::Int v59;
  uint64_t v60;
  id v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v70;
  char v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int (*v76)(char *, uint64_t, uint64_t);
  void *v77;
  id v78;
  Swift::String v79;
  Swift::String v80;
  Swift::String v81;
  id v82;
  Swift::String v83;
  Swift::String v84;
  Swift::String v85;
  Swift::Int v86;
  uint64_t v87;
  BOOL v88;
  BOOL v89;
  BOOL v90;
  uint64_t v91;
  void *v92;
  uint64_t v93;
  void *v94;
  id v95;
  Swift::String v96;
  Swift::String v97;
  Swift::String v98;
  uint64_t countAndFlagsBits;
  void *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  uint64_t v104;
  void *v105;
  uint64_t v106;
  void *v107;
  void *v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  id v112;
  Swift::String v113;
  Swift::String v114;
  Swift::String v115;
  id v116;
  Swift::String v117;
  Swift::String v118;
  Swift::String v119;
  uint64_t v120;
  id v121;
  unint64_t v122;
  unint64_t v123;
  const char *v124;
  uint64_t v125;
  void *v126;
  uint64_t v127;
  void *v128;
  char *v129;
  void *v130;
  uint64_t v131;
  void *v132;
  id v133;
  Swift::String v134;
  Swift::String v135;
  Swift::String v136;
  unint64_t v137;
  Swift::String v138;
  Swift::String v139;
  _UNKNOWN **v140;
  Swift::Int v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  BOOL v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  void *v153;
  id v154;
  Swift::String v155;
  Swift::String v156;
  Swift::String v157;
  uint64_t v158;
  uint64_t v159;
  id v160;
  Swift::String v161;
  Swift::String v162;
  Swift::String v163;
  id v164;
  Swift::String v165;
  Swift::String v166;
  Swift::String v167;
  Swift::Int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unint64_t v175;
  uint64_t v176;
  Swift::Int v177;
  double v178;
  id v179;
  Swift::String v180;
  Swift::String v181;
  Swift::String v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char v197[24];
  Swift::String v198;
  Swift::String v199;
  Swift::String v200;
  Swift::String v201;
  Swift::String v202;
  Swift::String v203;
  Swift::String v204;
  Swift::String v205;
  Swift::String v206;
  Swift::String v207;
  Swift::String v208;
  Swift::String v209;
  Swift::String v210;

  v192 = a5;
  v195 = a4;
  v196 = a1;
  v7 = type metadata accessor for ServicePredictionsModel.SkimmerPrediction(0);
  v193 = *(_QWORD *)(v7 - 8);
  v194 = v7;
  v8 = *(_QWORD *)(v193 + 64);
  v10 = __chkstk_darwin(v7, v9);
  v190 = (uint64_t)&v188 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v188 - v12;
  v14 = sub_100003DB8(&qword_1003284E0);
  v16 = __chkstk_darwin(v14, v15);
  v18 = (char *)&v188 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v16, v19);
  v22 = (char *)&v188 - v21;
  __chkstk_darwin(v20, v23);
  v25 = (char *)&v188 - v24;
  v26 = type metadata accessor for Date(0);
  v27 = *(_QWORD *)(v26 - 8);
  v29 = __chkstk_darwin(v26, v28);
  v31 = (char *)&v188 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(a2 + 43) & 1) == 0 && *(_BYTE *)(a2 + 42) != 1)
  {
    v50 = (void *)objc_opt_self(NSBundle);
    v51 = objc_msgSend(v50, "mainBundle");
    v52._countAndFlagsBits = 0xD000000000000022;
    v198._countAndFlagsBits = 0xD000000000000053;
    v198._object = (void *)0x800000010026F8E0;
    v52._object = (void *)0x800000010026F630;
    v53._countAndFlagsBits = 0;
    v53._object = (void *)0xE000000000000000;
    v54 = NSLocalizedString(_:tableName:bundle:value:comment:)(v52, (Swift::String_optional)0, (NSBundle)v51, v53, v198);

    v55 = objc_msgSend(v50, "mainBundle", swift_bridgeObjectRetain(v54._object).n128_f64[0]);
    v199._countAndFlagsBits = 0xD000000000000064;
    v199._object = (void *)0x800000010026F940;
    v56._object = (void *)0x800000010026F6C0;
    v56._countAndFlagsBits = 0xD000000000000032;
    v57._countAndFlagsBits = 0;
    v57._object = (void *)0xE000000000000000;
    v58 = NSLocalizedString(_:tableName:bundle:value:comment:)(v56, (Swift::String_optional)0, (NSBundle)v55, v57, v199);

    v59 = sub_1002096DC((uint64_t)&off_1002E2198);
    v60 = type metadata accessor for GuidanceMessagesModel.NudgeMessages(0);
    swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
    return sub_1001D0CBC(v54._countAndFlagsBits, (uint64_t)v54._object, v54._countAndFlagsBits, (uint64_t)v54._object, v58._countAndFlagsBits, (uint64_t)v58._object, v59, 0, 1);
  }
  v188 = v13;
  v189 = v25;
  Date.init()(v29);
  v32 = sub_1001C87F4((uint64_t)v31);
  v34 = v33;
  v35 = *(uint64_t (**)(char *, uint64_t))(v27 + 8);
  v36 = v35(v31, v26);
  if (v34)
  {
    v37 = sub_1002096DC((uint64_t)&off_1002E2058);
    v38 = type metadata accessor for GuidanceMessagesModel.NudgeMessages(0);
    v39 = swift_allocObject(v38, *(unsigned int *)(v38 + 48), *(unsigned __int16 *)(v38 + 52));
    *(_QWORD *)(v39 + 112) = 0;
    v40 = v39 + OBJC_IVAR____TtCC8SOSBuddy21GuidanceMessagesModel13NudgeMessages__lastProducedExtraDetailsAt;
    v41 = type metadata accessor for DispatchTime(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
    *(_QWORD *)(v39 + 16) = v32;
    *(_QWORD *)(v39 + 24) = v34;
    *(_QWORD *)(v39 + 32) = v32;
    *(_QWORD *)(v39 + 40) = v34;
    *(_OWORD *)(v39 + 72) = 0u;
    *(_OWORD *)(v39 + 88) = 0u;
    *(_QWORD *)(v39 + 104) = 0;
    *(_QWORD *)(v39 + 48) = v37;
    *(_QWORD *)(v39 + 56) = 0;
    *(_BYTE *)(v39 + 64) = 1;
    object = v34;
LABEL_13:
    swift_bridgeObjectRetain(object);
    return v39;
  }
  if ((*(_BYTE *)(a3 + 80) & 1) != 0 || (*(_BYTE *)(a3 + 66) & 1) != 0 || (*(_BYTE *)(a3 + 192) & 1) != 0)
  {
    Date.init()(v36);
    v43 = sub_1001C8194((uint64_t)v31);
    v45 = v44;
    v35(v31, v26);
    if (v45)
    {
      v46 = sub_1002096DC((uint64_t)&off_1002E2170);
      v47 = type metadata accessor for GuidanceMessagesModel.NudgeMessages(0);
      v39 = swift_allocObject(v47, *(unsigned int *)(v47 + 48), *(unsigned __int16 *)(v47 + 52));
      *(_QWORD *)(v39 + 112) = 0;
      v48 = v39 + OBJC_IVAR____TtCC8SOSBuddy21GuidanceMessagesModel13NudgeMessages__lastProducedExtraDetailsAt;
      v49 = type metadata accessor for DispatchTime(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v49 - 8) + 56))(v48, 1, 1, v49);
      *(_QWORD *)(v39 + 16) = v43;
      *(_QWORD *)(v39 + 24) = v45;
      *(_QWORD *)(v39 + 32) = v43;
      *(_QWORD *)(v39 + 40) = v45;
      *(_OWORD *)(v39 + 72) = 0u;
      *(_OWORD *)(v39 + 88) = 0u;
      *(_QWORD *)(v39 + 104) = 0;
      *(_QWORD *)(v39 + 48) = v46;
      *(_QWORD *)(v39 + 56) = 0;
      *(_BYTE *)(v39 + 64) = 1;
      object = v45;
    }
    else
    {
      v62 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v63._countAndFlagsBits = 0xD000000000000018;
      v200._countAndFlagsBits = 0xD000000000000089;
      v200._object = (void *)0x800000010026F430;
      v63._object = (void *)0x800000010026F410;
      v64._countAndFlagsBits = 0;
      v64._object = (void *)0xE000000000000000;
      v65 = NSLocalizedString(_:tableName:bundle:value:comment:)(v63, (Swift::String_optional)0, (NSBundle)v62, v64, v200);

      v66 = type metadata accessor for GuidanceMessagesModel.NudgeMessages(0);
      v39 = swift_allocObject(v66, *(unsigned int *)(v66 + 48), *(unsigned __int16 *)(v66 + 52));
      *(_QWORD *)(v39 + 112) = 0;
      v67 = v39 + OBJC_IVAR____TtCC8SOSBuddy21GuidanceMessagesModel13NudgeMessages__lastProducedExtraDetailsAt;
      v68 = type metadata accessor for DispatchTime(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v68 - 8) + 56))(v67, 1, 1, v68);
      *(Swift::String *)(v39 + 16) = v65;
      *(Swift::String *)(v39 + 32) = v65;
      *(_OWORD *)(v39 + 72) = 0u;
      *(_OWORD *)(v39 + 88) = 0u;
      *(_QWORD *)(v39 + 104) = 0;
      *(_QWORD *)(v39 + 48) = &_swiftEmptySetSingleton;
      *(_QWORD *)(v39 + 56) = 0;
      *(_BYTE *)(v39 + 64) = 1;
      object = v65._object;
    }
    goto LABEL_13;
  }
  v70 = sub_10019C260((uint64_t)&off_1002E2080, *(_QWORD *)(a3 + 200));
  v71 = *(_BYTE *)(*(_QWORD *)(v196 + 56) + 120);
  if ((v70 & 1) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(v196 + 56) + 120) & 1) == 0)
    {
      if (sub_100067058(4u, *(_QWORD *)(a3 + 200)))
      {
        v72 = (void (*)(char *, uint64_t))v35;
        v73 = v192 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__skimmerPrediction;
        swift_beginAccess(v192 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__skimmerPrediction, v197, 0, 0);
        v74 = (uint64_t)v189;
        sub_10000B234(v73, (uint64_t)v189, &qword_1003284E0);
        sub_10000B234(v74, (uint64_t)v22, &qword_1003284E0);
        v75 = v194;
        v76 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48);
        if (v76(v22, 1, v194) == 1)
        {
          sub_100007FF0((uint64_t)v22, &qword_1003284E0);
LABEL_20:
          v77 = (void *)objc_opt_self(NSBundle);
          v78 = objc_msgSend(v77, "mainBundle");
          v79._countAndFlagsBits = 0xD000000000000022;
          v201._countAndFlagsBits = 0xD000000000000053;
          v201._object = (void *)0x800000010026F660;
          v79._object = (void *)0x800000010026F630;
          v80._countAndFlagsBits = 0;
          v80._object = (void *)0xE000000000000000;
          v81 = NSLocalizedString(_:tableName:bundle:value:comment:)(v79, (Swift::String_optional)0, (NSBundle)v78, v80, v201);

          v82 = objc_msgSend(v77, "mainBundle", swift_bridgeObjectRetain(v81._object).n128_f64[0]);
          v202._countAndFlagsBits = 0xD000000000000064;
          v202._object = (void *)0x800000010026F700;
          v83._object = (void *)0x800000010026F6C0;
          v83._countAndFlagsBits = 0xD000000000000032;
          v84._countAndFlagsBits = 0;
          v84._object = (void *)0xE000000000000000;
          v85 = NSLocalizedString(_:tableName:bundle:value:comment:)(v83, (Swift::String_optional)0, (NSBundle)v82, v84, v202);

          v86 = sub_1002096DC((uint64_t)&off_1002E20A8);
          v87 = type metadata accessor for GuidanceMessagesModel.NudgeMessages(0);
          swift_allocObject(v87, *(unsigned int *)(v87 + 48), *(unsigned __int16 *)(v87 + 52));
          v39 = sub_1001D0CBC(v81._countAndFlagsBits, (uint64_t)v81._object, v81._countAndFlagsBits, (uint64_t)v81._object, v85._countAndFlagsBits, (uint64_t)v85._object, v86, 0, 1);
          sub_100007FF0(v74, &qword_1003284E0);
          return v39;
        }
        v129 = &v22[*(int *)(v75 + 24)];
        if (v129[24] == 1)
        {
          sub_10000AFFC((uint64_t)v22, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
        }
        else
        {
          v145 = *(_QWORD *)v129;
          v146 = *(_QWORD *)&v22[*(int *)(v75 + 20)];
          sub_10000AFFC((uint64_t)v22, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
          v147 = v145 == v146;
          v75 = v194;
          if (v147)
            goto LABEL_20;
        }
        sub_10000B234(v74, (uint64_t)v18, &qword_1003284E0);
        if (v76(v18, 1, v75) == 1)
        {
          sub_100007FF0((uint64_t)v18, &qword_1003284E0);
        }
        else
        {
          v151 = (uint64_t)v188;
          sub_1000E8D6C((uint64_t)v18, (uint64_t)v188, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
          v152 = v151 + *(int *)(v75 + 24);
          if ((*(_BYTE *)(v152 + 24) & 1) == 0 && *(_QWORD *)v152 != *(_QWORD *)(v151 + *(int *)(v75 + 20)))
          {
            v172 = v190;
            sub_1000E1F30(v151, v190, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
            v173 = *(unsigned __int8 *)(v193 + 80);
            v174 = (v173 + 16) & ~v173;
            v175 = (v8 + v174 + 7) & 0xFFFFFFFFFFFFFFF8;
            v176 = swift_allocObject(&unk_1002F7F00, v175 + 8, v173 | 7);
            sub_1000E8D6C(v172, v176 + v174, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
            *(_QWORD *)(v176 + v175) = v191;
            v177 = sub_1002096DC((uint64_t)&off_1002E20D0);
            static Date.now.getter(v177);
            v178 = Date.timeIntervalSince(_:)(v31);
            v72(v31, v26);
            v179 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
            v180._countAndFlagsBits = 0xD000000000000026;
            v210._countAndFlagsBits = 0xD0000000000000E6;
            v210._object = (void *)0x800000010026F7A0;
            v180._object = (void *)0x800000010026F770;
            v181._countAndFlagsBits = 0;
            v181._object = (void *)0xE000000000000000;
            v182 = NSLocalizedString(_:tableName:bundle:value:comment:)(v180, (Swift::String_optional)0, (NSBundle)v179, v181, v210);

            swift_bridgeObjectRetain(v182._object);
            sub_10000AFFC(v151, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
            sub_100007FF0((uint64_t)v189, &qword_1003284E0);
            v183 = swift_allocObject(&unk_1002F7F28, 32, 7);
            *(_QWORD *)(v183 + 16) = sub_1001DE794;
            *(_QWORD *)(v183 + 24) = v176;
            v184 = type metadata accessor for GuidanceMessagesModel.NudgeMessages(0);
            v39 = swift_allocObject(v184, *(unsigned int *)(v184 + 48), *(unsigned __int16 *)(v184 + 52));
            *(_QWORD *)(v39 + 112) = 0;
            v185 = v39 + OBJC_IVAR____TtCC8SOSBuddy21GuidanceMessagesModel13NudgeMessages__lastProducedExtraDetailsAt;
            v186 = type metadata accessor for DispatchTime(0);
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v186 - 8) + 56))(v185, 1, 1, v186);
            *(Swift::String *)(v39 + 16) = v182;
            *(Swift::String *)(v39 + 32) = v182;
            *(_QWORD *)(v39 + 72) = 0;
            *(_QWORD *)(v39 + 80) = sub_10002BF7C;
            *(_QWORD *)(v39 + 88) = v183;
            *(_QWORD *)(v39 + 96) = 0xD000000000000017;
            *(_QWORD *)(v39 + 104) = 0x800000010026F8C0;
            *(_QWORD *)(v39 + 48) = v177;
            *(double *)(v39 + 56) = v178;
            *(_BYTE *)(v39 + 64) = 0;
            return v39;
          }
          sub_10000AFFC(v151, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
        }
        v153 = (void *)objc_opt_self(NSBundle);
        v154 = objc_msgSend(v153, "mainBundle");
        v155._countAndFlagsBits = 0xD000000000000026;
        v207._countAndFlagsBits = 0xD0000000000000E6;
        v207._object = (void *)0x800000010026F7A0;
        v155._object = (void *)0x800000010026F770;
        v156._countAndFlagsBits = 0;
        v156._object = (void *)0xE000000000000000;
        v157 = NSLocalizedString(_:tableName:bundle:value:comment:)(v155, (Swift::String_optional)0, (NSBundle)v154, v156, v207);

        v158 = sub_100003DB8((uint64_t *)&unk_10031B300);
        v159 = swift_allocObject(v158, 64, 7);
        *(_OWORD *)(v159 + 16) = xmmword_10024DEE0;
        v160 = objc_msgSend(v153, "mainBundle", swift_bridgeObjectRetain(v157._object).n128_f64[0]);
        v208._countAndFlagsBits = 0xD000000000000064;
        v208._object = (void *)0x800000010026F700;
        v161._object = (void *)0x800000010026F6C0;
        v161._countAndFlagsBits = 0xD000000000000032;
        v162._countAndFlagsBits = 0;
        v162._object = (void *)0xE000000000000000;
        v163 = NSLocalizedString(_:tableName:bundle:value:comment:)(v161, (Swift::String_optional)0, (NSBundle)v160, v162, v208);

        *(Swift::String *)(v159 + 32) = v163;
        v164 = objc_msgSend(v153, "mainBundle");
        v165._countAndFlagsBits = 0xD000000000000020;
        v209._countAndFlagsBits = 0xD00000000000009ELL;
        v209._object = (void *)0x80000001002613B0;
        v165._object = (void *)0x800000010026F890;
        v166._countAndFlagsBits = 0;
        v166._object = (void *)0xE000000000000000;
        v167 = NSLocalizedString(_:tableName:bundle:value:comment:)(v165, (Swift::String_optional)0, (NSBundle)v164, v166, v209);

        *(Swift::String *)(v159 + 48) = v167;
        v168 = sub_1002096DC((uint64_t)&off_1002E20F8);
        sub_100007FF0((uint64_t)v189, &qword_1003284E0);
        v169 = type metadata accessor for GuidanceMessagesModel.NudgeMessages(0);
        v39 = swift_allocObject(v169, *(unsigned int *)(v169 + 48), *(unsigned __int16 *)(v169 + 52));
        *(_QWORD *)(v39 + 112) = 0;
        v170 = v39 + OBJC_IVAR____TtCC8SOSBuddy21GuidanceMessagesModel13NudgeMessages__lastProducedExtraDetailsAt;
        v171 = type metadata accessor for DispatchTime(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v171 - 8) + 56))(v170, 1, 1, v171);
        *(Swift::String *)(v39 + 16) = v157;
        *(Swift::String *)(v39 + 32) = v157;
        *(_QWORD *)(v39 + 72) = v159;
        *(_OWORD *)(v39 + 80) = 0u;
        *(_OWORD *)(v39 + 96) = 0u;
        *(_QWORD *)(v39 + 48) = v168;
LABEL_60:
        *(_QWORD *)(v39 + 56) = 0;
        *(_BYTE *)(v39 + 64) = 1;
        return v39;
      }
      v111 = (void *)objc_opt_self(NSBundle);
      v112 = objc_msgSend(v111, "mainBundle");
      v113._countAndFlagsBits = 0xD00000000000001ALL;
      v204._countAndFlagsBits = 0xD000000000000089;
      v204._object = (void *)0x80000001002611C0;
      v113._object = (void *)0x80000001002611A0;
      v114._countAndFlagsBits = 0;
      v114._object = (void *)0xE000000000000000;
      v115 = NSLocalizedString(_:tableName:bundle:value:comment:)(v113, (Swift::String_optional)0, (NSBundle)v112, v114, v204);

      v116 = objc_msgSend(v111, "mainBundle", swift_bridgeObjectRetain(v115._object).n128_f64[0]);
      v117._countAndFlagsBits = 0xD00000000000001CLL;
      v205._countAndFlagsBits = 0xD00000000000009ALL;
      v205._object = (void *)0x800000010026F590;
      v117._object = (void *)0x800000010026F570;
      v118._countAndFlagsBits = 0;
      v118._object = (void *)0xE000000000000000;
      v119 = NSLocalizedString(_:tableName:bundle:value:comment:)(v117, (Swift::String_optional)0, (NSBundle)v116, v118, v205);

      v120 = type metadata accessor for GuidanceMessagesModel.NudgeMessages(0);
      swift_allocObject(v120, *(unsigned int *)(v120 + 48), *(unsigned __int16 *)(v120 + 52));
      return sub_1001D0CBC(v115._countAndFlagsBits, (uint64_t)v115._object, v115._countAndFlagsBits, (uint64_t)v115._object, v119._countAndFlagsBits, (uint64_t)v119._object, (uint64_t)&_swiftEmptySetSingleton, 0, 1);
    }
    v95 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v96._countAndFlagsBits = 0xD00000000000001ALL;
    v203._countAndFlagsBits = 0xD000000000000089;
    v203._object = (void *)0x80000001002611C0;
    v96._object = (void *)0x80000001002611A0;
    v97._countAndFlagsBits = 0;
    v97._object = (void *)0xE000000000000000;
    v98 = NSLocalizedString(_:tableName:bundle:value:comment:)(v96, (Swift::String_optional)0, (NSBundle)v95, v97, v203);
    countAndFlagsBits = v98._countAndFlagsBits;
    v100 = v98._object;

    v101 = v195;
    if (*(_QWORD *)(v195 + 64))
    {
      if (sub_100067058(0, *(_QWORD *)(v195 + 88)))
      {
LABEL_29:
        swift_bridgeObjectRelease(v98._object);
        v102 = sub_10001BA64();
LABEL_30:
        countAndFlagsBits = v102;
        v100 = v103;
        v106 = v104;
        v107 = v105;
LABEL_59:
        v148 = type metadata accessor for GuidanceMessagesModel.NudgeMessages(0);
        v39 = swift_allocObject(v148, *(unsigned int *)(v148 + 48), *(unsigned __int16 *)(v148 + 52));
        *(_QWORD *)(v39 + 112) = 0;
        v149 = v39 + OBJC_IVAR____TtCC8SOSBuddy21GuidanceMessagesModel13NudgeMessages__lastProducedExtraDetailsAt;
        v150 = type metadata accessor for DispatchTime(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v150 - 8) + 56))(v149, 1, 1, v150);
        *(_QWORD *)(v39 + 16) = countAndFlagsBits;
        *(_QWORD *)(v39 + 24) = v100;
        *(_QWORD *)(v39 + 32) = v106;
        *(_QWORD *)(v39 + 40) = v107;
        *(_OWORD *)(v39 + 72) = 0u;
        *(_OWORD *)(v39 + 88) = 0u;
        *(_QWORD *)(v39 + 104) = 0;
        *(_QWORD *)(v39 + 48) = &_swiftEmptySetSingleton;
        goto LABEL_60;
      }
      if (*(_QWORD *)(v101 + 64))
      {
        if (sub_100067058(3u, *(_QWORD *)(v101 + 88)))
          goto LABEL_29;
        if (*(_QWORD *)(v101 + 64) && sub_100067058(4u, *(_QWORD *)(v101 + 88)))
        {
          swift_bridgeObjectRelease(v98._object);
          v102 = sub_10001BB90();
          goto LABEL_30;
        }
      }
    }
    swift_bridgeObjectRetain(v98._object);
    v106 = v98._countAndFlagsBits;
    v107 = v98._object;
    goto LABEL_59;
  }
  v88 = sub_100067058(3u, *(_QWORD *)(a3 + 200));
  v89 = sub_100067058(1u, *(_QWORD *)(a3 + 200));
  v90 = v89;
  if ((v71 & 1) != 0)
  {
    if (v88)
    {
      if (v89)
        v110 = sub_10001BF14();
      else
        v110 = sub_10001C03C();
      v130 = v108;
      swift_bridgeObjectRelease(v109);
      v133 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v134._countAndFlagsBits = 0xD00000000000001DLL;
      v206._countAndFlagsBits = 0xD000000000000081;
      v206._object = (void *)0x800000010026F4E0;
      v134._object = (void *)0x800000010026F4C0;
      v135._countAndFlagsBits = 0;
      v135._object = (void *)0xE000000000000000;
      v136 = NSLocalizedString(_:tableName:bundle:value:comment:)(v134, (Swift::String_optional)0, (NSBundle)v133, v135, v206);
      v131 = v136._countAndFlagsBits;
      v132 = v136._object;

    }
    else
    {
      if (v89)
        v125 = sub_10001BF14();
      else
        v125 = sub_10001C03C();
      v110 = v125;
      v130 = v126;
      v131 = v127;
      v132 = v128;
    }
    v140 = &off_1002E2120;
  }
  else
  {
    if (v88)
    {
      if (v89)
        v91 = sub_10001BCBC();
      else
        v91 = sub_10001BDE8();
      v110 = v91;
      v130 = v92;
      v131 = v93;
      v132 = v94;
    }
    else
    {
      v121 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      if (v90)
      {
        v122 = 0xD00000000000001BLL;
        v123 = 0xD00000000000008ELL;
        v187 = 0x8000000100261760;
        v124 = "Turn Left to Find Satellite";
      }
      else
      {
        v122 = 0xD00000000000001CLL;
        v123 = 0xD00000000000008FLL;
        v187 = 0x80000001002618C0;
        v124 = "Turn Right to Find Satellite";
      }
      v137 = (unint64_t)(v124 - 32) | 0x8000000000000000;
      v138._countAndFlagsBits = 0;
      v138._object = (void *)0xE000000000000000;
      v139 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v122, (Swift::String_optional)0, (NSBundle)v121, v138, *(Swift::String *)&v123);
      v110 = v139._countAndFlagsBits;
      v130 = v139._object;

      swift_bridgeObjectRetain(v139._object);
      v131 = v139._countAndFlagsBits;
      v132 = v139._object;
    }
    v140 = &off_1002E2148;
  }
  v141 = sub_1002096DC((uint64_t)v140);
  v142 = type metadata accessor for GuidanceMessagesModel.NudgeMessages(0);
  v39 = swift_allocObject(v142, *(unsigned int *)(v142 + 48), *(unsigned __int16 *)(v142 + 52));
  *(_QWORD *)(v39 + 112) = 0;
  v143 = v39 + OBJC_IVAR____TtCC8SOSBuddy21GuidanceMessagesModel13NudgeMessages__lastProducedExtraDetailsAt;
  v144 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v144 - 8) + 56))(v143, 1, 1, v144);
  *(_QWORD *)(v39 + 16) = v110;
  *(_QWORD *)(v39 + 24) = v130;
  *(_QWORD *)(v39 + 32) = v131;
  *(_QWORD *)(v39 + 40) = v132;
  *(_OWORD *)(v39 + 72) = 0u;
  *(_OWORD *)(v39 + 88) = 0u;
  *(_QWORD *)(v39 + 104) = 0;
  *(_QWORD *)(v39 + 48) = v141;
  *(_QWORD *)(v39 + 56) = 0;
  *(_BYTE *)(v39 + 64) = 1;
  return v39;
}

uint64_t sub_1001D2EC4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v23[4];
  Swift::String v24;

  v0 = type metadata accessor for Date(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0, v2);
  v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10000D744(v5, (uint64_t)qword_10033FD48);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Regenerating skimmer prediction nudge extra details", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }

  static Date.now.getter(v10);
  v11 = Date.timeIntervalSince(_:)(v4);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  if (qword_100315960 != -1)
    swift_once(&qword_100315960, sub_1001D1CBC);
  v12 = qword_100326978;
  swift_retain(qword_100326978);
  sub_10001B874(v23);
  v13 = sub_1001DDB18(v23, v11);
  v15 = v14;
  sub_1001DE694(v23);
  swift_release(v12);
  v16 = sub_100003DB8((uint64_t *)&unk_10031B300);
  v17 = swift_allocObject(v16, 64, 7);
  *(_OWORD *)(v17 + 16) = xmmword_10024DEE0;
  v18 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v24._countAndFlagsBits = 0xD000000000000064;
  v24._object = (void *)0x800000010026F700;
  v19._object = (void *)0x800000010026F6C0;
  v19._countAndFlagsBits = 0xD000000000000032;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, (NSBundle)v18, v20, v24);

  *(Swift::String *)(v17 + 32) = v21;
  *(_QWORD *)(v17 + 48) = v13;
  *(_QWORD *)(v17 + 56) = v15;
  return v17;
}

uint64_t sub_1001D3130(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_1001D3184();
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_1001D3184()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  __n128 v16;
  char v17;
  uint64_t result;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v36[24];

  v1 = v0;
  v2 = sub_100003DB8(&qword_1003180C8);
  __chkstk_darwin(v2, v3);
  v5 = &v36[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = &v36[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10000D744(v11, (uint64_t)qword_10033FD48);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Extra details update timer fired", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

  sub_10000D75C();
  *v10 = static OS_dispatch_queue.main.getter(v16);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v17 = _dispatchPreconditionTest(_:)(v10);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v17 & 1) != 0)
  {
    v20 = *(_QWORD *)(v1 + 48);
    if (!v20)
      return sub_1001D1018(result, v19);
    v21 = type metadata accessor for DispatchTime(0);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v5, 1, 1, v21);
    v22 = v20 + OBJC_IVAR____TtCC8SOSBuddy21GuidanceMessagesModel13NudgeMessages__lastProducedExtraDetailsAt;
    swift_beginAccess(v20 + OBJC_IVAR____TtCC8SOSBuddy21GuidanceMessagesModel13NudgeMessages__lastProducedExtraDetailsAt, v36, 33, 0);
    swift_retain(v20);
    sub_100123FDC((uint64_t)v5, v22, &qword_1003180C8);
    swift_endAccess(v36);
    result = swift_release(v20);
    v23 = *(_QWORD *)(v1 + 48);
    if (!v23)
      return sub_1001D1018(result, v19);
    v24 = *(_QWORD *)(v23 + 72);
    if (v24)
    {
      v25 = *(_QWORD *)(v23 + 72);
    }
    else
    {
      swift_retain(*(_QWORD *)(v1 + 48));
      v25 = sub_1001DD7D8();
      swift_bridgeObjectRetain(v25);
      result = swift_release(v23);
      if (!v25)
        return sub_1001D1018(result, v19);
    }
    v26 = *(_QWORD *)(v25 + 16);
    if (v26 >= 2)
    {
      v27 = *(_QWORD *)(v1 + 56);
      v28 = *(_BYTE *)(v1 + 64);
      swift_bridgeObjectRetain(v24);
      swift_bridgeObjectRelease(v25);
      if ((v28 & 1) != 0)
      {
        v27 = -1;
      }
      else if (v27 >= (uint64_t)(v26 - 1))
      {
        v31 = 0;
        goto LABEL_25;
      }
      v31 = v27 + 1;
LABEL_25:
      v19.n128_f64[0] = sub_1001D0F58(v31, 0);
      return sub_1001D1018(result, v19);
    }
    v29 = *(_QWORD *)(v1 + 48);
    if (v29 && ((v30 = *(_QWORD *)(v29 + 72)) != 0 && *(_QWORD *)(v30 + 16) > 1uLL || *(_QWORD *)(v29 + 80)))
    {
      swift_bridgeObjectRetain(v24);
      v19 = swift_bridgeObjectRelease(v25);
      if (v26)
      {
        if (*(_QWORD *)(v1 + 32))
        {
          *(_BYTE *)(v1 + 40) = 1;
        }
        else
        {
          v32 = sub_100003DB8(&qword_10032B0E0);
          v33 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
          v19 = Subject<>.send()(v32, v33);
          if (!*(_QWORD *)(v1 + 32))
          {
            v34 = sub_100003DB8(&qword_10032B0E0);
            v19 = Subject<>.send()(v34, v33);
            return sub_1001D1018(result, v19);
          }
        }
        *(_BYTE *)(v1 + 41) = 1;
      }
    }
    else
    {
      swift_bridgeObjectRetain(v24);
      v19 = swift_bridgeObjectRelease(v25);
    }
    return sub_1001D1018(result, v19);
  }
  __break(1u);
  return result;
}

uint64_t sub_1001D3510()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  __n128 v3;

  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = 0;
  *(_BYTE *)(v0 + 64) = 1;
  *(_QWORD *)(v0 + 104) = 0;
  *(_QWORD *)(v0 + 80) = 0;
  *(_QWORD *)(v0 + 88) = 0;
  *(_QWORD *)(v0 + 72) = 0;
  *(_BYTE *)(v0 + 96) = 0;
  *(_BYTE *)(v0 + 112) = 2;
  *(_QWORD *)(v0 + 32) = 0;
  *(_WORD *)(v0 + 40) = 0;
  v1 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  *(_QWORD *)(v0 + 16) = PassthroughSubject.init()(v2);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  *(_QWORD *)(v0 + 24) = PassthroughSubject.init()(v3);
  return v0;
}

uint64_t sub_1001D35A8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));

  swift_release(*(_QWORD *)(v0 + 80));
  return swift_release(*(_QWORD *)(v0 + 88));
}

uint64_t sub_1001D35D4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 48));

  swift_release(*(_QWORD *)(v0 + 80));
  swift_release(*(_QWORD *)(v0 + 88));
  return swift_deallocClassInstance(v0, 113, 7);
}

uint64_t type metadata accessor for GuidanceMessagesModel()
{
  return objc_opt_self(_TtC8SOSBuddy21GuidanceMessagesModel);
}

uint64_t sub_1001D3640()
{
  return type metadata accessor for GuidanceMessagesModel.NudgeMessages(0);
}

uint64_t type metadata accessor for GuidanceMessagesModel.NudgeMessages(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100327670, (uint64_t)&nominal type descriptor for GuidanceMessagesModel.NudgeMessages);
}

void sub_1001D365C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[7];

  v4[0] = " ";
  v4[1] = &unk_10025CDB0;
  v4[2] = "\b";
  v4[3] = &unk_10025CDC8;
  v4[4] = &unk_10025CDC8;
  v4[5] = "\b";
  sub_1000F03D4(319, (unint64_t *)&qword_100323F10, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime);
  if (v3 <= 0x3F)
  {
    v4[6] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 7, v4, a1 + 80);
  }
}

uint64_t sub_1001D3704(_BYTE *a1, unsigned __int8 *a2)
{
  int v2;
  BOOL v3;
  BOOL v4;

  if (*a1 != 9 && ((v2 = *a2, !*a1) ? (v3 = v2 == 9) : (v3 = 1), !v3 ? (v4 = v2 == 1) : (v4 = 0), v4))
    return 0x4024000000000000;
  else
    return 0;
}

double sub_1001D373C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  double result;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  if (*(_BYTE *)(v1 + 56) != (a1 & 1))
  {
    v2 = v1;
    if (qword_100315830 != -1)
      swift_once(&qword_100315830, sub_1000D961C);
    v4 = type metadata accessor for Logger(0);
    sub_10000D744(v4, (uint64_t)qword_10033FD48);
    v6 = swift_retain_n(v1, v5);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v19 = v10;
      *(_DWORD *)v9 = 136446466;
      if ((a1 & 1) != 0)
        v11 = 1702195828;
      else
        v11 = 0x65736C6166;
      if ((a1 & 1) != 0)
        v12 = 0xE400000000000000;
      else
        v12 = 0xE500000000000000;
      v18 = sub_100172BEC(v11, v12, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease(v12);
      *(_WORD *)(v9 + 12) = 2082;
      if (*(_BYTE *)(v2 + 56))
        v13 = 1702195828;
      else
        v13 = 0x65736C6166;
      if (*(_BYTE *)(v2 + 56))
        v14 = 0xE400000000000000;
      else
        v14 = 0xE500000000000000;
      v18 = sub_100172BEC(v13, v14, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v9 + 14, v9 + 22);
      swift_release_n(v2);
      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "potentialObstructionDetected changed from: %{public}s to: %{public}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

      if (*(_QWORD *)(v2 + 32))
        goto LABEL_18;
    }
    else
    {

      swift_release_n(v2);
      if (*(_QWORD *)(v2 + 32))
      {
LABEL_18:
        *(_BYTE *)(v2 + 41) = 1;
        return result;
      }
    }
    v16 = sub_100003DB8(&qword_10032B0E0);
    v17 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v16, v17).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001D39C0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  __n128 v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  id v41;

  v1 = v0;
  v2 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8((uint64_t *)&unk_100326490);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for TimerBasedHysteresisScheduler();
  v12 = swift_allocObject(v11, 16, 7);
  v13 = sub_100003DB8(&qword_1003285F0);
  v14 = swift_allocObject(v13, 136, 7);
  swift_retain(v1);
  *(_QWORD *)(v1 + 48) = sub_1001DD530(v12, 0x7463656E6E6F4327, 0xEE00277974697669, (uint64_t)sub_1001D3704, 0, v14, 9);
  *(_WORD *)(v1 + 56) = 256;
  v39 = v7;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100209204((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v15 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)(v1 + 64) = v15;
  v38 = v1 + 64;
  *(_QWORD *)(v1 + 72) = 0;
  *(_QWORD *)(v1 + 80) = 0;
  swift_release(v1);
  *(_QWORD *)(v1 + 32) = 0;
  *(_WORD *)(v1 + 40) = 0;
  v16 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  *(_QWORD *)(v1 + 16) = PassthroughSubject.init()(v17);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  *(_QWORD *)(v1 + 24) = PassthroughSubject.init()(v18);
  v40[0] = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 16);
  v19 = v40[0];
  v20 = sub_10000D75C();
  swift_retain(v1);
  v21 = swift_retain(v19);
  v41 = (id)static OS_dispatch_queue.main.getter(v21);
  v22 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v37 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56);
  v37(v5, 1, 1, v22);
  v23 = sub_1000084FC((unint64_t *)&qword_1003264A0, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v36 = v23;
  v35 = sub_1000052EC((unint64_t *)&qword_10032B100, (uint64_t (*)(uint64_t))sub_10000D75C, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v41, v5, v16, v20, v23, v35);
  sub_100007FF0((uint64_t)v5, &qword_100329AF0);

  swift_release(v40[0]);
  v24 = swift_allocObject(&unk_1002F7FF0, 32, 7);
  *(_QWORD *)(v24 + 16) = sub_1001DE8BC;
  *(_QWORD *)(v24 + 24) = v1;
  v25 = sub_1000084FC((unint64_t *)&unk_1003264B0, (uint64_t *)&unk_100326490, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v34 = v25;
  v26 = swift_retain(v1);
  v27 = Publisher<>.sink(receiveValue:)(sub_1000216F8, v24, v6, v25, v26);
  swift_release(v24);
  v39 = *(_QWORD *)(v39 + 8);
  ((void (*)(char *, uint64_t))v39)(v10, v6);
  v28 = v38;
  swift_beginAccess(v38, v40, 33, 0);
  AnyCancellable.store(in:)(v28);
  swift_endAccess(v40);
  swift_release(v27);
  v40[0] = *(_QWORD *)(*(_QWORD *)(v1 + 48) + 24);
  v29 = swift_retain(v40[0]);
  v41 = (id)static OS_dispatch_queue.main.getter(v29);
  v37(v5, 1, 1, v22);
  Publisher.receive<A>(on:options:)(&v41, v5, v16, v20, v36, v35);
  sub_100007FF0((uint64_t)v5, &qword_100329AF0);

  swift_release(v40[0]);
  v30 = swift_allocObject(&unk_1002F8018, 32, 7);
  *(_QWORD *)(v30 + 16) = sub_1001DE8D4;
  *(_QWORD *)(v30 + 24) = v1;
  v31 = swift_retain(v1);
  v32 = Publisher<>.sink(receiveValue:)(sub_1000216F8, v30, v6, v34, v31);
  swift_release(v30);
  ((void (*)(char *, uint64_t))v39)(v10, v6);
  swift_beginAccess(v28, v40, 33, 0);
  AnyCancellable.store(in:)(v28);
  swift_endAccess(v40);
  swift_release(v32);
  swift_release(v1);
  return v1;
}

double sub_1001D3E58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  double result;

  if (*(unsigned __int8 *)(*(_QWORD *)(a1 + 48) + 106) <= 1u)
    *(_BYTE *)(a1 + 57) = 0;
  if (*(_QWORD *)(a1 + 32))
  {
    *(_BYTE *)(a1 + 41) = 1;
  }
  else
  {
    v1 = sub_100003DB8(&qword_10032B0E0);
    v2 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v1, v2).n128_u64[0];
  }
  return result;
}

uint64_t sub_1001D3EDC()
{
  _QWORD *v0;

  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_bridgeObjectRelease(v0[10]);
}

uint64_t sub_1001D3F00()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t type metadata accessor for ConnectivityModel()
{
  return objc_opt_self(_TtC8SOSBuddy17ConnectivityModel);
}

void sub_1001D3F64(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  uint64_t v16;
  uint64_t v17;
  char v18;
  _BYTE v19[16];
  char v20;

  sub_10000B458(a1, (uint64_t)v15, &qword_100322A58);
  v3 = *(unsigned __int8 *)(v1 + 64);
  if (v3 == 2)
  {
    sub_10000B458(a1, (uint64_t)v19, &qword_100322A58);
    if (v20 == 2)
      return;
    goto LABEL_5;
  }
  v4 = v15[1];
  v5 = v16;
  v6 = v18;
  v7 = *(_QWORD *)(v1 + 48);
  v8 = *(_QWORD *)(v1 + 56);
  v13 = *(_QWORD *)(v1 + 72);
  v14 = v17;
  v9 = *(_BYTE *)(v1 + 80);
  sub_10000B458(a1, (uint64_t)v19, &qword_100322A58);
  if (v20 == 2)
    goto LABEL_5;
  sub_10022B3F4(v7);
  if ((v12 & 1) == 0 || v8 != v4 || ((v5 ^ ((v3 & 1) == 0)) & 1) == 0)
    goto LABEL_5;
  if ((v9 & 1) != 0)
  {
    if ((v6 & 1) != 0)
      return;
    goto LABEL_5;
  }
  if ((v6 & 1) != 0 || v13 != v14)
  {
LABEL_5:
    if (*(_QWORD *)(v1 + 32))
    {
      *(_BYTE *)(v1 + 40) = 1;
    }
    else
    {
      v10 = sub_100003DB8(&qword_10032B0E0);
      v11 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v10, v11);
    }
  }
}

void sub_1001D40BC(uint64_t a1)
{
  __n128 *v1;
  __n128 *v2;
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int8 v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 v23;
  __n128 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  __n128 v34[2];
  unsigned __int8 v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  char v40;
  _BYTE v41[16];
  char v42;

  v2 = v1;
  sub_10000B458(a1, (uint64_t)v37, &qword_100322A58);
  v4 = v1[4].n128_u8[0];
  if (v4 == 2)
  {
    sub_10000B458(a1, (uint64_t)v41, &qword_100322A58);
    if (v42 == 2)
      return;
  }
  else
  {
    v5 = v37[1];
    v6 = v38;
    v7 = v40;
    v8 = v1[3].n128_i64[0];
    v9 = v1[3].n128_i64[1];
    v32 = v1[4].n128_i64[1];
    v33 = v39;
    v10 = v1[5].n128_i8[0];
    sub_10000B458(a1, (uint64_t)v41, &qword_100322A58);
    if (v42 != 2)
    {
      v30 = (v4 & 1) == 0;
      sub_10022B3F4(v8);
      if ((v31 & 1) != 0 && v9 == v5 && ((v6 ^ v30) & 1) != 0)
      {
        if ((v10 & 1) != 0)
        {
          if ((v7 & 1) != 0)
            return;
        }
        else if ((v7 & 1) == 0 && v32 == v33)
        {
          return;
        }
      }
    }
  }
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v11 = type metadata accessor for Logger(0);
  sub_10000D744(v11, (uint64_t)qword_10033FD48);
  v13 = swift_retain_n(v1, v12);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc(22, -1);
    v17 = swift_slowAlloc(64, -1);
    v36 = v17;
    *(_DWORD *)v16 = 136446466;
    sub_10000B458(a1, (uint64_t)v34, &qword_100322A58);
    v18 = sub_100003DB8(&qword_100322A58);
    v20 = String.init<A>(describing:)(v34, v18, v19);
    v22 = v21;
    v34[0].n128_u64[0] = sub_100172BEC(v20, v21, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, &v34[0].n128_i8[8], v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v16 + 12) = 2082;
    v23 = v2[5].n128_u8[0];
    v24 = v2[4];
    v34[0] = v2[3];
    v34[1] = v24;
    v35 = v23;
    v25 = String.init<A>(describing:)(v34, v18, v34[0]);
    v27 = v26;
    v34[0].n128_u64[0] = sub_100172BEC(v25, v26, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v34, &v34[0].n128_i8[8], v16 + 14, v16 + 22);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Emergency conversation changed from: %{public}s to: %{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    if (v2[2].n128_u64[0])
    {
LABEL_9:
      v2[2].n128_u8[9] = 1;
      return;
    }
  }
  else
  {

    swift_release_n(v2);
    if (v2[2].n128_u64[0])
      goto LABEL_9;
  }
  v28 = sub_100003DB8(&qword_10032B0E0);
  v29 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Subject<>.send()(v28, v29);
}

uint64_t sub_1001D43F4()
{
  return sub_1001D4900(81);
}

uint64_t type metadata accessor for ConversationModel()
{
  return objc_opt_self(_TtC8SOSBuddy17ConversationModel);
}

void sub_1001D441C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  _BYTE v23[8];
  char v24;

  sub_10000B458(a1, (uint64_t)&v17, &qword_100319D78);
  v3 = *(unsigned __int8 *)(v1 + 56);
  if (v3 == 2)
  {
    sub_10000B458(a1, (uint64_t)v23, &qword_100319D78);
    if (v24 == 2)
      return;
    goto LABEL_5;
  }
  v4 = v17;
  v5 = v18;
  v6 = v20;
  v14 = v21;
  v15 = v19;
  v16 = v22;
  v7 = *(_QWORD *)(v1 + 48);
  v9 = *(_QWORD *)(v1 + 64);
  v8 = *(_QWORD *)(v1 + 72);
  v13 = *(_QWORD *)(v1 + 80);
  v10 = *(_BYTE *)(v1 + 88);
  sub_10000B458(a1, (uint64_t)v23, &qword_100319D78);
  if (v24 == 2 || v7 != v4 || ((v5 ^ ((v3 & 1) == 0)) & 1) == 0)
    goto LABEL_5;
  if ((v8 & 1) != 0)
  {
    if ((v6 & 1) == 0)
      goto LABEL_5;
  }
  else if ((v6 & 1) != 0 || v9 != v15)
  {
    goto LABEL_5;
  }
  if ((v10 & 1) != 0)
  {
    if ((v16 & 1) != 0)
      return;
    goto LABEL_5;
  }
  if ((v16 & 1) != 0 || v13 != v14)
  {
LABEL_5:
    if (*(_QWORD *)(v1 + 32))
    {
      *(_BYTE *)(v1 + 40) = 1;
    }
    else
    {
      v11 = sub_100003DB8(&qword_10032B0E0);
      v12 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v11, v12);
    }
  }
}

double sub_1001D4598(uint64_t a1)
{
  __n128 *v1;
  __n128 *v2;
  uint64_t v4;
  double result;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int8 v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  __n128 v37[2];
  unint64_t v38;
  unsigned __int8 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47[8];
  char v48;

  v2 = v1;
  sub_10000B458(a1, (uint64_t)&v41, &qword_100319D78);
  v4 = v1[3].n128_u8[8];
  if (v4 == 2)
  {
    sub_10000B458(a1, (uint64_t)v47, &qword_100319D78);
    if (v48 == 2)
      return result;
LABEL_17:
    if (qword_100315830 != -1)
      swift_once(&qword_100315830, sub_1000D961C);
    v13 = type metadata accessor for Logger(0);
    sub_10000D744(v13, (uint64_t)qword_10033FD48);
    v15 = swift_retain_n(v2, v14);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(22, -1);
      v19 = swift_slowAlloc(64, -1);
      v40 = v19;
      *(_DWORD *)v18 = 136446466;
      sub_10000B458(a1, (uint64_t)v37, &qword_100319D78);
      v20 = sub_100003DB8(&qword_100319D78);
      v22 = String.init<A>(describing:)(v37, v20, v21);
      v24 = v23;
      v37[0].n128_u64[0] = sub_100172BEC(v22, v23, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v37, &v37[0].n128_i8[8], v18 + 4, v18 + 12);
      swift_bridgeObjectRelease(v24);
      *(_WORD *)(v18 + 12) = 2082;
      v25 = v2[5].n128_u64[0];
      v26 = v2[5].n128_u8[8];
      v27 = v2[4];
      v37[0] = v2[3];
      v37[1] = v27;
      v38 = v25;
      v39 = v26;
      v28 = String.init<A>(describing:)(v37, v20, v37[0]);
      v30 = v29;
      v37[0].n128_u64[0] = sub_100172BEC(v28, v29, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v37, &v37[0].n128_i8[8], v18 + 14, v18 + 22);
      swift_release_n(v2);
      swift_bridgeObjectRelease(v30);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Roadside Assistance conversation changed from: %{public}s to: %{public}s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

      if (v2[2].n128_u64[0])
      {
LABEL_21:
        v2[2].n128_u8[9] = 1;
        return result;
      }
    }
    else
    {

      swift_release_n(v2);
      if (v2[2].n128_u64[0])
        goto LABEL_21;
    }
    v31 = sub_100003DB8(&qword_10032B0E0);
    v32 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v31, v32).n128_u64[0];
    return result;
  }
  v6 = v41;
  v7 = v42;
  v8 = v44;
  v34 = v45;
  v35 = v43;
  v36 = v46;
  v9 = v1[3].n128_i64[0];
  v11 = v1[4].n128_i64[0];
  v10 = v1[4].n128_i64[1];
  v33 = v2[5].n128_u64[0];
  v12 = v2[5].n128_u8[8];
  sub_10000B458(a1, (uint64_t)v47, &qword_100319D78);
  if (v48 == 2 || v9 != v6 || ((v7 ^ ((v4 & 1) == 0)) & 1) == 0)
    goto LABEL_17;
  if ((v10 & 1) != 0)
  {
    if ((v8 & 1) == 0)
      goto LABEL_17;
  }
  else if ((v8 & 1) != 0 || v11 != v35)
  {
    goto LABEL_17;
  }
  if ((v12 & 1) != 0)
  {
    if ((v36 & 1) != 0)
      return result;
    goto LABEL_17;
  }
  if ((v36 & 1) != 0 || v33 != v34)
    goto LABEL_17;
  return result;
}

uint64_t sub_1001D48F8()
{
  return sub_1001D4900(89);
}

uint64_t sub_1001D4900(uint64_t a1)
{
  uint64_t v1;

  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 24));
  return swift_deallocClassInstance(v1, a1, 7);
}

uint64_t type metadata accessor for RoadsideAssistanceConversationModel()
{
  return objc_opt_self(_TtC8SOSBuddy35RoadsideAssistanceConversationModel);
}

double sub_1001D4958(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;
  BOOL v7;
  double result;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(v2 + 56);
  if (v4)
  {
    if (!a2)
      goto LABEL_11;
    v6 = *(_QWORD *)(v2 + 48);
    v7 = v6 == a1 && v4 == a2;
    if (!v7 && (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v4, a1, a2, 0) & 1) == 0)
      goto LABEL_11;
LABEL_10:
    if ((*(_BYTE *)(v2 + 64) & 1) != 0)
      return result;
    goto LABEL_11;
  }
  if (!a2)
    goto LABEL_10;
LABEL_11:
  if (*(_QWORD *)(v2 + 32))
  {
    *(_BYTE *)(v2 + 40) = 1;
  }
  else
  {
    v9 = sub_100003DB8(&qword_10032B0E0);
    v10 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    *(_QWORD *)&result = Subject<>.send()(v9, v10).n128_u64[0];
  }
  return result;
}

void sub_1001D4A08(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  __n128 v10;
  __n128 v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v3 = v2;
  v6 = *(_QWORD *)(v2 + 56);
  if (v6)
  {
    if (!a2)
      goto LABEL_11;
    v7 = *(_QWORD *)(v2 + 48);
    v8 = v7 == a1 && v6 == a2;
    if (!v8 && (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v6, a1, a2, 0) & 1) == 0)
      goto LABEL_11;
  }
  else if (a2)
  {
    goto LABEL_11;
  }
  if ((*(_BYTE *)(v2 + 64) & 1) != 0)
    return;
LABEL_11:
  if (*(_BYTE *)(v2 + 64) == 1)
  {
    if (qword_100315830 != -1)
      swift_once(&qword_100315830, sub_1000D961C);
    v9 = type metadata accessor for Logger(0);
    sub_10000D744(v9, (uint64_t)qword_10033FD48);
    swift_bridgeObjectRetain_n(a2, 2, v10);
    v12 = swift_retain_n(v2, v11);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = swift_slowAlloc(22, -1);
      v16 = swift_slowAlloc(64, -1);
      v43 = a2;
      v44 = v16;
      *(_DWORD *)v15 = 136446466;
      v42 = a1;
      swift_bridgeObjectRetain(a2);
      v17 = sub_100003DB8(&qword_100318260);
      v19 = String.init<A>(describing:)(&v42, v17, v18);
      v21 = v20;
      v42 = sub_100172BEC(v19, v20, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease_n(a2, 2);
      swift_bridgeObjectRelease(v21);
      *(_WORD *)(v15 + 12) = 2082;
      v22 = *(_QWORD *)(v3 + 56);
      v42 = *(_QWORD *)(v3 + 48);
      v43 = v22;
      v23 = swift_bridgeObjectRetain(v22);
      v24 = String.init<A>(describing:)(&v42, v17, v23);
      v26 = v25;
      v42 = sub_100172BEC(v24, v25, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v15 + 14, v15 + 22);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v26);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Current country changed from: %{public}s to: %{public}s", (uint8_t *)v15, 0x16u);
      swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1, -1);
      swift_slowDealloc(v15, -1, -1);

      if (!*(_QWORD *)(v3 + 32))
        goto LABEL_22;
    }
    else
    {

      swift_release_n(v3);
      swift_bridgeObjectRelease_n(a2, 2);
      if (!*(_QWORD *)(v3 + 32))
      {
LABEL_22:
        v40 = sub_100003DB8(&qword_10032B0E0);
        v41 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
        Subject<>.send()(v40, v41);
        return;
      }
    }
  }
  else
  {
    if (qword_100315830 != -1)
      swift_once(&qword_100315830, sub_1000D961C);
    v27 = type metadata accessor for Logger(0);
    sub_10000D744(v27, (uint64_t)qword_10033FD48);
    v29 = swift_retain_n(v2, v28);
    v30 = Logger.logObject.getter(v29);
    v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      *(_DWORD *)v32 = 136446210;
      v44 = v33;
      v34 = *(_QWORD *)(v3 + 56);
      v42 = *(_QWORD *)(v3 + 48);
      v43 = v34;
      swift_bridgeObjectRetain(v34);
      v35 = sub_100003DB8(&qword_100318260);
      v37 = String.init<A>(describing:)(&v42, v35, v36);
      v39 = v38;
      v42 = sub_100172BEC(v37, v38, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v32 + 4, v32 + 12);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Current country initialized with: %{public}s", v32, 0xCu);
      swift_arrayDestroy(v33, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1, -1);
      swift_slowDealloc(v32, -1, -1);

    }
    else
    {

      swift_release_n(v3);
    }
    *(_BYTE *)(v3 + 64) = 1;
    if (!*(_QWORD *)(v3 + 32))
      goto LABEL_22;
  }
  *(_BYTE *)(v3 + 41) = 1;
}

uint64_t sub_1001D4E6C()
{
  uint64_t v0;

  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
}

uint64_t sub_1001D4E74()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocClassInstance(v0, 65, 7);
}

uint64_t type metadata accessor for CountryModel()
{
  return objc_opt_self(_TtC8SOSBuddy12CountryModel);
}

uint64_t sub_1001D4EC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  __n128 v9;

  v1 = v0;
  v2 = sub_100003DB8(&qword_100322C50);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = swift_retain(v0);
  *(_QWORD *)(v0 + 48) = PassthroughSubject.init()(v3);
  v4 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  *(_QWORD *)(v0 + 56) = PassthroughSubject.init()(v5);
  v6 = v0 + OBJC_IVAR____TtC8SOSBuddy21ConnectionClosedModel__connectionClosed;
  v7 = type metadata accessor for ConnectionClosed(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  swift_release(v1);
  *(_QWORD *)(v1 + 32) = 0;
  *(_WORD *)(v1 + 40) = 0;
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  *(_QWORD *)(v1 + 16) = PassthroughSubject.init()(v8);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  *(_QWORD *)(v1 + 24) = PassthroughSubject.init()(v9);
  return v1;
}

uint64_t sub_1001D4FBC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  return sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy21ConnectionClosedModel__connectionClosed, &qword_1003180C0);
}

uint64_t sub_1001D4FF4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  sub_100007FF0((uint64_t)v0 + OBJC_IVAR____TtC8SOSBuddy21ConnectionClosedModel__connectionClosed, &qword_1003180C0);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1001D504C()
{
  return type metadata accessor for ConnectionClosedModel(0);
}

uint64_t type metadata accessor for ConnectionClosedModel(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100327D08, (uint64_t)&nominal type descriptor for ConnectionClosedModel);
}

void sub_1001D5068(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_1000F03D4(319, (unint64_t *)&unk_10031F9B0, type metadata accessor for ConnectionClosed);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 256);
  }
}

uint64_t sub_1001D50F4()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = *(_QWORD **)(v0 + 128);
  if (!v1[4] || *(_QWORD *)(v0 + 64) && *(_BYTE *)(v0 + 56) == 5)
  {
    v2 = 0;
    v3 = *(_QWORD *)(v0 + 64);
    if (!v3)
      goto LABEL_10;
  }
  else
  {
    v4 = type metadata accessor for PreventSuspensionAssertion();
    swift_allocObject(v4, 32, 7);
    v2 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, 0xD000000000000023, 0x800000010026F2E0);
    v3 = *(_QWORD *)(v0 + 64);
    if (!v3)
    {
LABEL_10:
      v5 = v1[4];
LABEL_12:
      v1[4] = v3;
      swift_release(v5);
      goto LABEL_13;
    }
  }
  v5 = v1[4];
  if (*(_BYTE *)(v0 + 56) != 5)
  {
    v3 = 0;
    goto LABEL_12;
  }
  if (!v5)
  {
    v6 = v1[2];
    v7 = v1[3];
    v8 = type metadata accessor for PreventSuspensionAssertion();
    swift_allocObject(v8, 32, 7);
    swift_bridgeObjectRetain(v7);
    v3 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, v6, v7);
    goto LABEL_10;
  }
LABEL_13:
  v9 = sub_100003DB8(&qword_10032B0E0);
  v10 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Subject<>.send()(v9, v10);
  v12 = v2;
  swift_retain(v2);
  PassthroughSubject.send(_:)(&v12);
  return swift_release_n(v2);
}

void sub_1001D5288(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  __n128 v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[7];
  __int16 v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int16 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int16 v72;
  _QWORD v73[8];
  __int16 v74;
  char v75[8];
  uint64_t v76;
  char v77[8];
  uint64_t v78;
  __int16 v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int16 v85;

  v2 = v1;
  sub_10000B458(a1, (uint64_t)v73, &qword_100319FD8);
  v4 = v73[2];
  v41 = v73[0];
  v42 = v73[1];
  v43 = v73[3];
  v44 = v73[4];
  v45 = v73[5];
  v46 = v73[6];
  v5 = v74;
  v7 = *(_QWORD *)(v1 + 56);
  v6 = *(_QWORD *)(v1 + 64);
  v9 = *(_QWORD *)(v1 + 72);
  v8 = *(_QWORD *)(v1 + 80);
  v10 = *(_QWORD *)(v1 + 88);
  v47 = v73[7];
  v48 = *(_QWORD *)(v1 + 96);
  v49 = *(_QWORD *)(v1 + 104);
  v50 = *(_QWORD *)(v1 + 112);
  v11 = *(_WORD *)(v1 + 120);
  if (!v6)
  {
    sub_10000B458(a1, (uint64_t)v77, &qword_100319FD8);
    if (!v78)
      return;
    goto LABEL_6;
  }
  sub_10000B458(a1, (uint64_t)v75, &qword_100319FD8);
  if (!v76)
  {
LABEL_6:
    v55 = v7;
    v56 = v6;
    v57 = v9;
    v58 = v8;
    v59 = v10;
    v60 = v48;
    v61 = v49;
    v62 = v50;
    v63 = v11;
    v64 = v41;
    v65 = v42;
    v66 = v4;
    v67 = v43;
    v68 = v44;
    v69 = v45;
    v70 = v46;
    v71 = v47;
    v72 = v5;
    sub_10007F464(v7, v6, v9, v8, v10, v48, v49, v50);
    sub_10007F4D4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007F464);
    sub_10007F3C0(&v55);
LABEL_7:
    if (qword_100315830 != -1)
      swift_once(&qword_100315830, sub_1000D961C);
    v12 = type metadata accessor for Logger(0);
    sub_10000D744(v12, (uint64_t)qword_10033FD48);
    sub_10007F4D4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007F464);
    swift_retain(v2);
    sub_10007F4D4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007F464);
    swift_retain(v2);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = swift_slowAlloc(22, -1);
      v17 = swift_slowAlloc(64, -1);
      v54 = v17;
      *(_DWORD *)v16 = 136446466;
      sub_10000B458(a1, (uint64_t)&v51, &qword_100319FD8);
      sub_10007F4D4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007F464);
      v18 = sub_100003DB8(&qword_100319FD8);
      v20 = String.init<A>(describing:)(&v51, v18, v19);
      v22 = v21;
      v51 = sub_100172BEC(v20, v21, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease(v22);
      sub_10007F4D4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007ED6C);
      sub_10007F4D4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007ED6C);
      *(_WORD *)(v16 + 12) = 2082;
      v23 = *(_QWORD *)(v2 + 64);
      v24 = *(_QWORD *)(v2 + 72);
      v25 = *(_QWORD *)(v2 + 80);
      v26 = *(_QWORD *)(v2 + 88);
      v27 = *(_QWORD *)(v2 + 96);
      v28 = *(_QWORD *)(v2 + 104);
      v29 = *(_QWORD *)(v2 + 112);
      v30 = *(_WORD *)(v2 + 120);
      v51 = *(_QWORD *)(v2 + 56);
      v52[0] = v23;
      v52[1] = v24;
      v52[2] = v25;
      v52[3] = v26;
      v52[4] = v27;
      v52[5] = v28;
      v52[6] = v29;
      v53 = v30;
      sub_10007F464(v51, v23, v24, v25, v26, v27, v28, v29);
      v32 = String.init<A>(describing:)(&v51, v18, v31);
      v34 = v33;
      v51 = sub_100172BEC(v32, v33, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, v52, v16 + 14, v16 + 22);
      swift_release_n(v2);
      swift_bridgeObjectRelease(v34);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Stewie state changed from: %{public}s to: %{public}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v16, -1, -1);

      if (!*(_QWORD *)(v2 + 64))
        goto LABEL_15;
    }
    else
    {
      sub_10007F4D4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007ED6C);
      sub_10007F4D4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007ED6C);

      swift_release_n(v2);
      if (!*(_QWORD *)(v2 + 64))
        goto LABEL_15;
    }
    if (*(_BYTE *)(v2 + 56) == 5)
    {
      v35 = *(_QWORD **)(v2 + 128);
      if (!v35[4])
      {
        v36 = v35[2];
        v37 = v35[3];
        v38 = type metadata accessor for PreventSuspensionAssertion();
        swift_allocObject(v38, 32, 7);
        swift_bridgeObjectRetain(v37);
        v39 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, v36, v37);
        v40 = v35[4];
        v35[4] = v39;
        swift_release(v40);
        if (*(_QWORD *)(v2 + 32))
          goto LABEL_16;
        goto LABEL_18;
      }
    }
LABEL_15:
    if (*(_QWORD *)(v2 + 32))
    {
LABEL_16:
      *(_BYTE *)(v2 + 41) = 1;
      return;
    }
LABEL_18:
    sub_1001D50F4();
    return;
  }
  LOBYTE(v55) = v41;
  v56 = v42;
  LOWORD(v57) = v4 & 0xFF01;
  v58 = v43;
  v59 = v44;
  v60 = v45;
  v61 = v46;
  v62 = v47;
  v63 = v5;
  v77[0] = v7;
  v78 = v6;
  v79 = v9 & 0xFF01;
  v80 = v8;
  v81 = v10;
  v82 = v48;
  v83 = v49;
  v84 = v50;
  v85 = v11;
  if ((sub_10001AC88((uint64_t)v77, (uint64_t)&v55) & 1) == 0)
    goto LABEL_7;
}

uint64_t sub_1001D5794()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __n128 v6;
  __n128 v7;

  v1 = sub_100003DB8((uint64_t *)&unk_10032B0F0);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v2 = swift_retain(v0);
  *(_QWORD *)(v0 + 48) = PassthroughSubject.init()(v2);
  v3 = type metadata accessor for PreventSuspension();
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_OWORD *)(v0 + 88) = 0u;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_WORD *)(v0 + 120) = 0;
  v4 = (_QWORD *)swift_allocObject(v3, 40, 7);
  v4[2] = 0xD00000000000001FLL;
  v4[3] = 0x800000010026F9D0;
  v4[4] = 0;
  *(_QWORD *)(v0 + 128) = v4;
  swift_release(v0);
  *(_QWORD *)(v0 + 32) = 0;
  *(_WORD *)(v0 + 40) = 0;
  v5 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  *(_QWORD *)(v0 + 16) = PassthroughSubject.init()(v6);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  *(_QWORD *)(v0 + 24) = PassthroughSubject.init()(v7);
  return v0;
}

uint64_t sub_1001D588C()
{
  _QWORD *v0;

  swift_release(v0[6]);
  sub_10007ED6C(v0[7], v0[8], v0[9], v0[10], v0[11], v0[12], v0[13], v0[14]);
  return swift_release(v0[16]);
}

uint64_t sub_1001D58CC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[6]);
  sub_10007ED6C(v0[7], v0[8], v0[9], v0[10], v0[11], v0[12], v0[13], v0[14]);
  swift_release(v0[16]);
  return swift_deallocClassInstance(v0, 136, 7);
}

uint64_t type metadata accessor for StewieModel()
{
  return objc_opt_self(_TtC8SOSBuddy11StewieModel);
}

uint64_t sub_1001D594C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtCC8SOSBuddy23ServicePredictionsModel7Request_requestedAt;
  v2 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release(*(_QWORD *)(v0 + OBJC_IVAR____TtCC8SOSBuddy23ServicePredictionsModel7Request_model));
  sub_100007FF0(v0 + OBJC_IVAR____TtCC8SOSBuddy23ServicePredictionsModel7Request_responseReceivedAt, &qword_1003180C8);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001D59C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  _BYTE v17[24];
  _BYTE v18[24];
  _BYTE v19[48];

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = &v17[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100003DB8(&qword_1003284E0);
  v8 = __chkstk_darwin(v6, v7);
  v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __chkstk_darwin(v8, v11);
  v14 = &v17[-v13];
  static Date.now.getter(v12);
  sub_10000B458(v0 + 56, (uint64_t)v19, &qword_100319FB8);
  v15 = v0 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__skimmerPrediction;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__skimmerPrediction, v18, 0, 0);
  sub_10000B234(v15, (uint64_t)v10, &qword_1003284E0);
  sub_1001D5B6C((uint64_t)v5, (uint64_t)v19, (unint64_t)v10, (uint64_t)v14);
  sub_100007FF0((uint64_t)v10, &qword_1003284E0);
  (*(void (**)(_BYTE *, uint64_t))(v2 + 8))(v5, v1);
  sub_10000B234(v15, (uint64_t)v10, &qword_1003284E0);
  sub_1001D8184((uint64_t)v14);
  swift_beginAccess(v15, v17, 33, 0);
  sub_100175998((uint64_t)v14, v15, &qword_1003284E0);
  swift_endAccess(v17);
  sub_1001D8488((uint64_t)v10);
  sub_100007FF0((uint64_t)v14, &qword_1003284E0);
  return sub_100007FF0((uint64_t)v10, &qword_1003284E0);
}

uint64_t sub_1001D5B6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t);
  char v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  char v55;
  void (*v56)(char *, uint64_t (*)(uint64_t));
  uint64_t (*v57)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t));
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  os_log_t v63;
  uint64_t v64;
  uint64_t v65;
  objc_class **v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t (*v77)(uint64_t);
  unint64_t v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t (*v83)(uint64_t);
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  double *v92;
  uint64_t v93;
  double *v94;
  double *v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  char *v104;
  void (*v105)(uint64_t, char *, uint64_t (*)(uint64_t));
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  double v110;
  char *v111;
  char v112;
  uint64_t v113;
  uint64_t v114;
  double *v115;
  double v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t (*v125)(uint64_t);
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  NSObject *v139;
  os_log_type_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t (*v144)(uint64_t);
  uint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  objc_class *v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  void (*v156)(char *, uint64_t, uint64_t (*)(uint64_t));
  objc_class *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char *v164;
  os_log_t v165;
  uint64_t v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t (*v173)(uint64_t);
  uint64_t v174;
  uint64_t v175;
  double v176;
  uint64_t v177;
  char v178[24];
  _QWORD v179[5];
  char v180;

  v171 = a3;
  v175 = a1;
  v168 = type metadata accessor for TargetTracks.TimePoint(0);
  v166 = *(_QWORD *)(v168 - 8);
  v8 = __chkstk_darwin(v168, v7);
  v160 = (uint64_t)&v154 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8, v10);
  v164 = (char *)&v154 - v12;
  v14 = __chkstk_darwin(v11, v13);
  v159 = (uint64_t)&v154 - v15;
  __chkstk_darwin(v14, v16);
  v169 = (uint64_t)&v154 - v17;
  v18 = sub_100003DB8(&qword_1003284E0);
  __chkstk_darwin(v18, v19);
  v170 = (uint64_t)&v154 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for ServicePredictionsModel.SkimmerPrediction(0);
  v22 = *(_QWORD *)(v21 - 8);
  __chkstk_darwin(v21, v23);
  v165 = (os_log_t)((char *)&v154 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = type metadata accessor for Date(0);
  v172 = *(_QWORD *)(v25 - 8);
  v173 = (uint64_t (*)(uint64_t))v25;
  v27 = __chkstk_darwin(v25, v26);
  v167 = (char *)&v154 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = __chkstk_darwin(v27, v29);
  v163 = (char *)&v154 - v31;
  __chkstk_darwin(v30, v32);
  v34 = (char *)&v154 - v33;
  v35 = sub_100003DB8(&qword_100322C80);
  __chkstk_darwin(v35, v36);
  v38 = (char *)&v154 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for TargetTracks(0);
  v40 = *(_QWORD *)(v39 - 8);
  v42 = __chkstk_darwin(v39, v41);
  v44 = (char *)&v154 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42, v45);
  v174 = (uint64_t)&v154 - v46;
  sub_10000B458(a2, (uint64_t)v179, &qword_100319FB8);
  if ((v180 & 1) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56))(a4, 1, 1, v21);
  v162 = v22;
  v161 = v21;
  v158 = a4;
  if (*(double *)&v179[2] > 0.436332313)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v162 + 56))(v158, 1, 1, v161);
  v157 = (objc_class *)v179[0];
  v48 = v4 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__targetTracks;
  swift_beginAccess(v48, v178, 0, 0);
  sub_10000B234(v48, (uint64_t)v38, &qword_100322C80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39) == 1)
  {
    sub_100007FF0((uint64_t)v38, &qword_100322C80);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v162 + 56))(v158, 1, 1, v161);
  }
  v49 = v174;
  sub_1000E8D6C((uint64_t)v38, v174, type metadata accessor for TargetTracks);
  sub_1000052EC((unint64_t *)&qword_10031FA60, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
  v50 = v175;
  v51 = v173;
  v52 = dispatch thunk of static Comparable.< infix(_:_:)(v175, v49);
  v53 = v172;
  v156 = *(void (**)(char *, uint64_t, uint64_t (*)(uint64_t)))(v172 + 16);
  v156(v34, v50, v51);
  sub_1000E1F30(v49, (uint64_t)v44, type metadata accessor for TargetTracks);
  v54 = (uint64_t (*)(uint64_t))v161;
  if ((v52 & 1) != 0)
  {
    sub_10000AFFC((uint64_t)v44, type metadata accessor for TargetTracks);
    (*(void (**)(char *, uint64_t (*)(uint64_t)))(v53 + 8))(v34, v51);
LABEL_10:
    sub_10000AFFC(v49, type metadata accessor for TargetTracks);
    v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(v162 + 56);
    goto LABEL_11;
  }
  v55 = dispatch thunk of static Comparable.< infix(_:_:)(&v44[*(int *)(v39 + 20)], v34);
  sub_10000AFFC((uint64_t)v44, type metadata accessor for TargetTracks);
  v56 = *(void (**)(char *, uint64_t (*)(uint64_t)))(v53 + 8);
  v56(v34, v51);
  if ((v55 & 1) != 0)
    goto LABEL_10;
  v60 = v170;
  sub_10000B234(v171, v170, &qword_1003284E0);
  v61 = v162;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t (*)(uint64_t)))(v162 + 48))(v60, 1, v54) == 1)
  {
    sub_100007FF0(v60, &qword_1003284E0);
  }
  else
  {
    v62 = v60;
    v63 = v165;
    sub_1000E8D6C(v62, (uint64_t)v165, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
    if ((dispatch thunk of static Comparable.< infix(_:_:)(v63, v175) & 1) == 0)
    {
      if (v157 == *(objc_class **)((char *)&v63->isa + *((int *)v54 + 5))
        || (v66 = (Class *)((char *)&v63->isa + *((int *)v54 + 6)), ((_BYTE)v66[3] & 1) == 0) && v157 == *v66)
      {
        sub_10000AFFC(v49, type metadata accessor for TargetTracks);
        v64 = (uint64_t)v63;
        v65 = v158;
        sub_1000E8D6C(v64, v158, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
        v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(v61 + 56);
LABEL_18:
        v58 = v65;
        v59 = 0;
        return v57(v58, v59, 1, v54);
      }
    }
    sub_10000AFFC((uint64_t)v63, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
  }
  v67 = *(int *)(v39 + 24);
  v68 = *(_QWORD *)(v49 + v67);
  v69 = *(_QWORD *)(v68 + 16);
  if (!v69)
    goto LABEL_27;
  v171 = (*(unsigned __int8 *)(v166 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v166 + 80);
  v70 = v68 + v171;
  v71 = *(_QWORD *)(v166 + 72);
  swift_bridgeObjectRetain(v68);
  v72 = 0;
  while ((static Date.> infix(_:_:)(v70, v175) & 1) == 0)
  {
    ++v72;
    v70 += v71;
    if (v69 == v72)
    {
      swift_bridgeObjectRelease(v68);
      v49 = v174;
LABEL_27:
      sub_10000AFFC(v49, type metadata accessor for TargetTracks);
      v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(v61 + 56);
LABEL_11:
      v58 = v158;
      v59 = 1;
      return v57(v58, v59, 1, v54);
    }
  }
  swift_bridgeObjectRelease(v68);
  if (qword_100315830 != -1)
    goto LABEL_88;
  while (1)
  {
    v73 = type metadata accessor for Logger(0);
    v74 = sub_10000D744(v73, (uint64_t)qword_10033FD48);
    v75 = (uint64_t)v163;
    v76 = ((uint64_t (*)(char *, uint64_t, uint64_t (*)(uint64_t)))v156)(v163, v175, v51);
    v166 = v74;
    v77 = v51;
    v78 = Logger.logObject.getter(v76);
    v79 = static os_log_type_t.default.getter();
    v80 = v79;
    if (os_log_type_enabled((os_log_t)v78, v79))
    {
      v51 = (uint64_t (*)(uint64_t))v75;
      v75 = swift_slowAlloc(22, -1);
      v81 = swift_slowAlloc(32, -1);
      v170 = v81;
      *(_DWORD *)v75 = 134349314;
      v176 = *(double *)&v157;
      v177 = v81;
      v165 = (os_log_t)v78;
      v78 = (unint64_t)&v177;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, &v177, v75 + 4, v75 + 12);
      *(_WORD *)(v75 + 12) = 2082;
      v154 = v75 + 14;
      v82 = sub_1000052EC(&qword_100317D70, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
      v155 = v80;
      v83 = v77;
      v84 = dispatch thunk of CustomStringConvertible.description.getter(v77, v82);
      v86 = v85;
      v176 = COERCE_DOUBLE(sub_100172BEC(v84, v85, &v177));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, &v177, v154, v75 + 22);
      swift_bridgeObjectRelease(v86);
      v56((char *)v51, v83);
      v80 = (uint64_t)v165;
      _os_log_impl((void *)&_mh_execute_header, v165, (os_log_type_t)v155, "Skimmer prediction for target: %{public}lld at: %{public}s", (uint8_t *)v75, 0x16u);
      v87 = v170;
      swift_arrayDestroy(v170, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v87, -1, -1);
      swift_slowDealloc(v75, -1, -1);

    }
    else
    {
      v56((char *)v75, v51);

    }
    v89 = *(_QWORD *)(v174 + v67);
    v90 = *(_QWORD *)(v89 + 16);
    if (v90 < v72)
    {
      __break(1u);
LABEL_90:
      __break(1u);
LABEL_91:
      swift_once(&qword_100315968, sub_1001D8D9C);
      goto LABEL_59;
    }
    if (v90 != v72)
    {
      if (v90 <= v72)
        v80 = v72;
      else
        v80 = *(_QWORD *)(v89 + 16);
      *(double *)&v51 = COERCE_DOUBLE(type metadata accessor for TargetTracks.TimePoint);
      v78 = v72;
      v75 = v169;
      while (v78 != v80)
      {
        v91 = *(_QWORD *)(v174 + v67);
        if (v78 >= *(_QWORD *)(v91 + 16))
          goto LABEL_85;
        sub_1000E1F30(v91 + v171 + v78 * v71, v75, type metadata accessor for TargetTracks.TimePoint);
        v92 = *(double **)(v75 + *(int *)(v168 + 20));
        v93 = *((_QWORD *)v92 + 2);
        if (!v93)
          goto LABEL_53;
        if (*((objc_class **)v92 + 4) != v157)
        {
          if (v93 == 1)
          {
LABEL_53:
            v88 = sub_10000AFFC(v169, type metadata accessor for TargetTracks.TimePoint);
            goto LABEL_54;
          }
          v95 = v92 + 9;
          v96 = 1;
          while (1)
          {
            v97 = v96 + 1;
            if (__OFADD__(v96, 1))
              break;
            if (*((objc_class **)v95 - 2) == v157)
            {
              v94 = v95 - 1;
              goto LABEL_50;
            }
            v95 += 3;
            ++v96;
            if (v97 == v93)
              goto LABEL_53;
          }
          __break(1u);
          break;
        }
        v94 = v92 + 5;
        v95 = v92 + 6;
LABEL_50:
        v98 = *v95;
        v99 = *v95 * 57.2957795;
        if (v99 > 25.0)
        {
          v136 = *(_QWORD *)v94;
          v137 = v159;
          v138 = sub_1000E1F30(v169, v159, type metadata accessor for TargetTracks.TimePoint);
          v139 = Logger.logObject.getter(v138);
          v140 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v139, v140))
          {
            v141 = swift_slowAlloc(22, -1);
            v142 = swift_slowAlloc(32, -1);
            v177 = v142;
            *(_DWORD *)v141 = 136446466;
            v175 = v136;
            v143 = sub_1000052EC(&qword_100317D70, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
            v144 = v173;
            v145 = dispatch thunk of CustomStringConvertible.description.getter(v173, v143);
            v147 = v146;
            v176 = COERCE_DOUBLE(sub_100172BEC(v145, v146, &v177));
            v136 = v175;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, &v177, v141 + 4, v141 + 12);
            swift_bridgeObjectRelease(v147);
            sub_10000AFFC(v137, type metadata accessor for TargetTracks.TimePoint);
            *(_WORD *)(v141 + 12) = 2050;
            v176 = v99;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, &v177, v141 + 14, v141 + 22);
            _os_log_impl((void *)&_mh_execute_header, v139, v140, "Current target is rising at: %{public}s to: %{public}f", (uint8_t *)v141, 0x16u);
            swift_arrayDestroy(v142, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v142, -1, -1);
            swift_slowDealloc(v141, -1, -1);

            sub_10000AFFC(v174, type metadata accessor for TargetTracks);
            v65 = v158;
            v148 = v162;
          }
          else
          {

            sub_10000AFFC(v137, type metadata accessor for TargetTracks.TimePoint);
            sub_10000AFFC(v174, type metadata accessor for TargetTracks);
            v65 = v158;
            v148 = v162;
            v144 = v173;
          }
          v149 = v172;
          v150 = v167;
          v151 = v169;
          v156(v167, v169, v144);
          sub_10000AFFC(v151, type metadata accessor for TargetTracks.TimePoint);
          (*(void (**)(uint64_t, char *, uint64_t (*)(uint64_t)))(v149 + 32))(v65, v150, v144);
          v152 = v157;
          *(double *)(v65 + *((int *)v54 + 5)) = *(double *)&v157;
          v153 = v65 + *((int *)v54 + 6);
          *(_QWORD *)v153 = v152;
          *(_QWORD *)(v153 + 8) = v136;
          *(double *)(v153 + 16) = v98;
          *(_BYTE *)(v153 + 24) = 0;
          v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(v148 + 56);
          goto LABEL_18;
        }
        ++v78;
        v88 = sub_10000AFFC(v169, type metadata accessor for TargetTracks.TimePoint);
        if (v78 == v90)
          goto LABEL_54;
      }
      __break(1u);
LABEL_85:
      __break(1u);
      goto LABEL_86;
    }
LABEL_54:
    v170 = v67;
    v90 = *(_QWORD *)(*(_QWORD *)(v174 + v67) + 16);
    if (v90 < v72)
      goto LABEL_90;
    v54 = (uint64_t (*)(uint64_t))&off_100315000;
    v78 = (unint64_t)&unk_100326000;
    v100 = (uint64_t)v164;
    if (v90 == v72)
      break;
    if (v90 <= v72)
      v67 = v72;
    else
      v67 = *(_QWORD *)(*(_QWORD *)(v174 + v67) + 16);
    while (v72 != v67)
    {
      v108 = *(_QWORD *)(v174 + v170);
      if (v72 >= *(_QWORD *)(v108 + 16))
        goto LABEL_87;
      sub_1000E1F30(v108 + v171 + v72 * v71, v100, type metadata accessor for TargetTracks.TimePoint);
      v51 = v54;
      if (*((_QWORD *)v54 + 301) != -1)
        swift_once(&qword_100315968, sub_1001D8D9C);
      v109 = v78;
      v110 = *(double *)(v78 + 2432);
      v111 = v167;
      static Date.+ infix(_:_:)(v175, v110);
      v112 = static Date.> infix(_:_:)(v100, v111);
      v56(v111, v173);
      if ((v112 & 1) != 0)
      {
        v88 = sub_10000AFFC(v100, type metadata accessor for TargetTracks.TimePoint);
        v78 = (unint64_t)v109;
        v54 = v51;
        goto LABEL_56;
      }
      v113 = *(_QWORD *)(v100 + *(int *)(v168 + 20));
      v114 = *(_QWORD *)(v113 + 16);
      v78 = (unint64_t)v109;
      v54 = v51;
      if (v114)
      {
        v115 = (double *)(v113 + 48);
        while (1)
        {
          v51 = *((uint64_t (**)(uint64_t))v115 - 2);
          if ((char *)v51 != (char *)v157)
          {
            v116 = *v115;
            if (*v115 > 0.436332313)
              break;
          }
          v115 += 3;
          if (!--v114)
            goto LABEL_63;
        }
        v117 = *((_QWORD *)v115 - 1);
        v118 = v160;
        v119 = sub_1000E1F30(v100, v160, type metadata accessor for TargetTracks.TimePoint);
        v120 = Logger.logObject.getter(v119);
        v121 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v120, v121))
        {
          v122 = swift_slowAlloc(32, -1);
          v123 = swift_slowAlloc(32, -1);
          v177 = v123;
          *(_DWORD *)v122 = 134349570;
          v176 = v116 * 57.2957795;
          v175 = v117;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, &v177, v122 + 4, v122 + 12);
          *(_WORD *)(v122 + 12) = 2050;
          v176 = *(double *)&v51;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, &v177, v122 + 14, v122 + 22);
          *(_WORD *)(v122 + 22) = 2082;
          v124 = sub_1000052EC(&qword_100317D70, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
          v125 = v173;
          v126 = dispatch thunk of CustomStringConvertible.description.getter(v173, v124);
          v128 = v127;
          v176 = COERCE_DOUBLE(sub_100172BEC(v126, v127, &v177));
          v117 = v175;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v176, &v177, v122 + 24, v122 + 32);
          swift_bridgeObjectRelease(v128);
          sub_10000AFFC(v118, type metadata accessor for TargetTracks.TimePoint);
          _os_log_impl((void *)&_mh_execute_header, v120, v121, "Higher pass of: %{public}f for target: %{public}lld is available at: %{public}s", (uint8_t *)v122, 0x20u);
          swift_arrayDestroy(v123, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v123, -1, -1);
          swift_slowDealloc(v122, -1, -1);

          sub_10000AFFC(v174, type metadata accessor for TargetTracks);
          v129 = v158;
          v130 = v162;
        }
        else
        {

          sub_10000AFFC(v118, type metadata accessor for TargetTracks.TimePoint);
          sub_10000AFFC(v174, type metadata accessor for TargetTracks);
          v129 = v158;
          v130 = v162;
          v125 = v173;
        }
        v131 = v172;
        v132 = v167;
        v133 = (uint64_t)v164;
        v156(v167, (uint64_t)v164, v125);
        sub_10000AFFC(v133, type metadata accessor for TargetTracks.TimePoint);
        (*(void (**)(uint64_t, char *, uint64_t (*)(uint64_t)))(v131 + 32))(v129, v132, v125);
        v134 = v161;
        *(double *)(v129 + *(int *)(v161 + 20)) = *(double *)&v157;
        v135 = v129 + *(int *)(v134 + 24);
        *(double *)v135 = *(double *)&v51;
        *(_QWORD *)(v135 + 8) = v117;
        *(double *)(v135 + 16) = v116;
        *(_BYTE *)(v135 + 24) = 0;
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v130 + 56))(v129, 0, 1, v134);
      }
LABEL_63:
      ++v72;
      v88 = sub_10000AFFC(v100, type metadata accessor for TargetTracks.TimePoint);
      if (v72 == v90)
        goto LABEL_56;
    }
LABEL_86:
    __break(1u);
LABEL_87:
    __break(1u);
LABEL_88:
    swift_once(&qword_100315830, sub_1000D961C);
  }
LABEL_56:
  v101 = Logger.logObject.getter(v88);
  v102 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v101, v102))
  {
    v103 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v103 = 0;
    _os_log_impl((void *)&_mh_execute_header, v101, v102, "No better service suggestions found", v103, 2u);
    swift_slowDealloc(v103, -1, -1);
  }

  v90 = v161;
  v75 = v172;
  v80 = v174;
  if (*((_QWORD *)v54 + 301) != -1)
    goto LABEL_91;
LABEL_59:
  v104 = v167;
  static Date.+ infix(_:_:)(v175, *(double *)(v78 + 2432) * 0.5);
  sub_10000AFFC(v80, type metadata accessor for TargetTracks);
  v105 = *(void (**)(uint64_t, char *, uint64_t (*)(uint64_t)))(v75 + 32);
  v106 = v158;
  v105(v158, v104, v173);
  *(double *)(v106 + *(int *)(v90 + 20)) = *(double *)&v157;
  v107 = v106 + *(int *)(v90 + 24);
  *(_QWORD *)v107 = 0;
  *(_QWORD *)(v107 + 8) = 0;
  *(_QWORD *)(v107 + 16) = 0;
  *(_BYTE *)(v107 + 24) = 1;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, unint64_t))(v162 + 56))(v106, 0, 1, v90);
}

uint64_t sub_1001D6CD8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t);
  uint64_t v54;
  char *v55;
  char v56[8];
  char v57[24];

  v1 = v0;
  v2 = sub_100003DB8(&qword_1003180C8);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v9, v12);
  v15 = (char *)&v54 - v14;
  v17 = __chkstk_darwin(v13, v16);
  v19 = (char *)&v54 - v18;
  v21 = __chkstk_darwin(v17, v20);
  v23 = (char *)&v54 - v22;
  v25 = __chkstk_darwin(v21, v24);
  v27 = (char *)&v54 - v26;
  result = __chkstk_darwin(v25, v28);
  v31 = (char *)&v54 - v30;
  if ((*(_BYTE *)(v1 + 96) & 1) == 0 && *(double *)(v1 + 72) <= 0.436332313)
  {
    v32 = *(_QWORD *)(v1 + 104);
    if (!v32)
    {
LABEL_8:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
      goto LABEL_9;
    }
    v55 = v11;
    v33 = v32 + OBJC_IVAR____TtCC8SOSBuddy23ServicePredictionsModel7Request_responseReceivedAt;
    swift_beginAccess(v32 + OBJC_IVAR____TtCC8SOSBuddy23ServicePredictionsModel7Request_responseReceivedAt, v57, 0, 0);
    v34 = v33;
    v11 = v55;
    sub_10000B234(v34, (uint64_t)v5, &qword_1003180C8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
LABEL_9:
      result = sub_100007FF0((uint64_t)v5, &qword_1003180C8);
      goto LABEL_10;
    }
    v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v31, v5, v6);
    v36 = static DispatchTime.now()(v35);
    v37 = DispatchTime.uptimeNanoseconds.getter(v36);
    v38 = DispatchTime.uptimeNanoseconds.getter(v37);
    if (v38 >= v37)
    {
      v5 = 0;
    }
    else
    {
      v11 = (char *)DispatchTime.uptimeNanoseconds.getter(v38);
      v39 = DispatchTime.uptimeNanoseconds.getter(v11);
      v5 = &v11[-v39];
      if ((unint64_t)v11 < v39)
      {
        __break(1u);
        goto LABEL_8;
      }
    }
    v53 = *(void (**)(char *, uint64_t))(v7 + 8);
    v53(v27, v6);
    result = ((uint64_t (*)(char *, uint64_t))v53)(v31, v6);
    v11 = v55;
    if ((unint64_t)v5 > 0x8BEE6439FFLL)
    {
LABEL_10:
      v40 = *(_QWORD *)(v1 + 104);
      if (!v40)
      {
LABEL_16:
        static DispatchTime.now()(result);
        v49 = type metadata accessor for ServicePredictionsModel.Request(0);
        v50 = swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v50 + OBJC_IVAR____TtCC8SOSBuddy23ServicePredictionsModel7Request_responseReceivedAt, 1, 1, v6);
        (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v50 + OBJC_IVAR____TtCC8SOSBuddy23ServicePredictionsModel7Request_requestedAt, v11, v6);
        *(_QWORD *)(v50 + OBJC_IVAR____TtCC8SOSBuddy23ServicePredictionsModel7Request_model) = v1;
        v51 = *(_QWORD *)(v1 + 104);
        *(_QWORD *)(v1 + 104) = v50;
        swift_retain(v1);
        swift_retain(v50);
        swift_release(v51);
        v52 = swift_weakInit(v56);
        PassthroughSubject.send(_:)(v52);
        swift_release(v50);
        return sub_1001DE570((uint64_t)v56);
      }
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v19, v40 + OBJC_IVAR____TtCC8SOSBuddy23ServicePredictionsModel7Request_requestedAt, v6);
      v41 = (*(uint64_t (**)(char *, char *, uint64_t))(v7 + 32))(v23, v19, v6);
      v42 = static DispatchTime.now()(v41);
      v43 = DispatchTime.uptimeNanoseconds.getter(v42);
      v44 = DispatchTime.uptimeNanoseconds.getter(v43);
      if (v44 < v43)
      {
        v45 = DispatchTime.uptimeNanoseconds.getter(v44);
        v46 = DispatchTime.uptimeNanoseconds.getter(v45);
        v47 = v45 - v46;
        if (v45 >= v46)
          goto LABEL_15;
        __break(1u);
      }
      v47 = 0;
LABEL_15:
      v48 = *(void (**)(char *, uint64_t))(v7 + 8);
      v48(v15, v6);
      result = ((uint64_t (*)(char *, uint64_t))v48)(v23, v6);
      if (v47 <= 0x8BEE6439FFLL)
        return result;
      goto LABEL_16;
    }
  }
  return result;
}

uint64_t sub_1001D70A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t *v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[24];

  v3 = type metadata accessor for TargetTracks(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = &v25[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_100003DB8(&qword_100322C80);
  __chkstk_darwin(v8, v9);
  v11 = &v25[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = sub_100003DB8(&qword_100328500);
  __chkstk_darwin(v12, v13);
  v15 = &v25[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = v1 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__targetTracks;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__targetTracks, v25, 0, 0);
  v17 = (uint64_t)&v15[*(int *)(v12 + 48)];
  sub_10000B234(v16, (uint64_t)v15, &qword_100322C80);
  sub_10000B234(a1, v17, &qword_100322C80);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v18((uint64_t)v15, 1, v3) == 1)
  {
    if (v18(v17, 1, v3) == 1)
      return sub_100007FF0((uint64_t)v15, &qword_100322C80);
    v20 = &qword_100328500;
  }
  else
  {
    sub_10000B234((uint64_t)v15, (uint64_t)v11, &qword_100322C80);
    if (v18(v17, 1, v3) == 1)
    {
      v20 = &qword_100328500;
    }
    else
    {
      sub_1000E8D6C(v17, (uint64_t)v7, type metadata accessor for TargetTracks);
      if ((static Date.== infix(_:_:)(v11, v7) & 1) != 0
        && (static Date.== infix(_:_:)(&v11[*(int *)(v3 + 20)], &v7[*(int *)(v3 + 20)]) & 1) != 0)
      {
        v21 = sub_1001DCEB4(*(_QWORD *)&v11[*(int *)(v3 + 24)], *(_QWORD *)&v7[*(int *)(v3 + 24)]);
        sub_10000AFFC((uint64_t)v7, type metadata accessor for TargetTracks);
        sub_10000AFFC((uint64_t)v11, type metadata accessor for TargetTracks);
        result = sub_100007FF0((uint64_t)v15, &qword_100322C80);
        if ((v21 & 1) != 0)
          return result;
        if (*(_QWORD *)(v1 + 32))
          goto LABEL_15;
LABEL_11:
        v22 = sub_100003DB8(&qword_10032B0E0);
        v23 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
        return Subject<>.send()(v22, v23);
      }
      sub_10000AFFC((uint64_t)v7, type metadata accessor for TargetTracks);
      v20 = &qword_100322C80;
    }
    sub_10000AFFC((uint64_t)v11, type metadata accessor for TargetTracks);
  }
  result = sub_100007FF0((uint64_t)v15, v20);
  if (!*(_QWORD *)(v1 + 32))
    goto LABEL_11;
LABEL_15:
  *(_BYTE *)(v1 + 40) = 1;
  return result;
}

uint64_t sub_1001D737C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v34[24];

  v2 = v1;
  v4 = type metadata accessor for TargetTracks(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = &v34[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = sub_100003DB8(&qword_100322C80);
  __chkstk_darwin(v9, v10);
  v12 = &v34[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = sub_100003DB8(&qword_100328500);
  __chkstk_darwin(v13, v14);
  v16 = &v34[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v17 = v2 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__targetTracks;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__targetTracks, v34, 0, 0);
  v18 = (uint64_t)&v16[*(int *)(v13 + 48)];
  sub_10000B234(v17, (uint64_t)v16, &qword_100322C80);
  sub_10000B234(a1, v18, &qword_100322C80);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v19((uint64_t)v16, 1, v4) == 1)
  {
    if (v19(v18, 1, v4) == 1)
      return sub_100007FF0((uint64_t)v16, &qword_100322C80);
    v21 = &qword_100328500;
    goto LABEL_13;
  }
  sub_10000B234((uint64_t)v16, (uint64_t)v12, &qword_100322C80);
  if (v19(v18, 1, v4) == 1)
  {
    v21 = &qword_100328500;
LABEL_12:
    sub_10000AFFC((uint64_t)v12, type metadata accessor for TargetTracks);
LABEL_13:
    sub_100007FF0((uint64_t)v16, v21);
    goto LABEL_14;
  }
  sub_1000E8D6C(v18, (uint64_t)v8, type metadata accessor for TargetTracks);
  if ((static Date.== infix(_:_:)(v12, v8) & 1) == 0
    || (static Date.== infix(_:_:)(&v12[*(int *)(v4 + 20)], &v8[*(int *)(v4 + 20)]) & 1) == 0)
  {
    sub_10000AFFC((uint64_t)v8, type metadata accessor for TargetTracks);
    v21 = &qword_100322C80;
    goto LABEL_12;
  }
  v22 = sub_1001DCEB4(*(_QWORD *)&v12[*(int *)(v4 + 24)], *(_QWORD *)&v8[*(int *)(v4 + 24)]);
  sub_10000AFFC((uint64_t)v8, type metadata accessor for TargetTracks);
  sub_10000AFFC((uint64_t)v12, type metadata accessor for TargetTracks);
  result = sub_100007FF0((uint64_t)v16, &qword_100322C80);
  if ((v22 & 1) != 0)
    return result;
LABEL_14:
  if (v19(a1, 1, v4) == 1)
  {
    if (qword_100315830 != -1)
      swift_once(&qword_100315830, sub_1000D961C);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10000D744(v23, (uint64_t)qword_10033FD48);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v25, v26))
      goto LABEL_24;
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    v28 = "targetTracks changed from: nil to:";
  }
  else
  {
    if (qword_100315830 != -1)
      swift_once(&qword_100315830, sub_1000D961C);
    v29 = type metadata accessor for Logger(0);
    v30 = sub_10000D744(v29, (uint64_t)qword_10033FD48);
    v25 = Logger.logObject.getter(v30);
    v26 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v25, v26))
      goto LABEL_24;
    v27 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v27 = 0;
    v28 = "targetTracks changed to:";
  }
  _os_log_impl((void *)&_mh_execute_header, v25, v26, v28, v27, 2u);
  swift_slowDealloc(v27, -1, -1);
LABEL_24:

  sub_1001D77A0();
  result = sub_1001D59C4();
  if (*(_QWORD *)(v2 + 32))
  {
    *(_BYTE *)(v2 + 41) = 1;
  }
  else
  {
    v31 = sub_100003DB8(&qword_10032B0E0);
    v32 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    return Subject<>.send()(v31, v32);
  }
  return result;
}

void sub_1001D77A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  unsigned __int32 v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __n128 v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  double *v70;
  uint64_t v71;
  double v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  double v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  __n128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  uint64_t v105;
  char v106[32];

  v1 = type metadata accessor for TargetTracks.TimePoint(0);
  v2 = *(_QWORD *)(v1 - 8);
  v98 = v1;
  v99 = v2;
  v4 = __chkstk_darwin(v1, v3);
  v92 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v89 - v7;
  v9 = sub_100003DB8(&qword_100322C80);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v89 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TargetTracks(0);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v16, v19);
  v22 = (char *)&v89 - v21;
  __chkstk_darwin(v20, v23);
  v25 = (char *)&v89 - v24;
  v26 = v0 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__targetTracks;
  swift_beginAccess(v26, v106, 0, 0);
  sub_10000B234(v26, (uint64_t)v12, &qword_100322C80);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_100007FF0((uint64_t)v12, &qword_100322C80);
    if (qword_100315830 == -1)
    {
LABEL_3:
      v27 = type metadata accessor for Logger(0);
      v28 = sub_10000D744(v27, (uint64_t)qword_10033FD48);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "nil", v31, 2u);
        swift_slowDealloc(v31, -1, -1);
      }

      return;
    }
LABEL_42:
    swift_once(&qword_100315830, sub_1000D961C);
    goto LABEL_3;
  }
  sub_1000E8D6C((uint64_t)v12, (uint64_t)v25, type metadata accessor for TargetTracks);
  v32 = (uint64_t)v25;
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v33 = type metadata accessor for Logger(0);
  v34 = sub_10000D744(v33, (uint64_t)qword_10033FD48);
  sub_1000E1F30((uint64_t)v25, (uint64_t)v22, type metadata accessor for TargetTracks);
  v35 = sub_1000E1F30((uint64_t)v25, (uint64_t)v18, type metadata accessor for TargetTracks);
  v36 = Logger.logObject.getter(v35);
  v37 = static os_log_type_t.default.getter();
  v38 = v37;
  v39 = os_log_type_enabled(v36, v37);
  v102 = v34;
  v96 = v8;
  if (v39)
  {
    v40 = swift_slowAlloc(22, -1);
    *(_QWORD *)&v103 = swift_slowAlloc(64, -1);
    v105 = v103;
    *(_DWORD *)v40 = 136446466;
    v100 = v40 + 4;
    v41 = type metadata accessor for Date(0);
    v42 = sub_1000052EC(&qword_100317D70, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v101.n128_u32[0] = v38;
    v43 = dispatch thunk of CustomStringConvertible.description.getter(v41, v42);
    v45 = v44;
    v104 = sub_100172BEC(v43, v44, &v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v100, v40 + 12);
    swift_bridgeObjectRelease(v45);
    sub_10000AFFC((uint64_t)v22, type metadata accessor for TargetTracks);
    *(_WORD *)(v40 + 12) = 2082;
    v46 = dispatch thunk of CustomStringConvertible.description.getter(v41, v42);
    v48 = v47;
    v104 = sub_100172BEC(v46, v47, &v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v40 + 14, v40 + 22);
    swift_bridgeObjectRelease(v48);
    sub_10000AFFC((uint64_t)v18, type metadata accessor for TargetTracks);
    _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v101.n128_u8[0], "  validFrom: %{public}s, expiresAt: %{public}s, tracks: [", (uint8_t *)v40, 0x16u);
    v49 = v103;
    swift_arrayDestroy(v103, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1, -1);
    v50 = v40;
    v8 = v96;
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    sub_10000AFFC((uint64_t)v22, type metadata accessor for TargetTracks);
    sub_10000AFFC((uint64_t)v18, type metadata accessor for TargetTracks);
  }

  v51 = *(_QWORD *)(v32 + *(int *)(v13 + 24));
  v52 = (uint64_t)v92;
  v93 = *(_QWORD *)(v51 + 16);
  if (v93)
  {
    v90 = v32;
    v94 = v51 + ((*(unsigned __int8 *)(v99 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v99 + 80));
    v95 = v51;
    v53 = swift_bridgeObjectRetain(v51);
    v54 = 0;
    v53.n128_u64[0] = 136446210;
    v101 = v53;
    v91 = (char *)&type metadata for Any + 8;
    v103 = xmmword_10024FB80;
    while (v54 < *(_QWORD *)(v95 + 16))
    {
      v56 = *(_QWORD *)(v99 + 72);
      v100 = v54;
      sub_1000E1F30(v94 + v56 * v54, (uint64_t)v8, type metadata accessor for TargetTracks.TimePoint);
      v57 = sub_1000E1F30((uint64_t)v8, v52, type metadata accessor for TargetTracks.TimePoint);
      v58 = Logger.logObject.getter(v57);
      v59 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v58, v59))
      {
        v60 = swift_slowAlloc(12, -1);
        v61 = swift_slowAlloc(32, -1);
        v105 = v61;
        *(_DWORD *)v60 = v101.n128_u32[0];
        v62 = type metadata accessor for Date(0);
        v63 = sub_1000052EC(&qword_100317D70, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
        v64 = dispatch thunk of CustomStringConvertible.description.getter(v62, v63);
        v66 = v65;
        *(_QWORD *)(v60 + 4) = sub_100172BEC(v64, v65, &v105);
        swift_bridgeObjectRelease(v66);
        sub_10000AFFC(v52, type metadata accessor for TargetTracks.TimePoint);
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "    at: %{public}s, targets:", (uint8_t *)v60, 0xCu);
        swift_arrayDestroy(v61, 1, v91);
        swift_slowDealloc(v61, -1, -1);
        swift_slowDealloc(v60, -1, -1);
      }
      else
      {
        sub_10000AFFC(v52, type metadata accessor for TargetTracks.TimePoint);
      }

      v67 = *(_QWORD *)&v8[*(int *)(v98 + 20)];
      v68 = *(_QWORD *)(v67 + 16);
      if (v68)
      {
        swift_bridgeObjectRetain(v67);
        v97 = v69;
        v70 = (double *)(v69 + 48);
        while (1)
        {
          v71 = *((_QWORD *)v70 - 2);
          v73 = *(v70 - 1);
          v72 = *v70;
          v74 = sub_100003DB8(&qword_100317970);
          v75 = swift_allocObject(v74, 152, 7);
          *(_OWORD *)(v75 + 16) = v103;
          *(_QWORD *)(v75 + 56) = &type metadata for Int64;
          *(_QWORD *)(v75 + 64) = &protocol witness table for Int64;
          *(_QWORD *)(v75 + 32) = v71;
          v76 = v73 * 57.2957795;
          if ((~COERCE__INT64(v73 * 57.2957795) & 0x7FF0000000000000) == 0)
            break;
          if (v76 <= -9.22337204e18)
            goto LABEL_36;
          if (v76 >= 9.22337204e18)
            goto LABEL_37;
          *(_QWORD *)(v75 + 96) = &type metadata for Int;
          *(_QWORD *)(v75 + 104) = &protocol witness table for Int;
          *(_QWORD *)(v75 + 72) = (uint64_t)v76;
          v77 = v72 * 57.2957795;
          if ((~COERCE__INT64(v72 * 57.2957795) & 0x7FF0000000000000) == 0)
            goto LABEL_38;
          if (v77 <= -9.22337204e18)
            goto LABEL_39;
          if (v77 >= 9.22337204e18)
            goto LABEL_40;
          *(_QWORD *)(v75 + 136) = &type metadata for Int;
          *(_QWORD *)(v75 + 144) = &protocol witness table for Int;
          *(_QWORD *)(v75 + 112) = (uint64_t)v77;
          v78 = String.init(format:_:)(0xD000000000000018, 0x800000010026F330);
          v80 = v79;
          swift_bridgeObjectRetain(v79);
          v82 = Logger.logObject.getter(v81);
          v83 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v82, v83))
          {
            v84 = swift_slowAlloc(12, -1);
            v85 = swift_slowAlloc(32, -1);
            v105 = v85;
            *(_DWORD *)v84 = v101.n128_u32[0];
            swift_bridgeObjectRetain(v80);
            *(_QWORD *)(v84 + 4) = sub_100172BEC(v78, v80, &v105);
            swift_bridgeObjectRelease_n(v80, 3);
            _os_log_impl((void *)&_mh_execute_header, v82, v83, "      %{public}s,", (uint8_t *)v84, 0xCu);
            swift_arrayDestroy(v85, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v85, -1, -1);
            swift_slowDealloc(v84, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n(v80, 2);
          }
          v70 += 3;
          if (!--v68)
          {
            swift_bridgeObjectRelease(v97);
            v52 = (uint64_t)v92;
            goto LABEL_14;
          }
        }
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        break;
      }
LABEL_14:
      v55 = v100 + 1;
      v8 = v96;
      sub_10000AFFC((uint64_t)v96, type metadata accessor for TargetTracks.TimePoint);
      v54 = v55;
      if (v55 == v93)
      {
        v51 = swift_bridgeObjectRelease(v95);
        v32 = v90;
        goto LABEL_32;
      }
    }
    __break(1u);
    goto LABEL_42;
  }
LABEL_32:
  v86 = Logger.logObject.getter(v51);
  v87 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v86, v87))
  {
    v88 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v88 = 0;
    _os_log_impl((void *)&_mh_execute_header, v86, v87, "  ]", v88, 2u);
    swift_slowDealloc(v88, -1, -1);
  }

  sub_10000AFFC(v32, type metadata accessor for TargetTracks);
}

uint64_t sub_1001D8184(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char v24;
  char *v25;
  char v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v33[24];

  v3 = type metadata accessor for ServicePredictionsModel.SkimmerPrediction(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = &v33[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v8 = sub_100003DB8(&qword_1003284E0);
  __chkstk_darwin(v8, v9);
  v11 = &v33[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v12 = sub_100003DB8(&qword_1003284F8);
  __chkstk_darwin(v12, v13);
  v15 = &v33[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v16 = v1 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__skimmerPrediction;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__skimmerPrediction, v33, 0, 0);
  v17 = (uint64_t)&v15[*(int *)(v12 + 48)];
  sub_10000B234(v16, (uint64_t)v15, &qword_1003284E0);
  sub_10000B234(a1, v17, &qword_1003284E0);
  v18 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v18((uint64_t)v15, 1, v3) != 1)
  {
    sub_10000B234((uint64_t)v15, (uint64_t)v11, &qword_1003284E0);
    if (v18(v17, 1, v3) == 1)
    {
      v20 = &qword_1003284F8;
LABEL_19:
      sub_10000AFFC((uint64_t)v11, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
      goto LABEL_20;
    }
    sub_1000E8D6C(v17, (uint64_t)v7, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
    v21 = static Date.== infix(_:_:)(v11, v7);
    if ((v21 & 1) != 0 && *(_QWORD *)&v11[*(int *)(v3 + 20)] == *(_QWORD *)&v7[*(int *)(v3 + 20)])
    {
      v22 = *(int *)(v3 + 24);
      v23 = &v11[v22];
      v24 = v11[v22 + 24];
      v25 = &v7[v22];
      v26 = v25[24];
      if ((v24 & 1) != 0)
      {
        if ((v25[24] & 1) == 0)
          goto LABEL_18;
      }
      else
      {
        if (*(_QWORD *)v23 != *(_QWORD *)v25)
          v26 = 1;
        if ((v26 & 1) != 0)
          goto LABEL_18;
        v27 = *((double *)v23 + 2);
        v28 = *((double *)v25 + 2);
        v29 = static Angle.== infix(_:_:)(v21, *((double *)v23 + 1), *((double *)v25 + 1));
        if ((v29 & 1) == 0 || (static Angle.== infix(_:_:)(v29, v27, v28) & 1) == 0)
          goto LABEL_18;
      }
      sub_10000AFFC((uint64_t)v7, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
      sub_10000AFFC((uint64_t)v11, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
      return sub_100007FF0((uint64_t)v15, &qword_1003284E0);
    }
LABEL_18:
    sub_10000AFFC((uint64_t)v7, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
    v20 = &qword_1003284E0;
    goto LABEL_19;
  }
  if (v18(v17, 1, v3) == 1)
    return sub_100007FF0((uint64_t)v15, &qword_1003284E0);
  v20 = &qword_1003284F8;
LABEL_20:
  result = sub_100007FF0((uint64_t)v15, v20);
  if (*(_QWORD *)(v1 + 32))
  {
    *(_BYTE *)(v1 + 40) = 1;
  }
  else
  {
    v30 = sub_100003DB8(&qword_10032B0E0);
    v31 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    return Subject<>.send()(v30, v31);
  }
  return result;
}

void sub_1001D8488(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  char *v33;
  char v34;
  double v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  __n128 v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  char v66[24];

  v2 = v1;
  v4 = type metadata accessor for ServicePredictionsModel.SkimmerPrediction(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = sub_100003DB8(&qword_1003284E0);
  v10 = __chkstk_darwin(v62, v9);
  v60 = (uint64_t)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v10, v12);
  v63 = (char *)&v59 - v14;
  __chkstk_darwin(v13, v15);
  v17 = (char *)&v59 - v16;
  v18 = sub_100003DB8(&qword_1003284F8);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v59 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = v2 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__skimmerPrediction;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__skimmerPrediction, v66, 0, 0);
  v23 = (uint64_t)&v21[*(int *)(v18 + 48)];
  v61 = v22;
  v24 = v22;
  v25 = a1;
  sub_10000B234(v24, (uint64_t)v21, &qword_1003284E0);
  sub_10000B234(a1, v23, &qword_1003284E0);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v26((uint64_t)v21, 1, v4) != 1)
  {
    sub_10000B234((uint64_t)v21, (uint64_t)v17, &qword_1003284E0);
    if (v26(v23, 1, v4) == 1)
    {
      v27 = &qword_1003284F8;
      v28 = (uint64_t)v63;
LABEL_18:
      sub_10000AFFC((uint64_t)v17, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
      goto LABEL_19;
    }
    sub_1000E8D6C(v23, (uint64_t)v8, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
    v29 = static Date.== infix(_:_:)(v17, v8);
    v28 = (uint64_t)v63;
    if ((v29 & 1) != 0 && *(_QWORD *)&v17[*(int *)(v4 + 20)] == *(_QWORD *)&v8[*(int *)(v4 + 20)])
    {
      v30 = *(int *)(v4 + 24);
      v31 = &v17[v30];
      v32 = v17[v30 + 24];
      v33 = &v8[v30];
      v34 = v33[24];
      if ((v32 & 1) != 0)
      {
        if ((v33[24] & 1) != 0)
        {
LABEL_11:
          sub_10000AFFC((uint64_t)v8, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
          sub_10000AFFC((uint64_t)v17, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
          goto LABEL_3;
        }
      }
      else
      {
        if (*(_QWORD *)v31 != *(_QWORD *)v33)
          v34 = 1;
        if ((v34 & 1) == 0)
        {
          v35 = *((double *)v31 + 2);
          v36 = *((double *)v33 + 2);
          v37 = static Angle.== infix(_:_:)(v29, *((double *)v31 + 1), *((double *)v33 + 1));
          if ((v37 & 1) != 0 && (static Angle.== infix(_:_:)(v37, v35, v36) & 1) != 0)
            goto LABEL_11;
        }
      }
    }
    sub_10000AFFC((uint64_t)v8, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
    v27 = &qword_1003284E0;
    goto LABEL_18;
  }
  if (v26(v23, 1, v4) == 1)
  {
LABEL_3:
    sub_100007FF0((uint64_t)v21, &qword_1003284E0);
    return;
  }
  v27 = &qword_1003284F8;
  v28 = (uint64_t)v63;
LABEL_19:
  sub_100007FF0((uint64_t)v21, v27);
  if (qword_100315830 != -1)
    swift_once(&qword_100315830, sub_1000D961C);
  v38 = type metadata accessor for Logger(0);
  sub_10000D744(v38, (uint64_t)qword_10033FD48);
  sub_10000B234(v25, v28, &qword_1003284E0);
  v40 = swift_retain_n(v2, v39);
  v41 = Logger.logObject.getter(v40);
  v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, v42))
  {
    v43 = swift_slowAlloc(22, -1);
    v63 = (char *)swift_slowAlloc(64, -1);
    v65 = v63;
    *(_DWORD *)v43 = 136446466;
    v44 = v60;
    sub_10000B234(v28, v60, &qword_1003284E0);
    v45 = v62;
    v47 = String.init<A>(describing:)(v44, v62, v46);
    v48 = v2;
    v50 = v49;
    v64 = sub_100172BEC(v47, v49, (uint64_t *)&v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v43 + 4, v43 + 12);
    swift_bridgeObjectRelease(v50);
    sub_100007FF0(v28, &qword_1003284E0);
    *(_WORD *)(v43 + 12) = 2082;
    sub_10000B234(v61, v44, &qword_1003284E0);
    v52 = String.init<A>(describing:)(v44, v45, v51);
    v54 = v53;
    v64 = sub_100172BEC(v52, v53, (uint64_t *)&v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v43 + 14, v43 + 22);
    swift_release_n(v48);
    v55 = v54;
    v2 = v48;
    swift_bridgeObjectRelease(v55);
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "_skimmer changed from: %{public}s to: %{public}s", (uint8_t *)v43, 0x16u);
    v56 = v63;
    swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1, -1);
    swift_slowDealloc(v43, -1, -1);

    if (*(_QWORD *)(v48 + 32))
    {
LABEL_23:
      *(_BYTE *)(v2 + 41) = 1;
      return;
    }
  }
  else
  {
    sub_100007FF0(v28, &qword_1003284E0);

    swift_release_n(v2);
    if (*(_QWORD *)(v2 + 32))
      goto LABEL_23;
  }
  v57 = sub_100003DB8(&qword_10032B0E0);
  v58 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Subject<>.send()(v57, v58);
}

uint64_t sub_1001D89FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  __n128 v10;

  v1 = v0;
  v2 = sub_100003DB8(&qword_100322C68);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = swift_retain(v0);
  *(_QWORD *)(v0 + 48) = PassthroughSubject.init()(v3);
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  *(_QWORD *)(v0 + 88) = 0;
  *(_BYTE *)(v0 + 96) = 1;
  *(_QWORD *)(v0 + 104) = 0;
  v4 = v0 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__targetTracks;
  v5 = type metadata accessor for TargetTracks(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = v1 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__skimmerPrediction;
  v7 = type metadata accessor for ServicePredictionsModel.SkimmerPrediction(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  swift_release(v1);
  *(_QWORD *)(v1 + 32) = 0;
  *(_WORD *)(v1 + 40) = 0;
  v8 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  *(_QWORD *)(v1 + 16) = PassthroughSubject.init()(v9);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  *(_QWORD *)(v1 + 24) = PassthroughSubject.init()(v10);
  return v1;
}

uint64_t sub_1001D8B20()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 104));
  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__targetTracks, &qword_100322C80);
  return sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__skimmerPrediction, &qword_1003284E0);
}

uint64_t sub_1001D8B70()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[6]);
  swift_release(v0[13]);
  sub_100007FF0((uint64_t)v0 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__targetTracks, &qword_100322C80);
  sub_100007FF0((uint64_t)v0 + OBJC_IVAR____TtC8SOSBuddy23ServicePredictionsModel__skimmerPrediction, &qword_1003284E0);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1001D8BE0()
{
  return type metadata accessor for ServicePredictionsModel(0);
}

uint64_t type metadata accessor for ServicePredictionsModel(uint64_t a1)
{
  return sub_10003D8E8(a1, (uint64_t *)&unk_100327FD8, (uint64_t)&nominal type descriptor for ServicePredictionsModel);
}

void sub_1001D8BFC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[5];

  v6[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v6[1] = ")";
  v6[2] = "\b";
  sub_1000F03D4(319, &qword_100327FE8, type metadata accessor for TargetTracks);
  if (v3 <= 0x3F)
  {
    v6[3] = *(_QWORD *)(v2 - 8) + 64;
    sub_1000F03D4(319, (unint64_t *)&unk_100327FF0, type metadata accessor for ServicePredictionsModel.SkimmerPrediction);
    if (v5 <= 0x3F)
    {
      v6[4] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 5, v6, a1 + 256);
    }
  }
}

uint64_t type metadata accessor for ServicePredictionsModel.SkimmerPrediction(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100328358, (uint64_t)&nominal type descriptor for ServicePredictionsModel.SkimmerPrediction);
}

uint64_t sub_1001D8CD8()
{
  return type metadata accessor for ServicePredictionsModel.Request(0);
}

uint64_t type metadata accessor for ServicePredictionsModel.Request(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100328178, (uint64_t)&nominal type descriptor for ServicePredictionsModel.Request);
}

void sub_1001D8CF4(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[3];

  v2 = type metadata accessor for DispatchTime(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_1000F03D4(319, (unint64_t *)&qword_100323F10, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchTime);
    if (v5 <= 0x3F)
    {
      v6[2] = *(_QWORD *)(v4 - 8) + 64;
      swift_updateClassMetadata2(a1, 256, 3, v6, a1 + 80);
    }
  }
}

void sub_1001D8D9C()
{
  qword_100326980 = 0x4092C00000000000;
}

uint64_t sub_1001D8DB0()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 24, 7);
}

uint64_t type metadata accessor for ApproximateTimeIntervalFormatter()
{
  return objc_opt_self(_TtC8SOSBuddy32ApproximateTimeIntervalFormatter);
}

ValueMetadata *type metadata accessor for ServicePredictionsModel.RequestToken()
{
  return &type metadata for ServicePredictionsModel.RequestToken;
}

uint64_t *sub_1001D8E18(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v11);
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    v9 = (_OWORD *)((char *)a1 + v8);
    v10 = (_OWORD *)((char *)a2 + v8);
    *v9 = *v10;
    *(_OWORD *)((char *)v9 + 9) = *(_OWORD *)((char *)v10 + 9);
  }
  return a1;
}

uint64_t sub_1001D8EB8(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t sub_1001D8EEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  *v8 = *v9;
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)v9 + 9);
  return a1;
}

uint64_t sub_1001D8F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;
  __int128 v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v7 = *(int *)(a3 + 24);
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = *(_OWORD *)((char *)v9 + 9);
  *v8 = *v9;
  *(_OWORD *)((char *)v8 + 9) = v10;
  return a1;
}

uint64_t sub_1001D8FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  *v8 = *v9;
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)v9 + 9);
  return a1;
}

uint64_t sub_1001D904C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  _OWORD *v9;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 24);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  v8 = (_OWORD *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  *v8 = *v9;
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)v9 + 9);
  return a1;
}

uint64_t sub_1001D90C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D90CC);
}

uint64_t sub_1001D90CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1001D9108(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D9114);
}

uint64_t sub_1001D9114(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1001D9154(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    v4[2] = &unk_10025CF88;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for GuidanceMessagesModel.BitsForStats(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for GuidanceMessagesModel.BitsForStats(_QWORD *a1)
{
  return swift_bridgeObjectRelease(*a1);
}

uint64_t *assignWithCopy for GuidanceMessagesModel.BitsForStats(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  a1[1] = v6;
  return a1;
}

uint64_t *assignWithTake for GuidanceMessagesModel.BitsForStats(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for GuidanceMessagesModel.BitsForStats(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GuidanceMessagesModel.BitsForStats(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for GuidanceMessagesModel.BitsForStats()
{
  return &type metadata for GuidanceMessagesModel.BitsForStats;
}

uint64_t storeEnumTagSinglePayload for GuidanceMessagesModel.HowToConnectGuidance(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001D938C + 4 * byte_10025CAA5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001D93C0 + 4 * byte_10025CAA0[v4]))();
}

uint64_t sub_1001D93C0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D93C8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001D93D0);
  return result;
}

uint64_t sub_1001D93DC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001D93E4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001D93E8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001D93F0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GuidanceMessagesModel.HowToConnectGuidance()
{
  return &type metadata for GuidanceMessagesModel.HowToConnectGuidance;
}

_QWORD *sub_1001D940C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(char *, uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  void *v25;
  id v26;
  char *__dst;
  _QWORD *v29;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v20);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (_QWORD *)((char *)a1 + v8);
    v29 = a2;
    v10 = (char *)a2 + v8;
    v11 = *(_QWORD *)((char *)a2 + v8 + 8);
    *v9 = *(_QWORD *)((char *)a2 + v8);
    v9[1] = v11;
    v12 = (int *)type metadata accessor for TransmissionProgress(0);
    v13 = v12[5];
    __dst = (char *)v9 + v13;
    v14 = &v10[v13];
    v15 = type metadata accessor for Date(0);
    v16 = *(_QWORD *)(v15 - 8);
    v17 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v16 + 48);
    v18 = swift_bridgeObjectRetain(v11);
    if (v17(v14, 1, v15, v18))
    {
      v19 = sub_100003DB8(&qword_100317D58);
      memcpy(__dst, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(__dst, v14, v15);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(__dst, 0, 1, v15);
    }
    v21 = v12[6];
    v22 = (char *)v9 + v21;
    v23 = &v10[v21];
    *(_QWORD *)v22 = *(_QWORD *)v23;
    v22[8] = v23[8];
    *(_QWORD *)((char *)v9 + v12[7]) = *(_QWORD *)&v10[v12[7]];
    *((_BYTE *)v9 + v12[8]) = v10[v12[8]];
    v24 = *(int *)(a3 + 24);
    v25 = *(void **)((char *)v29 + v24);
    *(_QWORD *)((char *)a1 + v24) = v25;
    v26 = v25;
  }
  return a1;
}

void sub_1001D95A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease(*(_QWORD *)(v5 + 8));
  v6 = v5 + *(int *)(type metadata accessor for TransmissionProgress(0) + 20);
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);

}

uint64_t sub_1001D9654(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int (*v17)(const void *, uint64_t, uint64_t, __n128);
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v27;
  uint64_t v28;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v27 = a3;
  v28 = a2;
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  *v8 = *(_QWORD *)(a2 + v7);
  v8[1] = v10;
  v11 = (int *)type metadata accessor for TransmissionProgress(0);
  v12 = v11[5];
  v13 = (char *)v8 + v12;
  v14 = (const void *)(v9 + v12);
  v15 = type metadata accessor for Date(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v16 + 48);
  v18 = swift_bridgeObjectRetain(v10);
  if (v17(v14, 1, v15, v18))
  {
    v19 = sub_100003DB8(&qword_100317D58);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v16 + 16))(v13, v14, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  v20 = v11[6];
  v21 = (char *)v8 + v20;
  v22 = v9 + v20;
  *(_QWORD *)v21 = *(_QWORD *)v22;
  v21[8] = *(_BYTE *)(v22 + 8);
  *(_QWORD *)((char *)v8 + v11[7]) = *(_QWORD *)(v9 + v11[7]);
  *((_BYTE *)v8 + v11[8]) = *(_BYTE *)(v9 + v11[8]);
  v23 = *(int *)(v27 + 24);
  v24 = *(void **)(v28 + v23);
  *(_QWORD *)(a1 + v23) = v24;
  v25 = v24;
  return a1;
}

uint64_t sub_1001D97BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  uint64_t v31;
  uint64_t v32;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v31 = a3;
  v32 = a2;
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  *v8 = *(_QWORD *)(a2 + v7);
  v10 = *(_QWORD *)(a2 + v7 + 8);
  v11 = *(_QWORD *)(a1 + v7 + 8);
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = (int *)type metadata accessor for TransmissionProgress(0);
  v13 = v12[5];
  v14 = (char *)v8 + v13;
  v15 = (char *)(v9 + v13);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 24))(v14, v15, v16);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = sub_100003DB8(&qword_100317D58);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v14, v15, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_7:
  v22 = v12[6];
  v23 = (char *)v8 + v22;
  v24 = (uint64_t *)(v9 + v22);
  v25 = *v24;
  v23[8] = *((_BYTE *)v24 + 8);
  *(_QWORD *)v23 = v25;
  *(_QWORD *)((char *)v8 + v12[7]) = *(_QWORD *)(v9 + v12[7]);
  *((_BYTE *)v8 + v12[8]) = *(_BYTE *)(v9 + v12[8]);
  v26 = *(int *)(v31 + 24);
  v27 = *(void **)(v32 + v26);
  v28 = *(void **)(a1 + v26);
  *(_QWORD *)(a1 + v26) = v27;
  v29 = v27;

  return a1;
}

uint64_t sub_1001D9980(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  v10 = (int *)type metadata accessor for TransmissionProgress(0);
  v11 = v10[5];
  v12 = (void *)(v8 + v11);
  v13 = (const void *)(v9 + v11);
  v14 = type metadata accessor for Date(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = sub_100003DB8(&qword_100317D58);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 32))(v12, v13, v14);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = v10[6];
  v18 = v8 + v17;
  v19 = v9 + v17;
  *(_QWORD *)v18 = *(_QWORD *)v19;
  *(_BYTE *)(v18 + 8) = *(_BYTE *)(v19 + 8);
  *(_QWORD *)(v8 + v10[7]) = *(_QWORD *)(v9 + v10[7]);
  *(_BYTE *)(v8 + v10[8]) = *(_BYTE *)(v9 + v10[8]);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_1001D9ACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v28;
  uint64_t v29;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v28 = a3;
  v29 = a2;
  v7 = *(int *)(a3 + 20);
  v8 = (_QWORD *)(a1 + v7);
  v9 = a2 + v7;
  v10 = *(_QWORD *)(a2 + v7 + 8);
  v11 = *(_QWORD *)(a1 + v7 + 8);
  *v8 = *(_QWORD *)(a2 + v7);
  v8[1] = v10;
  swift_bridgeObjectRelease(v11);
  v12 = (int *)type metadata accessor for TransmissionProgress(0);
  v13 = v12[5];
  v14 = (char *)v8 + v13;
  v15 = (char *)(v9 + v13);
  v16 = type metadata accessor for Date(0);
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48);
  v19 = v18(v14, 1, v16);
  v20 = v18(v15, 1, v16);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 40))(v14, v15, v16);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v17 + 8))(v14, v16);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = sub_100003DB8(&qword_100317D58);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v14, v15, v16);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
LABEL_7:
  v22 = v12[6];
  v23 = (char *)v8 + v22;
  v24 = v9 + v22;
  *(_QWORD *)v23 = *(_QWORD *)v24;
  v23[8] = *(_BYTE *)(v24 + 8);
  *(_QWORD *)((char *)v8 + v12[7]) = *(_QWORD *)(v9 + v12[7]);
  *((_BYTE *)v8 + v12[8]) = *(_BYTE *)(v9 + v12[8]);
  v25 = *(int *)(v28 + 24);
  v26 = *(void **)(a1 + v25);
  *(_QWORD *)(a1 + v25) = *(_QWORD *)(v29 + v25);

  return a1;
}

uint64_t sub_1001D9C7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001D9C88);
}

uint64_t sub_1001D9C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for TransmissionProgress(0);
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  v14 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1001D9D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001D9D3C);
}

uint64_t sub_1001D9D3C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
    return v11(v12, a2, a2, v10);
  }
  result = type metadata accessor for TransmissionProgress(0);
  v14 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    v10 = result;
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t sub_1001D9DE0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[3];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    result = type metadata accessor for TransmissionProgress(319);
    if (v4 <= 0x3F)
    {
      v5[1] = *(_QWORD *)(result - 8) + 64;
      v5[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
      swift_initStructMetadata(a1, 256, 3, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

_QWORD *sub_1001D9E70(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int (*v14)(char *, uint64_t, uint64_t, __n128);
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  unsigned int (*v34)(char *, uint64_t, uint64_t, __n128);

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v17);
  }
  else
  {
    v7 = a2[1];
    *a1 = *a2;
    a1[1] = v7;
    v8 = (int *)type metadata accessor for TransmissionProgress(0);
    v9 = v8[5];
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for Date(0);
    v13 = *(_QWORD *)(v12 - 8);
    v14 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v13 + 48);
    v15 = swift_bridgeObjectRetain(v7);
    v34 = v14;
    if (v14(v11, 1, v12, v15))
    {
      v16 = sub_100003DB8(&qword_100317D58);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    v18 = v8[6];
    v19 = (char *)v4 + v18;
    v20 = (char *)a2 + v18;
    *(_QWORD *)v19 = *(_QWORD *)v20;
    v19[8] = v20[8];
    *(_QWORD *)((char *)v4 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
    *((_BYTE *)v4 + v8[8]) = *((_BYTE *)a2 + v8[8]);
    v21 = *(int *)(a3 + 20);
    v22 = (_QWORD *)((char *)v4 + v21);
    v23 = (char *)a2 + v21;
    v24 = *(_QWORD *)((char *)a2 + v21 + 8);
    *v22 = *(_QWORD *)((char *)a2 + v21);
    v22[1] = v24;
    v25 = v8[5];
    v26 = (char *)v22 + v25;
    v27 = &v23[v25];
    v28 = swift_bridgeObjectRetain(v24);
    if (v34(v27, 1, v12, v28))
    {
      v29 = sub_100003DB8(&qword_100317D58);
      memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v26, v27, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v26, 0, 1, v12);
    }
    v30 = v8[6];
    v31 = (char *)v22 + v30;
    v32 = &v23[v30];
    *(_QWORD *)v31 = *(_QWORD *)v32;
    v31[8] = v32[8];
    *(_QWORD *)((char *)v22 + v8[7]) = *(_QWORD *)&v23[v8[7]];
    *((_BYTE *)v22 + v8[8]) = v23[v8[8]];
    *(_QWORD *)((char *)v4 + *(int *)(a3 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(a3 + 24));
  }
  return v4;
}

uint64_t sub_1001DA090(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int (*v8)(uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t result;

  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = type metadata accessor for TransmissionProgress(0);
  v5 = a1 + *(int *)(v4 + 20);
  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1, v6))
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v9 = a1 + *(int *)(a2 + 20);
  v10 = swift_bridgeObjectRelease(*(_QWORD *)(v9 + 8));
  v11 = v9 + *(int *)(v4 + 20);
  result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t, __n128))v8)(v11, 1, v6, v10);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v11, v6);
  return result;
}

_QWORD *sub_1001DA16C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v32;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = (int *)type metadata accessor for TransmissionProgress(0);
  v8 = v7[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for Date(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48);
  v14 = swift_bridgeObjectRetain(v6);
  if (v13(v10, 1, v11, v14))
  {
    v15 = sub_100003DB8(&qword_100317D58);
    memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  v16 = v7[6];
  v17 = (char *)a1 + v16;
  v18 = (char *)a2 + v16;
  *(_QWORD *)v17 = *(_QWORD *)v18;
  v17[8] = v18[8];
  *(_QWORD *)((char *)a1 + v7[7]) = *(_QWORD *)((char *)a2 + v7[7]);
  *((_BYTE *)a1 + v7[8]) = *((_BYTE *)a2 + v7[8]);
  v32 = a3;
  v19 = *(int *)(a3 + 20);
  v20 = (_QWORD *)((char *)a1 + v19);
  v21 = (char *)a2 + v19;
  v22 = *(_QWORD *)((char *)a2 + v19 + 8);
  *v20 = *(_QWORD *)((char *)a2 + v19);
  v20[1] = v22;
  v23 = v7[5];
  v24 = (char *)v20 + v23;
  v25 = &v21[v23];
  v26 = swift_bridgeObjectRetain(v22);
  if (v13(v25, 1, v11, v26))
  {
    v27 = sub_100003DB8(&qword_100317D58);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v24, v25, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v24, 0, 1, v11);
  }
  v28 = v7[6];
  v29 = (char *)v20 + v28;
  v30 = &v21[v28];
  *(_QWORD *)v29 = *(_QWORD *)v30;
  v29[8] = v30[8];
  *(_QWORD *)((char *)v20 + v7[7]) = *(_QWORD *)&v21[v7[7]];
  *((_BYTE *)v20 + v7[8]) = v21[v7[8]];
  *(_QWORD *)((char *)a1 + *(int *)(v32 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v32 + 24));
  return a1;
}

_QWORD *sub_1001DA360(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  char *v29;
  char *v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;

  *a1 = *a2;
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = (int *)type metadata accessor for TransmissionProgress(0);
  v9 = v8[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  v39 = v13;
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_100003DB8(&qword_100317D58);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
LABEL_7:
  v18 = v8[6];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = *(_QWORD *)v20;
  v19[8] = v20[8];
  *(_QWORD *)v19 = v21;
  *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
  *((_BYTE *)a1 + v8[8]) = *((_BYTE *)a2 + v8[8]);
  v40 = a3;
  v22 = *(int *)(a3 + 20);
  v23 = (_QWORD *)((char *)a1 + v22);
  v24 = (char *)a2 + v22;
  *v23 = *(_QWORD *)((char *)a2 + v22);
  v25 = *(_QWORD *)((char *)a2 + v22 + 8);
  v26 = *(_QWORD *)((char *)a1 + v22 + 8);
  v23[1] = v25;
  swift_bridgeObjectRetain(v25);
  v27 = swift_bridgeObjectRelease(v26);
  v28 = v8[5];
  v29 = (char *)v23 + v28;
  v30 = &v24[v28];
  v31 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v14)((char *)v23 + v28, 1, v12, v27);
  v32 = v14(v30, 1, v12);
  if (!v31)
  {
    if (!v32)
    {
      (*(void (**)(char *, char *, uint64_t))(v39 + 24))(v29, v30, v12);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v29, v12);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    v33 = sub_100003DB8(&qword_100317D58);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v39 + 16))(v29, v30, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v29, 0, 1, v12);
LABEL_13:
  v34 = v8[6];
  v35 = (char *)v23 + v34;
  v36 = &v24[v34];
  v37 = *(_QWORD *)v36;
  v35[8] = v36[8];
  *(_QWORD *)v35 = v37;
  *(_QWORD *)((char *)v23 + v8[7]) = *(_QWORD *)&v24[v8[7]];
  *((_BYTE *)v23 + v8[8]) = v24[v8[8]];
  *(_QWORD *)((char *)a1 + *(int *)(v40 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v40 + 24));
  return a1;
}

_OWORD *sub_1001DA610(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  int *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int (*v12)(char *, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _OWORD *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v28;

  *a1 = *a2;
  v6 = (int *)type metadata accessor for TransmissionProgress(0);
  v7 = v6[5];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v12(v9, 1, v10))
  {
    v13 = sub_100003DB8(&qword_100317D58);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v14 = v6[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  *(_QWORD *)v15 = *(_QWORD *)v16;
  v15[8] = v16[8];
  *(_QWORD *)((char *)a1 + v6[7]) = *(_QWORD *)((char *)a2 + v6[7]);
  *((_BYTE *)a1 + v6[8]) = *((_BYTE *)a2 + v6[8]);
  v28 = a3;
  v17 = *(int *)(a3 + 20);
  v18 = (_OWORD *)((char *)a1 + v17);
  v19 = (char *)a2 + v17;
  *v18 = *(_OWORD *)((char *)a2 + v17);
  v20 = v6[5];
  v21 = (char *)v18 + v20;
  v22 = &v19[v20];
  if (v12(&v19[v20], 1, v10))
  {
    v23 = sub_100003DB8(&qword_100317D58);
    memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v23 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v21, v22, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v21, 0, 1, v10);
  }
  v24 = v6[6];
  v25 = (char *)v18 + v24;
  v26 = &v19[v24];
  *(_QWORD *)v25 = *(_QWORD *)v26;
  v25[8] = v26[8];
  *(_QWORD *)((char *)v18 + v6[7]) = *(_QWORD *)&v19[v6[7]];
  *((_BYTE *)v18 + v6[8]) = v19[v6[8]];
  *(_QWORD *)((char *)a1 + *(int *)(v28 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v28 + 24));
  return a1;
}

_QWORD *sub_1001DA7F8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t, uint64_t);
  int v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  int v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v37;
  uint64_t v38;

  v6 = a2[1];
  v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  v8 = (int *)type metadata accessor for TransmissionProgress(0);
  v9 = v8[5];
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for Date(0);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  v15 = v14(v10, 1, v12);
  v16 = v14(v11, 1, v12);
  v37 = v13;
  if (v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
LABEL_6:
    v17 = sub_100003DB8(&qword_100317D58);
    memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
LABEL_7:
  v18 = v8[6];
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  *(_QWORD *)v19 = *(_QWORD *)v20;
  v19[8] = v20[8];
  *(_QWORD *)((char *)a1 + v8[7]) = *(_QWORD *)((char *)a2 + v8[7]);
  *((_BYTE *)a1 + v8[8]) = *((_BYTE *)a2 + v8[8]);
  v38 = a3;
  v21 = *(int *)(a3 + 20);
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (char *)a2 + v21;
  v24 = *(_QWORD *)((char *)a2 + v21 + 8);
  v25 = *(_QWORD *)((char *)a1 + v21 + 8);
  *v22 = *(_QWORD *)((char *)a2 + v21);
  v22[1] = v24;
  v26 = swift_bridgeObjectRelease(v25);
  v27 = v8[5];
  v28 = (char *)v22 + v27;
  v29 = &v23[v27];
  v30 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v14)((char *)v22 + v27, 1, v12, v26);
  v31 = v14(v29, 1, v12);
  if (!v30)
  {
    if (!v31)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v28, v29, v12);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v28, v12);
    goto LABEL_12;
  }
  if (v31)
  {
LABEL_12:
    v32 = sub_100003DB8(&qword_100317D58);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v28, v29, v12);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v28, 0, 1, v12);
LABEL_13:
  v33 = v8[6];
  v34 = (char *)v22 + v33;
  v35 = &v23[v33];
  *(_QWORD *)v34 = *(_QWORD *)v35;
  v34[8] = v35[8];
  *(_QWORD *)((char *)v22 + v8[7]) = *(_QWORD *)&v23[v8[7]];
  *((_BYTE *)v22 + v8[8]) = v23[v8[8]];
  *(_QWORD *)((char *)a1 + *(int *)(v38 + 24)) = *(_QWORD *)((char *)a2 + *(int *)(v38 + 24));
  return a1;
}

uint64_t sub_1001DAA88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1001DAA94);
}

uint64_t sub_1001DAA94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TransmissionProgress(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t sub_1001DAAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001DAADC);
}

uint64_t sub_1001DAADC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TransmissionProgress(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t sub_1001DAB1C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[3];

  result = type metadata accessor for TransmissionProgress(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = v4[0];
    v4[2] = (char *)&value witness table for Builtin.Int64 + 64;
    swift_initStructMetadata(a1, 256, 3, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for GuidanceModel.SuggestedAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001DABE0 + 4 * byte_10025CAAF[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001DAC14 + 4 * byte_10025CAAA[v4]))();
}

uint64_t sub_1001DAC14(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DAC1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001DAC24);
  return result;
}

uint64_t sub_1001DAC30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001DAC38);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001DAC3C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DAC44(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GuidanceModel.SuggestedAction()
{
  return &type metadata for GuidanceModel.SuggestedAction;
}

uint64_t storeEnumTagSinglePayload for ConnectivityModel.ConnectivityStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1001DACAC + 4 * byte_10025CAB9[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1001DACE0 + 4 * byte_10025CAB4[v4]))();
}

uint64_t sub_1001DACE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DACE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001DACF0);
  return result;
}

uint64_t sub_1001DACFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001DAD04);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1001DAD08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DAD10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConnectivityModel.ConnectivityStatus()
{
  return &type metadata for ConnectivityModel.ConnectivityStatus;
}

ValueMetadata *type metadata accessor for GuidanceModel.RelativeBearing()
{
  return &type metadata for GuidanceModel.RelativeBearing;
}

unint64_t sub_1001DAD40()
{
  unint64_t result;

  result = qword_1003284C8;
  if (!qword_1003284C8)
  {
    result = swift_getWitnessTable(&unk_10025D0AC, &type metadata for ConnectivityModel.ConnectivityStatus);
    atomic_store(result, (unint64_t *)&qword_1003284C8);
  }
  return result;
}

unint64_t sub_1001DAD88()
{
  unint64_t result;

  result = qword_1003284D0;
  if (!qword_1003284D0)
  {
    result = swift_getWitnessTable(&unk_10025D114, &type metadata for GuidanceModel.SuggestedAction);
    atomic_store(result, (unint64_t *)&qword_1003284D0);
  }
  return result;
}

unint64_t sub_1001DADD0()
{
  unint64_t result;

  result = qword_1003284D8;
  if (!qword_1003284D8)
  {
    result = swift_getWitnessTable(&unk_10025D1CC, &type metadata for GuidanceMessagesModel.HowToConnectGuidance);
    atomic_store(result, (unint64_t *)&qword_1003284D8);
  }
  return result;
}

uint64_t sub_1001DAE14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  sub_1001DC720();
  swift_beginAccess(v0 + 80, v12, 1, 0);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  *(_OWORD *)(v0 + 80) = xmmword_10024E030;
  *(_QWORD *)(v0 + 96) = 0;
  *(_WORD *)(v0 + 104) = 0;
  sub_10002117C(v1, v2);
  *(_BYTE *)(v0 + 106) = 2;
  v3 = *(unsigned __int16 *)(v0 + 107);
  if (*(_WORD *)(v0 + 107) != 2)
  {
    v4 = sub_100003DB8(&qword_10032B0E0);
    v5 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v4, v5);
  }
  *(_WORD *)(v0 + 107) = 2;
  sub_1001DB170(v3);
  v6 = *(unsigned __int16 *)(v0 + 120);
  sub_1001DC720();
  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 88);
  *(_OWORD *)(v0 + 80) = xmmword_10024E030;
  *(_QWORD *)(v0 + 96) = 0;
  *(_WORD *)(v0 + 104) = 0;
  sub_10002117C(v7, v8);
  if (*(_BYTE *)(v0 + 120) != 2)
  {
    v9 = sub_100003DB8(&qword_10032B0E0);
    v10 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v9, v10);
  }
  *(_WORD *)(v0 + 120) = 2;
  return sub_1001DBAB0(v6);
}

double sub_1001DAF70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  sub_1001DC9E4((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_1001DE594, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10002117C, (uint64_t (*)(uint64_t *, __n128))sub_1001DB134);
  swift_beginAccess(v0 + 80, v12, 1, 0);
  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(_QWORD *)(v0 + 88);
  *(_OWORD *)(v0 + 80) = xmmword_10024E030;
  *(_QWORD *)(v0 + 96) = 0;
  *(_BYTE *)(v0 + 104) = 0;
  sub_10002117C(v1, v2);
  *(_BYTE *)(v0 + 105) = 2;
  v3 = *(unsigned __int8 *)(v0 + 106);
  if (v3 != 9)
  {
    v4 = sub_100003DB8(&qword_10032B0E0);
    v5 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v4, v5);
  }
  *(_BYTE *)(v0 + 106) = 9;
  sub_1001DB7AC(v3);
  v6 = *(_BYTE *)(v0 + 120);
  sub_1001DC9E4((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_1001DE594, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10002117C, (uint64_t (*)(uint64_t *, __n128))sub_1001DB134);
  v7 = *(_QWORD *)(v0 + 80);
  v8 = *(_QWORD *)(v0 + 88);
  *(_OWORD *)(v0 + 80) = xmmword_10024E030;
  *(_QWORD *)(v0 + 96) = 0;
  *(_BYTE *)(v0 + 104) = 0;
  sub_10002117C(v7, v8);
  if (*(_BYTE *)(v0 + 120) != 9)
  {
    v9 = sub_100003DB8(&qword_10032B0E0);
    v10 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v9, v10);
  }
  *(_BYTE *)(v0 + 120) = 9;
  return sub_1001DC0EC(v6);
}

void *sub_1001DB0F8(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 80, a1, 33, 0);
  return &j__swift_endAccess;
}

void *sub_1001DB134(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1 + 80, a1, 33, 0);
  return &j_j__swift_endAccess;
}

uint64_t sub_1001DB170(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  __int16 v4;
  _BOOL4 v5;
  int v6;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = v1;
  v3 = result;
  v4 = *(_WORD *)(v1 + 107);
  if (v4 == 2)
  {
    if (result == 2)
      return result;
LABEL_10:
    v8 = *(_QWORD *)(v1 + 112);
    v9 = __CFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v1 + 112) = v10;
      if (qword_100315820 == -1)
      {
LABEL_12:
        v11 = type metadata accessor for Logger(0);
        sub_10000D744(v11, (uint64_t)qword_10033FD18);
        v13 = swift_retain_n(v1, 4, v12);
        v14 = Logger.logObject.getter(v13);
        v15 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v14, v15))
        {
          v16 = swift_slowAlloc(42, -1);
          v17 = swift_slowAlloc(96, -1);
          v33 = v17;
          *(_DWORD *)v16 = 136446978;
          v18 = *(_QWORD *)(v2 + 48);
          v19 = *(_QWORD *)(v2 + 56);
          swift_bridgeObjectRetain(v19);
          v32 = sub_100172BEC(v18, v19, &v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v16 + 4, v16 + 12);
          swift_bridgeObjectRelease(v19);
          *(_WORD *)(v16 + 12) = 2082;
          LOWORD(v32) = v3;
          v20 = sub_100003DB8(&qword_100317BD8);
          v22 = String.init<A>(describing:)(&v32, v20, v21);
          v24 = v23;
          v32 = sub_100172BEC(v22, v23, &v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v16 + 14, v16 + 22);
          swift_bridgeObjectRelease(v24);
          *(_WORD *)(v16 + 22) = 2082;
          LOWORD(v32) = *(_WORD *)(v2 + 107);
          v26 = String.init<A>(describing:)(&v32, v20, v25);
          v28 = v27;
          v32 = sub_100172BEC(v26, v27, &v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v16 + 24, v16 + 32);
          swift_release_n(v2, 2);
          swift_bridgeObjectRelease(v28);
          *(_WORD *)(v16 + 32) = 2048;
          v29 = *(_QWORD *)(v2 + 112);
          swift_release(v2);
          v32 = v29;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v16 + 34, v16 + 42);
          swift_release(v2);
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s state changed from: %{public}s to: %{public}s (generation = %llu)", (uint8_t *)v16, 0x2Au);
          swift_arrayDestroy(v17, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v17, -1, -1);
          swift_slowDealloc(v16, -1, -1);

        }
        else
        {

          swift_release_n(v2, 4);
        }
        v30 = sub_100003DB8(&qword_10032B0E0);
        v31 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
        return Subject<>.send()(v30, v31);
      }
    }
    swift_once(&qword_100315820, sub_1000D95E4);
    goto LABEL_12;
  }
  if (result == 2)
    goto LABEL_10;
  v5 = (v4 & 1) == 0;
  v6 = ((v4 & 0x100) == 0) ^ ((unsigned __int16)(result & 0x100) >> 8);
  if ((result & 1) == v5 || v6 == 0)
    goto LABEL_10;
  return result;
}

double sub_1001DB49C(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  uint64_t v30;
  uint64_t v31;

  v2 = v1;
  v4 = *(unsigned __int8 *)(v1 + 106);
  if (v4 == 2)
  {
    if (a1 == 2)
      return result;
  }
  else if (a1 != 2 && ((a1 & 1) == 0) != (v4 & 1))
  {
    return result;
  }
  v5 = *(_QWORD *)(v1 + 112);
  v6 = __CFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
    goto LABEL_14;
  }
  *(_QWORD *)(v1 + 112) = v7;
  if (qword_100315820 != -1)
LABEL_14:
    swift_once(&qword_100315820, sub_1000D95E4);
  v8 = type metadata accessor for Logger(0);
  sub_10000D744(v8, (uint64_t)qword_10033FD18);
  v10 = swift_retain_n(v1, v9);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(42, -1);
    v14 = swift_slowAlloc(96, -1);
    v31 = v14;
    *(_DWORD *)v13 = 136446978;
    v15 = *(_QWORD *)(v2 + 48);
    v16 = *(_QWORD *)(v2 + 56);
    swift_bridgeObjectRetain(v16);
    v30 = sub_100172BEC(v15, v16, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v13 + 12) = 2082;
    LOBYTE(v30) = a1;
    v17 = sub_100003DB8((uint64_t *)&unk_1003263F0);
    v19 = String.init<A>(describing:)(&v30, v17, v18);
    v21 = v20;
    v30 = sub_100172BEC(v19, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 14, v13 + 22);
    v22 = swift_bridgeObjectRelease(v21);
    *(_WORD *)(v13 + 22) = 2082;
    LOBYTE(v30) = *(_BYTE *)(v2 + 106);
    v23 = String.init<A>(describing:)(&v30, v17, v22);
    v25 = v24;
    v30 = sub_100172BEC(v23, v24, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 24, v13 + 32);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v13 + 32) = 2048;
    v26 = *(_QWORD *)(v2 + 112);
    swift_release(v2);
    v30 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 34, v13 + 42);
    swift_release(v2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s state changed from: %{public}s to: %{public}s (generation = %llu)", (uint8_t *)v13, 0x2Au);
    swift_arrayDestroy(v14, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_release_n(v2);
  }
  v27 = sub_100003DB8(&qword_10032B0E0);
  v28 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  *(_QWORD *)&result = Subject<>.send()(v27, v28).n128_u64[0];
  return result;
}

double sub_1001DB7AC(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  uint64_t v30;
  uint64_t v31;

  v2 = v1;
  v4 = *(unsigned __int8 *)(v1 + 106);
  if (v4 == 9)
  {
    if (a1 == 9)
      return result;
  }
  else if (a1 != 9 && v4 == a1)
  {
    return result;
  }
  v5 = *(_QWORD *)(v1 + 112);
  v6 = __CFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
    goto LABEL_14;
  }
  *(_QWORD *)(v1 + 112) = v7;
  if (qword_100315820 != -1)
LABEL_14:
    swift_once(&qword_100315820, sub_1000D95E4);
  v8 = type metadata accessor for Logger(0);
  sub_10000D744(v8, (uint64_t)qword_10033FD18);
  v10 = swift_retain_n(v1, v9);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(42, -1);
    v14 = swift_slowAlloc(96, -1);
    v31 = v14;
    *(_DWORD *)v13 = 136446978;
    v15 = *(_QWORD *)(v2 + 48);
    v16 = *(_QWORD *)(v2 + 56);
    swift_bridgeObjectRetain(v16);
    v30 = sub_100172BEC(v15, v16, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v13 + 12) = 2082;
    LOBYTE(v30) = a1;
    v17 = sub_100003DB8(&qword_100317BE8);
    v19 = String.init<A>(describing:)(&v30, v17, v18);
    v21 = v20;
    v30 = sub_100172BEC(v19, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 14, v13 + 22);
    v22 = swift_bridgeObjectRelease(v21);
    *(_WORD *)(v13 + 22) = 2082;
    LOBYTE(v30) = *(_BYTE *)(v2 + 106);
    v23 = String.init<A>(describing:)(&v30, v17, v22);
    v25 = v24;
    v30 = sub_100172BEC(v23, v24, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 24, v13 + 32);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v13 + 32) = 2048;
    v26 = *(_QWORD *)(v2 + 112);
    swift_release(v2);
    v30 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 34, v13 + 42);
    swift_release(v2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s state changed from: %{public}s to: %{public}s (generation = %llu)", (uint8_t *)v13, 0x2Au);
    swift_arrayDestroy(v14, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_release_n(v2);
  }
  v27 = sub_100003DB8(&qword_10032B0E0);
  v28 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  *(_QWORD *)&result = Subject<>.send()(v27, v28).n128_u64[0];
  return result;
}

uint64_t sub_1001DBAB0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  __int16 v4;
  _BOOL4 v5;
  int v6;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v2 = v1;
  v3 = result;
  v4 = *(_WORD *)(v1 + 120);
  if (v4 == 2)
  {
    if (result == 2)
      return result;
LABEL_10:
    v8 = *(_QWORD *)(v1 + 128);
    v9 = __CFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v1 + 128) = v10;
      if (qword_100315820 == -1)
      {
LABEL_12:
        v11 = type metadata accessor for Logger(0);
        sub_10000D744(v11, (uint64_t)qword_10033FD18);
        v13 = swift_retain_n(v1, 4, v12);
        v14 = Logger.logObject.getter(v13);
        v15 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v14, v15))
        {
          v16 = swift_slowAlloc(42, -1);
          v17 = swift_slowAlloc(96, -1);
          v33 = v17;
          *(_DWORD *)v16 = 136446978;
          v18 = *(_QWORD *)(v2 + 48);
          v19 = *(_QWORD *)(v2 + 56);
          swift_bridgeObjectRetain(v19);
          v32 = sub_100172BEC(v18, v19, &v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v16 + 4, v16 + 12);
          swift_bridgeObjectRelease(v19);
          *(_WORD *)(v16 + 12) = 2082;
          LOWORD(v32) = v3;
          v20 = sub_100003DB8(&qword_100317BD8);
          v22 = String.init<A>(describing:)(&v32, v20, v21);
          v24 = v23;
          v32 = sub_100172BEC(v22, v23, &v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v16 + 14, v16 + 22);
          swift_bridgeObjectRelease(v24);
          *(_WORD *)(v16 + 22) = 2082;
          LOWORD(v32) = *(_WORD *)(v2 + 120);
          v26 = String.init<A>(describing:)(&v32, v20, v25);
          v28 = v27;
          v32 = sub_100172BEC(v26, v27, &v33);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v16 + 24, v16 + 32);
          swift_release_n(v2, 2);
          swift_bridgeObjectRelease(v28);
          *(_WORD *)(v16 + 32) = 2048;
          v29 = *(_QWORD *)(v2 + 128);
          swift_release(v2);
          v32 = v29;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v16 + 34, v16 + 42);
          swift_release(v2);
          _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s (with hysteresis) state changed from: %{public}s to: %{public}s (generation = %llu)", (uint8_t *)v16, 0x2Au);
          swift_arrayDestroy(v17, 3, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v17, -1, -1);
          swift_slowDealloc(v16, -1, -1);

        }
        else
        {

          swift_release_n(v2, 4);
        }
        v30 = sub_100003DB8(&qword_10032B0E0);
        v31 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
        return Subject<>.send()(v30, v31);
      }
    }
    swift_once(&qword_100315820, sub_1000D95E4);
    goto LABEL_12;
  }
  if (result == 2)
    goto LABEL_10;
  v5 = (v4 & 1) == 0;
  v6 = ((v4 & 0x100) == 0) ^ ((unsigned __int16)(result & 0x100) >> 8);
  if ((result & 1) == v5 || v6 == 0)
    goto LABEL_10;
  return result;
}

double sub_1001DBDDC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  uint64_t v30;
  uint64_t v31;

  v2 = v1;
  v4 = *(unsigned __int8 *)(v1 + 120);
  if (v4 == 2)
  {
    if (a1 == 2)
      return result;
  }
  else if (a1 != 2 && ((a1 & 1) == 0) != (v4 & 1))
  {
    return result;
  }
  v5 = *(_QWORD *)(v1 + 128);
  v6 = __CFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
    goto LABEL_14;
  }
  *(_QWORD *)(v1 + 128) = v7;
  if (qword_100315820 != -1)
LABEL_14:
    swift_once(&qword_100315820, sub_1000D95E4);
  v8 = type metadata accessor for Logger(0);
  sub_10000D744(v8, (uint64_t)qword_10033FD18);
  v10 = swift_retain_n(v1, v9);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(42, -1);
    v14 = swift_slowAlloc(96, -1);
    v31 = v14;
    *(_DWORD *)v13 = 136446978;
    v15 = *(_QWORD *)(v2 + 48);
    v16 = *(_QWORD *)(v2 + 56);
    swift_bridgeObjectRetain(v16);
    v30 = sub_100172BEC(v15, v16, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v13 + 12) = 2082;
    LOBYTE(v30) = a1;
    v17 = sub_100003DB8((uint64_t *)&unk_1003263F0);
    v19 = String.init<A>(describing:)(&v30, v17, v18);
    v21 = v20;
    v30 = sub_100172BEC(v19, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 14, v13 + 22);
    v22 = swift_bridgeObjectRelease(v21);
    *(_WORD *)(v13 + 22) = 2082;
    LOBYTE(v30) = *(_BYTE *)(v2 + 120);
    v23 = String.init<A>(describing:)(&v30, v17, v22);
    v25 = v24;
    v30 = sub_100172BEC(v23, v24, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 24, v13 + 32);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v13 + 32) = 2048;
    v26 = *(_QWORD *)(v2 + 128);
    swift_release(v2);
    v30 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 34, v13 + 42);
    swift_release(v2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s (with hysteresis) state changed from: %{public}s to: %{public}s (generation = %llu)", (uint8_t *)v13, 0x2Au);
    swift_arrayDestroy(v14, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_release_n(v2);
  }
  v27 = sub_100003DB8(&qword_10032B0E0);
  v28 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  *(_QWORD *)&result = Subject<>.send()(v27, v28).n128_u64[0];
  return result;
}

double sub_1001DC0EC(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double result;
  uint64_t v30;
  uint64_t v31;

  v2 = v1;
  v4 = *(unsigned __int8 *)(v1 + 120);
  if (v4 == 9)
  {
    if (a1 == 9)
      return result;
  }
  else if (a1 != 9 && v4 == a1)
  {
    return result;
  }
  v5 = *(_QWORD *)(v1 + 128);
  v6 = __CFADD__(v5, 1);
  v7 = v5 + 1;
  if (v6)
  {
    __break(1u);
    goto LABEL_14;
  }
  *(_QWORD *)(v1 + 128) = v7;
  if (qword_100315820 != -1)
LABEL_14:
    swift_once(&qword_100315820, sub_1000D95E4);
  v8 = type metadata accessor for Logger(0);
  sub_10000D744(v8, (uint64_t)qword_10033FD18);
  v10 = swift_retain_n(v1, v9);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = swift_slowAlloc(42, -1);
    v14 = swift_slowAlloc(96, -1);
    v31 = v14;
    *(_DWORD *)v13 = 136446978;
    v15 = *(_QWORD *)(v2 + 48);
    v16 = *(_QWORD *)(v2 + 56);
    swift_bridgeObjectRetain(v16);
    v30 = sub_100172BEC(v15, v16, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v13 + 12) = 2082;
    LOBYTE(v30) = a1;
    v17 = sub_100003DB8(&qword_100317BE8);
    v19 = String.init<A>(describing:)(&v30, v17, v18);
    v21 = v20;
    v30 = sub_100172BEC(v19, v20, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 14, v13 + 22);
    v22 = swift_bridgeObjectRelease(v21);
    *(_WORD *)(v13 + 22) = 2082;
    LOBYTE(v30) = *(_BYTE *)(v2 + 120);
    v23 = String.init<A>(describing:)(&v30, v17, v22);
    v25 = v24;
    v30 = sub_100172BEC(v23, v24, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 24, v13 + 32);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v13 + 32) = 2048;
    v26 = *(_QWORD *)(v2 + 128);
    swift_release(v2);
    v30 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v13 + 34, v13 + 42);
    swift_release(v2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "%{public}s (with hysteresis) state changed from: %{public}s to: %{public}s (generation = %llu)", (uint8_t *)v13, 0x2Au);
    swift_arrayDestroy(v14, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_release_n(v2);
  }
  v27 = sub_100003DB8(&qword_10032B0E0);
  v28 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  *(_QWORD *)&result = Subject<>.send()(v27, v28).n128_u64[0];
  return result;
}

uint64_t sub_1001DC3F0(__int16 a1)
{
  uint64_t v1;
  char v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  uint64_t v9;
  _BOOL4 v11;
  int v12;
  _BYTE v13[24];

  v2 = a1;
  v4 = *(unsigned __int16 *)(v1 + 120);
  sub_1001DC720();
  swift_beginAccess(v1 + 80, v13, 1, 0);
  v5 = *(_QWORD *)(v1 + 80);
  v6 = *(_QWORD *)(v1 + 88);
  *(_OWORD *)(v1 + 80) = xmmword_10024E030;
  *(_QWORD *)(v1 + 96) = 0;
  *(_WORD *)(v1 + 104) = 0;
  sub_10002117C(v5, v6);
  v7 = *(_WORD *)(v1 + 120);
  if (v7 == 2)
  {
    if (v2 == 2)
      goto LABEL_6;
    goto LABEL_5;
  }
  if (v2 == 2
    || (v11 = (v7 & 1) == 0, v12 = (v7 & 0x100) == 0, (a1 & 1) == v11)
    || v12 == (unsigned __int16)(a1 & 0x100) >> 8)
  {
LABEL_5:
    v8 = sub_100003DB8(&qword_10032B0E0);
    v9 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v8, v9);
  }
LABEL_6:
  *(_WORD *)(v1 + 120) = a1;
  return sub_1001DBAB0(v4);
}

double sub_1001DC50C(unsigned __int8 a1)
{
  uint64_t v1;
  int v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  v2 = a1;
  v3 = *(_BYTE *)(v1 + 120);
  sub_1001DC9E4((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_1001DEA64, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1001DEA60, (uint64_t (*)(uint64_t *, __n128))sub_1001DB134);
  swift_beginAccess(v1 + 80, v10, 1, 0);
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(_QWORD *)(v1 + 88);
  *(_OWORD *)(v1 + 80) = xmmword_10024E030;
  *(_QWORD *)(v1 + 96) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  sub_10002117C(v4, v5);
  v6 = *(unsigned __int8 *)(v1 + 120);
  if (v6 == 2)
  {
    if (v2 == 2)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v2 == 2 || ((v2 & 1) == 0) == (v6 & 1))
  {
LABEL_6:
    v7 = sub_100003DB8(&qword_10032B0E0);
    v8 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v7, v8);
  }
LABEL_7:
  *(_BYTE *)(v1 + 120) = v2;
  return sub_1001DBDDC(v3);
}

double sub_1001DC61C(unsigned __int8 a1)
{
  uint64_t v1;
  int v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  v2 = a1;
  v3 = *(_BYTE *)(v1 + 120);
  sub_1001DC9E4((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))sub_1001DE594, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10002117C, (uint64_t (*)(uint64_t *, __n128))sub_1001DB134);
  swift_beginAccess(v1 + 80, v10, 1, 0);
  v4 = *(_QWORD *)(v1 + 80);
  v5 = *(_QWORD *)(v1 + 88);
  *(_OWORD *)(v1 + 80) = xmmword_10024E030;
  *(_QWORD *)(v1 + 96) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  sub_10002117C(v4, v5);
  v6 = *(unsigned __int8 *)(v1 + 120);
  if (v6 == 9)
  {
    if (v2 == 9)
      goto LABEL_7;
    goto LABEL_6;
  }
  if (v2 == 9 || v6 != v2)
  {
LABEL_6:
    v7 = sub_100003DB8(&qword_10032B0E0);
    v8 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v7, v8);
  }
LABEL_7:
  *(_BYTE *)(v1 + 120) = v2;
  return sub_1001DC0EC(v3);
}

void sub_1001DC720()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(uint64_t *, _QWORD, __n128);
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26[4];
  _BYTE v27[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v26[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once(&qword_100315820, sub_1000D95E4);
LABEL_7:
    v17 = type metadata accessor for Logger(0);
    sub_10000D744(v17, (uint64_t)qword_10033FD18);
    swift_retain(v1);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v26[0] = v22;
      *(_DWORD *)v21 = 136446210;
      v23 = v1[6];
      v24 = v1[7];
      swift_bridgeObjectRetain(v24);
      v25 = sub_100172BEC(v23, v24, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, v26, v21 + 4, v21 + 12);
      swift_release(v1);
      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Deleted %{public}s hysteresis event", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

      swift_release(v1);
    }
    return;
  }
  swift_beginAccess(v1 + 10, v27, 0, 0);
  v9 = v1[11];
  if (v9 != 1)
  {
    v10 = v1[10];
    sub_1001DE594(v10, v1[11]);
    swift_unknownObjectRetain(v9);
    sub_10002117C(v10, v9);
    if (v9)
    {
      swift_unknownObjectRelease(v9);
      v11 = (void (*)(uint64_t *, _QWORD, __n128))sub_1001DB0F8((uint64_t)v26);
      v16 = *(_QWORD *)(v13 + 8);
      v15 = (_QWORD *)(v13 + 8);
      v14 = v16;
      if (v16 != 1)
      {
        *v15 = 0;
        v15[1] = 0;
        v12 = swift_unknownObjectRelease(v14);
      }
      v11(v26, 0, v12);
      if (qword_100315820 == -1)
        goto LABEL_7;
      goto LABEL_12;
    }
  }
}

void sub_1001DC9E4(void (*a1)(uint64_t, _QWORD, uint64_t, uint64_t), void (*a2)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t (*a3)(uint64_t *, __n128))
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  void (*v20)(uint64_t *, _QWORD, __n128);
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35[4];
  _BYTE v36[24];

  v7 = v3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v35[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v12 = static OS_dispatch_queue.main.getter(v13);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once(&qword_100315820, sub_1000D95E4);
LABEL_7:
    v26 = type metadata accessor for Logger(0);
    sub_10000D744(v26, (uint64_t)qword_10033FD18);
    swift_retain(v7);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(12, -1);
      v31 = swift_slowAlloc(32, -1);
      v35[0] = v31;
      *(_DWORD *)v30 = 136446210;
      v32 = *(_QWORD *)(v7 + 48);
      v33 = *(_QWORD *)(v7 + 56);
      swift_bridgeObjectRetain(v33);
      v34 = sub_100172BEC(v32, v33, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v30 + 4, v30 + 12);
      swift_release(v7);
      swift_bridgeObjectRelease(v33);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Deleted %{public}s hysteresis event", v30, 0xCu);
      swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1, -1);
      swift_slowDealloc(v30, -1, -1);

    }
    else
    {

      swift_release(v7);
    }
    return;
  }
  swift_beginAccess(v7 + 80, v36, 0, 0);
  v15 = *(_QWORD *)(v7 + 88);
  if (v15 != 1)
  {
    v16 = *(_QWORD *)(v7 + 96);
    v17 = *(_QWORD *)(v7 + 80);
    v18 = *(unsigned __int8 *)(v7 + 104);
    a1(v17, *(_QWORD *)(v7 + 88), v16, v18);
    swift_unknownObjectRetain(v15);
    a2(v17, v15, v16, v18);
    if (v15)
    {
      v19 = swift_unknownObjectRelease(v15);
      v20 = (void (*)(uint64_t *, _QWORD, __n128))a3(v35, v19);
      v25 = *(_QWORD *)(v22 + 8);
      v24 = (_QWORD *)(v22 + 8);
      v23 = v25;
      if (v25 != 1)
      {
        *v24 = 0;
        v24[1] = 0;
        v21 = swift_unknownObjectRelease(v23);
      }
      v20(v35, 0, v21);
      if (qword_100315820 == -1)
        goto LABEL_7;
      goto LABEL_12;
    }
  }
}

uint64_t sub_1001DCCB4(_QWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  uint64_t result;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;

  v2 = a1[2];
  if (v2 != a2[2])
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  v5 = a1[4];
  v6 = a1[5];
  v7 = a2[4];
  v8 = a2[5];
  v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0), result = 0, (v10 & 1) != 0))
  {
    v12 = v2 - 1;
    if (!v12)
      return 1;
    v13 = a2 + 7;
    for (i = a1 + 7; ; i += 2)
    {
      v15 = *(i - 1);
      v16 = *i;
      v17 = *(v13 - 1);
      v18 = *v13;
      v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0) & 1) == 0)
        break;
      v13 += 2;
      if (!--v12)
        return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1001DCD78(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  BOOL v19;
  uint64_t v21;

  v4 = type metadata accessor for ServiceOutages.Outage(0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v12 = (char *)&v21 - v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (v13 == *(_QWORD *)(a2 + 16))
  {
    if (!v13 || a1 == a2)
    {
      v17 = 1;
    }
    else
    {
      v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
      v15 = *(_QWORD *)(v10 + 72);
      v16 = v13 - 1;
      do
      {
        sub_1000E1F30(a1 + v14, (uint64_t)v12, type metadata accessor for ServiceOutages.Outage);
        sub_1000E1F30(a2 + v14, (uint64_t)v8, type metadata accessor for ServiceOutages.Outage);
        v17 = sub_1000ECEF0(v12, v8);
        sub_10000AFFC((uint64_t)v8, type metadata accessor for ServiceOutages.Outage);
        sub_10000AFFC((uint64_t)v12, type metadata accessor for ServiceOutages.Outage);
        v19 = v16-- != 0;
        if ((v17 & 1) == 0)
          break;
        v14 += v15;
      }
      while (v19);
    }
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_1001DCEB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t result;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  double v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double *v36;
  double *v37;
  double v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v4 = type metadata accessor for TargetTracks.TimePoint(0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v6, v9);
  v13 = (char *)&v41 - v12;
  v14 = *(_QWORD *)(a1 + 16);
  if (v14 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v14 || a1 == a2)
    return 1;
  v42 = v10;
  v15 = 0;
  v16 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = *(_QWORD *)(v11 + 72);
  v20 = type metadata accessor for TargetTracks.TimePoint;
  v41 = v19;
  while (1)
  {
    v22 = v19 * v15;
    v23 = v17;
    sub_1000E1F30(v17 + v19 * v15, (uint64_t)v13, v20);
    v24 = v18;
    v25 = v20;
    sub_1000E1F30(v18 + v22, (uint64_t)v8, v20);
    v26 = static Date.== infix(_:_:)(v13, v8);
    if ((v26 & 1) == 0)
      break;
    v27 = *(int *)(v42 + 20);
    v28 = *(_QWORD *)&v13[v27];
    v29 = *(_QWORD *)&v8[v27];
    v30 = *(_QWORD *)(v28 + 16);
    if (v30 != *(_QWORD *)(v29 + 16))
      break;
    if (v30)
      v31 = v28 == v29;
    else
      v31 = 1;
    if (!v31)
    {
      if (*(_QWORD *)(v28 + 32) != *(_QWORD *)(v29 + 32))
        break;
      v32 = *(double *)(v28 + 48);
      v33 = *(double *)(v29 + 48);
      v34 = static Angle.== infix(_:_:)(v26, *(double *)(v28 + 40), *(double *)(v29 + 40));
      if ((v34 & 1) == 0)
        break;
      v35 = static Angle.== infix(_:_:)(v34, v32, v33);
      if ((v35 & 1) == 0)
        break;
      v36 = (double *)(v29 + 72);
      v37 = (double *)(v28 + 72);
      while (--v30)
      {
        if (*((_QWORD *)v37 - 2) == *((_QWORD *)v36 - 2))
        {
          v38 = *v37;
          v39 = *v36;
          v40 = static Angle.== infix(_:_:)(v35, *(v37 - 1), *(v36 - 1));
          if ((v40 & 1) != 0)
          {
            v36 += 3;
            v37 += 3;
            v35 = static Angle.== infix(_:_:)(v40, v38, v39);
            if ((v35 & 1) != 0)
              continue;
          }
        }
        goto LABEL_21;
      }
    }
    ++v15;
    v20 = v25;
    sub_10000AFFC((uint64_t)v8, v25);
    sub_10000AFFC((uint64_t)v13, v25);
    result = 1;
    v17 = v23;
    v18 = v24;
    v19 = v41;
    if (v15 == v14)
      return result;
  }
LABEL_21:
  sub_10000AFFC((uint64_t)v8, type metadata accessor for TargetTracks.TimePoint);
  sub_10000AFFC((uint64_t)v13, type metadata accessor for TargetTracks.TimePoint);
  return 0;
}

uint64_t sub_1001DD0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v5;
  double v6;
  uint64_t v7;
  uint64_t v8;
  double *v9;
  double *v10;
  _BOOL8 v11;
  double v12;
  double v13;
  uint64_t v14;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (!v2 || a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
    return 0;
  v5 = *(double *)(a1 + 48);
  v6 = *(double *)(a2 + 48);
  v7 = static Angle.== infix(_:_:)(a1, *(double *)(a1 + 40), *(double *)(a2 + 40));
  if ((v7 & 1) == 0)
    return 0;
  v8 = static Angle.== infix(_:_:)(v7, v5, v6);
  if ((v8 & 1) == 0)
    return 0;
  v9 = (double *)(a2 + 72);
  v10 = (double *)(a1 + 72);
  do
  {
    v11 = --v2 == 0;
    if (!v2)
      break;
    if (*((_QWORD *)v10 - 2) != *((_QWORD *)v9 - 2))
      break;
    v12 = *v10;
    v13 = *v9;
    v14 = static Angle.== infix(_:_:)(v8, *(v10 - 1), *(v9 - 1));
    if ((v14 & 1) == 0)
      break;
    v9 += 3;
    v10 += 3;
    v8 = static Angle.== infix(_:_:)(v14, v12, v13);
  }
  while ((v8 & 1) != 0);
  return v11;
}

uint64_t sub_1001DD1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  BOOL v21;
  __n128 v22;
  __n128 v24;
  char v25;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2 && a1 != a2)
  {
    v3 = (uint64_t *)(a2 + 64);
    for (i = (uint64_t *)(a1 + 64); ; i += 5)
    {
      v9 = *(i - 4);
      if (v9 != *(v3 - 4) || *((unsigned __int8 *)i - 24) != *((unsigned __int8 *)v3 - 24))
        return 0;
      v12 = *(i - 2);
      v11 = *(i - 1);
      v13 = *i;
      v14 = *(v3 - 2);
      if (v12)
        break;
      if (v14)
        return 0;
      v12 = 0;
LABEL_8:
      sub_10007BB74(v12, v11, v13);
      v3 += 5;
      if (!--v2)
        return 1;
    }
    if (!v14)
      return 0;
    v15 = *(v3 - 1);
    v16 = *v3;
    v17 = *(_QWORD *)(v12 + 16);
    v18 = *(_QWORD *)(v12 + 24);
    v19 = *(_QWORD *)(v14 + 16);
    v20 = *(_QWORD *)(v14 + 24);
    v21 = v17 == v19 && v18 == v20;
    if (!v21 && (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v19, v20, 0) & 1) == 0)
    {
LABEL_33:
      sub_10007BB44(v12, v11, v13);
      sub_10007BB44(v12, v11, v13);
LABEL_35:
      sub_10007BB44(v14, v15, v16);
      sub_10007BB44(v12, v11, v13);
      sub_10007BB44(v14, v15, v16);
      swift_retain_n(v9, v24);
      swift_release(v14);
LABEL_36:
      swift_release(v12);
      swift_bridgeObjectRelease(v16);
      swift_bridgeObjectRelease(v13);
      sub_10007BB74(v12, v11, v13);
      swift_release(v9);
      sub_10007BB74(v14, v15, v16);
      swift_release(v9);
      sub_10007BB74(v12, v11, v13);
      return 0;
    }
    if (v13)
    {
      if (!v16)
        goto LABEL_33;
      if (v11 != v15 || v13 != v16)
      {
        v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v15, v16, 0);
        sub_10007BB44(v12, v11, v13);
        sub_10007BB44(v12, v11, v13);
        sub_10007BB44(v14, v15, v16);
        sub_10007BB44(v12, v11, v13);
        sub_10007BB44(v14, v15, v16);
        swift_retain_n(v9, v22);
        swift_release(v14);
        if ((v25 & 1) == 0)
          goto LABEL_36;
        goto LABEL_7;
      }
      sub_10007BB44(v12, v11, v13);
      sub_10007BB44(v12, v11, v13);
      sub_10007BB44(v14, v11, v13);
      sub_10007BB44(v12, v11, v13);
      v5 = v14;
      v6 = v11;
      v7 = v13;
    }
    else
    {
      sub_10007BB44(v12, v11, 0);
      sub_10007BB44(v12, v11, 0);
      if (v16)
      {
        v13 = 0;
        goto LABEL_35;
      }
      sub_10007BB44(v14, v15, 0);
      sub_10007BB44(v12, v11, 0);
      v5 = v14;
      v6 = v15;
      v7 = 0;
    }
    sub_10007BB44(v5, v6, v7);
    swift_retain_n(v9, v8);
    swift_release(v14);
LABEL_7:
    swift_release(v12);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v13);
    sub_10007BB74(v12, v11, v13);
    swift_release(v9);
    sub_10007BB74(v14, v15, v16);
    swift_release(v9);
    goto LABEL_8;
  }
  return 1;
}

uint64_t sub_1001DD530(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v14;
  __n128 v15;
  __n128 v16;
  uint64_t v17;

  v14 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  *(_QWORD *)(a6 + 16) = PassthroughSubject.init()(v15);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v17 = PassthroughSubject.init()(v16);
  *(_WORD *)(a6 + 104) = 512;
  *(_OWORD *)(a6 + 80) = xmmword_10024E030;
  *(_QWORD *)(a6 + 96) = 0;
  *(_BYTE *)(a6 + 106) = a7;
  *(_QWORD *)(a6 + 112) = 0;
  *(_BYTE *)(a6 + 120) = a7;
  *(_QWORD *)(a6 + 128) = 0;
  *(_QWORD *)(a6 + 24) = v17;
  *(_QWORD *)(a6 + 32) = a1;
  *(_QWORD *)(a6 + 40) = &off_1002F9D58;
  *(_QWORD *)(a6 + 48) = a2;
  *(_QWORD *)(a6 + 56) = a3;
  *(_QWORD *)(a6 + 64) = a4;
  *(_QWORD *)(a6 + 72) = a5;
  return a6;
}

uint64_t sub_1001DD608(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v13;
  uint64_t result;
  char v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  Swift::Int v24;
  int v25;
  uint64_t v26;
  int v27;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 24);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  if (v4 != v8 || v5 != v9)
  {
    v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v8, v9, 0);
    result = 0;
    if ((v13 & 1) == 0)
      return result;
  }
  if (v6 != v10 || v7 != v11)
  {
    v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v10, v11, 0);
    result = 0;
    if ((v16 & 1) == 0)
      return result;
  }
  v17 = *(_QWORD **)(a1 + 72);
  v18 = *(_QWORD **)(a2 + 72);
  if (v17)
  {
    if (!v18 || (sub_1001DCCB4(v17, v18) & 1) == 0)
      return 0;
  }
  else if (v18)
  {
    return 0;
  }
  v19 = *(_QWORD *)(a1 + 104);
  v20 = *(_QWORD *)(a2 + 104);
  if (!v19)
  {
    if (!v20)
    {
LABEL_25:
      v24 = *(_QWORD *)(a1 + 48);
      v25 = *(unsigned __int8 *)(a1 + 64);
      v26 = *(_QWORD *)(a2 + 48);
      v27 = *(unsigned __int8 *)(a2 + 64);
      if ((sub_1001BF408(v24, v26) & 1) != 0)
        return v25 ^ v27 ^ 1u;
      else
        return 0;
    }
    return 0;
  }
  if (!v20)
    return 0;
  v21 = *(_QWORD *)(a1 + 96);
  v22 = *(_QWORD *)(a2 + 96);
  if (v21 == v22 && v19 == v20)
    goto LABEL_25;
  v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v19, v22, v20, 0);
  result = 0;
  if ((v23 & 1) != 0)
    goto LABEL_25;
  return result;
}

BOOL sub_1001DD72C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  double v10;
  double v11;
  uint64_t v12;

  if ((static Date.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = type metadata accessor for ServicePredictionsModel.SkimmerPrediction(0);
  if (*(_QWORD *)(a1 + *(int *)(v4 + 20)) != *(_QWORD *)(a2 + *(int *)(v4 + 20)))
    return 0;
  v5 = *(int *)(v4 + 24);
  v6 = a1 + v5;
  v7 = *(_BYTE *)(a1 + v5 + 24);
  v8 = a2 + v5;
  v9 = *(_BYTE *)(v8 + 24);
  if ((v7 & 1) == 0)
  {
    if (*(_QWORD *)v6 != *(_QWORD *)v8)
      v9 = 1;
    if ((v9 & 1) != 0)
      return 0;
    v10 = *(double *)(v6 + 16);
    v11 = *(double *)(v8 + 16);
    v12 = static Angle.== infix(_:_:)(v4, *(double *)(v6 + 8), *(double *)(v8 + 8));
    return (v12 & 1) != 0 && (static Angle.== infix(_:_:)(v12, v10, v11) & 1) != 0;
  }
  return (*(_BYTE *)(v8 + 24) & 1) != 0;
}

uint64_t sub_1001DD7D8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(_QWORD);
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t, uint64_t);
  uint64_t v25;
  int v26;
  uint64_t v27;
  BOOL v28;
  uint64_t result;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  _BYTE *v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t (*v41)(_QWORD);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t (*v50)(_QWORD);
  uint64_t v51;
  char *v52;
  _BYTE v53[24];
  _BYTE v54[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchTime(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v52 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8(&qword_1003180C8);
  v8 = __chkstk_darwin(v6, v7);
  v10 = __chkstk_darwin(v8, v9);
  v12 = (char *)&v47 - v11;
  v14 = __chkstk_darwin(v10, v13);
  v16 = (char *)&v47 - v15;
  __chkstk_darwin(v14, v17);
  v20 = (char *)&v47 - v19;
  v21 = (uint64_t (*)(_QWORD))v1[10];
  if (!v21)
    goto LABEL_7;
  v49 = v18;
  v50 = v21;
  v48 = v12;
  v22 = v1[11];
  v23 = (uint64_t)v1 + OBJC_IVAR____TtCC8SOSBuddy21GuidanceMessagesModel13NudgeMessages__lastProducedExtraDetailsAt;
  swift_beginAccess((char *)v1 + OBJC_IVAR____TtCC8SOSBuddy21GuidanceMessagesModel13NudgeMessages__lastProducedExtraDetailsAt, v54, 0, 0);
  sub_10000B234(v23, (uint64_t)v20, &qword_1003180C8);
  v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  v25 = v3;
  v26 = v24(v20, 1, v2);
  v51 = v22;
  swift_retain(v22);
  v27 = sub_100007FF0((uint64_t)v20, &qword_1003180C8);
  v28 = v26 == 1;
  v3 = v25;
  if (v28)
    goto LABEL_10;
  v12 = v52;
  static DispatchTime.now()(v27);
  sub_10000B234(v23, (uint64_t)v16, &qword_1003180C8);
  result = v24(v16, 1, v2);
  if ((_DWORD)result != 1)
  {
    v30 = DispatchTime.uptimeNanoseconds.getter(result);
    v31 = DispatchTime.uptimeNanoseconds.getter(v30);
    if (v31 >= v30)
    {
      v34 = 0;
    }
    else
    {
      v32 = DispatchTime.uptimeNanoseconds.getter(v31);
      v33 = DispatchTime.uptimeNanoseconds.getter(v32);
      v34 = v32 - v33;
      if (v32 < v33)
      {
        __break(1u);
LABEL_7:
        v35 = v1[14];
        v1[14] = 0;
        v36 = swift_bridgeObjectRelease(v35);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v3 + 56))(v12, 1, 1, v2, v36);
        v37 = (uint64_t)v1 + OBJC_IVAR____TtCC8SOSBuddy21GuidanceMessagesModel13NudgeMessages__lastProducedExtraDetailsAt;
        swift_beginAccess((char *)v1 + OBJC_IVAR____TtCC8SOSBuddy21GuidanceMessagesModel13NudgeMessages__lastProducedExtraDetailsAt, v54, 33, 0);
        sub_100123FDC((uint64_t)v12, v37, &qword_1003180C8);
        v38 = v54;
LABEL_11:
        swift_endAccess(v38);
        return v1[14];
      }
    }
    v39 = *(void (**)(char *, uint64_t))(v3 + 8);
    v39(v12, v2);
    v27 = ((uint64_t (*)(char *, uint64_t))v39)(v16, v2);
    if (v34 < 0x3BAA0C40)
    {
      sub_10004DA00((uint64_t)v50, v51);
      return v1[14];
    }
LABEL_10:
    v41 = v50;
    v40 = v51;
    v42 = v50(v27);
    v43 = v1[14];
    v1[14] = v42;
    swift_bridgeObjectRelease(v43);
    v44 = (uint64_t)v48;
    static DispatchTime.now()(v45);
    sub_10004DA00((uint64_t)v41, v40);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v44, 0, 1, v2);
    v46 = v49;
    sub_10000B458(v44, v49, &qword_1003180C8);
    swift_beginAccess(v23, v53, 33, 0);
    sub_100123FDC(v46, v23, &qword_1003180C8);
    v38 = v53;
    goto LABEL_11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001DDB18(_QWORD *result, double a2)
{
  _QWORD *v2;
  double v3;
  double v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v2 = result;
  v3 = round(a2);
  if (v3 <= 30.0)
  {
    v17 = *result;
    swift_bridgeObjectRetain(result[1]);
    return (_QWORD *)v17;
  }
  v4 = floor(v3 + 0.5);
  v5 = v4 - floor(v4 / 60.0) * 60.0;
  v6 = 0.0;
  if (v5 > 30.0)
    v6 = 60.0;
  v7 = floor((v4 - v5 + v6) / 60.0);
  v8 = floor(v7 / 60.0);
  v9 = v7 - v8 * 60.0;
  if (v9 <= -9.22337204e18)
  {
    __break(1u);
    goto LABEL_21;
  }
  if (v9 >= 9.22337204e18)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ((~*(_QWORD *)&v8 & 0x7FF0000000000000) == 0 || (*(_QWORD *)&v9 & 0x7FF0000000000000) == 0x7FF0000000000000)
    goto LABEL_22;
  if (v8 <= -9.22337204e18)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  if (v8 < 9.22337204e18)
  {
    v11 = (uint64_t)v9;
    v12 = (uint64_t)v8;
    if ((uint64_t)v8 <= 0)
    {
      v15 = result[2];
      v14 = result[3];
      v18 = sub_100003DB8(&qword_100317970);
      v16 = swift_allocObject(v18, 72, 7);
      *(_OWORD *)(v16 + 16) = xmmword_10024E070;
      *(_QWORD *)(v16 + 56) = &type metadata for Int64;
      *(_QWORD *)(v16 + 64) = &protocol witness table for Int64;
      *(_QWORD *)(v16 + 32) = v11;
    }
    else
    {
      v13 = sub_100003DB8(&qword_100317970);
      if (v11 <= 0)
      {
        v15 = v2[4];
        v14 = v2[5];
        v16 = swift_allocObject(v13, 72, 7);
        *(_OWORD *)(v16 + 16) = xmmword_10024E070;
        *(_QWORD *)(v16 + 56) = &type metadata for Int64;
        *(_QWORD *)(v16 + 64) = &protocol witness table for Int64;
        *(_QWORD *)(v16 + 32) = v12;
      }
      else
      {
        v15 = v2[6];
        v14 = v2[7];
        v16 = swift_allocObject(v13, 112, 7);
        *(_OWORD *)(v16 + 16) = xmmword_10024DEE0;
        *(_QWORD *)(v16 + 56) = &type metadata for Int64;
        *(_QWORD *)(v16 + 64) = &protocol witness table for Int64;
        *(_QWORD *)(v16 + 32) = v12;
        *(_QWORD *)(v16 + 96) = &type metadata for Int64;
        *(_QWORD *)(v16 + 104) = &protocol witness table for Int64;
        *(_QWORD *)(v16 + 72) = v11;
      }
    }
    v17 = static String.localizedStringWithFormat(_:_:)(v15, v14, v16);
    swift_bridgeObjectRelease(v16);
    return (_QWORD *)v17;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1001DDD40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::Int v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;

  v2 = sub_100003DB8(&qword_1003249C8);
  v4 = __chkstk_darwin(v2, v3);
  v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4, v7);
  v9 = (char *)&v29 - v8;
  sub_10000B234(a1, (uint64_t)&v29 - v8, &qword_1003249C8);
  v10 = type metadata accessor for DeviceOrientationError(0);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48);
  if (v11(v9, 1, v10) == 1)
  {
    sub_100007FF0((uint64_t)v9, &qword_1003249C8);
  }
  else
  {
    v12 = sub_100187DDC();
    v14 = v13;
    sub_10000AFFC((uint64_t)v9, type metadata accessor for DeviceOrientationError);
    if (v14)
      goto LABEL_5;
  }
  swift_bridgeObjectRelease(0);
  v12 = 0;
  v14 = 0xE000000000000000;
LABEL_5:
  sub_10000B234(a1, (uint64_t)v6, &qword_1003249C8);
  if (v11(v6, 1, v10) == 1)
  {
    sub_100007FF0((uint64_t)v6, &qword_1003249C8);
  }
  else
  {
    v15 = sub_100187C9C();
    v17 = v16;
    sub_10000AFFC((uint64_t)v6, type metadata accessor for DeviceOrientationError);
    if (v17)
      goto LABEL_9;
  }
  swift_bridgeObjectRelease(0);
  v15 = 0;
  v17 = 0xE000000000000000;
LABEL_9:
  v18 = HIBYTE(v14) & 0xF;
  if ((v14 & 0x2000000000000000) == 0)
    v18 = v12 & 0xFFFFFFFFFFFFLL;
  if (v18)
  {
    v19 = sub_1002096DC((uint64_t)&off_1002E2030);
    v20 = type metadata accessor for GuidanceMessagesModel.NudgeMessages(0);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    v21 = sub_1001D0CBC(v12, v14, v12, v14, v15, v17, v19, 0, 1);
    v22 = v14;
  }
  else
  {
    swift_bridgeObjectRelease(v14);
    v23 = HIBYTE(v17) & 0xF;
    if ((v17 & 0x2000000000000000) == 0)
      v23 = v15 & 0xFFFFFFFFFFFFLL;
    if (!v23)
    {
      swift_bridgeObjectRelease(v17);
      return 0;
    }
    v24 = sub_1002096DC((uint64_t)&off_1002E2008);
    v25 = type metadata accessor for GuidanceMessagesModel.NudgeMessages(0);
    v21 = swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    *(_QWORD *)(v21 + 112) = 0;
    v26 = v21 + OBJC_IVAR____TtCC8SOSBuddy21GuidanceMessagesModel13NudgeMessages__lastProducedExtraDetailsAt;
    v27 = type metadata accessor for DispatchTime(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
    *(_QWORD *)(v21 + 16) = v15;
    *(_QWORD *)(v21 + 24) = v17;
    *(_QWORD *)(v21 + 32) = v15;
    *(_QWORD *)(v21 + 40) = v17;
    *(_OWORD *)(v21 + 72) = 0u;
    *(_OWORD *)(v21 + 88) = 0u;
    *(_QWORD *)(v21 + 104) = 0;
    *(_QWORD *)(v21 + 48) = v24;
    *(_QWORD *)(v21 + 56) = 0;
    *(_BYTE *)(v21 + 64) = 1;
    v22 = v17;
  }
  swift_bridgeObjectRetain(v22);
  return v21;
}

uint64_t sub_1001DDFF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  int v21;
  uint64_t v22;

  v10 = type metadata accessor for Date(0);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(a2 + 43) & 1) == 0 && *(_BYTE *)(a2 + 42) != 1)
    return 8;
  if (*(_QWORD *)(a4 + 64) && (unint64_t)*(unsigned __int8 *)(a4 + 73) << 8 == 512)
    return 0;
  if ((*(_BYTE *)(a3 + 80) & 1) != 0 || (*(_BYTE *)(a3 + 66) & 1) != 0 || (*(_BYTE *)(a3 + 192) & 1) != 0)
  {
    Date.init()(v13);
    sub_1001C8194((uint64_t)v15);
    v18 = v17;
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
    swift_bridgeObjectRelease(v18);
    if (v18)
      return 6;
    else
      return 7;
  }
  else
  {
    v19 = *(_QWORD *)(a3 + 200);
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 56) + 120) & 1) != 0)
    {
      return !sub_100067058(0, v19);
    }
    else if (sub_100067058(4u, v19))
    {
      return 5;
    }
    else
    {
      v20 = sub_100067058(0, *(_QWORD *)(a3 + 200));
      if ((a5 & 1) != 0 || v20)
      {
        v21 = *(unsigned __int8 *)(a3 + 129);
        if (v21 == 2 || (v21 & v20 & 1) == 0)
          return 3;
        else
          return 4;
      }
      else
      {
        return 2;
      }
    }
  }
}

uint64_t sub_1001DE180(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  int v5;
  __int128 v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 4;
    if ((unint64_t)(v1 - 1) < 4)
      v3 = v1 - 1;
    v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 3)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 3)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t sub_1001DE1F0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  __int128 v4;
  int v5;
  __int128 v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = 0;
    v3 = 3;
    if ((unint64_t)(v1 - 1) < 3)
      v3 = v1 - 1;
    v4 = 0uLL;
    do
    {
      if ((unint64_t)(v1 - 1) > 2)
      {
        __break(1u);
        goto LABEL_10;
      }
      v5 = *(_DWORD *)(result + 32 + 4 * v2);
      v6 = v4;
      *(_DWORD *)((unint64_t)&v6 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3))) = v5;
      v4 = v6;
      ++v2;
    }
    while (v1 != v2);
    if (v3 < 2)
      goto LABEL_10;
  }
  else
  {
LABEL_10:
    __break(1u);
  }
  return result;
}

uint64_t sub_1001DE260(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5)
{
  float32x4_t v6;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  float32x4_t v18;
  int32x4_t v19;
  int8x16_t v20;
  float32x4_t v21;
  float32x4_t v22;
  float32x4_t v23;
  float32x4_t v24;
  int32x4_t v25;
  int8x16_t v26;
  float32x4_t v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  float32x4_t v35;
  uint64_t v36;
  double v37;

  if ((a3 & 1) != 0 || (a5 & 1) != 0)
    return 0;
  v6.i64[0] = a1;
  v6.i64[1] = a2;
  v35 = v6;
  if (*(double *)&a4 < 0.0 || *(double *)&a4 > 6.28318531)
  {
    if (qword_100315848 != -1)
      swift_once(&qword_100315848, sub_1000D9674);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10000D744(v8, (uint64_t)qword_10033FD90);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      v13 = swift_slowAlloc(32, -1);
      v36 = a4;
      v37 = *(double *)&v13;
      v14.n128_u64[0] = 136446210;
      *(_DWORD *)v12 = 136446210;
      v15 = String.init<A>(describing:)(&v36, &type metadata for Angle, v14);
      v17 = v16;
      v36 = sub_100172BEC(v15, v16, (uint64_t *)&v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unexpected target heading value %{public}s", v12, 0xCu);
      swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);
    }

  }
  sub_1001DE1F0((uint64_t)&off_1002E21C0);
  v18 = vmulq_f32(v35, (float32x4_t)xmmword_100252120);
  v19 = (int32x4_t)vnegq_f32(v18);
  v20 = (int8x16_t)vtrn2q_s32((int32x4_t)v18, vtrn1q_s32((int32x4_t)v18, v19));
  v22 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 8uLL), *(float32x2_t *)v21.f32, 1), (float32x4_t)vextq_s8(v20, v20, 8uLL), v21.f32[0]);
  v23 = (float32x4_t)vrev64q_s32((int32x4_t)v18);
  v23.i32[0] = v19.i32[1];
  v23.i32[3] = v19.i32[2];
  v24 = vmlaq_laneq_f32(v22, v23, v21, 2);
  v25 = (int32x4_t)vnegq_f32(v24);
  v26 = (int8x16_t)vtrn2q_s32((int32x4_t)v24, vtrn1q_s32((int32x4_t)v24, v25));
  v27 = (float32x4_t)vrev64q_s32((int32x4_t)v24);
  v27.i32[0] = v25.i32[1];
  v27.i32[3] = v25.i32[2];
  v26.i64[0] = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v24, v35, 3), v27, v35, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v24, (int8x16_t)v25, 8uLL), *(float32x2_t *)v35.f32, 1), (float32x4_t)vextq_s8(v26, v26, 8uLL), v35.f32[0])).u64[0];
  v28 = atan2f(-*(float *)&v26.i32[1], *(float *)v26.i32) + -1.57079633;
  if (v28 < 0.0 || v28 >= 6.28318531)
    v28 = v28 - floor(v28 / 6.28318531) * 6.28318531;
  v37 = *(double *)&a4;
  v29 = Angle.animatableData.getter(v28);
  v30 = Angle.animatableData.getter(*(double *)&a4);
  Angle.animatableData.setter(v30 - v29);
  v31 = v37;
  if (v37 < 0.0 || v37 >= 6.28318531)
    v31 = v37 - floor(v37 / 6.28318531) * 6.28318531;
  if (v31 > 3.14159265)
  {
    v37 = v31;
    v32 = Angle.animatableData.getter(6.28318531);
    v33 = Angle.animatableData.getter(v31);
    Angle.animatableData.setter(v33 - v32);
    v31 = v37;
  }
  return *(_QWORD *)&v31;
}

uint64_t sub_1001DE570(uint64_t a1)
{
  swift_weakDestroy(a1);
  return a1;
}

uint64_t sub_1001DE594(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_unknownObjectRetain(a2);
  return result;
}

uint64_t sub_1001DE5A8()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001DE5CC(uint64_t a1)
{
  uint64_t v1;

  return sub_1001CE7E4(a1, v1);
}

double sub_1001DE5D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1001DE5E4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001DE5EC()
{
  uint64_t v0;

  return sub_1001D1BBC(v0);
}

uint64_t sub_1001DE5F4(uint64_t a1)
{
  uint64_t v1;

  return sub_1001D3130(a1, v1);
}

uint64_t sub_1001DE5FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001DE620@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 16))();
  *a1 = result;
  return result;
}

uint64_t sub_1001DE648(uint64_t a1)
{
  uint64_t v1;

  return sub_1001CA7C0(a1, v1);
}

unint64_t sub_1001DE650()
{
  unint64_t result;

  result = qword_100328510;
  if (!qword_100328510)
  {
    result = swift_getWitnessTable(&unk_10025D0D4, &type metadata for GuidanceModel.SuggestedAction);
    atomic_store(result, (unint64_t *)&qword_100328510);
  }
  return result;
}

_QWORD *sub_1001DE694(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1001DE6E8(uint64_t *a1)
{
  uint64_t v1;

  return sub_1001C17C8(a1, v1);
}

_QWORD *sub_1001DE6F0(char *a1)
{
  uint64_t v1;

  return sub_1001C1A04(a1, v1);
}

uint64_t sub_1001DE6F8(uint64_t a1)
{
  uint64_t v1;

  return sub_1001C1D5C(a1, v1);
}

uint64_t sub_1001DE700(uint64_t a1)
{
  uint64_t v1;

  return sub_1001C3D5C(a1, v1);
}

void sub_1001DE708()
{
  uint64_t v0;

  sub_1001C3DA4(v0);
}

void sub_1001DE710()
{
  uint64_t v0;

  sub_1001C4690(v0);
}

uint64_t sub_1001DE718()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(type metadata accessor for ServicePredictionsModel.SkimmerPrediction(0) - 8);
  v2 = *(unsigned __int8 *)(v1 + 80);
  v3 = (v2 + 16) & ~v2;
  v4 = v2 | 7;
  v5 = ((*(_QWORD *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  v6 = v0 + v3;
  v7 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8))(v6, v7);
  return swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1001DE794()
{
  type metadata accessor for ServicePredictionsModel.SkimmerPrediction(0);
  return sub_1001D2EC4();
}

uint64_t sub_1001DE7D8(uint64_t a1)
{
  return sub_1001DE868(a1, (void (*)(uint64_t))sub_1001CBE7C);
}

uint64_t sub_1001DE7E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001DE85C(uint64_t a1)
{
  return sub_1001DE868(a1, (void (*)(uint64_t))sub_1001CC9D0);
}

uint64_t sub_1001DE868(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_1001CC964(a1, *(_QWORD *)(v2 + 16), v2 + ((v5 + 24) & ~v5), a2);
}

double sub_1001DE8BC()
{
  uint64_t v0;

  return sub_1001D0940(v0);
}

double sub_1001DE8D4()
{
  uint64_t v0;

  return sub_1001D3E58(v0);
}

double sub_1001DE8DC()
{
  uint64_t v0;

  return sub_1001CB060(v0);
}

double sub_1001DE8E4()
{
  uint64_t v0;

  return sub_1001D09B0(v0);
}

uint64_t storeEnumTagSinglePayload for GuidanceMessagesModel.StatesForStats(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_1001DE938 + 4 * byte_10025CAC3[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1001DE96C + 4 * byte_10025CABE[v4]))();
}

uint64_t sub_1001DE96C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DE974(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001DE97CLL);
  return result;
}

uint64_t sub_1001DE988(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001DE990);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_1001DE994(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001DE99C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GuidanceMessagesModel.StatesForStats()
{
  return &type metadata for GuidanceMessagesModel.StatesForStats;
}

unint64_t sub_1001DE9BC()
{
  unint64_t result;

  result = qword_100328600;
  if (!qword_100328600)
  {
    result = swift_getWitnessTable(&unk_10025D2BC, &type metadata for GuidanceMessagesModel.StatesForStats);
    atomic_store(result, (unint64_t *)&qword_100328600);
  }
  return result;
}

ValueMetadata *type metadata accessor for TryOutTranscriptFooterView()
{
  return &type metadata for TryOutTranscriptFooterView;
}

ValueMetadata *type metadata accessor for TryOutTranscriptMessageView()
{
  return &type metadata for TryOutTranscriptMessageView;
}

ValueMetadata *type metadata accessor for TryOutTranscriptStatusView()
{
  return &type metadata for TryOutTranscriptStatusView;
}

uint64_t sub_1001DEA98(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029F410, 1);
}

uint64_t sub_1001DEAA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  unsigned __int8 v46;
  __n128 v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  unsigned __int8 v52;
  unsigned __int8 v53;
  char v54;
  char v55;
  char v56;
  char v57;
  _BYTE v58[7];
  _BYTE v59[7];
  _BYTE v60[7];
  _BYTE v61[7];
  _BYTE v62[7];

  v39 = a2;
  v3 = sub_100003DB8(&qword_100328608);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100003DB8(&qword_100328610);
  v8 = __chkstk_darwin(v38, v7);
  v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = static VerticalAlignment.center.getter(v8);
  sub_1001DEDE4(a1, (uint64_t)&v40);
  v28 = v40;
  v12 = v41;
  v31 = v42;
  v30 = v43;
  v13 = v44;
  v33 = v45;
  v32 = v46;
  v36 = v47;
  v35 = v48;
  v34 = v49;
  v14 = v50;
  v37 = v51;
  v57 = 1;
  v56 = v41;
  v55 = v44;
  v54 = v50;
  v53 = v52;
  v15 = a1 + OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id;
  v16 = &v6[*(int *)(v3 + 52)];
  v29 = v52;
  v17 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v16, v15, v17);
  *(_QWORD *)v6 = v11;
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  *(_DWORD *)(v6 + 17) = *(_DWORD *)v62;
  *((_DWORD *)v6 + 5) = *(_DWORD *)&v62[3];
  *((_QWORD *)v6 + 3) = v28;
  v6[32] = v12;
  *(_DWORD *)(v6 + 33) = *(_DWORD *)v61;
  *((_DWORD *)v6 + 9) = *(_DWORD *)&v61[3];
  v18 = v30;
  *((_QWORD *)v6 + 5) = v31;
  *((_QWORD *)v6 + 6) = v18;
  v6[56] = v13;
  LODWORD(v18) = *(_DWORD *)v60;
  *((_DWORD *)v6 + 15) = *(_DWORD *)&v60[3];
  *(_DWORD *)(v6 + 57) = v18;
  *((_QWORD *)v6 + 8) = v33;
  v6[72] = v32;
  *((_DWORD *)v6 + 19) = *(_DWORD *)&v59[3];
  *(_DWORD *)(v6 + 73) = *(_DWORD *)v59;
  v19 = v36;
  *((__n128 *)v6 + 5) = v36;
  v20 = v34;
  *((_QWORD *)v6 + 12) = v35;
  *((_QWORD *)v6 + 13) = v20;
  v6[112] = v14;
  *((_DWORD *)v6 + 29) = *(_DWORD *)&v58[3];
  *(_DWORD *)(v6 + 113) = *(_DWORD *)v58;
  *((_QWORD *)v6 + 15) = v37;
  v6[128] = v29;
  v21 = static Color.clear.getter(v19);
  v40 = v21;
  swift_retain(v21);
  v22 = AnyView.init<A>(_:)(&v40, &type metadata for Color, &protocol witness table for Color);
  sub_10000B234((uint64_t)v6, (uint64_t)v10, &qword_100328608);
  swift_release(v21);
  v23 = v38;
  *(_QWORD *)&v10[*(int *)(v38 + 36)] = v22;
  v24 = sub_100007FF0((uint64_t)v6, &qword_100328608);
  v25 = static VerticalEdge.Set.all.getter(v24);
  v26 = sub_1001E10D4();
  View.listRowSeparator(_:edges:)(2, v25, v23, v26);
  return sub_100007FF0((uint64_t)v10, &qword_100328610);
}

double sub_1001DEDE4@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  char v32;
  double result;
  _QWORD v34[2];

  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8SOSBuddy26TryOutTranscriptStatusItem_content + 8);
  v34[0] = *(_QWORD *)(a1 + OBJC_IVAR____TtC8SOSBuddy26TryOutTranscriptStatusItem_content);
  v34[1] = v3;
  v4 = sub_10002B3F4();
  v5 = swift_bridgeObjectRetain(v3);
  v6 = Text.init<A>(_:)(v34, &type metadata for String, v4, v5);
  v8 = v7;
  v10 = v9;
  v12 = v11 & 1;
  v13 = static Font.caption.getter(v6, v7);
  v14 = Text.font(_:)(v13, v6, v8, v12, v10);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  swift_release(v13);
  sub_10002B438(v6, v8, v12);
  swift_bridgeObjectRelease(v10);
  if (qword_100315780 != -1)
    swift_once(&qword_100315780, sub_100051148);
  v21 = v18 & 1;
  v22 = qword_10033FC38;
  swift_retain(qword_10033FC38);
  v24 = Text.foregroundColor(_:)(v23, v14, v16, v21, v20);
  v26 = v25;
  v28 = v27;
  v30 = v29;
  swift_release(v22);
  sub_10002B438(v14, v16, v21);
  *(_QWORD *)&v31 = swift_bridgeObjectRelease(v20).n128_u64[0];
  v32 = static Edge.Set.all.getter(v31);
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = v24;
  *(_QWORD *)(a2 + 24) = v26;
  *(_BYTE *)(a2 + 32) = v28 & 1;
  *(_QWORD *)(a2 + 40) = v30;
  *(_BYTE *)(a2 + 48) = v32;
  *(_OWORD *)(a2 + 56) = xmmword_10025D2F0;
  *(_OWORD *)(a2 + 72) = xmmword_10025D2F0;
  *(_BYTE *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_BYTE *)(a2 + 104) = 1;
  sub_10002B750(v24, v26, v28 & 1);
  swift_bridgeObjectRetain(v30);
  sub_10002B438(v24, v26, v28 & 1);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v30).n128_u64[0];
  return result;
}

uint64_t sub_1001DEFB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1001DEAA8(*v1, a1);
}

uint64_t sub_1001DEFB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  double v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE v33[12];
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  BOOL v46;

  v36 = a2;
  v3 = sub_100003DB8(&qword_100328638);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = &v33[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v35 = sub_100003DB8(&qword_100328640);
  v9 = __chkstk_darwin(v35, v8);
  v11 = &v33[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = *(_BYTE *)(a1 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_sender);
  v34 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_lastConsecutiveMessage);
  v13 = static VerticalAlignment.center.getter(v9);
  v45 = a1;
  v46 = (v12 & 1) != 0;
  v14 = sub_1001E1170();
  v15 = sub_1001E11B4();
  swift_retain(a1);
  _ConditionalContent<>.init(storage:)(&v45, &type metadata for TryOutTranscriptMyMessageView, &type metadata for TryOutTranscriptOtherMessageView, v14, v15);
  v16 = v37;
  v17 = v38;
  v18 = sub_10019C8C4();
  v20 = v19;
  v37 = static Color.clear.getter(v21);
  v22 = AnyView.init<A>(_:)(&v37, &type metadata for Color, &protocol witness table for Color);
  v37 = v13;
  v38 = 0;
  v39 = 1;
  v40 = v16;
  v41 = v17;
  v42 = v18;
  v43 = v20;
  v44 = v22;
  v23 = static VerticalEdge.Set.all.getter(v22);
  v24 = sub_100003DB8(&qword_100328658);
  v25 = sub_1001E11F8();
  View.listRowSeparator(_:edges:)(2, v23, v24, v25);
  swift_release(v22);
  swift_bridgeObjectRelease(v20);
  swift_release(v16);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v11, v7, v3);
  v26 = &v11[*(int *)(v35 + 36)];
  v26[32] = 0;
  *(_OWORD *)v26 = 0u;
  *((_OWORD *)v26 + 1) = 0u;
  (*(void (**)(_BYTE *, uint64_t))(v4 + 8))(v7, v3);
  if (v34)
    v28 = 0x4028000000000000;
  else
    v28 = 0x4000000000000000;
  v29 = static Edge.Set.all.getter(v27);
  v30 = v36;
  sub_10000B234((uint64_t)v11, v36, &qword_100328640);
  v31 = v30 + *(int *)(sub_100003DB8(&qword_100328678) + 36);
  *(_BYTE *)v31 = v29;
  *(_QWORD *)(v31 + 8) = 0;
  *(_QWORD *)(v31 + 16) = 0;
  *(_QWORD *)(v31 + 24) = v28;
  *(_QWORD *)(v31 + 32) = 0;
  *(_BYTE *)(v31 + 40) = 0;
  return sub_100007FF0((uint64_t)v11, &qword_100328640);
}

uint64_t sub_1001DF244@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1001DEFB8(*v1, a1);
}

_QWORD *sub_1001DF24C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;
  char v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE __src[296];
  _BYTE v22[304];
  _QWORD v23[40];
  char v24;
  char v25;
  char v26;
  char v27;
  _QWORD v28[2];
  char v29;
  _BYTE v30[296];

  v4 = static Alignment.center.getter(a1);
  v6 = _FrameLayout.init(width:height:alignment:)(&v15, 0x404E000000000000, 0, 0x3FF0000000000000, 0, v4, v5);
  v7 = v15;
  v8 = v16;
  v9 = v17;
  v10 = v18;
  v11 = v19;
  v12 = v20;
  v13 = static HorizontalAlignment.trailing.getter(v6);
  sub_1001DF394(a1, (uint64_t)__src);
  v22[296] = 0;
  memcpy(&v22[7], __src, 0x121uLL);
  v23[0] = v13;
  v23[1] = 0;
  LOBYTE(v23[2]) = 0;
  memcpy((char *)&v23[2] + 1, v22, 0x128uLL);
  v27 = 1;
  v26 = 1;
  v25 = v8;
  v24 = v10;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  *(_QWORD *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 24) = 1;
  *(_QWORD *)(a2 + 32) = v7;
  *(_BYTE *)(a2 + 40) = v8;
  *(_QWORD *)(a2 + 48) = v9;
  *(_BYTE *)(a2 + 56) = v10;
  *(_QWORD *)(a2 + 64) = v11;
  *(_QWORD *)(a2 + 72) = v12;
  memcpy((void *)(a2 + 80), v23, 0x139uLL);
  v28[0] = v13;
  v28[1] = 0;
  v29 = 0;
  memcpy(v30, v22, sizeof(v30));
  sub_1001E1B24(v23);
  return sub_1001E1C48(v28);
}

_QWORD *sub_1001DF394@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  _BYTE v29[176];
  uint64_t v30;
  uint64_t v31;
  unsigned __int8 v32;
  __int128 v33;
  _BYTE v34[48];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[31];
  _OWORD v41[10];
  uint64_t v42;
  _OWORD v43[11];
  char v44;

  v27 = static HorizontalAlignment.trailing.getter();
  sub_1001DF708(a1, (uint64_t)v41);
  *(_OWORD *)((char *)&v43[7] + 7) = v41[7];
  *(_OWORD *)((char *)&v43[8] + 7) = v41[8];
  *(_OWORD *)((char *)&v43[9] + 7) = v41[9];
  *(_OWORD *)((char *)&v43[3] + 7) = v41[3];
  *(_OWORD *)((char *)&v43[4] + 7) = v41[4];
  *(_OWORD *)((char *)&v43[5] + 7) = v41[5];
  *(_OWORD *)((char *)&v43[6] + 7) = v41[6];
  *(_OWORD *)((char *)v43 + 7) = v41[0];
  *(_OWORD *)((char *)&v43[1] + 7) = v41[1];
  v44 = 1;
  *(_QWORD *)((char *)&v43[10] + 7) = v42;
  *(_OWORD *)((char *)&v43[2] + 7) = v41[2];
  if (*(_BYTE *)(a1 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_status))
  {
    if (*(_BYTE *)(a1 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_status) == 1)
    {
      swift_bridgeObjectRelease(0xE400000000000000);
      goto LABEL_7;
    }
    v6 = 0xE400000000000000;
    v5 = 1701736302;
  }
  else
  {
    v5 = 0x676E69646E6573;
    v6 = 0xE700000000000000;
  }
  v7 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, 1953391987, 0xE400000000000000, 0);
  swift_bridgeObjectRelease(v6);
  if ((v7 & 1) == 0)
  {
    v26 = 0;
    v17 = 0;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v14 = 0;
    v13 = 0;
    v15 = 0;
    v16 = 0;
    v18 = 0;
    goto LABEL_9;
  }
LABEL_7:
  v26 = static HorizontalAlignment.leading.getter(v4);
  sub_1001DF8B8((uint64_t)&v30);
  v8 = v30;
  v9 = v31;
  v10 = v32;
  v11 = *(_QWORD *)((char *)&v33 + 7);
  v12 = HIBYTE(v33);
  v14 = *(_QWORD *)&v34[7];
  v13 = *(_QWORD *)&v34[15];
  v15 = *(_QWORD *)&v34[23];
  v16 = *(_QWORD *)&v34[31];
  v17 = 1;
  v18 = v34[39];
LABEL_9:
  *(_OWORD *)&v29[113] = v43[7];
  *(_OWORD *)&v29[129] = v43[8];
  *(_OWORD *)&v29[145] = v43[9];
  *(_OWORD *)&v29[160] = *(_OWORD *)((char *)&v43[9] + 15);
  *(_OWORD *)&v29[49] = v43[3];
  *(_OWORD *)&v29[65] = v43[4];
  *(_OWORD *)&v29[81] = v43[5];
  *(_OWORD *)&v29[97] = v43[6];
  *(_OWORD *)&v29[1] = v43[0];
  v28 = (unint64_t)v27;
  v29[0] = 1;
  *(_OWORD *)&v29[17] = v43[1];
  *(_OWORD *)&v29[33] = v43[2];
  v19 = *(_OWORD *)&v29[128];
  *(_OWORD *)(a2 + 128) = *(_OWORD *)&v29[112];
  *(_OWORD *)(a2 + 144) = v19;
  v20 = *(_OWORD *)&v29[160];
  *(_OWORD *)(a2 + 160) = *(_OWORD *)&v29[144];
  *(_OWORD *)(a2 + 176) = v20;
  v21 = *(_OWORD *)&v29[64];
  *(_OWORD *)(a2 + 64) = *(_OWORD *)&v29[48];
  *(_OWORD *)(a2 + 80) = v21;
  v22 = *(_OWORD *)&v29[96];
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v29[80];
  *(_OWORD *)(a2 + 112) = v22;
  v23 = *(_OWORD *)v29;
  *(_OWORD *)a2 = v28;
  *(_OWORD *)(a2 + 16) = v23;
  v24 = *(_OWORD *)&v29[32];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)&v29[16];
  *(_OWORD *)(a2 + 48) = v24;
  *(_QWORD *)(a2 + 192) = v26;
  *(_QWORD *)(a2 + 200) = 0;
  *(_QWORD *)(a2 + 208) = v17;
  *(_QWORD *)(a2 + 216) = v8;
  *(_QWORD *)(a2 + 224) = v9;
  *(_QWORD *)(a2 + 232) = v10;
  *(_QWORD *)(a2 + 240) = v11;
  *(_QWORD *)(a2 + 248) = v12;
  *(_QWORD *)(a2 + 256) = v14;
  *(_QWORD *)(a2 + 264) = v13;
  *(_QWORD *)(a2 + 272) = v15;
  *(_QWORD *)(a2 + 280) = v16;
  *(_BYTE *)(a2 + 288) = v18;
  sub_1001E1D70(&v28);
  sub_1001E1C10(v26, 0, v17, v8, v9, v10, v11);
  sub_1001E1D38(v26, 0, v17, v8, v9, v10, v11);
  v38 = v43[7];
  v39 = v43[8];
  *(_OWORD *)v40 = v43[9];
  *(_OWORD *)&v40[15] = *(_OWORD *)((char *)&v43[9] + 15);
  *(_OWORD *)&v34[32] = v43[3];
  v35 = v43[4];
  v36 = v43[5];
  v37 = v43[6];
  v33 = v43[0];
  *(_OWORD *)v34 = v43[1];
  v30 = v27;
  v31 = 0;
  v32 = 1;
  *(_OWORD *)&v34[16] = v43[2];
  return sub_1001E1DE0(&v30);
}

double sub_1001DF708@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  uint64_t KeyPath;
  uint64_t v13;
  double v14;
  char v15;
  char v16;
  uint64_t v17;
  double result;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v4 = (uint64_t *)(a1 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_content);
  v5 = *(unsigned __int8 *)(a1 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_content + 32);
  if (v5 == 1)
    v6 = static HorizontalAlignment.leading.getter(a1);
  else
    v6 = static HorizontalAlignment.trailing.getter();
  v7 = v4[1];
  v22 = *v4;
  v23 = v6;
  v8 = v4[2];
  v9 = v4[3];
  v21 = v8;
  swift_bridgeObjectRetain(v7);
  *(_QWORD *)&v10 = swift_bridgeObjectRetain(v9).n128_u64[0];
  v11 = static Edge.Set.all.getter(v10);
  v19 = v11;
  v20 = static Color.white.getter(v11);
  KeyPath = swift_getKeyPath(&unk_10025D5B0);
  if (qword_100315770 != -1)
    swift_once(&qword_100315770, sub_100051098);
  v13 = qword_10033FC28;
  *(_QWORD *)&v14 = swift_retain(qword_10033FC28).n128_u64[0];
  v15 = static Edge.Set.all.getter(v14);
  v16 = *(_BYTE *)(a1 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_lastConsecutiveMessage);
  v17 = static HorizontalAlignment.trailing.getter();
  *(_QWORD *)a2 = v23;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v22;
  *(_QWORD *)(a2 + 32) = v7;
  *(_QWORD *)(a2 + 40) = v21;
  *(_QWORD *)(a2 + 48) = v9;
  *(_BYTE *)(a2 + 56) = v5;
  *(_BYTE *)(a2 + 64) = v19;
  *(_OWORD *)(a2 + 72) = xmmword_10025D300;
  result = 7.0;
  *(_OWORD *)(a2 + 88) = xmmword_10025D310;
  *(_BYTE *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = KeyPath;
  *(_QWORD *)(a2 + 120) = v20;
  *(_QWORD *)(a2 + 128) = v13;
  *(_BYTE *)(a2 + 136) = v15;
  *(_BYTE *)(a2 + 137) = 1;
  *(_BYTE *)(a2 + 138) = v16;
  *(_WORD *)(a2 + 139) = 256;
  *(_QWORD *)(a2 + 144) = v17;
  *(_QWORD *)(a2 + 152) = sub_1001DF894;
  *(_QWORD *)(a2 + 160) = 0;
  return result;
}

uint64_t sub_1001DF894()
{
  uint64_t v0;

  v0 = static HorizontalAlignment.trailing.getter();
  return ViewDimensions.subscript.getter(v0);
}

void sub_1001DF8B8(uint64_t a1@<X8>)
{
  id v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  double v34;
  char v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  Swift::String v40;
  Swift::String v41;

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v41._object = (void *)0x800000010026FC10;
  v3._countAndFlagsBits = 1953391955;
  v3._object = (void *)0xE400000000000000;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v41._countAndFlagsBits = 0xD000000000000029;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v41);

  v40 = v5;
  v6 = sub_10002B3F4();
  v8 = Text.init<A>(_:)(&v40, &type metadata for String, v6, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = static Font.caption.getter(v8, v9);
  static Font.Weight.semibold.getter(v15);
  v16 = Font.weight(_:)(v15);
  swift_release(v15);
  v17 = Text.font(_:)(v16, v8, v10, v14, v12);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  swift_release(v16);
  sub_10002B438(v8, v10, v14);
  swift_bridgeObjectRelease(v12);
  if (qword_100315780 != -1)
    swift_once(&qword_100315780, sub_100051148);
  v24 = v21 & 1;
  v25 = qword_10033FC38;
  swift_retain(qword_10033FC38);
  v27 = Text.foregroundColor(_:)(v26, v17, v19, v24, v23);
  v29 = v28;
  v31 = v30;
  v33 = v32;
  swift_release(v25);
  sub_10002B438(v17, v19, v24);
  *(_QWORD *)&v34 = swift_bridgeObjectRelease(v23).n128_u64[0];
  v35 = static Edge.Set.all.getter(v34);
  v36 = EdgeInsets.init(_all:)(4.0);
  *(_QWORD *)a1 = v27;
  *(_QWORD *)(a1 + 8) = v29;
  *(_BYTE *)(a1 + 16) = v31 & 1;
  *(_QWORD *)(a1 + 24) = v33;
  *(_BYTE *)(a1 + 32) = v35;
  *(double *)(a1 + 40) = v36;
  *(_QWORD *)(a1 + 48) = v37;
  *(_QWORD *)(a1 + 56) = v38;
  *(_QWORD *)(a1 + 64) = v39;
  *(_BYTE *)(a1 + 72) = 0;
}

_QWORD *sub_1001DFAB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1001DF24C(*v1, a1);
}

void *sub_1001DFAB8@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  double v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  char v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  char v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  __n128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  char v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  char v129;
  char v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  double v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v148;
  char v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  uint64_t v157;
  char v158;
  _BYTE v159[7];
  _BYTE v160[7];
  _BYTE v161[7];
  _BYTE v162[7];
  _BYTE v163[7];
  _BYTE v164[7];
  _BYTE v165[7];
  _BYTE v166[7];
  _BYTE v167[7];
  _BYTE __src[257];
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  double v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  _BYTE v179[7];
  uint64_t v180;
  uint64_t v181;
  char v182;
  _BYTE v183[7];
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  _BYTE v188[7];
  uint64_t v189;
  char v190;
  _BYTE v191[7];
  double v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char v196;
  _BYTE v197[7];
  uint64_t v198;
  uint64_t v199;
  char v200;
  _BYTE v201[7];
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char v205;
  _BYTE v206[7];
  uint64_t v207;
  _QWORD __dst[34];

  if ((*(_BYTE *)(v1 + 32) & 1) != 0)
  {
    v28 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000011, 0x800000010026FC40);
    v29 = Text.init(_:tableName:bundle:comment:)(v28);
    v31 = v30;
    v33 = v32;
    v35 = v34 & 1;
    v36 = static Font.body.getter(v29);
    v37 = Font.bold()(v36);
    swift_release(v36);
    v142 = Text.font(_:)(v37, v29, v31, v35, v33);
    v144 = v38;
    LOBYTE(v36) = v39;
    v145 = v40;
    swift_release(v37);
    v158 = v36 & 1;
    sub_10002B438(v29, v31, v35);
    swift_bridgeObjectRelease(v33);
    v130 = static Edge.Set.bottom.getter(v41);
    v42 = EdgeInsets.init(_all:)(8.0);
    v44 = v43;
    v46 = v45;
    v48 = v47;
    v49 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000012, 0x8000000100265F60);
    v50 = Text.init(_:tableName:bundle:comment:)(v49);
    v52 = v51;
    v54 = v53;
    v56 = v55 & 1;
    v57 = static Font.body.getter(v50);
    v58 = Font.bold()(v57);
    swift_release(v57);
    v59 = Text.font(_:)(v58, v50, v52, v56, v54);
    v137 = v60;
    v139 = v59;
    LOBYTE(v57) = v61;
    v140 = v62;
    swift_release(v58);
    v156 = v57 & 1;
    sub_10002B438(v50, v52, v56);
    swift_bridgeObjectRelease(v54);
    v63 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000011, 0x800000010026FD00);
    v64 = Text.init(_:tableName:bundle:comment:)(v63);
    v66 = v65;
    v68 = v67;
    v70 = v69 & 1;
    v71 = static Font.body.getter(v64);
    v154 = Text.font(_:)(v71, v64, v66, v70, v68);
    v135 = v72;
    v136 = v73;
    LOBYTE(v58) = v74;
    swift_release(v71);
    v149 = v58 & 1;
    sub_10002B438(v64, v66, v70);
    swift_bridgeObjectRelease(v68);
    v129 = static Edge.Set.bottom.getter(v75);
    v76 = EdgeInsets.init(_all:)(8.0);
    v78 = v77;
    v80 = v79;
    v82 = v81;
    v83 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x800000010026FD70);
    v84 = Text.init(_:tableName:bundle:comment:)(v83);
    v86 = v85;
    v88 = v87;
    v90 = v89 & 1;
    v91 = static Font.body.getter(v84);
    v92 = Font.bold()(v91);
    swift_release(v91);
    v93 = Text.font(_:)(v92, v84, v86, v90, v88);
    v150 = v94;
    v152 = v93;
    v96 = v95;
    v131 = v97;
    swift_release(v92);
    LOBYTE(v92) = v96 & 1;
    sub_10002B438(v84, v86, v90);
    swift_bridgeObjectRelease(v88);
    v98 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000031, 0x800000010026FDF0);
    v99 = Text.init(_:tableName:bundle:comment:)(v98);
    v101 = v100;
    v103 = v102;
    v105 = v104 & 1;
    v106 = static Font.body.getter(v99);
    v107 = Text.font(_:)(v106, v99, v101, v105, v103);
    v132 = v108;
    v133 = v107;
    v110 = v109;
    v134 = v111;
    swift_release(v106);
    sub_10002B438(v99, v101, v105);
    swift_bridgeObjectRelease(v103);
    sub_10002B750(v142, v144, v158);
    swift_bridgeObjectRetain(v145);
    sub_10002B750(v139, v137, v156);
    swift_bridgeObjectRetain(v140);
    sub_10002B750(v154, v135, v149);
    swift_bridgeObjectRetain(v136);
    sub_10002B750(v152, v150, v92);
    swift_bridgeObjectRetain(v131);
    sub_10002B750(v133, v132, v110 & 1);
    swift_bridgeObjectRetain(v134);
    sub_10002B750(v142, v144, v158);
    swift_bridgeObjectRetain(v145);
    sub_10002B750(v139, v137, v156);
    swift_bridgeObjectRetain(v140);
    sub_10002B750(v154, v135, v149);
    swift_bridgeObjectRetain(v136);
    sub_10002B750(v152, v150, v92);
    swift_bridgeObjectRetain(v131);
    sub_10002B750(v133, v132, v110 & 1);
    swift_bridgeObjectRetain(v134);
    sub_10002B438(v133, v132, v110 & 1);
    swift_bridgeObjectRelease(v134);
    sub_10002B438(v152, v150, v92);
    swift_bridgeObjectRelease(v131);
    sub_10002B438(v154, v135, v149);
    swift_bridgeObjectRelease(v136);
    sub_10002B438(v139, v137, v156);
    swift_bridgeObjectRelease(v140);
    sub_10002B438(v142, v144, v158);
    swift_bridgeObjectRelease(v145);
    v169 = v142;
    v170 = v144;
    LOBYTE(v171) = v158;
    *(_DWORD *)((char *)&v171 + 1) = *(_DWORD *)v167;
    HIDWORD(v171) = *(_DWORD *)&v167[3];
    v172 = v145;
    LOBYTE(v173) = v130;
    *(_DWORD *)((char *)&v173 + 1) = *(_DWORD *)v166;
    HIDWORD(v173) = *(_DWORD *)&v166[3];
    v174 = v42;
    v175 = v44;
    v176 = v46;
    v177 = v48;
    v178 = 0;
    *(_DWORD *)&v179[3] = *(_DWORD *)&v165[3];
    *(_DWORD *)v179 = *(_DWORD *)v165;
    v180 = v139;
    v181 = v137;
    v182 = v156;
    *(_DWORD *)&v183[3] = *(_DWORD *)&v164[3];
    *(_DWORD *)v183 = *(_DWORD *)v164;
    v184 = v140;
    v185 = v154;
    v186 = v135;
    v187 = v149;
    *(_DWORD *)v188 = *(_DWORD *)v163;
    *(_DWORD *)&v188[3] = *(_DWORD *)&v163[3];
    v189 = v136;
    v190 = v129;
    *(_DWORD *)&v191[3] = *(_DWORD *)&v162[3];
    *(_DWORD *)v191 = *(_DWORD *)v162;
    v192 = v76;
    v193 = v78;
    v194 = v80;
    v195 = v82;
    v196 = 0;
    *(_DWORD *)v197 = *(_DWORD *)v161;
    *(_DWORD *)&v197[3] = *(_DWORD *)&v161[3];
    v198 = v152;
    v199 = v150;
    v200 = v92;
    *(_DWORD *)v201 = *(_DWORD *)v160;
    *(_DWORD *)&v201[3] = *(_DWORD *)&v160[3];
    v202 = v131;
    v203 = v133;
    v204 = v132;
    LOBYTE(v90) = v110 & 1;
    v205 = v110 & 1;
    *(_DWORD *)v206 = *(_DWORD *)v159;
    *(_DWORD *)&v206[3] = *(_DWORD *)&v159[3];
    v207 = v134;
    sub_10002B464((uint64_t)&v169);
    sub_1001E21C8((uint64_t)&v169, (uint64_t)__dst);
    v112 = sub_100003DB8(&qword_100328710);
    v113 = sub_100003DB8(&qword_100328718);
    v114 = sub_1000084FC(&qword_100328720, &qword_100328710, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v115 = sub_1000084FC(&qword_100328728, &qword_100328718, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(__dst, v112, v113, v114, v115);
    sub_10002B438(v133, v132, v90);
    swift_bridgeObjectRelease(v134);
    sub_10002B438(v152, v150, v92);
    swift_bridgeObjectRelease(v131);
    sub_10002B438(v154, v135, v149);
    swift_bridgeObjectRelease(v136);
    sub_10002B438(v139, v137, v156);
    swift_bridgeObjectRelease(v140);
    sub_10002B438(v142, v144, v158);
    v116 = v145;
  }
  else
  {
    v2 = *(_QWORD *)(v1 + 8);
    v3 = *(_QWORD *)(v1 + 16);
    v4 = *(_QWORD *)(v1 + 24);
    if (v2)
    {
      __dst[0] = *(_QWORD *)v1;
      __dst[1] = v2;
      v5 = sub_10002B3F4();
      v6 = swift_bridgeObjectRetain(v2);
      v7 = Text.init<A>(_:)(__dst, &type metadata for String, v5, v6);
      v9 = v8;
      v11 = v10;
      v13 = v12 & 1;
      v14 = static Font.headline.getter(v7);
      v15 = Font.bold()(v14);
      swift_release(v14);
      v148 = Text.font(_:)(v15, v7, v9, v13, v11);
      v155 = v16;
      v157 = v17;
      v19 = v18;
      swift_release(v15);
      v153 = v19 & 1;
      sub_10002B438(v7, v9, v13);
      swift_bridgeObjectRelease(v11);
      LOBYTE(v7) = static Edge.Set.bottom.getter(v20);
      v143 = EdgeInsets.init(_all:)(8.0);
      v22 = v21;
      v24 = v23;
      v26 = v25;
      v27 = v7;
    }
    else
    {
      v148 = 0;
      v153 = 0;
      v155 = 0;
      v157 = 0;
      v27 = 0;
      v143 = 0.0;
      v22 = 0;
      v24 = 0;
      v26 = 0;
    }
    __dst[0] = v3;
    __dst[1] = v4;
    v117 = sub_10002B3F4();
    v118 = swift_bridgeObjectRetain(v4);
    v119 = Text.init<A>(_:)(__dst, &type metadata for String, v117, v118);
    v151 = v120;
    v122 = v121;
    v146 = v121;
    v124 = v123 & 1;
    v141 = v123 & 1;
    sub_10006DCAC(v148, v155, v153, v157);
    sub_10002B750(v119, v151, v124);
    swift_bridgeObjectRetain(v122);
    sub_10006DCAC(v148, v155, v153, v157);
    sub_10002B750(v119, v151, v141);
    swift_bridgeObjectRetain(v122);
    sub_10002B438(v119, v151, v141);
    swift_bridgeObjectRelease(v122);
    sub_10006DCDC(v148, v155, v153, v157);
    v169 = v148;
    v170 = v155;
    v171 = v153;
    v172 = v157;
    v173 = v27;
    v174 = v143;
    v175 = v22;
    v176 = v24;
    v177 = v26;
    v178 = 0;
    v180 = v119;
    v181 = v151;
    v182 = v141;
    v184 = v146;
    sub_10002BC38((uint64_t)&v169);
    sub_1001E21C8((uint64_t)&v169, (uint64_t)__dst);
    sub_10006DCAC(v148, v155, v153, v157);
    sub_10002B750(v119, v151, v141);
    swift_bridgeObjectRetain(v146);
    v138 = sub_100003DB8(&qword_100328710);
    v125 = sub_100003DB8(&qword_100328718);
    v126 = sub_1000084FC(&qword_100328720, &qword_100328710, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    v127 = sub_1000084FC(&qword_100328728, &qword_100328718, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    _ConditionalContent<>.init(storage:)(__dst, v138, v125, v126, v127);
    sub_10006DCDC(v148, v155, v153, v157);
    sub_10006DCDC(v148, v155, v153, v157);
    sub_10002B438(v119, v151, v141);
    swift_bridgeObjectRelease(v146);
    sub_10002B438(v119, v151, v141);
    v116 = v146;
  }
  swift_bridgeObjectRelease(v116);
  memcpy(__dst, __src, 0x101uLL);
  return memcpy(a1, __dst, 0x101uLL);
}

void *sub_1001E076C@<X0>(void *a1@<X8>)
{
  return sub_1001DFAB8(a1);
}

_QWORD *sub_1001E07A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27;
  uint64_t v29;
  char v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  _OWORD v34[10];
  uint64_t v35;
  _OWORD v36[11];
  char v37;
  char v38;
  __int128 v39;
  __int128 v40;
  _BYTE v41[184];
  char v42;
  char v43;
  char v44;
  char v45;
  _QWORD v46[2];
  char v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  _BYTE v60[31];

  v4 = static HorizontalAlignment.leading.getter(a1);
  v5 = static HorizontalAlignment.leading.getter(v4);
  sub_1001E09EC(a1, (uint64_t)v34);
  *(_OWORD *)((char *)&v36[7] + 7) = v34[7];
  *(_OWORD *)((char *)&v36[8] + 7) = v34[8];
  *(_OWORD *)((char *)&v36[9] + 7) = v34[9];
  *(_OWORD *)((char *)&v36[3] + 7) = v34[3];
  *(_OWORD *)((char *)&v36[4] + 7) = v34[4];
  *(_OWORD *)((char *)&v36[5] + 7) = v34[5];
  *(_OWORD *)((char *)&v36[6] + 7) = v34[6];
  *(_OWORD *)((char *)v36 + 7) = v34[0];
  *(_OWORD *)((char *)&v36[1] + 7) = v34[1];
  v37 = 1;
  *(_QWORD *)((char *)&v36[10] + 7) = v35;
  *(_OWORD *)((char *)&v36[2] + 7) = v34[2];
  v38 = 0;
  v7 = static Alignment.center.getter(v6);
  _FrameLayout.init(width:height:alignment:)(&v29, 0x404E000000000000, 0, 0x3FF0000000000000, 0, v7, v8);
  v39 = (unint64_t)v4;
  LOBYTE(v40) = 0;
  *((_QWORD *)&v40 + 1) = v5;
  *(_QWORD *)v41 = 0;
  v41[8] = 1;
  v9 = v36[6];
  *(_OWORD *)&v41[121] = v36[7];
  v10 = v36[7];
  *(_OWORD *)&v41[137] = v36[8];
  v11 = v36[8];
  *(_OWORD *)&v41[153] = v36[9];
  *(_OWORD *)&v41[168] = *(_OWORD *)((char *)&v36[9] + 15);
  v12 = v36[2];
  *(_OWORD *)&v41[57] = v36[3];
  v13 = v36[3];
  *(_OWORD *)&v41[73] = v36[4];
  v14 = v36[4];
  *(_OWORD *)&v41[89] = v36[5];
  v15 = v36[5];
  *(_OWORD *)&v41[105] = v36[6];
  v16 = v36[1];
  *(_OWORD *)&v41[9] = v36[0];
  v17 = v36[0];
  *(_OWORD *)&v41[25] = v36[1];
  *(_OWORD *)&v41[41] = v36[2];
  v18 = *(_OWORD *)&v41[144];
  *(_OWORD *)(a2 + 160) = *(_OWORD *)&v41[128];
  *(_OWORD *)(a2 + 176) = v18;
  *(_OWORD *)(a2 + 192) = *(_OWORD *)&v41[160];
  v19 = *(_OWORD *)&v41[80];
  *(_OWORD *)(a2 + 96) = *(_OWORD *)&v41[64];
  *(_OWORD *)(a2 + 112) = v19;
  v20 = *(_OWORD *)&v41[112];
  *(_OWORD *)(a2 + 128) = *(_OWORD *)&v41[96];
  *(_OWORD *)(a2 + 144) = v20;
  v21 = *(_OWORD *)&v41[16];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)v41;
  *(_OWORD *)(a2 + 48) = v21;
  v22 = *(_OWORD *)&v41[48];
  *(_OWORD *)(a2 + 64) = *(_OWORD *)&v41[32];
  *(_OWORD *)(a2 + 80) = v22;
  v23 = v40;
  *(_OWORD *)a2 = v39;
  *(_OWORD *)(a2 + 16) = v23;
  *(_OWORD *)(a2 + 264) = v33;
  v53 = v12;
  v52 = v16;
  v51 = v17;
  v57 = v9;
  v56 = v15;
  v24 = v29;
  v25 = v30;
  v26 = v31;
  v27 = v32;
  v45 = 1;
  v44 = v30;
  v43 = v32;
  v42 = 1;
  *(_QWORD *)(a2 + 208) = *(_QWORD *)&v41[176];
  *(_QWORD *)(a2 + 216) = 0;
  *(_BYTE *)(a2 + 224) = 1;
  *(_QWORD *)(a2 + 232) = v24;
  *(_BYTE *)(a2 + 240) = v25;
  *(_QWORD *)(a2 + 248) = v26;
  *(_BYTE *)(a2 + 256) = v27;
  *(_QWORD *)(a2 + 280) = 0;
  *(_BYTE *)(a2 + 288) = 1;
  v46[0] = v4;
  v46[1] = 0;
  v47 = 0;
  v48 = v5;
  v49 = 0;
  v50 = 1;
  v55 = v14;
  v54 = v13;
  *(_OWORD *)&v60[15] = *(_OWORD *)((char *)&v36[9] + 15);
  *(_OWORD *)v60 = v36[9];
  v59 = v11;
  v58 = v10;
  sub_1001E1E58(&v39);
  return sub_1001E1EC8(v46);
}

double sub_1001E09EC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  double v6;
  id v7;
  uint64_t v8;
  uint64_t KeyPath;
  uint64_t v10;
  double v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  double result;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v21 = static HorizontalAlignment.leading.getter(a1);
  v4 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_content + 8);
  v5 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_content + 24);
  v19 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_content + 16);
  v20 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_content);
  v18 = *(_BYTE *)(a1 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_content + 32);
  swift_bridgeObjectRetain(v4);
  *(_QWORD *)&v6 = swift_bridgeObjectRetain(v5).n128_u64[0];
  v17 = static Edge.Set.all.getter(v6);
  v7 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  v8 = Color.init(_:)(v7);
  KeyPath = swift_getKeyPath(&unk_10025D5B0);
  if (qword_100315778 != -1)
    swift_once(&qword_100315778, sub_10005112C);
  v10 = qword_10033FC30;
  *(_QWORD *)&v11 = swift_retain(qword_10033FC30).n128_u64[0];
  v12 = static Edge.Set.all.getter(v11);
  v13 = v12;
  v14 = *(_BYTE *)(a1 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_lastConsecutiveMessage);
  v15 = static HorizontalAlignment.leading.getter(v12);
  *(_QWORD *)a2 = v21;
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v20;
  *(_QWORD *)(a2 + 32) = v4;
  *(_QWORD *)(a2 + 40) = v19;
  *(_QWORD *)(a2 + 48) = v5;
  *(_BYTE *)(a2 + 56) = v18;
  *(_BYTE *)(a2 + 64) = v17;
  *(_OWORD *)(a2 + 72) = xmmword_10025D310;
  result = 7.0;
  *(_OWORD *)(a2 + 88) = xmmword_10025D300;
  *(_BYTE *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = KeyPath;
  *(_QWORD *)(a2 + 120) = v8;
  *(_QWORD *)(a2 + 128) = v10;
  *(_BYTE *)(a2 + 136) = v13;
  *(_BYTE *)(a2 + 137) = 0;
  *(_BYTE *)(a2 + 138) = v14;
  *(_WORD *)(a2 + 139) = 256;
  *(_QWORD *)(a2 + 144) = v15;
  *(_QWORD *)(a2 + 152) = sub_1001E0B88;
  *(_QWORD *)(a2 + 160) = 0;
  return result;
}

uint64_t sub_1001E0B88()
{
  uint64_t v0;

  v0 = static HorizontalAlignment.leading.getter();
  return ViewDimensions.subscript.getter(v0);
}

_QWORD *sub_1001E0BAC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1001E07A4(*v1, a1);
}

uint64_t sub_1001E0BB4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __n128 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _QWORD v27[2];
  uint64_t v28;
  _OWORD v29[6];
  _OWORD v30[2];
  _OWORD v31[8];
  char v32;
  __int128 v33;
  __int128 v34;
  __n128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  v27[1] = a2;
  v3 = sub_100003DB8(&qword_100328680);
  __chkstk_darwin(v3, v4);
  v6 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_100328688);
  v9 = __chkstk_darwin(v7, v8);
  v11 = (char *)v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = static VerticalAlignment.top.getter(v9);
  sub_1001E0DFC(a1, (uint64_t)v29);
  *(_OWORD *)((char *)&v31[2] + 7) = v29[2];
  *(_OWORD *)((char *)&v31[1] + 7) = v29[1];
  *(_OWORD *)((char *)v31 + 7) = v29[0];
  *(_OWORD *)((char *)&v31[6] + 7) = v30[0];
  *(_OWORD *)((char *)&v31[5] + 7) = v29[5];
  v32 = 1;
  *(_OWORD *)((char *)&v31[4] + 7) = v29[4];
  v31[7] = *(_OWORD *)((char *)v30 + 9);
  *(_OWORD *)((char *)&v31[3] + 7) = v29[3];
  v37 = v31[4];
  v38 = v31[5];
  v39 = v31[6];
  v40 = *(_OWORD *)((char *)v30 + 9);
  v33 = v31[0];
  v34 = v31[1];
  v13 = a1 + OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id;
  v14 = &v6[*(int *)(v3 + 52)];
  v35 = (__n128)v31[2];
  v36 = v31[3];
  v15 = type metadata accessor for UUID(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v14, v13, v15);
  v16 = v38;
  *(_OWORD *)(v6 + 81) = v37;
  *(_OWORD *)(v6 + 97) = v16;
  v17 = v40;
  *(_OWORD *)(v6 + 113) = v39;
  *(_OWORD *)(v6 + 129) = v17;
  v18 = v34;
  *(_OWORD *)(v6 + 17) = v33;
  *(_OWORD *)(v6 + 33) = v18;
  v19 = v35;
  v20 = v36;
  *(__n128 *)(v6 + 49) = v35;
  *(_QWORD *)v6 = v12;
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  *(_OWORD *)(v6 + 65) = v20;
  v21 = static Color.clear.getter(v19);
  v28 = v21;
  swift_retain(v21);
  v22 = AnyView.init<A>(_:)(&v28, &type metadata for Color, &protocol witness table for Color);
  sub_10000B234((uint64_t)v6, (uint64_t)v11, &qword_100328680);
  swift_release(v21);
  *(_QWORD *)&v11[*(int *)(v7 + 36)] = v22;
  v23 = sub_100007FF0((uint64_t)v6, &qword_100328680);
  v24 = static VerticalEdge.Set.all.getter(v23);
  v25 = sub_1001E1294();
  View.listRowSeparator(_:edges:)(2, v24, v7, v25);
  return sub_100007FF0((uint64_t)v11, &qword_100328688);
}

double sub_1001E0DFC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __n128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t KeyPath;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double result;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];
  char v43;
  _BYTE v44[7];
  _BYTE v45[7];
  char v46;
  _BYTE v47[7];
  char v48;
  _BYTE v49[7];
  char v50;
  char v51;

  v4 = sub_100003DB8(&qword_100316B50);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = static HorizontalAlignment.center.getter(v6);
  v40 = Image.init(systemName:)(0x7269632E6F666E69, 0xEB00000000656C63, v9);
  v10 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8SOSBuddy26TryOutTranscriptFooterItem_content);
  v11 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8SOSBuddy26TryOutTranscriptFooterItem_content + 8);
  v42[0] = v10;
  v42[1] = v11;
  v12 = sub_10002B3F4();
  v13 = swift_bridgeObjectRetain(v11);
  v14 = Text.init<A>(_:)(v42, &type metadata for String, v12, v13);
  v16 = v15;
  v18 = v17;
  v20 = v19 & 1;
  v21 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v8, 1, 1, v21);
  v22 = static Font.system(size:weight:design:)(0, 1, v8, 14.0);
  v23 = sub_100007FF0((uint64_t)v8, &qword_100316B50);
  static Font.Weight.bold.getter(v23);
  v24 = Font.weight(_:)(v22);
  swift_release(v22);
  v25 = Text.font(_:)(v24, v14, v16, v20, v18);
  v27 = v26;
  v29 = v28;
  v39 = v30;
  swift_release(v24);
  LOBYTE(v24) = v29 & 1;
  sub_10002B438(v14, v16, v20);
  swift_bridgeObjectRelease(v18);
  KeyPath = swift_getKeyPath(&unk_10025D490);
  v51 = 1;
  v50 = 1;
  v48 = 1;
  v46 = v29 & 1;
  v43 = 1;
  *(_DWORD *)(a2 + 9) = v42[0];
  *(_DWORD *)(a2 + 12) = *(_DWORD *)((char *)v42 + 3);
  *(_DWORD *)(a2 + 33) = *(_DWORD *)v49;
  *(_DWORD *)(a2 + 36) = *(_DWORD *)&v49[3];
  v32 = *(_DWORD *)v47;
  *(_DWORD *)(a2 + 60) = *(_DWORD *)&v47[3];
  *(_DWORD *)(a2 + 57) = v32;
  v33 = *(_DWORD *)v45;
  *(_DWORD *)(a2 + 84) = *(_DWORD *)&v45[3];
  *(_DWORD *)(a2 + 81) = v33;
  v34 = *(_DWORD *)v44;
  *(_DWORD *)(a2 + 108) = *(_DWORD *)&v44[3];
  *(_DWORD *)(a2 + 105) = v34;
  LOBYTE(v34) = v43;
  *(_QWORD *)a2 = 0;
  *(_BYTE *)(a2 + 8) = 1;
  v35 = v40;
  *(_QWORD *)(a2 + 16) = v41;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 32) = 1;
  *(_QWORD *)(a2 + 40) = v35;
  *(_QWORD *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 1;
  *(_QWORD *)(a2 + 64) = v25;
  *(_QWORD *)(a2 + 72) = v27;
  *(_BYTE *)(a2 + 80) = v29 & 1;
  v36 = v39;
  *(_QWORD *)(a2 + 88) = v39;
  *(_QWORD *)(a2 + 96) = KeyPath;
  *(_BYTE *)(a2 + 104) = 1;
  *(_QWORD *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 120) = v34;
  v37 = v35;
  swift_retain(v35);
  sub_10002B750(v25, v27, v24);
  swift_bridgeObjectRetain(v36);
  swift_retain(KeyPath);
  sub_10002B438(v25, v27, v24);
  swift_release(v37);
  swift_release(KeyPath);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v36).n128_u64[0];
  return result;
}

uint64_t sub_1001E10AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1001E0BB4(*v1, a1);
}

uint64_t sub_1001E10B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029F3E8, 1);
}

uint64_t sub_1001E10C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029F3C0, 1);
}

unint64_t sub_1001E10D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100328618;
  if (!qword_100328618)
  {
    v1 = sub_100007FAC(&qword_100328610);
    sub_1000084FC(&qword_100328620, &qword_100328608, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    sub_1000084FC(&qword_100328628, &qword_100328630, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100328618);
  }
  return result;
}

unint64_t sub_1001E1170()
{
  unint64_t result;

  result = qword_100328648;
  if (!qword_100328648)
  {
    result = swift_getWitnessTable(&unk_10025D560, &type metadata for TryOutTranscriptMyMessageView);
    atomic_store(result, (unint64_t *)&qword_100328648);
  }
  return result;
}

unint64_t sub_1001E11B4()
{
  unint64_t result;

  result = qword_100328650;
  if (!qword_100328650)
  {
    result = swift_getWitnessTable(&unk_10025D510, &type metadata for TryOutTranscriptOtherMessageView);
    atomic_store(result, (unint64_t *)&qword_100328650);
  }
  return result;
}

unint64_t sub_1001E11F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100328660;
  if (!qword_100328660)
  {
    v1 = sub_100007FAC(&qword_100328658);
    sub_1000084FC(&qword_100328668, &qword_100328670, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    sub_1000084FC(&qword_100328628, &qword_100328630, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100328660);
  }
  return result;
}

unint64_t sub_1001E1294()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100328690;
  if (!qword_100328690)
  {
    v1 = sub_100007FAC(&qword_100328688);
    sub_1000084FC(&qword_100328698, &qword_100328680, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
    sub_1000084FC(&qword_100328628, &qword_100328630, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100328690);
  }
  return result;
}

uint64_t sub_1001E1330(double a1, double a2, double a3, double a4, uint64_t a5, __int16 a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  uint64_t v23;

  Path.move(to:)(a1 + 5.0, a2);
  Path.addLine(to:)(v11, a1, a2);
  v12 = Path.addCurve(to:control1:control2:)(0.0, a2 - a1, a3, a2, 0.0, a2 - a3);
  Path.addLine(to:)(v12, 0.0, a1);
  v13 = Path.addCurve(to:control1:control2:)(a1, 0.0, 0.0, a3, a3, 0.0);
  v14 = a4 - a1;
  v15 = a4 + -4.0;
  if ((a6 & 0x100) != 0)
  {
    Path.addLine(to:)(v13, v14 + -1.0, 0.0);
    v22 = Path.addCurve(to:control1:control2:)(a4 + -4.0, a1, a4 + -12.0, 0.0, a4 + -4.0, 8.0);
    Path.addLine(to:)(v22, a4 + -4.0, a2 + -11.0);
    v23 = Path.addCurve(to:control1:control2:)(a4, a2, a4 + -4.0, a2 + -1.0, a4, a2);
    Path.addLine(to:)(v23, a4 + 0.05, a2 + -0.01);
    Path.addCurve(to:control1:control2:)(a4 + -11.0, a2 + -4.0, a4 + -4.0, a2 + 0.5, a4 + -8.0, a2 + -1.0);
    v18 = v14 + -5.0;
    v20 = v14 + 4.0;
    v19 = a2;
    v21 = a2;
  }
  else
  {
    v16 = v14 + -4.0;
    Path.addLine(to:)(v13, v14 + -4.0, 0.0);
    v14 = v15 - a3;
    v17 = Path.addCurve(to:control1:control2:)(v15, a1, v15 - a3, 0.0, v15, a3);
    Path.addLine(to:)(v17, v15, a2 - a1);
    v18 = v16;
    v19 = a2;
    v20 = v15;
    v21 = a2 - a3;
  }
  return Path.addCurve(to:control1:control2:)(v18, v19, v20, v21, v14, a2);
}

void sub_1001E150C(double a1, double a2, double a3, double a4, uint64_t a5, __int16 a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  double v22;

  v22 = a1 + 5.0;
  Path.move(to:)(a1 + 5.0, a2);
  Path.addLine(to:)(v11, a3 - a1, a2);
  Path.addCurve(to:control1:control2:)(a3, a2 - a1, a3 - a4, a2, a3, a2 - a4);
  Path.addLine(to:)(v12, a3, a1);
  Path.addCurve(to:control1:control2:)(a3 - a1, 0.0, a3, a4, a3 - a4, 0.0);
  if ((a6 & 0x100) != 0)
  {
    Path.addLine(to:)(v13, a1 + 1.0, 0.0);
    Path.addCurve(to:control1:control2:)(4.0, a1, 12.0, 0.0, 4.0, 8.0);
    Path.addLine(to:)(v20, 4.0, a2 + -11.0);
    Path.addCurve(to:control1:control2:)(0.0, a2, 4.0, a2 + -1.0, 0.0, a2);
    Path.addLine(to:)(v21, -0.05, a2 + -0.01);
    Path.addCurve(to:control1:control2:)(11.0, a2 + -4.0, 4.0, a2 + 0.5, 8.0, a2 + -1.0);
    v15 = a1 + -4.0;
    v16 = v22;
    v17 = a2;
    v18 = a2;
    v19 = a1;
  }
  else
  {
    Path.addLine(to:)(v13, v22 + -4.0, 0.0);
    Path.addCurve(to:control1:control2:)(4.0, a1, a4 + 4.0, 0.0, 4.0, a4);
    Path.addLine(to:)(v14, 4.0, a2 - a1);
    v15 = 4.0;
    v16 = v22;
    v17 = a2;
    v18 = a2 - a4;
    v19 = a4 + 4.0;
  }
  Path.addCurve(to:control1:control2:)(v16, v17, v15, v18, v19, a2);
}

__n128 sub_1001E16E8@<Q0>(__n128 *a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  unsigned __int8 *v5;
  int v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  unsigned __int8 v15;
  __n128 result;
  __n128 v17;
  __n128 v18[2];
  unsigned __int8 v19;
  CGRect v20;

  v11 = *v5;
  CGRectGetWidth(*(CGRect *)&a2);
  v20.origin.x = a2;
  v20.origin.y = a3;
  v20.size.width = a4;
  v20.size.height = a5;
  CGRectGetHeight(v20);
  __chkstk_darwin(v12, v13);
  if (v11 == 1)
    v14 = sub_1001E215C;
  else
    v14 = sub_1001E2138;
  Path.init(_:)(v18, v14);
  v15 = v19;
  result = v18[0];
  v17 = v18[1];
  *a1 = v18[0];
  a1[1] = v17;
  a1[2].n128_u8[0] = v15;
  return result;
}

void (*sub_1001E1818(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = Animatable<>.animatableData.modify();
  return sub_1000BEC30;
}

uint64_t sub_1001E1874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001E2184();
  return static Shape._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1001E18C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001E2184();
  return static Shape._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1001E1914(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001E2184();
  return Shape.body.getter(a1, v2);
}

ValueMetadata *type metadata accessor for TryOutTranscriptOtherMessageView()
{
  return &type metadata for TryOutTranscriptOtherMessageView;
}

ValueMetadata *type metadata accessor for TryOutTranscriptMyMessageView()
{
  return &type metadata for TryOutTranscriptMyMessageView;
}

uint64_t sub_1001E1974(uint64_t a1)
{
  return sub_1001E1AB8(a1, &qword_100328610, (uint64_t (*)(void))sub_1001E10D4);
}

unint64_t sub_1001E198C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003286A0;
  if (!qword_1003286A0)
  {
    v1 = sub_100007FAC(&qword_100328678);
    sub_1001E19F8();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003286A0);
  }
  return result;
}

unint64_t sub_1001E19F8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1003286A8;
  if (!qword_1003286A8)
  {
    v1 = sub_100007FAC(&qword_100328640);
    v2[0] = sub_100007FAC(&qword_100328658);
    v2[1] = sub_1001E11F8();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 1);
    sub_1000084FC(&qword_1003286B0, &qword_1003286B8, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003286A8);
  }
  return result;
}

uint64_t sub_1001E1AA4(uint64_t a1)
{
  return sub_1001E1AB8(a1, &qword_100328688, (uint64_t (*)(void))sub_1001E1294);
}

uint64_t sub_1001E1AB8(uint64_t a1, uint64_t *a2, uint64_t (*a3)(void))
{
  _QWORD v5[2];

  v5[0] = sub_100007FAC(a2);
  v5[1] = a3();
  return swift_getOpaqueTypeConformance2(v5, &opaque type descriptor for <<opaque return type of View.listRowSeparator(_:edges:)>>, 1);
}

uint64_t sub_1001E1B04(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029F4A8, 1);
}

uint64_t sub_1001E1B14(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029F480, 1);
}

_QWORD *sub_1001E1B24(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[10];
  v3 = a1[12];
  v4 = a1[20];
  v5 = a1[22];
  v6 = a1[26];
  v13 = a1[28];
  v14 = a1[27];
  v7 = a1[30];
  v11 = a1[31];
  v12 = a1[29];
  v9 = a1[33];
  v10 = a1[32];
  swift_retain(a1[21]);
  swift_retain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  sub_1001E1C10(v14, v13, v12, v7, v11, v10, v9);
  return a1;
}

double sub_1001E1C10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  double result;

  if (a7)
  {
    sub_10002B750(a4, a5, a6 & 1);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a7).n128_u64[0];
  }
  return result;
}

_QWORD *sub_1001E1C48(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = a1[10];
  v3 = a1[12];
  v4 = a1[20];
  v5 = a1[21];
  v6 = a1[22];
  v13 = a1[28];
  v14 = a1[27];
  v7 = a1[30];
  v11 = a1[31];
  v12 = a1[29];
  v9 = a1[33];
  v10 = a1[32];
  swift_release(a1[26]);
  swift_release(v6);
  swift_release(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v5);
  sub_1001E1D38(v14, v13, v12, v7, v11, v10, v9);
  return a1;
}

double sub_1001E1D38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  double result;

  if (a7)
  {
    sub_10002B438(a4, a5, a6 & 1);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a7).n128_u64[0];
  }
  return result;
}

_QWORD *sub_1001E1D70(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[7];
  v3 = a1[9];
  v4 = a1[17];
  v5 = a1[19];
  v6 = a1[23];
  swift_retain(a1[18]);
  swift_retain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

_QWORD *sub_1001E1DE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[7];
  v3 = a1[9];
  v4 = a1[17];
  v5 = a1[18];
  v6 = a1[19];
  swift_release(a1[23]);
  swift_release(v6);
  swift_release(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v5);
  return a1;
}

_QWORD *sub_1001E1E58(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[10];
  v3 = a1[12];
  v4 = a1[20];
  v5 = a1[22];
  v6 = a1[26];
  swift_retain(a1[21]);
  swift_retain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

_QWORD *sub_1001E1EC8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[10];
  v3 = a1[12];
  v4 = a1[20];
  v5 = a1[21];
  v6 = a1[22];
  swift_release(a1[26]);
  swift_release(v6);
  swift_release(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v5);
  return a1;
}

uint64_t storeEnumTagSinglePayload for BubbleShape(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001E1F84 + 4 * byte_10025D335[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_1001E1FB8 + 4 * byte_10025D330[v4]))();
}

uint64_t sub_1001E1FB8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001E1FC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x1001E1FC8);
  return result;
}

uint64_t sub_1001E1FD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x1001E1FDCLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001E1FE0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1001E1FE8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BubbleShape()
{
  return &type metadata for BubbleShape;
}

ValueMetadata *type metadata accessor for TryOutTranscriptMessageContent()
{
  return &type metadata for TryOutTranscriptMessageContent;
}

uint64_t sub_1001E2014()
{
  return sub_1000084FC(&qword_1003286C0, &qword_1003286C8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
}

uint64_t sub_1001E2040()
{
  return sub_1000084FC(&qword_1003286D0, &qword_1003286D8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
}

uint64_t sub_1001E206C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029F4D0, 1);
}

uint64_t sub_1001E207C()
{
  return sub_1000084FC(&qword_1003286E0, &qword_1003286E8, (uint64_t)&protocol conformance descriptor for _ShapeView<A, B>);
}

unint64_t sub_1001E20AC()
{
  unint64_t result;

  result = qword_1003286F0;
  if (!qword_1003286F0)
  {
    result = swift_getWitnessTable(&unk_10025D6B0, &type metadata for BubbleShape);
    atomic_store(result, (unint64_t *)&qword_1003286F0);
  }
  return result;
}

unint64_t sub_1001E20F4()
{
  unint64_t result;

  result = qword_1003286F8;
  if (!qword_1003286F8)
  {
    result = swift_getWitnessTable(&unk_10025D660, &type metadata for BubbleShape);
    atomic_store(result, (unint64_t *)&qword_1003286F8);
  }
  return result;
}

void sub_1001E2138(uint64_t a1)
{
  uint64_t v1;
  __int16 v2;

  if (*(_BYTE *)(v1 + 49))
    v2 = 256;
  else
    v2 = 0;
  sub_1001E150C(*(double *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40), a1, v2 | *(unsigned __int8 *)(v1 + 48));
}

uint64_t sub_1001E215C(uint64_t a1)
{
  uint64_t v1;
  __int16 v2;

  if (*(_BYTE *)(v1 + 41))
    v2 = 256;
  else
    v2 = 0;
  return sub_1001E1330(*(double *)(v1 + 16), *(double *)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 48), a1, v2 | *(unsigned __int8 *)(v1 + 40));
}

unint64_t sub_1001E2184()
{
  unint64_t result;

  result = qword_100328700;
  if (!qword_100328700)
  {
    result = swift_getWitnessTable(&unk_10025D700, &type metadata for BubbleShape);
    atomic_store(result, (unint64_t *)&qword_100328700);
  }
  return result;
}

uint64_t sub_1001E21C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100328708);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001E2214()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100328730;
  if (!qword_100328730)
  {
    v1 = sub_100007FAC(&qword_100328738);
    sub_1000084FC(&qword_100328720, &qword_100328710, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    sub_1000084FC(&qword_100328728, &qword_100328718, (uint64_t)&protocol conformance descriptor for TupleView<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100328730);
  }
  return result;
}

uint64_t destroy for ExplorerConnectionAssistantView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[6]);
  swift_release(a1[8]);
  swift_release(a1[10]);
  swift_release(a1[12]);
  return swift_release(a1[14]);
}

uint64_t initializeWithCopy for ExplorerConnectionAssistantView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v8 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  v10 = a2[6];
  v9 = a2[7];
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v9;
  v12 = a2[8];
  v11 = a2[9];
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v11;
  v14 = a2[10];
  v13 = a2[11];
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v13;
  v16 = a2[12];
  v15 = a2[13];
  *(_QWORD *)(a1 + 96) = v16;
  *(_QWORD *)(a1 + 104) = v15;
  v17 = a2[14];
  *(_QWORD *)(a1 + 112) = v17;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 15);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 19);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v8);
  swift_retain(v10);
  swift_retain(v12);
  swift_retain(v14);
  swift_retain(v16);
  swift_retain(v17);
  return a1;
}

uint64_t *assignWithCopy for ExplorerConnectionAssistantView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a1[4];
  v9 = a2[4];
  a1[4] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[5] = a2[5];
  v10 = a1[6];
  v11 = a2[6];
  a1[6] = v11;
  swift_retain(v11);
  swift_release(v10);
  a1[7] = a2[7];
  v12 = a1[8];
  v13 = a2[8];
  a1[8] = v13;
  swift_retain(v13);
  swift_release(v12);
  a1[9] = a2[9];
  v14 = a1[10];
  v15 = a2[10];
  a1[10] = v15;
  swift_retain(v15);
  swift_release(v14);
  a1[11] = a2[11];
  v16 = a1[12];
  v17 = a2[12];
  a1[12] = v17;
  swift_retain(v17);
  swift_release(v16);
  a1[13] = a2[13];
  v18 = a1[14];
  v19 = a2[14];
  a1[14] = v19;
  swift_retain(v19);
  swift_release(v18);
  a1[15] = a2[15];
  a1[16] = a2[16];
  a1[17] = a2[17];
  a1[18] = a2[18];
  a1[19] = a2[19];
  a1[20] = a2[20];
  return a1;
}

__n128 initializeWithTake for ExplorerConnectionAssistantView(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[9];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t *assignWithTake for ExplorerConnectionAssistantView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = a1[4];
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_release(v7);
  v9 = a1[6];
  v10 = a2[6];
  a1[5] = a2[5];
  a1[6] = v10;
  swift_release(v9);
  v11 = a1[8];
  v12 = a2[8];
  a1[7] = a2[7];
  a1[8] = v12;
  swift_release(v11);
  v13 = a1[10];
  v14 = a2[10];
  a1[9] = a2[9];
  a1[10] = v14;
  swift_release(v13);
  v15 = a1[12];
  v16 = a2[12];
  a1[11] = a2[11];
  a1[12] = v16;
  swift_release(v15);
  v17 = a1[14];
  v18 = a2[14];
  a1[13] = a2[13];
  a1[14] = v18;
  swift_release(v17);
  a1[15] = a2[15];
  v19 = *((_OWORD *)a2 + 9);
  *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
  *((_OWORD *)a1 + 9) = v19;
  a1[20] = a2[20];
  return a1;
}

uint64_t getEnumTagSinglePayload for ExplorerConnectionAssistantView(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 168))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExplorerConnectionAssistantView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 168) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 168) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExplorerConnectionAssistantView()
{
  return &type metadata for ExplorerConnectionAssistantView;
}

uint64_t sub_1001E2714()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t);
  unint64_t *v28;
  uint64_t v29;
  _BYTE v31[24];

  v1 = type metadata accessor for Date(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = &v31[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = sub_100003DB8(&qword_10031B548);
  __chkstk_darwin(v6, v7);
  v9 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = type metadata accessor for TimeZone(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = &v31[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v15 = v0[2];
  if (!v15)
  {
    v25 = v0[3];
    v26 = type metadata accessor for ConnectivityModel();
    v27 = (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel;
    v28 = &qword_100316B00;
LABEL_22:
    v29 = sub_100056D60(v28, v27);
    result = EnvironmentObject.error()(0, v25, v26, v29);
    __break(1u);
    return result;
  }
  v16 = *(_QWORD *)(v15 + 80);
  v17 = v0[4];
  if (!v16)
  {
    if (v17)
    {
LABEL_13:
      if ((*(_BYTE *)(v17 + 72) & 1) != 0)
        return 0;
      else
        return *(_QWORD *)(v17 + 56);
    }
    goto LABEL_20;
  }
  if (!v17)
  {
LABEL_20:
    v25 = v0[5];
    v26 = type metadata accessor for GeoLocationModel();
    v27 = (uint64_t (*)(uint64_t))type metadata accessor for GeoLocationModel;
    v28 = &qword_10031CD28;
    goto LABEL_22;
  }
  v18 = *(unsigned __int8 *)(v17 + 48);
  if (v18 == 2 || (v18 & 1) != 0)
    goto LABEL_13;
  v20 = v0[12];
  if (!v20)
  {
    v25 = v0[13];
    v26 = type metadata accessor for TimeZoneModel(0);
    v27 = type metadata accessor for TimeZoneModel;
    v28 = &qword_10031CD30;
    goto LABEL_22;
  }
  v21 = v20 + OBJC_IVAR____TtC8SOSBuddy13TimeZoneModel__timeZone;
  swift_beginAccess(v20 + OBJC_IVAR____TtC8SOSBuddy13TimeZoneModel__timeZone, v31, 0, 0);
  sub_10007A178(v21, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    v22 = swift_retain(v20);
    static TimeZone.autoupdatingCurrent.getter(v22);
    v23 = sub_1001E3534((uint64_t)v9);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
    swift_retain(v20);
  }
  Date.init()(v23);
  TimeZone.secondsFromGMT(for:)(v5);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  swift_release(v20);
  return 0x4051800000000000;
}

uint64_t sub_1001E29F4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 32);
  if (v1)
  {
    v2 = type metadata accessor for GeoLocationModel.LocationAssertion();
    swift_allocObject(v2, 40, 7);
    swift_retain(v1);
    v4 = sub_100016B6C(v3, 0x726373206C6C7546, 0xEB000000006E6565);
    swift_release(v1);
    return v4;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 40);
    v7 = type metadata accessor for GeoLocationModel();
    v8 = sub_100056D60(&qword_10031CD28, (uint64_t (*)(uint64_t))type metadata accessor for GeoLocationModel);
    result = EnvironmentObject.error()(0, v6, v7, v8);
    __break(1u);
  }
  return result;
}

_QWORD *sub_1001E2AA0(uint64_t a1, double *a2)
{
  double v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[14];

  v3 = sub_10021D384(a2[16], a2[17], a2[18], a2[19], a2[20]);
  if (v3 == *(double *)(a1 + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__offsetRotationProgress))
  {
LABEL_6:
    sub_1001E2C60((uint64_t)v6);
    sub_100069664((char *)v6);
    return sub_10006A744(v6);
  }
  result = *(_QWORD **)(a1 + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__displayLink);
  if (result)
  {
    if ((static CAFrameRateRange.== infix(_:_:)(objc_msgSend(result, "preferredFrameRateRange")) & 1) == 0)
    {
      v5 = a1 + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__offsetRotationProgressPending;
      *(double *)v5 = v3;
      *(_BYTE *)(v5 + 8) = 0;
      sub_100068864();
    }
    sub_100068BF4(v3);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

_QWORD *sub_1001E2B80(uint64_t a1)
{
  double *v1;
  double v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD v6[14];

  v3 = sub_10021D384(v1[16], v1[17], v1[18], v1[19], v1[20]);
  if (v3 == *(double *)(a1 + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__offsetRotationProgress))
  {
LABEL_6:
    sub_1001E2C60((uint64_t)v6);
    sub_100069664((char *)v6);
    return sub_10006A744(v6);
  }
  result = *(_QWORD **)(a1 + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__displayLink);
  if (result)
  {
    if ((static CAFrameRateRange.== infix(_:_:)(objc_msgSend(result, "preferredFrameRateRange")) & 1) == 0)
    {
      v5 = a1 + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__offsetRotationProgressPending;
      *(double *)v5 = v3;
      *(_BYTE *)(v5 + 8) = 0;
      sub_100068864();
    }
    sub_100068BF4(v3);
    goto LABEL_6;
  }
  __break(1u);
  return result;
}

uint64_t sub_1001E2C60@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  char v38;
  uint64_t v39;
  id v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  id v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t result;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t (*v61)(uint64_t);
  unint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  void *v69;
  char v70;
  char v71;
  BOOL v72;
  char v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  Swift::String v78;
  Swift::String v79;

  v2 = v1;
  v3 = v1[2];
  if (!v3)
  {
    v59 = v1[3];
    v60 = type metadata accessor for ConnectivityModel();
    v61 = (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel;
    v62 = &qword_100316B00;
    goto LABEL_48;
  }
  v5 = *(_QWORD *)(v3 + 80);
  if (v5)
  {
    if (*v2)
    {
      v6 = *(_QWORD *)(v3 + 72);
      v7 = *(_BYTE *)(*v2 + 80);
      v8 = sub_100003DB8(&qword_100317970);
      v9 = swift_allocObject(v8, 72, 7);
      *(_OWORD *)(v9 + 16) = xmmword_10024E070;
      *(_QWORD *)(v9 + 56) = &type metadata for String;
      *(_QWORD *)(v9 + 64) = sub_10001CAF4();
      *(_QWORD *)(v9 + 32) = v6;
      *(_QWORD *)(v9 + 40) = v5;
      swift_bridgeObjectRetain(v5);
      v10 = String.init(format:_:)(16421, 0xE200000000000000);
      v12 = v2[10];
      if (v12)
      {
        v76 = v10;
        v75 = v11;
        v74 = v7;
        if (*(_QWORD *)(v12 + 64))
          v72 = sub_100067058(3u, *(_QWORD *)(v12 + 88));
        else
          v72 = 0;
        v19 = 0;
        v20 = 0;
        v21 = 0;
        v22 = 0;
        v23 = 0;
        v24 = 0;
        v25 = 0;
        v73 = 0;
        v71 = 1;
        v26 = &_swiftEmptySetSingleton;
LABEL_39:
        result = sub_1001E2714();
        *(_BYTE *)a1 = v74 & 1;
        *(_QWORD *)(a1 + 8) = v26;
        *(_BYTE *)(a1 + 16) = v19;
        *(_BYTE *)(a1 + 17) = v71;
        *(_BYTE *)(a1 + 18) = v20;
        *(_QWORD *)(a1 + 24) = v76;
        *(_QWORD *)(a1 + 32) = v75;
        *(_QWORD *)(a1 + 40) = v21;
        *(_QWORD *)(a1 + 48) = v22;
        *(_QWORD *)(a1 + 56) = v23;
        *(_QWORD *)(a1 + 64) = v24;
        *(_QWORD *)(a1 + 72) = v25;
        *(_BYTE *)(a1 + 80) = v73;
        *(_BYTE *)(a1 + 81) = v72;
        *(_QWORD *)(a1 + 88) = result;
        *(_QWORD *)(a1 + 96) = v57;
        *(_BYTE *)(a1 + 104) = v58;
        return result;
      }
      goto LABEL_42;
    }
    v63 = v2[1];
    v2 = (_QWORD *)type metadata accessor for AppPropertiesModel();
    v64 = sub_100056D60(&qword_10031CB88, (uint64_t (*)(uint64_t))type metadata accessor for AppPropertiesModel);
    swift_bridgeObjectRetain(v5);
    EnvironmentObject.error()(0, v63, v2, v64);
    __break(1u);
    goto LABEL_44;
  }
  v13 = v2[10];
  if (!v13)
  {
LABEL_42:
    v59 = v2[11];
    v60 = type metadata accessor for StewieModel();
    v61 = (uint64_t (*)(uint64_t))type metadata accessor for StewieModel;
    v62 = &qword_1003186E0;
    goto LABEL_48;
  }
  v14 = *(_QWORD *)(v13 + 64);
  if (v14)
    LOBYTE(v14) = *(_QWORD *)(*(_QWORD *)(v13 + 88) + 16) == 0;
  v15 = v2[14];
  if (!v15)
  {
LABEL_44:
    v59 = v2[15];
    v60 = type metadata accessor for TryOutModel(0);
    v61 = type metadata accessor for TryOutModel;
    v62 = &qword_10031A0C8;
    goto LABEL_48;
  }
  v16 = *(unsigned __int16 *)(v15 + 56);
  if (v16 >> 9 <= 0x7E && (v16 & 0xC000) == 0x4000 && (v17 = *(unsigned __int8 *)(v15 + 88), v17 != 2))
  {
    if ((v14 & 1) == 0)
    {
      v18 = v17 & 1;
      goto LABEL_21;
    }
  }
  else if ((v14 & 1) == 0)
  {
    v18 = 0;
LABEL_21:
    v31 = *(_BYTE *)(*(_QWORD *)(v3 + 48) + 120);
    v32 = *(_BYTE *)(v3 + 56);
    swift_retain(v3);
    sub_1001BFA30();
    v34 = v33;
    v77 = v35;
    v30 = v36;
    swift_release(v3);
    swift_bridgeObjectRelease(v34);
    if ((v18 & 1) != 0)
    {
      v37 = (void *)objc_opt_self(NSBundle);
      v70 = v32;
      v38 = v31;
      v39 = v30;
      v40 = objc_msgSend(v37, "mainBundle");
      v78._countAndFlagsBits = 0xD000000000000056;
      v78._object = (void *)0x800000010026FE80;
      v41._countAndFlagsBits = 0x6D6F43206F6D6544;
      v41._object = (void *)0xED00006574656C70;
      v42._countAndFlagsBits = 0;
      v42._object = (void *)0xE000000000000000;
      v43 = NSLocalizedString(_:tableName:bundle:value:comment:)(v41, (Swift::String_optional)0, (NSBundle)v40, v42, v78);
      countAndFlagsBits = v43._countAndFlagsBits;
      object = v43._object;

      v30 = v39;
      v31 = v38;
      v32 = v70;
      v44 = objc_msgSend(v37, "mainBundle");
      v79._countAndFlagsBits = 0xD000000000000055;
      v79._object = (void *)0x800000010026FF10;
      v45._object = (void *)0x800000010026FEE0;
      v45._countAndFlagsBits = 0xD000000000000025;
      v46._countAndFlagsBits = 0;
      v46._object = (void *)0xE000000000000000;
      v47 = NSLocalizedString(_:tableName:bundle:value:comment:)(v45, (Swift::String_optional)0, (NSBundle)v44, v46, v79);
      v67 = v47._object;
      v68 = v47._countAndFlagsBits;

    }
    else
    {
      v48 = v2[6];
      if (!v48)
      {
        v59 = v2[7];
        v60 = type metadata accessor for GuidanceMessagesModel();
        v61 = (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel;
        v62 = &qword_1003195D8;
        goto LABEL_48;
      }
      v49 = *(_QWORD *)(v48 + 48);
      if (v49)
      {
        countAndFlagsBits = *(_QWORD *)(v49 + 32);
        object = *(void **)(v49 + 40);
        swift_bridgeObjectRetain(object);
      }
      else
      {
        countAndFlagsBits = 0;
        object = (void *)0xE000000000000000;
      }
      swift_retain(v48);
      sub_1001BF7E0();
      v67 = v51;
      v68 = v50;
      swift_release(v48);
    }
    v29 = v77;
    goto LABEL_29;
  }
  v67 = 0;
  v68 = 0;
  countAndFlagsBits = 0;
  object = 0;
  v29 = 0;
  v30 = 0;
  v31 = 9;
  v32 = 2;
LABEL_29:
  if (*v2)
  {
    v69 = object;
    v52 = v2[8];
    if (v52)
    {
      v26 = *(void **)(v52 + 200);
      v76 = v29;
      if ((*(_BYTE *)(v52 + 80) & 1) != 0 || (*(_BYTE *)(v52 + 66) & 1) != 0 || (*(_BYTE *)(v52 + 192) & 1) != 0)
      {
        v53 = 0;
        v54 = 1;
      }
      else
      {
        v54 = 0;
        v53 = *(_QWORD *)(v52 + 168);
      }
      v66 = v53;
      v55 = *(_BYTE *)(v3 + 57);
      v75 = v30;
      v73 = v54;
      v74 = *(_BYTE *)(*v2 + 80);
      if (*(_QWORD *)(v13 + 64))
        v72 = sub_100067058(3u, *(_QWORD *)(v13 + 88));
      else
        v72 = 0;
      v71 = v55 ^ 1;
      swift_bridgeObjectRetain(v26);
      v19 = v31;
      v20 = v32;
      v22 = v69;
      v21 = countAndFlagsBits;
      v24 = v67;
      v23 = v68;
      v25 = v66;
      goto LABEL_39;
    }
    v59 = v2[9];
    v60 = type metadata accessor for GuidanceModel();
    v61 = (uint64_t (*)(uint64_t))type metadata accessor for GuidanceModel;
    v62 = &qword_100316B08;
  }
  else
  {
    v59 = v2[1];
    v60 = type metadata accessor for AppPropertiesModel();
    v61 = (uint64_t (*)(uint64_t))type metadata accessor for AppPropertiesModel;
    v62 = &qword_10031CB88;
  }
LABEL_48:
  v65 = sub_100056D60(v62, v61);
  result = EnvironmentObject.error()(0, v59, v60, v65);
  __break(1u);
  return result;
}

uint64_t sub_1001E31E0()
{
  __int128 *v0;
  __int128 v1;
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _OWORD v24[7];
  uint64_t v25;
  _OWORD v26[5];
  _BYTE v27[25];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;

  v1 = v0[9];
  v36 = v0[8];
  v37 = v1;
  v38 = *((_QWORD *)v0 + 20);
  v2 = v0[5];
  v32 = v0[4];
  v33 = v2;
  v3 = v0[7];
  v34 = v0[6];
  v35 = v3;
  v4 = v0[1];
  v28 = *v0;
  v29 = v4;
  v5 = v0[3];
  v30 = v0[2];
  v31 = v5;
  if (qword_100315718 != -1)
    swift_once(&qword_100315718, sub_10000F858);
  v24[4] = xmmword_10033FB90;
  v24[5] = *(_OWORD *)&byte_10033FBA0;
  v24[6] = xmmword_10033FBB0;
  v25 = qword_10033FBC0;
  v24[0] = static ConnectionAssistantDisplayState.Metrics.fullScreen;
  v24[1] = *(_OWORD *)&qword_10033FB60;
  v24[2] = xmmword_10033FB70;
  v24[3] = *(_OWORD *)&qword_10033FB80;
  v26[0] = xmmword_100316FA8;
  v26[1] = unk_100316FB8;
  *(_OWORD *)&v27[9] = unk_100317001;
  v26[4] = xmmword_100316FE8;
  *(_OWORD *)v27 = unk_100316FF8;
  v26[2] = xmmword_100316FC8;
  v26[3] = unk_100316FD8;
  v6 = sub_1001E2714();
  v8 = v7;
  v10 = v9;
  v11 = swift_allocObject(&unk_1002F84E8, 184, 7);
  v12 = v37;
  *(_OWORD *)(v11 + 144) = v36;
  *(_OWORD *)(v11 + 160) = v12;
  *(_QWORD *)(v11 + 176) = v38;
  v13 = v33;
  *(_OWORD *)(v11 + 80) = v32;
  *(_OWORD *)(v11 + 96) = v13;
  v14 = v35;
  *(_OWORD *)(v11 + 112) = v34;
  *(_OWORD *)(v11 + 128) = v14;
  v15 = v29;
  *(_OWORD *)(v11 + 16) = v28;
  *(_OWORD *)(v11 + 32) = v15;
  v16 = v31;
  *(_OWORD *)(v11 + 48) = v30;
  *(_OWORD *)(v11 + 64) = v16;
  v17 = swift_allocObject(&unk_1002F8510, 184, 7);
  v18 = v37;
  *(_OWORD *)(v17 + 144) = v36;
  *(_OWORD *)(v17 + 160) = v18;
  *(_QWORD *)(v17 + 176) = v38;
  v19 = v33;
  *(_OWORD *)(v17 + 80) = v32;
  *(_OWORD *)(v17 + 96) = v19;
  v20 = v35;
  *(_OWORD *)(v17 + 112) = v34;
  *(_OWORD *)(v17 + 128) = v20;
  v21 = v29;
  *(_OWORD *)(v17 + 16) = v28;
  *(_OWORD *)(v17 + 32) = v21;
  v22 = v31;
  *(_OWORD *)(v17 + 48) = v30;
  *(_OWORD *)(v17 + 64) = v22;
  objc_allocWithZone((Class)type metadata accessor for ConnectionAssistantViewController());
  sub_1001E35E8((uint64_t *)&v28);
  sub_1001E35E8((uint64_t *)&v28);
  return sub_100067668((unsigned __int8 *)v24, v26, v6, v8, v10, (uint64_t)sub_1001E3578, v11, (uint64_t)sub_1001E35E0, v17);
}

_QWORD *sub_1001E33C0(uint64_t a1)
{
  return sub_1001E2B80(a1);
}

uint64_t sub_1001E342C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001E34F0();
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2, a3, v6);
}

uint64_t sub_1001E347C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;

  v6 = sub_1001E34F0();
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)(a1, a2, a3, v6);
}

void sub_1001E34CC(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001E34F0();
  UIViewControllerRepresentable.body.getter(a1, v2);
  __break(1u);
}

unint64_t sub_1001E34F0()
{
  unint64_t result;

  result = qword_100328740;
  if (!qword_100328740)
  {
    result = swift_getWitnessTable(&unk_10025D770, &type metadata for ExplorerConnectionAssistantView);
    atomic_store(result, (unint64_t *)&qword_100328740);
  }
  return result;
}

uint64_t sub_1001E3534(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003DB8(&qword_10031B548);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001E3578()
{
  uint64_t v0;

  return sub_1001E29F4(v0 + 16);
}

uint64_t sub_1001E3584()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_release(v0[10]);
  swift_release(v0[12]);
  swift_release(v0[14]);
  swift_release(v0[16]);
  return swift_deallocObject(v0, 184, 7);
}

_QWORD *sub_1001E35E0(uint64_t a1)
{
  uint64_t v1;

  return sub_1001E2AA0(a1, (double *)(v1 + 16));
}

uint64_t *sub_1001E35E8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[6];
  v6 = a1[8];
  v7 = a1[10];
  v8 = a1[12];
  swift_retain(a1[14]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  return a1;
}

unint64_t CTStewieConnectionAssistantEventType.debugDescription.getter(uint64_t a1)
{
  unint64_t result;
  Swift::String v3;
  void *object;

  result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x68636E75616C2ELL;
      break;
    case 2:
      result = 0x747365757165722ELL;
      break;
    case 3:
      result = 0xD000000000000013;
      break;
    case 4:
      result = 0x746978652ELL;
      break;
    case 6:
      result = 0x73736553646E652ELL;
      break;
    case 7:
      result = 0x6944726566666F2ELL;
      break;
    case 8:
      result = 0x6341726566666F2ELL;
      break;
    default:
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      result = 0x756C61567761722ELL;
      break;
  }
  return result;
}

unint64_t sub_1001E37F4()
{
  uint64_t *v0;

  return CTStewieConnectionAssistantEventType.debugDescription.getter(*v0);
}

uint64_t sub_1001E37FC(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

double ConnectionAssistantRendererEarthOutline.__allocating_init(device:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  double result;

  v3 = swift_allocObject(v1, 106, 7);
  result = 0.0;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_OWORD *)(v3 + 88) = 0u;
  *(_WORD *)(v3 + 104) = 1;
  *(_QWORD *)(v3 + 16) = a1;
  return result;
}

uint64_t sub_1001E3874(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10022B000(*a1, *a2);
}

Swift::Int sub_1001E3880()
{
  unsigned __int8 *v0;
  int v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v7[9];

  v1 = *v0;
  Hasher.init(_seed:)(v7, 0);
  v2 = 0xE600000000000000;
  v3 = 0x746E65726170;
  if (v1 != 1)
  {
    v3 = 0x616E6964726F6F63;
    v2 = 0xEB00000000736574;
  }
  if (v1)
    v4 = v3;
  else
    v4 = 1701667182;
  if (v1)
    v5 = v2;
  else
    v5 = 0xE400000000000000;
  String.hash(into:)(v7, v4, v5);
  swift_bridgeObjectRelease(v5);
  return Hasher._finalize()();
}

uint64_t sub_1001E391C(uint64_t a1)
{
  _BYTE *v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = 0xE600000000000000;
  v3 = 0x746E65726170;
  if (*v1 != 1)
  {
    v3 = 0x616E6964726F6F63;
    v2 = 0xEB00000000736574;
  }
  if (*v1)
    v4 = v3;
  else
    v4 = 1701667182;
  if (*v1)
    v5 = v2;
  else
    v5 = 0xE400000000000000;
  String.hash(into:)(a1, v4, v5);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_1001E3994(uint64_t a1)
{
  unsigned __int8 *v1;
  int v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[9];

  v2 = *v1;
  Hasher.init(_seed:)(v8, a1);
  v3 = 0xE600000000000000;
  v4 = 0x746E65726170;
  if (v2 != 1)
  {
    v4 = 0x616E6964726F6F63;
    v3 = 0xEB00000000736574;
  }
  if (v2)
    v5 = v4;
  else
    v5 = 1701667182;
  if (v2)
    v6 = v3;
  else
    v6 = 0xE400000000000000;
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  return Hasher._finalize()();
}

unint64_t sub_1001E3A2C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001E60C0(*a1);
  *a2 = result;
  return result;
}

void sub_1001E3A58(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE400000000000000;
  v4 = 0xE600000000000000;
  v5 = 0x746E65726170;
  if (v2 != 1)
  {
    v5 = 0x616E6964726F6F63;
    v4 = 0xEB00000000736574;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 1701667182;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1001E3AB4()
{
  _BYTE *v0;
  uint64_t v1;

  v1 = 0x746E65726170;
  if (*v0 != 1)
    v1 = 0x616E6964726F6F63;
  if (*v0)
    return v1;
  else
    return 1701667182;
}

unint64_t sub_1001E3B0C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_1001E60C0(a1);
  *a2 = result;
  return result;
}

void sub_1001E3B30(_BYTE *a1@<X8>)
{
  *a1 = 3;
}

uint64_t sub_1001E3B3C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001E5FCC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E3B64(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001E5FCC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001E3B8C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  _QWORD *v53;
  char v54;
  _QWORD v55[3];
  uint64_t v56;
  uint64_t v57;

  v3 = v1;
  v5 = sub_100003DB8(&qword_1003289C8);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3[4] = 0;
  v3[5] = 0;
  v3[7] = _swiftEmptyArrayStorage;
  v10 = a1[3];
  v11 = a1[4];
  v53 = a1;
  sub_100007BBC(a1, v10);
  v12 = sub_1001E5FCC();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ConnectionAssistantRendererEarthOutline.Shapes.Shape.CodingKeys, &type metadata for ConnectionAssistantRendererEarthOutline.Shapes.Shape.CodingKeys, v12, v10, v11);
  if (v2)
  {
    v13 = v53;
    swift_bridgeObjectRelease(v3[5]);
    swift_bridgeObjectRelease(v3[7]);
    v20 = type metadata accessor for ConnectionAssistantRendererEarthOutline.Shapes.Shape();
    swift_deallocPartialClassInstance(v3, v20, 64, 7);
    v21 = v13;
LABEL_4:
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v21);
    return (uint64_t)v3;
  }
  v52 = v6;
  LOBYTE(v55[0]) = 0;
  v14 = v5;
  v3[2] = KeyedDecodingContainer.decode(_:forKey:)(v55, v5);
  v3[3] = v15;
  LOBYTE(v55[0]) = 1;
  v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v55, v5);
  v17 = v3[5];
  v3[4] = v16;
  v3[5] = v18;
  v19 = swift_bridgeObjectRelease(v17);
  v54 = 2;
  KeyedDecodingContainer.nestedUnkeyedContainer(forKey:)(v55, &v54, v5, v19);
  v24 = v56;
  v23 = v57;
  sub_100007BBC(v55, v56);
  v25 = dispatch thunk of UnkeyedDecodingContainer.count.getter(v24, v23);
  if (v25 >= 0)
    v27 = v25;
  else
    v27 = v25 + 1;
  v28 = v27 >> 1;
  if ((v26 & 1) != 0)
    v28 = 0;
  if (_swiftEmptyArrayStorage[2] <= v28)
    v29 = v28;
  else
    v29 = _swiftEmptyArrayStorage[2];
  v51 = sub_1001728B0(0, v29, 0, _swiftEmptyArrayStorage);
  while (1)
  {
    v30 = v56;
    v31 = v57;
    sub_100007BBC(v55, v56);
    result = dispatch thunk of UnkeyedDecodingContainer.isAtEnd.getter(v30, v31);
    if ((result & 1) != 0)
      break;
    v32 = v56;
    v33 = v57;
    sub_10001D2C4((uint64_t)v55, v56);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v32, v33);
    v35 = v34;
    v36 = v56;
    v37 = v57;
    sub_10001D2C4((uint64_t)v55, v56);
    dispatch thunk of UnkeyedDecodingContainer.decode(_:)(v36, v37);
    v39 = v51;
    v41 = v51[2];
    v40 = v51[3];
    v42 = v41 + 1;
    if (v41 >= v40 >> 1)
    {
      v50 = v41 + 1;
      v51 = v38;
      v44 = sub_1001728B0((_QWORD *)(v40 > 1), v41 + 1, 1, v39);
      v42 = v50;
      v38 = v51;
      v39 = v44;
    }
    v39[2] = v42;
    v51 = v39;
    v43 = &v39[2 * v41];
    v43[4] = v35;
    v43[5] = v38;
  }
  v45 = v51;
  v46 = v51[2];
  if (v46)
  {
    v47 = v46 - 1;
    v48 = v52;
    v49 = v53;
    if (*((double *)v51 + 4) == *(double *)&v51[2 * v47 + 4] && *((double *)v51 + 5) == *(double *)&v51[2 * v47 + 5])
      v51[2] = v47;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v9, v14);
    v3[6] = v45;
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v55);
    v21 = v49;
    goto LABEL_4;
  }
  __break(1u);
  return result;
}

void sub_1001E3F38(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  __n128 v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double *v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  char v35;

  v3 = v2;
  v4 = v1;
  v6 = sub_100003DB8(&qword_100328A20);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v32[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  sub_100007BBC(a1, v11);
  v13 = sub_1001E5FCC();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ConnectionAssistantRendererEarthOutline.Shapes.Shape.CodingKeys, &type metadata for ConnectionAssistantRendererEarthOutline.Shapes.Shape.CodingKeys, v13, v11, v12);
  v14 = v4[2];
  v15 = v4[3];
  LOBYTE(v32[0]) = 0;
  swift_bridgeObjectRetain(v15);
  KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v32, v6);
  if (v3)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    swift_bridgeObjectRelease(v15);
  }
  else
  {
    swift_bridgeObjectRelease(v15);
    v16 = v4[4];
    v17 = v4[5];
    LOBYTE(v32[0]) = 1;
    v18 = swift_bridgeObjectRetain(v17);
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, v32, v6, v18);
    v19 = swift_bridgeObjectRelease(v17);
    v35 = 2;
    KeyedEncodingContainer.nestedUnkeyedContainer(forKey:)(v32, &v35, v6, v19);
    v21 = v4[6];
    v22 = *(_QWORD *)(v21 + 16);
    if (v22)
    {
      swift_bridgeObjectRetain(v21);
      v31 = v23;
      v24 = (double *)(v23 + 40);
      do
      {
        v26 = *(v24 - 1);
        v25 = *v24;
        v27 = v33;
        v28 = v34;
        sub_10001D2C4((uint64_t)v32, v33);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v27, v28, v26);
        v29 = v33;
        v30 = v34;
        sub_10001D2C4((uint64_t)v32, v33);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)(v29, v30, v25);
        v24 += 2;
        --v22;
      }
      while (v22);
      v20 = swift_bridgeObjectRelease(v31);
    }
    (*(void (**)(char *, uint64_t, __n128))(v7 + 8))(v10, v6, v20);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v32);
  }
}

CGMutablePathRef sub_1001E4160(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  CGMutablePathRef result;
  CGPath *v7;
  uint64_t v8;
  unint64_t v9;
  double v10;
  double v11;
  unint64_t v12;
  unint64_t v13;
  double *v14;
  double v15;
  double v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const CGPath *v22;
  uint64_t v23;
  _BYTE v24[24];
  CGAffineTransform transform;
  _QWORD v26[6];
  _QWORD v27[6];

  v3 = v2;
  result = CGPathCreateMutable();
  v7 = result;
  v8 = *(_QWORD *)(v2 + 48);
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = (*(double *)(v8 + 40) + 180.0) / 360.0 * a1;
    v11 = (90.0 - *(double *)(v8 + 32)) / 180.0;
    v27[0] = 0x3FF0000000000000;
    v27[1] = 0;
    v27[2] = 0;
    v27[3] = 0x3FF0000000000000;
    v27[4] = 0;
    v27[5] = 0;
    result = (CGMutablePathRef)CGMutablePathRef.move(to:transform:)(v27, v10, v11 * a2);
    v8 = *(_QWORD *)(v2 + 48);
    v9 = *(_QWORD *)(v8 + 16);
  }
  else
  {
    v10 = 0.0;
  }
  v12 = v9 != 0;
  if (v9 != v12)
  {
    v26[0] = 0x3FF0000000000000;
    v26[1] = 0;
    v26[2] = 0;
    v26[3] = 0x3FF0000000000000;
    v26[4] = 0;
    v26[5] = 0;
    v13 = v9 - v12;
    if (v9 <= v12)
      goto LABEL_28;
    swift_bridgeObjectRetain(v8);
    v14 = (double *)(v8 + 16 * v12 + 40);
    do
    {
      v15 = *(v14 - 1);
      v16 = (*v14 + 180.0) / 360.0 * a1;
      if (a1 * 0.5 <= vabdd_f64(v16, v10))
      {
        if (v10 >= a2 * 0.5)
          v17 = a2 * 0.5 + a2;
        else
          v17 = 0.0 - a2 * 0.5;
        CGMutablePathRef.addLine(to:transform:)(v26, v10, v17);
        CGMutablePathRef.addLine(to:transform:)(v26, v16, v17);
      }
      CGMutablePathRef.addLine(to:transform:)(v26, v16, (90.0 - v15) / 180.0 * a2);
      v14 += 2;
      v10 = v16;
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease(v8);
  }
  CGPathCloseSubpath(v7);
  swift_beginAccess(v3 + 56, v24, 0, 0);
  v18 = *(_QWORD *)(v3 + 56);
  if ((unint64_t)v18 >> 62)
  {
    if (v18 < 0)
      v23 = v18;
    else
      v23 = v18 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v18);
    result = (CGMutablePathRef)_CocoaArrayWrapper.endIndex.getter(v23);
    v19 = (uint64_t)result;
    if (result)
      goto LABEL_16;
LABEL_26:
    swift_bridgeObjectRelease(v18);
    return v7;
  }
  v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = (CGMutablePathRef)swift_bridgeObjectRetain(v18);
  if (!v19)
    goto LABEL_26;
LABEL_16:
  transform.a = 1.0;
  transform.b = 0.0;
  transform.c = 0.0;
  transform.d = 1.0;
  transform.tx = 0.0;
  transform.ty = 0.0;
  if (v19 >= 1)
  {
    v20 = 0;
    do
    {
      if ((v18 & 0xC000000000000001) != 0)
      {
        v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v20, v18);
      }
      else
      {
        v21 = *(_QWORD *)(v18 + 8 * v20 + 32);
        swift_retain(v21);
      }
      ++v20;
      v22 = (const CGPath *)sub_1001E4160(a1, a2);
      CGMutablePathRef.addPath(_:transform:)(v22, &transform);
      swift_release(v21);

    }
    while (v19 != v20);
    goto LABEL_26;
  }
  __break(1u);
LABEL_28:
  __break(1u);
  return result;
}

uint64_t sub_1001E4450()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocClassInstance(v0, 64, 7);
}

uint64_t sub_1001E448C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t result;

  v5 = type metadata accessor for ConnectionAssistantRendererEarthOutline.Shapes.Shape();
  swift_allocObject(v5, 64, 7);
  result = sub_1001E3B8C(a1);
  if (!v2)
    *a2 = result;
  return result;
}

void sub_1001E44E8(_QWORD *a1)
{
  sub_1001E3F38(a1);
}

Swift::Int sub_1001E4508()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  String.hash(into:)(v1, 0x736570616873, 0xE600000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1001E4554(uint64_t a1)
{
  return String.hash(into:)(a1, 0x736570616873, 0xE600000000000000);
}

Swift::Int sub_1001E4568(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  String.hash(into:)(v2, 0x736570616873, 0xE600000000000000);
  return Hasher._finalize()();
}

uint64_t sub_1001E45B0@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::String v3;
  void *v4;
  Swift::Int v5;
  uint64_t result;

  v3._countAndFlagsBits = *a1;
  v4 = (void *)a1[1];
  v3._object = v4;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002E2288, v3);
  result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_1001E4600(_QWORD *a1@<X8>)
{
  *a1 = 0x736570616873;
  a1[1] = 0xE600000000000000;
}

uint64_t sub_1001E4618()
{
  return 0x736570616873;
}

uint64_t sub_1001E462C@<X0>(Swift::String string@<0:X0, 8:X1>, BOOL *a2@<X8>)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  uint64_t result;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002E22C0, v3);
  result = swift_bridgeObjectRelease(object);
  *a2 = v5 != 0;
  return result;
}

void sub_1001E4680(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1001E468C(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001E6728();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1001E46B4(uint64_t a1)
{
  unint64_t v2;

  v2 = sub_1001E6728();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1001E46DC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = sub_100003DB8(&qword_100328A08);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a1[3];
  v10 = a1[4];
  sub_100007BBC(a1, v9);
  v11 = sub_1001E6728();
  dispatch thunk of Encoder.container<A>(keyedBy:)(&type metadata for ConnectionAssistantRendererEarthOutline.Shapes.CodingKeys, &type metadata for ConnectionAssistantRendererEarthOutline.Shapes.CodingKeys, v11, v9, v10);
  v17 = a2;
  v12 = sub_100003DB8(&qword_1003289E8);
  v13 = sub_1001E676C(&qword_100328A10, &qword_100328A18, (uint64_t)&unk_10025DA68, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, v14, v4, v12, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

void sub_1001E4800(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;

  sub_1001E6390(a1);
  if (!v2)
    *a2 = v4;
}

uint64_t sub_1001E4828(_QWORD *a1)
{
  uint64_t *v1;

  return sub_1001E46DC(a1, *v1);
}

uint64_t ConnectionAssistantRendererEarthOutline.Textures.outlineTextureBlur1.getter(uint64_t a1, uint64_t a2)
{
  return swift_unknownObjectRetain(a2);
}

uint64_t ConnectionAssistantRendererEarthOutline.Buffers.coordinatesCount.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

uint64_t ConnectionAssistantRendererEarthOutline.Buffers.coordinatesBuffer.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_unknownObjectRetain(a4);
}

uint64_t ConnectionAssistantRendererEarthOutline.Textures.outlineTextureBlur2.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_unknownObjectRetain(a3);
}

uint64_t sub_1001E4864@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v9[24];

  v3 = (_QWORD *)*a1;
  swift_beginAccess(*a1 + 24, v9, 0, 0);
  v4 = v3[3];
  v5 = v3[4];
  v6 = v3[5];
  v7 = v3[6];
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return sub_10001DC98(v4, v5, v6, v7);
}

uint64_t sub_1001E48B4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = (_QWORD *)*a2;
  swift_beginAccess(*a2 + 24, v12, 1, 0);
  v7 = v6[3];
  v8 = v6[4];
  v9 = v6[5];
  v10 = v6[6];
  v6[3] = v2;
  v6[4] = v3;
  v6[5] = v4;
  v6[6] = v5;
  sub_10001DC98(v2, v3, v4, v5);
  return sub_10001D578(v7, v8, v9, v10);
}

uint64_t ConnectionAssistantRendererEarthOutline.buffers.getter()
{
  _QWORD *v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 3, v3, 0, 0);
  v1 = v0[3];
  sub_10001DC98(v1, v0[4], v0[5], v0[6]);
  return v1;
}

uint64_t sub_1001E49B4@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE v8[24];

  v3 = (_QWORD *)*a1;
  swift_beginAccess(*a1 + 56, v8, 0, 0);
  v4 = v3[7];
  v5 = v3[8];
  v6 = v3[9];
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  return sub_1001E4B18(v4, v5, v6);
}

double sub_1001E4A04(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v10[24];

  v2 = *a1;
  v3 = a1[1];
  v4 = a1[2];
  v5 = (_QWORD *)*a2;
  swift_beginAccess(*a2 + 56, v10, 1, 0);
  v6 = v5[7];
  v7 = v5[8];
  v8 = v5[9];
  v5[7] = v2;
  v5[8] = v3;
  v5[9] = v4;
  sub_1001E4B18(v2, v3, v4);
  return sub_1001E5D3C(v6, v7, v8);
}

uint64_t ConnectionAssistantRendererEarthOutline.textures.getter()
{
  _QWORD *v0;
  uint64_t v1;
  _BYTE v3[24];

  swift_beginAccess(v0 + 7, v3, 0, 0);
  v1 = v0[7];
  sub_1001E4B18(v1, v0[8], v0[9]);
  return v1;
}

uint64_t ConnectionAssistantRendererEarthOutline.init(device:)(uint64_t a1)
{
  uint64_t v1;

  *(_OWORD *)(v1 + 88) = 0u;
  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_WORD *)(v1 + 104) = 1;
  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_1001E4B18(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_unknownObjectRetain(result);
    swift_unknownObjectRetain(a2);
    return swift_unknownObjectRetain(a3);
  }
  return result;
}

uint64_t ConnectionAssistantRendererEarthOutline.loadTexturesIfNecessary(in:)(uint64_t a1, uint64_t a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v7 = sub_100003DB8(&qword_100328750);
  result = __chkstk_darwin(v7, v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v3 + 105) & 1) != 0)
    return result;
  if ((*(_BYTE *)(v3 + 104) & 1) != 0)
    goto LABEL_20;
  v12 = *(_QWORD *)(v3 + 80);
  v13 = __OFSUB__(a1, v12);
  v14 = a1 - v12;
  if (v13)
  {
    __break(1u);
    goto LABEL_25;
  }
  v15 = *(_QWORD *)(v3 + 88);
  if (v14 < 0)
  {
    v13 = __OFSUB__(0, v14);
    v14 = -v14;
    if (v13)
      goto LABEL_26;
  }
  if (a1 >= 0)
    v16 = a1;
  else
    v16 = a1 + 1;
  v13 = __OFSUB__(a2, v15);
  v17 = a2 - v15;
  if (v13)
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    return result;
  }
  if (v17 < 0)
  {
    v13 = __OFSUB__(0, v17);
    v17 = -v17;
    if (v13)
      goto LABEL_27;
  }
  v18 = v16 >> 1;
  if (a2 >= 0)
    v19 = a2;
  else
    v19 = a2 + 1;
  if (v19 >> 1 < v17 || v18 < v14)
  {
LABEL_20:
    if (a1)
    {
      if (a2)
      {
        *(_QWORD *)(v3 + 80) = a1;
        *(_QWORD *)(v3 + 88) = a2;
        *(double *)(v3 + 96) = a3;
        *(_WORD *)(v3 + 104) = 256;
        v21 = *(_QWORD *)(v3 + 16);
        static TaskPriority.userInitiated.getter(result);
        v22 = type metadata accessor for TaskPriority(0);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v11, 0, 1, v22);
        v23 = swift_allocObject(&unk_1002F85E0, 72, 7);
        *(_QWORD *)(v23 + 16) = 0;
        *(_QWORD *)(v23 + 24) = 0;
        *(_QWORD *)(v23 + 32) = v21;
        *(_QWORD *)(v23 + 40) = a1;
        *(_QWORD *)(v23 + 48) = a2;
        *(double *)(v23 + 56) = a3;
        *(_QWORD *)(v23 + 64) = v3;
        swift_unknownObjectRetain(v21);
        swift_retain(v3);
        v24 = sub_1001E51D8((uint64_t)v11, (uint64_t)&unk_100328760, v23);
        swift_release(v24);
        return sub_100007FF0((uint64_t)v11, &qword_100328750);
      }
    }
  }
  return result;
}

uint64_t sub_1001E4CE8(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;

  *(_QWORD *)(v8 + 96) = a8;
  *(double *)(v8 + 88) = a1;
  *(_QWORD *)(v8 + 72) = a6;
  *(_QWORD *)(v8 + 80) = a7;
  *(_QWORD *)(v8 + 64) = a5;
  return swift_task_switch(sub_1001E4D0C, 0, 0);
}

uint64_t sub_1001E4D0C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  sub_1001E73F4(*(_QWORD **)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), &v7, *(double *)(v0 + 88));
  *(_QWORD *)(v0 + 104) = 0;
  *(_OWORD *)(v0 + 112) = v7;
  v1 = v9;
  *(_QWORD *)(v0 + 128) = v8;
  *(_QWORD *)(v0 + 136) = v1;
  *(_OWORD *)(v0 + 144) = v10;
  *(_QWORD *)(v0 + 160) = v11;
  v2 = type metadata accessor for MainActor(0);
  *(_QWORD *)(v0 + 168) = static MainActor.shared.getter(v3);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, &protocol witness table for MainActor);
  return swift_task_switch(sub_1001E4ED8, v4, v5);
}

uint64_t sub_1001E4ED8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = v0[18];
  v15 = v0[19];
  v16 = v0[20];
  v2 = v0[16];
  v14 = v0[17];
  v4 = v0[14];
  v3 = v0[15];
  v5 = v0[12];
  swift_release(v0[21]);
  *(_BYTE *)(v5 + 105) = 0;
  swift_beginAccess(v5 + 56, v0 + 2, 1, 0);
  v6 = *(_QWORD *)(v5 + 56);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(v5 + 72);
  *(_QWORD *)(v5 + 56) = v4;
  *(_QWORD *)(v5 + 64) = v3;
  *(_QWORD *)(v5 + 72) = v2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRetain(v2);
  sub_1001E5D3C(v6, v7, v8);
  swift_beginAccess(v5 + 24, v0 + 5, 1, 0);
  v9 = *(_QWORD *)(v5 + 24);
  v10 = *(_QWORD *)(v5 + 32);
  v11 = *(_QWORD *)(v5 + 40);
  v12 = *(_QWORD *)(v5 + 48);
  *(_QWORD *)(v5 + 24) = v14;
  *(_QWORD *)(v5 + 32) = v1;
  *(_QWORD *)(v5 + 40) = v15;
  *(_QWORD *)(v5 + 48) = v16;
  swift_unknownObjectRetain(v1);
  swift_unknownObjectRetain(v16);
  sub_10001D578(v9, v10, v11, v12);
  return swift_task_switch(sub_1001E4FF4, 0, 0);
}

uint64_t sub_1001E4FF4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;

  v1 = *(_QWORD *)(v0 + 160);
  v2 = *(_QWORD *)(v0 + 144);
  v4 = *(_QWORD *)(v0 + 120);
  v3 = *(_QWORD *)(v0 + 128);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 112));
  swift_unknownObjectRelease(v4);
  swift_unknownObjectRelease(v3);
  swift_unknownObjectRelease(v2);
  v5 = swift_unknownObjectRelease(v1);
  return (*(uint64_t (**)(__n128))(v0 + 8))(v5);
}

uint64_t sub_1001E5058()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_release(*(_QWORD *)(v0 + 176));
  *(_BYTE *)(v1 + 105) = 0;
  return swift_task_switch(sub_1001E509C, 0, 0);
}

uint64_t sub_1001E509C()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001E50CC()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_unknownObjectRelease(v0[4]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1001E5100()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  v7 = *(_OWORD *)(v0 + 32);
  v2 = *(_QWORD *)(v0 + 48);
  v3 = *(_QWORD *)(v0 + 56);
  v4 = *(_QWORD *)(v0 + 64);
  v5 = swift_task_alloc(dword_10032875C);
  *(_QWORD *)(v1 + 16) = v5;
  *(_QWORD *)v5 = v1;
  *(_QWORD *)(v5 + 8) = sub_1001E5190;
  *(_QWORD *)(v5 + 96) = v4;
  *(_QWORD *)(v5 + 88) = v3;
  *(_QWORD *)(v5 + 80) = v2;
  *(_OWORD *)(v5 + 64) = v7;
  return swift_task_switch(sub_1001E4D0C, 0, 0);
}

uint64_t sub_1001E5190()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1001E51D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t ObjectType;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v23[4];

  v6 = sub_100003DB8(&qword_100328750);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001E6828(a1, (uint64_t)v9);
  v10 = type metadata accessor for TaskPriority(0);
  v11 = *(_QWORD *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_100007FF0((uint64_t)v9, &qword_100328750);
    v12 = 4096;
    v13 = *(_QWORD *)(a3 + 16);
    if (v13)
    {
LABEL_3:
      v14 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v13);
      swift_unknownObjectRetain(v13);
      v16 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v14);
      v18 = v17;
      swift_unknownObjectRelease(v13);
      goto LABEL_6;
    }
  }
  else
  {
    v19 = TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v10);
    v12 = v19 | 0x1000;
    v13 = *(_QWORD *)(a3 + 16);
    if (v13)
      goto LABEL_3;
  }
  v16 = 0;
  v18 = 0;
LABEL_6:
  v20 = swift_allocObject(&unk_1002F87F0, 32, 7);
  *(_QWORD *)(v20 + 16) = a2;
  *(_QWORD *)(v20 + 24) = a3;
  if (v18 | v16)
  {
    v23[0] = 0;
    v23[1] = 0;
    v21 = v23;
    v23[2] = v16;
    v23[3] = v18;
  }
  else
  {
    v21 = 0;
  }
  return swift_task_create(v12, v21, (char *)&type metadata for () + 8, &unk_100328A30, v20);
}

void sub_1001E5368(void *a1, uint64_t a2, double a3, double a4, CGFloat a5, double a6, double a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  double v20;
  double v21;
  uint64_t v22;
  const CGPath *v23;
  CGContext *v24;
  CGContext *v25;
  CGContext *v26;
  CGContext *v27;
  CGContext *v28;
  id v29;
  uint64_t v30;
  CGContext *v31;
  CGContext *v32;
  double v33;
  double v34;
  double v35;
  CGColor *v36;
  CGContext *v37;
  CGFloat v38;
  CGContext *v39;
  CGContext *v40;
  CGColor *v41;
  CGContext *v42;
  CGContext *v43;
  CGContext *v44;
  CGContext *v45;
  CGFloat v46;
  CGContext *v47;
  CGContext *v48;
  CGContext *v49;
  CGContext *v50;
  CGContext *v51;
  CGContext *v52;
  CGContext *v53;
  CGFloat v54;
  CGContext *v55;
  CGContext *v56;
  CGContext *v57;
  CGContext *v58;
  CGContext *v59;
  CGContext *v60;
  CGContext *v61;
  CGFloat v62;
  CGContext *v63;
  CGContext *v64;
  CGContext *v65;
  CGContext *v66;
  CGContext *v67;
  CGContext *v68;
  CGContext *v69;
  CGFloat v70;
  CGContext *v71;
  CGContext *v72;
  CGContext *v73;
  CGColor *v74;
  CGContext *v75;
  CGContext *v76;
  CGContext *v77;
  CGContext *v78;
  CGContext *v79;
  CGContext *v80;
  CGContext *v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  double v85;
  double v86;
  double v87;
  double v88;
  uint64_t v89;
  double v90;
  CGColorRef v91;
  CGColorRef GenericRGB;
  unsigned int v93;
  unint64_t v94;
  uint64_t v95;
  uint64_t v96;
  CGColorRef v97;
  CGSize v98;
  CGSize v99;
  CGSize v100;
  CGSize v101;
  CGSize v102;
  CGSize v103;

  v90 = a7;
  v13 = type metadata accessor for CGPathFillRule(0);
  v96 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v85 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  GenericRGB = CGColorCreateGenericRGB(1.0, 0.0, 0.0, 1.0);
  v91 = CGColorCreateGenericRGB(0.0, 1.0, 0.0, 1.0);
  v97 = CGColorCreateGenericRGB(0.0, 0.0, 1.0, 1.0);
  if ((unint64_t)a2 >> 62)
  {
    if (a2 < 0)
      v84 = a2;
    else
      v84 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
    v17 = _CocoaArrayWrapper.endIndex.getter(v84);
    if (v17)
      goto LABEL_3;
LABEL_21:

    swift_bridgeObjectRelease(a2);
    return;
  }
  v17 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  if (!v17)
    goto LABEL_21;
LABEL_3:
  if (v17 >= 1)
  {
    v18 = 0;
    v19 = a2 & 0xC000000000000001;
    v20 = -a3;
    v21 = -a4;
    v93 = enum case for CGPathFillRule.evenOdd(_:);
    v87 = v90 * 0.125;
    v88 = v90 * 0.0625;
    v85 = v90 * 0.5;
    v86 = v90 * 0.25;
    v89 = v13;
    v94 = a2 & 0xC000000000000001;
    v95 = v17;
    while (1)
    {
      if (v19)
      {
        v22 = specialized _ArrayBuffer._getElementSlowPath(_:)(v18, a2);
        if (!*(_QWORD *)(v22 + 40))
          goto LABEL_11;
      }
      else
      {
        v22 = *(_QWORD *)(a2 + 8 * v18 + 32);
        swift_retain(v22);
        if (!*(_QWORD *)(v22 + 40))
        {
LABEL_11:
          v23 = sub_1001E4160(a3, a4);
          v24 = (CGContext *)objc_msgSend(a1, "CGContext");
          CGContextSaveGState(v24);

          v25 = (CGContext *)objc_msgSend(a1, "CGContext");
          CGContextSetBlendMode(v25, kCGBlendModePlusLighter);

          v26 = (CGContext *)objc_msgSend(a1, "CGContext");
          v27 = v26;
          if (a5 == 0.0)
          {
            CGContextSetFillColorWithColor(v26, v97);

            v28 = (CGContext *)objc_msgSend(a1, "CGContext");
            CGContextAddPath(v28, v23);

            v29 = objc_msgSend(a1, "CGContext");
            v30 = v96;
            (*(void (**)(char *, _QWORD, uint64_t))(v96 + 104))(v16, v93, v13);
            CGContextRef.fillPath(using:)(v16);

            (*(void (**)(char *, uint64_t))(v30 + 8))(v16, v13);
            v31 = (CGContext *)objc_msgSend(a1, "CGContext");
            CGContextTranslateCTM(v31, v20, v21);

            if (a6 != 0.0)
              goto LABEL_13;
          }
          else
          {
            CGContextTranslateCTM(v26, v20, v21);

            v79 = (CGContext *)objc_msgSend(a1, "CGContext");
            v103.width = a3;
            v103.height = a4;
            CGContextSetShadowWithColor(v79, v103, a5, v97);

            v80 = (CGContext *)objc_msgSend(a1, "CGContext");
            CGContextSetFillColorWithColor(v80, GenericRGB);

            v81 = (CGContext *)objc_msgSend(a1, "CGContext");
            CGContextAddPath(v81, v23);

            v82 = objc_msgSend(a1, "CGContext");
            v83 = v96;
            (*(void (**)(char *, _QWORD, uint64_t))(v96 + 104))(v16, v93, v13);
            CGContextRef.fillPath(using:)(v16);

            (*(void (**)(char *, uint64_t))(v83 + 8))(v16, v13);
            if (a6 != 0.0)
            {
LABEL_13:
              v32 = (CGContext *)objc_msgSend(a1, "CGContext", *(_QWORD *)&v85);
              v98.width = a3;
              v98.height = a4;
              v33 = v21;
              v34 = v20;
              v35 = v88;
              v36 = v91;
              CGContextSetShadowWithColor(v32, v98, v88, v91);

              v37 = (CGContext *)objc_msgSend(a1, "CGContext");
              v38 = v35;
              v20 = v34;
              v21 = v33;
              CGContextSetLineWidth(v37, v38);

              v39 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextSetLineJoin(v39, kCGLineJoinBevel);

              v40 = (CGContext *)objc_msgSend(a1, "CGContext");
              v41 = GenericRGB;
              CGContextSetStrokeColorWithColor(v40, GenericRGB);

              v42 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextSetAlpha(v42, a6 * 0.2);

              v43 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextAddPath(v43, v23);

              v44 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextStrokePath(v44);

              v45 = (CGContext *)objc_msgSend(a1, "CGContext");
              v99.width = a3;
              v99.height = a4;
              v46 = v87;
              CGContextSetShadowWithColor(v45, v99, v87, v36);

              v47 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextSetLineWidth(v47, v46);

              v48 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextSetLineJoin(v48, kCGLineJoinBevel);

              v49 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextSetStrokeColorWithColor(v49, v41);

              v50 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextSetAlpha(v50, a6 * 0.2);

              v51 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextAddPath(v51, v23);

              v52 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextStrokePath(v52);

              v53 = (CGContext *)objc_msgSend(a1, "CGContext");
              v100.width = a3;
              v100.height = a4;
              v54 = v86;
              CGContextSetShadowWithColor(v53, v100, v86, v36);

              v55 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextSetLineWidth(v55, v54);

              v56 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextSetLineJoin(v56, kCGLineJoinBevel);

              v57 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextSetStrokeColorWithColor(v57, v41);

              v58 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextSetAlpha(v58, a6 * 0.2);

              v59 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextAddPath(v59, v23);

              v60 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextStrokePath(v60);

              v61 = (CGContext *)objc_msgSend(a1, "CGContext");
              v101.width = a3;
              v101.height = a4;
              v62 = v85;
              CGContextSetShadowWithColor(v61, v101, v85, v36);

              v63 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextSetLineWidth(v63, v62);

              v64 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextSetLineJoin(v64, kCGLineJoinBevel);

              v65 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextSetStrokeColorWithColor(v65, v41);

              v66 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextSetAlpha(v66, a6 * 0.2);

              v67 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextAddPath(v67, v23);

              v68 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextStrokePath(v68);

              v69 = (CGContext *)objc_msgSend(a1, "CGContext");
              v102.width = a3;
              v102.height = a4;
              v70 = v90;
              CGContextSetShadowWithColor(v69, v102, v90, v36);

              v71 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextSetLineWidth(v71, v70);

              v72 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextSetLineJoin(v72, kCGLineJoinBevel);

              v73 = (CGContext *)objc_msgSend(a1, "CGContext");
              v74 = v41;
              v13 = v89;
              CGContextSetStrokeColorWithColor(v73, v74);

              v75 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextSetAlpha(v75, a6 * 0.2);

              v76 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextAddPath(v76, v23);

              v77 = (CGContext *)objc_msgSend(a1, "CGContext");
              CGContextStrokePath(v77);

            }
          }
          v78 = (CGContext *)objc_msgSend(a1, "CGContext", *(_QWORD *)&v85);
          CGContextRestoreGState(v78);
          swift_release(v22);

          v19 = v94;
          v17 = v95;
          goto LABEL_6;
        }
      }
      swift_release(v22);
LABEL_6:
      if (v17 == ++v18)
        goto LABEL_21;
    }
  }
  __break(1u);
}

_QWORD *ConnectionAssistantRendererEarthOutline.deinit()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  sub_10001D578(v0[3], v0[4], v0[5], v0[6]);
  sub_1001E5D3C(v0[7], v0[8], v0[9]);
  return v0;
}

double sub_1001E5D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  if (a1)
  {
    swift_unknownObjectRelease(a1);
    swift_unknownObjectRelease(a2);
    *(_QWORD *)&result = swift_unknownObjectRelease(a3).n128_u64[0];
  }
  return result;
}

uint64_t ConnectionAssistantRendererEarthOutline.__deallocating_deinit()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  sub_10001D578(v0[3], v0[4], v0[5], v0[6]);
  sub_1001E5D3C(v0[7], v0[8], v0[9]);
  return swift_deallocClassInstance(v0, 106, 7);
}

unint64_t sub_1001E5DB4()
{
  unint64_t result;

  result = qword_100328768;
  if (!qword_100328768)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConnectionAssistantRendererEarthOutline.Error, &type metadata for ConnectionAssistantRendererEarthOutline.Error);
    atomic_store(result, (unint64_t *)&qword_100328768);
  }
  return result;
}

uint64_t type metadata accessor for ConnectionAssistantRendererEarthOutline()
{
  return objc_opt_self(_TtC8SOSBuddy39ConnectionAssistantRendererEarthOutline);
}

uint64_t type metadata accessor for ConnectionAssistantRendererEarthOutline.Shapes.Shape()
{
  return objc_opt_self(_TtCVC8SOSBuddy39ConnectionAssistantRendererEarthOutlineP33_ACFEFF7FB2603A0B0DB9F2513FD885EF6Shapes5Shape);
}

ValueMetadata *type metadata accessor for ConnectionAssistantRendererEarthOutline.Error()
{
  return &type metadata for ConnectionAssistantRendererEarthOutline.Error;
}

ValueMetadata *type metadata accessor for ConnectionAssistantRendererEarthOutline.Buffers()
{
  return &type metadata for ConnectionAssistantRendererEarthOutline.Buffers;
}

double destroy for ConnectionAssistantRendererEarthOutline.Textures(_QWORD *a1)
{
  double result;

  swift_unknownObjectRelease(*a1);
  swift_unknownObjectRelease(a1[1]);
  *(_QWORD *)&result = swift_unknownObjectRelease(a1[2]).n128_u64[0];
  return result;
}

uint64_t *_s8SOSBuddy39ConnectionAssistantRendererEarthOutlineC8TexturesVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for ConnectionAssistantRendererEarthOutline.Textures(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRelease(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_unknownObjectRetain(v8);
  swift_unknownObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for ConnectionAssistantRendererEarthOutline.Textures(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_unknownObjectRelease(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_unknownObjectRelease(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRelease(v5);
  return a1;
}

ValueMetadata *type metadata accessor for ConnectionAssistantRendererEarthOutline.Textures()
{
  return &type metadata for ConnectionAssistantRendererEarthOutline.Textures;
}

ValueMetadata *type metadata accessor for ConnectionAssistantRendererEarthOutline.Shapes()
{
  return &type metadata for ConnectionAssistantRendererEarthOutline.Shapes;
}

unint64_t sub_1001E5FCC()
{
  unint64_t result;

  result = qword_1003289D0;
  if (!qword_1003289D0)
  {
    result = swift_getWitnessTable(&unk_10025DCF4, &type metadata for ConnectionAssistantRendererEarthOutline.Shapes.Shape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1003289D0);
  }
  return result;
}

uint64_t sub_1001E6010(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_1001E6074;
  return v6(a1);
}

uint64_t sub_1001E6074()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t sub_1001E60C0(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002E2220, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

_QWORD *sub_1001E6108(unint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  _BOOL8 v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *result;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;

  v1 = a1;
  v37 = _swiftEmptyDictionarySingleton;
  if (a1 >> 62)
  {
LABEL_23:
    if (v1 < 0)
      v31 = v1;
    else
      v31 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v31);
    swift_bridgeObjectRelease(v1);
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v2)
    {
LABEL_3:
      v34 = v1 & 0xC000000000000001;
      v3 = _swiftEmptyDictionarySingleton;
      v4 = 4;
      v33 = v2;
      while (1)
      {
        v10 = v4 - 4;
        if (v34)
        {
          v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4 - 4, v1);
          v12 = v4 - 3;
          if (__OFADD__(v10, 1))
            goto LABEL_20;
        }
        else
        {
          v11 = *(_QWORD *)(v1 + 8 * v4);
          swift_retain(v11);
          v12 = v4 - 3;
          if (__OFADD__(v10, 1))
          {
LABEL_20:
            __break(1u);
LABEL_21:
            __break(1u);
LABEL_22:
            __break(1u);
            goto LABEL_23;
          }
        }
        v35 = v12;
        v13 = v1;
        v15 = *(_QWORD *)(v11 + 16);
        v14 = *(_QWORD *)(v11 + 24);
        swift_bridgeObjectRetain(v14);
        v1 = (uint64_t)v3;
        v17 = sub_10017D3B0(v15, v14);
        v18 = v3[2];
        v19 = (v16 & 1) == 0;
        v20 = v18 + v19;
        if (__OFADD__(v18, v19))
          goto LABEL_21;
        v21 = v16;
        if (v3[3] < v20)
        {
          sub_10008A24C(v20, 1);
          v3 = v37;
          v22 = sub_10017D3B0(v15, v14);
          if ((v21 & 1) != (v23 & 1))
          {
            result = (_QWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
            __break(1u);
            return result;
          }
          v17 = v22;
        }
        if ((v21 & 1) != 0)
        {
          swift_bridgeObjectRelease(v14);
          v5 = (_QWORD *)(v3[7] + 8 * v17);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v6);
          v8 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x10);
          v7 = *(_QWORD *)((*v5 & 0xFFFFFFFFFFFFFF8) + 0x18);
          if (v8 >= v7 >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v7 > 1, v8 + 1, 1);
          v9 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v8, v11);
          specialized Array._endMutation()(v9);
        }
        else
        {
          v24 = sub_100003DB8(&qword_100328A00);
          v25 = swift_allocObject(v24, 40, 7);
          *(_OWORD *)(v25 + 16) = xmmword_10024E820;
          *(_QWORD *)(v25 + 32) = v11;
          v36 = v25;
          v1 = (uint64_t)&v36;
          specialized Array._endMutation()(v25);
          v26 = v36;
          v3[(v17 >> 6) + 8] |= 1 << v17;
          v27 = (uint64_t *)(v3[6] + 16 * v17);
          *v27 = v15;
          v27[1] = v14;
          *(_QWORD *)(v3[7] + 8 * v17) = v26;
          v28 = v3[2];
          v29 = __OFADD__(v28, 1);
          v30 = v28 + 1;
          if (v29)
            goto LABEL_22;
          v3[2] = v30;
        }
        v1 = v13;
        ++v4;
        if (v35 == v33)
          return v3;
      }
    }
  }
  return _swiftEmptyDictionarySingleton;
}

void sub_1001E6390(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  _QWORD v36[2];
  char *v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD v40[3];
  unint64_t v41;

  v3 = sub_100003DB8(&qword_1003289D8);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = a1[3];
  v9 = a1[4];
  sub_100007BBC(a1, v8);
  v10 = sub_1001E6728();
  dispatch thunk of Decoder.container<A>(keyedBy:)(&type metadata for ConnectionAssistantRendererEarthOutline.Shapes.CodingKeys, &type metadata for ConnectionAssistantRendererEarthOutline.Shapes.CodingKeys, v10, v8, v9);
  if (v1)
  {
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
    return;
  }
  v11 = sub_100003DB8(&qword_1003289E8);
  v12 = sub_1001E676C(&qword_1003289F0, &qword_1003289F8, (uint64_t)&unk_10025DA90, (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v40, v11, v13, v3, v11, v12);
  v37 = v7;
  v38 = v4;
  v39 = v3;
  v14 = v40[0];
  swift_bridgeObjectRetain(v40[0]);
  v16 = sub_1001E6108(v15);
  swift_bridgeObjectRelease(v14);
  v36[1] = 0;
  if ((unint64_t)v14 >> 62)
    goto LABEL_32;
  v17 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(v14);
  if (v17)
  {
LABEL_6:
    if (v17 >= 1)
    {
      v18 = 0;
      v19 = v14 & 0xC000000000000001;
      v41 = v14 & 0xC000000000000001;
      while (1)
      {
        if (v19)
        {
          v21 = specialized _ArrayBuffer._getElementSlowPath(_:)(v18, v14);
          v22 = *(_QWORD *)(v21 + 40);
          if (!v22)
            goto LABEL_10;
        }
        else
        {
          v21 = *(_QWORD *)(v14 + 8 * v18 + 32);
          swift_retain(v21);
          v22 = *(_QWORD *)(v21 + 40);
          if (!v22)
            goto LABEL_10;
        }
        if (!v16[2])
          goto LABEL_10;
        v23 = *(_QWORD *)(v21 + 32);
        swift_bridgeObjectRetain(v22);
        v24 = sub_10017D3B0(v23, v22);
        if ((v25 & 1) == 0)
          break;
        v26 = *(_QWORD *)(v16[7] + 8 * v24);
        swift_bridgeObjectRetain(v26);
        swift_bridgeObjectRelease(v22);
        if ((unint64_t)v26 >> 62)
        {
          if (v26 < 0)
            v32 = v26;
          else
            v32 = v26 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(v26);
          v33 = _CocoaArrayWrapper.endIndex.getter(v32);
          swift_bridgeObjectRelease(v26);
          if (!v33)
          {
LABEL_29:
            v20 = v26;
            goto LABEL_9;
          }
        }
        else if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          goto LABEL_29;
        }
        if ((v26 & 0xC000000000000001) != 0)
        {
          v27 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v26);
        }
        else
        {
          if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
LABEL_32:
            if (v14 < 0)
              v34 = v14;
            else
              v34 = v14 & 0xFFFFFFFFFFFFFF8;
            swift_bridgeObjectRetain(v14);
            v17 = _CocoaArrayWrapper.endIndex.getter(v34);
            if (!v17)
              goto LABEL_36;
            goto LABEL_6;
          }
          v27 = *(_QWORD *)(v26 + 32);
          swift_retain(v27);
        }
        swift_bridgeObjectRelease(v26);
        swift_beginAccess(v27 + 56, v40, 33, 0);
        swift_retain(v21);
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
        v30 = *(_QWORD *)((*(_QWORD *)(v27 + 56) & 0xFFFFFFFFFFFFFF8) + 0x10);
        v29 = *(_QWORD *)((*(_QWORD *)(v27 + 56) & 0xFFFFFFFFFFFFFF8) + 0x18);
        if (v30 >= v29 >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1);
        v31 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v30, v21);
        specialized Array._endMutation()(v31);
        swift_endAccess(v40);
        swift_release(v21);
        v21 = v27;
        v19 = v41;
LABEL_10:
        ++v18;
        swift_release(v21);
        if (v17 == v18)
          goto LABEL_36;
      }
      v20 = v22;
LABEL_9:
      swift_bridgeObjectRelease(v20);
      goto LABEL_10;
    }
    __break(1u);
  }
  else
  {
LABEL_36:
    swift_bridgeObjectRelease(v16);
    v35 = swift_bridgeObjectRelease(v14);
    (*(void (**)(char *, uint64_t, __n128))(v38 + 8))(v37, v39, v35);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(a1);
  }
}

unint64_t sub_1001E6728()
{
  unint64_t result;

  result = qword_1003289E0;
  if (!qword_1003289E0)
  {
    result = swift_getWitnessTable(&unk_10025DCA4, &type metadata for ConnectionAssistantRendererEarthOutline.Shapes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1003289E0);
  }
  return result;
}

uint64_t sub_1001E676C(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = *a1;
  if (!result)
  {
    v9 = sub_100007FAC(&qword_1003289E8);
    sub_1001E67E8(a2, a3);
    result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001E67E8(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for ConnectionAssistantRendererEarthOutline.Shapes.Shape();
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001E6828(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100328750);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001E6870()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001E6894(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_100328A2C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1001E5190;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_100328A28 + dword_100328A28))(a1, v4);
}

id sub_1001E6904(uint64_t a1, id a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  id v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  void *v31;
  uint64_t v32;
  id aBlock[5];
  uint64_t v35;

  v16 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRendererFormat), "init");
  objc_msgSend(v16, "setScale:", a5);
  objc_msgSend(v16, "setOpaque:", 1);
  v17 = objc_msgSend(objc_allocWithZone((Class)UIGraphicsImageRenderer), "initWithSize:format:", v16, a3, a4);
  v18 = swift_allocObject(&unk_1002F8818, 64, 7);
  *(double *)(v18 + 16) = a3;
  *(double *)(v18 + 24) = a4;
  *(_QWORD *)(v18 + 32) = a1;
  *(double *)(v18 + 40) = a8;
  *(double *)(v18 + 48) = a7;
  *(double *)(v18 + 56) = a6;
  v19 = swift_allocObject(&unk_1002F8840, 32, 7);
  *(_QWORD *)(v19 + 16) = sub_1001E788C;
  *(_QWORD *)(v19 + 24) = v18;
  aBlock[4] = sub_10002BF7C;
  v35 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = (id)1107296256;
  aBlock[2] = sub_1000804C4;
  aBlock[3] = &unk_1002F8858;
  v20 = _Block_copy(aBlock);
  v21 = v35;
  swift_bridgeObjectRetain(a1);
  swift_retain(v19);
  swift_release(v21);
  v22 = objc_msgSend(v17, "imageWithActions:", v20);
  _Block_release(v20);
  LOBYTE(v20) = swift_isEscapingClosureAtFileLocation(v19, "", 144, 325, 36, 1);
  swift_release(v19);
  if ((v20 & 1) != 0)
    __break(1u);
  v23 = objc_msgSend(v22, "CGImage");
  if (!v23)
  {
    v28 = sub_1001E77E0();
    v29 = swift_allocError(&type metadata for ConnectionAssistantRendererEarthOutline.Error, v28, 0, 0);
    *v30 = 2;
    swift_willThrow(v29);
    v31 = v17;
    v17 = v16;
LABEL_7:

    swift_release(v18);
    return a2;
  }
  v24 = v23;
  aBlock[0] = 0;
  v25 = objc_msgSend(a2, "newTextureWithCGImage:options:error:", v23, 0, aBlock);
  v26 = aBlock[0];
  if (!v25)
  {
    a2 = aBlock[0];
    _convertNSErrorToError(_:)(v26);

    swift_willThrow(v32);
    v31 = v22;
    v22 = v16;
    goto LABEL_7;
  }
  a2 = v25;
  v27 = aBlock[0];

  swift_release(v18);
  return a2;
}

id sub_1001E6C04(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, double a5)
{
  uint64_t v5;
  id v6;
  id v11;
  double v12;
  double v13;
  id v14;
  double v15;
  double v16;

  v6 = a4;
  v11 = objc_msgSend(objc_allocWithZone((Class)MTKTextureLoader), "initWithDevice:", a4);
  if ((double)a2 > (double)a3)
    v12 = (double)a2;
  else
    v12 = (double)a3;
  v13 = v12 * 0.5;
  v14 = sub_1001E6904(a1, v11, v12 * 0.125, v12 * 0.5 * 0.125, a5, v12 * 0.125 * 0.01, 1.0, 0.0);
  if (!v5)
  {
    v6 = v14;
    v15 = v12 * 0.0625;
    v16 = v13 * 0.0625;
    sub_1001E6904(a1, v11, v15, v16, a5, 0.0, 0.0, v15 * 0.004);
    sub_1001E6904(a1, v11, v15, v16, a5, 0.0, 0.0, v15 * 0.012);
  }

  return v6;
}

void sub_1001E6D88(unint64_t a1, _QWORD *a2)
{
  uint64_t i;
  int64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  float64x2_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  BOOL v36;
  unint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int64_t v54;
  float64x2_t v55;
  float64x2_t v56;
  uint64_t v57;
  unint64_t v58;

  i = a1;
  if (a1 >> 62)
    goto LABEL_70;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v5 = sub_100172AE0(0, v4, 0, _swiftEmptyArrayStorage);
  v6 = *(_QWORD *)((i & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(i);
  if (!v6)
    goto LABEL_74;
  while (v6 >= 1)
  {
    if ((i & 0xC000000000000001) != 0)
    {
      v7 = 0;
      v8 = 0;
      while (1)
      {
        v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, i);
        v10 = *(_QWORD *)(v9 + 48);
        swift_bridgeObjectRetain(v10);
        swift_unknownObjectRelease(v9);
        v11 = *(_QWORD *)(v10 + 16);
        swift_bridgeObjectRelease(v10);
        v12 = __OFADD__(v7, v11);
        v7 += v11;
        if (v12)
          break;
        if (v6 == ++v8)
          goto LABEL_12;
      }
LABEL_65:
      __break(1u);
    }
    else
    {
      v7 = 0;
      v13 = 0;
      while (1)
      {
        v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(i + 8 * v13 + 32) + 48) + 16);
        v12 = __OFADD__(v7, v14);
        v7 += v14;
        if (v12)
          break;
        if (v6 == ++v13)
        {
LABEL_12:
          swift_bridgeObjectRelease(i);
          v15 = v7 + v4;
          if (!__OFADD__(v7, v4))
            goto LABEL_13;
          __break(1u);
LABEL_76:
          __break(1u);
LABEL_77:
          __break(1u);
          goto LABEL_78;
        }
      }
    }
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    while (1)
    {
      __break(1u);
LABEL_70:
      v47 = i < 0 ? i : i & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(i);
      v4 = _CocoaArrayWrapper.endIndex.getter(v47);
      swift_bridgeObjectRelease(i);
      v5 = sub_100172AE0(0, v4 & ~(v4 >> 63), 0, _swiftEmptyArrayStorage);
      swift_bridgeObjectRetain(i);
      v6 = _CocoaArrayWrapper.endIndex.getter(v47);
      if (v6)
        break;
LABEL_74:
      swift_bridgeObjectRelease(i);
      v15 = v4;
LABEL_13:
      v48 = a2;
      a2 = sub_1001729BC(0, v15 & ~(v15 >> 63), 0, _swiftEmptyArrayStorage);
      v52 = i;
      v57 = v6;
      if (v6)
      {
        v51 = i & 0xC000000000000001;
        v4 = (int64_t)v5;
        if ((i & 0xC000000000000001) != 0)
          goto LABEL_79;
        if (*(_QWORD *)((i & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v16 = *(_QWORD *)(i + 32);
          swift_bridgeObjectRetain(i);
          swift_retain(v16);
          goto LABEL_17;
        }
        __break(1u);
LABEL_81:
        __break(1u);
        goto LABEL_82;
      }
      v4 = (int64_t)v5;
LABEL_43:
      v33 = *(_QWORD *)(v4 + 16);
      if (v33 >> 60)
        goto LABEL_76;
      v6 = (uint64_t)objc_msgSend(v48, "newBufferWithBytes:length:options:", v4 + 32, 8 * v33, 0, swift_bridgeObjectRetain(v4).n128_f64[0]);
      swift_bridgeObjectRelease(v4);
      v34 = a2[2];
      if ((unsigned __int128)(v34 * (__int128)12) >> 64 != (12 * v34) >> 63)
        goto LABEL_77;
      v35 = objc_msgSend(v48, "newBufferWithBytes:length:options:", a2 + 4, 12 * v34, 0, swift_bridgeObjectRetain(a2).n128_f64[0]);
      swift_bridgeObjectRelease(a2);
      swift_bridgeObjectRelease(v4);
      if (v35)
        v36 = v6 == 0;
      else
        v36 = 1;
      if (v36)
      {
        v37 = sub_1001E77E0();
        v38 = swift_allocError(&type metadata for ConnectionAssistantRendererEarthOutline.Error, v37, 0, 0);
        *v39 = 0;
        swift_willThrow(v38);
        swift_unknownObjectRelease(v6);
        swift_unknownObjectRelease(v35);
        swift_bridgeObjectRelease(a2);
        return;
      }
      if (!v57)
      {
LABEL_63:
        swift_bridgeObjectRelease(a2);
        return;
      }
      if (v57 < 1)
        goto LABEL_81;
      if ((i & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain(i);
        swift_unknownObjectRetain(v35);
        swift_unknownObjectRetain(v6);
        i = 0;
        v40 = 0;
        while (1)
        {
          v41 = specialized _ArrayBuffer._getElementSlowPath(_:)(v40, v52);
          v42 = *(_QWORD *)(v41 + 48);
          swift_bridgeObjectRetain(v42);
          swift_unknownObjectRelease(v41);
          v43 = *(_QWORD *)(v42 + 16);
          swift_bridgeObjectRelease(v42);
          v12 = __OFADD__(i, v43);
          i += v43;
          if (v12)
            break;
          if (v57 == ++v40)
          {
            swift_bridgeObjectRelease(v52);
            swift_unknownObjectRelease(v6);
            swift_unknownObjectRelease(v35);
            swift_bridgeObjectRelease(a2);
            return;
          }
        }
        goto LABEL_68;
      }
LABEL_60:
      v44 = i;
      i = 0;
      v45 = v44 + 32;
      while (1)
      {
        v46 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v45 + 48) + 16);
        v12 = __OFADD__(i, v46);
        i += v46;
        if (v12)
          break;
        v45 += 8;
        if (!--v57)
          goto LABEL_63;
      }
    }
  }
LABEL_78:
  __break(1u);
LABEL_79:
  swift_bridgeObjectRetain(i);
  v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, i);
LABEL_17:
  v17 = a2[2];
  if (!HIDWORD(v17))
  {
    v18 = 0;
    v49 = i + 32;
    v50 = i & 0xFFFFFFFFFFFFFF8;
    v19 = 1;
    do
    {
      v58 = v19;
      v20 = *(_QWORD *)(*(_QWORD *)(v16 + 48) + 16);
      if (HIDWORD(v20))
        break;
      v22 = *(_QWORD *)(v4 + 16);
      v21 = *(_QWORD *)(v4 + 24);
      if (v22 >= v21 >> 1)
        v4 = (int64_t)sub_100172AE0((_QWORD *)(v21 > 1), v22 + 1, 1, (_QWORD *)v4);
      *(_QWORD *)(v4 + 16) = v22 + 1;
      v23 = v4 + 8 * v22;
      *(_DWORD *)(v23 + 32) = v17;
      *(_DWORD *)(v23 + 36) = v20;
      v24 = *(_QWORD *)(v16 + 48);
      v25 = v16;
      v26 = *(_QWORD *)(v24 + 16);
      if (v26)
      {
        v53 = v25;
        v54 = v4;
        if (v18 > 0xFF)
          break;
        v55 = *(float64x2_t *)(v24 + 32);
        v27 = a2[2];
        swift_bridgeObjectRetain(v24);
        v28 = v55;
        v29 = 0;
        for (i = 12 * v27; ; i += 12)
        {
          v30 = a2[3];
          if (v27 + v29 >= v30 >> 1)
          {
            v56 = v28;
            v32 = sub_1001729BC((_QWORD *)(v30 > 1), v27 + v29 + 1, 1, a2);
            v28 = v56;
            a2 = v32;
          }
          a2[2] = v27 + v29 + 1;
          v31 = (char *)a2 + i;
          v31[32] = v18;
          *(float32x2_t *)(v31 + 36) = vcvt_f32_f64(v28);
          if (v26 - 1 == v29)
          {
            swift_bridgeObjectRelease(v24);
            swift_release(v53);
            i = v52;
            v6 = v57;
            v4 = v54;
            goto LABEL_32;
          }
          if ((unint64_t)(v29 + 1) >= *(_QWORD *)(v24 + 16))
            break;
          v28 = *(float64x2_t *)(v24 + 48 + 16 * v29++);
        }
        __break(1u);
        goto LABEL_60;
      }
      swift_release(v25);
LABEL_32:
      v18 = v58;
      if (v58 == v6)
      {
        swift_bridgeObjectRelease(i);
        goto LABEL_43;
      }
      if (v51)
      {
        v16 = specialized _ArrayBuffer._getElementSlowPath(_:)(v58, i);
        v19 = v58 + 1;
        if (__OFADD__(v58, 1))
          goto LABEL_64;
      }
      else
      {
        if (v58 >= *(_QWORD *)(v50 + 16))
          goto LABEL_67;
        v16 = *(_QWORD *)(v49 + 8 * v58);
        swift_retain(v16);
        v19 = v58 + 1;
        if (__OFADD__(v58, 1))
        {
LABEL_64:
          __break(1u);
          goto LABEL_65;
        }
      }
      v17 = a2[2];
    }
    while (!HIDWORD(v17));
  }
LABEL_82:
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
  __break(1u);
}

void sub_1001E73F4(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, double a5@<D0>)
{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ObjCClassFromMetadata;
  id v21;
  NSString v22;
  NSString v23;
  id v24;
  void (*v25)(char *, char *, uint64_t);
  char *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  char *v58;
  unint64_t v59;

  v55 = a2;
  v56 = a3;
  v57 = a1;
  v54 = a4;
  v7 = sub_100003DB8(&qword_100317D60);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v13);
  v15 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v17);
  v58 = (char *)&v54 - v18;
  v19 = type metadata accessor for ConnectionAssistantRendererEarthOutline();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v19);
  v21 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  v22 = String._bridgeToObjectiveC()();
  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend(v21, "URLForResource:withExtension:", v22, v23);

  if (!v24)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
    goto LABEL_6;
  }
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v24);

  v25 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
  v25(v10, v15, v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
LABEL_6:
    sub_100007FF0((uint64_t)v10, &qword_100317D60);
    v29 = sub_1001E77E0();
    v30 = swift_allocError(&type metadata for ConnectionAssistantRendererEarthOutline.Error, v29, 0, 0);
    *v31 = 1;
    swift_willThrow(v30);
    return;
  }
  v26 = v58;
  v25(v58, v10, v11);
  v27 = Data.init(contentsOf:options:)(v26, 0);
  if (v5)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v26, v11);
  }
  else
  {
    v32 = v27;
    v33 = v28;
    v34 = type metadata accessor for JSONDecoder(0);
    swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
    v35 = JSONDecoder.init()();
    v36 = sub_1001E7824();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)(&v59, &type metadata for ConnectionAssistantRendererEarthOutline.Shapes, v32, v33, &type metadata for ConnectionAssistantRendererEarthOutline.Shapes, v36);
    swift_release(v35);
    v37 = v59;
    v38 = v57;
    v39 = sub_1001E6C04(v59, v55, v56, v57, a5);
    v41 = v40;
    v56 = v42;
    sub_1001E6D88(v37, v38);
    v44 = v43;
    v45 = *(void (**)(char *, uint64_t))(v12 + 8);
    v46 = v58;
    v48 = v47;
    v49 = v11;
    v51 = v50;
    v58 = v52;
    v45(v46, v49);
    sub_10000CCCC(v32, v33);
    swift_bridgeObjectRelease(v37);
    v53 = v54;
    *v54 = v39;
    v53[1] = v41;
    v53[2] = v56;
    v53[3] = v44;
    v53[4] = v48;
    v53[5] = v51;
    v53[6] = v58;
  }
}

unint64_t sub_1001E77E0()
{
  unint64_t result;

  result = qword_100328A40;
  if (!qword_100328A40)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConnectionAssistantRendererEarthOutline.Error, &type metadata for ConnectionAssistantRendererEarthOutline.Error);
    atomic_store(result, (unint64_t *)&qword_100328A40);
  }
  return result;
}

unint64_t sub_1001E7824()
{
  unint64_t result;

  result = qword_100328A48;
  if (!qword_100328A48)
  {
    result = swift_getWitnessTable(&unk_10025DA40, &type metadata for ConnectionAssistantRendererEarthOutline.Shapes);
    atomic_store(result, (unint64_t *)&qword_100328A48);
  }
  return result;
}

uint64_t sub_1001E7868()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 64, 7);
}

void sub_1001E788C(void *a1)
{
  uint64_t v1;

  sub_1001E5368(a1, *(_QWORD *)(v1 + 32), *(double *)(v1 + 16), *(double *)(v1 + 24), *(CGFloat *)(v1 + 40), *(double *)(v1 + 48), *(double *)(v1 + 56));
}

uint64_t sub_1001E78A0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

double sub_1001E78B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1001E78C0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantRendererEarthOutline.Shapes.CodingKeys(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1001E7908 + 4 * byte_10025D890[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1001E7928 + 4 * byte_10025D895[v4]))();
}

_BYTE *sub_1001E7908(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1001E7928(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001E7930(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001E7938(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1001E7940(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1001E7948(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantRendererEarthOutline.Shapes.CodingKeys()
{
  return &type metadata for ConnectionAssistantRendererEarthOutline.Shapes.CodingKeys;
}

uint64_t _s8SOSBuddy39ConnectionAssistantRendererEarthOutlineC5ErrorOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1001E79B0 + 4 * byte_10025D89F[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1001E79E4 + 4 * byte_10025D89A[v4]))();
}

uint64_t sub_1001E79E4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E79EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001E79F4);
  return result;
}

uint64_t sub_1001E7A00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001E7A08);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1001E7A0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001E7A14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantRendererEarthOutline.Shapes.Shape.CodingKeys()
{
  return &type metadata for ConnectionAssistantRendererEarthOutline.Shapes.Shape.CodingKeys;
}

unint64_t sub_1001E7A34()
{
  unint64_t result;

  result = qword_100328A50;
  if (!qword_100328A50)
  {
    result = swift_getWitnessTable(&unk_10025DB8C, &type metadata for ConnectionAssistantRendererEarthOutline.Shapes.Shape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100328A50);
  }
  return result;
}

unint64_t sub_1001E7A7C()
{
  unint64_t result;

  result = qword_100328A58;
  if (!qword_100328A58)
  {
    result = swift_getWitnessTable(&unk_10025DC7C, &type metadata for ConnectionAssistantRendererEarthOutline.Shapes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100328A58);
  }
  return result;
}

unint64_t sub_1001E7AC4()
{
  unint64_t result;

  result = qword_100328A60;
  if (!qword_100328A60)
  {
    result = swift_getWitnessTable(&unk_10025DBB4, &type metadata for ConnectionAssistantRendererEarthOutline.Shapes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100328A60);
  }
  return result;
}

unint64_t sub_1001E7B0C()
{
  unint64_t result;

  result = qword_100328A68;
  if (!qword_100328A68)
  {
    result = swift_getWitnessTable(&unk_10025DBDC, &type metadata for ConnectionAssistantRendererEarthOutline.Shapes.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100328A68);
  }
  return result;
}

unint64_t sub_1001E7B54()
{
  unint64_t result;

  result = qword_100328A70;
  if (!qword_100328A70)
  {
    result = swift_getWitnessTable(&unk_10025DAC4, &type metadata for ConnectionAssistantRendererEarthOutline.Shapes.Shape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100328A70);
  }
  return result;
}

unint64_t sub_1001E7B9C()
{
  unint64_t result;

  result = qword_100328A78;
  if (!qword_100328A78)
  {
    result = swift_getWitnessTable(&unk_10025DAEC, &type metadata for ConnectionAssistantRendererEarthOutline.Shapes.Shape.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_100328A78);
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantConnectionGuidance()
{
  return &type metadata for ConnectionAssistantConnectionGuidance;
}

uint64_t sub_1001E7BF0(uint64_t *a1, uint64_t *a2)
{
  return sub_1001E7C0C(*a1, a1[1], a1[2], a1[3], *a2, a2[1], a2[2], a2[3]);
}

uint64_t sub_1001E7C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v12;
  uint64_t result;

  if (a1 == a5 && a2 == a6
    || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, a5, a6, 0), result = 0, (v12 & 1) != 0))
  {
    if (a4)
    {
      if (a8 && (a3 == a7 && a4 == a8 || (_stringCompareWithSmolCheck(_:_:expecting:)(a3, a4, a7, a8, 0) & 1) != 0))
        return 1;
    }
    else if (!a8)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1001E7CAC(__int16 a1)
{
  char v1;
  int v2;

  v1 = a1;
  if ((a1 & 0xFF00) != 0x200)
    __asm { BR              X10 }
  v2 = a1 & 0xFF00;
  objc_msgSend((id)objc_opt_self(UIColor), "clearColor");
  if (v2 != 512)
    __asm { BR              X10 }
  if (qword_100315748 != -1)
    swift_once(&qword_100315748, sub_10001CC54);
  return 0;
}

double sub_1001E7F24@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double result;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v9 = type metadata accessor for UIMetrics();
  v10 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v11 = EnvironmentObject.init()(v9, v10);
  v13 = v12;
  LOBYTE(v34) = 0;
  State.init(wrappedValue:)(&v36, &v34, &type metadata for Bool);
  v14 = v36;
  v15 = *((_QWORD *)&v36 + 1);
  type metadata accessor for CGSize(0);
  v34 = 0uLL;
  State.init(wrappedValue:)(&v36, &v34, v16);
  v17 = v36;
  v18 = v37;
  type metadata accessor for CGRect(0);
  v20 = v19;
  v34 = 0u;
  v35 = 0u;
  State.init(wrappedValue:)(&v36, &v34, v19);
  v30 = v36;
  v21 = v37;
  v22 = v38;
  v23 = v39;
  v34 = 0u;
  v35 = 0u;
  State.init(wrappedValue:)(&v36, &v34, v20);
  v29 = v36;
  v24 = v37;
  v25 = v38;
  v26 = v39;
  *(_QWORD *)&v34 = 0;
  State.init(wrappedValue:)(&v36, &v34, &type metadata for CGFloat);
  v28 = v36;
  result = *(double *)&v36;
  *(_QWORD *)a6 = v11;
  *(_QWORD *)(a6 + 8) = v13;
  *(_QWORD *)(a6 + 16) = a1;
  *(_QWORD *)(a6 + 24) = a2;
  *(_QWORD *)(a6 + 32) = a3;
  *(_QWORD *)(a6 + 40) = a4;
  *(_BYTE *)(a6 + 48) = a5;
  *(_DWORD *)(a6 + 49) = v36;
  *(_DWORD *)(a6 + 52) = *(_DWORD *)((char *)&v36 + 3);
  *(_BYTE *)(a6 + 56) = v14;
  *(_DWORD *)(a6 + 57) = v34;
  *(_DWORD *)(a6 + 60) = *(_DWORD *)((char *)&v34 + 3);
  *(_QWORD *)(a6 + 64) = v15;
  *(_OWORD *)(a6 + 72) = v17;
  *(_QWORD *)(a6 + 88) = v18;
  *(_OWORD *)(a6 + 96) = v30;
  *(_QWORD *)(a6 + 112) = v21;
  *(_QWORD *)(a6 + 120) = v22;
  *(_QWORD *)(a6 + 128) = v23;
  *(_OWORD *)(a6 + 136) = v29;
  *(_QWORD *)(a6 + 152) = v24;
  *(_QWORD *)(a6 + 160) = v25;
  *(_QWORD *)(a6 + 168) = v26;
  *(_OWORD *)(a6 + 176) = v28;
  return result;
}

uint64_t sub_1001E8100@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t TupleTypeMetadata2;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t TupleTypeMetadata3;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t WitnessTable;
  uint64_t v100;

  v79 = a2;
  v77 = a1[2];
  v78 = a1[4];
  v4 = type metadata accessor for VStack(255, v77, v78);
  v5 = sub_100007FAC(&qword_100328B50);
  v6 = type metadata accessor for ModifiedContent(255, v4, v5);
  v7 = sub_100007FAC(&qword_100328B58);
  v8 = type metadata accessor for ModifiedContent(255, v6, v7);
  v9 = type metadata accessor for ModifiedContent(255, v8, &type metadata for _PaddingLayout);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v4);
  v100 = sub_1000084FC(&qword_100328B60, &qword_100328B50, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v97 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
  v98 = sub_1000084FC(&qword_100328B68, &qword_100328B58, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v95 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
  v96 = &protocol witness table for _PaddingLayout;
  v10 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v9);
  v11 = type metadata accessor for ScrollView(255, v9, v10);
  v12 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v11);
  v93 = v11;
  v94 = v12;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v93, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v93 = v11;
  v94 = v12;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v93, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v15 = type metadata accessor for VStack(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v16 = sub_100007FAC(&qword_100328B70);
  v76 = a1[3];
  v17 = sub_100007FAC(&qword_10031CA70);
  v18 = type metadata accessor for ModifiedContent(255, v76, v17);
  v19 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v20 = type metadata accessor for ModifiedContent(255, v18, v19);
  v75 = a1[5];
  v91 = v75;
  v92 = sub_1000084FC(&qword_10031CA78, &qword_10031CA70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v89 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  v90 = sub_1000052EC(&qword_100316C10, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v21 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v20);
  v22 = type metadata accessor for VStack(255, v20, v21);
  v23 = sub_100007FAC(&qword_100328B78);
  v24 = type metadata accessor for ModifiedContent(255, v22, v23);
  v25 = sub_100007FAC(&qword_100328B80);
  v26 = type metadata accessor for ModifiedContent(255, v24, v25);
  v27 = type metadata accessor for ModifiedContent(255, v26, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v27, 0, 0);
  v29 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v30 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v29);
  v31 = type metadata accessor for VStack(255, v29, v30);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v15, v16, v31, 0, 0);
  v33 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v33);
  v35 = type metadata accessor for ZStack(0, v33, v34);
  v73 = *(_QWORD *)(v35 - 8);
  __chkstk_darwin(v35, v36);
  v38 = (char *)&v70 - v37;
  v39 = sub_100007FAC(&qword_100328B88);
  v40 = type metadata accessor for ModifiedContent(255, v35, v39);
  v71 = v40;
  v41 = sub_100007FAC(&qword_100328B90);
  v42 = type metadata accessor for ModifiedContent(0, v40, v41);
  v74 = *(_QWORD *)(v42 - 8);
  __chkstk_darwin(v42, v43);
  v70 = (uint64_t)&v70 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v45, v46);
  v72 = (uint64_t)&v70 - v47;
  v48 = v77;
  v49 = v76;
  v80 = v77;
  v81 = v76;
  v50 = v78;
  v51 = v75;
  v82 = v78;
  v83 = v75;
  v84 = v2;
  v53 = static Alignment.center.getter(v52);
  ZStack.init(alignment:content:)(v53);
  v54 = swift_allocObject(&unk_1002F8C30, 240, 7);
  *(_QWORD *)(v54 + 16) = v48;
  *(_QWORD *)(v54 + 24) = v49;
  *(_QWORD *)(v54 + 32) = v50;
  *(_QWORD *)(v54 + 40) = v51;
  v55 = *(_OWORD *)(v2 + 144);
  *(_OWORD *)(v54 + 176) = *(_OWORD *)(v2 + 128);
  *(_OWORD *)(v54 + 192) = v55;
  v56 = *(_OWORD *)(v2 + 176);
  *(_OWORD *)(v54 + 208) = *(_OWORD *)(v2 + 160);
  *(_OWORD *)(v54 + 224) = v56;
  v57 = *(_OWORD *)(v2 + 80);
  *(_OWORD *)(v54 + 112) = *(_OWORD *)(v2 + 64);
  *(_OWORD *)(v54 + 128) = v57;
  v58 = *(_OWORD *)(v2 + 112);
  *(_OWORD *)(v54 + 144) = *(_OWORD *)(v2 + 96);
  *(_OWORD *)(v54 + 160) = v58;
  v59 = *(_OWORD *)(v2 + 16);
  *(_OWORD *)(v54 + 48) = *(_OWORD *)v2;
  *(_OWORD *)(v54 + 64) = v59;
  v60 = *(_OWORD *)(v2 + 48);
  *(_OWORD *)(v54 + 80) = *(_OWORD *)(v2 + 32);
  *(_OWORD *)(v54 + 96) = v60;
  sub_100109864((uint64_t *)v2);
  v61 = swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v35);
  v62 = sub_1001EAD90();
  v63 = v70;
  sub_10002EA48((uint64_t)sub_1001EAD80, v54, v35, (uint64_t)&type metadata for ViewContentSizeKey, v61, v62, v70);
  swift_release(v54);
  (*(void (**)(char *, uint64_t))(v73 + 8))(v38, v35);
  v64 = sub_1000084FC(&qword_100328BA0, &qword_100328B88, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v87 = v61;
  v88 = v64;
  v65 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v71);
  v66 = sub_1000084FC(&qword_100328BA8, &qword_100328B90, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v85 = v65;
  v86 = v66;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v42);
  v67 = v72;
  sub_100092E98(v63, v42, v72);
  v68 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
  v68(v63, v42);
  sub_1000903EC(v67, v42, v79);
  return ((uint64_t (*)(uint64_t, uint64_t))v68)(v67, v42);
}

uint64_t sub_1001E8760@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t TupleTypeMetadata2;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v42;
  uint64_t OpaqueTypeConformance2;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t (*v74)(char *, uint64_t);
  uint64_t v76;
  char *v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t);
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[7];
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  _OWORD v106[11];
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  _QWORD v110[2];
  char v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _OWORD v121[2];
  uint64_t v122;
  void *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t WitnessTable;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _OWORD v132[14];

  v91 = a5;
  v92 = a2;
  v93 = a4;
  v83 = a1;
  v89 = a6;
  v10 = sub_100007FAC(&qword_10031CA70);
  v11 = type metadata accessor for ModifiedContent(255, a3, v10);
  v12 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v13 = type metadata accessor for ModifiedContent(255, v11, v12);
  v130 = a5;
  v131 = sub_1000084FC(&qword_10031CA78, &qword_10031CA70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v129 = sub_1000052EC(&qword_100316C10, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v14 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v15 = type metadata accessor for VStack(255, v13, v14);
  v16 = sub_100007FAC(&qword_100328B78);
  v17 = type metadata accessor for ModifiedContent(255, v15, v16);
  v18 = sub_100007FAC(&qword_100328B80);
  v19 = type metadata accessor for ModifiedContent(255, v17, v18);
  v20 = type metadata accessor for ModifiedContent(255, v19, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v20, 0, 0);
  v22 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v84 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v22);
  v85 = v22;
  v81 = type metadata accessor for VStack(0, v22, v84);
  v86 = *(_QWORD *)(v81 - 8);
  __chkstk_darwin(v81, v23);
  v88 = (char *)&v76 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v26);
  v87 = (uint64_t)&v76 - v27;
  v28 = type metadata accessor for VStack(255, a2, a4);
  v29 = sub_100007FAC(&qword_100328B50);
  v30 = type metadata accessor for ModifiedContent(255, v28, v29);
  v31 = sub_100007FAC(&qword_100328B58);
  v32 = type metadata accessor for ModifiedContent(255, v30, v31);
  v33 = type metadata accessor for ModifiedContent(255, v32, &type metadata for _PaddingLayout);
  v34 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v28);
  v35 = sub_1000084FC(&qword_100328B60, &qword_100328B50, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v126 = v34;
  v127 = v35;
  v36 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v30);
  v37 = sub_1000084FC(&qword_100328B68, &qword_100328B58, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v124 = v36;
  v125 = v37;
  v122 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v32);
  v123 = &protocol witness table for _PaddingLayout;
  v38 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v33);
  v39 = type metadata accessor for ScrollView(255, v33, v38);
  v40 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v39);
  *(_QWORD *)&v132[0] = v39;
  *((_QWORD *)&v132[0] + 1) = v40;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, v132, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  *(_QWORD *)&v132[0] = v39;
  *((_QWORD *)&v132[0] + 1) = v40;
  v42 = v83;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v132, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v44 = type metadata accessor for VStack(0, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v45 = *(_QWORD *)(v44 - 8);
  __chkstk_darwin(v44, v46);
  v48 = (char *)&v76 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v49, v50);
  v52 = (char *)&v76 - v51;
  v94[2] = v92;
  v94[3] = a3;
  v90 = a3;
  v94[4] = v93;
  v94[5] = v91;
  v94[6] = v42;
  v54 = static HorizontalAlignment.center.getter(v53);
  VStack.init(alignment:spacing:content:)(v54, 0, 0, sub_1001EADD4, v94, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v55 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v44);
  v82 = v52;
  v76 = v55;
  sub_100092E98((uint64_t)v48, v44, (uint64_t)v52);
  v77 = v48;
  v78 = v45;
  v79 = *(void (**)(char *, uint64_t))(v45 + 8);
  v80 = v44;
  v79(v48, v44);
  v132[0] = *(_OWORD *)(v42 + 56);
  v56 = sub_100003DB8(&qword_100316780);
  v57 = State.wrappedValue.getter(v110, v56);
  if (LOBYTE(v110[0]) == 1)
  {
    v58 = static HorizontalAlignment.center.getter(v57);
    sub_1001E9964((uint64_t *)v42, v92, v90, v93, v91, (uint64_t)&v95);
    *(_OWORD *)((char *)&v106[4] + 7) = v99;
    *(_OWORD *)((char *)&v106[3] + 7) = v98;
    *(_OWORD *)((char *)&v106[7] + 7) = v102;
    *(_OWORD *)((char *)&v106[8] + 7) = v103;
    *(_OWORD *)((char *)&v106[9] + 7) = v104;
    *(_QWORD *)((char *)&v106[10] + 7) = v105;
    *(_OWORD *)((char *)&v106[5] + 7) = v100;
    *(_OWORD *)((char *)&v106[6] + 7) = v101;
    *(_OWORD *)((char *)v106 + 7) = v95;
    *(_OWORD *)((char *)&v106[1] + 7) = v96;
    *(_OWORD *)((char *)&v106[2] + 7) = v97;
    v119 = v106[7];
    v120 = v106[8];
    v121[0] = v106[9];
    *(_OWORD *)((char *)v121 + 15) = *(_OWORD *)((char *)&v106[9] + 15);
    v115 = v106[3];
    v116 = v106[4];
    v117 = v106[5];
    v118 = v106[6];
    v112 = v106[0];
    v113 = v106[1];
    LOBYTE(v107) = 0;
    v110[0] = v58;
    v110[1] = 0;
    v111 = 0;
    v114 = v106[2];
    sub_1001EAED8((uint64_t)v110);
  }
  else
  {
    sub_1001EADE0((uint64_t)v110);
  }
  v59 = sub_1001EAE08((uint64_t)v110, (uint64_t)v132);
  __chkstk_darwin(v59, v60);
  v61 = v90;
  *(&v76 - 6) = v92;
  *(&v76 - 5) = v61;
  v62 = v91;
  *(&v76 - 4) = v93;
  *(&v76 - 3) = v62;
  *(&v76 - 2) = v42;
  v64 = static HorizontalAlignment.center.getter(v63);
  v65 = (uint64_t)v88;
  VStack.init(alignment:spacing:content:)(v64, 0, 0, sub_1001EAE50, &v76 - 8, v85, v84);
  v66 = v81;
  v67 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v81);
  v68 = v87;
  sub_100092E98(v65, v66, v87);
  v69 = v86;
  v70 = *(void (**)(uint64_t, uint64_t))(v86 + 8);
  v70(v65, v66);
  v71 = v77;
  v72 = v82;
  v73 = v80;
  (*(void (**)(char *, char *, uint64_t))(v78 + 16))(v77, v82, v80);
  *(_QWORD *)&v106[0] = v71;
  sub_1001EAE08((uint64_t)v132, (uint64_t)v110);
  *((_QWORD *)&v106[0] + 1) = v110;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16))(v65, v68, v66);
  *(_QWORD *)&v106[1] = v65;
  *(_QWORD *)&v95 = v73;
  *((_QWORD *)&v95 + 1) = sub_100003DB8(&qword_100328B70);
  *(_QWORD *)&v96 = v66;
  v107 = v76;
  v108 = sub_1001EAE5C();
  v109 = v67;
  sub_10009058C((uint64_t *)v106, 3uLL, (uint64_t)&v95);
  v70(v68, v66);
  v74 = (uint64_t (*)(char *, uint64_t))v79;
  v79(v72, v73);
  v70(v65, v66);
  return v74(v71, v73);
}

uint64_t sub_1001E8E74@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44[16];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t WitnessTable;
  uint64_t v59;

  v41 = a1;
  v42 = a5;
  v43 = a6;
  v9 = type metadata accessor for VStack(255, a2, a4);
  v10 = sub_100007FAC(&qword_100328B50);
  v11 = type metadata accessor for ModifiedContent(255, v9, v10);
  v12 = sub_100007FAC(&qword_100328B58);
  v13 = type metadata accessor for ModifiedContent(255, v11, v12);
  v14 = type metadata accessor for ModifiedContent(255, v13, &type metadata for _PaddingLayout);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v9);
  v59 = sub_1000084FC(&qword_100328B60, &qword_100328B50, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v56 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v57 = sub_1000084FC(&qword_100328B68, &qword_100328B58, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v54 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v55 = &protocol witness table for _PaddingLayout;
  v37 = v14;
  v36 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v14);
  v15 = type metadata accessor for ScrollView(0, v14, v36);
  v40 = *(_QWORD *)(v15 - 8);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v36 - v17;
  v38 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v15);
  v50 = v15;
  v51 = v38;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v50, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v39 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  __chkstk_darwin(OpaqueTypeMetadata2, v20);
  v22 = (char *)&v36 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v24);
  v26 = (char *)&v36 - v25;
  v27 = a2;
  v45 = a2;
  v46 = a3;
  v28 = a4;
  v47 = a4;
  v29 = v42;
  v48 = v42;
  v49 = v41;
  v31 = static Axis.Set.vertical.getter(v30);
  ScrollView.init(_:showsIndicators:content:)(v31, 0, sub_1001EAF48, v44, v37, v36);
  v50 = v27;
  v51 = a3;
  v52 = v28;
  v53 = v29;
  type metadata accessor for ScrollableContentWithFloatingPanelView(0, (uint64_t)&v50);
  v32 = sub_1001E9838();
  v33 = v38;
  View.scrollDisabled(_:)(!v32, v15, v38);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v18, v15);
  v50 = v15;
  v51 = v33;
  swift_getOpaqueTypeConformance2(&v50, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  sub_100092E98((uint64_t)v22, OpaqueTypeMetadata2, (uint64_t)v26);
  v34 = *(void (**)(char *, uint64_t))(v39 + 8);
  v34(v22, OpaqueTypeMetadata2);
  sub_1000903EC((uint64_t)v26, OpaqueTypeMetadata2, v43);
  return ((uint64_t (*)(char *, uint64_t))v34)(v26, OpaqueTypeMetadata2);
}

uint64_t sub_1001E91A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  uint64_t WitnessTable;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63[16];
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD v75[5];

  v62 = a6;
  v11 = type metadata accessor for VStack(0, a2, a4);
  v54 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v53 - v13;
  v15 = sub_100007FAC(&qword_100328B50);
  v16 = type metadata accessor for ModifiedContent(255, v11, v15);
  v17 = sub_100007FAC(&qword_100328B58);
  v57 = v16;
  v18 = type metadata accessor for ModifiedContent(0, v16, v17);
  v60 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v18);
  v20 = (char *)&v53 - v19;
  v55 = v21;
  v22 = type metadata accessor for ModifiedContent(0, v21, &type metadata for _PaddingLayout);
  v61 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22, v23);
  v58 = (char *)&v53 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v26);
  v59 = (uint64_t)&v53 - v27;
  v64 = a2;
  v65 = a3;
  v53 = a3;
  v66 = a4;
  v67 = a5;
  v68 = a1;
  v29 = static HorizontalAlignment.center.getter(v28);
  VStack.init(alignment:spacing:content:)(v29, 0, 0, sub_1001EAF54, v63, a2, a4);
  v30 = swift_allocObject(&unk_1002F8C80, 240, 7);
  *(_QWORD *)(v30 + 16) = a2;
  *(_QWORD *)(v30 + 24) = a3;
  *(_QWORD *)(v30 + 32) = a4;
  *(_QWORD *)(v30 + 40) = a5;
  v31 = a5;
  v32 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v30 + 176) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v30 + 192) = v32;
  v33 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v30 + 208) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v30 + 224) = v33;
  v34 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v30 + 112) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v30 + 128) = v34;
  v35 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v30 + 144) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v30 + 160) = v35;
  v36 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v30 + 48) = *(_OWORD *)a1;
  *(_OWORD *)(v30 + 64) = v36;
  v37 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v30 + 80) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v30 + 96) = v37;
  sub_100109864((uint64_t *)a1);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v11);
  v39 = sub_1001EAFE0();
  v56 = v20;
  sub_10002E528((uint64_t)sub_1001EAFC0, v30, v11, (uint64_t)&type metadata for ScrollContentFrame, WitnessTable, v39, (uint64_t)v20);
  swift_release(v30);
  v40 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v14, v11);
  v41 = static Edge.Set.bottom.getter(v40);
  v75[0] = a2;
  v75[1] = v53;
  v75[2] = a4;
  v75[3] = v31;
  type metadata accessor for ScrollableContentWithFloatingPanelView(0, (uint64_t)v75);
  v42 = 0.0;
  if (sub_1001E9838())
    v42 = sub_1001E98E0();
  v43 = sub_1000084FC(&qword_100328B60, &qword_100328B50, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v73 = WitnessTable;
  v74 = v43;
  v44 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v57);
  v45 = sub_1000084FC(&qword_100328B68, &qword_100328B58, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v71 = v44;
  v72 = v45;
  v46 = v55;
  v47 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v55);
  v48 = (uint64_t)v58;
  v49 = v56;
  View.padding(_:_:)(v41, *(_QWORD *)&v42, 0, v46, v47);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v49, v46);
  v69 = v47;
  v70 = &protocol witness table for _PaddingLayout;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v22);
  v50 = v59;
  sub_100092E98(v48, v22, v59);
  v51 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
  v51(v48, v22);
  sub_1000903EC(v50, v22, v62);
  return ((uint64_t (*)(uint64_t, uint64_t))v51)(v50, v22);
}

uint64_t sub_1001E9594@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, uint64_t);
  uint64_t v16;

  v5 = *(_QWORD *)(a2 - 8);
  __chkstk_darwin(a1, a2);
  v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v8, v9);
  v12 = (char *)&v16 - v11;
  (*(void (**)(double))(v13 + 16))(v10);
  sub_100092E98((uint64_t)v7, a2, (uint64_t)v12);
  v14 = *(void (**)(char *, uint64_t))(v5 + 8);
  v14(v7, a2);
  sub_1000903EC((uint64_t)v12, a2, a3);
  return ((uint64_t (*)(char *, uint64_t))v14)(v12, a2);
}

uint64_t sub_1001E966C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  __int128 v13;
  uint64_t v14;
  _QWORD v16[4];
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v13 = *(_OWORD *)(a1 + 112);
  v17 = *(_OWORD *)(a1 + 96);
  v18 = v13;
  v19 = *(_QWORD *)(a1 + 128);
  *(double *)v16 = a6;
  *(double *)&v16[1] = a7;
  *(double *)&v16[2] = a8;
  *(double *)&v16[3] = a9;
  v14 = sub_100003DB8(&qword_100328BB0);
  State.wrappedValue.setter(v16, v14);
  *(_QWORD *)&v17 = a2;
  *((_QWORD *)&v17 + 1) = a3;
  *(_QWORD *)&v18 = a4;
  *((_QWORD *)&v18 + 1) = a5;
  type metadata accessor for ScrollableContentWithFloatingPanelView(0, (uint64_t)&v17);
  return sub_1001E9700();
}

uint64_t sub_1001E9700()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  CGSize size;
  BOOL v4;
  uint64_t v5;
  CGFloat v6;
  uint64_t v7;
  CGRect v9;
  _BYTE v10[96];
  CGRect v11;

  v0 = sub_100003DB8(&qword_1003181E8);
  inited = swift_initStackObject(v0, v10);
  *(_OWORD *)(inited + 16) = xmmword_10024DEE0;
  v2 = sub_100003DB8(&qword_100328BB0);
  State.wrappedValue.getter(&v9, v2);
  size = v9.size;
  *(CGPoint *)(inited + 32) = v9.origin;
  *(CGSize *)(inited + 48) = size;
  State.wrappedValue.getter(&v9, v2);
  v11 = v9;
  *(CGFloat *)(inited + 64) = v9.origin.x;
  *(CGFloat *)(inited + 72) = v11.origin.y;
  *(CGSize *)(inited + 80) = v11.size;
  v4 = CGRectIntersectsRect(v11, *(CGRect *)(inited + 32));
  swift_bridgeObjectRelease(inited);
  LOBYTE(v9.origin.x) = v4;
  v5 = sub_100003DB8(&qword_100316780);
  State.wrappedValue.setter(&v9, v5);
  sub_1001EA458();
  v9.origin.x = v6;
  v7 = sub_100003DB8(&qword_10031CCA8);
  return State.wrappedValue.setter(&v9, v7);
}

BOOL sub_1001E9838()
{
  uint64_t v0;
  double v1;
  double v2;
  uint64_t v3;
  _QWORD v5[4];

  v0 = sub_100003DB8(&qword_100328BB0);
  State.wrappedValue.getter(v5, v0);
  v1 = *(double *)&v5[3];
  v2 = v1 + sub_1001E98E0();
  v3 = sub_100003DB8(&qword_10031B660);
  State.wrappedValue.getter(v5, v3);
  return *(double *)&v5[1] < v2;
}

double sub_1001E98E0()
{
  uint64_t v0;
  double v1;
  uint64_t v2;
  double v4[4];

  v0 = sub_100003DB8(&qword_100328BB0);
  State.wrappedValue.getter(v4, v0);
  v1 = v4[3];
  v2 = sub_100003DB8(&qword_10031CCA8);
  State.wrappedValue.getter(v4, v2);
  return v1 + v4[0];
}

void sub_1001E9964(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  double v8;
  uint64_t v9;
  double v10;
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD v24[8];
  uint64_t v25;
  _BYTE v26[143];
  char v27;

  *(_QWORD *)v26 = a2;
  *(_QWORD *)&v26[8] = a3;
  *(_QWORD *)&v26[16] = a4;
  *(_QWORD *)&v26[24] = a5;
  type metadata accessor for ScrollableContentWithFloatingPanelView(0, (uint64_t)v26);
  v8 = sub_1001E98E0();
  v9 = *a1;
  if (*a1)
  {
    v10 = v8;
    v11 = qword_100315788;
    swift_retain(v9);
    if (v11 != -1)
      swift_once(&qword_100315788, sub_10006F500);
    v12 = *(double *)&qword_10033FC50;
    v13 = swift_release(v9);
    v14 = static Alignment.center.getter(v13);
    sub_10013230C(0.0, 1, 0.0, 1, INFINITY, 0, v10 + v12, 0, (uint64_t)v24, 0.0, 1.0, 0.0, 1, v10 + v12, 0, v14, v15, 6);
    *(_OWORD *)&v26[103] = v24[6];
    *(_OWORD *)&v26[87] = v24[5];
    *(_OWORD *)&v26[39] = v24[2];
    *(_OWORD *)&v26[23] = v24[1];
    *(_QWORD *)&v26[135] = v25;
    *(_OWORD *)&v26[119] = v24[7];
    *(_OWORD *)&v26[55] = v24[3];
    *(_OWORD *)&v26[71] = v24[4];
    *(_OWORD *)&v26[7] = v24[0];
    v16 = *(_OWORD *)&v26[64];
    *(_OWORD *)(a6 + 89) = *(_OWORD *)&v26[80];
    v17 = *(_OWORD *)&v26[112];
    *(_OWORD *)(a6 + 105) = *(_OWORD *)&v26[96];
    *(_OWORD *)(a6 + 121) = v17;
    *(_OWORD *)(a6 + 136) = *(_OWORD *)&v26[127];
    v18 = *(_OWORD *)v26;
    *(_OWORD *)(a6 + 25) = *(_OWORD *)&v26[16];
    v19 = *(_OWORD *)&v26[48];
    *(_OWORD *)(a6 + 41) = *(_OWORD *)&v26[32];
    *(_OWORD *)(a6 + 57) = v19;
    *(_OWORD *)(a6 + 73) = v16;
    v20 = qword_10033FC50;
    v27 = 1;
    *(_QWORD *)a6 = 0;
    *(_BYTE *)(a6 + 8) = 1;
    *(_OWORD *)(a6 + 9) = v18;
    *(_QWORD *)(a6 + 152) = 0;
    *(_QWORD *)(a6 + 160) = v20;
  }
  else
  {
    v21 = a1[1];
    v22 = type metadata accessor for UIMetrics();
    v23 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, v21, v22, v23);
    __break(1u);
  }
}

uint64_t sub_1001E9B3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70[16];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  _QWORD v78[2];
  uint64_t v79;
  char v80;
  uint64_t v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  __int128 v87;
  uint64_t WitnessTable;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;

  v63 = a4;
  v69 = a6;
  v10 = sub_100007FAC(&qword_10031CA70);
  v11 = type metadata accessor for ModifiedContent(255, a3, v10);
  v12 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v13 = type metadata accessor for ModifiedContent(255, v11, v12);
  v90 = a5;
  v91 = sub_1000084FC(&qword_10031CA78, &qword_10031CA70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v89 = sub_1000052EC(&qword_100316C10, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v60 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v13);
  v14 = type metadata accessor for VStack(0, v13, v60);
  v64 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v60 - v16;
  v18 = sub_100007FAC(&qword_100328B78);
  v19 = type metadata accessor for ModifiedContent(255, v14, v18);
  v65 = v19;
  v20 = sub_100007FAC(&qword_100328B80);
  v21 = type metadata accessor for ModifiedContent(0, v19, v20);
  v22 = *(_QWORD *)(v21 - 8);
  v62 = v21;
  v67 = v22;
  __chkstk_darwin(v21, v21);
  v61 = (uint64_t)&v60 - v23;
  v25 = type metadata accessor for ModifiedContent(0, v24, &type metadata for _PaddingLayout);
  v68 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25, v26);
  v28 = (char *)&v60 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29, v30);
  v66 = (uint64_t)&v60 - v31;
  v71 = a2;
  v32 = a3;
  v72 = a3;
  v33 = v63;
  v73 = v63;
  v74 = a5;
  v75 = a1;
  v35 = static HorizontalAlignment.center.getter(v34);
  VStack.init(alignment:spacing:content:)(v35, 0, 0, sub_1001EAEE0, v70, v13, v60);
  v36 = swift_allocObject(&unk_1002F8C58, 240, 7);
  *(_QWORD *)(v36 + 16) = a2;
  *(_QWORD *)(v36 + 24) = v32;
  *(_QWORD *)(v36 + 32) = v33;
  *(_QWORD *)(v36 + 40) = a5;
  v37 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(v36 + 176) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(v36 + 192) = v37;
  v38 = *(_OWORD *)(a1 + 176);
  *(_OWORD *)(v36 + 208) = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(v36 + 224) = v38;
  v39 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v36 + 112) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v36 + 128) = v39;
  v40 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v36 + 144) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v36 + 160) = v40;
  v41 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v36 + 48) = *(_OWORD *)a1;
  *(_OWORD *)(v36 + 64) = v41;
  v42 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v36 + 80) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v36 + 96) = v42;
  sub_100109864((uint64_t *)a1);
  v43 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v14);
  v44 = sub_1001EAEFC();
  v45 = v61;
  sub_10002E528((uint64_t)sub_1001EAEF0, v36, v14, (uint64_t)&type metadata for FloatingPanelFrame, v43, v44, v61);
  swift_release(v36);
  v46 = (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v17, v14);
  v47 = static Edge.Set.bottom.getter(v46);
  v87 = *(_OWORD *)(a1 + 176);
  v48 = sub_100003DB8(&qword_10031CCA8);
  State.wrappedValue.getter(v78, v48);
  v49 = v78[0];
  v50 = sub_1000084FC(&qword_100328BD8, &qword_100328B78, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v85 = v43;
  v86 = v50;
  v51 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v65);
  v52 = sub_1000084FC(&qword_100328BE0, &qword_100328B80, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v83 = v51;
  v84 = v52;
  v53 = v62;
  v54 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v62);
  View.padding(_:_:)(v47, v49, 0, v53, v54);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v45, v53);
  v81 = v54;
  v82 = &protocol witness table for _PaddingLayout;
  v55 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v25);
  v56 = v66;
  sub_100092E98((uint64_t)v28, v25, v66);
  v57 = v68;
  v58 = *(void (**)(char *, uint64_t))(v68 + 8);
  v58(v28, v25);
  v79 = 0;
  v80 = 1;
  *(_QWORD *)&v87 = &v79;
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v28, v56, v25);
  *((_QWORD *)&v87 + 1) = v28;
  v78[0] = &type metadata for Spacer;
  v78[1] = v25;
  v76 = &protocol witness table for Spacer;
  v77 = v55;
  sub_10009058C((uint64_t *)&v87, 2uLL, (uint64_t)v78);
  v58((char *)v56, v25);
  return ((uint64_t (*)(char *, uint64_t))v58)(v28, v25);
}

uint64_t sub_1001EA054@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t WitnessTable;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;

  v32 = a4;
  v35 = a5;
  v7 = *(_QWORD *)(a3 - 8);
  __chkstk_darwin(a1, a2);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100007FAC(&qword_10031CA70);
  v11 = type metadata accessor for ModifiedContent(0, a3, v10);
  v33 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v32 - v13;
  v15 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v16 = type metadata accessor for ModifiedContent(0, v11, v15);
  v34 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v32 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __chkstk_darwin(v20, v21);
  v24 = (char *)&v32 - v23;
  (*(void (**)(double))(a1 + 32))(v22);
  v40 = *(_OWORD *)(a1 + 56);
  v25 = sub_100003DB8(&qword_100316780);
  State.wrappedValue.getter(&v41, v25);
  v26 = v32;
  sub_1001EA2C0(v41, a3, v32);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
  v27 = sub_1000084FC(&qword_10031CA78, &qword_10031CA70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  v38 = v26;
  v39 = v27;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  View.accessibilitySortPriority(_:)(v11, WitnessTable, -1.0);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v14, v11);
  v29 = sub_1000052EC(&qword_100316C10, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v36 = WitnessTable;
  v37 = v29;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  sub_100092E98((uint64_t)v19, v16, (uint64_t)v24);
  v30 = *(void (**)(char *, uint64_t))(v34 + 8);
  v30(v19, v16);
  sub_1000903EC((uint64_t)v24, v16, v35);
  return ((uint64_t (*)(char *, uint64_t))v30)(v24, v16);
}

uint64_t sub_1001EA2C0(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t KeyPath;
  char v8;

  KeyPath = swift_getKeyPath(&unk_10025DF08);
  v8 = a1;
  View.environment<A>(_:_:)(KeyPath, &v8, a2, a3);
  return swift_release(KeyPath);
}

uint64_t sub_1001EA330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8, double a9)
{
  __int128 v13;
  uint64_t v14;
  _QWORD v16[4];
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  v13 = *(_OWORD *)(a1 + 152);
  v17 = *(_OWORD *)(a1 + 136);
  v18 = v13;
  v19 = *(_QWORD *)(a1 + 168);
  *(double *)v16 = a6;
  *(double *)&v16[1] = a7;
  *(double *)&v16[2] = a8;
  *(double *)&v16[3] = a9;
  v14 = sub_100003DB8(&qword_100328BB0);
  State.wrappedValue.setter(v16, v14);
  *(_QWORD *)&v17 = a2;
  *((_QWORD *)&v17 + 1) = a3;
  *(_QWORD *)&v18 = a4;
  *((_QWORD *)&v18 + 1) = a5;
  type metadata accessor for ScrollableContentWithFloatingPanelView(0, (uint64_t)&v17);
  return sub_1001E9700();
}

uint64_t sub_1001EA3C8(double a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  _QWORD v13[4];
  _QWORD v14[2];

  *(double *)v14 = a1;
  *(double *)&v14[1] = a2;
  v11 = sub_100003DB8(&qword_10031B660);
  State.wrappedValue.setter(v14, v11);
  v13[0] = a4;
  v13[1] = a5;
  v13[2] = a6;
  v13[3] = a7;
  type metadata accessor for ScrollableContentWithFloatingPanelView(0, (uint64_t)v13);
  return sub_1001E9700();
}

void sub_1001EA458()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if ((*(_BYTE *)(v0 + 48) & 1) != 0)
  {
    v1 = sub_100003DB8(&qword_10031B660);
    State.wrappedValue.getter(&v9, v1);
    v2 = sub_100003DB8(&qword_100328BB0);
    State.wrappedValue.getter(&v9, v2);
    State.wrappedValue.getter(&v9, v2);
    v3 = *(_QWORD **)v0;
    if (*(_QWORD *)v0)
    {
      v4 = v3[9];
      v5 = v3[10];
      sub_100007BBC(v3 + 6, v4);
      (*(double (**)(uint64_t, uint64_t))(v5 + 88))(v4, v5);
    }
    else
    {
      v6 = *(_QWORD *)(v0 + 8);
      v7 = type metadata accessor for UIMetrics();
      v8 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
      EnvironmentObject.error()(0, v6, v7, v8);
      __break(1u);
    }
  }
}

uint64_t sub_1001EA5D0@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1001E8100(a1, a2);
}

void sub_1001EA628()
{
  xmmword_100328A80 = 0uLL;
}

double sub_1001EA638@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (qword_100315970 != -1)
    swift_once(&qword_100315970, sub_1001EA628);
  result = *(double *)&xmmword_100328A80;
  *a1 = xmmword_100328A80;
  return result;
}

_QWORD *sub_1001EA68C(double *a1, _QWORD *(*a2)(double *__return_ptr))
{
  _QWORD *result;
  double v4;
  double v5;
  double v6;

  result = a2(&v5);
  v4 = v6;
  if (v5 != 0.0 || v6 != 0.0)
  {
    *a1 = v5;
    a1[1] = v4;
  }
  return result;
}

double sub_1001EA6D4()
{
  double result;

  result = 0.0;
  xmmword_100328A90 = 0u;
  unk_100328AA0 = 0u;
  return result;
}

double sub_1001EA6E8@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1001EA740(&qword_100315978, (__n128 *)&xmmword_100328A90, &xmmword_100328AA0, (uint64_t)sub_1001EA6D4, a1).n128_u64[0];
  return result;
}

double sub_1001EA70C()
{
  double result;

  result = 0.0;
  xmmword_100328AB0 = 0u;
  unk_100328AC0 = 0u;
  return result;
}

double sub_1001EA720@<D0>(__n128 *a1@<X8>)
{
  double result;

  *(_QWORD *)&result = sub_1001EA740(&qword_100315980, (__n128 *)&xmmword_100328AB0, xmmword_100328AC0, (uint64_t)sub_1001EA70C, a1).n128_u64[0];
  return result;
}

__n128 sub_1001EA740@<Q0>(_QWORD *a1@<X2>, __n128 *a2@<X3>, __n128 *a3@<X4>, uint64_t a4@<X5>, __n128 *a5@<X8>)
{
  __n128 result;
  __n128 v9;

  if (*a1 != -1)
    swift_once(a1, a4);
  result = *a2;
  v9 = *a3;
  *a5 = *a2;
  a5[1] = v9;
  return result;
}

uint64_t sub_1001EA794()
{
  unint64_t v0;
  uint64_t var1;

  v0 = sub_100042A48();
  EnvironmentValues.subscript.getter(&var1, &type metadata for _ScrollableContentFloatingPanelVisibleKey, &type metadata for _ScrollableContentFloatingPanelVisibleKey, v0);
  return var1;
}

ValueMetadata *type metadata accessor for _ScrollableContentFloatingPanelVisibleKey()
{
  return &type metadata for _ScrollableContentFloatingPanelVisibleKey;
}

uint64_t sub_1001EA7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 72);
}

uint64_t sub_1001EA7E4(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[3]);
  swift_release(a1[5]);
  swift_release(a1[8]);
  swift_release(a1[11]);
  swift_release(a1[16]);
  swift_release(a1[21]);
  return swift_release(a1[23]);
}

uint64_t sub_1001EA83C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  v5 = a2[5];
  v14 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  *(_BYTE *)(a1 + 56) = *((_BYTE *)a2 + 56);
  v6 = a2[8];
  *(_QWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
  v7 = a2[11];
  *(_QWORD *)(a1 + 88) = v7;
  v8 = *((_OWORD *)a2 + 7);
  *(_OWORD *)(a1 + 96) = *((_OWORD *)a2 + 6);
  *(_OWORD *)(a1 + 112) = v8;
  v9 = a2[16];
  *(_QWORD *)(a1 + 128) = v9;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 19);
  v11 = a2[21];
  v10 = a2[22];
  *(_QWORD *)(a1 + 168) = v11;
  *(_QWORD *)(a1 + 176) = v10;
  v12 = a2[23];
  *(_QWORD *)(a1 + 184) = v12;
  swift_retain(v3);
  swift_retain(v14);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v9);
  swift_retain(v11);
  swift_retain(v12);
  return a1;
}

uint64_t *sub_1001EA938(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[5];
  v9 = a1[5];
  a1[4] = a2[4];
  a1[5] = v8;
  swift_retain(v8);
  swift_release(v9);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  v10 = a1[8];
  v11 = a2[8];
  a1[8] = v11;
  swift_retain(v11);
  swift_release(v10);
  a1[9] = a2[9];
  a1[10] = a2[10];
  v12 = a1[11];
  v13 = a2[11];
  a1[11] = v13;
  swift_retain(v13);
  swift_release(v12);
  a1[12] = a2[12];
  a1[13] = a2[13];
  a1[14] = a2[14];
  a1[15] = a2[15];
  v14 = a1[16];
  v15 = a2[16];
  a1[16] = v15;
  swift_retain(v15);
  swift_release(v14);
  a1[17] = a2[17];
  a1[18] = a2[18];
  a1[19] = a2[19];
  a1[20] = a2[20];
  v16 = a1[21];
  v17 = a2[21];
  a1[21] = v17;
  swift_retain(v17);
  swift_release(v16);
  a1[22] = a2[22];
  v18 = a1[23];
  v19 = a2[23];
  a1[23] = v19;
  swift_retain(v19);
  swift_release(v18);
  return a1;
}

__n128 sub_1001EAA94(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t *sub_1001EAAC8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_release(v5);
  v6 = a1[5];
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  swift_release(v6);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a1 + 56) = *((_BYTE *)a2 + 56);
  v7 = a1[8];
  a1[8] = a2[8];
  swift_release(v7);
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  v8 = a1[11];
  a1[11] = a2[11];
  swift_release(v8);
  v9 = *((_OWORD *)a2 + 7);
  *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
  *((_OWORD *)a1 + 7) = v9;
  v10 = a1[16];
  a1[16] = a2[16];
  swift_release(v10);
  *(_OWORD *)(a1 + 17) = *(_OWORD *)(a2 + 17);
  *(_OWORD *)(a1 + 19) = *(_OWORD *)(a2 + 19);
  v11 = a1[21];
  a1[21] = a2[21];
  swift_release(v11);
  a1[22] = a2[22];
  v12 = a1[23];
  a1[23] = a2[23];
  swift_release(v12);
  return a1;
}

uint64_t sub_1001EABAC(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 192))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_1001EABF4(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 192) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 192) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for ScrollableContentWithFloatingPanelView(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &nominal type descriptor for ScrollableContentWithFloatingPanelView);
}

uint64_t storeEnumTagSinglePayload for ScrollableContentWithFloatingPanelViewStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1001EACBC + 4 * byte_10025DDA5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1001EACF0 + 4 * byte_10025DDA0[v4]))();
}

uint64_t sub_1001EACF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EACF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001EAD00);
  return result;
}

uint64_t sub_1001EAD0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001EAD14);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1001EAD18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001EAD20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ScrollableContentWithFloatingPanelViewStyle()
{
  return &type metadata for ScrollableContentWithFloatingPanelViewStyle;
}

uint64_t sub_1001EAD3C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  _OWORD v4[2];

  v2 = *(_OWORD *)(a2 + 32);
  v4[0] = *(_OWORD *)(a2 + 16);
  v4[1] = v2;
  return swift_getOpaqueTypeConformance2(v4, &unk_10029F82C, 1);
}

uint64_t sub_1001EAD70()
{
  return sub_100092AFC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001E8760);
}

uint64_t sub_1001EAD80(double a1, double a2)
{
  uint64_t *v2;

  return sub_1001EA3C8(a1, a2, (uint64_t)(v2 + 6), v2[2], v2[3], v2[4], v2[5]);
}

unint64_t sub_1001EAD90()
{
  unint64_t result;

  result = qword_100328B98;
  if (!qword_100328B98)
  {
    result = swift_getWitnessTable(&unk_10025E014, &type metadata for ViewContentSizeKey);
    atomic_store(result, (unint64_t *)&qword_100328B98);
  }
  return result;
}

uint64_t sub_1001EADD4()
{
  return sub_100092AFC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001E8E74);
}

double sub_1001EADE0(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 192) = 1;
  return result;
}

uint64_t sub_1001EAE08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100328B70);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001EAE50()
{
  return sub_100092AFC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001E9B3C);
}

unint64_t sub_1001EAE5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100328BB8;
  if (!qword_100328BB8)
  {
    v1 = sub_100007FAC(&qword_100328B70);
    sub_1000084FC(&qword_100328BC0, &qword_100328BC8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100328BB8);
  }
  return result;
}

uint64_t sub_1001EAED8(uint64_t result)
{
  *(_BYTE *)(result + 192) = 0;
  return result;
}

uint64_t sub_1001EAEE0()
{
  return sub_100092AFC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001EA054);
}

uint64_t sub_1001EAEF0()
{
  return sub_1001EAFCC((uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001EA330);
}

unint64_t sub_1001EAEFC()
{
  unint64_t result;

  result = qword_100328BD0;
  if (!qword_100328BD0)
  {
    result = swift_getWitnessTable(&unk_10025DFCC, &type metadata for FloatingPanelFrame);
    atomic_store(result, (unint64_t *)&qword_100328BD0);
  }
  return result;
}

uint64_t sub_1001EAF48()
{
  return sub_100092AFC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001E91A0);
}

uint64_t sub_1001EAF54()
{
  return sub_100092AFC((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001E9594);
}

uint64_t sub_1001EAF64()
{
  _QWORD *v0;

  swift_release(v0[6]);
  swift_release(v0[9]);
  swift_release(v0[11]);
  swift_release(v0[14]);
  swift_release(v0[17]);
  swift_release(v0[22]);
  swift_release(v0[27]);
  swift_release(v0[29]);
  return swift_deallocObject(v0, 240, 7);
}

uint64_t sub_1001EAFC0()
{
  return sub_1001EAFCC((uint64_t (*)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))sub_1001E966C);
}

uint64_t sub_1001EAFCC(uint64_t (*a1)(_QWORD *, _QWORD, _QWORD, _QWORD, _QWORD))
{
  _QWORD *v1;

  return a1(v1 + 6, v1[2], v1[3], v1[4], v1[5]);
}

unint64_t sub_1001EAFE0()
{
  unint64_t result;

  result = qword_100328BE8;
  if (!qword_100328BE8)
  {
    result = swift_getWitnessTable("ͭ\t", &type metadata for ScrollContentFrame);
    atomic_store(result, (unint64_t *)&qword_100328BE8);
  }
  return result;
}

ValueMetadata *type metadata accessor for ViewContentSizeKey()
{
  return &type metadata for ViewContentSizeKey;
}

ValueMetadata *type metadata accessor for FloatingPanelFrame()
{
  return &type metadata for FloatingPanelFrame;
}

ValueMetadata *type metadata accessor for ScrollContentFrame()
{
  return &type metadata for ScrollContentFrame;
}

uint64_t sub_1001EB054(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t OpaqueTypeMetadata2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t TupleTypeMetadata2;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t TupleTypeMetadata3;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t WitnessTable;
  uint64_t v46;

  v1 = a1[1];
  v2 = type metadata accessor for VStack(255, *a1, a1[2]);
  v3 = sub_100007FAC(&qword_100328B50);
  v4 = type metadata accessor for ModifiedContent(255, v2, v3);
  v5 = sub_100007FAC(&qword_100328B58);
  v6 = type metadata accessor for ModifiedContent(255, v4, v5);
  v7 = type metadata accessor for ModifiedContent(255, v6, &type metadata for _PaddingLayout);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v2);
  v46 = sub_1000084FC(&qword_100328B60, &qword_100328B50, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  v43 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v4);
  v44 = sub_1000084FC(&qword_100328B68, &qword_100328B58, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  v41 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
  v42 = &protocol witness table for _PaddingLayout;
  v8 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v7);
  v9 = type metadata accessor for ScrollView(255, v7, v8);
  v10 = swift_getWitnessTable(&protocol conformance descriptor for ScrollView<A>, v9);
  v39 = v9;
  v40 = v10;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(255, &v39, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 0);
  v39 = v9;
  v40 = v10;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v39, &opaque type descriptor for <<opaque return type of View.scrollDisabled(_:)>>, 1);
  v13 = type metadata accessor for VStack(255, OpaqueTypeMetadata2, OpaqueTypeConformance2);
  v14 = sub_100007FAC(&qword_100328B70);
  v15 = sub_100007FAC(&qword_10031CA70);
  v16 = type metadata accessor for ModifiedContent(255, v1, v15);
  v17 = type metadata accessor for AccessibilityAttachmentModifier(255);
  v18 = type metadata accessor for ModifiedContent(255, v16, v17);
  sub_1000084FC(&qword_10031CA78, &qword_10031CA70, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  sub_1000052EC(&qword_100316C10, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
  v19 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  v20 = type metadata accessor for VStack(255, v18, v19);
  v21 = sub_100007FAC(&qword_100328B78);
  v22 = type metadata accessor for ModifiedContent(255, v20, v21);
  v23 = sub_100007FAC(&qword_100328B80);
  v24 = type metadata accessor for ModifiedContent(255, v22, v23);
  v25 = type metadata accessor for ModifiedContent(255, v24, &type metadata for _PaddingLayout);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2(255, &type metadata for Spacer, v25, 0, 0);
  v27 = type metadata accessor for TupleView(255, TupleTypeMetadata2);
  v28 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v27);
  v29 = type metadata accessor for VStack(255, v27, v28);
  TupleTypeMetadata3 = swift_getTupleTypeMetadata3(255, v13, v14, v29, 0, 0);
  v31 = type metadata accessor for TupleView(255, TupleTypeMetadata3);
  v32 = swift_getWitnessTable(&protocol conformance descriptor for TupleView<A>, v31);
  v33 = type metadata accessor for ZStack(255, v31, v32);
  v34 = sub_100007FAC(&qword_100328B88);
  v35 = type metadata accessor for ModifiedContent(255, v33, v34);
  v36 = sub_100007FAC(&qword_100328B90);
  v37 = type metadata accessor for ModifiedContent(255, v35, v36);
  swift_getWitnessTable(&protocol conformance descriptor for ZStack<A>, v33);
  sub_1000084FC(&qword_100328BA0, &qword_100328B88, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v35);
  sub_1000084FC(&qword_100328BA8, &qword_100328B90, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v37);
}

ValueMetadata *type metadata accessor for FullScreenGuidanceConnectivityStatusTextView()
{
  return &type metadata for FullScreenGuidanceConnectivityStatusTextView;
}

uint64_t sub_1001EB48C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029F888, 1);
}

uint64_t sub_1001EB49C@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  _OWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  _OWORD *v8;
  __int128 v9;
  _OWORD *v10;
  __int128 v11;
  char v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  _QWORD v19[2];
  __int128 v20[2];
  _QWORD v21[5];
  __int128 v22;
  __int128 v23;

  v2 = v1;
  v3 = (_QWORD *)*((_QWORD *)v1 + 2);
  if (v3)
  {
    v5 = v3[9];
    v6 = v3[10];
    sub_100007BBC(v3 + 6, v5);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 32))(v21, v5, v6);
    v7 = *v1;
    v22 = v1[2];
    v23 = v7;
    v8 = (_OWORD *)swift_allocObject(&unk_1002F8E18, 64, 7);
    v9 = v2[1];
    v8[1] = *v2;
    v8[2] = v9;
    v8[3] = v2[2];
    sub_100007CBC((uint64_t)v21, (uint64_t)v20);
    v10 = (_OWORD *)swift_allocObject(&unk_1002F8E40, 104, 7);
    v11 = v2[1];
    v10[1] = *v2;
    v10[2] = v11;
    v10[3] = v2[2];
    sub_100007D04(v20, (uint64_t)(v10 + 4));
    v18 = 0;
    sub_100031A88(&v23);
    swift_retain(v3);
    sub_100030F08((uint64_t)&v22);
    sub_100031A88(&v23);
    swift_retain(v3);
    sub_100030F08((uint64_t)&v22);
    State.init(wrappedValue:)(v19, &v18, &type metadata for Bool);
    v12 = v19[0];
    v13 = v19[1];
    result = _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v21);
    *(_BYTE *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v13;
    *(_QWORD *)(a1 + 16) = sub_1001EC0F4;
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = sub_1001EC138;
    *(_QWORD *)(a1 + 40) = v10;
  }
  else
  {
    v15 = *((_QWORD *)v1 + 3);
    v16 = type metadata accessor for UIMetrics();
    v17 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v15, v16, v17);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001EB634(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)();
  unint64_t *v10;
  uint64_t v11;
  _QWORD v12[3];
  uint64_t v13;
  uint64_t v14;

  v2 = a1[2];
  if (v2)
  {
    sub_100007CBC(v2 + 48, (uint64_t)v12);
    v3 = v13;
    v4 = v14;
    sub_100007BBC(v12, v13);
    if (*a1)
    {
      v5 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v4 + 104))(*(unsigned __int8 *)(*(_QWORD *)(*a1 + 48) + 120), v3, v4);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v12);
      return v5 & 1;
    }
    v7 = a1[1];
    v8 = type metadata accessor for ConnectivityModel();
    v9 = type metadata accessor for ConnectivityModel;
    v10 = &qword_100316B00;
  }
  else
  {
    v7 = a1[3];
    v8 = type metadata accessor for UIMetrics();
    v9 = type metadata accessor for UIMetrics;
    v10 = (unint64_t *)&qword_100316A00;
  }
  v11 = sub_1000052EC(v10, (uint64_t (*)(uint64_t))v9, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v7, v8, v11);
  __break(1u);
  return result;
}

uint64_t sub_1001EB720@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)(__n128);
  __n128 v38;
  uint64_t v39;
  void *v40;
  unint64_t v41;
  __n128 v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  _QWORD *v53;
  double v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void *v66;
  id v67;
  char v68;
  id v69;
  BOOL v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  id v83;
  char v84;
  double v85;
  uint64_t v86;
  void *v87;
  uint64_t v88;
  void *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char *v94;
  __n128 v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t OpaqueTypeConformance2;
  uint64_t v104;
  uint64_t v105;
  Swift::String v106;
  Swift::String v107;
  uint64_t v108;
  Swift::String v109;
  void *object;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t result;
  uint64_t v116;
  uint64_t v117;
  uint64_t (*v118)();
  unint64_t *v119;
  uint64_t v120;
  __int128 v121;
  int v122;
  int v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t KeyPath;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  void *v152;
  uint64_t v153;
  _QWORD v154[41];
  _QWORD v155[41];
  char v156;
  __n128 v157;
  __int128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  BOOL v169;
  _BYTE v170[312];
  unsigned __int8 v171;
  _BYTE v172[7];
  _BYTE v173[7];
  unsigned __int8 v174;
  _BYTE v175[7];
  _BYTE v176[7];
  unsigned __int8 v177;
  _BYTE v178[7];
  __n128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  BOOL v191;

  v149 = a3;
  v143 = type metadata accessor for OpacityTransition(0);
  v140 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143, v5);
  v139 = (char *)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_1003195D0);
  v144 = *(_QWORD *)(v7 - 8);
  v145 = v7;
  __chkstk_darwin(v7, v8);
  v141 = (char *)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  v142 = (char *)&v121 - v12;
  v150 = type metadata accessor for Font.Leading(0);
  KeyPath = *(_QWORD *)(v150 - 8);
  __chkstk_darwin(v150, v13);
  v15 = (char *)&v121 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003DB8(&qword_100328BF0);
  __chkstk_darwin(v16, v17);
  v138 = (char *)&v121 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_100003DB8(&qword_100328BF8);
  __chkstk_darwin(v137, v19);
  v21 = (char *)&v121 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = sub_100003DB8(&qword_100328C00);
  __chkstk_darwin(v22, v23);
  v25 = (char *)&v121 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = a1;
  v26 = *a1;
  if (!*a1)
  {
    v116 = v151[1];
    v117 = type metadata accessor for ConnectivityModel();
    v118 = type metadata accessor for ConnectivityModel;
    v119 = &qword_100316B00;
LABEL_20:
    v120 = sub_1000052EC(v119, (uint64_t (*)(uint64_t))v118, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v116, v117, v120);
    __break(1u);
    return result;
  }
  swift_retain(*a1);
  sub_1001BFA30();
  v28 = v27;
  v30 = v29;
  v32 = v31;
  swift_release(v26);
  swift_bridgeObjectRelease(v32);
  v153 = v28;
  v148 = v21;
  if (!v28 && v30 == (void *)0xE000000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v153, v30, 0, 0xE000000000000000, 0) & 1) != 0)
  {
    v33 = v151;
    v34 = (void *)v151[5];
    v153 = v151[4];
    swift_bridgeObjectRetain(v34);
    swift_bridgeObjectRelease(v30);
    v152 = v34;
  }
  else
  {
    v152 = v30;
    v33 = v151;
  }
  v146 = v22;
  v147 = v25;
  v35 = v33[2];
  if (!v35)
  {
    v116 = v151[3];
    v117 = type metadata accessor for UIMetrics();
    v118 = type metadata accessor for UIMetrics;
    v119 = (unint64_t *)&qword_100316A00;
    goto LABEL_20;
  }
  v36 = *(_QWORD *)(v35 + 80);
  sub_100007BBC((_QWORD *)(v35 + 48), *(_QWORD *)(v35 + 72));
  v37 = *(uint64_t (**)(__n128))(v36 + 96);
  v38 = swift_retain(v26);
  v39 = v37(v38);
  swift_release(v26);
  v40 = v152;
  v155[0] = v153;
  v155[1] = v152;
  v41 = sub_10002B3F4();
  v42 = swift_bridgeObjectRetain(v40);
  v43 = Text.init<A>(_:)(v155, &type metadata for String, v41, v42);
  v135 = v44;
  v136 = v43;
  LOBYTE(v41) = v45;
  v134 = v46;
  v47 = sub_100007BBC(a2, a2[3]);
  v48 = *v47;
  v49 = *(_QWORD *)(*v47 + 184);
  v131 = *(_QWORD *)(*v47 + 192);
  v132 = v49;
  v50 = *(_QWORD *)(v48 + 200);
  v129 = *(_QWORD *)(v48 + 208);
  v130 = v50;
  v52 = static Edge.Set.all.getter(v51);
  v127 = v52;
  v128 = static Edge.Set.bottom.getter(v52);
  v53 = sub_100007BBC(a2, a2[3]);
  v54 = EdgeInsets.init(_all:)(*(double *)(*v53 + 40));
  v56 = v55;
  v58 = v57;
  v60 = v59;
  v177 = v41 & 1;
  v174 = 0;
  v171 = 0;
  v62 = static Font.title3.getter(v61);
  v63 = Font.bold()(v62);
  swift_release(v62);
  v64 = KeyPath;
  v65 = v150;
  (*(void (**)(char *, _QWORD, uint64_t))(KeyPath + 104))(v15, enum case for Font.Leading.tight(_:), v150);
  v126 = Font.leading(_:)(v15, v63);
  swift_release(v63);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v15, v65);
  KeyPath = swift_getKeyPath(&unk_10025E0E0);
  v122 = v177;
  v123 = v174;
  v125 = v171;
  v124 = swift_getKeyPath(&unk_10025E110);
  v66 = *(void **)(v35 + 112);
  v150 = v39;
  swift_retain(v39);
  v67 = v66;
  v68 = static UIContentSizeCategory.>= infix(_:_:)(v67, UIContentSizeCategoryAccessibilityExtraLarge);

  *((_QWORD *)&v121 + 1) = (v68 & 1) == 0;
  *(_QWORD *)&v121 = swift_getKeyPath(&unk_10025E140);
  v69 = *(id *)(v35 + 112);
  LOBYTE(v39) = static UIContentSizeCategory.>= infix(_:_:)(v69, UIContentSizeCategoryAccessibilityExtraLarge);

  v70 = (v39 & 1) == 0;
  v71 = swift_getKeyPath(&unk_10025E170);
  v72 = *(id *)(v35 + 112);
  v73 = static Alignment.center.getter(v72);
  v75 = v74;
  v76 = static UIContentSizeCategory.>= infix(_:_:)(v72, UIContentSizeCategoryAccessibilityExtraLarge);
  if ((v76 & 1) != 0)
  {
    v77 = static Alignment.center.getter(v76);
    v79 = static Alignment.== infix(_:_:)(v73, v75, v77, v78);
    if ((v79 & 1) != 0)
    {
      v73 = static Alignment.leading.getter(v79, v80);
      v75 = v81;
    }
  }

  *(_DWORD *)((char *)&v158 + 1) = *(_DWORD *)v176;
  DWORD1(v158) = *(_DWORD *)&v176[3];
  *(_DWORD *)((char *)&v159 + 1) = *(_DWORD *)v175;
  DWORD1(v159) = *(_DWORD *)&v175[3];
  *(_DWORD *)((char *)&v161 + 9) = *(_DWORD *)v173;
  HIDWORD(v161) = *(_DWORD *)&v173[3];
  *(_DWORD *)((char *)&v162 + 1) = *(_DWORD *)v172;
  DWORD1(v162) = *(_DWORD *)&v172[3];
  *(_DWORD *)((char *)&v164 + 9) = *(_DWORD *)v178;
  HIDWORD(v164) = *(_DWORD *)&v178[3];
  v156 = v68 & 1;
  v157.n128_u64[0] = v136;
  v157.n128_u64[1] = v135;
  LOBYTE(v158) = v122;
  *((_QWORD *)&v158 + 1) = v134;
  LOBYTE(v159) = v127;
  *((_QWORD *)&v159 + 1) = v132;
  *(_QWORD *)&v160 = v131;
  *((_QWORD *)&v160 + 1) = v130;
  *(_QWORD *)&v161 = v129;
  BYTE8(v161) = v123;
  LOBYTE(v162) = v128;
  *((double *)&v162 + 1) = v54;
  *(_QWORD *)&v163 = v56;
  *((_QWORD *)&v163 + 1) = v58;
  *(_QWORD *)&v164 = v60;
  BYTE8(v164) = v125;
  *(_QWORD *)&v165 = KeyPath;
  *((_QWORD *)&v165 + 1) = v126;
  *(_QWORD *)&v166 = v124;
  *((_QWORD *)&v166 + 1) = v150;
  v167 = v121;
  LOBYTE(v168) = v68 & 1;
  *((_QWORD *)&v168 + 1) = v71;
  v169 = v70;
  v186 = v164;
  v185 = v163;
  v191 = v70;
  v190 = v168;
  v189 = v121;
  v187 = v165;
  v188 = v166;
  v184 = v162;
  v183 = v161;
  v182 = v160;
  v181 = v159;
  v179 = v157;
  v180 = v158;
  v82 = 1;
  sub_100131B3C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v170, v157, 0.0, 1, 0.0, 1, v73, v75);
  sub_10004DA10((uint64_t)&v157);
  v83 = *(id *)(v35 + 112);
  v84 = static UIContentSizeCategory.>= infix(_:_:)(v83, UIContentSizeCategoryAccessibilityExtraLarge);

  if ((v84 & 1) != 0)
    v85 = 1.0;
  else
    v85 = 0.5;
  v86 = swift_getKeyPath(&unk_10025E1A0);
  memcpy(v155, v170, 0x138uLL);
  v155[39] = v86;
  *(double *)&v155[40] = v85;
  memcpy(v154, v155, sizeof(v154));
  v87 = v152;
  v88 = v151[4];
  v89 = (void *)v151[5];
  v90 = v145;
  if (v153 != v88 || v152 != v89)
    v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v153, v152, v88, v89, 0);
  v91 = sub_100003DB8(&qword_100319650);
  v92 = sub_10004DD9C();
  v93 = (uint64_t)v138;
  View.accessibility(hidden:)(v82 & 1, v91, v92);
  sub_10004E118((uint64_t)v155);
  v94 = v139;
  v96 = OpacityTransition.init()(v95);
  v97 = static Animation.easeInOut.getter(v96);
  v98 = sub_1000052EC(&qword_100318760, (uint64_t (*)(uint64_t))&type metadata accessor for OpacityTransition, (uint64_t)&protocol conformance descriptor for OpacityTransition);
  v100 = v142;
  v99 = v143;
  Transition.animation(_:)(v97, v143, v98);
  swift_release(v97);
  (*(void (**)(char *, uint64_t))(v140 + 8))(v94, v99);
  v101 = v144;
  v102 = v141;
  (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v141, v100, v90);
  v154[0] = v99;
  v154[1] = v98;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v154, &opaque type descriptor for <<opaque return type of Transition.animation(_:)>>, 1);
  v104 = AnyTransition.init<A>(_:)(v102, v90, OpaqueTypeConformance2);
  v105 = (uint64_t)v148;
  sub_10000B234(v93, (uint64_t)v148, &qword_100328BF0);
  *(_QWORD *)(v105 + *(int *)(v137 + 36)) = v104;
  (*(void (**)(char *, uint64_t))(v101 + 8))(v100, v90);
  sub_100007FF0(v93, &qword_100328BF0);
  v154[0] = 0;
  v154[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(16);
  swift_bridgeObjectRelease(v154[1]);
  v154[0] = 0x6554737574617453;
  v154[1] = 0xEB000000002D7478;
  v106._countAndFlagsBits = v153;
  v106._object = v87;
  String.append(_:)(v106);
  swift_bridgeObjectRelease(v87);
  v107._countAndFlagsBits = 45;
  v107._object = (void *)0xE100000000000000;
  String.append(_:)(v107);
  v108 = v150;
  v109._countAndFlagsBits = Color.description.getter(v150);
  object = v109._object;
  String.append(_:)(v109);
  swift_release(v108);
  swift_bridgeObjectRelease(object);
  v111 = v154[0];
  v112 = v154[1];
  v113 = (uint64_t)v147;
  sub_10000B234(v105, (uint64_t)v147, &qword_100328BF8);
  v114 = (_QWORD *)(v113 + *(int *)(v146 + 52));
  *v114 = v111;
  v114[1] = v112;
  sub_100007FF0(v105, &qword_100328BF8);
  return sub_1001EC16C(v113, v149);
}

uint64_t sub_1001EC0C0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1001EC0F4()
{
  uint64_t v0;

  return sub_1001EB634((_QWORD *)(v0 + 16));
}

uint64_t sub_1001EC0FC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_bridgeObjectRelease(v0[7]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 8);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_1001EC138@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001EB720((_QWORD *)(v1 + 16), (_QWORD *)(v1 + 64), a1);
}

uint64_t sub_1001EC16C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100328C00);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001EC1B4()
{
  return sub_1000084FC(&qword_100328C08, (uint64_t *)&unk_100328C10, (uint64_t)&unk_10024CE10);
}

double sub_1001EC214(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  double result;
  void *v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  _BYTE v9[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v4 = (void *)Strong;
    v5 = swift_unknownObjectWeakLoadStrong(Strong + OBJC_IVAR____TtC8SOSBuddy20BannerViewController_contentProducer);

    if (v5)
    {
      swift_beginAccess(v1, &v8, 0, 0);
      v6 = (void *)swift_unknownObjectWeakLoadStrong(v1);
      if (v6)
      {
        v7 = v6;
        objc_msgSend(v6, "setPreferredContentSize:", *(double *)(*(_QWORD *)(v5 + 40) + 32), *(double *)(*(_QWORD *)(v5 + 40) + 40));

      }
      *(_QWORD *)&result = swift_unknownObjectRelease(v5).n128_u64[0];
    }
  }
  return result;
}

void sub_1001EC2E8()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t Strong;
  uint64_t v13;
  id v14;
  char *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  char *v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD60);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v26 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v25 = sub_100172BEC(v9, v11, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] loadView", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  Strong = swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_contentProducer]);
  if (Strong)
  {
    v13 = Strong;
    v14 = sub_10016E3EC(v2);
    objc_msgSend(v2, "setView:", v14);
    swift_unknownObjectRelease(v13);

  }
  else
  {
    v15 = v2;
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      v19 = swift_slowAlloc(32, -1);
      v26 = v19;
      *(_DWORD *)v18 = 136446210;
      v20 = v15;
      v21 = objc_msgSend(v20, "description");
      v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
      v24 = v23;

      v25 = sub_100172BEC(v22, v24, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v18 + 4, v18 + 12);

      swift_bridgeObjectRelease(v24);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "[%{public}s] contentProducer expired", v18, 0xCu);
      swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1, -1);
      swift_slowDealloc(v18, -1, -1);

    }
    else
    {

    }
  }
}

void sub_1001EC688()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  objc_class *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  objc_super v18;

  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD60);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v17 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v16 = sub_100172BEC(v9, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] viewDidLoad", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v12 = (objc_class *)type metadata accessor for BannerViewController();
  v18.receiver = v2;
  v18.super_class = v12;
  objc_msgSendSuper2(&v18, "viewDidLoad");
  objc_msgSend(v2, "setOverrideUserInterfaceStyle:", 2);
  v13 = *(void **)&v2[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_tapGesture];
  objc_msgSend(v13, "addTarget:action:", v2, "didTap");
  v14 = objc_msgSend(v2, "view");
  if (v14)
  {
    v15 = v14;
    objc_msgSend(v14, "addGestureRecognizer:", v13);

  }
  else
  {
    __break(1u);
  }
}

id sub_1001EC9B8(char a1, char *a2, SEL *a3)
{
  void *v3;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  objc_class *v17;
  char *format;
  uint64_t v20;
  SEL *v21;
  uint64_t v22;
  uint64_t v23;
  objc_super v24;

  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v7 = type metadata accessor for Logger(0);
  sub_10000D744(v7, (uint64_t)qword_10033FD60);
  v8 = v3;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v21 = a3;
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v23 = v20;
    *(_DWORD *)v11 = 136446210;
    format = a2;
    v12 = v8;
    v13 = objc_msgSend(v12, "description");
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

    a3 = v21;
    v22 = sub_100172BEC(v14, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, format, v11, 0xCu);
    swift_arrayDestroy(v20, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
  v17 = (objc_class *)type metadata accessor for BannerViewController();
  v24.receiver = v8;
  v24.super_class = v17;
  return objc_msgSendSuper2(&v24, *a3, a1 & 1);
}

uint64_t sub_1001ECC08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v1 = v0;
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FD60);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v13 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = _typeName(_:qualified:)(v1, 0);
    v10 = v9;
    v12 = sub_100172BEC(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v10);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "[%{public}s] _isSecureForRemoteViewService", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  return 1;
}

uint64_t sub_1001ECDA8()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  id v10;
  uint64_t v11;

  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD60);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    v10 = v2;
    v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
    *v6 = v2;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}@] _canShowWhileLocked", v5, 0xCu);
    v8 = sub_100003DB8(&qword_1003178F0);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  return 1;
}

double sub_1001ECF68()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t Strong;
  double result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD60);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v16 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v15 = sub_100172BEC(v9, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] didTap", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  Strong = swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_delegate]);
  if (Strong)
  {
    v14 = Strong;
    sub_1001B6498(v2);
    *(_QWORD *)&result = swift_unknownObjectRelease(v14).n128_u64[0];
  }
  return result;
}

void sub_1001ED194(void *a1, double a2, double a3)
{
  void *v3;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  void **v15;
  uint64_t v16;
  double (*v17)(uint64_t, uint64_t);
  void *v18;
  void (*v19)(uint64_t);
  uint64_t v20;
  objc_super v21;

  v21.receiver = v3;
  v21.super_class = (Class)type metadata accessor for BannerViewController();
  objc_msgSendSuper2(&v21, "viewWillTransitionToSize:withTransitionCoordinator:", a1, a2, a3);
  v7 = swift_allocObject(&unk_1002F8EC8, 40, 7);
  *(_QWORD *)(v7 + 16) = v3;
  *(double *)(v7 + 24) = a2;
  *(double *)(v7 + 32) = a3;
  v19 = sub_1001EDA28;
  v20 = v7;
  v15 = _NSConcreteStackBlock;
  v16 = 1107296256;
  v17 = sub_1002057C0;
  v18 = &unk_1002F8EE0;
  v8 = _Block_copy(&v15);
  v9 = v20;
  v10 = v3;
  swift_release(v9);
  v11 = swift_allocObject(&unk_1002F8F18, 40, 7);
  *(_QWORD *)(v11 + 16) = v10;
  *(double *)(v11 + 24) = a2;
  *(double *)(v11 + 32) = a3;
  v19 = sub_1001EDA64;
  v20 = v11;
  v15 = _NSConcreteStackBlock;
  v16 = 1107296256;
  v17 = sub_1002057C0;
  v18 = &unk_1002F8F30;
  v12 = _Block_copy(&v15);
  v13 = v20;
  v14 = v10;
  swift_release(v13);
  objc_msgSend(a1, "animateAlongsideTransition:completion:", v8, v12);
  _Block_release(v12);
  _Block_release(v8);
}

void sub_1001ED2F8(double a1, double a2, uint64_t a3, uint64_t a4)
{
  uint64_t Strong;
  uint64_t v7;
  _QWORD v8[2];

  Strong = swift_unknownObjectWeakLoadStrong(a4 + OBJC_IVAR____TtC8SOSBuddy20BannerViewController_delegate);
  if (Strong)
  {
    v7 = Strong;
    *(double *)v8 = a1;
    *(double *)&v8[1] = a2;
    PassthroughSubject.send(_:)(v8);
    swift_unknownObjectRelease(v7);
  }
}

id sub_1001ED3FC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BannerViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BannerViewController()
{
  return objc_opt_self(_TtC8SOSBuddy20BannerViewController);
}

id sub_1001ED508(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  NSString v4;

  v3 = *(_QWORD *)(a1 + *a3 + 8);
  swift_bridgeObjectRetain(v3);
  v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v3);
  return v4;
}

void sub_1001ED794()
{
  char *v0;
  char *v1;
  char *v2;
  uint64_t v3;
  void *v4;

  v1 = &v0[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_contentProducer];
  *((_QWORD *)v1 + 1) = 0;
  swift_unknownObjectWeakInit(v1, 0);
  v2 = &v0[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_delegate];
  *((_QWORD *)v2 + 1) = 0;
  swift_unknownObjectWeakInit(v2, 0);
  v3 = OBJC_IVAR____TtC8SOSBuddy20BannerViewController_tapGesture;
  *(_QWORD *)&v0[v3] = objc_msgSend(objc_allocWithZone((Class)UITapGestureRecognizer), "init");
  swift_unknownObjectWeakInit(&v0[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_presentableContext], 0);
  *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_dismissalPreventionAssertion] = 0;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100209204((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v4 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_subscriptions] = v4;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100260900, "SOSBuddy/BannerViewController.swift", 35, 2, 80, 0);
  __break(1u);
}

double sub_1001ED8AC()
{
  char *v0;
  char *v1;
  uint64_t Strong;
  double v3;
  uint64_t v4;
  id v5;
  void *v6;
  NSString v7;
  id v8;
  uint64_t v9;
  double result;

  v1 = v0;
  Strong = swift_unknownObjectWeakLoadStrong(&v0[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_delegate]);
  if (Strong)
  {
    v4 = Strong;
    sub_1001B4FD0(v1);
    *(_QWORD *)&v3 = swift_unknownObjectRelease(v4).n128_u64[0];
  }
  v5 = objc_msgSend(v1, "presentableDismissalPreventionContext", v3);
  if (v5)
  {
    v6 = v5;
    v7 = String._bridgeToObjectiveC()();
    v8 = objc_msgSend(v6, "acquireTransitionDismissalPreventionAssertionForReason:", v7);
    swift_unknownObjectRelease(v6);

  }
  else
  {
    v8 = 0;
  }
  v9 = *(_QWORD *)&v1[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_dismissalPreventionAssertion];
  *(_QWORD *)&v1[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_dismissalPreventionAssertion] = v8;
  *(_QWORD *)&result = swift_unknownObjectRelease(v9).n128_u64[0];
  return result;
}

id sub_1001ED97C(void *a1)
{
  char *v1;
  char *v2;
  id result;
  double v5;
  id v6;

  v2 = v1;
  result = (id)swift_unknownObjectWeakLoadStrong(&v2[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_delegate]);
  if (result)
  {
    if (!a1)
    {
      __break(1u);
      return result;
    }
    v6 = result;
    sub_1001B54B8(v2, a1);
    *(_QWORD *)&v5 = swift_unknownObjectRelease(v6).n128_u64[0];
  }
  result = *(id *)&v2[OBJC_IVAR____TtC8SOSBuddy20BannerViewController_dismissalPreventionAssertion];
  if (result)
    return objc_msgSend(result, "invalidate", v5);
  return result;
}

uint64_t sub_1001EDA04()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

void sub_1001EDA28(uint64_t a1)
{
  uint64_t v1;

  sub_1001ED2F8(*(double *)(v1 + 24), *(double *)(v1 + 32), a1, *(_QWORD *)(v1 + 16));
}

double sub_1001EDA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1001EDA5C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_1001EDA64(uint64_t a1)
{
  uint64_t v1;

  sub_1001ED2F8(*(double *)(v1 + 24), *(double *)(v1 + 32), a1, *(_QWORD *)(v1 + 16));
}

void sub_1001EDA94(__n128 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(v1 + 32);
  if (!v2 || (v3 = v2 - 1, (*(_QWORD *)(v1 + 32) = v3) == 0))
  {
    if (*(_BYTE *)(v1 + 40) == 1)
    {
      *(_BYTE *)(v1 + 40) = 0;
      v4 = sub_100003DB8(&qword_10032B0E0);
      v5 = sub_100016B20();
      a1 = Subject<>.send()(v4, v5);
    }
    if (*(_BYTE *)(v1 + 41) == 1)
    {
      *(_BYTE *)(v1 + 41) = 0;
      (*(void (**)(__n128))(*(_QWORD *)v1 + 248))(a1);
    }
  }
}

double sub_1001EDB28()
{
  uint64_t v0;
  unint64_t v1;
  double result;

  v0 = sub_100003DB8(&qword_10032B0E0);
  v1 = sub_100016B20();
  *(_QWORD *)&result = Subject<>.send()(v0, v1).n128_u64[0];
  return result;
}

void sub_1001EDB64(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (!v2 || (v3 = v2 - 1, (*(_QWORD *)(a1 + 32) = v3) == 0))
  {
    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      *(_BYTE *)(a1 + 40) = 0;
      v4 = sub_100003DB8(&qword_10032B0E0);
      v5 = sub_100016B20();
      Subject<>.send()(v4, v5);
    }
    if (*(_BYTE *)(a1 + 41) == 1)
    {
      *(_BYTE *)(a1 + 41) = 0;
      (*(void (**)(void))(*(_QWORD *)a1 + 248))();
    }
  }
}

uint64_t sub_1001EDBEC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 42, 7);
}

uint64_t type metadata accessor for SuspendableModelBase()
{
  return objc_opt_self(_TtC8SOSBuddy20SuspendableModelBase);
}

void sub_1001EDC38()
{
  uint64_t v0;
  uint64_t v1;
  BOOL v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 32);
  v2 = __CFADD__(v1, 1);
  v3 = v1 + 1;
  if (v2)
    __break(1u);
  else
    *(_QWORD *)(v0 + 32) = v3;
}

uint64_t sub_1001EDC54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  __n128 v18;
  _QWORD *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  _QWORD *v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t v43;

  v1 = v0;
  v40 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v38 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40, v2);
  v39 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  v12 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v13 = objc_msgSend(v12, "bundleIdentifier");

  if (v13)
  {
    v14 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

  }
  else
  {
    v16 = 0x8000000100260990;
    v14 = (_QWORD *)0xD000000000000012;
  }
  sub_10000D75C();
  v42 = v14;
  v43 = v16;
  swift_bridgeObjectRetain(v16);
  v17._countAndFlagsBits = 7697454;
  v17._object = (void *)0xE300000000000000;
  String.append(_:)(v17);
  v18 = swift_bridgeObjectRelease(v16);
  v19 = v42;
  v20 = v43;
  static DispatchQoS.unspecified.getter(v18);
  v42 = _swiftEmptyArrayStorage;
  v21 = sub_1000052EC((unint64_t *)&unk_1003178B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v22 = sub_100003DB8((uint64_t *)&unk_100324AE0);
  v23 = sub_10000F138((unint64_t *)&unk_1003178C0, (uint64_t *)&unk_100324AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v22, v23, v4, v21);
  v24 = v39;
  (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v39, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v40);
  *(_QWORD *)(v1 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v19, v20, v11, v7, v24, 0);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v25 = type metadata accessor for Logger(0);
  sub_10000D744(v25, (uint64_t)qword_10033FD18);
  v27 = swift_retain_n(v1, v26);
  v28 = Logger.logObject.getter(v27);
  v29 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v28, v29))
  {
    v30 = (uint8_t *)swift_slowAlloc(12, -1);
    v31 = (_QWORD *)swift_slowAlloc(32, -1);
    v41 = v1;
    v42 = v31;
    *(_DWORD *)v30 = 136446210;
    v32 = type metadata accessor for TelephonyUtilitiesAgent();
    v33 = swift_retain(v1);
    v34 = String.init<A>(describing:)(&v41, v32, v33);
    v36 = v35;
    v41 = sub_100172BEC(v34, v35, (uint64_t *)&v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v30 + 4, v30 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "[%{public}s] init", v30, 0xCu);
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v30, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  return v1;
}

uint64_t sub_1001EE028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = swift_retain_n(v0, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v1;
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for TelephonyUtilitiesAgent();
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v9, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] deinit", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }

  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  return v1;
}

uint64_t sub_1001EE1F4()
{
  uint64_t v0;

  sub_1001EE028();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for TelephonyUtilitiesAgent()
{
  return objc_opt_self(_TtC8SOSBuddy23TelephonyUtilitiesAgent);
}

uint64_t sub_1001EE234(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD v23[2];
  uint64_t v24;
  void *v25;
  _QWORD aBlock[5];
  _QWORD *v27;

  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v24 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(_QWORD *)(v2 + 16);
  v14 = swift_allocObject(&unk_1002F8FA0, 24, 7);
  swift_weakInit(v14 + 16, v2);
  v15 = (_QWORD *)swift_allocObject(&unk_1002F8FC8, 40, 7);
  v15[2] = v14;
  v15[3] = a1;
  v15[4] = a2;
  aBlock[4] = sub_1001EE564;
  v27 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002F8FE0;
  v16 = _Block_copy(aBlock);
  swift_retain(v14);
  v17 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v17);
  v25 = &_swiftEmptyArrayStorage;
  v18 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v20 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v19, v20, v5, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v8, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v21 = v27;
  swift_release(v14);
  return swift_release(v21);
}

uint64_t sub_1001EE464()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001EE488(uint64_t a1, uint64_t (*a2)(void), uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v11[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  Strong = swift_weakLoadStrong(v5);
  if (!Strong)
    return a2();
  v7 = Strong;
  v8 = *(_QWORD *)(Strong + 32);
  if (v8)
  {
    v9 = *(_QWORD *)(Strong + 24);
    swift_bridgeObjectRetain(*(_QWORD *)(Strong + 32));
    sub_1001EEB2C(v9, v8, (uint64_t)a2, a3);
    swift_bridgeObjectRelease(v8);
  }
  else
  {
    sub_1001EE824((void (*)(_QWORD))a2, a3);
  }
  return swift_release(v7);
}

uint64_t sub_1001EE538()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001EE564()
{
  uint64_t v0;

  return sub_1001EE488(*(_QWORD *)(v0 + 16), *(uint64_t (**)(void))(v0 + 24), *(_QWORD *)(v0 + 32));
}

double sub_1001EE570(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1001EE580(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001EE588(uint64_t a1, uint64_t (*a2)(BOOL), uint64_t a3, const char *a4, const char *a5)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t (*v13)(BOOL);
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v24;
  uint64_t v25;

  if (!a1)
  {
    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v19 = type metadata accessor for Logger(0);
    v20 = sub_10000D744(v19, (uint64_t)qword_10033FD18);
    v10 = Logger.logObject.getter(v20);
    v21 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v21, a5, v22, 2u);
      swift_slowDealloc(v22, -1, -1);
    }
    goto LABEL_11;
  }
  swift_errorRetain(a1);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v8 = type metadata accessor for Logger(0);
  sub_10000D744(v8, (uint64_t)qword_10033FD18);
  swift_errorRetain(a1);
  v9 = swift_errorRetain(a1);
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v10, v11))
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    swift_errorRelease(a1);
LABEL_11:

    return a2(a1 == 0);
  }
  v12 = (uint8_t *)swift_slowAlloc(12, -1);
  v13 = a2;
  v14 = (uint64_t *)swift_slowAlloc(8, -1);
  *(_DWORD *)v12 = 138543362;
  swift_errorRetain(a1);
  v15 = _swift_stdlib_bridgeErrorToNSError(a1);
  v24 = v15;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v12 + 4, v12 + 12);
  *v14 = v15;
  swift_errorRelease(a1);
  swift_errorRelease(a1);
  _os_log_impl((void *)&_mh_execute_header, v10, v11, a4, v12, 0xCu);
  v16 = sub_100003DB8(&qword_1003178F0);
  swift_arrayDestroy(v14, 1, v16);
  v17 = v14;
  a2 = v13;
  swift_slowDealloc(v17, -1, -1);
  swift_slowDealloc(v12, -1, -1);

  swift_errorRelease(a1);
  return a2(a1 == 0);
}

void sub_1001EE824(void (*a1)(_QWORD), uint64_t a2)
{
  id v4;
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  uint64_t v16;
  _QWORD *v17;
  void **aBlock;
  _QWORD v19[4];
  uint64_t v20;

  v4 = objc_msgSend(objc_allocWithZone((Class)TUCallProviderManager), "init");
  v5 = objc_msgSend(v4, "emergencyProvider");
  v6 = objc_msgSend(objc_allocWithZone((Class)TUDialRequest), "initWithProvider:", v5);

  objc_msgSend(v6, "setDialType:", 1);
  if (objc_msgSend(v6, "isValid"))
  {
    v7 = objc_msgSend((id)objc_opt_self(TUCallCenter), "sharedInstance");
    v8 = swift_allocObject(&unk_1002F9068, 32, 7);
    *(_QWORD *)(v8 + 16) = a1;
    *(_QWORD *)(v8 + 24) = a2;
    v19[3] = sub_1001EEF04;
    v20 = v8;
    aBlock = _NSConcreteStackBlock;
    v19[0] = 1107296256;
    v19[1] = sub_1002167A4;
    v19[2] = &unk_1002F9080;
    v9 = _Block_copy(&aBlock);
    v10 = v20;
    swift_retain(a2);
    swift_release(v10);
    objc_msgSend(v7, "launchAppForDialRequest:completion:", v6, v9);
    _Block_release(v9);

    v4 = v6;
  }
  else
  {
    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v11 = type metadata accessor for Logger(0);
    sub_10000D744(v11, (uint64_t)qword_10033FD18);
    v7 = v6;
    v12 = Logger.logObject.getter(v7);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = (_QWORD *)swift_slowAlloc(8, -1);
      *(_DWORD *)v14 = 138543362;
      aBlock = (void **)v7;
      v15 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v19, v14 + 4, v14 + 12);
      *v17 = v7;

      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Unable to start emergency call, dial request is invalid: %{public}@", v14, 0xCu);
      v16 = sub_100003DB8(&qword_1003178F0);
      swift_arrayDestroy(v17, 1, v16);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v14, -1, -1);

      a1(0);
    }
    else
    {

      a1(0);
    }
  }

}

void sub_1001EEB2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  NSString v11;
  id v12;
  id v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  void ***v21;
  void **v22;
  uint64_t v23;
  void **v24;
  void **aBlock;
  _QWORD v26[4];
  uint64_t v27;

  v7 = objc_msgSend(objc_allocWithZone((Class)TUCallProviderManager), "init");
  v8 = objc_msgSend(v7, "defaultProvider");
  v9 = objc_msgSend(objc_allocWithZone((Class)TUDialRequest), "initWithProvider:", v8);

  v10 = objc_allocWithZone((Class)TUHandle);
  swift_bridgeObjectRetain(a2);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v12 = objc_msgSend(v10, "initWithType:value:", 2, v11);

  objc_msgSend(v9, "setHandle:", v12);
  objc_msgSend(v9, "setShowUIPrompt:", 1);
  if (objc_msgSend(v9, "isValid"))
  {
    v13 = objc_msgSend((id)objc_opt_self(TUCallCenter), "sharedInstance");
    v14 = swift_allocObject(&unk_1002F9018, 32, 7);
    *(_QWORD *)(v14 + 16) = a3;
    *(_QWORD *)(v14 + 24) = a4;
    v26[3] = sub_1001EEEB8;
    v27 = v14;
    aBlock = _NSConcreteStackBlock;
    v26[0] = 1107296256;
    v26[1] = sub_1002167A4;
    v26[2] = &unk_1002F9030;
    v15 = _Block_copy(&aBlock);
    v16 = v27;
    swift_retain(a4);
    swift_release(v16);
    objc_msgSend(v13, "launchAppForDialRequest:completion:", v9, v15);
    _Block_release(v15);

  }
  else
  {
    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v17 = type metadata accessor for Logger(0);
    sub_10000D744(v17, (uint64_t)qword_10033FD18);
    v24 = (void **)v9;
    v18 = Logger.logObject.getter(v24);
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (void ***)swift_slowAlloc(8, -1);
      *(_DWORD *)v20 = 138543362;
      aBlock = v24;
      v22 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v26, v20 + 4, v20 + 12);
      *v21 = v24;

      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Unable to start emergency call, dial request is invalid: %{public}@", v20, 0xCu);
      v23 = sub_100003DB8(&qword_1003178F0);
      swift_arrayDestroy(v21, 1, v23);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

    }
  }
}

uint64_t sub_1001EEEB8(uint64_t a1)
{
  uint64_t v1;

  return sub_1001EE588(a1, *(uint64_t (**)(BOOL))(v1 + 16), *(_QWORD *)(v1 + 24), "Failed to start simulated emergency call, error: %{public}@", "Started simulated emergency call");
}

uint64_t sub_1001EEEE0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001EEF04(uint64_t a1)
{
  uint64_t v1;

  return sub_1001EE588(a1, *(uint64_t (**)(BOOL))(v1 + 16), *(_QWORD *)(v1 + 24), "Failed to start emergency call, error: %{public}@", "Started emergency call");
}

ValueMetadata *type metadata accessor for CallEmergencyServicesButtonView()
{
  return &type metadata for CallEmergencyServicesButtonView;
}

uint64_t sub_1001EEF50(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029FBE8, 1);
}

uint64_t sub_1001EEF60@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t KeyPath;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  unint64_t v56;
  __n128 v57;
  uint64_t v58;
  uint64_t v59;
  __n128 v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  double v66;
  _QWORD *v67;
  double v68;
  uint64_t v69;
  __n128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t result;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD v117[3];
  uint64_t v118;
  _OWORD v119[7];

  v99 = a4;
  v94 = a2;
  v95 = a1;
  v116 = a5;
  v112 = type metadata accessor for KeyboardShortcut(0);
  v111 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112, v6);
  v110 = (char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for ButtonBorderShape(0);
  v107 = *(_QWORD *)(v109 - 8);
  __chkstk_darwin(v109, v8);
  v10 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for BorderedButtonStyle(0);
  v98 = *(_QWORD *)(v100 - 8);
  __chkstk_darwin(v100, v11);
  v13 = (char *)&v94 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = sub_100003DB8(&qword_100328EB0);
  v96 = *(_QWORD *)(v97 - 8);
  __chkstk_darwin(v97, v14);
  v16 = (char *)&v94 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_100003DB8(&qword_100328EB8);
  v101 = *(_QWORD *)(v103 - 8);
  __chkstk_darwin(v103, v17);
  v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100003DB8(&qword_100328EC0);
  __chkstk_darwin(v102, v20);
  v22 = (char *)&v94 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100003DB8(&qword_100328EC8);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106, v23);
  v25 = (char *)&v94 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v104 = sub_100003DB8(&qword_100328ED0);
  __chkstk_darwin(v104, v26);
  v108 = (char *)&v94 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_100003DB8(&qword_100328ED8);
  __chkstk_darwin(v114, v28);
  v115 = (uint64_t)&v94 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100003DB8(&qword_100328EE0);
  __chkstk_darwin(v30, v31);
  v113 = (char *)&v94 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a3)
  {
    v33 = a3[9];
    v34 = a3[10];
    sub_100007BBC(a3 + 6, v33);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v34 + 32))(v117, v33, v34);
    v35 = (_QWORD *)swift_allocObject(&unk_1002F9138, 48, 7);
    v36 = v95;
    v37 = v94;
    v35[2] = v95;
    v35[3] = v37;
    v38 = v99;
    v35[4] = a3;
    v35[5] = v38;
    v39 = sub_1001EF8D4();
    swift_retain(v36);
    swift_retain(a3);
    v40 = Button.init(action:label:)(sub_1001EF8C8, v35, sub_10011A0E4, 0, &_s8SOSBuddy36CallEmergencyServicesButtonLabelViewVN_1, v39);
    BorderedButtonStyle.init()(v40);
    v41 = sub_1000084FC(&qword_100328EF0, &qword_100328EB0, (uint64_t)&protocol conformance descriptor for Button<A>);
    v42 = sub_1000052EC((unint64_t *)&qword_100319760, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedButtonStyle);
    v43 = v97;
    v44 = v100;
    View.buttonStyle<A>(_:)(v13, v97, v100, v41, v42);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v13, v44);
    v45 = (*(uint64_t (**)(char *, uint64_t))(v96 + 8))(v16, v43);
    static ButtonBorderShape.capsule.getter(v45);
    KeyPath = swift_getKeyPath(&unk_10025E350);
    v47 = v102;
    v48 = (uint64_t *)&v22[*(int *)(v102 + 36)];
    v49 = sub_100003DB8(&qword_100318968);
    v50 = v107;
    v51 = v109;
    (*(void (**)(char *, char *, uint64_t))(v107 + 16))((char *)v48 + *(int *)(v49 + 28), v10, v109);
    *v48 = KeyPath;
    v52 = v101;
    v53 = v103;
    (*(void (**)(char *, char *, uint64_t))(v101 + 16))(v22, v19, v103);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v10, v51);
    v54 = (*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v19, v53);
    v55 = v110;
    static KeyboardShortcut.defaultAction.getter(v54);
    v56 = sub_1001F0730();
    View.keyboardShortcut(_:)(v55, v47, v56);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v55, v112);
    sub_100007FF0((uint64_t)v22, &qword_100328EC0);
    v58 = static Color.green.getter(v57);
    v59 = swift_getKeyPath(&unk_10025E380);
    *(_QWORD *)&v119[0] = v58;
    v60 = swift_retain(v58);
    v61 = AnyShapeStyle.init<A>(_:)(v119, &type metadata for Color, &protocol witness table for Color, v60);
    v62 = v105;
    v63 = (uint64_t)v108;
    v64 = v106;
    (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v108, v25, v106);
    swift_release(v58);
    v65 = (uint64_t *)(v63 + *(int *)(v104 + 36));
    *v65 = v59;
    v65[1] = v61;
    (*(void (**)(char *, uint64_t))(v62 + 8))(v25, v64);
    v66 = *(double *)(*sub_100007BBC(v117, v118) + 216);
    v67 = sub_100007BBC(v117, v118);
    v68 = *(double *)(*v67 + 216);
    v69 = static Alignment.center.getter(v67);
    v72 = v71;
    if (v66 > v68)
    {
      v73 = static os_log_type_t.fault.getter(v70);
      v74 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)(v73, &_mh_execute_header, v74, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    }
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v119, *(_QWORD *)&v66, 0, 0, 1, *(_QWORD *)&v68, 0, 0, 1, 0, 1, 0, 1, v69, v72);
    v75 = v115;
    sub_10000B234(v63, v115, &qword_100328ED0);
    v76 = v114;
    v77 = (_OWORD *)(v75 + *(int *)(v114 + 36));
    v78 = v119[5];
    v77[4] = v119[4];
    v77[5] = v78;
    v77[6] = v119[6];
    v79 = v119[1];
    *v77 = v119[0];
    v77[1] = v79;
    v80 = v119[3];
    v77[2] = v119[2];
    v77[3] = v80;
    sub_100007FF0(v63, &qword_100328ED0);
    v81 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000017, 0x800000010026B980);
    v82 = Text.init(_:tableName:bundle:comment:)(v81);
    v84 = v83;
    v86 = v85;
    v88 = v87 & 1;
    v89 = sub_1001F0840();
    v90 = (uint64_t)v113;
    View.accessibility(label:)(v82, v84, v88, v86, v76, v89);
    sub_10002B438(v82, v84, v88);
    swift_bridgeObjectRelease(v86);
    sub_100007FF0(v75, &qword_100328ED8);
    sub_10000B458(v90, v116, &qword_100328EE0);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v117);
  }
  else
  {
    v92 = type metadata accessor for UIMetrics();
    v93 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v99, v92, v93);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001EF7B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;

  if (a1)
  {
    v3 = *(_QWORD *)(a1 + 168);
    v11 = 0;
    swift_retain(v3);
    PassthroughSubject.send(_:)(&v11);
    swift_release(v3);
    v4 = *(_QWORD *)(a1 + 96);
    swift_retain(v4);
    v5 = sub_100003DB8(&qword_10032B0E0);
    v6 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v5, v6);
    return swift_release(v4);
  }
  else
  {
    v9 = type metadata accessor for AppEvents();
    v10 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    result = EnvironmentObject.error()(0, a2, v9, v10);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001EF890@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001EEF60(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1001EF89C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1001EF8C8()
{
  uint64_t v0;

  return sub_1001EF7B4(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

unint64_t sub_1001EF8D4()
{
  unint64_t result;

  result = qword_100328EE8;
  if (!qword_100328EE8)
  {
    result = swift_getWitnessTable(&unk_10025E3D8, &_s8SOSBuddy36CallEmergencyServicesButtonLabelViewVN_1);
    atomic_store(result, (unint64_t *)&qword_100328EE8);
  }
  return result;
}

uint64_t sub_1001EF918@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  unint64_t v29;
  uint64_t result;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[5];
  _OWORD v34[7];

  v6 = sub_100003DB8(&qword_100320650);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_100320658);
  __chkstk_darwin(v10, v11);
  v13 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003DB8(&qword_100320660);
  __chkstk_darwin(v14, v15);
  v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v18 = a1[9];
    v19 = a1[10];
    sub_100007BBC(a1 + 6, v18);
    v20 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v19 + 32))(v33, v18, v19);
    *(_QWORD *)v9 = static VerticalAlignment.center.getter(v20);
    *((_QWORD *)v9 + 1) = 0;
    v9[16] = 1;
    v21 = sub_100003DB8(&qword_100320668);
    v22 = sub_1001EFB98((uint64_t)a1, a2, &v9[*(int *)(v21 + 44)]);
    v23 = static Alignment.center.getter(v22);
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(v34, 0, 1, 0, 1, 0x7FF0000000000000, 0, 0x4042000000000000, 0, 0, 1, 0, 1, v23, v24);
    sub_10000B234((uint64_t)v9, (uint64_t)v13, &qword_100320650);
    v25 = &v13[*(int *)(v10 + 36)];
    v26 = v34[5];
    *((_OWORD *)v25 + 4) = v34[4];
    *((_OWORD *)v25 + 5) = v26;
    *((_OWORD *)v25 + 6) = v34[6];
    v27 = v34[1];
    *(_OWORD *)v25 = v34[0];
    *((_OWORD *)v25 + 1) = v27;
    v28 = v34[3];
    *((_OWORD *)v25 + 2) = v34[2];
    *((_OWORD *)v25 + 3) = v28;
    sub_100007FF0((uint64_t)v9, &qword_100320650);
    v29 = sub_10011B1CC();
    View.accessibility(hidden:)(1, v10, v29);
    sub_100007FF0((uint64_t)v13, &qword_100320658);
    sub_10000B458((uint64_t)v17, a3, &qword_100320660);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v33);
  }
  else
  {
    v31 = type metadata accessor for UIMetrics();
    v32 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v31, v32);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001EFB98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  char v50;
  __n128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t KeyPath;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  __n128 v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  unint64_t v72;
  __n128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  __n128 v91;
  uint64_t v92;
  uint64_t v93;
  void *v94;
  void *v95;
  char v96;
  void *v97;
  void *v98;
  id v99;
  UIContentSizeCategory v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  Swift::String *v119;
  Swift::String v120;
  id v121;
  double v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  int *v131;
  char *v132;
  uint64_t result;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  char *v155;
  uint64_t v156;
  uint64_t v157;
  UIContentSizeCategory v158;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  Swift::String v162;
  Swift::String v163;
  Swift::String v164;
  char v165;
  Swift::String v166;

  v152 = a3;
  v140 = sub_100003DB8(&qword_100316A20);
  __chkstk_darwin(v140, v5);
  v159 = (char *)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = sub_100003DB8(&qword_100320680);
  v144 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145, v7);
  v142 = (char *)&v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100003DB8(&qword_100320688);
  __chkstk_darwin(v141, v9);
  v146 = (char *)&v136 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100003DB8(&qword_100320690);
  __chkstk_darwin(v143, v11);
  v149 = (uint64_t)&v136 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_100003DB8(&qword_100320698);
  __chkstk_darwin(v148, v13);
  v151 = (uint64_t)&v136 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v16);
  v147 = (uint64_t)&v136 - v17;
  __chkstk_darwin(v18, v19);
  v150 = (uint64_t)&v136 - v20;
  v21 = type metadata accessor for Font.Leading(0);
  v156 = *(_QWORD *)(v21 - 8);
  v157 = v21;
  __chkstk_darwin(v21, v22);
  v155 = (char *)&v136 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = sub_100003DB8(&qword_10031A218);
  __chkstk_darwin(v137, v24);
  v26 = (uint64_t *)((char *)&v136 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = type metadata accessor for Image.Scale(0);
  v28 = *(_QWORD *)(v27 - 8);
  __chkstk_darwin(v27, v29);
  v31 = (char *)&v136 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100003DB8(&qword_10031A208);
  __chkstk_darwin(v32, v33);
  v35 = (uint64_t *)((char *)&v136 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0));
  v138 = sub_100003DB8(&qword_10031A1F0);
  __chkstk_darwin(v138, v36);
  v38 = (char *)&v136 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_100003DB8(&qword_1003206A0);
  v153 = *(_QWORD *)(v39 - 8);
  v154 = v39;
  __chkstk_darwin(v39, v40);
  v42 = (char *)&v136 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = sub_100003DB8(&qword_1003206A8);
  __chkstk_darwin(v43, v44);
  v139 = (uint64_t)&v136 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46, v47);
  v161 = (uint64_t)&v136 - v48;
  if (!a1)
    goto LABEL_11;
  v160 = a1;
  v49 = *(id *)(a1 + 112);
  v158 = UIContentSizeCategoryAccessibilityExtraLarge;
  v50 = static UIContentSizeCategory.>= infix(_:_:)(v49, UIContentSizeCategoryAccessibilityExtraLarge);

  if ((v50 & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v153 + 56))(v161, 1, 1, v154);
    v52 = enum case for Font.Leading.tight(_:);
    v54 = v156;
    v53 = v157;
    v55 = v155;
  }
  else
  {
    v56 = Image.init(systemName:)(0x69662E656E6F6870, 0xEA00000000006C6CLL, v51);
    (*(void (**)(char *, _QWORD, uint64_t))(v28 + 104))(v31, enum case for Image.Scale.medium(_:), v27);
    KeyPath = swift_getKeyPath(&unk_10025E428);
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))((char *)v26 + *(int *)(v137 + 28), v31, v27);
    *v26 = KeyPath;
    sub_10000B234((uint64_t)v26, (uint64_t)v35 + *(int *)(v32 + 36), &qword_10031A218);
    *v35 = v56;
    swift_retain(v56);
    sub_100007FF0((uint64_t)v26, &qword_10031A218);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v27);
    v58 = swift_release(v56);
    v59 = static Font.title3.getter(v58);
    static Font.Weight.semibold.getter(v59);
    v60 = Font.weight(_:)(v59);
    swift_release(v59);
    v52 = enum case for Font.Leading.tight(_:);
    v55 = v155;
    v54 = v156;
    v53 = v157;
    (*(void (**)(char *, _QWORD, uint64_t))(v156 + 104))(v155, enum case for Font.Leading.tight(_:), v157);
    v61 = Font.leading(_:)(v55, v60);
    swift_release(v60);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v53);
    v62 = swift_getKeyPath(&unk_10025E458);
    sub_10000B234((uint64_t)v35, (uint64_t)v38, &qword_10031A208);
    v63 = (uint64_t *)&v38[*(int *)(v138 + 36)];
    *v63 = v62;
    v63[1] = v61;
    sub_100007FF0((uint64_t)v35, &qword_10031A208);
    v65 = static Color.green.getter(v64);
    sub_10000B234((uint64_t)v38, (uint64_t)v42, &qword_10031A1F0);
    v66 = v154;
    *(_QWORD *)&v42[*(int *)(v154 + 36)] = v65;
    sub_100007FF0((uint64_t)v38, &qword_10031A1F0);
    v67 = v161;
    sub_10000B458((uint64_t)v42, v161, &qword_1003206A0);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v153 + 56))(v67, 0, 1, v66);
  }
  v68 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v166._countAndFlagsBits = 0xD00000000000002CLL;
  v166._object = (void *)0x800000010026E370;
  v69._object = (void *)0x800000010026B980;
  v69._countAndFlagsBits = 0xD000000000000017;
  v70._countAndFlagsBits = 0;
  v70._object = (void *)0xE000000000000000;
  v71 = NSLocalizedString(_:tableName:bundle:value:comment:)(v69, (Swift::String_optional)0, (NSBundle)v68, v70, v166);

  v162 = v71;
  v72 = sub_10002B3F4();
  v74 = Text.init<A>(_:)(&v162, &type metadata for String, v72, v73);
  v76 = v75;
  v78 = v77;
  v80 = v79 & 1;
  v81 = static Font.title3.getter(v74);
  static Font.Weight.semibold.getter(v81);
  v82 = Font.weight(_:)(v81);
  swift_release(v81);
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 104))(v55, v52, v53);
  v83 = Font.leading(_:)(v55, v82);
  swift_release(v82);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v53);
  v84 = Text.font(_:)(v83, v74, v76, v80, v78);
  v86 = v85;
  v88 = v87;
  v90 = v89;
  swift_release(v83);
  LOBYTE(v83) = v88 & 1;
  sub_10002B438(v74, v76, v80);
  v91 = swift_bridgeObjectRelease(v78);
  v92 = static Color.green.getter(v91);
  v93 = Text.foregroundColor(_:)(v92, v84, v86, v88 & 1, v90);
  v95 = v94;
  LOBYTE(v80) = v96;
  v98 = v97;
  swift_release(v92);
  sub_10002B438(v84, v86, v83);
  swift_bridgeObjectRelease(v90);
  a2 = v160;
  v99 = *(id *)(v160 + 112);
  v100 = v158;
  LOBYTE(v83) = static UIContentSizeCategory.>= infix(_:_:)(v99, v158);

  v101 = swift_getKeyPath(&unk_10025E488);
  v162._countAndFlagsBits = v93;
  v162._object = v95;
  LOBYTE(v163._countAndFlagsBits) = v80 & 1;
  v163._object = v98;
  v164._countAndFlagsBits = v101;
  v164._object = (void *)((v83 & 1) == 0);
  v165 = v83 & 1;
  v102 = enum case for DynamicTypeSize.accessibility2(_:);
  v103 = type metadata accessor for DynamicTypeSize(0);
  v104 = (uint64_t)v159;
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v103 - 8) + 104))(v159, v102, v103);
  v105 = sub_1000052EC(&qword_100316A30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v104, v104, v103, v105) & 1) == 0)
  {
    __break(1u);
LABEL_11:
    v134 = type metadata accessor for UIMetrics();
    v135 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v134, v135);
    __break(1u);
    return result;
  }
  v106 = sub_100003DB8(&qword_100320050);
  v107 = sub_10010D0B0();
  v108 = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  v109 = v142;
  View.dynamicTypeSize<A>(_:)(v104, v106, v140, v107, v108);
  sub_100007FF0(v104, &qword_100316A20);
  sub_10002B438(v162._countAndFlagsBits, (uint64_t)v162._object, v163._countAndFlagsBits);
  swift_bridgeObjectRelease(v163._object);
  swift_release(v164._countAndFlagsBits);
  v110 = swift_getKeyPath(&unk_10025E4B8);
  v111 = v144;
  v112 = (uint64_t)v146;
  v113 = v145;
  (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v146, v109, v145);
  v114 = v112 + *(int *)(v141 + 36);
  *(_QWORD *)v114 = v110;
  *(_BYTE *)(v114 + 8) = 1;
  v115 = (*(uint64_t (**)(char *, uint64_t))(v111 + 8))(v109, v113);
  v116 = static Alignment.center.getter(v115);
  _FrameLayout.init(width:height:alignment:)(&v162, 0, 1, 0, 1, v116, v117);
  v118 = v149;
  sub_10000B234(v112, v149, &qword_100320688);
  v119 = (Swift::String *)(v118 + *(int *)(v143 + 36));
  v120 = v163;
  *v119 = v162;
  v119[1] = v120;
  v119[2] = v164;
  sub_100007FF0(v112, &qword_100320688);
  v121 = *(id *)(a2 + 112);
  LOBYTE(v112) = static UIContentSizeCategory.>= infix(_:_:)(v121, v100);

  if ((v112 & 1) != 0)
    v122 = 1.0;
  else
    v122 = 0.5;
  v123 = swift_getKeyPath(&unk_10025E4E8);
  v124 = v147;
  sub_10000B234(v118, v147, &qword_100320690);
  v125 = v124 + *(int *)(v148 + 36);
  *(_QWORD *)v125 = v123;
  *(double *)(v125 + 8) = v122;
  sub_100007FF0(v118, &qword_100320690);
  v126 = v150;
  sub_10000B458(v124, v150, &qword_100320698);
  v127 = v161;
  v128 = v139;
  sub_10000B234(v161, v139, &qword_1003206A8);
  v129 = v151;
  sub_10000B234(v126, v151, &qword_100320698);
  v130 = v152;
  *v152 = 0;
  *((_BYTE *)v130 + 8) = 1;
  v131 = (int *)sub_100003DB8(&qword_1003206B0);
  sub_10000B234(v128, (uint64_t)v130 + v131[12], &qword_1003206A8);
  sub_10000B234(v129, (uint64_t)v130 + v131[16], &qword_100320698);
  v132 = (char *)v130 + v131[20];
  *(_QWORD *)v132 = 0;
  v132[8] = 1;
  sub_100007FF0(v126, &qword_100320698);
  sub_100007FF0(v127, &qword_1003206A8);
  sub_100007FF0(v129, &qword_100320698);
  return sub_100007FF0(v128, &qword_1003206A8);
}

uint64_t sub_1001F0720@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001EF918(*(_QWORD **)v1, *(_QWORD *)(v1 + 8), a1);
}

unint64_t sub_1001F0730()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100328EF8;
  if (!qword_100328EF8)
  {
    v1 = sub_100007FAC(&qword_100328EC0);
    v2[0] = sub_100007FAC(&qword_100328EB0);
    v2[1] = type metadata accessor for BorderedButtonStyle(255);
    v2[2] = sub_1000084FC(&qword_100328EF0, &qword_100328EB0, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_1000052EC((unint64_t *)&qword_100319760, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_1000084FC(&qword_100318978, &qword_100318968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100328EF8);
  }
  return result;
}

unint64_t sub_1001F0840()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100328F00;
  if (!qword_100328F00)
  {
    v1 = sub_100007FAC(&qword_100328ED8);
    sub_1001F08AC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100328F00);
  }
  return result;
}

unint64_t sub_1001F08AC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_100328F08;
  if (!qword_100328F08)
  {
    v1 = sub_100007FAC(&qword_100328ED0);
    v2[0] = sub_100007FAC(&qword_100328EC0);
    v2[1] = sub_1001F0730();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.keyboardShortcut(_:)>>, 1);
    sub_1000084FC(&qword_100318880, &qword_100318888, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100328F08);
  }
  return result;
}

ValueMetadata *_s8SOSBuddy36CallEmergencyServicesButtonLabelViewVMa_1()
{
  return &_s8SOSBuddy36CallEmergencyServicesButtonLabelViewVN_1;
}

uint64_t sub_1001F0968()
{
  return sub_10000A9B0(&qword_100328F10, &qword_100328EE0, (void (*)(void))sub_1001F0840);
}

uint64_t sub_1001F0994(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029FC10, 1);
}

uint64_t sub_1001F09CC(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13;
  uint64_t v15;
  uint64_t v16;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_17;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a3);
  while (v7)
  {
    v8 = 4;
    while (1)
    {
      v9 = v8 - 4;
      if ((a3 & 0xC000000000000001) == 0)
        break;
      v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8 - 4, a3);
      v11 = __OFADD__(v9, 1);
      v12 = v8 - 3;
      if (v11)
        goto LABEL_16;
LABEL_9:
      v16 = v10;
      v13 = a1(&v16);
      if (v4)
      {
        swift_bridgeObjectRelease(a3);
        swift_release(v10);
        return v10;
      }
      if ((v13 & 1) != 0)
      {
        swift_bridgeObjectRelease(a3);
        return v10;
      }
      swift_release(v10);
      ++v8;
      if (v12 == v7)
        goto LABEL_12;
    }
    v10 = *(_QWORD *)(a3 + 8 * v8);
    swift_retain(v10);
    v11 = __OFADD__(v9, 1);
    v12 = v8 - 3;
    if (!v11)
      goto LABEL_9;
LABEL_16:
    __break(1u);
LABEL_17:
    if (a3 < 0)
      v15 = a3;
    else
      v15 = a3 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a3);
    v7 = _CocoaArrayWrapper.endIndex.getter(v15);
  }
LABEL_12:
  swift_bridgeObjectRelease(a3);
  return 0;
}

uint64_t sub_1001F0B00@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int16 v27;

  v2 = v1;
  v26 = a1;
  v3 = sub_100003DB8(&qword_100328F48);
  __chkstk_darwin(v3, v4);
  v6 = (_OWORD *)((char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = sub_100003DB8(&qword_100328F50);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315998 != -1)
    swift_once(&qword_100315998, sub_1001F469C);
  *v6 = xmmword_100328F28;
  v12 = sub_100003DB8(&qword_100328F58);
  sub_1001F0D54(v2, (uint64_t)v6 + *(int *)(v12 + 44));
  v13 = *(_QWORD *)(v2 + 16);
  if (v13)
  {
    v27 = *(_WORD *)(v13 + 56);
    v14 = (_OWORD *)swift_allocObject(&unk_1002F92E8, 128, 7);
    v15 = *(_OWORD *)(v2 + 80);
    v14[5] = *(_OWORD *)(v2 + 64);
    v14[6] = v15;
    v14[7] = *(_OWORD *)(v2 + 96);
    v16 = *(_OWORD *)(v2 + 16);
    v14[1] = *(_OWORD *)v2;
    v14[2] = v16;
    v17 = *(_OWORD *)(v2 + 48);
    v14[3] = *(_OWORD *)(v2 + 32);
    v14[4] = v17;
    sub_1001F4C00((uint64_t *)v2);
    v18 = sub_100003DB8(&qword_10031CBD8);
    v19 = sub_1000084FC(&qword_100328F60, &qword_100328F48, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    v20 = sub_10003418C((unint64_t *)&qword_10031CBE0, &qword_10031CBD8, (void (*)(void))sub_100099F80, (uint64_t)&protocol conformance descriptor for <A> A?);
    View.onChange<A>(of:initial:_:)(&v27, 0, sub_1001F4BF8, v14, v3, v18, v19, v20, v21);
    swift_release(v14);
    sub_100007FF0((uint64_t)v6, &qword_100328F48);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(v26, v11, v7);
  }
  else
  {
    v23 = *(_QWORD *)(v2 + 24);
    v24 = type metadata accessor for TryOutModel(0);
    v25 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v23, v24, v25);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001F0D54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)();
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t (**v35)();
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  _OWORD *v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t result;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v74;
  char v75;
  __int128 v76;
  char v77;
  uint64_t v78;
  uint64_t (*v79)();
  uint64_t v80;
  uint64_t v81;
  uint64_t (*v82)();
  uint64_t v83;
  __int128 v84;

  v73 = a2;
  v71 = sub_100003DB8(&qword_100328F70);
  v3 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71, v4);
  v70 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v7);
  v69 = (char *)&v68 - v8;
  v9 = sub_100003DB8(&qword_100328F78);
  __chkstk_darwin(v9, v10);
  v72 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v68 - v14;
  v16 = sub_100003DB8(&qword_100328F80);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003DB8(&qword_100328F88);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24, v25);
  v27 = (char *)&v68 - v26;
  *(_QWORD *)v19 = static HorizontalAlignment.center.getter(v28);
  *((_QWORD *)v19 + 1) = 0;
  v29 = 1;
  v19[16] = 1;
  v30 = sub_100003DB8(&qword_100328F90);
  sub_1001F12E8(a1, &v19[*(int *)(v30 + 44)]);
  v31 = (uint64_t (*)())swift_allocObject(&unk_1002F9310, 128, 7);
  v32 = *(_OWORD *)(a1 + 80);
  *((_OWORD *)v31 + 5) = *(_OWORD *)(a1 + 64);
  *((_OWORD *)v31 + 6) = v32;
  *((_OWORD *)v31 + 7) = *(_OWORD *)(a1 + 96);
  v33 = *(_OWORD *)(a1 + 16);
  *((_OWORD *)v31 + 1) = *(_OWORD *)a1;
  *((_OWORD *)v31 + 2) = v33;
  v34 = *(_OWORD *)(a1 + 48);
  *((_OWORD *)v31 + 3) = *(_OWORD *)(a1 + 32);
  *((_OWORD *)v31 + 4) = v34;
  sub_10000B234((uint64_t)v19, (uint64_t)v23, &qword_100328F80);
  v35 = (uint64_t (**)())&v23[*(int *)(v20 + 36)];
  *v35 = sub_1001F4C78;
  v35[1] = v31;
  v35[2] = 0;
  v35[3] = 0;
  sub_1001F4C00((uint64_t *)a1);
  v36 = (uint64_t)v19;
  v37 = v71;
  sub_100007FF0(v36, &qword_100328F80);
  sub_10000B458((uint64_t)v23, (uint64_t)v27, &qword_100328F88);
  v84 = *(_OWORD *)(a1 + 64);
  v76 = *(_OWORD *)(a1 + 64);
  v38 = sub_100003DB8(&qword_100316780);
  State.wrappedValue.getter(&v74, v38);
  if (v74 != 1)
  {
LABEL_13:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v15, v29, 1, v37);
    sub_10000B234((uint64_t)v27, (uint64_t)v23, &qword_100328F88);
    v61 = v72;
    sub_10000B234((uint64_t)v15, v72, &qword_100328F78);
    v62 = v73;
    sub_10000B234((uint64_t)v23, v73, &qword_100328F88);
    v63 = sub_100003DB8(&qword_100328F98);
    sub_10000B234(v61, v62 + *(int *)(v63 + 48), &qword_100328F78);
    sub_100007FF0((uint64_t)v15, &qword_100328F78);
    sub_100007FF0((uint64_t)v27, &qword_100328F88);
    sub_100007FF0(v61, &qword_100328F78);
    return sub_100007FF0((uint64_t)v23, &qword_100328F88);
  }
  v74 = v84;
  State.projectedValue.getter(&v76, v38);
  v39 = v76;
  v40 = v77;
  if (qword_100315998 != -1)
    swift_once(&qword_100315998, sub_1001F469C);
  v76 = v39;
  v77 = v40;
  v78 = *((_QWORD *)&xmmword_100328F28 + 1);
  v79 = sub_1001F30FC;
  v80 = 0;
  v81 = xmmword_100328F28;
  v82 = sub_1001F3120;
  v83 = 0;
  v41 = *(_QWORD *)(a1 + 16);
  if (v41)
  {
    v42 = *(_QWORD *)(v41 + 96);
    v68 = v27;
    if (v42)
    {
      v43 = *(_QWORD *)(v42 + 16);
      if (v43)
      {
        v44 = v43
            + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_messagesInProgress;
        swift_beginAccess(v43+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_messagesInProgress, &v74, 0, 0);
        if (*(_QWORD *)(*(_QWORD *)v44 + 16))
          v45 = 1;
        else
          v45 = *(_QWORD *)(v43
                          + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscriptItemInFlight
                          + 8) != 0;
      }
      else
      {
        v45 = 0;
      }
    }
    else
    {
      v45 = 2;
    }
    v75 = v45;
    v46 = (_OWORD *)swift_allocObject(&unk_1002F9338, 128, 7);
    v47 = *(_OWORD *)(a1 + 80);
    v46[5] = *(_OWORD *)(a1 + 64);
    v46[6] = v47;
    v46[7] = *(_OWORD *)(a1 + 96);
    v48 = *(_OWORD *)(a1 + 16);
    v46[1] = *(_OWORD *)a1;
    v46[2] = v48;
    v49 = *(_OWORD *)(a1 + 48);
    v46[3] = *(_OWORD *)(a1 + 32);
    v46[4] = v49;
    sub_1001F4C00((uint64_t *)a1);
    v50 = sub_100003DB8(&qword_100328FA0);
    v51 = sub_100003DB8((uint64_t *)&unk_1003263F0);
    v52 = sub_1001F4CA8(&qword_100328FA8, &qword_100328FA0, (void (*)(void))sub_1001F4C8C);
    v53 = sub_1001F4D9C();
    v54 = v70;
    View.onChange<A>(of:initial:_:)(&v75, 0, sub_1001F4C84, v46, v50, v51, v52, v53, v55);
    swift_release(v46);
    v57 = *((_QWORD *)&v76 + 1);
    v56 = v76;
    v58 = v80;
    swift_release(v83);
    swift_release(v58);
    swift_release(v57);
    swift_release(v56);
    v59 = *(void (**)(char *, char *, uint64_t))(v3 + 32);
    v60 = v69;
    v59(v69, v54, v37);
    v59(v15, v60, v37);
    v29 = 0;
    v27 = v68;
    goto LABEL_13;
  }
  v65 = *(_QWORD *)(a1 + 24);
  v66 = type metadata accessor for TryOutModel(0);
  v67 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v65, v66, v67);
  __break(1u);
  return result;
}

uint64_t sub_1001F12E8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  double v28;
  char v29;
  _OWORD *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, char *, uint64_t);
  char *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t *(*v52)@<X0>(uint64_t@<X0>, uint64_t (**)@<X0>(uint64_t@<X0>, uint64_t@<X8>)@<X8>);
  _OWORD *v53;
  char v54;
  __int128 v55;
  __int128 v56;
  char v57;

  v48 = a2;
  v3 = sub_100003DB8(&qword_100328FD8);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = sub_100003DB8(&qword_100328FE0);
  __chkstk_darwin(v47, v7);
  v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v46 - v12;
  v14 = sub_100003DB8(&qword_100328FE8);
  v46 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v46 - v20;
  v23 = static HorizontalAlignment.center.getter(v22);
  v24 = (_OWORD *)swift_allocObject(&unk_1002F9360, 128, 7);
  v25 = *(_OWORD *)(a1 + 80);
  v24[5] = *(_OWORD *)(a1 + 64);
  v24[6] = v25;
  v24[7] = *(_OWORD *)(a1 + 96);
  v26 = *(_OWORD *)(a1 + 16);
  v24[1] = *(_OWORD *)a1;
  v24[2] = v26;
  v27 = *(_OWORD *)(a1 + 48);
  v24[3] = *(_OWORD *)(a1 + 32);
  v24[4] = v27;
  sub_1001F4C00((uint64_t *)a1);
  v29 = static Edge.Set.all.getter(v28);
  v49 = v23;
  v50 = 0;
  v51 = 1;
  v52 = sub_1001F4E50;
  v53 = v24;
  v54 = v29;
  v55 = xmmword_10025E520;
  v56 = xmmword_100250400;
  v57 = 0;
  v30 = (_OWORD *)swift_allocObject(&unk_1002F9388, 128, 7);
  v31 = *(_OWORD *)(a1 + 80);
  v30[5] = *(_OWORD *)(a1 + 64);
  v30[6] = v31;
  v30[7] = *(_OWORD *)(a1 + 96);
  v32 = *(_OWORD *)(a1 + 16);
  v30[1] = *(_OWORD *)a1;
  v30[2] = v32;
  v33 = *(_OWORD *)(a1 + 48);
  v30[3] = *(_OWORD *)(a1 + 32);
  v30[4] = v33;
  sub_1001F4C00((uint64_t *)a1);
  v34 = sub_100003DB8(&qword_100328FF0);
  v35 = sub_1001F59B4(&qword_100328FF8, &qword_100328FF0, &qword_100329000, &qword_100329008);
  View.onTapGesture(count:perform:)(1, sub_1001F4E5C, v30, v34, v35);
  swift_release(v30);
  v36 = swift_release(v53);
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v36);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 1;
  v37 = sub_100003DB8(&qword_100329010);
  sub_1001F27C8(a1, &v6[*(int *)(v37 + 44)]);
  LOBYTE(v30) = static Edge.Set.all.getter(v38);
  sub_10000B234((uint64_t)v6, (uint64_t)v9, &qword_100328FD8);
  v39 = &v9[*(int *)(v47 + 36)];
  *v39 = (char)v30;
  *(_OWORD *)(v39 + 8) = xmmword_100250410;
  *(_OWORD *)(v39 + 24) = xmmword_100250410;
  v39[40] = 0;
  sub_100007FF0((uint64_t)v6, &qword_100328FD8);
  sub_10000B458((uint64_t)v9, (uint64_t)v13, &qword_100328FE0);
  v40 = v46;
  v41 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v41(v17, v21, v14);
  sub_10000B234((uint64_t)v13, (uint64_t)v9, &qword_100328FE0);
  v42 = v48;
  v41(v48, v17, v14);
  v43 = sub_100003DB8(&qword_100329018);
  sub_10000B234((uint64_t)v9, (uint64_t)&v42[*(int *)(v43 + 48)], &qword_100328FE0);
  sub_100007FF0((uint64_t)v13, &qword_100328FE0);
  v44 = *(void (**)(char *, uint64_t))(v40 + 8);
  v44(v21, v14);
  sub_100007FF0((uint64_t)v9, &qword_100328FE0);
  return ((uint64_t (*)(char *, uint64_t))v44)(v17, v14);
}

uint64_t *sub_1001F166C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (**a3)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v21;

  v6 = type metadata accessor for GeometryProxy(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  v10 = __chkstk_darwin(v6, v9);
  v11 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v11, a1, v6, v10);
  v12 = *(unsigned __int8 *)(v7 + 80);
  v13 = (v12 + 16) & ~v12;
  v14 = (v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = swift_allocObject(&unk_1002F9428, v14 + 112, v12 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v7 + 32))(v15 + v13, v11, v6);
  v16 = (_OWORD *)(v15 + v14);
  v17 = *(_OWORD *)(a2 + 80);
  v16[4] = *(_OWORD *)(a2 + 64);
  v16[5] = v17;
  v16[6] = *(_OWORD *)(a2 + 96);
  v18 = *(_OWORD *)(a2 + 16);
  *v16 = *(_OWORD *)a2;
  v16[1] = v18;
  v19 = *(_OWORD *)(a2 + 48);
  v16[2] = *(_OWORD *)(a2 + 32);
  v16[3] = v19;
  *a3 = sub_1001F5160;
  a3[1] = (uint64_t (*)@<X0>(uint64_t@<X0>, uint64_t@<X8>))v15;
  return sub_1001F4C00((uint64_t *)a2);
}

uint64_t sub_1001F1774@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>)
{
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t);
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (**v49)(uint64_t);
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  _OWORD *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  _OWORD *v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t OpaqueTypeConformance2;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t result;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  void (*v87)(char *, uint64_t, uint64_t);
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109[16];
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  void *v114;
  uint64_t v115;

  v106 = a4;
  v93 = type metadata accessor for LocalCoordinateSpace(0, a5);
  v9 = __chkstk_darwin(v93, v8);
  v92 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DragGesture(0, v9);
  v101 = *(_QWORD *)(v11 - 8);
  v102 = v11;
  __chkstk_darwin(v11, v12);
  v100 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003DB8(&qword_1003290C0);
  v104 = *(_QWORD *)(v14 - 8);
  v105 = v14;
  __chkstk_darwin(v14, v15);
  v103 = (char *)&v83 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for ScrollViewProxy(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v107 = v20;
  v21 = (char *)&v83 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100003DB8(&qword_1003290C8);
  v89 = *(_QWORD *)(v90 - 8);
  __chkstk_darwin(v90, v22);
  v24 = (char *)&v83 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_100003DB8(&qword_1003290D0);
  __chkstk_darwin(v108, v25);
  v91 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100003DB8(&qword_1003290D8);
  v98 = *(_QWORD *)(v27 - 8);
  v99 = v27;
  __chkstk_darwin(v27, v28);
  v97 = (char *)&v83 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100003DB8(&qword_1003290E0);
  v95 = *(_QWORD *)(v96 - 8);
  __chkstk_darwin(v96, v30);
  v94 = (char *)&v83 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = static Axis.Set.vertical.getter(v32);
  v110 = a2;
  v111 = a3;
  v34 = sub_100003DB8(&qword_1003290E8);
  v35 = sub_1000084FC(&qword_1003290F0, &qword_1003290E8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  v88 = v24;
  ScrollView.init(_:showsIndicators:content:)(v33, 0, sub_1001F51C0, v109, v34, v35);
  v36 = *(_QWORD *)(a3 + 16);
  if (v36)
  {
    v37 = *(_QWORD *)(v36 + 32);
    v87 = *(void (**)(char *, uint64_t, uint64_t))(v18 + 16);
    v87(v21, a1, v17);
    v38 = *(unsigned __int8 *)(v18 + 80);
    v85 = a1;
    v39 = (v38 + 128) & ~v38;
    v86 = v38 | 7;
    v40 = (uint64_t (*)(uint64_t))swift_allocObject(&unk_1002F9450, v39 + v107, v38 | 7);
    v41 = *(_OWORD *)(a3 + 80);
    *((_OWORD *)v40 + 5) = *(_OWORD *)(a3 + 64);
    *((_OWORD *)v40 + 6) = v41;
    *((_OWORD *)v40 + 7) = *(_OWORD *)(a3 + 96);
    v42 = *(_OWORD *)(a3 + 16);
    *((_OWORD *)v40 + 1) = *(_OWORD *)a3;
    *((_OWORD *)v40 + 2) = v42;
    v43 = *(_OWORD *)(a3 + 48);
    *((_OWORD *)v40 + 3) = *(_OWORD *)(a3 + 32);
    *((_OWORD *)v40 + 4) = v43;
    v84 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v84((char *)v40 + v39, v21, v17);
    v44 = v89;
    v45 = (uint64_t)v91;
    v46 = v88;
    v47 = v90;
    (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v91, v88, v90);
    v48 = v108;
    *(_QWORD *)(v45 + *(int *)(v108 + 52)) = v37;
    v49 = (uint64_t (**)(uint64_t))(v45 + *(int *)(v48 + 56));
    *v49 = sub_1001F5264;
    v49[1] = v40;
    swift_retain(v37);
    sub_1001F4C00((uint64_t *)a3);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v46, v47);
    v112 = *(_OWORD *)(a3 + 48);
    v50 = sub_100003DB8(&qword_1003290B8);
    State.wrappedValue.getter(&v115, v50);
    v87(v21, v85, v17);
    v51 = (v38 + 16) & ~v38;
    v52 = (v107 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
    v53 = swift_allocObject(&unk_1002F9478, v52 + 112, v86);
    v84((char *)(v53 + v51), v21, v17);
    v54 = (_OWORD *)(v53 + v52);
    v55 = *(_OWORD *)(a3 + 80);
    v54[4] = *(_OWORD *)(a3 + 64);
    v54[5] = v55;
    v54[6] = *(_OWORD *)(a3 + 96);
    v56 = *(_OWORD *)(a3 + 16);
    *v54 = *(_OWORD *)a3;
    v54[1] = v56;
    v57 = *(_OWORD *)(a3 + 48);
    v54[2] = *(_OWORD *)(a3 + 32);
    v54[3] = v57;
    sub_1001F4C00((uint64_t *)a3);
    v58 = sub_1000084FC(&qword_1003290F8, &qword_1003290D0, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
    v59 = v97;
    v60 = v108;
    View.onChange<A>(of:initial:_:)(&v115, 0, sub_1001F5354, v53, v108, &type metadata for Double, v58, &protocol witness table for Double);
    swift_release(v53);
    v61 = sub_100007FF0(v45, &qword_1003290D0);
    v62 = v92;
    static CoordinateSpaceProtocol<>.local.getter(v61);
    v63 = v100;
    DragGesture.init<A>(minimumDistance:coordinateSpace:)(v62, v93, &protocol witness table for LocalCoordinateSpace, 10.0);
    v64 = (_OWORD *)swift_allocObject(&unk_1002F94A0, 128, 7);
    v65 = *(_OWORD *)(a3 + 80);
    v64[5] = *(_OWORD *)(a3 + 64);
    v64[6] = v65;
    v64[7] = *(_OWORD *)(a3 + 96);
    v66 = *(_OWORD *)(a3 + 16);
    v64[1] = *(_OWORD *)a3;
    v64[2] = v66;
    v67 = *(_OWORD *)(a3 + 48);
    v64[3] = *(_OWORD *)(a3 + 32);
    v64[4] = v67;
    sub_1001F4C00((uint64_t *)a3);
    v68 = sub_1000052EC(&qword_100329050, (uint64_t (*)(uint64_t))&type metadata accessor for DragGesture, (uint64_t)&protocol conformance descriptor for DragGesture);
    v69 = sub_1000052EC(&qword_100329100, (uint64_t (*)(uint64_t))&type metadata accessor for DragGesture.Value, (uint64_t)&protocol conformance descriptor for DragGesture.Value);
    v71 = v102;
    v70 = v103;
    Gesture<>.onChanged(_:)(sub_1001F5398, v64, v102, v68, v69);
    swift_release(v64);
    v72 = (*(uint64_t (**)(char *, uint64_t))(v101 + 8))(v63, v71);
    v73 = static GestureMask.all.getter(v72);
    *(_QWORD *)&v112 = v60;
    *((_QWORD *)&v112 + 1) = &type metadata for Double;
    v113 = v58;
    v114 = &protocol witness table for Double;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v112, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    v75 = sub_1000084FC(&qword_100329108, &qword_1003290C0, (uint64_t)&protocol conformance descriptor for _ChangedGesture<A>);
    v76 = v94;
    v77 = v99;
    v78 = v105;
    View.simultaneousGesture<A>(_:including:)(v70, v73, v99, v105, OpaqueTypeConformance2, v75);
    (*(void (**)(char *, uint64_t))(v104 + 8))(v70, v78);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v59, v77);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v95 + 32))(v106, v76, v96);
  }
  else
  {
    v80 = *(_QWORD *)(a3 + 24);
    v81 = type metadata accessor for TryOutModel(0);
    v82 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v80, v81, v82);
    __break(1u);
  }
  return result;
}

_QWORD *sub_1001F1E84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[10];
  _BYTE v39[167];
  char v40;
  __int128 v41;
  _BYTE v42[168];
  char v43;
  char v44;
  char v45;
  _QWORD v46[2];
  char v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  _BYTE v57[23];

  v5 = static HorizontalAlignment.center.getter(a1);
  v6 = sub_1001F20A4(a2, (uint64_t)v38);
  *(_OWORD *)&v39[103] = v38[6];
  *(_OWORD *)&v39[119] = v38[7];
  *(_OWORD *)&v39[135] = v38[8];
  *(_OWORD *)&v39[151] = v38[9];
  *(_OWORD *)&v39[39] = v38[2];
  *(_OWORD *)&v39[55] = v38[3];
  *(_OWORD *)&v39[71] = v38[4];
  *(_OWORD *)&v39[87] = v38[5];
  *(_OWORD *)&v39[7] = v38[0];
  v40 = 1;
  *(_OWORD *)&v39[23] = v38[1];
  v7 = static Alignment.center.getter(v6);
  _FrameLayout.init(width:height:alignment:)(&v32, 0x3FF0000000000000, 0, 0x3FF0000000000000, 0, v7, v8);
  v9 = v33;
  v30 = v34;
  v31 = v32;
  v10 = v35;
  v11 = v37;
  v29 = v36;
  v12 = Namespace.wrappedValue.getter(*(_QWORD *)(a2 + 104));
  v41 = (unint64_t)v5;
  v42[0] = 1;
  v13 = *(_OWORD *)&v39[128];
  *(_OWORD *)&v42[113] = *(_OWORD *)&v39[112];
  v14 = *(_OWORD *)&v39[112];
  *(_OWORD *)&v42[129] = *(_OWORD *)&v39[128];
  v15 = *(_OWORD *)&v39[144];
  *(_OWORD *)&v42[145] = *(_OWORD *)&v39[144];
  v16 = *(_OWORD *)&v39[64];
  *(_OWORD *)&v42[49] = *(_OWORD *)&v39[48];
  v17 = *(_OWORD *)&v39[48];
  *(_OWORD *)&v42[65] = *(_OWORD *)&v39[64];
  v18 = *(_OWORD *)&v39[96];
  *(_OWORD *)&v42[81] = *(_OWORD *)&v39[80];
  v19 = *(_OWORD *)&v39[80];
  *(_OWORD *)&v42[97] = *(_OWORD *)&v39[96];
  v20 = *(_OWORD *)&v39[16];
  *(_OWORD *)&v42[1] = *(_OWORD *)v39;
  v21 = *(_OWORD *)v39;
  *(_OWORD *)&v42[17] = *(_OWORD *)&v39[16];
  v22 = *(_OWORD *)&v39[32];
  *(_OWORD *)&v42[33] = *(_OWORD *)&v39[32];
  v23 = *(_OWORD *)&v42[128];
  *(_OWORD *)(a3 + 128) = *(_OWORD *)&v42[112];
  *(_OWORD *)(a3 + 144) = v23;
  *(_OWORD *)(a3 + 160) = *(_OWORD *)&v42[144];
  v24 = *(_OWORD *)&v42[64];
  *(_OWORD *)(a3 + 64) = *(_OWORD *)&v42[48];
  *(_OWORD *)(a3 + 80) = v24;
  v25 = *(_OWORD *)&v42[96];
  *(_OWORD *)(a3 + 96) = *(_OWORD *)&v42[80];
  *(_OWORD *)(a3 + 112) = v25;
  v26 = *(_OWORD *)v42;
  *(_OWORD *)a3 = v41;
  *(_OWORD *)(a3 + 16) = v26;
  v27 = *(_OWORD *)&v42[32];
  *(_OWORD *)(a3 + 32) = *(_OWORD *)&v42[16];
  *(_OWORD *)(a3 + 48) = v27;
  v50 = v22;
  v49 = v20;
  v48 = v21;
  v54 = v18;
  v53 = v19;
  v52 = v16;
  *(_QWORD *)&v42[160] = *(_QWORD *)&v39[159];
  v45 = 1;
  v44 = v9;
  v43 = v10;
  *(_QWORD *)(a3 + 176) = *(_QWORD *)&v39[159];
  *(_QWORD *)(a3 + 184) = 0;
  *(_BYTE *)(a3 + 192) = 1;
  *(_QWORD *)(a3 + 200) = v31;
  *(_BYTE *)(a3 + 208) = v9;
  *(_QWORD *)(a3 + 216) = v30;
  *(_BYTE *)(a3 + 224) = v10;
  *(_QWORD *)(a3 + 232) = v29;
  *(_QWORD *)(a3 + 240) = v11;
  *(_QWORD *)(a3 + 248) = v12;
  v46[0] = v5;
  v46[1] = 0;
  v47 = 1;
  v51 = v17;
  *(_QWORD *)&v57[15] = *(_QWORD *)&v39[159];
  *(_OWORD *)v57 = v15;
  v56 = v13;
  v55 = v14;
  sub_1001F53B8(&v41);
  return sub_1001F5400(v46);
}

uint64_t sub_1001F20A4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  double v4;
  double v5;
  uint64_t v6;
  _QWORD *v7;
  double v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE v33[7];
  double v34;
  __int128 v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  uint64_t v39;

  GeometryProxy.size.getter();
  v5 = v4;
  v35 = *(_OWORD *)(a1 + 32);
  v6 = sub_100003DB8(&qword_1003290B8);
  v7 = State.wrappedValue.getter(&v34, v6);
  v8 = v5 - v34;
  if (v8 > 0.0)
  {
    v11 = static Alignment.center.getter(v7);
    v7 = _FrameLayout.init(width:height:alignment:)(&v35, 0x3FF0000000000000, 0, *(_QWORD *)&v8, 0, v11, v12);
    v31 = BYTE8(v35);
    v32 = v35;
    v29 = v37;
    v30 = v36;
    v28 = 1;
    v9 = v38;
    v10 = v39;
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v31 = 0;
    v32 = 0;
    v30 = 0;
    v9 = 0;
    v10 = 0;
  }
  v13 = static HorizontalAlignment.center.getter(v7);
  v14 = type metadata accessor for TryOutModel(0);
  v15 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
  v16 = EnvironmentObject.init()(v14, v15);
  v18 = v17;
  v19 = (_OWORD *)swift_allocObject(&unk_1002F94C8, 128, 7);
  v20 = *(_OWORD *)(a1 + 80);
  v19[5] = *(_OWORD *)(a1 + 64);
  v19[6] = v20;
  v19[7] = *(_OWORD *)(a1 + 96);
  v21 = *(_OWORD *)(a1 + 16);
  v19[1] = *(_OWORD *)a1;
  v19[2] = v21;
  v22 = *(_OWORD *)(a1 + 48);
  v19[3] = *(_OWORD *)(a1 + 32);
  v19[4] = v22;
  v23 = sub_1001F4C00((uint64_t *)a1);
  v24 = static Alignment.center.getter(v23);
  v26 = v25;
  result = swift_allocObject(&unk_1002F94F0, 32, 7);
  *(_QWORD *)(result + 16) = sub_1001F5498;
  *(_QWORD *)(result + 24) = v19;
  *(_DWORD *)(a2 + 65) = LODWORD(v34);
  *(_DWORD *)(a2 + 68) = *(_DWORD *)((char *)&v34 + 3);
  *(_DWORD *)(a2 + 89) = *(_DWORD *)v33;
  *(_DWORD *)(a2 + 92) = *(_DWORD *)&v33[3];
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = v28;
  *(_QWORD *)(a2 + 16) = v32;
  *(_QWORD *)(a2 + 24) = v31;
  *(_QWORD *)(a2 + 32) = v30;
  *(_QWORD *)(a2 + 40) = v29;
  *(_QWORD *)(a2 + 48) = v9;
  *(_QWORD *)(a2 + 56) = v10;
  *(_BYTE *)(a2 + 64) = v8 <= 0.0;
  *(_QWORD *)(a2 + 72) = v13;
  *(_QWORD *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 96) = v16;
  *(_QWORD *)(a2 + 104) = v18;
  *(_QWORD *)(a2 + 112) = sub_1001F4720;
  *(_QWORD *)(a2 + 120) = 0;
  *(_QWORD *)(a2 + 128) = v24;
  *(_QWORD *)(a2 + 136) = v26;
  *(_QWORD *)(a2 + 144) = sub_1001F613C;
  *(_QWORD *)(a2 + 152) = result;
  return result;
}

uint64_t sub_1001F22C4()
{
  uint64_t v0;

  v0 = static Animation.default.getter();
  withAnimation<A>(_:_:)(v0, sub_1001F54A0);
  return swift_release(v0);
}

uint64_t sub_1001F2324(uint64_t result, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t);
  unint64_t *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41[2];

  v4 = a2[2];
  if (!v4)
  {
    v29 = a2[3];
    v30 = type metadata accessor for TryOutModel(0);
    v31 = type metadata accessor for TryOutModel;
    v32 = &qword_10031A0C8;
    v33 = &unk_10024D2FC;
    goto LABEL_19;
  }
  v5 = *(_QWORD *)(v4 + 96);
  if (!v5)
    return result;
  v7 = result;
  v8 = *(_QWORD *)(v5 + 16);
  if (v8)
  {
    v9 = *(_QWORD **)(v8 + 48);
    swift_bridgeObjectRetain(v9);
  }
  else
  {
    v9 = _swiftEmptyArrayStorage;
  }
  __chkstk_darwin(result, a2);
  v36 = v7;
  swift_retain(v5);
  v10 = sub_1001F09CC(sub_10003E48C, (uint64_t)&v35, (uint64_t)v9);
  swift_bridgeObjectRelease(v9);
  if (v10)
  {
    if (qword_100315860 != -1)
      swift_once(&qword_100315860, sub_1000D96D0);
    v11 = type metadata accessor for Logger(0);
    sub_10000D744(v11, (uint64_t)qword_10033FDD8);
    v13 = swift_retain_n(v10, v12);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc(12, -1);
      v17 = swift_slowAlloc(32, -1);
      v39 = a3;
      v18 = v17;
      v41[0] = v17;
      v38 = 0;
      *(_DWORD *)v16 = 136446210;
      v19 = (*(uint64_t (**)(void))(*(_QWORD *)v10 + 96))();
      v21 = v20;
      v40 = sub_100172BEC(v19, v20, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, v41, v16 + 4, v16 + 12);
      swift_release_n(v10);
      swift_bridgeObjectRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Item to scroll to - %{public}s", v16, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      v22 = v18;
      a3 = v39;
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v16, -1, -1);

    }
    else
    {

      v23 = swift_release_n(v10);
    }
    v26 = __chkstk_darwin(v23, v24);
    v36 = a3;
    v37 = v10;
    v27 = static Animation.default.getter(v26);
    withAnimation<A>(_:_:)(v27, sub_1001F53A0);
    swift_release(v27);
    if (*a2)
    {
      v28 = *(_QWORD *)(*a2 + 168);
      LOBYTE(v41[0]) = 0;
      swift_retain(v28);
      PassthroughSubject.send(_:)(v41);
      swift_release(v5);
      swift_release(v28);
      v25 = v10;
      return swift_release(v25);
    }
    v29 = a2[1];
    v30 = type metadata accessor for AppEvents();
    v31 = (uint64_t (*)(uint64_t))type metadata accessor for AppEvents;
    v32 = (unint64_t *)&qword_100316A10;
    v33 = &unk_100254EA8;
LABEL_19:
    v34 = sub_1000052EC(v32, v31, (uint64_t)v33);
    result = EnvironmentObject.error()(0, v29, v30, v34);
    __break(1u);
    return result;
  }
  v25 = v5;
  return swift_release(v25);
}

uint64_t sub_1001F267C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  double v5;
  uint64_t v6;
  _QWORD v8[2];

  v2 = (*(uint64_t (**)(void))(*(_QWORD *)a2 + 96))();
  v4 = v3;
  v8[0] = v2;
  v8[1] = v3;
  v5 = static UnitPoint.bottom.getter(v2, v3);
  ScrollViewProxy.scrollTo<A>(_:anchor:)(v8, *(_QWORD *)&v5, v6, 0, &type metadata for String, &protocol witness table for String);
  return swift_bridgeObjectRelease(v4);
}

uint64_t sub_1001F26FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  v8 = Namespace.wrappedValue.getter(*(_QWORD *)(a2 + 104));
  v3 = static UnitPoint.bottom.getter(v8, v2);
  v5 = v4;
  v6 = sub_1001A0620();
  return ScrollViewProxy.scrollTo<A>(_:anchor:)(&v8, *(_QWORD *)&v3, v5, 0, &type metadata for Namespace.ID, v6);
}

uint64_t sub_1001F2764(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  double v4;
  uint64_t v5;
  char v6;
  __int128 v7;
  char v8;

  result = DragGesture.Value.translation.getter();
  if (v4 > 0.0)
  {
    v7 = *(_OWORD *)(a2 + 80);
    v8 = *(_BYTE *)(a2 + 96);
    v6 = 0;
    v5 = sub_100003DB8(&qword_100328F68);
    return FocusState.wrappedValue.setter(&v6, v5);
  }
  return result;
}

uint64_t sub_1001F27C8@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  void (*v102)(char *, char *, uint64_t);
  uint64_t v103;
  void (*v104)(char *, uint64_t);
  uint64_t result;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  __int128 v130;
  char v131;
  _QWORD v132[2];
  unsigned __int8 v133;
  _OWORD v134[8];
  uint64_t v135;
  __int128 v136;
  __int128 v137;
  _BYTE v138[32];
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  uint64_t v143;

  v125 = a2;
  v3 = sub_100003DB8(&qword_100329020);
  v113 = *(_QWORD *)(v3 - 8);
  v114 = v3;
  __chkstk_darwin(v3, v4);
  v111 = (char *)&v106 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = sub_100003DB8(&qword_100329028);
  __chkstk_darwin(v109, v6);
  v112 = (char *)&v106 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100329030);
  v121 = *(_QWORD *)(v8 - 8);
  v122 = v8;
  __chkstk_darwin(v8, v9);
  v110 = (uint64_t)&v106 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003DB8(&qword_100329038);
  __chkstk_darwin(v11, v12);
  v124 = (char *)&v106 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14, v15);
  v123 = (uint64_t)&v106 - v17;
  v115 = type metadata accessor for LocalCoordinateSpace(0, v16);
  v19 = __chkstk_darwin(v115, v18);
  v21 = (char *)&v106 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v117 = type metadata accessor for DragGesture(0, v19);
  v118 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117, v22);
  v24 = (char *)&v106 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100003DB8(&qword_100329040);
  v26 = *(_QWORD *)(v25 - 8);
  v119 = v25;
  v120 = v26;
  __chkstk_darwin(v25, v27);
  *(_QWORD *)&v116 = (char *)&v106 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = sub_100003DB8(&qword_100329048);
  v127 = *(_QWORD *)(v129 - 8);
  __chkstk_darwin(v129, v29);
  v128 = (char *)&v106 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31, v32);
  v126 = (char *)&v106 - v33;
  v34 = type metadata accessor for AppEvents();
  v35 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  v36 = EnvironmentObject.init()(v34, v35);
  v38 = v37;
  v39 = type metadata accessor for TryOutModel(0);
  v107 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
  v108 = v39;
  v40 = EnvironmentObject.init()(v39, v107);
  v42 = v41;
  v43 = type metadata accessor for UIMetrics();
  v44 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v45 = EnvironmentObject.init()(v43, v44);
  *(_QWORD *)&v136 = v36;
  *((_QWORD *)&v136 + 1) = v38;
  *(_QWORD *)&v137 = v40;
  *((_QWORD *)&v137 + 1) = v42;
  *(_QWORD *)v138 = v45;
  *(_QWORD *)&v138[8] = v46;
  static CoordinateSpaceProtocol<>.local.getter();
  DragGesture.init<A>(minimumDistance:coordinateSpace:)(v21, v115, &protocol witness table for LocalCoordinateSpace, 5.0);
  v47 = (_OWORD *)swift_allocObject(&unk_1002F93B0, 128, 7);
  v48 = *(_OWORD *)(a1 + 80);
  v47[5] = *(_OWORD *)(a1 + 64);
  v47[6] = v48;
  v47[7] = *(_OWORD *)(a1 + 96);
  v49 = *(_OWORD *)(a1 + 16);
  v47[1] = *(_OWORD *)a1;
  v47[2] = v49;
  v50 = *(_OWORD *)(a1 + 48);
  v47[3] = *(_OWORD *)(a1 + 32);
  v47[4] = v50;
  sub_1001F4C00((uint64_t *)a1);
  v51 = sub_1000052EC(&qword_100329050, (uint64_t (*)(uint64_t))&type metadata accessor for DragGesture, (uint64_t)&protocol conformance descriptor for DragGesture);
  v52 = v116;
  v53 = v117;
  Gesture.onEnded(_:)(sub_1001F4E5C, v47, v117, v51);
  swift_release(v47);
  v54 = (*(uint64_t (**)(char *, uint64_t))(v118 + 8))(v24, v53);
  v55 = static GestureMask.all.getter(v54);
  v56 = sub_1001F4EB0();
  v57 = sub_1000084FC(&qword_100329060, &qword_100329040, (uint64_t)&protocol conformance descriptor for _EndedGesture<A>);
  v58 = v128;
  v59 = v55;
  v60 = v119;
  View.gesture<A>(_:including:)(v52, v59, &type metadata for TryOutMessageEntryViewHeader, v119, v56, v57);
  (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v52, v60);
  swift_release(v136);
  swift_release(v137);
  swift_release(*(_QWORD *)v138);
  (*(void (**)(char *, char *, uint64_t))(v127 + 32))(v126, v58, v129);
  v61 = *(_QWORD *)(a1 + 16);
  if (v61)
  {
    v62 = *(_QWORD *)(v61 + 96);
    if (v62 && (v63 = *(_QWORD *)(v62 + 16)) != 0 && *(_BYTE *)(v63 + 16) == 2)
    {
      v64 = v123;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 56))(v123, 1, 1, v122);
    }
    else
    {
      v134[0] = *(_OWORD *)(a1 + 64);
      v65 = sub_100003DB8(&qword_100316780);
      State.projectedValue.getter(&v136, v65);
      v119 = *((_QWORD *)&v136 + 1);
      v120 = v136;
      LODWORD(v118) = v137;
      v66 = EnvironmentObject.init()(v108, v107);
      v68 = v67;
      *(_QWORD *)&v134[0] = 0;
      *((_QWORD *)&v134[0] + 1) = 0xE000000000000000;
      State.init(wrappedValue:)(&v136, v134, &type metadata for String);
      v117 = v136;
      v69 = v137;
      *(_QWORD *)&v134[0] = 0;
      *((_QWORD *)&v134[0] + 1) = 0xE000000000000000;
      State.init(wrappedValue:)(&v136, v134, &type metadata for String);
      v116 = v136;
      v70 = v137;
      v71 = (_OWORD *)swift_allocObject(&unk_1002F93D8, 128, 7);
      v72 = *(_OWORD *)(a1 + 80);
      v71[5] = *(_OWORD *)(a1 + 64);
      v71[6] = v72;
      v71[7] = *(_OWORD *)(a1 + 96);
      v73 = *(_OWORD *)(a1 + 16);
      v71[1] = *(_OWORD *)a1;
      v71[2] = v73;
      v74 = *(_OWORD *)(a1 + 48);
      v71[3] = *(_OWORD *)(a1 + 32);
      v71[4] = v74;
      v75 = sub_1001F4C00((uint64_t *)a1);
      v76 = static Alignment.center.getter(v75);
      v78 = v77;
      v79 = swift_allocObject(&unk_1002F9400, 32, 7);
      *(_QWORD *)(v79 + 16) = sub_1001F4EF8;
      *(_QWORD *)(v79 + 24) = v71;
      *(_QWORD *)&v136 = v66;
      *((_QWORD *)&v136 + 1) = v68;
      *(_QWORD *)&v137 = v120;
      *((_QWORD *)&v137 + 1) = v119;
      v138[0] = v118;
      *(_OWORD *)&v138[8] = v117;
      v139 = v116;
      *(_QWORD *)&v138[24] = v69;
      *(_QWORD *)&v140 = v70;
      *((_QWORD *)&v140 + 1) = sub_1001F4720;
      *(_QWORD *)&v141 = 0;
      *((_QWORD *)&v141 + 1) = v76;
      *(_QWORD *)&v142 = v78;
      *((_QWORD *)&v142 + 1) = sub_1001F4F64;
      v143 = v79;
      v134[6] = v141;
      v134[7] = v142;
      v135 = v79;
      v134[2] = *(_OWORD *)v138;
      v134[3] = *(_OWORD *)&v138[16];
      v134[4] = v116;
      v134[5] = v140;
      v134[0] = v136;
      v134[1] = v137;
      v130 = *(_OWORD *)(a1 + 80);
      v131 = *(_BYTE *)(a1 + 96);
      v80 = sub_100003DB8(&qword_100328F68);
      FocusState.projectedValue.getter(v132, v80);
      v81 = v132[0];
      v82 = v132[1];
      v83 = v133;
      v84 = sub_100003DB8(&qword_100329068);
      v85 = sub_1001F4F6C();
      v86 = v111;
      View.focused(_:)(v81, v82, v83, v84, v85);
      swift_release(v82);
      swift_release(v81);
      sub_1001F50B8((uint64_t *)&v136);
      if (qword_100315998 != -1)
        swift_once(&qword_100315998, sub_1001F469C);
      v87 = *((_QWORD *)&xmmword_100328F28 + 1);
      v89 = (uint64_t)v112;
      v88 = v113;
      v90 = v114;
      (*(void (**)(char *, char *, uint64_t))(v113 + 16))(v112, v86, v114);
      v91 = (_QWORD *)(v89 + *(int *)(v109 + 36));
      *v91 = v87;
      v91[1] = sub_1001F3038;
      v91[2] = 0;
      (*(void (**)(char *, uint64_t))(v88 + 8))(v86, v90);
      v92 = xmmword_100328F28;
      v93 = v110;
      sub_10000B234(v89, v110, &qword_100329028);
      v94 = v122;
      v95 = (_QWORD *)(v93 + *(int *)(v122 + 36));
      *v95 = v92;
      v95[1] = sub_1001F6138;
      v95[2] = 0;
      sub_100007FF0(v89, &qword_100329028);
      v64 = v123;
      sub_10000B458(v93, v123, &qword_100329030);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v121 + 56))(v64, 0, 1, v94);
    }
    v97 = (uint64_t)v124;
    v96 = v125;
    v99 = v128;
    v98 = v129;
    v101 = v126;
    v100 = v127;
    v102 = *(void (**)(char *, char *, uint64_t))(v127 + 16);
    v102(v128, v126, v129);
    sub_10000B234(v64, v97, &qword_100329038);
    v102(v96, v99, v98);
    v103 = sub_100003DB8(&qword_1003290B0);
    sub_10000B234(v97, (uint64_t)&v96[*(int *)(v103 + 48)], &qword_100329038);
    sub_100007FF0(v64, &qword_100329038);
    v104 = *(void (**)(char *, uint64_t))(v100 + 8);
    v104(v101, v98);
    sub_100007FF0(v97, &qword_100329038);
    return ((uint64_t (*)(char *, uint64_t))v104)(v99, v98);
  }
  else
  {
    result = EnvironmentObject.error()(0, *(_QWORD *)(a1 + 24), v108, v107);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001F3038()
{
  uint64_t v0;

  v0 = static VerticalAlignment.top.getter();
  return ViewDimensions.subscript.getter(v0);
}

uint64_t sub_1001F305C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(result + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 96);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 16);
      if (v3)
      {
        swift_retain(*(_QWORD *)(v1 + 96));
        swift_retain(v3);
        sub_100039064();
        swift_release(v2);
        return swift_release(v3);
      }
    }
  }
  else
  {
    v4 = *(_QWORD *)(result + 24);
    v5 = type metadata accessor for TryOutModel(0);
    v6 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v4, v5, v6);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001F30FC()
{
  uint64_t v0;

  v0 = static VerticalAlignment.bottom.getter();
  return ViewDimensions.subscript.getter(v0);
}

uint64_t sub_1001F3120()
{
  uint64_t v0;

  v0 = static HorizontalAlignment.center.getter();
  return ViewDimensions.subscript.getter(v0);
}

void sub_1001F3144(double a1, uint64_t a2, _BYTE *a3)
{
  uint64_t v3;

  if ((*a3 & 1) == 0)
  {
    v3 = static Animation.default.getter(a1);
    withAnimation<A>(_:_:)(v3, sub_1001F4DF8);
    swift_release(v3);
  }
}

void sub_1001F31CC(uint64_t a1, __int16 *a2, uint64_t a3)
{
  __int16 v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  char v24;

  v4 = *a2;
  if (qword_100315860 != -1)
    swift_once(&qword_100315860, sub_1000D96D0);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10000D744(v5, (uint64_t)qword_10033FDD8);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v23 = v10;
    *(_DWORD *)v9 = 136446210;
    LOWORD(v22) = v4;
    v11 = sub_100003DB8(&qword_10031CBD8);
    v13 = String.init<A>(describing:)(&v22, v11, v12);
    v15 = v14;
    v22 = sub_100172BEC(v13, v14, (uint64_t *)&v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Demo transcript: TryOut state changed: %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }

  v16 = *(_QWORD *)(a3 + 16);
  if (v16)
  {
    v17 = *(unsigned __int16 *)(v16 + 56);
    if (v17 >= 0x4000 && (v17 >> 9 > 0x7E || (v17 & 0xC000) != 0x4000))
    {
      v23 = *(_OWORD *)(a3 + 80);
      v24 = *(_BYTE *)(a3 + 96);
      LOBYTE(v22) = 0;
      v18 = sub_100003DB8(&qword_100328F68);
      FocusState.wrappedValue.setter(&v22, v18);
    }
  }
  else
  {
    v19 = *(_QWORD *)(a3 + 24);
    v20 = type metadata accessor for TryOutModel(0);
    v21 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, v19, v20, v21);
    __break(1u);
  }
}

uint64_t sub_1001F33FC@<X0>(uint64_t a1@<X8>)
{
  return sub_1001F0B00(a1);
}

uint64_t sub_1001F3444@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  double v23;
  char v24;
  uint64_t v25;
  uint64_t v27;

  v8 = sub_100003DB8(&qword_100329120);
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_100329128);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v11 = static HorizontalAlignment.center.getter(v16);
  *((_QWORD *)v11 + 1) = 0;
  v11[16] = 1;
  v17 = sub_100003DB8(&qword_100329130);
  v18 = sub_1001F35D4(a1, a2, a3, (uint64_t)&v11[*(int *)(v17 + 44)]);
  v19 = static Alignment.center.getter(v18);
  v21 = v20;
  sub_10000B234((uint64_t)v11, (uint64_t)v15, &qword_100329120);
  v22 = &v15[*(int *)(v12 + 36)];
  *(_QWORD *)v22 = 0x4038000000000000;
  *((_QWORD *)v22 + 1) = 9;
  *((_QWORD *)v22 + 2) = 0x3FF0000000000000;
  *((_QWORD *)v22 + 3) = v19;
  *((_QWORD *)v22 + 4) = v21;
  sub_100007FF0((uint64_t)v11, &qword_100329120);
  v24 = static Edge.Set.all.getter(v23);
  sub_10000B234((uint64_t)v15, a4, &qword_100329128);
  v25 = a4 + *(int *)(sub_100003DB8(&qword_100329138) + 36);
  *(_BYTE *)v25 = v24;
  *(_OWORD *)(v25 + 8) = 0u;
  *(_OWORD *)(v25 + 24) = 0u;
  *(_BYTE *)(v25 + 40) = 1;
  return sub_100007FF0((uint64_t)v15, &qword_100329128);
}

uint64_t sub_1001F35D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  char v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _BYTE v38[360];
  _BYTE v39[376];
  _QWORD v40[55];

  v36 = a3;
  v34 = a1;
  v35 = a2;
  v37 = a4;
  v4 = sub_100003DB8(&qword_100329140);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v8, v9);
  v11 = (_OWORD *)((char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = sub_100003DB8(&qword_100329148);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = static HorizontalAlignment.leading.getter(v16);
  sub_1001F3864(v17, v38);
  v39[368] = 0;
  memcpy(&v39[7], v38, 0x168uLL);
  v19 = static Edge.Set.all.getter(v18);
  v40[0] = v17;
  v40[1] = 0x4020000000000000;
  LOBYTE(v40[2]) = 0;
  memcpy((char *)&v40[2] + 1, v39, 0x16FuLL);
  LOBYTE(v40[48]) = v19;
  memset(&v40[49], 0, 32);
  LOBYTE(v40[53]) = 1;
  v20 = (char *)v11 + *(int *)(v8 + 20);
  v21 = enum case for RoundedCornerStyle.continuous(_:);
  v22 = type metadata accessor for RoundedCornerStyle(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(v20, v21, v22);
  __asm { FMOV            V0.2D, #24.0 }
  *v11 = _Q0;
  sub_10002C428((uint64_t)v11, (uint64_t)v7);
  v7[*(int *)(v4 + 36)] = 0;
  sub_10000B234((uint64_t)v7, (uint64_t)&v15[*(int *)(v12 + 36)], &qword_100329140);
  memcpy(v15, v40, 0x1A9uLL);
  sub_1001F5780((uint64_t)v40);
  sub_100007FF0((uint64_t)v7, &qword_100329140);
  sub_10002C46C((uint64_t)v11);
  sub_1001F582C((uint64_t)v38);
  v28 = swift_allocObject(&unk_1002F9678, 33, 7);
  v30 = v34;
  v29 = v35;
  *(_QWORD *)(v28 + 16) = v34;
  *(_QWORD *)(v28 + 24) = v29;
  *(_BYTE *)(v28 + 32) = v36;
  v31 = sub_1001F5910();
  swift_retain(v30);
  swift_retain(v29);
  View.onTapGesture(count:perform:)(1, sub_1001F5904, v28, v12, v31);
  swift_release(v28);
  return sub_100007FF0((uint64_t)v15, &qword_100329148);
}

uint64_t sub_1001F3864@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[11];
  __int128 v25;
  _BYTE v26[199];
  char v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  _BYTE v39[23];
  _QWORD v40[2];
  _BYTE v41[200];
  _OWORD v42[9];
  _OWORD __src[23];
  _OWORD v44[9];
  _QWORD v45[2];
  char v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _BYTE v58[23];

  v13 = static VerticalAlignment.center.getter(a1);
  sub_1001F3C44((uint64_t)v24);
  v27 = 1;
  *(_OWORD *)&v26[135] = v24[8];
  *(_OWORD *)&v26[151] = v24[9];
  *(_OWORD *)&v26[167] = v24[10];
  *(_OWORD *)&v26[183] = v25;
  *(_OWORD *)&v26[71] = v24[4];
  *(_OWORD *)&v26[87] = v24[5];
  *(_OWORD *)&v26[103] = v24[6];
  *(_OWORD *)&v26[119] = v24[7];
  *(_OWORD *)&v26[7] = v24[0];
  *(_OWORD *)&v26[23] = v24[1];
  *(_OWORD *)&v26[39] = v24[2];
  *(_OWORD *)&v26[55] = v24[3];
  v37 = *(_OWORD *)&v26[144];
  v38 = *(_OWORD *)&v26[160];
  *(_OWORD *)v39 = *(_OWORD *)&v26[176];
  *(_QWORD *)&v39[15] = *((_QWORD *)&v25 + 1);
  v34 = *(_OWORD *)&v26[96];
  v35 = *(_OWORD *)&v26[112];
  v36 = *(_OWORD *)&v26[128];
  v30 = *(_OWORD *)&v26[32];
  v31 = *(_OWORD *)&v26[48];
  v32 = *(_OWORD *)&v26[64];
  v33 = *(_OWORD *)&v26[80];
  v28 = *(_OWORD *)v26;
  v29 = *(_OWORD *)&v26[16];
  v2 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000037, 0x80000001002703B0);
  v3 = Text.init(_:tableName:bundle:comment:)(v2);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v10 = static Alignment.leading.getter(v3, v4);
  sub_1001315E8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v15, 0.0, 1, 0.0, 1, v10, v11, v3, v5, v9, v7);
  sub_10002B438(v3, v5, v9);
  swift_bridgeObjectRelease(v7);
  v40[0] = v13;
  v40[1] = 0;
  v41[0] = 1;
  *(_OWORD *)&v41[145] = v37;
  *(_OWORD *)&v41[161] = v38;
  *(_OWORD *)&v41[177] = *(_OWORD *)v39;
  *(_OWORD *)&v41[81] = v33;
  *(_OWORD *)&v41[97] = v34;
  *(_OWORD *)&v41[113] = v35;
  *(_OWORD *)&v41[129] = v36;
  *(_OWORD *)&v41[17] = v29;
  *(_OWORD *)&v41[33] = v30;
  *(_OWORD *)&v41[49] = v31;
  *(_OWORD *)&v41[65] = v32;
  *(_OWORD *)&v41[1] = v28;
  v42[6] = v21;
  v42[7] = v22;
  v42[2] = v17;
  v42[3] = v18;
  v42[4] = v19;
  v42[5] = v20;
  v42[0] = v15;
  v42[1] = v16;
  __src[11] = *(_OWORD *)&v41[160];
  __src[12] = *(_OWORD *)&v41[176];
  __src[7] = *(_OWORD *)&v41[96];
  __src[8] = *(_OWORD *)&v41[112];
  __src[9] = *(_OWORD *)&v41[128];
  __src[10] = *(_OWORD *)&v41[144];
  __src[3] = *(_OWORD *)&v41[32];
  __src[4] = *(_OWORD *)&v41[48];
  __src[5] = *(_OWORD *)&v41[64];
  __src[6] = *(_OWORD *)&v41[80];
  v42[8] = v23;
  __src[0] = (unint64_t)v13;
  __src[1] = *(_OWORD *)v41;
  __src[2] = *(_OWORD *)&v41[16];
  *(_OWORD *)((char *)&__src[18] + 8) = v20;
  *(_OWORD *)((char *)&__src[19] + 8) = v21;
  *(_OWORD *)((char *)&__src[20] + 8) = v22;
  *(_OWORD *)((char *)&__src[21] + 8) = v23;
  *(_OWORD *)((char *)&__src[16] + 8) = v18;
  *(_OWORD *)((char *)&__src[17] + 8) = v19;
  *(_OWORD *)((char *)&__src[14] + 8) = v16;
  *(_OWORD *)((char *)&__src[15] + 8) = v17;
  *(_QWORD *)&v41[192] = *(_QWORD *)&v39[15];
  *(_QWORD *)&__src[13] = *(_QWORD *)&v39[15];
  *(_OWORD *)((char *)&__src[13] + 8) = v15;
  memcpy(a2, __src, 0x168uLL);
  v44[6] = v21;
  v44[7] = v22;
  v44[8] = v23;
  v44[2] = v17;
  v44[3] = v18;
  v44[4] = v19;
  v44[5] = v20;
  v44[0] = v15;
  v44[1] = v16;
  sub_1001F5A8C((uint64_t)v40);
  sub_1001F5B04((uint64_t)v42);
  sub_1001F5B40((uint64_t)v44);
  v56 = v37;
  v57 = v38;
  *(_OWORD *)v58 = *(_OWORD *)v39;
  v52 = v33;
  v53 = v34;
  v54 = v35;
  v55 = v36;
  v48 = v29;
  v49 = v30;
  v50 = v31;
  v51 = v32;
  v45[0] = v13;
  v45[1] = 0;
  v46 = 1;
  *(_QWORD *)&v58[15] = *(_QWORD *)&v39[15];
  v47 = v28;
  return sub_1001F5B7C((uint64_t)v45);
}

uint64_t sub_1001F3C44@<X0>(uint64_t a1@<X8>)
{
  id v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t KeyPath;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  Swift::String v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  _OWORD v47[2];
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  char v56;
  Swift::String v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  Swift::String v69;

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v69._countAndFlagsBits = 0xD00000000000004ELL;
  v69._object = (void *)0x8000000100265F80;
  v3._object = (void *)0x8000000100265F60;
  v3._countAndFlagsBits = 0xD000000000000012;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v69);

  v57 = v5;
  v6 = sub_10002B3F4();
  v8 = Text.init<A>(_:)(&v57, &type metadata for String, v6, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = static Font.headline.getter(v8);
  static Font.Weight.semibold.getter(v15);
  v16 = Font.weight(_:)(v15);
  swift_release(v15);
  v17 = Text.font(_:)(v16, v8, v10, v14, v12);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  swift_release(v16);
  sub_10002B438(v8, v10, v14);
  swift_bridgeObjectRelease(v12);
  v26 = static Alignment.leading.getter(v24, v25);
  sub_1001315E8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v57, 0.0, 1, 0.0, 1, v26, v27, v17, v19, v21 & 1, v23);
  sub_10002B438(v17, v19, v21 & 1);
  swift_bridgeObjectRelease(v23);
  v44 = v63;
  v45 = v64;
  v46 = v65;
  v40 = v59;
  v41 = v60;
  v42 = v61;
  v43 = v62;
  v38 = v57;
  v39 = v58;
  KeyPath = swift_getKeyPath(&unk_10025E798);
  v30 = Image.init(systemName:)(0x6B72616D78, 0xE500000000000000, v29);
  v31 = static Font.body.getter(v30);
  v32 = swift_getKeyPath(&unk_10025E7C8);
  v52 = v44;
  v53 = v45;
  v54 = v46;
  v48 = v40;
  v49 = v41;
  v50 = v42;
  v51 = v43;
  v47[0] = v38;
  v47[1] = v39;
  *(_QWORD *)&v55 = KeyPath;
  *((_QWORD *)&v55 + 1) = 1;
  v56 = 0;
  *(_BYTE *)(a1 + 160) = 0;
  v33 = v49;
  *(_OWORD *)(a1 + 64) = v50;
  *(_OWORD *)(a1 + 80) = v43;
  v34 = v53;
  *(_OWORD *)(a1 + 96) = v52;
  *(_OWORD *)(a1 + 112) = v34;
  v35 = v48;
  *(_OWORD *)a1 = v47[0];
  *(_OWORD *)(a1 + 16) = v39;
  *(_OWORD *)(a1 + 32) = v35;
  *(_OWORD *)(a1 + 48) = v33;
  v36 = v55;
  *(_OWORD *)(a1 + 128) = v54;
  *(_OWORD *)(a1 + 144) = v36;
  *(_QWORD *)(a1 + 168) = v30;
  *(_QWORD *)(a1 + 176) = v32;
  *(_QWORD *)(a1 + 184) = v31;
  sub_1001F5C04((uint64_t)v47);
  v63 = v44;
  v64 = v45;
  v65 = v46;
  v59 = v40;
  v60 = v41;
  v61 = v42;
  v62 = v43;
  v57 = v38;
  v58 = v39;
  v66 = KeyPath;
  v67 = 1;
  v68 = 0;
  return sub_1001F5C54((uint64_t)&v57);
}

uint64_t sub_1001F3F18(double a1)
{
  uint64_t v1;

  v1 = static Animation.default.getter(a1);
  withAnimation<A>(_:_:)(v1, sub_1001F5A34);
  return swift_release(v1);
}

uint64_t sub_1001F3F78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001F3444(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(unsigned __int8 *)(v1 + 16), a1);
}

uint64_t sub_1001F3F84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t KeyPath;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = sub_100003DB8(&qword_100329188);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v11 = *(_QWORD *)(a1 + 96);
    if (v11 && (v12 = *(_QWORD *)(v11 + 16)) != 0)
      swift_bridgeObjectRetain(*(_QWORD *)(v12 + 48));
    else
      v13 = _swiftEmptyArrayStorage;
    v24 = v13;
    KeyPath = swift_getKeyPath(&unk_10025E7F8);
    v15 = swift_allocObject(&unk_1002F96A0, 32, 7);
    *(_QWORD *)(v15 + 16) = a1;
    *(_QWORD *)(v15 + 24) = a2;
    swift_retain(a1);
    v16 = sub_100003DB8(&qword_10031FA98);
    v17 = sub_100003DB8(&qword_100329190);
    v18 = sub_1000084FC(&qword_100329198, &qword_10031FA98, (uint64_t)&protocol conformance descriptor for [A]);
    v19 = sub_1001F5D00();
    ForEach<>.init(_:id:content:)(&v24, KeyPath, sub_1001F5CF8, v15, v16, v17, v18, &protocol witness table for String, v19);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(a3, v10, v6);
  }
  else
  {
    v21 = type metadata accessor for TryOutModel(0);
    v22 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v21, v22);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001F413C@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  __int16 v23;
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  __n128 v37;
  uint64_t (*v38)();
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int16 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[40];
  __int16 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  unsigned __int8 v62;
  char v63;

  v5 = *(_QWORD *)result;
  v6 = *(unsigned __int8 *)(*(_QWORD *)result + 16);
  if (v6 == 4)
  {
    v25 = type metadata accessor for TryOutTranscriptFooterItem(0);
    v26 = swift_dynamicCastClass(v5, v25);
    if (v26)
      swift_retain(v5);
    *(_QWORD *)v57 = v26;
    memset(&v57[8], 0, 32);
    v58 = 256;
    v27 = sub_100003DB8(&qword_1003291C0);
    v28 = sub_100003DB8(&qword_100329210);
    v29 = sub_1001F5D84();
    v30 = sub_1001F5ED8();
    result = _ConditionalContent<>.init(storage:)(v57, v27, v28, v29, v30);
    v20 = v59;
    v21 = v60;
    v22 = v61;
    v23 = v62;
    if (v63)
      v24 = 256;
    else
      v24 = 0;
LABEL_14:
    v31 = v24 | v23;
    goto LABEL_23;
  }
  if (v6 != 2)
  {
    if (v6 != 1)
    {
      v22 = 0;
      v20 = 0uLL;
      v31 = -256;
      v21 = 0uLL;
      goto LABEL_23;
    }
    v7 = type metadata accessor for TryOutTranscriptStatusItem(0);
    v8 = swift_dynamicCastClass(v5, v7);
    if (v8)
      swift_retain(v5);
    *(_QWORD *)v57 = v8;
    memset(&v57[8], 0, 32);
    LOBYTE(v58) = 0;
    swift_retain(v8);
    v9 = sub_100003DB8(&qword_1003291D0);
    v10 = sub_100003DB8(&qword_1003291E8);
    v11 = sub_1001F5DA8();
    v12 = sub_1001F5E10();
    _ConditionalContent<>.init(storage:)(v57, v9, v10, v11, v12);
    v13 = v59;
    v14 = v60;
    v15 = v61;
    v16 = v62;
    *(_OWORD *)v57 = v59;
    *(_OWORD *)&v57[16] = v60;
    *(_QWORD *)&v57[32] = v61;
    v58 = v62;
    sub_1001F5F90(v59, *((uint64_t *)&v59 + 1), v60, *((uint64_t *)&v60 + 1), v61, v62);
    v54 = sub_100003DB8(&qword_1003291C0);
    v17 = sub_100003DB8(&qword_100329210);
    v18 = sub_1001F5D84();
    v19 = sub_1001F5ED8();
    _ConditionalContent<>.init(storage:)(v57, v54, v17, v18, v19);
    swift_release(v8);
    result = sub_1001F5FEC(v13, *((uint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, v16);
    v20 = v59;
    v21 = v60;
    v22 = v61;
    v23 = v62;
    if (v63)
      v24 = 256;
    else
      v24 = 0;
    goto LABEL_14;
  }
  v34 = type metadata accessor for TryOutTranscriptMessageItem(0);
  v35 = swift_dynamicCastClass(v5, v34);
  v56 = a4;
  if (v35)
  {
    v36 = (_QWORD *)swift_allocObject(&unk_1002F96C8, 40, 7);
    v36[2] = a2;
    v36[3] = a3;
    v36[4] = v35;
    v37 = swift_retain(a2);
    swift_retain_n(v5, v37);
    v38 = sub_1001F6024;
  }
  else
  {
    v38 = 0;
    v36 = 0;
  }
  v53 = (uint64_t)v36;
  v55 = (uint64_t)v38;
  *(_QWORD *)v57 = v35;
  *(_QWORD *)&v57[8] = v38;
  *(_OWORD *)&v57[24] = 0uLL;
  *(_QWORD *)&v57[16] = v36;
  LOBYTE(v58) = 1;
  sub_1001F5F40(v35, (uint64_t)v38, (uint64_t)v36, 0, 0);
  v39 = sub_100003DB8(&qword_1003291D0);
  v40 = sub_100003DB8(&qword_1003291E8);
  v41 = sub_1001F5DA8();
  v42 = sub_1001F5E10();
  _ConditionalContent<>.init(storage:)(v57, v39, v40, v41, v42);
  v43 = v59;
  v44 = v60;
  v45 = v61;
  v46 = v62;
  *(_OWORD *)v57 = v59;
  *(_OWORD *)&v57[16] = v60;
  *(_QWORD *)&v57[32] = v61;
  v58 = v62;
  sub_1001F5F90(v59, *((uint64_t *)&v59 + 1), v60, *((uint64_t *)&v60 + 1), v61, v62);
  v47 = sub_100003DB8(&qword_1003291C0);
  v48 = v35;
  v49 = sub_100003DB8(&qword_100329210);
  v50 = sub_1001F5D84();
  v51 = sub_1001F5ED8();
  _ConditionalContent<>.init(storage:)(v57, v47, v49, v50, v51);
  sub_1001F5F9C(v48, v55, v53, 0, 0);
  result = sub_1001F5FEC(v43, *((uint64_t *)&v43 + 1), v44, *((uint64_t *)&v44 + 1), v45, v46);
  v20 = v59;
  v21 = v60;
  v22 = v61;
  if (v63)
    v52 = 256;
  else
    v52 = 0;
  v31 = v52 | v62;
  a4 = v56;
LABEL_23:
  *(_OWORD *)a4 = v20;
  *(_OWORD *)(a4 + 16) = v21;
  *(_QWORD *)(a4 + 32) = v22;
  *(_WORD *)(a4 + 40) = v31;
  return result;
}

uint64_t sub_1001F4580(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  if (result)
  {
    v3 = *(_QWORD *)(result + 96);
    if (v3)
    {
      v4 = *(_QWORD *)(v3 + 16);
      if (v4)
      {
        v5 = a3 + OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id;
        swift_retain(*(_QWORD *)(result + 96));
        swift_retain(v4);
        sub_10003ACD0(v5);
        swift_release(v3);
        return swift_release(v4);
      }
    }
  }
  else
  {
    v7 = type metadata accessor for TryOutModel(0);
    v8 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v7, v8);
    __break(1u);
  }
  return result;
}

uint64_t sub_1001F4638@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_1001F3F84(*v1, v1[1], a1);
}

uint64_t sub_1001F4644()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1001F54F8();
  result = VerticalAlignment.init(_:)(&_s30WarningBannerVerticalAlignmentON, v0);
  qword_100328F18 = result;
  return result;
}

uint64_t sub_1001F4670()
{
  unint64_t v0;
  uint64_t result;

  v0 = sub_1001F553C();
  result = HorizontalAlignment.init(_:)(&_s32WarningBannerHorizontalAlignmentON, v0);
  qword_100328F20 = result;
  return result;
}

uint64_t sub_1001F469C()
{
  uint64_t v0;
  uint64_t result;

  if (qword_100315990 != -1)
    result = swift_once(&qword_100315990, sub_1001F4670);
  v0 = qword_100328F20;
  if (qword_100315988 != -1)
    result = swift_once(&qword_100315988, sub_1001F4644);
  *(_QWORD *)&xmmword_100328F28 = v0;
  *((_QWORD *)&xmmword_100328F28 + 1) = qword_100328F18;
  return result;
}

void sub_1001F4720(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v3;
  double v4;
  uint64_t v5;

  v3 = static Color.clear.getter(a2);
  v4 = GeometryProxy.size.getter();
  *(_QWORD *)a1 = v3;
  *(double *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
}

void sub_1001F475C()
{
  xmmword_100328F38 = 0uLL;
}

double sub_1001F476C@<D0>(_OWORD *a1@<X8>)
{
  double result;

  if (qword_1003159A0 != -1)
    swift_once(&qword_1003159A0, sub_1001F475C);
  result = *(double *)&xmmword_100328F38;
  *a1 = xmmword_100328F38;
  return result;
}

uint64_t sub_1001F47C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = type metadata accessor for AppEvents();
  v3 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  v4 = EnvironmentObject.init()(v2, v3);
  v6 = v5;
  v7 = type metadata accessor for TryOutModel(0);
  v8 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
  v9 = EnvironmentObject.init()(v7, v8);
  v11 = v10;
  v22 = 0;
  State.init(wrappedValue:)(&v23, &v22, &type metadata for Double);
  v12 = v23;
  v13 = v24;
  v22 = 0;
  State.init(wrappedValue:)(&v23, &v22, &type metadata for Double);
  v14 = v23;
  v15 = v24;
  LOBYTE(v22) = 0;
  v16 = State.init(wrappedValue:)(&v23, &v22, &type metadata for Bool);
  v17 = v23;
  v18 = v24;
  result = FocusState.init<>()(v16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v11;
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 40) = v13;
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 56) = v15;
  *(_BYTE *)(a1 + 64) = v17;
  *(_QWORD *)(a1 + 72) = v18;
  *(_BYTE *)(a1 + 80) = result & 1;
  *(_QWORD *)(a1 + 88) = v20;
  *(_BYTE *)(a1 + 96) = v21 & 1;
  *(_QWORD *)(a1 + 104) = 0;
  return result;
}

uint64_t destroy for TryOutTranscriptView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[5]);
  swift_release(a1[7]);
  swift_release(a1[9]);
  return swift_release(a1[11]);
}

uint64_t initializeWithCopy for TryOutTranscriptView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  v7 = a2[5];
  v6 = a2[6];
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v6;
  v8 = a2[7];
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  v9 = a2[9];
  *(_QWORD *)(a1 + 72) = v9;
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  v10 = a2[11];
  *(_QWORD *)(a1 + 88) = v10;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a2 + 96);
  *(_QWORD *)(a1 + 104) = a2[13];
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  return a1;
}

uint64_t *assignWithCopy for TryOutTranscriptView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  a1[4] = a2[4];
  v8 = a1[5];
  v9 = a2[5];
  a1[5] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[6] = a2[6];
  v10 = a1[7];
  v11 = a2[7];
  a1[7] = v11;
  swift_retain(v11);
  swift_release(v10);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  v12 = a1[9];
  v13 = a2[9];
  a1[9] = v13;
  swift_retain(v13);
  swift_release(v12);
  *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
  v14 = a1[11];
  v15 = a2[11];
  a1[11] = v15;
  swift_retain(v15);
  swift_release(v14);
  *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
  a1[13] = a2[13];
  return a1;
}

uint64_t *assignWithTake for TryOutTranscriptView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  a1[3] = a2[3];
  a1[4] = a2[4];
  v7 = a1[5];
  a1[5] = a2[5];
  swift_release(v7);
  a1[6] = a2[6];
  v8 = a1[7];
  a1[7] = a2[7];
  swift_release(v8);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  v9 = a1[9];
  a1[9] = a2[9];
  swift_release(v9);
  *((_BYTE *)a1 + 80) = *((_BYTE *)a2 + 80);
  v10 = a1[11];
  a1[11] = a2[11];
  swift_release(v10);
  *((_BYTE *)a1 + 96) = *((_BYTE *)a2 + 96);
  a1[13] = a2[13];
  return a1;
}

ValueMetadata *type metadata accessor for TryOutTranscriptView()
{
  return &type metadata for TryOutTranscriptView;
}

uint64_t sub_1001F4BE4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029FD20, 1);
}

void sub_1001F4BF8(uint64_t a1, __int16 *a2)
{
  uint64_t v2;

  sub_1001F31CC(a1, a2, v2 + 16);
}

uint64_t *sub_1001F4C00(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[9];
  swift_retain(a1[11]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t sub_1001F4C78()
{
  uint64_t v0;

  return sub_1001F305C(v0 + 16);
}

void sub_1001F4C84(double a1, uint64_t a2, _BYTE *a3)
{
  sub_1001F3144(a1, a2, a3);
}

uint64_t sub_1001F4C8C()
{
  return sub_1001F4CA8(&qword_100328FB0, &qword_100328FB8, (void (*)(void))sub_1001F4D14);
}

uint64_t sub_1001F4CA8(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007FAC(a2);
    a3();
    sub_1001F4D58();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1001F4D14()
{
  unint64_t result;

  result = qword_100328FC0;
  if (!qword_100328FC0)
  {
    result = swift_getWitnessTable(&unk_10025E744, &type metadata for TryOutTranscriptWarningView);
    atomic_store(result, (unint64_t *)&qword_100328FC0);
  }
  return result;
}

unint64_t sub_1001F4D58()
{
  unint64_t result;

  result = qword_100328FC8;
  if (!qword_100328FC8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AlignmentWritingModifier, &type metadata for _AlignmentWritingModifier);
    atomic_store(result, (unint64_t *)&qword_100328FC8);
  }
  return result;
}

unint64_t sub_1001F4D9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100328FD0;
  if (!qword_100328FD0)
  {
    v1 = sub_100007FAC((uint64_t *)&unk_1003263F0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100328FD0);
  }
  return result;
}

uint64_t sub_1001F4DF8()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;

  v4 = *(_OWORD *)(*(_QWORD *)(v0 + 16) + 64);
  v3 = 0;
  v1 = sub_100003DB8(&qword_100316780);
  return State.wrappedValue.setter(&v3, v1);
}

uint64_t *sub_1001F4E50@<X0>(uint64_t a1@<X0>, uint64_t (**a2)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  uint64_t v2;

  return sub_1001F166C(a1, v2 + 16, a2);
}

uint64_t sub_1001F4E5C()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;
  char v5;

  v4 = *(_OWORD *)(v0 + 96);
  v5 = *(_BYTE *)(v0 + 112);
  v3 = 0;
  v1 = sub_100003DB8(&qword_100328F68);
  return FocusState.wrappedValue.setter(&v3, v1);
}

unint64_t sub_1001F4EB0()
{
  unint64_t result;

  result = qword_100329058;
  if (!qword_100329058)
  {
    result = swift_getWitnessTable(&unk_1002504C0, &type metadata for TryOutMessageEntryViewHeader);
    atomic_store(result, (unint64_t *)&qword_100329058);
  }
  return result;
}

uint64_t sub_1001F4EF8(double a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  double v5;
  __int128 v6;

  v6 = *(_OWORD *)(v2 + 64);
  v5 = a2;
  v3 = sub_100003DB8(&qword_1003290B8);
  return State.wrappedValue.setter(&v5, v3);
}

uint64_t sub_1001F4F40()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001F4F64(double *a1)
{
  uint64_t v1;

  return sub_10002EB1C(a1, *(uint64_t (**)(double, double))(v1 + 16));
}

unint64_t sub_1001F4F6C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100329070;
  if (!qword_100329070)
  {
    v1 = sub_100007FAC(&qword_100329068);
    sub_1001F4FF0();
    sub_1000084FC(&qword_1003290A0, &qword_1003290A8, (uint64_t)&protocol conformance descriptor for _PreferenceActionModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100329070);
  }
  return result;
}

unint64_t sub_1001F4FF0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100329078;
  if (!qword_100329078)
  {
    v1 = sub_100007FAC(&qword_100329080);
    sub_1001F5074();
    sub_1000084FC(&qword_100329090, &qword_100329098, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100329078);
  }
  return result;
}

unint64_t sub_1001F5074()
{
  unint64_t result;

  result = qword_100329088;
  if (!qword_100329088)
  {
    result = swift_getWitnessTable(&unk_100250470, &type metadata for TryOutMessageEntryView);
    atomic_store(result, (unint64_t *)&qword_100329088);
  }
  return result;
}

uint64_t *sub_1001F50B8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[9];
  v8 = a1[10];
  v9 = a1[12];
  swift_release(a1[16]);
  swift_release(v9);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v5);
  swift_release(v4);
  swift_release(v2);
  swift_release(v3);
  swift_release(v6);
  swift_release(v8);
  return a1;
}

uint64_t sub_1001F5154()
{
  return sub_1001F52B0((uint64_t (*)(_QWORD))&type metadata accessor for GeometryProxy);
}

uint64_t sub_1001F5160@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  double v7;

  v5 = *(_QWORD *)(type metadata accessor for GeometryProxy(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return sub_1001F1774(a1, v2 + v6, v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8), a2, v7);
}

_QWORD *sub_1001F51C0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001F1E84(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_1001F51C8()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for ScrollViewProxy(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 128) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*((_QWORD *)v0 + 2));
  swift_release(*((_QWORD *)v0 + 4));
  swift_release(*((_QWORD *)v0 + 7));
  swift_release(*((_QWORD *)v0 + 9));
  swift_release(*((_QWORD *)v0 + 11));
  swift_release(*((_QWORD *)v0 + 13));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1001F5264(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for ScrollViewProxy(0) - 8) + 80);
  return sub_1001F2324(a1, (_QWORD *)(v1 + 16), v1 + ((v3 + 128) & ~v3));
}

uint64_t sub_1001F52A4()
{
  return sub_1001F52B0((uint64_t (*)(_QWORD))&type metadata accessor for ScrollViewProxy);
}

uint64_t sub_1001F52B0(uint64_t (*a1)(_QWORD))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;

  v2 = a1(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v4 | 7;
  v7 = (*(_QWORD *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = v7 + 112;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  v9 = (_QWORD *)(v1 + v7);
  swift_release(*v9);
  swift_release(v9[2]);
  swift_release(v9[5]);
  swift_release(v9[7]);
  swift_release(v9[9]);
  swift_release(v9[11]);
  return swift_deallocObject(v1, v8, v6);
}

uint64_t sub_1001F5354()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(type metadata accessor for ScrollViewProxy(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1001F26FC(v0 + v2, v0 + ((*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
}

uint64_t sub_1001F5398(uint64_t a1)
{
  uint64_t v1;

  return sub_1001F2764(a1, v1 + 16);
}

uint64_t sub_1001F53A0()
{
  uint64_t v0;

  return sub_1001F267C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

_QWORD *sub_1001F53B8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[18];
  v3 = a1[22];
  swift_retain(a1[15]);
  swift_retain(v2);
  swift_retain(v3);
  return a1;
}

_QWORD *sub_1001F5400(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[15];
  v3 = a1[18];
  swift_release(a1[22]);
  swift_release(v3);
  swift_release(v2);
  return a1;
}

uint64_t sub_1001F544C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  swift_release(v0[11]);
  swift_release(v0[13]);
  return swift_deallocObject(v0, 128, 7);
}

uint64_t sub_1001F5498()
{
  return sub_1001F22C4();
}

uint64_t sub_1001F54A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v1 = *(_QWORD *)(v0 + 32);
  v5 = *(_OWORD *)(*(_QWORD *)(v0 + 16) + 32);
  v4 = v1;
  v2 = sub_100003DB8(&qword_1003290B8);
  return State.wrappedValue.setter(&v4, v2);
}

unint64_t sub_1001F54F8()
{
  unint64_t result;

  result = qword_100329110;
  if (!qword_100329110)
  {
    result = swift_getWitnessTable(&unk_10025E714, &_s30WarningBannerVerticalAlignmentON);
    atomic_store(result, (unint64_t *)&qword_100329110);
  }
  return result;
}

unint64_t sub_1001F553C()
{
  unint64_t result;

  result = qword_100329118;
  if (!qword_100329118)
  {
    result = swift_getWitnessTable(&unk_10025E6E4, &_s32WarningBannerHorizontalAlignmentON);
    atomic_store(result, (unint64_t *)&qword_100329118);
  }
  return result;
}

ValueMetadata *_s32WarningBannerHorizontalAlignmentOMa()
{
  return &_s32WarningBannerHorizontalAlignmentON;
}

ValueMetadata *_s30WarningBannerVerticalAlignmentOMa()
{
  return &_s30WarningBannerVerticalAlignmentON;
}

uint64_t sub_1001F55A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for TryOutTranscriptWarningView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  return a1;
}

uint64_t assignWithTake for TryOutTranscriptWarningView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_release(*(_QWORD *)a1);
  v4 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

ValueMetadata *type metadata accessor for TryOutTranscriptWarningView()
{
  return &type metadata for TryOutTranscriptWarningView;
}

ValueMetadata *type metadata accessor for SizePreferenceKey()
{
  return &type metadata for SizePreferenceKey;
}

ValueMetadata *type metadata accessor for TryOutTranscriptItemsView()
{
  return &type metadata for TryOutTranscriptItemsView;
}

uint64_t sub_1001F56B8()
{
  _QWORD v1[4];

  v1[0] = sub_100007FAC(&qword_100328F48);
  v1[1] = sub_100007FAC(&qword_10031CBD8);
  v1[2] = sub_1000084FC(&qword_100328F60, &qword_100328F48, (uint64_t)&protocol conformance descriptor for ZStack<A>);
  v1[3] = sub_10003418C((unint64_t *)&qword_10031CBE0, &qword_10031CBD8, (void (*)(void))sub_100099F80, (uint64_t)&protocol conformance descriptor for <A> A?);
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t sub_1001F5760(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029FD70, 1);
}

uint64_t sub_1001F5770(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029FD48, 1);
}

uint64_t sub_1001F5780(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 192);
  v4 = *(_QWORD *)(a1 + 216);
  v5 = *(_QWORD *)(a1 + 224);
  v6 = *(_QWORD *)(a1 + 232);
  v7 = *(_QWORD *)(a1 + 240);
  v8 = *(_QWORD *)(a1 + 248);
  v9 = *(_BYTE *)(a1 + 256);
  v10 = *(_QWORD *)(a1 + 264);
  sub_10002B750(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  swift_retain(v6);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  sub_10002B750(v7, v8, v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t sub_1001F582C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 168);
  v4 = *(_QWORD *)(a1 + 192);
  v5 = *(_QWORD *)(a1 + 200);
  v6 = *(_QWORD *)(a1 + 208);
  v7 = *(_QWORD *)(a1 + 216);
  v8 = *(_QWORD *)(a1 + 224);
  v9 = *(_BYTE *)(a1 + 232);
  v10 = *(_QWORD *)(a1 + 240);
  sub_10002B438(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v6);
  sub_10002B438(v7, v8, v9);
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t sub_1001F58D8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1001F5904(double a1)
{
  return sub_1001F3F18(a1);
}

unint64_t sub_1001F5910()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100329150;
  if (!qword_100329150)
  {
    v1 = sub_100007FAC(&qword_100329148);
    sub_1001F59B4(&qword_100329158, &qword_100329160, &qword_100329168, &qword_100329170);
    sub_1000084FC(&qword_100329178, &qword_100329140, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100329150);
  }
  return result;
}

uint64_t sub_1001F59B4(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100007FAC(a2);
    sub_1000084FC(a3, a4, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1001F5A34()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  uint64_t v3;
  __n128 v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = *(_BYTE *)(v0 + 32);
  v7 = *(_QWORD *)(v0 + 16);
  v8 = v1;
  v9 = v2;
  v6 = 0;
  v3 = sub_100003DB8(&qword_100329180);
  return Binding.wrappedValue.setter(&v6, v3, v4);
}

uint64_t sub_1001F5A8C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 168);
  v4 = *(_QWORD *)(a1 + 192);
  v5 = *(_QWORD *)(a1 + 200);
  v6 = *(_QWORD *)(a1 + 208);
  sub_10002B750(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_retain(v6);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t sub_1001F5B04(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_10002B750(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  return a1;
}

uint64_t sub_1001F5B40(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 24);
  sub_10002B438(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1001F5B7C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 168);
  v4 = *(_QWORD *)(a1 + 192);
  v5 = *(_QWORD *)(a1 + 200);
  v6 = *(_QWORD *)(a1 + 208);
  sub_10002B438(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_BYTE *)(a1 + 40));
  swift_release(v5);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v6);
  return a1;
}

uint64_t sub_1001F5C04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 144);
  sub_10002B750(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t sub_1001F5C54(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 144);
  sub_10002B438(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1001F5CA4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1001F5CD4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1001F5CF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_1001F413C(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

unint64_t sub_1001F5D00()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003291A0;
  if (!qword_1003291A0)
  {
    v1 = sub_100007FAC(&qword_100329190);
    sub_100008140(&qword_1003291A8, &qword_1003291B0, (void (*)(void))sub_1001F5D84, (void (*)(void))sub_1001F5ED8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1003291A0);
  }
  return result;
}

uint64_t sub_1001F5D84()
{
  return sub_100008140(&qword_1003291B8, &qword_1003291C0, (void (*)(void))sub_1001F5DA8, (void (*)(void))sub_1001F5E10);
}

uint64_t sub_1001F5DA8()
{
  return sub_10003418C(&qword_1003291C8, &qword_1003291D0, (void (*)(void))sub_1001F5DCC, (uint64_t)&protocol conformance descriptor for <A> A?);
}

unint64_t sub_1001F5DCC()
{
  unint64_t result;

  result = qword_1003291D8;
  if (!qword_1003291D8)
  {
    result = swift_getWitnessTable(&unk_10025D43C, &type metadata for TryOutTranscriptStatusView);
    atomic_store(result, (unint64_t *)&qword_1003291D8);
  }
  return result;
}

unint64_t sub_1001F5E10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003291E0;
  if (!qword_1003291E0)
  {
    v1 = sub_100007FAC(&qword_1003291E8);
    sub_10002B614(&qword_1003291F0, &qword_1003291F8, (void (*)(void))sub_1001F5E94);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1003291E0);
  }
  return result;
}

unint64_t sub_1001F5E94()
{
  unint64_t result;

  result = qword_100329200;
  if (!qword_100329200)
  {
    result = swift_getWitnessTable(&unk_10025D3EC, &type metadata for TryOutTranscriptMessageView);
    atomic_store(result, (unint64_t *)&qword_100329200);
  }
  return result;
}

uint64_t sub_1001F5ED8()
{
  return sub_10003418C(&qword_100329208, &qword_100329210, (void (*)(void))sub_1001F5EFC, (uint64_t)&protocol conformance descriptor for <A> A?);
}

unint64_t sub_1001F5EFC()
{
  unint64_t result;

  result = qword_100329218;
  if (!qword_100329218)
  {
    result = swift_getWitnessTable(&unk_10025D39C, &type metadata for TryOutTranscriptFooterView);
    atomic_store(result, (unint64_t *)&qword_100329218);
  }
  return result;
}

uint64_t sub_1001F5F40(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_retain(result);
    sub_100018F00(a2, a3);
    return sub_100018F00(a4, a5);
  }
  return result;
}

double sub_1001F5F90(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  double v6;

  if ((a6 & 1) != 0)
    sub_1001F5F40(result, a2, a3, a4, a5);
  else
    *(_QWORD *)&v6 = swift_retain(result).n128_u64[0];
  return v6;
}

uint64_t sub_1001F5F9C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (result)
  {
    swift_release(result);
    sub_10004DA00(a2, a3);
    return sub_10004DA00(a4, a5);
  }
  return result;
}

uint64_t sub_1001F5FEC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  if ((a6 & 1) != 0)
    return sub_1001F5F9C(result, a2, a3, a4, a5);
  else
    return swift_release(result);
}

uint64_t sub_1001F5FF8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1001F6024()
{
  uint64_t *v0;

  return sub_1001F4580(v0[2], v0[3], v0[4]);
}

uint64_t sub_1001F6030()
{
  return sub_10002B614(&qword_100329220, &qword_100329138, (void (*)(void))sub_1001F6064);
}

unint64_t sub_1001F6064()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100329228;
  if (!qword_100329228)
  {
    v1 = sub_100007FAC(&qword_100329128);
    sub_1000084FC(&qword_100329230, &qword_100329120, (uint64_t)&protocol conformance descriptor for VStack<A>);
    sub_1000084FC(&qword_100329238, &qword_100329240, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100329228);
  }
  return result;
}

uint64_t sub_1001F6100()
{
  return sub_10003418C(&qword_100329248, &qword_100329188, (void (*)(void))sub_1001F5D00, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
}

uint64_t destroy for TryOutContinueButtonView(uint64_t a1)
{
  sub_100040294(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  sub_100040294(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  swift_release(*(_QWORD *)(a1 + 56));
  swift_release(*(_QWORD *)(a1 + 72));
  return swift_release(*(_QWORD *)(a1 + 88));
}

uint64_t initializeWithCopy for TryOutContinueButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_100040244(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  v6 = *(_QWORD *)(a2 + 16);
  v7 = *(_BYTE *)(a2 + 24);
  sub_100040244(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v9;
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v10 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v10;
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v11 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v11;
  swift_bridgeObjectRetain(v9);
  swift_retain(v8);
  swift_retain(v10);
  swift_retain(v11);
  return a1;
}

uint64_t assignWithCopy for TryOutContinueButtonView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *(_QWORD *)a2;
  v5 = *(_BYTE *)(a2 + 8);
  sub_100040244(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_100040294(v6, v7);
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_BYTE *)(a2 + 24);
  sub_100040244(v8, v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v8;
  *(_BYTE *)(a1 + 24) = v9;
  sub_100040294(v10, v11);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v12 = *(_QWORD *)(a2 + 40);
  v13 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v14;
  swift_retain(v14);
  swift_release(v15);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v16 = *(_QWORD *)(a1 + 72);
  v17 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 72) = v17;
  swift_retain(v17);
  swift_release(v16);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  v18 = *(_QWORD *)(a1 + 88);
  v19 = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 88) = v19;
  swift_retain(v19);
  swift_release(v18);
  return a1;
}

uint64_t assignWithTake for TryOutContinueButtonView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  v6 = *(_QWORD *)a1;
  v7 = *(_BYTE *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 8) = v5;
  sub_100040294(v6, v7);
  v8 = *((_BYTE *)a2 + 24);
  v9 = *(_QWORD *)(a1 + 16);
  v10 = *(_BYTE *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_BYTE *)(a1 + 24) = v8;
  sub_100040294(v9, v10);
  *(_QWORD *)(a1 + 32) = a2[4];
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v11 = a2[7];
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  v12 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v11;
  swift_release(v12);
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  v13 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = a2[9];
  swift_release(v13);
  *(_BYTE *)(a1 + 80) = *((_BYTE *)a2 + 80);
  v14 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = a2[11];
  swift_release(v14);
  return a1;
}

uint64_t getEnumTagSinglePayload for TryOutContinueButtonView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 96))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TryOutContinueButtonView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 96) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TryOutContinueButtonView()
{
  return &type metadata for TryOutContinueButtonView;
}

uint64_t sub_1001F64A4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029FDB4, 1);
}

uint64_t sub_1001F64B4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t KeyPath;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  _OWORD *v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  unint64_t v90;
  char *v91;
  __n128 v92;
  uint64_t (*v93)();
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t (**v100)();
  char *v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130[16];
  uint64_t v131;
  __int128 v132;
  uint64_t v133;

  v2 = v1;
  v129 = a1;
  v3 = type metadata accessor for KeyboardShortcut(0);
  v120 = *(_QWORD *)(v3 - 8);
  v121 = v3;
  __chkstk_darwin(v3, v4);
  v117 = (char *)&v102 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for ButtonBorderShape(0);
  v115 = *(_QWORD *)(v116 - 8);
  __chkstk_darwin(v116, v6);
  v114 = (char *)&v102 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for BorderedProminentButtonStyle(0);
  v113 = *(_QWORD *)(v112 - 8);
  __chkstk_darwin(v112, v8);
  v109 = (char *)&v102 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ControlSize(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = v10;
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v102 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100003DB8(&qword_100320188);
  v105 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106, v16);
  v18 = (char *)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_100003DB8(&qword_100320190);
  __chkstk_darwin(v103, v19);
  v21 = (char *)&v102 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_100003DB8(&qword_100320198);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111, v22);
  v104 = (char *)&v102 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_100003DB8(&qword_1003201A0);
  __chkstk_darwin(v108, v24);
  v107 = (char *)&v102 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_100003DB8(&qword_1003201A8);
  v118 = *(_QWORD *)(v26 - 8);
  v119 = v26;
  __chkstk_darwin(v26, v27);
  v102 = (char *)&v102 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = sub_100003DB8(&qword_1003201B0);
  __chkstk_darwin(v122, v29);
  v123 = (char *)&v102 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = sub_100003DB8(&qword_100329250);
  v127 = *(_QWORD *)(v31 - 8);
  v128 = v31;
  __chkstk_darwin(v31, v32);
  v126 = (char *)&v102 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = sub_100003DB8(&qword_100329258);
  __chkstk_darwin(v124, v34);
  v125 = (char *)&v102 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = *(_QWORD *)(v2 + 48);
  v36 = *(_QWORD *)(v2 + 56);
  v131 = v2;
  swift_retain(v36);
  v38 = sub_100003DB8(&qword_1003199C8);
  v39 = sub_10002B614(&qword_1003199E8, &qword_1003199C8, (void (*)(void))sub_100055918);
  Button.init(action:label:)(v37, v36, sub_1001F737C, v130, v38, v39);
  v40 = v12;
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v15, enum case for ControlSize.large(_:), v12);
  KeyPath = swift_getKeyPath(&unk_10025E890);
  v42 = v103;
  v43 = (uint64_t *)&v21[*(int *)(v103 + 36)];
  v44 = sub_100003DB8(&qword_100316C38);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))((char *)v43 + *(int *)(v44 + 28), v15, v40);
  *v43 = KeyPath;
  v45 = v105;
  v46 = v106;
  (*(void (**)(char *, char *, uint64_t))(v105 + 16))(v21, v18, v106);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v40);
  v47 = v18;
  v48 = v102;
  v49 = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v47, v46);
  v50 = v109;
  BorderedProminentButtonStyle.init()(v49);
  v51 = sub_100110BA0();
  v52 = sub_1000052EC(&qword_100318960, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v53 = v104;
  v54 = v112;
  View.buttonStyle<A>(_:)(v50, v42, v112, v51, v52);
  (*(void (**)(char *, uint64_t))(v113 + 8))(v50, v54);
  v55 = sub_100007FF0((uint64_t)v21, &qword_100320190);
  v56 = v114;
  static ButtonBorderShape.roundedRectangle.getter(v55);
  v57 = swift_getKeyPath(&unk_10025E8C0);
  v58 = v108;
  v59 = (uint64_t)v107;
  v60 = (uint64_t *)&v107[*(int *)(v108 + 36)];
  v61 = sub_100003DB8(&qword_100318968);
  v62 = v115;
  v63 = v116;
  (*(void (**)(char *, char *, uint64_t))(v115 + 16))((char *)v60 + *(int *)(v61 + 28), v56, v116);
  *v60 = v57;
  v64 = v110;
  v65 = v111;
  (*(void (**)(uint64_t, char *, uint64_t))(v110 + 16))(v59, v53, v111);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v56, v63);
  v66 = (*(uint64_t (**)(char *, uint64_t))(v64 + 8))(v53, v65);
  v67 = v117;
  static KeyboardShortcut.defaultAction.getter(v66);
  v68 = sub_100110D80();
  View.keyboardShortcut(_:)(v67, v58, v68);
  (*(void (**)(char *, uint64_t))(v120 + 8))(v67, v121);
  sub_100007FF0(v59, &qword_1003201A0);
  v132 = *(_OWORD *)(v2 + 80);
  v69 = sub_100003DB8(&qword_100316780);
  v70 = State.wrappedValue.getter(&v133, v69);
  if (v133 == 1)
  {
    v71 = static Color.white.getter(v70);
  }
  else
  {
    v72 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray4Color");
    v71 = Color.init(uiColor:)(v72);
  }
  v73 = v71;
  v74 = swift_getKeyPath(&unk_10025E8F0);
  *(_QWORD *)&v132 = v73;
  v75 = swift_retain(v73);
  v76 = AnyShapeStyle.init<A>(_:)(&v132, &type metadata for Color, &protocol witness table for Color, v75);
  v78 = v118;
  v77 = v119;
  v79 = (uint64_t)v123;
  (*(void (**)(char *, char *, uint64_t))(v118 + 16))(v123, v48, v119);
  swift_release(v73);
  v80 = v122;
  v81 = (uint64_t *)(v79 + *(int *)(v122 + 36));
  *v81 = v74;
  v81[1] = v76;
  (*(void (**)(char *, uint64_t))(v78 + 8))(v48, v77);
  v82 = *(_QWORD *)v2;
  LOBYTE(v74) = *(_BYTE *)(v2 + 8);
  sub_100040244(*(_QWORD *)v2, v74);
  LOBYTE(v76) = sub_100042548(v82, v74);
  sub_100040294(v82, v74);
  if ((v76 & 1) != 0)
  {
    v83 = 1;
  }
  else
  {
    v84 = *(_QWORD *)(v2 + 16);
    v85 = *(_BYTE *)(v2 + 24);
    sub_100040244(v84, v85);
    v83 = sub_100042548(v84, v85);
    sub_100040294(v84, v85);
  }
  LOBYTE(v132) = v83 & 1;
  v86 = (_OWORD *)swift_allocObject(&unk_1002F9810, 112, 7);
  v87 = *(_OWORD *)(v2 + 48);
  v86[3] = *(_OWORD *)(v2 + 32);
  v86[4] = v87;
  v88 = *(_OWORD *)(v2 + 80);
  v86[5] = *(_OWORD *)(v2 + 64);
  v86[6] = v88;
  v89 = *(_OWORD *)(v2 + 16);
  v86[1] = *(_OWORD *)v2;
  v86[2] = v89;
  sub_1001F73A8(v2);
  v90 = sub_100110EE4();
  v91 = v126;
  View.onChange<A>(of:initial:_:)(&v132, 0, sub_1001F73A0, v86, v80, &type metadata for Bool, v90, &protocol witness table for Bool, v92);
  swift_release(v86);
  sub_100007FF0(v79, &qword_1003201B0);
  v93 = (uint64_t (*)())swift_allocObject(&unk_1002F9838, 112, 7);
  v94 = *(_OWORD *)(v2 + 48);
  *((_OWORD *)v93 + 3) = *(_OWORD *)(v2 + 32);
  *((_OWORD *)v93 + 4) = v94;
  v95 = *(_OWORD *)(v2 + 80);
  *((_OWORD *)v93 + 5) = *(_OWORD *)(v2 + 64);
  *((_OWORD *)v93 + 6) = v95;
  v96 = *(_OWORD *)(v2 + 16);
  *((_OWORD *)v93 + 1) = *(_OWORD *)v2;
  *((_OWORD *)v93 + 2) = v96;
  v98 = v127;
  v97 = v128;
  v99 = (uint64_t)v125;
  (*(void (**)(char *, char *, uint64_t))(v127 + 16))(v125, v91, v128);
  v100 = (uint64_t (**)())(v99 + *(int *)(v124 + 36));
  *v100 = sub_1001F7488;
  v100[1] = v93;
  v100[2] = 0;
  v100[3] = 0;
  sub_1001F73A8(v2);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v91, v97);
  return sub_10000B458(v99, v129, &qword_100329258);
}

uint64_t sub_1001F6D34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t result;
  uint64_t v43;
  char *v44;
  uint64_t KeyPath;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  char v66;
  uint64_t v67;
  uint64_t v68;

  v64 = a2;
  v56 = sub_100003DB8(&qword_100316A20);
  __chkstk_darwin(v56, v3);
  v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8(&qword_1003199B0);
  v60 = *(_QWORD *)(v6 - 8);
  v61 = v6;
  __chkstk_darwin(v6, v7);
  v57 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100003DB8(&qword_1003199B8);
  __chkstk_darwin(v55, v9);
  v63 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003DB8(&qword_1003199C0);
  __chkstk_darwin(v11, v12);
  v62 = (uint64_t)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100003DB8(&qword_1003199C8);
  __chkstk_darwin(v58, v14);
  v59 = (uint64_t)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v65 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)&v65 + 1) = v16;
  v17 = sub_10002B3F4();
  v18 = swift_bridgeObjectRetain(v16);
  v19 = Text.init<A>(_:)(&v65, &type metadata for String, v17, v18);
  v21 = v20;
  v23 = v22;
  v25 = v24;
  v65 = *(_OWORD *)(a1 + 80);
  v26 = sub_100003DB8(&qword_100316780);
  v27 = State.wrappedValue.getter(&v68, v26);
  if (v68 == 1)
    v29 = static Color.black.getter(v28);
  else
    v29 = static Color.white.getter(v27);
  v30 = v29;
  v31 = v23 & 1;
  v32 = Text.foregroundColor(_:)(v29, v19, v21, v31, v25);
  v34 = v33;
  v36 = v35;
  v38 = v37;
  swift_release(v30);
  sub_10002B438(v19, v21, v31);
  swift_bridgeObjectRelease(v25);
  *(_QWORD *)&v65 = v32;
  *((_QWORD *)&v65 + 1) = v34;
  v66 = v36 & 1;
  v67 = v38;
  v39 = enum case for DynamicTypeSize.accessibility2(_:);
  v40 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 104))(v5, v39, v40);
  v41 = sub_1000052EC(&qword_100316A30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v5, v5, v40, v41);
  if ((result & 1) != 0)
  {
    v43 = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v44 = v57;
    View.dynamicTypeSize<A>(_:)(v5, &type metadata for Text, v56, &protocol witness table for Text, v43);
    sub_100007FF0((uint64_t)v5, &qword_100316A20);
    sub_10002B438(v65, *((uint64_t *)&v65 + 1), v66);
    swift_bridgeObjectRelease(v67);
    KeyPath = swift_getKeyPath(&unk_10025E920);
    v47 = v60;
    v46 = v61;
    v48 = (uint64_t)v63;
    (*(void (**)(char *, char *, uint64_t))(v60 + 16))(v63, v44, v61);
    v49 = v48 + *(int *)(v55 + 36);
    *(_QWORD *)v49 = KeyPath;
    *(_BYTE *)(v49 + 8) = 1;
    v50 = (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v44, v46);
    v51 = static Alignment.center.getter(v50);
    v52 = v62;
    sub_100131EE8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v62, 0.0, 1, 0.0, 1, v51, v53);
    sub_100007FF0(v48, &qword_1003199B8);
    v54 = v59;
    sub_1001F74F0(v52, v59);
    *(_WORD *)(v54 + *(int *)(v58 + 36)) = 256;
    sub_100007FF0(v52, &qword_1003199C0);
    return sub_10000B458(v54, v64, &qword_1003199C8);
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *sub_1001F7150(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 v14;

  v4 = *a2;
  v13 = *(_OWORD *)(a3 + 80);
  v14 = v13;
  v5 = sub_100003DB8(&qword_100316780);
  result = State.wrappedValue.getter(&v11, v5);
  if (v4 != v11)
  {
    v13 = *(_OWORD *)(a3 + 64);
    v11 = *(_OWORD *)(a3 + 64);
    v7 = State.wrappedValue.getter(&v12, v5);
    if (v12 == 1)
    {
      v11 = v14;
      v12 = v4;
      State.wrappedValue.setter(&v12, v5);
      v11 = v13;
      v12 = v4;
      return (_QWORD *)State.wrappedValue.setter(&v12, v5);
    }
    else
    {
      v9 = __chkstk_darwin(v7, v8);
      v10 = static Animation.default.getter(v9);
      withAnimation<A>(_:_:)(v10, sub_1001F7490);
      return (_QWORD *)swift_release(v10);
    }
  }
  return result;
}

uint64_t sub_1001F7278(uint64_t a1)
{
  uint64_t v2;
  char v3;
  char v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v10;
  __int128 v11;

  v2 = *(_QWORD *)a1;
  v3 = *(_BYTE *)(a1 + 8);
  sub_100040244(*(_QWORD *)a1, v3);
  v4 = sub_100042548(v2, v3);
  sub_100040294(v2, v3);
  if ((v4 & 1) != 0)
  {
    v5 = 1;
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 16);
    v7 = *(_BYTE *)(a1 + 24);
    sub_100040244(v6, v7);
    v5 = sub_100042548(v6, v7);
    sub_100040294(v6, v7);
  }
  v11 = *(_OWORD *)(a1 + 80);
  v10 = v5 & 1;
  v8 = sub_100003DB8(&qword_100316780);
  return State.wrappedValue.setter(&v10, v8);
}

uint64_t sub_1001F733C@<X0>(uint64_t a1@<X8>)
{
  return sub_1001F64B4(a1);
}

uint64_t sub_1001F737C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1001F6D34(*(_QWORD *)(v1 + 16), a1);
}

_QWORD *sub_1001F73A0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;

  return sub_1001F7150(a1, a2, v2 + 16);
}

uint64_t sub_1001F73A8(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_BYTE *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = *(_QWORD *)(a1 + 72);
  v7 = *(_QWORD *)(a1 + 88);
  sub_100040244(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  sub_100040244(v2, v3);
  swift_retain(v7);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t sub_1001F7434()
{
  uint64_t v0;

  sub_100040294(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
  sub_100040294(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 56));
  swift_release(*(_QWORD *)(v0 + 72));
  swift_release(*(_QWORD *)(v0 + 88));
  swift_release(*(_QWORD *)(v0 + 104));
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_1001F7488()
{
  uint64_t v0;

  return sub_1001F7278(v0 + 16);
}

uint64_t sub_1001F7490()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  char v4;
  __int128 v5;

  v1 = *(_BYTE *)(v0 + 24);
  v5 = *(_OWORD *)(*(_QWORD *)(v0 + 16) + 80);
  v4 = v1;
  v2 = sub_100003DB8(&qword_100316780);
  return State.wrappedValue.setter(&v4, v2);
}

uint64_t sub_1001F74F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_1003199C0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_1001F753C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100329260;
  if (!qword_100329260)
  {
    v1 = sub_100007FAC(&qword_100329258);
    v2[0] = sub_100007FAC(&qword_1003201B0);
    v2[1] = &type metadata for Bool;
    v2[2] = sub_100110EE4();
    v2[3] = &protocol witness table for Bool;
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100329260);
  }
  return result;
}

uint64_t UIContentSizeCategory.debugDescription.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryUnspecified);
  v4 = v3;
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v2 == v5 && v4 == v6)
  {
    swift_bridgeObjectRelease_n(v4, 2);
    return 20053;
  }
  v8 = v6;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v4, v5, v6, 0);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  if ((v9 & 1) != 0)
    return 20053;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryExtraSmall);
  v12 = v11;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v10 == v13 && v12 == v14)
  {
    swift_bridgeObjectRelease_n(v12, 2);
    return 21336;
  }
  v16 = v14;
  v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v12, v13, v14, 0);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v16);
  if ((v17 & 1) != 0)
    return 21336;
  v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategorySmall);
  v20 = v19;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v23 = v21;
  if (v18 == v22 && v20 == v21)
  {
    swift_bridgeObjectRelease_n(v20, 2);
    return 83;
  }
  v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v22, v21, 0);
  swift_bridgeObjectRelease(v20);
  swift_bridgeObjectRelease(v23);
  if ((v26 & 1) != 0)
    return 83;
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryMedium);
  v29 = v28;
  v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v32 = v30;
  if (v27 == v31 && v29 == v30)
  {
    swift_bridgeObjectRelease_n(v29, 2);
    return 77;
  }
  v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v27, v29, v31, v30, 0);
  swift_bridgeObjectRelease(v29);
  swift_bridgeObjectRelease(v32);
  if ((v33 & 1) != 0)
    return 77;
  v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryLarge);
  v36 = v35;
  v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v39 = v37;
  if (v34 == v38 && v36 == v37)
  {
    swift_bridgeObjectRelease_n(v36, 2);
    return 76;
  }
  v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v34, v36, v38, v37, 0);
  swift_bridgeObjectRelease(v36);
  swift_bridgeObjectRelease(v39);
  if ((v40 & 1) != 0)
    return 76;
  v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryExtraLarge);
  v43 = v42;
  v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v46 = v44;
  if (v41 == v45 && v43 == v44)
  {
    swift_bridgeObjectRelease_n(v43, 2);
    return 19544;
  }
  v47 = _stringCompareWithSmolCheck(_:_:expecting:)(v41, v43, v45, v44, 0);
  swift_bridgeObjectRelease(v43);
  swift_bridgeObjectRelease(v46);
  if ((v47 & 1) != 0)
    return 19544;
  v24 = 5003352;
  v48 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryExtraExtraLarge);
  v50 = v49;
  v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v48 == v52 && v50 == v51)
    goto LABEL_43;
  v53 = v48;
  v54 = v51;
  v55 = _stringCompareWithSmolCheck(_:_:expecting:)(v53, v50, v52, v51, 0);
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(v54);
  if ((v55 & 1) != 0)
    return v24;
  v24 = 1280858200;
  v56 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryExtraExtraExtraLarge);
  v50 = v57;
  v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v56 == v59 && v50 == v58)
    goto LABEL_43;
  v60 = v56;
  v61 = v58;
  v62 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v50, v59, v58, 0);
  swift_bridgeObjectRelease(v50);
  swift_bridgeObjectRelease(v61);
  if ((v62 & 1) != 0)
    return v24;
  v24 = 3233857;
  v63 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryAccessibilityMedium);
  v50 = v64;
  v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v67 = v65;
  if (v63 == v66 && v50 == v65)
  {
LABEL_43:
    swift_bridgeObjectRelease_n(v50, 2);
  }
  else
  {
    v68 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v50, v66, v65, 0);
    swift_bridgeObjectRelease(v50);
    swift_bridgeObjectRelease(v67);
    if ((v68 & 1) == 0)
    {
      v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryAccessibilityLarge);
      v71 = v70;
      v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
      v74 = v72;
      if (v69 == v73 && v71 == v72)
      {
        swift_bridgeObjectRelease_n(v71, 2);
        return 3299393;
      }
      else
      {
        v75 = _stringCompareWithSmolCheck(_:_:expecting:)(v69, v71, v73, v72, 0);
        swift_bridgeObjectRelease(v71);
        swift_bridgeObjectRelease(v74);
        if ((v75 & 1) != 0)
        {
          return 3299393;
        }
        else
        {
          v76 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryAccessibilityExtraLarge);
          v78 = v77;
          v80 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
          v81 = v79;
          if (v76 == v80 && v78 == v79)
          {
            swift_bridgeObjectRelease_n(v78, 2);
            return 3364929;
          }
          else
          {
            v82 = _stringCompareWithSmolCheck(_:_:expecting:)(v76, v78, v80, v79, 0);
            swift_bridgeObjectRelease(v78);
            swift_bridgeObjectRelease(v81);
            if ((v82 & 1) != 0)
            {
              return 3364929;
            }
            else
            {
              v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryAccessibilityExtraExtraLarge);
              v85 = v84;
              v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
              v88 = v86;
              if (v83 == v87 && v85 == v86)
              {
                swift_bridgeObjectRelease_n(v85, 2);
                return 3430465;
              }
              else
              {
                v89 = _stringCompareWithSmolCheck(_:_:expecting:)(v83, v85, v87, v86, 0);
                swift_bridgeObjectRelease(v85);
                swift_bridgeObjectRelease(v88);
                if ((v89 & 1) != 0)
                {
                  return 3430465;
                }
                else
                {
                  v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(UIContentSizeCategoryAccessibilityExtraExtraExtraLarge);
                  v92 = v91;
                  v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
                  v95 = v93;
                  if (v90 == v94 && v92 == v93)
                  {
                    swift_bridgeObjectRelease_n(v92, 2);
                    return 3496001;
                  }
                  else
                  {
                    v96 = _stringCompareWithSmolCheck(_:_:expecting:)(v90, v92, v94, v93, 0);
                    swift_bridgeObjectRelease(v92);
                    swift_bridgeObjectRelease(v95);
                    if ((v96 & 1) != 0)
                      return 3496001;
                    else
                      return 63;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return v24;
}

uint64_t sub_1001F7C94()
{
  uint64_t *v0;

  return UIContentSizeCategory.debugDescription.getter(*v0);
}

uint64_t sub_1001F7C9C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1001F7CD8 + 4 * byte_10025E980[a1]))(0x53746E6572727563, 0xEC00000065746174);
}

unint64_t sub_1001F7CD8()
{
  return 0xD000000000000014;
}

uint64_t sub_1001F7D48()
{
  unsigned __int8 *v0;

  return sub_1001F7C9C(*v0);
}

void sub_1001F7D50(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE v19[8];
  uint64_t v20;

  v3 = v2;
  v4 = *(_BYTE *)(v2 + 96);
  if ((a2 & 1) != 0)
  {
    if ((*(_BYTE *)(v2 + 96) & 1) != 0)
      return;
    goto LABEL_7;
  }
  if (*(_QWORD *)(v2 + 88) != a1)
    v4 = 1;
  if ((v4 & 1) != 0)
  {
LABEL_7:
    if (qword_100315838 != -1)
      swift_once(&qword_100315838, sub_1000D9630);
    v5 = type metadata accessor for Logger(0);
    sub_10000D744(v5, (uint64_t)qword_10033FD60);
    v7 = swift_retain_n(v2, v6);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      v11 = swift_slowAlloc(32, -1);
      *(_DWORD *)v10 = 136315138;
      v20 = v11;
      v12 = *(_BYTE *)(v3 + 96);
      v18 = *(_QWORD *)(v3 + 88);
      v19[0] = v12;
      v13 = sub_100003DB8(&qword_100319D40);
      v15 = String.init<A>(describing:)(&v18, v13, v14);
      v17 = v16;
      v18 = sub_100172BEC(v15, v16, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v10 + 4, v10 + 12);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v17);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Connectivity state generation = %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {

      swift_release_n(v3);
    }
  }
}

void sub_1001F7F34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  void *v15;
  _BYTE v17[24];

  v1 = sub_100003DB8(&qword_1003180C8);
  __chkstk_darwin(v1, v2);
  v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 32) = 0;
  swift_release(v6);
  v7 = *(_QWORD *)(v0 + 56);
  *(_QWORD *)(v0 + 56) = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease(v7);
  sub_1001F8B64();
  *(_BYTE *)(v0 + 64) = 2;
  sub_1001F8B64();
  *(_DWORD *)(v0 + 65) = 34144771;
  v8 = *(_QWORD *)(v0 + 72);
  *(_QWORD *)(v0 + 72) = 0;
  swift_bridgeObjectRelease(v8);
  *(_BYTE *)(v0 + 80) = 2;
  v9 = *(_QWORD *)(v0 + 88);
  v10 = *(_BYTE *)(v0 + 96);
  *(_QWORD *)(v0 + 88) = 0;
  *(_BYTE *)(v0 + 96) = 1;
  sub_1001F7D50(v9, v10);
  *(_BYTE *)(v0 + 97) = 2;
  v11 = type metadata accessor for DispatchTime(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v4, 1, 1, v11);
  v12 = v0 + OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__lastMainSceneIsExpectedToBeForegoundSoonAt;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__lastMainSceneIsExpectedToBeForegoundSoonAt, v17, 33, 0);
  sub_100025C08((uint64_t)v4, v12);
  *(_QWORD *)&v13 = swift_endAccess(v17).n128_u64[0];
  *(_BYTE *)(v0 + OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__everSeenConnectedInCone) = 2;
  v14 = OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__explorerConnectedTimer;
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__explorerConnectedTimer), "invalidate", v13);
  v15 = *(void **)(v0 + v14);
  *(_QWORD *)(v0 + v14) = 0;

}

uint64_t sub_1001F8088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t Strong;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t (*v28)(uint64_t, uint64_t, uint64_t);
  int v29;
  uint64_t *v30;
  char v31;
  char v32;
  _BYTE v35[24];

  v1 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = &v35[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = sub_100003DB8(&qword_1003295F8);
  __chkstk_darwin(v6, v7);
  v9 = &v35[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v10 = sub_100003DB8(&qword_100316AD8);
  __chkstk_darwin(v10, v11);
  v13 = &v35[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v14, v15);
  v17 = &v35[-v16 - 8];
  __chkstk_darwin(v18, v19);
  v21 = &v35[-v20 - 8];
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 32);
  if (Strong)
  {
    v23 = Strong;
    v24 = *(_QWORD *)(Strong + 40);
    swift_retain(v24);
    swift_unknownObjectRelease(v23);
    v25 = v24 + OBJC_IVAR____TtC8SOSBuddy21BannerAppearanceModel_bannerMode;
    swift_beginAccess(v24 + OBJC_IVAR____TtC8SOSBuddy21BannerAppearanceModel_bannerMode, v35, 0, 0);
    sub_10000B234(v25, (uint64_t)v21, &qword_100316AD8);
    swift_release(v24);
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
  }
  else
  {
    v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    v26(v21, 1, 1, v1);
  }
  swift_storeEnumTagMultiPayload(v17, v1, 5);
  v26(v17, 0, 1, v1);
  v27 = (uint64_t)&v9[*(int *)(v6 + 48)];
  sub_10000B234((uint64_t)v21, (uint64_t)v9, &qword_100316AD8);
  sub_10000B234((uint64_t)v17, v27, &qword_100316AD8);
  v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v28((uint64_t)v9, 1, v1) == 1)
  {
    sub_100007FF0((uint64_t)v17, &qword_100316AD8);
    sub_100007FF0((uint64_t)v21, &qword_100316AD8);
    v29 = v28(v27, 1, v1);
    if (v29 == 1)
      v30 = &qword_100316AD8;
    else
      v30 = &qword_1003295F8;
    if (v29 == 1)
      v31 = -1;
    else
      v31 = 0;
  }
  else
  {
    sub_10000B234((uint64_t)v9, (uint64_t)v13, &qword_100316AD8);
    if (v28(v27, 1, v1) == 1)
    {
      sub_100007FF0((uint64_t)v17, &qword_100316AD8);
      sub_100007FF0((uint64_t)v21, &qword_100316AD8);
      sub_1001FC220((uint64_t)v13);
      v31 = 0;
      v30 = &qword_1003295F8;
    }
    else
    {
      sub_1001FC25C(v27, (uint64_t)v5);
      sub_10019E824((uint64_t)v13, (uint64_t)v5);
      v31 = v32;
      sub_1001FC220((uint64_t)v5);
      v30 = &qword_100316AD8;
      sub_100007FF0((uint64_t)v17, &qword_100316AD8);
      sub_100007FF0((uint64_t)v21, &qword_100316AD8);
      sub_1001FC220((uint64_t)v13);
    }
  }
  sub_100007FF0((uint64_t)v9, v30);
  return v31 & 1;
}

uint64_t sub_1001F83A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  unsigned int v11;

  v1 = v0 + 32;
  result = swift_unknownObjectWeakLoadStrong(v0 + 32);
  if (result)
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 32);
    swift_retain(v4);
    swift_unknownObjectRelease(v3);
    LOBYTE(v3) = *(_BYTE *)(v4 + 42);
    swift_release(v4);
    if ((v3 & 1) == 0)
      return 0;
    if ((sub_1001F8088() & 1) != 0)
    {
      v5 = *(_BYTE *)(v0 + OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__everSeenConnectedInCone);
      Strong = swift_unknownObjectWeakLoadStrong(v1);
      v7 = Strong;
      if ((v5 & 1) != 0)
      {
        if (Strong)
        {
          v10 = *(_QWORD *)(*(_QWORD *)(Strong + 48) + 96);
          swift_retain(v10);
          swift_unknownObjectRelease(v7);
          v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 48) + 120);
          swift_release(v10);
          return v11 > 1;
        }
      }
      else if (Strong)
      {
        v8 = *(_QWORD *)(*(_QWORD *)(Strong + 48) + 96);
        swift_retain(v8);
        swift_unknownObjectRelease(v7);
        v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 48) + 120);
        swift_release(v8);
        return v9 != 0;
      }
    }
    return 1;
  }
  return result;
}

void sub_1001F849C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  v5 = *(_QWORD *)(v2 + 56);
  v23 = v5;
  if (a1)
  {
    swift_bridgeObjectRetain(v5);
    swift_bridgeObjectRetain(a1);
    v5 = sub_1001F8710(v7, v5);
    v23 = v5;
    if (!a2)
      goto LABEL_4;
    goto LABEL_3;
  }
  swift_bridgeObjectRetain(v5);
  if (a2)
  {
LABEL_3:
    sub_1001FB834(a2);
    v5 = v23;
  }
LABEL_4:
  if ((sub_1001BF5E8(*(_QWORD *)(v3 + 56), v5) & 1) != 0)
  {
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v8 = *(_QWORD *)(v3 + 56);
    *(_QWORD *)(v3 + 56) = v5;
    swift_bridgeObjectRelease(v8);
    sub_1001F8B64();
    if (qword_100315838 != -1)
      swift_once(&qword_100315838, sub_1000D9630);
    v9 = type metadata accessor for Logger(0);
    sub_10000D744(v9, (uint64_t)qword_10033FD60);
    v11 = swift_retain_n(v3, v10);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v22 = v15;
      *(_DWORD *)v14 = 136446210;
      v16 = *(_QWORD *)(v3 + 56);
      sub_1001FC198();
      v17 = swift_bridgeObjectRetain(v16);
      v18 = Set.description.getter(v17);
      v20 = v19;
      swift_bridgeObjectRelease(v16);
      v21 = sub_100172BEC(v18, v20, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v14 + 4, v14 + 12);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Assertions: %{public}s", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

      swift_release_n(v3);
    }
  }
}

uint64_t sub_1001F8710(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  int64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;
  char v14;
  uint64_t v15;

  v2 = result;
  v3 = 0;
  v15 = a2;
  v4 = result + 56;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 56);
  v8 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    v11 = v3 + 1;
    if (__OFADD__(v3, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v11 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v11);
    ++v3;
    if (!v12)
    {
      v3 = v11 + 1;
      if (v11 + 1 >= v8)
        goto LABEL_23;
      v12 = *(_QWORD *)(v4 + 8 * v3);
      if (!v12)
      {
        v3 = v11 + 2;
        if (v11 + 2 >= v8)
          goto LABEL_23;
        v12 = *(_QWORD *)(v4 + 8 * v3);
        if (!v12)
        {
          v3 = v11 + 3;
          if (v11 + 3 >= v8)
            goto LABEL_23;
          v12 = *(_QWORD *)(v4 + 8 * v3);
          if (!v12)
            break;
        }
      }
    }
LABEL_22:
    v7 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v3 << 6);
LABEL_5:
    result = sub_1001036E0(&v14, *(unsigned __int8 *)(*(_QWORD *)(v2 + 48) + v10));
  }
  v13 = v11 + 4;
  if (v13 >= v8)
  {
LABEL_23:
    swift_release(v2);
    return v15;
  }
  v12 = *(_QWORD *)(v4 + 8 * v13);
  if (v12)
  {
    v3 = v13;
    goto LABEL_22;
  }
  while (1)
  {
    v3 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v3 >= v8)
      goto LABEL_23;
    v12 = *(_QWORD *)(v4 + 8 * v3);
    ++v13;
    if (v12)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

void sub_1001F8868(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v5;
  Swift::Int v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  uint8_t *v23;
  NSObject *oslog;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v3 = *(_QWORD *)(v1 + 56);
  if (*(_QWORD *)(v3 + 16))
  {
    if (a1)
      v5 = a1;
    else
      v5 = &_swiftEmptySetSingleton;
    swift_bridgeObjectRetain(v3);
    swift_bridgeObjectRetain(a1);
    v6 = sub_1001FB994((uint64_t)v5, v3);
    swift_bridgeObjectRelease(v5);
    v7 = *(_QWORD *)(v2 + 56);
    *(_QWORD *)(v2 + 56) = v6;
    swift_bridgeObjectRelease(v7);
    sub_1001F8B64();
    if (*(_QWORD *)(*(_QWORD *)(v2 + 56) + 16))
    {
      if (qword_100315838 != -1)
        swift_once(&qword_100315838, sub_1000D9630);
      v8 = type metadata accessor for Logger(0);
      sub_10000D744(v8, (uint64_t)qword_10033FD60);
      v10 = swift_retain_n(v2, v9);
      v11 = Logger.logObject.getter(v10);
      v12 = static os_log_type_t.default.getter(v11);
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc(12, -1);
        v14 = swift_slowAlloc(32, -1);
        v26 = v14;
        *(_DWORD *)v13 = 136446210;
        v15 = *(_QWORD *)(v2 + 56);
        sub_1001FC198();
        v16 = swift_bridgeObjectRetain(v15);
        v17 = Set.description.getter(v16);
        v19 = v18;
        swift_bridgeObjectRelease(v15);
        v25 = sub_100172BEC(v17, v19, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v13 + 4, v13 + 12);
        swift_release_n(v2);
        swift_bridgeObjectRelease(v19);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "All assertions dismissed except %{public}s", v13, 0xCu);
        swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v14, -1, -1);
        swift_slowDealloc(v13, -1, -1);

      }
      else
      {

        swift_release_n(v2);
      }
    }
    else
    {
      if (qword_100315838 != -1)
        swift_once(&qword_100315838, sub_1000D9630);
      v20 = type metadata accessor for Logger(0);
      v21 = sub_10000D744(v20, (uint64_t)qword_10033FD60);
      oslog = Logger.logObject.getter(v21);
      v22 = static os_log_type_t.default.getter(oslog);
      if (os_log_type_enabled(oslog, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, v22, "All assertions dismissed", v23, 2u);
        swift_slowDealloc(v23, -1, -1);
      }

    }
  }
}

void sub_1001F8B64()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD **)(v0 + 48);
  if ((*(_BYTE *)(v0 + 64) & 1) != 0 || *(_QWORD *)(*(_QWORD *)(v0 + 56) + 16))
  {
    if (!v1[4])
    {
      v2 = v1[2];
      v3 = v1[3];
      v4 = type metadata accessor for PreventSuspensionAssertion();
      swift_allocObject(v4, 32, 7);
      swift_bridgeObjectRetain(v3);
      v5 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, v2, v3);
      v6 = v1[4];
      v1[4] = v5;
      swift_release(v6);
    }
  }
  else
  {
    v7 = v1[4];
    v1[4] = 0;
    swift_release(v7);
  }
}

void sub_1001F8C18(char a1)
{
  uint64_t v1;
  int v3;
  char v4;

  v3 = *(unsigned __int8 *)(v1 + 64);
  if ((v3 == 2 || (v3 & 1) == 0)
    && (a1 & 1) != 0
    && (sub_100067058(2u, *(_QWORD *)(v1 + 56)) || sub_100067058(3u, *(_QWORD *)(v1 + 56))))
  {
    v4 = 0;
    PassthroughSubject.send(_:)(&v4);
  }
  *(_BYTE *)(v1 + 64) = a1 & 1;
  sub_1001F8B64();
}

double sub_1001F8C9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  int v7;
  double result;
  int v9;
  Swift::Int v10;
  Swift::Int v11;
  Swift::Int v12;
  uint64_t v13;

  v1 = v0;
  v2 = sub_100003DB8(&qword_100316B68);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1001BF244((uint64_t)v5);
  v6 = type metadata accessor for TransmissionProgress(0);
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6);
  sub_100007FF0((uint64_t)v5, &qword_100316B68);
  v9 = *(unsigned __int8 *)(v1 + 68);
  if (v9 == 2 || ((v9 & 1) == 0) == (v7 != 1))
  {
    *(_BYTE *)(v1 + 68) = v7 != 1;
    if (v7 == 1 || (sub_1001F8088() & 1) != 0)
    {
      v10 = sub_1002096D0((uint64_t)&off_1002E2320);
      v11 = 0;
      v12 = v10;
    }
    else
    {
      v11 = sub_1002096D0((uint64_t)&off_1002E22F8);
      v10 = 0;
      v12 = v11;
    }
    sub_1001F849C(v11, v10);
    *(_QWORD *)&result = swift_bridgeObjectRelease(v12).n128_u64[0];
  }
  return result;
}

void sub_1001F8DC8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  Swift::Int v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  id v27;
  void *v28;
  char v29;
  _QWORD aBlock[5];
  uint64_t v31;

  v1 = v0;
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 32);
  if (!Strong)
  {
    v5 = 9;
    goto LABEL_17;
  }
  v3 = Strong;
  v4 = *(_QWORD *)(*(_QWORD *)(Strong + 48) + 96);
  swift_retain(v4);
  swift_unknownObjectRelease(v3);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + 120);
  swift_release(v4);
  v6 = OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__everSeenConnectedInCone;
  v7 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__everSeenConnectedInCone);
  if (v7 == 2)
  {
    if (v5)
      goto LABEL_17;
  }
  else
  {
    if ((v7 & 1) != 0)
      goto LABEL_17;
    if (v5 == 9 || v5 != 0)
      goto LABEL_17;
  }
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FD60);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "First time user is connected and oriented, CA banner is less sticky now", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v5 = 0;
  *(_BYTE *)(v1 + v6) = 1;
LABEL_17:
  if (*(unsigned __int8 *)(v1 + 67) > 1u)
  {
LABEL_20:
    *(_BYTE *)(v1 + 67) = v5;
    goto LABEL_28;
  }
  if (v5 == 2)
  {
    *(_BYTE *)(v1 + 67) = 2;
  }
  else
  {
    if (v5 == 9)
      goto LABEL_20;
    *(_BYTE *)(v1 + 67) = v5;
    if (v5 != 5)
      goto LABEL_28;
  }
  v14 = sub_1002096D0((uint64_t)&off_1002E2348);
  v15 = v14;
  aBlock[0] = v14;
  if ((*(_BYTE *)(v1 + 68) & 1) != 0)
  {
    swift_bridgeObjectRetain(v14);
    if ((sub_1001F8088() & 1) != 0)
    {
      swift_bridgeObjectRelease(v15);
    }
    else
    {
      sub_1001036E0(&v29, 4);
      swift_bridgeObjectRelease(v15);
      v15 = aBlock[0];
    }
  }
  sub_1001F849C(v15, 0);
  swift_bridgeObjectRelease(v15);
LABEL_28:
  if ((sub_1001F8088() & 1) != 0 && sub_100067058(1u, *(_QWORD *)(v1 + 56)) && (sub_1001F83A4() & 1) == 0)
  {
    v18 = OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__explorerConnectedTimer;
    if (!*(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__explorerConnectedTimer))
    {
      if (qword_100315838 != -1)
        swift_once(&qword_100315838, sub_1000D9630);
      v19 = type metadata accessor for Logger(0);
      v20 = sub_10000D744(v19, (uint64_t)qword_10033FD60);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.default.getter(v21);
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Dismissing CA banner cause connection assistance is not required anymore, starting a convenience timer", v23, 2u);
        swift_slowDealloc(v23, -1, -1);
      }

      v24 = (void *)objc_opt_self(NSTimer);
      v25 = swift_allocObject(&unk_1002F9958, 24, 7);
      swift_weakInit(v25 + 16);
      aBlock[4] = sub_1001FC200;
      v31 = v25;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_100076C24;
      aBlock[3] = &unk_1002F9970;
      v26 = _Block_copy(aBlock);
      swift_release(v31);
      v27 = objc_msgSend(v24, "scheduledTimerWithTimeInterval:repeats:block:", 0, v26, 3.0);
      _Block_release(v26);
      v28 = *(void **)(v1 + v18);
      *(_QWORD *)(v1 + v18) = v27;

    }
  }
  else
  {
    v16 = OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__explorerConnectedTimer;
    objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__explorerConnectedTimer), "invalidate");
    v17 = *(void **)(v1 + v16);
    *(_QWORD *)(v1 + v16) = 0;

  }
}

uint64_t sub_1001F91A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_1001F91F8();
    return swift_release(v4);
  }
  return result;
}

double sub_1001F91F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  double result;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;

  v1 = v0;
  v2 = OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__explorerConnectedTimer;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__explorerConnectedTimer), "invalidate");
  v3 = *(void **)(v1 + v2);
  *(_QWORD *)(v1 + v2) = 0;

  if ((sub_1001F8088() & 1) != 0 && sub_100067058(1u, *(_QWORD *)(v1 + 56)) && (sub_1001F83A4() & 1) == 0)
  {
    if (qword_100315838 != -1)
      swift_once(&qword_100315838, sub_1000D9630);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10000D744(v5, (uint64_t)qword_10033FD60);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Dismissing CA banner cause connection assistance is not required anymore", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }

    v10 = sub_1002096D0((uint64_t)&off_1002E2370);
    sub_1001F849C(0, v10);
    swift_bridgeObjectRelease(v10);
    v11 = sub_100003DB8(&qword_10032B0E0);
    v12 = sub_100016B20();
    *(_QWORD *)&result = Subject<>.send()(v11, v12).n128_u64[0];
  }
  return result;
}

void sub_1001F9360(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  BOOL v8;
  int v9;
  BOOL v10;
  Swift::Int v11;
  uint64_t v12;
  char v13;
  Swift::Int v14;

  v2 = v1;
  v4 = *(_QWORD *)(v2 + 72);
  if (v4)
  {
    if ((sub_1001BF5E8(v4, *(_QWORD *)(a1 + 200)) & 1) != 0)
      return;
    v5 = *(_QWORD *)(v2 + 72);
  }
  else
  {
    v5 = 0;
  }
  v6 = *(_QWORD *)(a1 + 200);
  *(_QWORD *)(v2 + 72) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v5);
  v7 = sub_1001F9464(a1, v2);
  v8 = v7;
  v9 = *(unsigned __int8 *)(v2 + 80);
  v10 = v9 != 2 && (v9 & 1) == 0;
  if (v10 && v7)
  {
    v11 = sub_1002096D0((uint64_t)&off_1002E23C0);
    v12 = v11;
    v14 = v11;
    if ((*(_BYTE *)(v2 + 68) & 1) != 0)
    {
      swift_bridgeObjectRetain(v11);
      if ((sub_1001F8088() & 1) != 0)
      {
        swift_bridgeObjectRelease(v12);
      }
      else
      {
        sub_1001036E0(&v13, 4);
        swift_bridgeObjectRelease(v12);
        v12 = v14;
      }
    }
    sub_1001F849C(v12, 0);
    swift_bridgeObjectRelease(v12);
  }
  *(_BYTE *)(v2 + 80) = v8;
}

BOOL sub_1001F9464(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  Swift::Int v5;
  uint64_t Strong;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v4 = *(_QWORD *)(a1 + 200);
  v5 = sub_1002096E8((uint64_t)&off_1002E2398);
  LOBYTE(v4) = sub_1001BF5E8(v4, v5);
  swift_bridgeObjectRelease(v5);
  if ((v4 & 1) != 0 || !*(_QWORD *)(*(_QWORD *)(a1 + 200) + 16))
    return 0;
  if ((sub_1001F8088() & 1) == 0)
    return 1;
  Strong = swift_unknownObjectWeakLoadStrong(a2 + 32);
  v7 = Strong;
  if (Strong)
  {
    v8 = *(_QWORD *)(*(_QWORD *)(Strong + 48) + 72);
    swift_retain(v8);
    swift_unknownObjectRelease(v7);
    v9 = *(_QWORD *)(*(_QWORD *)(v8 + 56) + 128);
    swift_release(v8);
    v10 = *(_QWORD *)(a2 + 88);
    if ((*(_BYTE *)(a2 + 96) & 1) != 0)
    {
      LOBYTE(v11) = 1;
LABEL_11:
      *(_QWORD *)(a2 + 88) = v9;
      *(_BYTE *)(a2 + 96) = v7 == 0;
      sub_1001F7D50(v10, v11);
      v12 = swift_unknownObjectWeakLoadStrong(a2 + 32);
      if (v12)
      {
        v13 = v12;
        v14 = *(_QWORD *)(*(_QWORD *)(v12 + 48) + 72);
        swift_retain(v14);
        swift_unknownObjectRelease(v13);
        v15 = *(unsigned __int8 *)(*(_QWORD *)(v14 + 56) + 120);
        swift_release(v14);
        if (v15 != 2)
          return (v15 & 1) == 0;
      }
      return 0;
    }
    v11 = 0;
    if (v10 != v9)
      goto LABEL_11;
  }
  else
  {
    v11 = 0;
    if ((*(_BYTE *)(a2 + 96) & 1) == 0)
    {
      v9 = 0;
      v10 = *(_QWORD *)(a2 + 88);
      goto LABEL_11;
    }
  }
  return v11;
}

double sub_1001F95BC(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void *v8;
  double result;
  char v10;
  void *v11;

  v2 = v1;
  if ((a1 & 1) != 0)
    goto LABEL_10;
  if (!*(_QWORD *)(*(_QWORD *)(v1 + 56) + 16))
  {
    if (qword_100315838 != -1)
      swift_once(&qword_100315838, sub_1000D9630);
    v3 = type metadata accessor for Logger(0);
    v4 = sub_10000D744(v3, (uint64_t)qword_10033FD60);
    v5 = Logger.logObject.getter(v4);
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "REVIEW THIS USE CASE (not user initiated and no assertions held). Forcing currentState for now.", v7, 2u);
      swift_slowDealloc(v7, -1, -1);
    }

  }
  if (!*(_QWORD *)(*(_QWORD *)(v2 + 56) + 16))
LABEL_10:
    v8 = (void *)sub_1002096D0((uint64_t)&off_1002E23E8);
  else
    v8 = &_swiftEmptySetSingleton;
  v11 = v8;
  if ((*(_BYTE *)(v2 + 68) & 1) != 0)
  {
    swift_bridgeObjectRetain(v8);
    if ((sub_1001F8088() & 1) != 0)
    {
      swift_bridgeObjectRelease(v8);
    }
    else
    {
      sub_1001036E0(&v10, 4);
      swift_bridgeObjectRelease(v8);
      v8 = v11;
    }
  }
  sub_1001F849C((uint64_t)v8, 0);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v8).n128_u64[0];
  return result;
}

void sub_1001F9728(char a1)
{
  uint64_t v1;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  if (a1 != 2 && (a1 & 1) == 0)
  {
    v3 = v1;
    v4 = &_swiftEmptySetSingleton;
    v18 = &_swiftEmptySetSingleton;
    if ((*(_BYTE *)(v1 + 68) & 1) != 0 && (sub_1001F8088() & 1) == 0)
    {
      sub_1001036E0(&v17, 4);
      v4 = v18;
    }
    if (v4[2])
    {
      sub_1001F849C((uint64_t)v4, 0);
      swift_bridgeObjectRelease(v4);
      if (qword_100315838 != -1)
        swift_once(&qword_100315838, sub_1000D9630);
      v5 = type metadata accessor for Logger(0);
      sub_10000D744(v5, (uint64_t)qword_10033FD60);
      v7 = swift_retain_n(v1, v6);
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.default.getter(v8);
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(12, -1);
        v11 = (_QWORD *)swift_slowAlloc(32, -1);
        v18 = v11;
        *(_DWORD *)v10 = 136446210;
        v12 = *(_QWORD *)(v3 + 56);
        sub_1001FC198();
        v13 = swift_bridgeObjectRetain(v12);
        v14 = Set.description.getter(v13);
        v16 = v15;
        swift_bridgeObjectRelease(v12);
        v17 = sub_100172BEC(v14, v16, (uint64_t *)&v18);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v10 + 4, v10 + 12);
        swift_release_n(v3);
        swift_bridgeObjectRelease(v16);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "onScreenLockedDidChange: assertions: %{public}s", v10, 0xCu);
        swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v11, -1, -1);
        swift_slowDealloc(v10, -1, -1);

      }
      else
      {

        swift_release_n(v3);
      }
    }
    else
    {
      swift_bridgeObjectRelease(v4);
    }
  }
}

void sub_1001F9988(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24[3];
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v5 = sub_100003DB8(&qword_1003180C8);
  __chkstk_darwin(v5, v6);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
  {
    sub_1001F8868(0);
    v10 = type metadata accessor for DispatchTime(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
    v11 = v2 + OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__lastMainSceneIsExpectedToBeForegoundSoonAt;
    swift_beginAccess(v2 + OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__lastMainSceneIsExpectedToBeForegoundSoonAt, v24, 33, 0);
    sub_100025C08((uint64_t)v8, v11);
    swift_endAccess(v24);
  }
  else
  {
    if ((sub_1001F83A4() & 1) != 0)
      v9 = (void *)sub_1002096D0((uint64_t)&off_1002E2410);
    else
      v9 = &_swiftEmptySetSingleton;
    v24[0] = (uint64_t)v9;
    if ((*(_BYTE *)(v2 + 68) & 1) != 0)
    {
      swift_bridgeObjectRetain(v9);
      if ((sub_1001F8088() & 1) != 0)
      {
        swift_bridgeObjectRelease(v9);
      }
      else
      {
        sub_1001036E0(&v25, 4);
        swift_bridgeObjectRelease(v9);
        v9 = (void *)v24[0];
      }
    }
    sub_1001F849C((uint64_t)v9, 0);
    swift_bridgeObjectRelease(v9);
  }
  *(_BYTE *)(v2 + 97) = a1;
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v12 = type metadata accessor for Logger(0);
  sub_10000D744(v12, (uint64_t)qword_10033FD60);
  v14 = swift_retain_n(v2, v13);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v24[0] = v18;
    *(_DWORD *)v17 = 136446210;
    v19 = *(_QWORD *)(v2 + 56);
    sub_1001FC198();
    v20 = swift_bridgeObjectRetain(v19);
    v21 = Set.description.getter(v20);
    v23 = v22;
    swift_bridgeObjectRelease(v19);
    v25 = sub_100172BEC(v21, v23, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v17 + 4, v17 + 12);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "onMainSceneIsForegroundDidChange: assertions: %{public}s", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

    swift_release_n(v2);
  }
}

void sub_1001F9C94()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void *v16;

  if ((*(_BYTE *)(v0 + 97) & 1) == 0)
  {
    v1 = v0;
    if ((sub_1001F83A4() & 1) != 0)
      v2 = (void *)sub_1002096D0((uint64_t)&off_1002E2438);
    else
      v2 = &_swiftEmptySetSingleton;
    v16 = v2;
    if ((*(_BYTE *)(v0 + 68) & 1) != 0)
    {
      swift_bridgeObjectRetain(v2);
      if ((sub_1001F8088() & 1) != 0)
      {
        swift_bridgeObjectRelease(v2);
      }
      else
      {
        sub_1001036E0(&v15, 4);
        swift_bridgeObjectRelease(v2);
        v2 = v16;
      }
    }
    sub_1001F849C((uint64_t)v2, 0);
    swift_bridgeObjectRelease(v2);
    if (qword_100315838 != -1)
      swift_once(&qword_100315838, sub_1000D9630);
    v3 = type metadata accessor for Logger(0);
    sub_10000D744(v3, (uint64_t)qword_10033FD60);
    v5 = swift_retain_n(v0, v4);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(12, -1);
      v9 = swift_slowAlloc(32, -1);
      v16 = (void *)v9;
      *(_DWORD *)v8 = 136446210;
      v10 = *(_QWORD *)(v1 + 56);
      sub_1001FC198();
      v11 = swift_bridgeObjectRetain(v10);
      v12 = Set.description.getter(v11);
      v14 = v13;
      swift_bridgeObjectRelease(v10);
      v15 = sub_100172BEC(v12, v14, (uint64_t *)&v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 4, v8 + 12);
      swift_release_n(v1);
      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "onGuidanceUIRequiredDidChange: assertions: %{public}s", v8, 0xCu);
      swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1, -1);
      swift_slowDealloc(v8, -1, -1);

    }
    else
    {

      swift_release_n(v1);
    }
  }
}

double sub_1001F9EF4(_BYTE *a1)
{
  uint64_t v1;
  void *v2;
  double result;

  if (((1 << *a1) & 0xFEC) == 0)
  {
    v2 = (void *)sub_1002096D0((uint64_t)&off_1002E2460);
    sub_1001F8868(v2);
    goto LABEL_6;
  }
  if ((*(_BYTE *)(v1 + 97) & 1) == 0)
  {
    v2 = (void *)sub_1002096D0((uint64_t)&off_1002E2488);
    sub_1001F849C((uint64_t)v2, 0);
LABEL_6:
    *(_QWORD *)&result = swift_bridgeObjectRelease(v2).n128_u64[0];
  }
  return result;
}

void sub_1001F9F6C(uint64_t a1)
{
  unsigned __int8 *v1;
  unsigned __int8 *v2;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  int v11;
  Swift::Int v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  BOOL v20;
  int v21;
  unsigned __int8 v22;
  unint64_t v23;
  Swift::Int v24;
  Swift::Int v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  _BYTE v38[16];
  unint64_t v39;
  uint64_t v40;
  unsigned __int16 v41;
  _BYTE v42[8];
  uint64_t v43;
  char v44;
  _QWORD v45[2];
  unsigned __int8 v46;
  _BYTE v47[8];
  uint64_t v48;
  uint64_t v49;
  unsigned __int8 v50;
  _BYTE v51[8];
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 v54;

  v2 = v1;
  sub_10000B458(a1, (uint64_t)v38, &qword_100319FD8);
  v4 = v39;
  v5 = v40;
  v6 = v41;
  v7 = v1[66];
  sub_10000B458(a1, (uint64_t)v51, &qword_100319FD8);
  if (!v52)
  {
    if (v7 == 2)
      goto LABEL_29;
    goto LABEL_10;
  }
  v8 = v54;
  v9 = sub_100067058(0, v53);
  v10 = v8 & 1;
  if (v8 == 2)
    v10 = 0;
  if (!v9)
    v10 = 0;
  if (v7 == 2 || v10 != (v7 & 1))
  {
LABEL_10:
    sub_10000B458(a1, (uint64_t)v47, &qword_100319FD8);
    if (v48)
    {
      v11 = v50;
      if (sub_100067058(0, v49) && v11 != 2 && (v11 & 1) != 0)
      {
        v12 = sub_1002096D0((uint64_t)&off_1002E1CA8);
        v13 = v12;
        v45[0] = v12;
        if ((v2[68] & 1) != 0)
        {
          swift_bridgeObjectRetain(v12);
          if ((sub_1001F8088() & 1) != 0)
          {
            swift_bridgeObjectRelease(v13);
          }
          else
          {
            sub_1001036E0(v42, 4);
            swift_bridgeObjectRelease(v13);
            v13 = v45[0];
          }
        }
        sub_1001F849C(v13, 0);
        swift_bridgeObjectRelease(v13);
        if (qword_100315838 != -1)
          swift_once(&qword_100315838, sub_1000D9630);
        v15 = type metadata accessor for Logger(0);
        v16 = sub_10000D744(v15, (uint64_t)qword_10033FD60);
        v17 = Logger.logObject.getter(v16);
        v18 = static os_log_type_t.default.getter(v17);
        if (os_log_type_enabled(v17, v18))
        {
          v19 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v19 = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "isEmergencyCallAvailable changed to true", v19, 2u);
          swift_slowDealloc(v19, -1, -1);
        }

      }
      v20 = sub_100067058(0, v5);
      v14 = (v6 >> 8) & 1;
      if (v6 >> 8 == 2)
        LOBYTE(v14) = 0;
      if (!v20)
        LOBYTE(v14) = 0;
    }
    else
    {
      LOBYTE(v14) = 2;
    }
    v2[66] = v14;
  }
LABEL_29:
  v21 = v2[65];
  sub_10000B458(a1, (uint64_t)v45, &qword_100319FD8);
  if (v45[1])
    v22 = v46;
  else
    v22 = 3;
  if (v21 == 3)
  {
    if (v22 == 3)
      return;
    sub_10000B458(a1, (uint64_t)v42, &qword_100319FD8);
    if (v43)
    {
      LOBYTE(v23) = v44;
      goto LABEL_55;
    }
    goto LABEL_47;
  }
  if (v22 == 3 || v21 != v22)
  {
    sub_10000B458(a1, (uint64_t)v42, &qword_100319FD8);
    if (v43)
    {
      if (v21 == 2)
      {
        if (v44 == 1)
        {
          v31 = sub_1002096D0((uint64_t)&off_1002E1D20);
          v32 = sub_1002096D0((uint64_t)&off_1002E1D48);
          sub_1001F849C(v31, v32);
          swift_bridgeObjectRelease(v31);
          swift_bridgeObjectRelease(v32);
          if (qword_100315838 != -1)
            swift_once(&qword_100315838, sub_1000D9630);
          v33 = type metadata accessor for Logger(0);
          v34 = sub_10000D744(v33, (uint64_t)qword_10033FD60);
          v35 = Logger.logObject.getter(v34);
          v36 = static os_log_type_t.default.getter(v35);
          if (os_log_type_enabled(v35, v36))
          {
            v37 = (uint8_t *)swift_slowAlloc(2, -1);
            *(_WORD *)v37 = 0;
            _os_log_impl((void *)&_mh_execute_header, v35, v36, "satelliteDidRecover", v37, 2u);
            swift_slowDealloc(v37, -1, -1);
          }

        }
      }
      else if (v21 == 1 && v44 == 2)
      {
        v24 = sub_1002096D0((uint64_t)&off_1002E1CD0);
        v25 = sub_1002096D0((uint64_t)&off_1002E1CF8);
        sub_1001F849C(v24, v25);
        swift_bridgeObjectRelease(v24);
        swift_bridgeObjectRelease(v25);
        if (qword_100315838 != -1)
          swift_once(&qword_100315838, sub_1000D9630);
        v26 = type metadata accessor for Logger(0);
        v27 = sub_10000D744(v26, (uint64_t)qword_10033FD60);
        v28 = Logger.logObject.getter(v27);
        v29 = static os_log_type_t.default.getter(v28);
        if (os_log_type_enabled(v28, v29))
        {
          v30 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v30 = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "internetDidRecover", v30, 2u);
          swift_slowDealloc(v30, -1, -1);
        }

        v23 = v4 >> 8;
        goto LABEL_55;
      }
      v23 = v4 >> 8;
LABEL_55:
      v2[65] = v23;
      return;
    }
LABEL_47:
    LOBYTE(v23) = 3;
    goto LABEL_55;
  }
}

void sub_1001FA464()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _BYTE v18[24];

  v1 = sub_100003DB8(&qword_1003180C8);
  __chkstk_darwin(v1, v2);
  v4 = &v18[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5, v6);
  v8 = &v18[-v7 - 8];
  static DispatchTime.now()(v9);
  v10 = type metadata accessor for DispatchTime(0);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 0, 1, v10);
  sub_10000B458((uint64_t)v8, (uint64_t)v4, &qword_1003180C8);
  v11 = v0 + OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__lastMainSceneIsExpectedToBeForegoundSoonAt;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__lastMainSceneIsExpectedToBeForegoundSoonAt, v18, 33, 0);
  sub_100025C08((uint64_t)v4, v11);
  swift_endAccess(v18);
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10000D744(v12, (uint64_t)qword_10033FD60);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "mainSceneIsExpectedToBeForegroundSoon", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

}

uint64_t sub_1001FA600()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  BOOL v21;
  unint64_t v22;
  void (*v23)(_BYTE *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  unint64_t v28;
  uint8_t *v29;
  unint64_t v31;
  _BYTE v32[24];

  v1 = sub_100003DB8(&qword_1003180C8);
  __chkstk_darwin(v1, v2);
  v4 = &v32[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v5 = type metadata accessor for DispatchTime(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = &v32[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v10, v11);
  v13 = &v32[-v12 - 8];
  v14 = v0 + OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__lastMainSceneIsExpectedToBeForegoundSoonAt;
  swift_beginAccess(v14, v32, 0, 0);
  sub_10000B234(v14, (uint64_t)v4, &qword_1003180C8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100007FF0((uint64_t)v4, &qword_1003180C8);
    return 0;
  }
  v15 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v13, v4, v5);
  v16 = static DispatchTime.now()(v15);
  v17 = DispatchTime.uptimeNanoseconds.getter(v16);
  v18 = DispatchTime.uptimeNanoseconds.getter(v17);
  if (v18 < v17)
  {
    v19 = DispatchTime.uptimeNanoseconds.getter(v18);
    v20 = DispatchTime.uptimeNanoseconds.getter(v19);
    v21 = v19 >= v20;
    v22 = v19 - v20;
    if (v21)
      goto LABEL_7;
    __break(1u);
  }
  v22 = 0;
LABEL_7:
  v23 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
  v23(v9, v5);
  if (v22 > 0xEE6B27F)
  {
    v23(v13, v5);
    return 0;
  }
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v24 = type metadata accessor for Logger(0);
  v25 = sub_10000D744(v24, (uint64_t)qword_10033FD60);
  v26 = Logger.logObject.getter(v25);
  v27 = static os_log_type_t.default.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    v28 = v22 / 0xF4240;
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v29 = 134349056;
    v31 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v29 + 4, v29 + 12);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "Delaying banner, mainSceneIsExpectedToBeForegroundSoon was called %{public}llu ms ago", v29, 0xCu);
    swift_slowDealloc(v29, -1, -1);
  }

  v23(v13, v5);
  return 1;
}

_QWORD *sub_1001FA8B4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  sub_100025CF8((uint64_t)(v0 + 4));
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  sub_100007FF0((uint64_t)v0 + OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__lastMainSceneIsExpectedToBeForegoundSoonAt, &qword_1003180C8);

  return v0;
}

uint64_t sub_1001FA920()
{
  uint64_t v0;

  sub_1001FA8B4();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_1001FA944()
{
  return type metadata accessor for SessionUserAttentionTracker(0);
}

uint64_t type metadata accessor for SessionUserAttentionTracker(uint64_t a1)
{
  uint64_t result;

  result = qword_1003292A8;
  if (!qword_1003292A8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SessionUserAttentionTracker);
  return result;
}

void sub_1001FA988(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[17];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = &unk_10025EA20;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[5] = &unk_10025EA38;
  v4[6] = &unk_10025EA50;
  v4[7] = &unk_10025EA38;
  v4[8] = &unk_10025EA68;
  v4[9] = &unk_10025EA38;
  v4[10] = &unk_10025EA80;
  v4[11] = &unk_10025EA38;
  v4[12] = &unk_10025EA98;
  v4[13] = &unk_10025EA38;
  sub_100025B34(319);
  if (v3 <= 0x3F)
  {
    v4[14] = *(_QWORD *)(v2 - 8) + 64;
    v4[15] = &unk_10025EA38;
    v4[16] = &unk_10025EA80;
    swift_updateClassMetadata2(a1, 256, 17, v4, a1 + 80);
  }
}

uint64_t storeEnumTagSinglePayload for SessionUserAttentionTracker.EventAssertion(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1001FAAAC + 4 * byte_10025E98A[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001FAAE0 + 4 * byte_10025E985[v4]))();
}

uint64_t sub_1001FAAE0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001FAAE8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1001FAAF0);
  return result;
}

uint64_t sub_1001FAAFC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1001FAB04);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1001FAB08(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001FAB10(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SessionUserAttentionTracker.EventAssertion()
{
  return &type metadata for SessionUserAttentionTracker.EventAssertion;
}

unint64_t sub_1001FAB30()
{
  unint64_t result;

  result = qword_1003295E8;
  if (!qword_1003295E8)
  {
    result = swift_getWitnessTable(&unk_10025EB28, &type metadata for SessionUserAttentionTracker.EventAssertion);
    atomic_store(result, (unint64_t *)&qword_1003295E8);
  }
  return result;
}

uint64_t sub_1001FAB74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = v0;
  v2 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(_QWORD *)(v0 + 16) = PassthroughSubject.init()(v3);
  v4 = sub_100003DB8(qword_1003180E0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  *(_QWORD *)(v0 + 24) = PassthroughSubject.init()(v5);
  *(_QWORD *)(v0 + 40) = 0;
  swift_unknownObjectWeakInit(v0 + 32, 0);
  v6 = type metadata accessor for PreventSuspension();
  v7 = (_QWORD *)swift_allocObject(v6, 40, 7);
  v7[2] = 0xD00000000000001BLL;
  v7[3] = 0x80000001002706B0;
  v7[4] = 0;
  *(_QWORD *)(v0 + 48) = v7;
  *(_QWORD *)(v0 + 56) = &_swiftEmptySetSingleton;
  *(_DWORD *)(v0 + 64) = 151126786;
  *(_BYTE *)(v0 + 68) = 2;
  *(_QWORD *)(v0 + 72) = 0;
  *(_BYTE *)(v0 + 80) = 2;
  *(_WORD *)(v0 + 96) = 513;
  v8 = v0 + OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__lastMainSceneIsExpectedToBeForegoundSoonAt;
  *(_QWORD *)(v1 + 88) = 0;
  v9 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__everSeenConnectedInCone) = 2;
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy27SessionUserAttentionTracker__explorerConnectedTimer) = 0;
  return v1;
}

uint64_t sub_1001FACA4(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  BOOL v20;
  _QWORD v22[9];

  v5 = *v2;
  Hasher.init(_seed:)(v22, *(_QWORD *)(*v2 + 40));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v22, a1, a2);
  v6 = Hasher._finalize()();
  v7 = -1 << *(_BYTE *)(v5 + 32);
  v8 = v6 & ~v7;
  if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease(v5);
    return 0;
  }
  v9 = *(_QWORD *)(v5 + 48);
  v10 = (_QWORD *)(v9 + 16 * v8);
  v11 = v10[1];
  v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
  {
    v17 = ~v7;
    do
    {
      v8 = (v8 + 1) & v17;
      if (((*(_QWORD *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) == 0)
        goto LABEL_18;
      v18 = (_QWORD *)(v9 + 16 * v8);
      v19 = v18[1];
      v20 = *v18 == a1 && v19 == a2;
    }
    while (!v20 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v18, v19, a1, a2, 0) & 1) == 0);
  }
  swift_bridgeObjectRelease(v5);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  v14 = *v2;
  v22[0] = *v2;
  *v2 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_10010480C();
    v14 = v22[0];
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v14 + 48) + 16 * v8);
  sub_1001FB2EC(v8);
  v16 = *v2;
  *v2 = v22[0];
  swift_bridgeObjectRelease(v16);
  return v15;
}

uint64_t sub_1001FAE30(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  _QWORD v28[9];

  v2 = v1;
  v4 = *v2;
  if ((*v2 & 0xC000000000000001) == 0)
  {
    Hasher.init(_seed:)(v28, *(_QWORD *)(v4 + 40));
    v10 = *(_QWORD *)(a1 + 16);
    v11 = *(_QWORD *)(a1 + 24);
    swift_bridgeObjectRetain(v4);
    swift_bridgeObjectRetain(v11);
    String.hash(into:)(v28, v10, v11);
    swift_bridgeObjectRelease(v11);
    v12 = Hasher._finalize()();
    v13 = -1 << *(_BYTE *)(v4 + 32);
    v14 = v12 & ~v13;
    if (((*(_QWORD *)(v4 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) != 0)
    {
      v15 = *(_QWORD *)(v4 + 48);
      v16 = *(_QWORD *)(v15 + 8 * v14);
      v17 = *(_QWORD *)(v16 + 16);
      v18 = *(_QWORD *)(v16 + 24);
      v19 = v17 == v10 && v18 == v11;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v10, v11, 0) & 1) != 0)
      {
LABEL_13:
        swift_bridgeObjectRelease(v4);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
        v21 = *v2;
        v28[0] = *v2;
        *v2 = 0x8000000000000000;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_1001049BC();
          v21 = v28[0];
        }
        v8 = *(_QWORD *)(*(_QWORD *)(v21 + 48) + 8 * v14);
        sub_1001FB4B0(v14);
        v9 = *v2;
        *v2 = v28[0];
        goto LABEL_16;
      }
      v22 = ~v13;
      while (1)
      {
        v14 = (v14 + 1) & v22;
        if (((*(_QWORD *)(v4 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8)) >> v14) & 1) == 0)
          break;
        v23 = *(_QWORD *)(v15 + 8 * v14);
        v24 = *(_QWORD *)(v23 + 16);
        v25 = *(_QWORD *)(v23 + 24);
        v26 = v24 == v10 && v25 == v11;
        if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(v24, v25, v10, v11, 0) & 1) != 0)
          goto LABEL_13;
      }
    }
LABEL_25:
    swift_bridgeObjectRelease(v4);
    return 0;
  }
  if (v4 < 0)
    v5 = *v2;
  else
    v5 = v4 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v2);
  swift_retain(a1);
  v7 = __CocoaSet.contains(_:)(v6, v5);
  swift_release(a1);
  if ((v7 & 1) == 0)
    goto LABEL_25;
  v8 = sub_1001FB138(v5, a1);
  v9 = v4;
LABEL_16:
  swift_bridgeObjectRelease(v9);
  return v8;
}

uint64_t sub_1001FB018(unsigned __int8 a1)
{
  _QWORD *v1;
  uint64_t v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v14[9];

  v3 = *v1;
  Hasher.init(_seed:)(v14, *(_QWORD *)(*v1 + 40));
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = v4 & ~v5;
  if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 5;
  v7 = *(_QWORD *)(v3 + 48);
  if (*(unsigned __int8 *)(v7 + v6) != a1)
  {
    v8 = ~v5;
    do
    {
      v6 = (v6 + 1) & v8;
      if (((*(_QWORD *)(v3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
        return 5;
    }
    while (*(unsigned __int8 *)(v7 + v6) != a1);
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v1);
  v10 = *v1;
  v14[0] = *v1;
  *v1 = 0x8000000000000000;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_100104B64();
    v10 = v14[0];
  }
  v11 = *(unsigned __int8 *)(*(_QWORD *)(v10 + 48) + v6);
  sub_1001FB68C(v6);
  v12 = *v1;
  *v1 = v14[0];
  swift_bridgeObjectRelease(v12);
  return v11;
}

uint64_t sub_1001FB138(uint64_t a1, uint64_t a2)
{
  Swift::Int *v2;
  Swift::Int *v3;
  uint64_t v6;
  uint64_t v7;
  Swift::Int v8;
  uint64_t v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t result;
  _QWORD v28[9];
  Swift::Int v29;

  v3 = v2;
  swift_bridgeObjectRelease(*v3);
  v6 = __CocoaSet.count.getter(a1);
  v7 = swift_unknownObjectRetain(a1);
  v8 = sub_100103828(v7, v6);
  v29 = v8;
  Hasher.init(_seed:)(v28, *(_QWORD *)(v8 + 40));
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(_QWORD *)(a2 + 24);
  swift_retain(v8);
  swift_bridgeObjectRetain(v10);
  String.hash(into:)(v28, v9, v10);
  swift_bridgeObjectRelease(v10);
  v11 = Hasher._finalize()();
  v12 = -1 << *(_BYTE *)(v8 + 32);
  v13 = v11 & ~v12;
  if (((*(_QWORD *)(v8 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = *(_QWORD *)(v8 + 48);
    v15 = *(_QWORD *)(v14 + 8 * v13);
    v16 = *(_QWORD *)(v15 + 16);
    v17 = *(_QWORD *)(v15 + 24);
    v18 = v16 == v9 && v17 == v10;
    if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v9, v10, 0) & 1) != 0)
    {
LABEL_14:
      swift_release(v8);
      v8 = *(_QWORD *)(*(_QWORD *)(v8 + 48) + 8 * v13);
      sub_1001FB4B0(v13);
      v24 = *(_QWORD *)(v8 + 16);
      v25 = *(_QWORD *)(v8 + 24);
      v26 = v9 == v24 && v10 == v25;
      if (v26 || (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v24, v25, 0) & 1) != 0)
      {
        *v3 = v29;
        return v8;
      }
      __break(1u);
    }
    else
    {
      v19 = ~v12;
      while (1)
      {
        v13 = (v13 + 1) & v19;
        if (((*(_QWORD *)(v8 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
          break;
        v20 = *(_QWORD *)(v14 + 8 * v13);
        v21 = *(_QWORD *)(v20 + 16);
        v22 = *(_QWORD *)(v20 + 24);
        v23 = v21 == v9 && v22 == v10;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v9, v10, 0) & 1) != 0)
          goto LABEL_14;
      }
    }
    swift_release(v8);
    __break(1u);
  }
  result = swift_release(v8);
  __break(1u);
  return result;
}

unint64_t sub_1001FB2EC(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
        v11 = *v10;
        v12 = v10[1];
        Hasher.init(_seed:)(v21, *(_QWORD *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_OWORD *)(v15 + 16 * v2);
          v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1001FB4B0(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  Swift::Int v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  _QWORD v21[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v6);
        Hasher.init(_seed:)(v21, *(_QWORD *)(v3 + 40));
        v11 = *(_QWORD *)(v10 + 16);
        v12 = *(_QWORD *)(v10 + 24);
        swift_retain(v10);
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        swift_bridgeObjectRelease(v12);
        v13 = Hasher._finalize()();
        swift_release(v10);
        v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9)
            goto LABEL_5;
        }
        else if (v14 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          v15 = *(_QWORD *)(v3 + 48);
          v16 = (_QWORD *)(v15 + 8 * v2);
          v17 = (_QWORD *)(v15 + 8 * v6);
          if (v2 != v6 || (v2 = v6, v16 >= v17 + 1))
          {
            *v16 = *v17;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v18 = *(_QWORD *)(v3 + 16);
  v19 = __OFSUB__(v18, 1);
  v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

unint64_t sub_1001FB68C(unint64_t result)
{
  _QWORD *v1;
  int64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  Swift::UInt v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  _QWORD v18[9];

  v2 = result;
  v3 = *v1;
  v4 = *v1 + 56;
  v5 = -1 << *(_BYTE *)(*v1 + 32);
  v6 = (result + 1) & ~v5;
  if (((1 << v6) & *(_QWORD *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    v7 = ~v5;
    swift_retain(*v1);
    v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(_QWORD *)(v4 + 8 * (v6 >> 6)) & (1 << v6)) != 0)
    {
      v9 = (v8 + 1) & v7;
      do
      {
        v10 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v6);
        Hasher.init(_seed:)(v18, *(_QWORD *)(v3 + 40));
        Hasher._combine(_:)(v10);
        v11 = Hasher._finalize()() & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v11 < v9)
            goto LABEL_5;
        }
        else if (v11 >= v9)
        {
          goto LABEL_11;
        }
        if (v2 >= (uint64_t)v11)
        {
LABEL_11:
          v12 = *(_QWORD *)(v3 + 48);
          v13 = (_BYTE *)(v12 + v2);
          v14 = (_BYTE *)(v12 + v6);
          if (v2 != v6 || (v2 = v6, v13 >= v14 + 1))
          {
            *v13 = *v14;
            v2 = v6;
          }
        }
LABEL_5:
        v6 = (v6 + 1) & v7;
      }
      while (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0);
    }
    *(_QWORD *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << v2) - 1;
    result = swift_release(v3);
  }
  else
  {
    *(_QWORD *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) &= (-1 << result) - 1;
  }
  v15 = *(_QWORD *)(v3 + 16);
  v16 = __OFSUB__(v15, 1);
  v17 = v15 - 1;
  if (v16)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v3 + 16) = v17;
    ++*(_DWORD *)(v3 + 36);
  }
  return result;
}

void sub_1001FB834(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unint64_t v12;
  int64_t v13;

  if (!*(_QWORD *)(*(_QWORD *)v1 + 16))
    return;
  v3 = a1 + 56;
  v4 = 1 << *(_BYTE *)(a1 + 32);
  v5 = -1;
  if (v4 < 64)
    v5 = ~(-1 << v4);
  v6 = v5 & *(_QWORD *)(a1 + 56);
  v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    if (v6)
    {
      v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }
    v11 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_27;
    }
    if (v11 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      v8 = v11 + 1;
      if (v11 + 1 >= v7)
        goto LABEL_24;
      v12 = *(_QWORD *)(v3 + 8 * v8);
      if (!v12)
      {
        v8 = v11 + 2;
        if (v11 + 2 >= v7)
          goto LABEL_24;
        v12 = *(_QWORD *)(v3 + 8 * v8);
        if (!v12)
        {
          v8 = v11 + 3;
          if (v11 + 3 >= v7)
            goto LABEL_24;
          v12 = *(_QWORD *)(v3 + 8 * v8);
          if (!v12)
            break;
        }
      }
    }
LABEL_23:
    v6 = (v12 - 1) & v12;
    v10 = __clz(__rbit64(v12)) + (v8 << 6);
LABEL_6:
    sub_1001FB018(*(_BYTE *)(*(_QWORD *)(a1 + 48) + v10));
  }
  v13 = v11 + 4;
  if (v13 >= v7)
  {
LABEL_24:
    swift_release(a1);
    return;
  }
  v12 = *(_QWORD *)(v3 + 8 * v13);
  if (v12)
  {
    v8 = v13;
    goto LABEL_23;
  }
  while (1)
  {
    v8 = v13 + 1;
    if (__OFADD__(v13, 1))
      break;
    if (v8 >= v7)
      goto LABEL_24;
    v12 = *(_QWORD *)(v3 + 8 * v8);
    ++v13;
    if (v12)
      goto LABEL_23;
  }
LABEL_27:
  __break(1u);
}

Swift::Int sub_1001FB994(uint64_t isStackAllocationSafe, uint64_t a2)
{
  uint64_t v3;
  char v4;
  unsigned int v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  Swift::Int v9;
  void *v10;
  uint64_t v12;

  v3 = isStackAllocationSafe;
  v4 = *(_BYTE *)(a2 + 32);
  v5 = v4 & 0x3F;
  v6 = (1 << v4) + 63;
  v7 = v6 >> 6;
  v8 = 8 * (v6 >> 6);
  if (v5 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v6 >> 6), 8), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe, a2);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    v9 = sub_1001FBB14((Swift::Int)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, a2, v3);
    swift_release(a2);
  }
  else
  {
    v10 = (void *)swift_slowAlloc(v8, -1);
    bzero(v10, v8);
    v9 = sub_1001FBB14((Swift::Int)v10, v7, a2, v3);
    swift_release(a2);
    swift_slowDealloc(v10, -1, -1);
  }
  return v9;
}

Swift::Int sub_1001FBB14(Swift::Int result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t i;
  unint64_t v25;
  BOOL v26;
  int64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  unint64_t v35;
  int64_t v36;
  Swift::UInt v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t *v43;
  uint64_t v44;
  _QWORD v45[9];
  int64_t v46;

  v43 = (unint64_t *)result;
  v6 = 0;
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v7 = 0;
    v8 = a4 + 56;
    v9 = 1 << *(_BYTE *)(a4 + 32);
    if (v9 < 64)
      v10 = ~(-1 << v9);
    else
      v10 = -1;
    v11 = v10 & *(_QWORD *)(a4 + 56);
    v46 = (unint64_t)(v9 + 63) >> 6;
    v12 = a3 + 56;
    while (1)
    {
LABEL_6:
      if (v11)
      {
        v13 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        v14 = v13 | (v7 << 6);
      }
      else
      {
        v15 = v7 + 1;
        if (__OFADD__(v7, 1))
        {
          __break(1u);
LABEL_62:
          __break(1u);
          goto LABEL_63;
        }
        if (v15 >= v46)
          goto LABEL_60;
        v16 = *(_QWORD *)(v8 + 8 * v15);
        ++v7;
        if (!v16)
        {
          v7 = v15 + 1;
          if (v15 + 1 >= v46)
            goto LABEL_60;
          v16 = *(_QWORD *)(v8 + 8 * v7);
          if (!v16)
          {
            v7 = v15 + 2;
            if (v15 + 2 >= v46)
              goto LABEL_60;
            v16 = *(_QWORD *)(v8 + 8 * v7);
            if (!v16)
            {
              v17 = v15 + 3;
              if (v17 >= v46)
              {
LABEL_60:
                swift_retain(a3);
                return sub_1001FBF30(v43, a2, v6, a3);
              }
              v16 = *(_QWORD *)(v8 + 8 * v17);
              if (!v16)
              {
                while (1)
                {
                  v7 = v17 + 1;
                  if (__OFADD__(v17, 1))
                    break;
                  if (v7 >= v46)
                    goto LABEL_60;
                  v16 = *(_QWORD *)(v8 + 8 * v7);
                  ++v17;
                  if (v16)
                    goto LABEL_21;
                }
LABEL_63:
                __break(1u);
                goto LABEL_64;
              }
              v7 = v17;
            }
          }
        }
LABEL_21:
        v11 = (v16 - 1) & v16;
        v14 = __clz(__rbit64(v16)) + (v7 << 6);
      }
      v18 = *(unsigned __int8 *)(*(_QWORD *)(a4 + 48) + v14);
      Hasher.init(_seed:)(v45, *(_QWORD *)(a3 + 40));
      Hasher._combine(_:)(v18);
      result = Hasher._finalize()();
      v19 = -1 << *(_BYTE *)(a3 + 32);
      v20 = result & ~v19;
      v21 = v20 >> 6;
      v22 = 1 << v20;
      if (((1 << v20) & *(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
      {
        v23 = *(_QWORD *)(a3 + 48);
        if (*(unsigned __int8 *)(v23 + v20) != (_DWORD)v18)
        {
          for (i = v20 + 1; ; i = v25 + 1)
          {
            v25 = i & ~v19;
            if (((*(_QWORD *)(v12 + ((v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
              goto LABEL_6;
            if (*(unsigned __int8 *)(v23 + v25) == (_DWORD)v18)
              break;
          }
          v21 = v25 >> 6;
          v22 = 1 << v25;
        }
        v43[v21] |= v22;
        v26 = __OFADD__(v6++, 1);
        if (v26)
          break;
      }
    }
    __break(1u);
  }
  v27 = 0;
  v44 = a3 + 56;
  v28 = 1 << *(_BYTE *)(a3 + 32);
  if (v28 < 64)
    v29 = ~(-1 << v28);
  else
    v29 = -1;
  v30 = v29 & *(_QWORD *)(a3 + 56);
  v46 = (unint64_t)(v28 + 63) >> 6;
  v31 = a4 + 56;
  while (v30)
  {
    v32 = __clz(__rbit64(v30));
    v30 &= v30 - 1;
    v33 = v32 | (v27 << 6);
LABEL_52:
    v37 = *(unsigned __int8 *)(*(_QWORD *)(a3 + 48) + v33);
    Hasher.init(_seed:)(v45, *(_QWORD *)(a4 + 40));
    Hasher._combine(_:)(v37);
    result = Hasher._finalize()();
    v38 = -1 << *(_BYTE *)(a4 + 32);
    v39 = result & ~v38;
    if (((*(_QWORD *)(v31 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) != 0)
    {
      v40 = *(_QWORD *)(a4 + 48);
      if (*(unsigned __int8 *)(v40 + v39) == (_DWORD)v37)
      {
LABEL_57:
        *(unint64_t *)((char *)v43 + ((v33 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v33;
        v26 = __OFADD__(v6++, 1);
        if (v26)
        {
          __break(1u);
          goto LABEL_60;
        }
      }
      else
      {
        v41 = ~v38;
        while (1)
        {
          v39 = (v39 + 1) & v41;
          if (((*(_QWORD *)(v31 + ((v39 >> 3) & 0xFFFFFFFFFFFFF8)) >> v39) & 1) == 0)
            break;
          if (*(unsigned __int8 *)(v40 + v39) == (_DWORD)v37)
            goto LABEL_57;
        }
      }
    }
  }
  v34 = v27 + 1;
  if (__OFADD__(v27, 1))
    goto LABEL_62;
  if (v34 >= v46)
    goto LABEL_60;
  v35 = *(_QWORD *)(v44 + 8 * v34);
  ++v27;
  if (v35)
    goto LABEL_51;
  v27 = v34 + 1;
  if (v34 + 1 >= v46)
    goto LABEL_60;
  v35 = *(_QWORD *)(v44 + 8 * v27);
  if (v35)
    goto LABEL_51;
  v27 = v34 + 2;
  if (v34 + 2 >= v46)
    goto LABEL_60;
  v35 = *(_QWORD *)(v44 + 8 * v27);
  if (v35)
  {
LABEL_51:
    v30 = (v35 - 1) & v35;
    v33 = __clz(__rbit64(v35)) + (v27 << 6);
    goto LABEL_52;
  }
  v36 = v34 + 3;
  if (v36 >= v46)
    goto LABEL_60;
  v35 = *(_QWORD *)(v44 + 8 * v36);
  if (v35)
  {
    v27 = v36;
    goto LABEL_51;
  }
  while (1)
  {
    v27 = v36 + 1;
    if (__OFADD__(v36, 1))
      break;
    if (v27 >= v46)
      goto LABEL_60;
    v35 = *(_QWORD *)(v44 + 8 * v27);
    ++v36;
    if (v35)
      goto LABEL_51;
  }
LABEL_64:
  __break(1u);
  return result;
}

Swift::Int sub_1001FBF30(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  Swift::Int result;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  Swift::Int v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  Swift::UInt v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  unint64_t *v28;
  uint64_t v29[9];

  v4 = a4;
  if (!a3)
  {
    v9 = &_swiftEmptySetSingleton;
LABEL_36:
    swift_release(v4);
    return (Swift::Int)v9;
  }
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
    return v4;
  sub_100003DB8(&qword_10031FE78);
  result = static _SetStorage.allocate(capacity:)(v5);
  v9 = (_QWORD *)result;
  v28 = a1;
  if (a2 < 1)
    v10 = 0;
  else
    v10 = *a1;
  v11 = 0;
  v12 = result + 56;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v11 << 6);
      goto LABEL_24;
    }
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      goto LABEL_39;
    if (v15 >= a2)
      goto LABEL_36;
    v16 = v28[v15];
    ++v11;
    if (!v16)
    {
      v11 = v15 + 1;
      if (v15 + 1 >= a2)
        goto LABEL_36;
      v16 = v28[v11];
      if (!v16)
      {
        v11 = v15 + 2;
        if (v15 + 2 >= a2)
          goto LABEL_36;
        v16 = v28[v11];
        if (!v16)
          break;
      }
    }
LABEL_23:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v11 << 6);
LABEL_24:
    v18 = *(unsigned __int8 *)(*(_QWORD *)(v4 + 48) + v14);
    Hasher.init(_seed:)(v29, v9[5]);
    Hasher._combine(_:)(v18);
    result = Hasher._finalize()();
    v19 = -1 << *((_BYTE *)v9 + 32);
    v20 = result & ~v19;
    v21 = v20 >> 6;
    if (((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6))) != 0)
    {
      v22 = __clz(__rbit64((-1 << v20) & ~*(_QWORD *)(v12 + 8 * (v20 >> 6)))) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v23 = 0;
      v24 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v24 && (v23 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v25 = v21 == v24;
        if (v21 == v24)
          v21 = 0;
        v23 |= v25;
        v26 = *(_QWORD *)(v12 + 8 * v21);
      }
      while (v26 == -1);
      v22 = __clz(__rbit64(~v26)) + (v21 << 6);
    }
    *(_QWORD *)(v12 + ((v22 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v22;
    *(_BYTE *)(v9[6] + v22) = v18;
    ++v9[2];
    if (__OFSUB__(v5--, 1))
    {
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    if (!v5)
      goto LABEL_36;
  }
  v17 = v15 + 3;
  if (v17 >= a2)
    goto LABEL_36;
  v16 = v28[v17];
  if (v16)
  {
    v11 = v17;
    goto LABEL_23;
  }
  while (1)
  {
    v11 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v11 >= a2)
      goto LABEL_36;
    v16 = v28[v11];
    ++v17;
    if (v16)
      goto LABEL_23;
  }
LABEL_40:
  __break(1u);
  return result;
}

unint64_t sub_1001FC198()
{
  unint64_t result;

  result = qword_1003295F0;
  if (!qword_1003295F0)
  {
    result = swift_getWitnessTable(&unk_10025EAE8, &type metadata for SessionUserAttentionTracker.EventAssertion);
    atomic_store(result, (unint64_t *)&qword_1003295F0);
  }
  return result;
}

uint64_t sub_1001FC1DC()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1001FC200(uint64_t a1)
{
  uint64_t v1;

  return sub_1001F91A4(a1, v1);
}

double sub_1001FC208(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  double result;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  *(_QWORD *)&result = swift_retain(v2).n128_u64[0];
  return result;
}

uint64_t sub_1001FC218(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1001FC220(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1001FC25C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001FC2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *, __n128);
  __n128 v10;
  uint64_t v12;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin();
  v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *, __n128))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v10 = swift_retain(v8);
  v9(v7, v10);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

id sub_1001FC344()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  __n128 v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  objc_super v22;

  v1 = OBJC_IVAR____TtC8SOSBuddy28ApplicationActiveStateSource_appForegroundDidChange;
  v2 = sub_100003DB8(&qword_10031D150);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = v0;
  *(_QWORD *)&v0[v1] = PassthroughSubject.init()(v4);
  *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy28ApplicationActiveStateSource_observers] = _swiftEmptyArrayStorage;

  v22.receiver = v3;
  v22.super_class = (Class)type metadata accessor for ApplicationActiveStateSource();
  v5 = objc_msgSendSuper2(&v22, "init");
  v6 = qword_100315820;
  v7 = v5;
  if (v6 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v8 = type metadata accessor for Logger(0);
  sub_10000D744(v8, (uint64_t)qword_10033FD18);
  v9 = v7;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v21 = v13;
    *(_DWORD *)v12 = 136446210;
    v14 = v9;
    v15 = objc_msgSend(v14, "description");
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v20 = sub_100172BEC(v16, v18, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v12 + 4, v12 + 12);

    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "init: %{public}s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
  return v9;
}

id sub_1001FC5AC()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  objc_class *active;
  uint64_t v14;
  uint64_t v15;
  objc_super v16;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD18);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v15 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v14 = sub_100172BEC(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "deinit: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  active = (objc_class *)type metadata accessor for ApplicationActiveStateSource();
  v16.receiver = v2;
  v16.super_class = active;
  return objc_msgSendSuper2(&v16, "dealloc");
}

uint64_t type metadata accessor for ApplicationActiveStateSource()
{
  return objc_opt_self(_TtC8SOSBuddy28ApplicationActiveStateSource);
}

uint64_t sub_1001FC810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  uint64_t v18;
  void *v19;
  id v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  void **aBlock;
  uint64_t v37;
  uint64_t (*v38)(uint64_t, uint64_t);
  void *v39;
  uint64_t (*v40)(uint64_t);
  uint64_t v41;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (void ***)((char *)&aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_100315820 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315820, sub_1000D95E4);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FD18);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "ApplicationActiveStateSource::start", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = (void *)objc_opt_self(NSNotificationCenter);
  v15 = objc_msgSend(v14, "defaultCenter");
  v16 = (void *)objc_opt_self(NSOperationQueue);
  v17 = objc_msgSend(v16, "mainQueue");
  v18 = swift_allocObject(&unk_1002F99F0, 24, 7);
  swift_unknownObjectWeakInit(v18 + 16, v1);
  v40 = sub_1001FD024;
  v41 = v18;
  aBlock = _NSConcreteStackBlock;
  v37 = 1107296256;
  v38 = sub_1001FC2A0;
  v39 = &unk_1002F9A08;
  v19 = _Block_copy(&aBlock);
  swift_release(v41);
  v20 = objc_msgSend(v15, "addObserverForName:object:queue:usingBlock:", UIApplicationWillEnterForegroundNotification, 0, v17, v19);
  _Block_release(v19);

  v21 = (_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy28ApplicationActiveStateSource_observers);
  v22 = swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy28ApplicationActiveStateSource_observers, &aBlock, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v22);
  v24 = *(_QWORD *)((*v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v23 = *(_QWORD *)((*v21 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v24 >= v23 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
  v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v20);
  specialized Array._endMutation()(v25);
  swift_endAccess(&aBlock);
  v26 = objc_msgSend(v14, "defaultCenter");
  v27 = objc_msgSend(v16, "mainQueue");
  v28 = swift_allocObject(&unk_1002F99F0, 24, 7);
  swift_unknownObjectWeakInit(v28 + 16, v1);
  v40 = sub_1001FD060;
  v41 = v28;
  aBlock = _NSConcreteStackBlock;
  v37 = 1107296256;
  v38 = sub_1001FC2A0;
  v39 = &unk_1002F9A30;
  v29 = _Block_copy(&aBlock);
  swift_release(v41);
  v30 = objc_msgSend(v26, "addObserverForName:object:queue:usingBlock:", UIApplicationDidEnterBackgroundNotification, 0, v27, v29);
  _Block_release(v29);

  v31 = swift_beginAccess(v21, &aBlock, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v31);
  v33 = *(_QWORD *)((*v21 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v32 = *(_QWORD *)((*v21 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v33 >= v32 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
  v34 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v33, v30);
  specialized Array._endMutation()(v34);
  swift_endAccess(&aBlock);
  return 1;
}

uint64_t sub_1001FCC38(uint64_t a1, uint64_t a2, const char *a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t result;
  void *v13;
  uint64_t v14;
  char v15;
  _BYTE v16[24];

  v6 = a2 + 16;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10000D744(v7, (uint64_t)qword_10033FD18);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, a3, v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  swift_beginAccess(v6, v16, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v6);
  if (result)
  {
    v13 = (void *)result;
    v14 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy28ApplicationActiveStateSource_appForegroundDidChange);
    swift_retain(v14);

    v15 = a4;
    PassthroughSubject.send(_:)(&v15);
    return swift_release(v14);
  }
  return result;
}

void sub_1001FCD70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_100315820 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315820, sub_1000D95E4);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FD18);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "ApplicationActiveStateSource::stop", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = (uint64_t *)(v1 + OBJC_IVAR____TtC8SOSBuddy28ApplicationActiveStateSource_observers);
  swift_beginAccess(v14, v25, 1, 0);
  v15 = *v14;
  if (!((unint64_t)*v14 >> 62))
  {
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*v14);
    if (v16)
      goto LABEL_7;
LABEL_19:
    swift_bridgeObjectRelease(v15);
    v23 = *v14;
    *v14 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v23);
    return;
  }
  if (v15 < 0)
    v22 = *v14;
  else
    v22 = v15 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v14);
  v16 = _CocoaArrayWrapper.endIndex.getter(v22);
  if (!v16)
    goto LABEL_19;
LABEL_7:
  v17 = objc_opt_self(NSNotificationCenter);
  if (v16 >= 1)
  {
    v18 = (void *)v17;
    v19 = 0;
    do
    {
      if ((v15 & 0xC000000000000001) != 0)
      {
        v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v15);
      }
      else
      {
        v20 = *(_QWORD *)(v15 + 8 * v19 + 32);
        swift_unknownObjectRetain(v20);
      }
      ++v19;
      v21 = objc_msgSend(v18, "defaultCenter");
      objc_msgSend(v21, "removeObserver:", v20);
      swift_unknownObjectRelease(v20);

    }
    while (v16 != v19);
    goto LABEL_19;
  }
  __break(1u);
}

