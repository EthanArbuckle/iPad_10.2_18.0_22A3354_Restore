uint64_t sub_100002F6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  long double v20;
  double v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  _QWORD v25[2];

  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(a1, a2);
  v9 = (char *)v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ModifiedContent(0, v6, &type metadata for _OpacityEffect);
  v11 = *(_QWORD *)(v10 - 8);
  v13 = __chkstk_darwin(v10, v12);
  v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __chkstk_darwin(v13, v16);
  v19 = (char *)v25 - v18;
  v20 = Date.timeIntervalSinceReferenceDate.getter(v17);
  v21 = fabs(remainder(v20, 1.1)) / 0.55 * 0.7 + 0.3;
  (*(void (**)(void))(v3 + *(int *)(a1 + 36)))();
  v22 = *(_QWORD *)(a1 + 24);
  View.opacity(_:)(v6, v22, v21);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v25[0] = v22;
  v25[1] = &protocol witness table for _OpacityEffect;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  sub_100092E98((uint64_t)v15, v10, (uint64_t)v19);
  v23 = *(void (**)(char *, uint64_t))(v11 + 8);
  v23(v15, v10);
  sub_1000903EC((uint64_t)v19, v10, a3);
  return ((uint64_t (*)(char *, uint64_t))v23)(v19, v10);
}

uint64_t sub_100003140@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 *v2;
  __int128 *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  __n128 v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  __int128 v43;
  __n128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t);
  char *v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t OpaqueTypeMetadata2;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68[16];
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t WitnessTable;
  __int128 v83;

  v3 = v2;
  v67 = a2;
  v5 = type metadata accessor for AnimationTimelineSchedule(255);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v9 = type metadata accessor for TimelineViewContent(255, v6, v7, v8);
  sub_1000052EC(&qword_100316778, (uint64_t (*)(uint64_t))&type metadata accessor for AnimationTimelineSchedule, (uint64_t)&protocol conformance descriptor for AnimationTimelineSchedule);
  v10 = type metadata accessor for TimelineView(255, v5, v9);
  v11 = type metadata accessor for _ConditionalContent(255, v10, v6);
  WitnessTable = swift_getWitnessTable(&unk_10024CE88, v9);
  v80 = swift_getWitnessTable(&protocol conformance descriptor for <> TimelineView<A, B>, v10);
  v81 = v7;
  v54 = (uint64_t (*)(uint64_t))swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v11);
  v12 = type metadata accessor for VStack(0, v11, v54);
  v59 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v52 - v14;
  v16 = type metadata accessor for ModifiedContent(0, v12, &type metadata for _AppearanceActionModifier);
  v63 = *(_QWORD *)(v16 - 8);
  __chkstk_darwin(v16, v17);
  v55 = (char *)&v52 - v18;
  v19 = type metadata accessor for ModifiedContent(0, v16, &type metadata for _AppearanceActionModifier);
  v20 = *(_QWORD *)(v19 - 8);
  v61 = v19;
  v66 = v20;
  __chkstk_darwin(v19, v21);
  v57 = (char *)&v52 - v22;
  v53 = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v12);
  v78 = v53;
  v79 = &protocol witness table for _AppearanceActionModifier;
  v56 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v16);
  v76 = v56;
  v77 = &protocol witness table for _AppearanceActionModifier;
  v60 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v19);
  v72 = v19;
  v73 = &type metadata for Bool;
  v74 = v60;
  v75 = &protocol witness table for Bool;
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2(0, &v72, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 0);
  v65 = *(_QWORD *)(OpaqueTypeMetadata2 - 8);
  v24 = __chkstk_darwin(OpaqueTypeMetadata2, v23);
  v58 = (char *)&v52 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = __chkstk_darwin(v24, v26);
  v62 = (uint64_t)&v52 - v28;
  v69 = v6;
  v70 = v7;
  v71 = v3;
  v29 = static HorizontalAlignment.center.getter(v27);
  VStack.init(alignment:spacing:content:)(v29, 0, 0, sub_100005C28, v68, v11, v54);
  v30 = swift_allocObject(&unk_1002E3830, 80, 7);
  *(_QWORD *)(v30 + 16) = v6;
  *(_QWORD *)(v30 + 24) = v7;
  v31 = *v3;
  v32 = v3[1];
  *(_OWORD *)(v30 + 32) = *v3;
  *(_OWORD *)(v30 + 48) = v32;
  *(_OWORD *)(v30 + 64) = v3[2];
  v83 = v31;
  v33 = *((_QWORD *)v3 + 3);
  v54 = (uint64_t (*)(uint64_t))*((_QWORD *)v3 + 2);
  v34 = *((_QWORD *)v3 + 5);
  sub_100005C8C((uint64_t)&v83);
  swift_retain(v33);
  v35 = swift_retain(v34);
  v36 = v55;
  View.onAppear(perform:)(sub_100005C38, v30, v12, v53, v35);
  swift_release(v30);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v15, v12);
  v37 = swift_allocObject(&unk_1002E3858, 80, 7);
  *(_QWORD *)(v37 + 16) = v6;
  *(_QWORD *)(v37 + 24) = v7;
  v38 = v3[1];
  *(_OWORD *)(v37 + 32) = *v3;
  *(_OWORD *)(v37 + 48) = v38;
  *(_OWORD *)(v37 + 64) = v3[2];
  sub_100005C8C((uint64_t)&v83);
  swift_retain(v33);
  v39 = swift_retain(v34);
  v40 = v57;
  View.onDisappear(perform:)(sub_100005CB8, v37, v16, v56, v39);
  swift_release(v37);
  v41 = (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(v36, v16);
  LOBYTE(v72) = v54(v41) & 1;
  v42 = swift_allocObject(&unk_1002E3880, 80, 7);
  *(_QWORD *)(v42 + 16) = v6;
  *(_QWORD *)(v42 + 24) = v7;
  v43 = v3[1];
  *(_OWORD *)(v42 + 32) = *v3;
  *(_OWORD *)(v42 + 48) = v43;
  *(_OWORD *)(v42 + 64) = v3[2];
  sub_100005C8C((uint64_t)&v83);
  swift_retain(v33);
  v44 = swift_retain(v34);
  v45 = (uint64_t)v58;
  v46 = v61;
  v47 = v60;
  View.onChange<A>(of:initial:_:)(&v72, 0, sub_100005D04, v42, v61, &type metadata for Bool, v60, &protocol witness table for Bool, v44);
  swift_release(v42);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v40, v46);
  v72 = v46;
  v73 = &type metadata for Bool;
  v74 = v47;
  v75 = &protocol witness table for Bool;
  swift_getOpaqueTypeConformance2(&v72, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v48 = v62;
  v49 = OpaqueTypeMetadata2;
  sub_100092E98(v45, OpaqueTypeMetadata2, v62);
  v50 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
  v50(v45, v49);
  sub_1000903EC(v48, v49, v67);
  return ((uint64_t (*)(uint64_t, uint64_t))v50)(v48, v49);
}

uint64_t sub_1000036D4@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t WitnessTable;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  char v64;
  __int128 v65;

  v56 = a4;
  v50 = *(_QWORD *)(a2 - 8);
  v7 = __chkstk_darwin(a1, a2);
  v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (char *)&v49 - v11;
  v13 = type metadata accessor for AnimationTimelineSchedule(0);
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = a3;
  v18 = type metadata accessor for TimelineViewContent(255, a2, a3, v17);
  v19 = sub_1000052EC(&qword_100316778, (uint64_t (*)(uint64_t))&type metadata accessor for AnimationTimelineSchedule, (uint64_t)&protocol conformance descriptor for AnimationTimelineSchedule);
  v54 = v18;
  v49 = v19;
  v20 = type metadata accessor for TimelineView(0, v13, v18);
  v51 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20, v21);
  v24 = (char *)&v49 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v49 - v26;
  v28 = type metadata accessor for _ConditionalContent(0, v20, a2);
  v52 = *(_QWORD *)(v28 - 8);
  v53 = v28;
  __chkstk_darwin(v28, v29);
  v57 = (uint64_t)&v49 - v30;
  v65 = *a1;
  v63 = *a1;
  v31 = sub_100003DB8(&qword_100316780);
  v32 = State.wrappedValue.getter(&v64, v31);
  if (v64 == 1)
  {
    AnimationTimelineSchedule.init(minimumInterval:paused:)(0, 1, 0);
    v33 = *((_QWORD *)a1 + 3);
    v50 = *((_QWORD *)a1 + 5);
    v34 = swift_allocObject(&unk_1002E38A8, 80, 7);
    v35 = (uint64_t)v16;
    v36 = v55;
    *(_QWORD *)(v34 + 16) = a2;
    *(_QWORD *)(v34 + 24) = v36;
    v37 = a1[1];
    *(_OWORD *)(v34 + 32) = *a1;
    *(_OWORD *)(v34 + 48) = v37;
    *(_OWORD *)(v34 + 64) = a1[2];
    sub_100005C8C((uint64_t)&v65);
    swift_retain(v33);
    swift_retain(v50);
    v38 = v54;
    WitnessTable = swift_getWitnessTable(&unk_10024CE88, v54);
    v40 = v13;
    v41 = v38;
    sub_1000CD84C(v35, (uint64_t)sub_100005D78, v34, v40, v38, v49, WitnessTable);
    v58 = WitnessTable;
    v42 = swift_getWitnessTable(&protocol conformance descriptor for <> TimelineView<A, B>, v20);
    sub_100092E98((uint64_t)v24, v20, (uint64_t)v27);
    v43 = *(void (**)(char *, uint64_t))(v51 + 8);
    v43(v24, v20);
    sub_1000903EC((uint64_t)v27, v20, (uint64_t)v24);
    sub_100090404((uint64_t)v24, v20, a2, v42, v36);
    v43(v24, v20);
    v43(v27, v20);
  }
  else
  {
    (*((void (**)(_QWORD *))a1 + 4))(v32);
    v36 = v55;
    sub_100092E98((uint64_t)v9, a2, (uint64_t)v12);
    v44 = *(void (**)(char *, uint64_t))(v50 + 8);
    v44(v9, a2);
    sub_1000903EC((uint64_t)v12, a2, (uint64_t)v9);
    v41 = v54;
    v62 = swift_getWitnessTable(&unk_10024CE88, v54);
    v45 = swift_getWitnessTable(&protocol conformance descriptor for <> TimelineView<A, B>, v20);
    sub_1000904C8((uint64_t)v9, v20, a2, v45, v36);
    v44(v9, a2);
    v44(v12, a2);
  }
  v61 = swift_getWitnessTable(&unk_10024CE88, v41);
  v59 = swift_getWitnessTable(&protocol conformance descriptor for <> TimelineView<A, B>, v20);
  v60 = v36;
  v46 = v53;
  swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v53);
  v47 = v57;
  sub_1000903EC(v57, v46, v56);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(v47, v46);
}

uint64_t sub_100003B18@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  void (*v26)(char *, uint64_t, __n128);
  __n128 v27;
  uint64_t v29;
  uint64_t v30;

  v30 = a4;
  v7 = type metadata accessor for Date(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for TimelineViewContent(0, a2, a3, v12);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v29 - v20;
  v22 = sub_100003DB8(qword_100316788);
  TimelineView.Context.date.getter(v22);
  v24 = *(_QWORD *)(a1 + 32);
  v23 = *(_QWORD *)(a1 + 40);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v18, v11, v7);
  v25 = &v18[*(int *)(v13 + 36)];
  *(_QWORD *)v25 = v24;
  *((_QWORD *)v25 + 1) = v23;
  swift_getWitnessTable(&unk_10024CE88, v13);
  sub_100092E98((uint64_t)v18, v13, (uint64_t)v21);
  v26 = *(void (**)(char *, uint64_t, __n128))(v14 + 8);
  v27 = swift_retain(v23);
  v26(v18, v13, v27);
  sub_1000903EC((uint64_t)v21, v13, v30);
  return ((uint64_t (*)(char *, uint64_t))v26)(v21, v13);
}

_QWORD *sub_100003C9C(char a1)
{
  int v1;
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;

  v1 = a1 & 1;
  v2 = sub_100003DB8(&qword_100316780);
  result = State.wrappedValue.getter(&v4, v2);
  if (v4 != v1)
  {
    LOBYTE(v4) = v1;
    return (_QWORD *)State.wrappedValue.setter(&v4, v2);
  }
  return result;
}

uint64_t sub_100003D18()
{
  return static View._viewListCount(inputs:)();
}

uint64_t sub_100003D30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100003140(a1, a2);
}

uint64_t variable initialization expression of ConnectionAssistantDisplayState.offsetSpring@<X0>(uint64_t a1@<X8>)
{
  int *v2;

  v2 = (int *)sub_100003DB8(&qword_100316048);
  *(_QWORD *)(a1 + v2[9]) = 0;
  *(_QWORD *)(a1 + v2[10]) = 0;
  *(_QWORD *)(a1 + v2[11]) = 0;
  return Spring.init(response:dampingRatio:)(0.2, 3.0);
}

uint64_t sub_100003DB8(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t variable initialization expression of ConnectionAssistantDisplayState.hasCoordinateSpring@<X0>(uint64_t a1@<X8>)
{
  int *v2;

  v2 = (int *)sub_100003DB8(&qword_100316048);
  *(_QWORD *)(a1 + v2[9]) = 0;
  *(_QWORD *)(a1 + v2[10]) = 0;
  *(_QWORD *)(a1 + v2[11]) = 0;
  return Spring.init(response:dampingRatio:)(5.0, 1.0);
}

uint64_t _s8SOSBuddy31ConnectionAssistantDisplayStateC29targetRelativeAngleSnapSpring33_941F0C6B0CED33726E5F8721DE4B7EA5LLAA0J0Vy12CoreGraphics7CGFloatVGvpfi_0@<X0>(uint64_t a1@<X8>)
{
  int *v2;

  v2 = (int *)sub_100003DB8(&qword_100316048);
  *(_QWORD *)(a1 + v2[9]) = 0;
  *(_QWORD *)(a1 + v2[10]) = 0;
  *(_QWORD *)(a1 + v2[11]) = 0;
  return Spring.init(response:dampingRatio:)(1.0, 1.0);
}

uint64_t sub_100003E98@<X0>(uint64_t a1@<X8>)
{
  int *v2;

  v2 = (int *)sub_100003DB8(&qword_100316048);
  *(_QWORD *)(a1 + v2[9]) = 0;
  *(_QWORD *)(a1 + v2[10]) = 0;
  *(_QWORD *)(a1 + v2[11]) = 0;
  return Spring.init(response:dampingRatio:)(2.0, 1.0);
}

uint64_t sub_100003EE8@<X0>(uint64_t a1@<X8>)
{
  int *v2;

  v2 = (int *)sub_100003DB8(&qword_100316050);
  *(_DWORD *)(a1 + v2[9]) = 0;
  *(_DWORD *)(a1 + v2[10]) = 0;
  *(_DWORD *)(a1 + v2[11]) = 0;
  return Spring.init(response:dampingRatio:)(0.5, 1.0);
}

void variable initialization expression of ConnectionAssistantDisplayState.noLocationLoop(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0x404E000000000000;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
}

float variable initialization expression of ConnectionAssistantDisplayState.lastNoLocationValue()
{
  return 0.0;
}

void variable initialization expression of ConnectionAssistantDisplayState.conePulsingLoop(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1065353216;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0x3FF0000000000000;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
}

void variable initialization expression of ConnectionAssistantDisplayState.locationDotLoop(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0x4008000000000000;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
}

double variable initialization expression of ConnectionAssistantDisplayState.dotWaveLoop@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)a1 = 0;
  result = 3.0;
  *(_OWORD *)(a1 + 8) = xmmword_10024BC60;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

double variable initialization expression of ConnectionAssistantDisplayState.satelliteWaveLoop@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)a1 = 0;
  result = 3.0;
  *(_OWORD *)(a1 + 8) = xmmword_10024BC70;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 1;
  return result;
}

uint64_t variable initialization expression of ConnectionAssistantRendererEarthOutline.buffers()
{
  return 0;
}

double variable initialization expression of ConnectionAssistantStars.spawn@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 56) = 1;
  return result;
}

uint64_t variable initialization expression of ConnectionAssistantStars.color()
{
  return 0;
}

float variable initialization expression of ConnectionAssistantStars.size()
{
  return 3.0;
}

float variable initialization expression of ConnectionAssistantStars.opacity()
{
  return 0.3;
}

float variable initialization expression of ConnectionAssistantCamera.nearPlane()
{
  return 0.001;
}

float variable initialization expression of ConnectionAssistantCamera.farPlane()
{
  return 100.0;
}

float variable initialization expression of ConnectionAssistantEarth.radius()
{
  return 0.022436;
}

float variable initialization expression of ConnectionAssistantEarth.maximumAtmosphereRadiusScale()
{
  return 1.75;
}

float variable initialization expression of ConnectionAssistantSatellite.opacity()
{
  return 1.0;
}

double variable initialization expression of ConnectionAssistantEarth.dot@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_DWORD *)(a1 + 64) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 68) = 1;
  return result;
}

double variable initialization expression of ConnectionAssistantEarth.cone@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_WORD *)(a1 + 112) = 256;
  return result;
}

uint64_t variable initialization expression of ConnectionAssistantEarth.satellite@<X0>(uint64_t a1@<X8>)
{
  _BYTE v3[160];

  sub_10000410C((uint64_t)v3);
  return sub_100004134((uint64_t)v3, a1);
}

double sub_10000410C(uint64_t a1)
{
  double result;

  *(_WORD *)(a1 + 144) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_BYTE *)(a1 + 146) = 1;
  return result;
}

uint64_t sub_100004134(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100316058);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

double variable initialization expression of ConnectionAssistantSatelliteRenderer.satelliteTexture@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

float variable initialization expression of ConnectionAssistantArrow.pointThickness()
{
  return 3.0;
}

float variable initialization expression of ConnectionAssistantArrow.pointBlurRadius()
{
  return 16.0;
}

float variable initialization expression of ConnectionAssistantArrow.tipAngle()
{
  return 1.5708;
}

uint64_t variable initialization expression of ConnectionAssistantRenderer.Buffers.rectVertexCount()
{
  return 4;
}

double variable initialization expression of ConnectionAssistantSatellite.cone@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 96) = 256;
  return result;
}

double variable initialization expression of ConnectionAssistantCone.pulse@<D0>(uint64_t a1@<X8>)
{
  double result;

  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 32) = 1;
  return result;
}

uint64_t variable initialization expression of ConnectionAssistantRendererEarthOutline.textures()
{
  return 0;
}

uint64_t variable initialization expression of ConnectionAssistantRendererEarthOutline.lastViewport()
{
  return 0;
}

uint64_t variable initialization expression of ConnectionAssistantRendererEarthOutline.isTexturesLoading()
{
  return 0;
}

double variable initialization expression of ConnectionAssistantRenderer.RenderPipelines.Constants._earthAtmosphereColor()
{
  return 0.00000823974724;
}

__int16 variable initialization expression of ConnectionAssistantRenderer.RenderPipelines.Constants._earthAtmosphereInnerStrength@<H0>()
{
  return *(_WORD *)"f2f6";
}

__int16 variable initialization expression of ConnectionAssistantRenderer.RenderPipelines.Constants._earthAtmosphereOuterStrength@<H0>()
{
  return *(_WORD *)"f6";
}

__int16 variable initialization expression of ConnectionAssistantRenderer.RenderPipelines.Constants._earthAtmosphereGlowPower@<H0>()
{
  return *(_WORD *)"";
}

float variable initialization expression of ConnectionAssistantRenderer.RenderPipelines.Constants._earthOutlineWidth()
{
  return 0.5;
}

__n128 variable initialization expression of ConnectionAssistantRenderer.RenderPipelines.Constants._earthOutlineColor()
{
  __n128 result;

  __asm { FMOV            V0.4S, #1.0 }
  return result;
}

double variable initialization expression of ConnectionAssistantRenderer.RenderPipelines.Constants._coneBaseAlpha()
{
  return 0.000000381469872;
}

float variable initialization expression of ConnectionAssistantRenderer.RenderPipelines.Constants._coneEllipseAlpha()
{
  return 0.01;
}

double variable initialization expression of ConnectionAssistantRenderer.RenderPipelines.Constants._coneGaussianRadius()
{
  return 33554432.0;
}

__n128 variable initialization expression of ConnectionAssistantRenderer.RenderPipelines.constants@<Q0>(uint64_t a1@<X8>)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;

  if (qword_1003159B0 != -1)
    swift_once(&qword_1003159B0, sub_100225990);
  v2 = *(_OWORD *)&qword_1003400C0;
  *(_OWORD *)(a1 + 96) = xmmword_1003400B0;
  *(_OWORD *)(a1 + 112) = v2;
  *(_OWORD *)(a1 + 128) = xmmword_1003400D0;
  v3 = *(_OWORD *)&dword_100340080;
  *(_OWORD *)(a1 + 32) = xmmword_100340070;
  *(_OWORD *)(a1 + 48) = v3;
  v4 = xmmword_1003400A0;
  *(_OWORD *)(a1 + 64) = xmmword_100340090;
  *(_OWORD *)(a1 + 80) = v4;
  result = (__n128)xmmword_100340060;
  *(_OWORD *)a1 = static ConnectionAssistantRenderer.RenderPipelines.Constants.default;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t variable initialization expression of ConnectionAssistantRenderer.RenderPipelines._starKernelPipelineState()
{
  return 0;
}

unint64_t variable initialization expression of ConnectionAssistantRenderer.RenderPipelines._pipelines()
{
  return sub_10022700C((uint64_t)&_swiftEmptyArrayStorage);
}

_QWORD *sub_100004300@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

BOOL sub_100004314(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

_QWORD *sub_100004344(_QWORD *result)
{
  _QWORD *v1;

  *v1 |= *result;
  return result;
}

_QWORD *sub_100004358(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

Swift::Int sub_10000436C()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1000043B0()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1000043D8(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_100004418(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_100004424(uint64_t a1, uint64_t a2)
{
  return sub_100004A98(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100004444(uint64_t a1, uint64_t a2)
{
  return sub_100004A98(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100004454(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_1000044C8(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100004544@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

void sub_100004584(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_10000458C@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 | *result;
  return result;
}

_QWORD *sub_1000045A0@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 ^ *result;
  return result;
}

_QWORD *sub_1000045B4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  uint64_t v3;

  v3 = *v2 & *result;
  if (v3)
    *v2 &= ~*result;
  *(_QWORD *)a2 = v3;
  *(_BYTE *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1000045E0@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *result;
  v4 = *v2;
  *v2 |= *result;
  v5 = v4 & v3;
  *(_QWORD *)a2 = v5;
  *(_BYTE *)(a2 + 8) = v5 == 0;
  return result;
}

_QWORD *sub_100004604(_QWORD *result)
{
  _QWORD *v1;

  *v1 ^= *result;
  return result;
}

_QWORD *sub_100004618@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_10000462C(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL sub_100004640(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & *a1) == 0;
}

BOOL sub_100004654(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

BOOL sub_100004668()
{
  _QWORD *v0;

  return *v0 == 0;
}

uint64_t sub_100004678(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return SetAlgebra.init<A>(_:)(a1, a4, a2, a5, a3);
}

_QWORD *sub_100004690(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= ~*result;
  return result;
}

BOOL sub_1000046A4(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_1000046B8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

uint64_t sub_1000046CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = sub_100004C0C(a1);
  result = swift_bridgeObjectRelease(a1);
  *a2 = v4;
  return result;
}

_QWORD *sub_100004708@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_100004714(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000052EC((unint64_t *)&unk_100317D80, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_10024CCBC);
  v3 = sub_1000052EC(&qword_1003166A0, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_10024CC10);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100004798@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000047C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000052EC(&qword_1003166A8, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_10024CB18);
  v3 = sub_1000052EC((unint64_t *)&unk_1003166B0, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_10024CAB8);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100004844(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000052EC((unint64_t *)&qword_1003191B0, (uint64_t (*)(uint64_t))type metadata accessor for Option, (uint64_t)&unk_10024CD00);
  v3 = sub_1000052EC(&qword_1003166C0, (uint64_t (*)(uint64_t))type metadata accessor for Option, (uint64_t)&unk_10024C998);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000048C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000052EC(&qword_100316578, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_10024C1CC);
  v3 = sub_1000052EC(&qword_100316580, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_10024C16C);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_10000494C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000052EC(&qword_1003166D8, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_10024CD44);
  v3 = sub_1000052EC(&qword_1003166E0, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_10024C744);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_1000049D0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100004A14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_1000052EC(&qword_1003166C8, (uint64_t (*)(uint64_t))type metadata accessor for EventType, (uint64_t)&unk_10024C89C);
  v3 = sub_1000052EC(&qword_1003166D0, (uint64_t (*)(uint64_t))type metadata accessor for EventType, (uint64_t)&unk_10024C844);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100004A98(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100004AD4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100004B14(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

uint64_t sub_100004B84(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100004C0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return 0;
  result = 0;
  v4 = (uint64_t *)(a1 + 32);
  do
  {
    v6 = *v4++;
    v5 = v6;
    if ((v6 & ~result) == 0)
      v5 = 0;
    result |= v5;
    --v1;
  }
  while (v1);
  return result;
}

__n128 sub_100004C48(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

void type metadata accessor for ConnectionAssistantRendererLocationDotUniforms(uint64_t a1)
{
  sub_1000063E4(a1, &qword_100316480, (uint64_t)&unk_1002E28B0);
}

void type metadata accessor for ConnectionAssistantRendererFunctionConstantIndex(uint64_t a1)
{
  sub_1000063E4(a1, &qword_100316488, (uint64_t)&unk_1002E28F0);
}

__n128 initializeWithTake for QuestionnaireState.RecordedAnswer(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for QuestionnaireRevision(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for QuestionnaireRevision(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CLLocationCoordinate2D(uint64_t a1)
{
  sub_1000063E4(a1, &qword_100316490, (uint64_t)&unk_1002E2968);
}

__n128 sub_100004CF4(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __n128 result;
  __int128 v8;
  __int128 v9;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  v4 = a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  result = (__n128)a2[7];
  v8 = a2[8];
  v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t sub_100004D28(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 176))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100004D48(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 176) = v3;
  return result;
}

void type metadata accessor for ConnectionAssistantRendererConeUniforms(uint64_t a1)
{
  sub_1000063E4(a1, &qword_100316498, (uint64_t)&unk_1002E29E8);
}

uint64_t sub_100004DB4(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 80))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100004DD4(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 80) = v3;
  return result;
}

void type metadata accessor for ConnectionAssistantRendererVertexUniforms(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003164A0, (uint64_t)&unk_1002E2A98);
}

__n128 initializeWithTake for ConnectionAssistantDisplayState.ConeState(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantEarth.LightDirection(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantEarth.LightDirection(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 48) = v3;
  return result;
}

void type metadata accessor for ConnectionAssistantRendererEarthShapeFragmentUniforms(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003164A8, (uint64_t)&unk_1002E2B20);
}

void type metadata accessor for ConnectionAssistantRendererEarthShapeVertexUniforms(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003164B0, (uint64_t)&unk_1002E2BB0);
}

__n128 sub_100004EBC(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __n128 result;
  __int128 v9;
  __int128 v10;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  result = (__n128)a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

uint64_t sub_100004EF0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 192))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100004F10(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 192) = v3;
  return result;
}

void type metadata accessor for ConnectionAssistantRendererEarthUniforms(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003164B8, (uint64_t)&unk_1002E2C48);
}

__n128 initializeWithCopy for ConnectionAssistantCone.Pulse(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantCone.Pulse(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for ConnectionAssistantRendererSatelliteUniforms(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003164C0, (uint64_t)&unk_1002E2D08);
}

__n128 sub_100004FCC(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for simd_float4x4(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003164C8, (uint64_t)&unk_1002E2D88);
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003164D0, (uint64_t)&unk_1002E2E08);
}

__n128 initializeWithCopy for ConnectionAssistantDisplayState.TopInset.FullScreenTopInsets(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003164D8, (uint64_t)&unk_1002E2E88);
}

void type metadata accessor for MTLPixelFormat(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003164E0, (uint64_t)&unk_1002E2EB0);
}

void *sub_10000503C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x120uLL);
}

uint64_t sub_100005044(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 288))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100005064(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 280) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 288) = v3;
  return result;
}

void type metadata accessor for ConnectionAssistantRendererEarthTexturedUniforms(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003164E8, (uint64_t)&unk_1002E2F28);
}

__n128 sub_1000050F0(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t sub_10000510C(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_10000512C(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 96) = v3;
  return result;
}

void type metadata accessor for ConnectionAssistantRendererArrowUniforms(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003164F0, (uint64_t)&unk_1002E3008);
}

void type metadata accessor for ConnectionAssistantRendererStarFragmentUniforms(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003164F8, (uint64_t)&unk_1002E3060);
}

void type metadata accessor for ConnectionAssistantRendererStarVertexUniforms(uint64_t a1)
{
  sub_1000063E4(a1, &qword_100316500, (uint64_t)&unk_1002E30E0);
}

void type metadata accessor for ConnectionAssistantRendererStarKernelUniforms(uint64_t a1)
{
  sub_1000063E4(a1, &qword_100316508, (uint64_t)&unk_1002E3160);
}

void type metadata accessor for CTSubscriptionSlot(uint64_t a1)
{
  sub_1000063E4(a1, &qword_100316510, (uint64_t)&unk_1002E31A0);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_1000063E4(a1, &qword_100316518, (uint64_t)&unk_1002E3218);
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
  sub_1000063E4(a1, &qword_100316520, (uint64_t)&unk_1002E3240);
}

void type metadata accessor for CTStewieConnectionAssistantEventType(uint64_t a1)
{
  sub_1000063E4(a1, &qword_100316528, (uint64_t)&unk_1002E3268);
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantCone.Pulse(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void type metadata accessor for CMQuaternion(uint64_t a1)
{
  sub_1000063E4(a1, &qword_100316530, (uint64_t)&unk_1002E32E0);
}

void type metadata accessor for SBUISystemApertureLayoutMode(uint64_t a1)
{
  sub_1000063E4(a1, &qword_100316538, (uint64_t)&unk_1002E3310);
}

void type metadata accessor for IDSOffGridModePublishStatus(uint64_t a1)
{
  sub_1000063E4(a1, &qword_100316540, (uint64_t)&unk_1002E3330);
}

void type metadata accessor for IDSOffGridMode(uint64_t a1)
{
  sub_1000063E4(a1, &qword_100316548, (uint64_t)&unk_1002E3350);
}

void type metadata accessor for CLAuthorizationStatus(uint64_t a1)
{
  sub_1000063E4(a1, &qword_100316550, (uint64_t)&unk_1002E3370);
}

uint64_t sub_100005294()
{
  return sub_1000052EC(&qword_100316558, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_10024C130);
}

uint64_t sub_1000052C0()
{
  return sub_1000052EC(&qword_100316560, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_10024C104);
}

uint64_t sub_1000052EC(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000532C()
{
  return sub_1000052EC(&qword_100316568, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_10024C1A0);
}

uint64_t sub_100005358()
{
  return sub_1000052EC(&qword_100316570, (uint64_t (*)(uint64_t))type metadata accessor for CTSubscriptionSlot, (uint64_t)&unk_10024C29C);
}

_QWORD *sub_100005384(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for ServicePredictionsModel.RequestToken(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ServicePredictionsModel.RequestToken(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 8) = v3;
  return result;
}

void type metadata accessor for ConnectionAssistantRendererEarthShapeShape(uint64_t a1)
{
  sub_1000063E4(a1, &qword_100316588, (uint64_t)&unk_1002E33E8);
}

uint64_t sub_1000053EC(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantRendererProjection.Circle(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 12))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantRendererProjection.Circle(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 12) = v3;
  return result;
}

void type metadata accessor for ConnectionAssistantRendererEarthShapeCoordinate(uint64_t a1)
{
  sub_1000063E4(a1, &qword_100316590, (uint64_t)&unk_1002E3468);
}

void type metadata accessor for LaunchOptionsKey(uint64_t a1)
{
  sub_1000063E4(a1, &qword_100316598, (uint64_t)&unk_1002E3498);
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003165A0, (uint64_t)&unk_1002E34C0);
}

void type metadata accessor for Option(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003165A8, (uint64_t)&unk_1002E34E8);
}

void type metadata accessor for UIEdgeInsets(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003165B0, (uint64_t)&unk_1002E3568);
}

void type metadata accessor for StoppedReason(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003165B8, (uint64_t)&unk_1002E3598);
}

void type metadata accessor for EventType(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003165C0, (uint64_t)&unk_1002E35B8);
}

void type metadata accessor for Key(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003165C8, (uint64_t)&unk_1002E35E0);
}

void type metadata accessor for CTCAStewieEmergencyRequestReason(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003165D0, (uint64_t)&unk_1002E3608);
}

void type metadata accessor for UNAuthorizationStatus(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003165D8, (uint64_t)&unk_1002E3628);
}

void type metadata accessor for CTStewieExitReason(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003165E0, (uint64_t)&unk_1002E3648);
}

__n128 initializeBufferWithCopyOfBuffer for QuestionnairePolicy.AutoSendPolicy(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for QuestionnairePolicy.AutoSendPolicy(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for QuestionnairePolicy.AutoSendPolicy(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 24) = v3;
  return result;
}

void type metadata accessor for ConnectionAssistantRendererEllipse(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003165E8, (uint64_t)&unk_1002E36C0);
}

void type metadata accessor for CTStewieServiceType(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003165F0, (uint64_t)&unk_1002E36F0);
}

uint64_t sub_1000055B0(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000055D0(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 64) = v3;
  return result;
}

void type metadata accessor for simd_float4x3(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003165F8, (uint64_t)&unk_1002E3770);
}

uint64_t sub_100005620()
{
  return sub_1000052EC(&qword_100316600, (uint64_t (*)(uint64_t))type metadata accessor for CTStewieServiceType, (uint64_t)&unk_10024C584);
}

uint64_t sub_10000564C()
{
  return sub_1000052EC(&qword_100316608, (uint64_t (*)(uint64_t))type metadata accessor for CTStewieServiceType, (uint64_t)&unk_10024C554);
}

uint64_t sub_100005678()
{
  return sub_1000052EC(&qword_100316610, (uint64_t (*)(uint64_t))type metadata accessor for CTStewieServiceType, (uint64_t)&unk_10024C5AC);
}

uint64_t sub_1000056A4()
{
  return sub_1000052EC(&qword_100316618, (uint64_t (*)(uint64_t))type metadata accessor for CTStewieServiceType, (uint64_t)&unk_10024C5E4);
}

uint64_t sub_1000056D0()
{
  return sub_1000052EC(&qword_100316620, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_10024C70C);
}

uint64_t sub_1000056FC()
{
  return sub_1000052EC(&qword_100316628, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_10024C6E4);
}

uint64_t sub_100005728()
{
  return sub_1000052EC(&qword_100316630, (uint64_t (*)(uint64_t))type metadata accessor for EventType, (uint64_t)&unk_10024C80C);
}

uint64_t sub_100005754()
{
  return sub_1000052EC(&qword_100316638, (uint64_t (*)(uint64_t))type metadata accessor for EventType, (uint64_t)&unk_10024C7E4);
}

uint64_t sub_100005780()
{
  return sub_1000052EC(&qword_100316640, (uint64_t (*)(uint64_t))type metadata accessor for EventType, (uint64_t)&unk_10024C874);
}

uint64_t sub_1000057AC()
{
  return sub_1000052EC(&qword_100316648, (uint64_t (*)(uint64_t))type metadata accessor for Option, (uint64_t)&unk_10024C95C);
}

uint64_t sub_1000057D8()
{
  return sub_1000052EC(&qword_100316650, (uint64_t (*)(uint64_t))type metadata accessor for Option, (uint64_t)&unk_10024C930);
}

uint64_t sub_100005804()
{
  return sub_1000052EC(&qword_100316658, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_10024CA7C);
}

uint64_t sub_100005830()
{
  return sub_1000052EC(&qword_100316660, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_10024CA50);
}

uint64_t sub_10000585C()
{
  return sub_1000052EC(&qword_100316668, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, (uint64_t)&unk_10024CAEC);
}

uint64_t sub_100005888()
{
  return sub_1000052EC(&qword_100316670, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_10024CBD4);
}

uint64_t sub_1000058B4()
{
  return sub_1000052EC(&qword_100316678, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_10024CBA8);
}

uint64_t sub_1000058E0()
{
  return sub_1000052EC(&qword_100316680, (uint64_t (*)(uint64_t))type metadata accessor for LaunchOptionsKey, (uint64_t)&unk_10024CC44);
}

uint64_t sub_10000590C()
{
  return sub_1000052EC(&qword_100316688, (uint64_t (*)(uint64_t))type metadata accessor for Option, (uint64_t)&unk_10024C9CC);
}

uint64_t sub_100005938()
{
  return sub_1000052EC((unint64_t *)&unk_100316690, (uint64_t (*)(uint64_t))type metadata accessor for Key, (uint64_t)&unk_10024C774);
}

void type metadata accessor for CTStewieNotifyOption(uint64_t a1)
{
  sub_1000063E4(a1, &qword_1003166E8, (uint64_t)&unk_1002E3798);
}

void type metadata accessor for Style(uint64_t a1)
{
  sub_1000063E4(a1, qword_1003166F0, (uint64_t)&unk_1002E37B8);
}

uint64_t sub_10000598C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 32);
}

uint64_t initializeBufferWithCopyOfBuffer for QuestionPresentation(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

uint64_t sub_1000059C4(_QWORD *a1)
{
  swift_release(a1[1]);
  swift_release(a1[3]);
  return swift_release(a1[5]);
}

uint64_t sub_1000059F4(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  uint64_t v4;
  __int128 v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 40);
  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 40) = v4;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v4);
  return a1;
}

uint64_t sub_100005A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v5;
  swift_retain(v5);
  swift_release(v4);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_retain(v6);
  swift_release(v7);
  v9 = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v9;
  *(_QWORD *)(a1 + 40) = v8;
  swift_retain(v8);
  swift_release(v10);
  return a1;
}

__n128 initializeWithTake for AppEvents.AppPageEvent(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t sub_100005AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_release(*(_QWORD *)(a1 + 8));
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release(*(_QWORD *)(a1 + 24));
  v4 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v4;
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for MultipleChoiceContentView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MultipleChoiceContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t type metadata accessor for PulsatingView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for PulsatingView);
}

uint64_t sub_100005BE8(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_10029406C, 1);
}

uint64_t type metadata accessor for TimelineViewContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for TimelineViewContent);
}

uint64_t sub_100005C28@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000036D4(*(__int128 **)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

_QWORD *sub_100005C38()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 16);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = (*(uint64_t (**)(void))(v0 + 48))();
  type metadata accessor for PulsatingView(0, v1, v2, v4);
  return sub_100003C9C(v3 & 1);
}

uint64_t sub_100005C8C(uint64_t a1)
{
  swift_retain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_100005CB8()
{
  uint64_t v0;
  uint64_t v1;
  char v3;
  __int128 v4;

  v4 = *(_OWORD *)(v0 + 32);
  v3 = 0;
  v1 = sub_100003DB8(&qword_100316780);
  return State.wrappedValue.setter(&v3, v1);
}

_QWORD *sub_100005D04(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;

  v5 = *a2;
  type metadata accessor for PulsatingView(0, *(_QWORD *)(v4 + 16), *(_QWORD *)(v4 + 24), a4);
  return sub_100003C9C(v5);
}

uint64_t sub_100005D44()
{
  _QWORD *v0;

  swift_release(v0[5]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100005D78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100003B18(v1 + 32, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_100005D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return swift_getGenericMetadata(a1, v6, a5);
}

uint64_t sub_100005DB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24);
}

uint64_t sub_100005DB8(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[2];

  result = type metadata accessor for Date(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 0, 2, v4, a1 + 32);
    return 0;
  }
  return result;
}

uint64_t *sub_100005E2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    v7 = type metadata accessor for Date(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 36);
    v9 = (uint64_t *)((char *)a1 + v8);
    v10 = (uint64_t *)((char *)a2 + v8);
    v11 = v10[1];
    *v9 = *v10;
    v9[1] = v11;
  }
  swift_retain(v11);
  return a1;
}

uint64_t sub_100005EBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  return swift_release(*(_QWORD *)(a1 + *(int *)(a2 + 36) + 8));
}

uint64_t sub_100005F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 36);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain(v10);
  return a1;
}

uint64_t sub_100005F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 36);
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  v10 = v9[1];
  v11 = v8[1];
  *v8 = *v9;
  v8[1] = v10;
  swift_retain(v10);
  swift_release(v11);
  return a1;
}

uint64_t sub_100005FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 36)) = *(_OWORD *)(a2 + *(int *)(a3 + 36));
  return a1;
}

uint64_t sub_10000603C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for Date(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 36);
  v8 = *(_QWORD *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  swift_release(v8);
  return a1;
}

uint64_t sub_1000060A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000060B0);
}

uint64_t sub_1000060B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 36));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t sub_10000612C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100006138);
}

uint64_t sub_100006138(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

uint64_t sub_1000061B0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t WitnessTable;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v13[11];

  v1 = *a1;
  v2 = a1[1];
  v3 = type metadata accessor for AnimationTimelineSchedule(255);
  v5 = type metadata accessor for TimelineViewContent(255, v1, v2, v4);
  sub_1000052EC(&qword_100316778, (uint64_t (*)(uint64_t))&type metadata accessor for AnimationTimelineSchedule, (uint64_t)&protocol conformance descriptor for AnimationTimelineSchedule);
  v6 = type metadata accessor for TimelineView(255, v3, v5);
  v7 = type metadata accessor for _ConditionalContent(255, v6, v1);
  v13[10] = swift_getWitnessTable(&unk_10024CE88, v5);
  v13[8] = swift_getWitnessTable(&protocol conformance descriptor for <> TimelineView<A, B>, v6);
  v13[9] = v2;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v7);
  v9 = type metadata accessor for VStack(255, v7, WitnessTable);
  v10 = type metadata accessor for ModifiedContent(255, v9, &type metadata for _AppearanceActionModifier);
  v11 = type metadata accessor for ModifiedContent(255, v10, &type metadata for _AppearanceActionModifier);
  v13[6] = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v9);
  v13[7] = &protocol witness table for _AppearanceActionModifier;
  v13[4] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  v13[5] = &protocol witness table for _AppearanceActionModifier;
  v13[0] = v11;
  v13[1] = &type metadata for Bool;
  v13[2] = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  v13[3] = &protocol witness table for Bool;
  return swift_getOpaqueTypeConformance2(v13, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t sub_100006348(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1002940A0, 1);
}

uint64_t sub_10000637C(_QWORD *a1)
{
  uint64_t v1;

  v1 = type metadata accessor for ModifiedContent(255, *a1, &type metadata for _OpacityEffect);
  return swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
}

void type metadata accessor for UIKeyboardType(uint64_t a1)
{
  sub_1000063E4(a1, (unint64_t *)&unk_100316810, (uint64_t)&unk_1002E3928);
}

void sub_1000063E4(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

uint64_t destroy for QuestionnaireBodyView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[6]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t *initializeWithCopy for QuestionnaireBodyView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2[2];
  v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  v8 = a2[4];
  v7 = a2[5];
  a1[4] = v8;
  a1[5] = v7;
  v10 = a2[6];
  v9 = a2[7];
  a1[6] = v10;
  a1[7] = v9;
  v11 = a2[8];
  a1[8] = v11;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v8);
  swift_retain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t *assignWithCopy for QuestionnaireBodyView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a1[4];
  v9 = a2[4];
  a1[4] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[5] = a2[5];
  v10 = a2[6];
  v11 = a1[6];
  a1[6] = v10;
  swift_retain(v10);
  swift_release(v11);
  a1[7] = a2[7];
  v12 = a2[8];
  v13 = a1[8];
  a1[8] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

__n128 initializeWithTake for QuestionnaireBodyView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t *assignWithTake for QuestionnaireBodyView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = a1[4];
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_release(v7);
  v9 = a2[6];
  v10 = a1[6];
  a1[5] = a2[5];
  a1[6] = v9;
  swift_release(v10);
  v11 = a2[8];
  v12 = a1[8];
  a1[7] = a2[7];
  a1[8] = v11;
  swift_bridgeObjectRelease(v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionnaireBodyView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnaireBodyView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 48) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionnaireBodyView()
{
  return &type metadata for QuestionnaireBodyView;
}

uint64_t sub_100006750(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100294110, 1);
}

uint64_t sub_100006760@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  uint64_t v17;
  _QWORD __src[47];
  _QWORD v19[5];

  v2 = v1;
  v4 = *(_QWORD **)(v1 + 16);
  if (v4)
  {
    v5 = v4[9];
    v6 = v4[10];
    sub_100007BBC(v4 + 6, v5);
    v7 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 24))(v19, v5, v6);
    v15[0] = static HorizontalAlignment.center.getter(v7);
    v15[1] = 0;
    v16 = 0;
    sub_1000068B0(v1, (uint64_t)v19, (uint64_t)&v17);
    v8 = swift_allocObject(&unk_1002E3BA0, 88, 7);
    v9 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(v8 + 48) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v8 + 64) = v9;
    *(_QWORD *)(v8 + 80) = *(_QWORD *)(v2 + 64);
    v10 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v8 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v8 + 32) = v10;
    sub_100007BEC((uint64_t)v15, (uint64_t)__src);
    __src[43] = sub_100007BE4;
    __src[44] = v8;
    __src[46] = 0;
    __src[45] = 0;
    sub_100007C34((uint64_t *)v2);
    sub_100007FF0((uint64_t)v15, &qword_100316A08);
    memcpy(a1, __src, 0x178uLL);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v19);
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 24);
    v13 = type metadata accessor for UIMetrics();
    v14 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v12, v13, v14);
    __break(1u);
  }
  return result;
}

uint64_t *sub_1000068B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _BOOL8 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t *result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[17];
  __int128 v29[11];
  uint64_t v30;
  __int128 v31[11];
  uint64_t v32;
  uint64_t v33[17];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  sub_100007CBC(a2, (uint64_t)v31);
  v6 = swift_allocObject(&unk_1002E3BC8, 128, 7);
  v7 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v6 + 64) = v7;
  *(_QWORD *)(v6 + 80) = *(_QWORD *)(a1 + 64);
  v8 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v6 + 32) = v8;
  sub_100007D04(v31, v6 + 88);
  sub_100007CBC(a2, (uint64_t)v29);
  v9 = swift_allocObject(&unk_1002E3BF0, 128, 7);
  v10 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v9 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v9 + 64) = v10;
  *(_QWORD *)(v9 + 80) = *(_QWORD *)(a1 + 64);
  v11 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v9 + 32) = v11;
  sub_100007D04(v29, v9 + 88);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_BYTE *)(v12 + 64) == 0;
  sub_100007C34((uint64_t *)a1);
  sub_100007C34((uint64_t *)a1);
  sub_10012E328(&v34, ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter, 0, sub_100007D1C, v6, sub_100007D78, v9, v13);
  v14 = *(_QWORD *)(a1 + 32);
  if (v14)
  {
    v46 = *(_QWORD *)(a1 + 32);
    v47 = 2;
    v49 = 0;
    v50 = 0;
    v48 = v12;
    swift_retain(v14);
    swift_retain(v12);
    sub_1000DDB6C((uint64_t)&v46, (uint64_t)v33);
    sub_100007D84(v33, (uint64_t)v28);
    v15 = v41;
    v29[8] = v42;
    v29[9] = v43;
    v16 = v43;
    v29[10] = v44;
    v17 = v38;
    v18 = v37;
    v29[4] = v38;
    v29[5] = v39;
    v19 = v39;
    v20 = v40;
    v29[6] = v40;
    v29[7] = v41;
    v29[0] = v34;
    v29[1] = v35;
    v22 = v34;
    v21 = v35;
    v23 = v36;
    v29[2] = v36;
    v29[3] = v37;
    *(_OWORD *)(a3 + 128) = v42;
    *(_OWORD *)(a3 + 144) = v16;
    *(_OWORD *)(a3 + 160) = v44;
    *(_OWORD *)(a3 + 64) = v17;
    *(_OWORD *)(a3 + 80) = v19;
    *(_OWORD *)(a3 + 96) = v20;
    *(_OWORD *)(a3 + 112) = v15;
    *(_OWORD *)a3 = v22;
    *(_OWORD *)(a3 + 16) = v21;
    v30 = v45;
    *(_QWORD *)(a3 + 176) = v45;
    *(_OWORD *)(a3 + 32) = v23;
    *(_OWORD *)(a3 + 48) = v18;
    sub_100007D84(v28, a3 + 184);
    sub_100007DC0((uint64_t *)v29);
    sub_100007E68(v33);
    sub_100007E68(v28);
    v31[8] = v42;
    v31[9] = v43;
    v31[10] = v44;
    v32 = v45;
    v31[4] = v38;
    v31[5] = v39;
    v31[6] = v40;
    v31[7] = v41;
    v31[0] = v34;
    v31[1] = v35;
    v31[2] = v36;
    v31[3] = v37;
    return sub_100007E9C((uint64_t *)v31);
  }
  else
  {
    v25 = *(_QWORD *)(a1 + 40);
    v26 = type metadata accessor for QuestionnaireState();
    v27 = sub_1000052EC(&qword_100316A18, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState, (uint64_t)&unk_10024D2FC);
    result = (uint64_t *)EnvironmentObject.error()(0, v25, v26, v27);
    __break(1u);
  }
  return result;
}

__n128 sub_100006B30@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  __n128 result;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;

  v6 = static HorizontalAlignment.center.getter(a1);
  sub_100006C6C(a1);
  v7 = a2[3];
  v8 = a2[4];
  sub_100007BBC(a2, v7);
  v9 = (*(double (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  v16 = static Edge.Set.all.getter();
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  *(_OWORD *)(a3 + 24) = v18;
  *(_OWORD *)(a3 + 40) = v19;
  *(_OWORD *)(a3 + 56) = v20;
  *(_OWORD *)(a3 + 72) = v21;
  *(_OWORD *)(a3 + 88) = v22;
  result = v23;
  *(__n128 *)(a3 + 104) = v23;
  *(_QWORD *)(a3 + 120) = v24;
  *(_QWORD *)(a3 + 128) = v25;
  *(_BYTE *)(a3 + 136) = v26;
  *(_BYTE *)(a3 + 137) = v27;
  *(_BYTE *)(a3 + 144) = v16;
  *(double *)(a3 + 152) = v9;
  *(_QWORD *)(a3 + 160) = v11;
  *(_QWORD *)(a3 + 168) = v13;
  *(_QWORD *)(a3 + 176) = v15;
  *(_BYTE *)(a3 + 184) = 0;
  return result;
}

void sub_100006C6C(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100006CBC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  _OWORD v38[4];
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int16 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  unsigned __int8 v50;

  v4 = *(_QWORD *)(v1 + 32);
  if (v4)
  {
    v5 = swift_allocObject(&unk_1002E3CB8, 88, 7);
    v6 = *(_OWORD *)(v1 + 48);
    *(_OWORD *)(v5 + 48) = *(_OWORD *)(v1 + 32);
    *(_OWORD *)(v5 + 64) = v6;
    *(_QWORD *)(v5 + 80) = *(_QWORD *)(v1 + 64);
    v7 = *(__n128 *)(v1 + 16);
    *(_OWORD *)(v5 + 16) = *(_OWORD *)v1;
    *(__n128 *)(v5 + 32) = v7;
    swift_retain_n(v2, 2, v7);
    swift_retain(v4);
    sub_100007C34((uint64_t *)v1);
    v8 = type metadata accessor for UIMetrics();
    v9 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v10 = ((uint64_t (*)(uint64_t, uint64_t))EnvironmentObject.init())(v8, v9);
    v11 = v2;
    v13 = v12;
    type metadata accessor for CGSize(0);
    v38[0] = 0uLL;
    ((void (*)(_OWORD *, uint64_t))State.init(wrappedValue:))(v38, v14);
    v15 = *(_QWORD *)(v3 - 192);
    v16 = *(_OWORD *)(v3 - 208);
    *(_QWORD *)(v3 - 208) = v10;
    *(_QWORD *)(v3 - 200) = v13;
    *(_QWORD *)(v3 - 192) = v4;
    *(_QWORD *)(v3 - 184) = v11;
    *(_QWORD *)(v3 - 176) = sub_10000853C;
    *(_QWORD *)(v3 - 168) = v5;
    *(_OWORD *)(v3 - 160) = v16;
    *(_QWORD *)(v3 - 144) = v15;
    *(_BYTE *)(v3 - 136) = 0;
    v17 = sub_1000080B8();
    v18 = sub_1000080FC();
    swift_retain(v10);
    swift_retain(v4);
    swift_retain(v11);
    swift_retain(v5);
    swift_retain(v15);
    _ConditionalContent<>.init(storage:)(v3 - 208, &type metadata for SingleChoiceContentView, &type metadata for MultipleChoiceContentView, v17, v18);
    v38[0] = v45;
    v38[1] = v46;
    v38[2] = v47;
    v38[3] = v48;
    v39 = v49;
    v40 = v50;
    v42 = 0;
    v43 = 0;
    v41 = 0;
    v44 = 0;
    v19 = sub_100003DB8(&qword_100316A60);
    v20 = sub_100003DB8(&qword_100316A68);
    v21 = sub_100008140(&qword_100316A70, &qword_100316A60, (void (*)(void))sub_1000080B8, (void (*)(void))sub_1000080FC);
    v22 = v11;
    v23 = sub_100008140(&qword_100316A88, &qword_100316A68, (void (*)(void))sub_100008030, (void (*)(void))sub_100008074);
    _ConditionalContent<>.init(storage:)(v38, v19, v20, v21, v23);
    ((void (*)())swift_release)();
    ((void (*)())swift_release)();
    ((void (*)())swift_release)();
    ((void (*)())swift_release)();
    ((void (*)())swift_release)();
    v24 = *(_QWORD *)(v3 - 112);
    LOBYTE(v19) = *(_BYTE *)(v3 - 104);
    v25 = *(_BYTE *)(v3 - 103);
    v32 = *(_OWORD *)(v3 - 208);
    v33 = *(_OWORD *)(v3 - 192);
    v34 = *(_OWORD *)(v3 - 176);
    v35 = *(_OWORD *)(v3 - 160);
    v36 = *(_OWORD *)(v3 - 128);
    v37 = *(_OWORD *)(v3 - 144);
    *(_QWORD *)v0 = v22;
    *(_OWORD *)(v0 + 8) = v32;
    *(_OWORD *)(v0 + 24) = v33;
    *(_OWORD *)(v0 + 40) = v34;
    *(_OWORD *)(v0 + 56) = v35;
    *(_OWORD *)(v0 + 72) = v37;
    *(_OWORD *)(v0 + 88) = v36;
    *(_QWORD *)(v0 + 104) = v24;
    *(_BYTE *)(v0 + 112) = v19;
    *(_BYTE *)(v0 + 113) = v25;
    v26 = v25;
    swift_retain(v22);
    sub_1000082B8(v32, *((uint64_t *)&v32 + 1), v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1), v37, *((uint64_t *)&v37 + 1), v36, *((uint64_t *)&v36 + 1), v24, v19, v26, (uint64_t (*)(uint64_t))sub_1000081B0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10000820C);
    sub_1000082B8(v32, *((uint64_t *)&v32 + 1), v33, *((uint64_t *)&v33 + 1), v34, *((uint64_t *)&v34 + 1), v35, *((uint64_t *)&v35 + 1), v37, *((uint64_t *)&v37 + 1), v36, *((uint64_t *)&v36 + 1), v24, v19, v26, (uint64_t (*)(uint64_t))sub_100008300, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100008378);
    return ((uint64_t (*)())swift_release)();
  }
  else
  {
    v28 = *(_QWORD *)(v1 + 40);
    v29 = type metadata accessor for QuestionnaireState();
    v30 = sub_1000052EC(&qword_100316A18, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState, (uint64_t)&unk_10024D2FC);
    v31 = swift_retain(v2);
    result = ((uint64_t (*)(_QWORD, uint64_t, uint64_t, uint64_t, __n128))EnvironmentObject.error())(0, v28, v29, v30, v31);
    __break(1u);
  }
  return result;
}

uint64_t sub_100007680()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12[8];
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *v0;
  if (*v0)
  {
    v1 = *(_QWORD *)(v2 + 200);
    v3 = v0[4];
    if (v3)
    {
      v4 = v0[6];
      v12[0] = 1;
      v13 = v3;
      v14 = 2;
      v16 = 0;
      v17 = 0;
      v15 = v4;
      swift_retain(v1);
      swift_retain(v4);
      swift_retain(v3);
      PassthroughSubject.send(_:)(v12);
      swift_release(v4);
      swift_release(v3);
      swift_release(v1);
      v5 = *(_QWORD *)(v2 + 168);
      v12[0] = 0;
      swift_retain(v5);
      PassthroughSubject.send(_:)(v12);
      return swift_release(v5);
    }
  }
  else
  {
    v7 = v0[1];
    v0 = (uint64_t *)type metadata accessor for AppEvents();
    v8 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    EnvironmentObject.error()(0, v7, v0, v8);
    __break(1u);
  }
  v9 = v0[5];
  v10 = type metadata accessor for QuestionnaireState();
  v11 = sub_1000052EC(&qword_100316A18, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState, (uint64_t)&unk_10024D2FC);
  swift_retain(v1);
  result = EnvironmentObject.error()(0, v9, v10, v11);
  __break(1u);
  return result;
}

uint64_t sub_1000077D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)();
  uint64_t v40;

  v37 = a3;
  v5 = sub_100003DB8(&qword_100316A20);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = sub_100003DB8(&qword_100316A28);
  v9 = *(_QWORD *)(v36 - 8);
  __chkstk_darwin(v36, v10);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(a1 + 48);
  v14 = swift_allocObject(&unk_1002E3C18, 88, 7);
  v15 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v14 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v14 + 64) = v15;
  *(_QWORD *)(v14 + 80) = *(_QWORD *)(a1 + 64);
  v16 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v14 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v14 + 32) = v16;
  v38 = v13;
  v39 = sub_100007F48;
  v40 = v14;
  v17 = enum case for DynamicTypeSize.accessibility2(_:);
  v18 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 104))(v8, v17, v18);
  swift_retain(v13);
  sub_100007C34((uint64_t *)a1);
  v19 = sub_1000052EC(&qword_100316A30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  result = dispatch thunk of static Equatable.== infix(_:_:)(v8, v8, v18, v19);
  if ((result & 1) != 0)
  {
    v21 = sub_100007F68();
    v22 = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    View.dynamicTypeSize<A>(_:)(v8, &type metadata for QuestionFooterView, v5, v21, v22);
    sub_100007FF0((uint64_t)v8, &qword_100316A20);
    swift_release(v38);
    swift_release(v40);
    v23 = a2[3];
    v24 = a2[4];
    sub_100007BBC(a2, v23);
    v25 = (*(double (**)(uint64_t, uint64_t))(v24 + 24))(v23, v24);
    v27 = v26;
    v29 = v28;
    v31 = v30;
    LOBYTE(v23) = static Edge.Set.all.getter();
    v33 = v36;
    v32 = v37;
    (*(void (**)(uint64_t, char *, uint64_t))(v9 + 16))(v37, v12, v36);
    v34 = v32 + *(int *)(sub_100003DB8(&qword_100316A48) + 36);
    *(_BYTE *)v34 = v23;
    *(double *)(v34 + 8) = v25;
    *(_QWORD *)(v34 + 16) = v27;
    *(_QWORD *)(v34 + 24) = v29;
    *(_QWORD *)(v34 + 32) = v31;
    *(_BYTE *)(v34 + 40) = 0;
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v33);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100007A58(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[8];
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*a1)
  {
    v1 = *(_QWORD *)(*a1 + 200);
    v2 = a1[4];
    if (v2)
    {
      v3 = a1[6];
      v10[0] = 0;
      v11 = v2;
      v12 = 2;
      v14 = 0;
      v15 = 0;
      v13 = v3;
      swift_retain(v1);
      swift_retain(v2);
      swift_retain(v3);
      PassthroughSubject.send(_:)(v10);
      swift_release(v3);
      swift_release(v2);
      return swift_release(v1);
    }
  }
  else
  {
    v5 = a1[1];
    v1 = type metadata accessor for AppEvents();
    v6 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    a1 = (_QWORD *)EnvironmentObject.error()(0, v5, v1, v6);
    __break(1u);
  }
  v7 = a1[5];
  v8 = type metadata accessor for QuestionnaireState();
  v9 = sub_1000052EC(&qword_100316A18, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState, (uint64_t)&unk_10024D2FC);
  swift_retain(v1);
  result = EnvironmentObject.error()(0, v7, v8, v9);
  __break(1u);
  return result;
}

uint64_t sub_100007B7C@<X0>(void *a1@<X8>)
{
  return sub_100006760(a1);
}

_QWORD *sub_100007BBC(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t sub_100007BE4()
{
  uint64_t v0;

  return sub_100007A58((_QWORD *)(v0 + 16));
}

uint64_t sub_100007BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100316A08);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t *sub_100007C34(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[6];
  swift_bridgeObjectRetain(a1[8]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100007CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t sub_100007D04(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

double sub_100007D1C@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_100006B30(v1 + 16, (_QWORD *)(v1 + 88), a1).n128_u64[0];
  return result;
}

uint64_t sub_100007D2C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 11);
  return swift_deallocObject(v0, 128, 7);
}

uint64_t sub_100007D78@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000077D4(v1 + 16, (_QWORD *)(v1 + 88), a1);
}

uint64_t sub_100007D84(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for QuestionnaireUserInactivityTrackerView(a2, a1);
  return a2;
}

uint64_t *sub_100007DC0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[7];
  v6 = a1[11];
  v7 = a1[13];
  v8 = a1[16];
  v9 = a1[19];
  swift_retain(a1[22]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  return a1;
}

_QWORD *sub_100007E68(_QWORD *a1)
{
  destroy for QuestionnaireUserInactivityTrackerView(a1);
  return a1;
}

uint64_t *sub_100007E9C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v3 = a1[3];
  v4 = a1[5];
  v5 = a1[11];
  v6 = a1[13];
  v7 = a1[16];
  v8 = a1[19];
  v9 = a1[22];
  swift_release(a1[7]);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  swift_release(v5);
  swift_release(v6);
  swift_release(v7);
  swift_release(v8);
  swift_release(v9);
  return a1;
}

uint64_t sub_100007F48()
{
  return sub_100007680();
}

unint64_t sub_100007F68()
{
  unint64_t result;

  result = qword_100316A38;
  if (!qword_100316A38)
  {
    result = swift_getWitnessTable(&unk_10024F524, &type metadata for QuestionFooterView);
    atomic_store(result, (unint64_t *)&qword_100316A38);
  }
  return result;
}

uint64_t sub_100007FAC(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_100007FF0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_100003DB8(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100008030()
{
  unint64_t result;

  result = qword_100316A50;
  if (!qword_100316A50)
  {
    result = swift_getWitnessTable(&unk_10024E494, &type metadata for FreeFormContentView);
    atomic_store(result, (unint64_t *)&qword_100316A50);
  }
  return result;
}

unint64_t sub_100008074()
{
  unint64_t result;

  result = qword_100316A58;
  if (!qword_100316A58)
  {
    result = swift_getWitnessTable("]{\t", &type metadata for BuiltInContentView);
    atomic_store(result, (unint64_t *)&qword_100316A58);
  }
  return result;
}

unint64_t sub_1000080B8()
{
  unint64_t result;

  result = qword_100316A78;
  if (!qword_100316A78)
  {
    result = swift_getWitnessTable(&unk_100251528, &type metadata for SingleChoiceContentView);
    atomic_store(result, (unint64_t *)&qword_100316A78);
  }
  return result;
}

unint64_t sub_1000080FC()
{
  unint64_t result;

  result = qword_100316A80;
  if (!qword_100316A80)
  {
    result = swift_getWitnessTable(&unk_1002603EC, &type metadata for MultipleChoiceContentView);
    atomic_store(result, (unint64_t *)&qword_100316A80);
  }
  return result;
}

uint64_t sub_100008140(unint64_t *a1, uint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100007FAC(a2);
    a3();
    a4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000081B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if ((a10 & 1) == 0)
    swift_retain(a9);
  swift_retain(a1);
  swift_retain(a3);
  swift_retain(a4);
  return swift_retain(a6);
}

uint64_t sub_10000820C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if ((a14 & 1) != 0)
  {
    swift_bridgeObjectRetain(a4);
    swift_retain(a6);
    swift_retain(a1);
  }
  else
  {
    a2 = a11;
    swift_bridgeObjectRetain(a13);
    swift_retain(a1);
    swift_retain(a3);
    swift_retain(a5);
    swift_retain(a6);
    swift_retain(a8);
    swift_bridgeObjectRetain(a10);
  }
  return swift_retain(a2);
}

uint64_t sub_1000082B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char a15, uint64_t (*a16)(uint64_t), uint64_t (*a17)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  if ((a15 & 1) != 0)
    return a17(a1, a2, a3, a4, a5);
  else
    return a16(a1);
}

uint64_t sub_100008300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t result;

  swift_release(a3);
  swift_release(a4);
  swift_release(a6);
  result = swift_release(a1);
  if ((a10 & 1) == 0)
    return swift_release(a9);
  return result;
}

uint64_t sub_100008378(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if ((a14 & 1) != 0)
  {
    swift_release(a1);
    swift_release(a2);
  }
  else
  {
    a4 = a13;
    swift_release(a5);
    swift_release(a6);
    swift_release(a8);
    swift_release(a1);
    swift_release(a3);
    swift_bridgeObjectRelease(a10);
    a6 = a11;
  }
  swift_release(a6);
  return swift_bridgeObjectRelease(a4);
}

uint64_t sub_100008430()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

unint64_t sub_100008478()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316A90;
  if (!qword_100316A90)
  {
    v1 = sub_100007FAC(&qword_100316A98);
    sub_1000084FC(&qword_100316AA0, &qword_100316A08, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100316A90);
  }
  return result;
}

uint64_t sub_1000084FC(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007FAC(a2);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SessionTrailingView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for SessionTrailingView(_QWORD *a1)
{
  return swift_release(*a1);
}

uint64_t *assignWithTake for SessionTrailingView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for SessionTrailingView()
{
  return &type metadata for SessionTrailingView;
}

uint64_t sub_1000085CC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100294170, 1);
}

uint64_t sub_1000085DC@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (*v1)
  {
    result = sub_100067058(0, *(_QWORD *)(*v1 + 200));
    if ((result & 1) != 0)
    {
      v4 = type metadata accessor for BannerAppearanceModel(0);
      v5 = sub_1000052EC(&qword_100316AA8, type metadata accessor for BannerAppearanceModel, (uint64_t)&unk_10024D2FC);
      v6 = EnvironmentObject.init()(v4, v5);
      v8 = v7;
      v9 = static Edge.Set.leading.getter();
      result = EdgeInsets.init(_all:)(3.0);
      v14 = v9;
    }
    else
    {
      v8 = 0;
      v14 = 0;
      v10 = 0;
      v6 = 1;
      v11 = 0;
      v12 = 0;
      v13 = 0;
    }
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v14;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v12;
    *(_QWORD *)(a1 + 48) = v13;
    *(_BYTE *)(a1 + 56) = 0;
  }
  else
  {
    v15 = v1[1];
    v16 = type metadata accessor for BannerAppearanceModel(0);
    v17 = sub_1000052EC(&qword_100316AA8, type metadata accessor for BannerAppearanceModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v15, v16, v17);
    __break(1u);
  }
  return result;
}

uint64_t *assignWithCopy for ReportEmergencyButtonLabelView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for FocusOrder(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FocusOrder(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SessionTrailingContentView()
{
  return &type metadata for SessionTrailingContentView;
}

unint64_t sub_1000087EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316AB0;
  if (!qword_100316AB0)
  {
    v1 = sub_100007FAC(&qword_100316AB8);
    sub_100008850();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100316AB0);
  }
  return result;
}

unint64_t sub_100008850()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316AC0;
  if (!qword_100316AC0)
  {
    v1 = sub_100007FAC(&qword_100316AC8);
    sub_1000088BC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100316AC0);
  }
  return result;
}

unint64_t sub_1000088BC()
{
  unint64_t result;

  result = qword_100316AD0;
  if (!qword_100316AD0)
  {
    result = swift_getWitnessTable("\ro\t", &type metadata for SessionTrailingContentView);
    atomic_store(result, (unint64_t *)&qword_100316AD0);
  }
  return result;
}

uint64_t sub_100008900(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002941E0, 1);
}

uint64_t sub_100008910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  __int128 v16;
  __int128 v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[3];
  __int16 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  char v27;
  char v28;
  _BYTE v29[24];

  v6 = sub_100003DB8(&qword_100316AD8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v10 = a1 + OBJC_IVAR____TtC8SOSBuddy21BannerAppearanceModel_bannerMode;
    swift_beginAccess(a1 + OBJC_IVAR____TtC8SOSBuddy21BannerAppearanceModel_bannerMode, v29, 0, 0);
    sub_10000B234(v10, (uint64_t)v9, &qword_100316AD8);
    v11 = type metadata accessor for ConnectionAssitantBannerMode.Mode(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v9, 1, v11) != 1)
    {
      v12 = (char *)&loc_100008A00 + 4 * byte_10024CF70[swift_getEnumCaseMultiPayload(v9, v11)];
      __asm { BR              X10 }
    }
    memset(v22, 0, sizeof(v22));
    v23 = 256;
    v13 = sub_100003DB8(&qword_100316AE0);
    v14 = sub_100008140(&qword_100316AE8, &qword_100316AE0, (void (*)(void))sub_100008D64, (void (*)(void))sub_100008DA8);
    result = _ConditionalContent<>.init(storage:)(v22, v13, &type metadata for EmptyView, v14, &protocol witness table for EmptyView);
    v16 = v25;
    v17 = v26;
    v18 = v27;
    v19 = v28;
    *(_OWORD *)a3 = v24;
    *(_OWORD *)(a3 + 16) = v16;
    *(_OWORD *)(a3 + 32) = v17;
    *(_BYTE *)(a3 + 48) = v18;
    *(_BYTE *)(a3 + 49) = v19;
  }
  else
  {
    v20 = type metadata accessor for BannerAppearanceModel(0);
    v21 = sub_1000052EC(&qword_100316AA8, type metadata accessor for BannerAppearanceModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v20, v21);
    __break(1u);
  }
  return result;
}

uint64_t sub_100008D5C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100008910(*v1, v1[1], a1);
}

unint64_t sub_100008D64()
{
  unint64_t result;

  result = qword_100316AF0;
  if (!qword_100316AF0)
  {
    result = swift_getWitnessTable(&unk_10024D110, &type metadata for _SessionTrailingContentConnectionAssistanceView);
    atomic_store(result, (unint64_t *)&qword_100316AF0);
  }
  return result;
}

unint64_t sub_100008DA8()
{
  unint64_t result;

  result = qword_100316AF8;
  if (!qword_100316AF8)
  {
    result = swift_getWitnessTable("Yn\t", &type metadata for _SessionTrailingContentExplorerView);
    atomic_store(result, (unint64_t *)&qword_100316AF8);
  }
  return result;
}

ValueMetadata *type metadata accessor for _SessionTrailingContentExplorerView()
{
  return &type metadata for _SessionTrailingContentExplorerView;
}

uint64_t destroy for QuestionnaireIntroductionView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  return swift_release(a1[4]);
}

uint64_t *initializeWithCopy for QuestionnaireIntroductionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2[2];
  v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  v8 = a2[4];
  v7 = a2[5];
  a1[4] = v8;
  a1[5] = v7;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v8);
  return a1;
}

uint64_t *assignWithCopy for QuestionnaireIntroductionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a1[4];
  v9 = a2[4];
  a1[4] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[5] = a2[5];
  return a1;
}

uint64_t *assignWithTake for QuestionnaireIntroductionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = a1[4];
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_release(v7);
  a1[5] = a2[5];
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionnaireIntroductionView(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 48))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnaireIntroductionView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for _SessionTrailingContentConnectionAssistanceView()
{
  return &type metadata for _SessionTrailingContentConnectionAssistanceView;
}

unint64_t sub_100009050()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316B18;
  if (!qword_100316B18)
  {
    v1 = sub_100007FAC(&qword_100316B20);
    sub_100008140(&qword_100316AE8, &qword_100316AE0, (void (*)(void))sub_100008D64, (void (*)(void))sub_100008DA8);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100316B18);
  }
  return result;
}

uint64_t sub_1000090DC(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100294230, 1);
}

void sub_1000090EC(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t (*v44)();
  unint64_t *v45;
  uint64_t v46;
  _QWORD v47[18];
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD v58[7];

  v57 = a1;
  v2 = type metadata accessor for ControlSize(0);
  v47[13] = *(_QWORD *)(v2 - 8);
  v47[14] = v2;
  __chkstk_darwin(v2, v3);
  v47[12] = (char *)v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CircularProgressViewStyle(0);
  v47[6] = *(_QWORD *)(v5 - 8);
  v47[7] = v5;
  __chkstk_darwin(v5, v6);
  v47[5] = (char *)v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100316B28);
  v47[3] = *(_QWORD *)(v8 - 8);
  v47[4] = v8;
  __chkstk_darwin(v8, v9);
  v47[2] = (char *)v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003DB8(&qword_100316B30);
  v47[10] = *(_QWORD *)(v11 - 8);
  v47[11] = v11;
  __chkstk_darwin(v11, v12);
  v47[9] = (char *)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = sub_100003DB8(&qword_100316B38);
  v15 = __chkstk_darwin(v51, v14);
  v47[8] = (char *)v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  v47[15] = (char *)v47 - v18;
  v49 = sub_100003DB8(&qword_100316B40);
  __chkstk_darwin(v49, v19);
  v50 = (char *)v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100003DB8(&qword_100316B48);
  __chkstk_darwin(v56, v21);
  v52 = (char *)v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100003DB8(&qword_100316B50);
  __chkstk_darwin(v23, v24);
  v47[16] = (char *)v47 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = sub_100003DB8(&qword_100316B58);
  __chkstk_darwin(v48, v26);
  v47[17] = (char *)v47 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = sub_100003DB8(&qword_100316B60);
  __chkstk_darwin(v54, v28);
  v53 = (char *)v47 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100003DB8(&qword_100316B68);
  __chkstk_darwin(v30, v31);
  v32 = type metadata accessor for TransmissionProgress(0);
  __chkstk_darwin(v32, v33);
  v47[1] = (char *)v47 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_100003DB8(&qword_100316B70);
  __chkstk_darwin(v35, v36);
  v55 = (char *)v47 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = (_QWORD *)v1[4];
  if (v38)
  {
    v39 = v38[9];
    v40 = v38[10];
    sub_100007BBC(v38 + 6, v39);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v40 + 16))(v58, v39, v40);
    if (v1[2])
      __asm { BR              X10 }
    v42 = v1[3];
    v43 = type metadata accessor for ConnectivityModel();
    v44 = type metadata accessor for ConnectivityModel;
    v45 = (unint64_t *)&unk_100316B00;
  }
  else
  {
    v42 = v1[5];
    v43 = type metadata accessor for UIMetrics();
    v44 = type metadata accessor for UIMetrics;
    v45 = (unint64_t *)&qword_100316A00;
  }
  v46 = sub_1000052EC(v45, (uint64_t (*)(uint64_t))v44, (uint64_t)&unk_10024D2FC);
  EnvironmentObject.error()(0, v42, v43, v46);
  __break(1u);
  JUMPOUT(0x100009E6CLL);
}

uint64_t sub_100009E90@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t KeyPath;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  __n128 v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[5];
  _QWORD v32[5];

  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v31, 2, 0, &_swiftEmptyArrayStorage, 2.0, 10.0, 0.0);
  v6 = v31[0];
  v7 = v31[3];
  v29 = v31[4];
  v30 = v31[2];
  v9 = a1[3];
  v8 = a1[4];
  sub_100007BBC(a1, v9);
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v8 + 8) + 24))(v9);
  KeyPath = swift_getKeyPath(&unk_10024D1C0);
  v12 = (double)*(uint64_t *)(a2 + *(int *)(type metadata accessor for TransmissionProgress(0) + 28)) / 100.0;
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v32, 2, 0, &_swiftEmptyArrayStorage, 2.0, 10.0, 0.0);
  v13 = v32[0];
  v14 = v32[2];
  v15 = v32[3];
  v16 = v32[4];
  v17 = Angle.animatableData.getter(1.57079633);
  v18 = Angle.animatableData.setter(0.0 - v17);
  v19 = static UnitPoint.center.getter(v18);
  v21 = v20;
  v23 = a1[3];
  v22 = a1[4];
  sub_100007BBC(a1, v23);
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v22 + 8) + 16))(v23);
  v25 = swift_getKeyPath(&unk_10024D1C0);
  v26 = v31[1];
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = v26;
  *(_QWORD *)(a3 + 16) = v30;
  *(_QWORD *)(a3 + 24) = v7;
  *(_QWORD *)(a3 + 32) = v29;
  *(_QWORD *)(a3 + 40) = KeyPath;
  *(_QWORD *)(a3 + 48) = v10;
  *(_QWORD *)(a3 + 56) = 0;
  *(double *)(a3 + 64) = v12;
  *(_QWORD *)(a3 + 72) = v13;
  *(_QWORD *)(a3 + 80) = v32[1];
  *(_QWORD *)(a3 + 88) = v14;
  *(_QWORD *)(a3 + 96) = v15;
  *(_QWORD *)(a3 + 104) = v16;
  *(_QWORD *)(a3 + 112) = 0x3FF921FB54442D18;
  *(double *)(a3 + 120) = v19;
  *(_QWORD *)(a3 + 128) = v21;
  *(_QWORD *)(a3 + 136) = v25;
  *(_QWORD *)(a3 + 144) = v24;
  swift_bridgeObjectRetain(v7);
  swift_retain(KeyPath);
  swift_release(v27);
  return swift_bridgeObjectRelease(v7);
}

void sub_10000A08C(uint64_t a1@<X8>)
{
  sub_1000090EC(a1);
}

uint64_t sub_10000A0C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  void (*v44)(char *, uint64_t);
  uint64_t v45;
  uint64_t v46;
  uint64_t OpaqueTypeConformance2;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t KeyPath;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  double v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t (*v66)(__n128);
  __n128 v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t result;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD v106[5];
  _QWORD v107[6];

  v2 = v1;
  v4 = sub_100003DB8(&qword_100316B50);
  __chkstk_darwin(v4, v5);
  v102 = (char *)&v85 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_100316C48);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for SymbolVariants(0);
  v11 = *(_QWORD *)(v88 - 8);
  __chkstk_darwin(v88, v12);
  v14 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100003DB8(&qword_100316C50);
  v90 = *(_QWORD *)(v92 - 8);
  __chkstk_darwin(v92, v15);
  v17 = (char *)&v85 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100003DB8(&qword_100316C58);
  v94 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95, v18);
  v93 = (char *)&v85 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100003DB8(&qword_100316C60);
  __chkstk_darwin(v89, v20);
  v22 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = sub_100003DB8(&qword_100316C68);
  __chkstk_darwin(v96, v23);
  v99 = (uint64_t)&v85 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_100003DB8(&qword_100316C70);
  __chkstk_darwin(v101, v25);
  v100 = (uint64_t)&v85 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = sub_100003DB8(&qword_100316C78);
  v104 = *(_QWORD *)(v27 - 8);
  v105 = v27;
  v29 = __chkstk_darwin(v27, v28);
  v98 = (char *)&v85 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v29, v31);
  v97 = (uint64_t)&v85 - v32;
  v33 = sub_100003DB8(&qword_100316C80);
  __chkstk_darwin(v33, v34);
  v103 = (uint64_t)&v85 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = (_QWORD *)v1[4];
  if (v36)
  {
    v38 = v36[9];
    v37 = v36[10];
    v91 = v36 + 6;
    sub_100007BBC(v36 + 6, v38);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v37 + 16))(v107, v38, v37);
    v40 = *v1;
    v39 = v1[1];
    v41 = sub_10000B0B8(*v2, v2[1], v2[2], v2[3]);
    if (!v42)
    {
      v78 = 1;
      v77 = v103;
      goto LABEL_6;
    }
    v86 = v39;
    v87 = a1;
    v106[0] = Image.init(systemName:)(v41, v42, v43);
    static SymbolVariants.circle.getter();
    View.symbolVariant(_:)(v14, &type metadata for Image, &protocol witness table for Image);
    v44 = *(void (**)(char *, uint64_t))(v11 + 8);
    v45 = v88;
    v44(v14, v88);
    v46 = swift_release(v106[0]);
    static SymbolVariants.fill.getter(v46);
    v106[0] = &type metadata for Image;
    v106[1] = &protocol witness table for Image;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v106, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
    v48 = v93;
    v49 = v92;
    View.symbolVariant(_:)(v14, v92, OpaqueTypeConformance2);
    v44(v14, v45);
    v50 = (*(uint64_t (**)(char *, uint64_t))(v90 + 8))(v17, v49);
    static SymbolRenderingMode.hierarchical.getter(v50);
    v51 = type metadata accessor for SymbolRenderingMode(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 56))(v10, 0, 1, v51);
    KeyPath = swift_getKeyPath(&unk_10024D1F0);
    v53 = (uint64_t *)&v22[*(int *)(v89 + 36)];
    v54 = sub_100003DB8(&qword_100316C88);
    sub_10000B234((uint64_t)v10, (uint64_t)v53 + *(int *)(v54 + 28), &qword_100316C48);
    *v53 = KeyPath;
    v55 = v94;
    v56 = v95;
    (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v22, v48, v95);
    sub_100007FF0((uint64_t)v10, &qword_100316C48);
    v57 = (*(uint64_t (**)(char *, uint64_t))(v55 + 8))(v48, v56);
    v58 = static Font.Weight.medium.getter(v57);
    v59 = type metadata accessor for Font.Design(0);
    v60 = (uint64_t)v102;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v59 - 8) + 56))(v102, 1, 1, v59);
    v61 = static Font.system(size:weight:design:)(*(_QWORD *)&v58, 0, v60, 22.0);
    sub_100007FF0(v60, &qword_100316B50);
    v62 = swift_getKeyPath(&unk_10024D190);
    v63 = v99;
    sub_10000B234((uint64_t)v22, v99, &qword_100316C60);
    v64 = (uint64_t *)(v63 + *(int *)(v96 + 36));
    *v64 = v62;
    v64[1] = v61;
    sub_100007FF0((uint64_t)v22, &qword_100316C60);
    sub_100007CBC((uint64_t)v91, (uint64_t)v106);
    v65 = v106[4];
    sub_100007BBC(v106, v106[3]);
    if (v40)
    {
      v66 = *(uint64_t (**)(__n128))(v65 + 96);
      v67 = swift_retain(v40);
      v68 = v66(v67);
      swift_release(v40);
      v69 = swift_getKeyPath(&unk_10024D1C0);
      v70 = v100;
      sub_10000B234(v63, v100, &qword_100316C68);
      v71 = v101;
      v72 = (uint64_t *)(v70 + *(int *)(v101 + 36));
      *v72 = v69;
      v72[1] = v68;
      sub_100007FF0(v63, &qword_100316C68);
      _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v106);
      v73 = sub_10000B278();
      v74 = (uint64_t)v98;
      View.accessibility(hidden:)(1, v71, v73);
      sub_100007FF0(v70, &qword_100316C70);
      v75 = v97;
      sub_10000B458(v74, v97, &qword_100316C78);
      v76 = v75;
      v77 = v103;
      sub_10000B458(v76, v103, &qword_100316C78);
      v78 = 0;
      a1 = v87;
LABEL_6:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v104 + 56))(v77, v78, 1, v105);
      sub_10000B458(v77, a1, &qword_100316C80);
      return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v107);
    }
  }
  else
  {
    v80 = v1[5];
    v81 = type metadata accessor for UIMetrics();
    v82 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, v80, v81, v82);
    __break(1u);
  }
  v83 = type metadata accessor for ConnectivityModel();
  v84 = sub_1000052EC(&qword_100316B00, (uint64_t (*)(uint64_t))type metadata accessor for ConnectivityModel, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v86, v83, v84);
  __break(1u);
  return result;
}

uint64_t sub_10000A7F4@<X0>(uint64_t a1@<X8>)
{
  return sub_10000A0C4(a1);
}

uint64_t sub_10000A82C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100294208, 1);
}

uint64_t sub_10000A83C(uint64_t result)
{
  *(_BYTE *)(result + 210) = 1;
  return result;
}

uint64_t sub_10000A848()
{
  return sub_10000A864(&qword_100316B88, &qword_100316B80, (void (*)(void))sub_10000A8D0);
}

uint64_t sub_10000A864(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007FAC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000A8D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316B90;
  if (!qword_100316B90)
  {
    v1 = sub_100007FAC(&qword_100316B98);
    sub_1000084FC(&qword_100316BA0, &qword_100316BA8, (uint64_t)&protocol conformance descriptor for ZStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100316B90);
  }
  return result;
}

uint64_t sub_10000A954()
{
  return sub_10000A864(&qword_100316BB8, &qword_100316BB0, (void (*)(void))sub_10000A848);
}

uint64_t sub_10000A970()
{
  return sub_100008140(&qword_100316BC0, &qword_100316B48, (void (*)(void))sub_10000A994, (void (*)(void))sub_10000AB3C);
}

uint64_t sub_10000A994()
{
  return sub_10000A9B0(&qword_100316BC8, &qword_100316B58, (void (*)(void))sub_10000AA34);
}

uint64_t sub_10000A9B0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007FAC(a2);
    a3();
    sub_1000052EC(&qword_100316C10, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10000AA34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316BD0;
  if (!qword_100316BD0)
  {
    v1 = sub_100007FAC(&qword_100316BD8);
    sub_10000AAB8();
    sub_1000084FC(&qword_100316C00, &qword_100316C08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100316BD0);
  }
  return result;
}

unint64_t sub_10000AAB8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316BE0;
  if (!qword_100316BE0)
  {
    v1 = sub_100007FAC(&qword_100316BE8);
    sub_1000084FC(&qword_100316BF0, &qword_100316BF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100316BE0);
  }
  return result;
}

unint64_t sub_10000AB3C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100316C18;
  if (!qword_100316C18)
  {
    v1 = sub_100007FAC(&qword_100316B38);
    v2[0] = sub_100007FAC(&qword_100316B28);
    v2[1] = type metadata accessor for CircularProgressViewStyle(255);
    v2[2] = sub_1000084FC(&qword_100316C20, &qword_100316B28, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    v2[3] = sub_1000052EC(&qword_100316C28, (uint64_t (*)(uint64_t))&type metadata accessor for CircularProgressViewStyle, (uint64_t)&protocol conformance descriptor for CircularProgressViewStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.progressViewStyle<A>(_:)>>, 1);
    sub_1000084FC(&qword_100316C30, &qword_100316C38, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100316C18);
  }
  return result;
}

uint64_t sub_10000AC5C(uint64_t result)
{
  *(_BYTE *)(result + 209) = 1;
  return result;
}

uint64_t sub_10000AC68(uint64_t result)
{
  *(_BYTE *)(result + 210) = 0;
  return result;
}

uint64_t sub_10000AC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,char a28)
{
  uint64_t result;

  if ((a28 & 1) == 0)
  {
    swift_retain(a21);
    swift_bridgeObjectRetain(a6);
    swift_retain(a8);
    swift_retain(a9);
    swift_bridgeObjectRetain(a15);
    return swift_retain(a20);
  }
  return result;
}

uint64_t sub_10000ACF0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,char a28,char a29)
{
  if ((a29 & 1) == 0)
    return sub_10000AC70(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28 & 1);
  return result;
}

uint64_t sub_10000AD94(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _WORD))
{
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_WORD *)(a1 + 208));
  return a1;
}

uint64_t sub_10000AE10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,char a28)
{
  uint64_t result;

  if ((a28 & 1) == 0)
  {
    swift_bridgeObjectRelease(a6);
    swift_release(a8);
    swift_bridgeObjectRelease(a15);
    swift_release(a20);
    swift_release(a9);
    return swift_release(a21);
  }
  return result;
}

uint64_t sub_10000AE90(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, int))
{
  int v4;

  BYTE2(v4) = *(_BYTE *)(a1 + 210);
  LOWORD(v4) = *(_WORD *)(a1 + 208);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v4);
  return a1;
}

uint64_t sub_10000AF0C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,char a28,char a29)
{
  if ((a29 & 1) == 0)
    return sub_10000AE10(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24,
             a25,
             a26,
             a27,
             a28 & 1);
  return result;
}

uint64_t sub_10000AFB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for TransmissionProgress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000AFF4(uint64_t result)
{
  *(_BYTE *)(result + 209) = 0;
  return result;
}

uint64_t sub_10000AFFC(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10000B038(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = sub_100003DB8(&qword_100316C48);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000B234(a1, (uint64_t)v5, &qword_100316C48);
  return EnvironmentValues.symbolRenderingMode.setter(v5);
}

uint64_t sub_10000B0B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t (*v10)();
  unint64_t *v11;
  uint64_t v12;

  if (a3)
  {
    if (!sub_100067058(0, *(_QWORD *)(a3 + 200)))
    {
      if (sub_100067058(3u, *(_QWORD *)(a3 + 200)))
        return 0x6F642E776F727261;
      v7 = 0x2E6E6F7276656863;
      if (!sub_100067058(1u, *(_QWORD *)(a3 + 200)) && !sub_100067058(2u, *(_QWORD *)(a3 + 200)))
        return 0;
      return v7;
    }
    if (a1)
      return *(_QWORD *)&aCheckmararrowU[8 * *(char *)(*(_QWORD *)(a1 + 48) + 120)];
    v9 = type metadata accessor for ConnectivityModel();
    v10 = type metadata accessor for ConnectivityModel;
    v11 = (unint64_t *)&unk_100316B00;
  }
  else
  {
    a2 = a4;
    v9 = type metadata accessor for GuidanceModel();
    v10 = type metadata accessor for GuidanceModel;
    v11 = (unint64_t *)&unk_100316B08;
  }
  v12 = sub_1000052EC(v11, (uint64_t (*)(uint64_t))v10, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, a2, v9, v12);
  __break(1u);
  return result;
}

uint64_t sub_10000B210()
{
  return EnvironmentValues.symbolRenderingMode.getter();
}

uint64_t sub_10000B234(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003DB8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_10000B278()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316C90;
  if (!qword_100316C90)
  {
    v1 = sub_100007FAC(&qword_100316C70);
    sub_10000B2FC();
    sub_1000084FC(&qword_100316C00, &qword_100316C08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100316C90);
  }
  return result;
}

unint64_t sub_10000B2FC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316C98;
  if (!qword_100316C98)
  {
    v1 = sub_100007FAC(&qword_100316C68);
    sub_10000B380();
    sub_1000084FC(&qword_100316BF0, &qword_100316BF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100316C98);
  }
  return result;
}

unint64_t sub_10000B380()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  void *v4;
  void *v5;

  result = qword_100316CA0;
  if (!qword_100316CA0)
  {
    v1 = sub_100007FAC(&qword_100316C60);
    v2 = sub_100007FAC(&qword_100316C50);
    v4 = &type metadata for Image;
    v5 = &protocol witness table for Image;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
    v4 = (void *)v2;
    v5 = (void *)OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
    sub_1000084FC(&qword_100316CA8, &qword_100316C88, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100316CA0);
  }
  return result;
}

uint64_t sub_10000B458(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_100003DB8(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_10000B49C()
{
  return sub_100008140(&qword_100316CB0, &qword_100316B70, (void (*)(void))sub_10000A954, (void (*)(void))sub_10000A970);
}

unint64_t sub_10000B4D4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316CB8;
  if (!qword_100316CB8)
  {
    v1 = sub_100007FAC(&qword_100316C80);
    sub_10000A9B0(&qword_100316CC0, &qword_100316C78, (void (*)(void))sub_10000B278);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100316CB8);
  }
  return result;
}

uint64_t sub_10000B55C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for ModelBase()
{
  return objc_opt_self(_TtC8SOSBuddy9ModelBase);
}

unint64_t sub_10000B5AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003264A0;
  if (!qword_1003264A0)
  {
    v1 = sub_100007FAC(&qword_10032B0E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for PassthroughSubject<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003264A0);
  }
  return result;
}

uint64_t sub_10000B5F8@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 16);
  *a1 = v2;
  return swift_retain(v2);
}

unint64_t sub_10000B604(uint64_t a1)
{
  unint64_t result;

  result = sub_10000B628();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10000B628()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316D70;
  if (!qword_100316D70)
  {
    v1 = type metadata accessor for ModelBase();
    result = swift_getWitnessTable(&unk_10024D2FC, v1);
    atomic_store(result, (unint64_t *)&qword_100316D70);
  }
  return result;
}

BOOL sub_10000B66C(uint64_t a1, uint64_t a2)
{
  return sub_10000D604(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD **)(a1 + 16), *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_QWORD **)(a2 + 16));
}

uint64_t sub_10000B688()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;

  v1 = v0;
  v2 = sub_100003DB8(&qword_100316EA0);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(_QWORD *)(v0 + 16) = PassthroughSubject.init()(v3);
  *(_QWORD *)(v0 + 24) = 0;
  v4 = v0 + OBJC_IVAR____TtC8SOSBuddy9EEDSource__pendingFetchId;
  v5 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v6 = type metadata accessor for Logger(0);
  sub_10000D744(v6, (uint64_t)qword_10033FD18);
  v8 = swift_retain_n(v1, v7);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v19 = v1;
    v20 = v12;
    *(_DWORD *)v11 = 136446210;
    v13 = type metadata accessor for EEDSource(0);
    v14 = swift_retain(v1);
    v15 = String.init<A>(describing:)(&v19, v13, v14);
    v17 = v16;
    v19 = sub_100172BEC(v15, v16, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v11 + 4, v11 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "init: %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  return v1;
}

uint64_t sub_10000B89C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = swift_retain_n(v0, 2, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v1;
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for EEDSource(0);
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v9, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "deinit: %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 24));
  sub_100007FF0(v1 + OBJC_IVAR____TtC8SOSBuddy9EEDSource__pendingFetchId, &qword_100316EB0);
  return v1;
}

uint64_t sub_10000BA84()
{
  uint64_t v0;

  sub_10000B89C();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_10000BAA8()
{
  return type metadata accessor for EEDSource(0);
}

uint64_t type metadata accessor for EEDSource(uint64_t a1)
{
  uint64_t result;

  result = qword_100316DA8;
  if (!qword_100316DA8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for EEDSource);
  return result;
}

void sub_10000BAEC(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = "\b";
  sub_10000CBF8(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

BOOL sub_10000BB70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_100315850 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315850, sub_1000D9694);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FDA8);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "start", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = type metadata accessor for EEDAgent();
  swift_allocObject(v14, 24, 7);
  v15 = sub_1000CA534();
  v16 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v15;
  swift_release(v16);
  return *(_QWORD *)(v1 + 24) != 0;
}

uint64_t sub_10000BD10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v23[24];

  v1 = v0;
  v2 = sub_100003DB8(&qword_100316EB0);
  __chkstk_darwin(v2, v3);
  v5 = &v23[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = &v23[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000D75C();
  *v10 = static OS_dispatch_queue.main.getter(v11);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v12 & 1) != 0)
  {
    if (qword_100315850 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315850, sub_1000D9694);
LABEL_3:
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10000D744(v13, (uint64_t)qword_10033FDA8);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "stop", v17, 2u);
    swift_slowDealloc(v17, -1, -1);
  }

  v18 = *(_QWORD *)(v1 + 24);
  *(_QWORD *)(v1 + 24) = 0;
  swift_release(v18);
  v19 = type metadata accessor for UUID(0);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v5, 1, 1, v19);
  v20 = v1 + OBJC_IVAR____TtC8SOSBuddy9EEDSource__pendingFetchId;
  swift_beginAccess(v20, v23, 33, 0);
  sub_10000D7E0((uint64_t)v5, v20);
  return swift_endAccess(v23);
}

void sub_10000BF18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  __n128 v22;
  char v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49[3];
  _BYTE v50[24];

  v1 = v0;
  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v47 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = sub_100003DB8(&qword_100316EB0);
  v7 = __chkstk_darwin(v46, v6);
  v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v7, v10);
  v13 = (char *)&v45 - v12;
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v45 - v15;
  v17 = type metadata accessor for DispatchPredicate(0);
  v18 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v19);
  v21 = (uint64_t *)((char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v21 = static OS_dispatch_queue.main.getter(v22);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v18 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v17);
  v23 = _dispatchPreconditionTest(_:)(v21);
  (*(void (**)(_QWORD *, uint64_t))(v18 + 8))(v21, v17);
  if ((v23 & 1) == 0)
  {
    __break(1u);
LABEL_15:
    swift_once(&qword_100315850, sub_1000D9694);
LABEL_6:
    v29 = type metadata accessor for Logger(0);
    sub_10000D744(v29, (uint64_t)qword_10033FDA8);
    v31 = swift_retain_n(v18, v30);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v35 = swift_slowAlloc(32, -1);
      v49[0] = v35;
      *(_DWORD *)v34 = 136446210;
      sub_10000D798(v17, (uint64_t)v13);
      v37 = String.init<A>(describing:)(v13, v46, v36);
      v39 = v38;
      v48 = sub_100172BEC(v37, v38, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v34 + 4, v34 + 12);
      swift_release_n(v18);
      swift_bridgeObjectRelease(v39);
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "updateAsync - update is already in progress for ID %{public}s", v34, 0xCu);
      swift_arrayDestroy(v35, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1, -1);
      swift_slowDealloc(v34, -1, -1);

    }
    else
    {

      swift_release_n(v18);
    }
    return;
  }
  v17 = v1 + OBJC_IVAR____TtC8SOSBuddy9EEDSource__pendingFetchId;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy9EEDSource__pendingFetchId, v50, 0, 0);
  sub_10000D798(v17, (uint64_t)v16);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48))(v16, 1, v2);
  sub_100007FF0((uint64_t)v16, &qword_100316EB0);
  v18 = v1;
  if (v24 != 1)
  {
    if (qword_100315850 == -1)
      goto LABEL_6;
    goto LABEL_15;
  }
  v25 = *(_QWORD *)(v1 + 24);
  if (v25)
  {
    swift_retain(*(_QWORD *)(v1 + 24));
    v26 = (uint64_t)v47;
    UUID.init()(v27);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v13, v26, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v13, 0, 1, v2);
    sub_10000D868((uint64_t)v13, (uint64_t)v9);
    swift_beginAccess(v17, v49, 33, 0);
    sub_10000D7E0((uint64_t)v9, v17);
    swift_endAccess(v49);
    v28 = swift_allocObject(&unk_1002E4030, 24, 7);
    swift_weakInit(v28 + 16, v18);
    swift_retain(v28);
    sub_1000CAB0C(v26, (uint64_t)sub_10000D8D4, v28);
    swift_release(v25);
    swift_release(v28);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v26, v2);
    swift_release(v28);
  }
  else
  {
    if (qword_100315850 != -1)
      swift_once(&qword_100315850, sub_1000D9694);
    v40 = type metadata accessor for Logger(0);
    v41 = sub_10000D744(v40, (uint64_t)qword_10033FDA8);
    v42 = Logger.logObject.getter(v41);
    v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "updateAsync - no agent", v44, 2u);
      swift_slowDealloc(v44, -1, -1);
    }

  }
}

uint64_t sub_10000C404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  _BYTE v12[24];

  v9 = a5 + 16;
  swift_beginAccess(a5 + 16, v12, 0, 0);
  result = swift_weakLoadStrong(v9);
  if (result)
  {
    v11 = result;
    sub_10000C48C(a1, a2, a3, a4);
    return swift_release(v11);
  }
  return result;
}

void sub_10000C48C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _BYTE *v33;
  __n128 v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t (*v40)(_BYTE *, uint64_t, uint64_t);
  int v41;
  _BYTE *v42;
  _BYTE *v43;
  uint64_t v44;
  _BYTE *v45;
  void (*v46)(_BYTE *, uint64_t);
  void (*v47)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  _BYTE *v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _BYTE *v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  uint64_t v66;
  _BYTE *v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  _BYTE v76[4];
  int v77;
  _BYTE *v78;
  uint64_t v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE *v85;
  _BYTE *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89[3];
  uint64_t v90;
  _BYTE v91[32];

  v83 = a3;
  v84 = a4;
  v82 = a2;
  v5 = type metadata accessor for UUID(0);
  v6 = *(_QWORD *)(v5 - 8);
  v8 = __chkstk_darwin(v5, v7);
  v86 = &v76[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __chkstk_darwin(v8, v10);
  v80 = &v76[-v12];
  __chkstk_darwin(v11, v13);
  v78 = &v76[-v14];
  v15 = sub_100003DB8(&qword_100316EA8);
  __chkstk_darwin(v15, v16);
  v18 = &v76[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = sub_100003DB8(&qword_100316EB0);
  v21 = __chkstk_darwin(v19, v20);
  v81 = &v76[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v24 = __chkstk_darwin(v21, v23);
  v85 = &v76[-v25];
  __chkstk_darwin(v24, v26);
  v28 = &v76[-v27];
  v29 = type metadata accessor for DispatchPredicate(0);
  v30 = *(_QWORD *)(v29 - 8);
  __chkstk_darwin(v29, v31);
  v33 = &v76[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000D75C();
  *(_QWORD *)v33 = static OS_dispatch_queue.main.getter(v34);
  (*(void (**)(_BYTE *, _QWORD, uint64_t))(v30 + 104))(v33, enum case for DispatchPredicate.onQueue(_:), v29);
  v35 = _dispatchPreconditionTest(_:)(v33);
  (*(void (**)(_BYTE *, uint64_t))(v30 + 8))(v33, v29);
  if ((v35 & 1) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }
  v36 = v88 + OBJC_IVAR____TtC8SOSBuddy9EEDSource__pendingFetchId;
  swift_beginAccess(v88 + OBJC_IVAR____TtC8SOSBuddy9EEDSource__pendingFetchId, v91, 0, 0);
  v33 = *(_BYTE **)(v6 + 16);
  v37 = a1;
  ((void (*)(_BYTE *, uint64_t, uint64_t))v33)(v28, a1, v5);
  v38 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v38(v28, 0, 1, v5);
  v39 = (uint64_t)&v18[*(int *)(v15 + 48)];
  v79 = v36;
  sub_10000D798(v36, (uint64_t)v18);
  sub_10000D798((uint64_t)v28, v39);
  v40 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48);
  v41 = v40(v18, 1, v5);
  v87 = v6;
  if (v41 != 1)
  {
    v42 = v85;
    sub_10000D798((uint64_t)v18, (uint64_t)v85);
    if (v40((_BYTE *)v39, 1, v5) != 1)
    {
      v43 = v78;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 32))(v78, v39, v5);
      v44 = sub_10000D828(&qword_100316EC0, (uint64_t)&protocol conformance descriptor for UUID);
      v77 = dispatch thunk of static Equatable.== infix(_:_:)(v42, v43, v5, v44);
      v45 = v42;
      v46 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
      v46(v43, v5);
      sub_100007FF0((uint64_t)v28, &qword_100316EB0);
      v46(v45, v5);
      sub_100007FF0((uint64_t)v18, &qword_100316EB0);
      v6 = v37;
      if ((v77 & 1) != 0)
        goto LABEL_9;
LABEL_13:
      if (qword_100315850 == -1)
      {
LABEL_14:
        v60 = type metadata accessor for Logger(0);
        sub_10000D744(v60, (uint64_t)qword_10033FDA8);
        v61 = v86;
        v62 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v33)(v86, v6, v5);
        v63 = Logger.logObject.getter(v62);
        v64 = static os_log_type_t.default.getter();
        v65 = os_log_type_enabled(v63, v64);
        v66 = v87;
        if (v65)
        {
          v67 = v61;
          v68 = (uint8_t *)swift_slowAlloc(12, -1);
          v69 = swift_slowAlloc(32, -1);
          v89[0] = v69;
          *(_DWORD *)v68 = 136315138;
          v70 = sub_10000D828(&qword_100316EB8, (uint64_t)&protocol conformance descriptor for UUID);
          v71 = dispatch thunk of CustomStringConvertible.description.getter(v5, v70);
          v73 = v72;
          v90 = sub_100172BEC(v71, v72, v89);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91, v68 + 4, v68 + 12);
          swift_bridgeObjectRelease(v73);
          (*(void (**)(_BYTE *, uint64_t))(v66 + 8))(v67, v5);
          _os_log_impl((void *)&_mh_execute_header, v63, v64, "onStateFetched - stale fetch received with ID %s, ignoring", v68, 0xCu);
          swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v69, -1, -1);
          swift_slowDealloc(v68, -1, -1);
        }
        else
        {
          (*(void (**)(_BYTE *, uint64_t))(v87 + 8))(v61, v5);
        }

        return;
      }
LABEL_21:
      swift_once(&qword_100315850, sub_1000D9694);
      goto LABEL_14;
    }
    sub_100007FF0((uint64_t)v28, &qword_100316EB0);
    (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v42, v5);
LABEL_7:
    sub_100007FF0((uint64_t)v18, &qword_100316EA8);
    v6 = v37;
    goto LABEL_13;
  }
  sub_100007FF0((uint64_t)v28, &qword_100316EB0);
  if (v40((_BYTE *)v39, 1, v5) != 1)
    goto LABEL_7;
  sub_100007FF0((uint64_t)v18, &qword_100316EB0);
  v6 = v37;
LABEL_9:
  v47 = v38;
  if (qword_100315850 != -1)
    swift_once(&qword_100315850, sub_1000D9694);
  v48 = type metadata accessor for Logger(0);
  sub_10000D744(v48, (uint64_t)qword_10033FDA8);
  v49 = v80;
  v50 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v33)(v80, v6, v5);
  v51 = Logger.logObject.getter(v50);
  v52 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v51, v52))
  {
    v53 = v49;
    v54 = (uint8_t *)swift_slowAlloc(12, -1);
    v55 = swift_slowAlloc(32, -1);
    v89[0] = v55;
    *(_DWORD *)v54 = 136315138;
    v56 = sub_10000D828(&qword_100316EB8, (uint64_t)&protocol conformance descriptor for UUID);
    v57 = dispatch thunk of CustomStringConvertible.description.getter(v5, v56);
    v59 = v58;
    v90 = sub_100172BEC(v57, v58, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, v91, v54 + 4, v54 + 12);
    swift_bridgeObjectRelease(v59);
    (*(void (**)(_BYTE *, uint64_t))(v87 + 8))(v53, v5);
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "onStateFetched - fetch with ID %s completed", v54, 0xCu);
    swift_arrayDestroy(v55, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v55, -1, -1);
    swift_slowDealloc(v54, -1, -1);
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(v87 + 8))(v49, v5);
  }

  v74 = (uint64_t)v81;
  v47(v81, 1, 1, v5);
  v75 = v79;
  swift_beginAccess(v79, v89, 33, 0);
  sub_10000D7E0(v74, v75);
  swift_endAccess(v89);
  v89[0] = v82;
  v89[1] = v83;
  v89[2] = v84;
  PassthroughSubject.send(_:)(v89);
}

void sub_10000CBF8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100316DB8)
  {
    v2 = type metadata accessor for UUID(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100316DB8);
  }
}

uint64_t sub_10000CC50(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t destroy for EEDState(uint64_t *a1)
{
  unint64_t v2;

  v2 = a1[1];
  if (v2 >> 60 != 15)
    sub_10000CCCC(*a1, v2);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t sub_10000CCCC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t _s8SOSBuddy8EEDStateVwCP_0(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    v5 = *a2;
    sub_10000CC50(*a2, a2[1]);
    *(_QWORD *)a1 = v5;
    *(_QWORD *)(a1 + 8) = v4;
  }
  v6 = a2[2];
  *(_QWORD *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for EEDState(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = a2[1];
  if ((unint64_t)a1[1] >> 60 != 15)
  {
    if (v4 >> 60 != 15)
    {
      v6 = *a2;
      sub_10000CC50(*a2, a2[1]);
      v7 = *a1;
      v8 = a1[1];
      *a1 = v6;
      a1[1] = v4;
      sub_10000CCCC(v7, v8);
      goto LABEL_8;
    }
    sub_10000CE30((uint64_t)a1);
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  v5 = *a2;
  sub_10000CC50(*a2, a2[1]);
  *a1 = v5;
  a1[1] = v4;
LABEL_8:
  v9 = a1[2];
  v10 = a2[2];
  a1[2] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t sub_10000CE30(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for Data - 1) + 8))();
  return a1;
}

uint64_t *assignWithTake for EEDState(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[1];
  if (v4 >> 60 != 15)
  {
    v5 = a2[1];
    if (v5 >> 60 != 15)
    {
      v6 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_10000CCCC(v6, v4);
      goto LABEL_6;
    }
    sub_10000CE30((uint64_t)a1);
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
LABEL_6:
  v7 = a1[2];
  a1[2] = a2[2];
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for EEDState(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EEDState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for EEDState()
{
  return &type metadata for EEDState;
}

void sub_10000CF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_10000CFFC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x10000D1E0);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_10000D204(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;

  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_10000CF9C((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_10000D2D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = __DataStorage._bytes.getter();
  v11 = result;
  if (result)
  {
    result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = __DataStorage._length.getter();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_10000CF9C(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_10000D38C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_10000D3D8()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_10000D40C + dword_10000D5E4[v0 >> 62]))();
}

uint64_t sub_10000D41C@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

BOOL sub_10000D604(uint64_t a1, unint64_t a2, _QWORD *a3, uint64_t a4, unint64_t a5, _QWORD *a6)
{
  char v13;
  char v14;

  if (a2 >> 60 == 15)
  {
    if (a5 >> 60 == 15)
      goto LABEL_8;
LABEL_5:
    sub_10000D71C(a1, a2);
    sub_10000D71C(a4, a5);
    sub_10000D730(a1, a2);
    sub_10000D730(a4, a5);
    return 0;
  }
  if (a5 >> 60 == 15)
    goto LABEL_5;
  sub_10000D71C(a1, a2);
  sub_10000D71C(a4, a5);
  sub_10000D38C(a1, a2);
  v14 = v13;
  sub_10000D730(a4, a5);
  sub_10000D730(a1, a2);
  if ((v14 & 1) == 0)
    return 0;
LABEL_8:
  if (a3)
    return a6 && (sub_1001DCCB4(a3, a6) & 1) != 0;
  return !a6;
}

uint64_t sub_10000D71C(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10000CC50(result, a2);
  return result;
}

uint64_t sub_10000D730(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_10000CCCC(result, a2);
  return result;
}

uint64_t sub_10000D744(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

unint64_t sub_10000D75C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031ED20;
  if (!qword_10031ED20)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_10031ED20);
  }
  return result;
}

uint64_t sub_10000D798(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100316EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000D7E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100316EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000D828(unint64_t *a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;

  result = *a1;
  if (!result)
  {
    v5 = type metadata accessor for UUID(255);
    result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10000D868(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100316EB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000D8B0()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000D8D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  return sub_10000C404(a1, a2, a3, a4, v4);
}

_BYTE *initializeBufferWithCopyOfBuffer for StewieAppId(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for QuestionnairePolicy.QuestionnaireScope(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for UIFeatureFlags(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10000D9C4 + 4 * byte_10024D3D1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10000D9F8 + 4 * byte_10024D3CC[v4]))();
}

uint64_t sub_10000D9F8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000DA00(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10000DA08);
  return result;
}

uint64_t sub_10000DA14(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10000DA1CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10000DA20(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000DA28(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000DA34(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10000DA3C(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for UIFeatureFlags()
{
  return &type metadata for UIFeatureFlags;
}

unint64_t sub_10000DA5C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316EC8;
  if (!qword_100316EC8)
  {
    v1 = sub_100007FAC(&qword_100316ED0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_100316EC8);
  }
  return result;
}

BOOL sub_10000DAA8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

Swift::Int sub_10000DAC0()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_10000DB04()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_10000DB2C(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

const char *sub_10000DB6C()
{
  return "CoreTelephony";
}

const char *sub_10000DB80()
{
  _BYTE *v0;

  if (*v0)
    return "IML";
  else
    return "Bifrost";
}

void sub_10000DBB0(_QWORD *a1@<X8>)
{
  *a1 = &off_1002DFFD8;
}

unint64_t sub_10000DBC4()
{
  unint64_t result;

  result = qword_100316ED8;
  if (!qword_100316ED8)
  {
    result = swift_getWitnessTable(&unk_10024D460, &type metadata for UIFeatureFlags);
    atomic_store(result, (unint64_t *)&qword_100316ED8);
  }
  return result;
}

uint64_t sub_10000DC0C(uint64_t a1)
{
  char *v2;

  v2 = (char *)&value witness table for Builtin.UnknownObject + 64;
  return swift_initClassMetadata2(a1, 0, 1, &v2, a1 + 96);
}

void sub_10000DC50()
{
  sub_10000DEAC();
}

uint64_t sub_10000DC7C(uint64_t a1)
{
  void *v1;
  id v3;

  v3 = v1;
  return a1;
}

void sub_10000DC94()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  objc_class *v9;
  id v10;
  void *v11;
  objc_super v12;

  v1 = v0;
  v2 = swift_isaMask & *(_QWORD *)v0;
  if (qword_100315838 != -1)
    swift_once(&qword_100315838, sub_1000D9630);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10000D744(v3, (uint64_t)qword_10033FD60);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "BannerView::layoutSubviews", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  v9 = (objc_class *)type metadata accessor for BannerView(0, *(_QWORD *)(v2 + 80), *(_QWORD *)(v2 + 88), v8);
  v12.receiver = v1;
  v12.super_class = v9;
  objc_msgSendSuper2(&v12, "layoutSubviews");
  v10 = objc_msgSend(*(id *)&v1[qword_100316EE0], "view");
  if (v10)
  {
    v11 = v10;
    objc_msgSend(v1, "bounds");
    objc_msgSend(v11, "setFrame:");

  }
}

void sub_10000DDF4(void *a1)
{
  id v1;

  v1 = a1;
  sub_10000DC94();

}

void sub_10000DE28()
{
  sub_10000DF04();
}

id sub_10000DE44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  objc_class *v5;
  objc_super v7;

  v5 = (objc_class *)type metadata accessor for BannerView(0, *(_QWORD *)((swift_isaMask & *v4) + 0x50), *(_QWORD *)((swift_isaMask & *v4) + 0x58), a4);
  v7.receiver = v4;
  v7.super_class = v5;
  return objc_msgSendSuper2(&v7, "dealloc");
}

void sub_10000DE90(uint64_t a1)
{

}

uint64_t type metadata accessor for BannerView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for BannerView);
}

void sub_10000DEAC()
{
  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000025, 0x8000000100260900, "SOSBuddy/BannerView.swift", 25, 2, 31, 0);
  __break(1u);
}

void sub_10000DF04()
{
  _swift_stdlib_reportUnimplementedInitializer("SOSBuddy.BannerView", 19, "init(frame:)", 12, 0);
  __break(1u);
}

id sub_10000DF30(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  void *v16;
  char *v17;
  id v18;
  id v19;
  void *v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String v23;
  unint64_t v24;
  void *v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  objc_class *v31;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  id v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  void *v40;
  id v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  objc_super v53;
  void *v54;
  unint64_t v55;

  v50 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v48 = *(_QWORD *)(v50 - 8);
  __chkstk_darwin(v50, v5);
  v49 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)&v2[OBJC_IVAR____TtC8SOSBuddy15LockScreenAgent_statusChangeToken] = -1;
  v15 = &v2[OBJC_IVAR____TtC8SOSBuddy15LockScreenAgent_stateChangeHandler];
  *(_QWORD *)v15 = a1;
  *((_QWORD *)v15 + 1) = a2;
  v16 = (void *)objc_opt_self(NSBundle);
  v17 = v2;
  v51 = a2;
  v18 = objc_msgSend(v16, "mainBundle", swift_retain(a2).n128_f64[0]);
  v19 = objc_msgSend(v18, "bundleIdentifier");

  if (v19)
  {
    v20 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

  }
  else
  {
    v20 = (void *)0xD000000000000012;
    v22 = 0x8000000100260990;
  }
  sub_10000D75C();
  v54 = v20;
  v55 = v22;
  swift_bridgeObjectRetain(v22);
  v23._object = (void *)0x80000001002609B0;
  v23._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v22);
  v25 = v54;
  v24 = v55;
  static DispatchQoS.unspecified.getter(v26);
  v54 = &_swiftEmptyArrayStorage;
  v27 = sub_1000052EC((unint64_t *)&unk_1003178B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v28 = sub_100003DB8((uint64_t *)&unk_100324AE0);
  v29 = sub_10000F138((unint64_t *)&unk_1003178C0, (uint64_t *)&unk_100324AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v28, v29, v7, v27);
  v30 = v49;
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v49, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v50);
  *(_QWORD *)&v17[OBJC_IVAR____TtC8SOSBuddy15LockScreenAgent_queue] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v25, v24, v14, v10, v30, 0);

  v31 = (objc_class *)type metadata accessor for LockScreenAgent();
  v53.receiver = v17;
  v53.super_class = v31;
  v32 = objc_msgSendSuper2(&v53, "init");
  v33 = qword_100315820;
  v34 = v32;
  if (v33 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v35 = type metadata accessor for Logger(0);
  sub_10000D744(v35, (uint64_t)qword_10033FD18);
  v36 = v34;
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(12, -1);
    v40 = (void *)swift_slowAlloc(32, -1);
    v54 = v40;
    *(_DWORD *)v39 = 136446210;
    v50 = (uint64_t)(v39 + 4);
    v41 = v36;
    v42 = objc_msgSend(v41, "description");
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
    v45 = v44;

    v52 = sub_100172BEC(v43, v45, (uint64_t *)&v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v50, v39 + 12);

    swift_bridgeObjectRelease(v45);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "[%{public}s] init", v39, 0xCu);
    swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1, -1);
    swift_slowDealloc(v39, -1, -1);

    swift_release(v51);
  }
  else
  {

    swift_release(v51);
  }
  return v36;
}

id sub_10000E3B0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  objc_class *v12;
  uint64_t v14;
  uint64_t v15;
  objc_super v16;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD18);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v15 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v14 = sub_100172BEC(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] deinit", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v12 = (objc_class *)type metadata accessor for LockScreenAgent();
  v16.receiver = v2;
  v16.super_class = v12;
  return objc_msgSendSuper2(&v16, "dealloc");
}

BOOL sub_10000E5F8()
{
  char *v0;
  char *v1;
  uint64_t ObjectType;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  NSObject *v16;
  void *v17;
  uint64_t v18;
  char *v19;
  int *v20;
  uint32_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t aBlock[5];
  uint64_t v31;

  v1 = v0;
  ObjectType = swift_getObjectType(v0);
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (uint64_t *)((char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v7 = static OS_dispatch_queue.main.getter(v8);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = _dispatchPreconditionTest(_:)(v7);
  (*(void (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v9 & 1) != 0)
  {
    if (qword_100315888 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315888, sub_1000D97B0);
LABEL_3:
  v10 = type metadata accessor for Logger(0);
  v11 = sub_10000D744(v10, (uint64_t)qword_10033FE50);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "LockScreenAgent start", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  v15 = swift_allocObject(&unk_1002E4228, 32, 7);
  *(_QWORD *)(v15 + 16) = v1;
  *(_QWORD *)(v15 + 24) = ObjectType;
  v16 = *(NSObject **)&v1[OBJC_IVAR____TtC8SOSBuddy15LockScreenAgent_queue];
  aBlock[4] = (uint64_t)sub_10000EC80;
  v31 = v15;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_10000EA38;
  aBlock[3] = (uint64_t)&unk_1002E4240;
  v17 = _Block_copy(aBlock);
  v18 = v31;
  v19 = v1;
  swift_retain(v15);
  swift_release(v18);
  v20 = (int *)&v19[OBJC_IVAR____TtC8SOSBuddy15LockScreenAgent_statusChangeToken];
  swift_beginAccess(&v19[OBJC_IVAR____TtC8SOSBuddy15LockScreenAgent_statusChangeToken], aBlock, 33, 0);
  v21 = notify_register_dispatch("com.apple.springboard.lockstate", v20, v16, v17);
  swift_endAccess(aBlock);
  _Block_release(v17);
  if (v21)
  {
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(12, -1);
      v26 = swift_slowAlloc(32, -1);
      aBlock[0] = v26;
      *(_DWORD *)v25 = 136446210;
      v29 = sub_100172BEC(0xD00000000000001FLL, 0x80000001002609D0, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, aBlock, v25 + 4, v25 + 12);
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to subscribe to %{public}s", v25, 0xCu);
      swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1, -1);
      swift_slowDealloc(v25, -1, -1);
      swift_release(v15);

    }
    else
    {

      swift_release(v15);
    }
    *v20 = -1;
  }
  else
  {
    sub_10000ECA0(*v20, (uint64_t)v19);
    swift_release(v15);
  }
  return v21 == 0;
}

uint64_t sub_10000E98C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  void (*v7)(BOOL);
  uint64_t v8;
  _BYTE v9[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = (void *)result;
    v7 = *(void (**)(BOOL))(result + OBJC_IVAR____TtC8SOSBuddy15LockScreenAgent_stateChangeHandler);
    v6 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy15LockScreenAgent_stateChangeHandler + 8);
    swift_retain(v6);

    swift_beginAccess(a2 + 16, &v8, 0, 0);
    v7(*(_QWORD *)(a2 + 16) != 0);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_10000EA38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

uint64_t sub_10000EA74()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  int *v14;
  uint64_t result;
  _BYTE v17[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_100315888 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315888, sub_1000D97B0);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FE50);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "LockScreenAgent stop", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = (int *)(v1 + OBJC_IVAR____TtC8SOSBuddy15LockScreenAgent_statusChangeToken);
  swift_beginAccess(v14, v17, 1, 0);
  result = notify_cancel(*v14);
  *v14 = -1;
  return result;
}

uint64_t type metadata accessor for LockScreenAgent()
{
  return objc_opt_self(_TtC8SOSBuddy15LockScreenAgent);
}

uint64_t sub_10000EC5C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_10000EC80(int a1)
{
  uint64_t v1;

  sub_10000ECA0(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10000EC88(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000EC98(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10000ECA0(int a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t state;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  __n128 v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE v37[4];
  int v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t aBlock[5];
  uint64_t v45;

  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v42 = &v37[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for DispatchQoS(0);
  v40 = *(_QWORD *)(v8 - 8);
  v41 = v8;
  __chkstk_darwin(v8, v9);
  v11 = &v37[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_100315888 != -1)
    swift_once(&qword_100315888, sub_1000D97B0);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10000D744(v12, (uint64_t)qword_10033FE50);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v38 = a1;
    v16 = swift_slowAlloc(12, -1);
    v39 = v11;
    v17 = a2;
    v18 = (uint8_t *)v16;
    v19 = swift_slowAlloc(32, -1);
    aBlock[0] = v19;
    *(_DWORD *)v18 = 136446210;
    v43 = sub_100172BEC(0xD00000000000001FLL, 0x80000001002609D0, aBlock);
    a1 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, aBlock, v18 + 4, v18 + 12);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "LockScreenAgent %{public}s received", v18, 0xCu);
    swift_arrayDestroy(v19, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    v20 = v18;
    a2 = v17;
    v11 = v39;
    swift_slowDealloc(v20, -1, -1);
  }

  v21 = swift_allocObject(&unk_1002E4278, 24, 7);
  *(_QWORD *)(v21 + 16) = 0;
  state = notify_get_state(a1, (uint64_t *)(v21 + 16));
  if ((_DWORD)state)
  {
    v23 = Logger.logObject.getter(state);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to retrieve lock state", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }
    swift_release(v21);

  }
  else
  {
    sub_10000D75C();
    v27 = (void *)static OS_dispatch_queue.main.getter(v26);
    v28 = swift_allocObject(&unk_1002E42A0, 24, 7);
    swift_unknownObjectWeakInit(v28 + 16, a2);
    v29 = swift_allocObject(&unk_1002E42C8, 32, 7);
    *(_QWORD *)(v29 + 16) = v28;
    *(_QWORD *)(v29 + 24) = v21;
    aBlock[4] = (uint64_t)sub_10000F130;
    v45 = v29;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1001BAACC;
    aBlock[3] = (uint64_t)&unk_1002E42E0;
    v30 = _Block_copy(aBlock);
    v31 = v45;
    swift_retain(v21);
    swift_release(v31);
    static DispatchQoS.unspecified.getter(v32);
    aBlock[0] = (uint64_t)&_swiftEmptyArrayStorage;
    v33 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v34 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v35 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
    v36 = v42;
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v34, v35, v4, v33);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v36, v30);
    _Block_release(v30);

    (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v36, v4);
    (*(void (**)(_BYTE *, uint64_t))(v40 + 8))(v11, v41);
    swift_release(v21);
  }
}

uint64_t sub_10000F0D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000F0E0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000F104()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000F130()
{
  uint64_t v0;

  return sub_10000E98C(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10000F138(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_100007FAC(a2);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v4);
    atomic_store(result, a1);
  }
  return result;
}

BOOL static ConnectionAssistantDisplayState.Metrics.RenderingStyle.__derived_enum_equals(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void ConnectionAssistantDisplayState.Metrics.RenderingStyle.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int ConnectionAssistantDisplayState.Metrics.RenderingStyle.hashValue.getter(char a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

double ConnectionAssistantRendererProjection.Ellipse.center.getter()
{
  uint64_t v0;

  return *(double *)v0;
}

uint64_t ConnectionAssistantDisplayState.Metrics.CoordinateOffset.inactiveOffsetRotation.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 8);
}

double ConnectionAssistantRendererProjection.Ellipse.radii.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 24);
}

double ConnectionAssistantDisplayState.Metrics.CoordinateOffset.connectingOutOfCone.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 32);
}

double ConnectionAssistantDisplayState.Metrics.CoordinateOffset.complete.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 40);
}

uint64_t ConnectionAssistantDisplayState.Metrics.CoordinateOffset.completeOffsetRotation.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 48);
}

double sub_10000F230()
{
  double result;

  static ConnectionAssistantDisplayState.Metrics.CoordinateOffset.zero = 0;
  qword_10033FA78 = 0;
  byte_10033FA80 = 1;
  result = 0.0;
  unk_10033FA88 = 0u;
  *(_OWORD *)&qword_10033FA98 = 0u;
  byte_10033FAA8 = 1;
  return result;
}

uint64_t *ConnectionAssistantDisplayState.Metrics.CoordinateOffset.zero.unsafeMutableAddressor()
{
  if (qword_100315700 != -1)
    swift_once(&qword_100315700, sub_10000F230);
  return &static ConnectionAssistantDisplayState.Metrics.CoordinateOffset.zero;
}

double static ConnectionAssistantDisplayState.Metrics.CoordinateOffset.zero.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  double result;

  if (qword_100315700 != -1)
    swift_once(&qword_100315700, sub_10000F230);
  v2 = qword_10033FA78;
  v3 = byte_10033FA80;
  v4 = qword_10033FA98;
  v5 = qword_10033FAA0;
  v6 = byte_10033FAA8;
  *(_QWORD *)a1 = static ConnectionAssistantDisplayState.Metrics.CoordinateOffset.zero;
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  result = dbl_10033FA88[0];
  *(_OWORD *)(a1 + 24) = *(_OWORD *)dbl_10033FA88;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = v6;
  return result;
}

BOOL sub_10000F320(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  _OWORD v6[2];
  _OWORD v7[2];
  _OWORD v8[2];

  v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  return _s8SOSBuddy31ConnectionAssistantDisplayStateC7MetricsV16CoordinateOffsetV23__derived_struct_equalsySbAG_AGtFZ_0((uint64_t)v5, (uint64_t)v7);
}

double ConnectionAssistantDisplayState.Metrics.ConnectionRadius.Value.value(top:earthCenter:earthRadius:satelliteDimension:)(uint64_t a1, char a2, double a3, double a4, double a5, double a6)
{
  double v6;

  if (!a2)
  {
    a3 = *(double *)&a1 + a3;
    v6 = a6 * 0.5;
    return a4 - (v6 + a3);
  }
  if (a2 == 1)
  {
    v6 = (a4 - a5 - a3) * *(double *)&a1;
    return a4 - (v6 + a3);
  }
  return *(double *)&a1 * a5;
}

BOOL static ConnectionAssistantDisplayState.Metrics.ConnectionRadius.Value.__derived_enum_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _BOOL4 v4;
  _BOOL4 v5;

  if (a2)
  {
    v4 = *(double *)&a1 == *(double *)&a3;
    if (a4 != 1)
      v4 = 0;
    v5 = a4 == 2 && *(double *)&a1 == *(double *)&a3;
    if (a2 == 1)
      return v4;
    else
      return v5;
  }
  else
  {
    return !a4 && *(double *)&a1 == *(double *)&a3;
  }
}

uint64_t sub_10000F42C(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  int v4;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  v4 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a1 + 8))
  {
    if (*(_BYTE *)(a1 + 8) == 1)
    {
      if (v4 == 1 && v2 == v3)
        return 1;
    }
    else if (v4 == 2 && v2 == v3)
    {
      return 1;
    }
  }
  else if (!*(_BYTE *)(a2 + 8) && v2 == v3)
  {
    return 1;
  }
  return 0;
}

uint64_t ConnectionAssistantDisplayState.Metrics.ConnectionRadius.connecting.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ConnectionAssistantDisplayState.Metrics.ConnectionRadius.connectingOutOfCone.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 16);
}

void sub_10000F4C4()
{
  static ConnectionAssistantDisplayState.Metrics.ConnectionRadius.zero = 0;
  byte_10033FAB8 = 0;
  qword_10033FAC0 = 0;
  byte_10033FAC8 = 0;
  qword_10033FAD0 = 0;
}

uint64_t *ConnectionAssistantDisplayState.Metrics.ConnectionRadius.zero.unsafeMutableAddressor()
{
  if (qword_100315708 != -1)
    swift_once(&qword_100315708, sub_10000F4C4);
  return &static ConnectionAssistantDisplayState.Metrics.ConnectionRadius.zero;
}

double static ConnectionAssistantDisplayState.Metrics.ConnectionRadius.zero.getter@<D0>(uint64_t a1@<X8>)
{
  char v2;
  uint64_t v3;
  char v4;
  double result;

  if (qword_100315708 != -1)
    swift_once(&qword_100315708, sub_10000F4C4);
  v2 = byte_10033FAB8;
  v3 = qword_10033FAC0;
  v4 = byte_10033FAC8;
  result = *(double *)&qword_10033FAD0;
  *(_QWORD *)a1 = static ConnectionAssistantDisplayState.Metrics.ConnectionRadius.zero;
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  *(double *)(a1 + 32) = result;
  return result;
}

BOOL sub_10000F59C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return _s8SOSBuddy31ConnectionAssistantDisplayStateC7MetricsV0B6RadiusV23__derived_struct_equalsySbAG_AGtFZ_0((uint64_t)v5, (uint64_t)v7);
}

uint64_t ConnectionAssistantDisplayState.Metrics.renderingStyle.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

__n128 ConnectionAssistantDisplayState.Metrics.coordinateOffset.getter@<Q0>(uint64_t a1@<X8>)
{
  __n128 *v1;
  unint64_t v2;
  unsigned __int8 v3;
  unint64_t v4;
  unint64_t v5;
  unsigned __int8 v6;
  __n128 result;

  v2 = v1[1].n128_u64[0];
  v3 = v1[1].n128_u8[8];
  v4 = v1[3].n128_u64[0];
  v5 = v1[3].n128_u64[1];
  v6 = v1[4].n128_u8[0];
  *(_QWORD *)a1 = v1->n128_u64[1];
  *(_QWORD *)(a1 + 8) = v2;
  *(_BYTE *)(a1 + 16) = v3;
  result = v1[2];
  *(__n128 *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 40) = v4;
  *(_QWORD *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = v6;
  return result;
}

double ConnectionAssistantDisplayState.Metrics.connectionRadius.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  char v4;
  double result;

  v2 = *(_BYTE *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 88);
  v4 = *(_BYTE *)(v1 + 96);
  result = *(double *)(v1 + 104);
  *(_QWORD *)a1 = *(_QWORD *)(v1 + 72);
  *(_BYTE *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  *(double *)(a1 + 32) = result;
  return result;
}

double ConnectionAssistantDisplayState.Metrics.wedgeAngle.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 112);
}

double sub_10000F65C()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  double result;
  __int128 v8;

  if (qword_100315700 != -1)
    swift_once(&qword_100315700, sub_10000F230);
  v0 = static ConnectionAssistantDisplayState.Metrics.CoordinateOffset.zero;
  v1 = qword_10033FA78;
  v2 = byte_10033FA80;
  v3 = *(_OWORD *)dbl_10033FA88;
  v4 = qword_10033FA98;
  v5 = qword_10033FAA0;
  v6 = byte_10033FAA8;
  if (qword_100315708 != -1)
  {
    v8 = *(_OWORD *)dbl_10033FA88;
    swift_once(&qword_100315708, sub_10000F4C4);
    v3 = v8;
  }
  result = *(double *)&qword_10033FAD0;
  static ConnectionAssistantDisplayState.Metrics.zero = 0;
  qword_10033FAE0 = v0;
  qword_10033FAE8 = v1;
  byte_10033FAF0 = v2;
  xmmword_10033FAF8 = v3;
  qword_10033FB08 = v4;
  qword_10033FB10 = v5;
  byte_10033FB18 = v6;
  qword_10033FB20 = static ConnectionAssistantDisplayState.Metrics.ConnectionRadius.zero;
  byte_10033FB28 = byte_10033FAB8;
  qword_10033FB30 = qword_10033FAC0;
  byte_10033FB38 = byte_10033FAC8;
  qword_10033FB40 = qword_10033FAD0;
  qword_10033FB48 = 0;
  return result;
}

char *ConnectionAssistantDisplayState.Metrics.zero.unsafeMutableAddressor()
{
  if (qword_100315710 != -1)
    swift_once(&qword_100315710, sub_10000F65C);
  return &static ConnectionAssistantDisplayState.Metrics.zero;
}

double static ConnectionAssistantDisplayState.Metrics.zero.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  double result;

  if (qword_100315710 != -1)
    swift_once(&qword_100315710, sub_10000F65C);
  v2 = qword_10033FAE0;
  v3 = qword_10033FAE8;
  v4 = byte_10033FAF0;
  v5 = qword_10033FB08;
  v6 = qword_10033FB10;
  v7 = byte_10033FB18;
  v8 = qword_10033FB20;
  v9 = byte_10033FB28;
  v10 = qword_10033FB30;
  v11 = byte_10033FB38;
  *(_BYTE *)a1 = static ConnectionAssistantDisplayState.Metrics.zero;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10033FAF8;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v8;
  *(_BYTE *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 88) = v10;
  *(_BYTE *)(a1 + 96) = v11;
  result = *(double *)&qword_10033FB40;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)&qword_10033FB40;
  return result;
}

double sub_10000F858()
{
  double result;

  LOBYTE(static ConnectionAssistantDisplayState.Metrics.fullScreen) = 0;
  *((_QWORD *)&static ConnectionAssistantDisplayState.Metrics.fullScreen + 1) = 0xC046800000000000;
  qword_10033FB60 = 0xC04C000000000000;
  byte_10033FB68 = 0;
  xmmword_10033FB70 = xmmword_10024D510;
  qword_10033FB80 = 0xC04C000000000000;
  qword_10033FB88 = 0xC050000000000000;
  LOBYTE(xmmword_10033FB90) = 0;
  *((_QWORD *)&xmmword_10033FB90 + 1) = 0x3FE3333333333333;
  byte_10033FBA0 = 1;
  qword_10033FBA8 = 0x3FE4CCCCCCCCCCCDLL;
  LOBYTE(xmmword_10033FBB0) = 1;
  result = 26.0;
  *(__int128 *)((char *)&xmmword_10033FBB0 + 8) = xmmword_10024D520;
  return result;
}

__int128 *ConnectionAssistantDisplayState.Metrics.fullScreen.unsafeMutableAddressor()
{
  if (qword_100315718 != -1)
    swift_once(&qword_100315718, sub_10000F858);
  return &static ConnectionAssistantDisplayState.Metrics.fullScreen;
}

double static ConnectionAssistantDisplayState.Metrics.fullScreen.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  char v11;
  double result;

  if (qword_100315718 != -1)
    swift_once(&qword_100315718, sub_10000F858);
  v2 = *((_QWORD *)&static ConnectionAssistantDisplayState.Metrics.fullScreen + 1);
  v3 = qword_10033FB60;
  v4 = byte_10033FB68;
  v5 = qword_10033FB80;
  v6 = qword_10033FB88;
  v7 = xmmword_10033FB90;
  v8 = *((_QWORD *)&xmmword_10033FB90 + 1);
  v9 = byte_10033FBA0;
  v10 = qword_10033FBA8;
  v11 = xmmword_10033FBB0;
  *(_BYTE *)a1 = static ConnectionAssistantDisplayState.Metrics.fullScreen;
  *(_QWORD *)(a1 + 8) = v2;
  *(_QWORD *)(a1 + 16) = v3;
  *(_BYTE *)(a1 + 24) = v4;
  *(_OWORD *)(a1 + 32) = xmmword_10033FB70;
  *(_QWORD *)(a1 + 48) = v5;
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 72) = v8;
  *(_BYTE *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 88) = v10;
  *(_BYTE *)(a1 + 96) = v11;
  result = *((double *)&xmmword_10033FBB0 + 1);
  *(_OWORD *)(a1 + 104) = *(__int128 *)((char *)&xmmword_10033FBB0 + 8);
  return result;
}

void *ConnectionAssistantDisplayState.Metrics.liveActivity.unsafeMutableAddressor()
{
  return &static ConnectionAssistantDisplayState.Metrics.liveActivity;
}

double static ConnectionAssistantDisplayState.Metrics.liveActivity.getter@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_BYTE *)a1 = 1;
  *(_QWORD *)(a1 + 8) = 0xC04E000000000000;
  *(_QWORD *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 24) = 1;
  *(int64x2_t *)(a1 + 32) = vdupq_n_s64(0xC053000000000000);
  *(_QWORD *)(a1 + 48) = 0xC053000000000000;
  *(_QWORD *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 72) = 0xC010000000000000;
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0xC010000000000000;
  *(_BYTE *)(a1 + 96) = 0;
  result = 20.0;
  *(_OWORD *)(a1 + 104) = xmmword_10024D530;
  return result;
}

BOOL sub_10000FA18(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v12[7];
  uint64_t v13;
  _OWORD v14[7];
  uint64_t v15;

  v2 = *(_OWORD *)(a1 + 80);
  v12[4] = *(_OWORD *)(a1 + 64);
  v12[5] = v2;
  v12[6] = *(_OWORD *)(a1 + 96);
  v13 = *(_QWORD *)(a1 + 112);
  v3 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v3;
  v4 = *(_OWORD *)(a1 + 48);
  v12[2] = *(_OWORD *)(a1 + 32);
  v12[3] = v4;
  v5 = *a2;
  v6 = a2[1];
  v7 = a2[3];
  v14[2] = a2[2];
  v14[3] = v7;
  v14[0] = v5;
  v14[1] = v6;
  v8 = a2[4];
  v9 = a2[5];
  v10 = a2[6];
  v15 = *((_QWORD *)a2 + 14);
  v14[5] = v9;
  v14[6] = v10;
  v14[4] = v8;
  return _s8SOSBuddy31ConnectionAssistantDisplayStateC7MetricsV23__derived_struct_equalsySbAE_AEtFZ_0((unsigned __int8 *)v12, (unsigned __int8 *)v14);
}

double ConnectionAssistantDisplayState.EarthDiameter.Value.resolved(width:)(uint64_t a1, char a2, double a3)
{
  if ((a2 & 1) != 0)
    a3 = 1.0;
  return a3 * *(double *)&a1;
}

BOOL static ConnectionAssistantDisplayState.EarthDiameter.Value.__derived_enum_equals(_:_:)(uint64_t a1, char a2, uint64_t a3, char a4)
{
  _BOOL4 v4;
  _BOOL4 v5;

  v4 = *(double *)&a1 == *(double *)&a3;
  if ((a4 & 1) == 0)
    v4 = 0;
  v5 = *(double *)&a1 == *(double *)&a3;
  if ((a4 & 1) != 0)
    v5 = 0;
  if ((a2 & 1) != 0)
    return v4;
  else
    return v5;
}

uint64_t sub_10000FAEC(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 8) & 1) != 0 && v2 == v3)
      return 1;
  }
  else if ((*(_BYTE *)(a2 + 8) & 1) == 0 && v2 == v3)
  {
    return 1;
  }
  return 0;
}

uint64_t ConnectionAssistantDisplayState.EarthDiameter.inactiveOffsetRotation.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t ConnectionAssistantDisplayState.EarthDiameter.connecting.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 64);
}

uint64_t ConnectionAssistantDisplayState.EarthDiameter.complete.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t ConnectionAssistantDisplayState.EarthDiameter.completeOffsetRotation.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 96);
}

uint64_t sub_10000FB74(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[5];
  _OWORD v11[2];
  _OWORD v12[5];
  _BYTE v13[25];

  v2 = a1[5];
  v10[4] = a1[4];
  v11[0] = v2;
  *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)((char *)a1 + 89);
  v3 = a1[1];
  v10[0] = *a1;
  v10[1] = v3;
  v4 = a1[3];
  v10[2] = a1[2];
  v10[3] = v4;
  v5 = a2[1];
  v12[0] = *a2;
  v12[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  *(_OWORD *)&v13[9] = *(_OWORD *)((char *)a2 + 89);
  v8 = a2[5];
  v12[4] = a2[4];
  *(_OWORD *)v13 = v8;
  v12[2] = v6;
  v12[3] = v7;
  return _s8SOSBuddy31ConnectionAssistantDisplayStateC13EarthDiameterV23__derived_struct_equalsySbAE_AEtFZ_0((uint64_t)v10, (uint64_t)v12) & 1;
}

BOOL sub_10000FBDC(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2];
}

uint64_t sub_10000FC0C(double a1, double a2, double a3, double a4)
{
  Swift::String v8;
  double v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  unint64_t v14;
  Swift::String v15;
  double v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  Swift::String v20;
  unint64_t v21;
  Swift::String v22;
  double v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  Swift::String v27;
  unint64_t v28;
  Swift::String v29;
  double v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  Swift::String v34;
  unint64_t v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;

  v39 = 0;
  v40 = 0xE000000000000000;
  _StringGuts.grow(_:)(56);
  v8._countAndFlagsBits = 0x6165724165666173;
  v8._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v8);
  v9 = round(a1 * 100.0) / 100.0;
  if (v9 == a1)
  {
    v10 = Double.description.getter(a1);
    v12 = v11;
  }
  else
  {
    v37 = 0;
    v38 = 0xE000000000000000;
    v13._countAndFlagsBits = 126;
    v13._object = (void *)0xE100000000000000;
    String.append(_:)(v13);
    Double.write<A>(to:)(&v37, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v9);
    v10 = v37;
    v12 = v38;
  }
  v14 = v12;
  String.append(_:)(*(Swift::String *)&v10);
  swift_bridgeObjectRelease(v12);
  v15._object = (void *)0xEC000000203A6576;
  v15._countAndFlagsBits = 0x697463616E69202CLL;
  String.append(_:)(v15);
  v16 = round(a2 * 100.0) / 100.0;
  if (v16 == a2)
  {
    v17 = Double.description.getter(a2);
    v19 = v18;
  }
  else
  {
    v37 = 0;
    v38 = 0xE000000000000000;
    v20._countAndFlagsBits = 126;
    v20._object = (void *)0xE100000000000000;
    String.append(_:)(v20);
    Double.write<A>(to:)(&v37, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v16);
    v17 = v37;
    v19 = v38;
  }
  v21 = v19;
  String.append(_:)(*(Swift::String *)&v17);
  swift_bridgeObjectRelease(v19);
  v22._countAndFlagsBits = 0x63656E6E6F63202CLL;
  v22._object = (void *)0xEE00203A676E6974;
  String.append(_:)(v22);
  v23 = round(a3 * 100.0) / 100.0;
  if (v23 == a3)
  {
    v24 = Double.description.getter(a3);
    v26 = v25;
  }
  else
  {
    v37 = 0;
    v38 = 0xE000000000000000;
    v27._countAndFlagsBits = 126;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    Double.write<A>(to:)(&v37, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v23);
    v24 = v37;
    v26 = v38;
  }
  v28 = v26;
  String.append(_:)(*(Swift::String *)&v24);
  swift_bridgeObjectRelease(v26);
  v29._countAndFlagsBits = 0x656C706D6F63202CLL;
  v29._object = (void *)0xEC000000203A6574;
  String.append(_:)(v29);
  v30 = round(a4 * 100.0) / 100.0;
  if (v30 == a4)
  {
    v31 = Double.description.getter(a4);
    v33 = v32;
  }
  else
  {
    v37 = 0;
    v38 = 0xE000000000000000;
    v34._countAndFlagsBits = 126;
    v34._object = (void *)0xE100000000000000;
    String.append(_:)(v34);
    Double.write<A>(to:)(&v37, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v30);
    v31 = v37;
    v33 = v38;
  }
  v35 = v33;
  String.append(_:)(*(Swift::String *)&v31);
  swift_bridgeObjectRelease(v33);
  return v39;
}

BOOL sub_10000FEEC(double *a1, double *a2)
{
  _BOOL4 v2;

  if (*a1 != *a2)
    return 0;
  v2 = a1[1] == a2[1];
  if (a1[2] != a2[2])
    v2 = 0;
  return a1[3] == a2[3] && v2;
}

uint64_t sub_10000FF30()
{
  double *v0;

  return sub_10000FC0C(*v0, v0[1], v0[2], v0[3]);
}

uint64_t sub_10000FF3C()
{
  __int128 *v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  double v4;
  unint64_t v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  double v13[4];
  char v14;

  sub_100014C50(v0, (uint64_t)v13);
  if ((v14 & 1) != 0)
  {
    v11 = 0x657263536C6C7566;
    v12 = 0xEB00000000286E65;
    v1 = sub_10000FC0C(v13[0], v13[1], v13[2], v13[3]);
    v3 = v2;
  }
  else
  {
    v11 = 0x2872656E6E6162;
    v12 = 0xE700000000000000;
    v4 = round(v13[0] * 100.0) / 100.0;
    if (v13[0] == v4)
    {
      v1 = Double.description.getter(v13[0]);
      v3 = v5;
    }
    else
    {
      v9 = 0;
      v10 = 0xE000000000000000;
      v6._countAndFlagsBits = 126;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      Double.write<A>(to:)(&v9, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation, v4);
      v1 = v9;
      v3 = v10;
    }
    v2 = v3;
  }
  String.append(_:)(*(Swift::String *)&v1);
  swift_bridgeObjectRelease(v3);
  v7._countAndFlagsBits = 41;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  return v11;
}

BOOL sub_100010054(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  _BOOL4 v4;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  if ((*(_BYTE *)(a1 + 32) & 1) == 0)
    return (*(_BYTE *)(a2 + 32) & 1) == 0 && v2 == v3;
  if ((*(_BYTE *)(a2 + 32) & 1) == 0)
    return 0;
  v4 = v2 == v3;
  if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
    v4 = 0;
  if (*(double *)(a1 + 16) != *(double *)(a2 + 16))
    v4 = 0;
  return *(double *)(a1 + 24) == *(double *)(a2 + 24) && v4;
}

uint64_t sub_1000100CC()
{
  __int128 *v0;
  _BYTE v2[40];

  sub_100014C50(v0, (uint64_t)v2);
  return sub_10000FF3C();
}

BOOL sub_100010100(uint64_t a1, uint64_t a2)
{
  double v2;
  double v3;
  BOOL v4;
  BOOL v5;

  v2 = *(double *)a1;
  v3 = *(double *)a2;
  if ((*(_BYTE *)(a1 + 32) & 1) != 0)
  {
    if ((*(_BYTE *)(a2 + 32) & 1) == 0)
      return 0;
    v4 = v2 == v3 && *(double *)(a1 + 8) == *(double *)(a2 + 8);
    v5 = v4 && *(double *)(a1 + 16) == *(double *)(a2 + 16);
    return v5 && *(double *)(a1 + 24) == *(double *)(a2 + 24);
  }
  return (*(_BYTE *)(a2 + 32) & 1) == 0 && v2 == v3;
}

void ConnectionAssistantRendererEarthOutline.Error.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

BOOL static ConnectionAssistantRendererEarthOutline.Error.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int ConnectionAssistantRendererEarthOutline.Error.hashValue.getter(unsigned __int8 a1)
{
  _QWORD v3[9];

  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

BOOL sub_1000101E4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void sub_1000101F8()
{
  qword_10033FBC8 = 0x3FE921FB54442D18;
}

BOOL static ConnectionAssistantDisplayState.Target.__derived_struct_equals(_:_:)(char a1, char a2, double a3, double a4)
{
  return a3 == a4 && a1 == a2;
}

BOOL sub_10001022C(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
}

uint64_t ConnectionAssistantDisplayState.ConeState.isVisible.getter(char a1)
{
  return a1 & 1;
}

uint64_t ConnectionAssistantDisplayState.ConeState.isPulsing.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a3 & 1;
}

uint64_t ConnectionAssistantDisplayState.ConeState.showConnectionPulse.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 8) & 1;
}

void *ConnectionAssistantDisplayState.Result.earth.getter@<X0>(void *a1@<X8>)
{
  const void *v1;

  return memcpy(a1, v1, 0x203uLL);
}

void *ConnectionAssistantDisplayState.Result.camera.getter@<X0>(void *a1@<X8>)
{
  uint64_t v1;

  return memcpy(a1, (const void *)(v1 + 528), 0x180uLL);
}

double ConnectionAssistantDisplayState.Result.centerLocation.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 912);
}

uint64_t ConnectionAssistantDisplayState.Result.hasCoordinateAnimationFinished.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 928);
}

uint64_t sub_1000102A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE v30[24];
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];
  _BYTE v36[24];
  _BYTE v37[24];
  _BYTE v38[24];
  _BYTE v39[24];
  _BYTE v40[24];
  _BYTE v41[24];
  _BYTE v42[80];

  v1 = sub_100003DB8(&qword_1003174A8);
  inited = swift_initStackObject(v1, v42);
  *(_OWORD *)(inited + 16) = xmmword_10024D540;
  v3 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_noLocationLoop;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_noLocationLoop, v41, 0, 0);
  if (*(_BYTE *)(v3 + 32))
    v4 = 1084227584;
  else
    v4 = 1106247680;
  *(_DWORD *)(inited + 32) = v4;
  *(_BYTE *)(inited + 36) = 0;
  v5 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_conePulsingLoop;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_conePulsingLoop, v40, 0, 0);
  if (*(_BYTE *)(v5 + 32))
    v6 = 1084227584;
  else
    v6 = 1101004800;
  *(_DWORD *)(inited + 40) = v6;
  *(_BYTE *)(inited + 44) = 0;
  v7 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_dotWaveLoop;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_dotWaveLoop, v39, 0, 0);
  if (*(_BYTE *)(v7 + 32))
    v8 = 1084227584;
  else
    v8 = 1101004800;
  *(_DWORD *)(inited + 48) = v8;
  *(_BYTE *)(inited + 52) = 0;
  v9 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_satelliteWaveLoop;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_satelliteWaveLoop, v38, 0, 0);
  if (*(_BYTE *)(v9 + 32))
    v10 = 1084227584;
  else
    v10 = 1101004800;
  *(_DWORD *)(inited + 56) = v10;
  *(_BYTE *)(inited + 60) = 0;
  v11 = sub_100003DB8(&qword_1003174B0);
  v12 = sub_100003DB8(&qword_100316048);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = *(unsigned __int8 *)(v13 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = swift_allocObject(v11, v16 + 8 * v14, v15 | 7);
  *(_OWORD *)(v17 + 16) = xmmword_10024D550;
  v18 = v17 + v16;
  v19 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_offsetSpring;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_offsetSpring, v37, 0, 0);
  sub_1000144D0(v19, v18);
  v20 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSpring;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSpring, v36, 0, 0);
  sub_1000144D0(v20, v18 + v14);
  v21 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSnapSpring;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSnapSpring, v35, 0, 0);
  sub_1000144D0(v21, v18 + 2 * v14);
  v22 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_hasCoordinateSpring;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_hasCoordinateSpring, v34, 0, 0);
  sub_1000144D0(v22, v18 + 3 * v14);
  v23 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_connectingSpring;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_connectingSpring, v33, 0, 0);
  sub_1000144D0(v23, v18 + 4 * v14);
  v24 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_completeSpring;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_completeSpring, v32, 0, 0);
  sub_1000144D0(v24, v18 + 5 * v14);
  v25 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_inConnectionConeSpring;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_inConnectionConeSpring, v31, 0, 0);
  sub_1000144D0(v25, v18 + 6 * v14);
  v26 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_coneVisibleSpring;
  swift_beginAccess(v26, v30, 0, 0);
  sub_1000144D0(v26, v18 + 7 * v14);
  v27 = sub_100014518(v17);
  swift_setDeallocating(v17);
  swift_arrayDestroy(v18, *(_QWORD *)(v17 + 16), v12);
  swift_deallocClassInstance(v17, 32, 7);
  *(_DWORD *)(inited + 64) = v27;
  *(_BYTE *)(inited + 68) = BYTE4(v27) & 1;
  v28 = sub_100014698(inited);
  swift_setDeallocating(inited);
  return v28 | ((HIDWORD(v28) & 1) << 32);
}

double sub_100010638@<D0>(uint64_t a1@<X0>, double *a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  uint64_t v4;
  uint64_t v5;
  int *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  int8x16_t v18;
  int8x16_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  double v23;
  float64x2_t v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  int8x16_t v29;
  int8x16_t v30;
  double v31;
  double v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  double v37;
  double v38;
  int v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  double v45;
  uint64_t v46;
  double v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  double v51;
  uint64_t v52;
  __int8 v53;
  char v54;
  float v55;
  float v56;
  float v57;
  double v58;
  double v59;
  char v60;
  double v61;
  __int128 v62;
  __int128 v63;
  double v64;
  double v65;
  double v66;
  double v67;
  CGFloat v68;
  CGFloat v69;
  double v70;
  double v71;
  double MidY;
  float v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  double v78;
  CGFloat Width;
  float64x2_t v80;
  float32x2_t v81;
  float v82;
  double v83;
  double v84;
  double v85;
  float v86;
  float v87;
  double v88;
  double v89;
  double v90;
  double v91;
  double v92;
  double v93;
  float v94;
  float v95;
  uint64_t v96;
  char v97;
  double v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  double v103;
  double v104;
  uint64_t v105;
  uint64_t v106;
  double v107;
  double v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  _BYTE *v115;
  double *v116;
  double result;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  int v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  __int128 v133;
  CGFloat v134;
  double v135;
  double v136;
  unsigned int v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  double v142;
  double v143;
  double v144;
  double v145;
  _BYTE *v146;
  double v147;
  _BOOL4 v148;
  double v149;
  double v150;
  double *v151;
  int8x16_t v152;
  int8x16_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  _BYTE v158[160];
  _OWORD v159[33];
  _BYTE v160[928];
  float v161[132];
  uint64_t v162;
  uint64_t v163;
  _BYTE v164[24];
  _BYTE v165[24];
  _OWORD v166[33];
  _BYTE v167[384];
  _OWORD v168[3];
  uint64_t v169;
  uint64_t v170;
  int v171;
  unsigned __int8 v172;
  __int128 v173;
  uint64_t v174;
  double v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t v178;
  unsigned int v179;
  __int128 v180;
  uint64_t v181;
  uint64_t v182;
  unsigned __int8 v183;
  _OWORD v184[2];
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  _OWORD v190[7];
  uint64_t v191;
  CGRect v192;
  CGRect v193;
  CGRect v194;
  CGRect v195;
  CGRect v196;
  CGRect v197;

  v5 = v4;
  v151 = a2;
  v9 = (int *)sub_100003DB8(&qword_100316048);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_OWORD *)(a1 + 152);
  v190[4] = *(_OWORD *)(a1 + 136);
  v190[5] = v13;
  v190[6] = *(_OWORD *)(a1 + 168);
  v191 = *(_QWORD *)(a1 + 184);
  v14 = *(_OWORD *)(a1 + 88);
  v190[0] = *(_OWORD *)(a1 + 72);
  v190[1] = v14;
  v15 = *(_OWORD *)(a1 + 120);
  v190[2] = *(_OWORD *)(a1 + 104);
  v190[3] = v15;
  v16 = v4 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_offsetSpring;
  v17 = *(_QWORD *)(a1 + 400);
  swift_beginAccess(v16, v160, 33, 0);
  *(_QWORD *)(v16 + v9[9]) = v17;
  sub_1000112EC(a4);
  v18 = (int8x16_t)swift_endAccess(v160);
  v20 = *(unsigned __int8 *)(a1 + 448);
  LODWORD(v147) = v20;
  if (v20 == 4)
  {
    v21 = v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSpring;
    swift_beginAccess(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSpring, v165, 1, 0);
    *(_QWORD *)(v21 + v9[9]) = 0;
    v22 = OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSnapSpring;
    swift_beginAccess(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSnapSpring, v164, 1, 0);
    v23 = 0.0;
  }
  else
  {
    v18.i64[0] = *(_QWORD *)(a1 + 440);
    if (fabs(*(double *)v18.i64) > 1.57079633)
    {
      v19.i64[0] = 1.0;
      v24.f64[0] = NAN;
      v24.f64[1] = NAN;
      v152 = (int8x16_t)vnegq_f64(v24);
      v153 = v18;
      *(_QWORD *)&v25 = vbslq_s8(v152, v19, v18).u64[0];
      if (*(double *)v18.i64 == 0.0)
        v25 = 0.0;
      v26 = v25;
      v27 = v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSnapSpring;
      swift_beginAccess(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSnapSpring, &v154, 1, 0);
      v18 = v153;
      v28 = v9[10];
      v29.i64[0] = *(_QWORD *)(v27 + v28);
      v30.i64[0] = 1.0;
      *(_QWORD *)&v31 = vbslq_s8(v152, v30, v29).u64[0];
      if (*(double *)v29.i64 == 0.0)
        v31 = 0.0;
      if (v26 != v31)
      {
        *(double *)(v27 + v28) = -*(double *)v29.i64;
        *(double *)(v27 + v9[11]) = -*(double *)(v27 + v9[11]);
      }
    }
    if (qword_100315720 != -1)
    {
      v153 = v18;
      swift_once(&qword_100315720, sub_1000101F8);
      v18.i64[0] = v153.i64[0];
    }
    v23 = sub_10021D384(*(double *)v18.i64, -*(double *)&qword_10033FBC8, *(double *)&qword_10033FBC8, *(double *)&qword_10033FBC8 + *(double *)&qword_10033FBC8, 0.55)* 0.2;
    if (v20 == 3)
      v32 = 0.0;
    else
      v32 = v23;
    v33 = v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSpring;
    swift_beginAccess(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSpring, v165, 1, 0);
    *(double *)(v33 + v9[9]) = v32;
    v22 = OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSnapSpring;
    swift_beginAccess(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSnapSpring, v164, 1, 0);
  }
  *(double *)(v5 + v22 + v9[9]) = v23;
  v34 = v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSpring;
  swift_beginAccess(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSpring, v160, 33, 0);
  sub_1000112EC(a4);
  swift_endAccess(v160);
  v35 = v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSnapSpring;
  swift_beginAccess(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSnapSpring, v160, 33, 0);
  sub_1000112EC(a4);
  swift_endAccess(v160);
  v36 = sub_10001148C(v5, a1);
  v37 = *(double *)(a1 + 416);
  v38 = *(double *)(a1 + 424);
  v39 = *(unsigned __int8 *)(a1 + 432);
  if (v39 == 2 || v36)
  {
    v152.i32[0] = 0;
    v40 = 0.0;
LABEL_19:
    v153.i64[0] = v39 != 2 && !v36;
    v41 = v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_hasCoordinateSpring;
    swift_beginAccess(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_hasCoordinateSpring, v160, 33, 0);
    *(double *)(v41 + v9[9]) = v40;
    sub_1000112EC(a4);
    swift_endAccess(v160);
    goto LABEL_21;
  }
  v152.i32[0] = v39 & 1;
  v40 = 1.0;
  if ((*(_BYTE *)(a1 + 408) & 1) == 0)
    goto LABEL_19;
  v42 = v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_hasCoordinateSpring;
  v153.i64[0] = 1;
  swift_beginAccess(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_hasCoordinateSpring, &v155, 1, 0);
  *(_QWORD *)(v42 + v9[9]) = 0x3FF0000000000000;
  *(_QWORD *)(v42 + v9[10]) = 0x3FF0000000000000;
  *(_QWORD *)(v42 + v9[11]) = 0;
LABEL_21:
  v43 = v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_hasCoordinateSpring;
  swift_beginAccess(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_hasCoordinateSpring, &v163, 0, 0);
  sub_1000144D0(v43, (uint64_t)v12);
  v44 = vabdd_f64(*(double *)&v12[v9[10]], *(double *)&v12[v9[9]]);
  if (v44 <= 0.005)
  {
    v148 = v44 <= 0.0005;
    sub_100007FF0((uint64_t)v12, &qword_100316048);
  }
  else
  {
    sub_100007FF0((uint64_t)v12, &qword_100316048);
    v148 = 0;
  }
  v45 = 1.0;
  if ((*(_BYTE *)(a1 + 449) & 1) == 0)
  {
    if ((*(_BYTE *)(a1 + 450) & 1) != 0)
      v45 = 1.0;
    else
      v45 = 0.0;
  }
  v46 = v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_connectingSpring;
  swift_beginAccess(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_connectingSpring, &v162, 1, 0);
  *(double *)(v46 + v9[9]) = v45;
  if (v45 == 1.0 && (*(_BYTE *)(a1 + 408) & 1) != 0)
  {
    *(_QWORD *)(v46 + v9[10]) = 0x3FF0000000000000;
    *(_QWORD *)(v46 + v9[11]) = 0;
  }
  else
  {
    swift_beginAccess(v46, v160, 33, 0);
    sub_1000112EC(a4);
    swift_endAccess(v160);
  }
  v47 = 1.0;
  if ((*(_BYTE *)(a1 + 450) & 1) != 0)
    v48 = 1.0;
  else
    v48 = 0.0;
  v49 = v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_completeSpring;
  swift_beginAccess(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_completeSpring, v160, 33, 0);
  *(double *)(v49 + v9[9]) = v48;
  sub_1000112EC(a4);
  swift_endAccess(v160);
  v50 = v9[10];
  if ((LODWORD(v147) | 4) != 4 || (*(_BYTE *)(a1 + 408) & 1) != 0)
    v47 = 0.0;
  v147 = *(double *)(v35 + v50);
  v51 = *(double *)(v34 + v50);
  v143 = *(double *)(v46 + v50);
  v144 = v51;
  v142 = *(double *)(v43 + v50);
  v52 = v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_inConnectionConeSpring;
  swift_beginAccess(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_inConnectionConeSpring, v160, 33, 0);
  *(double *)(v52 + v9[9]) = v47;
  sub_1000112EC(a4);
  swift_endAccess(v160);
  v53 = v153.i8[0];
  v54 = ~v153.i8[0];
  swift_beginAccess(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_noLocationLoop, v160, 33, 0);
  sub_100159124((v53 & 1) == 0, a3);
  v56 = v55;
  swift_endAccess(v160);
  v149 = a4;
  v150 = a3;
  if ((v54 & 1) != 0)
  {
    *(float *)(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_lastNoLocationValue) = v56;
    v59 = v56 * 360.0;
    v37 = 0.0;
    if (v56 > 0.5)
      v38 = v59 + -360.0;
    else
      v38 = v56 * 360.0;
    if (v56 > 0.5)
      v58 = v59 + -360.0;
    else
      v58 = v56 * 360.0;
  }
  else
  {
    v57 = *(float *)(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_lastNoLocationValue);
    if (v57 <= 0.5)
      v58 = v57 * 360.0;
    else
      v58 = v57 * 360.0 + -360.0;
    if (v39 == 2)
    {
      v37 = 0.0;
      v38 = v58;
    }
  }
  v60 = v152.i8[0];
  v146 = (char *)&v159[17] + 1;
  v61 = sub_1000115F8(a1, v5, v152.i8[0]);
  *(double *)&v62 = sub_1000118D8((CGRect *)a1, v5);
  v140 = v62;
  v141 = v63;
  v145 = v37;
  *(double *)v152.i64 = v38;
  sub_100011A40((uint64_t)v190, v5, v37, v38, 0.0, v58);
  v65 = v64;
  v67 = v66;
  v68 = *(double *)a1;
  v69 = *(double *)(a1 + 8);
  v71 = *(double *)(a1 + 16);
  v70 = *(double *)(a1 + 24);
  v192.origin.x = *(CGFloat *)a1;
  v192.origin.y = v69;
  v192.size.width = v71;
  v192.size.height = v70;
  CGRectGetMidX(v192);
  v193.origin.x = v68;
  v193.origin.y = v69;
  v193.size.width = v71;
  v193.size.height = v70;
  MidY = CGRectGetMidY(v193);
  v73 = *(double *)(v43 + v9[10]);
  v134 = v65;
  *(double *)&v133 = v67;
  sub_1000DACF8(0.0, 0, 0x3F96CBE440490FDAuLL, 0, (unint64_t)COERCE_UNSIGNED_INT(v73 * 0.7854) << 32, 0, v166, 0.0, v65, v67);
  memcpy(v161, v166, 0x203uLL);
  v74 = _s8SOSBuddy25ConnectionAssistantCameraV8ViewportV4size5scaleAESo6CGSizeV_12CoreGraphics7CGFloatVtcfC_0(v71, v70, *(double *)(a1 + 64));
  v76 = v75;
  *(_QWORD *)&v132 = v77;
  v194.origin.x = v68;
  v194.origin.y = v69;
  v194.size.width = v71;
  v194.size.height = v70;
  if (CGRectGetWidth(v194) <= 0.0)
  {
    v81 = 0;
    v82 = 1.0;
  }
  else
  {
    v195.origin.x = v68;
    v195.origin.y = v69;
    v195.size.width = v71;
    v195.size.height = v70;
    v78 = v61 / CGRectGetWidth(v195);
    v196.origin.x = v68;
    v196.origin.y = v69;
    v196.size.width = v71;
    v196.size.height = v70;
    Width = CGRectGetWidth(v196);
    *(_QWORD *)&v80.f64[0] = v140;
    *(_QWORD *)&v80.f64[1] = v141;
    v81 = vcvt_f32_f64(vdivq_f64(v80, (float64x2_t)vdupq_lane_s64(COERCE__INT64(v78 * Width), 0)));
    v82 = v78;
  }
  v83 = *(double *)&v141 + MidY;
  v84 = v61 * 0.5;
  v136 = v144 * 0.7;
  v85 = v144 * -0.5 * v143 * v142;
  v140 = v166[1];
  v141 = v166[0];
  v138 = v166[3];
  v139 = v166[2];
  v86 = *((float *)&v166[4] + 1);
  v137 = v166[4];
  LODWORD(v142) = HIDWORD(v166[4]);
  v87 = v85;
  sub_10008DA1C((float *)v166, v74, v76, (uint64_t)v167, v134, *(double *)&v133, v82, v81, v87, *(double *)&v132);
  memcpy(&v160[528], v167, 0x180uLL);
  v88 = v145;
  v89 = sub_100011BDC(a1, v161, v145, *(double *)v152.i64, (uint64_t)v167, v5);
  v143 = v90;
  v144 = v89;
  v197.origin.x = v68;
  v197.origin.y = v69;
  v197.size.width = v71;
  v197.size.height = v70;
  v134 = CGRectGetMinY(v197) + *(double *)(a1 + 32);
  v135 = v84;
  v91 = v83;
  v92 = v84;
  v93 = sub_1000149BC((uint64_t)v190, v5, v134, v83, v84);
  v94 = v93 / v92;
  v95 = v86 * v94;
  v96 = v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_locationDotLoop;
  swift_beginAccess(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_locationDotLoop, v158, 33, 0);
  v97 = v153.i8[0] & 1;
  v98 = v150;
  LODWORD(v83) = sub_1001591C4(v153.i8[0] & 1, v150);
  swift_endAccess(v158);
  v99 = *(_QWORD *)(v96 + 24);
  v100 = *(_BYTE *)(v96 + 32);
  v101 = v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_dotWaveLoop;
  swift_beginAccess(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_dotWaveLoop, &v157, 1, 0);
  *(_QWORD *)(v101 + 40) = v99;
  *(_BYTE *)(v101 + 48) = v100;
  v102 = v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_satelliteWaveLoop;
  swift_beginAccess(v5 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_satelliteWaveLoop, &v156, 1, 0);
  *(_QWORD *)(v102 + 40) = v99;
  *(_BYTE *)(v102 + 48) = v100;
  sub_100011DD8(v97, v161, (float32x2_t *)a1, v5, v60, (float32x2_t *)v168, *(float *)&v83);
  v153 = (int8x16_t)v168[0];
  v132 = v168[2];
  v133 = v168[1];
  v130 = v170;
  v131 = v169;
  v128 = v172;
  v129 = v171;
  sub_10000B458((uint64_t)v168, (uint64_t)&v161[20], &qword_100317490);
  v103 = v149;
  v104 = *(double *)v152.i64;
  sub_100011FCC(a1, v60, v5, v97, v161, (uint64_t)v190, (uint64_t)&v173, v149, v136, v95, v98, v88, *(double *)v152.i64);
  v120 = v173;
  v136 = v175;
  v105 = v174;
  v126 = v176;
  v127 = v178;
  v106 = v177;
  v125 = v179;
  v124 = v180;
  v122 = v182;
  v123 = v181;
  v121 = v183;
  v107 = v93;
  v108 = v147;
  sub_100012328(a1, v5, (uint64_t)v190, (uint64_t)v184, v103, v95, v107, v147);
  v118 = v184[1];
  v119 = v184[0];
  v109 = v185;
  v110 = v186;
  v111 = v188;
  v112 = v187;
  v113 = v189;
  sub_10001268C(v5, a1, (uint64_t)v190, (uint64_t)&v173, (uint64_t)v158, v103, v95, v108, v88, v104, v98);
  sub_100014B2C((uint64_t)v158);
  v159[0] = v141;
  v159[1] = v140;
  v159[2] = v139;
  v159[3] = v138;
  *(_QWORD *)&v159[4] = __PAIR64__(LODWORD(v86), v137);
  *(float *)&v114 = (v91 - v134) / v135;
  *((_QWORD *)&v159[4] + 1) = __PAIR64__(LODWORD(v142), v114);
  v159[5] = v153;
  v159[6] = v133;
  v159[7] = v132;
  *(_QWORD *)&v159[8] = v131;
  *((_QWORD *)&v159[8] + 1) = v130;
  LODWORD(v159[9]) = v129;
  BYTE4(v159[9]) = v128;
  v159[10] = v120;
  *(_QWORD *)&v159[11] = v105;
  *((double *)&v159[11] + 1) = v136;
  v159[12] = v126;
  *(_QWORD *)&v159[13] = v106;
  *((_QWORD *)&v159[13] + 1) = v127;
  v159[14] = v125;
  v159[15] = v124;
  *(_QWORD *)&v159[16] = v123;
  *((_QWORD *)&v159[16] + 1) = v122;
  LOBYTE(v159[17]) = v121;
  v115 = v146;
  *v146 = 0;
  v159[18] = v119;
  v159[19] = v118;
  *(_QWORD *)&v159[20] = v109;
  *((_QWORD *)&v159[20] + 1) = v110;
  *(_QWORD *)&v159[21] = v112;
  *((_QWORD *)&v159[21] + 1) = v111;
  LODWORD(v159[22]) = v113;
  v115[83] = 0;
  sub_10000B458((uint64_t)v158, (uint64_t)&v159[23], &qword_100316058);
  memcpy(v160, v159, 0x203uLL);
  v116 = v151;
  memcpy(v151, v160, 0x390uLL);
  v116[114] = v144;
  result = v143;
  v116[115] = v143;
  *((_BYTE *)v116 + 928) = v148;
  return result;
}

double sub_1000112EC(double a1)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  double v6;
  uint64_t v7;
  double v8;
  unint64_t v9;
  double result;
  double v11;
  double v12;
  uint64_t v13;

  v3 = (int *)sub_100003DB8(&qword_100316048);
  v4 = v3[9];
  v5 = v3[10];
  v6 = *(double *)(v1 + v5);
  v7 = v3[11];
  v13 = *(_QWORD *)(v1 + v7);
  v11 = *(double *)(v1 + v4) - v6;
  v8 = v11;
  v9 = sub_100013984();
  Spring.value<A>(target:initialVelocity:time:)(&v12, &v11, &v13, &type metadata for CGFloat, v9, a1);
  *(double *)(v1 + v5) = v6 + v12;
  v11 = v8;
  Spring.velocity<A>(target:initialVelocity:time:)(&v12, &v11, &v13, &type metadata for CGFloat, v9, a1);
  result = v12;
  *(double *)(v1 + v7) = v12;
  return result;
}

float sub_1000113BC(double a1)
{
  uint64_t v1;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  float v6;
  uint64_t v7;
  float v8;
  float result;
  float v10;
  uint64_t v11;

  v3 = (int *)sub_100003DB8(&qword_100316050);
  v4 = v3[9];
  v5 = v3[10];
  v6 = *(float *)(v1 + v5);
  v7 = v3[11];
  HIDWORD(v11) = *(_DWORD *)(v1 + v7);
  v10 = *(float *)(v1 + v4) - v6;
  v8 = v10;
  Spring.value<A>(target:initialVelocity:time:)(&v11, &v10, (char *)&v11 + 4, &type metadata for Float, &protocol witness table for Float, a1);
  *(float *)(v1 + v5) = v6 + *(float *)&v11;
  v10 = v8;
  Spring.velocity<A>(target:initialVelocity:time:)(&v11, &v10, (char *)&v11 + 4, &type metadata for Float, &protocol witness table for Float, a1);
  result = *(float *)&v11;
  *(_DWORD *)(v1 + v7) = v11;
  return result;
}

BOOL sub_10001148C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  float v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  _BYTE v13[24];
  _BYTE v14[24];
  _BYTE v15[8];
  double v16;
  char v17;

  v4 = a1 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_noLocationLoop;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_noLocationLoop, v13, 0, 0);
  if ((*(_BYTE *)(v4 + 32) & 1) != 0)
    return 0;
  sub_10000B458(a2 + 416, (uint64_t)v14, &qword_1003174A0);
  sub_10000B458((uint64_t)v14, (uint64_t)v15, &qword_1003174A0);
  if (v17 == 2)
    return 1;
  v6 = *(float *)(a1 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_lastNoLocationValue);
  v7 = 0.0;
  if (v6 > 0.5)
    v7 = 360.0;
  v8 = v6 * 360.0 - v7;
  v9 = (v8 - v16) * 0.0174532925;
  if (v9 < 0.0 || v9 >= 6.28318531)
    v9 = v9 - floor(v9 / 6.28318531) * 6.28318531;
  v10 = (v16 - v8) * 0.0174532925;
  if (v10 < 0.0 || v10 >= 6.28318531)
    v10 = v10 - floor(v10 / 6.28318531) * 6.28318531;
  v11 = v9 * 57.2957795;
  v12 = v10 * 57.2957795;
  if (v12 < v11)
    v11 = v12;
  return v11 >= 150.0;
}

double sub_1000115F8(uint64_t a1, uint64_t a2, char a3)
{
  double Width;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  double v14;
  double v15;
  int v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  int v21;
  double v22;
  int v23;
  int v24;
  double v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  uint64_t v31;
  double v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  char v41;
  double v42;
  double v43;
  double v44;
  double v45;
  char v46;
  double v47;
  double v48;
  double v49;
  int v51;
  int v53;
  double v54;
  double v55;
  _BYTE v56[24];
  _BYTE v57[24];
  _BYTE v58[24];
  _BYTE v59[24];
  _BYTE v60[24];
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  _BYTE v66[25];
  uint64_t v67[2];
  uint64_t v68[2];
  uint64_t v69[2];
  double v70;
  unsigned __int8 v71;
  double v72;
  unsigned __int8 v73;
  double v74;
  unsigned __int8 v75;

  Width = CGRectGetWidth(*(CGRect *)a1);
  v6 = *(_OWORD *)(a1 + 224);
  v7 = *(_OWORD *)(a1 + 240);
  v8 = *(_OWORD *)(a1 + 192);
  v62 = *(_OWORD *)(a1 + 208);
  v63 = v6;
  v9 = *(_OWORD *)(a1 + 256);
  v10 = *(_OWORD *)(a1 + 272);
  v64 = v7;
  v65 = v9;
  *(_OWORD *)v66 = v10;
  *(_OWORD *)&v66[9] = *(_OWORD *)(a1 + 281);
  v61 = v8;
  v53 = BYTE8(v62);
  v54 = *(double *)&v63;
  v55 = *(double *)&v62;
  v11 = a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_offsetSpring;
  v12 = BYTE8(v63);
  swift_beginAccess(a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_offsetSpring, v60, 0, 0);
  v13 = sub_100003DB8(&qword_100316048);
  v14 = *(double *)(v11 + *(int *)(v13 + 40));
  sub_100014B84((uint64_t *)&v64, (uint64_t)v69);
  sub_100014B84(v69, (uint64_t)&v70);
  v51 = v71;
  v15 = v70;
  sub_100014B84((uint64_t *)&v65, (uint64_t)v68);
  sub_100014B84(v68, (uint64_t)&v72);
  v16 = v73;
  v17 = v72;
  v18 = a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_inConnectionConeSpring;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_inConnectionConeSpring, v59, 0, 0);
  v19 = *(double *)(v18 + *(int *)(v13 + 40));
  v20 = *(double *)v66;
  v21 = v66[8];
  v22 = *(double *)&v66[16];
  v23 = v66[24];
  sub_100014B84((uint64_t *)&v61, (uint64_t)v67);
  sub_100014B84(v67, (uint64_t)&v74);
  v24 = v75;
  v25 = v74;
  v26 = a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_completeSpring;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_completeSpring, v58, 0, 0);
  v27 = *(double *)(v26 + *(int *)(v13 + 40));
  v28 = a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_connectingSpring;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_connectingSpring, v57, 0, 0);
  v29 = *(double *)(v28 + *(int *)(v13 + 40));
  v30 = 0.0;
  if ((a3 & 1) == 0)
  {
    v31 = a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_hasCoordinateSpring;
    swift_beginAccess(v31, v56, 0, 0);
    v30 = *(double *)(v31 + *(int *)(v13 + 40));
  }
  v32 = 1.0;
  if (v24)
    v33 = 1.0;
  else
    v33 = Width;
  v34 = v25 * v33;
  if (v16)
    v35 = 1.0;
  else
    v35 = Width;
  v36 = v17 * v35;
  if (v51)
    v37 = 1.0;
  else
    v37 = Width;
  v38 = v15 * v37;
  if (v21)
    v39 = 1.0;
  else
    v39 = Width;
  v40 = v39 * v20;
  if (v23 == 255)
    v41 = v21;
  else
    v41 = v23;
  if (v23 == 255)
    v42 = v20;
  else
    v42 = v22;
  if ((v41 & 1) != 0)
    v43 = 1.0;
  else
    v43 = Width;
  v44 = v40 + v14 * (v43 * v42 - v40);
  v45 = v38 + v19 * v19 * (v36 - v38);
  v46 = v53;
  if (v53)
    v47 = 1.0;
  else
    v47 = Width;
  v48 = v55;
  v49 = v47 * v55;
  if (v12 != 255)
  {
    v46 = v12;
    v48 = v54;
  }
  if ((v46 & 1) == 0)
    v32 = Width;
  return v34
       + v30 * (v49 + v14 * (v32 * v48 - v49) + v29 * (v45 + v27 * (v44 - v45) - (v49 + v14 * (v32 * v48 - v49))) - v34);
}

double sub_1000118D8(CGRect *a1, uint64_t a2)
{
  _BYTE v5[24];
  _BYTE v6[24];
  _BYTE v7[24];

  swift_beginAccess(a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_offsetSpring, v7, 0, 0);
  sub_100003DB8(&qword_100316048);
  swift_beginAccess(a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_completeSpring, v6, 0, 0);
  swift_beginAccess(a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_connectingSpring, v5, 0, 0);
  CGRectGetMidY(*a1);
  return 0.0;
}

void sub_100011A40(uint64_t a1, uint64_t a2, double a3, double a4, double a5, double a6)
{
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  char v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  double v16;
  double v17;
  uint64_t v18;
  double v19;
  double v20;
  double v21;
  uint64_t v22;
  double v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  _BYTE v31[24];
  _BYTE v32[24];
  _BYTE v33[24];
  _BYTE v34[24];
  _BYTE v35[24];

  v7 = *(double *)(a1 + 8);
  v8 = *(double *)(a1 + 32);
  v9 = *(double *)(a1 + 40);
  v11 = *(double *)(a1 + 48);
  v10 = *(double *)(a1 + 56);
  v12 = *(_BYTE *)(a1 + 64);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
    v13 = 0.0;
  else
    v13 = *(double *)(a1 + 16);
  v14 = a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_offsetSpring;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_offsetSpring, v35, 0, 0);
  v15 = sub_100003DB8(&qword_100316048);
  v16 = *(double *)(v14 + *(int *)(v15 + 40));
  v17 = v7 + v16 * (v13 - v7);
  v18 = a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_inConnectionConeSpring;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_inConnectionConeSpring, v34, 0, 0);
  v19 = v9 + *(double *)(v18 + *(int *)(v15 + 40)) * (v8 - v9);
  if ((v12 & 1) != 0)
    v20 = 0.0;
  else
    v20 = v10;
  v21 = v11 + v16 * (v20 - v11);
  v22 = a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_completeSpring;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_completeSpring, v33, 0, 0);
  v23 = v19 + *(double *)(v22 + *(int *)(v15 + 40)) * (v21 - v19);
  v24 = a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_connectingSpring;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_connectingSpring, v32, 0, 0);
  v25 = v17 + *(double *)(v24 + *(int *)(v15 + 40)) * (v23 - v17) + a3;
  v26 = a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_hasCoordinateSpring;
  swift_beginAccess(v26, v31, 0, 0);
  sub_100014850(a5, a6, v25, a4, *(double *)(v26 + *(int *)(v15 + 40)));
}

double sub_100011BDC(uint64_t a1, const void *a2, double a3, double a4, uint64_t a5, uint64_t a6)
{
  __int128 v11;
  __int128 v12;
  __int128 v13;
  CGFloat v14;
  CGFloat v15;
  CGFloat v16;
  CGFloat v17;
  double MidX;
  float32x4_t v19;
  float32x4_t v20;
  double v21;
  char v22;
  double v23;
  uint64_t v24;
  double v25;
  double v26;
  BOOL v27;
  double v28;
  _BYTE v30[24];
  _OWORD v31[5];
  _OWORD v32[2];
  uint64_t v33[2];
  float32x2_t __dst[66];
  uint64_t v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;

  v11 = *(_OWORD *)(a1 + 272);
  v31[4] = *(_OWORD *)(a1 + 256);
  v32[0] = v11;
  *(_OWORD *)((char *)v32 + 9) = *(_OWORD *)(a1 + 281);
  v12 = *(_OWORD *)(a1 + 208);
  v31[0] = *(_OWORD *)(a1 + 192);
  v31[1] = v12;
  v13 = *(_OWORD *)(a1 + 240);
  v31[2] = *(_OWORD *)(a1 + 224);
  v31[3] = v13;
  sub_100014B84((uint64_t *)v31, (uint64_t)v33);
  v14 = *(double *)a1;
  v15 = *(double *)(a1 + 8);
  v16 = *(double *)(a1 + 16);
  v17 = *(double *)(a1 + 24);
  v36.origin.x = *(CGFloat *)a1;
  v36.origin.y = v15;
  v36.size.width = v16;
  v36.size.height = v17;
  CGRectGetWidth(v36);
  sub_100014B84(v33, (uint64_t)&v35);
  v37.origin.x = v14;
  v37.origin.y = v15;
  v37.size.width = v16;
  v37.size.height = v17;
  MidX = CGRectGetMidX(v37);
  v38.origin.x = v14;
  v38.origin.y = v15;
  v38.size.width = v16;
  v38.size.height = v17;
  CGRectGetMidY(v38);
  memcpy(__dst, a2, 0x203uLL);
  *(double *)v19.i64 = ConnectionAssistantEarth.direction(for:)(a3, a4);
  *(float32x2_t *)v20.f32 = vsub_f32(__dst[0], vmul_n_f32(*(float32x2_t *)v19.f32, __dst[8].f32[1]));
  v20.f32[2] = __dst[1].f32[0] - vmuls_lane_f32(__dst[8].f32[1], v19, 2);
  v20.i32[3] = 0;
  ConnectionAssistantCamera.projectToViewport(point:)(v20);
  if ((v22 & 1) != 0)
    v23 = MidX;
  else
    v23 = v21;
  v24 = a6 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_hasCoordinateSpring;
  swift_beginAccess(v24, v30, 0, 0);
  v25 = *(double *)(v24 + *(int *)(sub_100003DB8(&qword_100316048) + 40));
  v26 = fabs(sqrt(v25));
  v27 = v25 == -INFINITY;
  v28 = INFINITY;
  if (!v27)
    v28 = v26;
  return round((MidX + v28 * (v23 - MidX)) * 100.0) / 100.0;
}

uint64_t sub_100011DD8@<X0>(char a1@<W0>, const void *a2@<X1>, float32x2_t *a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, float32x2_t *a6@<X8>, float a7@<S0>)
{
  uint64_t result;
  double v13;
  float v14;
  float32x2_t v15;
  float32x2_t v16;
  uint64_t v17;
  uint64_t v18;
  double v19;
  float32x2_t v20;
  uint64_t v21;
  float v22;
  float v23;
  float v24;
  float32x2_t v25;
  float32x2_t v26;
  float v27;
  char v28[24];
  _BYTE v29[24];
  _DWORD __dst[130];
  double v31[2];
  char v32;

  if ((a1 & 1) != 0)
  {
    memcpy(__dst, a2, 0x203uLL);
    sub_10000B458((uint64_t)&a3[52], (uint64_t)v29, &qword_1003174A0);
    result = sub_10000B458((uint64_t)v29, (uint64_t)v31, &qword_1003174A0);
    if (v32 == 2)
    {
      __break(1u);
      return result;
    }
    v27 = *(float *)&__dst[17];
    v13 = ConnectionAssistantEarth.direction(for:)(v31[0], v31[1]);
    v15 = (float32x2_t)COERCE_UNSIGNED_INT(v27 * (float)(0.0 - v14));
    v16 = vmul_n_f32(vsub_f32(0, *(float32x2_t *)&v13), v27);
  }
  else
  {
    v16 = 0;
    v15 = 0;
  }
  v17 = a4 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_hasCoordinateSpring;
  swift_beginAccess(a4 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_hasCoordinateSpring, v28, 0, 0);
  result = sub_100003DB8(&qword_100316048);
  v18 = result;
  v19 = *(double *)(v17 + *(int *)(result + 40));
  if (qword_100315730 != -1)
    result = swift_once(&qword_100315730, sub_10001CB74);
  v21 = qword_10033FBE0;
  v20 = *(float32x2_t *)algn_10033FBE8;
  v22 = 0.0;
  if ((a5 & 1) == 0)
  {
    v23 = *(double *)(v17 + *(int *)(v18 + 40));
    v22 = v23 * 1000.0;
  }
  v24 = v19;
  v26 = a3[48];
  v25 = a3[49];
  *a6 = v16;
  a6[1] = v15;
  a6[2] = (float32x2_t)(COERCE_UNSIGNED_INT(roundf((float)((float)((float)((float)(a7 * 0.1875) + 0.8125) * 8.0) * v24)* 10.0) / 10.0) | ((unint64_t)COERCE_UNSIGNED_INT(roundf((float)(v24 * 11.0) * 10.0)/ 10.0) << 32));
  a6[3] = 0;
  a6[4] = v26;
  a6[5] = v25;
  a6[6] = (float32x2_t)v21;
  a6[7] = v20;
  a6[8].f32[0] = roundf(v22) / 1000.0;
  a6[8].i8[4] = 0;
  return result;
}

__n128 sub_100011FCC@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, float *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, double a8@<D0>, double a9@<D1>, float a10@<S2>, double a11@<D3>, double a12@<D4>, double a13@<D5>)
{
  char v22;
  char v23;
  double v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  float v28;
  double v29;
  double v30;
  float v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  __int128 v41;
  float v42;
  float32x4_t v43;
  int32x4_t v44;
  char v45;
  int v46;
  float v47;
  float v48;
  float v49;
  float v50;
  id v51;
  float v52;
  __n128 v53;
  __n128 result;
  __int128 v55;
  __int128 v57;
  float32x4_t v59;
  __int128 v60;
  char v61;
  __int128 v62;
  void *v63;
  __n128 v64;
  _BYTE v65[24];
  _OWORD v66[2];
  int v67;
  __int128 v68;
  _BYTE v69[16];
  float __dst[130];
  _BYTE v71[24];

  v63 = *(void **)(a1 + 360);
  v22 = *(_BYTE *)(a1 + 368);
  v61 = *(_BYTE *)(a1 + 369);
  if ((*(_BYTE *)(a1 + 352) & 1) == 0)
  {
    v23 = 0;
LABEL_5:
    v24 = 0.0;
    goto LABEL_6;
  }
  v23 = a2 ^ 1;
  if ((a4 & 1) == 0)
    goto LABEL_5;
  sub_10000B458(a1 + 440, (uint64_t)v69, &qword_100317498);
  sub_10000B458((uint64_t)v69, (uint64_t)v71, &qword_100317498);
  v24 = 1.0;
  if (v71[8] == 3)
    goto LABEL_5;
LABEL_6:
  v25 = a3 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_coneVisibleSpring;
  swift_beginAccess(a3 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_coneVisibleSpring, __dst, 33, 0);
  v26 = sub_100003DB8(&qword_100316048);
  *(double *)(v25 + *(int *)(v26 + 36)) = v24;
  sub_1000112EC(a8);
  swift_endAccess(__dst);
  v27 = *(double *)(v25 + *(int *)(v26 + 40));
  v28 = a5[17];
  v29 = *(double *)(a6 + 112);
  swift_beginAccess(a3 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_conePulsingLoop, __dst, 33, 0);
  v30 = a11;
  v31 = sub_1001591C4(v23 & v22 & 1, a11);
  swift_endAccess(__dst);
  v32 = 0.0;
  if ((v23 & 1) != 0)
    v32 = *(double *)(v25 + *(int *)(v26 + 40));
  v33 = v29;
  v34 = tanf((float)(v33 * 0.7) * 0.5);
  v35 = v27;
  v36 = (float)(a10 - v28) * v35;
  v37 = v36 * v34;
  v38 = a9;
  v39 = v38 / 6.2832;
  v40 = v31 * v32;
  memcpy(__dst, a5, 0x203uLL);
  *(float *)&v41 = __dst[17];
  v55 = v41;
  *(float32x2_t *)v43.f32 = vmul_n_f32(vsub_f32(0, COERCE_FLOAT32X2_T(ConnectionAssistantEarth.direction(for:)(a12, a13))), __dst[17]);
  v43.f32[2] = *(float *)&v55 * (float)(0.0 - v42);
  v43.i32[3] = 0;
  v59 = v43;
  sub_100014B34(a1);
  *(float *)v44.i32 = v39;
  sub_1001B8954(v63, (uint64_t)v66, v59, v36, v44, 1.5708, v37);
  sub_100014B5C(a1);
  v45 = v23 & v61;
  v60 = v66[1];
  v62 = v66[0];
  v46 = v67;
  v57 = v68;
  swift_beginAccess(a3 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_dotWaveLoop, v65, 33, 0);
  sub_100159124(v45 & 1, v30);
  v48 = v47;
  swift_endAccess(v65);
  v49 = fabsf(sqrtf(v48));
  if (v48 == -INFINITY)
    v50 = INFINITY;
  else
    v50 = v49;
  v51 = objc_msgSend(v63, "colorWithAlphaComponent:", 0.4, v55);
  v52 = sub_1001B8B20(v51, v50);
  v64 = v53;

  *(_OWORD *)a7 = v62;
  *(_OWORD *)(a7 + 16) = v60;
  *(_DWORD *)(a7 + 32) = v46;
  *(_OWORD *)(a7 + 48) = v57;
  *(float *)(a7 + 64) = v40;
  *(_QWORD *)(a7 + 80) = LODWORD(v52);
  *(_QWORD *)(a7 + 88) = 0;
  result = v64;
  *(__n128 *)(a7 + 96) = v64;
  *(_BYTE *)(a7 + 112) = 0;
  return result;
}

float sub_100012328@<S0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, float a6@<S1>, double a7@<D2>, double a8@<D3>)
{
  int v15;
  float v16;
  _BOOL4 v17;
  _BOOL4 v18;
  float v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  float v25;
  float v26;
  uint64_t v27;
  uint64_t v28;
  float v29;
  float v30;
  uint64_t v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  float v38;
  float v39;
  float v40;
  id v41;
  float result;
  int v43;
  __int128 v44;
  uint64_t v45;
  float v46;
  float v47;
  float v48;
  int v49;
  uint64_t v50;
  _BYTE v51[24];
  uint64_t v52;
  float v53;
  uint64_t v54;
  int v55;
  __int128 v56;

  v15 = *(unsigned __int8 *)(a1 + 448);
  v16 = 1.0;
  if (v15 == 2)
  {
    v18 = 0;
    v17 = 1;
  }
  else if (v15 == 4 || (v17 = v15 == 3, v18 = v15 != 3, (v15 | 2) != 3))
  {
    v18 = 0;
    v17 = 0;
    v19 = 0.0;
    goto LABEL_7;
  }
  v19 = 1.0;
LABEL_7:
  v20 = a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_arrowVisibleSpring;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_arrowVisibleSpring, &v52, 33, 0);
  v21 = sub_100003DB8(&qword_100316050);
  *(float *)(v20 + *(int *)(v21 + 36)) = v19;
  sub_1000113BC(a5);
  swift_endAccess(&v52);
  v22 = !v17;
  if (*(float *)(v20 + *(int *)(v21 + 40)) > 0.9)
  {
    v23 = !v18;
  }
  else
  {
    v22 = 1;
    v23 = 1;
  }
  v24 = a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_arrowLeftTipVisibleSpring;
  if (v22)
    v25 = 0.0;
  else
    v25 = 1.0;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_arrowLeftTipVisibleSpring, &v52, 33, 0);
  *(float *)(v24 + *(int *)(v21 + 36)) = v25;
  if (v23)
    v26 = 0.0;
  else
    v26 = 1.0;
  v27 = a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_arrowRightTipVisibleSpring;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_arrowRightTipVisibleSpring, v51, 1, 0);
  *(float *)(v27 + *(int *)(v21 + 36)) = v26;
  sub_1000113BC(a5);
  swift_endAccess(&v52);
  swift_beginAccess(v27, &v52, 33, 0);
  sub_1000113BC(a5);
  swift_endAccess(&v52);
  if (v15 != 3)
    v16 = 0.0;
  v28 = a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_arrowTurnAroundSpring;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_arrowTurnAroundSpring, &v52, 33, 0);
  *(float *)(v28 + *(int *)(v21 + 36)) = v16;
  sub_1000113BC(a5);
  swift_endAccess(&v52);
  v29 = *(double *)(a3 + 104) / a7;
  v30 = v29 * 1.5;
  v31 = *(int *)(v21 + 40);
  v32 = a8;
  v33 = fabsf(v32);
  v34 = v33 - (float)(*(float *)(v24 + v31) * v30);
  v35 = v33 - (float)(v30 * *(float *)(v27 + v31));
  v36 = *(float *)(v28 + v31);
  v37 = powf(v36, 0.4);
  v38 = *(float *)(v20 + v31);
  v39 = v38 * (float)-(float)(v34 - (float)(v36 * (float)(v34 + -1.5708)));
  v40 = v38 * (float)(v35 + (float)(v36 * (float)(1.5708 - v35)));
  v41 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
  sub_10012C668(v41, (uint64_t)&v52, a6 + (float)(v37 * (float)((float)(a6 * 0.05) - a6)), v39, v40);

  result = v53;
  v43 = v55;
  v44 = v56;
  v45 = *(int *)(v21 + 40);
  v46 = *(float *)(v28 + v45) * 32.0;
  v47 = *(float *)(v24 + v45) * 10.0;
  v48 = *(float *)(v27 + v45) * 10.0;
  v49 = *(_DWORD *)(v20 + v45);
  v50 = v54;
  *(_QWORD *)a4 = v52;
  *(float *)(a4 + 8) = result;
  *(float *)(a4 + 12) = (float)(a6 - (float)(a6 * 0.05)) * v37;
  *(_QWORD *)(a4 + 16) = v50;
  *(float *)(a4 + 24) = v46;
  *(float *)(a4 + 28) = v46;
  *(_DWORD *)(a4 + 32) = v43;
  *(float *)(a4 + 36) = v47;
  *(float *)(a4 + 40) = v48;
  *(_OWORD *)(a4 + 48) = v44;
  *(_DWORD *)(a4 + 64) = v49;
  return result;
}

double sub_10001268C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, float a7@<S1>, double a8@<D2>, double a9@<D3>, double a10@<D4>, double a11@<D5>)
{
  float v21;
  uint64_t v22;
  uint64_t v23;
  float v24;
  uint64_t v25;
  float v26;
  float v27;
  id v28;
  int v29;
  float v30;
  char v31;
  char v32;
  __n128 v33;
  __n128 v34;
  double result;
  __int128 v36;
  __int128 v37;
  uint64_t v39;
  int v40;
  __int128 v41;
  __n128 v42[4];
  __int128 v43;
  __int128 v44;
  char v45;
  char v46;

  if (*(unsigned __int8 *)(a2 + 448) - 3 >= 2)
    v21 = 1.0;
  else
    v21 = 0.0;
  v22 = a1 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_satelliteVisibleSpring;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_satelliteVisibleSpring, &v39, 33, 0);
  v23 = sub_100003DB8(&qword_100316050);
  *(float *)(v22 + *(int *)(v23 + 36)) = v21;
  sub_1000113BC(a6);
  swift_endAccess(&v39);
  if ((*(_BYTE *)(a2 + 369) & 1) != 0)
    v24 = 1.0;
  else
    v24 = 0.0;
  v25 = a1 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_satelliteConeVisibleSpring;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_satelliteConeVisibleSpring, &v39, 33, 0);
  *(float *)(v25 + *(int *)(v23 + 36)) = v24;
  sub_1000113BC(a6);
  swift_endAccess(&v39);
  v27 = *(double *)(a3 + 104);
  v28 = objc_msgSend((id)objc_opt_self(UIColor), "whiteColor");
  v26 = a8;
  sub_1001A13F8(v28, (uint64_t)&v39, a7, v26, v27);

  v29 = v40;
  v37 = v41;
  v30 = *(float *)(v22 + *(int *)(v23 + 40)) * (float)((float)(*(float *)(v25 + *(int *)(v23 + 40)) * 0.6) + 0.4);
  sub_1000128A8(a4, a1, a2, v42, a9, a10, a11);
  v31 = v45;
  v32 = v46;
  *(_QWORD *)a5 = v39;
  *(_DWORD *)(a5 + 8) = v29;
  *(_OWORD *)(a5 + 16) = v37;
  *(float *)(a5 + 32) = v30;
  v33 = v42[1];
  *(__n128 *)(a5 + 48) = v42[0];
  *(__n128 *)(a5 + 64) = v33;
  v34 = v42[3];
  *(__n128 *)(a5 + 80) = v42[2];
  *(__n128 *)(a5 + 96) = v34;
  result = *(double *)&v43;
  v36 = v44;
  *(_OWORD *)(a5 + 112) = v43;
  *(_OWORD *)(a5 + 128) = v36;
  *(_BYTE *)(a5 + 144) = v31;
  *(_BYTE *)(a5 + 145) = v32;
  return result;
}

__n128 sub_1000128A8@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, __n128 *a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>)
{
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18;
  float v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  float v27;
  int v28;
  float v29;
  float v30;
  __n128 v31;
  __n128 result;
  __n128 v33;
  unint64_t v34;
  unint64_t v35;
  _BYTE v36[24];
  char v37[24];
  char v38[24];
  unsigned int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;

  v14 = (void *)objc_opt_self(UIColor);
  v15 = objc_msgSend(v14, "cyanColor");
  v16 = objc_msgSend(v15, "colorWithAlphaComponent:", 0.05);

  v17 = objc_msgSend(v14, "cyanColor");
  v18 = objc_msgSend(v17, "colorWithAlphaComponent:", 0.4);

  v19 = *(float *)(a1 + 32);
  v20 = v16;
  sub_1001A1680(v20, (uint64_t)&v39, v19, a5, a6);

  v34 = v39;
  v22 = v40;
  v21 = v41;
  v23 = v42;
  v35 = v43;
  v24 = a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_satelliteVisibleSpring;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_satelliteVisibleSpring, v38, 0, 0);
  v25 = sub_100003DB8(&qword_100316050);
  LODWORD(a6) = *(_DWORD *)(v24 + *(int *)(v25 + 40));
  v26 = a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_satelliteConeVisibleSpring;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_satelliteConeVisibleSpring, v37, 0, 0);
  v27 = *(float *)&a6 * *(float *)(v26 + *(int *)(v25 + 40));
  LOBYTE(a3) = *(_BYTE *)(a3 + 369) & 1;
  swift_beginAccess(a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_satelliteWaveLoop, v36, 33, 0);
  sub_100159124(a3, a7);
  LODWORD(a7) = v28;
  swift_endAccess(v36);
  v29 = fabsf(sqrtf(*(float *)&a7));
  if (*(float *)&a7 == -INFINITY)
    v29 = INFINITY;
  v30 = sub_1001B8B20(v18, v29);
  v33 = v31;

  a4->n128_u64[0] = v34;
  a4->n128_u64[1] = v22;
  a4[1].n128_u64[0] = v21;
  a4[1].n128_u64[1] = 0;
  a4[2].n128_u64[0] = v23;
  a4[2].n128_u64[1] = v35;
  a4[3].n128_u64[0] = LODWORD(v27);
  a4[3].n128_u64[1] = 0;
  a4[4].n128_u64[0] = LODWORD(v30);
  a4[4].n128_u64[1] = 0;
  result = v33;
  a4[5] = v33;
  a4[6].n128_u16[0] = 0;
  return result;
}

uint64_t ConnectionAssistantDisplayState.deinit()
{
  uint64_t v0;

  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_offsetSpring, &qword_100316048);
  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSpring, &qword_100316048);
  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSnapSpring, &qword_100316048);
  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_hasCoordinateSpring, &qword_100316048);
  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_connectingSpring, &qword_100316048);
  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_completeSpring, &qword_100316048);
  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_inConnectionConeSpring, &qword_100316048);
  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_coneVisibleSpring, &qword_100316048);
  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_arrowVisibleSpring, &qword_100316050);
  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_arrowLeftTipVisibleSpring, &qword_100316050);
  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_arrowRightTipVisibleSpring, &qword_100316050);
  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_arrowTurnAroundSpring, &qword_100316050);
  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_satelliteVisibleSpring, &qword_100316050);
  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_satelliteConeVisibleSpring, &qword_100316050);
  return v0;
}

uint64_t ConnectionAssistantDisplayState.__deallocating_deinit()
{
  uint64_t v0;

  ConnectionAssistantDisplayState.deinit();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100012C44()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_offsetSpring;
  v2 = (int *)sub_100003DB8(&qword_100316048);
  *(_QWORD *)(v1 + v2[9]) = 0;
  *(_QWORD *)(v1 + v2[10]) = 0;
  *(_QWORD *)(v1 + v2[11]) = 0;
  Spring.init(response:dampingRatio:)(0.2, 3.0);
  v3 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSpring;
  *(_QWORD *)(v3 + v2[9]) = 0;
  *(_QWORD *)(v3 + v2[10]) = 0;
  *(_QWORD *)(v3 + v2[11]) = 0;
  Spring.init(response:dampingRatio:)(1.0, 1.0);
  v4 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_targetRelativeAngleSnapSpring;
  *(_QWORD *)(v4 + v2[9]) = 0;
  *(_QWORD *)(v4 + v2[10]) = 0;
  *(_QWORD *)(v4 + v2[11]) = 0;
  Spring.init(response:dampingRatio:)(1.0, 1.0);
  v5 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_hasCoordinateSpring;
  *(_QWORD *)(v5 + v2[9]) = 0;
  *(_QWORD *)(v5 + v2[10]) = 0;
  *(_QWORD *)(v5 + v2[11]) = 0;
  Spring.init(response:dampingRatio:)(5.0, 1.0);
  v6 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_connectingSpring;
  *(_QWORD *)(v6 + v2[9]) = 0;
  *(_QWORD *)(v6 + v2[10]) = 0;
  *(_QWORD *)(v6 + v2[11]) = 0;
  Spring.init(response:dampingRatio:)(1.0, 1.0);
  v7 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_completeSpring;
  *(_QWORD *)(v7 + v2[9]) = 0;
  *(_QWORD *)(v7 + v2[10]) = 0;
  *(_QWORD *)(v7 + v2[11]) = 0;
  Spring.init(response:dampingRatio:)(1.0, 1.0);
  v8 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_inConnectionConeSpring;
  *(_QWORD *)(v8 + v2[9]) = 0;
  *(_QWORD *)(v8 + v2[10]) = 0;
  *(_QWORD *)(v8 + v2[11]) = 0;
  Spring.init(response:dampingRatio:)(2.0, 1.0);
  v9 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_coneVisibleSpring;
  *(_QWORD *)(v9 + v2[9]) = 0;
  *(_QWORD *)(v9 + v2[10]) = 0;
  *(_QWORD *)(v9 + v2[11]) = 0;
  Spring.init(response:dampingRatio:)(2.0, 1.0);
  v10 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_arrowVisibleSpring;
  v11 = (int *)sub_100003DB8(&qword_100316050);
  *(_DWORD *)(v10 + v11[9]) = 0;
  *(_DWORD *)(v10 + v11[10]) = 0;
  *(_DWORD *)(v10 + v11[11]) = 0;
  Spring.init(response:dampingRatio:)(0.5, 1.0);
  v12 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_arrowLeftTipVisibleSpring;
  *(_DWORD *)(v12 + v11[9]) = 0;
  *(_DWORD *)(v12 + v11[10]) = 0;
  *(_DWORD *)(v12 + v11[11]) = 0;
  Spring.init(response:dampingRatio:)(0.5, 1.0);
  v13 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_arrowRightTipVisibleSpring;
  *(_DWORD *)(v13 + v11[9]) = 0;
  *(_DWORD *)(v13 + v11[10]) = 0;
  *(_DWORD *)(v13 + v11[11]) = 0;
  Spring.init(response:dampingRatio:)(0.5, 1.0);
  v14 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_arrowTurnAroundSpring;
  *(_DWORD *)(v14 + v11[9]) = 0;
  *(_DWORD *)(v14 + v11[10]) = 0;
  *(_DWORD *)(v14 + v11[11]) = 0;
  Spring.init(response:dampingRatio:)(0.5, 1.0);
  v15 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_satelliteVisibleSpring;
  *(_DWORD *)(v15 + v11[9]) = 0;
  *(_DWORD *)(v15 + v11[10]) = 0;
  *(_DWORD *)(v15 + v11[11]) = 0;
  Spring.init(response:dampingRatio:)(0.5, 1.0);
  v16 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_satelliteConeVisibleSpring;
  *(_DWORD *)(v16 + v11[9]) = 0;
  *(_DWORD *)(v16 + v11[10]) = 0;
  *(_DWORD *)(v16 + v11[11]) = 0;
  Spring.init(response:dampingRatio:)(0.5, 1.0);
  v17 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_noLocationLoop;
  *(_DWORD *)v17 = 0;
  *(_QWORD *)(v17 + 16) = 0;
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 8) = 0x404E000000000000;
  *(_BYTE *)(v17 + 32) = 1;
  *(_QWORD *)(v17 + 40) = 0;
  *(_BYTE *)(v17 + 48) = 1;
  *(_DWORD *)(v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_lastNoLocationValue) = 0;
  v18 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_conePulsingLoop;
  *(_DWORD *)v18 = 1065353216;
  *(_QWORD *)(v18 + 8) = 0x3FF0000000000000;
  *(_QWORD *)(v18 + 16) = 0;
  *(_QWORD *)(v18 + 24) = 0;
  *(_BYTE *)(v18 + 32) = 1;
  *(_QWORD *)(v18 + 40) = 0;
  *(_BYTE *)(v18 + 48) = 1;
  v19 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_locationDotLoop;
  *(_DWORD *)v19 = 0;
  *(_QWORD *)(v19 + 8) = 0x4008000000000000;
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = 0;
  *(_BYTE *)(v19 + 32) = 1;
  *(_QWORD *)(v19 + 40) = 0;
  *(_BYTE *)(v19 + 48) = 1;
  v20 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_dotWaveLoop;
  *(_DWORD *)v20 = 0;
  *(_OWORD *)(v20 + 8) = xmmword_10024BC60;
  *(_QWORD *)(v20 + 24) = 0;
  *(_BYTE *)(v20 + 32) = 1;
  *(_QWORD *)(v20 + 40) = 0;
  *(_BYTE *)(v20 + 48) = 1;
  v21 = v0 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_satelliteWaveLoop;
  *(_DWORD *)v21 = 0;
  *(_OWORD *)(v21 + 8) = xmmword_10024BC70;
  *(_QWORD *)(v21 + 24) = 0;
  *(_BYTE *)(v21 + 32) = 1;
  *(_QWORD *)(v21 + 40) = 0;
  *(_BYTE *)(v21 + 48) = 1;
  return v0;
}

uint64_t _s8SOSBuddy31ConnectionAssistantDisplayStateC13EarthDiameterV23__derived_struct_equalsySbAE_AEtFZ_0(uint64_t a1, uint64_t a2)
{
  double v4;
  uint64_t result;
  double v7;
  int v8;
  int v9;
  double v10;
  double v11;
  double v12;
  int v13;
  int v14;
  uint64_t v15[2];
  uint64_t v16[2];
  uint64_t v17[2];
  uint64_t v18[2];
  uint64_t v19[2];
  uint64_t v20[2];
  uint64_t v21[2];
  uint64_t v22[2];
  uint64_t v23[2];
  uint64_t v24[2];
  double v25;
  char v26;
  double v27;
  char v28;
  double v29;
  char v30;
  double v31;
  char v32;
  double v33;
  char v34;
  double v35;
  char v36;
  double v37;
  char v38;
  double v39;
  char v40;
  double v41;
  char v42;
  double v43;
  char v44;

  sub_100014B84((uint64_t *)a1, (uint64_t)v24);
  sub_100014B84((uint64_t *)a2, (uint64_t)v23);
  sub_100014B84(v24, (uint64_t)&v25);
  v4 = v25;
  if ((v26 & 1) != 0)
  {
    sub_100014B84(v23, (uint64_t)&v27);
    if (v28 != 1 || v4 != v27)
      return 0;
LABEL_9:
    sub_100014B84((uint64_t *)(a1 + 16), (uint64_t)v22);
    sub_100014B84((uint64_t *)(a2 + 16), (uint64_t)v21);
    sub_100014B84(v22, (uint64_t)&v29);
    v7 = v29;
    if ((v30 & 1) != 0)
    {
      sub_100014B84(v21, (uint64_t)&v31);
      result = 0;
      if (v32 != 1)
        return result;
    }
    else
    {
      sub_100014B84(v21, (uint64_t)&v31);
      result = 0;
      if ((v32 & 1) != 0)
        return result;
    }
    if (v7 != v31)
      return result;
    v8 = *(unsigned __int8 *)(a1 + 40);
    v9 = *(unsigned __int8 *)(a2 + 40);
    if (v8 == 255)
    {
      if (v9 != 255)
        return 0;
    }
    else
    {
      if (v9 == 255)
        return 0;
      if ((v8 & 1) != 0)
      {
        if ((v9 & 1) == 0)
          return 0;
      }
      else if ((v9 & 1) != 0)
      {
        return 0;
      }
      if (*(double *)(a1 + 32) != *(double *)(a2 + 32))
        return 0;
    }
    sub_100014B84((uint64_t *)(a1 + 48), (uint64_t)v20);
    sub_100014B84((uint64_t *)(a2 + 48), (uint64_t)v19);
    sub_100014B84(v20, (uint64_t)&v33);
    v10 = v33;
    if ((v34 & 1) != 0)
    {
      sub_100014B84(v19, (uint64_t)&v35);
      result = 0;
      if (v36 != 1)
        return result;
    }
    else
    {
      sub_100014B84(v19, (uint64_t)&v35);
      result = 0;
      if ((v36 & 1) != 0)
        return result;
    }
    if (v10 != v35)
      return result;
    sub_100014B84((uint64_t *)(a1 + 64), (uint64_t)v18);
    sub_100014B84((uint64_t *)(a2 + 64), (uint64_t)v17);
    sub_100014B84(v18, (uint64_t)&v37);
    v11 = v37;
    if ((v38 & 1) != 0)
    {
      sub_100014B84(v17, (uint64_t)&v39);
      result = 0;
      if (v40 != 1)
        return result;
    }
    else
    {
      sub_100014B84(v17, (uint64_t)&v39);
      result = 0;
      if ((v40 & 1) != 0)
        return result;
    }
    if (v11 != v39)
      return result;
    sub_100014B84((uint64_t *)(a1 + 80), (uint64_t)v16);
    sub_100014B84((uint64_t *)(a2 + 80), (uint64_t)v15);
    sub_100014B84(v16, (uint64_t)&v41);
    v12 = v41;
    if ((v42 & 1) != 0)
    {
      sub_100014B84(v15, (uint64_t)&v43);
      result = 0;
      if (v44 != 1)
        return result;
    }
    else
    {
      sub_100014B84(v15, (uint64_t)&v43);
      result = 0;
      if ((v44 & 1) != 0)
        return result;
    }
    if (v12 != v43)
      return result;
    v13 = *(unsigned __int8 *)(a1 + 104);
    v14 = *(unsigned __int8 *)(a2 + 104);
    if (v13 == 255)
    {
      if (v14 == 255)
        return 1;
    }
    else if (v14 != 255)
    {
      if ((v13 & 1) != 0)
      {
        if ((v14 & 1) == 0)
          return 0;
      }
      else if ((v14 & 1) != 0)
      {
        return 0;
      }
      if (*(double *)(a1 + 96) == *(double *)(a2 + 96))
        return 1;
    }
    return 0;
  }
  sub_100014B84(v23, (uint64_t)&v27);
  result = 0;
  if ((v28 & 1) == 0 && v4 == v27)
    goto LABEL_9;
  return result;
}

BOOL _s8SOSBuddy31ConnectionAssistantDisplayStateC7MetricsV0B6RadiusV23__derived_struct_equalsySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  double v4;
  _BOOL8 result;
  double v6;
  uint64_t v7[2];
  uint64_t v8[2];
  uint64_t v9[2];
  uint64_t v10[2];
  double v11;
  char v12;
  double v13;
  char v14;
  double v15;
  char v16;
  double v17;
  char v18;

  sub_100014B84((uint64_t *)a1, (uint64_t)v10);
  sub_100014B84((uint64_t *)a2, (uint64_t)v9);
  sub_100014B84(v10, (uint64_t)&v11);
  if (v12)
  {
    if (v12 == 1)
    {
      v4 = v11;
      sub_100014B84(v9, (uint64_t)&v13);
      result = 0;
      if (v14 != 1)
        return result;
    }
    else
    {
      v4 = v11;
      sub_100014B84(v9, (uint64_t)&v13);
      result = 0;
      if (v14 != 2)
        return result;
    }
  }
  else
  {
    v4 = v11;
    sub_100014B84(v9, (uint64_t)&v13);
    result = 0;
    if (v14)
      return result;
  }
  if (v4 != v13)
    return result;
  sub_100014B84((uint64_t *)(a1 + 16), (uint64_t)v8);
  sub_100014B84((uint64_t *)(a2 + 16), (uint64_t)v7);
  sub_100014B84(v8, (uint64_t)&v15);
  if (v16)
  {
    if (v16 == 1)
    {
      v6 = v15;
      sub_100014B84(v7, (uint64_t)&v17);
      result = 0;
      if (v18 != 1)
        return result;
    }
    else
    {
      v6 = v15;
      sub_100014B84(v7, (uint64_t)&v17);
      result = 0;
      if (v18 != 2)
        return result;
    }
  }
  else
  {
    v6 = v15;
    sub_100014B84(v7, (uint64_t)&v17);
    result = 0;
    if (v18)
      return result;
  }
  if (v6 == v17)
    return *(double *)(a1 + 32) == *(double *)(a2 + 32);
  return result;
}

BOOL _s8SOSBuddy31ConnectionAssistantDisplayStateC7MetricsV16CoordinateOffsetV23__derived_struct_equalsySbAG_AGtFZ_0(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (*(double *)a1 != *(double *)a2)
    return 0;
  v2 = *(_BYTE *)(a2 + 16);
  if ((*(_BYTE *)(a1 + 16) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 16))
      return 0;
  }
  else
  {
    if (*(double *)(a1 + 8) != *(double *)(a2 + 8))
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  if (*(double *)(a1 + 24) != *(double *)(a2 + 24)
    || *(double *)(a1 + 32) != *(double *)(a2 + 32)
    || *(double *)(a1 + 40) != *(double *)(a2 + 40))
  {
    return 0;
  }
  v3 = *(_BYTE *)(a2 + 56);
  if ((*(_BYTE *)(a1 + 56) & 1) == 0)
  {
    if (*(double *)(a1 + 48) != *(double *)(a2 + 48))
      v3 = 1;
    return (v3 & 1) == 0;
  }
  return (*(_BYTE *)(a2 + 56) & 1) != 0;
}

BOOL _s8SOSBuddy31ConnectionAssistantDisplayStateC7MetricsV23__derived_struct_equalsySbAE_AEtFZ_0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  double v4;
  double v5;
  double v6;
  double v7;
  unsigned __int8 v8;
  _BOOL8 result;
  __int128 v10;
  __int128 v11;
  double v12;
  double v13;
  __int128 v14;
  __int128 v15;
  double v16;
  uint64_t v17[2];
  uint64_t v18[2];
  __int128 v19;
  __int128 v20;
  double v21;
  uint64_t v22[2];
  uint64_t v23[2];
  double v24;
  char v25;
  double v26;
  char v27;
  double v28;
  char v29;
  double v30;
  char v31;

  if (*a1 != *a2 || *((double *)a1 + 1) != *((double *)a2 + 1))
    return 0;
  v5 = *((double *)a1 + 4);
  v4 = *((double *)a1 + 5);
  v7 = *((double *)a1 + 6);
  v6 = *((double *)a1 + 7);
  v8 = a1[64];
  if ((a1[24] & 1) != 0)
  {
    result = 0;
    if ((a2[24] & 1) == 0)
      return result;
LABEL_8:
    if (v5 != *((double *)a2 + 4) || v4 != *((double *)a2 + 5) || v7 != *((double *)a2 + 6))
      return result;
    if ((v8 & 1) != 0)
    {
      if ((a2[64] & 1) == 0)
        return 0;
    }
    else
    {
      result = 0;
      if ((a2[64] & 1) != 0 || v6 != *((double *)a2 + 7))
        return result;
    }
    v10 = *(_OWORD *)(a1 + 88);
    v19 = *(_OWORD *)(a1 + 72);
    v20 = v10;
    v21 = *((double *)a1 + 13);
    v11 = *(_OWORD *)(a2 + 88);
    v14 = *(_OWORD *)(a2 + 72);
    v15 = v11;
    v16 = *((double *)a2 + 13);
    sub_100014B84((uint64_t *)&v19, (uint64_t)v23);
    sub_100014B84((uint64_t *)&v14, (uint64_t)v18);
    sub_100014B84(v23, (uint64_t)&v24);
    if (v25)
    {
      if (v25 == 1)
      {
        v12 = v24;
        sub_100014B84(v18, (uint64_t)&v28);
        result = 0;
        if (v29 != 1)
          return result;
      }
      else
      {
        v12 = v24;
        sub_100014B84(v18, (uint64_t)&v28);
        result = 0;
        if (v29 != 2)
          return result;
      }
    }
    else
    {
      v12 = v24;
      sub_100014B84(v18, (uint64_t)&v28);
      result = 0;
      if (v29)
        return result;
    }
    if (v12 != v28)
      return result;
    sub_100014B84((uint64_t *)&v20, (uint64_t)v22);
    sub_100014B84((uint64_t *)&v15, (uint64_t)v17);
    sub_100014B84(v22, (uint64_t)&v26);
    if (v27)
    {
      if (v27 == 1)
      {
        v13 = v26;
        sub_100014B84(v17, (uint64_t)&v30);
        result = 0;
        if (v31 != 1)
          return result;
      }
      else
      {
        v13 = v26;
        sub_100014B84(v17, (uint64_t)&v30);
        result = 0;
        if (v31 != 2)
          return result;
      }
    }
    else
    {
      v13 = v26;
      sub_100014B84(v17, (uint64_t)&v30);
      result = 0;
      if (v31)
        return result;
    }
    if (v13 != v30)
      return result;
    if (v21 == v16)
      return *((double *)a1 + 14) == *((double *)a2 + 14);
    return 0;
  }
  result = 0;
  if ((a2[24] & 1) == 0 && *((double *)a1 + 2) == *((double *)a2 + 2))
    goto LABEL_8;
  return result;
}

unint64_t sub_1000137A4()
{
  unint64_t result;

  result = qword_1003170F8;
  if (!qword_1003170F8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConnectionAssistantDisplayState.Metrics.RenderingStyle, &type metadata for ConnectionAssistantDisplayState.Metrics.RenderingStyle);
    atomic_store(result, (unint64_t *)&qword_1003170F8);
  }
  return result;
}

unint64_t sub_1000137EC()
{
  unint64_t result;

  result = qword_100317100;
  if (!qword_100317100)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConnectionAssistantDisplayState.Target.State, &type metadata for ConnectionAssistantDisplayState.Target.State);
    atomic_store(result, (unint64_t *)&qword_100317100);
  }
  return result;
}

uint64_t sub_100013830()
{
  return type metadata accessor for ConnectionAssistantDisplayState(0);
}

uint64_t type metadata accessor for ConnectionAssistantDisplayState(uint64_t a1)
{
  uint64_t result;

  result = qword_100317160;
  if (!qword_100317160)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ConnectionAssistantDisplayState);
  return result;
}

void sub_100013874(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD v8[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  char *v16;
  const char *v17;
  const char *v18;
  const char *v19;
  const char *v20;

  sub_10001392C(319);
  if (v3 <= 0x3F)
  {
    v8[0] = *(_QWORD *)(v2 - 8) + 64;
    v8[1] = v8[0];
    v8[2] = v8[0];
    v8[3] = v8[0];
    v8[4] = v8[0];
    v8[5] = v8[0];
    v8[6] = v8[0];
    v8[7] = v8[0];
    sub_1000139C8(319, v3, v4, v5);
    if (v7 <= 0x3F)
    {
      v9 = *(_QWORD *)(v6 - 8) + 64;
      v10 = v9;
      v11 = v9;
      v12 = v9;
      v13 = v9;
      v14 = v9;
      v15 = "1";
      v16 = (char *)&value witness table for Builtin.Int32 + 64;
      v17 = "1";
      v18 = "1";
      v19 = "1";
      v20 = "1";
      swift_updateClassMetadata2(a1, 256, 20, v8, a1 + 80);
    }
  }
}

void sub_10001392C(uint64_t a1)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  if (!qword_100317170)
  {
    v2 = sub_100013984();
    v4 = type metadata accessor for Spring(a1, (uint64_t)&type metadata for CGFloat, v2, v3);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_100317170);
  }
}

unint64_t sub_100013984()
{
  unint64_t result;

  result = qword_100317178;
  if (!qword_100317178)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for CGFloat, &type metadata for CGFloat);
    atomic_store(result, (unint64_t *)&qword_100317178);
  }
  return result;
}

void sub_1000139C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;

  if (!qword_100317180)
  {
    v4 = type metadata accessor for Spring(0, (uint64_t)&type metadata for Float, (uint64_t)&protocol witness table for Float, a4);
    if (!v5)
      atomic_store(v4, (unint64_t *)&qword_100317180);
  }
}

__n128 initializeWithCopy for ConnectionAssistantDisplayState.Metrics(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantDisplayState.Metrics(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && a1[120])
    return (*(_DWORD *)a1 + 255);
  v3 = *a1;
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantDisplayState.Metrics(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 120) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 120) = 0;
    if (a2)
      *(_BYTE *)result = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantDisplayState.Metrics()
{
  return &type metadata for ConnectionAssistantDisplayState.Metrics;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantDisplayState.Metrics.RenderingStyle(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100013B50 + 4 * byte_10024D5A5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100013B84 + 4 * byte_10024D5A0[v4]))();
}

uint64_t sub_100013B84(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100013B8C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100013B94);
  return result;
}

uint64_t sub_100013BA0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100013BA8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_100013BAC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100013BB4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantDisplayState.Metrics.RenderingStyle()
{
  return &type metadata for ConnectionAssistantDisplayState.Metrics.RenderingStyle;
}

__n128 initializeWithCopy for ConnectionAssistantDisplayState.Metrics.CoordinateOffset(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantDisplayState.Metrics.CoordinateOffset(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantDisplayState.Metrics.CoordinateOffset(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 57) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantDisplayState.Metrics.CoordinateOffset()
{
  return &type metadata for ConnectionAssistantDisplayState.Metrics.CoordinateOffset;
}

__n128 initializeWithTake for QuestionnaireNavigationPage(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantDisplayState.Metrics.ConnectionRadius(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 40))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantDisplayState.Metrics.ConnectionRadius(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 40) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantDisplayState.Metrics.ConnectionRadius()
{
  return &type metadata for ConnectionAssistantDisplayState.Metrics.ConnectionRadius;
}

uint64_t initializeWithTake for Question.OptionsPresentationOrderItem(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantDisplayState.Metrics.ConnectionRadius.Value(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantDisplayState.Metrics.ConnectionRadius.Value(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_100013DB0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_100013DB8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantDisplayState.Metrics.ConnectionRadius.Value()
{
  return &type metadata for ConnectionAssistantDisplayState.Metrics.ConnectionRadius.Value;
}

__n128 initializeWithCopy for ConnectionAssistantDisplayState.EarthDiameter(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_OWORD *)(a1 + 89) = *(__int128 *)((char *)a2 + 89);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantDisplayState.EarthDiameter(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 105))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantDisplayState.EarthDiameter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 105) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantDisplayState.EarthDiameter()
{
  return &type metadata for ConnectionAssistantDisplayState.EarthDiameter;
}

uint64_t getEnumTagSinglePayload for Question.OptionsPresentationOrderItem(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for Question.OptionsPresentationOrderItem(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = -(char)a2;
  }
  return result;
}

uint64_t sub_100013F40(uint64_t result, char a2)
{
  *(_BYTE *)(result + 8) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantDisplayState.EarthDiameter.Value()
{
  return &type metadata for ConnectionAssistantDisplayState.EarthDiameter.Value;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantDisplayState.Target(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 4;
  v5 = v3 - 4;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantDisplayState.Target(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 253;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantDisplayState.Target()
{
  return &type metadata for ConnectionAssistantDisplayState.Target;
}

uint64_t getEnumTagSinglePayload for Question.QuestionType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantDisplayState.Target.State(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1000140D0 + 4 * byte_10024D5AF[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100014104 + 4 * byte_10024D5AA[v4]))();
}

uint64_t sub_100014104(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001410C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100014114);
  return result;
}

uint64_t sub_100014120(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100014128);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10001412C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100014134(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_100014140(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantDisplayState.Target.State()
{
  return &type metadata for ConnectionAssistantDisplayState.Target.State;
}

void destroy for ConnectionAssistantDisplayState.ConeState(uint64_t a1)
{

}

uint64_t initializeWithCopy for ConnectionAssistantDisplayState.ConeState(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for ConnectionAssistantDisplayState.ConeState(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ConnectionAssistantDisplayState.ConeState(uint64_t a1, uint64_t a2)
{
  void *v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for AppEvents.AppPageEvent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppEvents.AppPageEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantDisplayState.ConeState()
{
  return &type metadata for ConnectionAssistantDisplayState.ConeState;
}

void *initializeWithCopy for ConnectionAssistantDisplayState.Result(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x3A1uLL);
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantDisplayState.Result(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 929))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 928);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantDisplayState.Result(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 920) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_BYTE *)(result + 928) = 0;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 929) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 929) = 0;
    if (a2)
      *(_BYTE *)(result + 928) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantDisplayState.Result()
{
  return &type metadata for ConnectionAssistantDisplayState.Result;
}

__n128 initializeWithCopy for ConnectionAssistantDisplayState.TopInset.RenderingStyle(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantDisplayState.TopInset()
{
  return &type metadata for ConnectionAssistantDisplayState.TopInset;
}

uint64_t sub_1000144D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100316048);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100014518(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  double v11;
  float v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v16;

  v2 = sub_100003DB8(&qword_100316048);
  __chkstk_darwin(v2, v3);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 16);
  if (!v7)
  {
LABEL_14:
    v13 = 0;
    v14 = 1;
    return v13 | ((unint64_t)v14 << 32);
  }
  v8 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v9 = *(_QWORD *)(v4 + 72);
  swift_bridgeObjectRetain(a1);
  v10 = 0.0;
  do
  {
    sub_1000144D0(v8, (uint64_t)v6);
    v11 = vabdd_f64(*(double *)&v6[*(int *)(v2 + 40)], *(double *)&v6[*(int *)(v2 + 36)]);
    if (v11 > 0.005)
    {
      sub_100007FF0((uint64_t)v6, &qword_100316048);
      swift_bridgeObjectRelease(a1);
      goto LABEL_14;
    }
    sub_100007FF0((uint64_t)v6, &qword_100316048);
    if (v11 <= 0.0005)
    {
      v12 = 5.0;
      if (v10 >= 5.0)
        goto LABEL_3;
    }
    else
    {
      v12 = 20.0;
      if (v10 >= 20.0)
        goto LABEL_3;
    }
    v10 = v12;
LABEL_3:
    v8 += v9;
    --v7;
  }
  while (v7);
  swift_bridgeObjectRelease(a1);
  v13 = LODWORD(v10);
  if (v10 > 0.0)
  {
    v14 = 0;
  }
  else
  {
    v13 = 0;
    v14 = 1;
  }
  return v13 | ((unint64_t)v14 << 32);
}

unint64_t sub_100014698(uint64_t a1)
{
  uint64_t v1;
  float *v2;
  float v3;
  float v4;
  unsigned __int8 v5;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = (float *)(a1 + 36);
    v3 = 0.0;
    while (1)
    {
      v4 = *(v2 - 1);
      if ((*(_BYTE *)v2 & 1) != 0)
        break;
      if (v3 < v4)
        v3 = *(v2 - 1);
      v2 += 2;
      if (!--v1)
      {
        if (v3 <= 0.0)
          goto LABEL_9;
        v5 = 0;
        v4 = v3;
        return LODWORD(v4) | ((unint64_t)v5 << 32);
      }
    }
  }
  else
  {
LABEL_9:
    v4 = 0.0;
  }
  v5 = 1;
  return LODWORD(v4) | ((unint64_t)v5 << 32);
}

double sub_100014704(float32x4_t a1, float32x4_t a2, float a3)
{
  uint64_t v5;
  BOOL v6;
  float v7;
  float v8;
  float32x4_t v9;
  float v10;
  float32x4_t v11;
  int32x4_t v12;
  float32x2_t v13;
  float32x2_t v14;
  __float2 v15;
  float v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float32x4_t v21;

  v5 = 0;
  while (1)
  {
    v20 = a1;
    v7 = *(float *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
    v21 = a2;
    v8 = *(float *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v5 & 3)));
    v6 = v7 == v8;
    if (v5 == 2)
      break;
    while (1)
    {
      ++v5;
      if (v6)
        break;
      if (v5 == 2)
        goto LABEL_8;
      v6 = 0;
    }
  }
  if (v7 != v8)
  {
LABEL_8:
    v9 = vmulq_f32(a1, a2);
    v18 = a2;
    v19 = a1;
    LODWORD(v17) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).u32[0];
    v10 = acosf(fminf(fmaxf(v17, -1.0), 1.0));
    v11.i32[3] = v19.i32[3];
    *(float32x2_t *)v11.f32 = vsub_f32(*(float32x2_t *)v18.f32, vmul_n_f32(*(float32x2_t *)v19.f32, v17));
    v11.f32[2] = v18.f32[2] - vmuls_lane_f32(v17, v19, 2);
    v12 = (int32x4_t)vmulq_f32(v11, v11);
    v12.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v12, 2), vadd_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v12.i8, 1))).u32[0];
    v13 = vrsqrte_f32((float32x2_t)v12.u32[0]);
    v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v13, v13)));
    v18.i64[0] = vmulq_n_f32(v11, vmul_f32(v14, vrsqrts_f32((float32x2_t)v12.u32[0], vmul_f32(v14, v14))).f32[0]).u64[0];
    v15 = __sincosf_stret(v10 * a3);
    *(float32x2_t *)a1.f32 = vadd_f32(vmul_n_f32(*(float32x2_t *)v19.f32, v15.__cosval), vmul_n_f32(*(float32x2_t *)v18.f32, v15.__sinval));
  }
  return *(double *)a1.i64;
}

double sub_100014850(double a1, double a2, double a3, double a4, double a5)
{
  float v7;
  float v8;
  float v9;
  __float2 v10;
  __float2 v11;
  float32x4_t v12;
  float v13;
  float v14;
  __float2 v15;
  __float2 v16;
  float32x4_t v17;
  float32x4_t v18;
  float v19;
  float v20;
  float32x4_t v22;
  double v24;

  v7 = a1;
  v8 = -90.0 - a2;
  v9 = (float)(v8 * 3.1416) / 180.0;
  v10 = __sincosf_stret((float)(v7 * -3.1416) / 180.0);
  v11 = __sincosf_stret(v9);
  v12.f32[0] = v10.__cosval * v11.__cosval;
  v12.f32[1] = v10.__cosval * v11.__sinval;
  v12.i64[1] = LODWORD(v10.__sinval);
  v22 = v12;
  v13 = a3;
  v14 = -90.0 - a4;
  *(float *)&a4 = (float)(v14 * 3.1416) / 180.0;
  v15 = __sincosf_stret((float)(v13 * -3.1416) / 180.0);
  v16 = __sincosf_stret(*(float *)&a4);
  v17.f32[0] = v15.__cosval * v16.__cosval;
  v17.f32[1] = v15.__cosval * v16.__sinval;
  v17.i64[1] = LODWORD(v15.__sinval);
  v18 = v17;
  v17.f32[0] = a5;
  v24 = sub_100014704(v22, v18, v17.f32[0]);
  v20 = asinf(v19);
  atan2f(*((float *)&v24 + 1), *(float *)&v24);
  return (float)((float)(v20 / -3.1416) * 180.0);
}

double sub_1000149BC(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  __int128 v9;
  double v10;
  double v11;
  double v12;
  uint64_t v13;
  _BYTE v15[24];
  __int128 v16;
  __int128 v17;
  double v18;
  uint64_t v19[2];
  uint64_t v20[2];
  double v21;
  char v22;
  double v23;
  char v24;

  v18 = *(double *)(a1 + 104);
  v9 = *(_OWORD *)(a1 + 88);
  v16 = *(_OWORD *)(a1 + 72);
  v17 = v9;
  v10 = v18;
  sub_100014B84((uint64_t *)&v17, (uint64_t)v20);
  sub_100014B84(v20, (uint64_t)&v21);
  if (v22)
  {
    if (v22 == 1)
      v11 = a4 - ((a4 - a5 - a3) * v21 + a3);
    else
      v11 = v21 * a5;
  }
  else
  {
    v11 = a4 - (v10 * 0.5 + v21 + a3);
  }
  sub_100014B84((uint64_t *)&v16, (uint64_t)v19);
  sub_100014B84(v19, (uint64_t)&v23);
  if (v24)
  {
    if (v24 == 1)
      v12 = a4 - ((a4 - a5 - a3) * v23 + a3);
    else
      v12 = v23 * a5;
  }
  else
  {
    v12 = a4 - (v10 * 0.5 + v23 + a3);
  }
  v13 = a2 + OBJC_IVAR____TtC8SOSBuddy31ConnectionAssistantDisplayState_inConnectionConeSpring;
  swift_beginAccess(v13, v15, 0, 0);
  return v11 + *(double *)(v13 + *(int *)(sub_100003DB8(&qword_100316048) + 40)) * (v12 - v11);
}

uint64_t sub_100014B2C(uint64_t result)
{
  *(_BYTE *)(result + 146) = 0;
  return result;
}

uint64_t sub_100014B34(uint64_t a1)
{
  id v2;

  v2 = *(id *)(a1 + 360);
  return a1;
}

uint64_t sub_100014B5C(uint64_t a1)
{

  return a1;
}

uint64_t sub_100014B84(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *a1;
  *(_BYTE *)(a2 + 8) = *((_BYTE *)a1 + 8);
  *(_QWORD *)a2 = v2;
  return a2;
}

uint64_t _s8SOSBuddy31ConnectionAssistantDisplayStateC8TopInsetV14RenderingStyleOwet_0(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 1)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t _s8SOSBuddy31ConnectionAssistantDisplayStateC8TopInsetV14RenderingStyleOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_100014C2C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_100014C34(uint64_t result, char a2)
{
  *(_BYTE *)(result + 32) = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantDisplayState.TopInset.RenderingStyle()
{
  return &type metadata for ConnectionAssistantDisplayState.TopInset.RenderingStyle;
}

uint64_t sub_100014C50(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

ValueMetadata *type metadata accessor for ConnectionAssistantDisplayState.TopInset.FullScreenTopInsets()
{
  return &type metadata for ConnectionAssistantDisplayState.TopInset.FullScreenTopInsets;
}

ValueMetadata *type metadata accessor for ConnectionAssistantDisplayState.TopInset.ContentTopInsets()
{
  return &type metadata for ConnectionAssistantDisplayState.TopInset.ContentTopInsets;
}

id sub_100014C88()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  objc_super v21;

  v1 = OBJC_IVAR____TtC8SOSBuddy14TimeZoneSource_timeZoneDidChange;
  v2 = sub_100003DB8(&qword_10032B230);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = v0;
  *(_QWORD *)&v0[v1] = PassthroughSubject.init()();
  *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy14TimeZoneSource__observers] = &_swiftEmptyArrayStorage;

  v21.receiver = v3;
  v21.super_class = (Class)type metadata accessor for TimeZoneSource();
  v4 = objc_msgSendSuper2(&v21, "init");
  v5 = qword_100315820;
  v6 = v4;
  if (v5 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v7 = type metadata accessor for Logger(0);
  sub_10000D744(v7, (uint64_t)qword_10033FD18);
  v8 = v6;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v20 = v12;
    *(_DWORD *)v11 = 136446210;
    v13 = v8;
    v14 = objc_msgSend(v13, "description");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v19 = sub_100172BEC(v15, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "init: %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
  return v8;
}

id sub_100014EF0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  objc_class *v12;
  uint64_t v14;
  uint64_t v15;
  objc_super v16;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD18);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v15 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v14 = sub_100172BEC(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "deinit: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v12 = (objc_class *)type metadata accessor for TimeZoneSource();
  v16.receiver = v2;
  v16.super_class = v12;
  return objc_msgSendSuper2(&v16, "dealloc");
}

uint64_t type metadata accessor for TimeZoneSource()
{
  return objc_opt_self(_TtC8SOSBuddy14TimeZoneSource);
}

uint64_t sub_100015154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  id v14;
  id v15;
  uint64_t v16;
  void *v17;
  id v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD aBlock[5];
  uint64_t v26;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (_QWORD *)((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_1003158D0 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003158D0, sub_1000D98EC);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FF28);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "TimeZoneSource::start", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
  v15 = objc_msgSend((id)objc_opt_self(NSOperationQueue), "mainQueue");
  v16 = swift_allocObject(&unk_1002E4B88, 24, 7);
  swift_unknownObjectWeakInit(v16 + 16, v1);
  aBlock[4] = sub_1000159B4;
  v26 = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001FC2A0;
  aBlock[3] = &unk_1002E4BA0;
  v17 = _Block_copy(aBlock);
  swift_release(v26);
  v18 = objc_msgSend(v14, "addObserverForName:object:queue:usingBlock:", NSSystemTimeZoneDidChangeNotification, 0, v15, v17);
  _Block_release(v17);

  v19 = (_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy14TimeZoneSource__observers);
  v20 = swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy14TimeZoneSource__observers, aBlock, 33, 0);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v20);
  v22 = *(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v21 = *(_QWORD *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v22 >= v21 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1);
  v23 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v22, v18);
  specialized Array._endMutation()(v23);
  return swift_endAccess(aBlock);
}

void sub_100015428(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  void *v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (void *)Strong;
    sub_100015708();

  }
}

void sub_100015478()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE v25[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v25[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_1003158D0 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003158D0, sub_1000D98EC);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FF28);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "TimeZoneSource::stop", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = (uint64_t *)(v1 + OBJC_IVAR____TtC8SOSBuddy14TimeZoneSource__observers);
  swift_beginAccess(v14, v25, 1, 0);
  v15 = *v14;
  if (!((unint64_t)*v14 >> 62))
  {
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*v14);
    if (v16)
      goto LABEL_7;
LABEL_19:
    swift_bridgeObjectRelease(v15);
    v23 = *v14;
    *v14 = (uint64_t)_swiftEmptyArrayStorage;
    swift_bridgeObjectRelease(v23);
    return;
  }
  if (v15 < 0)
    v22 = *v14;
  else
    v22 = v15 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v14);
  v16 = _CocoaArrayWrapper.endIndex.getter(v22);
  if (!v16)
    goto LABEL_19;
LABEL_7:
  v17 = objc_opt_self(NSNotificationCenter);
  if (v16 >= 1)
  {
    v18 = (void *)v17;
    v19 = 0;
    do
    {
      if ((v15 & 0xC000000000000001) != 0)
      {
        v20 = specialized _ArrayBuffer._getElementSlowPath(_:)(v19, v15);
      }
      else
      {
        v20 = *(_QWORD *)(v15 + 8 * v19 + 32);
        swift_unknownObjectRetain(v20);
      }
      ++v19;
      v21 = objc_msgSend(v18, "defaultCenter");
      objc_msgSend(v21, "removeObserver:", v20);
      swift_unknownObjectRelease(v20);

    }
    while (v16 != v19);
    goto LABEL_19;
  }
  __break(1u);
}

uint64_t sub_100015708()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint8_t *v17;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = type metadata accessor for TimeZone(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1003158D0 != -1)
    swift_once(&qword_1003158D0, sub_1000D98EC);
  v6 = type metadata accessor for Logger(0);
  sub_10000D744(v6, (uint64_t)qword_10033FF28);
  v7 = v0;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(12, -1);
    v20 = v2;
    v11 = (uint8_t *)v10;
    v12 = swift_slowAlloc(32, -1);
    v22 = v12;
    *(_DWORD *)v11 = 136446210;
    v19 = v11 + 4;
    static TimeZone.autoupdatingCurrent.getter();
    v13 = sub_100015948();
    v14 = dispatch thunk of CustomStringConvertible.description.getter(v1, v13);
    v16 = v15;
    (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v1);
    v21 = sub_100172BEC(v14, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v19, v11 + 12);

    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Time zone changed to %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    v17 = v11;
    v2 = v20;
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  static TimeZone.autoupdatingCurrent.getter();
  PassthroughSubject.send(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v5, v1);
}

unint64_t sub_100015948()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003174F0;
  if (!qword_1003174F0)
  {
    v1 = type metadata accessor for TimeZone(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for TimeZone, v1);
    atomic_store(result, (unint64_t *)&qword_1003174F0);
  }
  return result;
}

uint64_t sub_100015990()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_1000159B4(uint64_t a1)
{
  uint64_t v1;

  sub_100015428(a1, v1);
}

uint64_t sub_1000159BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000159CC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000159D4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  if (qword_100315880 != -1)
    swift_once(&qword_100315880, sub_1000D9790);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FE38);
  swift_retain(v0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v14 = v7;
    *(_DWORD *)v6 = 136446210;
    v8 = *(_QWORD *)(v1 + 24);
    v9 = *(_QWORD *)(v1 + 32);
    swift_bridgeObjectRetain(v9);
    v13 = sub_100172BEC(v8, v9, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v6 + 4, v6 + 12);
    swift_release(v1);
    swift_bridgeObjectRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Releasing LocationAssertion: '%{public}s'", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

    swift_release(v1);
  }
  Strong = swift_weakLoadStrong(v1 + 16);
  if (Strong)
  {
    v11 = Strong;
    sub_100016978();
    swift_release(v11);
  }
  swift_weakDestroy(v1 + 16);
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 32));
  return v1;
}

uint64_t sub_100015BA8()
{
  uint64_t v0;

  sub_1000159D4();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t sub_100015BC8()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = v0;
  v2 = objc_allocWithZone((Class)type metadata accessor for GeoLocationSource());
  *(_QWORD *)(v1 + 32) = objc_msgSend(v2, "init", swift_retain(v1).n128_f64[0]);
  *(_QWORD *)(v1 + 40) = 0;
  *(_BYTE *)(v1 + 48) = 2;
  *(_QWORD *)(v1 + 56) = 0;
  *(_QWORD *)(v1 + 64) = 0;
  *(_BYTE *)(v1 + 72) = 1;
  *(_QWORD *)(v1 + 80) = objc_msgSend(objc_allocWithZone((Class)NSLock), "init");
  *(_QWORD *)(v1 + 88) = 0;
  swift_release(v1);
  v3 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)(v1 + 16) = PassthroughSubject.init()();
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)(v1 + 24) = PassthroughSubject.init()();
  v4 = qword_100315820;
  swift_retain(v1);
  if (v4 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FD18);
  v7 = swift_retain_n(v1, v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v18 = v1;
    v19 = v11;
    *(_DWORD *)v10 = 136446210;
    v12 = type metadata accessor for GeoLocationModel();
    v13 = swift_retain(v1);
    v14 = String.init<A>(describing:)(&v18, v12, v13);
    v16 = v15;
    v18 = sub_100172BEC(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4, v10 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "init: %{public}s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

    swift_release(v1);
  }
  else
  {

    swift_release_n(v1);
  }
  return v1;
}

void sub_100015E38()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
}

uint64_t sub_100015E5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = swift_retain_n(v0, 2, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v1;
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for GeoLocationModel();
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v9, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "deinit: %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 24));

  swift_release(*(_QWORD *)(v1 + 40));
  return v1;
}

uint64_t sub_100016040()
{
  uint64_t v0;

  sub_100015E5C();
  return swift_deallocClassInstance(v0, 96, 7);
}

uint64_t type metadata accessor for GeoLocationModel()
{
  return objc_opt_self(_TtC8SOSBuddy16GeoLocationModel);
}

void sub_100016080()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  id v14;

  v1 = v0;
  sub_10000D75C();
  v2 = swift_retain(v0);
  v3 = static OS_dispatch_queue.main.getter(v2);
  v4 = sub_100003DB8(&qword_100317758);
  v5 = swift_allocObject(v4, 40, 7);
  swift_weakInit(v5 + 16, 0);
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    sub_100209204((uint64_t)&_swiftEmptyArrayStorage);
  }
  else
  {
    v6 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)(v5 + 32) = v6;
  swift_weakAssign(v5 + 16, v1);
  swift_release(v1);
  *(_QWORD *)(v5 + 24) = v3;
  v7 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource_locationAuthorizationChanged);
  swift_retain(v7);
  v9 = sub_100242070(v8, (uint64_t)sub_1000161F8, 0);
  swift_retain(v9);
  swift_release(v7);
  swift_release(v5);
  v10 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + OBJC_IVAR____TtC8SOSBuddy17GeoLocationSource_locationReceived);
  swift_retain(v10);
  v12 = sub_1002422C8(v11, (uint64_t)sub_100016270, 0);
  swift_retain(v12);
  swift_release(v10);
  swift_release(v9);
  v13 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = v12;
  swift_release(v13);
  v14 = *(id *)(v1 + 32);
  sub_1000A4008();

}

uint64_t sub_1000161F8(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = *(unsigned __int8 *)(a1 + 48);
  if ((_DWORD)v4 == 2 || ((v3 ^ v4) & 1) != 0)
  {
    v5 = sub_100003DB8(&qword_10032B0E0);
    v6 = sub_100016B20();
    Subject<>.send()(v5, v6);
  }
  *(_BYTE *)(a1 + 48) = v3;
  return sub_10001632C(v4);
}

unint64_t sub_100016270(uint64_t a1, float64x2_t *a2)
{
  float64x2_t v3;
  float64x2_t v4;
  double v5;
  double v6;
  char v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  float64x2_t v12;

  v3 = (float64x2_t)vdupq_n_s64(0x40C3880000000000uLL);
  v4 = vdivq_f64(vrndaq_f64(vmulq_f64(*a2, v3)), v3);
  v5 = *(double *)(a1 + 56);
  v6 = *(double *)(a1 + 64);
  v7 = *(_BYTE *)(a1 + 72);
  if ((v7 & 1) != 0 || (v4.f64[0] == v5 ? (v8 = v4.f64[1] == v6) : (v8 = 0), !v8))
  {
    v12 = v4;
    v9 = sub_100003DB8(&qword_10032B0E0);
    v10 = sub_100016B20();
    Subject<>.send()(v9, v10);
    v4 = v12;
  }
  *(float64x2_t *)(a1 + 56) = v4;
  *(_BYTE *)(a1 + 72) = 0;
  return sub_100016588(*(unint64_t *)&v5, *(unint64_t *)&v6, v7);
}

uint64_t sub_10001632C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  int v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  v3 = result;
  v4 = *(unsigned __int8 *)(v1 + 48);
  if (v4 == 2)
  {
    if (result == 2)
      return result;
  }
  else if (result != 2 && ((((result & 1) == 0) ^ v4) & 1) != 0)
  {
    return result;
  }
  if (qword_100315880 != -1)
    swift_once(&qword_100315880, sub_1000D9790);
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FE38);
  v7 = swift_retain_n(v1, 2, v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v24 = v11;
    *(_DWORD *)v10 = 136315394;
    LOBYTE(v23) = v3;
    v12 = sub_100003DB8((uint64_t *)&unk_1003263F0);
    v14 = String.init<A>(describing:)(&v23, v12, v13);
    v16 = v15;
    v23 = sub_100172BEC(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v10 + 12) = 2080;
    LOBYTE(v23) = *(_BYTE *)(v2 + 48);
    v18 = String.init<A>(describing:)(&v23, v12, v17);
    v20 = v19;
    v23 = sub_100172BEC(v18, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v10 + 14, v10 + 22);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "locationIsAuthorized changed from %s to %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v2, 2);
  }
  v21 = sub_100003DB8(&qword_10032B0E0);
  v22 = sub_100016B20();
  return Subject<>.send()(v21, v22);
}

unint64_t sub_100016588(unint64_t result, unint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  char v28;
  uint64_t v29;

  v4 = v3;
  v7 = result;
  if ((*(_BYTE *)(v3 + 72) & 1) != 0)
  {
    if ((a3 & 1) != 0)
      return result;
  }
  else if ((a3 & 1) == 0 && *(double *)(v3 + 56) == *(double *)&result && *(double *)(v3 + 64) == *(double *)&a2)
  {
    return result;
  }
  if (qword_100315880 != -1)
    swift_once(&qword_100315880, sub_1000D9790);
  v9 = type metadata accessor for Logger(0);
  sub_10000D744(v9, (uint64_t)qword_10033FE38);
  v11 = swift_retain_n(v3, 2, v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v29 = v15;
    *(_DWORD *)v14 = 136315394;
    v27.n128_u64[0] = v7;
    v27.n128_u64[1] = a2;
    v28 = a3 & 1;
    v16 = sub_100003DB8(qword_100317760);
    v18 = String.init<A>(describing:)(&v27, v16, v17);
    v20 = v19;
    v27.n128_u64[0] = sub_100172BEC(v18, v19, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v27.n128_i8[8], v14 + 4, v14 + 12);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v14 + 12) = 2080;
    v21 = *(_BYTE *)(v4 + 72);
    v27 = *(__n128 *)(v4 + 56);
    v28 = v21;
    v22 = String.init<A>(describing:)(&v27, v16, v27);
    v24 = v23;
    v27.n128_u64[0] = sub_100172BEC(v22, v23, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v27.n128_i8[8], v14 + 14, v14 + 22);
    swift_release_n(v4, 2);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "lastLocation changed from %s to %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_release_n(v4, 2);
  }
  v25 = sub_100003DB8(&qword_10032B0E0);
  v26 = sub_100016B20();
  *(double *)&result = COERCE_DOUBLE(Subject<>.send()(v25, v26));
  return result;
}

void sub_1000167F8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;

  v1 = v0;
  v2 = *(void **)(v0 + 80);
  objc_msgSend(v2, "lock");
  v3 = *(_QWORD *)(v1 + 88);
  if (__OFADD__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 88) = v3 + 1;
    objc_msgSend(v2, "unlock");
    if (qword_100315880 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100315880, sub_1000D9790);
LABEL_3:
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FE38);
  swift_retain(v1);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v8 = 134349056;
    v10 = *(_QWORD *)(v1 + 88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v8 + 4, v8 + 12);
    swift_release(v1);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Outstanding assertion counter: %{public}ld", v8, 0xCu);
    swift_slowDealloc(v8, -1, -1);

    if (v3)
      return;
  }
  else
  {

    swift_release(v1);
    if (v3)
      return;
  }
  v9 = *(id *)(v1 + 32);
  sub_1000A47DC();

}

void sub_100016978()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  v2 = *(void **)(v0 + 80);
  objc_msgSend(v2, "lock");
  v3 = *(_QWORD *)(v1 + 88);
  v4 = v3 - 1;
  if (__OFSUB__(v3, 1))
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + 88) = v4;
    objc_msgSend(v2, "unlock");
    if (qword_100315880 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100315880, sub_1000D9790);
LABEL_3:
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FE38);
  swift_retain(v1);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v9 = 134349056;
    v11 = *(_QWORD *)(v1 + 88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v9 + 4, v9 + 12);
    swift_release(v1);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Outstanding assertion counter: %{public}ld", v9, 0xCu);
    swift_slowDealloc(v9, -1, -1);

    if (v4 > 0)
      return;
  }
  else
  {

    swift_release(v1);
    if (v4 > 0)
      return;
  }
  v10 = *(id *)(v1 + 32);
  sub_1000A47F8();

}

uint64_t type metadata accessor for GeoLocationModel.LocationAssertion()
{
  return objc_opt_self(_TtCC8SOSBuddy16GeoLocationModel17LocationAssertion);
}

unint64_t sub_100016B20()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100317750;
  if (!qword_100317750)
  {
    v1 = sub_100007FAC(&qword_10032B0E0);
    result = swift_getWitnessTable(&protocol conformance descriptor for PassthroughSubject<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100317750);
  }
  return result;
}

uint64_t sub_100016B6C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = v3 + 16;
  swift_weakInit(v3 + 16);
  if (qword_100315880 != -1)
    swift_once(&qword_100315880, sub_1000D9790);
  v9 = type metadata accessor for Logger(0);
  sub_10000D744(v9, (uint64_t)qword_10033FE38);
  v11 = swift_bridgeObjectRetain_n(a3, 2, v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v18 = v15;
    *(_DWORD *)v14 = 136446210;
    swift_bridgeObjectRetain(a3);
    v17 = sub_100172BEC(a2, a3, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(a3, 3);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Acquiring LocationAssertion: '%{public}s'", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  swift_weakAssign(v8, a1);
  *(_QWORD *)(v4 + 24) = a2;
  *(_QWORD *)(v4 + 32) = a3;
  sub_1000167F8();
  return v4;
}

unint64_t CLAuthorizationStatus.debugDescription.getter(int a1)
{
  unint64_t result;
  Swift::String v3;
  void *object;

  result = 0x65746544746F6E2ELL;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 0x636972747365722ELL;
      break;
    case 2:
      result = 0x6465696E65642ELL;
      break;
    case 3:
      result = 0xD000000000000011;
      break;
    case 4:
      result = 0xD000000000000014;
      break;
    default:
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int32, &protocol witness table for Int32);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      result = 0x756C61567761722ELL;
      break;
  }
  return result;
}

unint64_t sub_100016E80()
{
  int *v0;

  return CLAuthorizationStatus.debugDescription.getter(*v0);
}

uint64_t sub_100016E88(uint64_t a1)
{
  _QWORD v2[3];

  v2[0] = "\b";
  v2[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v2[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0, 3, v2, a1 + 88);
}

uint64_t sub_100016EE4()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return v0;
}

uint64_t sub_100016F10()
{
  uint64_t v0;

  sub_100016EE4();
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for EventSubscriptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for EventSubscriptions);
}

char *sub_100016F3C(uint64_t a1, uint64_t a2, uint8_t *a3, uint8_t *a4)
{
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  char *v17;
  id v18;
  id v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String v23;
  __n128 v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  id v32;
  char *v33;
  uint64_t v34;
  uint8_t *v35;
  uint8_t **v36;
  objc_class *v37;
  char *v38;
  void *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  _QWORD *v46;
  char *v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint8_t *v59;
  uint64_t v60;
  objc_super v61;
  _QWORD *v62;
  unint64_t v63;

  v58 = a2;
  v59 = a4;
  v56 = a1;
  v57 = a3;
  v55 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v53 = *(_QWORD *)(v55 - 8);
  __chkstk_darwin(v55, v5);
  v54 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v11, v12);
  v14 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v4[OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__caConfig] = 0;
  v15 = OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__carrierNames;
  *(_QWORD *)&v4[v15] = sub_100226D2C(_swiftEmptyArrayStorage);
  v16 = (void *)objc_opt_self(NSBundle);
  v17 = v4;
  v18 = objc_msgSend(v16, "mainBundle");
  v19 = objc_msgSend(v18, "bundleIdentifier");

  if (v19)
  {
    v20 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

  }
  else
  {
    v22 = 0x8000000100260990;
    v20 = (_QWORD *)0xD000000000000012;
  }
  sub_10000D75C();
  v62 = v20;
  v63 = v22;
  swift_bridgeObjectRetain(v22);
  v23._countAndFlagsBits = 0x6E65696C4354432ELL;
  v23._object = (void *)0xE900000000000074;
  String.append(_:)(v23);
  v24 = swift_bridgeObjectRelease(v22);
  v25 = v62;
  v26 = v63;
  static DispatchQoS.unspecified.getter(v24);
  v62 = _swiftEmptyArrayStorage;
  v27 = sub_1000052EC((unint64_t *)&unk_1003178B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v28 = sub_100003DB8((uint64_t *)&unk_100324AE0);
  v29 = sub_10000F138((unint64_t *)&unk_1003178C0, (uint64_t *)&unk_100324AE0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v62, v28, v29, v7, v27);
  v30 = v54;
  (*(void (**)(char *, _QWORD, uint64_t))(v53 + 104))(v54, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v55);
  v31 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v25, v26, v14, v10, v30, 0);
  *(_QWORD *)&v17[OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__queue] = v31;
  v32 = objc_msgSend(objc_allocWithZone((Class)CoreTelephonyClient), "initWithQueue:", v31);
  *(_QWORD *)&v17[OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__client] = v32;
  v33 = &v17[OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__caStateHandler];
  v34 = v58;
  v35 = v59;
  *(_QWORD *)v33 = v56;
  *((_QWORD *)v33 + 1) = v34;
  v36 = (uint8_t **)&v17[OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__carrierNameHandler];
  *v36 = v57;
  v36[1] = v35;
  swift_retain(v34);
  swift_retain(v35);

  v37 = (objc_class *)type metadata accessor for CoreTelephonyCAAgent();
  v61.receiver = v17;
  v61.super_class = v37;
  v38 = (char *)objc_msgSendSuper2(&v61, "init");
  v39 = *(void **)&v38[OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__client];
  v40 = v38;
  objc_msgSend(v39, "setDelegate:", v40);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v41 = type metadata accessor for Logger(0);
  sub_10000D744(v41, (uint64_t)qword_10033FD18);
  v42 = v40;
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v43, v44))
  {
    v45 = (uint8_t *)swift_slowAlloc(12, -1);
    v46 = (_QWORD *)swift_slowAlloc(32, -1);
    v62 = v46;
    *(_DWORD *)v45 = 136446210;
    v57 = v45 + 4;
    v47 = v42;
    v48 = objc_msgSend(v47, "description");
    v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
    v51 = v50;

    v60 = sub_100172BEC(v49, v51, (uint64_t *)&v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v57, v45 + 12);

    swift_bridgeObjectRelease(v51);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "[%{public}s] init", v45, 0xCu);
    swift_arrayDestroy(v46, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1, -1);
    swift_slowDealloc(v45, -1, -1);

  }
  else
  {

  }
  sub_1000176B8();

  swift_release(v58);
  swift_release(v59);
  return v42;
}

id sub_10001742C()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  objc_class *v12;
  uint64_t v14;
  uint64_t v15;
  objc_super v16;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD18);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v15 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v14 = sub_100172BEC(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] deinit", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v12 = (objc_class *)type metadata accessor for CoreTelephonyCAAgent();
  v16.receiver = v2;
  v16.super_class = v12;
  return objc_msgSendSuper2(&v16, "dealloc");
}

uint64_t sub_1000176B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (_QWORD *)((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    v10 = type metadata accessor for PreventSuspensionAssertion();
    swift_allocObject(v10, 32, 7);
    v11 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, 0xD000000000000029, 0x8000000100260E90);
    v12 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__client);
    v13 = swift_allocObject(&unk_1002E4D30, 24, 7);
    swift_unknownObjectWeakInit(v13 + 16, v1);
    v14 = swift_allocObject(&unk_1002E4E48, 32, 7);
    *(_QWORD *)(v14 + 16) = v13;
    *(_QWORD *)(v14 + 24) = v11;
    aBlock[4] = sub_100018F90;
    v18 = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100017F0C;
    aBlock[3] = &unk_1002E4E60;
    v15 = _Block_copy(aBlock);
    v16 = v18;
    swift_retain(v11);
    swift_release(v16);
    objc_msgSend(v12, "getConnectionAssistantConfig:", v15);
    _Block_release(v15);
    return swift_release(v11);
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_100017890(NSObject *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  void **v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  void **v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint8_t *v34;
  void **v35;
  NSObject **v36;
  uint64_t v37;
  __n128 v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *Strong;
  _QWORD *v43;
  NSObject *v44;
  void *v45;
  _QWORD *v46;
  void **v47;
  __n128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject **v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  void **aBlock;
  _QWORD v61[4];
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;

  v8 = type metadata accessor for DispatchWorkItemFlags(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v15 = __chkstk_darwin(v13, v14);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    if (qword_100315848 != -1)
      swift_once(&qword_100315848, sub_1000D9674);
    v19 = type metadata accessor for Logger(0);
    sub_10000D744(v19, (uint64_t)qword_10033FD90);
    swift_errorRetain(a2);
    v20 = swift_errorRetain(a2);
    v59 = Logger.logObject.getter(v20);
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = (void **)swift_slowAlloc(32, -1);
      aBlock = v23;
      *(_DWORD *)v22 = 136446210;
      v63 = a2;
      swift_errorRetain(a2);
      v24 = sub_100003DB8(&qword_10031CF20);
      v26 = String.init<A>(describing:)(&v63, v24, v25);
      v28 = v27;
      v63 = sub_100172BEC(v26, v27, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, &v64, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease(v28);
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v59, v21, "getConnectionAssistantConfig failed: %{public}s", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

  }
  else
  {
    v57 = v16;
    v58 = v15;
    v56 = a3 + 16;
    if (qword_100315848 != -1)
      swift_once(&qword_100315848, sub_1000D9674);
    v29 = type metadata accessor for Logger(0);
    sub_10000D744(v29, (uint64_t)qword_10033FD90);
    v30 = a1;
    v31 = Logger.logObject.getter(v30);
    v32 = static os_log_type_t.default.getter();
    v33 = os_log_type_enabled(v31, v32);
    v59 = a1;
    if (v33)
    {
      v54 = a4;
      v55 = v9;
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      v53 = (NSObject **)swift_slowAlloc(8, -1);
      *(_DWORD *)v34 = 138543362;
      if (a1)
      {
        aBlock = v30;
        v35 = v30;
      }
      else
      {
        aBlock = 0;
      }
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v61, v34 + 4, v34 + 12);
      v36 = v53;
      *v53 = v59;

      _os_log_impl((void *)&_mh_execute_header, v31, v32, "CA config: %{public}@", v34, 0xCu);
      v37 = sub_100003DB8(&qword_1003178F0);
      swift_arrayDestroy(v36, 1, v37);
      swift_slowDealloc(v36, -1, -1);
      swift_slowDealloc(v34, -1, -1);

      a4 = v54;
      v9 = v55;
    }
    else
    {

    }
    sub_10000D75C();
    v39 = (void *)static OS_dispatch_queue.main.getter(v38);
    v40 = swift_allocObject(&unk_1002E4D30, 24, 7);
    v41 = v56;
    swift_beginAccess(v56, &v63, 0, 0);
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v41);
    swift_unknownObjectWeakInit(v40 + 16, Strong);

    v43 = (_QWORD *)swift_allocObject(&unk_1002E4E98, 40, 7);
    v44 = v59;
    v43[2] = v40;
    v43[3] = v44;
    v43[4] = a4;
    v61[3] = sub_100018FCC;
    v62 = v43;
    aBlock = _NSConcreteStackBlock;
    v61[0] = 1107296256;
    v61[1] = sub_1001BAACC;
    v61[2] = &unk_1002E4EB0;
    v45 = _Block_copy(&aBlock);
    v46 = v62;
    v47 = v30;
    swift_retain(a4);
    swift_release(v46);
    static DispatchQoS.unspecified.getter(v48);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v49 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v50 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v51 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v50, v51, v8, v49);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v18, v12, v45);
    _Block_release(v45);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v18, v58);
  }
}

void sub_100017E58(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _BYTE v13[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    v8 = *(void **)(Strong + OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__caConfig);
    *(_QWORD *)(Strong + OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__caConfig) = a2;
    v9 = a2;

  }
  swift_beginAccess(v5, &v12, 0, 0);
  v10 = swift_unknownObjectWeakLoadStrong(v5);
  if (v10)
  {
    v11 = (void *)v10;
    sub_100017F10(a3, 0, 0);

  }
}

void sub_100017F10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v13;
  char v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  _QWORD aBlock[5];
  _QWORD *v21;

  v4 = v3;
  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (_QWORD *)((char *)aBlock - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v12 = static OS_dispatch_queue.main.getter(v13);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v14 & 1) != 0)
  {
    v15 = *(void **)(v4 + OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__client);
    v16 = swift_allocObject(&unk_1002E4D30, 24, 7);
    swift_unknownObjectWeakInit(v16 + 16, v4);
    v17 = (_QWORD *)swift_allocObject(&unk_1002E4DA8, 48, 7);
    v17[2] = v16;
    v17[3] = a1;
    v17[4] = a2;
    v17[5] = a3;
    aBlock[4] = sub_100018EF4;
    v21 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100017F0C;
    aBlock[3] = &unk_1002E4DC0;
    v18 = _Block_copy(aBlock);
    v19 = v21;
    swift_retain(a1);
    sub_100018F00(a2, a3);
    swift_release(v19);
    objc_msgSend(v15, "getConnectionAssistantState:", v18);
    _Block_release(v18);
  }
  else
  {
    __break(1u);
  }
}

void sub_1000180B0(void *a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  NSObject *v35;
  os_log_type_t v36;
  BOOL v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  __n128 v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  NSObject *v49;
  NSObject *v50;
  id v51;
  __n128 v52;
  void *v53;
  uint64_t v54;
  void *Strong;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  _QWORD *v61;
  id v62;
  __n128 v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint8_t *v67;
  id v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  uint64_t aBlock[5];
  _QWORD *v78;
  uint64_t v79;
  _BYTE v80[24];

  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v67 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS(0);
  v19 = __chkstk_darwin(v17, v18);
  v22 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    v76 = a3;
    v72 = a6;
    v73 = v20;
    v74 = v19;
    if (qword_100315848 != -1)
      swift_once(&qword_100315848, sub_1000D9674);
    v33 = type metadata accessor for Logger(0);
    sub_10000D744(v33, (uint64_t)qword_10033FD90);
    v34 = a1;
    v35 = Logger.logObject.getter(v34);
    v36 = static os_log_type_t.default.getter();
    v37 = os_log_type_enabled(v35, v36);
    v75 = v13;
    v70 = a4;
    v71 = a5;
    if (v37)
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v69 = v12;
      v40 = v39;
      aBlock[0] = v39;
      *(_DWORD *)v38 = 136446210;
      v67 = v38 + 4;
      v79 = (uint64_t)a1;
      v41 = v34;
      v68 = v34;
      v42 = v41;
      v43 = sub_100003DB8((uint64_t *)&unk_1003178E0);
      v45 = String.init<A>(describing:)(&v79, v43, v44);
      v47 = v46;
      v79 = sub_100172BEC(v45, v46, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80, v67, v38 + 12);

      v34 = v68;
      swift_bridgeObjectRelease(v47);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "getConnectionAssistantState: %{public}s", v38, 0xCu);
      swift_arrayDestroy(v40, 1, (char *)&type metadata for Any + 8);
      v48 = v40;
      v12 = v69;
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v38, -1, -1);

      v49 = v76;
      if (!a1)
        return;
    }
    else
    {

      v49 = v76;
      if (!a1)
        return;
    }
    v50 = v49 + 2;
    sub_10000D75C();
    v51 = v34;
    v53 = (void *)static OS_dispatch_queue.main.getter(v52);
    v54 = swift_allocObject(&unk_1002E4D30, 24, 7);
    swift_beginAccess(v50, &v79, 0, 0);
    Strong = (void *)swift_unknownObjectWeakLoadStrong(v50);
    swift_unknownObjectWeakInit(v54 + 16, Strong);

    v56 = (_QWORD *)swift_allocObject(&unk_1002E4DF8, 56, 7);
    v56[2] = v54;
    v56[3] = v51;
    v58 = v70;
    v57 = v71;
    v56[4] = v70;
    v56[5] = v57;
    v59 = v72;
    v56[6] = v72;
    aBlock[4] = (uint64_t)sub_100018F54;
    v78 = v56;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1001BAACC;
    aBlock[3] = (uint64_t)&unk_1002E4E10;
    v60 = _Block_copy(aBlock);
    v61 = v78;
    swift_retain(v58);
    v62 = v51;
    sub_100018F00(v57, v59);
    swift_release(v61);
    static DispatchQoS.unspecified.getter(v63);
    aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
    v64 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v65 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v66 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v65, v66, v12, v64);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v22, v16, v60);
    _Block_release(v60);

    (*(void (**)(char *, uint64_t))(v75 + 8))(v16, v12);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v22, v74);
    return;
  }
  swift_errorRetain(a2);
  if (qword_100315848 != -1)
    swift_once(&qword_100315848, sub_1000D9674);
  v23 = type metadata accessor for Logger(0);
  sub_10000D744(v23, (uint64_t)qword_10033FD90);
  swift_errorRetain(a2);
  v24 = swift_errorRetain(a2);
  v76 = Logger.logObject.getter(v24);
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v76, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    aBlock[0] = v27;
    *(_DWORD *)v26 = 136446210;
    v79 = a2;
    swift_errorRetain(a2);
    v28 = sub_100003DB8((uint64_t *)&unk_100324AA0);
    v30 = String.init<A>(describing:)(&v79, v28, v29);
    v32 = v31;
    v79 = sub_100172BEC(v30, v31, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, v80, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease(v32);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, v76, v25, "getConnectionAssistantState: %{public}s", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    swift_errorRelease(a2);
  }
  else
  {
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);

  }
}

uint64_t sub_1000186AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t result;
  void *v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, double, double);
  void *v14;
  id v15;
  double v16;
  double v17;
  double v18;
  double v19;
  uint64_t v20;
  _BYTE v21[24];

  v9 = a1 + 16;
  swift_beginAccess(a1 + 16, v21, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v9);
  if (result)
  {
    v11 = (void *)result;
    v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double, double))(result
                                                                                    + OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__caStateHandler);
    v12 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__caStateHandler + 8);
    v14 = *(void **)(result + OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__caConfig);
    if (v14)
    {
      swift_retain(*(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__caStateHandler + 8));
      v15 = v14;
      sub_100018844();
      v17 = v16;
      v19 = v18;

    }
    else
    {
      v20 = qword_100315728;
      swift_retain(*(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__caStateHandler + 8));
      if (v20 != -1)
        swift_once(&qword_100315728, sub_100018E0C);
      v17 = *(double *)&qword_10033FBD0;
      v19 = *(double *)algn_10033FBD8;
    }
    v13(a2, a3, a4, a5, v17, v19);

    return swift_release(v12);
  }
  return result;
}

void sub_1000187D0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  void (*v6)(void *, void *);
  id v7;
  id v8;

  v6 = *(void (**)(void *, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v8 = a2;
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

void sub_100018844()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  id v8;
  void *v9;
  id v10;

  v1 = objc_msgSend(v0, "modelVector");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend(v1, "defaultVector");
    if (v3)
    {
      v4 = v3;
      v5 = objc_msgSend(v3, "x");
      if (v5)
      {
        v6 = v5;
        v7 = objc_msgSend(v5, "offset");

        objc_msgSend(v7, "doubleValueSafe");
      }
      v8 = objc_msgSend(v4, "y");
      if (v8)
      {
        v9 = v8;
        v10 = objc_msgSend(v8, "offset");

        objc_msgSend(v10, "doubleValueSafe");
      }

      return;
    }

  }
  if (qword_100315728 != -1)
    swift_once(&qword_100315728, sub_100018E0C);
}

uint64_t type metadata accessor for CoreTelephonyCAAgent()
{
  return objc_opt_self(_TtC8SOSBuddy20CoreTelephonyCAAgent);
}

uint64_t sub_1000189EC(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17;
  id v18;
  uint64_t result;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[5];
  uint64_t v33;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30, v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (uint64_t *)((char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(void **)(v2 + OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__queue);
  *v16 = v17;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v13 + 8))(v16, v12);
  if ((v17 & 1) != 0)
  {
    sub_10000D75C();
    v20 = (void *)static OS_dispatch_queue.main.getter();
    v21 = swift_allocObject(&unk_1002E4D30, 24, 7);
    swift_unknownObjectWeakInit(v21 + 16, v2);
    v22 = swift_allocObject(&unk_1002E4D58, 32, 7);
    *(_QWORD *)(v22 + 16) = v21;
    *(_QWORD *)(v22 + 24) = a1;
    aBlock[4] = sub_100018E98;
    v33 = v22;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001BAACC;
    aBlock[3] = &unk_1002E4D70;
    v23 = _Block_copy(aBlock);
    v24 = v33;
    v25 = a1;
    swift_release(v24);
    static DispatchQoS.unspecified.getter(v26);
    aBlock[0] = &_swiftEmptyArrayStorage;
    v27 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v28 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v29 = sub_10000F138((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0);
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v28, v29, v4, v27);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v7, v23);
    _Block_release(v23);

    (*(void (**)(char *, uint64_t))(v31 + 8))(v7, v4);
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v30);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100018C98(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  void *v5;
  uint64_t v6;
  void (*v7)(uint64_t, _QWORD, _QWORD, _QWORD, double, double);
  void *v8;
  id v9;
  double v10;
  double v11;
  double v12;
  double v13;
  uint64_t v14;
  _BYTE v15[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v15, 0, 0);
  result = swift_unknownObjectWeakLoadStrong(v3);
  if (result)
  {
    v5 = (void *)result;
    v7 = *(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, double, double))(result
                                                                                + OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__caStateHandler);
    v6 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__caStateHandler + 8);
    v8 = *(void **)(result + OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__caConfig);
    if (v8)
    {
      swift_retain(*(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__caStateHandler + 8));
      v9 = v8;
      sub_100018844();
      v11 = v10;
      v13 = v12;

    }
    else
    {
      v14 = qword_100315728;
      swift_retain(*(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy20CoreTelephonyCAAgent__caStateHandler + 8));
      if (v14 != -1)
        swift_once(&qword_100315728, sub_100018E0C);
      v11 = *(double *)&qword_10033FBD0;
      v13 = *(double *)algn_10033FBD8;
    }
    v7(a2, 0, 0, 0, v11, v13);

    return swift_release(v6);
  }
  return result;
}

ValueMetadata *type metadata accessor for CorrectionVector()
{
  return &type metadata for CorrectionVector;
}

void sub_100018E0C()
{
  qword_10033FBD0 = 0;
  *(_QWORD *)algn_10033FBD8 = 0;
}

BOOL sub_100018E1C(double *a1, double *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

uint64_t sub_100018E48()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100018E6C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100018E98()
{
  uint64_t v0;

  return sub_100018C98(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_100018EA0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100018EB0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100018EB8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  if (v0[4])
    swift_release(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_100018EF4(void *a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000180B0(a1, a2, *(NSObject **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40));
}

uint64_t sub_100018F00(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_retain(a2);
  return result;
}

uint64_t sub_100018F10()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  if (*(_QWORD *)(v0 + 40))
    swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100018F54()
{
  uint64_t *v0;

  return sub_1000186AC(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_100018F64()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

void sub_100018F90(NSObject *a1, uint64_t a2)
{
  uint64_t v2;

  sub_100017890(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_100018F98()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100018FCC()
{
  uint64_t v0;

  sub_100017E58(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

BOOL sub_100019000(unsigned __int8 *a1, unsigned __int8 *a2)
{
  int v2;
  int v3;
  _BOOL4 v4;
  _BOOL4 v6;

  v2 = *a1;
  v3 = *a2;
  v4 = v3 == 5;
  v6 = v3 != 5 && v2 == v3;
  if (v2 == 5)
    return v4;
  else
    return v6;
}

uint64_t sub_100019024(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  __int16 v8;
  _OWORD v9[4];
  __int16 v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_WORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_WORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_10001AC88((uint64_t)v7, (uint64_t)v9) & 1;
}

id sub_10001907C()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  objc_super v21;

  v1 = OBJC_IVAR____TtC8SOSBuddy17StewieStateSource_stateDidChange;
  v2 = sub_100003DB8(&qword_100317940);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = v0;
  *(_QWORD *)&v0[v1] = PassthroughSubject.init()();
  *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy17StewieStateSource__agent] = 0;

  v21.receiver = v3;
  v21.super_class = (Class)type metadata accessor for StewieStateSource();
  v4 = objc_msgSendSuper2(&v21, "init");
  v5 = qword_100315820;
  v6 = v4;
  if (v5 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v7 = type metadata accessor for Logger(0);
  sub_10000D744(v7, (uint64_t)qword_10033FD18);
  v8 = v6;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v20 = v12;
    *(_DWORD *)v11 = 136446210;
    v13 = v8;
    v14 = objc_msgSend(v13, "description");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v19 = sub_100172BEC(v15, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "init: %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
  return v8;
}

id sub_1000192DC()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  objc_class *v12;
  uint64_t v14;
  uint64_t v15;
  objc_super v16;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD18);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v15 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v14 = sub_100172BEC(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "deinit: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v12 = (objc_class *)type metadata accessor for StewieStateSource();
  v16.receiver = v2;
  v16.super_class = v12;
  return objc_msgSendSuper2(&v16, "dealloc");
}

uint64_t type metadata accessor for StewieStateSource()
{
  return objc_opt_self(_TtC8SOSBuddy17StewieStateSource);
}

uint64_t sub_100019540()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  void *v19;
  id v20;
  char v21;
  uint64_t v23;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_1003158C8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003158C8, sub_1000D98C4);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FF10);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "start", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = swift_allocObject(&unk_1002E50C0, 24, 7);
  swift_unknownObjectWeakInit(v14 + 16, v1);
  v15 = objc_allocWithZone((Class)type metadata accessor for StewieStateMonitorAgent());
  v16 = sub_1001181BC((uint64_t)sub_10001AF04, v14);
  v17 = OBJC_IVAR____TtC8SOSBuddy17StewieStateSource__agent;
  v18 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy17StewieStateSource__agent);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy17StewieStateSource__agent) = v16;

  v19 = *(void **)(v1 + v17);
  if (v19)
  {
    v20 = v19;
    v21 = sub_100117CB8();

  }
  else
  {
    v21 = 0;
  }
  return v21 & 1;
}

_QWORD *sub_10001972C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *result;
  void *v4;
  uint64_t v5;
  _OWORD v6[4];
  __int16 v7;
  _BYTE v8[24];
  _OWORD v9[4];
  __int16 v10;

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v8, 0, 0);
  result = (_QWORD *)swift_unknownObjectWeakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)((char *)result + OBJC_IVAR____TtC8SOSBuddy17StewieStateSource_stateDidChange);
    swift_retain(v5);

    sub_1000197E4(2, 2, (uint64_t)v9);
    v6[2] = v9[2];
    v6[3] = v9[3];
    v7 = v10;
    v6[0] = v9[0];
    v6[1] = v9[1];
    PassthroughSubject.send(_:)(v6);
    swift_release(v5);
    return sub_10001AF0C(v9);
  }
  return result;
}

void *sub_1000197E4@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X8>)
{
  void *v3;
  char *v5;
  char *v6;
  uint64_t v7;
  char v8;
  uint64_t *v9;
  char v10;
  uint64_t v11;
  char v12;
  void *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char v17;
  uint64_t *v18;
  char v19;
  uint64_t v20;
  char v21;
  void *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char v26;
  uint64_t *v27;
  char v28;
  uint64_t v29;
  char v30;
  void *result;
  void *v32;
  void *v33;
  char v34;
  id v35;
  uint64_t v36;
  char v37;

  v37 = sub_10001A14C((uint64_t)objc_msgSend(v3, "reason"), (unint64_t)objc_msgSend(v3, "status"));
  v36 = sub_10001A274();
  v35 = objc_msgSend(v3, "status");
  v34 = sub_10001A590((unint64_t)objc_msgSend(v3, "transportType"));
  v33 = sub_100155744((char)objc_msgSend(v3, "allowedServices"));
  v32 = sub_100155744((char)objc_msgSend(v3, "activeServices"));
  v5 = sub_10001AE20();
  v6 = v5;
  v7 = *((_QWORD *)v5 + 2);
  if (v7)
  {
    v8 = 0;
    v9 = (uint64_t *)(v5 + 32);
    do
    {
      v11 = *v9++;
      v10 = v11;
      if (objc_msgSend(v3, "isCongestedService:", v11))
        v12 = v10;
      else
        v12 = 0;
      v8 |= v12;
      --v7;
    }
    while (v7);
  }
  else
  {
    v8 = 0;
  }
  swift_bridgeObjectRelease(v6);
  v13 = sub_100155744(v8);
  v14 = sub_10001AE20();
  v15 = v14;
  v16 = *((_QWORD *)v14 + 2);
  if (v16)
  {
    v17 = 0;
    v18 = (uint64_t *)(v14 + 32);
    do
    {
      v20 = *v18++;
      v19 = v20;
      if (objc_msgSend(v3, "isDemoAllowedForService:", v20))
        v21 = v19;
      else
        v21 = 0;
      v17 |= v21;
      --v16;
    }
    while (v16);
  }
  else
  {
    v17 = 0;
  }
  swift_bridgeObjectRelease(v15);
  v22 = sub_100155744(v17);
  v23 = sub_10001AE20();
  v24 = v23;
  v25 = *((_QWORD *)v23 + 2);
  if (v25)
  {
    v26 = 0;
    v27 = (uint64_t *)(v23 + 32);
    do
    {
      v29 = *v27++;
      v28 = v29;
      if (objc_msgSend(v3, "isPermittedAtCurrentLocation:", v29))
        v30 = v28;
      else
        v30 = 0;
      v26 |= v30;
      --v25;
    }
    while (v25);
  }
  else
  {
    v26 = 0;
  }
  swift_bridgeObjectRelease(v24);
  result = sub_100155744(v26);
  *(_BYTE *)a3 = v37;
  *(_QWORD *)(a3 + 8) = v36;
  *(_BYTE *)(a3 + 16) = v35 == (id)6;
  *(_BYTE *)(a3 + 17) = v34;
  *(_QWORD *)(a3 + 24) = v33;
  *(_QWORD *)(a3 + 32) = v32;
  *(_QWORD *)(a3 + 40) = v13;
  *(_QWORD *)(a3 + 48) = v22;
  *(_QWORD *)(a3 + 56) = result;
  *(_BYTE *)(a3 + 64) = a1;
  *(_BYTE *)(a3 + 65) = a2;
  return result;
}

void sub_100019A24()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  uint64_t v8;
  void (*v9)(_QWORD *, uint64_t, uint64_t);
  char v10;
  void (*v11)(_QWORD *, uint64_t);
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  void *v18;
  char *v19;
  __n128 v20;
  char v21;
  void *v22;
  uint64_t v23;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  v8 = enum case for DispatchPredicate.onQueue(_:);
  v9 = *(void (**)(_QWORD *, uint64_t, uint64_t))(v3 + 104);
  v9(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v10 = _dispatchPreconditionTest(_:)(v6);
  v11 = *(void (**)(_QWORD *, uint64_t))(v3 + 8);
  v11(v6, v2);
  if ((v10 & 1) != 0)
  {
    if (qword_1003158C8 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_1003158C8, sub_1000D98C4);
LABEL_3:
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10000D744(v12, (uint64_t)qword_10033FF10);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "stop", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  v17 = OBJC_IVAR____TtC8SOSBuddy17StewieStateSource__agent;
  v18 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy17StewieStateSource__agent);
  if (!v18)
    goto LABEL_8;
  v19 = v18;
  *v6 = static OS_dispatch_queue.main.getter(v20);
  v9(v6, v8, v2);
  v21 = _dispatchPreconditionTest(_:)(v6);
  v11(v6, v2);
  if ((v21 & 1) != 0)
  {
    v22 = *(void **)&v19[OBJC_IVAR____TtC8SOSBuddy23StewieStateMonitorAgent_monitor];
    *(_QWORD *)&v19[OBJC_IVAR____TtC8SOSBuddy23StewieStateMonitorAgent_monitor] = 0;

    v18 = *(void **)(v1 + v17);
LABEL_8:
    *(_QWORD *)(v1 + v17) = 0;

    return;
  }
  __break(1u);
}

uint64_t getEnumTagSinglePayload for SettingsAgent.SettingsDestination(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StewieState.Transport(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100019CF8 + 4 * byte_10024DBD5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100019D2C + 4 * byte_10024DBD0[v4]))();
}

uint64_t sub_100019D2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100019D34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100019D3CLL);
  return result;
}

uint64_t sub_100019D48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100019D50);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100019D54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100019D5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StewieState.Transport()
{
  return &type metadata for StewieState.Transport;
}

ValueMetadata *type metadata accessor for StewieState.OffReason()
{
  return &type metadata for StewieState.OffReason;
}

uint64_t destroy for StewieState(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for StewieState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v4;
  *(_QWORD *)(a1 + 32) = v5;
  v6 = *(_QWORD *)(a2 + 40);
  v7 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = v6;
  *(_QWORD *)(a1 + 48) = v7;
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for StewieState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = *(_QWORD *)(a2 + 56);
  v15 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_BYTE *)(a1 + 65) = *(_BYTE *)(a2 + 65);
  return a1;
}

__n128 initializeWithTake for StewieState(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for StewieState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  v5 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 40));
  v6 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  swift_bridgeObjectRelease(v7);
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionnaireState.PrepareToSendState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 66))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnaireState.PrepareToSendState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 66) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 66) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StewieState()
{
  return &type metadata for StewieState;
}

unint64_t sub_10001A0C0()
{
  unint64_t result;

  result = qword_100317930;
  if (!qword_100317930)
  {
    result = swift_getWitnessTable(&unk_10024DCAC, &type metadata for StewieState.OffReason);
    atomic_store(result, (unint64_t *)&qword_100317930);
  }
  return result;
}

unint64_t sub_10001A108()
{
  unint64_t result;

  result = qword_100317938;
  if (!qword_100317938)
  {
    result = swift_getWitnessTable(&unk_10024DD14, &type metadata for StewieState.Transport);
    atomic_store(result, (unint64_t *)&qword_100317938);
  }
  return result;
}

uint64_t sub_10001A14C(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  unint64_t v11;
  _QWORD v12[8];

  if (a2 < 5)
    return sub_10001A6A8(a1);
  if (a2 - 5 < 2)
    return 5;
  v12[6] = v2;
  v12[7] = v3;
  if (qword_1003158C8 != -1)
    swift_once(&qword_1003158C8, sub_1000D98C4);
  v6 = type metadata accessor for Logger(0);
  v7 = sub_10000D744(v6, (uint64_t)qword_10033FF10);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v10 = 134349056;
    v11 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, v12, v10 + 4, v10 + 12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unexpected CTStewieStatus value: %{public}ld, defaulting to off", v10, 0xCu);
    swift_slowDealloc(v10, -1, -1);
  }

  return 1;
}

uint64_t sub_10001A274()
{
  void *v0;
  void *v1;
  _QWORD *v2;
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  char **p_name;
  uint64_t v9;
  char *v10;
  char v11;
  unint64_t v12;
  _BYTE *v13;
  int64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v26;
  unint64_t v27;
  uint64_t v28;
  _BOOL8 v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  uint64_t result;
  char *v38;
  uint64_t v39;
  char *v40;
  void *v41;
  unint64_t v42;
  char *v43;

  v1 = v0;
  v2 = (_QWORD *)sub_100226E38((uint64_t)&_swiftEmptyArrayStorage);
  v3 = sub_10001AE20();
  v4 = v3;
  v5 = *((_QWORD *)v3 + 2);
  if (!v5)
  {
LABEL_41:
    swift_bridgeObjectRelease(v4);
    return (uint64_t)v2;
  }
  v6 = 0;
  v7 = v3 + 32;
  p_name = (char **)(&ResourceBundleClass + 24);
  v40 = v3;
  v41 = v1;
  v38 = v3 + 32;
  v39 = *((_QWORD *)v3 + 2);
  while (1)
  {
    if (v6 >= *((_QWORD *)v4 + 2))
      goto LABEL_46;
    v9 = *(_QWORD *)&v7[8 * v6];
    v10 = (char *)objc_msgSend(v1, p_name[103], v9);
    v11 = (_BYTE)v10 - 3;
    if ((unint64_t)(v10 - 3) < 8 && ((0x87u >> v11) & 1) != 0)
      break;
LABEL_4:
    if (++v6 == v5)
      goto LABEL_41;
  }
  v42 = v6;
  v12 = 0x303030303020100uLL >> (8 * v11);
  v13 = sub_100155744(v9);
  v14 = 0;
  v43 = v13 + 56;
  v15 = 1 << v13[32];
  if (v15 < 64)
    v16 = ~(-1 << v15);
  else
    v16 = -1;
  v17 = v16 & *((_QWORD *)v13 + 7);
  v18 = (unint64_t)(v15 + 63) >> 6;
  while (1)
  {
    if (v17)
    {
      v19 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      v20 = v19 | (v14 << 6);
    }
    else
    {
      v21 = v14 + 1;
      if (__OFADD__(v14, 1))
        goto LABEL_44;
      if (v21 >= v18)
      {
LABEL_3:
        swift_release(v13);
        v4 = v40;
        v1 = v41;
        v7 = v38;
        v5 = v39;
        v6 = v42;
        p_name = &ResourceBundleClass.name;
        goto LABEL_4;
      }
      v22 = *(_QWORD *)&v43[8 * v21];
      ++v14;
      if (!v22)
      {
        v14 = v21 + 1;
        if (v21 + 1 >= v18)
          goto LABEL_3;
        v22 = *(_QWORD *)&v43[8 * v14];
        if (!v22)
        {
          v14 = v21 + 2;
          if (v21 + 2 >= v18)
            goto LABEL_3;
          v22 = *(_QWORD *)&v43[8 * v14];
          if (!v22)
          {
            v23 = v21 + 3;
            if (v23 >= v18)
              goto LABEL_3;
            v22 = *(_QWORD *)&v43[8 * v23];
            if (!v22)
            {
              while (1)
              {
                v14 = v23 + 1;
                if (__OFADD__(v23, 1))
                  goto LABEL_45;
                if (v14 >= v18)
                  goto LABEL_3;
                v22 = *(_QWORD *)&v43[8 * v14];
                ++v23;
                if (v22)
                  goto LABEL_29;
              }
            }
            v14 = v23;
          }
        }
      }
LABEL_29:
      v17 = (v22 - 1) & v22;
      v20 = __clz(__rbit64(v22)) + (v14 << 6);
    }
    v24 = *(unsigned __int8 *)(*((_QWORD *)v13 + 6) + v20);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
    v27 = sub_10017D294(v24);
    v28 = v2[2];
    v29 = (v26 & 1) == 0;
    v30 = v28 + v29;
    if (__OFADD__(v28, v29))
      break;
    v31 = v26;
    if (v2[3] >= v30)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v26 & 1) != 0)
          goto LABEL_12;
      }
      else
      {
        sub_10008A560();
        if ((v31 & 1) != 0)
          goto LABEL_12;
      }
    }
    else
    {
      sub_100086DCC(v30, isUniquelyReferenced_nonNull_native);
      v32 = sub_10017D294(v24);
      if ((v31 & 1) != (v33 & 1))
        goto LABEL_47;
      v27 = v32;
      if ((v31 & 1) != 0)
      {
LABEL_12:
        *(_BYTE *)(v2[7] + v27) = v12;
        goto LABEL_13;
      }
    }
    v2[(v27 >> 6) + 8] |= 1 << v27;
    *(_BYTE *)(v2[6] + v27) = v24;
    *(_BYTE *)(v2[7] + v27) = v12;
    v34 = v2[2];
    v35 = __OFADD__(v34, 1);
    v36 = v34 + 1;
    if (v35)
      goto LABEL_43;
    v2[2] = v36;
LABEL_13:
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for StewieState.StewieService);
  __break(1u);
  return result;
}

unint64_t sub_10001A590(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  unint64_t v8;
  uint64_t v9;

  v1 = a1;
  if (a1 >= 3)
  {
    if (qword_1003158C8 != -1)
      swift_once(&qword_1003158C8, sub_1000D98C4);
    v2 = type metadata accessor for Logger(0);
    v3 = sub_10000D744(v2, (uint64_t)qword_10033FF10);
    v4 = Logger.logObject.getter(v3);
    v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      v6 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v6 = 134349056;
      v8 = v1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v6 + 4, v6 + 12);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unexpected CTStewieTransportType value: %{public}ld, defaulting to unknown", v6, 0xCu);
      swift_slowDealloc(v6, -1, -1);
    }

    return 0;
  }
  return v1;
}

uint64_t sub_10001A6A8(uint64_t a1)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;

  result = 0;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
      result = 2;
      break;
    case 2:
    case 3:
      goto LABEL_7;
    case 4:
      result = 3;
      break;
    case 6:
      result = 4;
      break;
    default:
      if (qword_1003158C8 != -1)
        swift_once(&qword_1003158C8, sub_1000D98C4);
      v4 = type metadata accessor for Logger(0);
      v5 = sub_10000D744(v4, (uint64_t)qword_10033FF10);
      v6 = Logger.logObject.getter(v5);
      v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v8 = 134349056;
        v9 = a1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v9, &v10, v8 + 4, v8 + 12);
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Unexpected CTStewieStatusReason value: %{public}ld, defaulting to notAllowedFeatureOff", v8, 0xCu);
        swift_slowDealloc(v8, -1, -1);
      }

LABEL_7:
      result = 1;
      break;
  }
  return result;
}

uint64_t sub_10001A7F0(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  int64_t v12;
  unint64_t v13;
  int64_t v14;
  int v15;
  char v16;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v5 = result + 64;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v11 = v10 | (v4 << 6);
      goto LABEL_24;
    }
    v12 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v12 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v12);
    ++v4;
    if (!v13)
    {
      v4 = v12 + 1;
      if (v12 + 1 >= v9)
        return 1;
      v13 = *(_QWORD *)(v5 + 8 * v4);
      if (!v13)
      {
        v4 = v12 + 2;
        if (v12 + 2 >= v9)
          return 1;
        v13 = *(_QWORD *)(v5 + 8 * v4);
        if (!v13)
        {
          v4 = v12 + 3;
          if (v12 + 3 >= v9)
            return 1;
          v13 = *(_QWORD *)(v5 + 8 * v4);
          if (!v13)
            break;
        }
      }
    }
LABEL_23:
    v8 = (v13 - 1) & v13;
    v11 = __clz(__rbit64(v13)) + (v4 << 6);
LABEL_24:
    v15 = *(unsigned __int8 *)(*(_QWORD *)(v3 + 56) + v11);
    result = sub_10017D294(*(unsigned __int8 *)(*(_QWORD *)(v3 + 48) + v11));
    if ((v16 & 1) == 0 || *(unsigned __int8 *)(*(_QWORD *)(a2 + 56) + result) != v15)
      return 0;
  }
  v14 = v12 + 4;
  if (v14 >= v9)
    return 1;
  v13 = *(_QWORD *)(v5 + 8 * v14);
  if (v13)
  {
    v4 = v14;
    goto LABEL_23;
  }
  while (1)
  {
    v4 = v14 + 1;
    if (__OFADD__(v14, 1))
      break;
    if (v4 >= v9)
      return 1;
    v13 = *(_QWORD *)(v5 + 8 * v4);
    ++v14;
    if (v13)
      goto LABEL_23;
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10001A96C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int64_t v9;
  unint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  _QWORD *v29;
  char v31;
  uint64_t v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  int64_t v52;

  if (result == a2)
    return 1;
  v3 = result;
  if (*(_QWORD *)(result + 16) != *(_QWORD *)(a2 + 16))
    return 0;
  v4 = 0;
  v49 = result + 64;
  v5 = 1 << *(_BYTE *)(result + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(result + 64);
  v50 = (unint64_t)(v5 + 63) >> 6;
  while (1)
  {
    while (1)
    {
LABEL_7:
      if (!v7)
      {
        v9 = v4 + 1;
        if (__OFADD__(v4, 1))
        {
          __break(1u);
        }
        else
        {
          if (v9 >= v50)
            return 1;
          v10 = *(_QWORD *)(v49 + 8 * v9);
          v11 = v4 + 1;
          if (v10)
            goto LABEL_24;
          v11 = v4 + 2;
          if (v4 + 2 >= v50)
            return 1;
          v10 = *(_QWORD *)(v49 + 8 * v11);
          if (v10)
            goto LABEL_24;
          v11 = v4 + 3;
          if (v4 + 3 >= v50)
            return 1;
          v10 = *(_QWORD *)(v49 + 8 * v11);
          if (v10)
            goto LABEL_24;
          v11 = v4 + 4;
          if (v4 + 4 >= v50)
            return 1;
          v10 = *(_QWORD *)(v49 + 8 * v11);
          if (v10)
            goto LABEL_24;
          v12 = v4 + 5;
          if (v4 + 5 >= v50)
            return 1;
          v10 = *(_QWORD *)(v49 + 8 * v12);
          if (v10)
          {
            v11 = v4 + 5;
LABEL_24:
            v51 = (v10 - 1) & v10;
            v52 = v11;
            v8 = __clz(__rbit64(v10)) + (v11 << 6);
            goto LABEL_25;
          }
          while (1)
          {
            v11 = v12 + 1;
            if (__OFADD__(v12, 1))
              break;
            if (v11 >= v50)
              return 1;
            v10 = *(_QWORD *)(v49 + 8 * v11);
            ++v12;
            if (v10)
              goto LABEL_24;
          }
        }
        __break(1u);
        return result;
      }
      v51 = (v7 - 1) & v7;
      v52 = v4;
      v8 = __clz(__rbit64(v7)) | (v4 << 6);
LABEL_25:
      v13 = *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v8);
      v14 = *(_QWORD *)(v3 + 56) + 40 * v8;
      v15 = *(_QWORD *)v14;
      v16 = *(_QWORD *)(v14 + 8);
      v17 = *(_QWORD *)(v14 + 16);
      v18 = *(unsigned __int8 *)(v14 + 24);
      v19 = *(unsigned __int8 *)(v14 + 25);
      v20 = *(_QWORD **)(v14 + 32);
      v21 = sub_10018647C(v13);
      if ((v22 & 1) == 0)
        return 0;
      v23 = *(_QWORD *)(a2 + 56) + 40 * v21;
      if (*(_QWORD *)v23 != v15)
        return 0;
      v24 = v3;
      v25 = *(_QWORD *)(v23 + 8);
      v26 = *(_QWORD *)(v23 + 16);
      v27 = *(unsigned __int8 *)(v23 + 24);
      v28 = *(unsigned __int8 *)(v23 + 25);
      v29 = *(_QWORD **)(v23 + 32);
      if (v25 == v16 && v26 == v17)
      {
        result = 0;
        if (v18 != v27)
          return result;
      }
      else
      {
        v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v26, v16, v17, 0);
        result = 0;
        if ((v31 & 1) == 0 || ((v18 ^ v27) & 1) != 0)
          return result;
      }
      if (((v19 ^ v28) & 1) != 0)
        return result;
      if (v29)
        break;
      v3 = v24;
      v7 = v51;
      v4 = v52;
      if (v20)
        return 0;
    }
    v7 = v51;
    v4 = v52;
    if (!v20)
      return 0;
    v32 = v29[2];
    if (v32 != v20[2])
      return 0;
    v3 = v24;
    if (v32)
      v33 = v29 == v20;
    else
      v33 = 1;
    if (!v33)
    {
      result = v29[4];
      v34 = v29[5];
      v35 = v20[4];
      v36 = v20[5];
      if (result != v35 || v34 != v36)
      {
        result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v34, v35, v36, 0);
        if ((result & 1) == 0)
          return 0;
      }
      if (v32 != 1)
      {
        result = v29[6];
        v38 = v29[7];
        v39 = v20[6];
        v40 = v20[7];
        if (result != v39 || v38 != v40)
        {
          result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v38, v39, v40, 0);
          if ((result & 1) == 0)
            return 0;
        }
        v42 = v32 - 2;
        if (v42)
          break;
      }
    }
  }
  v43 = v20 + 9;
  v44 = v29 + 9;
  while (1)
  {
    result = *(v44 - 1);
    v45 = *v44;
    v46 = *(v43 - 1);
    v47 = *v43;
    if (result != v46 || v45 != v47)
    {
      result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v45, v46, v47, 0);
      if ((result & 1) == 0)
        return 0;
    }
    v43 += 2;
    v44 += 2;
    if (!--v42)
      goto LABEL_7;
  }
}

uint64_t sub_10001AC88(uint64_t a1, uint64_t a2)
{
  int v4;
  int v6;
  int v7;
  uint64_t result;
  _BOOL4 v9;
  int v10;
  int v11;
  _BOOL4 v12;
  char v13;
  char v14;
  unsigned __int8 v15;
  char v16;
  unsigned __int8 v17;

  sub_10001AE10((_BYTE *)a1, &v14);
  sub_10001AE10((_BYTE *)a2, &v13);
  sub_10001AE10(&v14, &v15);
  v4 = v15;
  if (v15 == 5)
  {
    sub_10001AE10(&v13, &v16);
    if (v16 != 5)
      return 0;
  }
  else
  {
    sub_10001AE10(&v13, &v17);
    if (v17 == 5 || v4 != v17)
      return 0;
  }
  if ((sub_10001A7F0(*(_QWORD *)(a1 + 8), *(_QWORD *)(a2 + 8)) & 1) == 0
    || ((*(unsigned __int8 *)(a1 + 16) ^ *(unsigned __int8 *)(a2 + 16)) & 1) != 0
    || *(unsigned __int8 *)(a1 + 17) != *(unsigned __int8 *)(a2 + 17)
    || (sub_1001BF5E8(*(_QWORD *)(a1 + 24), *(_QWORD *)(a2 + 24)) & 1) == 0
    || (sub_1001BF5E8(*(_QWORD *)(a1 + 32), *(_QWORD *)(a2 + 32)) & 1) == 0
    || (sub_1001BF5E8(*(_QWORD *)(a1 + 40), *(_QWORD *)(a2 + 40)) & 1) == 0
    || (sub_1001BF5E8(*(_QWORD *)(a1 + 48), *(_QWORD *)(a2 + 48)) & 1) == 0
    || (sub_1001BF5E8(*(_QWORD *)(a1 + 56), *(_QWORD *)(a2 + 56)) & 1) == 0)
  {
    return 0;
  }
  v6 = *(unsigned __int8 *)(a1 + 64);
  v7 = *(unsigned __int8 *)(a2 + 64);
  if (v6 == 2)
  {
    if (v7 != 2)
      return 0;
LABEL_22:
    v10 = *(unsigned __int8 *)(a1 + 65);
    v11 = *(unsigned __int8 *)(a2 + 65);
    if (v10 == 2)
    {
      if (v11 != 2)
        return 0;
    }
    else
    {
      v12 = (v10 & 1) == 0;
      if (v11 == 2 || ((v12 ^ v11) & 1) == 0)
        return 0;
    }
    return 1;
  }
  result = 0;
  v9 = (v6 & 1) == 0;
  if (v7 != 2 && ((v9 ^ v7) & 1) != 0)
    goto LABEL_22;
  return result;
}

_BYTE *sub_10001AE10(_BYTE *a1, _BYTE *a2)
{
  *a2 = *a1;
  return a2;
}

char *sub_10001AE20()
{
  char *isUniquelyReferenced_nonNull_native;
  char *v1;
  unint64_t v2;
  unint64_t v3;
  int64_t v4;
  unint64_t v5;
  int64_t v6;

  isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native(&off_1002E0000);
  v1 = sub_10017162C(isUniquelyReferenced_nonNull_native, 6, 1, (char *)&off_1002E0000);
  v3 = *((_QWORD *)v1 + 2);
  v2 = *((_QWORD *)v1 + 3);
  v4 = v2 >> 1;
  v5 = v3 + 1;
  if (v2 >> 1 <= v3)
  {
    v1 = sub_10017162C((char *)(v2 > 1), v3 + 1, 1, v1);
    v2 = *((_QWORD *)v1 + 3);
    v4 = v2 >> 1;
  }
  *((_QWORD *)v1 + 2) = v5;
  *(_QWORD *)&v1[8 * v3 + 32] = 16;
  v6 = v3 + 2;
  if (v4 < v6)
    v1 = sub_10017162C((char *)(v2 > 1), v6, 1, v1);
  *((_QWORD *)v1 + 2) = v6;
  *(_QWORD *)&v1[8 * v5 + 32] = 32;
  return v1;
}

uint64_t sub_10001AEE0()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

_QWORD *sub_10001AF04(uint64_t a1)
{
  uint64_t v1;

  return sub_10001972C(a1, v1);
}

_QWORD *sub_10001AF0C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for StewieState.ServiceStatus(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10001AFC4 + 4 * byte_10024DBE8[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10001AFF8 + 4 * byte_10024DBE3[v4]))();
}

uint64_t sub_10001AFF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001B000(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001B008);
  return result;
}

uint64_t sub_10001B014(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001B01CLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10001B020(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001B028(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StewieState.ServiceStatus()
{
  return &type metadata for StewieState.ServiceStatus;
}

uint64_t getEnumTagSinglePayload for StewieAppId(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s8SOSBuddy11StewieStateV9OffReasonOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_10001B120 + 4 * byte_10024DBF2[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_10001B154 + 4 * byte_10024DBED[v4]))();
}

uint64_t sub_10001B154(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001B15C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001B164);
  return result;
}

uint64_t sub_10001B170(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001B178);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_10001B17C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001B184(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StewieState.StewieService()
{
  return &type metadata for StewieState.StewieService;
}

uint64_t getEnumTagSinglePayload for StewieState.Status(unsigned __int8 *a1, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  unsigned int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
  {
    v6 = *a1;
    v7 = v6 >= 5;
    v8 = v6 - 5;
    if (!v7)
      v8 = -1;
    if (v8 + 1 >= 2)
      return v8;
    else
      return 0;
  }
  else
  {
    v2 = a2 + 5;
    if (a2 + 5 >= 0xFFFF00)
      v3 = 4;
    else
      v3 = 2;
    if (v2 >> 8 < 0xFF)
      v3 = 1;
    if (v2 >= 0x100)
      v4 = v3;
    else
      v4 = 0;
    return ((uint64_t (*)(void))((char *)&loc_10001B1F0 + 4 * byte_10024DBF7[v4]))();
  }
}

uint64_t storeEnumTagSinglePayload for StewieState.Status(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  unsigned int v3;
  int v4;
  uint64_t v5;

  v3 = a3 + 5;
  if (a3 + 5 >= 0xFFFF00)
    v4 = 4;
  else
    v4 = 2;
  if (v3 >> 8 < 0xFF)
    v4 = 1;
  if (v3 >= 0x100)
    LODWORD(v5) = v4;
  else
    LODWORD(v5) = 0;
  if (a3 >= 0xFB)
    v5 = v5;
  else
    v5 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_10001B298 + 4 * byte_10024DC01[v5]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10001B2CC + 4 * byte_10024DBFC[v5]))();
}

uint64_t sub_10001B2CC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001B2D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10001B2DCLL);
  return result;
}

uint64_t sub_10001B2E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10001B2F0);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_10001B2F4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001B2FC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10001B308(unsigned __int8 *a1)
{
  unsigned int v1;

  v1 = *a1;
  if (v1 >= 5)
    return v1 - 4;
  else
    return 0;
}

_BYTE *sub_10001B31C(_BYTE *result, int a2)
{
  if (a2)
    *result = a2 + 4;
  return result;
}

ValueMetadata *type metadata accessor for StewieState.Status()
{
  return &type metadata for StewieState.Status;
}

unint64_t sub_10001B340()
{
  unint64_t result;

  result = qword_100317948;
  if (!qword_100317948)
  {
    result = swift_getWitnessTable(&unk_10024DDC8, &type metadata for StewieState.StewieService);
    atomic_store(result, (unint64_t *)&qword_100317948);
  }
  return result;
}

unint64_t sub_10001B388()
{
  unint64_t result;

  result = qword_100317950;
  if (!qword_100317950)
  {
    result = swift_getWitnessTable(&unk_10024DE30, &type metadata for StewieState.ServiceStatus);
    atomic_store(result, (unint64_t *)&qword_100317950);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for StartRoadsideAssistanceThreadRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for AppEvents.SelectRoadsideProviderRequestedParams(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 16));
}

_QWORD *assignWithCopy for StartRoadsideAssistanceThreadRequest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  a1[1] = a2[1];
  v3 = a1[2];
  v4 = a2[2];
  a1[2] = v4;
  swift_retain(v4);
  swift_release(v3);
  return a1;
}

uint64_t assignWithTake for StartRoadsideAssistanceThreadRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v3);
  return a1;
}

ValueMetadata *type metadata accessor for StartRoadsideAssistanceThreadRequest()
{
  return &type metadata for StartRoadsideAssistanceThreadRequest;
}

__n128 initializeWithCopy for RoadsideAssistanceRequest(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for RoadsideAssistanceRequest(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 41))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RoadsideAssistanceRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 - 255;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 41) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for RoadsideAssistanceRequest()
{
  return &type metadata for RoadsideAssistanceRequest;
}

BOOL sub_10001B570(__int128 *a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v5;
  _OWORD v6[2];
  __int128 v7;
  _OWORD v8[2];

  v2 = a1[1];
  v5 = *a1;
  v6[0] = v2;
  *(_OWORD *)((char *)v6 + 9) = *(__int128 *)((char *)a1 + 25);
  v3 = a2[1];
  v7 = *a2;
  v8[0] = v3;
  *(_OWORD *)((char *)v8 + 9) = *(__int128 *)((char *)a2 + 25);
  return sub_10001B5B8((uint64_t)&v5, (uint64_t)&v7);
}

BOOL sub_10001B5B8(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;

  if (*(_QWORD *)a1 != *(_QWORD *)a2 || ((*(unsigned __int8 *)(a1 + 8) ^ *(unsigned __int8 *)(a2 + 8)) & 1) != 0)
    return 0;
  v2 = *(_BYTE *)(a2 + 24);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  v3 = *(_BYTE *)(a2 + 40);
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
  {
    if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      v3 = 1;
    return (v3 & 1) == 0;
  }
  return (*(_BYTE *)(a2 + 40) & 1) != 0;
}

uint64_t destroy for StringWithCasualVariant(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for StringWithCasualVariant(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for StringWithCasualVariant(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for StringWithCasualVariant(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for StringWithCasualVariant(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StringWithCasualVariant(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for StringWithCasualVariant()
{
  return &type metadata for StringWithCasualVariant;
}

uint64_t sub_10001B7E4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  uint64_t result;

  v4 = *a1;
  v5 = a1[1];
  v6 = a1[2];
  v7 = a1[3];
  v8 = a2[1];
  v9 = a2[2];
  v10 = a2[3];
  v11 = v4 == *a2 && v5 == v8;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v8, 0), result = 0, (v12 & 1) != 0))
  {
    if (v6 == v9 && v7 == v10)
      return 1;
    else
      return _stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v9, v10, 0);
  }
  return result;
}

void sub_10001B874(Swift::String *a1@<X8>)
{
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  id v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;

  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v4._countAndFlagsBits = 0xD000000000000063;
  v19._object = (void *)0x80000001002613B0;
  v4._object = (void *)0x8000000100261340;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v19._countAndFlagsBits = 0xD00000000000009ELL;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v19);

  v7 = objc_msgSend(v2, "mainBundle");
  v8._countAndFlagsBits = 0xD00000000000005FLL;
  v20._object = (void *)0x80000001002613B0;
  v8._object = (void *)0x8000000100261450;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v20._countAndFlagsBits = 0xD00000000000009ELL;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v20);

  v11 = objc_msgSend(v2, "mainBundle");
  v12._countAndFlagsBits = 0xD00000000000005DLL;
  v21._object = (void *)0x80000001002613B0;
  v12._object = (void *)0x80000001002614B0;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v21._countAndFlagsBits = 0xD00000000000009ELL;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)v11, v13, v21);

  v15 = objc_msgSend(v2, "mainBundle");
  v16._countAndFlagsBits = 0xD00000000000006CLL;
  v22._object = (void *)0x80000001002613B0;
  v16._object = (void *)0x8000000100261510;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0xD00000000000009ELL;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v22);

  *a1 = v6;
  a1[1] = v10;
  a1[2] = v14;
  a1[3] = v18;
}

uint64_t sub_10001BA64()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t countAndFlagsBits;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v9;
  Swift::String v10;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v2._countAndFlagsBits = 0xD00000000000002ELL;
  v9._countAndFlagsBits = 0xD0000000000000B7;
  v9._object = (void *)0x80000001002610E0;
  v2._object = (void *)0x80000001002610B0;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v9)._countAndFlagsBits;

  v5 = objc_msgSend(v0, "mainBundle");
  v10._countAndFlagsBits = 0xD000000000000089;
  v10._object = (void *)0x80000001002611C0;
  v6._object = (void *)0x80000001002611A0;
  v6._countAndFlagsBits = 0xD00000000000001ALL;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v10);

  return countAndFlagsBits;
}

uint64_t sub_10001BB90()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t countAndFlagsBits;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v9;
  Swift::String v10;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v2._countAndFlagsBits = 0xD00000000000002BLL;
  v9._countAndFlagsBits = 0xD0000000000000B5;
  v9._object = (void *)0x8000000100261280;
  v2._object = (void *)0x8000000100261250;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v9)._countAndFlagsBits;

  v5 = objc_msgSend(v0, "mainBundle");
  v10._countAndFlagsBits = 0xD000000000000089;
  v10._object = (void *)0x80000001002611C0;
  v6._object = (void *)0x80000001002611A0;
  v6._countAndFlagsBits = 0xD00000000000001ALL;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v10);

  return countAndFlagsBits;
}

uint64_t sub_10001BCBC()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t countAndFlagsBits;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v9;
  Swift::String v10;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v9._countAndFlagsBits = 0xD00000000000008ELL;
  v9._object = (void *)0x8000000100261760;
  v2._object = (void *)0x8000000100261740;
  v2._countAndFlagsBits = 0xD00000000000001BLL;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v9)._countAndFlagsBits;

  v5 = objc_msgSend(v0, "mainBundle");
  v6._countAndFlagsBits = 0xD00000000000001DLL;
  v10._countAndFlagsBits = 0xD000000000000089;
  v10._object = (void *)0x8000000100261810;
  v6._object = (void *)0x80000001002617F0;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v10);

  return countAndFlagsBits;
}

uint64_t sub_10001BDE8()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t countAndFlagsBits;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v9;
  Swift::String v10;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v9._countAndFlagsBits = 0xD00000000000008FLL;
  v9._object = (void *)0x80000001002618C0;
  v2._object = (void *)0x80000001002618A0;
  v2._countAndFlagsBits = 0xD00000000000001CLL;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v9)._countAndFlagsBits;

  v5 = objc_msgSend(v0, "mainBundle");
  v6._countAndFlagsBits = 0xD00000000000001DLL;
  v10._countAndFlagsBits = 0xD000000000000089;
  v10._object = (void *)0x8000000100261810;
  v6._object = (void *)0x80000001002617F0;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v10);

  return countAndFlagsBits;
}

uint64_t sub_10001BF14()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t countAndFlagsBits;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v9;
  Swift::String v10;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v2._countAndFlagsBits = 0xD000000000000028;
  v9._object = (void *)0x80000001002615B0;
  v2._object = (void *)0x8000000100261580;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v9._countAndFlagsBits = 0xD000000000000086;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v9)._countAndFlagsBits;

  v5 = objc_msgSend(v0, "mainBundle");
  v6._countAndFlagsBits = 0xD00000000000001BLL;
  v10._object = (void *)0x80000001002615B0;
  v6._object = (void *)0x8000000100261640;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = 0xD000000000000086;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v10);

  return countAndFlagsBits;
}

uint64_t sub_10001C03C()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t countAndFlagsBits;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v9;
  Swift::String v10;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v2._countAndFlagsBits = 0xD000000000000029;
  v9._object = (void *)0x8000000100261690;
  v2._object = (void *)0x8000000100261660;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v9._countAndFlagsBits = 0xD000000000000087;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v9)._countAndFlagsBits;

  v5 = objc_msgSend(v0, "mainBundle");
  v6._countAndFlagsBits = 0xD00000000000001CLL;
  v10._object = (void *)0x8000000100261690;
  v6._object = (void *)0x8000000100261720;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = 0xD000000000000087;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v10);

  return countAndFlagsBits;
}

uint64_t sub_10001C164()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t countAndFlagsBits;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v9;
  Swift::String v10;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v9._object = (void *)0x8000000100261A30;
  v2._object = (void *)0x8000000100261A10;
  v2._countAndFlagsBits = 0x1000000000000015;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v9._countAndFlagsBits = 0xD000000000000043;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v9)._countAndFlagsBits;

  v5 = objc_msgSend(v0, "mainBundle");
  v10._object = (void *)0x8000000100261A30;
  v6._object = (void *)0x8000000100261A80;
  v6._countAndFlagsBits = 0x1000000000000015;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = 0xD000000000000043;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v10);

  return countAndFlagsBits;
}

uint64_t sub_10001C284()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t countAndFlagsBits;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v9;
  Swift::String v10;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v9._object = (void *)0x8000000100261970;
  v2._object = (void *)0x8000000100261950;
  v2._countAndFlagsBits = 0xD000000000000015;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v9._countAndFlagsBits = 0xD00000000000007CLL;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v9)._countAndFlagsBits;

  v5 = objc_msgSend(v0, "mainBundle");
  v10._object = (void *)0x8000000100261970;
  v6._object = (void *)0x80000001002619F0;
  v6._countAndFlagsBits = 0xD000000000000015;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = 0xD00000000000007CLL;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v10);

  return countAndFlagsBits;
}

uint64_t sub_10001C3B0()
{
  void *v0;
  id v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t countAndFlagsBits;
  id v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v9;
  Swift::String v10;

  v0 = (void *)objc_opt_self(NSBundle);
  v1 = objc_msgSend(v0, "mainBundle");
  v9._object = (void *)0x8000000100261AC0;
  v2._object = (void *)0x8000000100261AA0;
  v2._countAndFlagsBits = 0x1000000000000018;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v9._countAndFlagsBits = 0xD000000000000071;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, (Swift::String_optional)0, (NSBundle)v1, v3, v9)._countAndFlagsBits;

  v5 = objc_msgSend(v0, "mainBundle");
  v10._object = (void *)0x8000000100261AC0;
  v6._object = (void *)0x8000000100261B40;
  v6._countAndFlagsBits = 0x1000000000000018;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  v10._countAndFlagsBits = 0xD000000000000071;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v10);

  return countAndFlagsBits;
}

void sub_10001C4D0(Swift::String *a1@<X8>)
{
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  id v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;

  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v4._countAndFlagsBits = 0xD00000000000002ELL;
  v19._object = (void *)0x8000000100260FB0;
  v4._object = (void *)0x8000000100260F80;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v19._countAndFlagsBits = 0xD00000000000005ELL;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v19);

  v7 = objc_msgSend(v2, "mainBundle");
  v8._countAndFlagsBits = 0xD00000000000002ALL;
  v20._object = (void *)0x8000000100260FB0;
  v8._object = (void *)0x8000000100261010;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v20._countAndFlagsBits = 0xD00000000000005ELL;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v20);

  v11 = objc_msgSend(v2, "mainBundle");
  v12._countAndFlagsBits = 0xD000000000000028;
  v21._object = (void *)0x8000000100260FB0;
  v12._object = (void *)0x8000000100261040;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v21._countAndFlagsBits = 0xD00000000000005ELL;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)v11, v13, v21);

  v15 = objc_msgSend(v2, "mainBundle");
  v16._countAndFlagsBits = 0xD000000000000037;
  v22._object = (void *)0x8000000100260FB0;
  v16._object = (void *)0x8000000100261070;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v22._countAndFlagsBits = 0xD00000000000005ELL;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v22);

  *a1 = v6;
  a1[1] = v10;
  a1[2] = v14;
  a1[3] = v18;
}

unint64_t sub_10001C6C0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t result;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD v57[2];

  v51 = sub_100003DB8(&qword_100317958);
  v48 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51, v6);
  v47 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100317960);
  v54 = *(_QWORD *)(v8 - 8);
  v55 = v8;
  __chkstk_darwin(v8, v9);
  v11 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_100317968);
  v49 = *(_QWORD *)(v12 - 8);
  v50 = v12;
  __chkstk_darwin(v12, v13);
  v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v52 = a2;
    v53 = a3;
    swift_bridgeObjectRetain(a1);
    v18 = (_QWORD *)(a1 + 48);
    v19 = (char *)_swiftEmptyArrayStorage;
    do
    {
      v22 = *(v18 - 1);
      v21 = *v18;
      v23 = HIBYTE(*v18) & 0xFLL;
      if ((*v18 & 0x2000000000000000) == 0)
        v23 = v22 & 0xFFFFFFFFFFFFLL;
      if (v23)
      {
        swift_bridgeObjectRetain(*v18);
        if ((swift_isUniquelyReferenced_nonNull_native(v19) & 1) == 0)
          v19 = sub_100171738(0, *((_QWORD *)v19 + 2) + 1, 1, v19);
        v25 = *((_QWORD *)v19 + 2);
        v24 = *((_QWORD *)v19 + 3);
        if (v25 >= v24 >> 1)
          v19 = sub_100171738((char *)(v24 > 1), v25 + 1, 1, v19);
        *((_QWORD *)v19 + 2) = v25 + 1;
        v20 = &v19[16 * v25];
        *((_QWORD *)v20 + 4) = v22;
        *((_QWORD *)v20 + 5) = v21;
      }
      v18 += 5;
      --v17;
    }
    while (v17);
    v14 = swift_bridgeObjectRelease(a1);
    a2 = v52;
    a3 = v53;
    v26 = *((_QWORD *)v19 + 2);
    if (!v26)
      goto LABEL_20;
  }
  else
  {
    v19 = (char *)_swiftEmptyArrayStorage;
    v26 = _swiftEmptyArrayStorage[2];
    if (!v26)
    {
LABEL_20:
      swift_bridgeObjectRelease(v19);
      return 0;
    }
  }
  v27 = HIBYTE(a3) & 0xF;
  if ((a3 & 0x2000000000000000) == 0)
    v27 = a2 & 0xFFFFFFFFFFFFLL;
  if (!v27)
    goto LABEL_20;
  if (v26 >= 2)
  {
    v56 = v19;
    (*(void (**)(char *, _QWORD, uint64_t, __n128))(v54 + 104))(v11, enum case for ListFormatStyle.ListType.and<A, B>(_:), v55, v14);
    v29 = v47;
    v28 = v48;
    v30 = v51;
    (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, enum case for ListFormatStyle.Width.standard<A, B>(_:), v51);
    v31 = sub_100003DB8(&qword_100317980);
    v32 = sub_1000084FC(&qword_100317988, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
    static FormatStyle.list<A>(type:width:)(v11, v29, v31, v32);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v29, v30);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v11, v55);
    v33 = sub_1000084FC((unint64_t *)&unk_100317990, &qword_100317968, (uint64_t)&protocol conformance descriptor for ListFormatStyle<A, B>);
    v34 = v31;
    v35 = v50;
    Sequence.formatted<A>(_:)(v57, v16, v34, v50, v32, v33);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v16, v35);
    swift_bridgeObjectRelease(v19);
    v36 = v57[0];
    v37 = v57[1];
    v38 = sub_100003DB8(&qword_100317970);
    v39 = swift_allocObject(v38, 112, 7);
    *(_OWORD *)(v39 + 16) = xmmword_10024DEE0;
    *(_QWORD *)(v39 + 56) = &type metadata for String;
    v40 = sub_10001CAF4();
    *(_QWORD *)(v39 + 32) = v36;
    *(_QWORD *)(v39 + 40) = v37;
    *(_QWORD *)(v39 + 96) = &type metadata for String;
    *(_QWORD *)(v39 + 104) = v40;
    *(_QWORD *)(v39 + 64) = v40;
    *(_QWORD *)(v39 + 72) = a2;
    *(_QWORD *)(v39 + 80) = a3;
    swift_bridgeObjectRetain(a3);
    return String.init(format:_:)(0x25202D2040243125, 0xEC0000002E402432);
  }
  v42 = sub_100003DB8(&qword_100317970);
  v43 = swift_allocObject(v42, 112, 7);
  *(_OWORD *)(v43 + 16) = xmmword_10024DEE0;
  *(_QWORD *)(v43 + 56) = &type metadata for String;
  result = sub_10001CAF4();
  *(_QWORD *)(v43 + 64) = result;
  if (*((_QWORD *)v19 + 2))
  {
    v44 = result;
    v46 = *((_QWORD *)v19 + 4);
    v45 = *((_QWORD *)v19 + 5);
    swift_bridgeObjectRetain(v45);
    swift_bridgeObjectRelease(v19);
    *(_QWORD *)(v43 + 32) = v46;
    *(_QWORD *)(v43 + 40) = v45;
    *(_QWORD *)(v43 + 96) = &type metadata for String;
    *(_QWORD *)(v43 + 104) = v44;
    *(_QWORD *)(v43 + 72) = a2;
    *(_QWORD *)(v43 + 80) = a3;
    swift_bridgeObjectRetain(a3);
    return String.init(format:_:)(0x25202D2040243125, 0xEC0000002E402432);
  }
  __break(1u);
  return result;
}

unint64_t sub_10001CAF4()
{
  unint64_t result;

  result = qword_100317978;
  if (!qword_100317978)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100317978);
  }
  return result;
}

float ConnectionAssistantLocationDot.init(offset:innerRadius:outerRadius:innerColor:outerColor:opacity:)@<S0>(uint64_t a1@<X8>, __n128 a2@<Q0>, float32x2_t a3@<D1>, float32_t a4@<S2>, __n128 a5@<Q3>, __n128 a6@<Q4>, float a7@<S5>)
{
  float result;

  a3.f32[1] = a4;
  __asm { FMOV            V2.2S, #10.0 }
  *(__n128 *)a1 = a2;
  *(float32x2_t *)(a1 + 16) = vdiv_f32(vrnda_f32(vmul_f32(a3, _D2)), _D2);
  result = roundf(a7 * 1000.0) / 1000.0;
  *(__n128 *)(a1 + 32) = a5;
  *(__n128 *)(a1 + 48) = a6;
  *(float *)(a1 + 64) = result;
  return result;
}

double sub_10001CB74(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = sub_10001CBB0(a1, (SEL *)&selRef_whiteColor, (float32x4_t *)&qword_10033FBE0).n128_u64[0];
  return result;
}

double sub_10001CB88(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = sub_10001CBB0(a1, (SEL *)&selRef_systemGreenColor, (float32x4_t *)&xmmword_10033FBF0).n128_u64[0];
  return result;
}

double sub_10001CB9C(uint64_t a1)
{
  double result;

  *(_QWORD *)&result = sub_10001CBB0(a1, (SEL *)&selRef_systemOrangeColor, (float32x4_t *)&xmmword_10033FC00).n128_u64[0];
  return result;
}

__n128 sub_10001CBB0(uint64_t a1, SEL *a2, float32x4_t *a3)
{
  id v4;
  float64x2_t v5;
  float64x2_t v6;
  __n128 result;
  float32x4_t v8;
  float64_t v9;
  float64_t v10;
  float64_t v11;
  float64_t v12;

  v4 = objc_msgSend((id)objc_opt_self(UIColor), *a2);
  v11 = 0.0;
  v12 = 0.0;
  v9 = 0.0;
  v10 = 0.0;
  objc_msgSend(v4, "getRed:green:blue:alpha:", &v12, &v11, &v10, &v9);
  v5.f64[0] = v12;
  v6.f64[0] = v10;
  v5.f64[1] = v11;
  v6.f64[1] = v9;
  v8 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v5), v6);

  result = (__n128)v8;
  *a3 = v8;
  return result;
}

__n128 sub_10001CC54()
{
  id v0;
  void *v1;
  id v2;
  float64x2_t v3;
  float64x2_t v4;
  __n128 result;
  float32x4_t v6;
  _QWORD aBlock[5];
  uint64_t v8;
  float64_t v9;
  float64_t v10;
  float64_t v11;

  v0 = objc_allocWithZone((Class)UIColor);
  aBlock[4] = sub_10001CD58;
  v8 = 0;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10001CFBC;
  aBlock[3] = &unk_1002E5580;
  v1 = _Block_copy(aBlock);
  v2 = objc_msgSend(v0, "initWithDynamicProvider:", v1);
  _Block_release(v1);
  swift_release(v8);
  aBlock[0] = 0;
  v10 = 0.0;
  v11 = 0.0;
  v9 = 0.0;
  objc_msgSend(v2, "getRed:green:blue:alpha:", aBlock, &v11, &v10, &v9);
  *(_QWORD *)&v3.f64[0] = aBlock[0];
  v4.f64[0] = v10;
  v3.f64[1] = v11;
  v4.f64[1] = v9;
  v6 = vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(v3), v4);

  result = (__n128)v6;
  xmmword_10033FC10 = (__int128)v6;
  return result;
}

id sub_10001CD58(void *a1)
{
  void *v1;
  id v2;
  id v3;

  if (objc_msgSend(a1, "userInterfaceStyle") != (id)2)
    return objc_msgSend((id)objc_opt_self(UIColor), "systemGrayColor");
  v1 = (void *)UITraitCollection.modifyingTraits(_:)(sub_10001CE1C, 0);
  v2 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray2Color");
  v3 = objc_msgSend(v2, "resolvedColorWithTraitCollection:", v1);

  return v3;
}

uint64_t sub_10001CE1C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(a1 + 24);
  v2 = *(_QWORD *)(a1 + 32);
  sub_10001D2C4(a1, v1);
  return UIMutableTraits.accessibilityContrast.setter(1, v1, v2);
}

__n128 ConnectionAssistantLocationDot.offset.getter()
{
  uint64_t v0;

  return *(__n128 *)v0;
}

float ConnectionAssistantLocationDot.innerRadius.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 16);
}

float ConnectionAssistantLocationDot.outerRadius.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 20);
}

__n128 ConnectionAssistantLocationDot.innerColor.getter()
{
  __n128 *v0;

  return v0[2];
}

__n128 ConnectionAssistantLocationDot.outerColor.getter()
{
  __n128 *v0;

  return v0[3];
}

float ConnectionAssistantLocationDot.opacity.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 64);
}

double ConnectionAssistantLocationDot.Projection.outerDot.getter(double a1, double a2, double a3)
{
  return a3;
}

float32x2_t ConnectionAssistantLocationDot.Projection.boundingBox.getter(float32x2_t a1, int32x2_t a2, float32x2_t a3, int32x2_t a4)
{
  return vminnm_f32(vsub_f32(a1, (float32x2_t)vdup_lane_s32(a2, 0)), vsub_f32(a3, (float32x2_t)vdup_lane_s32(a4, 0)));
}

uint64_t ConnectionAssistantLocationDot.project(from:camera:)(uint64_t a1, __n128 a2)
{
  float32x2_t *v2;
  float32x4_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;

  *(float32x2_t *)v4.f32 = vadd_f32((float32x2_t)a2.n128_u64[0], *v2);
  v4.f32[2] = a2.n128_f32[2] + v2[1].f32[0];
  v4.i32[3] = 0;
  ConnectionAssistantCamera.projectUV(point:)(v4);
  if ((v6 & 1) != 0)
    return 0;
  v7 = v5;
  vmul_n_f32(v2[2], ConnectionAssistantCamera.Viewport.normalizedPointSize.getter(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(double *)(a1 + 16)));
  return v7;
}

BOOL sub_10001CF64(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  _OWORD v7[4];
  int v8;
  _OWORD v9[4];
  int v10;

  v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  v8 = *(_DWORD *)(a1 + 64);
  v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  v4 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v10 = *(_DWORD *)(a2 + 64);
  v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return _s8SOSBuddy30ConnectionAssistantLocationDotV23__derived_struct_equalsySbAC_ACtFZ_0((float *)v7, (float *)v9);
}

id sub_10001CFBC(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t (*v4)(void);
  id v5;
  void *v6;

  v4 = *(uint64_t (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v6 = (void *)v4();
  swift_release(v3);

  return v6;
}

BOOL _s8SOSBuddy30ConnectionAssistantLocationDotV23__derived_struct_equalsySbAC_ACtFZ_0(float *a1, float *a2)
{
  uint64_t v2;
  __int128 v3;
  __int128 v4;
  BOOL v5;
  uint64_t v6;
  float v7;
  float v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  BOOL v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  BOOL v16;
  float v17;
  float v18;
  float v20;
  float v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;

  v2 = 0;
  v3 = *(_OWORD *)a1;
  v4 = *(_OWORD *)a2;
  while (1)
  {
    v26 = v3;
    v7 = *(float *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v27 = v4;
    v8 = *(float *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v2 & 3)));
    v5 = v7 == v8;
    if (v2 == 2)
      break;
    while (1)
    {
      ++v2;
      if (v5)
        break;
      v5 = 0;
      v6 = 0;
      if (v2 == 2)
        return v6;
    }
  }
  if (v7 != v8 || a1[4] != a2[4] || a1[5] != a2[5])
    return 0;
  v9 = 0;
  v10 = *((_OWORD *)a1 + 2);
  v11 = *((_OWORD *)a2 + 2);
  while (1)
  {
    v24 = v10;
    v17 = *(float *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    v25 = v11;
    v18 = *(float *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
    v12 = v17 == v18;
    if (v9 == 3)
      break;
    while (1)
    {
      ++v9;
      if (v12)
        break;
      v12 = 0;
      v6 = 0;
      if (v9 == 3)
        return v6;
    }
  }
  if (v17 != v18)
    return 0;
  v13 = 0;
  v14 = *((_OWORD *)a1 + 3);
  v15 = *((_OWORD *)a2 + 3);
  while (1)
  {
    v22 = v14;
    v20 = *(float *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
    v23 = v15;
    v21 = *(float *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
    v16 = v20 == v21;
    if (v13 == 3)
      break;
    while (1)
    {
      ++v13;
      if (v16)
        break;
      v16 = 0;
      v6 = 0;
      if (v13 == 3)
        return v6;
    }
  }
  return v20 == v21 && a1[16] == a2[16];
}

__n128 initializeWithCopy for ConnectionAssistantLocationDot(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantLocationDot(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 68))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantLocationDot(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 64) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 68) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantLocationDot()
{
  return &type metadata for ConnectionAssistantLocationDot;
}

__n128 initializeWithCopy for ConnectionAssistantLocationDot.Projection(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantLocationDot.Projection(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 28))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantLocationDot.Projection(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 28) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantLocationDot.Projection()
{
  return &type metadata for ConnectionAssistantLocationDot.Projection;
}

uint64_t sub_10001D2AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001D2BC(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001D2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t ConnectionAssistantStarsRenderer.__allocating_init(device:buffers:renderPipelines:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, 96, 7);
  ConnectionAssistantStarsRenderer.init(device:buffers:renderPipelines:)(a1, a2, a3);
  return v7;
}

_QWORD *ConnectionAssistantStarsRenderer.init(device:buffers:renderPipelines:)(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  id v7;
  id v8;
  id v9;
  double v10;
  id v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  swift_unknownObjectRetain_n();
  swift_retain(a2);
  v7 = objc_msgSend(a1, "newBufferWithLength:options:", 64, 1, swift_retain(a3).n128_f64[0]);
  if (v7
    && (swift_unknownObjectRelease(a1),
        v3[5] = v7,
        (v8 = objc_msgSend((id)swift_unknownObjectRetain(a1), "newBufferWithLength:options:", 96, 1)) != 0))
  {
    v9 = v8;
    *(_QWORD *)&v10 = swift_unknownObjectRelease(a1).n128_u64[0];
    v3[6] = v9;
    v11 = objc_msgSend(a1, "newBufferWithLength:options:", 4, 1, v10);
    if (v11)
    {
      v12 = v11;
      swift_release(a2);
      swift_release(a3);
      swift_unknownObjectRelease(a1);
      v3[7] = v12;
      return v3;
    }
    v16 = sub_10001D534();
    v17 = swift_allocError(&type metadata for ConnectionAssistantRenderer.Buffers.Error, v16, 0, 0);
    swift_willThrow(v17);
    swift_release(a2);
    swift_release(a3);
    v15 = 1;
  }
  else
  {
    v13 = sub_10001D534();
    v14 = swift_allocError(&type metadata for ConnectionAssistantRenderer.Buffers.Error, v13, 0, 0);
    swift_willThrow(v14);
    swift_release(a2);
    swift_release(a3);
    swift_unknownObjectRelease(a1);
    v15 = 0;
  }
  swift_unknownObjectRelease(a1);
  swift_unknownObjectRelease(v3[2]);
  swift_release(v3[3]);
  swift_release(v3[4]);
  if (v7)
    swift_unknownObjectRelease(v3[5]);
  if (v15)
    swift_unknownObjectRelease(v3[6]);
  sub_10001D578(v3[8], v3[9], v3[10], v3[11]);
  v18 = type metadata accessor for ConnectionAssistantStarsRenderer();
  swift_deallocPartialClassInstance(v3, v18, 96, 7);
  return v3;
}

unint64_t sub_10001D534()
{
  unint64_t result;

  result = qword_1003179A0;
  if (!qword_1003179A0)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for ConnectionAssistantRenderer.Buffers.Error, &type metadata for ConnectionAssistantRenderer.Buffers.Error);
    atomic_store(result, (unint64_t *)&qword_1003179A0);
  }
  return result;
}

uint64_t sub_10001D578(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_unknownObjectRelease(a2);
    return swift_unknownObjectRelease(a4);
  }
  return result;
}

uint64_t type metadata accessor for ConnectionAssistantStarsRenderer()
{
  return objc_opt_self(_TtC8SOSBuddy32ConnectionAssistantStarsRenderer);
}

id *sub_10001D5C8(id *result, uint64_t *a2)
{
  uint64_t v2;
  id v3;
  void *v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  _OWORD v11[6];

  v2 = *a2;
  if ((unsigned __int128)(*a2 * (__int128)96) >> 64 == (96 * *a2) >> 63)
  {
    v3 = objc_msgSend(result[2], "newBufferWithLength:options:");
    v4 = v3;
    if (!v3)
    {
      v9 = sub_10001D534();
      v10 = swift_allocError(&type metadata for ConnectionAssistantRenderer.Buffers.Error, v9, 0, 0);
      swift_willThrow(v10);
      return (id *)v4;
    }
    v5 = objc_msgSend((id)swift_unknownObjectRetain(v3), "contents");
    result = v4;
    if ((v2 & 0x8000000000000000) == 0)
    {
      for (; v2; --v2)
      {
        ConnectionAssistantStars.makeStar()((uint64_t)v11);
        v6 = v11[3];
        v5[2] = v11[2];
        v5[3] = v6;
        v7 = v11[5];
        v5[4] = v11[4];
        v5[5] = v7;
        v8 = v11[1];
        *v5 = v11[0];
        v5[1] = v8;
        v5 += 6;
      }
      return (id *)v4;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_10001D6C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  void *v3;
  uint64_t v4;
  char *v5;
  id v7;
  id v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;

  if ((unint64_t)(a2 - 0x800000000000000) >> 60 != 15)
  {
    __break(1u);
LABEL_13:
    __break(1u);
LABEL_14:
    swift_once(&qword_1003158F0, sub_100130FFC);
    goto LABEL_6;
  }
  v7 = objc_msgSend(*(id *)(a1 + 16), "newBufferWithLength:options:", 16 * a2, 1);
  v3 = v7;
  if (!v7)
  {
LABEL_10:
    v16 = sub_10001D534();
    v17 = swift_allocError(&type metadata for ConnectionAssistantRenderer.Buffers.Error, v16, 0, 0);
    swift_willThrow(v17);
    return v3;
  }
  v5 = (char *)objc_msgSend((id)swift_unknownObjectRetain(v7), "contents");
  v8 = v3;
  v4 = *a3;
  if (v4 < 0)
    goto LABEL_13;
  if (!v4)
    return v3;
  if (qword_1003158F0 != -1)
    goto LABEL_14;
LABEL_6:
  v9 = 0;
  v10 = static ConnectionAssistantRenderer.Buffers.texCoords;
  v11 = qword_10033FF80;
  v12 = qword_10033FF88;
  v13 = qword_10033FF90;
  v14 = v5 + 48;
  v15 = 1;
  while (1)
  {
    *((_DWORD *)v14 - 12) = v9;
    *((_QWORD *)v14 - 5) = v10;
    *((_DWORD *)v14 - 8) = v9;
    *((_QWORD *)v14 - 3) = v11;
    *((_DWORD *)v14 - 4) = v9;
    *((_QWORD *)v14 - 1) = v12;
    *(_DWORD *)v14 = v9;
    *((_QWORD *)v14 + 1) = v11;
    *((_DWORD *)v14 + 4) = v9;
    *((_QWORD *)v14 + 3) = v12;
    *((_DWORD *)v14 + 8) = v9;
    *((_QWORD *)v14 + 5) = v13;
    if (v15 == v4)
      return v3;
    v9 = v15;
    v14 += 96;
    if (++v15 == 0x100000001)
    {
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
      __break(1u);
      goto LABEL_10;
    }
  }
}

void ConnectionAssistantStarsRenderer.compute(dt:stars:computeCommandEncoder:)(uint64_t a1, void *a2, double a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id *v13;
  id *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  float v24;
  void *v25;
  float *v26;
  id v27;
  uint64_t v28;
  void *v29;
  NSString v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  int64_t v37;
  __int128 v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  int64x2_t v43;
  uint64_t v44;
  int64x2_t v45;

  v7 = *(_QWORD *)(v3 + 72);
  if (v7)
  {
    v9 = *(_QWORD *)(v3 + 80);
    v8 = *(_QWORD *)(v3 + 88);
    v10 = *(_QWORD *)(v3 + 64);
    sub_10001DC98(v10, *(_QWORD *)(v3 + 72), v9, v8);
    sub_10001D578(v10, v7, v9, v8);
    v11 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 == v10)
    {
      v12 = *(_QWORD *)(v3 + 72);
      if (!v12)
        return;
      goto LABEL_8;
    }
  }
  else
  {
    v11 = *(_QWORD *)a1;
  }
  v13 = sub_10001D5C8((id *)v3, (uint64_t *)a1);
  if ((unsigned __int128)(v11 * (__int128)6) >> 64 != (6 * v11) >> 63)
  {
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  v14 = v13;
  v15 = sub_10001D6C4(v3, 6 * v11, (uint64_t *)a1);
  v17 = *(_QWORD *)(v3 + 64);
  v16 = *(_QWORD *)(v3 + 72);
  v18 = *(_QWORD *)(v3 + 80);
  v19 = *(_QWORD *)(v3 + 88);
  *(_QWORD *)(v3 + 64) = v11;
  *(_QWORD *)(v3 + 72) = v14;
  *(_QWORD *)(v3 + 80) = 6 * v11;
  *(_QWORD *)(v3 + 88) = v15;
  sub_10001D578(v17, v16, v18, v19);
  v12 = *(_QWORD *)(v3 + 72);
  if (!v12)
    return;
LABEL_8:
  v20 = *(_QWORD *)(v3 + 64);
  if ((v20 & 0x8000000000000000) != 0)
  {
LABEL_36:
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
LABEL_38:
    __break(1u);
    return;
  }
  if (HIDWORD(v20))
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Not enough bits to represent the passed value", 45, 2, "Swift/Integers.swift", 20, 2, 3455, 0);
    goto LABEL_38;
  }
  v22 = *(_QWORD *)(v3 + 80);
  v21 = *(_QWORD *)(v3 + 88);
  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    v23 = 0;
    v40 = 0;
    v41 = 0u;
    v39 = 0u;
  }
  else
  {
    v23 = *(_DWORD *)(a1 + 48);
    v41 = *(_OWORD *)(a1 + 16);
    v39 = *(_OWORD *)(a1 + 32);
    v40 = *(_QWORD *)(a1 + 52);
  }
  v24 = a3;
  v25 = *(void **)(v3 + 40);
  swift_unknownObjectRetain(v25);
  sub_10001DC98(v20, v12, v22, v21);
  v26 = (float *)objc_msgSend(v25, "contents");
  v27 = v25;
  *(_DWORD *)v26 = v20;
  v26[1] = v24;
  v26[2] = 0.99;
  *((_OWORD *)v26 + 1) = v41;
  *((_OWORD *)v26 + 2) = v39;
  *((_DWORD *)v26 + 12) = v23;
  *((_QWORD *)v26 + 7) = v40;
  v28 = ConnectionAssistantRenderer.RenderPipelines.starKernelPipelineState.getter();
  if (!v28)
  {
    swift_unknownObjectRelease(v21);
    swift_unknownObjectRelease(v12);
    return;
  }
  v29 = (void *)v28;
  v30 = String._bridgeToObjectiveC()();
  objc_msgSend(a2, "setLabel:", v30);

  objc_msgSend(a2, "setComputePipelineState:", v29);
  objc_msgSend(a2, "setBuffer:offset:atIndex:", v27, 0, 0);
  objc_msgSend(a2, "setBuffer:offset:atIndex:", v12, 0, 1);
  v31 = (uint64_t)objc_msgSend(v29, "threadExecutionWidth");
  v32 = (uint64_t)objc_msgSend(v29, "maxTotalThreadsPerThreadgroup");
  v33 = (uint64_t)objc_msgSend(v29, "threadExecutionWidth");
  if (!v33)
  {
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v32 == 0x8000000000000000 && v33 == -1)
    goto LABEL_34;
  v34 = v31 * (v32 / v33);
  if ((unsigned __int128)(v31 * (__int128)(v32 / v33)) >> 64 != v34 >> 63)
    goto LABEL_29;
  v35 = v20 + v34;
  if (__OFADD__(v20, v34))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v36 = __OFSUB__(v35, 1);
  v37 = v35 - 1;
  if (v36)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  if (!v34)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v37 == 0x8000000000000000 && v34 == -1)
    goto LABEL_35;
  v44 = v37 / v34;
  v45 = vdupq_n_s64(1uLL);
  v42 = v31 * (v32 / v33);
  v43 = v45;
  objc_msgSend(a2, "dispatchThreadgroups:threadsPerThreadgroup:", &v44, &v42);
  swift_unknownObjectRelease(v29);
  swift_unknownObjectRelease(v21);
  swift_unknownObjectRelease(v12);
}

uint64_t sub_10001DC98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_unknownObjectRetain(a2);
    return swift_unknownObjectRetain(a4);
  }
  return result;
}

void ConnectionAssistantStarsRenderer.render(stars:camera:origin:opacity:renderCommandEncoder:)(__n128 a1, float a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_10001DD44(a4, a5, a1, a2);
}

_QWORD *ConnectionAssistantStarsRenderer.deinit()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_unknownObjectRelease(v0[5]);
  swift_unknownObjectRelease(v0[6]);
  swift_unknownObjectRelease(v0[7]);
  sub_10001D578(v0[8], v0[9], v0[10], v0[11]);
  return v0;
}

uint64_t ConnectionAssistantStarsRenderer.__deallocating_deinit()
{
  uint64_t v0;

  ConnectionAssistantStarsRenderer.deinit();
  return swift_deallocClassInstance(v0, 96, 7);
}

void sub_10001DD44(uint64_t a1, void *a2, __n128 a3, float a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  float *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  float v17;
  uint64_t v18;
  float v19;
  float v20;
  void *v21;
  float *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;

  v5 = v4[9];
  if (v5)
  {
    v10 = v4[10];
    v9 = v4[11];
    v12 = (void *)v4[7];
    v11 = v4[8];
    swift_unknownObjectRetain(v12);
    sub_10001DC98(v11, v5, v10, v9);
    v13 = (float *)objc_msgSend(v12, "contents");
    v14 = v12;
    *v13 = a4;
    v15 = *(_QWORD *)a1;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = 1.0;
    LODWORD(v18) = 1.0;
    if (*(_QWORD *)a1)
    {
      LODWORD(v18) = 1.0;
      if (v16)
      {
        v19 = (float)v15 / (float)v16;
        v17 = fminf(v19, 1.0);
        *(float *)&v18 = fmaxf(v19, 1.0);
      }
    }
    *((float *)&v18 + 1) = 1.0 / v17;
    v31 = v18;
    v20 = ConnectionAssistantCamera.Viewport.normalizedPointSize.getter(v15, v16, *(double *)(a1 + 16));
    v29 = *(_OWORD *)(a1 + 336);
    v30 = *(_OWORD *)(a1 + 320);
    v27 = *(_OWORD *)(a1 + 368);
    v28 = *(_OWORD *)(a1 + 352);
    v21 = (void *)v4[6];
    v22 = (float *)objc_msgSend((id)swift_unknownObjectRetain(v21), "contents");
    v23 = v21;
    *(__n128 *)v22 = a3;
    *((_QWORD *)v22 + 2) = v31;
    v22[6] = v20;
    *((_OWORD *)v22 + 2) = v30;
    *((_OWORD *)v22 + 3) = v29;
    *((_OWORD *)v22 + 4) = v28;
    *((_OWORD *)v22 + 5) = v27;
    v24 = sub_10022634C(0);
    if (v24)
    {
      v25 = v24;
      v26 = String._bridgeToObjectiveC()();
      objc_msgSend(a2, "setLabel:", v26);

      objc_msgSend(a2, "setRenderPipelineState:", v25);
      objc_msgSend(a2, "setVertexBuffer:offset:atIndex:", v23, 0, 0);
      objc_msgSend(a2, "setVertexBuffer:offset:atIndex:", v5, 0, 1);
      objc_msgSend(a2, "setVertexBuffer:offset:atIndex:", v9, 0, 2);
      objc_msgSend(a2, "setFragmentBuffer:offset:atIndex:", v14, 0, 0);
      objc_msgSend(a2, "drawPrimitives:vertexStart:vertexCount:", 3, 0, v10);
      swift_unknownObjectRelease(v25);
    }
    swift_unknownObjectRelease(v9);
    swift_unknownObjectRelease(v5);
  }
}

uint64_t destroy for ConnectionAssistantStarsRenderer.StarsBuffers(uint64_t a1)
{
  swift_unknownObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_unknownObjectRelease(*(_QWORD *)(a1 + 24));
}

_QWORD *initializeWithCopy for ConnectionAssistantStarsRenderer.StarsBuffers(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_unknownObjectRetain(v3);
  swift_unknownObjectRetain(v4);
  return a1;
}

_QWORD *assignWithCopy for ConnectionAssistantStarsRenderer.StarsBuffers(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_unknownObjectRetain(v4);
  swift_unknownObjectRelease(v5);
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_unknownObjectRetain(v6);
  swift_unknownObjectRelease(v7);
  return a1;
}

_QWORD *assignWithTake for ConnectionAssistantStarsRenderer.StarsBuffers(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a2[1];
  v5 = a1[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_unknownObjectRelease(v5);
  v6 = a2[3];
  v7 = a1[3];
  a1[2] = a2[2];
  a1[3] = v6;
  swift_unknownObjectRelease(v7);
  return a1;
}

ValueMetadata *type metadata accessor for ConnectionAssistantStarsRenderer.StarsBuffers()
{
  return &type metadata for ConnectionAssistantStarsRenderer.StarsBuffers;
}

_QWORD *sub_10001E0DC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  _QWORD *v43;
  __n128 v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59[3];
  id v60;
  uint64_t v61;

  v1 = v0;
  v2 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8((uint64_t *)&unk_100326490);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[4] = 0;
  v11 = type metadata accessor for TimerBasedHysteresisScheduler();
  v12 = swift_allocObject(v11, 16, 7);
  v13 = sub_100003DB8(&qword_100317BE0);
  v14 = swift_allocObject(v13, 136, 7);
  swift_retain(v1);
  v1[5] = sub_1000211D8(v12, 0x724765685466666FLL, 0xEE0065646F4D6469, (uint64_t)sub_10001F3FC, 0, v14);
  v57 = v10;
  v58 = v6;
  v56 = v5;
  v54 = v7;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100209204((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v15 = &_swiftEmptySetSingleton;
  }
  v1[6] = v15;
  v55 = v1 + 6;
  swift_release(v1);
  v16 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v1[2] = PassthroughSubject.init()();
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v1[3] = PassthroughSubject.init()();
  v17 = qword_100315820;
  swift_retain(v1);
  if (v17 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v18 = type metadata accessor for Logger(0);
  sub_10000D744(v18, (uint64_t)qword_10033FD18);
  v20 = swift_retain_n(v1, v19);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(12, -1);
    v24 = swift_slowAlloc(32, -1);
    v59[0] = v24;
    *(_DWORD *)v23 = 136446210;
    v60 = v1;
    v25 = type metadata accessor for OffTheGridModel();
    v26 = swift_retain(v1);
    v27 = String.init<A>(describing:)(&v60, v25, v26);
    v29 = v28;
    v60 = (id)sub_100172BEC(v27, v28, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v60, &v61, v23 + 4, v23 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v29);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "init: %{public}s", v23, 0xCu);
    swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v23, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  v59[0] = *(_QWORD *)(v1[5] + 16);
  v30 = v59[0];
  v31 = sub_10000D75C();
  v32 = swift_retain(v30);
  v60 = (id)static OS_dispatch_queue.main.getter(v32);
  v33 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56);
  v34 = (uint64_t)v56;
  v53(v56, 1, 1, v33);
  v35 = sub_1000084FC((unint64_t *)&qword_1003264A0, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v52 = v35;
  v51 = sub_10002158C();
  v36 = v57;
  Publisher.receive<A>(on:options:)(&v60, v34, v16, v31, v35, v51);
  sub_1000215D4(v34);

  swift_release(v59[0]);
  v37 = swift_allocObject(&unk_1002E5768, 32, 7);
  *(_QWORD *)(v37 + 16) = sub_100021614;
  *(_QWORD *)(v37 + 24) = v1;
  v38 = sub_1000084FC((unint64_t *)&unk_1003264B0, (uint64_t *)&unk_100326490, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v50 = v38;
  v39 = swift_retain(v1);
  v40 = v58;
  v41 = Publisher<>.sink(receiveValue:)(sub_100021640, v37, v58, v38, v39);
  swift_release(v37);
  v42 = *(void (**)(char *, uint64_t))(v54 + 8);
  v42(v36, v40);
  v43 = v55;
  swift_beginAccess(v55, v59, 33, 0);
  AnyCancellable.store(in:)(v43);
  swift_endAccess(v59);
  swift_release(v41);
  v59[0] = *(_QWORD *)(v1[5] + 24);
  v44 = swift_retain(v59[0]);
  v60 = (id)static OS_dispatch_queue.main.getter(v44);
  v53((char *)v34, 1, 1, v33);
  Publisher.receive<A>(on:options:)(&v60, v34, v16, v31, v52, v51);
  sub_1000215D4(v34);

  swift_release(v59[0]);
  v45 = swift_allocObject(&unk_1002E5790, 32, 7);
  *(_QWORD *)(v45 + 16) = sub_100021648;
  *(_QWORD *)(v45 + 24) = v1;
  v46 = swift_retain(v1);
  v47 = Publisher<>.sink(receiveValue:)(sub_1000216F8, v45, v40, v50, v46);
  swift_release(v45);
  v42(v36, v40);
  swift_beginAccess(v43, v59, 33, 0);
  AnyCancellable.store(in:)(v43);
  swift_endAccess(v59);
  swift_release(v47);
  swift_release(v1);
  return v1;
}

double sub_10001E6B8()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_100003DB8(&qword_10032B0E0);
  v1 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  *(_QWORD *)&result = Subject<>.send()(v0, v1).n128_u64[0];
  return result;
}

double sub_10001E714()
{
  uint64_t v0;
  uint64_t v1;
  double result;

  v0 = sub_100003DB8(&qword_10032B0E0);
  v1 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  *(_QWORD *)&result = Subject<>.send()(v0, v1).n128_u64[0];
  return result;
}

uint64_t sub_10001E770()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
}

uint64_t sub_10001E794()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = swift_retain_n(v0, 2, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v1;
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for OffTheGridModel();
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v9, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "deinit: %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 24));

  swift_release(*(_QWORD *)(v1 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 48));
  return v1;
}

uint64_t sub_10001E978()
{
  uint64_t v0;

  sub_10001E794();
  return swift_deallocClassInstance(v0, 56, 7);
}

uint64_t type metadata accessor for OffTheGridModel()
{
  return objc_opt_self(_TtC8SOSBuddy15OffTheGridModel);
}

void sub_10001E9B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_100315878 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315878, sub_1000D9778);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FE20);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "start", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = swift_allocObject(&unk_1002E5650, 24, 7);
  swift_weakInit(v14 + 16, v1);
  v15 = objc_allocWithZone((Class)type metadata accessor for IdentityServicesAgent());
  v16 = sub_1002024B8((uint64_t)sub_1000216C4, v14);
  v17 = sub_100202CD8();
  if ((v17 & 1) != 0)
  {
    v18 = *(void **)(v1 + 32);
    *(_QWORD *)(v1 + 32) = v16;
    v16 = v18;
  }
  else
  {
    v19 = Logger.logObject.getter(v17);
    v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Failed to start IdentityServicesAgent", v21, 2u);
      swift_slowDealloc(v21, -1, -1);
    }

  }
}

uint64_t sub_10001EC00(__int16 a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _BYTE v7[24];

  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v7, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 40);
    swift_retain(v6);
    swift_release(v5);
    sub_10001F41C(a1);
    return swift_release(v6);
  }
  return result;
}

uint64_t sub_10001EC7C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_100315878 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315878, sub_1000D9778);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FE20);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "stop", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = *(void **)(v1 + 32);
  if (v14)
  {
    v15 = v14;
    sub_1002035D8();

    v14 = *(void **)(v1 + 32);
  }
  *(_QWORD *)(v1 + 32) = 0;

  v16 = *(_QWORD *)(v1 + 40);
  swift_retain(v16);
  sub_1001DAE14();
  return swift_release(v16);
}

void sub_10001EE20(char a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v10 = static OS_dispatch_queue.main.getter(v11);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v12 & 1) != 0)
  {
    if (qword_100315878 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315878, sub_1000D9778);
LABEL_3:
  v13 = type metadata accessor for Logger(0);
  v14 = sub_10000D744(v13, (uint64_t)qword_10033FE20);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v17 = 67109120;
    v31 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v17 + 4, v17 + 8);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "setOffTheGridMode: on - %{BOOL}d", v17, 8u);
    swift_slowDealloc(v17, -1, -1);
  }

  v19 = *(void **)(a3 + 32);
  if (v19)
  {
    v20 = swift_allocObject(&unk_1002E5650, 24, 7);
    swift_weakInit(v20 + 16, a3);
    v21 = (_QWORD *)swift_allocObject(&unk_1002E5678, 40, 7);
    v21[2] = v20;
    v21[3] = sub_10015DFB4;
    v21[4] = 0;
    v22 = v19;
    swift_retain(v20);
    sub_10020384C(a1 & 1, a2, (uint64_t)sub_100021170, (uint64_t)v21);

    swift_release(v20);
    swift_release(v21);
  }
  else
  {
    v23 = Logger.logObject.getter(v18);
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "agent is not started, ignoring setOffTheGridMode request", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v26 = sub_10000D744(v13, (uint64_t)qword_10033FD18);
    v27 = Logger.logObject.getter(v26);
    v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "OffTheGrid mode request done", v29, 2u);
      swift_slowDealloc(v29, -1, -1);
    }

  }
}

uint64_t sub_10001F17C(int a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __n128 v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t Strong;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30[3];

  v28 = a1;
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (uint64_t *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v9 = static OS_dispatch_queue.main.getter(v10);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v11 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v11 & 1) != 0)
  {
    a2 += 16;
    if (qword_100315878 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315878, sub_1000D9778);
LABEL_3:
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10000D744(v12, (uint64_t)qword_10033FE20);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(12, -1);
    v17 = swift_slowAlloc(32, -1);
    v30[0] = v17;
    *(_DWORD *)v16 = 136315138;
    LOWORD(v29) = v28;
    v18 = sub_100003DB8(&qword_100317BD8);
    v20 = String.init<A>(describing:)(&v29, v18, v19);
    v22 = v21;
    v29 = sub_100172BEC(v20, v21, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "offTheGridMode set to: %s", v16, 0xCu);
    swift_arrayDestroy(v17, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1, -1);
    swift_slowDealloc(v16, -1, -1);
  }

  swift_beginAccess(a2, v30, 0, 0);
  Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    v24 = Strong;
    v25 = *(_QWORD *)(Strong + 40);
    swift_retain(v25);
    swift_release(v24);
    sub_10001F41C(v28);
    Strong = swift_release(v25);
  }
  return a3(Strong);
}

uint64_t sub_10001F3FC(_BYTE *a1, _BYTE *a2)
{
  if (*a1 == 2 || *a2 == 2)
    return 0;
  else
    return 0x3FE0000000000000;
}

uint64_t sub_10001F41C(__int16 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __n128 v9;
  uint64_t result;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(_WORD *, __int16 *);
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  _WORD v24[16];
  char v25[30];
  __int16 v26;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (_QWORD *)((char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = a1;
  sub_10000D75C();
  *v8 = static OS_dispatch_queue.main.getter(v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  LOBYTE(a1) = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((a1 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  v11 = v26;
  v12 = *(unsigned __int16 *)(v2 + 107);
  if (*(_WORD *)(v2 + 107) == 2)
  {
    if (v26 == 2)
      goto LABEL_7;
LABEL_6:
    v13 = sub_100003DB8(&qword_10032B0E0);
    v14 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v13, v14);
    goto LABEL_7;
  }
  if (v26 == 2
    || (v26 & 1) == ((v12 & 1) == 0)
    || ((v12 & 0x100) == 0) == (unsigned __int16)(v26 & 0x100) >> 8)
  {
    goto LABEL_6;
  }
LABEL_7:
  *(_WORD *)(v2 + 107) = v11;
  sub_1001DB170(v12);
  v15 = *(uint64_t (**)(_WORD *, __int16 *))(v2 + 64);
  v24[0] = *(_WORD *)(v2 + 120);
  v16 = v15(v24, &v26);
  if ((v17 & 1) != 0)
    return sub_1001DC3F0(v11);
  v18 = v16;
  swift_beginAccess(v2 + 80, v25, 1, 0);
  if (*(_QWORD *)(v2 + 88) == 1)
  {
    v19 = *(_QWORD *)(v2 + 80);
    *(_QWORD *)(v2 + 80) = v18;
    *(_QWORD *)(v2 + 88) = 0;
    *(_QWORD *)(v2 + 96) = 0;
    *(_WORD *)(v2 + 104) = v11;
    sub_10002117C(v19, 1);
    return sub_10002046C();
  }
  else
  {
    v21 = sub_1001DB0F8((uint64_t)v24);
    if (v20[1] != 1)
      *v20 = v18;
    ((void (*)(_WORD *, _QWORD))v21)(v24, 0);
    v23 = sub_1001DB0F8((uint64_t)v24);
    if (*(_QWORD *)(v22 + 8) != 1)
      *(_WORD *)(v22 + 24) = v11;
    return ((uint64_t (*)(_WORD *, _QWORD))v23)(v24, 0);
  }
}

void sub_10001F660(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __n128 v9;
  char v10;
  unsigned __int8 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t (*v16)(_BYTE *, unsigned __int8 *, double);
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  _BYTE v25[32];
  char v26[31];
  unsigned __int8 v27;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = a1;
  sub_10000D75C();
  *v8 = static OS_dispatch_queue.main.getter(v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    return;
  }
  v11 = v27;
  v12 = *(unsigned __int8 *)(v2 + 106);
  if (v12 == 2)
  {
    if (v27 == 2)
      goto LABEL_8;
LABEL_7:
    v13 = sub_100003DB8(&qword_10032B0E0);
    v14 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v13, v14);
    goto LABEL_8;
  }
  if (v27 == 2 || ((v27 & 1) == 0) == (v12 & 1))
    goto LABEL_7;
LABEL_8:
  *(_BYTE *)(v2 + 106) = v11;
  v15 = sub_1001DB49C(v12);
  v16 = *(uint64_t (**)(_BYTE *, unsigned __int8 *, double))(v2 + 64);
  v25[0] = *(_BYTE *)(v2 + 120);
  v17 = v16(v25, &v27, v15);
  if ((v18 & 1) != 0)
  {
    sub_1001DC50C(v11);
  }
  else
  {
    v19 = v17;
    swift_beginAccess(v2 + 80, v26, 1, 0);
    if (*(_QWORD *)(v2 + 88) == 1)
    {
      v20 = *(_QWORD *)(v2 + 80);
      *(_QWORD *)(v2 + 80) = v19;
      *(_QWORD *)(v2 + 88) = 0;
      *(_QWORD *)(v2 + 96) = 0;
      *(_BYTE *)(v2 + 104) = v11;
      sub_10002117C(v20, 1);
      sub_100020898();
    }
    else
    {
      v22 = sub_1001DB134((uint64_t)v25);
      if (v21[1] != 1)
        *v21 = v19;
      ((void (*)(_BYTE *, _QWORD))v22)(v25, 0);
      v24 = sub_1001DB134((uint64_t)v25);
      if (*(_QWORD *)(v23 + 8) != 1)
        *(_BYTE *)(v23 + 24) = v11;
      ((void (*)(_BYTE *, _QWORD))v24)(v25, 0);
    }
  }
}

void sub_10001F884(unsigned __int8 a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __n128 v9;
  char v10;
  unsigned __int8 v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  double v15;
  uint64_t (*v16)(_BYTE *, unsigned __int8 *, double);
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;
  uint64_t v23;
  void *v24;
  _BYTE v25[32];
  char v26[31];
  unsigned __int8 v27;

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v27 = a1;
  sub_10000D75C();
  *v8 = static OS_dispatch_queue.main.getter(v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
    return;
  }
  v11 = v27;
  v12 = *(unsigned __int8 *)(v2 + 106);
  if (v12 == 9)
  {
    if (v27 == 9)
      goto LABEL_8;
LABEL_7:
    v13 = sub_100003DB8(&qword_10032B0E0);
    v14 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v13, v14);
    goto LABEL_8;
  }
  if (v27 == 9 || v12 != v27)
    goto LABEL_7;
LABEL_8:
  *(_BYTE *)(v2 + 106) = v11;
  v15 = sub_1001DB7AC(v12);
  v16 = *(uint64_t (**)(_BYTE *, unsigned __int8 *, double))(v2 + 64);
  v25[0] = *(_BYTE *)(v2 + 120);
  v17 = v16(v25, &v27, v15);
  if ((v18 & 1) != 0)
  {
    sub_1001DC61C(v11);
  }
  else
  {
    v19 = v17;
    swift_beginAccess(v2 + 80, v26, 1, 0);
    if (*(_QWORD *)(v2 + 88) == 1)
    {
      v20 = *(_QWORD *)(v2 + 80);
      *(_QWORD *)(v2 + 80) = v19;
      *(_QWORD *)(v2 + 88) = 0;
      *(_QWORD *)(v2 + 96) = 0;
      *(_BYTE *)(v2 + 104) = v11;
      sub_10002117C(v20, 1);
      sub_100020CC4();
    }
    else
    {
      v22 = sub_1001DB134((uint64_t)v25);
      if (v21[1] != 1)
        *v21 = v19;
      ((void (*)(_BYTE *, _QWORD))v22)(v25, 0);
      v24 = sub_1001DB134((uint64_t)v25);
      if (*(_QWORD *)(v23 + 8) != 1)
        *(_BYTE *)(v23 + 24) = v11;
      ((void (*)(_BYTE *, _QWORD))v24)(v25, 0);
    }
  }
}

void sub_10001FA9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _BOOL4 v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (_QWORD *)((char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    swift_beginAccess(v1 + 80, v39, 1, 0);
    v9 = *(_QWORD *)(v1 + 88);
    if (v9 == 1)
    {
      v10 = 2;
    }
    else
    {
      v10 = *(_WORD *)(v1 + 104);
      v11 = *(_QWORD *)(v1 + 80);
      swift_unknownObjectRetain(*(_QWORD *)(v1 + 88));
      sub_10002117C(v11, v9);
    }
    v12 = *(unsigned __int16 *)(v1 + 120);
    sub_1001DC720();
    v13 = *(_QWORD *)(v1 + 80);
    v14 = *(_QWORD *)(v1 + 88);
    v36 = xmmword_10024E030;
    *(_OWORD *)(v1 + 80) = xmmword_10024E030;
    *(_QWORD *)(v1 + 96) = 0;
    *(_WORD *)(v1 + 104) = 0;
    sub_10002117C(v13, v14);
    v15 = *(_WORD *)(v1 + 120);
    if (v15 == 2)
    {
      if (v10 == 2)
        goto LABEL_10;
    }
    else if (v10 != 2)
    {
      v34 = (v15 & 1) == 0;
      v35 = (v15 & 0x100) == 0;
      if ((v10 & 1) != v34 && v35 != (unsigned __int16)(v10 & 0x100) >> 8)
      {
LABEL_10:
        *(_WORD *)(v1 + 120) = v10;
        sub_1001DBAB0(v12);
        v18 = *(_QWORD *)(v1 + 80);
        v19 = *(_QWORD *)(v1 + 88);
        *(_OWORD *)(v1 + 80) = v36;
        *(_QWORD *)(v1 + 96) = 0;
        *(_WORD *)(v1 + 104) = 0;
        sub_10002117C(v18, v19);
        if (qword_100315820 == -1)
          goto LABEL_11;
        goto LABEL_18;
      }
    }
    v16 = sub_100003DB8(&qword_10032B0E0);
    v17 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v16, v17);
    goto LABEL_10;
  }
  __break(1u);
LABEL_18:
  swift_once(&qword_100315820, sub_1000D95E4);
LABEL_11:
  v20 = type metadata accessor for Logger(0);
  sub_10000D744(v20, (uint64_t)qword_10033FD18);
  v22 = swift_retain_n(v1, 2, v21);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc(22, -1);
    v26 = swift_slowAlloc(64, -1);
    v38 = v26;
    *(_DWORD *)v25 = 136446466;
    v27 = *(_QWORD *)(v1 + 48);
    v28 = *(_QWORD *)(v1 + 56);
    swift_bridgeObjectRetain(v28);
    v37 = sub_100172BEC(v27, v28, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease(v28);
    *(_WORD *)(v25 + 12) = 2082;
    LOWORD(v37) = *(_WORD *)(v1 + 120);
    v29 = sub_100003DB8(&qword_100317BD8);
    v31 = String.init<A>(describing:)(&v37, v29, v30);
    v33 = v32;
    v37 = sub_100172BEC(v31, v32, &v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v25 + 14, v25 + 22);
    swift_release_n(v1, 2);
    swift_bridgeObjectRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "%{public}s hysteresis timer expired, settling in %{public}s state", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy(v26, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v25, -1, -1);

  }
  else
  {

    swift_release_n(v1, 2);
  }
}

void sub_10001FE64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once(&qword_100315820, sub_1000D95E4);
    goto LABEL_6;
  }
  swift_beginAccess(v1 + 80, v31, 1, 0);
  v9 = *(_QWORD *)(v1 + 88);
  if (v9 == 1)
  {
    v10 = 2;
  }
  else
  {
    v10 = *(_BYTE *)(v1 + 104);
    v11 = *(_QWORD *)(v1 + 80);
    swift_unknownObjectRetain(*(_QWORD *)(v1 + 88));
    sub_10002117C(v11, v9);
  }
  sub_1001DC50C(v10);
  v12 = *(_QWORD *)(v1 + 80);
  v13 = *(_QWORD *)(v1 + 88);
  *(_OWORD *)(v1 + 80) = xmmword_10024E030;
  *(_QWORD *)(v1 + 96) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  sub_10002117C(v12, v13);
  if (qword_100315820 != -1)
    goto LABEL_10;
LABEL_6:
  v14 = type metadata accessor for Logger(0);
  sub_10000D744(v14, (uint64_t)qword_10033FD18);
  v16 = swift_retain_n(v1, v15);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(64, -1);
    v30 = v20;
    *(_DWORD *)v19 = 136446466;
    v21 = *(_QWORD *)(v1 + 48);
    v22 = *(_QWORD *)(v1 + 56);
    swift_bridgeObjectRetain(v22);
    v29 = sub_100172BEC(v21, v22, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v19 + 12) = 2082;
    LOBYTE(v29) = *(_BYTE *)(v1 + 120);
    v23 = sub_100003DB8((uint64_t *)&unk_1003263F0);
    v25 = String.init<A>(describing:)(&v29, v23, v24);
    v27 = v26;
    v29 = sub_100172BEC(v25, v26, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v19 + 14, v19 + 22);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s hysteresis timer expired, settling in %{public}s state", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
}

void sub_100020168()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE v31[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once(&qword_100315820, sub_1000D95E4);
    goto LABEL_6;
  }
  swift_beginAccess(v1 + 80, v31, 1, 0);
  v9 = *(_QWORD *)(v1 + 88);
  if (v9 == 1)
  {
    v10 = 9;
  }
  else
  {
    v10 = *(_BYTE *)(v1 + 104);
    v11 = *(_QWORD *)(v1 + 80);
    swift_unknownObjectRetain(*(_QWORD *)(v1 + 88));
    sub_10002117C(v11, v9);
  }
  sub_1001DC61C(v10);
  v12 = *(_QWORD *)(v1 + 80);
  v13 = *(_QWORD *)(v1 + 88);
  *(_OWORD *)(v1 + 80) = xmmword_10024E030;
  *(_QWORD *)(v1 + 96) = 0;
  *(_BYTE *)(v1 + 104) = 0;
  sub_10002117C(v12, v13);
  if (qword_100315820 != -1)
    goto LABEL_10;
LABEL_6:
  v14 = type metadata accessor for Logger(0);
  sub_10000D744(v14, (uint64_t)qword_10033FD18);
  v16 = swift_retain_n(v1, v15);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    v19 = swift_slowAlloc(22, -1);
    v20 = swift_slowAlloc(64, -1);
    v30 = v20;
    *(_DWORD *)v19 = 136446466;
    v21 = *(_QWORD *)(v1 + 48);
    v22 = *(_QWORD *)(v1 + 56);
    swift_bridgeObjectRetain(v22);
    v29 = sub_100172BEC(v21, v22, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v19 + 12) = 2082;
    LOBYTE(v29) = *(_BYTE *)(v1 + 120);
    v23 = sub_100003DB8(&qword_100317BE8);
    v25 = String.init<A>(describing:)(&v29, v23, v24);
    v27 = v26;
    v29 = sub_100172BEC(v25, v26, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v19 + 14, v19 + 22);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v27);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "%{public}s hysteresis timer expired, settling in %{public}s state", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1, -1);
    swift_slowDealloc(v19, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
}

uint64_t sub_10002046C()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *, _QWORD, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  __n128 v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t aBlock[5];
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char v46[24];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (_QWORD *)((char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v7 = static OS_dispatch_queue.main.getter(v8);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once(&qword_100315820, sub_1000D95E4);
    goto LABEL_7;
  }
  if ((*(_BYTE *)(v2 + 106) & 1) != 0)
    return result;
  result = swift_beginAccess(v2 + 80, v46, 0, 0);
  v3 = *(_QWORD *)(v2 + 88);
  if (v3 == 1)
    return result;
  v11 = *(_QWORD *)(v2 + 80);
  v41 = *(_QWORD *)(v2 + 96);
  v1 = *(unsigned __int16 *)(v2 + 104);
  swift_unknownObjectRetain(v3);
  v13 = (void (*)(uint64_t *, _QWORD, __n128))sub_1001DB0F8((uint64_t)&v44);
  v15 = *(_QWORD *)(v12 + 8);
  v40 = v11;
  if (v15 != 1)
  {
    v16 = v12;
    v17 = *(double *)&v11;
    v18 = swift_allocObject(&unk_1002E56A0, 24, 7);
    swift_weakInit(v18 + 16, v2);
    v19 = type metadata accessor for TimerBasedHysteresisSchedulerEvent();
    v20 = swift_allocObject(v19, 24, 7);
    *(_QWORD *)(v20 + 16) = 0;
    v21 = (void *)objc_opt_self(NSTimer);
    v22 = swift_allocObject(&unk_1002E56C8, 24, 7);
    swift_weakInit(v22 + 16, v20);
    v23 = (_QWORD *)swift_allocObject(&unk_1002E56F0, 40, 7);
    v23[2] = v22;
    v23[3] = sub_100021190;
    v23[4] = v18;
    aBlock[4] = (uint64_t)sub_1000211B4;
    v43 = v23;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100076C24;
    aBlock[3] = (uint64_t)&unk_1002E5708;
    v24 = _Block_copy(aBlock);
    v25 = v43;
    swift_retain_n(v18, 3, v26);
    swift_release(v25);
    v27 = objc_msgSend(v21, "scheduledTimerWithTimeInterval:repeats:block:", 0, v24, v17);
    swift_release(v18);
    _Block_release(v24);
    v28 = *(void **)(v20 + 16);
    *(_QWORD *)(v20 + 16) = v27;
    swift_release_n(v18, 2);

    v29 = *(_QWORD *)(v16 + 8);
    *(_QWORD *)(v16 + 8) = v20;
    *(_QWORD *)(v16 + 16) = &off_1002F9D68;
    v14 = swift_unknownObjectRelease(v29);
  }
  v13(&v44, 0, v14);
  if (qword_100315820 != -1)
    goto LABEL_13;
LABEL_7:
  v30 = type metadata accessor for Logger(0);
  sub_10000D744(v30, (uint64_t)qword_10033FD18);
  v32 = swift_retain_n(v2, 2, v31);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    aBlock[0] = v36;
    *(_DWORD *)v35 = 136446210;
    v39[1] = v1;
    v38 = *(_QWORD *)(v2 + 48);
    v37 = *(_QWORD *)(v2 + 56);
    swift_bridgeObjectRetain(v37);
    v44 = sub_100172BEC(v38, v37, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v35 + 4, v35 + 12);
    swift_release_n(v2, 2);
    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s hysteresis is not suspended and pending, scheduled hysteresis event", v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    swift_release_n(v2, 2);
  }

  return sub_10002117C(v40, v3);
}

uint64_t sub_100020898()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *, _QWORD, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  __n128 v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t aBlock[5];
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char v46[24];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (_QWORD *)((char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v7 = static OS_dispatch_queue.main.getter(v8);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once(&qword_100315820, sub_1000D95E4);
    goto LABEL_7;
  }
  if ((*(_BYTE *)(v2 + 105) & 1) != 0)
    return result;
  result = swift_beginAccess(v2 + 80, v46, 0, 0);
  v3 = *(_QWORD *)(v2 + 88);
  if (v3 == 1)
    return result;
  v11 = *(_QWORD *)(v2 + 80);
  v41 = *(_QWORD *)(v2 + 96);
  v1 = *(unsigned __int8 *)(v2 + 104);
  swift_unknownObjectRetain(v3);
  v13 = (void (*)(uint64_t *, _QWORD, __n128))sub_1001DB134((uint64_t)&v44);
  v15 = *(_QWORD *)(v12 + 8);
  v40 = v11;
  if (v15 != 1)
  {
    v16 = v12;
    v17 = *(double *)&v11;
    v18 = swift_allocObject(&unk_1002E5830, 24, 7);
    swift_weakInit(v18 + 16);
    v19 = type metadata accessor for TimerBasedHysteresisSchedulerEvent();
    v20 = swift_allocObject(v19, 24, 7);
    *(_QWORD *)(v20 + 16) = 0;
    v21 = (void *)objc_opt_self(NSTimer);
    v22 = swift_allocObject(&unk_1002E56C8, 24, 7);
    swift_weakInit(v22 + 16);
    v23 = (_QWORD *)swift_allocObject(&unk_1002E5858, 40, 7);
    v23[2] = v22;
    v23[3] = sub_100021674;
    v23[4] = v18;
    aBlock[4] = (uint64_t)sub_1000216D0;
    v43 = v23;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100076C24;
    aBlock[3] = (uint64_t)&unk_1002E5870;
    v24 = _Block_copy(aBlock);
    v25 = v43;
    swift_retain_n(v18, v26);
    swift_release(v25);
    v27 = objc_msgSend(v21, "scheduledTimerWithTimeInterval:repeats:block:", 0, v24, v17);
    swift_release(v18);
    _Block_release(v24);
    v28 = *(void **)(v20 + 16);
    *(_QWORD *)(v20 + 16) = v27;
    swift_release_n(v18);

    v29 = *(_QWORD *)(v16 + 8);
    *(_QWORD *)(v16 + 8) = v20;
    *(_QWORD *)(v16 + 16) = &off_1002F9D68;
    v14 = swift_unknownObjectRelease(v29);
  }
  v13(&v44, 0, v14);
  if (qword_100315820 != -1)
    goto LABEL_13;
LABEL_7:
  v30 = type metadata accessor for Logger(0);
  sub_10000D744(v30, (uint64_t)qword_10033FD18);
  v32 = swift_retain_n(v2, v31);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    aBlock[0] = v36;
    *(_DWORD *)v35 = 136446210;
    v39[1] = v1;
    v38 = *(_QWORD *)(v2 + 48);
    v37 = *(_QWORD *)(v2 + 56);
    swift_bridgeObjectRetain(v37);
    v44 = sub_100172BEC(v38, v37, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v35 + 4, v35 + 12);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s hysteresis is not suspended and pending, scheduled hysteresis event", v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    swift_release_n(v2);
  }

  return sub_10002117C(v40, v3);
}

uint64_t sub_100020CC4()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __n128 v8;
  char v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t *, _QWORD, __n128);
  __n128 v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  __n128 v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _DWORD v39[2];
  uint64_t v40;
  uint64_t v41;
  uint64_t aBlock[5];
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  char v46[24];

  v2 = v0;
  v3 = type metadata accessor for DispatchPredicate(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (_QWORD *)((char *)v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v7 = static OS_dispatch_queue.main.getter(v8);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v3);
  v9 = _dispatchPreconditionTest(_:)(v7);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v4 + 8))(v7, v3);
  if ((v9 & 1) == 0)
  {
    __break(1u);
LABEL_13:
    swift_once(&qword_100315820, sub_1000D95E4);
    goto LABEL_7;
  }
  if ((*(_BYTE *)(v2 + 105) & 1) != 0)
    return result;
  result = swift_beginAccess(v2 + 80, v46, 0, 0);
  v3 = *(_QWORD *)(v2 + 88);
  if (v3 == 1)
    return result;
  v11 = *(_QWORD *)(v2 + 80);
  v41 = *(_QWORD *)(v2 + 96);
  v1 = *(unsigned __int8 *)(v2 + 104);
  swift_unknownObjectRetain(v3);
  v13 = (void (*)(uint64_t *, _QWORD, __n128))sub_1001DB134((uint64_t)&v44);
  v15 = *(_QWORD *)(v12 + 8);
  v40 = v11;
  if (v15 != 1)
  {
    v16 = v12;
    v17 = *(double *)&v11;
    v18 = swift_allocObject(&unk_1002E57B8, 24, 7);
    swift_weakInit(v18 + 16);
    v19 = type metadata accessor for TimerBasedHysteresisSchedulerEvent();
    v20 = swift_allocObject(v19, 24, 7);
    *(_QWORD *)(v20 + 16) = 0;
    v21 = (void *)objc_opt_self(NSTimer);
    v22 = swift_allocObject(&unk_1002E56C8, 24, 7);
    swift_weakInit(v22 + 16);
    v23 = (_QWORD *)swift_allocObject(&unk_1002E57E0, 40, 7);
    v23[2] = v22;
    v23[3] = sub_100021650;
    v23[4] = v18;
    aBlock[4] = (uint64_t)sub_1000216D0;
    v43 = v23;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_100076C24;
    aBlock[3] = (uint64_t)&unk_1002E57F8;
    v24 = _Block_copy(aBlock);
    v25 = v43;
    swift_retain_n(v18, v26);
    swift_release(v25);
    v27 = objc_msgSend(v21, "scheduledTimerWithTimeInterval:repeats:block:", 0, v24, v17);
    swift_release(v18);
    _Block_release(v24);
    v28 = *(void **)(v20 + 16);
    *(_QWORD *)(v20 + 16) = v27;
    swift_release_n(v18);

    v29 = *(_QWORD *)(v16 + 8);
    *(_QWORD *)(v16 + 8) = v20;
    *(_QWORD *)(v16 + 16) = &off_1002F9D68;
    v14 = swift_unknownObjectRelease(v29);
  }
  v13(&v44, 0, v14);
  if (qword_100315820 != -1)
    goto LABEL_13;
LABEL_7:
  v30 = type metadata accessor for Logger(0);
  sub_10000D744(v30, (uint64_t)qword_10033FD18);
  v32 = swift_retain_n(v2, v31);
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc(12, -1);
    v36 = swift_slowAlloc(32, -1);
    aBlock[0] = v36;
    *(_DWORD *)v35 = 136446210;
    v39[1] = v1;
    v38 = *(_QWORD *)(v2 + 48);
    v37 = *(_QWORD *)(v2 + 56);
    swift_bridgeObjectRetain(v37);
    v44 = sub_100172BEC(v38, v37, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v35 + 4, v35 + 12);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v37);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s hysteresis is not suspended and pending, scheduled hysteresis event", v35, 0xCu);
    swift_arrayDestroy(v36, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1, -1);
    swift_slowDealloc(v35, -1, -1);
  }
  else
  {
    swift_release_n(v2);
  }

  return sub_10002117C(v40, v3);
}

uint64_t sub_1000210F0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a3 + 16;
  swift_beginAccess(a3 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    a4();
    return swift_release(v7);
  }
  return result;
}

uint64_t sub_100021148()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100021170(int a1)
{
  uint64_t v1;

  return sub_10001F17C(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_10002117C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_unknownObjectRelease(a2);
  return result;
}

uint64_t sub_100021190(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000210F0(a1, a2, v2, sub_10001FA9C);
}

uint64_t sub_1000211B4(uint64_t a1)
{
  uint64_t v1;

  return sub_1001FFAB8(a1, *(_QWORD *)(v1 + 16), *(void (**)(__n128))(v1 + 24));
}

uint64_t sub_1000211C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000211D0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000211D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;

  v12 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(_QWORD *)(a6 + 16) = PassthroughSubject.init()();
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = PassthroughSubject.init()();
  *(_BYTE *)(a6 + 106) = 2;
  *(_WORD *)(a6 + 107) = 2;
  *(_WORD *)(a6 + 120) = 2;
  *(_OWORD *)(a6 + 80) = xmmword_10024E030;
  *(_QWORD *)(a6 + 96) = 0;
  *(_WORD *)(a6 + 104) = 0;
  *(_QWORD *)(a6 + 112) = 0;
  *(_QWORD *)(a6 + 128) = 0;
  *(_QWORD *)(a6 + 24) = v13;
  *(_QWORD *)(a6 + 32) = a1;
  *(_QWORD *)(a6 + 40) = &off_1002F9D58;
  *(_QWORD *)(a6 + 48) = a2;
  *(_QWORD *)(a6 + 56) = a3;
  *(_QWORD *)(a6 + 64) = a4;
  *(_QWORD *)(a6 + 72) = a5;
  return a6;
}

uint64_t sub_1000212A8(char a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  _QWORD *v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v29;
  int v30;
  uint64_t v31;

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  v13 = swift_retain(a4);
  *v12 = static OS_dispatch_queue.main.getter(v13);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v14 & 1) != 0)
  {
    if (qword_100315878 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315878, sub_1000D9778);
LABEL_3:
  v15 = type metadata accessor for Logger(0);
  v16 = sub_10000D744(v15, (uint64_t)qword_10033FE20);
  v17 = Logger.logObject.getter(v16);
  v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v19 = 67109120;
    v30 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v19 + 4, v19 + 8);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "setOffTheGridMode: on - %{BOOL}d", v19, 8u);
    swift_slowDealloc(v19, -1, -1);
  }

  v21 = *(void **)(a3 + 32);
  if (v21)
  {
    v22 = swift_allocObject(&unk_1002E5650, 24, 7);
    swift_weakInit(v22 + 16, a3);
    v23 = (_QWORD *)swift_allocObject(&unk_1002E5740, 40, 7);
    v23[2] = v22;
    v23[3] = sub_100021580;
    v23[4] = a4;
    v24 = v21;
    swift_retain(v22);
    swift_retain(a4);
    sub_10020384C(a1 & 1, a2, (uint64_t)sub_1000216CC, (uint64_t)v23);
    swift_release(a4);

    swift_release(v22);
    a4 = (uint64_t)v23;
  }
  else
  {
    v25 = Logger.logObject.getter(v20);
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "agent is not started, ignoring setOffTheGridMode request", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    sub_10015E1C8(a4);
  }
  return swift_release(a4);
}

uint64_t sub_100021580()
{
  uint64_t v0;

  return sub_10015E1C8(v0);
}

unint64_t sub_10002158C()
{
  unint64_t result;
  unint64_t v1;

  result = qword_10032B100;
  if (!qword_10032B100)
  {
    v1 = sub_10000D75C();
    result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue, v1);
    atomic_store(result, (unint64_t *)&qword_10032B100);
  }
  return result;
}

uint64_t sub_1000215D4(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003DB8(&qword_100329AF0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

double sub_100021614()
{
  return sub_10001E6B8();
}

uint64_t sub_10002161C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100021640(uint64_t a1)
{
  uint64_t v1;

  return sub_1001E37FC(a1, *(uint64_t (**)(void))(v1 + 16));
}

double sub_100021648()
{
  return sub_10001E714();
}

uint64_t sub_100021650(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000210F0(a1, a2, v2, sub_100020168);
}

uint64_t sub_100021674(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000210F0(a1, a2, v2, sub_10001FE64);
}

uint64_t sub_100021698()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000216C4(__int16 a1)
{
  uint64_t v1;

  return sub_10001EC00(a1, v1);
}

id sub_100021AD4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppDelegate();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100021B14(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (**v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __n128 v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __n128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  id v45;
  id v46;
  char *v47;
  void (*v48)(char *, uint64_t, uint64_t, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t inited;
  NSString *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  __n128 v76;
  void (*v77)(char *, uint64_t, __n128);
  void (*v78)(char *, uint64_t);
  _QWORD v79[2];
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90[2];
  char v91[48];

  v2 = v1;
  v4 = sub_100003DB8(&qword_100317D50);
  __chkstk_darwin(v4, v5);
  v84 = (char *)v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_100317D58);
  __chkstk_darwin(v7, v8);
  v10 = (char *)v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date(0);
  v85 = *(_QWORD *)(v11 - 8);
  v13 = __chkstk_darwin(v11, v12);
  v15 = (char *)v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13, v16);
  v18 = (char *)v79 - v17;
  v19 = sub_100003DB8(&qword_100317D60);
  __chkstk_darwin(v19, v20);
  v88 = (char *)v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for URL(0);
  v23 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v22 - 8);
  v25 = __chkstk_darwin(v22, v24);
  v87 = (char *)v79 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v25, v27);
  v86 = (char *)v79 - v28;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v29 = type metadata accessor for Logger(0);
  v30 = sub_10000D744(v29, (uint64_t)qword_10033FD18);
  v32 = swift_bridgeObjectRetain_n(a1, 2, v31);
  v79[1] = v30;
  v33 = Logger.logObject.getter(v32);
  v34 = static os_log_type_t.default.getter();
  v35 = os_log_type_enabled(v33, v34);
  v82 = v18;
  v83 = v10;
  v80 = v15;
  if (v35)
  {
    v81 = v22;
    v36 = (uint8_t *)swift_slowAlloc(12, -1);
    v37 = swift_slowAlloc(32, -1);
    v79[0] = v2;
    v38 = v37;
    v89 = a1;
    v90[0] = v37;
    *(_DWORD *)v36 = 136446210;
    swift_bridgeObjectRetain(a1);
    v39 = sub_100003DB8(&qword_100317D78);
    v41 = String.init<A>(describing:)(&v89, v39, v40);
    v43 = v42;
    v89 = sub_100172BEC(v41, v42, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    v44 = v43;
    v22 = v81;
    swift_bridgeObjectRelease(v44);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "AppDelegate didFinishLaunchingWithOptions(%{public}s)", v36, 0xCu);
    swift_arrayDestroy(v38, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1, -1);
    swift_slowDealloc(v36, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  v45 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v46 = objc_msgSend(v45, "executableURL");

  if (!v46)
  {
    v49 = v88;
    v23[7](v88, 1, 1, v22);
    goto LABEL_10;
  }
  v47 = v87;
  static URL._unconditionallyBridgeFromObjectiveC(_:)(v46);

  v48 = v23[4];
  v49 = v88;
  ((void (*)(char *, char *, uint64_t))v48)(v88, v47, v22);
  v23[7](v49, 0, 1, v22);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v23[6])(v49, 1, v22) == 1)
  {
LABEL_10:
    v57 = &qword_100317D60;
    v58 = (uint64_t)v49;
LABEL_14:
    sub_100007FF0(v58, v57);
    return sub_10015BF60() & 1;
  }
  ((void (*)(char *, char *, uint64_t))v48)(v86, v49, v22);
  v50 = sub_100003DB8(&qword_100317D68);
  inited = swift_initStackObject(v50, v91);
  *(_OWORD *)(inited + 16) = xmmword_10024E070;
  *(_QWORD *)(inited + 32) = NSURLCreationDateKey;
  v52 = NSURLCreationDateKey;
  sub_100209498(inited);
  v54 = v53;
  swift_setDeallocating(inited);
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy(inited + 32, 1, v55);
  v56 = (uint64_t)v84;
  URL.resourceValues(forKeys:)(v54);
  v59 = swift_bridgeObjectRelease(v54);
  v60 = type metadata accessor for URLResourceValues(0, v59);
  v61 = *(_QWORD *)(v60 - 8);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v61 + 56))(v56, 0, 1, v60);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v56, 1, v60) == 1)
  {
    sub_100007FF0(v56, &qword_100317D50);
    v62 = (uint64_t)v83;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v85 + 56))(v83, 1, 1, v11);
LABEL_13:
    ((void (*)(char *, uint64_t))v23[1])(v86, v22);
    v57 = &qword_100317D58;
    v58 = v62;
    goto LABEL_14;
  }
  v62 = (uint64_t)v83;
  URLResourceValues.creationDate.getter();
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v56, v60);
  v64 = v85;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48))(v62, 1, v11) == 1)
    goto LABEL_13;
  v65 = v82;
  (*(void (**)(char *, uint64_t, uint64_t))(v64 + 32))(v82, v62, v11);
  v66 = v80;
  v67 = (*(uint64_t (**)(char *, char *, uint64_t))(v64 + 16))(v80, v65, v11);
  v68 = Logger.logObject.getter(v67);
  v69 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v68, v69))
  {
    v70 = (uint8_t *)swift_slowAlloc(12, -1);
    v71 = swift_slowAlloc(32, -1);
    v90[0] = v71;
    v81 = v22;
    *(_DWORD *)v70 = 136446210;
    v88 = (char *)v23;
    v72 = sub_1000052EC(&qword_100317D70, (uint64_t (*)(uint64_t))&type metadata accessor for Date, (uint64_t)&protocol conformance descriptor for Date);
    v73 = dispatch thunk of CustomStringConvertible.description.getter(v11, v72);
    v75 = v74;
    v89 = sub_100172BEC(v73, v74, v90);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v89, v90, v70 + 4, v70 + 12);
    v76 = swift_bridgeObjectRelease(v75);
    v77 = *(void (**)(char *, uint64_t, __n128))(v85 + 8);
    v77(v66, v11, v76);
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "Creation timestamp: (%{public}s)", v70, 0xCu);
    swift_arrayDestroy(v71, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1, -1);
    swift_slowDealloc(v70, -1, -1);

    ((void (*)(char *, uint64_t))v77)(v82, v11);
    (*((void (**)(char *, uint64_t))v88 + 1))(v86, v81);
  }
  else
  {

    v78 = *(void (**)(char *, uint64_t))(v64 + 8);
    v78(v66, v11);
    v78(v65, v11);
    ((void (*)(char *, uint64_t))v23[1])(v86, v22);
  }
  return sub_10015BF60() & 1;
}

id sub_1000222A8(void *a1, void *a2)
{
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  void *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  id v27;
  NSString v28;
  id v29;
  id v31;
  uint64_t v32;
  uint64_t v33;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FD18);
  v5 = a2;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v33 = v9;
    *(_DWORD *)v8 = 136446210;
    v31 = v5;
    v10 = v5;
    v11 = objc_msgSend(v10, "description");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v13 = a1;
    v15 = v14;

    v32 = sub_100172BEC(v12, v15, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v8 + 4, v8 + 12);

    v16 = v15;
    a1 = v13;
    v5 = v31;
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "AppDelegate connectingSceneSession(%{public}s)", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  v17 = objc_msgSend(v5, "URLContexts");
  v18 = sub_1000226C8();
  v19 = sub_1000052EC((unint64_t *)&unk_1003184C0, (uint64_t (*)(uint64_t))sub_1000226C8, (uint64_t)&protocol conformance descriptor for NSObject);
  v20 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v17, v18, v19);

  if ((v20 & 0xC000000000000001) != 0)
  {
    if (v20 < 0)
      v21 = v20;
    else
      v21 = v20 & 0xFFFFFFFFFFFFFF8;
    v22 = __CocoaSet.count.getter(v21);
  }
  else
  {
    v22 = *(_QWORD *)(v20 + 16);
  }
  v23 = swift_bridgeObjectRelease(v20).n128_u64[0];
  if (v22)
  {
    v24 = objc_msgSend(v5, "URLContexts", *(double *)&v23);
    v25 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v24, v18, v19);

    sub_10015D75C(v25);
    v23 = swift_bridgeObjectRelease(v25).n128_u64[0];
  }
  v26 = objc_msgSend(a1, "role", *(double *)&v23);
  v27 = objc_allocWithZone((Class)UISceneConfiguration);
  v28 = String._bridgeToObjectiveC()();
  v29 = objc_msgSend(v27, "initWithName:sessionRole:", v28, v26);

  return v29;
}

uint64_t sub_1000225DC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocClassInstance(v0, 24, 7);
}

int main(int argc, const char **argv, const char **envp)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  objc_class *ObjCClassFromMetadata;
  NSString *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = type metadata accessor for AppDelegate();
  v4 = static CommandLine.unsafeArgv.getter();
  v5 = ((uint64_t (*)(void))static CommandLine.argc.getter)();
  v6 = static CommandLine.argc.getter(v5);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(v3);
  v8 = NSStringFromClass(ObjCClassFromMetadata);
  v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  v11 = v10;

  LODWORD(v8) = UIApplicationMain(_:_:_:_:)(v6, v4, 0, 0, v9, v11);
  swift_bridgeObjectRelease(v11);
  exit((int)v8);
}

uint64_t type metadata accessor for AppDelegate()
{
  return objc_opt_self(_TtC8SOSBuddy11AppDelegate);
}

uint64_t type metadata accessor for ProdAppDelegate()
{
  return objc_opt_self(_TtC8SOSBuddy15ProdAppDelegate);
}

unint64_t sub_1000226C8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100317D40;
  if (!qword_100317D40)
  {
    v1 = objc_opt_self(UIOpenURLContext);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100317D40);
  }
  return result;
}

uint64_t sub_100022704()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  uint64_t v8;
  __n128 v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v1 = v0;
  v2 = *(_QWORD *)v0;
  v3 = sub_100003DB8(&qword_100317E68);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  v4 = swift_retain(v0);
  *(_QWORD *)(v0 + 32) = PassthroughSubject.init()(v4);
  v5 = type metadata accessor for PreventSuspension();
  v6 = (_QWORD *)swift_allocObject(v5, 40, 7);
  v6[2] = 0x6F6D20726566664FLL;
  v6[3] = 0xEA00000000006564;
  v6[4] = 0;
  *(_QWORD *)(v0 + 40) = v6;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100209204((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v7 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)(v0 + 48) = v7;
  *(_BYTE *)(v0 + 56) = 0;
  *(_WORD *)(v0 + 57) = 2;
  swift_release(v0);
  v8 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  *(_QWORD *)(v0 + 16) = PassthroughSubject.init()(v9);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  *(_QWORD *)(v0 + 24) = PassthroughSubject.init()(v10);
  v11 = qword_1003158A8;
  swift_retain(v1);
  if (v11 != -1)
    swift_once(&qword_1003158A8, sub_1000D9838);
  v12 = type metadata accessor for Logger(0);
  sub_10000D744(v12, (uint64_t)qword_10033FEB0);
  v14 = swift_retain_n(v1, v13);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v24 = v1;
    v25 = v18;
    *(_DWORD *)v17 = 136446210;
    v19 = swift_retain(v1);
    v20 = String.init<A>(describing:)(&v24, v2, v19);
    v22 = v21;
    v24 = sub_100172BEC(v20, v21, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v17 + 4, v17 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%{public}s] init", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

    swift_release(v1);
  }
  else
  {

    swift_release_n(v1);
  }
  return v1;
}

uint64_t sub_1000229C4()
{
  _QWORD *v0;

  swift_release(v0[4]);
  swift_release(v0[5]);
  return swift_bridgeObjectRelease(v0[6]);
}

_QWORD *sub_1000229E8()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = *v0;
  if (qword_1003158A8 != -1)
    swift_once(&qword_1003158A8, sub_1000D9838);
  v3 = type metadata accessor for Logger(0);
  sub_10000D744(v3, (uint64_t)qword_10033FEB0);
  v5 = swift_retain_n(v0, v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v15 = (uint64_t)v1;
    v16 = v9;
    *(_DWORD *)v8 = 136446210;
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v2, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 4, v8 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%{public}s] deinit", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  swift_release(v1[2]);
  swift_release(v1[3]);
  swift_release(v1[4]);
  swift_release(v1[5]);
  swift_bridgeObjectRelease(v1[6]);
  return v1;
}

uint64_t sub_100022BC8()
{
  uint64_t v0;

  sub_1000229E8();
  return swift_deallocClassInstance(v0, 59, 7);
}

uint64_t type metadata accessor for OfferModel()
{
  return objc_opt_self(_TtC8SOSBuddy10OfferModel);
}

uint64_t storeEnumTagSinglePayload for OfferModel.OfferState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_100022C54 + 4 * byte_10024E0E5[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100022C88 + 4 * byte_10024E0E0[v4]))();
}

uint64_t sub_100022C88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100022C90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100022C98);
  return result;
}

uint64_t sub_100022CA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100022CACLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_100022CB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100022CB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OfferModel.OfferState()
{
  return &type metadata for OfferModel.OfferState;
}

uint64_t initializeBufferWithCopyOfBuffer for QuestionnaireState.RecordedAnswer(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_retain(v3);
  return a1;
}

uint64_t destroy for QuestionnaireState.RecordedAnswer(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 8));
}

uint64_t assignWithCopy for OfferModel.OfferActionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for OfferModel.OfferActionEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for OfferModel.OfferActionEvent(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OfferModel.OfferActionEvent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for OfferModel.OfferActionEvent()
{
  return &type metadata for OfferModel.OfferActionEvent;
}

unint64_t sub_100022E20()
{
  unint64_t result;

  result = qword_100317E60;
  if (!qword_100317E60)
  {
    result = swift_getWitnessTable(&unk_10024E194, &type metadata for OfferModel.OfferState);
    atomic_store(result, (unint64_t *)&qword_100317E60);
  }
  return result;
}

uint64_t sub_100022E64(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  __n128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33[2];

  if (*(unsigned __int8 *)(v1 + 56) != result)
  {
    v2 = v1;
    v3 = result;
    if (qword_1003158A8 != -1)
      swift_once(&qword_1003158A8, sub_1000D9838);
    v4 = type metadata accessor for Logger(0);
    sub_10000D744(v4, (uint64_t)qword_10033FEB0);
    v6 = swift_retain_n(v1, v5);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v33[0] = v10;
      v11.n128_u64[0] = 136446466;
      *(_DWORD *)v9 = 136446466;
      LOBYTE(v32) = v3;
      v12 = String.init<A>(describing:)(&v32, &type metadata for OfferModel.OfferState, v11);
      v14 = v13;
      v32 = sub_100172BEC(v12, v13, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease(v14);
      *(_WORD *)(v9 + 12) = 2082;
      LOBYTE(v32) = *(_BYTE *)(v2 + 56);
      v16 = String.init<A>(describing:)(&v32, &type metadata for OfferModel.OfferState, v15);
      v18 = v17;
      v32 = sub_100172BEC(v16, v17, v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, v33, v9 + 14, v9 + 22);
      swift_release_n(v2);
      swift_bridgeObjectRelease(v18);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "state changed from: %{public}s to: %{public}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {

      swift_release_n(v2);
    }
    v19 = *(unsigned __int8 *)(v2 + 56);
    if (v19 == 3)
    {
      v23 = type metadata accessor for PreventSuspensionAssertion();
      swift_allocObject(v23, 32, 7);
      v21 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, 0xD000000000000017, 0x8000000100261E40);
      v22 = v21;
      LOBYTE(v33[0]) = 1;
    }
    else
    {
      if (v19 != 4)
        goto LABEL_12;
      v20 = type metadata accessor for PreventSuspensionAssertion();
      swift_allocObject(v20, 32, 7);
      v21 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, 0xD000000000000017, 0x8000000100261E40);
      v22 = v21;
      LOBYTE(v33[0]) = 0;
    }
    v33[1] = v21;
    PassthroughSubject.send(_:)(v33);
    swift_release(v22);
LABEL_12:
    v24 = *(_QWORD **)(v2 + 40);
    v25 = v24[4];
    if (*(unsigned __int8 *)(v2 + 56) - 1 > 1)
    {
      v29 = 0;
    }
    else
    {
      if (v25)
      {
LABEL_17:
        v30 = sub_100003DB8(&qword_10032B0E0);
        v31 = sub_100016B20();
        return Subject<>.send()(v30, v31);
      }
      v26 = v24[2];
      v27 = v24[3];
      v28 = type metadata accessor for PreventSuspensionAssertion();
      swift_allocObject(v28, 32, 7);
      swift_bridgeObjectRetain(v27);
      v29 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, v26, v27);
      v25 = v24[4];
    }
    v24[4] = v29;
    swift_release(v25);
    goto LABEL_17;
  }
  return result;
}

uint64_t sub_1000231FC(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v3 = v2;
  if (qword_1003158A8 != -1)
    swift_once(&qword_1003158A8, sub_1000D9838);
  v6 = type metadata accessor for Logger(0);
  sub_10000D744(v6, (uint64_t)qword_10033FEB0);
  v8 = swift_retain_n(a2, v7);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v23 = v12;
    v13.n128_u64[0] = 136446210;
    *(_DWORD *)v11 = 136446210;
    v14 = String.init<A>(describing:)(v12, &type metadata for OfferCommandKind, v13);
    v16 = v15;
    v22 = sub_100172BEC(v14, v15, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v11 + 4, v11 + 12);
    swift_release_n(a2);
    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "handleOfferRequest: %{public}s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_release_n(a2);
  }
  if ((a1 & 1) != 0)
    v17 = 1;
  else
    v17 = 2;
  v18 = *(unsigned __int8 *)(v3 + 56);
  if ((_DWORD)v18 != v17)
  {
    v19 = sub_100003DB8(&qword_10032B0E0);
    v20 = sub_100016B20();
    Subject<>.send()(v19, v20);
  }
  *(_BYTE *)(v3 + 56) = v17;
  return sub_100022E64(v18);
}

void sub_1000233F8()
{
  sub_100023418(4, "handleOfferAccepted received when offerModel is in invalid state: %{public}s");
}

void sub_100023408()
{
  sub_100023418(3, "handleOfferDeclined received when offerModel is in invalid state: %{public}s");
}

void sub_100023418(char a1, const char *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v3 = v2;
  v4 = *(unsigned __int8 *)(v2 + 56);
  if ((v4 - 1) > 1u)
  {
    if (qword_1003158A8 != -1)
      swift_once(&qword_1003158A8, sub_1000D9838);
    v9 = type metadata accessor for Logger(0);
    sub_10000D744(v9, (uint64_t)qword_10033FEB0);
    v11 = swift_retain_n(v2, v10);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v21 = v15;
      v16.n128_u64[0] = 136446210;
      *(_DWORD *)v14 = 136446210;
      LOBYTE(v20) = *(_BYTE *)(v3 + 56);
      v17 = String.init<A>(describing:)(&v20, &type metadata for OfferModel.OfferState, v16);
      v19 = v18;
      v20 = sub_100172BEC(v17, v18, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v14 + 4, v14 + 12);
      swift_release_n(v3);
      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, a2, v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

      swift_release_n(v3);
    }
  }
  else
  {
    v6 = sub_100003DB8(&qword_10032B0E0);
    v7 = sub_100016B20();
    Subject<>.send()(v6, v7);
    *(_BYTE *)(v2 + 56) = a1;
    sub_100022E64(v4);
  }
}

uint64_t storeEnumTagSinglePayload for OfferModel.OfferAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10002367C + 4 * byte_10024E0EF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000236B0 + 4 * byte_10024E0EA[v4]))();
}

uint64_t sub_1000236B0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000236B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000236C0);
  return result;
}

uint64_t sub_1000236CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000236D4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000236D8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000236E0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OfferModel.OfferAction()
{
  return &type metadata for OfferModel.OfferAction;
}

unint64_t sub_100023700()
{
  unint64_t result;

  result = qword_100317E70;
  if (!qword_100317E70)
  {
    result = swift_getWitnessTable(&unk_10024E208, &type metadata for OfferModel.OfferAction);
    atomic_store(result, (unint64_t *)&qword_100317E70);
  }
  return result;
}

uint64_t sub_100023748()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v1 = v0;
  v2 = sub_100003DB8(&qword_10031B330);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(_QWORD *)(v0 + 16) = PassthroughSubject.init()(v3);
  v4 = sub_100003DB8(qword_1003180E0);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  *(_QWORD *)(v0 + 24) = PassthroughSubject.init()(v5);
  *(_QWORD *)(v0 + 32) = 0xD000000000000015;
  *(_QWORD *)(v0 + 40) = 0x8000000100262620;
  *(_QWORD *)(v0 + 48) = 0x637269632E736F73;
  *(_QWORD *)(v0 + 56) = 0xEF6C6C69662E656CLL;
  *(_QWORD *)(v0 + 64) = 0x796D646E6966;
  *(_QWORD *)(v0 + 72) = 0xE600000000000000;
  *(_QWORD *)(v0 + 80) = 30;
  *(_QWORD *)(v0 + 88) = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for NotificationAgent()), "init");
  *(_QWORD *)(v0 + 96) = 0;
  *(_QWORD *)(v0 + 112) = 0;
  swift_unknownObjectWeakInit(v0 + 104, 0);
  *(_QWORD *)(v0 + 120) = 0;
  *(_WORD *)(v0 + 128) = 514;
  v6 = v0 + OBJC_IVAR____TtC8SOSBuddy22LockScreenNotification__lastTargetDisappearedAt;
  v7 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v8 = type metadata accessor for Logger(0);
  sub_10000D744(v8, (uint64_t)qword_10033FD18);
  v10 = swift_retain_n(v1, v9);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v21 = v1;
    v22 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = type metadata accessor for LockScreenNotification(0);
    v16 = swift_retain(v1);
    v17 = String.init<A>(describing:)(&v21, v15, v16);
    v19 = v18;
    v21 = sub_100172BEC(v17, v18, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v13 + 4, v13 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%{public}s] init", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  return v1;
}

uint64_t sub_100023A10()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = swift_retain_n(v0, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v1;
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for LockScreenNotification(0);
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v9, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "[%{public}s] deinit", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 24));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 40));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v1 + 72));

  sub_100025CF8(v1 + 104);
  swift_release(*(_QWORD *)(v1 + 120));
  sub_100007FF0(v1 + OBJC_IVAR____TtC8SOSBuddy22LockScreenNotification__lastTargetDisappearedAt, &qword_1003180C8);
  return v1;
}

uint64_t sub_100023C28()
{
  uint64_t v0;

  sub_100023A10();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100023C4C()
{
  return type metadata accessor for LockScreenNotification(0);
}

uint64_t type metadata accessor for LockScreenNotification(uint64_t a1)
{
  uint64_t result;

  result = qword_100317EA8;
  if (!qword_100317EA8)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LockScreenNotification);
  return result;
}

void sub_100023C90(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[13];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = &unk_10024E2D8;
  v4[3] = &unk_10024E2D8;
  v4[4] = &unk_10024E2D8;
  v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[6] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[7] = (char *)&value witness table for Builtin.Int64 + 64;
  v4[8] = &unk_10024E2F0;
  v4[9] = &unk_10024E308;
  v4[10] = &unk_10024E320;
  v4[11] = &unk_10024E320;
  sub_100025B34(319);
  if (v3 <= 0x3F)
  {
    v4[12] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 13, v4, a1 + 80);
  }
}

void sub_100023D54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t Strong;
  _QWORD *v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  os_log_type_t v41;
  uint8_t *v42;
  NSObject *oslog;

  v1 = v0;
  Strong = swift_unknownObjectWeakLoadStrong(v0 + 104);
  if (Strong)
  {
    v3 = (_QWORD *)Strong;
    v4 = *(_QWORD *)(v0 + 112);
    sub_10000D75C();
    v5 = swift_retain(v0);
    v6 = static OS_dispatch_queue.main.getter(v5);
    v7 = sub_100003DB8(&qword_1003180D0);
    v8 = swift_allocObject(v7, 40, 7);
    swift_weakInit(v8 + 16, 0);
    if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0
      && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
    {
      sub_100209204((uint64_t)&_swiftEmptyArrayStorage);
    }
    else
    {
      v9 = &_swiftEmptySetSingleton;
    }
    *(_QWORD *)(v8 + 32) = v9;
    swift_weakAssign(v8 + 16, v1);
    swift_release(v1);
    *(_QWORD *)(v8 + 24) = v6;
    v10 = *(_QWORD *)(*(_QWORD *)(v3[6] + 112) + 24);
    swift_retain(v10);
    v12 = sub_100244848(v11, (uint64_t)sub_10002417C, 0);
    swift_retain(v12);
    swift_release(v10);
    swift_release(v8);
    v13 = *(_QWORD *)(*(_QWORD *)(v3[6] + 112) + 48);
    swift_retain(v13);
    v15 = sub_100244AA0(v14, (uint64_t)sub_100024180, 0);
    swift_retain(v15);
    swift_release(v13);
    swift_release(v12);
    v16 = *(_QWORD *)(*(_QWORD *)(v3[6] + 112) + 56);
    swift_retain(v16);
    v18 = sub_100244848(v17, (uint64_t)sub_100024268, 0);
    swift_retain(v18);
    swift_release(v16);
    swift_release(v15);
    v19 = *(_QWORD *)(v3[7] + 24);
    swift_retain(v19);
    v21 = sub_100244848(v20, (uint64_t)sub_10002417C, 0);
    swift_retain(v21);
    swift_release(v19);
    swift_release(v18);
    v22 = *(void **)(*(_QWORD *)(v3[6] + 56) + 24);
    v23 = swift_allocObject(&unk_1002E5AC8, 32, 7);
    *(_QWORD *)(v23 + 16) = v3;
    *(_QWORD *)(v23 + 24) = v4;
    swift_retain(v22);
    swift_unknownObjectRetain(v3);
    v24 = sub_100244848(v22, (uint64_t)sub_100025C74, v23);
    swift_retain(v24);
    swift_release(v22);
    swift_release(v21);
    swift_release(v23);
    v25 = *(_QWORD *)(v3[9] + 24);
    swift_retain(v25);
    v27 = sub_100244848(v26, (uint64_t)sub_100024484, 0);
    swift_retain(v27);
    swift_release(v25);
    swift_release(v24);
    v28 = *(_QWORD *)(*(_QWORD *)(v3[6] + 32) + 48);
    swift_retain(v28);
    v30 = sub_100244CF8(v29, (uint64_t)sub_100024314, 0);
    swift_retain(v30);
    swift_release(v28);
    swift_release(v27);
    v31 = *(_QWORD *)(v1 + 88);
    v32 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent_didFinishPostNotificationRequest);
    swift_retain(v1);
    swift_retain(v32);
    v34 = sub_100244F50(v33, (uint64_t)sub_100025C7C, v1);
    swift_retain(v34);
    swift_release(v32);
    swift_release(v30);
    swift_release(v1);
    v35 = *(_QWORD *)(v31 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent_didReceiveAction);
    swift_retain(v35);
    v37 = sub_1002451A8(v36, (uint64_t)sub_1000247B4, 0);
    swift_retain(v37);
    swift_release(v35);
    swift_unknownObjectRelease(v3);
    swift_release(v34);
    v38 = *(_QWORD *)(v1 + 120);
    *(_QWORD *)(v1 + 120) = v37;
    swift_release(v38);
  }
  else
  {
    if (qword_1003158A0 != -1)
      swift_once(&qword_1003158A0, sub_1000D9810);
    v39 = type metadata accessor for Logger(0);
    v40 = sub_10000D744(v39, (uint64_t)qword_10033FE98);
    oslog = Logger.logObject.getter(v40);
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v41, "Unexpected _env == nil", v42, 2u);
      swift_slowDealloc(v42, -1, -1);
    }

  }
}

unint64_t sub_100024180(uint64_t a1)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[7];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  _OWORD v13[3];
  char v14;

  v2 = a1 + 104;
  Strong = swift_unknownObjectWeakLoadStrong(a1 + 104);
  if (Strong)
  {
    v4 = Strong;
    v5 = *(_QWORD *)(Strong + 72);
    swift_retain(v5);
    swift_unknownObjectRelease(v4);
    LOBYTE(v4) = *(_BYTE *)(v5 + 48);
    swift_release(v5);
    if ((v4 & 1) != 0)
      *(_BYTE *)(a1 + 128) = 1;
  }
  sub_100024F50((uint64_t)v8);
  sub_10000B458((uint64_t)v8, (uint64_t)&v9, &qword_1003180D8);
  if (*((_QWORD *)&v10 + 1))
  {
    v13[0] = v9;
    v13[1] = v10;
    v13[2] = v11;
    v14 = v12;
    sub_100074F30((uint64_t)v13);
    sub_100025C84(v8);
  }
  else
  {
    sub_100076338(0);
  }
  v6 = swift_unknownObjectWeakLoadStrong(v2);
  if (v6)
    swift_unknownObjectRelease(v6);
  return sub_100076338(1);
}

unint64_t sub_100024268(uint64_t a1)
{
  uint64_t Strong;
  uint64_t v4[7];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v8;
  _OWORD v9[3];
  char v10;

  *(_BYTE *)(a1 + 128) = 2;
  sub_100024F50((uint64_t)v4);
  sub_10000B458((uint64_t)v4, (uint64_t)&v5, &qword_1003180D8);
  if (*((_QWORD *)&v6 + 1))
  {
    v9[0] = v5;
    v9[1] = v6;
    v9[2] = v7;
    v10 = v8;
    sub_100074F30((uint64_t)v9);
    sub_100025C84(v4);
  }
  else
  {
    sub_100076338(0);
  }
  Strong = swift_unknownObjectWeakLoadStrong(a1 + 104);
  if (Strong)
    swift_unknownObjectRelease(Strong);
  return sub_100076338(1);
}

unint64_t sub_100024314(uint64_t a1)
{
  uint64_t Strong;
  uint64_t v4[7];
  __int128 v5;
  __int128 v6;
  __int128 v7;
  char v8;
  _OWORD v9[3];
  char v10;

  sub_100024F50((uint64_t)v4);
  sub_10000B458((uint64_t)v4, (uint64_t)&v5, &qword_1003180D8);
  if (*((_QWORD *)&v6 + 1))
  {
    v9[0] = v5;
    v9[1] = v6;
    v9[2] = v7;
    v10 = v8;
    sub_100074F30((uint64_t)v9);
    sub_100025C84(v4);
  }
  else
  {
    sub_100076338(0);
  }
  Strong = swift_unknownObjectWeakLoadStrong(a1 + 104);
  if (Strong)
    swift_unknownObjectRelease(Strong);
  return sub_100076338(1);
}

unint64_t sub_1000243B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v4;
  int v5;
  uint64_t Strong;
  uint64_t v8[7];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  _OWORD v13[3];
  char v14;

  v4 = *(_BYTE **)(*(_QWORD *)(a3 + 48) + 56);
  if ((v4[80] & 1) != 0 || (v4[66] & 1) != 0)
    v5 = 1;
  else
    v5 = v4[192];
  sub_10002497C(a1, a2, a3, v5);
  sub_100024F50((uint64_t)v8);
  sub_10000B458((uint64_t)v8, (uint64_t)&v9, &qword_1003180D8);
  if (*((_QWORD *)&v10 + 1))
  {
    v13[0] = v9;
    v13[1] = v10;
    v13[2] = v11;
    v14 = v12;
    sub_100074F30((uint64_t)v13);
    sub_100025C84(v8);
  }
  else
  {
    sub_100076338(0);
  }
  Strong = swift_unknownObjectWeakLoadStrong(a1 + 104);
  if (Strong)
    swift_unknownObjectRelease(Strong);
  return sub_100076338(1);
}

unint64_t sub_100024484(uint64_t a1)
{
  uint64_t v2;
  uint64_t Strong;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8[7];
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  _OWORD v13[3];
  char v14;

  v2 = a1 + 104;
  Strong = swift_unknownObjectWeakLoadStrong(a1 + 104);
  if (!Strong
    || (v4 = Strong,
        v5 = *(_QWORD *)(Strong + 72),
        swift_retain(v5),
        swift_unknownObjectRelease(v4),
        LOBYTE(v4) = *(_BYTE *)(v5 + 48),
        swift_release(v5),
        (v4 & 1) == 0))
  {
    *(_BYTE *)(a1 + 128) = 2;
  }
  sub_100024F50((uint64_t)v8);
  sub_10000B458((uint64_t)v8, (uint64_t)&v9, &qword_1003180D8);
  if (*((_QWORD *)&v10 + 1))
  {
    v13[0] = v9;
    v13[1] = v10;
    v13[2] = v11;
    v14 = v12;
    sub_100074F30((uint64_t)v13);
    sub_100025C84(v8);
  }
  else
  {
    sub_100076338(0);
  }
  v6 = swift_unknownObjectWeakLoadStrong(v2);
  if (v6)
    swift_unknownObjectRelease(v6);
  return sub_100076338(1);
}

void sub_10002456C(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t Strong;
  NSObject *oslog;
  uint64_t v18[7];
  __int128 v19;
  __int128 v20;
  __int128 v21;
  char v22;
  _OWORD v23[3];
  char v24;

  if ((*a2 & 1) != 0)
  {
    *(_QWORD *)(a1 + 96) = 0;
LABEL_9:
    if (qword_1003158A0 != -1)
      swift_once(&qword_1003158A0, sub_1000D9810);
    v11 = type metadata accessor for Logger(0);
    v12 = sub_10000D744(v11, (uint64_t)qword_10033FE98);
    v13 = Logger.logObject.getter(v12);
    v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "didFinishPostNotificationRequest: checking if update is required", v15, 2u);
      swift_slowDealloc(v15, -1, -1);
    }

    sub_100024F50((uint64_t)v18);
    sub_10000B458((uint64_t)v18, (uint64_t)&v19, &qword_1003180D8);
    if (*((_QWORD *)&v20 + 1))
    {
      v23[0] = v19;
      v23[1] = v20;
      v23[2] = v21;
      v24 = v22;
      sub_100074F30((uint64_t)v23);
      sub_100025C84(v18);
    }
    else
    {
      sub_100076338(0);
    }
    Strong = swift_unknownObjectWeakLoadStrong(a1 + 104);
    if (Strong)
      swift_unknownObjectRelease(Strong);
    sub_100076338(1);
    return;
  }
  v4 = *(_QWORD *)(a1 + 96);
  v5 = __CFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
  {
    __break(1u);
LABEL_20:
    swift_once(&qword_1003158A0, sub_1000D9810);
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 96) = v6;
  if (*(_QWORD *)(a3 + 96) < 8uLL)
    goto LABEL_9;
  if (qword_1003158A0 != -1)
    goto LABEL_20;
LABEL_6:
  v7 = type metadata accessor for Logger(0);
  v8 = sub_10000D744(v7, (uint64_t)qword_10033FE98);
  oslog = Logger.logObject.getter(v8);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v9, "didFinishPostNotificationRequest: too many failures, skipping update", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }

}

uint64_t sub_1000247B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE v5[8];
  uint64_t v6;
  __int128 v7;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v5[0] = *(_BYTE *)a2;
  v6 = v2;
  v7 = *(_OWORD *)(a2 + 16);
  swift_retain(v3);
  PassthroughSubject.send(_:)(v5);
  return swift_release(v3);
}

unint64_t sub_100024808()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  unint64_t result;
  _BYTE v16[24];

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_100003DB8(&qword_1003180C8);
  __chkstk_darwin(v7, v8);
  v10 = (uint64_t)&v16[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  *(_WORD *)(v1 + 128) = 514;
  v11 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v10, 1, 1, v11);
  v12 = v1 + OBJC_IVAR____TtC8SOSBuddy22LockScreenNotification__lastTargetDisappearedAt;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy22LockScreenNotification__lastTargetDisappearedAt, v16, 33, 0);
  sub_100025C08(v10, v12);
  swift_endAccess(v16);
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v13);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  LOBYTE(v10) = _dispatchPreconditionTest(_:)(v6);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v10 & 1) != 0)
  {
    sub_100076338(0);
    result = sub_100076338(1);
    *(_QWORD *)(v1 + 96) = 0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10002497C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  uint64_t Strong;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  _BYTE v64[24];

  v5 = v4;
  v7 = (a4 & 1) == 0;
  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v13 = &v64[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v11, v14);
  v16 = &v64[-v15 - 8];
  v17 = sub_100003DB8(&qword_1003180C8);
  v19 = __chkstk_darwin(v17, v18);
  v21 = &v64[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v23 = __chkstk_darwin(v19, v22);
  v25 = &v64[-v24 - 8];
  v27 = __chkstk_darwin(v23, v26);
  v29 = &v64[-v28 - 8];
  v30 = *(unsigned __int8 *)(v5 + 129);
  if (v30 == 2)
  {
    *(_BYTE *)(v5 + 129) = v7;
    return;
  }
  if (((a4 ^ v30) & 1) == 0)
  {
    *(_BYTE *)(v5 + 129) = v7;
    if ((v30 & 1) != 0 && (a4 & 1) != 0)
    {
      static DispatchTime.now()(v27);
      (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v29, 0, 1, v8);
      sub_10000B458((uint64_t)v29, (uint64_t)v25, &qword_1003180C8);
      v31 = v5 + OBJC_IVAR____TtC8SOSBuddy22LockScreenNotification__lastTargetDisappearedAt;
      swift_beginAccess(v31, v64, 33, 0);
      sub_100025C08((uint64_t)v25, v31);
      swift_endAccess(v64);
      return;
    }
    if ((v30 & 1) == 0 && (a4 & 1) == 0)
    {
      Strong = swift_unknownObjectWeakLoadStrong(v5 + 104);
      if (Strong)
      {
        v33 = Strong;
        v34 = *(_QWORD *)(Strong + 72);
        swift_retain(v34);
        swift_unknownObjectRelease(v33);
        LOBYTE(v33) = *(_BYTE *)(v34 + 48);
        swift_release(v34);
        if ((v33 & 1) != 0)
        {
          v35 = v5 + OBJC_IVAR____TtC8SOSBuddy22LockScreenNotification__lastTargetDisappearedAt;
          swift_beginAccess(v5 + OBJC_IVAR____TtC8SOSBuddy22LockScreenNotification__lastTargetDisappearedAt, v64, 0, 0);
          sub_10000B234(v35, (uint64_t)v21, &qword_1003180C8);
          if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v21, 1, v8) == 1)
          {
            sub_100007FF0((uint64_t)v21, &qword_1003180C8);
            if (qword_1003158A0 != -1)
              swift_once(&qword_1003158A0, sub_1000D9810);
            v36 = type metadata accessor for Logger(0);
            v37 = sub_10000D744(v36, (uint64_t)qword_10033FE98);
            v38 = Logger.logObject.getter(v37);
            v39 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v38, v39))
            {
              v40 = (uint8_t *)swift_slowAlloc(2, -1);
              *(_WORD *)v40 = 0;
              _os_log_impl((void *)&_mh_execute_header, v38, v39, "Detected first time 'no target -> target' transition", v40, 2u);
              swift_slowDealloc(v40, -1, -1);
            }

            goto LABEL_17;
          }
          v46 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v9 + 32))(v16, v21, v8);
          v47 = static DispatchTime.now()(v46);
          v48 = DispatchTime.uptimeNanoseconds.getter(v47);
          v49 = DispatchTime.uptimeNanoseconds.getter(v48);
          if (v49 >= v48)
          {
            v34 = *(_QWORD *)(v9 + 8);
            ((void (*)(_BYTE *, uint64_t))v34)(v13, v8);
          }
          else
          {
            v50 = DispatchTime.uptimeNanoseconds.getter(v49);
            v51 = DispatchTime.uptimeNanoseconds.getter(v50);
            v52 = v50 - v51;
            if (v50 < v51)
            {
              __break(1u);
              goto LABEL_37;
            }
            v34 = *(_QWORD *)(v9 + 8);
            ((void (*)(_BYTE *, uint64_t))v34)(v13, v8);
            if (v52 >= 0x737BE7600)
            {
              if (qword_1003158A0 == -1)
              {
LABEL_24:
                v53 = type metadata accessor for Logger(0);
                sub_10000D744(v53, (uint64_t)qword_10033FE98);
                swift_retain(v5);
                v55 = Logger.logObject.getter(v54);
                v56 = static os_log_type_t.default.getter();
                if (os_log_type_enabled(v55, v56))
                {
                  v57 = (uint8_t *)swift_slowAlloc(12, -1);
                  *(_DWORD *)v57 = 134349056;
                  v63 = 30;
                  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v63, v64, v57 + 4, v57 + 12);
                  swift_release(v5);
                  _os_log_impl((void *)&_mh_execute_header, v55, v56, "Detected 'no target -> target' transition longer than %{public}ld seconds", v57, 0xCu);
                  swift_slowDealloc(v57, -1, -1);
                }
                else
                {
                  swift_release(v5);
                }

                ((void (*)(_BYTE *, uint64_t))v34)(v16, v8);
LABEL_17:
                sub_100076338(0);
                v41 = swift_unknownObjectWeakLoadStrong(v5 + 104);
                if (!v41)
                  goto LABEL_26;
                v42 = v41;
                v43 = *(_QWORD *)(*(_QWORD *)(v41 + 48) + 56);
                swift_retain(v43);
                swift_unknownObjectRelease(v42);
                v44 = *(_QWORD *)(v43 + 200);
                swift_bridgeObjectRetain(v44);
                swift_release(v43);
                LOBYTE(v43) = sub_10019C260((uint64_t)&off_1002E04B8, v44);
                swift_bridgeObjectRelease(v44);
                if ((v43 & 1) != 0)
                {
                  v45 = *(_QWORD *)(v5 + 24);
                  LOBYTE(v63) = 2;
                  swift_retain(v45);
                  PassthroughSubject.send(_:)(&v63);
                  swift_release(v45);
                }
                else
                {
LABEL_26:
                  if (qword_1003158A0 != -1)
                    swift_once(&qword_1003158A0, sub_1000D9810);
                  v58 = type metadata accessor for Logger(0);
                  v59 = sub_10000D744(v58, (uint64_t)qword_10033FE98);
                  v60 = Logger.logObject.getter(v59);
                  v61 = static os_log_type_t.default.getter();
                  if (os_log_type_enabled(v60, v61))
                  {
                    v62 = (uint8_t *)swift_slowAlloc(2, -1);
                    *(_WORD *)v62 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v60, v61, "Skipping haptic, orientation guidance will take care of it", v62, 2u);
                    swift_slowDealloc(v62, -1, -1);
                  }

                }
                return;
              }
LABEL_37:
              swift_once(&qword_1003158A0, sub_1000D9810);
              goto LABEL_24;
            }
          }
          ((void (*)(_BYTE *, uint64_t))v34)(v16, v8);
        }
      }
    }
  }
}

void sub_100024F50(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t Strong;
  _QWORD *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  Swift::Int v18;
  char v19;
  int v20;
  id v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  const char *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;
  uint64_t v44;
  Swift::Int v45;
  char v46;
  Swift::Int v47;
  char v48;
  void *v49;
  id v50;
  Swift::String v51;
  Swift::String_optional v52;
  Swift::String v53;
  Swift::String v54;
  id v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  void *v61;
  id v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  uint64_t v66;
  void *v67;
  id v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  unint64_t v72;
  Swift::String v73;
  Swift::String v74;
  uint64_t v75;
  void *v76;
  void *v77;
  id v78;
  Swift::String v79;
  Swift::String_optional v80;
  Swift::String v81;
  Swift::String v82;
  Swift::String v83;
  Swift::String v84;
  id v85;
  Swift::String v86;
  Swift::String v87;
  Swift::String v88;
  void *v89;
  id v90;
  Swift::String v91;
  Swift::String v92;
  Swift::String v93;
  id v94;
  Swift::String v95;
  Swift::String_optional v96;
  Swift::String v97;
  Swift::String v98;
  id v99;
  Swift::String v100;
  Swift::String v101;
  Swift::String v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  id v106;
  uint64_t v107;
  _BYTE v108[24];
  Swift::String v109;
  Swift::String v110;
  Swift::String v111;
  Swift::String v112;
  Swift::String v113;
  Swift::String v114;
  Swift::String v115;
  Swift::String v116;
  Swift::String v117;
  Swift::String v118;

  v3 = sub_100003DB8(&qword_1003180C0);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ConnectionClosed(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Strong = swift_unknownObjectWeakLoadStrong(v1 + 104);
  if (!Strong)
    goto LABEL_44;
  v13 = (_QWORD *)Strong;
  v14 = *(unsigned __int8 *)(*(_QWORD *)(Strong + 72) + 48);
  if (v14 == 2 || (v14 & 1) == 0)
    goto LABEL_43;
  v15 = *(_QWORD *)(*(_QWORD *)(Strong + 48) + 32);
  if (!*(_QWORD *)(v15 + 64) || *(_BYTE *)(v15 + 56) != 5)
  {
    v20 = *(unsigned __int8 *)(v1 + 128);
    if (v20 == 2 || (v20 & 1) == 0)
      goto LABEL_43;
    v106 = (id)objc_opt_self(NSBundle);
    v21 = objc_msgSend(v106, "mainBundle");
    v22._countAndFlagsBits = 0xD000000000000014;
    v109._countAndFlagsBits = 0xD00000000000008ALL;
    v109._object = (void *)0x8000000100262020;
    v22._object = (void *)0x8000000100262000;
    v23._countAndFlagsBits = 0;
    v23._object = (void *)0xE000000000000000;
    v24 = NSLocalizedString(_:tableName:bundle:value:comment:)(v22, (Swift::String_optional)0, (NSBundle)v21, v23, v109);
    countAndFlagsBits = v24._countAndFlagsBits;
    object = v24._object;

    v27 = *(_QWORD *)(v1 + 40);
    v105 = *(_QWORD *)(v1 + 32);
    v107 = *(_QWORD *)(v13[6] + 112) + OBJC_IVAR____TtC8SOSBuddy21ConnectionClosedModel__connectionClosed;
    swift_beginAccess(v107, v108, 0, 0);
    sub_10000B234(v107, (uint64_t)v6, &qword_1003180C0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      swift_bridgeObjectRetain(v27);
      sub_100007FF0((uint64_t)v6, &qword_1003180C0);
LABEL_13:
      v29 = v105;
      v28 = v106;
LABEL_14:
      v30 = objc_msgSend(v28, "mainBundle");
      v31 = 0xD000000000000010;
      v32 = 0xD000000000000053;
      v103 = 0x80000001002620D0;
      v33 = "Connection Ended";
LABEL_32:
      v72 = (unint64_t)(v33 - 32) | 0x8000000000000000;
      v73._countAndFlagsBits = 0;
      v73._object = (void *)0xE000000000000000;
      v74 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v31, (Swift::String_optional)0, (NSBundle)v30, v73, *(Swift::String *)&v32);
      v75 = v74._countAndFlagsBits;
      v76 = v74._object;
      swift_unknownObjectRelease(v13);

LABEL_45:
      *(_QWORD *)a1 = v29;
      *(_QWORD *)(a1 + 8) = v27;
      *(_QWORD *)(a1 + 16) = countAndFlagsBits;
      *(_QWORD *)(a1 + 24) = object;
      *(_QWORD *)(a1 + 32) = v75;
      *(_QWORD *)(a1 + 40) = v76;
      *(_BYTE *)(a1 + 48) = 0;
      return;
    }
    sub_100025B88((uint64_t)v6, (uint64_t)v11);
    v44 = *(_QWORD *)&v11[*(int *)(v7 + 24)];
    v45 = sub_1002096C4((uint64_t)&off_1002E0468);
    v46 = sub_1001BF5E8(v44, v45);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRelease(v45);
    if ((v46 & 1) != 0
      || (v47 = sub_1002096C4((uint64_t)&off_1002E0490),
          v48 = sub_1001BF5E8(v44, v47),
          swift_bridgeObjectRelease(v47),
          (v48 & 1) != 0))
    {
      sub_100025BCC((uint64_t)v11);
      swift_unknownObjectRelease(v13);
      swift_bridgeObjectRelease(v24._object);
      swift_bridgeObjectRelease(v27);
LABEL_44:
      v29 = 0;
      v27 = 0;
      countAndFlagsBits = 0;
      object = 0;
      v75 = 0;
      v76 = 0;
      goto LABEL_45;
    }
    if (sub_100067058(0, v44))
    {
      swift_bridgeObjectRelease(v24._object);
      swift_bridgeObjectRelease(v27);
      v28 = v106;
      v85 = objc_msgSend(v106, "mainBundle");
      v86._countAndFlagsBits = 0xD00000000000001BLL;
      v115._countAndFlagsBits = 0xD00000000000003CLL;
      v115._object = (void *)0x8000000100262240;
      v86._object = (void *)0x8000000100262220;
      v87._countAndFlagsBits = 0;
      v87._object = (void *)0xE000000000000000;
      v88 = NSLocalizedString(_:tableName:bundle:value:comment:)(v86, (Swift::String_optional)0, (NSBundle)v85, v87, v115);
      countAndFlagsBits = v88._countAndFlagsBits;
      object = v88._object;

      sub_100025BCC((uint64_t)v11);
      v29 = *(_QWORD *)(v1 + 48);
      v27 = *(_QWORD *)(v1 + 56);
    }
    else
    {
      if (sub_100067058(1u, v44))
      {
        swift_bridgeObjectRelease(v24._object);
        swift_bridgeObjectRelease(v27);
        v28 = v106;
        v94 = objc_msgSend(v106, "mainBundle");
        v95._countAndFlagsBits = 0xD000000000000021;
        v117._countAndFlagsBits = 0xD000000000000042;
        v117._object = (void *)0x80000001002621D0;
        v95._object = (void *)0x8000000100262180;
        v96.value._object = (void *)0x80000001002621B0;
        v96.value._countAndFlagsBits = 0xD000000000000012;
        v97._countAndFlagsBits = 0;
        v97._object = (void *)0xE000000000000000;
        v98 = NSLocalizedString(_:tableName:bundle:value:comment:)(v95, v96, (NSBundle)v94, v97, v117);
        countAndFlagsBits = v98._countAndFlagsBits;
        object = v98._object;

        sub_100025BCC((uint64_t)v11);
        v29 = 0;
        v27 = 0;
        goto LABEL_14;
      }
      if (!sub_100067058(4u, v44))
      {
        sub_100025BCC((uint64_t)v11);
        goto LABEL_13;
      }
      swift_bridgeObjectRelease(v24._object);
      swift_bridgeObjectRelease(v27);
      v28 = v106;
      v99 = objc_msgSend(v106, "mainBundle");
      v100._countAndFlagsBits = 0xD000000000000015;
      v118._countAndFlagsBits = 0xD00000000000002BLL;
      v118._object = (void *)0x8000000100262150;
      v100._object = (void *)0x8000000100262130;
      v101._countAndFlagsBits = 0;
      v101._object = (void *)0xE000000000000000;
      v102 = NSLocalizedString(_:tableName:bundle:value:comment:)(v100, (Swift::String_optional)0, (NSBundle)v99, v101, v118);
      countAndFlagsBits = v102._countAndFlagsBits;
      object = v102._object;

      sub_100025BCC((uint64_t)v11);
      v29 = *(_QWORD *)(v1 + 64);
      v27 = *(_QWORD *)(v1 + 72);
    }
    swift_bridgeObjectRetain(v27);
    goto LABEL_14;
  }
  v16 = *(_QWORD *)(v15 + 88);
  swift_bridgeObjectRetain(v16);
  v17 = sub_1002096C4((uint64_t)&off_1002E0440);
  v18 = v17;
  if (v16)
  {
    v19 = sub_1001BF5E8(v16, v17);
    swift_bridgeObjectRelease(v16);
    swift_bridgeObjectRelease(v18);
    if ((v19 & 1) != 0)
      goto LABEL_43;
  }
  else
  {
    swift_bridgeObjectRelease(v17);
  }
  v34 = v13[4];
  v35 = *(unsigned __int8 *)(v34 + 41);
  if (v35 == 8)
  {
    if ((*(_BYTE *)(v34 + 42) & 1) == 0)
    {
      v49 = (void *)objc_opt_self(NSBundle);
      v50 = objc_msgSend(v49, "mainBundle");
      v51._countAndFlagsBits = 0xD000000000000021;
      v111._countAndFlagsBits = 0xD000000000000042;
      v111._object = (void *)0x80000001002621D0;
      v51._object = (void *)0x8000000100262180;
      v52.value._object = (void *)0x80000001002621B0;
      v52.value._countAndFlagsBits = 0xD000000000000012;
      v53._countAndFlagsBits = 0;
      v53._object = (void *)0xE000000000000000;
      v54 = NSLocalizedString(_:tableName:bundle:value:comment:)(v51, v52, (NSBundle)v50, v53, v111);
      countAndFlagsBits = v54._countAndFlagsBits;
      object = v54._object;

      v55 = objc_msgSend(v49, "mainBundle");
      v56 = 0xD00000000000002FLL;
      v57 = 0xD000000000000067;
      v104 = 0x8000000100262500;
      v58 = 0x80000001002624D0;
      v59 = 0;
      v60 = 0;
      goto LABEL_36;
    }
LABEL_29:
    v66 = *(_QWORD *)(v13[6] + 32);
    if (!*(_QWORD *)(v66 + 64))
      goto LABEL_43;
    if (sub_100067058(0, *(_QWORD *)(v66 + 88)))
    {
      v29 = *(_QWORD *)(v1 + 48);
      v27 = *(_QWORD *)(v1 + 56);
      v67 = (void *)objc_opt_self(NSBundle);
      swift_bridgeObjectRetain(v27);
      v68 = objc_msgSend(v67, "mainBundle");
      v69._countAndFlagsBits = 0xD00000000000001BLL;
      v113._countAndFlagsBits = 0xD00000000000003CLL;
      v113._object = (void *)0x8000000100262240;
      v69._object = (void *)0x8000000100262220;
      v70._countAndFlagsBits = 0;
      v70._object = (void *)0xE000000000000000;
      v71 = NSLocalizedString(_:tableName:bundle:value:comment:)(v69, (Swift::String_optional)0, (NSBundle)v68, v70, v113);
      countAndFlagsBits = v71._countAndFlagsBits;
      object = v71._object;

      v30 = objc_msgSend(v67, "mainBundle");
      v31 = 0xD000000000000031;
      v32 = 0xD000000000000085;
      v103 = 0x8000000100262440;
      v33 = "Continue your connection with emergency services.";
      goto LABEL_32;
    }
    if (!*(_QWORD *)(v66 + 64))
    {
LABEL_43:
      swift_unknownObjectRelease(v13);
      goto LABEL_44;
    }
    if (!sub_100067058(1u, *(_QWORD *)(v66 + 88)))
    {
      if (!*(_QWORD *)(v66 + 64) || !sub_100067058(4u, *(_QWORD *)(v66 + 88)))
        goto LABEL_43;
      v29 = *(_QWORD *)(v1 + 64);
      v27 = *(_QWORD *)(v1 + 72);
      v89 = (void *)objc_opt_self(NSBundle);
      swift_bridgeObjectRetain(v27);
      v90 = objc_msgSend(v89, "mainBundle");
      v91._countAndFlagsBits = 0xD000000000000015;
      v116._countAndFlagsBits = 0xD00000000000002BLL;
      v116._object = (void *)0x8000000100262150;
      v91._object = (void *)0x8000000100262130;
      v92._countAndFlagsBits = 0;
      v92._object = (void *)0xE000000000000000;
      v93 = NSLocalizedString(_:tableName:bundle:value:comment:)(v91, (Swift::String_optional)0, (NSBundle)v90, v92, v116);
      countAndFlagsBits = v93._countAndFlagsBits;
      object = v93._object;

      v30 = objc_msgSend(v89, "mainBundle");
      v31 = 0xD00000000000002ALL;
      v32 = 0xD000000000000082;
      v103 = 0x80000001002622B0;
      v33 = "Continue your connection to send location.";
      goto LABEL_32;
    }
    v77 = (void *)objc_opt_self(NSBundle);
    v78 = objc_msgSend(v77, "mainBundle");
    v79._countAndFlagsBits = 0xD000000000000021;
    v114._countAndFlagsBits = 0xD000000000000042;
    v114._object = (void *)0x80000001002621D0;
    v79._object = (void *)0x8000000100262180;
    v80.value._countAndFlagsBits = 0xD000000000000012;
    v80.value._object = (void *)0x80000001002621B0;
    v81._countAndFlagsBits = 0;
    v81._object = (void *)0xE000000000000000;
    v82 = NSLocalizedString(_:tableName:bundle:value:comment:)(v79, v80, (NSBundle)v78, v81, v114);
    countAndFlagsBits = v82._countAndFlagsBits;
    object = v82._object;

    v55 = objc_msgSend(v77, "mainBundle");
    v56 = 0xD00000000000002FLL;
    v57 = 0xD000000000000085;
    v104 = 0x8000000100262370;
    v58 = 0x8000000100262340;
    v59 = 0xD000000000000012;
    v60 = 0x80000001002621B0;
LABEL_36:
    v83._countAndFlagsBits = 0;
    v83._object = (void *)0xE000000000000000;
    v84 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v56, *(Swift::String_optional *)&v59, (NSBundle)v55, v83, *(Swift::String *)&v57);
    v75 = v84._countAndFlagsBits;
    v76 = v84._object;
    swift_unknownObjectRelease(v13);

    v29 = 0;
    v27 = 0;
    goto LABEL_45;
  }
  if (v35 != 3)
    goto LABEL_29;
  v36 = *(_QWORD *)(v13[7] + 88);
  if (!v36)
  {
LABEL_27:
    if ((*(_BYTE *)(v34 + 42) & 1) == 0)
    {
      v29 = *(_QWORD *)(v1 + 48);
      v27 = *(_QWORD *)(v1 + 56);
      v61 = (void *)objc_opt_self(NSBundle);
      swift_bridgeObjectRetain(v27);
      v62 = objc_msgSend(v61, "mainBundle");
      v63._countAndFlagsBits = 0xD00000000000001BLL;
      v112._countAndFlagsBits = 0xD00000000000003CLL;
      v112._object = (void *)0x8000000100262240;
      v63._object = (void *)0x8000000100262220;
      v64._countAndFlagsBits = 0;
      v64._object = (void *)0xE000000000000000;
      v65 = NSLocalizedString(_:tableName:bundle:value:comment:)(v63, (Swift::String_optional)0, (NSBundle)v62, v64, v112);
      countAndFlagsBits = v65._countAndFlagsBits;
      object = v65._object;

      v30 = objc_msgSend(v61, "mainBundle");
      v31 = 0xD00000000000002FLL;
      v32 = 0xD000000000000067;
      v103 = 0x8000000100262500;
      v33 = "Answer questions to help get a faster response.";
      goto LABEL_32;
    }
    goto LABEL_29;
  }
  swift_beginAccess(v36 + 48, v108, 0, 0);
  v37 = *(_QWORD *)(v36 + 144);
  v38 = *(_QWORD *)(v37 + 16);
  if (v38)
  {
    if (*(_BYTE *)(v38 + v37 + 31) == 3)
    {
      v29 = *(_QWORD *)(v1 + 48);
      v27 = *(_QWORD *)(v1 + 56);
      v39 = (void *)objc_opt_self(NSBundle);
      swift_bridgeObjectRetain(v27);
      v40 = objc_msgSend(v39, "mainBundle");
      v41._countAndFlagsBits = 0xD00000000000001BLL;
      v110._countAndFlagsBits = 0xD00000000000003CLL;
      v110._object = (void *)0x8000000100262240;
      v41._object = (void *)0x8000000100262220;
      v42._countAndFlagsBits = 0;
      v42._object = (void *)0xE000000000000000;
      v43 = NSLocalizedString(_:tableName:bundle:value:comment:)(v41, (Swift::String_optional)0, (NSBundle)v40, v42, v110);
      countAndFlagsBits = v43._countAndFlagsBits;
      object = v43._object;

      v30 = objc_msgSend(v39, "mainBundle");
      v31 = 0xD000000000000025;
      v32 = 0xD000000000000076;
      v103 = 0x80000001002625A0;
      v33 = "iPhone will try to send your answers.";
      goto LABEL_32;
    }
    goto LABEL_27;
  }
  __break(1u);
}

void sub_100025B34(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100323F10)
  {
    v2 = type metadata accessor for DispatchTime(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100323F10);
  }
}

uint64_t sub_100025B88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for ConnectionClosed(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100025BCC(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for ConnectionClosed(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100025C08(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_1003180C8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100025C50()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100025C74(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_1000243B8(a1, a2, *(_QWORD *)(v2 + 16));
}

void sub_100025C7C(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  sub_10002456C(a1, a2, v2);
}

uint64_t *sub_100025C84(uint64_t *a1)
{
  sub_100025CBC(*a1, a1[1], a1[2], a1[3], a1[4], a1[5]);
  return a1;
}

uint64_t sub_100025CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    return swift_bridgeObjectRelease(a2);
  }
  return result;
}

uint64_t sub_100025CF8(uint64_t a1)
{
  swift_unknownObjectWeakDestroy(a1);
  return a1;
}

uint64_t sub_100025D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 16);
}

uint64_t type metadata accessor for ViewSizeCapturer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewSizeCapturer);
}

uint64_t sub_100025D30(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1002951E8, 1);
}

uint64_t sub_100025D64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t WitnessTable;
  uint64_t v20;
  uint64_t v21;

  v6 = swift_allocObject(&unk_1002E5AF0, 32, 7);
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v7 = type metadata accessor for _PreferenceWritingModifier(255, a1, a2);
  v8 = type metadata accessor for ModifiedContent(0, &type metadata for Color, v7);
  v18 = &protocol witness table for Color;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v7);
  v9 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
  v10 = GeometryReader.init(content:)(sub_100025FFC, v6, v8, v9);
  v12 = v11;
  v16 = v10;
  v17 = v11;
  v13 = type metadata accessor for GeometryReader(0, v8, v9);
  swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v13);
  sub_100092E98((uint64_t)&v16, v13, (uint64_t)&v20);
  swift_release(v12);
  v14 = v21;
  v16 = v20;
  v17 = v21;
  sub_1000903EC((uint64_t)&v16, v13, a3);
  return swift_release(v14);
}

uint64_t sub_100025E9C@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  double v12;
  double v14;
  __int128 v15;
  double v16;
  __int128 v17;
  double v18;
  __int128 v19;

  v7 = static Color.clear.getter(a4);
  v18 = GeometryProxy.size.getter();
  *(_QWORD *)&v19 = v8;
  View.preference<A>(key:value:)(&v16, a1, &v18, &type metadata for Color, a1, &protocol witness table for Color, a2);
  swift_release(v7);
  v9 = v16;
  v14 = v16;
  v15 = v17;
  v10 = type metadata accessor for _PreferenceWritingModifier(255, a1, a2);
  v11 = type metadata accessor for ModifiedContent(0, &type metadata for Color, v10);
  swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v10);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v11);
  sub_100092E98((uint64_t)&v14, v11, (uint64_t)&v18);
  swift_release(*(_QWORD *)&v9);
  v12 = v18;
  v16 = v18;
  v17 = v19;
  sub_1000903EC((uint64_t)&v16, v11, a3);
  return swift_release(*(_QWORD *)&v12);
}

uint64_t sub_100025FE0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100025D64(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_100025FEC()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100025FFC@<X0>(uint64_t a1@<X8>, __n128 a2@<Q0>)
{
  uint64_t v2;

  return sub_100025E9C(*(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a1, a2);
}

uint64_t sub_100026004(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t WitnessTable;
  uint64_t v4;

  v1 = type metadata accessor for _PreferenceWritingModifier(255, *a1, a1[1]);
  v2 = type metadata accessor for ModifiedContent(255, &type metadata for Color, v1);
  swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v1);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
  v4 = type metadata accessor for GeometryReader(255, v2, WitnessTable);
  return swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v4);
}

uint64_t type metadata accessor for ViewFrameCapturer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for ViewFrameCapturer);
}

uint64_t sub_1000260A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __int128 v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 16);
  v5 = v2;
  return swift_getOpaqueTypeConformance2(&v4, &unk_10029527C, 1);
}

uint64_t sub_1000260E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t WitnessTable;
  uint64_t v22;
  uint64_t v23;

  v8 = (_QWORD *)swift_allocObject(&unk_1002E5B18, 40, 7);
  v8[2] = a1;
  v8[3] = a2;
  v8[4] = a3;
  v9 = type metadata accessor for _PreferenceWritingModifier(255, a1, a3);
  v10 = type metadata accessor for ModifiedContent(0, &type metadata for Color, v9);
  v20 = &protocol witness table for Color;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v9);
  v11 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v10);
  v12 = GeometryReader.init(content:)(sub_1000263E0, v8, v10, v11);
  v14 = v13;
  v18 = v12;
  v19 = v13;
  v15 = type metadata accessor for GeometryReader(0, v10, v11);
  swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v15);
  sub_100092E98((uint64_t)&v18, v15, (uint64_t)&v22);
  swift_release(v14);
  v16 = v23;
  v18 = v22;
  v19 = v23;
  sub_1000903EC((uint64_t)&v18, v15, a4);
  return swift_release(v16);
}

uint64_t sub_10002622C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, __n128 a6@<Q0>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[2];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v11 = static Color.clear.getter(a6);
  v27 = v11;
  v12 = sub_100003DB8(&qword_1003181E8);
  v13 = swift_allocObject(v12, 64, 7);
  *(_OWORD *)(v13 + 16) = xmmword_10024E070;
  *(double *)(v13 + 32) = (*(double (**)(uint64_t, uint64_t, uint64_t))(a3 + 8))(a1, a2, a3);
  *(_QWORD *)(v13 + 40) = v14;
  *(_QWORD *)(v13 + 48) = v15;
  *(_QWORD *)(v13 + 56) = v16;
  v24[0] = v13;
  View.preference<A>(key:value:)(&v25, a2, v24, &type metadata for Color, a2, &protocol witness table for Color, a4);
  swift_release(v11);
  swift_bridgeObjectRelease(v13);
  v17 = v25;
  v18 = v26;
  v24[0] = v25;
  v24[1] = v26;
  v19 = type metadata accessor for _PreferenceWritingModifier(255, a2, a4);
  v20 = type metadata accessor for ModifiedContent(0, &type metadata for Color, v19);
  swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v19);
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v20);
  sub_100092E98((uint64_t)v24, v20, (uint64_t)&v27);
  swift_bridgeObjectRelease(v18);
  swift_release(v17);
  v21 = v27;
  v22 = v28;
  v25 = v27;
  v26 = v28;
  sub_1000903EC((uint64_t)&v25, v20, a5);
  swift_bridgeObjectRelease(v22);
  return swift_release(v21);
}

uint64_t sub_1000263C0@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000260E4(a1[2], a1[3], a1[4], a2);
}

uint64_t sub_1000263D0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000263E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t *v3;

  return sub_10002622C(a1, v3[2], v3[3], v3[4], a2, a3);
}

uint64_t sub_1000263EC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t WitnessTable;
  uint64_t v4;

  v1 = type metadata accessor for _PreferenceWritingModifier(255, *a1, a1[2]);
  v2 = type metadata accessor for ModifiedContent(255, &type metadata for Color, v1);
  swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v1);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
  v4 = type metadata accessor for GeometryReader(255, v2, WitnessTable);
  return swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v4);
}

uint64_t destroy for FreeFormContentView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[5]);
  swift_release(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  swift_release(a1[10]);
  return swift_bridgeObjectRelease(a1[12]);
}

uint64_t initializeWithCopy for FreeFormContentView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v7 = a2[4];
  *(_QWORD *)(a1 + 32) = v7;
  v14 = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(a1 + 40) = v14;
  v9 = a2[7];
  v8 = a2[8];
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v8;
  v10 = a2[9];
  v11 = a2[10];
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v11;
  v12 = a2[12];
  *(_QWORD *)(a1 + 88) = a2[11];
  *(_QWORD *)(a1 + 96) = v12;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v14);
  swift_retain(v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v11);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t *assignWithCopy for FreeFormContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[7];
  v13 = a1[7];
  a1[6] = a2[6];
  a1[7] = v12;
  swift_retain(v12);
  swift_release(v13);
  a1[8] = a2[8];
  v14 = a2[9];
  v15 = a1[9];
  a1[9] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a1[10];
  v17 = a2[10];
  a1[10] = v17;
  swift_retain(v17);
  swift_release(v16);
  a1[11] = a2[11];
  v18 = a2[12];
  v19 = a1[12];
  a1[12] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  return a1;
}

__n128 initializeWithTake for FreeFormContentView(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t *assignWithTake for FreeFormContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  a1[3] = a2[3];
  swift_release(a1[4]);
  v7 = a1[5];
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  swift_release(v7);
  v8 = a1[7];
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  swift_release(v8);
  a1[8] = a2[8];
  swift_bridgeObjectRelease(a1[9]);
  v9 = a1[10];
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  swift_release(v9);
  v10 = a2[12];
  v11 = a1[12];
  a1[11] = a2[11];
  a1[12] = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for FreeFormContentView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FreeFormContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FreeFormContentView()
{
  return &type metadata for FreeFormContentView;
}

uint64_t sub_100026828(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029532C, 1);
}

uint64_t sub_100026838@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  void (**v50)();
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59[2];
  uint64_t v60;
  _QWORD v61[3];
  uint64_t v62;
  uint64_t v63;

  v2 = v1;
  v58 = a1;
  v3 = sub_100003DB8(&qword_1003181F0);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100003DB8(&qword_1003181F8);
  __chkstk_darwin(v56, v7);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100003DB8(&qword_100318200);
  __chkstk_darwin(v57, v10);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD **)(v1 + 16);
  if (v13)
  {
    v14 = v13[9];
    v15 = v13[10];
    sub_100007BBC(v13 + 6, v14);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v15 + 24))(v61, v14, v15);
    v16 = sub_100026C28();
    v17 = v62;
    v18 = v63;
    sub_100007BBC(v61, v62);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 360))(v17, v18);
    v21 = v20;
    *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v19);
    *((_QWORD *)v6 + 1) = v21;
    v6[16] = 0;
    v55 = &v6[*(int *)(sub_100003DB8(&qword_100318208) + 44)];
    v60 = *(_QWORD *)(*(_QWORD *)(v1 + 40) + 136);
    v22 = v60;
    KeyPath = swift_getKeyPath(&unk_10024E4F0);
    sub_100007CBC((uint64_t)v61, (uint64_t)v59);
    v24 = swift_allocObject(&unk_1002E5C18, 168, 7);
    v25 = *(_OWORD *)(v1 + 80);
    *(_OWORD *)(v24 + 80) = *(_OWORD *)(v1 + 64);
    *(_OWORD *)(v24 + 96) = v25;
    v26 = *(_QWORD *)(v1 + 96);
    v27 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v24 + 16) = *(_OWORD *)v1;
    *(_OWORD *)(v24 + 32) = v27;
    v28 = *(_OWORD *)(v1 + 48);
    *(_OWORD *)(v24 + 48) = *(_OWORD *)(v1 + 32);
    *(_OWORD *)(v24 + 64) = v28;
    *(_QWORD *)(v24 + 112) = v26;
    *(_QWORD *)(v24 + 120) = v16;
    sub_100007D04(v59, v24 + 128);
    swift_bridgeObjectRetain(v22);
    sub_1000275FC((uint64_t *)v1);
    v29 = sub_100003DB8(&qword_100318210);
    v30 = sub_100003DB8(&qword_100318218);
    v31 = sub_1000084FC(&qword_100318220, &qword_100318210, (uint64_t)&protocol conformance descriptor for [A]);
    v32 = sub_100027688();
    v33 = sub_1000276CC();
    v34 = ForEach<>.init(_:id:content:)(&v60, KeyPath, sub_1000275EC, v24, v29, v30, v31, v32, v33);
    LOBYTE(v24) = static Edge.Set.top.getter(v34);
    v35 = v62;
    v36 = v63;
    sub_100007BBC(v61, v62);
    v37 = (*(double (**)(uint64_t, uint64_t))(v36 + 352))(v35, v36);
    v38 = EdgeInsets.init(_all:)(v37);
    v40 = v39;
    v42 = v41;
    v44 = v43;
    sub_10000B234((uint64_t)v6, (uint64_t)v9, &qword_1003181F0);
    v45 = &v9[*(int *)(v56 + 36)];
    *v45 = v24;
    *((double *)v45 + 1) = v38;
    *((_QWORD *)v45 + 2) = v40;
    *((_QWORD *)v45 + 3) = v42;
    *((_QWORD *)v45 + 4) = v44;
    v45[40] = 0;
    sub_100007FF0((uint64_t)v6, &qword_1003181F0);
    v46 = swift_allocObject(&unk_1002E5C40, 120, 7);
    v47 = *(_OWORD *)(v2 + 80);
    *(_OWORD *)(v46 + 80) = *(_OWORD *)(v2 + 64);
    *(_OWORD *)(v46 + 96) = v47;
    *(_QWORD *)(v46 + 112) = *(_QWORD *)(v2 + 96);
    v48 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v46 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v46 + 32) = v48;
    v49 = *(_OWORD *)(v2 + 48);
    *(_OWORD *)(v46 + 48) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v46 + 64) = v49;
    sub_10000B234((uint64_t)v9, (uint64_t)v12, &qword_1003181F8);
    v50 = (void (**)())&v12[*(int *)(v57 + 36)];
    *v50 = sub_10002783C;
    v50[1] = (void (*)())v46;
    v50[2] = 0;
    v50[3] = 0;
    sub_1000275FC((uint64_t *)v2);
    sub_100007FF0((uint64_t)v9, &qword_1003181F8);
    sub_10000B458((uint64_t)v12, v58, &qword_100318200);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v61);
  }
  else
  {
    v52 = *(_QWORD *)(v1 + 24);
    v53 = type metadata accessor for UIMetrics();
    v54 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v52, v53, v54);
    __break(1u);
  }
  return result;
}

uint64_t sub_100026C28()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v1 = *(_QWORD *)(*(_QWORD *)(v0 + 40) + 144);
  v2 = (_QWORD *)sub_100224880((uint64_t)_swiftEmptyArrayStorage);
  if ((unint64_t)v1 >> 62)
    goto LABEL_29;
  v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  v33 = v3 - 1;
  swift_bridgeObjectRetain(v1);
  v4 = 0;
  if (!v3)
  {
LABEL_34:
    swift_bridgeObjectRelease(v1);
    swift_release(v3);
    swift_release(v4);
    return (uint64_t)v2;
  }
  while (2)
  {
    v5 = 0;
    v6 = v1 & 0xC000000000000001;
    v30 = v1 + 32;
    v31 = v1;
    v7 = 4;
    v32 = v3;
    while (1)
    {
      v10 = v7 - 4;
      if (!v6)
        break;
      v3 = specialized _ArrayBuffer._getElementSlowPath(_:)(v7 - 4, v1);
      v11 = v7 - 3;
      if (__OFADD__(v10, 1))
        goto LABEL_26;
LABEL_11:
      if (v10 >= v33)
      {
        swift_release(v4);
        v4 = 0;
      }
      else
      {
        if (v6)
        {
          v12 = specialized _ArrayBuffer._getElementSlowPath(_:)(v11, v1);
        }
        else
        {
          v12 = *(_QWORD *)(v30 + 8 * v11);
          swift_retain(v12);
        }
        swift_release(v4);
        v4 = v12;
      }
      swift_retain(v5);
      swift_retain(v4);
      swift_retain(v3);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
      v15 = sub_10017D414(v3);
      v16 = v2[2];
      v17 = (v14 & 1) == 0;
      v18 = v16 + v17;
      if (__OFADD__(v16, v17))
        goto LABEL_27;
      v1 = v14;
      if (v2[3] >= v18)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          sub_10008AA80();
      }
      else
      {
        sub_1000876B4(v18, isUniquelyReferenced_nonNull_native);
        v19 = sub_10017D414(v3);
        if ((v1 & 1) != (v20 & 1))
          goto LABEL_36;
        v15 = v19;
      }
      if ((v1 & 1) != 0)
      {
        v8 = (uint64_t *)(v2[7] + 16 * v15);
        v9 = v8[1];
        swift_release(*v8);
        swift_release(v9);
        *v8 = v5;
        v8[1] = v4;
      }
      else
      {
        v2[(v15 >> 6) + 8] |= 1 << v15;
        *(_QWORD *)(v2[6] + 8 * v15) = v3;
        v21 = (uint64_t *)(v2[7] + 16 * v15);
        *v21 = v5;
        v21[1] = v4;
        v22 = v2[2];
        v23 = __OFADD__(v22, 1);
        v24 = v22 + 1;
        if (v23)
          goto LABEL_28;
        v2[2] = v24;
        swift_retain(v3);
      }
      swift_release(v5);
      swift_release(v3);
      swift_bridgeObjectRelease(0x8000000000000000);
      ++v7;
      v5 = v3;
      v1 = v31;
      if (v11 == v32)
        goto LABEL_34;
    }
    v3 = *(_QWORD *)(v1 + 8 * v7);
    swift_retain(v3);
    v11 = v7 - 3;
    if (!__OFADD__(v10, 1))
      goto LABEL_11;
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    if (v1 < 0)
      v25 = v1;
    else
      v25 = v1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v1);
    v26 = _CocoaArrayWrapper.endIndex.getter(v25);
    v27 = swift_bridgeObjectRelease(v1);
    v33 = v26 - 1;
    if (!__OFSUB__(v26, 1))
    {
      swift_bridgeObjectRetain_n(v1, 2, v27);
      v3 = _CocoaArrayWrapper.endIndex.getter(v25);
      swift_bridgeObjectRelease(v1);
      v4 = 0;
      if (!v3)
        goto LABEL_34;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_36:
  v29 = type metadata accessor for Option();
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v29);
  __break(1u);
  return result;
}

double sub_100026F1C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double (*v18)(uint64_t, uint64_t);
  double v19;
  uint64_t v20;
  double v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  double result;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[32];
  _OWORD v68[9];
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  _BYTE v77[32];
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  char v94;

  if (*(_BYTE *)(a1 + 8) == 1)
  {
    v8 = *(_QWORD *)a1;
    v9 = *(_QWORD *)(a2 + 32);
    v10 = *(_QWORD *)(a2 + 40);
    v11 = *(_QWORD *)(a3 + 16);
    sub_10002AB80(*(_QWORD *)a1, 1);
    v57 = v10;
    if (v11)
    {
      sub_10002AB80(v8, 1);
      swift_retain(v9);
      swift_retain(v10);
      v12 = sub_10017D414(v8);
      if ((v13 & 1) != 0)
      {
        v14 = (uint64_t *)(*(_QWORD *)(a3 + 56) + 16 * v12);
        v15 = *v14;
        v58 = v14[1];
        swift_retain(v58);
        v59 = v15;
        swift_retain(v15);
        sub_10002AB8C(v8, 1);
LABEL_11:
        v31 = *(_QWORD *)(a2 + 56);
        v56 = *(_QWORD *)(a2 + 48);
        v32 = *(_OWORD *)(a2 + 80);
        v85 = *(_OWORD *)(a2 + 64);
        v86 = v32;
        *(_QWORD *)&v87 = *(_QWORD *)(a2 + 96);
        swift_retain(v31);
        v33 = sub_100003DB8(&qword_100318250);
        FocusState.projectedValue.getter(v77, v33);
        v34 = *(_QWORD *)v77;
        v55 = *(_OWORD *)&v77[8];
        v35 = *(_QWORD *)&v77[24];
        v36 = type metadata accessor for AppEvents();
        v37 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
        swift_retain(v8);
        v38 = EnvironmentObject.init()(v36, v37);
        v40 = v39;
        v41 = type metadata accessor for UIMetrics();
        v42 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
        v43 = EnvironmentObject.init()(v41, v42);
        v45 = v44;
        *(_OWORD *)v77 = 0uLL;
        v46 = sub_100003DB8(&qword_100318260);
        State.init(wrappedValue:)(&v85, v77, v46);
        *(_QWORD *)&v60 = v38;
        *((_QWORD *)&v60 + 1) = v40;
        *(_QWORD *)&v61 = v43;
        *((_QWORD *)&v61 + 1) = v45;
        *(_QWORD *)&v62 = v9;
        *((_QWORD *)&v62 + 1) = v57;
        *(_QWORD *)&v63 = v8;
        *((_QWORD *)&v63 + 1) = v59;
        *(_QWORD *)&v64 = v58;
        *((_QWORD *)&v64 + 1) = v56;
        *(_QWORD *)&v65 = v31;
        *((_QWORD *)&v65 + 1) = v34;
        v66 = v55;
        *(_QWORD *)v67 = v35;
        *(_OWORD *)&v67[8] = v85;
        *(_QWORD *)&v67[24] = v86;
        v78 = v62;
        v79 = v63;
        *(_OWORD *)v77 = v60;
        *(_OWORD *)&v77[16] = v61;
        v83 = *(_OWORD *)v67;
        v84 = *(_OWORD *)&v67[16];
        v81 = v65;
        v82 = v55;
        v80 = v64;
        sub_10002AB98((uint64_t)v77);
        sub_10000B458((uint64_t)v77, (uint64_t)&v85, &qword_100318258);
        sub_10002ABA0((uint64_t *)&v60);
        v47 = sub_100003DB8(&qword_100318248);
        v48 = sub_100027738();
        v49 = sub_10002777C();
        _ConditionalContent<>.init(storage:)(&v85, &type metadata for FreeFormTextView, v47, v48, v49);
        sub_10002AB8C(v8, 1);
        sub_10002AC78((uint64_t *)&v60);
        v91 = v68[6];
        v92 = v68[7];
        v93 = v68[8];
        v94 = v69;
        v87 = v68[2];
        v88 = v68[3];
        v89 = v68[4];
        v90 = v68[5];
        v85 = v68[0];
        v86 = v68[1];
        goto LABEL_12;
      }
      sub_10002AB8C(v8, 1);
    }
    else
    {
      swift_retain(v9);
      swift_retain(v10);
    }
    v58 = 0;
    v59 = 0;
    goto LABEL_11;
  }
  v16 = a4[3];
  v17 = a4[4];
  sub_100007BBC(a4, v16);
  v18 = *(double (**)(uint64_t, uint64_t))(v17 + 360);
  v19 = v18(v16, v17);
  v20 = ((uint64_t (*)(uint64_t, uint64_t))v18)(v16, v17);
  v22 = v21;
  v23 = static Alignment.center.getter(v20);
  v25 = v24;
  if (v19 > v22)
  {
    v26 = static os_log_type_t.fault.getter();
    v27 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v60, 0, 1, 0, 1, 0, 1, *(_QWORD *)&v19, 0, 0, 1, *(_QWORD *)&v22, 0, v23, v25);
  v76 = 1;
  v75 = BYTE8(v60);
  v74 = BYTE8(v61);
  v73 = BYTE8(v62);
  v72 = BYTE8(v63);
  v71 = BYTE8(v64);
  v70 = BYTE8(v65);
  *(_QWORD *)v77 = 0;
  v77[8] = 1;
  *(_QWORD *)&v77[16] = v60;
  v77[24] = BYTE8(v60);
  *(_QWORD *)&v78 = v61;
  BYTE8(v78) = BYTE8(v61);
  *(_QWORD *)&v79 = v62;
  BYTE8(v79) = BYTE8(v62);
  *(_QWORD *)&v80 = v63;
  BYTE8(v80) = BYTE8(v63);
  *(_QWORD *)&v81 = v64;
  BYTE8(v81) = BYTE8(v64);
  *(_QWORD *)&v82 = v65;
  BYTE8(v82) = BYTE8(v65);
  v83 = v66;
  sub_100027844((uint64_t)v77);
  sub_10000B458((uint64_t)v77, (uint64_t)v68, &qword_100318258);
  v28 = sub_100003DB8(&qword_100318248);
  v29 = sub_100027738();
  v30 = sub_10002777C();
  _ConditionalContent<>.init(storage:)(v68, &type metadata for FreeFormTextView, v28, v29, v30);
LABEL_12:
  v50 = v92;
  *(_OWORD *)(a5 + 96) = v91;
  *(_OWORD *)(a5 + 112) = v50;
  *(_OWORD *)(a5 + 128) = v93;
  *(_BYTE *)(a5 + 144) = v94;
  v51 = v88;
  *(_OWORD *)(a5 + 32) = v87;
  *(_OWORD *)(a5 + 48) = v51;
  v52 = v90;
  *(_OWORD *)(a5 + 64) = v89;
  *(_OWORD *)(a5 + 80) = v52;
  result = *(double *)&v85;
  v54 = v86;
  *(_OWORD *)a5 = v85;
  *(_OWORD *)(a5 + 16) = v54;
  return result;
}

void sub_100027410(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;
  uint64_t v14;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 144);
  if (!((unint64_t)v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 144));
    if (v3)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease(v2);
    v6 = 0;
    v5 = 0;
    goto LABEL_11;
  }
  if (v2 < 0)
    v7 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 144);
  else
    v7 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 144));
  if (!_CocoaArrayWrapper.endIndex.getter(v7))
    goto LABEL_10;
LABEL_3:
  if ((v2 & 0xC000000000000001) != 0)
  {
    v10 = specialized _ArrayBuffer._getElementSlowPath(_:)(0, v2);
    swift_bridgeObjectRelease(v2);
    v6 = *(_QWORD *)(v10 + 16);
    v5 = *(_QWORD *)(v10 + 24);
    swift_bridgeObjectRetain(v5);
    swift_unknownObjectRelease(v10);
    goto LABEL_11;
  }
  if (*(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v4 = *(_QWORD *)(v2 + 32);
    swift_retain(v4);
    swift_bridgeObjectRelease(v2);
    v6 = *(_QWORD *)(v4 + 16);
    v5 = *(_QWORD *)(v4 + 24);
    swift_bridgeObjectRetain(v5);
    swift_release(v4);
LABEL_11:
    v8 = *(_OWORD *)(a1 + 80);
    v12 = *(_OWORD *)(a1 + 64);
    v13 = v8;
    v14 = *(_QWORD *)(a1 + 96);
    v11[0] = v6;
    v11[1] = v5;
    v9 = sub_100003DB8(&qword_100318250);
    FocusState.wrappedValue.setter(v11, v9);
    return;
  }
  __break(1u);
}

uint64_t sub_100027538@<X0>(uint64_t a1@<X8>)
{
  return sub_100026838(a1);
}

uint64_t sub_100027580()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  swift_release(v0[12]);
  swift_bridgeObjectRelease(v0[14]);
  swift_bridgeObjectRelease(v0[15]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 16);
  return swift_deallocObject(v0, 168, 7);
}

double sub_1000275EC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100026F1C(a1, v2 + 16, *(_QWORD *)(v2 + 120), (_QWORD *)(v2 + 128), a2);
}

uint64_t *sub_1000275FC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[7];
  v7 = a1[9];
  v8 = a1[10];
  swift_bridgeObjectRetain(a1[12]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v8);
  return a1;
}

unint64_t sub_100027688()
{
  unint64_t result;

  result = qword_100318228;
  if (!qword_100318228)
  {
    result = swift_getWitnessTable(&unk_100251A6C, &type metadata for Question.OptionsPresentationOrderItem);
    atomic_store(result, (unint64_t *)&qword_100318228);
  }
  return result;
}

unint64_t sub_1000276CC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100318230;
  if (!qword_100318230)
  {
    v1 = sub_100007FAC(&qword_100318218);
    sub_100027738();
    sub_10002777C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100318230);
  }
  return result;
}

unint64_t sub_100027738()
{
  unint64_t result;

  result = qword_100318238;
  if (!qword_100318238)
  {
    result = swift_getWitnessTable("=z\t", &type metadata for FreeFormTextView);
    atomic_store(result, (unint64_t *)&qword_100318238);
  }
  return result;
}

unint64_t sub_10002777C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100318240;
  if (!qword_100318240)
  {
    v1 = sub_100007FAC(&qword_100318248);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100318240);
  }
  return result;
}

uint64_t sub_1000277E0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  swift_release(v0[12]);
  swift_bridgeObjectRelease(v0[14]);
  return swift_deallocObject(v0, 120, 7);
}

void sub_10002783C()
{
  uint64_t v0;

  sub_100027410(v0 + 16);
}

uint64_t sub_100027844(uint64_t result)
{
  *(_BYTE *)(result + 144) = 1;
  return result;
}

uint64_t sub_100027850@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[552];
  _BYTE __src[560];
  _QWORD v19[3];
  uint64_t v20;
  uint64_t v21;

  v2 = v1;
  v4 = *(_QWORD **)(v1 + 16);
  if (v4)
  {
    v5 = v4[9];
    v6 = v4[10];
    sub_100007BBC(v4 + 6, v5);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 24))(v19, v5, v6);
    v7 = v20;
    v8 = v21;
    sub_100007BBC(v19, v20);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 408))(v7, v8);
    v11 = v10;
    v12 = static HorizontalAlignment.center.getter(v9);
    sub_100027984(v2, v19, v17);
    __src[552] = 0;
    memcpy(&__src[7], v17, 0x221uLL);
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v11;
    *(_BYTE *)(a1 + 16) = 0;
    memcpy((void *)(a1 + 17), __src, 0x228uLL);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v19);
  }
  else
  {
    v14 = *(_QWORD *)(v1 + 24);
    v15 = type metadata accessor for UIMetrics();
    v16 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v14, v15, v16);
    __break(1u);
  }
  return result;
}

_QWORD *sub_100027984@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  __n128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _OWORD *v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _OWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  Swift::Int v63;
  uint64_t v64;
  __int128 v65;
  Swift::Int v66;
  uint64_t v67;
  uint64_t v68;
  double v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _BYTE __dst[257];
  _BYTE v121[176];
  _QWORD v122[22];
  _BYTE v123[257];
  _BYTE v124[545];
  _QWORD v125[22];
  _BYTE v126[264];
  _BYTE __src[257];
  uint64_t v128;
  unint64_t v129;
  _QWORD v130[24];
  char v131;
  uint64_t v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  char v137;
  uint64_t v138;
  uint64_t v139;
  char v140;

  v116 = *(_QWORD **)(a1 + 48);
  v4 = v116[4];
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  v7 = HIBYTE(v6) & 0xF;
  if ((v6 & 0x2000000000000000) == 0)
    v7 = v5 & 0xFFFFFFFFFFFFLL;
  if (v7)
  {
    v8 = a2;
    *(_QWORD *)v124 = v5;
    *(_QWORD *)&v124[8] = v6;
    v9 = sub_10002B3F4();
    v10 = swift_bridgeObjectRetain(v6);
    v11 = Text.init<A>(_:)(v124, &type metadata for String, v9, v10);
    v13 = v12;
    v15 = v14;
    v17 = v16 & 1;
    v18 = v8[3];
    v19 = v8[4];
    sub_100007BBC(v8, v18);
    v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 416))(v18, v19);
    v21 = Text.font(_:)(v20, v11, v13, v17, v15);
    v118 = v22;
    LOBYTE(v8) = v23;
    v25 = v24;
    swift_release(v20);
    LOBYTE(v8) = v8 & 1;
    sub_10002B438(v11, v13, v17);
    swift_bridgeObjectRelease(v15);
    KeyPath = swift_getKeyPath(&unk_10024E588);
    v135 = v21;
    v136 = v118;
    v137 = (char)v8;
    v138 = v25;
    v139 = KeyPath;
    v140 = 0;
    v28 = static Alignment.leading.getter(KeyPath, v27);
    sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v124, 0.0, 1, 0.0, 1, v28, v29);
    sub_10002B438(v21, v118, (char)v8);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v25);
    *(_OWORD *)&__src[96] = *(_OWORD *)&v124[96];
    *(_OWORD *)&__src[112] = *(_OWORD *)&v124[112];
    *(_OWORD *)&__src[128] = *(_OWORD *)&v124[128];
    *(_OWORD *)&__src[144] = *(_OWORD *)&v124[144];
    *(_OWORD *)&__src[48] = *(_OWORD *)&v124[48];
    *(_OWORD *)&__src[64] = *(_OWORD *)&v124[64];
    *(_OWORD *)&__src[80] = *(_OWORD *)&v124[80];
    *(_OWORD *)__src = *(_OWORD *)v124;
    *(_OWORD *)&__src[16] = *(_OWORD *)&v124[16];
    *(_OWORD *)&__src[32] = *(_OWORD *)&v124[32];
    v30 = swift_getKeyPath(&unk_10024E5B8);
    *(_OWORD *)&v124[96] = *(_OWORD *)&__src[96];
    *(_OWORD *)&v124[112] = *(_OWORD *)&__src[112];
    *(_OWORD *)&v124[128] = *(_OWORD *)&__src[128];
    *(_OWORD *)&v124[144] = *(_OWORD *)&__src[144];
    *(_OWORD *)&v124[32] = *(_OWORD *)&__src[32];
    *(_OWORD *)&v124[48] = *(_OWORD *)&__src[48];
    *(_OWORD *)&v124[64] = *(_OWORD *)&__src[64];
    *(_OWORD *)&v124[80] = *(_OWORD *)&__src[80];
    *(_OWORD *)v124 = *(_OWORD *)__src;
    *(_OWORD *)&v124[16] = *(_OWORD *)&__src[16];
    *(_QWORD *)&v124[160] = v30;
    *(_QWORD *)&v124[168] = 0x3FE0000000000000;
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(v124);
  }
  else
  {
    sub_10002BC54(v124);
  }
  sub_10000B458((uint64_t)v124, (uint64_t)v130, &qword_100318288);
  v31 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)__src = *(_OWORD *)(a1 + 120);
  *(_QWORD *)&__src[16] = *(_QWORD *)(a1 + 136);
  v32 = sub_100003DB8(&qword_100318290);
  State.projectedValue.getter(v124, v32);
  v34 = *(_QWORD *)v124;
  v33 = *(_QWORD *)&v124[8];
  v35 = *(_QWORD *)&v124[16];
  v36 = *(_QWORD *)&v124[24];
  v37 = (_OWORD *)swift_allocObject(&unk_1002E5D88, 160, 7);
  v38 = *(_OWORD *)(a1 + 112);
  v37[7] = *(_OWORD *)(a1 + 96);
  v37[8] = v38;
  v37[9] = *(_OWORD *)(a1 + 128);
  v39 = *(_OWORD *)(a1 + 48);
  v37[3] = *(_OWORD *)(a1 + 32);
  v37[4] = v39;
  v40 = *(_OWORD *)(a1 + 80);
  v37[5] = *(_OWORD *)(a1 + 64);
  v37[6] = v40;
  v41 = *(_OWORD *)(a1 + 16);
  v37[1] = *(_OWORD *)a1;
  v37[2] = v41;
  sub_10002ABA0((uint64_t *)a1);
  v42 = sub_100028A60(v31, (uint64_t)v116, v34, v33, v35, v36, (uint64_t)sub_10002B45C, (uint64_t)v37);
  v44 = v43;
  v119 = v45;
  v47 = v46;
  swift_release(v33);
  v48 = v37;
  v49 = v42;
  swift_release(v48);
  swift_release(v34);
  swift_bridgeObjectRelease(v36);
  v50 = v116[3];
  v51 = *(_QWORD *)(a1 + 88);
  v52 = *(_QWORD *)(a1 + 96);
  v53 = *(_QWORD *)(a1 + 112);
  v108 = v116[2];
  v109 = *(_QWORD *)(a1 + 104);
  v54 = type metadata accessor for UIMetrics();
  v55 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  swift_retain(v49);
  swift_retain(v44);
  swift_bridgeObjectRetain(v47);
  v113 = v50;
  swift_bridgeObjectRetain(v50);
  v110 = v51;
  swift_retain(v51);
  v112 = v52;
  swift_retain(v52);
  v111 = v53;
  v56 = v53;
  v57 = v44;
  v58 = v47;
  swift_bridgeObjectRetain(v56);
  v59 = EnvironmentObject.init()(v54, v55);
  v107 = v60;
  v115 = v49;
  *(_QWORD *)v124 = v49;
  *(_QWORD *)&v124[8] = v57;
  *(_QWORD *)&v124[16] = v119;
  *(_QWORD *)&v124[24] = v58;
  sub_100003DB8(&qword_10031ED10);
  Binding.wrappedValue.getter(&v128);
  v61 = v128;
  v62 = v129;
  if ((v129 & 0x1000000000000000) != 0)
  {
    v63 = String.UTF8View._foreignCount()();
    swift_bridgeObjectRelease(v62);
  }
  else
  {
    swift_bridgeObjectRelease(v129);
    if ((v62 & 0x2000000000000000) != 0)
      v63 = HIBYTE(v62) & 0xF;
    else
      v63 = v61 & 0xFFFFFFFFFFFFLL;
  }
  v64 = v116[6];
  if (v63 >= v64)
  {
    v67 = a2[3];
    v68 = a2[4];
    sub_100007BBC(a2, v67);
    v69 = (*(double (**)(uint64_t, uint64_t))(v68 + 456))(v67, v68);
    v70 = static VerticalAlignment.center.getter();
    sub_100028C3C(a2, (uint64_t)__dst, v71);
    *(_OWORD *)&v123[183] = *(_OWORD *)&__dst[176];
    *(_OWORD *)&v123[199] = *(_OWORD *)&__dst[192];
    *(_OWORD *)&v123[215] = *(_OWORD *)&__dst[208];
    *(_OWORD *)&v123[119] = *(_OWORD *)&__dst[112];
    *(_OWORD *)&v123[135] = *(_OWORD *)&__dst[128];
    *(_OWORD *)&v123[151] = *(_OWORD *)&__dst[144];
    *(_OWORD *)&v123[167] = *(_OWORD *)&__dst[160];
    *(_OWORD *)&v123[55] = *(_OWORD *)&__dst[48];
    *(_OWORD *)&v123[71] = *(_OWORD *)&__dst[64];
    *(_QWORD *)&v123[231] = *(_QWORD *)&__dst[224];
    *(_OWORD *)&v123[87] = *(_OWORD *)&__dst[80];
    *(_OWORD *)&v123[103] = *(_OWORD *)&__dst[96];
    *(_OWORD *)&v123[7] = *(_OWORD *)__dst;
    *(_OWORD *)&v123[23] = *(_OWORD *)&__dst[16];
    *(_OWORD *)&v123[39] = *(_OWORD *)&__dst[32];
    *(double *)&v124[8] = v69;
    *(_OWORD *)&v124[193] = *(_OWORD *)&v123[176];
    *(_OWORD *)&v124[209] = *(_OWORD *)&v123[192];
    *(_OWORD *)&v124[225] = *(_OWORD *)&v123[208];
    *(_OWORD *)&v124[240] = *(_OWORD *)&v123[223];
    *(_OWORD *)&v124[129] = *(_OWORD *)&v123[112];
    *(_OWORD *)&v124[145] = *(_OWORD *)&v123[128];
    *(_OWORD *)&v124[161] = *(_OWORD *)&v123[144];
    *(_OWORD *)&v124[177] = *(_OWORD *)&v123[160];
    *(_OWORD *)&v124[65] = *(_OWORD *)&v123[48];
    *(_OWORD *)&v124[81] = *(_OWORD *)&v123[64];
    *(_OWORD *)&v124[97] = *(_OWORD *)&v123[80];
    *(_OWORD *)&v124[113] = *(_OWORD *)&v123[96];
    *(_OWORD *)&v124[17] = *(_OWORD *)v123;
    LOBYTE(v125[0]) = 0;
    *(_QWORD *)v124 = v70;
    v124[16] = 0;
    *(_OWORD *)&v124[33] = *(_OWORD *)&v123[16];
    *(_OWORD *)&v124[49] = *(_OWORD *)&v123[32];
    sub_10002B464((uint64_t)v124);
    sub_10000B458((uint64_t)v124, (uint64_t)v126, &qword_100318298);
    v72 = sub_100003DB8(&qword_1003182A0);
    v73 = sub_100003DB8(&qword_1003182A8);
    v74 = sub_1000084FC(&qword_1003182B0, &qword_1003182A0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v75 = sub_10002B46C();
    v76 = v72;
    v77 = v73;
    v78 = v74;
  }
  else
  {
    *(_QWORD *)v124 = v49;
    *(_QWORD *)&v124[8] = v57;
    *(_QWORD *)&v124[16] = v119;
    *(_QWORD *)&v124[24] = v58;
    Binding.wrappedValue.getter(__dst);
    v65 = *(_OWORD *)__dst;
    if ((*(_QWORD *)&__dst[8] & 0x1000000000000000) != 0)
    {
      v66 = String.UTF8View._foreignCount()();
      swift_bridgeObjectRelease(*((_QWORD *)&v65 + 1));
    }
    else
    {
      swift_bridgeObjectRelease(*(_QWORD *)&__dst[8]);
      if ((*((_QWORD *)&v65 + 1) & 0x2000000000000000) != 0)
        v66 = HIBYTE(*((_QWORD *)&v65 + 1)) & 0xFLL;
      else
        v66 = v65 & 0xFFFFFFFFFFFFLL;
    }
    v79 = a2[3];
    v80 = a2[4];
    sub_100007BBC(a2, v79);
    if ((*(double (**)(uint64_t, uint64_t))(v80 + 440))(v79, v80) <= (double)v66 / (double)v64)
    {
      v81 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000016, 0x8000000100262670);
      v82 = Text.init(_:tableName:bundle:comment:)(v81);
      v84 = v83;
      v86 = v85;
      v117 = v59;
      v88 = v87 & 1;
      v89 = swift_getKeyPath(&unk_10024E588);
      v130[22] = v82;
      v130[23] = v84;
      v131 = v88;
      v132 = v86;
      v133 = v89;
      v134 = 0;
      v91 = static Alignment.leading.getter(v89, v90);
      sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v124, 0.0, 1, 0.0, 1, v91, v92);
      v93 = v88;
      v59 = v117;
      sub_10002B438(v82, v84, v93);
      swift_release(v89);
      swift_bridgeObjectRelease(v86);
      *(_OWORD *)&__src[96] = *(_OWORD *)&v124[96];
      *(_OWORD *)&__src[112] = *(_OWORD *)&v124[112];
      *(_OWORD *)&__src[128] = *(_OWORD *)&v124[128];
      *(_OWORD *)&__src[144] = *(_OWORD *)&v124[144];
      *(_OWORD *)&__src[48] = *(_OWORD *)&v124[48];
      *(_OWORD *)&__src[64] = *(_OWORD *)&v124[64];
      *(_OWORD *)&__src[80] = *(_OWORD *)&v124[80];
      *(_OWORD *)__src = *(_OWORD *)v124;
      *(_OWORD *)&__src[16] = *(_OWORD *)&v124[16];
      *(_OWORD *)&__src[32] = *(_OWORD *)&v124[32];
      v94 = a2[3];
      v95 = a2[4];
      sub_100007BBC(a2, v94);
      v96 = (*(uint64_t (**)(uint64_t, uint64_t))(v95 + 424))(v94, v95);
      v97 = swift_getKeyPath(&unk_10024E5E8);
      v98 = a2[3];
      v99 = a2[4];
      sub_100007BBC(a2, v98);
      v100 = (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 432))(v98, v99);
      v101 = swift_getKeyPath(&unk_10024E618);
      *(_OWORD *)&v124[96] = *(_OWORD *)&__src[96];
      *(_OWORD *)&v124[112] = *(_OWORD *)&__src[112];
      *(_OWORD *)&v124[128] = *(_OWORD *)&__src[128];
      *(_OWORD *)&v124[144] = *(_OWORD *)&__src[144];
      *(_OWORD *)&v124[32] = *(_OWORD *)&__src[32];
      *(_OWORD *)&v124[48] = *(_OWORD *)&__src[48];
      *(_OWORD *)&v124[64] = *(_OWORD *)&__src[64];
      *(_OWORD *)&v124[80] = *(_OWORD *)&__src[80];
      *(_OWORD *)v124 = *(_OWORD *)__src;
      *(_OWORD *)&v124[16] = *(_OWORD *)&__src[16];
      *(_QWORD *)&v124[160] = v97;
      *(_QWORD *)&v124[168] = v96;
      *(_QWORD *)&v124[176] = v101;
      *(_QWORD *)&v124[184] = v100;
      ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(v124);
    }
    else
    {
      sub_10002BC18(v124);
    }
    sub_10000B458((uint64_t)v124, (uint64_t)v123, &qword_1003182A8);
    sub_10000B458((uint64_t)v123, (uint64_t)v124, &qword_1003182A8);
    sub_10002BC38((uint64_t)v124);
    sub_10000B458((uint64_t)v124, (uint64_t)v126, &qword_100318298);
    v102 = sub_100003DB8(&qword_1003182A0);
    v103 = sub_100003DB8(&qword_1003182A8);
    v104 = sub_1000084FC(&qword_1003182B0, &qword_1003182A0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    v75 = sub_10002B46C();
    v76 = v102;
    v77 = v103;
    v78 = v104;
  }
  _ConditionalContent<>.init(storage:)(v126, v76, v77, v78, v75);
  sub_10000B458((uint64_t)v130, (uint64_t)v121, &qword_100318288);
  memcpy(__dst, __src, sizeof(__dst));
  sub_10000B458((uint64_t)v121, (uint64_t)v122, &qword_100318288);
  memcpy(v123, __dst, sizeof(v123));
  sub_10002B920(v122, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002B700);
  swift_retain(v59);
  swift_retain(v115);
  swift_retain(v57);
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRetain(v113);
  swift_retain(v110);
  swift_retain(v112);
  swift_bridgeObjectRetain(v111);
  sub_10002B9D4((uint64_t)v123, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10002B760);
  sub_10002B920(v130, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002B700);
  swift_retain(v59);
  swift_retain(v115);
  swift_retain(v57);
  swift_bridgeObjectRetain(v58);
  swift_bridgeObjectRetain(v113);
  swift_retain(v110);
  swift_retain(v112);
  swift_bridgeObjectRetain(v111);
  sub_10002B9D4((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10002B760);
  swift_bridgeObjectRelease(v58);
  swift_release(v57);
  swift_release(v115);
  sub_10002B920(v130, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002B984);
  sub_10002B9D4((uint64_t)__src, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10002BA58);
  swift_bridgeObjectRelease(v111);
  swift_release(v112);
  swift_release(v110);
  swift_bridgeObjectRelease(v113);
  swift_bridgeObjectRelease(v58);
  swift_release(v57);
  swift_release(v115);
  swift_release(v59);
  sub_10000B458((uint64_t)v122, (uint64_t)v124, &qword_100318288);
  *(_QWORD *)&v124[176] = v59;
  *(_QWORD *)&v124[184] = v107;
  *(_QWORD *)&v124[192] = v115;
  *(_QWORD *)&v124[200] = v57;
  *(_QWORD *)&v124[208] = v119;
  *(_QWORD *)&v124[216] = v58;
  *(_OWORD *)&v124[224] = xmmword_10024E460;
  *(_QWORD *)&v124[240] = v108;
  *(_QWORD *)&v124[248] = v113;
  *(_QWORD *)&v124[256] = v110;
  *(_QWORD *)&v124[264] = v112;
  *(_QWORD *)&v124[272] = v109;
  *(_QWORD *)&v124[280] = v111;
  memcpy(&v124[288], v123, 0x101uLL);
  memcpy(a3, v124, 0x221uLL);
  memcpy(v126, __dst, 0x101uLL);
  sub_10002B9D4((uint64_t)v126, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))sub_10002BA58);
  swift_bridgeObjectRelease(v111);
  swift_release(v112);
  swift_release(v110);
  swift_bridgeObjectRelease(v113);
  swift_bridgeObjectRelease(v58);
  swift_release(v57);
  swift_release(v115);
  swift_release(v59);
  sub_10000B458((uint64_t)v121, (uint64_t)v125, &qword_100318288);
  return sub_10002B920(v125, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10002B984);
}

void sub_10002852C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];

  v2 = a1[4];
  swift_beginAccess(v2 + 48, v21, 0, 0);
  v3 = *(_QWORD *)(v2 + 136);
  if (v3
    && ((v4 = a1[5],
         v5 = *(_QWORD *)(v3 + 16),
         v6 = *(_QWORD *)(v3 + 24),
         v7 = *(_QWORD *)(v4 + 16),
         v8 = *(_QWORD *)(v4 + 24),
         v5 == v7)
      ? (v9 = v6 == v8)
      : (v9 = 0),
        v9 || (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0) & 1) != 0))
  {
    sub_100028728();
  }
  else
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v10 = type metadata accessor for Logger(0);
    sub_10000D744(v10, (uint64_t)qword_10033FEC8);
    sub_10002ABA0(a1);
    v11 = sub_10002ABA0(a1);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v20 = v15;
      *(_DWORD *)v14 = 136446210;
      v16 = sub_1000AD18C();
      v18 = v17;
      v19 = sub_100172BEC(v16, v17, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease(v18);
      sub_10002AC78(a1);
      sub_10002AC78(a1);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "[%{public}s] FreeFormContentView: return tapped in the free form text when it is not a current question anymore", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);
    }
    else
    {
      sub_10002AC78(a1);
      sub_10002AC78(a1);
    }

  }
}

void sub_100028728()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[2];
  __int128 v22;
  _BYTE v23[8];
  uint64_t v24;

  v22 = *(_OWORD *)(v0 + 56);
  sub_10000B458((uint64_t)&v22 + 8, (uint64_t)v23, &qword_100318318);
  sub_10000B458((uint64_t)v23, (uint64_t)&v24, &qword_100318318);
  if (v24)
  {
    v1 = *(_OWORD *)(v0 + 104);
    v21[0] = *(_OWORD *)(v0 + 88);
    v21[1] = v1;
    v2 = *(_QWORD *)(v24 + 24);
    v19 = *(_QWORD *)(v24 + 16);
    v20 = v2;
    swift_bridgeObjectRetain(v2);
    v3 = sub_100003DB8(&qword_100318320);
    FocusState.Binding.wrappedValue.setter(&v19, v3);
  }
  else
  {
    v4 = *(_QWORD **)(v0 + 40);
    v5 = *(_QWORD *)(v0 + 48);
    if ((sub_1000AE9AC(v4, v5, 0) & 1) != 0)
    {
      (*(void (**)(void))(v0 + 72))();
    }
    else
    {
      if (qword_1003158B0 != -1)
        swift_once(&qword_1003158B0, sub_1000D9854);
      v6 = type metadata accessor for Logger(0);
      sub_10000D744(v6, (uint64_t)qword_10033FEC8);
      sub_10002ABA0((uint64_t *)v0);
      sub_10002ABA0((uint64_t *)v0);
      sub_10002ABA0((uint64_t *)v0);
      sub_10002ABA0((uint64_t *)v0);
      sub_10002ABA0((uint64_t *)v0);
      v7 = sub_10002ABA0((uint64_t *)v0);
      v8 = Logger.logObject.getter(v7);
      v9 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = swift_slowAlloc(32, -1);
        v11 = swift_slowAlloc(96, -1);
        *(_QWORD *)&v21[0] = v11;
        *(_DWORD *)v10 = 136446723;
        v12 = sub_1000AD18C();
        v14 = v13;
        v19 = sub_100172BEC(v12, v13, (uint64_t *)v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v10 + 4, v10 + 12);
        swift_bridgeObjectRelease(v14);
        sub_10002AC78((uint64_t *)v0);
        sub_10002AC78((uint64_t *)v0);
        *(_WORD *)(v10 + 12) = 2081;
        v16 = *(_QWORD *)(v5 + 16);
        v15 = *(_QWORD *)(v5 + 24);
        swift_bridgeObjectRetain(v15);
        v19 = sub_100172BEC(v16, v15, (uint64_t *)v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v10 + 14, v10 + 22);
        swift_bridgeObjectRelease(v15);
        sub_10002AC78((uint64_t *)v0);
        sub_10002AC78((uint64_t *)v0);
        *(_WORD *)(v10 + 22) = 2081;
        v18 = v4[2];
        v17 = v4[3];
        swift_bridgeObjectRetain(v17);
        v19 = sub_100172BEC(v18, v17, (uint64_t *)v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v10 + 24, v10 + 32);
        swift_bridgeObjectRelease(v17);
        sub_10002AC78((uint64_t *)v0);
        sub_10002AC78((uint64_t *)v0);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s] QuestionnaireBodyView: failed to record %{private}s answer for %{private}s", (uint8_t *)v10, 0x20u);
        swift_arrayDestroy(v11, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v11, -1, -1);
        swift_slowDealloc(v10, -1, -1);
      }
      else
      {
        sub_10002AC78((uint64_t *)v0);
        sub_10002AC78((uint64_t *)v0);
        sub_10002AC78((uint64_t *)v0);
        sub_10002AC78((uint64_t *)v0);
        sub_10002AC78((uint64_t *)v0);
        sub_10002AC78((uint64_t *)v0);
      }

    }
  }
}

uint64_t sub_100028A60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _OWORD *v8;
  _OWORD *v10;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD v33[2];
  uint64_t v34;

  if (*(_BYTE *)(a1 + 32) == 2 && (*(_BYTE *)(a2 + 40) & 1) != 0)
  {
    v10 = v8;
    type metadata accessor for MainActor(0);
    sub_10002ABA0((uint64_t *)v8);
    swift_retain(a1);
    v16 = swift_retain(a2);
    v17 = static MainActor.shared.getter(v16);
    v18 = swift_allocObject(&unk_1002E5DB0, 192, 7);
    *(_QWORD *)(v18 + 16) = v17;
    *(_QWORD *)(v18 + 24) = &protocol witness table for MainActor;
    v19 = v8[7];
    *(_OWORD *)(v18 + 128) = v8[6];
    *(_OWORD *)(v18 + 144) = v19;
    *(_OWORD *)(v18 + 160) = v8[8];
    v20 = v8[3];
    *(_OWORD *)(v18 + 64) = v8[2];
    *(_OWORD *)(v18 + 80) = v20;
    v21 = v8[5];
    *(_OWORD *)(v18 + 96) = v8[4];
    *(_OWORD *)(v18 + 112) = v21;
    v22 = v8[1];
    *(_OWORD *)(v18 + 32) = *v8;
    *(_OWORD *)(v18 + 48) = v22;
    *(_QWORD *)(v18 + 176) = a1;
    *(_QWORD *)(v18 + 184) = a2;
    sub_10002ABA0((uint64_t *)v8);
    swift_bridgeObjectRetain(a6);
    swift_retain(a8);
    swift_retain(a1);
    swift_retain(a2);
    swift_retain(a3);
    v23 = swift_retain(a4);
    v24 = static MainActor.shared.getter(v23);
    v25 = swift_allocObject(&unk_1002E5DD8, 240, 7);
    *(_QWORD *)(v25 + 16) = v24;
    *(_QWORD *)(v25 + 24) = &protocol witness table for MainActor;
    v26 = v10[7];
    *(_OWORD *)(v25 + 128) = v10[6];
    *(_OWORD *)(v25 + 144) = v26;
    *(_OWORD *)(v25 + 160) = v10[8];
    v27 = v10[3];
    *(_OWORD *)(v25 + 64) = v10[2];
    *(_OWORD *)(v25 + 80) = v27;
    v28 = v10[5];
    *(_OWORD *)(v25 + 96) = v10[4];
    *(_OWORD *)(v25 + 112) = v28;
    v29 = v10[1];
    *(_OWORD *)(v25 + 32) = *v10;
    *(_OWORD *)(v25 + 48) = v29;
    *(_QWORD *)(v25 + 176) = a1;
    *(_QWORD *)(v25 + 184) = a3;
    *(_QWORD *)(v25 + 192) = a4;
    *(_QWORD *)(v25 + 200) = a5;
    *(_QWORD *)(v25 + 208) = a6;
    *(_QWORD *)(v25 + 216) = a7;
    *(_QWORD *)(v25 + 224) = a8;
    *(_QWORD *)(v25 + 232) = a2;
    Binding.init(get:set:)(&v34, sub_10002BE18, v18, sub_10002BEE4, v25, &type metadata for String);
  }
  else
  {
    v33[0] = 0;
    v33[1] = 0xE000000000000000;
    static Binding.constant(_:)(&v34, v33, &type metadata for String);
  }
  return v34;
}

uint64_t sub_100028C3C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, __n128 a3@<Q0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t KeyPath;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  _OWORD v78[10];
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;

  v49 = Image.init(systemName:)(0xD00000000000001BLL, 0x80000001002607C0, a3);
  v5 = a1[3];
  v6 = a1[4];
  v44 = v5;
  sub_100007BBC(a1, v5);
  v43 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 424);
  v48 = v43(v5, v6);
  KeyPath = swift_getKeyPath(&unk_10024E5E8);
  v7 = a1[3];
  v8 = a1[4];
  sub_100007BBC(a1, v7);
  v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 448))(v7, v8);
  v45 = swift_getKeyPath(&unk_10024E618);
  v9 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000013, 0x80000001002626E0);
  v10 = Text.init(_:tableName:bundle:comment:)(v9);
  v12 = v11;
  v14 = v13;
  LOBYTE(v8) = v15 & 1;
  v16 = swift_getKeyPath(&unk_10024E588);
  v60 = v10;
  v61 = v12;
  v62 = v8;
  v63 = v14;
  v64 = v16;
  v65 = 0;
  v18 = static Alignment.leading.getter(v16, v17);
  sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v50, 0.0, 1, 0.0, 1, v18, v19);
  sub_10002B438(v10, v12, v8);
  swift_release(v16);
  v20 = swift_bridgeObjectRelease(v14);
  v21 = ((uint64_t (*)(uint64_t, uint64_t, __n128))v43)(v44, v6, v20);
  v22 = swift_getKeyPath(&unk_10024E5E8);
  v23 = a1[3];
  v24 = a1[4];
  sub_100007BBC(a1, v23);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 448))(v23, v24);
  v26 = swift_getKeyPath(&unk_10024E618);
  v27 = v56;
  v28 = v57;
  v72 = v56;
  v73 = v57;
  v29 = v58;
  v30 = v59;
  v74 = v58;
  v75 = v59;
  v31 = v52;
  v32 = v52;
  v33 = v53;
  v68 = v52;
  v69 = v53;
  v34 = v54;
  v35 = v55;
  v70 = v54;
  v71 = v55;
  v36 = v50;
  v37 = v51;
  v66 = v50;
  v67 = v51;
  *(_QWORD *)&v76 = v22;
  *((_QWORD *)&v76 + 1) = v21;
  *(_OWORD *)(a2 + 136) = v56;
  *(_OWORD *)(a2 + 72) = v31;
  v38 = v73;
  *(_OWORD *)(a2 + 168) = v74;
  v39 = v76;
  *(_OWORD *)(a2 + 184) = v75;
  v40 = v69;
  *(_OWORD *)(a2 + 104) = v70;
  *(_OWORD *)(a2 + 120) = v71;
  *(_OWORD *)(a2 + 152) = v38;
  v41 = v67;
  *(_OWORD *)(a2 + 40) = v66;
  *(_OWORD *)(a2 + 56) = v41;
  *(_OWORD *)(a2 + 88) = v40;
  *(_QWORD *)&v77 = v26;
  *((_QWORD *)&v77 + 1) = v25;
  *(_OWORD *)(a2 + 200) = v39;
  *(_OWORD *)(a2 + 216) = v77;
  v78[6] = v27;
  v78[7] = v28;
  v78[8] = v29;
  v78[9] = v30;
  v78[2] = v32;
  v78[3] = v33;
  *(_QWORD *)a2 = v49;
  *(_QWORD *)(a2 + 8) = KeyPath;
  *(_QWORD *)(a2 + 16) = v48;
  *(_QWORD *)(a2 + 24) = v45;
  *(_QWORD *)(a2 + 32) = v46;
  v78[4] = v34;
  v78[5] = v35;
  v78[0] = v36;
  v78[1] = v37;
  v79 = v22;
  v80 = v21;
  v81 = v26;
  v82 = v25;
  swift_retain(v49);
  swift_retain(KeyPath);
  swift_retain(v48);
  swift_retain(v45);
  swift_retain(v46);
  sub_10002BC74((uint64_t)&v66);
  sub_10002BCF8((uint64_t)v78);
  swift_release(v46);
  swift_release(v45);
  swift_release(v48);
  swift_release(KeyPath);
  return swift_release(v49);
}

void sub_100028FBC(uint64_t a1@<X2>, uint64_t a2@<X4>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE v13[24];

  if (*(_BYTE *)(a2 + 40) == 1
    && (v5 = *(_QWORD *)(a1 + 32),
        swift_beginAccess(v5 + 48, v13, 0, 0),
        v6 = *(_QWORD *)(v5 + 72),
        *(_QWORD *)(v6 + 16)))
  {
    v7 = swift_retain(a2);
    v8 = sub_10017D414(v7);
    if ((v9 & 1) != 0)
    {
      v10 = (uint64_t *)(*(_QWORD *)(v6 + 56) + 16 * v8);
      v12 = *v10;
      v11 = v10[1];
      swift_bridgeObjectRetain(v11);
    }
    else
    {
      v12 = 0;
      v11 = 0xE000000000000000;
    }
    swift_release(a2);
  }
  else
  {
    v12 = 0;
    v11 = 0xE000000000000000;
  }
  *a3 = v12;
  a3[1] = v11;
}

double sub_100029064(void ***a1, uint64_t a2, uint64_t a3, uint64_t a4, Swift::Int a5, void **a6, uint64_t a7, uint64_t (*a8)(uint64_t a1), void *a9, uint64_t a10, uint64_t a11, _QWORD *a12)
{
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  double result;
  __n128 v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  BOOL v45;
  Swift::Int v46;
  uint8_t *v47;
  void **v48;
  unint64_t v49;
  uint64_t v50;
  Swift::String_optional v51;
  uint64_t countAndFlagsBits;
  void *object;
  Swift::String_optional v54;
  NSString v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int IsSingleEmoji;
  Swift::String v60;
  void **v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  void **v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  __n128 v74;
  void *v75;
  _OWORD *v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  void *v81;
  _OWORD *v82;
  char *v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  Swift::String_optional v93;
  void **v94;
  uint64_t v95;
  Swift::String_optional v96;
  Swift::String v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v102;
  unint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  Swift::Int v107;
  uint64_t *v108;
  NSObject *v109;
  os_log_type_t v110;
  _BOOL4 v111;
  uint8_t *v112;
  void **v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  uint64_t *v117;
  NSObject *v118;
  os_log_type_t v119;
  _BOOL4 v120;
  uint8_t *v121;
  void **v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  void **v126;
  __n128 v127;
  void *v128;
  _OWORD *v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  void *v134;
  _OWORD *v135;
  char *v136;
  __n128 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  char v149;
  uint64_t v150;
  NSObject *v151;
  os_log_type_t v152;
  uint64_t v153;
  void **v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  unint64_t v159;
  unint64_t v160;
  __n128 v161;
  void *v162;
  uint64_t v163;
  void *v164;
  _OWORD *v165;
  char *v166;
  __n128 v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  int v179;
  _QWORD *v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  Swift::Int v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  void **aBlock;
  uint64_t v193;
  uint64_t (*v194)(uint64_t);
  void *v195;
  uint64_t (*v196)();
  _OWORD *v197;
  unint64_t v198;
  unint64_t v199;
  char v200[32];

  v18 = type metadata accessor for DispatchWorkItemFlags(0);
  v186 = *(_QWORD *)(v18 - 8);
  v187 = v18;
  __chkstk_darwin(v18, v19);
  v185 = (char *)&v176 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchQoS(0);
  v183 = *(_QWORD *)(v21 - 8);
  v184 = v21;
  __chkstk_darwin(v21, v22);
  v182 = (char *)&v176 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *a1;
  v24 = (unint64_t)a1[1];
  v26 = *(_QWORD *)(a4 + 32);
  swift_beginAccess(v26 + 48, v200, 0, 0);
  v189 = v26;
  v27 = *(_QWORD *)(v26 + 136);
  if (!v27
    || ((v28 = *(_QWORD *)(v27 + 16),
         v29 = *(_QWORD *)(v27 + 24),
         v31 = *(_QWORD *)(a5 + 16),
         v30 = *(_QWORD *)(a5 + 24),
         v28 == v31)
      ? (v32 = v29 == v30)
      : (v32 = 0),
        !v32
     && (_stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, *(_QWORD *)(a5 + 16), *(_QWORD *)(a5 + 24), 0) & 1) == 0))
  {
    if (qword_100315820 != -1)
      goto LABEL_106;
    goto LABEL_12;
  }
  v177 = v31;
  v178 = v30;
  v188 = a5;
  aBlock = a6;
  v193 = a7;
  v194 = a8;
  v195 = a9;
  swift_bridgeObjectRetain(v24);
  v33 = sub_100003DB8(&qword_100318310);
  Binding.wrappedValue.getter(&v198);
  v34 = v199;
  if (v199)
  {
    if (v25 == (void **)v198 && v199 == v24)
    {
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v34);
      v179 = 1;
    }
    else
    {
      v179 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v24, v198, v199, 0);
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(v34);
    }
  }
  else
  {
    swift_bridgeObjectRelease(v24);
    v179 = 0;
  }
  aBlock = a6;
  v193 = a7;
  v194 = a8;
  v195 = a9;
  v198 = (unint64_t)v25;
  v199 = v24;
  v41 = swift_bridgeObjectRetain(v24);
  Binding.wrappedValue.setter(&v198, v33, v41);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v181 = type metadata accessor for Logger(0);
  sub_10000D744(v181, (uint64_t)qword_10033FD18);
  swift_bridgeObjectRetain(v24);
  v43 = Logger.logObject.getter(v42);
  v44 = static os_log_type_t.default.getter(v43);
  v45 = os_log_type_enabled(v43, v44);
  v46 = v188;
  if (v45)
  {
    v47 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v47 = 134349056;
    if ((v24 & 0x1000000000000000) != 0)
    {
      v48 = (void **)String.UTF8View._foreignCount()();
    }
    else if ((v24 & 0x2000000000000000) != 0)
    {
      v48 = (void **)(HIBYTE(v24) & 0xF);
    }
    else
    {
      v48 = (void **)((unint64_t)v25 & 0xFFFFFFFFFFFFLL);
    }
    aBlock = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, &v193, v47 + 4, v47 + 12);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v43, v44, "Free form text: Text length == %{public}ld", v47, 0xCu);
    swift_slowDealloc(v47, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease(v24);
  }
  v49 = 0xE000000000000000;
  v198 = 0;
  v199 = 0xE000000000000000;
  v50 = (unint64_t)v25 & 0xFFFFFFFFFFFFLL;
  if ((v24 & 0x2000000000000000) != 0)
    v50 = HIBYTE(v24) & 0xF;
  aBlock = v25;
  v193 = v24;
  v194 = 0;
  v195 = (void *)v50;
  swift_bridgeObjectRetain(v24);
  v51 = String.Iterator.next()();
  if (v51.value._object)
  {
    countAndFlagsBits = v51.value._countAndFlagsBits;
    object = v51.value._object;
    do
    {
      swift_bridgeObjectRetain(object);
      v55 = String._bridgeToObjectiveC()();
      IsSingleEmoji = CEMStringIsSingleEmoji(v55, v56, v57, v58);
      swift_bridgeObjectRelease(object);

      if (!IsSingleEmoji)
      {
        v60._countAndFlagsBits = countAndFlagsBits;
        v60._object = object;
        String.append(_:)(v60);
      }
      swift_bridgeObjectRelease(object);
      v54 = String.Iterator.next()();
      countAndFlagsBits = v54.value._countAndFlagsBits;
      object = v54.value._object;
    }
    while (v54.value._object);
    v61 = (void **)v198;
    v49 = v199;
  }
  else
  {
    v61 = 0;
  }
  swift_bridgeObjectRelease(v193);
  aBlock = v61;
  v193 = v49;
  v63 = String.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  v64 = v62;
  v198 = v63;
  v199 = v62;
  if (v25 == (void **)v63 && v24 == v62
    || (_stringCompareWithSmolCheck(_:_:expecting:)(v25, v24, v63, v62, 0) & 1) != 0)
  {
    swift_bridgeObjectRetain(v64);
  }
  else
  {
    v65 = qword_1003158B0;
    swift_bridgeObjectRetain(v64);
    if (v65 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    sub_10000D744(v181, (uint64_t)qword_10033FEC8);
    sub_10002ABA0((uint64_t *)a4);
    v66 = sub_10002ABA0((uint64_t *)a4);
    v67 = Logger.logObject.getter(v66);
    v68 = static os_log_type_t.default.getter(v67);
    if (os_log_type_enabled(v67, v68))
    {
      v69 = (uint8_t *)swift_slowAlloc(12, -1);
      v70 = (void **)swift_slowAlloc(32, -1);
      aBlock = v70;
      *(_DWORD *)v69 = 136446210;
      v71 = sub_1000AD18C();
      v73 = v72;
      v190 = sub_100172BEC(v71, v72, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, &v191, v69 + 4, v69 + 12);
      swift_bridgeObjectRelease(v73);
      sub_10002AC78((uint64_t *)a4);
      sub_10002AC78((uint64_t *)a4);
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "[%{public}s] Free form text: Disallowed character entered", v69, 0xCu);
      swift_arrayDestroy(v70, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v70, -1, -1);
      swift_slowDealloc(v69, -1, -1);
    }
    else
    {
      sub_10002AC78((uint64_t *)a4);
      sub_10002AC78((uint64_t *)a4);
    }

    sub_10000D75C();
    v75 = (void *)static OS_dispatch_queue.main.getter(v74);
    v76 = (_OWORD *)swift_allocObject(&unk_1002E5E00, 160, 7);
    v77 = *(_OWORD *)(a4 + 112);
    v76[7] = *(_OWORD *)(a4 + 96);
    v76[8] = v77;
    v76[9] = *(_OWORD *)(a4 + 128);
    v78 = *(_OWORD *)(a4 + 48);
    v76[3] = *(_OWORD *)(a4 + 32);
    v76[4] = v78;
    v79 = *(_OWORD *)(a4 + 80);
    v76[5] = *(_OWORD *)(a4 + 64);
    v76[6] = v79;
    v80 = *(_OWORD *)(a4 + 16);
    v76[1] = *(_OWORD *)a4;
    v76[2] = v80;
    v196 = sub_10002BF24;
    v197 = v76;
    aBlock = _NSConcreteStackBlock;
    v193 = 1107296256;
    v194 = sub_1001BAACC;
    v195 = &unk_1002E5E18;
    v81 = _Block_copy(&aBlock);
    v82 = v197;
    sub_10002ABA0((uint64_t *)a4);
    swift_release(v82);
    v83 = v182;
    static DispatchQoS.unspecified.getter(v84);
    aBlock = (void **)_swiftEmptyArrayStorage;
    v85 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v86 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v87 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
    v88 = v185;
    v89 = v86;
    v90 = v187;
    dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v89, v87, v187, v85);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v83, v88, v81);
    _Block_release(v81);

    (*(void (**)(char *, uint64_t))(v186 + 8))(v88, v90);
    (*(void (**)(char *, uint64_t))(v183 + 8))(v83, v184);
    v46 = v188;
  }
  v91 = 0xE000000000000000;
  v190 = 0;
  v191 = 0xE000000000000000;
  v92 = HIBYTE(v64) & 0xF;
  if ((v64 & 0x2000000000000000) == 0)
    v92 = v63 & 0xFFFFFFFFFFFFLL;
  aBlock = (void **)v63;
  v193 = v64;
  v194 = 0;
  v195 = (void *)v92;
  swift_bridgeObjectRetain(v64);
  v93 = String.Iterator.next()();
  v94 = (void **)v93.value._object;
  if (v93.value._object)
  {
    v95 = v93.value._countAndFlagsBits;
    do
    {
      if ((v95 != 10 || v94 != (void **)0xE100000000000000)
        && (_stringCompareWithSmolCheck(_:_:expecting:)(v95, v94, 10, 0xE100000000000000, 0) & 1) == 0)
      {
        v97._countAndFlagsBits = v95;
        v97._object = v94;
        String.append(_:)(v97);
      }
      swift_bridgeObjectRelease(v94);
      v96 = String.Iterator.next()();
      v95 = v96.value._countAndFlagsBits;
      v94 = (void **)v96.value._object;
    }
    while (v96.value._object);
    v94 = (void **)v190;
    v91 = v191;
  }
  v98 = a12;
  swift_bridgeObjectRelease(v193);
  aBlock = v94;
  v193 = v91;
  v99 = String.init<A>(_:)(&aBlock, &type metadata for String, &protocol witness table for String, &protocol witness table for String);
  if (v63 != v99 || v64 != v100)
  {
    v102 = v99;
    v103 = v100;
    v104 = _stringCompareWithSmolCheck(_:_:expecting:)(v63, v64, v99, v100, 0);
    swift_bridgeObjectRelease(v64);
    if ((v104 & 1) != 0)
    {
      swift_bridgeObjectRelease(v103);
      v105 = v198;
      v103 = v199;
      if ((v199 & 0x1000000000000000) != 0)
        goto LABEL_103;
    }
    else
    {
      if (qword_1003158B0 != -1)
        swift_once(&qword_1003158B0, sub_1000D9854);
      sub_10000D744(v181, (uint64_t)qword_10033FEC8);
      sub_10002ABA0((uint64_t *)a4);
      v117 = sub_10002ABA0((uint64_t *)a4);
      v118 = Logger.logObject.getter(v117);
      v119 = static os_log_type_t.default.getter(v118);
      v120 = os_log_type_enabled(v118, v119);
      v180 = a12;
      if (v120)
      {
        v121 = (uint8_t *)swift_slowAlloc(12, -1);
        v122 = (void **)swift_slowAlloc(32, -1);
        aBlock = v122;
        *(_DWORD *)v121 = 136446210;
        v123 = sub_1000AD18C();
        v125 = v124;
        v190 = sub_100172BEC(v123, v124, (uint64_t *)&aBlock);
        v98 = v180;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, &v191, v121 + 4, v121 + 12);
        swift_bridgeObjectRelease(v125);
        sub_10002AC78((uint64_t *)a4);
        sub_10002AC78((uint64_t *)a4);
        _os_log_impl((void *)&_mh_execute_header, v118, v119, "[%{public}s] Free form text: Return symbol entered", v121, 0xCu);
        swift_arrayDestroy(v122, 1, (char *)&type metadata for Any + 8);
        v126 = v122;
        v46 = v188;
        swift_slowDealloc(v126, -1, -1);
        swift_slowDealloc(v121, -1, -1);
      }
      else
      {
        sub_10002AC78((uint64_t *)a4);
        sub_10002AC78((uint64_t *)a4);
      }

      if ((v179 & 1) == 0)
      {
        sub_10000D75C();
        v162 = (void *)static OS_dispatch_queue.main.getter(v161);
        v163 = swift_allocObject(&unk_1002E5E50, 32, 7);
        *(_QWORD *)(v163 + 16) = a10;
        *(_QWORD *)(v163 + 24) = a11;
        v196 = sub_10002BF7C;
        v197 = (_OWORD *)v163;
        aBlock = _NSConcreteStackBlock;
        v193 = 1107296256;
        v194 = sub_1001BAACC;
        v195 = &unk_1002E5E68;
        v164 = _Block_copy(&aBlock);
        v165 = v197;
        swift_retain(a11);
        swift_release(v165);
        v166 = v182;
        static DispatchQoS.unspecified.getter(v167);
        aBlock = (void **)_swiftEmptyArrayStorage;
        v168 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v169 = sub_100003DB8((uint64_t *)&unk_1003178D0);
        v170 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
        v171 = v185;
        v172 = v169;
        v173 = v187;
        v174 = v168;
        v98 = v180;
        dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v172, v170, v187, v174);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0, v166, v171, v164);
        _Block_release(v164);

        (*(void (**)(char *, uint64_t))(v186 + 8))(v171, v173);
        v175 = v166;
        v46 = v188;
        (*(void (**)(char *, uint64_t))(v183 + 8))(v175, v184);
      }
      swift_bridgeObjectRelease(v199);
      v198 = v102;
      v199 = v103;
      v105 = v102;
      if ((v103 & 0x1000000000000000) != 0)
        goto LABEL_103;
    }
LABEL_63:
    if ((v103 & 0x2000000000000000) != 0)
      v106 = HIBYTE(v103) & 0xF;
    else
      v106 = v105 & 0xFFFFFFFFFFFFLL;
    goto LABEL_66;
  }
  swift_bridgeObjectRelease_n(v64, 2);
  v105 = v198;
  v103 = v199;
  if ((v199 & 0x1000000000000000) == 0)
    goto LABEL_63;
LABEL_103:
  v106 = String.UTF8View._foreignCount()();
LABEL_66:
  v107 = v98[6];
  if (v107 >= v106)
  {
LABEL_92:
    swift_bridgeObjectRetain(v103);
    v149 = sub_1000B5738(v46, (Swift::Int)v98, v105, v103);
    swift_bridgeObjectRelease(v103);
    if ((v149 & 1) == 0)
    {
      if (qword_1003158B0 != -1)
        swift_once(&qword_1003158B0, sub_1000D9854);
      sub_10000D744(v181, (uint64_t)qword_10033FEC8);
      sub_10002ABA0((uint64_t *)a4);
      swift_retain(v98);
      swift_retain(v46);
      sub_10002ABA0((uint64_t *)a4);
      swift_retain(v98);
      swift_retain(v46);
      v151 = Logger.logObject.getter(v150);
      v152 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v151, v152))
      {
        v153 = swift_slowAlloc(32, -1);
        v154 = (void **)swift_slowAlloc(96, -1);
        aBlock = v154;
        *(_DWORD *)v153 = 136446723;
        v155 = sub_1000AD18C();
        v157 = v156;
        v190 = sub_100172BEC(v155, v156, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, &v191, v153 + 4, v153 + 12);
        swift_bridgeObjectRelease(v157);
        sub_10002AC78((uint64_t *)a4);
        sub_10002AC78((uint64_t *)a4);
        *(_WORD *)(v153 + 12) = 2081;
        v158 = v98[2];
        v159 = v98[3];
        swift_bridgeObjectRetain(v159);
        v190 = sub_100172BEC(v158, v159, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, &v191, v153 + 14, v153 + 22);
        swift_release_n(v98);
        swift_bridgeObjectRelease(v159);
        *(_WORD *)(v153 + 22) = 2081;
        v160 = v178;
        swift_bridgeObjectRetain(v178);
        v190 = sub_100172BEC(v177, v160, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, &v191, v153 + 24, v153 + 32);
        swift_release_n(v188);
        swift_bridgeObjectRelease(v160);
        _os_log_impl((void *)&_mh_execute_header, v151, v152, "[%{public}s] QuestionnaireBodyView: failed to update value of %{private}s for %{private}s", (uint8_t *)v153, 0x20u);
        swift_arrayDestroy(v154, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v154, -1, -1);
        swift_slowDealloc(v153, -1, -1);

      }
      else
      {
        sub_10002AC78((uint64_t *)a4);
        sub_10002AC78((uint64_t *)a4);

        swift_release_n(v46);
        swift_release_n(v98);
      }
    }
    *(_QWORD *)&result = swift_bridgeObjectRelease(v199).n128_u64[0];
    return result;
  }
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  sub_10000D744(v181, (uint64_t)qword_10033FEC8);
  sub_10002ABA0((uint64_t *)a4);
  v108 = sub_10002ABA0((uint64_t *)a4);
  v109 = Logger.logObject.getter(v108);
  v110 = static os_log_type_t.default.getter(v109);
  v111 = os_log_type_enabled(v109, v110);
  v180 = v98;
  if (v111)
  {
    v112 = (uint8_t *)swift_slowAlloc(12, -1);
    v113 = (void **)swift_slowAlloc(32, -1);
    aBlock = v113;
    *(_DWORD *)v112 = 136446210;
    v114 = sub_1000AD18C();
    v116 = v115;
    v190 = sub_100172BEC(v114, v115, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v190, &v191, v112 + 4, v112 + 12);
    swift_bridgeObjectRelease(v116);
    sub_10002AC78((uint64_t *)a4);
    sub_10002AC78((uint64_t *)a4);
    _os_log_impl((void *)&_mh_execute_header, v109, v110, "[%{public}s] Free form text: Entered text is over the limit", v112, 0xCu);
    swift_arrayDestroy(v113, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v113, -1, -1);
    swift_slowDealloc(v112, -1, -1);
  }
  else
  {
    sub_10002AC78((uint64_t *)a4);
    sub_10002AC78((uint64_t *)a4);
  }

  sub_10000D75C();
  v128 = (void *)static OS_dispatch_queue.main.getter(v127);
  v129 = (_OWORD *)swift_allocObject(&unk_1002E5EA0, 160, 7);
  v130 = *(_OWORD *)(a4 + 112);
  v129[7] = *(_OWORD *)(a4 + 96);
  v129[8] = v130;
  v129[9] = *(_OWORD *)(a4 + 128);
  v131 = *(_OWORD *)(a4 + 48);
  v129[3] = *(_OWORD *)(a4 + 32);
  v129[4] = v131;
  v132 = *(_OWORD *)(a4 + 80);
  v129[5] = *(_OWORD *)(a4 + 64);
  v129[6] = v132;
  v133 = *(_OWORD *)(a4 + 16);
  v129[1] = *(_OWORD *)a4;
  v129[2] = v133;
  v196 = sub_10002C024;
  v197 = v129;
  aBlock = _NSConcreteStackBlock;
  v193 = 1107296256;
  v194 = sub_1001BAACC;
  v195 = &unk_1002E5EB8;
  v134 = _Block_copy(&aBlock);
  v135 = v197;
  sub_10002ABA0((uint64_t *)a4);
  swift_release(v135);
  v136 = v182;
  static DispatchQoS.unspecified.getter(v137);
  aBlock = (void **)_swiftEmptyArrayStorage;
  v138 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v139 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v140 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
  v141 = v185;
  v142 = v139;
  v143 = v187;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v142, v140, v187, v138);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v136, v141, v134);
  _Block_release(v134);

  (*(void (**)(char *, uint64_t))(v186 + 8))(v141, v143);
  (*(void (**)(char *, uint64_t))(v183 + 8))(v136, v184);
  v46 = v188;
  while (1)
  {
    v105 = v198;
    v103 = v199;
    v147 = HIBYTE(v199) & 0xF;
    if ((v199 & 0x1000000000000000) != 0)
    {
      if (v107 >= String.UTF8View._foreignCount()())
        goto LABEL_91;
    }
    else
    {
      if ((v199 & 0x2000000000000000) != 0)
        v148 = HIBYTE(v199) & 0xF;
      else
        v148 = v198 & 0xFFFFFFFFFFFFLL;
      if (v107 >= v148)
      {
LABEL_91:
        v98 = v180;
        goto LABEL_92;
      }
    }
    if ((v103 & 0x2000000000000000) != 0)
      break;
    v147 = v105 & 0xFFFFFFFFFFFFLL;
    if ((v105 & 0xFFFFFFFFFFFFLL) == 0)
      goto LABEL_105;
LABEL_78:
    if (((v103 >> 60) & ((v105 & 0x800000000000000) == 0)) != 0)
      v144 = 11;
    else
      v144 = 7;
    v145 = String.index(before:)(v144 | (v147 << 16), v105, v103);
    String.remove(at:)(v145);
    swift_bridgeObjectRelease(v146);
  }
  if (v147)
    goto LABEL_78;
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  swift_once(&qword_100315820, sub_1000D95E4);
LABEL_12:
  v35 = type metadata accessor for Logger(0);
  v36 = sub_10000D744(v35, (uint64_t)qword_10033FD18);
  v37 = Logger.logObject.getter(v36);
  v38 = static os_log_type_t.default.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v39 = 0;
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Free form text: Updating value when it is not a current question anymore", v39, 2u);
    swift_slowDealloc(v39, -1, -1);
  }

  return result;
}

uint64_t sub_10002A2B8(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (*a1)
  {
    v2 = *(_QWORD *)(*a1 + 168);
    v7 = a2;
    swift_retain(v2);
    PassthroughSubject.send(_:)(&v7);
    return swift_release(v2);
  }
  else
  {
    v4 = a1[1];
    v5 = type metadata accessor for AppEvents();
    v6 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    result = EnvironmentObject.error()(0, v4, v5, v6);
    __break(1u);
  }
  return result;
}

uint64_t sub_10002A344@<X0>(uint64_t a1@<X8>)
{
  return sub_100027850(a1);
}

uint64_t sub_10002A394@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  double v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  double *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t OpaqueTypeConformance2;
  char *v93;
  uint64_t v94;
  uint64_t result;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  double *v116;
  uint64_t v117;
  uint64_t v118;
  _OWORD v119[2];
  __int128 v120;
  __int128 v121;
  _QWORD v122[3];
  uint64_t v123;
  uint64_t v124;

  v2 = v1;
  v118 = a1;
  v107 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v107, v3);
  v116 = (double *)((char *)&v99 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v115 = sub_100003DB8(&qword_100318338);
  __chkstk_darwin(v115, v5);
  v117 = (uint64_t)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = sub_100003DB8(&qword_100318340);
  v100 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102, v7);
  v9 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100003DB8(&qword_100318348);
  __chkstk_darwin(v99, v10);
  v12 = (char *)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_100003DB8(&qword_100318350);
  __chkstk_darwin(v101, v13);
  v15 = (char *)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003DB8(&qword_100318358);
  __chkstk_darwin(v16, v17);
  v104 = (uint64_t)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = sub_100003DB8(&qword_100318360);
  __chkstk_darwin(v103, v19);
  v105 = (uint64_t)&v99 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = sub_100003DB8(&qword_100318368);
  __chkstk_darwin(v112, v21);
  v106 = (char *)&v99 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = sub_100003DB8(&qword_100318370);
  v113 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114, v23);
  v111 = (char *)&v99 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = sub_100003DB8(&qword_100318378);
  v109 = *(_QWORD *)(v110 - 8);
  __chkstk_darwin(v110, v25);
  v108 = (char *)&v99 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD **)v1;
  if (*(_QWORD *)v1)
  {
    v28 = v27[9];
    v29 = v27[10];
    sub_100007BBC(v27 + 6, v28);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v29 + 24))(v122, v28, v29);
    v30 = LocalizedStringKey.init(stringLiteral:)(0, 0xE000000000000000);
    v32 = v31;
    v34 = v33;
    v36 = v35;
    v37 = *(_OWORD *)(v1 + 32);
    v119[0] = *(_OWORD *)(v1 + 16);
    v119[1] = v37;
    v38 = sub_100003DB8(&qword_10031ED10);
    Binding.projectedValue.getter(&v120, v38);
    TextField<>.init(_:text:axis:)(v30, v32, v34 & 1, v36, v120, *((_QWORD *)&v120 + 1), v121, *((_QWORD *)&v121 + 1), 1);
    v39 = *(_QWORD *)(v1 + 56);
    KeyPath = swift_getKeyPath(&unk_10024E6B8);
    v41 = v100;
    v42 = v102;
    (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v12, v9, v102);
    v43 = &v12[*(int *)(v99 + 36)];
    *(_QWORD *)v43 = KeyPath;
    *((_QWORD *)v43 + 1) = v39;
    v43[16] = 0;
    v44 = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v9, v42);
    v45 = static Font.title3.getter(v44);
    static Font.Weight.semibold.getter();
    v46 = Font.weight(_:)(v45);
    swift_release(v45);
    v47 = swift_getKeyPath(&unk_10024E5E8);
    sub_10000B234((uint64_t)v12, (uint64_t)v15, &qword_100318348);
    v48 = (uint64_t *)&v15[*(int *)(v101 + 36)];
    *v48 = v47;
    v48[1] = v46;
    v49 = sub_100007FF0((uint64_t)v12, &qword_100318348);
    v50 = static Alignment.center.getter(v49);
    v51 = v104;
    sub_100131590(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v104, 0.0, 1, 0.0, 1, v50, v52);
    sub_100007FF0((uint64_t)v15, &qword_100318350);
    v53 = v123;
    v54 = v124;
    sub_100007BBC(v122, v123);
    v55 = (*(double (**)(uint64_t, uint64_t))(v54 + 376))(v53, v54);
    LOBYTE(v53) = static Edge.Set.all.getter();
    v56 = EdgeInsets.init(_all:)(v55);
    v58 = v57;
    v60 = v59;
    v62 = v61;
    v63 = v105;
    sub_10000B234(v51, v105, &qword_100318358);
    v64 = v63 + *(int *)(v103 + 36);
    *(_BYTE *)v64 = v53;
    *(double *)(v64 + 8) = v56;
    *(_QWORD *)(v64 + 16) = v58;
    *(_QWORD *)(v64 + 24) = v60;
    *(_QWORD *)(v64 + 32) = v62;
    *(_BYTE *)(v64 + 40) = 0;
    sub_100007FF0(v51, &qword_100318358);
    v65 = v123;
    v66 = v124;
    sub_100007BBC(v122, v123);
    v67 = (*(double (**)(uint64_t, uint64_t))(v66 + 368))(v65, v66);
    v68 = v116;
    v69 = (char *)v116 + *(int *)(v107 + 20);
    v70 = enum case for RoundedCornerStyle.continuous(_:);
    v71 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 104))(v69, v70, v71);
    *v68 = v67;
    v68[1] = v67;
    v72 = v123;
    v73 = v124;
    sub_100007BBC(v122, v123);
    v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 384))(v72, v73);
    v75 = v117;
    sub_10002C428((uint64_t)v68, v117);
    v76 = v115;
    *(_QWORD *)(v75 + *(int *)(v115 + 52)) = v74;
    *(_WORD *)(v75 + *(int *)(v76 + 56)) = 256;
    v77 = sub_10002C46C((uint64_t)v68);
    v78 = static Alignment.center.getter(v77);
    v80 = v79;
    v81 = v112;
    v82 = (uint64_t)v106;
    v83 = (uint64_t)&v106[*(int *)(v112 + 36)];
    sub_10000B234(v75, v83, &qword_100318338);
    v84 = (uint64_t *)(v83 + *(int *)(sub_100003DB8(&qword_100318380) + 36));
    *v84 = v78;
    v84[1] = v80;
    sub_10000B234(v63, v82, &qword_100318360);
    sub_100007FF0(v75, &qword_100318338);
    sub_100007FF0(v63, &qword_100318360);
    v85 = *(_OWORD *)(v2 + 96);
    v120 = *(_OWORD *)(v2 + 80);
    v121 = v85;
    v86 = *(_QWORD *)(v2 + 72);
    *(_QWORD *)&v119[0] = *(_QWORD *)(v2 + 64);
    *((_QWORD *)&v119[0] + 1) = v86;
    v87 = sub_100003DB8(&qword_100318260);
    v88 = sub_10002C4A8();
    v89 = sub_10002C66C();
    v90 = v111;
    View.focused<A>(_:equals:)(&v120, v119, v81, v87, v88, v89);
    sub_100007FF0(v82, &qword_100318368);
    v91 = *(_QWORD *)(v2 + 48);
    *(_QWORD *)&v120 = v81;
    *((_QWORD *)&v120 + 1) = v87;
    *(_QWORD *)&v121 = v88;
    *((_QWORD *)&v121 + 1) = v89;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v120, &opaque type descriptor for <<opaque return type of View.focused<A>(_:equals:)>>, 1);
    v93 = v108;
    v94 = v114;
    View.keyboardType(_:)(v91, v114, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v90, v94);
    (*(void (**)(uint64_t, char *, uint64_t))(v109 + 32))(v118, v93, v110);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v122);
  }
  else
  {
    v96 = *(_QWORD *)(v1 + 8);
    v97 = type metadata accessor for UIMetrics();
    v98 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v96, v97, v98);
    __break(1u);
  }
  return result;
}

uint64_t sub_10002AB80(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_retain(result);
  return result;
}

uint64_t sub_10002AB8C(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return swift_release(result);
  return result;
}

uint64_t sub_10002AB98(uint64_t result)
{
  *(_BYTE *)(result + 144) = 0;
  return result;
}

uint64_t *sub_10002ABA0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[10];
  v10 = a1[11];
  v12 = a1[12];
  v13 = a1[14];
  v14 = a1[16];
  swift_retain(a1[17]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v12);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v14);
  return a1;
}

uint64_t *sub_10002AC78(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  v8 = a1[8];
  v9 = a1[10];
  v10 = a1[11];
  v12 = a1[14];
  v13 = a1[16];
  v14 = a1[17];
  swift_release(a1[12]);
  swift_release(v9);
  swift_release(v6);
  swift_release(v5);
  swift_release(v4);
  swift_release(v2);
  swift_release(v3);
  swift_release(v7);
  swift_release(v8);
  swift_release(v10);
  swift_bridgeObjectRelease(v12);
  swift_bridgeObjectRelease(v13);
  swift_release(v14);
  return a1;
}

uint64_t destroy for FocusOrder(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[1]);
}

uint64_t *_s8SOSBuddy10FocusOrderVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t *assignWithCopy for FocusOrder(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a1[1];
  v7 = a2[1];
  a1[1] = v7;
  swift_retain(v7);
  swift_release(v6);
  return a1;
}

_QWORD *assignWithTake for FocusOrder(_QWORD *a1, _OWORD *a2)
{
  uint64_t v4;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for FocusOrder()
{
  return &type metadata for FocusOrder;
}

uint64_t destroy for FreeFormTextView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[5]);
  swift_release(a1[6]);
  swift_release(a1[7]);
  swift_release(a1[8]);
  swift_release(a1[10]);
  swift_release(a1[11]);
  swift_release(a1[12]);
  swift_bridgeObjectRelease(a1[14]);
  swift_bridgeObjectRelease(a1[16]);
  return swift_release(a1[17]);
}

uint64_t initializeWithCopy for FreeFormTextView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v7 = a2[4];
  v8 = a2[5];
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  v9 = a2[6];
  v10 = a2[7];
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  v18 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 64) = v18;
  v11 = a2[10];
  v12 = a2[11];
  *(_QWORD *)(a1 + 80) = v11;
  *(_QWORD *)(a1 + 88) = v12;
  v14 = a2[12];
  v13 = a2[13];
  *(_QWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 104) = v13;
  v16 = a2[14];
  v15 = a2[15];
  *(_QWORD *)(a1 + 112) = v16;
  *(_QWORD *)(a1 + 120) = v15;
  v19 = a2[16];
  v20 = a2[17];
  *(_QWORD *)(a1 + 128) = v19;
  *(_QWORD *)(a1 + 136) = v20;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_retain(v10);
  swift_retain(v18);
  swift_retain(v11);
  swift_retain(v12);
  swift_retain(v14);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v19);
  swift_retain(v20);
  return a1;
}

uint64_t *assignWithCopy for FreeFormTextView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[6];
  v13 = a1[6];
  a1[6] = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = a1[7];
  v15 = a2[7];
  a1[7] = v15;
  swift_retain(v15);
  swift_release(v14);
  v16 = a1[8];
  v17 = a2[8];
  a1[8] = v17;
  swift_retain(v17);
  swift_release(v16);
  v18 = a2[10];
  v19 = a1[10];
  a1[9] = a2[9];
  a1[10] = v18;
  swift_retain(v18);
  swift_release(v19);
  v20 = a1[11];
  v21 = a2[11];
  a1[11] = v21;
  swift_retain(v21);
  swift_release(v20);
  v22 = a2[12];
  v23 = a1[12];
  a1[12] = v22;
  swift_retain(v22);
  swift_release(v23);
  a1[13] = a2[13];
  v24 = a2[14];
  v25 = a1[14];
  a1[14] = v24;
  swift_bridgeObjectRetain(v24);
  swift_bridgeObjectRelease(v25);
  a1[15] = a2[15];
  v26 = a2[16];
  v27 = a1[16];
  a1[16] = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease(v27);
  v28 = a1[17];
  v29 = a2[17];
  a1[17] = v29;
  swift_retain(v29);
  swift_release(v28);
  return a1;
}

__n128 initializeWithTake for FreeFormTextView(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_OWORD *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  result = *(__n128 *)(a2 + 80);
  v6 = *(_OWORD *)(a2 + 96);
  v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

_QWORD *assignWithTake for FreeFormTextView(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  *a1 = *(_QWORD *)a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = *(_QWORD *)(a2 + 16);
  a1[1] = *(_QWORD *)(a2 + 8);
  a1[2] = v6;
  swift_release(v5);
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_release(a1[4]);
  v7 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  swift_release(v7);
  swift_release(a1[6]);
  v8 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  swift_release(v8);
  swift_release(a1[8]);
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  swift_release(a1[10]);
  v9 = a1[11];
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  swift_release(v9);
  v10 = a1[12];
  a1[12] = *(_QWORD *)(a2 + 96);
  swift_release(v10);
  v11 = *(_QWORD *)(a2 + 112);
  v12 = a1[14];
  a1[13] = *(_QWORD *)(a2 + 104);
  a1[14] = v11;
  swift_bridgeObjectRelease(v12);
  a1[15] = *(_QWORD *)(a2 + 120);
  swift_bridgeObjectRelease(a1[16]);
  v13 = a1[17];
  *((_OWORD *)a1 + 8) = *(_OWORD *)(a2 + 128);
  swift_release(v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for FreeFormTextView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 144))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FreeFormTextView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 144) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 144) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FreeFormTextView()
{
  return &type metadata for FreeFormTextView;
}

uint64_t sub_10002B32C()
{
  return sub_10002B614(&qword_100318268, &qword_100318200, (void (*)(void))sub_10002B360);
}

unint64_t sub_10002B360()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100318270;
  if (!qword_100318270)
  {
    v1 = sub_100007FAC(&qword_1003181F8);
    sub_1000084FC(&qword_100318278, &qword_1003181F0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100318270);
  }
  return result;
}

uint64_t sub_10002B3E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100295370, 1);
}

unint64_t sub_10002B3F4()
{
  unint64_t result;

  result = qword_100318280;
  if (!qword_100318280)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_100318280);
  }
  return result;
}

uint64_t sub_10002B438(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_release(a1);
  else
    return swift_bridgeObjectRelease(a2);
}

void sub_10002B45C()
{
  uint64_t v0;

  sub_10002852C((uint64_t *)(v0 + 16));
}

uint64_t sub_10002B464(uint64_t result)
{
  *(_BYTE *)(result + 256) = 0;
  return result;
}

unint64_t sub_10002B46C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003182B8;
  if (!qword_1003182B8)
  {
    v1 = sub_100007FAC(&qword_1003182A8);
    sub_10002B4D0();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1003182B8);
  }
  return result;
}

unint64_t sub_10002B4D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003182C0;
  if (!qword_1003182C0)
  {
    v1 = sub_100007FAC(&qword_1003182C8);
    sub_10002B56C(&qword_1003182D0, &qword_1003182D8, (void (*)(void))sub_10002B5F0);
    sub_1000084FC(&qword_100316C00, &qword_100316C08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003182C0);
  }
  return result;
}

uint64_t sub_10002B56C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007FAC(a2);
    a3();
    sub_1000084FC(&qword_100316BF0, &qword_100316BF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10002B5F0()
{
  return sub_10002B614(&qword_1003182E0, &qword_1003182E8, (void (*)(void))sub_10002B67C);
}

uint64_t sub_10002B614(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = sub_100007FAC(a2);
    a3();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10002B67C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003182F0;
  if (!qword_1003182F0)
  {
    v1 = sub_100007FAC(&qword_1003182F8);
    sub_1000084FC(&qword_100318300, &qword_100318308, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003182F0);
  }
  return result;
}

double sub_10002B700(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  double result;

  if (a4)
  {
    sub_10002B750(a1, a2, a3 & 1);
    swift_bridgeObjectRetain(a4);
    swift_retain(a5);
    *(_QWORD *)&result = swift_retain(a21).n128_u64[0];
  }
  return result;
}

uint64_t sub_10002B750(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0)
    return swift_retain(a1);
  else
    return swift_bridgeObjectRetain(a2);
}

double sub_10002B760(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  double result;

  if ((a33 & 1) != 0)
    return sub_10002B8AC(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24);
  swift_retain(a8);
  swift_retain(a4);
  swift_retain(a5);
  swift_retain(a6);
  swift_retain(a7);
  sub_10002B750(a9, a10, a11 & 1);
  swift_retain(a32);
  swift_bridgeObjectRetain(a12);
  swift_retain(a13);
  swift_retain(a29);
  swift_retain(a30);
  *(_QWORD *)&result = swift_retain(a31).n128_u64[0];
  return result;
}

double sub_10002B8AC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  double result;

  if (a4)
  {
    sub_10002B750(a1, a2, a3 & 1);
    swift_retain(a24);
    swift_bridgeObjectRetain(a4);
    swift_retain(a5);
    swift_retain(a21);
    swift_retain(a22);
    *(_QWORD *)&result = swift_retain(a23).n128_u64[0];
  }
  return result;
}

_QWORD *sub_10002B920(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21]);
  return a1;
}

double sub_10002B984(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  double result;

  if (a4)
  {
    sub_10002B438(a1, a2, a3 & 1);
    swift_release(a21);
    swift_release(a5);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  }
  return result;
}

uint64_t sub_10002B9D4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, char))
{
  __int128 v4;
  char v5;

  v5 = *(_BYTE *)(a1 + 256);
  v4 = *(_OWORD *)(a1 + 208);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    v4,
    *((_QWORD *)&v4 + 1),
    *(_QWORD *)(a1 + 224),
    *(_QWORD *)(a1 + 232),
    *(_QWORD *)(a1 + 240),
    *(_QWORD *)(a1 + 248),
    v5);
  return a1;
}

uint64_t sub_10002BA58(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if ((a33 & 1) != 0)
    return sub_10002BBA4(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
             a20,
             a21,
             a22,
             a23,
             a24);
  swift_release(a4);
  swift_release(a5);
  swift_release(a7);
  swift_release(a6);
  swift_release(a8);
  sub_10002B438(a9, a10, a11 & 1);
  swift_release(a31);
  swift_release(a29);
  swift_release(a13);
  swift_bridgeObjectRelease(a12);
  swift_release(a30);
  return swift_release(a32);
}

uint64_t sub_10002BBA4(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  if (a4)
  {
    sub_10002B438(result, a2, a3 & 1);
    swift_release(a23);
    swift_release(a21);
    swift_release(a5);
    swift_bridgeObjectRelease(a4);
    swift_release(a22);
    return swift_release(a24);
  }
  return result;
}

double sub_10002BC18(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_10002BC38(uint64_t result)
{
  *(_BYTE *)(result + 256) = 1;
  return result;
}

double sub_10002BC54(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_10002BC74(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 160);
  v5 = *(_QWORD *)(a1 + 168);
  v6 = *(_QWORD *)(a1 + 176);
  v7 = *(_QWORD *)(a1 + 184);
  sub_10002B750(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_retain(v7);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t sub_10002BCF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 160);
  v5 = *(_QWORD *)(a1 + 168);
  v6 = *(_QWORD *)(a1 + 176);
  v7 = *(_QWORD *)(a1 + 184);
  sub_10002B438(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v6);
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v5);
  swift_release(v7);
  return a1;
}

uint64_t sub_10002BD7C()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  swift_release(v0[12]);
  swift_release(v0[14]);
  swift_release(v0[15]);
  swift_release(v0[16]);
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[20]);
  swift_release(v0[21]);
  swift_release(v0[22]);
  swift_release(v0[23]);
  return swift_deallocObject(v0, 192, 7);
}

void sub_10002BE18(_QWORD *a1@<X8>)
{
  uint64_t v1;

  sub_100028FBC(v1 + 32, *(_QWORD *)(v1 + 184), a1);
}

uint64_t sub_10002BE28()
{
  _QWORD *v0;

  swift_unknownObjectRelease(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  swift_release(v0[12]);
  swift_release(v0[14]);
  swift_release(v0[15]);
  swift_release(v0[16]);
  swift_bridgeObjectRelease(v0[18]);
  swift_bridgeObjectRelease(v0[20]);
  swift_release(v0[21]);
  swift_release(v0[22]);
  swift_release(v0[23]);
  swift_release(v0[24]);
  swift_bridgeObjectRelease(v0[26]);
  swift_release(v0[28]);
  swift_release(v0[29]);
  return swift_deallocObject(v0, 240, 7);
}

double sub_10002BEE4(void ***a1)
{
  uint64_t v1;

  return sub_100029064(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), v1 + 32, *(_QWORD *)(v1 + 176), *(void ***)(v1 + 184), *(_QWORD *)(v1 + 192), *(uint64_t (**)(uint64_t))(v1 + 200), *(void **)(v1 + 208), *(_QWORD *)(v1 + 216), *(_QWORD *)(v1 + 224), *(_QWORD **)(v1 + 232));
}

uint64_t sub_10002BF24()
{
  uint64_t v0;

  return sub_10002A2B8((_QWORD *)(v0 + 16), 0);
}

uint64_t sub_10002BF40(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002BF50(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10002BF58()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002BF7C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_10002BFA0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[10]);
  swift_release(v0[12]);
  swift_release(v0[13]);
  swift_release(v0[14]);
  swift_bridgeObjectRelease(v0[16]);
  swift_bridgeObjectRelease(v0[18]);
  swift_release(v0[19]);
  return swift_deallocObject(v0, 160, 7);
}

uint64_t sub_10002C024()
{
  uint64_t v0;

  return sub_10002A2B8((_QWORD *)(v0 + 16), 3);
}

uint64_t destroy for FreeFormTextField(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(a1[9]);
  swift_release(a1[10]);
  swift_release(a1[11]);
  return swift_bridgeObjectRelease(a1[13]);
}

uint64_t initializeWithCopy for FreeFormTextField(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = a2[4];
  *(_QWORD *)(a1 + 40) = v7;
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  v8 = a2[9];
  *(_QWORD *)(a1 + 64) = a2[8];
  *(_QWORD *)(a1 + 72) = v8;
  v9 = a2[10];
  v10 = a2[11];
  *(_QWORD *)(a1 + 80) = v9;
  *(_QWORD *)(a1 + 88) = v10;
  v11 = a2[13];
  *(_QWORD *)(a1 + 96) = a2[12];
  *(_QWORD *)(a1 + 104) = v11;
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_retain(v9);
  swift_retain(v10);
  swift_bridgeObjectRetain(v11);
  return a1;
}

uint64_t *assignWithCopy for FreeFormTextField(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_retain(v8);
  swift_release(v9);
  a1[4] = a2[4];
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  a1[6] = a2[6];
  a1[7] = a2[7];
  a1[8] = a2[8];
  v12 = a2[9];
  v13 = a1[9];
  a1[9] = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  v14 = a1[10];
  v15 = a2[10];
  a1[10] = v15;
  swift_retain(v15);
  swift_release(v14);
  v16 = a2[11];
  v17 = a1[11];
  a1[11] = v16;
  swift_retain(v16);
  swift_release(v17);
  a1[12] = a2[12];
  v18 = a2[13];
  v19 = a1[13];
  a1[13] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease(v19);
  return a1;
}

__n128 initializeWithTake for FreeFormTextField(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t *assignWithTake for FreeFormTextField(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  swift_release(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_release(v5);
  v6 = a2[5];
  v7 = a1[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease(v7);
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  a1[8] = a2[8];
  swift_bridgeObjectRelease(a1[9]);
  v8 = a1[10];
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  swift_release(v8);
  v9 = a1[11];
  a1[11] = a2[11];
  swift_release(v9);
  v10 = a2[13];
  v11 = a1[13];
  a1[12] = a2[12];
  a1[13] = v10;
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for FreeFormTextField(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 112))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FreeFormTextField(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 112) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 112) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for FreeFormTextField()
{
  return &type metadata for FreeFormTextField;
}

uint64_t sub_10002C3E4()
{
  return sub_1000084FC(&qword_100318328, &qword_100318330, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_10002C410(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100295398, 1);
}

uint64_t sub_10002C428(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002C46C(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for RoundedRectangle(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10002C4A8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100318388;
  if (!qword_100318388)
  {
    v1 = sub_100007FAC(&qword_100318368);
    sub_10002B614(&qword_100318390, &qword_100318360, (void (*)(void))sub_10002C54C);
    sub_1000084FC(&qword_1003183C8, &qword_100318380, (uint64_t)&protocol conformance descriptor for _BackgroundModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100318388);
  }
  return result;
}

unint64_t sub_10002C54C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100318398;
  if (!qword_100318398)
  {
    v1 = sub_100007FAC(&qword_100318358);
    sub_10002B56C(&qword_1003183A0, &qword_100318350, (void (*)(void))sub_10002C5D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100318398);
  }
  return result;
}

unint64_t sub_10002C5D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003183A8;
  if (!qword_1003183A8)
  {
    v1 = sub_100007FAC(&qword_100318348);
    sub_1000084FC(&qword_1003183B0, &qword_100318340, (uint64_t)&protocol conformance descriptor for TextField<A>);
    sub_1000084FC(&qword_1003183B8, &qword_1003183C0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003183A8);
  }
  return result;
}

unint64_t sub_10002C66C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003183D0;
  if (!qword_1003183D0)
  {
    v1 = sub_100007FAC(&qword_100318260);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1003183D0);
  }
  return result;
}

uint64_t sub_10002C6C8()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v0 = sub_100007FAC(&qword_100318370);
  v3 = sub_100007FAC(&qword_100318368);
  v4 = sub_100007FAC(&qword_100318260);
  v5 = sub_10002C4A8();
  v6 = sub_10002C66C();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.focused<A>(_:equals:)>>, 1);
  v3 = v0;
  v4 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.keyboardType(_:)>>, 1);
}

void sub_10002C7B4(void *a1, void *a2, void *a3)
{
  void *v3;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  id v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  id v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  id v49;
  id v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  void *v54;
  NSObject *log;
  os_log_type_t type;
  uint64_t v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;

  if (qword_1003158D8 != -1)
    swift_once(&qword_1003158D8, sub_1000D9904);
  v7 = type metadata accessor for Logger(0);
  sub_10000D744(v7, (uint64_t)qword_10033FF40);
  v8 = v3;
  v9 = a1;
  v10 = a2;
  v11 = a3;
  v12 = v8;
  v13 = v9;
  v14 = v10;
  v15 = v11;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    type = v17;
    v18 = swift_slowAlloc(42, -1);
    v57 = swift_slowAlloc(128, -1);
    v60 = v57;
    *(_DWORD *)v18 = 136446978;
    v19 = v12;
    v20 = objc_msgSend(v19, "description");
    v58 = v13;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v54 = v15;
    v23 = v22;

    v59 = sub_100172BEC(v21, v23, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v18 + 4, v18 + 12);

    swift_bridgeObjectRelease(v23);
    *(_WORD *)(v18 + 12) = 2082;
    log = v16;
    v24 = v12;
    v25 = v58;
    v26 = objc_msgSend(v25, "description");
    v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    v29 = v28;

    v59 = sub_100172BEC(v27, v29, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v18 + 14, v18 + 22);

    v12 = v24;
    swift_bridgeObjectRelease(v29);
    *(_WORD *)(v18 + 22) = 2082;
    v30 = v14;
    v31 = objc_msgSend(v30, "description");
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
    v34 = v33;

    v59 = sub_100172BEC(v32, v34, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v18 + 24, v18 + 32);

    swift_bridgeObjectRelease(v34);
    *(_WORD *)(v18 + 32) = 2082;
    v35 = v54;
    v36 = objc_msgSend(v35, "description");
    v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v36);
    v39 = v38;

    v59 = sub_100172BEC(v37, v39, &v60);
    v13 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v18 + 34, v18 + 42);

    swift_bridgeObjectRelease(v39);
    _os_log_impl((void *)&_mh_execute_header, log, type, "[%{public}s] scene(%{public}s) willConnectTo session(%{public}s) with options(%{public}s)", (uint8_t *)v18, 0x2Au);
    swift_arrayDestroy(v57, 4, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

  }
  v40 = objc_opt_self(UIWindowScene);
  v41 = swift_dynamicCastObjCClass(v13, v40);
  if (v41)
  {
    v42 = v41;
    v43 = v13;
    sub_10002D504(v42);

  }
  else
  {
    v44 = v12;
    v45 = Logger.logObject.getter(v44);
    v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc(12, -1);
      v48 = swift_slowAlloc(32, -1);
      v60 = v48;
      *(_DWORD *)v47 = 136446210;
      v49 = v44;
      v50 = objc_msgSend(v49, "description");
      v51 = static String._unconditionallyBridgeFromObjectiveC(_:)(v50);
      v53 = v52;

      v59 = sub_100172BEC(v51, v53, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v47 + 4, v47 + 12);

      swift_bridgeObjectRelease(v53);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "[%{public}s] provided scene is not a UIWindowScene", v47, 0xCu);
      swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v48, -1, -1);
      swift_slowDealloc(v47, -1, -1);

    }
    else
    {

    }
  }
}

void sub_10002CE00(void *a1)
{
  sub_10002CECC(a1, "[%{public}s] sceneDidDisconnect(%{public}s)");
}

void sub_10002CE60(void *a1)
{
  sub_10002CECC(a1, "[%{public}s] sceneDidBecomeActive(%{public}s)");
}

void sub_10002CEC0(void *a1)
{
  sub_10002CECC(a1, "[%{public}s] sceneWillResignActive(%{public}s)");
}

void sub_10002CECC(void *a1, const char *a2)
{
  void *v2;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  id v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  id v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;

  if (qword_1003158D8 != -1)
    swift_once(&qword_1003158D8, sub_1000D9904);
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FF40);
  v6 = v2;
  v7 = a1;
  v23 = v6;
  v8 = v7;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v26 = v12;
    *(_DWORD *)v11 = 136446466;
    v13 = v23;
    v14 = objc_msgSend(v13, "description");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v24 = a2;
    v17 = v16;

    v25 = sub_100172BEC(v15, v17, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v11 + 12) = 2082;
    v18 = v8;
    v19 = objc_msgSend(v18, "description");
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

    v25 = sub_100172BEC(v20, v22, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v11 + 14, v11 + 22);

    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, v24, (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_10002D1A8(void *a1)
{
  return sub_10002D21C(a1, "[%{public}s] sceneWillEnterForeground(%{public}s)", 1);
}

uint64_t sub_10002D20C(void *a1)
{
  return sub_10002D21C(a1, "[%{public}s] sceneDidEnterBackground(%{public}s)", 0);
}

uint64_t sub_10002D21C(void *a1, char *a2, char a3)
{
  void *v3;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  id v20;
  id v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t result;
  uint64_t v26;
  char *format;
  uint64_t v28;
  char v29;
  uint64_t v30;
  uint64_t v31;

  if (qword_1003158D8 != -1)
    swift_once(&qword_1003158D8, sub_1000D9904);
  v7 = type metadata accessor for Logger(0);
  sub_10000D744(v7, (uint64_t)qword_10033FF40);
  v8 = v3;
  v9 = a1;
  v10 = v8;
  v11 = v9;
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v28 = swift_slowAlloc(64, -1);
    v31 = v28;
    *(_DWORD *)v14 = 136446466;
    v29 = a3;
    v15 = v10;
    v16 = objc_msgSend(v15, "description");
    format = a2;
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    v30 = sub_100172BEC(v17, v19, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v14 + 4, v14 + 12);

    swift_bridgeObjectRelease(v19);
    *(_WORD *)(v14 + 12) = 2082;
    v20 = v11;
    v21 = objc_msgSend(v20, "description");
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    v30 = sub_100172BEC(v22, v24, &v31);
    a3 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v14 + 14, v14 + 22);

    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, format, (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v28, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

  }
  result = sub_10002D934();
  if (result)
  {
    v26 = result;
    sub_10015DE3C(a3 & 1);
    return swift_release(v26);
  }
  return result;
}

void sub_10002D504(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  double v43;
  id v44;
  void *v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD __dst[52];
  char v52;
  uint64_t __src[52];
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;

  v3 = sub_10002D934();
  if (v3)
  {
    v48 = v1;
    v50 = v3;
    v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for SecureWindow()), "initWithWindowScene:", a1);
    if (qword_100315788 != -1)
      swift_once(&qword_100315788, sub_10006F500);
    objc_msgSend(v4, "safeAreaInsets", v48);
    *(_QWORD *)&xmmword_10033FC40 = v5;
    *((_QWORD *)&xmmword_10033FC40 + 1) = v6;
    qword_10033FC50 = v7;
    unk_10033FC58 = v8;
    if (qword_1003158D8 != -1)
      swift_once(&qword_1003158D8, sub_1000D9904);
    v9 = type metadata accessor for Logger(0);
    sub_10000D744(v9, (uint64_t)qword_10033FF40);
    v10 = v4;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      __src[0] = v14;
      *(_DWORD *)v13 = 136315138;
      objc_msgSend(v10, "safeAreaInsets");
      __dst[0] = v15;
      __dst[1] = v16;
      __dst[2] = v17;
      __dst[3] = v18;
      type metadata accessor for UIEdgeInsets(0);
      v21 = String.init<A>(describing:)(__dst, v19, v20);
      v23 = v22;
      __dst[0] = sub_100172BEC(v21, v22, __src);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(__dst, &__dst[1], v13 + 4, v13 + 12);

      swift_bridgeObjectRelease(v23);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Safe area insets: %s", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);

    }
    else
    {

    }
    objc_msgSend(v10, "setOverrideUserInterfaceStyle:", 2);
    v24 = type metadata accessor for AppRuntimeStateModel();
    v25 = sub_1000052EC(&qword_100318498, (uint64_t (*)(uint64_t))type metadata accessor for AppRuntimeStateModel, (uint64_t)&unk_10024D2FC);
    v26 = v10;
    v27 = EnvironmentObject.init()(v24, v25);
    v29 = v28;
    v30 = type metadata accessor for TransitionAlertModel();
    v31 = sub_1000052EC((unint64_t *)&unk_1003184A0, (uint64_t (*)(uint64_t))type metadata accessor for TransitionAlertModel, (uint64_t)&unk_10024D2FC);
    v32 = EnvironmentObject.init()(v30, v31);
    v34 = v33;
    v35 = type metadata accessor for UIMetrics();
    v36 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v37 = EnvironmentObject.init()(v35, v36);
    v39 = v38;
    LOBYTE(__src[0]) = 0;
    State.init(wrappedValue:)(__dst, __src, &type metadata for Bool);
    v40 = __dst[0];
    v41 = __dst[1];
    LOBYTE(__src[0]) = 0;
    State.init(wrappedValue:)(__dst, __src, &type metadata for AppRuntimeStateModel.Stage);
    v42 = __dst[1];
    *(_QWORD *)&v54 = v27;
    *((_QWORD *)&v54 + 1) = v29;
    v55 = v32;
    v56 = v34;
    v57 = v37;
    v58 = v39;
    v59 = v40;
    v60 = v41;
    v61 = __dst[0];
    v62 = __dst[1];
    v43 = sub_100170098(&v54, (uint64_t)__src);
    LOBYTE(v29) = static Edge.Set.all.getter(v43);
    swift_release(v27);
    swift_release(v32);
    swift_release(v37);
    swift_release(v41);
    swift_release(v42);
    memcpy(__dst, __src, sizeof(__dst));
    v52 = v29;
    v44 = objc_allocWithZone((Class)sub_100003DB8((uint64_t *)&unk_1003184B0));
    v45 = (void *)UIHostingController.init(rootView:)(__dst);
    objc_msgSend(v26, "setRootViewController:", v45);

    v46 = *(void **)(v49 + OBJC_IVAR____TtC8SOSBuddy13SceneDelegate_window);
    *(_QWORD *)(v49 + OBJC_IVAR____TtC8SOSBuddy13SceneDelegate_window) = v26;
    v47 = v26;

    objc_msgSend(v47, "makeKeyAndVisible");
    swift_release(v50);

  }
}

uint64_t sub_10002D934()
{
  void *v0;
  id v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;
  uint64_t v19;

  v1 = objc_msgSend((id)objc_opt_self(UIApplication), "sharedApplication");
  v2 = objc_msgSend(v1, "delegate");

  if (v2)
  {
    v3 = type metadata accessor for AppDelegate();
    v4 = swift_dynamicCastClass(v2, v3);
    if (v4)
    {
      v5 = *(_QWORD *)(*(_QWORD *)(v4 + OBJC_IVAR____TtC8SOSBuddy11AppDelegate_delegate) + 16);
      swift_retain(v5);
      swift_unknownObjectRelease(v2);
      return v5;
    }
    swift_unknownObjectRelease(v2);
  }
  if (qword_1003158D8 != -1)
    swift_once(&qword_1003158D8, sub_1000D9904);
  v6 = type metadata accessor for Logger(0);
  sub_10000D744(v6, (uint64_t)qword_10033FF40);
  v7 = v0;
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.fault.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v11 = swift_slowAlloc(32, -1);
    v19 = v11;
    *(_DWORD *)v10 = 136446210;
    v12 = v7;
    v13 = objc_msgSend(v12, "description");
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

    v18 = sub_100172BEC(v14, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4, v10 + 12);

    swift_bridgeObjectRelease(v16);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s] app == nil", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

  }
  return 0;
}

id sub_10002DBDC(uint64_t a1)
{
  return sub_10002DDA0(a1, type metadata accessor for SceneDelegate);
}

uint64_t type metadata accessor for SceneDelegate()
{
  return objc_opt_self(_TtC8SOSBuddy13SceneDelegate);
}

id sub_10002DD90()
{
  return sub_10002DDA0(0, type metadata accessor for SecureWindow);
}

id sub_10002DDA0(uint64_t a1, uint64_t (*a2)(void))
{
  void *v2;
  objc_super v4;

  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, "dealloc");
}

uint64_t type metadata accessor for SecureWindow()
{
  return objc_opt_self(_TtC8SOSBuddyP33_C8DF0A529D92089A732B9B5B185D7E2612SecureWindow);
}

uint64_t sub_10002DDF0(uint64_t a1)
{
  void *v1;
  uint64_t v3;
  id v4;
  __n128 v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if (qword_1003158D8 != -1)
    swift_once(&qword_1003158D8, sub_1000D9904);
  v3 = type metadata accessor for Logger(0);
  sub_10000D744(v3, (uint64_t)qword_10033FF40);
  v4 = v1;
  swift_bridgeObjectRetain_n(a1, 2, v5);
  v6 = v4;
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(22, -1);
    v21 = swift_slowAlloc(64, -1);
    v23 = v21;
    *(_DWORD *)v9 = 136446466;
    v10 = v6;
    v11 = objc_msgSend(v10, "description");
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v22 = sub_100172BEC(v12, v14, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v9 + 4, v9 + 12);

    swift_bridgeObjectRelease(v14);
    *(_WORD *)(v9 + 12) = 2082;
    sub_1000226C8();
    sub_1000052EC((unint64_t *)&unk_1003184C0, (uint64_t (*)(uint64_t))sub_1000226C8, (uint64_t)&protocol conformance descriptor for NSObject);
    v15 = swift_bridgeObjectRetain(a1);
    v16 = Set.description.getter(v15);
    v18 = v17;
    swift_bridgeObjectRelease(a1);
    v22 = sub_100172BEC(v16, v18, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%{public}s] openURLContexts(%{public}s)", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v21, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  result = sub_10002D934();
  if (result)
  {
    v20 = result;
    sub_10015D75C(a1);
    return swift_release(v20);
  }
  return result;
}

uint64_t sub_10002E094@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v15;
  uint64_t WitnessTable;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD v42[2];

  v36 = a1;
  v37 = a2;
  v39 = a8;
  v34 = a9;
  v35 = a10;
  v15 = type metadata accessor for GeometryCapturer(255, a6, a9, a3);
  WitnessTable = swift_getWitnessTable(&unk_10024E750, v15);
  v17 = type metadata accessor for _BackgroundModifier(255, v15, WitnessTable);
  v18 = type metadata accessor for ModifiedContent(0, a5, v17);
  v38 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v33 - v20;
  v42[0] = a3;
  v42[1] = a4;
  swift_retain(a4);
  v23 = static Alignment.center.getter(v22);
  View.background<A>(_:alignment:)(v42, v23, v24, a5, v15, a7, WitnessTable);
  swift_release(a4);
  v25 = (_QWORD *)swift_allocObject(&unk_1002E6030, 72, 7);
  v25[2] = a5;
  v25[3] = a6;
  v27 = v34;
  v26 = v35;
  v25[4] = a7;
  v25[5] = v27;
  v28 = v36;
  v25[6] = v26;
  v25[7] = v28;
  v29 = v37;
  v25[8] = v37;
  swift_retain(v29);
  v30 = swift_getWitnessTable(&protocol conformance descriptor for _BackgroundModifier<A>, v17);
  v40 = a7;
  v41 = v30;
  v31 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v18);
  View.onPreferenceChange<A>(_:perform:)(a6, sub_10002E938, v25, v18, a6, v31, v27, v26);
  swift_release(v25);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v21, v18);
}

uint64_t sub_10002E268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t AssociatedTypeWitness;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __n128 v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  char *v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD aBlock[5];
  char *v50;

  v42 = a3;
  v43 = a8;
  v40 = a2;
  v41 = a6;
  v39 = a4;
  v45 = type metadata accessor for DispatchWorkItemFlags(0);
  v48 = *(_QWORD *)(v45 - 8);
  __chkstk_darwin(v45, v11);
  v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for DispatchQoS(0);
  v46 = *(_QWORD *)(v14 - 8);
  v47 = v14;
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a7, a5, &protocol requirements base descriptor for PreferenceKey, &associated type descriptor for PreferenceKey.Value);
  v19 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v20 = *(_QWORD *)(v19 + 64);
  __chkstk_darwin(AssociatedTypeWitness, v21);
  v23 = (char *)&v39 - v22;
  sub_10000D75C();
  v44 = static OS_dispatch_queue.main.getter(v24);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v23, a1, AssociatedTypeWitness);
  v25 = *(unsigned __int8 *)(v19 + 80);
  v26 = (v25 + 72) & ~v25;
  v27 = (char *)swift_allocObject(&unk_1002E6058, v26 + v20, v25 | 7);
  *((_QWORD *)v27 + 2) = v39;
  *((_QWORD *)v27 + 3) = a5;
  v28 = v42;
  *((_QWORD *)v27 + 4) = v41;
  *((_QWORD *)v27 + 5) = a7;
  v29 = v40;
  *((_QWORD *)v27 + 6) = v43;
  *((_QWORD *)v27 + 7) = v29;
  *((_QWORD *)v27 + 8) = v28;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(&v27[v26], v23, AssociatedTypeWitness);
  aBlock[4] = sub_10002E9D8;
  v50 = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002E6070;
  v30 = _Block_copy(aBlock);
  v31 = v50;
  swift_retain(v28);
  swift_release(v31);
  static DispatchQoS.unspecified.getter(v32);
  aBlock[0] = _swiftEmptyArrayStorage;
  v33 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v34 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v35 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
  v36 = v45;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v34, v35, v45, v33);
  v37 = (void *)v44;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v17, v13, v30);
  _Block_release(v30);

  (*(void (**)(char *, uint64_t))(v48 + 8))(v13, v36);
  return (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v17, v47);
}

uint64_t sub_10002E528@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;

  v14 = swift_allocObject(&unk_1002E6150, 32, 7);
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  v15 = sub_1000052EC(&qword_100318530, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  swift_retain(a2);
  sub_10002E094((uint64_t)sub_10002E844, v14, (uint64_t)sub_10002E5FC, 0, a3, a4, a5, a7, a6, v15);
  return swift_release(v14);
}

uint64_t sub_10002E5FC@<X0>(double *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v2 = type metadata accessor for GlobalCoordinateSpace(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin();
  v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static CoordinateSpaceProtocol<>.global.getter(v4);
  v7 = GeometryProxy.frame<A>(in:)(v6, v2, &protocol witness table for GlobalCoordinateSpace);
  v9 = v8;
  v11 = v10;
  v13 = v12;
  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *a1 = v7;
  *((_QWORD *)a1 + 1) = v9;
  *((_QWORD *)a1 + 2) = v11;
  *((_QWORD *)a1 + 3) = v13;
  return result;
}

uint64_t sub_10002E6BC@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v25 = a6;
  v23 = a4;
  v24 = a5;
  v13 = type metadata accessor for NamedCoordinateSpace(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(_QWORD *)(v14 + 64);
  __chkstk_darwin(v13, v16);
  v17 = swift_allocObject(&unk_1002E5FE0, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))((char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13);
  v18 = *(unsigned __int8 *)(v14 + 80);
  v19 = (v18 + 16) & ~v18;
  v20 = swift_allocObject(&unk_1002E6008, v19 + v15, v18 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v20 + v19, (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), v13);
  v21 = sub_1000052EC(&qword_100318530, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, (uint64_t)&protocol conformance descriptor for CGRect);
  swift_retain(a3);
  sub_10002E094((uint64_t)sub_10002E844, v17, (uint64_t)sub_10002E8A8, v20, v23, v24, v25, a8, a7, v21);
  swift_release(v17);
  return swift_release(v20);
}

uint64_t sub_10002E820()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002E848()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for NamedCoordinateSpace(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10002E8A8(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = type metadata accessor for NamedCoordinateSpace(0);
  v4 = *(unsigned __int8 *)(*(_QWORD *)(v3 - 8) + 80);
  *(double *)a1 = GeometryProxy.frame<A>(in:)(v1 + ((v4 + 16) & ~v4), v3, &protocol witness table for NamedCoordinateSpace);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v7;
}

uint64_t type metadata accessor for GeometryCapturer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GeometryCapturer);
}

uint64_t sub_10002E914()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10002E938(uint64_t a1)
{
  uint64_t *v1;

  return sub_10002E268(a1, v1[7], v1[8], v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10002E94C()
{
  char *v0;
  uint64_t AssociatedTypeWitness;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, *((_QWORD *)v0 + 5), *((_QWORD *)v0 + 3), &protocol requirements base descriptor for PreferenceKey, &associated type descriptor for PreferenceKey.Value);
  v2 = *(_QWORD *)(AssociatedTypeWitness - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 72) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*((_QWORD *)v0 + 8));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], AssociatedTypeWitness);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10002E9D8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(swift_getAssociatedTypeWitness(0, *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24), &protocol requirements base descriptor for PreferenceKey, &associated type descriptor for PreferenceKey.Value)- 8)+ 80);
  return (*(uint64_t (**)(uint64_t))(v0 + 56))(v0 + ((v1 + 72) & ~v1));
}

uint64_t sub_10002EA30(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002EA40(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10002EA48@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;

  v14 = swift_allocObject(&unk_1002E6128, 32, 7);
  *(_QWORD *)(v14 + 16) = a1;
  *(_QWORD *)(v14 + 24) = a2;
  v15 = sub_1000052EC(&qword_1003185D8, (uint64_t (*)(uint64_t))type metadata accessor for CGSize, (uint64_t)&protocol conformance descriptor for CGSize);
  swift_retain(a2);
  sub_10002E094((uint64_t)sub_10002F110, v14, (uint64_t)sub_10002EB40, 0, a3, a4, a5, a7, a6, v15);
  return swift_release(v14);
}

uint64_t sub_10002EB1C(double *a1, uint64_t (*a2)(double, double))
{
  return a2(*a1, a1[1]);
}

void sub_10002EB40(uint64_t a1@<X8>)
{
  uint64_t v2;

  *(double *)a1 = GeometryProxy.size.getter();
  *(_QWORD *)(a1 + 8) = v2;
}

uint64_t sub_10002EB68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t WitnessTable;
  uint64_t v24;
  uint64_t v25;

  v10 = (_QWORD *)swift_allocObject(&unk_1002E6100, 48, 7);
  v10[2] = a3;
  v10[3] = a4;
  v10[4] = a1;
  v10[5] = a2;
  v11 = type metadata accessor for _PreferenceWritingModifier(255, a3, a4);
  v12 = type metadata accessor for ModifiedContent(0, &type metadata for Color, v11);
  swift_retain(a2);
  v22 = &protocol witness table for Color;
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v11);
  v13 = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v12);
  v14 = GeometryReader.init(content:)(sub_10002F104, v10, v12, v13);
  v16 = v15;
  v20 = v14;
  v21 = v15;
  v17 = type metadata accessor for GeometryReader(0, v12, v13);
  swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v17);
  sub_100092E98((uint64_t)&v20, v17, (uint64_t)&v24);
  swift_release(v16);
  v18 = v25;
  v20 = v24;
  v21 = v25;
  sub_1000903EC((uint64_t)&v20, v17, a5);
  return swift_release(v18);
}

uint64_t sub_10002ECBC@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t AssociatedTypeWitness;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  __n128 v23;
  uint64_t WitnessTable;
  uint64_t (*v25)(char *, uint64_t);
  _QWORD v27[2];
  void (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;

  v27[1] = a3;
  v28 = a2;
  v30 = a6;
  AssociatedTypeWitness = swift_getAssociatedTypeWitness(0, a5, a4, &protocol requirements base descriptor for PreferenceKey, &associated type descriptor for PreferenceKey.Value);
  v10 = *(_QWORD *)(AssociatedTypeWitness - 8);
  __chkstk_darwin(AssociatedTypeWitness, v11);
  v13 = (char *)v27 - v12;
  v14 = type metadata accessor for _PreferenceWritingModifier(255, a4, a5);
  v15 = type metadata accessor for ModifiedContent(0, &type metadata for Color, v14);
  v29 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15, v16);
  v19 = (char *)v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17, v20);
  v22 = (char *)v27 - v21;
  v33 = static Color.clear.getter(v23);
  v28(a1);
  View.preference<A>(key:value:)(v19, a4, v13, &type metadata for Color, a4, &protocol witness table for Color, a5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, AssociatedTypeWitness);
  swift_release(v33);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v14);
  v31 = &protocol witness table for Color;
  v32 = WitnessTable;
  swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v15);
  sub_100092E98((uint64_t)v19, v15, (uint64_t)v22);
  v25 = *(uint64_t (**)(char *, uint64_t))(v29 + 8);
  v25(v19, v15);
  sub_1000903EC((uint64_t)v22, v15, v30);
  return v25(v22, v15);
}

uint64_t sub_10002EEA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;

  return sub_10002EB68(*v2, v2[1], *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), a2);
}

uint64_t sub_10002EEB8(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  if ((a1 & 1) != 0)
  {
    v4 = *(_QWORD *)(a4 + 48);
    v10 = a2;
    v11 = a3;
    v12 = v4;
    v13 = 0;
  }
  else
  {
    v10 = a2;
    v11 = a3;
    v12 = 0;
    v13 = 1;
  }
  swift_retain(a3);
  v5 = sub_100003DB8(&qword_100318538);
  v6 = sub_100003DB8(&qword_100318540);
  v7 = sub_1000084FC(&qword_100318548, &qword_100318538, (uint64_t)&protocol conformance descriptor for IDView<A, B>);
  v8 = sub_1000084FC(qword_100318550, &qword_100318540, (uint64_t)&unk_100257790);
  _ConditionalContent<>.init(storage:)(&v10, v5, v6, v7, v8);
  return v14;
}

_QWORD *initializeBufferWithCopyOfBuffer for TryOutMessageEntrySendButton(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  return a1;
}

_QWORD *assignWithCopy for TryOutMessageEntrySendButton(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain(v3);
  swift_release(v4);
  return a1;
}

uint64_t assignWithTake for TryOutMessageEntrySendButton(uint64_t a1, _OWORD *a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *a2;
  swift_release(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for TryOutMessageEntrySendButton(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TryOutMessageEntrySendButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t sub_10002F0AC(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 16);
  return swift_getOpaqueTypeConformance2(&v3, &unk_1002954E4, 1);
}

uint64_t sub_10002F0E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10002F104@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10002ECBC(a1, *(void (**)(uint64_t))(v2 + 32), *(_QWORD *)(v2 + 40), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), a2);
}

uint64_t sub_10002F110(double *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(double, double))(v1 + 16))(*a1, a1[1]);
}

uint64_t sub_10002F134(double *a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(double, double, double, double))(v1 + 16))(*a1, a1[1], a1[2], a1[3]);
}

uint64_t sub_10002F15C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t WitnessTable;
  uint64_t v4;

  v1 = type metadata accessor for _PreferenceWritingModifier(255, *a1, a1[1]);
  v2 = type metadata accessor for ModifiedContent(255, &type metadata for Color, v1);
  swift_getWitnessTable(&protocol conformance descriptor for _PreferenceWritingModifier<A>, v1);
  WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v2);
  v4 = type metadata accessor for GeometryReader(255, v2, WitnessTable);
  return swift_getWitnessTable(&protocol conformance descriptor for GeometryReader<A>, v4);
}

uint64_t destroy for BuiltInContentView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_release(a1[5]);
}

uint64_t initializeWithCopy for BuiltInContentView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v7;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = a2[2];
  v5 = a2[5];
  v7 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 40) = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v7);
  swift_retain(v5);
  return a1;
}

uint64_t *assignWithCopy for BuiltInContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v11 = a2[4];
  v10 = a2[5];
  v12 = a1[5];
  a1[4] = v11;
  a1[5] = v10;
  swift_retain(v10);
  swift_release(v12);
  return a1;
}

_QWORD *assignWithTake for BuiltInContentView(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(a1[3]);
  v5 = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  v6 = a1[5];
  a1[5] = v5;
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for BuiltInContentView(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltInContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BuiltInContentView()
{
  return &type metadata for BuiltInContentView;
}

uint64_t sub_10002F448(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100295534, 1);
}

void sub_10002F458()
{
  __asm { BR              X10 }
}

uint64_t sub_10002F4B0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  char v23;
  _BYTE v24[320];
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  char v30;
  char v31;
  char v32;

  v2 = *v0;
  v3 = type metadata accessor for EmergencyModel();
  v4 = sub_1000052EC(&qword_100318690, (uint64_t (*)(uint64_t))type metadata accessor for EmergencyModel, (uint64_t)&unk_10024D2FC);
  swift_retain(v2);
  swift_retain(v1);
  v5 = EnvironmentObject.init()(v3, v4);
  *(_QWORD *)&v25 = v5;
  *((_QWORD *)&v25 + 1) = v6;
  *(_QWORD *)&v26 = v2;
  *((_QWORD *)&v26 + 1) = v1;
  v27 = 0u;
  v28 = 0u;
  v29 = 0u;
  v30 = 0;
  v7 = sub_100030DAC();
  v8 = sub_100030DF0();
  swift_retain(v2);
  swift_retain(v1);
  swift_retain(v5);
  _ConditionalContent<>.init(storage:)(&v25, &type metadata for BuiltInNotifyContactsConsentContentView, &type metadata for BuiltInRoadsideForkContentView, v7, v8);
  v25 = v18;
  v26 = v19;
  v27 = v20;
  v28 = v21;
  v29 = v22;
  v30 = v23;
  v31 = 0;
  v9 = sub_100003DB8(&qword_100318648);
  v10 = sub_100003DB8(&qword_100318668);
  v11 = sub_100030D88();
  v12 = sub_100030E34();
  _ConditionalContent<>.init(storage:)(&v25, v9, v10, v11, v12);
  sub_10000B234((uint64_t)v24, (uint64_t)&v25, &qword_100318628);
  v32 = 0;
  v13 = sub_100003DB8(&qword_100318628);
  v14 = sub_100003DB8(&qword_100318630);
  v15 = sub_100030D64();
  v16 = sub_100030EE0();
  _ConditionalContent<>.init(storage:)(&v25, v13, v14, v15, v16);
  sub_100007FF0((uint64_t)v24, &qword_100318628);
  swift_release(v1);
  swift_release(v2);
  return swift_release(v5);
}

uint64_t sub_100030854()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  _BYTE v22[16];

  v1 = v0;
  v2 = *v0;
  v20 = *(_OWORD *)(v0 + 1);
  v21 = v0[3];
  v3 = v20;
  v4 = sub_1000AE9AC((_QWORD *)v20, 0, 4);
  if ((v4 & 1) == 0)
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v5 = type metadata accessor for Logger(0);
    sub_10000D744(v5, (uint64_t)qword_10033FEC8);
    sub_10000B458((uint64_t)&v20 + 8, (uint64_t)v22, &qword_100318260);
    v6 = v0[5];
    swift_retain(v2);
    swift_retain(v20);
    sub_100030F08((uint64_t)v22);
    swift_retain(v6);
    swift_retain(v2);
    swift_retain(v20);
    sub_100030F08((uint64_t)v22);
    swift_retain(v6);
    swift_retain(v2);
    swift_retain(v20);
    sub_100030F08((uint64_t)v22);
    swift_retain(v6);
    swift_retain(v2);
    swift_retain(v20);
    sub_100030F08((uint64_t)v22);
    swift_retain(v6);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = swift_slowAlloc(22, -1);
      v17 = swift_slowAlloc(64, -1);
      v19 = v17;
      *(_DWORD *)v10 = 136446467;
      v11 = sub_1000AD18C();
      v13 = v12;
      v18 = sub_100172BEC(v11, v12, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4, v10 + 12);
      swift_release(v3);
      swift_release(v2);
      swift_bridgeObjectRelease(v13);
      sub_100031198((uint64_t)v22);
      swift_release(v3);
      swift_release(v2);
      swift_release(v6);
      sub_100031198((uint64_t)v22);
      swift_release(v6);
      *(_WORD *)(v10 + 12) = 2081;
      v15 = *(_QWORD *)(v3 + 16);
      v14 = *(_QWORD *)(v3 + 24);
      swift_bridgeObjectRetain(v14);
      v18 = sub_100172BEC(v15, v14, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 14, v10 + 22);
      swift_release(v3);
      swift_release(v2);
      swift_bridgeObjectRelease(v14);
      sub_100031198((uint64_t)v22);
      swift_release(v3);
      swift_release(v2);
      swift_release(v6);
      sub_100031198((uint64_t)v22);
      swift_release(v6);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "[%{public}s] QuestionnaireBodyView: failed to record answer for %{private}s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy(v17, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v10, -1, -1);

    }
    else
    {
      swift_release(v20);
      swift_release(v2);
      sub_100031198((uint64_t)v22);
      swift_release(v20);
      swift_release(v2);
      swift_release(v6);
      sub_100031198((uint64_t)v22);
      swift_release(v20);
      swift_release(v2);
      swift_release(v6);
      sub_100031198((uint64_t)v22);
      swift_release(v20);
      swift_release(v2);
      swift_release(v6);
      sub_100031198((uint64_t)v22);

      v4 = swift_release(v6);
    }
  }
  return ((uint64_t (*)(uint64_t))v1[4])(v4);
}

unint64_t sub_100030BFC()
{
  unint64_t result;

  result = qword_1003185E8;
  if (!qword_1003185E8)
  {
    result = swift_getWitnessTable(&unk_10025712C, &type metadata for BuiltInEnterRoadsidePhoneNumberContentView);
    atomic_store(result, (unint64_t *)&qword_1003185E8);
  }
  return result;
}

uint64_t sub_100030C40(uint64_t result)
{
  *(_BYTE *)(result + 145) = 1;
  return result;
}

uint64_t sub_100030C4C()
{
  return sub_100008140(&qword_100318608, &qword_1003185F8, (void (*)(void))sub_100030C70, (void (*)(void))sub_100030CB4);
}

unint64_t sub_100030C70()
{
  unint64_t result;

  result = qword_100318610;
  if (!qword_100318610)
  {
    result = swift_getWitnessTable(&unk_100256D8C, &type metadata for BuiltInSelectRoadsideProviderContentView);
    atomic_store(result, (unint64_t *)&qword_100318610);
  }
  return result;
}

unint64_t sub_100030CB4()
{
  unint64_t result;

  result = qword_100318618;
  if (!qword_100318618)
  {
    result = swift_getWitnessTable(&unk_10025633C, &type metadata for BuiltInSelectRoadsidePhoneNumberContentView);
    atomic_store(result, (unint64_t *)&qword_100318618);
  }
  return result;
}

unint64_t sub_100030CF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100318620;
  if (!qword_100318620)
  {
    v1 = sub_100007FAC(&qword_100318600);
    sub_100030BFC();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100318620);
  }
  return result;
}

uint64_t sub_100030D64()
{
  return sub_100008140(&qword_100318638, &qword_100318628, (void (*)(void))sub_100030D88, (void (*)(void))sub_100030E34);
}

uint64_t sub_100030D88()
{
  return sub_100008140(&qword_100318640, &qword_100318648, (void (*)(void))sub_100030DAC, (void (*)(void))sub_100030DF0);
}

unint64_t sub_100030DAC()
{
  unint64_t result;

  result = qword_100318650;
  if (!qword_100318650)
  {
    result = swift_getWitnessTable(&unk_10024FDB8, &type metadata for BuiltInNotifyContactsConsentContentView);
    atomic_store(result, (unint64_t *)&qword_100318650);
  }
  return result;
}

unint64_t sub_100030DF0()
{
  unint64_t result;

  result = qword_100318658;
  if (!qword_100318658)
  {
    result = swift_getWitnessTable(&unk_10024F6D0, &type metadata for BuiltInRoadsideForkContentView);
    atomic_store(result, (unint64_t *)&qword_100318658);
  }
  return result;
}

uint64_t sub_100030E34()
{
  return sub_100008140(&qword_100318660, &qword_100318668, (void (*)(void))sub_100030E58, (void (*)(void))sub_100030E9C);
}

unint64_t sub_100030E58()
{
  unint64_t result;

  result = qword_100318670;
  if (!qword_100318670)
  {
    result = swift_getWitnessTable(&unk_10025C5F8, &type metadata for BuiltInRoadsideForkFailedContentView);
    atomic_store(result, (unint64_t *)&qword_100318670);
  }
  return result;
}

unint64_t sub_100030E9C()
{
  unint64_t result;

  result = qword_100318678;
  if (!qword_100318678)
  {
    result = swift_getWitnessTable(&unk_100252F10, &type metadata for BuiltInEmergencyForkContentView);
    atomic_store(result, (unint64_t *)&qword_100318678);
  }
  return result;
}

uint64_t sub_100030EE0()
{
  return sub_100008140(&qword_100318680, &qword_100318630, (void (*)(void))sub_100030C4C, (void (*)(void))sub_100030CF8);
}

uint64_t sub_100030F08(uint64_t a1)
{
  swift_bridgeObjectRetain(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t *sub_100030F30(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[9];
  v8 = a1[11];
  v9 = a1[12];
  v10 = a1[14];
  v12 = a1[16];
  swift_retain(a1[17]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_bridgeObjectRetain(v8);
  swift_retain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v12);
  return a1;
}

uint64_t *sub_100030FF0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[11];
  v8 = a1[12];
  v9 = a1[14];
  v10 = a1[16];
  v12 = a1[17];
  swift_release(a1[9]);
  swift_release(v6);
  swift_release(v5);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  swift_bridgeObjectRelease(v7);
  swift_release(v8);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v10);
  swift_release(v12);
  return a1;
}

uint64_t sub_1000310B4(uint64_t result)
{
  *(_BYTE *)(result + 145) = 0;
  return result;
}

uint64_t sub_1000310C8()
{
  return sub_100030854();
}

uint64_t sub_1000310E8(uint64_t *a1, uint64_t a2)
{
  initializeWithCopy for BuiltInRoadsideForkFailedContentView(a2, a1);
  return a2;
}

_QWORD *sub_100031124(_QWORD *a1)
{
  destroy for BuiltInRoadsideForkFailedContentView(a1);
  return a1;
}

uint64_t sub_10003115C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100031198(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t sub_1000311C0()
{
  return sub_100008140(&qword_100318698, &qword_1003186A0, (void (*)(void))sub_100030D64, (void (*)(void))sub_100030EE0);
}

uint64_t destroy for ExplorerAppsListSectionView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  return swift_release(a1[5]);
}

uint64_t *initializeWithCopy for ExplorerAppsListSectionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2[2];
  v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  v7 = a2[5];
  a1[4] = a2[4];
  a1[5] = v7;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t *assignWithCopy for ExplorerAppsListSectionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v9 = a2[4];
  v8 = a2[5];
  v10 = a1[5];
  a1[4] = v9;
  a1[5] = v8;
  swift_retain(v8);
  swift_release(v10);
  return a1;
}

uint64_t *assignWithTake for ExplorerAppsListSectionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  a1[3] = a2[3];
  v7 = a1[5];
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExplorerAppsListSectionView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 48))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExplorerAppsListSectionView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 48) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExplorerAppsListSectionView()
{
  return &type metadata for ExplorerAppsListSectionView;
}

uint64_t sub_100031400(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002955C0, 1);
}

uint64_t sub_100031410@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t KeyPath;
  __int128 v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;

  v3 = sub_100031584();
  if (*(_QWORD *)(v3 + 16))
  {
    v15 = v3;
    KeyPath = swift_getKeyPath(&unk_10024E8B0);
    v5 = *v1;
    v16 = v1[1];
    v17 = v5;
    v6 = *((_QWORD *)v1 + 5);
    v7 = (_OWORD *)swift_allocObject(&unk_1002E63F0, 64, 7);
    v8 = v1[1];
    v7[1] = *v1;
    v7[2] = v8;
    v7[3] = v1[2];
    sub_100031A88(&v17);
    sub_100031A88(&v16);
    swift_retain(v6);
    v9 = sub_100003DB8(&qword_1003186C0);
    v10 = sub_1000084FC(&qword_1003186C8, &qword_1003186C0, (uint64_t)&protocol conformance descriptor for [A]);
    v11 = sub_100031AB0();
    ForEach<>.init(_:id:content:)(&v15, KeyPath, sub_100031A80, v7, v9, &type metadata for _ExplorerAppsListSectionView, v10, &protocol witness table for String, v11);
    v12 = sub_100003DB8(&qword_1003186D8);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(a1, 0, 1, v12);
  }
  else
  {
    swift_bridgeObjectRelease(v3);
    v14 = sub_100003DB8(&qword_1003186D8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a1, 1, 1, v14);
  }
}

uint64_t sub_100031584()
{
  uint64_t *v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t *v3;
  uint64_t v4;
  Swift::Int v5;
  char v6;
  char v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  Swift::String v18;
  Swift::String_optional v19;
  Swift::String v20;
  Swift::String v21;
  id v22;
  Swift::String v23;
  Swift::String_optional v24;
  Swift::String v25;
  Swift::String v26;
  _QWORD *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t result;
  uint64_t v38;
  uint64_t (*v39)();
  unint64_t *v40;
  uint64_t v41;
  Swift::String v42;
  Swift::String v43;

  v2 = (_QWORD *)v0[2];
  v1 = v0[3];
  if (v2)
  {
    v3 = v0;
    if (v2[8] && (v4 = v2[10], *(_QWORD *)(v4 + 16)))
    {
      v5 = sub_1002096C4((uint64_t)&off_1002E04E0);
      v6 = sub_1001BF5E8(v4, v5);
      swift_bridgeObjectRelease(v5);
      v7 = v6 ^ 1;
    }
    else
    {
      v7 = 0;
    }
    v8 = *v3;
    if (*v3)
    {
      v10 = *(_QWORD *)(v8 + 72);
      v9 = *(_QWORD *)(v8 + 80);
      if (v9)
      {
        swift_bridgeObjectRetain(*(_QWORD *)(v8 + 80));
        v11 = &off_1002E0530;
      }
      else
      {
        sub_1000EC4FC((uint64_t)&off_1002E0530);
        v11 = &off_1002E0508;
      }
      v12 = v3[5];
      swift_retain(v12);
      swift_retain(v2);
      swift_retain(v8);
      v13 = sub_1000339F0((uint64_t)v11, v2, v1, v7 & 1);
      swift_bridgeObjectRelease(v11);
      swift_release(v12);
      swift_release(v2);
      swift_release(v8);
      if (v9)
      {
        v14 = sub_100003DB8(&qword_1003186E8);
        v15 = swift_allocObject(v14, 72, 7);
        *(_OWORD *)(v15 + 16) = xmmword_10024E070;
        v16 = (void *)objc_opt_self(NSBundle);
        v17 = objc_msgSend(v16, "mainBundle");
        v42._countAndFlagsBits = 0xD00000000000003DLL;
        v42._object = (void *)0x80000001002627E0;
        v18._countAndFlagsBits = 0x736567617373654DLL;
        v18._object = (void *)0xE800000000000000;
        v19.value._countAndFlagsBits = 0x5072656972726143;
        v19.value._object = (void *)0xED00006E6F656769;
        v20._countAndFlagsBits = 0;
        v20._object = (void *)0xE000000000000000;
        v21 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, v19, (NSBundle)v17, v20, v42);

        v22 = objc_msgSend(v16, "mainBundle");
        v43._countAndFlagsBits = 0xD000000000000043;
        v43._object = (void *)0x8000000100262840;
        v23._object = (void *)0x8000000100262820;
        v23._countAndFlagsBits = 0xD000000000000019;
        v24.value._countAndFlagsBits = 0x5072656972726143;
        v24.value._object = (void *)0xED00006E6F656769;
        v25._countAndFlagsBits = 0;
        v25._object = (void *)0xE000000000000000;
        v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, (NSBundle)v22, v25, v43);

        *(_BYTE *)(v15 + 32) = 4;
        *(Swift::String *)(v15 + 40) = v21;
        *(Swift::String *)(v15 + 56) = v26;
        swift_bridgeObjectRetain(v9);
        v27 = sub_10017195C(0, 1, 1, _swiftEmptyArrayStorage);
        v29 = v27[2];
        v28 = v27[3];
        if (v29 >= v28 >> 1)
          v27 = sub_10017195C((_QWORD *)(v28 > 1), v29 + 1, 1, v27);
        v27[2] = v29 + 1;
        v30 = &v27[5 * v29];
        v30[4] = v10;
        v30[5] = v9;
        v30[7] = 0;
        v30[8] = 0;
        v30[6] = v15;
        v31 = sub_10001C6C0((uint64_t)v13, v10, v9);
        v33 = v32;
        swift_bridgeObjectRelease(v9);
        if (v13[2])
          goto LABEL_14;
      }
      else
      {
        v31 = 0;
        v33 = 0;
        v27 = _swiftEmptyArrayStorage;
        if (v13[2])
        {
LABEL_14:
          if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0)
            v27 = sub_10017195C(0, v27[2] + 1, 1, v27);
          v35 = v27[2];
          v34 = v27[3];
          if (v35 >= v34 >> 1)
            v27 = sub_10017195C((_QWORD *)(v34 > 1), v35 + 1, 1, v27);
          v27[2] = v35 + 1;
          v36 = &v27[5 * v35];
          v36[4] = 0xD000000000000024;
          v36[5] = 0x80000001002627B0;
          v36[6] = v13;
          v36[7] = v31;
          v36[8] = v33;
          return (uint64_t)v27;
        }
      }
      swift_bridgeObjectRelease(v13);
      swift_bridgeObjectRelease(v33);
      return (uint64_t)v27;
    }
    v1 = v3[1];
    v38 = type metadata accessor for ConnectivityModel();
    v39 = type metadata accessor for ConnectivityModel;
    v40 = &qword_100316B00;
  }
  else
  {
    v38 = type metadata accessor for StewieModel();
    v39 = type metadata accessor for StewieModel;
    v40 = &qword_1003186E0;
  }
  v41 = sub_1000052EC(v40, (uint64_t (*)(uint64_t))v39, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v1, v38, v41);
  __break(1u);
  return result;
}

uint64_t sub_1000319BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a1;
  v4 = a1[1];
  v6 = a1[2];
  v5 = a1[3];
  v7 = a1[4];
  v8 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  *a3 = v3;
  a3[1] = v4;
  a3[2] = v6;
  a3[3] = v5;
  a3[4] = v7;
  a3[5] = v8;
  a3[6] = v9;
  swift_bridgeObjectRetain(v7);
  swift_retain(v9);
  swift_bridgeObjectRetain(v4);
  return swift_bridgeObjectRetain(v6);
}

uint64_t sub_100031A14@<X0>(uint64_t a1@<X8>)
{
  return sub_100031410(a1);
}

uint64_t sub_100031A4C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100031A80@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  return sub_1000319BC(a1, v2 + 16, a2);
}

_QWORD *sub_100031A88(_QWORD *a1)
{
  swift_retain(*a1);
  return a1;
}

unint64_t sub_100031AB0()
{
  unint64_t result;

  result = qword_1003186D0;
  if (!qword_1003186D0)
  {
    result = swift_getWitnessTable(&unk_10024E904, &type metadata for _ExplorerAppsListSectionView);
    atomic_store(result, (unint64_t *)&qword_1003186D0);
  }
  return result;
}

uint64_t sub_100031AF4(__int128 *a1)
{
  __int128 v2;
  uint64_t v3;
  uint64_t KeyPath;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  _BYTE v19[16];
  uint64_t v20;

  v2 = a1[1];
  v15 = *a1;
  v16 = v2;
  v17 = *((_QWORD *)a1 + 4);
  v3 = v2;
  v20 = v2;
  v14 = v2;
  KeyPath = swift_getKeyPath(&unk_10024E958);
  v18 = *a1;
  sub_10000B458((uint64_t)&v16 + 8, (uint64_t)v19, &qword_100318260);
  v5 = *((_QWORD *)a1 + 6);
  v6 = swift_allocObject(&unk_1002E6570, 72, 7);
  v7 = a1[1];
  *(_OWORD *)(v6 + 16) = *a1;
  *(_OWORD *)(v6 + 32) = v7;
  *(_OWORD *)(v6 + 48) = a1[2];
  *(_QWORD *)(v6 + 64) = *((_QWORD *)a1 + 6);
  swift_bridgeObjectRetain(v3);
  sub_100034218(&v20);
  sub_100030F08((uint64_t)&v18);
  sub_100030F08((uint64_t)v19);
  swift_retain(v5);
  v8 = sub_100003DB8(&qword_100318708);
  v9 = sub_100003DB8(&qword_100318710);
  v10 = sub_1000084FC(&qword_100318718, &qword_100318708, (uint64_t)&protocol conformance descriptor for [A]);
  v11 = sub_100034288();
  v12 = sub_1000342CC();
  return ForEach<>.init(_:id:content:)(&v14, KeyPath, sub_100034280, v6, v8, v9, v10, v11, v12);
}

uint64_t sub_100031C58@<X0>(unsigned __int8 *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  uint64_t OpaqueTypeConformance2;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  _BYTE v68[16];
  uint64_t v69;
  __int128 v70;
  _OWORD v71[2];
  __int128 v72;
  __int128 v73;

  v53 = a3;
  v54 = sub_100003DB8(&qword_100318730);
  v55 = *(_QWORD *)(v54 - 8);
  __chkstk_darwin(v54, v5);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100003DB8(&qword_100318748);
  v58 = *(_QWORD *)(v59 - 8);
  __chkstk_darwin(v59, v8);
  v57 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_100318710);
  __chkstk_darwin(v10, v11);
  v56 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v71[0] = *(_OWORD *)(a1 + 1);
  v15 = *((_QWORD *)a1 + 1);
  v14 = *((_QWORD *)a1 + 2);
  *(_QWORD *)((char *)v71 + 15) = v14;
  v52 = *((_QWORD *)a1 + 3);
  v51 = *((_QWORD *)a1 + 4);
  v72 = *(_OWORD *)((char *)v71 + 7);
  v60 = *(_OWORD *)((char *)v71 + 7);
  v16 = a2[1];
  v65 = *a2;
  v66 = v16;
  v67 = *((_QWORD *)a2 + 4);
  v70 = v65;
  v17 = v16;
  v69 = v16;
  sub_10000B458((uint64_t)&v66 + 8, (uint64_t)v68, &qword_100318260);
  v18 = *((_QWORD *)a2 + 6);
  v73 = *(_OWORD *)(a1 + 24);
  v19 = swift_allocObject(&unk_1002E6598, 112, 7);
  v20 = a2[1];
  *(_OWORD *)(v19 + 16) = *a2;
  *(_OWORD *)(v19 + 32) = v20;
  *(_OWORD *)(v19 + 48) = a2[2];
  *(_QWORD *)(v19 + 64) = *((_QWORD *)a2 + 6);
  *(_BYTE *)(v19 + 72) = v13;
  *(_OWORD *)(v19 + 73) = *(_OWORD *)(a1 + 1);
  *(_QWORD *)(v19 + 88) = *((_QWORD *)a1 + 2);
  *(_OWORD *)(v19 + 96) = *(_OWORD *)(a1 + 24);
  v21 = v72;
  swift_bridgeObjectRetain(*((_QWORD *)&v72 + 1));
  sub_100030F08((uint64_t)&v72);
  sub_100030F08((uint64_t)&v70);
  sub_100034218(&v69);
  sub_100030F08((uint64_t)v68);
  swift_retain(v18);
  sub_100030F08((uint64_t)&v73);
  v22 = sub_10002B3F4();
  Button<>.init<A>(_:action:)(&v60, sub_10003443C, v19, &type metadata for String, v22);
  v23 = *(_QWORD *)(v17 + 16);
  if (v23)
  {
    v24 = v52;
    v25 = (unint64_t *)(v17 + 40 * v23);
    if ((_DWORD)v13 == *((unsigned __int8 *)v25 - 8))
    {
      v26 = *v25;
      v27 = v25[1];
      v29 = v25[2];
      v28 = v25[3];
      v30 = v53;
      if (v21 == __PAIR128__(v27, v26)
        || (v31 = v28,
            v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, *((_QWORD *)&v21 + 1), v26, v27, 0),
            v28 = v31,
            (v32 & 1) != 0))
      {
        if (v73 != __PAIR128__(v28, v29))
          _stringCompareWithSmolCheck(_:_:expecting:)(v73, *((_QWORD *)&v73 + 1), v29, v28, 0);
      }
    }
    else
    {
      v30 = v53;
    }
    sub_100030F08((uint64_t)&v72);
    sub_100030F08((uint64_t)&v73);
    v33 = v51;
  }
  else
  {
    sub_100030F08((uint64_t)&v72);
    sub_100030F08((uint64_t)&v73);
    sub_100030F08((uint64_t)&v72);
    sub_100030F08((uint64_t)&v73);
    v24 = v52;
    v33 = v51;
    sub_100034464(v13, v15, v14, v52, v51);
    sub_100034464(0, 0, 0, 0, 0);
    v30 = v53;
  }
  LOBYTE(v60) = v13;
  *((_QWORD *)&v60 + 1) = v15;
  v61 = v14;
  v62 = v24;
  v63 = v33;
  v64 = v21 & 1;
  v34 = sub_1000084FC(&qword_100318738, &qword_100318730, (uint64_t)&protocol conformance descriptor for Button<A>);
  v35 = sub_1000343AC();
  v36 = v57;
  v37 = v54;
  View.buttonStyle<A>(_:)(&v60, v54, &type metadata for _ExplorerAppButtonStyle, v34, v35);
  sub_100031198((uint64_t)&v72);
  sub_100031198((uint64_t)&v73);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v7, v37);
  v60 = v72;
  v38 = swift_bridgeObjectRetain(*((_QWORD *)&v21 + 1));
  v39 = Text.init<A>(_:)(&v60, &type metadata for String, v22, v38);
  v41 = v40;
  v43 = v42;
  *(_QWORD *)&v60 = v37;
  *((_QWORD *)&v60 + 1) = &type metadata for _ExplorerAppButtonStyle;
  v45 = v44 & 1;
  v61 = v34;
  v62 = v35;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v60, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v47 = (uint64_t)v56;
  v48 = v59;
  View.accessibility(label:)(v39, v41, v45, v43, v59, OpaqueTypeConformance2);
  sub_10002B438(v39, v41, v45);
  v49 = swift_bridgeObjectRelease(v43);
  (*(void (**)(char *, uint64_t, __n128))(v58 + 8))(v36, v48, v49);
  return sub_10000B458(v47, v30, &qword_100318710);
}

uint64_t sub_100032178@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  __n128 v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD v11[2];

  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    v11[0] = *(_QWORD *)(a1 + 24);
    v11[1] = v3;
    v4 = sub_10002B3F4();
    v5 = swift_bridgeObjectRetain(v3);
    result = Text.init<A>(_:)(v11, &type metadata for String, v4, v5);
    v10 = v9 & 1;
  }
  else
  {
    result = 0;
    v7 = 0;
    v10 = 0;
    v8 = 0;
  }
  *a2 = result;
  a2[1] = v7;
  a2[2] = v10;
  a2[3] = v8;
  return result;
}

double sub_1000321F8@<D0>(uint64_t (**a1)()@<X8>)
{
  __int128 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  double result;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _BYTE v13[16];
  uint64_t v14;
  __int128 v15;

  v4 = *((_QWORD *)v1 + 5);
  v3 = *((_QWORD *)v1 + 6);
  v10 = *v1;
  v11 = v1[1];
  v12 = *((_QWORD *)v1 + 4);
  v15 = v10;
  v14 = v11;
  sub_10000B458((uint64_t)&v11 + 8, (uint64_t)v13, &qword_100318260);
  v5 = swift_allocObject(&unk_1002E6520, 72, 7);
  v6 = v1[1];
  *(_OWORD *)(v5 + 16) = *v1;
  *(_OWORD *)(v5 + 32) = v6;
  *(_QWORD *)(v5 + 48) = *((_QWORD *)v1 + 4);
  *(_QWORD *)(v5 + 56) = v4;
  *(_QWORD *)(v5 + 64) = v3;
  v7 = swift_allocObject(&unk_1002E6548, 72, 7);
  v8 = v1[1];
  *(_OWORD *)(v7 + 16) = *v1;
  *(_OWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 48) = *((_QWORD *)v1 + 4);
  *(_QWORD *)(v7 + 56) = v4;
  *(_QWORD *)(v7 + 64) = v3;
  *a1 = sub_100034204;
  a1[1] = (uint64_t (*)())v5;
  a1[2] = (uint64_t (*)())sub_100034210;
  a1[3] = (uint64_t (*)())v7;
  sub_100030F08((uint64_t)&v15);
  sub_100034218(&v14);
  sub_100030F08((uint64_t)v13);
  swift_retain(v3);
  sub_100030F08((uint64_t)&v15);
  sub_100034218(&v14);
  sub_100030F08((uint64_t)v13);
  *(_QWORD *)&result = swift_retain(v3).n128_u64[0];
  return result;
}

uint64_t sub_100032310@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t KeyPath;
  __n128 v22;
  uint64_t v23;
  uint64_t *v24;
  double v25;
  _BYTE *v26;
  _BYTE *v27;
  char **v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  char v32;
  char v33;
  uint64_t v34;
  char v35;
  double v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  _BYTE v57[4];
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char v68;
  char v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;

  v2 = v1;
  v66 = a1;
  v3 = sub_100003DB8(&qword_1003187D0);
  __chkstk_darwin(v3, v4);
  v6 = &v57[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100003DB8(&qword_1003187D8);
  __chkstk_darwin(v7, v8);
  v10 = &v57[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = sub_100003DB8(&qword_1003187E0);
  __chkstk_darwin(v11, v12);
  v14 = &v57[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v65 = sub_100003DB8(&qword_1003187E8);
  v16 = __chkstk_darwin(v65, v15);
  v64 = &v57[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)v6 = static VerticalAlignment.center.getter(v16);
  *((_QWORD *)v6 + 1) = 0x4030000000000000;
  v6[16] = 0;
  v18 = sub_100003DB8(&qword_1003187F0);
  sub_100032714(v2, (uint64_t)&v6[*(int *)(v18 + 44)], 36.0);
  v19 = (void *)objc_opt_self(UIColor);
  v20 = Color.init(uiColor:)(objc_msgSend(v19, "labelColor"));
  KeyPath = swift_getKeyPath(&unk_10024EA40);
  v71 = v20;
  v22 = swift_retain(v20);
  v23 = AnyShapeStyle.init<A>(_:)(&v71, &type metadata for Color, &protocol witness table for Color, v22);
  sub_10000B234((uint64_t)v6, (uint64_t)v10, &qword_1003187D0);
  swift_release(v20);
  v24 = (uint64_t *)&v10[*(int *)(v7 + 36)];
  *v24 = KeyPath;
  v24[1] = v23;
  sub_100007FF0((uint64_t)v6, &qword_1003187D0);
  LOBYTE(v7) = static Edge.Set.all.getter(v25);
  sub_10000B234((uint64_t)v10, (uint64_t)v14, &qword_1003187D8);
  v26 = &v14[*(int *)(v11 + 36)];
  v27 = v14;
  *v26 = v7;
  *(_OWORD *)(v26 + 8) = 0u;
  *(_OWORD *)(v26 + 24) = 0u;
  v26[40] = 1;
  sub_100007FF0((uint64_t)v10, &qword_1003187D8);
  v28 = &selRef_separatorColor;
  if ((*(_BYTE *)(v63 + 40) & 1) != 0)
    v28 = &selRef_clearColor;
  v63 = Color.init(uiColor:)(objc_msgSend(v19, *v28));
  v29 = static Alignment.center.getter(v63);
  v31 = _FrameLayout.init(width:height:alignment:)(&v71, 0x7FF0000000000000, 0, 0x3FE0000000000000, 0, v29, v30);
  v32 = v72;
  v61 = v73;
  v62 = v71;
  v33 = v74;
  v60 = v75;
  v59 = v76;
  v34 = static Edge.Set.leading.getter(v31);
  v58 = v34;
  v35 = static Edge.Set.leading.getter(v34);
  v36 = EdgeInsets.init(_all:)(52.0);
  v38 = v37;
  v40 = v39;
  v42 = v41;
  v70 = v32;
  v69 = v33;
  v68 = 1;
  v67 = 0;
  v43 = static Alignment.bottom.getter();
  v45 = v44;
  v46 = v70;
  v47 = v69;
  v48 = v68;
  v49 = v67;
  v50 = (uint64_t)v27;
  v51 = (uint64_t)v27;
  v52 = v64;
  sub_10000B234(v51, (uint64_t)v64, &qword_1003187E0);
  v53 = &v52[*(int *)(v65 + 36)];
  v54 = v62;
  *(_QWORD *)v53 = v63;
  *((_QWORD *)v53 + 1) = v54;
  v53[16] = v46;
  *((_QWORD *)v53 + 3) = v61;
  v53[32] = v47;
  v55 = v59;
  *((_QWORD *)v53 + 5) = v60;
  *((_QWORD *)v53 + 6) = v55;
  v53[56] = v58;
  *((_OWORD *)v53 + 4) = 0u;
  *((_OWORD *)v53 + 5) = 0u;
  v53[96] = v48;
  v53[104] = v35;
  *((double *)v53 + 14) = v36;
  *((_QWORD *)v53 + 15) = v38;
  *((_QWORD *)v53 + 16) = v40;
  *((_QWORD *)v53 + 17) = v42;
  v53[144] = v49;
  *((_QWORD *)v53 + 19) = v43;
  *((_QWORD *)v53 + 20) = v45;
  sub_100007FF0(v50, &qword_1003187E0);
  return sub_10000B458((uint64_t)v52, v66, &qword_1003187E8);
}

uint64_t sub_100032714@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  id v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  double v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t KeyPath;
  __n128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD v68[6];
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  __int16 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  __int128 v91;

  v76 = a2;
  v77 = sub_100003DB8(&qword_1003187F8);
  __chkstk_darwin(v77, v5);
  v70 = (char *)v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v73 = sub_100003DB8(&qword_100318800);
  __chkstk_darwin(v73, v7);
  v74 = (uint64_t)v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100003DB8(&qword_100318808);
  __chkstk_darwin(v69, v9);
  v10 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Image.ResizingMode(0);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)v68 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100003DB8(&qword_100318810);
  v20 = __chkstk_darwin(v72, v19);
  __chkstk_darwin(v20, v21);
  v23 = (char *)v68 - v22;
  v24 = sub_100003DB8(&qword_100318818);
  v26 = __chkstk_darwin(v24, v25);
  v75 = (uint64_t)v68 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26, v28);
  v30 = (char *)v68 - v29;
  v78 = a1;
  v31 = *(unsigned __int8 *)a1;
  v32 = sub_100034B28(v31);
  if (!v32)
  {
    v68[4] = v10;
    v68[5] = v13;
    v70 = v23;
    __asm { BR              X9 }
  }
  v33 = v32;
  v34 = Image.init(uiImage:)(objc_msgSend(objc_allocWithZone((Class)UIImage), "initWithCGImage:", v32));
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v18, enum case for Image.ResizingMode.stretch(_:), v14);
  v35 = Image.resizable(capInsets:resizingMode:)(v18, v34, 0.0, 0.0, 0.0, 0.0);
  swift_release(v34);
  v36 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v37 = static Alignment.center.getter(v36);
  _FrameLayout.init(width:height:alignment:)(&v87, *(_QWORD *)&a3, 0, *(_QWORD *)&a3, 0, v37, v38);
  v79 = v35;
  v80 = 0;
  v81 = 1;
  v82 = v87;
  LOBYTE(v83) = v88;
  v84 = v89;
  v85 = v90;
  v86 = v91;
  v39 = sub_100003DB8(&qword_100318830);
  v40 = sub_10002B614(&qword_100318828, &qword_100318830, (void (*)(void))sub_100034DFC);
  v41 = (uint64_t)v70;
  View.accessibilityHidden(_:)(1, v39, v40);
  swift_release(v35);
  v42 = v74;
  sub_10000B234(v41, v74, &qword_1003187F8);
  swift_storeEnumTagMultiPayload(v42, v73, 0);
  v43 = sub_100034D58();
  v44 = sub_100034E60();
  _ConditionalContent<>.init(storage:)(v42, v77, v72, v43, v44);

  v45 = sub_100007FF0(v41, &qword_1003187F8);
  v71 = v30;
  v74 = static HorizontalAlignment.leading.getter(v45);
  v46 = sub_100032FEC(v78, (uint64_t)&v79);
  v73 = v79;
  v78 = v80;
  LODWORD(v77) = v81;
  v48 = v82;
  v47 = v83;
  v49 = v84;
  v50 = v85;
  v51 = v86;
  v72 = Image.init(_internalSystemName:)(0x2E6E6F7276656863, 0xEF64726177726F66, v46);
  v52 = static Font.subheadline.getter();
  static Font.Weight.semibold.getter();
  v53 = Font.weight(_:)(v52);
  swift_release(v52);
  KeyPath = swift_getKeyPath(&unk_10024EA70);
  LODWORD(v70) = static HierarchicalShapeStyle.secondary.getter(v55);
  v56 = (uint64_t)v30;
  v57 = v75;
  sub_10000B234(v56, v75, &qword_100318818);
  v58 = v76;
  sub_10000B234(v57, v76, &qword_100318818);
  v59 = (int *)sub_100003DB8(&qword_100318858);
  v60 = v58 + v59[12];
  *(_QWORD *)v60 = v74;
  *(_QWORD *)(v60 + 8) = 0;
  *(_BYTE *)(v60 + 16) = 1;
  v61 = v73;
  v62 = v78;
  *(_QWORD *)(v60 + 24) = v73;
  *(_QWORD *)(v60 + 32) = v62;
  v63 = v77;
  *(_BYTE *)(v60 + 40) = v77;
  *(_QWORD *)(v60 + 48) = v48;
  *(_QWORD *)(v60 + 56) = v47;
  *(_QWORD *)(v60 + 64) = v49;
  *(_BYTE *)(v60 + 72) = v50;
  *(_QWORD *)(v60 + 80) = v51;
  v64 = v58 + v59[16];
  *(_QWORD *)v64 = 0;
  *(_BYTE *)(v64 + 8) = 1;
  v65 = v58 + v59[20];
  v66 = v72;
  *(_QWORD *)v65 = v72;
  *(_QWORD *)(v65 + 8) = KeyPath;
  *(_QWORD *)(v65 + 16) = v53;
  *(_DWORD *)(v65 + 24) = (_DWORD)v70;
  sub_10002B750(v61, (uint64_t)v62, v63);
  swift_bridgeObjectRetain(v48);
  sub_10002B750(v47, v49, v50);
  swift_bridgeObjectRetain(v51);
  swift_retain(v66);
  swift_retain(KeyPath);
  swift_retain(v53);
  sub_100007FF0((uint64_t)v71, &qword_100318818);
  swift_release(v53);
  swift_release(KeyPath);
  swift_release(v66);
  sub_10002B438(v61, (uint64_t)v78, v77);
  swift_bridgeObjectRelease(v48);
  sub_10002B438(v47, v49, v50);
  swift_bridgeObjectRelease(v51);
  return sub_100007FF0(v57, &qword_100318818);
}

double sub_100032FEC@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  double result;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v3 = a1[2];
  v51 = a1[4];
  v52 = a1[3];
  v57 = a1[1];
  v58 = v3;
  v50 = sub_10002B3F4();
  v4 = swift_bridgeObjectRetain(v3);
  v5 = Text.init<A>(_:)(&v57, &type metadata for String, v50, v4);
  v7 = v6;
  v9 = v8;
  v11 = v10 & 1;
  v12 = static Font.callout.getter();
  v13 = Text.font(_:)(v12, v5, v7, v11, v9);
  v15 = v14;
  v17 = v16;
  v19 = v18;
  swift_release(v12);
  v20 = v17 & 1;
  sub_10002B438(v5, v7, v11);
  v21 = swift_bridgeObjectRelease(v9);
  LODWORD(v57) = static HierarchicalShapeStyle.primary.getter(v21);
  v22 = Text.foregroundStyle<A>(_:)(&v57, v13, v15, v20, v19, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v54 = v23;
  v55 = v22;
  v56 = v24;
  v53 = v25 & 1;
  sub_10002B438(v13, v15, v20);
  swift_bridgeObjectRelease(v19);
  v57 = v52;
  v58 = v51;
  v26 = swift_bridgeObjectRetain(v51);
  v27 = Text.init<A>(_:)(&v57, &type metadata for String, v50, v26);
  v29 = v28;
  v31 = v30;
  v33 = v32 & 1;
  v34 = static Font.footnote.getter();
  v35 = Text.font(_:)(v34, v27, v29, v33, v31);
  v37 = v36;
  LOBYTE(v9) = v38;
  v40 = v39;
  swift_release(v34);
  v41 = v9 & 1;
  sub_10002B438(v27, v29, v33);
  v42 = swift_bridgeObjectRelease(v31);
  LODWORD(v57) = static HierarchicalShapeStyle.secondary.getter(v42);
  v43 = Text.foregroundStyle<A>(_:)(&v57, v35, v37, v41, v40, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v45 = v44;
  v47 = v46;
  LOBYTE(v31) = v48 & 1;
  sub_10002B438(v35, v37, v41);
  swift_bridgeObjectRelease(v40);
  LOBYTE(v57) = v53;
  *(_QWORD *)a2 = v55;
  *(_QWORD *)(a2 + 8) = v54;
  *(_BYTE *)(a2 + 16) = v53;
  *(_QWORD *)(a2 + 24) = v56;
  *(_QWORD *)(a2 + 32) = v43;
  *(_QWORD *)(a2 + 40) = v45;
  *(_BYTE *)(a2 + 48) = v31;
  *(_QWORD *)(a2 + 56) = v47;
  sub_10002B750(v55, v54, v53);
  swift_bridgeObjectRetain(v56);
  sub_10002B750(v43, v45, v31);
  swift_bridgeObjectRetain(v47);
  sub_10002B438(v43, v45, v31);
  swift_bridgeObjectRelease(v47);
  sub_10002B438(v55, v54, v57);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v56).n128_u64[0];
  return result;
}

id sub_100033280()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)IFColor), "initWithSystemColor:", 13);
  qword_1003186A8 = (uint64_t)result;
  return result;
}

id sub_1000332B4()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)IFColor), "initWithSystemColor:", 0);
  qword_1003186B0 = (uint64_t)result;
  return result;
}

id sub_1000332E8()
{
  id result;

  result = objc_msgSend(objc_allocWithZone((Class)IFColor), "initWithSystemColor:", 11);
  qword_1003186B8 = (uint64_t)result;
  return result;
}

uint64_t sub_10003331C@<X0>(uint64_t a1@<X8>)
{
  return sub_100032310(a1);
}

uint64_t sub_100033354@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  double v24;
  float v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;

  v29 = a1;
  v4 = type metadata accessor for OpacityTransition(0);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v10);
  v12 = (char *)&v27 - v11;
  v13 = *v2;
  v14 = *((_QWORD *)v2 + 1);
  v15 = *((_QWORD *)v2 + 2);
  v16 = *((_QWORD *)v2 + 4);
  v27 = *((_QWORD *)v2 + 3);
  v28 = v14;
  v17 = v2[40];
  swift_bridgeObjectRetain(v15);
  v18 = swift_bridgeObjectRetain(v16);
  OpacityTransition.init()(v18);
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v9, v12, v4);
  v19 = sub_1000052EC(&qword_100318760, (uint64_t (*)(uint64_t))&type metadata accessor for OpacityTransition, (uint64_t)&protocol conformance descriptor for OpacityTransition);
  v20 = AnyTransition.init<A>(_:)(v9, v4, v19);
  v30 = v17;
  v21 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v12, v4);
  v22 = v30;
  v23 = ButtonStyleConfiguration.isPressed.getter(v21);
  LODWORD(v24) = 1050253722;
  if ((v23 & 1) != 0)
    v25 = 0.3;
  else
    v25 = 0.0;
  result = static Edge.Set.all.getter(v24);
  *(_BYTE *)a2 = v13;
  *(_QWORD *)(a2 + 8) = v28;
  *(_QWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 24) = v27;
  *(_QWORD *)(a2 + 32) = v16;
  *(_BYTE *)(a2 + 40) = v22;
  *(_QWORD *)(a2 + 48) = v20;
  *(_BYTE *)(a2 + 56) = 0;
  *(float *)(a2 + 60) = v25;
  *(_BYTE *)(a2 + 64) = result;
  return result;
}

uint64_t sub_1000334D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100033354(a1, a2);
}

void sub_100033508(char a1)
{
  __asm { BR              X10 }
}

void sub_100033548()
{
  uint64_t v0;
  char v1;
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String_optional v5;
  Swift::String v6;
  Swift::String v7;
  id v8;
  Swift::String v9;
  Swift::String_optional v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;

  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v13._countAndFlagsBits = 0xD000000000000042;
  v13._object = (void *)0x8000000100262A20;
  v4._countAndFlagsBits = 0x636E656772656D45;
  v4._object = (void *)0xED0000534F532079;
  v5.value._countAndFlagsBits = 0x5072656972726143;
  v5.value._object = (void *)0xED00006E6F656769;
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, v5, (NSBundle)v3, v6, v13);

  v8 = objc_msgSend(v2, "mainBundle");
  v9._countAndFlagsBits = 0xD00000000000001ALL;
  v14._countAndFlagsBits = 0xD000000000000048;
  v14._object = (void *)0x8000000100262A90;
  v9._object = (void *)0x8000000100262A70;
  v10.value._countAndFlagsBits = 0x5072656972726143;
  v10.value._object = (void *)0xED00006E6F656769;
  v11._countAndFlagsBits = 0;
  v11._object = (void *)0xE000000000000000;
  v12 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, v10, (NSBundle)v8, v11, v14);

  *(_BYTE *)v0 = v1;
  *(Swift::String *)(v0 + 8) = v7;
  *(Swift::String *)(v0 + 24) = v12;
}

_QWORD *sub_1000339F0(uint64_t a1, _QWORD *a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  Swift::UInt v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  Swift::Int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *result;
  uint64_t v23;
  uint64_t v24;
  _QWORD v27[9];

  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
    return _swiftEmptyArrayStorage;
  v7 = a1 + 32;
  swift_bridgeObjectRetain(a1);
  v8 = 0;
  while (1)
  {
    v9 = *(unsigned __int8 *)(v7 + v8);
    if ((a4 & 1) == 0)
      break;
    if (!a2)
      goto LABEL_25;
    if (a2[8])
    {
      v10 = a2[10];
      if (*(_QWORD *)(v10 + 16))
      {
        Hasher.init(_seed:)(v27, *(_QWORD *)(v10 + 40));
        Hasher._combine(_:)(v9);
        v11 = Hasher._finalize()();
        v12 = -1 << *(_BYTE *)(v10 + 32);
        v13 = v11 & ~v12;
        if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
        {
          v14 = *(_QWORD *)(v10 + 48);
          if (*(unsigned __int8 *)(v14 + v13) == (_DWORD)v9)
            goto LABEL_22;
          v15 = ~v12;
          while (1)
          {
            v13 = (v13 + 1) & v15;
            if (((*(_QWORD *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) == 0)
              break;
            if (*(unsigned __int8 *)(v14 + v13) == (_DWORD)v9)
              goto LABEL_22;
          }
        }
      }
    }
LABEL_3:
    if (++v8 == v4)
    {
      swift_bridgeObjectRelease(a1);
      return _swiftEmptyArrayStorage;
    }
  }
  if (a2)
  {
    if (a2[8])
    {
      v16 = a2[13];
      if (*(_QWORD *)(v16 + 16))
      {
        Hasher.init(_seed:)(v27, *(_QWORD *)(v16 + 40));
        Hasher._combine(_:)(v9);
        v17 = Hasher._finalize()();
        v18 = -1 << *(_BYTE *)(v16 + 32);
        v19 = v17 & ~v18;
        if (((*(_QWORD *)(v16 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
        {
          v20 = *(_QWORD *)(v16 + 48);
          if (*(unsigned __int8 *)(v20 + v19) == (_DWORD)v9)
LABEL_22:
            __asm { BR              X9 }
          v21 = ~v18;
          while (1)
          {
            v19 = (v19 + 1) & v21;
            if (((*(_QWORD *)(v16 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) == 0)
              break;
            if (*(unsigned __int8 *)(v20 + v19) == (_DWORD)v9)
              goto LABEL_22;
          }
        }
      }
    }
    goto LABEL_3;
  }
LABEL_25:
  v23 = type metadata accessor for StewieModel();
  v24 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
  result = (_QWORD *)EnvironmentObject.error()(0, a3, v23, v24);
  __break(1u);
  return result;
}

uint64_t destroy for _ExplorerAppsListSectionView(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  swift_bridgeObjectRelease(a1[4]);
  return swift_release(a1[6]);
}

uint64_t initializeWithCopy for _ExplorerAppsListSectionView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v5 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v4;
  v6 = *(_QWORD *)(a2 + 48);
  v8 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 48) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v8);
  swift_retain(v6);
  return a1;
}

_QWORD *assignWithCopy for _ExplorerAppsListSectionView(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  v11 = a2[5];
  v10 = a2[6];
  v12 = a1[6];
  a1[5] = v11;
  a1[6] = v10;
  swift_retain(v10);
  swift_release(v12);
  return a1;
}

__n128 initializeWithTake for TransitionAlertModel.Alert(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

_QWORD *assignWithTake for _ExplorerAppsListSectionView(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  a1[3] = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRelease(a1[4]);
  v5 = *(_QWORD *)(a2 + 48);
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  v6 = a1[6];
  a1[6] = v5;
  swift_release(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TransitionAlertModel.Alert(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TransitionAlertModel.Alert(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ExplorerAppsListSectionView()
{
  return &type metadata for _ExplorerAppsListSectionView;
}

uint64_t destroy for ExplorerAppsListSectionView.SectionDescription(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[2]);
  return swift_bridgeObjectRelease(a1[4]);
}

_QWORD *initializeWithCopy for ExplorerAppsListSectionView.SectionDescription(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v5 = a2[2];
  v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  v6 = a2[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

_QWORD *assignWithCopy for ExplorerAppsListSectionView.SectionDescription(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *a1 = *a2;
  v4 = a2[1];
  v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for ExplorerAppsListSectionView.SectionDescription(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease(a1[1]);
  v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = a1[4];
  a1[3] = *(_QWORD *)(a2 + 24);
  a1[4] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExplorerAppsListSectionView.SectionDescription(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExplorerAppsListSectionView.SectionDescription(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExplorerAppsListSectionView.SectionDescription()
{
  return &type metadata for ExplorerAppsListSectionView.SectionDescription;
}

uint64_t sub_100034134()
{
  return sub_10003418C(&qword_1003186F0, &qword_1003186F8, (void (*)(void))sub_100034168, (uint64_t)&protocol conformance descriptor for <A> A?);
}

uint64_t sub_100034168()
{
  return sub_10003418C(&qword_100318700, &qword_1003186D8, (void (*)(void))sub_100031AB0, (uint64_t)&protocol conformance descriptor for <> ForEach<A, B, C>);
}

uint64_t sub_10003418C(unint64_t *a1, uint64_t *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100007FAC(a2);
    a3();
    result = swift_getWitnessTable(a4, v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000341F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_10029560C, 1);
}

uint64_t sub_100034204()
{
  uint64_t v0;

  return sub_100031AF4((__int128 *)(v0 + 16));
}

uint64_t sub_100034210@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return sub_100032178(v1 + 16, a1);
}

_QWORD *sub_100034218(_QWORD *a1)
{
  swift_bridgeObjectRetain(*a1);
  return a1;
}

uint64_t sub_100034244()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100034280@<X0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100031C58(a1, (__int128 *)(v2 + 16), a2);
}

unint64_t sub_100034288()
{
  unint64_t result;

  result = qword_100318720;
  if (!qword_100318720)
  {
    result = swift_getWitnessTable(&unk_100252220, &type metadata for StewieAppId);
    atomic_store(result, (unint64_t *)&qword_100318720);
  }
  return result;
}

unint64_t sub_1000342CC()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100318728;
  if (!qword_100318728)
  {
    v1 = sub_100007FAC(&qword_100318710);
    v2[0] = sub_100007FAC(&qword_100318730);
    v2[1] = &type metadata for _ExplorerAppButtonStyle;
    v2[2] = sub_1000084FC(&qword_100318738, &qword_100318730, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_1000343AC();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_1000052EC(&qword_100316C10, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100318728);
  }
  return result;
}

unint64_t sub_1000343AC()
{
  unint64_t result;

  result = qword_100318740;
  if (!qword_100318740)
  {
    result = swift_getWitnessTable("Q}\t", &type metadata for _ExplorerAppButtonStyle);
    atomic_store(result, (unint64_t *)&qword_100318740);
  }
  return result;
}

uint64_t sub_1000343F0()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_release(v0[8]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[13]);
  return swift_deallocObject(v0, 112, 7);
}

uint64_t sub_10003443C()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 56))(*(unsigned __int8 *)(v0 + 72));
}

uint64_t sub_100034464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease(a3);
    return swift_bridgeObjectRelease(a5);
  }
  return result;
}

ValueMetadata *type metadata accessor for _ExplorerAppButtonStyle()
{
  return &type metadata for _ExplorerAppButtonStyle;
}

uint64_t sub_1000344BC()
{
  return sub_1000084FC(&qword_100318750, &qword_100318758, (uint64_t)&unk_100257740);
}

uint64_t sub_1000344E8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100295658, 1);
}

uint64_t destroy for RoadsideAssistanceProvider(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 32));
}

uint64_t _s8SOSBuddy23_ExplorerAppButtonStyleVwcp_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t _s8SOSBuddy23_ExplorerAppButtonStyleVwca_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t _s8SOSBuddy23_ExplorerAppButtonStyleVwta_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  return a1;
}

uint64_t _s8SOSBuddy23_ExplorerAppButtonStyleVwet_0(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 41))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_100034684(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 40) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 41) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 41) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for _ExplorerAppButtonLabelView()
{
  return &type metadata for _ExplorerAppButtonLabelView;
}

unint64_t sub_1000346E4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100318768;
  if (!qword_100318768)
  {
    v1 = sub_100007FAC(&qword_100318770);
    sub_100034768();
    sub_1000084FC(&qword_1003187C0, &qword_1003187C8, (uint64_t)&protocol conformance descriptor for _BackgroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100318768);
  }
  return result;
}

unint64_t sub_100034768()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100318778;
  if (!qword_100318778)
  {
    v1 = sub_100007FAC(&qword_100318780);
    sub_1000347EC();
    sub_1000084FC(&qword_1003187B0, &qword_1003187B8, (uint64_t)&protocol conformance descriptor for _ContentShapeModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100318778);
  }
  return result;
}

unint64_t sub_1000347EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100318788;
  if (!qword_100318788)
  {
    v1 = sub_100007FAC(&qword_100318790);
    sub_100034870();
    sub_1000084FC(&qword_1003187A0, &qword_1003187A8, (uint64_t)&protocol conformance descriptor for _TraitWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100318788);
  }
  return result;
}

unint64_t sub_100034870()
{
  unint64_t result;

  result = qword_100318798;
  if (!qword_100318798)
  {
    result = swift_getWitnessTable(&unk_10024E9EC, &type metadata for _ExplorerAppButtonLabelView);
    atomic_store(result, (unint64_t *)&qword_100318798);
  }
  return result;
}

uint64_t sub_1000348B4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100295680, 1);
}

id sub_1000348CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  NSString v13;
  __n128 v14;
  NSURL *v15;
  void *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  Class isa;
  uint64_t v22;
  Class v23;
  id v24;
  id v25;
  uint64_t v27;

  v7 = sub_100003DB8(&qword_100317D60);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for URL(0);
  v12 = *(_QWORD *)(v11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
  swift_bridgeObjectRetain(a2);
  v13 = String._bridgeToObjectiveC()();
  v14 = swift_bridgeObjectRelease(a2);
  v16 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v12 + 48))(v10, 1, v11, v14) != 1)
  {
    URL._bridgeToObjectiveC()(v15);
    v16 = v17;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  v18 = objc_msgSend(objc_allocWithZone((Class)IFSymbol), "initWithSymbolName:bundleURL:", v13, v16);

  v19 = objc_msgSend(objc_allocWithZone((Class)IFGraphicSymbolDescriptor), "init");
  objc_msgSend(v19, "setSize:", 32.0, 32.0);
  v20 = sub_1000EC968(a3);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v19, "setSymbolColors:", isa, swift_bridgeObjectRelease(v20).n128_f64[0]);

  v22 = sub_1000EC968(a4);
  v23 = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v19, "setEnclosureColors:", v23, swift_bridgeObjectRelease(v22).n128_f64[0]);

  objc_msgSend(v19, "setRenderingMode:", 1);
  objc_msgSend(v19, "setShape:", 1);
  objc_msgSend(v19, "setAppearance:", 0);
  v24 = objc_msgSend(v18, "imageForGraphicSymbolDescriptor:", v19);
  v25 = objc_msgSend(v24, "CGImage");

  return v25;
}

id sub_100034B28(unsigned __int8 a1)
{
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t inited;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  _BYTE v24[40];
  _BYTE v25[40];
  _BYTE v26[40];
  uint64_t v27;
  _BYTE v28[40];

  if (a1 - 2 < 3)
    return 0;
  if (a1)
  {
    v15 = sub_100003DB8(&qword_100328A00);
    inited = swift_initStackObject(v15, v28);
    v6 = inited;
    *(_OWORD *)(inited + 16) = xmmword_10024E820;
    if (qword_100315760 != -1)
      inited = swift_once(&qword_100315760, sub_1000332E8);
    v17 = (void *)qword_1003186B8;
    *(_QWORD *)(v6 + 32) = qword_1003186B8;
    v27 = v6;
    specialized Array._endMutation()(inited);
    v18 = swift_initStackObject(v15, v26);
    *(_OWORD *)(v18 + 16) = xmmword_10024E820;
    v19 = qword_100315750;
    v20 = v17;
    if (v19 != -1)
      v20 = (id)swift_once(&qword_100315750, sub_100033280);
    v21 = (void *)qword_1003186A8;
    *(_QWORD *)(v18 + 32) = qword_1003186A8;
    v27 = v18;
    specialized Array._endMutation()(v20);
    v11 = v27;
    v22 = v21;
    v14 = 0x8000000100262B20;
    v13 = 0xD000000000000019;
  }
  else
  {
    v2 = sub_100003DB8(&qword_100328A00);
    v3 = swift_initStackObject(v2, v25);
    v4 = v3;
    *(_OWORD *)(v3 + 16) = xmmword_10024E820;
    if (qword_100315760 != -1)
      v3 = swift_once(&qword_100315760, sub_1000332E8);
    v5 = (void *)qword_1003186B8;
    *(_QWORD *)(v4 + 32) = qword_1003186B8;
    v27 = v4;
    specialized Array._endMutation()(v3);
    v6 = v27;
    v7 = swift_initStackObject(v2, v24);
    *(_OWORD *)(v7 + 16) = xmmword_10024E820;
    v8 = qword_100315758;
    v9 = v5;
    if (v8 != -1)
      v9 = (id)swift_once(&qword_100315758, sub_1000332B4);
    v10 = (void *)qword_1003186B0;
    *(_QWORD *)(v7 + 32) = qword_1003186B0;
    v27 = v7;
    specialized Array._endMutation()(v9);
    v11 = v27;
    v12 = v10;
    v13 = 7565171;
    v14 = 0xE300000000000000;
  }
  v1 = sub_1000348CC(v13, v14, v6, v11);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v6);
  return v1;
}

unint64_t sub_100034D58()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100318820;
  if (!qword_100318820)
  {
    v1 = sub_100007FAC(&qword_1003187F8);
    sub_10002B614(&qword_100318828, &qword_100318830, (void (*)(void))sub_100034DFC);
    sub_1000052EC(&qword_100316C10, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100318820);
  }
  return result;
}

unint64_t sub_100034DFC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100318838;
  if (!qword_100318838)
  {
    v1 = sub_100007FAC(&qword_100318840);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100318838);
  }
  return result;
}

unint64_t sub_100034E60()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100318848;
  if (!qword_100318848)
  {
    v1 = sub_100007FAC(&qword_100318810);
    sub_10002B614(&qword_100318828, &qword_100318830, (void (*)(void))sub_100034DFC);
    sub_1000084FC(&qword_100318850, &qword_100318808, (uint64_t)&protocol conformance descriptor for _ClipEffect<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100318848);
  }
  return result;
}

unint64_t sub_100034F10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100318860;
  if (!qword_100318860)
  {
    v1 = sub_100007FAC(&qword_1003187E8);
    sub_10002B614(&qword_100318868, &qword_1003187E0, (void (*)(void))sub_100034FB4);
    sub_1000084FC(&qword_100318890, &qword_100318898, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100318860);
  }
  return result;
}

unint64_t sub_100034FB4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100318870;
  if (!qword_100318870)
  {
    v1 = sub_100007FAC(&qword_1003187D8);
    sub_1000084FC(&qword_100318878, &qword_1003187D0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_1000084FC(&qword_100318880, &qword_100318888, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100318870);
  }
  return result;
}

uint64_t destroy for QuestionnaireAutoSendView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  return swift_release(a1[7]);
}

uint64_t initializeWithCopy for QuestionnaireAutoSendView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v7 = a2[4];
  *(_QWORD *)(a1 + 32) = v7;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  v8 = a2[7];
  *(_QWORD *)(a1 + 56) = v8;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  return a1;
}

uint64_t *assignWithCopy for QuestionnaireAutoSendView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a1[4];
  v9 = a2[4];
  a1[4] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[5] = a2[5];
  a1[6] = a2[6];
  v10 = a1[7];
  v11 = a2[7];
  a1[7] = v11;
  swift_retain(v11);
  swift_release(v10);
  return a1;
}

__n128 initializeWithTake for QuestionPresentation(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for QuestionnaireAutoSendView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = a1[4];
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_release(v7);
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 5);
  v9 = a1[7];
  a1[7] = a2[7];
  swift_release(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionnaireAutoSendView(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 64))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnaireAutoSendView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionnaireAutoSendView()
{
  return &type metadata for QuestionnaireAutoSendView;
}

uint64_t sub_1000352F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002956C4, 1);
}

uint64_t sub_100035300@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  _OWORD *v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t (*v46)();
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (**v53)();
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  _OWORD *v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  uint64_t v67;
  _OWORD *v68;
  __int128 v69;
  __int128 v70;
  uint64_t OpaqueTypeConformance2;
  unint64_t v72;
  uint64_t v73;
  __n128 v74;
  void (*v75)(char *, uint64_t, uint64_t);
  char *v76;
  uint64_t v77;
  uint64_t result;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)();
  unint64_t *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  __int128 v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  void *(*v102)@<X0>(uint64_t@<X8>);
  _OWORD *v103;
  uint64_t (*v104)@<X0>(uint64_t@<X8>);
  _OWORD *v105;
  __int128 v106;
  uint64_t v107;
  _QWORD v108[2];
  __int128 v109;
  uint64_t v110;
  __int128 v111;
  uint64_t v112;

  v2 = v1;
  v4 = sub_100003DB8(&qword_1003188A0);
  v93 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v5);
  v92 = (char *)&v84 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = sub_100003DB8(&qword_1003188A8);
  __chkstk_darwin(v95, v7);
  v97 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_1003188B0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v96 = (char *)&v84 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003DB8(&qword_1003188B8);
  v15 = __chkstk_darwin(v13, v14);
  v17 = __chkstk_darwin(v15, v16);
  v21 = *(_QWORD **)(v2 + 16);
  if (v21)
  {
    v94 = v4;
    v87 = (char *)&v84 - v18;
    v88 = v20;
    v89 = v19;
    v90 = v17;
    v91 = v10;
    v22 = v21[9];
    v23 = v21[10];
    sub_100007BBC(v21 + 6, v22);
    v24 = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v23 + 24))(&v112, v22, v23);
    v25 = static VerticalAlignment.center.getter(v24);
    sub_100007CBC((uint64_t)&v112, (uint64_t)&v98);
    v26 = (_OWORD *)swift_allocObject(&unk_1002E67B0, 120, 7);
    v27 = *(_OWORD *)(v2 + 16);
    v26[1] = *(_OWORD *)v2;
    v26[2] = v27;
    v28 = *(_OWORD *)(v2 + 48);
    v26[3] = *(_OWORD *)(v2 + 32);
    v26[4] = v28;
    sub_100007D04(&v98, (uint64_t)(v26 + 5));
    sub_100007CBC((uint64_t)&v112, (uint64_t)&v111);
    v29 = (_OWORD *)swift_allocObject(&unk_1002E67D8, 120, 7);
    v30 = *(_OWORD *)(v2 + 16);
    v29[1] = *(_OWORD *)v2;
    v29[2] = v30;
    v31 = *(_OWORD *)(v2 + 48);
    v29[3] = *(_OWORD *)(v2 + 32);
    v29[4] = v31;
    sub_100007D04(&v111, (uint64_t)(v29 + 5));
    sub_10003826C((uint64_t *)v2);
    sub_10003826C((uint64_t *)v2);
    v32 = type metadata accessor for UIMetrics();
    v33 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v34 = EnvironmentObject.init()(v32, v33);
    v36 = v35;
    type metadata accessor for CGSize(0);
    v108[0] = 0;
    v108[1] = 0;
    State.init(wrappedValue:)(&v109, v108, v37);
    v38 = v110;
    v98 = (unint64_t)v25;
    LOBYTE(v99) = 1;
    v100 = v34;
    v101 = v36;
    v102 = sub_10003820C;
    v103 = v26;
    v104 = sub_100038260;
    v105 = v29;
    v106 = v109;
    v107 = v110;
    v39 = *(_QWORD *)(v2 + 32);
    if (!v39)
    {
      v79 = *(_QWORD *)(v2 + 40);
      v80 = type metadata accessor for QuestionnaireState();
      v81 = type metadata accessor for QuestionnaireState;
      v82 = &qword_100316A18;
      goto LABEL_13;
    }
    swift_beginAccess(v39 + 48, &v111, 0, 0);
    v40 = *(_QWORD *)(v39 + 144);
    v41 = *(_QWORD *)(v40 + 16);
    if (v41)
    {
      v86 = v9;
      v84 = a1;
      v42 = *(unsigned __int8 *)(v41 + v40 + 31) != 3;
      v85 = v39 + 48;
      v43 = sub_100003DB8(&qword_1003188C0);
      v44 = sub_1000084FC(&qword_1003188C8, &qword_1003188C0, (uint64_t)&protocol conformance descriptor for HStack<A>);
      v45 = v92;
      View.navigationBarBackButtonHidden(_:)(v42, v43, v44);
      swift_release(v29);
      swift_release(v26);
      swift_release(v34);
      swift_release(v38);
      v46 = (uint64_t (*)())swift_allocObject(&unk_1002E6800, 80, 7);
      v47 = *(_OWORD *)(v2 + 16);
      *((_OWORD *)v46 + 1) = *(_OWORD *)v2;
      *((_OWORD *)v46 + 2) = v47;
      v48 = *(_OWORD *)(v2 + 48);
      *((_OWORD *)v46 + 3) = *(_OWORD *)(v2 + 32);
      *((_OWORD *)v46 + 4) = v48;
      v49 = v93;
      v50 = v97;
      v51 = v94;
      (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v97, v45, v94);
      v52 = v95;
      v53 = (uint64_t (**)())&v50[*(int *)(v95 + 36)];
      *v53 = sub_1000382C4;
      v53[1] = v46;
      v53[2] = 0;
      v53[3] = 0;
      sub_10003826C((uint64_t *)v2);
      (*(void (**)(char *, uint64_t))(v49 + 8))(v45, v51);
      swift_beginAccess(v85, &v109, 0, 0);
      v54 = *(_QWORD *)(v39 + 224);
      if (v54)
        v55 = *(_QWORD *)(v54 + 48);
      else
        v55 = 0;
      v56 = v86;
      v57 = v96;
      *(_QWORD *)&v98 = v55;
      BYTE8(v98) = v54 == 0;
      v58 = (_OWORD *)swift_allocObject(&unk_1002E6828, 80, 7);
      v59 = *(_OWORD *)(v2 + 16);
      v58[1] = *(_OWORD *)v2;
      v58[2] = v59;
      v60 = *(_OWORD *)(v2 + 48);
      v58[3] = *(_OWORD *)(v2 + 32);
      v58[4] = v60;
      sub_10003826C((uint64_t *)v2);
      v61 = sub_100003DB8(&qword_1003188D0);
      v62 = sub_1000382D8();
      v63 = sub_10003838C();
      v64 = (uint64_t)v97;
      View.onChange<A>(of:initial:_:)(&v98, 0, sub_1000382D0, v58, v52, v61, v62, v63, v65);
      swift_release(v58);
      sub_100007FF0(v64, &qword_1003188A8);
      v66 = *(_QWORD *)(v39 + 144);
      v67 = *(_QWORD *)(v66 + 16);
      if (v67)
      {
        LOBYTE(v108[0]) = *(_BYTE *)(v67 + v66 + 31);
        v68 = (_OWORD *)swift_allocObject(&unk_1002E6850, 80, 7);
        v69 = *(_OWORD *)(v2 + 16);
        v68[1] = *(_OWORD *)v2;
        v68[2] = v69;
        v70 = *(_OWORD *)(v2 + 48);
        v68[3] = *(_OWORD *)(v2 + 32);
        v68[4] = v70;
        sub_10003826C((uint64_t *)v2);
        *(_QWORD *)&v98 = v52;
        *((_QWORD *)&v98 + 1) = v61;
        v99 = v62;
        v100 = v63;
        OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v98, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
        v72 = sub_1000383F4();
        v73 = v88;
        View.onChange<A>(of:initial:_:)(v108, 0, sub_1000383EC, v68, v56, &type metadata for QuestionnaireState.Stage, OpaqueTypeConformance2, v72, v74);
        swift_release(v68);
        (*(void (**)(char *, uint64_t))(v91 + 8))(v57, v56);
        v75 = *(void (**)(char *, uint64_t, uint64_t))(v89 + 32);
        v76 = v87;
        v77 = v90;
        v75(v87, v73, v90);
        v75(v84, (uint64_t)v76, v77);
        return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(&v112);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  v79 = *(_QWORD *)(v2 + 24);
  v80 = type metadata accessor for UIMetrics();
  v81 = type metadata accessor for UIMetrics;
  v82 = (unint64_t *)&qword_100316A00;
LABEL_13:
  v83 = sub_1000052EC(v82, (uint64_t (*)(uint64_t))v81, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v79, v80, v83);
  __break(1u);
  return result;
}

void *sub_1000359F4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *result;
  _BYTE __src[840];
  _BYTE v18[856];
  char v19;

  v6 = static HorizontalAlignment.center.getter(a1);
  sub_100035AF0(a1, a2, __src);
  v18[848] = 0;
  memcpy(&v18[7], __src, 0x348uLL);
  v7 = a2[3];
  v8 = a2[4];
  sub_100007BBC(a2, v7);
  v9 = (*(double (**)(uint64_t, uint64_t))(v8 + 24))(v7, v8);
  v11 = v10;
  v13 = v12;
  v15 = v14;
  LOBYTE(a2) = static Edge.Set.all.getter(v9);
  v19 = 0;
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 0;
  result = memcpy((void *)(a3 + 17), v18, 0x34FuLL);
  *(_BYTE *)(a3 + 864) = (_BYTE)a2;
  *(double *)(a3 + 872) = v9;
  *(_QWORD *)(a3 + 880) = v11;
  *(_QWORD *)(a3 + 888) = v13;
  *(_QWORD *)(a3 + 896) = v15;
  *(_BYTE *)(a3 + 904) = v19;
  return result;
}

uint64_t sub_100035AF0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  id v22;
  char v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  id v59;
  BOOL v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  uint64_t v74;
  uint64_t v75;
  double v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char v96;
  char v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  id v109;
  char v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  double v121;
  double v122;
  uint64_t v123;
  double v124;
  double v125;
  id v126;
  char v127;
  uint64_t v128;
  char v129;
  uint64_t result;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t KeyPath;
  uint64_t v140;
  char v141;
  uint64_t v142;
  uint64_t v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  char v152;
  char v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __int128 v168;
  _QWORD v169[55];
  _OWORD v170[10];
  __int128 v171;
  __int128 v172;
  _BYTE v173[25];
  _OWORD v174[10];
  __int128 v175;
  _QWORD v176[105];
  _OWORD v177[10];
  uint64_t v178;
  double v179;
  _OWORD v180[10];
  uint64_t v181;
  double v182;
  char v183;
  _BYTE v184[7];
  double v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  _QWORD v190[2];
  _BYTE v191[328];
  uint64_t v192;
  char v193;
  _BYTE v194[7];
  uint64_t v195;
  char v196;
  _BYTE v197[7];
  uint64_t v198;
  uint64_t v199;
  char v200;
  _BYTE v201[7];
  double v202;
  uint64_t v203;
  double v204;
  uint64_t v205;
  char v206;
  char v207;
  _BYTE v208[7];
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  __int128 v217;
  __int128 v218;
  char v219;
  char v220;
  char v221;
  _BYTE v222[7];
  _BYTE v223[7];
  _BYTE v224[7];
  _BYTE __dst[328];
  uint64_t v226;
  char v227;
  uint64_t v228;
  char v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char v234;
  uint64_t v235;
  uint64_t v236;
  BOOL v237;
  uint64_t v238;
  uint64_t v239;
  char v240;
  uint64_t v241;
  uint64_t v242;
  BOOL v243;
  _BYTE __src[344];

  v6 = static Alignment.center.getter(a1);
  v8 = v7;
  sub_1000366F4(a1, a2, __src);
  v9 = a2[3];
  v10 = a2[4];
  sub_100007BBC(a2, v9);
  v11 = (*(double (**)(uint64_t, uint64_t))(v10 + 496))(v9, v10);
  v12 = a2[3];
  v13 = a2[4];
  sub_100007BBC(a2, v12);
  v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 496))(v12, v13);
  v16 = v15;
  v17 = static Alignment.center.getter(v14);
  _FrameLayout.init(width:height:alignment:)(&v226, *(_QWORD *)&v11, 0, v16, 0, v17, v18);
  v19 = *(_QWORD *)(a1 + 16);
  if (v19)
  {
    v154 = v226;
    v20 = v227;
    v21 = v229;
    v150 = v230;
    v148 = v228;
    v149 = v231;
    v22 = *(id *)(v19 + 112);
    v23 = ((uint64_t (*)(void))static UIContentSizeCategory.>= infix(_:_:))();

    v156 = v6;
    v157 = v19;
    v155 = v8;
    v147 = a3;
    if ((v23 & 1) != 0)
    {
      v24 = 0;
      v25 = 16.0;
      v26 = 16.0;
      v27 = 0;
    }
    else
    {
      v28 = a2[3];
      v29 = a2[4];
      sub_100007BBC(a2, v28);
      v25 = (*(double (**)(uint64_t, uint64_t))(v29 + 536))(v28, v29);
      v24 = v30;
      v26 = v31;
      v27 = v32;
    }
    memcpy(__dst, __src, sizeof(__dst));
    v220 = v20;
    v219 = v21;
    v151 = v20;
    v152 = v21;
    v153 = static Edge.Set.all.getter(v33);
    v221 = 0;
    v34 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000011, 0x8000000100262B90);
    v35 = Text.init(_:tableName:bundle:comment:)(v34);
    v37 = v36;
    v39 = v38;
    v41 = v40 & 1;
    v42 = a2[3];
    v43 = a2[4];
    sub_100007BBC(a2, v42);
    v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 472))(v42, v43);
    v45 = Text.font(_:)(v44, v35, v37, v41, v39);
    v47 = v46;
    LOBYTE(v43) = v48;
    v50 = v49;
    swift_release(v44);
    v51 = v43 & 1;
    sub_10002B438(v35, v37, v41);
    swift_bridgeObjectRelease(v39);
    v52 = a2[3];
    v53 = a2[4];
    sub_100007BBC(a2, v52);
    v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 488))(v52, v53);
    v143 = Text.foregroundColor(_:)(v54, v45, v47, v51, v50);
    v145 = v55;
    v57 = v56;
    v141 = v58;
    swift_release(v54);
    sub_10002B438(v45, v47, v51);
    swift_bridgeObjectRelease(v50);
    v59 = *(id *)(v157 + 112);
    LOBYTE(v53) = static UIContentSizeCategory.>= infix(_:_:)(v59, UIContentSizeCategoryAccessibilityExtraLarge);

    v60 = (v53 & 1) == 0;
    KeyPath = swift_getKeyPath(&unk_10024EBB0);
    v61 = *(id *)(v157 + 112);
    v62 = static Alignment.center.getter(v61);
    v64 = v63;
    v65 = static UIContentSizeCategory.>= infix(_:_:)(v61, UIContentSizeCategoryAccessibilityExtraLarge);
    if ((v65 & 1) != 0
      && (v66 = static Alignment.center.getter(v65),
          v68 = static Alignment.== infix(_:_:)(v62, v64, v66, v67),
          (v68 & 1) != 0))
    {
      v70 = v60;
      v71 = v57;
      v137 = static Alignment.leading.getter(v68, v69);
      v64 = v72;
    }
    else
    {
      v137 = v62;
      v70 = v60;
      v71 = v57;
    }

    v238 = v143;
    v239 = v71;
    v240 = v141 & 1;
    v241 = v145;
    v242 = KeyPath;
    v243 = v70;
    sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v209, 0.0, 1, 0.0, 1, v137, v64);
    sub_10002B438(v143, v71, v141 & 1);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v145);
    v73 = *(id *)(v157 + 112);
    v136 = static UIContentSizeCategory.>= infix(_:_:)(v73, UIContentSizeCategoryAccessibilityExtraLarge);

    v146 = swift_getKeyPath(&unk_10024EBE0);
    v144 = static Edge.Set.bottom.getter();
    v74 = a2[3];
    v75 = a2[4];
    sub_100007BBC(a2, v74);
    v76 = (*(double (**)(uint64_t, uint64_t))(v75 + 544))(v74, v75);
    v77 = EdgeInsets.init(_all:)(v76);
    v79 = v78;
    v140 = v81;
    v142 = v80;
    v207 = 0;
    v82 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000025, 0x8000000100262570);
    v83 = Text.init(_:tableName:bundle:comment:)(v82);
    v85 = v84;
    v87 = v86;
    v89 = v88 & 1;
    v90 = a2[3];
    v91 = a2[4];
    sub_100007BBC(a2, v90);
    v92 = (*(uint64_t (**)(uint64_t, uint64_t))(v91 + 480))(v90, v91);
    v93 = Text.font(_:)(v92, v83, v85, v89, v87);
    v95 = v94;
    v97 = v96;
    v134 = v98;
    swift_release(v92);
    v99 = v97 & 1;
    sub_10002B438(v83, v85, v89);
    swift_bridgeObjectRelease(v87);
    v100 = a2[3];
    v101 = a2[4];
    sub_100007BBC(a2, v100);
    v102 = (*(uint64_t (**)(uint64_t, uint64_t))(v101 + 488))(v100, v101);
    v103 = Text.foregroundColor(_:)(v102, v93, v95, v99, v134);
    v105 = v104;
    v107 = v106;
    v135 = v108;
    swift_release(v102);
    sub_10002B438(v93, v95, v99);
    swift_bridgeObjectRelease(v134);
    v109 = *(id *)(v157 + 112);
    v110 = static UIContentSizeCategory.>= infix(_:_:)(v109, UIContentSizeCategoryAccessibilityExtraLarge);

    v111 = swift_getKeyPath(&unk_10024EBB0);
    v112 = *(id *)(v157 + 112);
    v113 = static Alignment.center.getter(v112);
    v115 = v114;
    v116 = static UIContentSizeCategory.>= infix(_:_:)(v112, UIContentSizeCategoryAccessibilityExtraLarge);
    v138 = v79;
    if ((v116 & 1) != 0
      && (v117 = static Alignment.center.getter(v116),
          v119 = static Alignment.== infix(_:_:)(v113, v115, v117, v118),
          (v119 & 1) != 0))
    {
      v121 = v26;
      v122 = v25;
      v113 = static Alignment.leading.getter(v119, v120);
      v115 = v123;
    }
    else
    {
      v121 = v26;
      v122 = v25;
    }

    v124 = 0.5;
    v232 = v103;
    v233 = v105;
    v234 = v107 & 1;
    if ((v136 & 1) != 0)
      v125 = 1.0;
    else
      v125 = 0.5;
    v235 = v135;
    v236 = v111;
    v237 = (v110 & 1) == 0;
    sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v159, 0.0, 1, 0.0, 1, v113, v115);
    sub_10002B438(v103, v105, v107 & 1);
    swift_release(v111);
    swift_bridgeObjectRelease(v135);
    v126 = *(id *)(v157 + 112);
    v127 = static UIContentSizeCategory.>= infix(_:_:)(v126, UIContentSizeCategoryAccessibilityExtraLarge);

    if ((v127 & 1) != 0)
      v124 = 1.0;
    v128 = swift_getKeyPath(&unk_10024EBE0);
    v158 = v221;
    v129 = v207;
    v169[0] = v156;
    v169[1] = v155;
    memcpy(&v169[2], __dst, 0x148uLL);
    v169[43] = v154;
    LOBYTE(v169[44]) = v151;
    *(_DWORD *)((char *)&v169[44] + 1) = *(_DWORD *)v224;
    HIDWORD(v169[44]) = *(_DWORD *)&v224[3];
    v169[45] = v148;
    LOBYTE(v169[46]) = v152;
    *(_DWORD *)((char *)&v169[46] + 1) = *(_DWORD *)v223;
    HIDWORD(v169[46]) = *(_DWORD *)&v223[3];
    v169[47] = v150;
    v169[48] = v149;
    LOBYTE(v169[49]) = v153;
    *(_DWORD *)((char *)&v169[49] + 1) = *(_DWORD *)v222;
    HIDWORD(v169[49]) = *(_DWORD *)&v222[3];
    *(double *)&v169[50] = v122;
    v169[51] = v24;
    *(double *)&v169[52] = v121;
    v169[53] = v27;
    LOBYTE(v169[54]) = v221;
    v170[6] = v215;
    v170[7] = v216;
    v170[8] = v217;
    v170[9] = v218;
    v170[2] = v211;
    v170[3] = v212;
    v170[4] = v213;
    v170[5] = v214;
    v170[0] = v209;
    v170[1] = v210;
    *(_QWORD *)&v171 = v146;
    *((double *)&v171 + 1) = v125;
    LOBYTE(v172) = v144;
    *(_DWORD *)((char *)&v172 + 1) = *(_DWORD *)v208;
    DWORD1(v172) = *(_DWORD *)&v208[3];
    *((double *)&v172 + 1) = v77;
    *(_QWORD *)v173 = v138;
    *(_QWORD *)&v173[8] = v142;
    *(_QWORD *)&v173[16] = v140;
    v173[24] = v207;
    v174[6] = v165;
    v174[7] = v166;
    v174[8] = v167;
    v174[9] = v168;
    v174[2] = v161;
    v174[3] = v162;
    v174[4] = v163;
    v174[5] = v164;
    v174[0] = v159;
    v174[1] = v160;
    *(_QWORD *)&v175 = v128;
    *((double *)&v175 + 1) = v124;
    memcpy(v176, v169, 0x1B1uLL);
    *(_OWORD *)&v176[75] = v171;
    *(_OWORD *)&v176[77] = v172;
    *(_OWORD *)&v176[79] = *(_OWORD *)v173;
    *(_OWORD *)((char *)&v176[80] + 1) = *(_OWORD *)&v173[9];
    *(_OWORD *)&v176[67] = v215;
    *(_OWORD *)&v176[69] = v216;
    *(_OWORD *)&v176[71] = v217;
    *(_OWORD *)&v176[73] = v218;
    *(_OWORD *)&v176[59] = v211;
    *(_OWORD *)&v176[61] = v212;
    *(_OWORD *)&v176[63] = v213;
    *(_OWORD *)&v176[65] = v214;
    *(_OWORD *)&v176[55] = v209;
    *(_OWORD *)&v176[57] = v210;
    *(_OWORD *)&v176[99] = v167;
    *(_OWORD *)&v176[101] = v168;
    *(_OWORD *)&v176[103] = v175;
    *(_OWORD *)&v176[91] = v163;
    *(_OWORD *)&v176[93] = v164;
    *(_OWORD *)&v176[95] = v165;
    *(_OWORD *)&v176[97] = v166;
    *(_OWORD *)&v176[83] = v159;
    *(_OWORD *)&v176[85] = v160;
    *(_OWORD *)&v176[87] = v161;
    *(_OWORD *)&v176[89] = v162;
    memcpy(v147, v176, 0x348uLL);
    v177[6] = v165;
    v177[7] = v166;
    v177[8] = v167;
    v177[9] = v168;
    v177[2] = v161;
    v177[3] = v162;
    v177[4] = v163;
    v177[5] = v164;
    v177[0] = v159;
    v177[1] = v160;
    v178 = v128;
    v179 = v124;
    sub_100038758((uint64_t)v169);
    sub_10003893C((uint64_t)v170);
    sub_10003893C((uint64_t)v174);
    sub_100038994((uint64_t)v177);
    v180[6] = v215;
    v180[7] = v216;
    v180[8] = v217;
    v180[9] = v218;
    v180[2] = v211;
    v180[3] = v212;
    v180[4] = v213;
    v180[5] = v214;
    v180[0] = v209;
    v180[1] = v210;
    v181 = v146;
    v182 = v125;
    v183 = v144;
    *(_DWORD *)v184 = *(_DWORD *)v208;
    *(_DWORD *)&v184[3] = *(_DWORD *)&v208[3];
    v185 = v77;
    v186 = v138;
    v187 = v142;
    v188 = v140;
    v189 = v129;
    sub_100038994((uint64_t)v180);
    v190[0] = v156;
    v190[1] = v155;
    memcpy(v191, __dst, sizeof(v191));
    v192 = v154;
    v193 = v151;
    *(_DWORD *)v194 = *(_DWORD *)v224;
    *(_DWORD *)&v194[3] = *(_DWORD *)&v224[3];
    v195 = v148;
    v196 = v152;
    *(_DWORD *)v197 = *(_DWORD *)v223;
    *(_DWORD *)&v197[3] = *(_DWORD *)&v223[3];
    v198 = v150;
    v199 = v149;
    v200 = v153;
    *(_DWORD *)v201 = *(_DWORD *)v222;
    *(_DWORD *)&v201[3] = *(_DWORD *)&v222[3];
    v202 = v122;
    v203 = v24;
    v204 = v121;
    v205 = v27;
    v206 = v158;
    return sub_1000389EC((uint64_t)v190);
  }
  else
  {
    v131 = *(_QWORD *)(a1 + 24);
    v132 = type metadata accessor for UIMetrics();
    v133 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v131, v132, v133);
    __break(1u);
  }
  return result;
}

void sub_1000366F4(uint64_t a1@<X0>, _QWORD *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(_QWORD *__return_ptr, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  double v27;
  double v28;
  __n128 v29;
  double v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  __n128 v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *__dst;
  _OWORD v82[10];
  uint64_t (*v83)();
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  _OWORD __src[21];
  _OWORD v97[10];
  uint64_t (*v98)();
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _QWORD v110[34];
  _QWORD v111[5];
  _QWORD v112[7];
  char v113;
  uint64_t v114;
  uint64_t v115;
  char v116;

  v4 = a1;
  __src[0] = *(_OWORD *)(a1 + 48);
  v6 = sub_100003DB8(&qword_1003188F0);
  State.wrappedValue.getter(v110, v6);
  v7 = *(_QWORD *)(v4 + 32);
  if (v7)
  {
    __dst = a3;
    v8 = *(_QWORD *)(v7 + 264);
    if ((*(_BYTE *)(v8 + 80) & 1) != 0)
    {
      if (v110[0] >= 10)
        v9 = 10;
      else
        v9 = v110[0];
    }
    else
    {
      v10 = *(_QWORD *)(v8 + 64);
      if (v10 >= v110[0])
        v9 = v110[0];
      else
        v9 = v10;
    }
    v11 = a2[3];
    v12 = a2[4];
    sub_100007BBC(a2, v11);
    v13 = *(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v12 + 504);
    v13(v111, v11, v12);
    v14 = v111[0];
    v15 = v111[1];
    v16 = v111[2];
    v80 = v111[3];
    v17 = v111[4];
    v4 = a2[3];
    v18 = a2[4];
    sub_100007BBC(a2, v4);
    v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 520))(v4, v18);
    KeyPath = swift_getKeyPath(&unk_10024EC10);
    if (v9 < 0)
    {
      sub_100038D50(__src);
LABEL_18:
      sub_100038C8C((uint64_t)__src, (uint64_t)v110);
      sub_100038C8C((uint64_t)v110, (uint64_t)v82);
      sub_100038C8C((uint64_t)v82, (uint64_t)&v85);
      *(_QWORD *)&__src[0] = v14;
      *((_QWORD *)&__src[0] + 1) = v15;
      *(_QWORD *)&__src[1] = v16;
      *((_QWORD *)&__src[1] + 1) = v80;
      *(_QWORD *)&__src[2] = v17;
      *((_QWORD *)&__src[2] + 1) = KeyPath;
      *(_QWORD *)&__src[3] = v19;
      sub_100038C8C((uint64_t)&v85, (uint64_t)&__src[3] + 8);
      memcpy(__dst, __src, 0x148uLL);
      sub_100038C8C((uint64_t)v82, (uint64_t)v97);
      swift_bridgeObjectRetain(v80);
      swift_retain(KeyPath);
      swift_retain(v19);
      sub_100038CD4((uint64_t)&v85, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000388A8);
      sub_100038CD4((uint64_t)v97, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100038B40);
      swift_release(v19);
      swift_release(KeyPath);
      swift_bridgeObjectRelease(v80);
      return;
    }
    v21 = *(_QWORD *)(v7 + 264);
    v22 = *(_QWORD *)(v21 + 64);
    v23 = *(_BYTE *)(v21 + 80) == 0;
    v24 = 10;
    if (v23)
      v24 = v22;
    v25 = __OFSUB__(v24, 1);
    v26 = v24 - 1;
    if (!v25)
    {
      v27 = (double)(v9 - 1);
      if (!v9)
        v27 = 0.0;
      v77 = fmin(v27 / (double)v26, 0.99);
      v79 = v19;
      v13(v112, v11, v12);
      v76 = v112[2];
      v73 = v112[3];
      v74 = v112[0];
      v75 = v112[4];
      *(_QWORD *)&__src[0] = 0x3FF921FB54442D18;
      v28 = Angle.animatableData.getter(1.57079633);
      v29 = Angle.animatableData.setter(0.0 - v28);
      v30 = static UnitPoint.center.getter(v29);
      v32 = v31;
      v33 = a2[3];
      v34 = a2[4];
      sub_100007BBC(a2, v33);
      *((_QWORD *)&v72 + 1) = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 512))(v33, v34);
      *(_QWORD *)&v72 = swift_getKeyPath(&unk_10024EC10);
      *(_QWORD *)&__src[0] = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      *((_QWORD *)&__src[0] + 1) = v35;
      v36 = sub_10002B3F4();
      v38 = Text.init<A>(_:)(__src, &type metadata for String, v36, v37);
      v40 = v39;
      v42 = v41;
      v44 = v43 & 1;
      v78 = KeyPath;
      v46 = a2[3];
      v45 = a2[4];
      sub_100007BBC(a2, v46);
      v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 528))(v46, v45);
      v48 = v112[1];
      v49 = Text.font(_:)(v47, v38, v40, v44, v42);
      v51 = v50;
      v53 = v52;
      v55 = v54;
      swift_release(v47);
      v56 = v53 & 1;
      sub_10002B438(v38, v40, v44);
      swift_bridgeObjectRelease(v42);
      v57 = a2[3];
      v58 = a2[4];
      sub_100007BBC(a2, v57);
      v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 512))(v57, v58);
      v60 = Text.foregroundColor(_:)(v59, v49, v51, v56, v55);
      v62 = v61;
      LOBYTE(v58) = v63;
      v65 = v64;
      swift_release(v59);
      LOBYTE(v40) = v58 & 1;
      sub_10002B438(v49, v51, v56);
      swift_bridgeObjectRelease(v55);
      v66 = swift_getKeyPath(&unk_10024EBB0);
      v112[5] = v60;
      v112[6] = v62;
      v113 = v40;
      v114 = v65;
      v115 = v66;
      v116 = 1;
      v67 = static Alignment.center.getter(v66);
      KeyPath = v78;
      sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, __src, 0.0, 1, 0.0, 1, v67, v68);
      v19 = v79;
      sub_10002B438(v60, v62, v40);
      swift_release(v66);
      swift_bridgeObjectRelease(v65);
      v106 = __src[6];
      v107 = __src[7];
      v108 = __src[8];
      v109 = __src[9];
      v102 = __src[2];
      v103 = __src[3];
      v104 = __src[4];
      v105 = __src[5];
      v100 = __src[0];
      v101 = __src[1];
      v82[6] = __src[6];
      v82[7] = __src[7];
      v82[8] = __src[8];
      v82[9] = __src[9];
      v82[2] = __src[2];
      v82[3] = __src[3];
      v82[4] = __src[4];
      v82[5] = __src[5];
      v82[0] = __src[0];
      v82[1] = __src[1];
      v91 = __src[6];
      v92 = __src[7];
      v93 = __src[8];
      v94 = __src[9];
      v87 = __src[2];
      v88 = __src[3];
      v83 = sub_100036DCC;
      v84 = 0;
      v89 = __src[4];
      v90 = __src[5];
      v85 = __src[0];
      v86 = __src[1];
      v95 = (unint64_t)sub_100036DCC;
      v97[6] = __src[6];
      v97[7] = __src[7];
      v97[8] = __src[8];
      v97[9] = __src[9];
      v97[2] = __src[2];
      v97[3] = __src[3];
      v97[4] = __src[4];
      v97[5] = __src[5];
      v97[0] = __src[0];
      v97[1] = __src[1];
      v98 = sub_100036DCC;
      v99 = 0;
      swift_bridgeObjectRetain(v73);
      swift_retain(v72);
      swift_retain(*((_QWORD *)&v72 + 1));
      sub_100038BDC((uint64_t)v82);
      sub_100038C34((uint64_t)v97);
      swift_release(*((_QWORD *)&v72 + 1));
      swift_release(v72);
      swift_bridgeObjectRelease(v73);
      *(_QWORD *)&__src[0] = 0;
      *((double *)__src + 1) = v77;
      *(_QWORD *)&__src[1] = v74;
      *((_QWORD *)&__src[1] + 1) = v48;
      *(_QWORD *)&__src[2] = v76;
      *((_QWORD *)&__src[2] + 1) = v73;
      *(_QWORD *)&__src[3] = v75;
      *((_QWORD *)&__src[3] + 1) = 0x3FF921FB54442D18;
      *(double *)&__src[4] = v30;
      *((_QWORD *)&__src[4] + 1) = v32;
      __src[5] = v72;
      __src[14] = v93;
      __src[15] = v94;
      __src[16] = v95;
      __src[10] = v89;
      __src[11] = v90;
      __src[12] = v91;
      __src[13] = v92;
      __src[6] = v85;
      __src[7] = v86;
      __src[8] = v87;
      __src[9] = v88;
      ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(__src);
      goto LABEL_18;
    }
    __break(1u);
  }
  v69 = *(_QWORD *)(v4 + 40);
  v70 = type metadata accessor for QuestionnaireState();
  v71 = sub_1000052EC(&qword_100316A18, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState, (uint64_t)&unk_10024D2FC);
  EnvironmentObject.error()(0, v69, v70, v71);
  __break(1u);
}

uint64_t sub_100036DCC()
{
  return Transaction.animation.setter(0);
}

uint64_t sub_100036DF0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;

  v6 = sub_100003DB8(&qword_1003188F8);
  v8 = __chkstk_darwin(v6, v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v10 = static HorizontalAlignment.center.getter(v8);
  *((_QWORD *)v10 + 1) = 0;
  v10[16] = 1;
  v11 = sub_100003DB8(&qword_100318900);
  sub_100036F20(a1, a2, (uint64_t)&v10[*(int *)(v11 + 44)]);
  v12 = a2[3];
  v13 = a2[4];
  sub_100007BBC(a2, v12);
  v14 = (*(double (**)(uint64_t, uint64_t))(v13 + 24))(v12, v13);
  v16 = v15;
  v18 = v17;
  v20 = v19;
  LOBYTE(a2) = static Edge.Set.all.getter(v14);
  sub_10000B234((uint64_t)v10, a3, &qword_1003188F8);
  v21 = a3 + *(int *)(sub_100003DB8(&qword_100318908) + 36);
  *(_BYTE *)v21 = (_BYTE)a2;
  *(double *)(v21 + 8) = v14;
  *(_QWORD *)(v21 + 16) = v16;
  *(_QWORD *)(v21 + 24) = v18;
  *(_QWORD *)(v21 + 32) = v20;
  *(_BYTE *)(v21 + 40) = 0;
  return sub_100007FF0((uint64_t)v10, &qword_1003188F8);
}

uint64_t sub_100036F20@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _OWORD *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t KeyPath;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __n128 v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  double v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;

  v107 = a2;
  v108 = a3;
  v4 = type metadata accessor for KeyboardShortcut(0);
  v105 = *(_QWORD *)(v4 - 8);
  v106 = v4;
  __chkstk_darwin(v4, v5);
  v104 = (char *)&v87 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ButtonBorderShape(0);
  v102 = *(_QWORD *)(v7 - 8);
  v103 = v7;
  __chkstk_darwin(v7, v8);
  v100 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = type metadata accessor for BorderedProminentButtonStyle(0);
  v97 = *(_QWORD *)(v95 - 8);
  __chkstk_darwin(v95, v10);
  v92 = (char *)&v87 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for ControlSize(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&v87 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = sub_100003DB8(&qword_100318910);
  v17 = *(_QWORD *)(v89 - 8);
  __chkstk_darwin(v89, v18);
  v20 = (char *)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100003DB8(&qword_100318918);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v87 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100003DB8(&qword_100318920);
  v93 = *(_QWORD *)(v25 - 8);
  v94 = v25;
  __chkstk_darwin(v25, v26);
  v88 = (char *)&v87 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = sub_100003DB8(&qword_100318928);
  __chkstk_darwin(v90, v28);
  v30 = (char *)&v87 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_100003DB8(&qword_100318930);
  v99 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101, v31);
  v91 = (char *)&v87 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100003DB8(&qword_100318938);
  __chkstk_darwin(v98, v33);
  v96 = (char *)&v87 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = (_OWORD *)swift_allocObject(&unk_1002E6878, 80, 7);
  v36 = *(_OWORD *)(a1 + 16);
  v35[1] = *(_OWORD *)a1;
  v35[2] = v36;
  v37 = *(_OWORD *)(a1 + 48);
  v35[3] = *(_OWORD *)(a1 + 32);
  v35[4] = v37;
  sub_10003826C((uint64_t *)a1);
  v38 = sub_100003DB8(&qword_100318940);
  v39 = sub_100038540();
  Button.init(action:label:)(sub_100038520, v35, sub_100037A9C, 0, v38, v39);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for ControlSize.large(_:), v12);
  KeyPath = swift_getKeyPath(&unk_10024EB20);
  v41 = (uint64_t *)&v24[*(int *)(v21 + 36)];
  v42 = sub_100003DB8(&qword_100316C38);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))((char *)v41 + *(int *)(v42 + 28), v16, v12);
  *v41 = KeyPath;
  v43 = v89;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v24, v20, v89);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v44 = (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v20, v43);
  v45 = v92;
  BorderedProminentButtonStyle.init()(v44);
  v46 = sub_1000385AC();
  v47 = sub_1000052EC(&qword_100318960, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v48 = v88;
  v49 = v95;
  View.buttonStyle<A>(_:)(v45, v21, v95, v46, v47);
  (*(void (**)(char *, uint64_t))(v97 + 8))(v45, v49);
  v50 = sub_100007FF0((uint64_t)v24, &qword_100318918);
  v51 = v100;
  static ButtonBorderShape.roundedRectangle.getter(v50);
  v52 = swift_getKeyPath(&unk_10024EB50);
  v53 = v90;
  v54 = (uint64_t *)&v30[*(int *)(v90 + 36)];
  v55 = sub_100003DB8(&qword_100318968);
  v57 = v102;
  v56 = v103;
  (*(void (**)(char *, char *, uint64_t))(v102 + 16))((char *)v54 + *(int *)(v55 + 28), v51, v103);
  *v54 = v52;
  v59 = v93;
  v58 = v94;
  (*(void (**)(char *, char *, uint64_t))(v93 + 16))(v30, v48, v94);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v51, v56);
  v60 = (*(uint64_t (**)(char *, uint64_t))(v59 + 8))(v48, v58);
  v61 = v104;
  static KeyboardShortcut.defaultAction.getter(v60);
  v62 = sub_100038650();
  v63 = v91;
  View.keyboardShortcut(_:)(v61, v53, v62);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v61, v106);
  sub_100007FF0((uint64_t)v30, &qword_100318928);
  v64 = v107;
  v65 = v107[3];
  v66 = v107[4];
  sub_100007BBC(v107, v65);
  v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 552))(v65, v66);
  v68 = swift_getKeyPath(&unk_10024EB80);
  v109 = v67;
  v69 = swift_retain(v67);
  v70 = AnyShapeStyle.init<A>(_:)(&v109, &type metadata for Color, &protocol witness table for Color, v69);
  v71 = v99;
  v72 = (uint64_t)v96;
  v73 = v101;
  (*(void (**)(char *, char *, uint64_t))(v99 + 16))(v96, v63, v101);
  swift_release(v67);
  v74 = (uint64_t *)(v72 + *(int *)(v98 + 36));
  *v74 = v68;
  v74[1] = v70;
  (*(void (**)(char *, uint64_t))(v71 + 8))(v63, v73);
  v75 = v64[3];
  v76 = v64[4];
  sub_100007BBC(v64, v75);
  v77 = (*(double (**)(uint64_t, uint64_t))(v76 + 560))(v75, v76);
  v79 = v78;
  v81 = v80;
  v83 = v82;
  LOBYTE(v75) = static Edge.Set.all.getter(v77);
  v84 = v108;
  sub_10000B234(v72, v108, &qword_100318938);
  v85 = v84 + *(int *)(sub_100003DB8(&qword_100318980) + 36);
  *(_BYTE *)v85 = v75;
  *(double *)(v85 + 8) = v77;
  *(_QWORD *)(v85 + 16) = v79;
  *(_QWORD *)(v85 + 24) = v81;
  *(_QWORD *)(v85 + 32) = v83;
  *(_BYTE *)(v85 + 40) = 0;
  return sub_100007FF0(v72, &qword_100318938);
}

void sub_10003758C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  char v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t (*v37)();
  unint64_t *v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[24];

  v1 = v0;
  v2 = v0[4];
  if (v2)
  {
    swift_beginAccess(v2 + 48, v49, 0, 0);
    v3 = *(_QWORD *)(v2 + 144);
    v4 = *(_QWORD *)(v3 + 16);
    if (v4)
    {
      if (*(_BYTE *)(v4 + v3 + 31) != 3)
      {
        if (qword_1003158B0 == -1)
        {
LABEL_9:
          v11 = type metadata accessor for Logger(0);
          sub_10000D744(v11, (uint64_t)qword_10033FEC8);
          sub_10003826C(v0);
          sub_10003826C(v0);
          sub_10003826C(v0);
          v12 = sub_10003826C(v0);
          v13 = Logger.logObject.getter(v12);
          v14 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v13, v14))
          {
            sub_100038438(v0);
            sub_100038438(v0);
            goto LABEL_17;
          }
          v15 = swift_slowAlloc(22, -1);
          v16 = swift_slowAlloc(64, -1);
          v48 = v16;
          *(_DWORD *)v15 = 136446466;
          swift_retain(v2);
          v17 = sub_1000AD18C();
          v19 = v18;
          swift_release(v2);
          v41 = sub_100172BEC(v17, v19, &v48);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v15 + 4, v15 + 12);
          swift_bridgeObjectRelease(v19);
          sub_100038438(v1);
          sub_100038438(v1);
          *(_WORD *)(v15 + 12) = 2082;
          swift_beginAccess(v2 + 48, &v41, 0, 0);
          v21 = *(_QWORD *)(v2 + 144);
          v22 = *(_QWORD *)(v21 + 16);
          if (v22)
          {
            LOBYTE(v47) = *(_BYTE *)(v22 + v21 + 31);
            v23 = String.init<A>(describing:)(&v47, &type metadata for QuestionnaireState.Stage, v20);
            v25 = v24;
            v47 = sub_100172BEC(v23, v24, &v48);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, &v48, v15 + 14, v15 + 22);
            swift_bridgeObjectRelease(v25);
            sub_100038438(v1);
            sub_100038438(v1);
            _os_log_impl((void *)&_mh_execute_header, v13, v14, "[%{public}s] onDontSendTapped on %{public}s stage", (uint8_t *)v15, 0x16u);
            swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v16, -1, -1);
            v26 = v15;
LABEL_16:
            swift_slowDealloc(v26, -1, -1);
LABEL_18:

            return;
          }
          __break(1u);
          goto LABEL_23;
        }
LABEL_21:
        swift_once(&qword_1003158B0, sub_1000D9854);
        goto LABEL_9;
      }
      v5 = *(_QWORD *)(v2 + 32);
      v6 = __CFADD__(v5, 1);
      v7 = v5 + 1;
      if (!v6)
      {
        *(_QWORD *)(v2 + 32) = v7;
        swift_retain(v2);
        v8 = sub_1000B147C();
        sub_1001EDA94(v9);
        swift_release(v2);
        if ((v8 & 1) != 0)
        {
          if (*v0)
          {
            v10 = *(_QWORD *)(*v0 + 200);
            LOBYTE(v41) = 1;
            v42 = v2;
            v43 = 3;
            v45 = 0;
            v46 = 0;
            v44 = 0;
            swift_retain(v2);
            swift_retain(v10);
            PassthroughSubject.send(_:)(&v41);
            swift_release(v2);
            swift_release(v10);
            return;
          }
          v35 = v0[1];
          v36 = type metadata accessor for AppEvents();
          v37 = type metadata accessor for AppEvents;
          v38 = (unint64_t *)&qword_100316A10;
          v39 = &unk_100254EA8;
          goto LABEL_26;
        }
        if (qword_1003158B0 == -1)
        {
LABEL_14:
          v27 = type metadata accessor for Logger(0);
          sub_10000D744(v27, (uint64_t)qword_10033FEC8);
          sub_10003826C(v1);
          v28 = sub_10003826C(v1);
          v13 = Logger.logObject.getter(v28);
          v29 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v13, v29))
          {
            v30 = (uint8_t *)swift_slowAlloc(12, -1);
            v31 = swift_slowAlloc(32, -1);
            v41 = v31;
            *(_DWORD *)v30 = 136446210;
            swift_retain(v2);
            v32 = sub_1000AD18C();
            v34 = v33;
            swift_release(v2);
            v48 = sub_100172BEC(v32, v34, &v41);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v30 + 4, v30 + 12);
            swift_bridgeObjectRelease(v34);
            sub_100038438(v1);
            sub_100038438(v1);
            _os_log_impl((void *)&_mh_execute_header, v13, v29, "[%{public}s] onDontSendTapped - failed to go back", v30, 0xCu);
            swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v31, -1, -1);
            v26 = (uint64_t)v30;
            goto LABEL_16;
          }
LABEL_17:
          sub_100038438(v1);
          sub_100038438(v1);
          goto LABEL_18;
        }
LABEL_23:
        swift_once(&qword_1003158B0, sub_1000D9854);
        goto LABEL_14;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_21;
  }
  v35 = v0[5];
  v36 = type metadata accessor for QuestionnaireState();
  v37 = type metadata accessor for QuestionnaireState;
  v38 = &qword_100316A18;
  v39 = &unk_10024D2FC;
LABEL_26:
  v40 = sub_1000052EC(v38, (uint64_t (*)(uint64_t))v37, (uint64_t)v39);
  EnvironmentObject.error()(0, v35, v36, v40);
  __break(1u);
}

__n128 sub_100037A9C@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  _OWORD v16[9];

  v2 = LocalizedStringKey.init(stringLiteral:)(0x20749980E26E6F44, 0xAC000000646E6553);
  v3 = Text.init(_:tableName:bundle:comment:)(v2);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v10 = static Alignment.center.getter(v3);
  sub_1001315E8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, 0.0, 1, v10, v11, v3, v5, v9, v7);
  sub_10002B438(v3, v5, v9);
  swift_bridgeObjectRelease(v7);
  v12 = v16[7];
  *(_OWORD *)(a1 + 96) = v16[6];
  *(_OWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 128) = v16[8];
  v13 = v16[3];
  *(_OWORD *)(a1 + 32) = v16[2];
  *(_OWORD *)(a1 + 48) = v13;
  v14 = v16[5];
  *(_OWORD *)(a1 + 64) = v16[4];
  *(_OWORD *)(a1 + 80) = v14;
  result = (__n128)v16[1];
  *(_OWORD *)a1 = v16[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100037BBC(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  char v17[8];
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = a1;
  v2 = *a1;
  if (!*a1)
  {
    v1 = (_QWORD *)a1[1];
    v3 = type metadata accessor for AppEvents();
    v11 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    EnvironmentObject.error()(0, v1, v3, v11);
    __break(1u);
    goto LABEL_8;
  }
  v3 = *(_QWORD *)(v2 + 200);
  v4 = a1[4];
  if (!v4)
  {
LABEL_8:
    v12 = v1[5];
    v13 = type metadata accessor for QuestionnaireState();
    v14 = sub_1000052EC(&qword_100316A18, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState, (uint64_t)&unk_10024D2FC);
    swift_retain(v3);
    result = EnvironmentObject.error()(0, v12, v13, v14);
    __break(1u);
    return result;
  }
  v17[0] = 0;
  v18 = v4;
  v19 = 3;
  v21 = 0;
  v22 = 0;
  v20 = 0;
  swift_retain(v3);
  swift_retain(v4);
  PassthroughSubject.send(_:)(v17);
  swift_release(v4);
  swift_release(v3);
  v5 = *(_QWORD *)(v2 + 168);
  v17[0] = 2;
  swift_retain(v5);
  PassthroughSubject.send(_:)(v17);
  swift_release(v5);
  swift_beginAccess(v4 + 48, v17, 0, 0);
  v6 = *(_QWORD *)(v4 + 224);
  if (v6)
  {
    v7 = *(_QWORD *)(v6 + 48);
  }
  else
  {
    v16 = *((_OWORD *)v1 + 3);
    v8 = sub_100003DB8(&qword_1003188F0);
    State.wrappedValue.getter(&v15, v8);
    v7 = v15;
  }
  v16 = *((_OWORD *)v1 + 3);
  v15 = v7;
  v9 = sub_100003DB8(&qword_1003188F0);
  return State.wrappedValue.setter(&v15, v9);
}

uint64_t sub_100037D64(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE v39[8];
  uint64_t v40[2];

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)a2;
  v11 = *(unsigned __int8 *)(a2 + 8);
  if (qword_1003158B0 != -1)
    swift_once(&qword_1003158B0, sub_1000D9854);
  v12 = sub_10000D744(v5, (uint64_t)qword_10033FEC8);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v12, v5);
  sub_10003826C(a3);
  v13 = sub_10003826C(a3);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    v35 = v11;
    v36 = v6;
    v37 = v10;
    v16 = swift_slowAlloc(22, -1);
    v34 = swift_slowAlloc(64, -1);
    v40[0] = v34;
    *(_DWORD *)v16 = 136446466;
    v17 = a3[4];
    if (!v17)
    {
      v31 = a3[5];
      sub_100038438(a3);
      v32 = type metadata accessor for QuestionnaireState();
      v33 = sub_1000052EC(&qword_100316A18, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState, (uint64_t)&unk_10024D2FC);
      result = EnvironmentObject.error()(0, v31, v32, v33);
      __break(1u);
      return result;
    }
    swift_retain(a3[4]);
    v18 = sub_1000AD18C();
    v20 = v19;
    swift_release(v17);
    v38 = sub_100172BEC(v18, v20, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease(v20);
    sub_100038438(a3);
    sub_100038438(a3);
    *(_WORD *)(v16 + 12) = 2080;
    v10 = v37;
    v38 = v37;
    LOBYTE(v11) = v35;
    v39[0] = v35;
    v21 = sub_100003DB8(&qword_1003188D0);
    v23 = String.init<A>(describing:)(&v38, v21, v22);
    v25 = v24;
    v38 = sub_100172BEC(v23, v24, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease(v25);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "[%{public}s] Auto send view: %s seconds left", (uint8_t *)v16, 0x16u);
    v26 = v34;
    swift_arrayDestroy(v34, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1, -1);
    swift_slowDealloc(v16, -1, -1);

    result = (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v9, v5);
  }
  else
  {
    sub_100038438(a3);
    sub_100038438(a3);

    result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  if ((v11 & 1) == 0)
  {
    v28 = static Animation.linear(duration:)(result, 1.0);
    v30 = __chkstk_darwin(v28, v29);
    *(&v34 - 2) = (uint64_t)a3;
    *(&v34 - 1) = v10;
    withAnimation<A>(_:_:)(v30, sub_10003848C);
    return swift_release(v28);
  }
  return result;
}

void sub_1000380B0(uint64_t a1, _BYTE *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10[8];
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  if (*a2 == 4)
  {
    if (*a3)
    {
      v3 = *(_QWORD *)(*a3 + 200);
      v4 = a3[4];
      if (v4)
      {
        v10[0] = 1;
        v11 = v4;
        v12 = 3;
        v14 = 0;
        v15 = 0;
        v13 = 0;
        swift_retain(v3);
        swift_retain(v4);
        PassthroughSubject.send(_:)(v10);
        swift_release(v4);
        swift_release(v3);
        return;
      }
    }
    else
    {
      v5 = a3[1];
      v3 = type metadata accessor for AppEvents();
      v6 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
      EnvironmentObject.error()(0, v5, v3, v6);
      __break(1u);
    }
    v7 = a3[5];
    v8 = type metadata accessor for QuestionnaireState();
    v9 = sub_1000052EC(&qword_100316A18, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState, (uint64_t)&unk_10024D2FC);
    swift_retain(v3);
    EnvironmentObject.error()(0, v7, v8, v9);
    __break(1u);
  }
}

uint64_t sub_1000381D0@<X0>(char *a1@<X8>)
{
  return sub_100035300(a1);
}

void *sub_10003820C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_1000359F4(v1 + 16, (_QWORD *)(v1 + 80), a1);
}

uint64_t sub_10003821C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[9]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 10);
  return swift_deallocObject(v0, 120, 7);
}

uint64_t sub_100038260@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100036DF0(v1 + 16, (_QWORD *)(v1 + 80), a1);
}

uint64_t *sub_10003826C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  swift_retain(a1[7]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t sub_1000382C4()
{
  uint64_t v0;

  return sub_100037BBC((_QWORD *)(v0 + 16));
}

uint64_t sub_1000382D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_100037D64(a1, a2, (uint64_t *)(v2 + 16));
}

unint64_t sub_1000382D8()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_1003188D8;
  if (!qword_1003188D8)
  {
    v1 = sub_100007FAC(&qword_1003188A8);
    v2[0] = sub_100007FAC(&qword_1003188C0);
    v2[1] = sub_1000084FC(&qword_1003188C8, &qword_1003188C0, (uint64_t)&protocol conformance descriptor for HStack<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.navigationBarBackButtonHidden(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003188D8);
  }
  return result;
}

unint64_t sub_10003838C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003188E0;
  if (!qword_1003188E0)
  {
    v1 = sub_100007FAC(&qword_1003188D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1003188E0);
  }
  return result;
}

void sub_1000383EC(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  sub_1000380B0(a1, a2, (_QWORD *)(v2 + 16));
}

unint64_t sub_1000383F4()
{
  unint64_t result;

  result = qword_1003188E8;
  if (!qword_1003188E8)
  {
    result = swift_getWitnessTable(&unk_100253438, &type metadata for QuestionnaireState.Stage);
    atomic_store(result, (unint64_t *)&qword_1003188E8);
  }
  return result;
}

_QWORD *sub_100038438(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[2];
  v3 = a1[4];
  v4 = a1[7];
  swift_release(*a1);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  return a1;
}

uint64_t sub_10003848C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int128 v5;

  v1 = *(_QWORD *)(v0 + 24);
  v5 = *(_OWORD *)(*(_QWORD *)(v0 + 16) + 48);
  v4 = v1;
  v2 = sub_100003DB8(&qword_1003188F0);
  return State.wrappedValue.setter(&v4, v2);
}

uint64_t sub_1000384E4()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[9]);
  return swift_deallocObject(v0, 80, 7);
}

void sub_100038520()
{
  sub_10003758C();
}

unint64_t sub_100038540()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100318948;
  if (!qword_100318948)
  {
    v1 = sub_100007FAC(&qword_100318940);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100318948);
  }
  return result;
}

unint64_t sub_1000385AC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100318950;
  if (!qword_100318950)
  {
    v1 = sub_100007FAC(&qword_100318918);
    sub_1000084FC(&qword_100318958, &qword_100318910, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_1000084FC(&qword_100316C30, &qword_100316C38, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100318950);
  }
  return result;
}

unint64_t sub_100038650()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100318970;
  if (!qword_100318970)
  {
    v1 = sub_100007FAC(&qword_100318928);
    v2[0] = sub_100007FAC(&qword_100318918);
    v2[1] = type metadata accessor for BorderedProminentButtonStyle(255);
    v2[2] = sub_1000385AC();
    v2[3] = sub_1000052EC(&qword_100318960, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_1000084FC(&qword_100318978, &qword_100318968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100318970);
  }
  return result;
}

uint64_t sub_100038758(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 56);
  v4 = *(_QWORD *)(a1 + 88);
  v25 = *(_QWORD *)(a1 + 80);
  v26 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v24 = *(_QWORD *)(a1 + 128);
  v22 = *(_OWORD *)(a1 + 152);
  v23 = *(_OWORD *)(a1 + 136);
  v20 = *(_OWORD *)(a1 + 184);
  v21 = *(_OWORD *)(a1 + 168);
  v18 = *(_OWORD *)(a1 + 216);
  v19 = *(_OWORD *)(a1 + 200);
  v16 = *(_OWORD *)(a1 + 248);
  v17 = *(_OWORD *)(a1 + 232);
  v14 = *(_OWORD *)(a1 + 280);
  v15 = *(_OWORD *)(a1 + 264);
  v12 = *(_OWORD *)(a1 + 312);
  v13 = *(_OWORD *)(a1 + 296);
  v9 = *(_QWORD *)(a1 + 328);
  v10 = *(_QWORD *)(a1 + 336);
  swift_retain(*(_QWORD *)(a1 + 64));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  sub_1000388A8(v26, v25, v4, v5, v6, v7, v8, v24, v23, *((uint64_t *)&v23 + 1), v22, *((uint64_t *)&v22 + 1), v21, *((uint64_t *)&v21 + 1), v20, *((uint64_t *)&v20 + 1), v19, *((uint64_t *)&v19 + 1), v18,
    *((uint64_t *)&v18 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v9,
    v10);
  return a1;
}

double sub_1000388A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  double result;

  if (a6)
  {
    swift_retain(a12);
    swift_bridgeObjectRetain(a6);
    swift_retain(a11);
    sub_10002B750(a13, a14, a15 & 1);
    swift_bridgeObjectRetain(a16);
    swift_retain(a17);
    *(_QWORD *)&result = swift_retain(a34).n128_u64[0];
  }
  return result;
}

uint64_t sub_10003893C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 160);
  sub_10002B750(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t sub_100038994(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 160);
  sub_10002B438(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1000389EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *(_QWORD *)(a1 + 64);
  v4 = *(_QWORD *)(a1 + 88);
  v25 = *(_QWORD *)(a1 + 80);
  v26 = *(_QWORD *)(a1 + 72);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 120);
  v24 = *(_QWORD *)(a1 + 128);
  v22 = *(_OWORD *)(a1 + 152);
  v23 = *(_OWORD *)(a1 + 136);
  v20 = *(_OWORD *)(a1 + 184);
  v21 = *(_OWORD *)(a1 + 168);
  v18 = *(_OWORD *)(a1 + 216);
  v19 = *(_OWORD *)(a1 + 200);
  v16 = *(_OWORD *)(a1 + 248);
  v17 = *(_OWORD *)(a1 + 232);
  v14 = *(_OWORD *)(a1 + 280);
  v15 = *(_OWORD *)(a1 + 264);
  v12 = *(_OWORD *)(a1 + 312);
  v13 = *(_OWORD *)(a1 + 296);
  v9 = *(_QWORD *)(a1 + 328);
  v10 = *(_QWORD *)(a1 + 336);
  swift_release(*(_QWORD *)(a1 + 56));
  swift_bridgeObjectRelease(v2);
  swift_release(v3);
  sub_100038B40(v26, v25, v4, v5, v6, v7, v8, v24, v23, *((uint64_t *)&v23 + 1), v22, *((uint64_t *)&v22 + 1), v21, *((uint64_t *)&v21 + 1), v20, *((uint64_t *)&v20 + 1), v19, *((uint64_t *)&v19 + 1), v18,
    *((uint64_t *)&v18 + 1),
    v17,
    *((uint64_t *)&v17 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v9,
    v10);
  return a1;
}

double sub_100038B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  double result;

  if (a6)
  {
    swift_bridgeObjectRelease(a6);
    swift_release(a11);
    swift_release(a12);
    sub_10002B438(a13, a14, a15 & 1);
    swift_release(a34);
    swift_release(a17);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a16).n128_u64[0];
  }
  return result;
}

uint64_t sub_100038BDC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 168);
  sub_10002B750(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t sub_100038C34(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 168);
  sub_10002B438(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v4);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100038C8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100318988);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100038CD4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  __int128 v4;
  __int128 v5;

  v4 = *(_OWORD *)(a1 + 224);
  v5 = *(_OWORD *)(a1 + 240);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 112), *(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128), *(_QWORD *)(a1 + 136), *(_QWORD *)(a1 + 144),
    *(_QWORD *)(a1 + 152),
    *(_QWORD *)(a1 + 160),
    *(_QWORD *)(a1 + 168),
    *(_QWORD *)(a1 + 176),
    *(_QWORD *)(a1 + 184),
    *(_QWORD *)(a1 + 192),
    *(_QWORD *)(a1 + 200),
    *(_QWORD *)(a1 + 208),
    *(_QWORD *)(a1 + 216),
    v4,
    *((_QWORD *)&v4 + 1),
    v5,
    *((_QWORD *)&v5 + 1),
    *(_QWORD *)(a1 + 256),
    *(_QWORD *)(a1 + 264));
  return a1;
}

double sub_100038D50(_OWORD *a1)
{
  double result;

  result = 0.0;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_100038D7C()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  unint64_t v2;
  uint64_t v4;
  ValueMetadata *v5;
  unint64_t v6;
  unint64_t v7;

  v0 = sub_100007FAC(&qword_1003188B0);
  v4 = sub_100007FAC(&qword_1003188A8);
  v5 = (ValueMetadata *)sub_100007FAC(&qword_1003188D0);
  v6 = sub_1000382D8();
  v7 = sub_10003838C();
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
  v2 = sub_1000383F4();
  v4 = v0;
  v5 = &type metadata for QuestionnaireState.Stage;
  v6 = OpaqueTypeConformance2;
  v7 = v2;
  return swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

void *sub_100038E28(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess(v1+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscript, a1, 33, 0);
  return &j__swift_endAccess;
}

_QWORD *sub_100038E70()
{
  _QWORD *v0;

  sub_10003B54C();
  swift_bridgeObjectRelease(v0[3]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[5]);
  swift_bridgeObjectRelease(v0[6]);
  sub_100007FF0((uint64_t)v0+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_itemIdToScrollTo, &qword_100316EB0);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscript));
  sub_10003DADC(*(_QWORD *)((char *)v0+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscriptItemInFlight), *(_QWORD *)((char *)v0+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscriptItemInFlight+ 8), *(_QWORD *)((char *)v0+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscriptItemInFlight+ 16), *(_QWORD *)((char *)v0+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscriptItemInFlight+ 24));
  sub_100025CF8((uint64_t)v0+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_progressDelegate);
  swift_bridgeObjectRelease(*(_QWORD *)((char *)v0
                                      + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_messagesInProgress));
  objc_release(*(id *)((char *)v0
                     + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_oneSecondTimer));
  return v0;
}

uint64_t sub_100038F18()
{
  _QWORD *v0;

  v0 = sub_100038E70();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

void sub_100038F38(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  NSObject *oslog;
  int v8;
  uint64_t v9;

  *(_BYTE *)(v1
           + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_connected) = a1;
  if (qword_100315860 != -1)
    swift_once(&qword_100315860, sub_1000D96D0);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10000D744(v3, (uint64_t)qword_10033FDD8);
  oslog = Logger.logObject.getter(v4);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v6 = 67240192;
    v8 = a1 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v6 + 4, v6 + 8);
    _os_log_impl((void *)&_mh_execute_header, oslog, v5, "onConnectionStateChange: connected = %{BOOL,public}d", v6, 8u);
    swift_slowDealloc(v6, -1, -1);

  }
  else
  {

  }
}

void sub_100039064()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  __n128 v28;
  void *v29;
  uint64_t v30;
  void *v31;
  __n128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t aBlock[5];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&aBlock[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&aBlock[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v0 + 16))
  {
    if (qword_100315860 != -1)
      swift_once(&qword_100315860, sub_1000D96D0);
    v12 = type metadata accessor for Logger(0);
    sub_10000D744(v12, (uint64_t)qword_10033FDD8);
    v14 = swift_retain_n(v0, v13);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      aBlock[0] = v18;
      v19.n128_u64[0] = 136446210;
      *(_DWORD *)v17 = 136446210;
      LOBYTE(v39) = *(_BYTE *)(v1 + 16);
      v20 = String.init<A>(describing:)(&v39, &type metadata for MessageChatSimulationTranscriptState, v19);
      v22 = v21;
      v39 = sub_100172BEC(v20, v21, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v17 + 4, v17 + 12);
      swift_release_n(v1);
      swift_bridgeObjectRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Message simulation: transcriptState is not .inactive (%{public}s, ignoring onReadyToStartSimulation", v17, 0xCu);
      swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1, -1);
      swift_slowDealloc(v17, -1, -1);

    }
    else
    {

      swift_release_n(v1);
    }
  }
  else
  {
    *(_BYTE *)(v0 + 16) = 1;
    if (qword_100315860 != -1)
      swift_once(&qword_100315860, sub_1000D96D0);
    v23 = type metadata accessor for Logger(0);
    v24 = sub_10000D744(v23, (uint64_t)qword_10033FDD8);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Message simulation: clients are ready to start", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    sub_10000D75C();
    v29 = (void *)static OS_dispatch_queue.main.getter(v28);
    v30 = swift_allocObject(&unk_1002E6A78, 24, 7);
    swift_weakInit(v30 + 16);
    aBlock[4] = (uint64_t)sub_10003E740;
    v38 = v30;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1001BAACC;
    aBlock[3] = (uint64_t)&unk_1002E6B58;
    v31 = _Block_copy(aBlock);
    swift_release(v38);
    static DispatchQoS.unspecified.getter(v32);
    aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
    v33 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v34 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v35 = sub_10003E608();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v34, v35, v2, v33);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0, v11, v6, v31);
    _Block_release(v31);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  }
}

uint64_t sub_100039478(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17[24];
  char v18[24];
  char v19[24];

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v17[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  a1 += 16;
  swift_beginAccess(a1, v19, 0, 0);
  result = swift_weakLoadStrong(a1);
  if (result)
  {
    v8 = result;
    swift_beginAccess(result + 32, v18, 0, 0);
    v9 = *(_QWORD *)(v8 + 32);
    if ((unint64_t)v9 >> 62)
    {
      if (v9 < 0)
        v14 = *(_QWORD *)(v8 + 32);
      else
        v14 = v9 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(*(_QWORD *)(v8 + 32));
      v15 = _CocoaArrayWrapper.endIndex.getter(v14);
      swift_bridgeObjectRelease(v9);
      if (v15)
        return swift_release(v8);
    }
    else if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      return swift_release(v8);
    }
    v10 = sub_10003DEC8();
    v11 = (uint64_t *)(v8
                    + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscript);
    swift_beginAccess(v8+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscript, v17, 1, 0);
    v12 = *v11;
    *v11 = v10;
    swift_bridgeObjectRelease(v12);
    UUID.init()(v13);
    sub_1000395D0((uint64_t)v6, 0, 0xE000000000000000, 1);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    return swift_release(v8);
  }
  return result;
}

void sub_1000395D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  NSObject *v4;
  NSObject *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  uint8_t *v56;
  __n128 v57;
  unint64_t *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t isa;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  __n128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t *v83;
  __n128 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  __n128 v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  Class v95;
  uint64_t Strong;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __n128 v100;
  uint64_t v101;
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  __n128 v111;
  uint64_t v112;
  char *v113;
  unint64_t v114;
  uint64_t v115;
  __n128 v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __n128 v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __n128 v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  NSObject *v133;
  os_log_type_t v134;
  uint8_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  __n128 v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t *v144;
  uint64_t v145;
  int64_t v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  id v165;
  char *v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  void *v172;
  Swift::Int v173;
  Swift::String v174;
  void *object;
  id v176;
  NSString v177;
  double v178;
  id v179;
  uint64_t v180;
  id v181;
  double v182;
  double v183;
  BOOL v184;
  id v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  NSObject *v189;
  os_log_type_t v190;
  uint8_t *v191;
  id v192;
  double v193;
  double v194;
  uint64_t v195;
  double v196;
  uint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t *v202;
  NSObject *v203;
  os_log_type_t v204;
  uint8_t *v205;
  int *v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  unint64_t v210;
  char v211;
  unint64_t v212;
  unint64_t v213;
  __n128 v214;
  char v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  __n128 v221;
  uint64_t v222;
  uint64_t v223;
  __n128 v224;
  uint64_t v225;
  uint64_t v226;
  __n128 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  _QWORD *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  char *v239;
  uint64_t v240;
  uint64_t v241;
  uint8_t *v242;
  NSObject *v243;
  unint64_t *v244;
  char *v245;
  uint64_t v246;
  int v247;
  uint64_t v248;
  void (*v249)(char *, uint64_t, uint64_t, __n128);
  uint64_t v250;
  __int128 v251;
  NSObject *v252;
  unint64_t v253;
  _OWORD v254[2];
  __int128 v255;
  void *v256;
  char v257[8];
  char v258[8];

  v5 = v4;
  v247 = a4;
  *((_QWORD *)&v251 + 1) = a3;
  *(_QWORD *)&v251 = a2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v228 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v246 = type metadata accessor for MessageSimulationEngineImplementation.MessageProgress(0);
  v12 = *(_QWORD *)(v246 - 8);
  v14 = __chkstk_darwin(v246, v13);
  v16 = (char *)&v228 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v228 - v18;
  v20 = sub_100003DB8(&qword_100318E20);
  __chkstk_darwin(v20, v21);
  v242 = (uint8_t *)&v228 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v241 = type metadata accessor for String.Encoding(0);
  v240 = *(_QWORD *)(v241 - 8);
  __chkstk_darwin(v241, v23);
  v239 = (char *)&v228 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100003DB8(&qword_100316EB0);
  v27 = __chkstk_darwin(v25, v26);
  v29 = (char *)&v228 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27, v30);
  v245 = (char *)&v228 - v31;
  v32 = type metadata accessor for UUID(0);
  v34 = __chkstk_darwin(v32, v33);
  v36 = __chkstk_darwin(v34, v35);
  __chkstk_darwin(v36, v37);
  if (LOBYTE(v5[2].isa) != 1)
  {
    if (qword_100315860 != -1)
      goto LABEL_94;
    goto LABEL_13;
  }
  v236 = (char *)&v228 - v38;
  v237 = v29;
  v235 = v41;
  v244 = v40;
  v229 = v39;
  v250 = a1;
  v231 = v16;
  v232 = v11;
  v233 = v8;
  v234 = v7;
  v243 = v5 + 4;
  swift_beginAccess(&v5[4], v258, 0, 0);
  swift_bridgeObjectRetain(v5[4].isa);
  sub_10003ABA0(v42);
  v44 = v43;
  v45 = *(_QWORD *)(v43 + 16);
  v252 = v5;
  v238 = v12;
  v248 = v32;
  v46 = *((_QWORD *)&v251 + 1);
  if (!v45)
    goto LABEL_19;
  v47 = 40;
  while (1)
  {
    v51 = *(_QWORD *)(v44 + v47);
    if (*(_BYTE *)(v51 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_sender) == 1)
      goto LABEL_7;
    v52 = OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_status;
    if (*(_BYTE *)(v51 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_status))
      break;
    v48 = 0x676E69646E6573;
    v49 = 0xE700000000000000;
LABEL_5:
    v50 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v49, 1701736302, 0xE400000000000000, 0);
    swift_retain(v51);
    swift_bridgeObjectRelease(v49);
    if ((v50 & 1) != 0)
    {
      swift_release(v51);
      goto LABEL_18;
    }
    *(_BYTE *)(v51 + v52) = 2;
    swift_release(v51);
LABEL_7:
    v47 += 16;
    if (!--v45)
      goto LABEL_18;
  }
  if (*(_BYTE *)(v51 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_status) == 1)
  {
    v49 = 0xE400000000000000;
    v48 = 1953391987;
    goto LABEL_5;
  }
  swift_bridgeObjectRelease(v44);
  v44 = 0xE400000000000000;
LABEL_18:
  v46 = *((_QWORD *)&v251 + 1);
  v5 = v252;
  v32 = v248;
LABEL_19:
  v57 = swift_bridgeObjectRelease(v44);
  v58 = v244;
  v59 = v236;
  v249 = (void (*)(char *, uint64_t, uint64_t, __n128))v244[2];
  v249(v236, v250, v32, v57);
  v60 = type metadata accessor for TryOutTranscriptMessageItem(0);
  v61 = swift_allocObject(v60, *(unsigned int *)(v60 + 48), *(unsigned __int16 *)(v60 + 52));
  v62 = v61 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_content;
  *(_QWORD *)v62 = 0;
  *(_QWORD *)(v62 + 8) = 0;
  *(_QWORD *)(v62 + 16) = v251;
  *(_QWORD *)(v62 + 24) = v46;
  *(_BYTE *)(v62 + 32) = v247 & 1;
  *(_BYTE *)(v61 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_sender) = 0;
  *(_BYTE *)(v61 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_status) = 2;
  *(_BYTE *)(v61 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_lastConsecutiveMessage) = 1;
  *(_BYTE *)(v61 + 16) = 2;
  ((void (*)(uint64_t, char *, uint64_t))v58[4])(v61 + OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id, v59, v32);
  *(_BYTE *)(v61 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_status) = 0;
  v63 = v243;
  swift_beginAccess(v243, &v255, 33, 0);
  swift_bridgeObjectRetain(v46);
  swift_retain(v61);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v64);
  v66 = *(_QWORD *)(((uint64_t)v63->isa & 0xFFFFFFFFFFFFFF8) + 0x10);
  v65 = *(_QWORD *)(((uint64_t)v63->isa & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v66 >= v65 >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v65 > 1, v66 + 1, 1);
  v67 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v66, v61);
  specialized Array._endMutation()(v67);
  v68 = swift_endAccess(&v255);
  v69 = (uint64_t)v245;
  v249(v245, v61 + OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id, v32, v68);
  ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v58[7])(v69, 0, 1, v32);
  v70 = (uint64_t)v237;
  sub_10000B458(v69, (uint64_t)v237, &qword_100316EB0);
  v71 = (uint64_t)v5
      + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_itemIdToScrollTo;
  swift_beginAccess((char *)v5+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_itemIdToScrollTo, &v255, 33, 0);
  sub_10000D7E0(v70, v71);
  swift_endAccess(&v255);
  isa = (uint64_t)v5[4].isa;
  if ((unint64_t)isa >> 62)
  {
    if (isa < 0)
      v218 = (uint64_t)v5[4].isa;
    else
      v218 = isa & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v5[4].isa);
    v73 = _CocoaArrayWrapper.endIndex.getter(v218);
  }
  else
  {
    v73 = *(_QWORD *)((isa & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v5[4].isa);
  }
  v230 = v61;
  if (v73)
  {
    if (v73 >= 1)
    {
      v74 = 0;
      v75 = 0;
      while ((isa & 0xC000000000000001) == 0)
      {
        v76 = *(_QWORD *)(isa + 8 * v75 + 32);
        swift_retain(v76);
        if (v74)
          goto LABEL_31;
LABEL_26:
        ++v75;
        *(_BYTE *)(v76 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_lastConsecutiveMessage) = 1;
        v74 = v76;
        if (v73 == v75)
          goto LABEL_33;
      }
      v76 = specialized _ArrayBuffer._getElementSlowPath(_:)(v75, isa);
      if (!v74)
        goto LABEL_26;
LABEL_31:
      *(_BYTE *)(v74 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_lastConsecutiveMessage) = (*(_BYTE *)(v74 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_sender) ^ *(_BYTE *)(v76 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_sender)) & 1;
      swift_release(v74);
      goto LABEL_26;
    }
    goto LABEL_112;
  }
  v76 = 0;
LABEL_33:
  swift_bridgeObjectRelease(isa);
  swift_release(v76);
  v78 = (uint64_t)v252[3].isa;
  if ((unint64_t)v78 >> 62)
  {
    if (v78 < 0)
      v219 = (uint64_t)v252[3].isa;
    else
      v219 = v78 & 0xFFFFFFFFFFFFFF8;
    v220 = type metadata accessor for TryOutTranscriptItem(0);
    v221 = swift_bridgeObjectRetain(v78);
    v80 = _bridgeCocoaArray<A>(_:)(v219, v220, v221);
  }
  else
  {
    v79 = swift_bridgeObjectRetain_n(v252[3].isa, 2, v77);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v79);
    type metadata accessor for TryOutTranscriptItem(0);
    v80 = v78;
  }
  v81 = v250;
  v82 = v235;
  v83 = (uint64_t *)v243;
  v84 = swift_bridgeObjectRelease(v78);
  v85 = *v83;
  if ((unint64_t)*v83 >> 62)
  {
    if (v85 < 0)
      v222 = *v83;
    else
      v222 = v85 & 0xFFFFFFFFFFFFFF8;
    v223 = type metadata accessor for TryOutTranscriptItem(0);
    v224 = swift_bridgeObjectRetain(v85);
    v87 = _bridgeCocoaArray<A>(_:)(v222, v223, v224);
  }
  else
  {
    v86 = swift_bridgeObjectRetain_n(*v83, 2, v84);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v86);
    type metadata accessor for TryOutTranscriptItem(0);
    v87 = v85;
  }
  v88 = v248;
  swift_bridgeObjectRelease(v85);
  *(_QWORD *)&v255 = v80;
  sub_1000EC644(v87);
  v90 = v255;
  v91 = (uint64_t)v252[5].isa;
  if ((unint64_t)v91 >> 62)
  {
    if (v91 < 0)
      v225 = (uint64_t)v252[5].isa;
    else
      v225 = v91 & 0xFFFFFFFFFFFFFF8;
    v226 = type metadata accessor for TryOutTranscriptItem(0);
    v227 = swift_bridgeObjectRetain(v91);
    v93 = _bridgeCocoaArray<A>(_:)(v225, v226, v227);
  }
  else
  {
    v92 = swift_bridgeObjectRetain_n(v252[5].isa, 2, v89);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v92);
    type metadata accessor for TryOutTranscriptItem(0);
    v93 = v91;
  }
  swift_bridgeObjectRelease(v91);
  *(_QWORD *)&v255 = v90;
  sub_1000EC644(v93);
  v94 = v252;
  v95 = v252[6].isa;
  v252[6].isa = (Class)v255;
  swift_bridgeObjectRelease(v95);
  Strong = swift_unknownObjectWeakLoadStrong((char *)v94+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_progressDelegate);
  if (Strong)
  {
    v97 = Strong;
    sub_100237F48();
    swift_unknownObjectRelease(v97);
  }
  if (qword_100315860 != -1)
    swift_once(&qword_100315860, sub_1000D96D0);
  v98 = type metadata accessor for Logger(0);
  v99 = sub_10000D744(v98, (uint64_t)qword_10033FDD8);
  v100.n128_f64[0] = ((double (*)(uint64_t, uint64_t, uint64_t))v249)(v82, v81, v88);
  v101 = *((_QWORD *)&v251 + 1);
  v102 = swift_bridgeObjectRetain_n(*((_QWORD *)&v251 + 1), 2, v100);
  v245 = (char *)v99;
  v103 = Logger.logObject.getter(v102);
  v104 = static os_log_type_t.default.getter(v103);
  if (os_log_type_enabled(v103, v104))
  {
    v105 = swift_slowAlloc(22, -1);
    v106 = swift_slowAlloc(32, -1);
    *(_QWORD *)&v254[0] = v106;
    *(_DWORD *)v105 = 136446466;
    v107 = sub_1000052EC(&qword_100316EB8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
    v108 = dispatch thunk of CustomStringConvertible.description.getter(v88, v107);
    v110 = v109;
    *(_QWORD *)&v255 = sub_100172BEC(v108, v109, (uint64_t *)v254);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, (char *)&v255 + 8, v105 + 4, v105 + 12);
    v111 = swift_bridgeObjectRelease(v110);
    v243 = v244[1];
    v112 = ((uint64_t (*)(uint64_t, uint64_t, __n128))v243)(v82, v88, v111);
    *(_WORD *)(v105 + 12) = 2050;
    *(_QWORD *)&v255 = v251;
    *((_QWORD *)&v255 + 1) = v101;
    v113 = v239;
    static String.Encoding.utf8.getter(v112);
    v114 = sub_10002B3F4();
    v115 = StringProtocol.lengthOfBytes(using:)(v113, &type metadata for String, v114);
    (*(void (**)(char *, uint64_t))(v240 + 8))(v113, v241);
    swift_bridgeObjectRelease(v101);
    *(_QWORD *)&v255 = v115;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, (char *)&v255 + 8, v105 + 14, v105 + 22);
    swift_bridgeObjectRelease(v101);
    _os_log_impl((void *)&_mh_execute_header, v103, v104, "Message simulation: new message %{public}s of %{public}ld bytes", (uint8_t *)v105, 0x16u);
    swift_arrayDestroy(v106, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v106, -1, -1);
    swift_slowDealloc(v105, -1, -1);

  }
  else
  {
    v116 = swift_bridgeObjectRelease(v101);
    v243 = v244[1];
    ((void (*)(uint64_t, uint64_t, __n128))v243)(v82, v88, v116);

    swift_bridgeObjectRelease(v101);
  }
  v117 = v238;
  v118 = (unint64_t *)((char *)v252
                            + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_messagesInProgress);
  swift_beginAccess((char *)v252+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_messagesInProgress, v257, 0, 0);
  v119 = *v118;
  v120 = *(_QWORD *)(*v118 + 16);
  v121 = v250;
  if (v120)
  {
    v122 = v119 + ((*(unsigned __int8 *)(v117 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80));
    v123 = *(_QWORD *)(v117 + 72);
    swift_bridgeObjectRetain(*v118);
    while (1)
    {
      sub_10003E40C(v122, (uint64_t)v19);
      if ((static UUID.== infix(_:_:)(v19, v121) & 1) != 0)
        break;
      sub_10003E450((uint64_t)v19);
      v122 += v123;
      if (!--v120)
        goto LABEL_52;
    }
    v126 = (uint64_t)v242;
    sub_10003E4CC((uint64_t)v19, (uint64_t)v242);
    v125 = 0;
  }
  else
  {
    v124 = swift_bridgeObjectRetain(*v118);
LABEL_52:
    v125 = 1;
    v126 = (uint64_t)v242;
  }
  v127 = v246;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v117 + 56))(v126, v125, 1, v246, v124);
  v128 = swift_bridgeObjectRelease(v119);
  LODWORD(v127) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __n128))(v117 + 48))(v126, 1, v127, v128);
  v129 = sub_100007FF0(v126, &qword_100318E20);
  v244 = v118;
  if ((_DWORD)v127 != 1)
  {
    v130 = v229;
    v131 = v248;
    v132 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v249)(v229, v121, v248);
    v133 = Logger.logObject.getter(v132);
    v134 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v133, v134))
    {
      v135 = (uint8_t *)swift_slowAlloc(12, -1);
      v136 = swift_slowAlloc(32, -1);
      *(_QWORD *)&v255 = v136;
      *(_DWORD *)v135 = 136446210;
      v242 = v135 + 4;
      v137 = sub_1000052EC(&qword_100316EB8, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v138 = dispatch thunk of CustomStringConvertible.description.getter(v131, v137);
      v140 = v139;
      *(_QWORD *)&v254[0] = sub_100172BEC(v138, v139, (uint64_t *)&v255);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v254, (char *)v254 + 8, v242, v135 + 12);
      v141 = swift_bridgeObjectRelease(v140);
      ((void (*)(uint64_t, uint64_t, __n128))v243)(v130, v131, v141);
      _os_log_impl((void *)&_mh_execute_header, v133, v134, "Message simulation: message %{public}s is already pending", v135, 0xCu);
      swift_arrayDestroy(v136, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v136, -1, -1);
      swift_slowDealloc(v135, -1, -1);
    }
    else
    {
      ((void (*)(uint64_t, uint64_t))v243)(v130, v131);
    }

    __chkstk_darwin(v142, v143);
    *(&v228 - 2) = v121;
    v144 = v244;
    swift_beginAccess(v244, &v255, 33, 0);
    sub_1001905A4((uint64_t (*)(unint64_t, __n128))sub_10003E714);
    v146 = *(_QWORD *)(*v144 + 16);
    if (v146 < v145)
LABEL_113:
      __break(1u);
    sub_100192550(v145, v146);
    swift_endAccess(&v255);
  }
  if ((v247 & 1) != 0)
  {
    v147 = sub_10022499C((uint64_t)_swiftEmptyArrayStorage);
    v148 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieConversationIDKey);
    v150 = v149;
    v256 = &type metadata for Int;
    *(_QWORD *)&v255 = 0;
    sub_10003E704(&v255, v254);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v147);
    v253 = v147;
    sub_10020CAD4(v254, v148, v150, isUniquelyReferenced_nonNull_native);
    v152 = v253;
    swift_bridgeObjectRelease(v150);
    swift_bridgeObjectRelease(0x8000000000000000);
    v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieNotifyOptionKey);
    v155 = v154;
    v256 = &type metadata for Int;
    *(_QWORD *)&v255 = 1;
    sub_10003E704(&v255, v254);
    v156 = swift_isUniquelyReferenced_nonNull_native(v152);
    v253 = v152;
    sub_10020CAD4(v254, v153, v155, v156);
    v157 = v253;
    swift_bridgeObjectRelease(v155);
    swift_bridgeObjectRelease(0x8000000000000000);
    v158 = static String._unconditionallyBridgeFromObjectiveC(_:)(kCTStewieShareEEDKey);
    v160 = v159;
    v256 = &type metadata for Bool;
    LOBYTE(v255) = 1;
    sub_10003E704(&v255, v254);
    v161 = swift_isUniquelyReferenced_nonNull_native(v157);
    v253 = v157;
    sub_10020CAD4(v254, v158, v160, v161);
    v162 = v253;
    swift_bridgeObjectRelease(v160);
    swift_bridgeObjectRelease(0x8000000000000000);
    sub_10013E7A0(v162);
    v164 = v163;
    swift_bridgeObjectRelease(v162);
    v165 = objc_allocWithZone((Class)CTStewieEmergencyStartMessage);
    v192 = sub_10003DB0C(v164);
    objc_msgSend(v192, "estimatedSendTime");
    v194 = v193;

    v196 = ceil(v194);
LABEL_78:
    v197 = v234;
    v198 = v233;
    v199 = v232;
    v200 = v238;
    v201 = (uint64_t)v231;
    v202 = v244;
    if (v196 <= 0.0)
      v196 = 1.0;
    v203 = Logger.logObject.getter(v195);
    v204 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v203, v204))
    {
      v205 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v205 = 134349056;
      *(double *)&v255 = v196;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v255, (char *)&v255 + 8, v205 + 4, v205 + 12);
      _os_log_impl((void *)&_mh_execute_header, v203, v204, "Message simulation: estimatedSendingTime = %{public}f", v205, 0xCu);
      swift_slowDealloc(v205, -1, -1);
    }

    ((void (*)(uint64_t, uint64_t, uint64_t))v249)(v201, v250, v248);
    v206 = (int *)v246;
    v207 = *((_QWORD *)&v251 + 1);
    swift_bridgeObjectRetain(*((_QWORD *)&v251 + 1));
    static DispatchTime.now()(v208);
    v209 = (_QWORD *)(v201 + v206[5]);
    *v209 = v251;
    v209[1] = v207;
    *(double *)(v201 + v206[7]) = v196;
    *(double *)(v201 + v206[8]) = v196;
    swift_beginAccess(v202, &v255, 33, 0);
    v210 = *v202;
    v211 = swift_isUniquelyReferenced_nonNull_native(*v202);
    *v202 = v210;
    if ((v211 & 1) == 0)
    {
      v210 = sub_100171C9C(0, *(_QWORD *)(v210 + 16) + 1, 1, v210);
      *v202 = v210;
    }
    v213 = *(_QWORD *)(v210 + 16);
    v212 = *(_QWORD *)(v210 + 24);
    if (v213 >= v212 >> 1)
    {
      v210 = sub_100171C9C(v212 > 1, v213 + 1, 1, v210);
      *v202 = v210;
    }
    *(_QWORD *)(v210 + 16) = v213 + 1;
    sub_10003E4CC(v201, v210+ ((*(unsigned __int8 *)(v200 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v200 + 80))+ *(_QWORD *)(v200 + 72) * v213);
    swift_endAccess(&v255);
    sub_10000D75C();
    *v199 = static OS_dispatch_queue.main.getter(v214);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v198 + 104))(v199, enum case for DispatchPredicate.onQueue(_:), v197);
    v215 = _dispatchPreconditionTest(_:)(v199);
    (*(void (**)(_QWORD *, uint64_t))(v198 + 8))(v199, v197);
    if ((v215 & 1) != 0)
    {
      if (*(_QWORD *)(*v202 + 16))
      {
        v216 = v230;
        if (!*(Class *)((char *)&v252->isa
                       + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_oneSecondTimer))
          sub_10003B2C8();
        v217 = v216;
      }
      else
      {
        sub_10003B54C();
        v217 = v230;
      }
      swift_release(v217);
      return;
    }
    __break(1u);
LABEL_112:
    __break(1u);
    goto LABEL_113;
  }
  v255 = v251;
  v166 = v239;
  static String.Encoding.utf8.getter(v129);
  v167 = sub_10002B3F4();
  v168 = StringProtocol.lengthOfBytes(using:)(v166, &type metadata for String, v167);
  (*(void (**)(char *, uint64_t))(v240 + 8))(v166, v241);
  if (v168 >= 0)
    v169 = v168;
  else
    v169 = v168 + 1;
  v170 = v169 >> 1;
  if (v168 <= 1)
    v171 = 1;
  else
    v171 = v170;
  v172 = (void *)objc_opt_self(CTStewieEmergencyTextMessage);
  v196 = 0.0;
  while (1)
  {
    v173 = v171;
    if ((uint64_t)objc_msgSend(v172, "maxLengthInBytesForOutgoingText") < v171)
      v173 = (Swift::Int)objc_msgSend(v172, "maxLengthInBytesForOutgoingText");
    v174._countAndFlagsBits = 97;
    v174._object = (void *)0xE100000000000000;
    object = String.init(repeating:count:)(v174, v173)._object;
    v176 = objc_allocWithZone((Class)CTStewieEmergencyTextMessage);
    v177 = String._bridgeToObjectiveC()();
    *(_QWORD *)&v178 = swift_bridgeObjectRelease(object).n128_u64[0];
    *(_QWORD *)&v255 = 0;
    v179 = objc_msgSend(v176, "initWithConversationID:sequenceNum:emergencyText:error:", 0, 0, v177, &v255, v178);

    v180 = v255;
    if (!v179)
    {
      v185 = (id)v255;
      v186 = _convertNSErrorToError(_:)(v180);

      v188 = swift_willThrow(v187);
      v189 = Logger.logObject.getter(v188);
      v190 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v189, v190))
      {
        v191 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v191 = 0;
        _os_log_impl((void *)&_mh_execute_header, v189, v190, "Message simulation: failed to create CTStewieEmergencyTextMessage instance", v191, 2u);
        swift_slowDealloc(v191, -1, -1);
      }
      swift_errorRelease(v186);

      goto LABEL_78;
    }
    v181 = (id)v255;
    objc_msgSend(v179, "estimatedSendTime");
    v183 = v182;

    v184 = __OFSUB__(v171, v173);
    v171 -= v173;
    if (v184)
      break;
    v196 = v196 + ceil(v183);
    if (v171 <= 0)
      goto LABEL_78;
  }
  __break(1u);
LABEL_94:
  swift_once(&qword_100315860, sub_1000D96D0);
LABEL_13:
  v53 = type metadata accessor for Logger(0);
  v54 = sub_10000D744(v53, (uint64_t)qword_10033FDD8);
  v252 = Logger.logObject.getter(v54);
  v55 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v252, v55))
  {
    v56 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v56 = 0;
    _os_log_impl((void *)&_mh_execute_header, v252, v55, "Ignoring new message in not .inProgress state", v56, 2u);
    swift_slowDealloc(v56, -1, -1);
  }

}

void sub_10003ABA0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;

  sub_10003DBF0(a1);
  v3 = v2;
  v4 = v2[2];
  swift_bridgeObjectRelease(a1);
  if (v4 < 2)
    return;
  v5 = 0;
  v6 = v4 >> 1;
  v7 = v4 - 1;
  v8 = 2 * v4;
  v9 = 5;
  v17 = v4 >> 1;
  while (1)
  {
    if (v5 == v7)
      goto LABEL_4;
    v10 = v3[2];
    if (v5 >= v10)
      break;
    if (v7 >= v10)
      goto LABEL_13;
    v12 = v3[v9 - 1];
    v11 = v3[v9];
    v14 = v3[v8 + 2];
    v13 = v3[v8 + 3];
    swift_retain(v11);
    swift_retain(v13);
    if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      v3 = sub_100190E60(v3);
    v15 = &v3[v9];
    swift_release(v3[v9]);
    *(v15 - 1) = v14;
    *v15 = v13;
    if (v7 >= v3[2])
      goto LABEL_14;
    v16 = &v3[v8];
    swift_release(v3[v8 + 3]);
    v16[2] = v12;
    v16[3] = v11;
    v6 = v17;
LABEL_4:
    ++v5;
    v9 += 2;
    --v7;
    v8 -= 2;
    if (v6 == v5)
      return;
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
}

uint64_t sub_10003ACD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, uint64_t, uint64_t);
  void (*v31)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(uint64_t, uint64_t, uint64_t);
  char *v35;
  uint64_t result;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  __n128 v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  char *v49;
  __n128 v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  void (*v57)(char *, uint64_t, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _QWORD aBlock[5];
  uint64_t v69;
  char v70[32];

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v65 = *(_QWORD *)(v4 - 8);
  v66 = v4;
  __chkstk_darwin(v4, v5);
  v64 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v62 = *(_QWORD *)(v7 - 8);
  v63 = v7;
  __chkstk_darwin(v7, v8);
  v61 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UUID(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v58 = v13;
  v67 = (char *)&v56 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003DB8(&qword_100316EA8);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003DB8(&qword_100316EB0);
  __chkstk_darwin(v18, v19);
  v56 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v56 - v23;
  v27 = __chkstk_darwin(v25, v26);
  v29 = (char *)&v56 - v28;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  v60 = a1;
  v57 = v30;
  ((void (*)(char *, uint64_t, uint64_t, double))v30)((char *)&v56 - v28, a1, v10, v27);
  v31 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v31(v29, 0, 1, v10);
  v59 = v2;
  v32 = v2
      + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_itemIdToScrollTo;
  swift_beginAccess(v2+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_itemIdToScrollTo, v70, 0, 0);
  v33 = (uint64_t)&v17[*(int *)(v14 + 48)];
  sub_10000B234((uint64_t)v29, (uint64_t)v17, &qword_100316EB0);
  sub_10000B234(v32, v33, &qword_100316EB0);
  v34 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v34((uint64_t)v17, 1, v10) != 1)
  {
    sub_10000B234((uint64_t)v17, (uint64_t)v24, &qword_100316EB0);
    if (v34(v33, 1, v10) != 1)
    {
      v35 = v67;
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v67, v33, v10);
      v37 = sub_1000052EC(&qword_100316EC0, (uint64_t (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
      v38 = dispatch thunk of static Equatable.== infix(_:_:)(v24, v35, v10, v37);
      v39 = *(void (**)(char *, uint64_t))(v11 + 8);
      v39(v35, v10);
      sub_100007FF0((uint64_t)v29, &qword_100316EB0);
      v39(v24, v10);
      result = sub_100007FF0((uint64_t)v17, &qword_100316EB0);
      if ((v38 & 1) == 0)
        return result;
      goto LABEL_8;
    }
    sub_100007FF0((uint64_t)v29, &qword_100316EB0);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v24, v10);
    return sub_100007FF0((uint64_t)v17, &qword_100316EA8);
  }
  sub_100007FF0((uint64_t)v29, &qword_100316EB0);
  if (v34(v33, 1, v10) != 1)
    return sub_100007FF0((uint64_t)v17, &qword_100316EA8);
  sub_100007FF0((uint64_t)v17, &qword_100316EB0);
  v35 = v67;
LABEL_8:
  v40 = (uint64_t)v56;
  v31(v56, 1, 1, v10);
  swift_beginAccess(v32, aBlock, 33, 0);
  sub_10000D7E0(v40, v32);
  swift_endAccess(aBlock);
  sub_10000D75C();
  v42 = (void *)static OS_dispatch_queue.main.getter(v41);
  v43 = swift_allocObject(&unk_1002E6A78, 24, 7);
  swift_weakInit(v43 + 16);
  v57(v35, v60, v10);
  v44 = *(unsigned __int8 *)(v11 + 80);
  v45 = v35;
  v46 = (v44 + 24) & ~v44;
  v47 = swift_allocObject(&unk_1002E6B18, v46 + v58, v44 | 7);
  *(_QWORD *)(v47 + 16) = v43;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v47 + v46, v45, v10);
  aBlock[4] = sub_10003E6D4;
  v69 = v47;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002E6B30;
  v48 = _Block_copy(aBlock);
  swift_release(v69);
  v49 = v61;
  static DispatchQoS.unspecified.getter(v50);
  aBlock[0] = _swiftEmptyArrayStorage;
  v51 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v52 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v53 = sub_10003E608();
  v54 = v64;
  v55 = v66;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v52, v53, v66, v51);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v49, v54, v48);
  _Block_release(v48);

  (*(void (**)(char *, uint64_t))(v65 + 8))(v54, v55);
  return (*(uint64_t (**)(char *, uint64_t))(v62 + 8))(v49, v63);
}

double sub_10003B228(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t Strong;
  double result;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = swift_weakLoadStrong(v3);
  if (Strong)
  {
    v6 = Strong;
    v7 = swift_unknownObjectWeakLoadStrong(Strong+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_progressDelegate);
    swift_release(v6);
    if (v7)
    {
      type metadata accessor for TryOutModel(0);
      sub_100238D38(a2);
      *(_QWORD *)&result = swift_unknownObjectRelease(v7).n128_u64[0];
    }
  }
  return result;
}

void sub_10003B2C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  void *v9;
  uint64_t v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _QWORD aBlock[5];
  uint64_t v20;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (_QWORD *)((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    v9 = (void *)objc_opt_self(NSTimer);
    v10 = swift_allocObject(&unk_1002E6A78, 24, 7);
    swift_weakInit(v10 + 16);
    aBlock[4] = sub_10003E658;
    v20 = v10;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100076C24;
    aBlock[3] = &unk_1002E6AE0;
    v11 = _Block_copy(aBlock);
    swift_release(v20);
    v12 = objc_msgSend(v9, "scheduledTimerWithTimeInterval:repeats:block:", 1, v11, 1.0);
    _Block_release(v11);
    v13 = *(void **)(v1
                   + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_oneSecondTimer);
    *(_QWORD *)(v1
              + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_oneSecondTimer) = v12;

    if (qword_100315860 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315860, sub_1000D96D0);
LABEL_3:
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10000D744(v14, (uint64_t)qword_10033FDD8);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Started one second timer", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

}

uint64_t sub_10003B4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_10003B6D8();
    return swift_release(v4);
  }
  return result;
}

void sub_10003B54C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    v9 = OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_oneSecondTimer;
    objc_msgSend(*(id *)(v1+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_oneSecondTimer), "invalidate");
    v10 = *(void **)(v1 + v9);
    *(_QWORD *)(v1 + v9) = 0;

    if (qword_100315860 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315860, sub_1000D96D0);
LABEL_3:
  v11 = type metadata accessor for Logger(0);
  v12 = sub_10000D744(v11, (uint64_t)qword_10033FDD8);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Canceled one second timer", v15, 2u);
    swift_slowDealloc(v15, -1, -1);
  }

}

void sub_10003B6D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __n128 v45;
  void (*v46)(_QWORD);
  uint64_t v47;
  void (*v48)(unint64_t, uint64_t);
  char isUniquelyReferenced_nonNull_native;
  char *v50;
  double v51;
  double v52;
  uint64_t Strong;
  double v54;
  uint64_t v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  _QWORD *v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  __n128 v76;
  void (*v77)(char *, uint64_t *, uint64_t, __n128);
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __n128 v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  void *v96;
  char *v97;
  __n128 v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t v102;
  void *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  void (*v131)(unint64_t, uint64_t);
  unsigned int v132;
  void (*v133)(uint64_t, _QWORD, void (*)(unint64_t, uint64_t));
  _QWORD *v134;
  void (*v135)(unint64_t, uint64_t);
  unint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  char *v139;
  uint64_t *v140;
  char v141[24];
  _QWORD aBlock[5];
  char *v143;
  char v144[8];
  char v145[8];

  v124 = type metadata accessor for DispatchWorkItemFlags(0);
  v123 = *(_QWORD *)(v124 - 8);
  __chkstk_darwin(v124, v0);
  v122 = (char *)&v111 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for DispatchQoS(0);
  v120 = *(_QWORD *)(v121 - 8);
  __chkstk_darwin(v121, v2);
  v119 = (char *)&v111 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for DispatchTime(0);
  v115 = *(_QWORD *)(v129 - 8);
  v5 = __chkstk_darwin(v129, v4);
  v114 = (char *)&v111 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5, v7);
  v118 = (char *)&v111 - v8;
  v128 = type metadata accessor for UUID(0);
  v127 = *(_QWORD *)(v128 - 8);
  v10 = __chkstk_darwin(v128, v9);
  v117 = (char *)&v111 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = v11;
  __chkstk_darwin(v10, v12);
  v126 = (char *)&v111 - v13;
  v14 = type metadata accessor for MessageSimulationEngineImplementation.MessageProgress(0);
  v15 = *(uint64_t **)(v14 - 8);
  v17 = __chkstk_darwin(v14, v16);
  v137 = (uint64_t *)((char *)&v111 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v17, v19);
  v130 = (uint64_t *)((char *)&v111 - v20);
  v21 = sub_100003DB8(&qword_100318E20);
  v23 = __chkstk_darwin(v21, v22);
  v25 = (uint64_t *)((char *)&v111 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = __chkstk_darwin(v23, v26);
  v29 = (uint64_t *)((char *)&v111 - v28);
  v31 = __chkstk_darwin(v27, v30);
  v125 = (uint64_t)&v111 - v32;
  v34 = __chkstk_darwin(v31, v33);
  v36 = (char *)&v111 - v35;
  __chkstk_darwin(v34, v37);
  v39 = (uint64_t *)((char *)&v111 - v38);
  v40 = type metadata accessor for DispatchPredicate(0);
  v41 = *(_QWORD *)(v40 - 8);
  __chkstk_darwin(v40, v42);
  v44 = (unint64_t)&v111 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = sub_10000D75C();
  *(_QWORD *)v44 = static OS_dispatch_queue.main.getter(v45);
  v46 = *(void (**)(_QWORD))(v41 + 104);
  v132 = enum case for DispatchPredicate.onQueue(_:);
  v133 = (void (*)(uint64_t, _QWORD, void (*)(unint64_t, uint64_t)))v46;
  v46(v44);
  v47 = _dispatchPreconditionTest(_:)(v44);
  v48 = *(void (**)(unint64_t, uint64_t))(v41 + 8);
  v134 = (_QWORD *)v44;
  v135 = (void (*)(unint64_t, uint64_t))v40;
  v48(v44, v40);
  if ((v47 & 1) == 0)
    goto LABEL_59;
  v131 = v48;
  v48 = (void (*)(unint64_t, uint64_t))v15[7];
  v140 = v39;
  ((void (*)(uint64_t *, uint64_t, uint64_t, uint64_t))v48)(v39, 1, 1, v14);
  v138 = (uint64_t *)v36;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v48)(v36, 1, 1, v14);
  v36 = v139;
  v39 = v137;
  if (v139[OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_connected] != 1)
    goto LABEL_12;
  v47 = (uint64_t)&v139[OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_messagesInProgress];
  swift_beginAccess(&v139[OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_messagesInProgress], v141, 0, 0);
  if (!*(_QWORD *)(*(_QWORD *)v47 + 16))
    goto LABEL_12;
  v44 = (*((unsigned __int8 *)v15 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v15 + 80);
  if (*(double *)(*(_QWORD *)v47 + v44 + *(int *)(v14 + 32)) <= 0.0)
  {
    swift_beginAccess(v47, aBlock, 33, 0);
    v40 = v125;
    if (*(_QWORD *)(*(_QWORD *)v47 + 16))
    {
      sub_10003E40C(*(_QWORD *)v47 + v44, v125);
      sub_100192550(0, 1);
      swift_endAccess(aBlock);
      v47 = (uint64_t)v138;
      goto LABEL_11;
    }
  }
  else
  {
    swift_beginAccess(v47, aBlock, 33, 0);
    v36 = *(char **)v47;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(_QWORD *)v47);
    *(_QWORD *)v47 = v36;
    v40 = v125;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_64;
    if (*((_QWORD *)v36 + 2))
    {
      while (1)
      {
        *(double *)&v36[v44 + *(int *)(v14 + 32)] = *(double *)&v36[v44 + *(int *)(v14 + 32)] + -1.0;
        v50 = *(char **)v47;
        swift_endAccess(aBlock);
        if (!*((_QWORD *)v50 + 2))
          goto LABEL_66;
        sub_10003E40C((uint64_t)&v50[v44], v40);
        v47 = (uint64_t)v140;
LABEL_11:
        sub_100007FF0(v47, &qword_100318E20);
        ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v48)(v40, 0, 1, v14);
        sub_10000B458(v40, v47, &qword_100318E20);
        v36 = v139;
LABEL_12:
        sub_10000B234((uint64_t)v140, (uint64_t)v29, &qword_100318E20);
        v48 = (void (*)(unint64_t, uint64_t))v15[6];
        if (((unsigned int (*)(uint64_t *, uint64_t, uint64_t))v48)(v29, 1, v14) == 1)
        {
          sub_100007FF0((uint64_t)v29, &qword_100318E20);
          v29 = v138;
          v44 = (unint64_t)v36;
          goto LABEL_20;
        }
        v15 = v130;
        sub_10003E4CC((uint64_t)v29, (uint64_t)v130);
        v51 = *(double *)((char *)v15 + *(int *)(v14 + 28));
        v52 = *(double *)((char *)v15 + *(int *)(v14 + 32));
        v44 = (unint64_t)v36;
        Strong = swift_unknownObjectWeakLoadStrong(&v36[OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_progressDelegate]);
        v29 = v138;
        if (!Strong)
          goto LABEL_19;
        v54 = ceil((v51 - v52) * 100.0 / v51);
        if ((~*(_QWORD *)&v54 & 0x7FF0000000000000) == 0)
          goto LABEL_61;
        if (v54 > -9.22337204e18)
          break;
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        v36 = (char *)sub_100190E4C((unint64_t)v36);
        *(_QWORD *)v47 = v36;
        if (!*((_QWORD *)v36 + 2))
          goto LABEL_65;
      }
      if (v54 >= 9.22337204e18)
        goto LABEL_63;
      v55 = Strong;
      sub_100238050((uint64_t)v15, (uint64_t)v54);
      swift_unknownObjectRelease(v55);
LABEL_19:
      sub_10003E450((uint64_t)v15);
LABEL_20:
      sub_10000B234((uint64_t)v29, (uint64_t)v25, &qword_100318E20);
      if (((unsigned int (*)(uint64_t *, uint64_t, uint64_t))v48)(v25, 1, v14) == 1)
      {
        sub_100007FF0((uint64_t)v25, &qword_100318E20);
        v15 = v140;
        goto LABEL_52;
      }
      sub_10003E4CC((uint64_t)v25, (uint64_t)v39);
      v25 = (uint64_t *)(v44
                      + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_progressDelegate);
      v57 = swift_unknownObjectWeakLoadStrong(v44+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_progressDelegate);
      if (v57)
      {
        v58 = v57;
        sub_1002383F0((uint64_t)v39);
        swift_unknownObjectRelease(v58);
      }
      swift_beginAccess(v44 + 32, v145, 0, 0);
      swift_bridgeObjectRetain(*(_QWORD *)(v44 + 32));
      sub_10003ABA0(v59);
      v14 = v60;
      v48 = *(void (**)(unint64_t, uint64_t))(v60 + 16);
      if (!v48)
      {
        swift_bridgeObjectRelease(v60);
        v15 = v140;
        goto LABEL_42;
      }
      v47 = *(_QWORD *)(v60 + 40);
      v15 = &OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id;
      v40 = v47 + OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id;
      swift_retain(v47);
      if ((static UUID.== infix(_:_:)(v40, v39) & 1) == 0)
      {
        swift_release(v47);
        if (v48 != (void (*)(unint64_t, uint64_t))1)
        {
          v29 = (uint64_t *)(v14 + 56);
          v44 = 1;
          while (v44 < *(_QWORD *)(v14 + 16))
          {
            v47 = *v29;
            v40 = *v29 + OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id;
            swift_retain(*v29);
            if ((static UUID.== infix(_:_:)(v40, v39) & 1) != 0)
            {
              v29 = v138;
              v44 = (unint64_t)v36;
              goto LABEL_34;
            }
            swift_release(v47);
            ++v44;
            v29 += 2;
            if (v48 == (void (*)(unint64_t, uint64_t))v44)
              goto LABEL_31;
          }
          __break(1u);
LABEL_59:
          __break(1u);
LABEL_60:
          __break(1u);
LABEL_61:
          __break(1u);
          goto LABEL_62;
        }
LABEL_31:
        swift_bridgeObjectRelease(v14);
        v29 = v138;
        v44 = (unint64_t)v36;
        v15 = v140;
        goto LABEL_42;
      }
LABEL_34:
      swift_bridgeObjectRelease(v14);
      v61 = OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_status;
      v15 = v140;
      if (*(_BYTE *)(v47 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_status))
      {
        if (*(_BYTE *)(v47 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_status) == 1)
          v62 = 1953391987;
        else
          v62 = 1701736302;
        v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v62, 0xE400000000000000, 0x676E69646E6573, 0xE700000000000000, 0);
        swift_bridgeObjectRelease(0xE400000000000000);
        if ((v63 & 1) == 0)
          goto LABEL_41;
      }
      else
      {
        swift_bridgeObjectRelease(0xE700000000000000);
      }
      *(_BYTE *)(v47 + v61) = 1;
LABEL_41:
      swift_release(v47);
LABEL_42:
      v64 = (_QWORD *)(v44
                     + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscript);
      swift_beginAccess(v44+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscript, v144, 0, 0);
      v65 = (_QWORD *)*v64;
      if (*v64 && v65[2])
      {
        v67 = v65[4];
        v66 = v65[5];
        v69 = v65[6];
        v68 = v65[7];
        swift_bridgeObjectRetain(v66);
        v125 = v68;
        swift_bridgeObjectRetain(v68);
        v70 = sub_100038E28((uint64_t)aBlock);
        v72 = (_QWORD *)*v71;
        v130 = v25;
        if (v72)
        {
          if (!v72[2])
            goto LABEL_68;
          v73 = v44;
          v74 = v72[7];
          v75 = v72[5];
          swift_bridgeObjectRetain(v75);
          swift_bridgeObjectRetain(v74);
          sub_1001926F8(0, 1);
          ((void (*)(_QWORD *, _QWORD))v70)(aBlock, 0);
          swift_bridgeObjectRelease(v74);
          v76 = swift_bridgeObjectRelease(v75);
          v44 = v73;
        }
        else
        {
          ((void (*)(_QWORD *, _QWORD))v70)(aBlock, 0);
        }
        v77 = *(void (**)(char *, uint64_t *, uint64_t, __n128))(v127 + 16);
        v78 = v126;
        v77(v126, v137, v128, v76);
        v79 = (_QWORD *)(v44
                       + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscriptItemInFlight);
        v80 = *(_QWORD *)(v44
                        + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscriptItemInFlight);
        v81 = *(_QWORD *)(v44
                        + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscriptItemInFlight
                        + 8);
        v82 = *(_QWORD *)(v44
                        + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscriptItemInFlight
                        + 16);
        v83 = v79[3];
        *v79 = v67;
        v79[1] = v66;
        v112 = v69;
        v79[2] = v69;
        v84 = v125;
        v79[3] = v125;
        swift_bridgeObjectRetain(v66);
        swift_bridgeObjectRetain(v84);
        sub_10003DADC(v80, v81, v82, v83);
        v113 = static OS_dispatch_queue.main.getter(v85);
        v86 = v114;
        static DispatchTime.now()(v113);
        v87 = v118;
        + infix(_:_:)(v86, 1.0);
        v115 = *(_QWORD *)(v115 + 8);
        ((void (*)(char *, uint64_t))v115)(v86, v129);
        v88 = swift_allocObject(&unk_1002E6A78, 24, 7);
        swift_weakInit(v88 + 16);
        v89 = v67;
        v90 = v117;
        v36 = (char *)v128;
        ((void (*)(char *, char *, uint64_t))v77)(v117, v78, v128);
        v91 = v127;
        v92 = *(unsigned __int8 *)(v127 + 80);
        v93 = (v92 + 56) & ~v92;
        v94 = (char *)swift_allocObject(&unk_1002E6AA0, v93 + v116, v92 | 7);
        *((_QWORD *)v94 + 2) = v88;
        *((_QWORD *)v94 + 3) = v89;
        v95 = v112;
        *((_QWORD *)v94 + 4) = v66;
        *((_QWORD *)v94 + 5) = v95;
        *((_QWORD *)v94 + 6) = v84;
        (*(void (**)(char *, char *, char *))(v91 + 32))(&v94[v93], v90, v36);
        aBlock[4] = sub_10003E5B8;
        v143 = v94;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = sub_1001BAACC;
        aBlock[3] = &unk_1002E6AB8;
        v96 = _Block_copy(aBlock);
        swift_release(v143);
        v97 = v119;
        static DispatchQoS.unspecified.getter(v98);
        aBlock[0] = _swiftEmptyArrayStorage;
        v40 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        v99 = sub_100003DB8((uint64_t *)&unk_1003178D0);
        v100 = sub_10003E608();
        v101 = v122;
        v102 = v124;
        dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v99, v100, v124, v40);
        v103 = (void *)v113;
        OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v87, v97, v101, v96);
        _Block_release(v96);

        v104 = v101;
        v44 = (unint64_t)v139;
        (*(void (**)(char *, uint64_t))(v123 + 8))(v104, v102);
        v105 = v97;
        v39 = v137;
        (*(void (**)(char *, uint64_t))(v120 + 8))(v105, v121);
        ((void (*)(char *, uint64_t))v115)(v87, v129);
        (*(void (**)(char *, char *))(v91 + 8))(v126, v36);
        v29 = v138;
        v15 = v140;
        v25 = v130;
      }
      v106 = swift_unknownObjectWeakLoadStrong(v25);
      if (v106)
      {
        v107 = v106;
        sub_100237F48();
        swift_unknownObjectRelease(v107);
      }
      sub_10003E450((uint64_t)v39);
LABEL_52:
      v108 = static OS_dispatch_queue.main.getter(v56);
      v14 = (uint64_t)v134;
      *v134 = v108;
      v48 = v135;
      v133(v14, v132, v135);
      v47 = _dispatchPreconditionTest(_:)(v14);
      v131(v14, (uint64_t)v48);
      if ((v47 & 1) != 0)
      {
        v109 = v44
             + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_messagesInProgress;
        swift_beginAccess(v44+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_messagesInProgress, aBlock, 0, 0);
        if (*(_QWORD *)(*(_QWORD *)v109 + 16))
        {
          if (!*(_QWORD *)(v44
                          + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_oneSecondTimer))
            sub_10003B2C8(v110);
        }
        else
        {
          sub_10003B54C();
        }
        sub_100007FF0((uint64_t)v29, &qword_100318E20);
        sub_100007FF0((uint64_t)v15, &qword_100318E20);
        return;
      }
      goto LABEL_60;
    }
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
  }
  __break(1u);
LABEL_68:
  __break(1u);
}

uint64_t sub_10003C3DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  _BYTE v14[24];

  v11 = a1 + 16;
  swift_beginAccess(a1 + 16, v14, 0, 0);
  result = swift_weakLoadStrong(v11);
  if (result)
  {
    v13 = result;
    sub_10003C46C(a2, a3, a4, a5, a6);
    return swift_release(v13);
  }
  return result;
}

uint64_t sub_10003C46C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  _QWORD *v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t, uint64_t, __n128);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  int64_t *v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  int64_t v53;
  BOOL v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  __n128 v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t Strong;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  uint64_t result;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  __n128 v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __n128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __n128 v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  __n128 v122;
  uint64_t v123;
  uint64_t v124;
  __n128 v125;
  uint64_t v126;
  uint64_t v127;
  __n128 v128;
  uint64_t v129;
  uint64_t v130;
  __n128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  void (*v141)(char *, uint64_t, uint64_t, __n128);
  char *v142;
  uint64_t v143;
  char *v144;
  void (*v145)(uint64_t, char *, uint64_t);
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char v152[16];
  uint64_t v153;
  char v154[24];
  _QWORD v155[3];
  _BYTE v156[32];
  char v157[16];
  Swift::String v158;

  v6 = v5;
  v148 = a5;
  v146 = a4;
  v150 = a3;
  v9 = sub_100003DB8(&qword_100316EB0);
  v11 = __chkstk_darwin(v9, v10);
  v143 = (uint64_t)&v136 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  v142 = (char *)&v136 - v14;
  v138 = type metadata accessor for DispatchPredicate(0);
  v137 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138, v15);
  v136 = (uint64_t *)((char *)&v136 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = type metadata accessor for MessageSimulationEngineImplementation.MessageProgress(0);
  v139 = *(_QWORD *)(v17 - 8);
  __chkstk_darwin(v17, v18);
  v144 = (char *)&v136 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for UUID(0);
  v21 = *(_QWORD *)(v20 - 8);
  v23 = __chkstk_darwin(v20, v22);
  v25 = (char *)&v136 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23, v26);
  v28 = (char *)&v136 - v27;
  v29 = (_OWORD *)(v6
                 + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscriptItemInFlight);
  v30 = *(_QWORD *)(v6
                  + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscriptItemInFlight);
  v31 = *(_QWORD *)(v6
                  + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscriptItemInFlight
                  + 8);
  v32 = *(_QWORD *)(v6
                  + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscriptItemInFlight
                  + 16);
  v33 = *(_QWORD *)(v6
                  + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscriptItemInFlight
                  + 24);
  *v29 = 0u;
  v29[1] = 0u;
  sub_10003DADC(v30, v31, v32, v33);
  swift_bridgeObjectRetain(a2);
  UUID.init()(v34);
  v35 = type metadata accessor for TryOutTranscriptMessageItem(0);
  v36 = swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v37 = v36 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_content;
  *(_QWORD *)v37 = 0;
  *(_QWORD *)(v37 + 8) = 0;
  *(_QWORD *)(v37 + 16) = a1;
  *(_QWORD *)(v37 + 24) = a2;
  *(_BYTE *)(v37 + 32) = 0;
  *(_BYTE *)(v36 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_sender) = 1;
  *(_BYTE *)(v36 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_status) = 2;
  *(_BYTE *)(v36 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_lastConsecutiveMessage) = 1;
  *(_BYTE *)(v36 + 16) = 2;
  v145 = *(void (**)(uint64_t, char *, uint64_t))(v21 + 32);
  v145(v36 + OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id, v28, v20);
  v38 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v158._countAndFlagsBits = 0xD00000000000003ALL;
  v158._object = (void *)0x8000000100262E70;
  v39._object = (void *)0x8000000100262E50;
  v39._countAndFlagsBits = 0xD000000000000019;
  v40._countAndFlagsBits = 0;
  v40._object = (void *)0xE000000000000000;
  v41 = NSLocalizedString(_:tableName:bundle:value:comment:)(v39, (Swift::String_optional)0, (NSBundle)v38, v40, v158);

  v42 = v146;
  swift_bridgeObjectRetain(v146);
  UUID.init()(v43);
  v149 = v21;
  v44 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16);
  v140 = v25;
  v141 = v44;
  ((void (*)(char *, char *, uint64_t))v44)(v28, v25, v20);
  v45 = swift_allocObject(v35, *(unsigned int *)(v35 + 48), *(unsigned __int16 *)(v35 + 52));
  v46 = v45 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_content;
  *(Swift::String *)v46 = v41;
  *(_QWORD *)(v46 + 16) = v150;
  *(_QWORD *)(v46 + 24) = v42;
  v47 = v6;
  *(_BYTE *)(v46 + 32) = 0;
  *(_BYTE *)(v45 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_sender) = 1;
  *(_BYTE *)(v45 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_status) = 2;
  *(_BYTE *)(v45 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_lastConsecutiveMessage) = 1;
  v48 = v45 + OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id;
  v150 = v20;
  v151 = v45;
  *(_BYTE *)(v45 + 16) = 2;
  v145(v48, v28, v20);
  v49 = (int64_t *)(v6 + 32);
  swift_beginAccess(v6 + 32, v157, 0, 0);
  v50 = *(_QWORD *)(v6 + 32);
  v153 = v148;
  swift_bridgeObjectRetain(v50);
  v51 = sub_10003D12C(sub_10003E760, (uint64_t)v152, v50);
  v53 = v52;
  swift_bridgeObjectRelease(v50);
  v148 = v36;
  if ((v53 & 1) == 0)
  {
    v54 = __OFADD__(v51, 1);
    v55 = v51 + 1;
    if (v54)
    {
LABEL_78:
      __break(1u);
    }
    else
    {
      swift_beginAccess(v49, v156, 33, 0);
      v53 = *v49;
      if (!((unint64_t)*v49 >> 62))
      {
        v56 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
        v36 = v148;
        swift_retain(v148);
        if (v56 >= v55)
          goto LABEL_5;
        goto LABEL_83;
      }
    }
    if (v53 < 0)
      v132 = v53;
    else
      v132 = v53 & 0xFFFFFFFFFFFFFF8;
    v36 = v148;
    swift_retain(v148);
    swift_bridgeObjectRetain(v53);
    v133 = _CocoaArrayWrapper.endIndex.getter(v132);
    swift_bridgeObjectRelease(v53);
    if (v133 >= v55)
    {
LABEL_5:
      if ((v55 & 0x8000000000000000) == 0)
      {
        sub_100190F2C(v55, v55, v36);
        goto LABEL_9;
      }
      goto LABEL_84;
    }
LABEL_83:
    __break(1u);
LABEL_84:
    __break(1u);
    goto LABEL_85;
  }
  swift_beginAccess(v49, v156, 33, 0);
  swift_retain(v36);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v58);
  v53 = *(_QWORD *)((*v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v57 = *(_QWORD *)((*v49 & 0xFFFFFFFFFFFFFF8) + 0x18);
  if (v53 >= v57 >> 1)
LABEL_85:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v53 + 1, 1);
  v59 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v36);
  specialized Array._endMutation()(v59);
LABEL_9:
  swift_endAccess(v156);
  v60 = *v49;
  swift_retain(v36);
  swift_bridgeObjectRetain(v60);
  v62 = sub_10003E2F0(v61, v36);
  v53 = v63;
  swift_bridgeObjectRelease(v60);
  swift_release(v36);
  if ((v53 & 1) == 0)
  {
    v54 = __OFADD__(v62, 1);
    v64 = v62 + 1;
    v65 = v151;
    v66 = (uint64_t)v144;
    if (v54)
    {
      __break(1u);
    }
    else
    {
      swift_beginAccess(v49, v156, 33, 0);
      v53 = *v49;
      if (!((unint64_t)*v49 >> 62))
      {
        v67 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_retain(v65);
        if (v67 >= v64)
          goto LABEL_13;
        goto LABEL_91;
      }
    }
    if (v53 < 0)
      v134 = v53;
    else
      v134 = v53 & 0xFFFFFFFFFFFFFF8;
    swift_retain(v65);
    swift_bridgeObjectRetain(v53);
    v135 = _CocoaArrayWrapper.endIndex.getter(v134);
    swift_bridgeObjectRelease(v53);
    if (v135 >= v64)
    {
LABEL_13:
      if ((v64 & 0x8000000000000000) == 0)
      {
        sub_100190F2C(v64, v64, v65);
        goto LABEL_17;
      }
      goto LABEL_92;
    }
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
    goto LABEL_93;
  }
  swift_beginAccess(v49, v156, 33, 0);
  v65 = v151;
  swift_retain(v151);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v69);
  v53 = *(_QWORD *)((*v49 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v68 = *(_QWORD *)((*v49 & 0xFFFFFFFFFFFFFF8) + 0x18);
  v66 = (uint64_t)v144;
  if (v53 >= v68 >> 1)
LABEL_93:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v53 + 1, 1);
  v70 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v53, v65);
  specialized Array._endMutation()(v70);
LABEL_17:
  swift_endAccess(v156);
  v71 = (uint64_t *)(v47
                  + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscript);
  v72 = swift_beginAccess(v47+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_emergencyConversationTranscript, v156, 0, 0);
  v73 = *v71;
  v147 = v47;
  if (!v73 || *(_QWORD *)(v73 + 16) || *(_BYTE *)(v47 + 16) != 1)
    goto LABEL_41;
  v74 = (_QWORD *)(v47
                 + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_messagesInProgress);
  v72 = swift_beginAccess(v47+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_messagesInProgress, v154, 1, 0);
  if (!*(_QWORD *)(*v74 + 16))
    goto LABEL_40;
  v53 = (*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80);
  sub_10003E40C(*v74 + v53, v66);
  Strong = swift_unknownObjectWeakLoadStrong(v47+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_progressDelegate);
  if (Strong)
  {
    v76 = Strong;
    sub_1002383F0(v66);
    swift_unknownObjectRelease(v76);
  }
  sub_10003E450(v66);
  v77 = *v74;
  v78 = *(_QWORD *)(*v74 + 16);
  if (!v78)
    goto LABEL_35;
  v146 = v74;
  v79 = (char *)(v77 + v53);
  v80 = *(_QWORD *)(v139 + 72);
  v81 = v77;
  swift_bridgeObjectRetain(v77);
  while (1)
  {
    __chkstk_darwin(v82, v83);
    v158._object = v79;
    swift_beginAccess(v49, v155, 33, 0);
    v84 = sub_1001908AC(sub_10003E48C, (uint64_t)(&v136 - 4));
    v85 = v84;
    v53 = *v49;
    if ((unint64_t)*v49 >> 62)
      break;
    v86 = *(_QWORD *)((v53 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v86 < v84)
      goto LABEL_33;
LABEL_27:
    sub_100192860(v85, v86);
    swift_endAccess(v155);
    v79 += v80;
    if (!--v78)
      goto LABEL_34;
  }
  if (v53 < 0)
    v87 = *v49;
  else
    v87 = v53 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(*v49);
  v86 = _CocoaArrayWrapper.endIndex.getter(v87);
  swift_bridgeObjectRelease(v53);
  if (v86 >= v85)
    goto LABEL_27;
LABEL_33:
  __break(1u);
LABEL_34:
  swift_bridgeObjectRelease(v81);
  v74 = v146;
  v77 = *v146;
  v47 = v147;
  v65 = v151;
LABEL_35:
  *v74 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRelease(v77);
  sub_10000D75C();
  v89 = static OS_dispatch_queue.main.getter(v88);
  v90 = v136;
  *v136 = v89;
  v91 = v137;
  v92 = v138;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v137 + 104))(v90, enum case for DispatchPredicate.onQueue(_:), v138);
  v93 = _dispatchPreconditionTest(_:)(v90);
  result = (*(uint64_t (**)(uint64_t *, uint64_t))(v91 + 8))(v90, v92);
  if ((v93 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  if (*(_QWORD *)(*v74 + 16))
  {
    if (!*(_QWORD *)(v47
                    + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_oneSecondTimer))
      sub_10003B2C8(result);
  }
  else
  {
    sub_10003B54C();
  }
LABEL_40:
  *(_BYTE *)(v47 + 16) = 2;
LABEL_41:
  v95 = (uint64_t)v142;
  v96 = v150;
  v141(v142, v65 + OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id, v150, v72);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v149 + 56))(v95, 0, 1, v96);
  v97 = v143;
  sub_10000B458(v95, v143, &qword_100316EB0);
  v98 = v47
      + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_itemIdToScrollTo;
  swift_beginAccess(v47+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_itemIdToScrollTo, v155, 33, 0);
  sub_10000D7E0(v97, v98);
  swift_endAccess(v155);
  v55 = *(_QWORD *)(v47 + 32);
  if ((unint64_t)v55 >> 62)
  {
    if (v55 < 0)
      v103 = *(_QWORD *)(v47 + 32);
    else
      v103 = v55 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(*(_QWORD *)(v47 + 32));
    v99 = _CocoaArrayWrapper.endIndex.getter(v103);
    if (!v99)
      goto LABEL_55;
LABEL_43:
    if (v99 < 1)
    {
      __break(1u);
      goto LABEL_78;
    }
    v100 = 0;
    v101 = 0;
    while ((v55 & 0xC000000000000001) == 0)
    {
      v102 = *(_QWORD *)(v55 + 8 * v101 + 32);
      swift_retain(v102);
      if (v100)
        goto LABEL_50;
LABEL_45:
      ++v101;
      *(_BYTE *)(v102 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_lastConsecutiveMessage) = 1;
      v100 = v102;
      if (v99 == v101)
        goto LABEL_56;
    }
    v102 = specialized _ArrayBuffer._getElementSlowPath(_:)(v101, v55);
    if (!v100)
      goto LABEL_45;
LABEL_50:
    *(_BYTE *)(v100 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_lastConsecutiveMessage) = (*(_BYTE *)(v100 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_sender) ^ *(_BYTE *)(v102 + OBJC_IVAR____TtC8SOSBuddy27TryOutTranscriptMessageItem_sender)) & 1;
    swift_release(v100);
    goto LABEL_45;
  }
  v99 = *(_QWORD *)((v55 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(*(_QWORD *)(v47 + 32));
  if (v99)
    goto LABEL_43;
LABEL_55:
  v102 = 0;
LABEL_56:
  swift_bridgeObjectRelease(v55);
  swift_release(v102);
  v105 = v147;
  v106 = *(_QWORD *)(v147 + 24);
  if ((unint64_t)v106 >> 62)
  {
    if (v106 < 0)
      v123 = *(_QWORD *)(v147 + 24);
    else
      v123 = v106 & 0xFFFFFFFFFFFFFF8;
    v124 = type metadata accessor for TryOutTranscriptItem(0);
    v125 = swift_bridgeObjectRetain(v106);
    v108 = _bridgeCocoaArray<A>(_:)(v123, v124, v125);
  }
  else
  {
    v107 = swift_bridgeObjectRetain_n(*(_QWORD *)(v147 + 24), 2, v104);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v107);
    type metadata accessor for TryOutTranscriptItem(0);
    v108 = v106;
  }
  v109 = v148;
  v110 = swift_bridgeObjectRelease(v106);
  v111 = *v49;
  if ((unint64_t)*v49 >> 62)
  {
    if (v111 < 0)
      v126 = *v49;
    else
      v126 = v111 & 0xFFFFFFFFFFFFFF8;
    v127 = type metadata accessor for TryOutTranscriptItem(0);
    v128 = swift_bridgeObjectRetain(v111);
    v113 = _bridgeCocoaArray<A>(_:)(v126, v127, v128);
  }
  else
  {
    v112 = swift_bridgeObjectRetain_n(*v49, 2, v110);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v112);
    type metadata accessor for TryOutTranscriptItem(0);
    v113 = v111;
  }
  swift_bridgeObjectRelease(v111);
  v155[0] = v108;
  sub_1000EC644(v113);
  v115 = v155[0];
  v116 = *(_QWORD *)(v105 + 40);
  if ((unint64_t)v116 >> 62)
  {
    if (v116 < 0)
      v129 = *(_QWORD *)(v105 + 40);
    else
      v129 = v116 & 0xFFFFFFFFFFFFFF8;
    v130 = type metadata accessor for TryOutTranscriptItem(0);
    v131 = swift_bridgeObjectRetain(v116);
    v118 = _bridgeCocoaArray<A>(_:)(v129, v130, v131);
  }
  else
  {
    v117 = swift_bridgeObjectRetain_n(*(_QWORD *)(v105 + 40), 2, v114);
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter(v117);
    type metadata accessor for TryOutTranscriptItem(0);
    v118 = v116;
  }
  swift_bridgeObjectRelease(v116);
  v155[0] = v115;
  sub_1000EC644(v118);
  v119 = *(_QWORD *)(v105 + 48);
  *(_QWORD *)(v105 + 48) = v155[0];
  swift_bridgeObjectRelease(v119);
  v120 = swift_unknownObjectWeakLoadStrong(v105+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_progressDelegate);
  if (v120)
  {
    v121 = v120;
    sub_100237F48();
    swift_release(v109);
    swift_release(v151);
    v122 = swift_unknownObjectRelease(v121);
    return (*(uint64_t (**)(char *, uint64_t, __n128))(v149 + 8))(v140, v150, v122);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v149 + 8))(v140, v150);
    swift_release(v151);
    return swift_release(v109);
  }
}

uint64_t sub_10003D12C(uint64_t (*a1)(uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v4 = v3;
  if ((unint64_t)a3 >> 62)
    goto LABEL_14;
  v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = 0;
  if (v7)
  {
    while (1)
    {
      if ((a3 & 0xC000000000000001) != 0)
      {
        v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, a3);
      }
      else
      {
        v9 = *(_QWORD *)(a3 + 8 * v8 + 32);
        swift_retain(v9);
      }
      v14 = v9;
      v10 = a1(&v14);
      swift_release(v9);
      if (v4 || (v10 & 1) != 0)
        break;
      v11 = v8 + 1;
      if (__OFADD__(v8, 1))
      {
        __break(1u);
LABEL_14:
        if (a3 < 0)
          v12 = a3;
        else
          v12 = a3 & 0xFFFFFFFFFFFFFF8;
        swift_bridgeObjectRetain(a3);
        v7 = _CocoaArrayWrapper.endIndex.getter(v12);
        swift_bridgeObjectRelease(a3);
        v8 = 0;
        if (!v7)
          return v8;
      }
      else
      {
        ++v8;
        if (v11 == v7)
          return 0;
      }
    }
  }
  return v8;
}

uint64_t type metadata accessor for MessageSimulationEngineImplementation()
{
  return objc_opt_self(_TtC8SOSBuddy37MessageSimulationEngineImplementation);
}

uint64_t sub_10003D268()
{
  return type metadata accessor for MessageSimulationEngineImplementation.OnState(0);
}

uint64_t type metadata accessor for MessageSimulationEngineImplementation.OnState(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100318B00, (uint64_t)&nominal type descriptor for MessageSimulationEngineImplementation.OnState);
}

void sub_10003D284(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[12];

  v4[0] = &unk_10024ED28;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_10000CBF8(319);
  if (v3 <= 0x3F)
  {
    v4[5] = *(_QWORD *)(v2 - 8) + 64;
    v4[6] = &unk_10024ED40;
    v4[7] = &unk_10024ED58;
    v4[8] = &unk_10024ED70;
    v4[9] = &unk_10024ED88;
    v4[10] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[11] = &unk_10024ED40;
    swift_updateClassMetadata2(a1, 256, 12, v4, a1 + 80);
  }
}

uint64_t *sub_10003D33C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  uint64_t v18;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v18);
  }
  else
  {
    v7 = type metadata accessor for UUID(0);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (char *)a1 + v9;
    v14 = (char *)a2 + v9;
    v15 = type metadata accessor for DispatchTime(0);
    v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
    swift_bridgeObjectRetain(v12);
    v16(v13, v14, v15);
    v17 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)a1 + v17) = *(uint64_t *)((char *)a2 + v17);
  }
  return a1;
}

uint64_t sub_10003D424(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + *(int *)(a2 + 20) + 8));
  v5 = a1 + *(int *)(a2 + 24);
  v6 = type metadata accessor for DispatchTime(0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_10003D490(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = a1 + v8;
  v13 = a2 + v8;
  v14 = type metadata accessor for DispatchTime(0);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  swift_bridgeObjectRetain(v11);
  v15(v12, v13, v14);
  v16 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v16) = *(_QWORD *)(a2 + v16);
  return a1;
}

uint64_t sub_10003D54C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v10 = v9[1];
  v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a3[6];
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 24))(v13, v14, v15);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + a3[8]) = *(_QWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_10003D614(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  v11 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  return a1;
}

uint64_t sub_10003D6B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for UUID(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  v12 = v8[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  v13 = a3[6];
  v14 = a1 + v13;
  v15 = a2 + v13;
  v16 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 40))(v14, v15, v16);
  v17 = a3[8];
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  *(_QWORD *)(a1 + v17) = *(_QWORD *)(a2 + v17);
  return a1;
}

uint64_t sub_10003D768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10003D774);
}

uint64_t sub_10003D774(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  unint64_t v11;

  v6 = type metadata accessor for UUID(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = type metadata accessor for DispatchTime(0);
    v10 = a1 + *(int *)(a3 + 24);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
    return v9(v10, a2, v8);
  }
  v11 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF)
    LODWORD(v11) = -1;
  return (v11 + 1);
}

uint64_t sub_10003D820(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10003D82C);
}

uint64_t sub_10003D82C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  result = type metadata accessor for UUID(0);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }
    v10 = type metadata accessor for DispatchTime(0);
    v12 = a1 + *(int *)(a4 + 24);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for MessageSimulationEngineImplementation.MessageProgress(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100318DD0, (uint64_t)&nominal type descriptor for MessageSimulationEngineImplementation.MessageProgress);
}

uint64_t sub_10003D8E8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t sub_10003D91C(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  _QWORD v5[5];

  result = type metadata accessor for UUID(319);
  if (v3 <= 0x3F)
  {
    v5[0] = *(_QWORD *)(result - 8) + 64;
    v5[1] = &unk_10024EDB0;
    result = type metadata accessor for DispatchTime(319);
    if (v4 <= 0x3F)
    {
      v5[2] = *(_QWORD *)(result - 8) + 64;
      v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[4] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256, 5, v5, a1 + 16);
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MessageSimulationEngineImplementation.EmergencyConversationTranscriptItem()
{
  return &type metadata for MessageSimulationEngineImplementation.EmergencyConversationTranscriptItem;
}

uint64_t storeEnumTagSinglePayload for MessageChatSimulationTranscriptState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_10003DA14 + 4 * byte_10024EC55[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10003DA48 + 4 * byte_10024EC50[v4]))();
}

uint64_t sub_10003DA48(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003DA50(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10003DA58);
  return result;
}

uint64_t sub_10003DA64(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10003DA6CLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_10003DA70(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10003DA78(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessageChatSimulationTranscriptState()
{
  return &type metadata for MessageChatSimulationTranscriptState;
}

unint64_t sub_10003DA98()
{
  unint64_t result;

  result = qword_100318E18;
  if (!qword_100318E18)
  {
    result = swift_getWitnessTable(&unk_10024EE68, &type metadata for MessageChatSimulationTranscriptState);
    atomic_store(result, (unint64_t *)&qword_100318E18);
  }
  return result;
}

uint64_t sub_10003DADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

id sub_10003DB0C(uint64_t a1)
{
  void *v1;
  Class isa;
  id v4;
  id v5;
  id v6;
  id v7;
  id v9;

  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(a1);
  v9 = 0;
  v4 = objc_msgSend(v1, "initWithDictionary:error:", isa, &v9);

  v5 = v9;
  if (v4)
  {
    v6 = v9;
  }
  else
  {
    v7 = v9;
    _convertNSErrorToError(_:)(v5);

    swift_willThrow();
  }
  return v4;
}

void sub_10003DBF0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;

  if ((unint64_t)a1 >> 62)
    goto LABEL_52;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a1);
  if (v2)
  {
    while (1)
    {
      if (v2 < 1)
      {
        __break(1u);
        goto LABEL_62;
      }
      if ((a1 & 0xC000000000000001) == 0)
        break;
      v3 = 0;
      v4 = 0;
      v5 = _swiftEmptyArrayStorage;
      v6 = &_swiftEmptyArrayStorage[4];
      while (1)
      {
        v7 = specialized _ArrayBuffer._getElementSlowPath(_:)(v4, a1);
        if (!v3)
        {
          v8 = v5[3];
          if ((uint64_t)((v8 >> 1) + 0x4000000000000000) < 0)
            goto LABEL_50;
          v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
          if (v9 <= 1)
            v10 = 1;
          else
            v10 = v9;
          v11 = sub_100003DB8(&qword_100318E28);
          v12 = (_QWORD *)swift_allocObject(v11, 16 * v10 + 32, 7);
          v13 = j__malloc_size(v12);
          v14 = v13 - 32;
          if (v13 < 32)
            v14 = v13 - 17;
          v15 = v14 >> 4;
          v12[2] = v10;
          v12[3] = 2 * (v14 >> 4);
          v16 = (unint64_t)(v12 + 4);
          v17 = v5[3] >> 1;
          if (v5[2])
          {
            if (v12 != v5 || v16 >= (unint64_t)&v5[2 * v17 + 4])
              memmove(v12 + 4, v5 + 4, 16 * v17);
            v5[2] = 0;
          }
          v6 = (_QWORD *)(v16 + 16 * v17);
          v3 = (v15 & 0x7FFFFFFFFFFFFFFFLL) - v17;
          swift_release(v5);
          v5 = v12;
        }
        v19 = __OFSUB__(v3--, 1);
        if (v19)
          break;
        *v6 = v4;
        v6[1] = v7;
        v6 += 2;
        if (v2 == ++v4)
          goto LABEL_47;
      }
      __break(1u);
LABEL_49:
      __break(1u);
LABEL_50:
      __break(1u);
LABEL_51:
      __break(1u);
LABEL_52:
      if (a1 < 0)
        v36 = a1;
      else
        v36 = a1 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(a1);
      v2 = _CocoaArrayWrapper.endIndex.getter(v36);
      if (!v2)
        goto LABEL_56;
    }
    v3 = 0;
    v20 = 0;
    v5 = _swiftEmptyArrayStorage;
    v21 = &_swiftEmptyArrayStorage[4];
    do
    {
      v22 = a1 + 8 * v20;
      v23 = *(_QWORD *)(v22 + 32);
      if (v3)
      {
        swift_retain(*(_QWORD *)(v22 + 32));
        v19 = __OFSUB__(v3--, 1);
        if (v19)
          goto LABEL_49;
      }
      else
      {
        v24 = v5[3];
        if ((uint64_t)((v24 >> 1) + 0x4000000000000000) < 0)
          goto LABEL_51;
        v25 = v24 & 0xFFFFFFFFFFFFFFFELL;
        if (v25 <= 1)
          v26 = 1;
        else
          v26 = v25;
        v27 = sub_100003DB8(&qword_100318E28);
        v28 = (_QWORD *)swift_allocObject(v27, 16 * v26 + 32, 7);
        v29 = j__malloc_size(v28);
        v30 = v29 - 32;
        if (v29 < 32)
          v30 = v29 - 17;
        v31 = v30 >> 4;
        v28[2] = v26;
        v28[3] = 2 * (v30 >> 4);
        v32 = v28 + 4;
        v33 = v5[3] >> 1;
        v21 = &v28[2 * v33 + 4];
        v34 = (v31 & 0x7FFFFFFFFFFFFFFFLL) - v33;
        if (v5[2])
        {
          if (v28 != v5 || v32 >= &v5[2 * v33 + 4])
            memmove(v32, v5 + 4, 16 * v33);
          swift_retain(v23);
          v5[2] = 0;
        }
        else
        {
          swift_retain(v23);
        }
        swift_release(v5);
        v5 = v28;
        v19 = __OFSUB__(v34, 1);
        v3 = v34 - 1;
        if (v19)
          goto LABEL_49;
      }
      *v21 = v20;
      v21[1] = v23;
      v21 += 2;
      ++v20;
    }
    while (v2 != v20);
LABEL_47:
    swift_bridgeObjectRelease(a1);
  }
  else
  {
LABEL_56:
    swift_bridgeObjectRelease(a1);
    v3 = 0;
    v5 = _swiftEmptyArrayStorage;
  }
  v37 = v5[3];
  if (v37 >= 2)
  {
    v38 = v37 >> 1;
    v19 = __OFSUB__(v38, v3);
    v39 = v38 - v3;
    if (v19)
LABEL_62:
      __break(1u);
    else
      v5[2] = v39;
  }
}

uint64_t sub_10003DEC8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  id v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  id v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  id v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  id v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  id v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  id v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  Swift::String v42;
  Swift::String v43;

  v0 = sub_100003DB8(&qword_100318E30);
  v1 = swift_allocObject(v0, 160, 7);
  *(_OWORD *)(v1 + 16) = xmmword_10024EEB0;
  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v4._countAndFlagsBits = 0x1000000000000108;
  v36._object = (void *)0x8000000100262FC0;
  v4._object = (void *)0x8000000100262EB0;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v36._countAndFlagsBits = 0xD000000000000036;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v36);

  v7 = objc_msgSend(v2, "mainBundle");
  v8._countAndFlagsBits = 0xD000000000000016;
  v37._object = (void *)0x8000000100263020;
  v8._object = (void *)0x8000000100263000;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v37._countAndFlagsBits = 0xD00000000000004FLL;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v37);

  *(Swift::String *)(v1 + 32) = v6;
  *(Swift::String *)(v1 + 48) = v10;
  v11 = objc_msgSend(v2, "mainBundle");
  v12._countAndFlagsBits = 0x10000000000000A5;
  v38._object = (void *)0x8000000100263120;
  v12._object = (void *)0x8000000100263070;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v38._countAndFlagsBits = 0xD000000000000036;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)v11, v13, v38);

  v15 = objc_msgSend(v2, "mainBundle");
  v39._object = (void *)0x8000000100263190;
  v16._object = (void *)0x8000000100263160;
  v16._countAndFlagsBits = 0xD000000000000027;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v39._countAndFlagsBits = 0xD00000000000004FLL;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v16, (Swift::String_optional)0, (NSBundle)v15, v17, v39);

  *(Swift::String *)(v1 + 64) = v14;
  *(Swift::String *)(v1 + 80) = v18;
  v19 = objc_msgSend(v2, "mainBundle");
  v40._object = (void *)0x8000000100263260;
  v20._object = (void *)0x80000001002631E0;
  v20._countAndFlagsBits = 0x1000000000000075;
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  v40._countAndFlagsBits = 0xD000000000000036;
  v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v20, (Swift::String_optional)0, (NSBundle)v19, v21, v40);

  v23 = objc_msgSend(v2, "mainBundle");
  v41._object = (void *)0x80000001002632D0;
  v24._object = (void *)0x80000001002632A0;
  v24._countAndFlagsBits = 0xD000000000000027;
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  v41._countAndFlagsBits = 0xD00000000000004FLL;
  v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v41);

  *(Swift::String *)(v1 + 96) = v22;
  *(Swift::String *)(v1 + 112) = v26;
  v27 = objc_msgSend(v2, "mainBundle");
  v28._countAndFlagsBits = 0x100000000000010BLL;
  v42._object = (void *)0x8000000100263430;
  v28._object = (void *)0x8000000100263320;
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  v42._countAndFlagsBits = 0xD000000000000036;
  v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v42);

  v31 = objc_msgSend(v2, "mainBundle");
  v32._countAndFlagsBits = 0xD000000000000054;
  v43._object = (void *)0x80000001002634D0;
  v32._object = (void *)0x8000000100263470;
  v33._countAndFlagsBits = 0;
  v33._object = (void *)0xE000000000000000;
  v43._countAndFlagsBits = 0xD00000000000004FLL;
  v34 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, (Swift::String_optional)0, (NSBundle)v31, v33, v43);

  *(Swift::String *)(v1 + 128) = v30;
  *(Swift::String *)(v1 + 144) = v34;
  return v1;
}

uint64_t sub_10003E2F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  if ((unint64_t)a1 >> 62)
  {
LABEL_13:
    if (a1 < 0)
      v9 = a1;
    else
      v9 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v4 = _CocoaArrayWrapper.endIndex.getter(v9);
    swift_bridgeObjectRelease(a1);
    v5 = 0;
    if (!v4)
      return v5;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    v5 = 0;
    if (!v4)
      return v5;
  }
  a2 += OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      v6 = specialized _ArrayBuffer._getElementSlowPath(_:)(v5, a1);
    }
    else
    {
      v6 = *(_QWORD *)(a1 + 8 * v5 + 32);
      swift_retain(v6);
    }
    v7 = static UUID.== infix(_:_:)(v6 + OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id, a2);
    swift_release(v6);
    if ((v7 & 1) != 0)
      return v5;
    v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_13;
    }
    ++v5;
    if (v8 == v4)
      return 0;
  }
}

uint64_t sub_10003E40C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MessageSimulationEngineImplementation.MessageProgress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003E450(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for MessageSimulationEngineImplementation.MessageProgress(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10003E48C(_QWORD *a1)
{
  uint64_t v1;

  return static UUID.== infix(_:_:)(*a1 + OBJC_IVAR____TtC8SOSBuddy20TryOutTranscriptItem_id, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_10003E4CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for MessageSimulationEngineImplementation.MessageProgress(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10003E510()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003E534()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 56) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*((_QWORD *)v0 + 2));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 4));
  swift_bridgeObjectRelease(*((_QWORD *)v0 + 6));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10003E5B8()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_10003C3DC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD **)(v0 + 48), v0 + ((v1 + 56) & ~v1));
}

uint64_t sub_10003E5F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10003E600(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10003E608()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B320;
  if (!qword_10031B320)
  {
    v1 = sub_100007FAC((uint64_t *)&unk_1003178D0);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10031B320);
  }
  return result;
}

uint64_t sub_10003E658(uint64_t a1)
{
  uint64_t v1;

  return sub_10003B4F8(a1, v1);
}

uint64_t sub_10003E660()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for UUID(0);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 24) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  swift_release(*(_QWORD *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

double sub_10003E6D4()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UUID(0) - 8) + 80);
  return sub_10003B228(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

_OWORD *sub_10003E704(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_10003E714(uint64_t a1)
{
  uint64_t v1;

  return static UUID.== infix(_:_:)(a1, *(_QWORD *)(v1 + 16)) & 1;
}

uint64_t sub_10003E740()
{
  uint64_t v0;

  return sub_100039478(v0);
}

uint64_t sub_10003E760(_QWORD *a1)
{
  return sub_10003E48C(a1) & 1;
}

uint64_t ConnectionAssistantArrowRenderer.init(device:buffers:renderPipelines:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  result = sub_10003EA2C(a1, a2, a3);
  if (v3)
    return v5;
  return result;
}

void ConnectionAssistantArrowRenderer.render(arrow:earthCenter:camera:destination:renderCommandEncoder:)(uint64_t a1, float32x2_t *a2, void *a3, void *a4, uint64_t a5, float32x4_t a6, uint64_t a7, void *a8)
{
  uint64_t v13;
  uint64_t v14;
  float32x2_t v15;
  float v16;
  uint64_t v17;
  double v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  int v22;
  int v23;
  char *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  NSString v28;
  float32x2_t v29;
  float32x2_t v30;
  float32x2_t v31;
  id v32;
  id v33;
  float v34;
  float32x2_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  _QWORD v42[4];

  v13 = ConnectionAssistantArrow.project(center:camera:)(a2, a6);
  if ((v14 & 0x100000000) == 0)
  {
    v15 = (float32x2_t)v13;
    v16 = *(float *)&v14;
    v17 = (uint64_t)*a2;
    v18 = *(double *)&a2[2];
    v19 = (uint64_t)*a2;
    v20 = (uint64_t)a2[1];
    v21 = ConnectionAssistantCamera.Viewport.normalizedPointSize.getter(v19, v20, v18);
    v22 = *(_DWORD *)(a1 + 40);
    v40 = *(_OWORD *)(a1 + 48);
    v23 = *(_DWORD *)(a1 + 64);
    v24 = (char *)objc_msgSend((id)swift_unknownObjectRetain(a8), "contents");
    v25 = a8;
    *(float *)v24 = v21;
    *(_QWORD *)(v24 + 4) = *(_QWORD *)a1;
    *((float32x2_t *)v24 + 2) = v15;
    *((float *)v24 + 6) = v16;
    *(_OWORD *)(v24 + 28) = *(_OWORD *)(a1 + 16);
    *(_QWORD *)(v24 + 44) = *(_QWORD *)(a1 + 32);
    *((_DWORD *)v24 + 13) = v22;
    *((_OWORD *)v24 + 4) = v40;
    *((_DWORD *)v24 + 20) = v23;
    v26 = sub_10022634C(6);
    if (v26)
    {
      v27 = v26;
      v28 = String._bridgeToObjectiveC()();
      objc_msgSend(a4, "setLabel:", v28);

      objc_msgSend(a4, "setRenderPipelineState:", v27);
      v29 = ConnectionAssistantArrow.boundingBox(pointSize:projection:)(v21, v15, v16);
      v31 = v30;
      v32 = objc_msgSend(a3, "width");
      v33 = objc_msgSend(a3, "height");
      v34 = 1.0;
      v35.i32[0] = 1.0;
      if (v17)
      {
        v35.i32[0] = 1.0;
        if (v20)
        {
          v36 = (float)v17 / (float)v20;
          v34 = fminf(v36, 1.0);
          v35.f32[0] = fmaxf(v36, 1.0);
        }
      }
      v35.f32[1] = 1.0 / v34;
      v42[0] = sub_100106E90((uint64_t)v32, (uint64_t)v33, v29, v31, v35);
      v42[1] = v37;
      v42[2] = v38;
      v42[3] = v39;
      objc_msgSend(a4, "setScissorRect:", v42);
      objc_msgSend(a4, "setVertexBuffer:offset:atIndex:", *(_QWORD *)(a5 + 24), 0, 0);
      objc_msgSend(a4, "setVertexBuffer:offset:atIndex:", *(_QWORD *)(a5 + 32), 0, 1);
      objc_msgSend(a4, "setFragmentBuffer:offset:atIndex:", v25, 0, 0);
      objc_msgSend(a4, "drawPrimitives:vertexStart:vertexCount:", 4, 0, 4);
      swift_unknownObjectRelease(v27);
    }
  }
}

uint64_t sub_10003EA2C(void *a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;

  swift_retain(a2);
  if (objc_msgSend(a1, "newBufferWithLength:options:", 96, 1, swift_retain(a3).n128_f64[0]))
  {
    swift_unknownObjectRelease(a1);
    swift_release(a3);
    swift_release(a2);
  }
  else
  {
    v6 = sub_10001D534();
    v7 = swift_allocError(&type metadata for ConnectionAssistantRenderer.Buffers.Error, v6, 0, 0);
    swift_willThrow(v7);
    swift_release_n(a2);
    swift_release_n(a3);
    swift_unknownObjectRelease(a1);
  }
  return a2;
}

uint64_t destroy for ConnectionAssistantArrowRenderer(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  return swift_unknownObjectRelease(a1[2]);
}

uint64_t *_s8SOSBuddy32ConnectionAssistantArrowRendererVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_unknownObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for ConnectionAssistantArrowRenderer(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[2];
  v9 = a1[2];
  a1[2] = v8;
  swift_unknownObjectRetain(v8);
  swift_unknownObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for ConnectionAssistantArrowRenderer(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = a1[2];
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_unknownObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionnaireNavigationPageForQuestion(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnaireNavigationPageForQuestion(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantArrowRenderer()
{
  return &type metadata for ConnectionAssistantArrowRenderer;
}

uint64_t sub_10003ECE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t, uint64_t, uint64_t);
  _QWORD v40[3];
  id v41;

  v3 = v2;
  v38 = a2;
  v5 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8((uint64_t *)&unk_100326490);
  v37 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40[0] = *(_QWORD *)(a1 + 24);
  v13 = v40[0];
  v14 = sub_10000D75C();
  v15 = swift_retain(v13);
  v41 = (id)static OS_dispatch_queue.main.getter(v15);
  v16 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v39(v8, 1, 1, v16);
  v17 = sub_100003DB8(&qword_10032B0E0);
  v36 = v17;
  v18 = sub_1000084FC((unint64_t *)&qword_1003264A0, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v35 = v18;
  v34 = sub_10002158C();
  Publisher.receive<A>(on:options:)(&v41, v8, v17, v14, v18, v34);
  sub_1000215D4((uint64_t)v8);

  swift_release(v40[0]);
  v19 = swift_allocObject(&unk_1002E6C50, 24, 7);
  swift_weakInit(v19 + 16, a1);
  v20 = swift_allocObject(&unk_1002E6C78, 32, 7);
  *(_QWORD *)(v20 + 16) = v19;
  *(_QWORD *)(v20 + 24) = v3;
  v21 = sub_1000084FC((unint64_t *)&unk_1003264B0, (uint64_t *)&unk_100326490, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v33 = v21;
  v22 = swift_retain(v3);
  v23 = Publisher<>.sink(receiveValue:)(sub_10003F248, v20, v9, v21, v22);
  swift_release(v20);
  v24 = *(void (**)(char *, uint64_t))(v37 + 8);
  v24(v12, v9);
  swift_beginAccess(v3 + 16, v40, 33, 0);
  AnyCancellable.store(in:)(v3 + 16);
  swift_endAccess(v40);
  swift_release(v23);
  v25 = v38;
  v40[0] = *(_QWORD *)(v38 + 24);
  v26 = swift_retain(v40[0]);
  v41 = (id)static OS_dispatch_queue.main.getter(v26);
  v39(v8, 1, 1, v16);
  Publisher.receive<A>(on:options:)(&v41, v8, v36, v14, v35, v34);
  sub_1000215D4((uint64_t)v8);

  swift_release(v40[0]);
  v27 = swift_allocObject(&unk_1002E6CA0, 24, 7);
  swift_weakInit(v27 + 16, v25);
  v28 = swift_allocObject(&unk_1002E6CC8, 32, 7);
  *(_QWORD *)(v28 + 16) = v27;
  *(_QWORD *)(v28 + 24) = v3;
  v29 = swift_retain(v3);
  v30 = Publisher<>.sink(receiveValue:)(sub_10003F280, v28, v9, v33, v29);
  swift_release(v28);
  v24(v12, v9);
  swift_beginAccess(v3 + 16, v40, 33, 0);
  AnyCancellable.store(in:)(v3 + 16);
  swift_endAccess(v40);
  return swift_release(v30);
}

uint64_t sub_10003F060(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_10003F288(result);
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_10003F0B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _BYTE v5[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    sub_10003F10C(result);
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_10003F10C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  UIAccessibilityNotifications v7;
  NSString v8;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 48);
  if (v2)
  {
    v4 = *(_QWORD *)(v2 + 16);
    v3 = *(_QWORD *)(v2 + 24);
    swift_bridgeObjectRetain(v3);
  }
  else
  {
    v4 = 0;
    v3 = 0xE000000000000000;
  }
  if (String.count.getter(v4, v3) >= 1)
  {
    v5 = *(_QWORD *)(v1 + 32);
    if (!v5
      || ((v6 = *(_QWORD *)(v1 + 24), v6 != v4) || v5 != v3)
      && (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, v4, v3, 0) & 1) == 0)
    {
      v7 = UIAccessibilityAnnouncementNotification;
      v8 = String._bridgeToObjectiveC()();
      UIAccessibilityPostNotification(v7, v8);

      v9 = *(_QWORD *)(v1 + 32);
      *(_QWORD *)(v1 + 24) = v4;
      *(_QWORD *)(v1 + 32) = v3;
      v3 = v9;
    }
  }
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10003F1D4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocClassInstance(v0, 40, 7);
}

uint64_t type metadata accessor for VoiceOverFeedback()
{
  return objc_opt_self(_TtC8SOSBuddy17VoiceOverFeedback);
}

uint64_t sub_10003F220()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10003F248(uint64_t a1)
{
  uint64_t v1;

  return sub_10003F060(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10003F254()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003F280(uint64_t a1)
{
  uint64_t v1;

  return sub_10003F0B4(a1, *(_QWORD *)(v1 + 16));
}

void sub_10003F288(uint64_t a1)
{
  double v1;
  double v2;
  uint64_t v3;
  uint64_t inited;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  UIAccessibilityNotifications v8;
  Class isa;
  uint64_t v10;

  if ((*(_BYTE *)(a1 + 80) & 1) == 0 && (*(_BYTE *)(a1 + 66) & 1) == 0 && (*(_BYTE *)(a1 + 192) & 1) == 0)
  {
    v1 = *(double *)(a1 + 168);
    if (v1 < 0.0)
      v2 = -v1;
    else
      v2 = *(double *)(a1 + 168);
    v3 = sub_100003DB8((uint64_t *)&unk_100318F28);
    inited = swift_initStackObject(v3, &v10);
    *(_OWORD *)(inited + 16) = xmmword_10024DEE0;
    *(_QWORD *)(inited + 32) = 7955819;
    *(_QWORD *)(inited + 40) = 0xE300000000000000;
    v5 = 0xD000000000000016;
    if (v2 > 0.785398163)
      v5 = 0xD00000000000001ALL;
    v6 = 0x8000000100263570;
    if (v2 > 0.785398163)
      v6 = 0x8000000100263590;
    *(_QWORD *)(inited + 48) = v5;
    *(_QWORD *)(inited + 56) = v6;
    *(_QWORD *)(inited + 72) = &type metadata for String;
    *(_QWORD *)(inited + 80) = 0x676E6964616568;
    *(_QWORD *)(inited + 88) = 0xE700000000000000;
    *(_QWORD *)(inited + 120) = &type metadata for Double;
    *(double *)(inited + 96) = v1 * 57.2957795;
    v7 = sub_10022499C(inited);
    v8 = UIAccessibilityAnnouncementNotification;
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v7);
    UIAccessibilityPostNotification(v8, isa);

  }
}

id sub_10003F3F4(uint64_t a1, void *a2, int a3)
{
  NSURL *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  void *reserved;
  NSString v26;
  NSString v27;
  id v28;
  void (*v29)(char *, char *, uint64_t);
  void (*v30)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v31)(char *, uint64_t, uint64_t);
  id v32;
  NSString v33;
  NSString v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  char *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  void *clients;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t inited;
  MTKTextureLoaderOption v48;
  NSString *v49;
  unint64_t v50;
  Class isa;
  double v52;
  id v53;
  void (*v54)(char *, uint64_t);
  id v55;
  id v56;
  uint64_t v57;
  uint64_t v59;
  NSURL *v60;
  int v61;
  char *v62;
  void *v63;
  char *v64;
  uint64_t v65;
  id v66;
  char v67[72];

  v61 = a3;
  v6 = sub_100003DB8(&qword_100317D60);
  v8 = __chkstk_darwin(v6, v7);
  v62 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8, v10);
  v13 = (char *)&v59 - v12;
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v59 - v15;
  v17 = type metadata accessor for URL(0);
  v18 = *(_QWORD **)(v17 - 8);
  v20 = __chkstk_darwin(v17, v19);
  v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v23);
  v64 = (char *)&v59 - v24;
  v65 = a1;
  v60 = v3;
  reserved = v3->_reserved;
  v63 = a2;
  v26 = String._bridgeToObjectiveC()();
  v27 = String._bridgeToObjectiveC()();
  v28 = objc_msgSend(reserved, "URLForResource:withExtension:", v26, v27);

  if (v28)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v28);

    v29 = (void (*)(char *, char *, uint64_t))v18[4];
    v29(v13, v22, v17);
    v30 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v18[7];
    v30(v13, 0, 1, v17);
    v31 = (unsigned int (*)(char *, uint64_t, uint64_t))v18[6];
    if (v31(v13, 1, v17) != 1)
    {
      v29(v16, v13, v17);
      v30(v16, 0, 1, v17);
      v32 = v63;
      goto LABEL_9;
    }
  }
  else
  {
    v30 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v18[7];
    v30(v13, 1, 1, v17);
  }
  v32 = v63;
  v33 = String._bridgeToObjectiveC()();
  v34 = String._bridgeToObjectiveC()();
  v35 = objc_msgSend(reserved, "URLForResource:withExtension:", v33, v34);

  if (v35)
  {
    v36 = (uint64_t)v62;
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v35);

    v37 = 0;
  }
  else
  {
    v37 = 1;
    v36 = (uint64_t)v62;
  }
  v30((char *)v36, v37, 1, v17);
  sub_10000B458(v36, (uint64_t)v16, &qword_100317D60);
  sub_1000400C0((uint64_t)v13);
  v31 = (unsigned int (*)(char *, uint64_t, uint64_t))v18[6];
LABEL_9:
  v38 = v31(v16, 1, v17);
  v39 = v64;
  if (v38 == 1)
  {
    sub_1000400C0((uint64_t)v16);
    v40 = sub_100040100();
    swift_allocError(&type metadata for ConnectionAssistantEarthTexturedRenderer.Textures.Error, v40, 0, 0);
    *v41 = v65;
    v41[1] = v32;
    swift_bridgeObjectRetain(v32);
    swift_willThrow(v42);
  }
  else
  {
    ((void (*)(char *, char *, uint64_t))v18[4])(v64, v16, v17);
    clients = v60->_clients;
    URL._bridgeToObjectiveC()(v60);
    v45 = v44;
    v46 = sub_100003DB8(&qword_1003191A8);
    inited = swift_initStackObject(v46, v67);
    *(_OWORD *)(inited + 16) = xmmword_10024E070;
    v48 = MTKTextureLoaderOptionSRGB;
    *(_QWORD *)(inited + 32) = MTKTextureLoaderOptionSRGB;
    *(_QWORD *)(inited + 64) = &type metadata for Bool;
    *(_BYTE *)(inited + 40) = v61 & 1;
    v49 = v48;
    v50 = sub_100224F44(inited);
    type metadata accessor for Option(0);
    sub_100040144();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    *(_QWORD *)&v52 = swift_bridgeObjectRelease(v50).n128_u64[0];
    v66 = 0;
    v32 = objc_msgSend(clients, "newTextureWithContentsOfURL:options:error:", v45, isa, &v66, v52);

    v53 = v66;
    if (v32)
    {
      v54 = (void (*)(char *, uint64_t))v18[1];
      v55 = v66;
      v54(v39, v17);
    }
    else
    {
      v56 = v66;
      _convertNSErrorToError(_:)(v53);

      swift_willThrow(v57);
      ((void (*)(char *, uint64_t))v18[1])(v39, v17);
    }
  }
  return v32;
}

uint64_t sub_10003F88C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 56));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 64));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 72));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 80));
  return v0;
}

uint64_t sub_10003F8E8()
{
  uint64_t v0;

  v0 = sub_10003F88C();
  return swift_deallocClassInstance(v0, 88, 7);
}

uint64_t ConnectionAssistantEarthTexturedRenderer.__allocating_init(device:buffers:renderPipelines:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = swift_allocObject(v3, 48, 7);
  ConnectionAssistantEarthTexturedRenderer.init(device:buffers:renderPipelines:)(a1, a2, a3);
  return v7;
}

_QWORD *ConnectionAssistantEarthTexturedRenderer.init(device:buffers:renderPipelines:)(void *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v8;
  id v9;
  id v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = v3;
  v3[2] = a2;
  v3[4] = a3;
  v8 = type metadata accessor for ConnectionAssistantEarthTexturedRenderer.Textures();
  swift_allocObject(v8, 88, 7);
  swift_retain(a2);
  swift_retain(a3);
  v3[3] = sub_10003FFFC((uint64_t)a1);
  v9 = objc_msgSend(a1, "newBufferWithLength:options:", 288, 1);
  if (v9)
  {
    v10 = v9;
    swift_release(a2);
    swift_release(a3);
    swift_unknownObjectRelease(a1);
    v4[5] = v10;
  }
  else
  {
    v11 = sub_10001D534();
    v12 = swift_allocError(&type metadata for ConnectionAssistantRenderer.Buffers.Error, v11, 0, 0);
    swift_willThrow(v12);
    swift_release(a2);
    swift_release(a3);
    swift_unknownObjectRelease(a1);
    swift_release(v3[2]);
    swift_release(v3[3]);
    swift_release(v3[4]);
    v13 = type metadata accessor for ConnectionAssistantEarthTexturedRenderer();
    swift_deallocPartialClassInstance(v3, v13, 48, 7);
  }
  return v4;
}

uint64_t type metadata accessor for ConnectionAssistantEarthTexturedRenderer.Textures()
{
  return objc_opt_self(_TtCC8SOSBuddy40ConnectionAssistantEarthTexturedRendererP33_756D9E065E9B9D395162288518CCAB8C8Textures);
}

_QWORD *ConnectionAssistantEarthTexturedRenderer.deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_unknownObjectRelease(v0[5]);
  return v0;
}

uint64_t ConnectionAssistantEarthTexturedRenderer.__deallocating_deinit()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  swift_unknownObjectRelease(v0[5]);
  return swift_deallocClassInstance(v0, 48, 7);
}

void sub_10003FB28(uint64_t a1, uint64_t a2, void *a3, double a4, double a5)
{
  _QWORD *v5;
  _QWORD *v6;
  int v10;
  float v11;
  float v12;
  float32x4_t v13;
  float32x4_t v14;
  float32x4_t v15;
  float32x4_t v16;
  float32x4_t v17;
  float32x4_t v18;
  float32x4_t v19;
  float32x4_t v20;
  float v21;
  simd_float4 v22;
  double v23;
  float v24;
  int v25;
  int v26;
  void *v27;
  char *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  NSString v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  simd_float4 v44;
  simd_float4 v45;
  simd_float4 v46;
  simd_float4 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  float v54;
  float32x4_t v55;
  simd_float4 v56;
  float32x4_t v57;
  simd_float4 v58;
  float32x4_t v59;
  simd_float4 v60;
  float32x4_t v61;
  simd_float4 v62;
  _BYTE v63[112];
  _OWORD v64[4];
  uint64_t v65;
  uint64_t v66;
  int v67;
  char v68;
  simd_float4x4 v69;
  simd_float4x4 v70;

  v6 = v5;
  ConnectionAssistantEarth.project(camera:)((float32x4_t *)a2, (uint64_t)v63, a5);
  sub_10000B458((uint64_t)v63, (uint64_t)v64, &qword_1003191B8);
  if ((v68 & 1) == 0)
  {
    v49 = v64[2];
    v50 = v64[1];
    v48 = v64[3];
    v51 = v66;
    v52 = v65;
    v10 = v67;
    v11 = *(float *)(a2 + 24);
    if (*(float *)(a2 + 28) < v11)
      v11 = *(float *)(a2 + 28);
    v12 = v11 * 0.5;
    v53 = v64[0];
    v54 = *(float *)(a1 + 68);
    *(double *)v13.i64 = ConnectionAssistantEarth.model.getter();
    v14 = *(float32x4_t *)(a2 + 192);
    v15 = *(float32x4_t *)(a2 + 208);
    v16 = *(float32x4_t *)(a2 + 224);
    v17 = *(float32x4_t *)(a2 + 240);
    v59 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v18.f32[0]), v15, *(float32x2_t *)v18.f32, 1), v16, v18, 2), v17, v18, 3);
    v61 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v13.f32[0]), v15, *(float32x2_t *)v13.f32, 1), v16, v13, 2), v17, v13, 3);
    v57 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v19.f32[0]), v15, *(float32x2_t *)v19.f32, 1), v16, v19, 2), v17, v19, 3);
    v55 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v14, v20.f32[0]), v15, *(float32x2_t *)v20.f32, 1), v16, v20, 2), v17, v20, 3);
    v21 = sinf(v12);
    v69.columns[3] = (simd_float4)v55;
    v69.columns[1] = (simd_float4)v59;
    v69.columns[0] = (simd_float4)v61;
    v69.columns[2] = (simd_float4)v57;
    v70 = __invert_f4(v69);
    v22 = v70.columns[0];
    v70.columns[0] = (simd_float4)v61;
    v70.columns[0].i32[3] = 0;
    v62 = v70.columns[0];
    v70.columns[0] = (simd_float4)v59;
    v70.columns[0].i32[3] = 0;
    v60 = v70.columns[0];
    v70.columns[0] = (simd_float4)v57;
    v70.columns[0].i32[3] = 0;
    v58 = v70.columns[0];
    v70.columns[0] = (simd_float4)v55;
    v70.columns[0].i32[3] = 0;
    v56 = v70.columns[0];
    v22.i32[3] = 0;
    v70.columns[1].i32[3] = 0;
    v46 = v70.columns[1];
    v47 = v22;
    v70.columns[2].i32[3] = 0;
    v70.columns[3].i32[3] = 0;
    v44 = v70.columns[3];
    v45 = v70.columns[2];
    v23 = *(double *)(a2 + 16);
    v24 = ConnectionAssistantCamera.Viewport.normalizedPointSize.getter(*(_QWORD *)a2, *(_QWORD *)(a2 + 8), v23);
    v25 = *(_DWORD *)(a2 + 32);
    v26 = *(_DWORD *)(a1 + 76);
    v27 = (void *)v6[5];
    v28 = (char *)objc_msgSend((id)swift_unknownObjectRetain(v27), "contents");
    v29 = v27;
    *(_OWORD *)v28 = v50;
    *((_OWORD *)v28 + 1) = v49;
    *((_OWORD *)v28 + 2) = v48;
    *((simd_float4 *)v28 + 3) = v62;
    *((simd_float4 *)v28 + 4) = v60;
    *((simd_float4 *)v28 + 5) = v58;
    *((simd_float4 *)v28 + 6) = v56;
    *((simd_float4 *)v28 + 7) = v47;
    *((simd_float4 *)v28 + 8) = v46;
    *((simd_float4 *)v28 + 9) = v45;
    *((simd_float4 *)v28 + 10) = v44;
    *((float *)v28 + 44) = v24;
    *(float *)&v23 = v23;
    *((_DWORD *)v28 + 45) = LODWORD(v23);
    *((_DWORD *)v28 + 46) = v25;
    *((_DWORD *)v28 + 47) = v26;
    *((float *)v28 + 48) = v21;
    *(_QWORD *)(v28 + 196) = 0x40E71C72C0A00000;
    *((_DWORD *)v28 + 51) = 1074790400;
    *((float32x2_t *)v28 + 26) = vmul_f32(vmul_n_f32((float32x2_t)0x42DA000046B73E00, v54), (float32x2_t)0x3BA0902E39D1B717);
    *((_DWORD *)v28 + 54) = 0;
    *((_OWORD *)v28 + 14) = v53;
    *((float *)v28 + 60) = v54;
    *((float *)v28 + 61) = v54 * v54;
    *((_QWORD *)v28 + 31) = v52;
    *((_QWORD *)v28 + 32) = v51;
    *((_DWORD *)v28 + 66) = v10;
    *((_DWORD *)v28 + 67) = 0;
    *((float32x2_t *)v28 + 34) = vmul_n_f32((float32x2_t)0x3F7851EC3F000000, v54);
    *((float *)v28 + 70) = v54 * 1.2;
    v30 = sub_10022634C(2);
    if (v30)
    {
      v31 = v30;
      v32 = String._bridgeToObjectiveC()();
      objc_msgSend(a3, "setLabel:", v32);

      objc_msgSend(a3, "setRenderPipelineState:", v31);
      v33 = v6[2];
      objc_msgSend(a3, "setVertexBuffer:offset:atIndex:", *(_QWORD *)(v33 + 24), 0, 0);
      objc_msgSend(a3, "setVertexBuffer:offset:atIndex:", *(_QWORD *)(v33 + 32), 0, 1);
      objc_msgSend(a3, "setFragmentBuffer:offset:atIndex:", v29, 0, 0);
      v34 = (_QWORD *)v6[3];
      v35 = v34[5];
      if (!v35)
      {
        v36 = sub_10003F3F4(0xD000000000000015, (void *)0x8000000100263770, 1);
        v37 = v34[5];
        v34[5] = v36;
        swift_unknownObjectRelease(v37);
        v35 = v34[5];
      }
      objc_msgSend(a3, "setFragmentTexture:atIndex:", v35, 0, *(_OWORD *)&v44, *(_OWORD *)&v45, *(_OWORD *)&v46, *(_OWORD *)&v47);
      v38 = v34[6];
      if (!v38)
      {
        v39 = sub_10003F3F4(0xD000000000000015, (void *)0x8000000100263750, 0);
        v40 = v34[6];
        v34[6] = v39;
        swift_unknownObjectRelease(v40);
        v38 = v34[6];
      }
      objc_msgSend(a3, "setFragmentTexture:atIndex:", v38, 1);
      v41 = v34[7];
      if (!v41)
      {
        v42 = sub_10003F3F4(0xD000000000000017, (void *)0x8000000100263730, 0);
        v43 = v34[7];
        v34[7] = v42;
        swift_unknownObjectRelease(v43);
        v41 = v34[7];
      }
      objc_msgSend(a3, "setFragmentTexture:atIndex:", v41, 2);
      objc_msgSend(a3, "drawPrimitives:vertexStart:vertexCount:", 4, 0, 4);
      swift_unknownObjectRelease(v31);
    }
  }
}

void sub_10003FFDC(uint64_t a1, uint64_t a2, void *a3, double a4, double a5)
{
  sub_10003FB28(a1, a2, a3, a4, a5);
}

uint64_t sub_10003FFFC(uint64_t a1)
{
  uint64_t v1;
  id v3;
  uint64_t v4;
  uint64_t ObjCClassFromMetadata;

  *(_OWORD *)(v1 + 72) = 0u;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_QWORD *)(v1 + 16) = a1;
  v3 = objc_allocWithZone((Class)MTKTextureLoader);
  swift_unknownObjectRetain(a1);
  *(_QWORD *)(v1 + 24) = objc_msgSend(v3, "initWithDevice:", a1);
  v4 = type metadata accessor for ConnectionAssistantEarthTexturedRenderer.Textures();
  ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v4);
  *(_QWORD *)(v1 + 32) = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
  return v1;
}

uint64_t type metadata accessor for ConnectionAssistantEarthTexturedRenderer()
{
  return objc_opt_self(_TtC8SOSBuddy40ConnectionAssistantEarthTexturedRenderer);
}

uint64_t sub_1000400C0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003DB8(&qword_100317D60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_100040100()
{
  unint64_t result;

  result = qword_1003191A0;
  if (!qword_1003191A0)
  {
    result = swift_getWitnessTable("y}\t", &type metadata for ConnectionAssistantEarthTexturedRenderer.Textures.Error);
    atomic_store(result, (unint64_t *)&qword_1003191A0);
  }
  return result;
}

unint64_t sub_100040144()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003191B0;
  if (!qword_1003191B0)
  {
    type metadata accessor for Option(255);
    result = swift_getWitnessTable(&unk_10024CD00, v1);
    atomic_store(result, (unint64_t *)&qword_1003191B0);
  }
  return result;
}

_QWORD *initializeBufferWithCopyOfBuffer for QuestionnaireLoadingState.Request(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t destroy for QuestionnaireLoadingState.Request(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
}

_QWORD *assignWithCopy for QuestionnaireLoadingState.Request(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

_QWORD *assignWithTake for QuestionnaireLoadingState.Request(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for ConnectionAssistantEarthTexturedRenderer.Textures.Error()
{
  return &type metadata for ConnectionAssistantEarthTexturedRenderer.Textures.Error;
}

uint64_t sub_100040244(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_retain(result);
  return result;
}

double destroy for TryOutIntroductionView(uint64_t a1)
{
  double result;

  swift_release(*(_QWORD *)a1);
  sub_100040294(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
  swift_release(*(_QWORD *)(a1 + 32));
  swift_release(*(_QWORD *)(a1 + 40));
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(a1 + 48)).n128_u64[0];
  return result;
}

uint64_t sub_100040294(uint64_t result, char a2)
{
  if ((a2 & 1) == 0)
    return swift_release(result);
  return result;
}

uint64_t initializeWithCopy for TryOutIntroductionView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  v7 = *((_BYTE *)a2 + 24);
  swift_retain(v4);
  sub_100040244(v6, v7);
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = v7;
  v8 = a2[4];
  v9 = a2[5];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v9;
  v10 = a2[6];
  *(_QWORD *)(a1 + 48) = v10;
  swift_retain(v8);
  swift_retain(v9);
  swift_bridgeObjectRetain(v10);
  return a1;
}

uint64_t *assignWithCopy for TryOutIntroductionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = *((_BYTE *)a2 + 24);
  sub_100040244(v6, v7);
  v8 = a1[2];
  v9 = *((_BYTE *)a1 + 24);
  a1[2] = v6;
  *((_BYTE *)a1 + 24) = v7;
  sub_100040294(v8, v9);
  v10 = a1[4];
  v11 = a2[4];
  a1[4] = v11;
  swift_retain(v11);
  swift_release(v10);
  v12 = a2[5];
  v13 = a1[5];
  a1[5] = v12;
  swift_retain(v12);
  swift_release(v13);
  v14 = a2[6];
  v15 = a1[6];
  a1[6] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

uint64_t *assignWithTake for TryOutIntroductionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = *((_BYTE *)a2 + 24);
  v6 = a1[2];
  v7 = *((_BYTE *)a1 + 24);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *((_BYTE *)a1 + 24) = v5;
  sub_100040294(v6, v7);
  swift_release(a1[4]);
  v8 = a1[5];
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  swift_release(v8);
  v9 = a1[6];
  a1[6] = a2[6];
  swift_bridgeObjectRelease(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for TryOutIntroductionView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TryOutIntroductionView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 40) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TryOutIntroductionView()
{
  return &type metadata for TryOutIntroductionView;
}

uint64_t sub_1000404F0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100295D58, 1);
}

uint64_t sub_100040500@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t OpaqueTypeConformance2;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[4];
  int v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _OWORD v64[11];
  uint64_t v65;
  __int128 v66[11];
  uint64_t v67;
  _QWORD v68[5];
  uint64_t v69;
  _QWORD v70[3];

  v2 = v1;
  v63 = a1;
  v3 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v53 = *(_QWORD *)(v3 - 8);
  v54 = v3;
  __chkstk_darwin(v3, v4);
  v6 = &v50[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = sub_100003DB8(&qword_1003191C0);
  v57 = *(_QWORD *)(v7 - 8);
  v58 = v7;
  __chkstk_darwin(v7, v8);
  v55 = &v50[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_100003DB8(&qword_1003191C8);
  v61 = *(_QWORD *)(v10 - 8);
  v62 = v10;
  __chkstk_darwin(v10, v11);
  v56 = &v50[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v59 = sub_100003DB8(&qword_1003191D0);
  __chkstk_darwin(v59, v13);
  v60 = &v50[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = *(_QWORD **)v1;
  if (*(_QWORD *)v1)
  {
    v16 = v15[9];
    v17 = v15[10];
    sub_100007BBC(v15 + 6, v16);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v17 + 24))(v68, v16, v17);
    v52 = *(_QWORD *)(v1 + 16);
    v18 = v52;
    v19 = *(unsigned __int8 *)(v1 + 24);
    v20 = *(_QWORD *)(v1 + 32);
    v21 = *(_QWORD *)(v1 + 40);
    v69 = *(_QWORD *)(v2 + 48);
    v70[0] = v20;
    sub_100007CBC((uint64_t)v68, (uint64_t)v66);
    v22 = swift_allocObject(&unk_1002E6E48, 112, 7);
    v23 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v22 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v22 + 32) = v23;
    *(_OWORD *)(v22 + 48) = *(_OWORD *)(v2 + 32);
    *(_QWORD *)(v22 + 64) = *(_QWORD *)(v2 + 48);
    sub_100007D04(v66, v22 + 72);
    sub_100007CBC((uint64_t)v68, (uint64_t)v66);
    v24 = swift_allocObject(&unk_1002E6E70, 112, 7);
    v25 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v24 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v24 + 32) = v25;
    *(_OWORD *)(v24 + 48) = *(_OWORD *)(v2 + 32);
    *(_QWORD *)(v24 + 64) = *(_QWORD *)(v2 + 48);
    sub_100007D04(v66, v24 + 72);
    swift_retain(v15);
    v51 = v19;
    sub_100040244(v18, v19);
    sub_100031A88(v70);
    swift_retain(v21);
    sub_100034218(&v69);
    swift_retain(v15);
    sub_100040244(v18, v19);
    sub_100031A88(v70);
    swift_retain(v21);
    sub_100034218(&v69);
    sub_10012E328(v64, ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter, 0, sub_1000423E8, v22, sub_100042448, v24, 0);
    v27 = v53;
    v26 = v54;
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v53 + 104))(v6, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v54);
    v28 = sub_100003DB8(&qword_1003191D8);
    v29 = sub_1000084FC(&qword_1003191E0, &qword_1003191D8, (uint64_t)&unk_100256288);
    v30 = v55;
    View.navigationBarTitleDisplayMode(_:)(v6, v28, v29);
    (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v6, v26);
    v66[8] = v64[8];
    v66[9] = v64[9];
    v66[10] = v64[10];
    v67 = v65;
    v66[4] = v64[4];
    v66[5] = v64[5];
    v66[6] = v64[6];
    v66[7] = v64[7];
    v66[0] = v64[0];
    v66[1] = v64[1];
    v66[2] = v64[2];
    v66[3] = v64[3];
    v31 = sub_100007E9C((uint64_t *)v66);
    __chkstk_darwin(v31, v32);
    *(_QWORD *)&v50[-16] = v2;
    v33 = sub_100003DB8(&qword_1003191E8);
    *(_QWORD *)&v64[0] = v28;
    *((_QWORD *)&v64[0] + 1) = v29;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v64, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v35 = sub_1000084FC(&qword_1003191F0, &qword_1003191E8, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v36 = v56;
    v37 = v58;
    View.toolbar<A>(content:)(sub_100042454, &v50[-32], v58, v33, OpaqueTypeConformance2, v35);
    (*(void (**)(_BYTE *, uint64_t))(v57 + 8))(v30, v37);
    v38 = v52;
    LOBYTE(OpaqueTypeConformance2) = v51;
    sub_100040244(v52, v51);
    LOBYTE(v21) = sub_100042548(v38, OpaqueTypeConformance2);
    v39 = sub_100040294(v38, OpaqueTypeConformance2);
    v40 = v36;
    if ((v21 & 1) != 0)
      v41 = static Edge.Set.top.getter(v39);
    else
      v41 = Edge.Set.init(rawValue:)(0);
    v42 = v41;
    v44 = (uint64_t)v60;
    v43 = v61;
    v45 = v62;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v61 + 16))(v60, v40, v62);
    *(_BYTE *)(v44 + *(int *)(v59 + 36)) = v42;
    (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v40, v45);
    _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v68);
    return sub_10000B458(v44, v63, &qword_1003191D0);
  }
  else
  {
    v47 = *(_QWORD *)(v1 + 8);
    v48 = type metadata accessor for UIMetrics();
    v49 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v47, v48, v49);
    __break(1u);
  }
  return result;
}

void sub_100040A1C(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  id v19;
  id v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t KeyPath;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;

  v6 = sub_100003DB8(&qword_100319248);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100003DB8(&qword_100319250);
  v11 = __chkstk_darwin(v53, v10);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v48 - v15;
  v17 = *a1;
  if (*a1)
  {
    v18 = (void *)objc_opt_self(UIApplication);
    v19 = objc_msgSend(v18, "sharedApplication", swift_retain(v17).n128_f64[0]);
    v20 = objc_msgSend(v19, "userInterfaceLayoutDirection");

    swift_release(v17);
    v21 = 0xD000000000000013;
    v22 = 0xD000000000000017;
    if (v20 != (id)1)
      v22 = 0xD000000000000013;
    v52 = v22;
    v23 = 0x80000001002638B0;
    if (v20 != (id)1)
    {
      v23 = 0x8000000100263890;
      v21 = 0;
    }
    v50 = v21;
    v51 = v23;
    if (v20 == (id)1)
      v24 = 0x8000000100263890;
    else
      v24 = 0;
    KeyPath = swift_getKeyPath(&unk_10024F150);
    v26 = type metadata accessor for UIMetrics();
    v27 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v28 = EnvironmentObject.init()(v26, v27);
    v49 = v29;
    *(_QWORD *)v9 = static HorizontalAlignment.center.getter(v28);
    *((_QWORD *)v9 + 1) = 0;
    v9[16] = 0;
    v30 = sub_100003DB8(&qword_100319258);
    sub_100040DA4(a1, (uint64_t)&v9[*(int *)(v30 + 44)]);
    v32 = a2[3];
    v31 = a2[4];
    sub_100007BBC(a2, v32);
    v33 = (*(double (**)(uint64_t, uint64_t))(v31 + 24))(v32, v31);
    v35 = v34;
    v37 = v36;
    v39 = v38;
    v40 = static Edge.Set.all.getter(v33);
    sub_10000B234((uint64_t)v9, (uint64_t)v13, &qword_100319248);
    v41 = &v13[*(int *)(v53 + 36)];
    *v41 = v40;
    *((double *)v41 + 1) = v33;
    *((_QWORD *)v41 + 2) = v35;
    *((_QWORD *)v41 + 3) = v37;
    *((_QWORD *)v41 + 4) = v39;
    v41[40] = 0;
    sub_100007FF0((uint64_t)v9, &qword_100319248);
    sub_10000B458((uint64_t)v13, (uint64_t)v16, &qword_100319250);
    sub_10000B234((uint64_t)v16, (uint64_t)v13, &qword_100319250);
    v42 = v49;
    *(_QWORD *)a3 = v28;
    *(_QWORD *)(a3 + 8) = v42;
    *(_QWORD *)(a3 + 16) = KeyPath;
    *(_BYTE *)(a3 + 24) = 0;
    v43 = v51;
    *(_QWORD *)(a3 + 32) = v52;
    *(_QWORD *)(a3 + 40) = v43;
    *(_QWORD *)(a3 + 48) = v50;
    *(_QWORD *)(a3 + 56) = v24;
    v44 = sub_100003DB8(&qword_100319260);
    sub_10000B234((uint64_t)v13, a3 + *(int *)(v44 + 48), &qword_100319250);
    swift_retain(v28);
    sub_100040244(KeyPath, 0);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v43);
    sub_100007FF0((uint64_t)v16, &qword_100319250);
    sub_100007FF0((uint64_t)v13, &qword_100319250);
    swift_release(v28);
    sub_100040294(KeyPath, 0);
    swift_bridgeObjectRelease(v24);
    swift_bridgeObjectRelease(v43);
  }
  else
  {
    v45 = a1[1];
    v46 = type metadata accessor for UIMetrics();
    v47 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, v45, v46, v47);
    __break(1u);
  }
}

uint64_t sub_100040DA4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  char v33;
  BOOL v34;
  uint64_t KeyPath;
  id v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  char v50;
  double v51;
  uint64_t v52;
  char v53;
  char v54;
  _BYTE *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  char v72;
  uint64_t v73;
  id v74;
  UIContentSizeCategory v75;
  BOOL v76;
  uint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  id v93;
  UIContentSizeCategory v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char v106;
  char v107;
  uint64_t v108;
  id v109;
  uint64_t v110;
  id v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  double v124;
  uint64_t v125;
  double v126;
  id v127;
  char v128;
  uint64_t v129;
  _BYTE *v130;
  unsigned __int8 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  char v136;
  _OWORD *v137;
  __int128 v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  char v147;
  char v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  uint64_t result;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _BYTE v156[12];
  int v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  _BYTE *v162;
  uint64_t v163;
  _BYTE *v164;
  uint64_t v165;
  uint64_t v166;
  _BYTE *v167;
  _BYTE *v168;
  uint64_t v169;
  UIContentSizeCategory v170;
  unsigned __int8 v171;
  _OWORD v172[17];
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  _OWORD v184[3];
  _OWORD v185[10];
  uint64_t v186;
  double v187;
  char v188;
  __int128 v189;
  __int128 v190;
  char v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  __int128 v195;
  __int128 v196;
  __int128 v197;
  __int128 v198;
  __int128 v199;
  __int128 v200;
  __int128 v201;
  unsigned __int8 v202;
  unsigned __int8 v203;
  _BYTE v204[7];
  _BYTE v205[7];
  _BYTE v206[7];
  __int128 v207;
  __int128 v208;
  __int128 v209;
  __int128 v210;
  __int128 v211;
  __int128 v212;
  __int128 v213;
  __int128 v214;
  __int128 v215;
  __int128 v216;
  _OWORD v217[10];
  _OWORD v218[17];
  char v219;
  char v220;
  _OWORD v221[10];
  _BYTE v222[280];
  uint64_t v223;
  uint64_t v224;
  char v225;
  uint64_t v226;
  uint64_t v227;
  BOOL v228;
  __int16 v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  uint64_t v233;
  uint64_t v234;
  BOOL v235;
  __int16 v236;
  uint64_t v237;
  uint64_t v238;
  char v239;
  uint64_t v240;
  uint64_t v241;
  BOOL v242;
  __int16 v243;

  v163 = a2;
  v3 = type metadata accessor for AccessibilityTraits(0);
  v165 = *(_QWORD *)(v3 - 8);
  v166 = v3;
  __chkstk_darwin(v3, v4);
  v164 = &v156[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = sub_100003DB8(&qword_100319268);
  v8 = __chkstk_darwin(v6, v7);
  v10 = &v156[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __chkstk_darwin(v8, v11);
  v162 = &v156[-v13];
  __chkstk_darwin(v12, v14);
  v167 = &v156[-v15];
  v16 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001ALL, 0x80000001002638D0);
  v17 = Text.init(_:tableName:bundle:comment:)(v16);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = static Font.title.getter();
  static Font.Weight.semibold.getter();
  v25 = Font.weight(_:)(v24);
  swift_release(v24);
  v26 = Text.font(_:)(v25, v17, v19, v23, v21);
  v28 = v27;
  LODWORD(v160) = v29;
  v161 = v30;
  swift_release(v25);
  sub_10002B438(v17, v19, v23);
  swift_bridgeObjectRelease(v21);
  v31 = *a1;
  if (*a1)
  {
    v32 = *(id *)(v31 + 112);
    v33 = static UIContentSizeCategory.>= infix(_:_:)(v32, UIContentSizeCategoryAccessibilityExtraLarge);

    v34 = (v33 & 1) == 0;
    KeyPath = swift_getKeyPath(&unk_10024F178);
    v169 = v31;
    v36 = *(id *)(v31 + 112);
    v37 = static Alignment.center.getter(v36);
    v39 = v38;
    v170 = UIContentSizeCategoryAccessibilityExtraLarge;
    v40 = static UIContentSizeCategory.>= infix(_:_:)(v36, UIContentSizeCategoryAccessibilityExtraLarge);
    v168 = v10;
    if ((v40 & 1) != 0)
    {
      v41 = static Alignment.center.getter(v40);
      v43 = static Alignment.== infix(_:_:)(v37, v39, v41, v42);
      if ((v43 & 1) != 0)
      {
        v37 = static Alignment.leading.getter(v43, v44);
        v39 = v45;
      }
    }

    v237 = v26;
    v238 = v28;
    v46 = v160 & 1;
    v239 = v160 & 1;
    v47 = v161;
    v240 = v161;
    v241 = KeyPath;
    v242 = v34;
    v243 = 256;
    sub_1001317C8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v221, 0.0, 1, 0.0, 1, v37, v39);
    sub_10002B438(v26, v28, v46);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v47);
    v48 = v169;
    v49 = *(id *)(v169 + 112);
    v50 = static UIContentSizeCategory.>= infix(_:_:)(v49, v170);

    if ((v50 & 1) != 0)
      v51 = 1.0;
    else
      v51 = 0.5;
    v52 = swift_getKeyPath(&unk_10024F1A8);
    v53 = static Edge.Set.top.getter(v52);
    v219 = 1;
    v54 = static Edge.Set.bottom.getter();
    v220 = 1;
    v218[6] = v221[6];
    v218[7] = v221[7];
    v218[8] = v221[8];
    v218[9] = v221[9];
    v218[2] = v221[2];
    v218[3] = v221[3];
    v218[4] = v221[4];
    v218[5] = v221[5];
    v218[0] = v221[0];
    v218[1] = v221[1];
    *(_QWORD *)&v218[10] = v52;
    *((double *)&v218[10] + 1) = v51;
    LOBYTE(v218[11]) = v53;
    *(_OWORD *)((char *)&v218[11] + 8) = 0u;
    *(_OWORD *)((char *)&v218[12] + 8) = 0u;
    BYTE8(v218[13]) = v219;
    LOBYTE(v218[14]) = v54;
    *(_OWORD *)((char *)&v218[14] + 8) = 0u;
    *(_OWORD *)((char *)&v218[15] + 8) = 0u;
    BYTE8(v218[16]) = 1;
    v55 = v164;
    static AccessibilityTraits.isHeader.getter();
    v56 = sub_100003DB8(&qword_100319270);
    v57 = sub_10002B614(&qword_100319278, &qword_100319270, (void (*)(void))sub_100042BC8);
    v58 = (uint64_t)v162;
    View.accessibility(addTraits:)(v55, v56, v57);
    (*(void (**)(_BYTE *, uint64_t))(v165 + 8))(v55, v166);
    memcpy(v222, v218, 0x109uLL);
    sub_100038994((uint64_t)v222);
    sub_10000B458(v58, (uint64_t)v167, &qword_100319268);
    v59 = LocalizedStringKey.init(stringLiteral:)(0x100000000000003FLL, 0x8000000100263930);
    v60 = Text.init(_:tableName:bundle:comment:)(v59);
    v62 = v61;
    v64 = v63;
    v66 = v65 & 1;
    v67 = static Font.body.getter(v60);
    v165 = Text.font(_:)(v67, v60, v62, v66, v64);
    v166 = v68;
    v70 = v69;
    v72 = v71;
    swift_release(v67);
    sub_10002B438(v60, v62, v66);
    swift_bridgeObjectRelease(v64);
    v73 = v48;
    v74 = *(id *)(v48 + 112);
    v75 = v170;
    LOBYTE(v62) = static UIContentSizeCategory.>= infix(_:_:)(v74, v170);

    v76 = (v62 & 1) == 0;
    v77 = swift_getKeyPath(&unk_10024F178);
    v78 = *(id *)(v73 + 112);
    v79 = static Alignment.center.getter(v78);
    v81 = v80;
    v82 = static UIContentSizeCategory.>= infix(_:_:)(v78, v75);
    if ((v82 & 1) != 0)
    {
      v83 = static Alignment.center.getter(v82);
      v85 = static Alignment.== infix(_:_:)(v79, v81, v83, v84);
      if ((v85 & 1) != 0)
      {
        v79 = static Alignment.leading.getter(v85, v86);
        v81 = v87;
      }
    }

    v88 = v72;
    v89 = v165;
    v90 = v166;
    v230 = v165;
    v231 = v70;
    v91 = v88 & 1;
    v232 = v88 & 1;
    v233 = v166;
    v234 = v77;
    v235 = v76;
    v236 = 256;
    sub_1001317C8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v217, 0.0, 1, 0.0, 1, v79, v81);
    sub_10002B438(v89, v70, v91);
    swift_release(v77);
    swift_bridgeObjectRelease(v90);
    v213 = v217[6];
    v214 = v217[7];
    v215 = v217[8];
    v216 = v217[9];
    v209 = v217[2];
    v210 = v217[3];
    v211 = v217[4];
    v212 = v217[5];
    v207 = v217[0];
    v208 = v217[1];
    v92 = v169;
    v93 = *(id *)(v169 + 112);
    v94 = v170;
    LODWORD(v161) = static UIContentSizeCategory.>= infix(_:_:)(v93, v170);

    v165 = swift_getKeyPath(&unk_10024F1A8);
    LODWORD(v164) = static Edge.Set.top.getter(v165);
    v202 = 1;
    LODWORD(v166) = static Edge.Set.bottom.getter();
    LODWORD(v162) = v202;
    v203 = 1;
    v95 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000057, 0x80000001002639B0);
    v96 = Text.init(_:tableName:bundle:comment:)(v95);
    v98 = v97;
    v100 = v99;
    v102 = v101 & 1;
    v103 = static Font.body.getter(v96);
    v104 = Text.font(_:)(v103, v96, v98, v102, v100);
    v158 = v105;
    v159 = v104;
    v107 = v106;
    v160 = v108;
    swift_release(v103);
    sub_10002B438(v96, v98, v102);
    swift_bridgeObjectRelease(v100);
    v109 = *(id *)(v92 + 112);
    v157 = static UIContentSizeCategory.>= infix(_:_:)(v109, v94);

    v110 = swift_getKeyPath(&unk_10024F178);
    v111 = *(id *)(v92 + 112);
    v112 = static Alignment.center.getter(v111);
    v114 = v113;
    v115 = static UIContentSizeCategory.>= infix(_:_:)(v111, v94);
    if ((v115 & 1) != 0)
    {
      v116 = static Alignment.center.getter(v115);
      v118 = static Alignment.== infix(_:_:)(v112, v114, v116, v117);
      if ((v118 & 1) != 0)
      {
        v112 = static Alignment.leading.getter(v118, v119);
        v114 = v120;
      }
    }

    v122 = v159;
    v121 = v160;
    v123 = v107 & 1;
    v124 = 0.5;
    v223 = v159;
    v125 = v158;
    v224 = v158;
    v225 = v123;
    if ((v161 & 1) != 0)
      v126 = 1.0;
    else
      v126 = 0.5;
    v226 = v160;
    v227 = v110;
    v228 = (v157 & 1) == 0;
    v229 = 256;
    sub_1001317C8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, &v192, 0.0, 1, 0.0, 1, v112, v114);
    sub_10002B438(v122, v125, v123);
    swift_release(v110);
    swift_bridgeObjectRelease(v121);
    v127 = *(id *)(v169 + 112);
    v128 = static UIContentSizeCategory.>= infix(_:_:)(v127, v170);

    if ((v128 & 1) != 0)
      v124 = 1.0;
    v160 = swift_getKeyPath(&unk_10024F1A8);
    LODWORD(v169) = static Edge.Set.top.getter(v160);
    v171 = 1;
    v130 = v167;
    v129 = (uint64_t)v168;
    sub_10000B234((uint64_t)v167, (uint64_t)v168, &qword_100319268);
    v131 = v203;
    LODWORD(v170) = v203;
    LODWORD(v161) = v171;
    v132 = v129;
    v133 = v163;
    sub_10000B234(v132, v163, &qword_100319268);
    v134 = sub_100003DB8(&qword_1003192D0);
    v135 = (void *)(v133 + *(int *)(v134 + 48));
    v172[6] = v213;
    v172[7] = v214;
    v172[8] = v215;
    v172[9] = v216;
    v172[4] = v211;
    v172[5] = v212;
    v172[2] = v209;
    v172[3] = v210;
    v172[0] = v207;
    v172[1] = v208;
    *(_QWORD *)&v172[10] = v165;
    *((double *)&v172[10] + 1) = v126;
    LOBYTE(v172[11]) = (_BYTE)v164;
    *(_DWORD *)((char *)&v172[11] + 1) = *(_DWORD *)v206;
    DWORD1(v172[11]) = *(_DWORD *)&v206[3];
    *(_OWORD *)((char *)&v172[11] + 8) = 0u;
    *(_OWORD *)((char *)&v172[12] + 8) = 0u;
    v136 = (char)v162;
    BYTE8(v172[13]) = (_BYTE)v162;
    *(_DWORD *)((char *)&v172[13] + 9) = *(_DWORD *)v205;
    HIDWORD(v172[13]) = *(_DWORD *)&v205[3];
    LOBYTE(v172[14]) = v166;
    *(_DWORD *)((char *)&v172[14] + 1) = *(_DWORD *)v204;
    DWORD1(v172[14]) = *(_DWORD *)&v204[3];
    *(_OWORD *)((char *)&v172[15] + 8) = 0u;
    *(_OWORD *)((char *)&v172[14] + 8) = 0u;
    BYTE8(v172[16]) = v131;
    memcpy(v135, v172, 0x109uLL);
    v137 = (_OWORD *)(v133 + *(int *)(v134 + 64));
    v179 = v198;
    v180 = v199;
    v181 = v200;
    v182 = v201;
    v177 = v196;
    v178 = v197;
    v138 = v194;
    v175 = v194;
    v176 = v195;
    v173 = v192;
    v174 = v193;
    v139 = v160;
    *(_QWORD *)&v183 = v160;
    *((double *)&v183 + 1) = v124;
    v140 = v199;
    v141 = v200;
    v142 = v197;
    v137[6] = v198;
    v137[7] = v140;
    v143 = v182;
    v144 = v183;
    v137[8] = v141;
    v137[9] = v143;
    v145 = v176;
    v146 = v177;
    v137[2] = v138;
    v137[3] = v145;
    v147 = v169;
    LOBYTE(v184[0]) = v169;
    *(_OWORD *)((char *)v184 + 8) = 0u;
    *(_OWORD *)((char *)&v184[1] + 8) = 0u;
    v148 = v161;
    BYTE8(v184[2]) = v161;
    v137[4] = v146;
    v137[5] = v142;
    v149 = v174;
    *v137 = v173;
    v137[1] = v149;
    v150 = v184[0];
    v151 = v184[1];
    v137[10] = v144;
    v137[11] = v150;
    v137[12] = v151;
    *(_OWORD *)((char *)v137 + 201) = *(_OWORD *)((char *)&v184[1] + 9);
    sub_10003893C((uint64_t)v172);
    sub_10003893C((uint64_t)&v173);
    sub_100007FF0((uint64_t)v130, &qword_100319268);
    v185[6] = v198;
    v185[7] = v199;
    v185[8] = v200;
    v185[9] = v201;
    v185[2] = v194;
    v185[3] = v195;
    v185[4] = v196;
    v185[5] = v197;
    v185[0] = v192;
    v185[1] = v193;
    v186 = v139;
    v187 = v124;
    v188 = v147;
    v189 = 0u;
    v190 = 0u;
    v191 = v148;
    sub_100038994((uint64_t)v185);
    v218[6] = v213;
    v218[7] = v214;
    v218[8] = v215;
    v218[9] = v216;
    v218[2] = v209;
    v218[3] = v210;
    v218[4] = v211;
    v218[5] = v212;
    v218[0] = v207;
    v218[1] = v208;
    *(_QWORD *)&v218[10] = v165;
    *((double *)&v218[10] + 1) = v126;
    LOBYTE(v218[11]) = (_BYTE)v164;
    *(_DWORD *)((char *)&v218[11] + 1) = *(_DWORD *)v206;
    DWORD1(v218[11]) = *(_DWORD *)&v206[3];
    *(_OWORD *)((char *)&v218[11] + 8) = 0u;
    *(_OWORD *)((char *)&v218[12] + 8) = 0u;
    BYTE8(v218[13]) = v136;
    *(_DWORD *)((char *)&v218[13] + 9) = *(_DWORD *)v205;
    HIDWORD(v218[13]) = *(_DWORD *)&v205[3];
    LOBYTE(v218[14]) = v166;
    *(_DWORD *)((char *)&v218[14] + 1) = *(_DWORD *)v204;
    DWORD1(v218[14]) = *(_DWORD *)&v204[3];
    *(_OWORD *)((char *)&v218[15] + 8) = 0u;
    *(_OWORD *)((char *)&v218[14] + 8) = 0u;
    BYTE8(v218[16]) = (_BYTE)v170;
    sub_100038994((uint64_t)v218);
    return sub_100007FF0((uint64_t)v168, &qword_100319268);
  }
  else
  {
    v153 = a1[1];
    v154 = type metadata accessor for UIMetrics();
    v155 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v153, v154, v155);
    __break(1u);
  }
  return result;
}

void sub_100041A08(__int128 *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  double v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t KeyPath;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  char v50;
  char v51;
  char v52;
  _BYTE v53[16];
  Swift::String v54;

  v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v54._object = (void *)0x8000000100263800;
  v7._countAndFlagsBits = 1954047310;
  v7._object = (void *)0xE400000000000000;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v54._countAndFlagsBits = 0xD000000000000050;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v54);

  v49 = *a1;
  v10 = *((_QWORD *)a1 + 2);
  v48 = *((_BYTE *)a1 + 24);
  v11 = *((_QWORD *)a1 + 5);
  v12 = *((_QWORD *)a1 + 6);
  v46 = *((_QWORD *)a1 + 4);
  v47 = v10;
  v45 = v12;
  v13 = swift_allocObject(&unk_1002E6E98, 72, 7);
  v14 = a1[1];
  *(_OWORD *)(v13 + 16) = *a1;
  *(_OWORD *)(v13 + 32) = v14;
  *(_OWORD *)(v13 + 48) = a1[2];
  *(_QWORD *)(v13 + 64) = *((_QWORD *)a1 + 6);
  KeyPath = swift_getKeyPath(&unk_10024F100);
  v41 = swift_getKeyPath(&unk_10024F128);
  v53[0] = 1;
  sub_100031A88(&v49);
  sub_100042A1C((uint64_t)&v47);
  sub_100031A88(&v46);
  swift_retain(v11);
  sub_100034218(&v45);
  State.init(wrappedValue:)(&v43, v53, &type metadata for Bool);
  v40 = v43;
  v39 = v44;
  v53[0] = 0;
  State.init(wrappedValue:)(&v43, v53, &type metadata for Bool);
  v38 = v43;
  v37 = v44;
  v15 = a2[3];
  v16 = a2[4];
  sub_100007BBC(a2, v15);
  v17 = (*(double (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
  v19 = v18;
  v21 = v20;
  v23 = v22;
  v24 = static Edge.Set.all.getter(v17);
  v36 = v24;
  v52 = 0;
  v51 = 0;
  v50 = 0;
  v35 = static Edge.Set.top.getter(v24);
  v25 = v52;
  LOBYTE(v15) = v51;
  LOBYTE(v16) = v50;
  v53[0] = 1;
  v26 = static Edge.Set.bottom.getter();
  v27 = a2[3];
  v28 = a2[4];
  sub_100007BBC(a2, v27);
  v29 = (*(double (**)(uint64_t, uint64_t))(v28 + 112))(v27, v28);
  v30 = EdgeInsets.init(_all:)(v29);
  v31 = v53[0];
  LOBYTE(v43) = 0;
  *(_QWORD *)a3 = KeyPath;
  *(_BYTE *)(a3 + 8) = v25;
  *(_QWORD *)(a3 + 16) = v41;
  *(_BYTE *)(a3 + 24) = v15;
  *(Swift::String *)(a3 + 32) = v9;
  *(_QWORD *)(a3 + 48) = sub_1000429C4;
  *(_QWORD *)(a3 + 56) = v13;
  *(_BYTE *)(a3 + 64) = v40;
  *(_QWORD *)(a3 + 72) = v39;
  *(_BYTE *)(a3 + 80) = v38;
  *(_QWORD *)(a3 + 88) = v37;
  *(_BYTE *)(a3 + 96) = v36;
  *(double *)(a3 + 104) = v17;
  *(_QWORD *)(a3 + 112) = v19;
  *(_QWORD *)(a3 + 120) = v21;
  *(_QWORD *)(a3 + 128) = v23;
  *(_BYTE *)(a3 + 136) = v16;
  *(_BYTE *)(a3 + 144) = v35;
  *(_OWORD *)(a3 + 168) = 0u;
  *(_OWORD *)(a3 + 152) = 0u;
  *(_BYTE *)(a3 + 184) = v31;
  *(_BYTE *)(a3 + 192) = v26;
  *(double *)(a3 + 200) = v30;
  *(_QWORD *)(a3 + 208) = v32;
  *(_QWORD *)(a3 + 216) = v33;
  *(_QWORD *)(a3 + 224) = v34;
  *(_BYTE *)(a3 + 232) = v43;
}

_QWORD *sub_100041CE8(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  __n128 v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = a1[4];
  v1 = a1[5];
  v3 = a1[6];
  v16 = v2;
  v17 = v3;
  v12 = v2;
  v13 = v1;
  v14 = v3;
  sub_100031A88(&v16);
  swift_retain(v1);
  sub_100034218(&v17);
  v4 = sub_100003DB8(&qword_100319240);
  Binding.wrappedValue.getter(&v15);
  v5 = v15;
  if ((swift_isUniquelyReferenced_nonNull_native(v15) & 1) == 0)
    v5 = sub_100171738(0, *((_QWORD *)v5 + 2) + 1, 1, v5);
  v8 = *((_QWORD *)v5 + 2);
  v7 = *((_QWORD *)v5 + 3);
  if (v8 >= v7 >> 1)
    v5 = sub_100171738((char *)(v7 > 1), v8 + 1, 1, v5);
  *((_QWORD *)v5 + 2) = v8 + 1;
  v9 = &v5[16 * v8];
  *((_QWORD *)v9 + 4) = 0xD000000000000024;
  *((_QWORD *)v9 + 5) = 0x8000000100263860;
  v12 = v2;
  v13 = v1;
  v14 = v3;
  v11 = v5;
  Binding.wrappedValue.setter(&v11, v4, v6);
  sub_100042AD0(&v16);
  swift_release(v1);
  return sub_100042AF8(&v17);
}

uint64_t sub_100041E20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t OpaqueTypeConformance2;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v48 = a2;
  v47 = sub_100003DB8(&qword_1003191F8);
  __chkstk_darwin(v47, v3);
  v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8(&qword_100319200);
  v45 = *(_QWORD *)(v6 - 8);
  v46 = v6;
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003DB8(&qword_100319208);
  v44 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003DB8(&qword_100319210);
  v20 = __chkstk_darwin(v18, v19);
  v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20, v23);
  v25 = (char *)&v43 - v24;
  v26 = *(_QWORD *)(a1 + 16);
  LOBYTE(a1) = *(_BYTE *)(a1 + 24);
  sub_100040244(v26, a1);
  v27 = sub_100042548(v26, a1);
  v28 = sub_100040294(v26, a1);
  if ((v27 & 1) != 0)
  {
    v29 = sub_100003DB8(&qword_100319220);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v22, 1, 1, v29);
    v30 = sub_1000084FC(&qword_100319218, &qword_100319208, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    v49 = v14;
    v50 = v30;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    static ToolbarContentBuilder.buildIf<A>(_:)(v22, v29, OpaqueTypeConformance2);
    v32 = sub_100007FF0((uint64_t)v22, &qword_100319210);
  }
  else
  {
    static ToolbarItemPlacement.principal.getter(v28);
    ToolbarItem<>.init(placement:content:)(v13, sub_1000421E0, 0, &type metadata for Text, &protocol witness table for Text);
    v33 = sub_1000084FC(&qword_100319218, &qword_100319208, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    static ToolbarContentBuilder.buildBlock<A>(_:)(v17, v14, v33);
    v34 = sub_100003DB8(&qword_100319220);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v22, 0, 1, v34);
    v49 = v14;
    v50 = v33;
    v35 = swift_getOpaqueTypeConformance2(&v49, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    static ToolbarContentBuilder.buildIf<A>(_:)(v22, v34, v35);
    sub_100007FF0((uint64_t)v22, &qword_100319210);
    v32 = (*(uint64_t (**)(char *, uint64_t))(v44 + 8))(v17, v14);
  }
  static ToolbarItemPlacement.navigationBarTrailing.getter(v32);
  v36 = sub_100042930();
  ToolbarItem<>.init(placement:content:)(v13, sub_10004232C, 0, &type metadata for TryOutCancelIntroButton, v36);
  v37 = v47;
  v38 = &v5[*(int *)(v47 + 48)];
  sub_10000B234((uint64_t)v25, (uint64_t)v5, &qword_100319210);
  v39 = v45;
  v40 = v38;
  v41 = v46;
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v40, v9, v46);
  TupleToolbarContent.init(_:)(v5, v37);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v41);
  return sub_100007FF0((uint64_t)v25, &qword_100319210);
}

void sub_1000421E0(uint64_t a1@<X8>)
{
  id v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v24._countAndFlagsBits = 0xD00000000000004DLL;
  v24._object = (void *)0x80000001002637B0;
  v3._object = (void *)0x8000000100263790;
  v3._countAndFlagsBits = 0xD000000000000019;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v24);

  v23 = v5;
  v6 = sub_10002B3F4();
  v8 = Text.init<A>(_:)(&v23, &type metadata for String, v6, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = static Font.headline.getter();
  v16 = Text.font(_:)(v15, v8, v10, v14, v12);
  v18 = v17;
  v20 = v19;
  v22 = v21;
  swift_release(v15);
  sub_10002B438(v8, v10, v14);
  swift_bridgeObjectRelease(v12);
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v18;
  *(_BYTE *)(a1 + 16) = v20 & 1;
  *(_QWORD *)(a1 + 24) = v22;
}

uint64_t sub_10004232C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = type metadata accessor for AppEvents();
  v3 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  v4 = EnvironmentObject.init()(v2, v3);
  v6 = v5;
  result = swift_getKeyPath(&unk_10024F0D8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_1000423A4@<X0>(uint64_t a1@<X8>)
{
  return sub_100040500(a1);
}

void sub_1000423E8(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100040A1C((uint64_t *)(v1 + 16), (_QWORD *)(v1 + 72), a1);
}

uint64_t sub_1000423F8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_100040294(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((_QWORD *)(v0 + 72));
  return swift_deallocObject(v0, 112, 7);
}

void sub_100042448(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_100041A08((__int128 *)(v1 + 16), (_QWORD *)(v1 + 72), a1);
}

uint64_t sub_100042454@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100041E20(*(_QWORD *)(v1 + 16), a1);
}

_QWORD *sub_10004245C@<X0>(_BYTE *a1@<X8>)
{
  return sub_100042498((uint64_t (*)(void))sub_100042A8C, (uint64_t)&type metadata for AXConditionalContentOnEnvironmentKey, a1);
}

uint64_t sub_100042470(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100042500(a1, a2, a3, a4, (uint64_t (*)(void))sub_100042A8C, (uint64_t)&type metadata for AXConditionalContentOnEnvironmentKey);
}

_QWORD *sub_100042484@<X0>(_BYTE *a1@<X8>)
{
  return sub_100042498((uint64_t (*)(void))sub_100042A48, (uint64_t)&type metadata for _ScrollableContentFloatingPanelVisibleKey, a1);
}

_QWORD *sub_100042498@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X4>, _BYTE *a3@<X8>)
{
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;

  v5 = a1();
  result = EnvironmentValues.subscript.getter(&v7, a2, a2, v5);
  *a3 = v7;
  return result;
}

uint64_t sub_1000424EC(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100042500(a1, a2, a3, a4, (uint64_t (*)(void))sub_100042A48, (uint64_t)&type metadata for _ScrollableContentFloatingPanelVisibleKey);
}

uint64_t sub_100042500(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t a6)
{
  uint64_t v7;
  char v9;

  v9 = *a1;
  v7 = a5();
  return EnvironmentValues.subscript.setter(&v9, a6, a6, v7);
}

uint64_t sub_100042548(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  __n128 v9;
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
    return a1 & 1;
  v9 = swift_retain(a1);
  v10 = static os_log_type_t.fault.getter(v9);
  v11 = static Log.runtimeIssuesLog.getter();
  v12 = v10;
  if (os_log_type_enabled(v11, v10))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v17 = v14;
    *(_DWORD *)v13 = 136315138;
    v16 = sub_100172BEC(1819242306, 0xE400000000000000, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v13 + 4, v13 + 12);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(&v17, v8, a1);
  sub_100040294(a1, 0);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v17;
}

uint64_t sub_100042700@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __n128 v13;
  uint64_t v15;
  os_log_type_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = type metadata accessor for EnvironmentValues(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_1003192E0);
  __chkstk_darwin(v9, v10);
  v12 = (uint64_t *)((char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000B234(v2, (uint64_t)v12, &qword_1003192E0);
  if (swift_getEnumCaseMultiPayload(v12, v9) == 1)
    return sub_10000B458((uint64_t)v12, (uint64_t)a1, &qword_1003192E8);
  v15 = *v12;
  v16 = static os_log_type_t.fault.getter(v13);
  v17 = static Log.runtimeIssuesLog.getter();
  v18 = v16;
  if (os_log_type_enabled(v17, v16))
  {
    v19 = (uint8_t *)swift_slowAlloc(12, -1);
    v20 = swift_slowAlloc(32, -1);
    v24 = a1;
    v21 = v20;
    v26 = v20;
    *(_DWORD *)v19 = 136315138;
    v25 = sub_100172BEC(0xD000000000000019, 0x8000000100263A50, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v19 + 4, v19 + 12);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v19, 0xCu);
    swift_arrayDestroy(v21, 1, (char *)&type metadata for Any + 8);
    v22 = v21;
    a1 = v24;
    swift_slowDealloc(v22, -1, -1);
    swift_slowDealloc(v19, -1, -1);
  }

  EnvironmentValues.init()();
  swift_getAtKeyPath(a1, v8, v15);
  swift_release(v15);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

unint64_t sub_100042930()
{
  unint64_t result;

  result = qword_100319228;
  if (!qword_100319228)
  {
    result = swift_getWitnessTable(&unk_100251168, &type metadata for TryOutCancelIntroButton);
    atomic_store(result, (unint64_t *)&qword_100319228);
  }
  return result;
}

uint64_t sub_10004297C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_100040294(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  swift_release(*(_QWORD *)(v0 + 48));
  swift_release(*(_QWORD *)(v0 + 56));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

_QWORD *sub_1000429C4()
{
  uint64_t v0;

  return sub_100041CE8((_QWORD *)(v0 + 16));
}

_QWORD *sub_1000429CC@<X0>(_BYTE *a1@<X8>)
{
  return sub_100042498((uint64_t (*)(void))sub_100042A8C, (uint64_t)&type metadata for AXConditionalContentOnEnvironmentKey, a1);
}

uint64_t sub_1000429E0(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100042500(a1, a2, a3, a4, (uint64_t (*)(void))sub_100042A8C, (uint64_t)&type metadata for AXConditionalContentOnEnvironmentKey);
}

_QWORD *sub_1000429F4@<X0>(_BYTE *a1@<X8>)
{
  return sub_100042498((uint64_t (*)(void))sub_100042A48, (uint64_t)&type metadata for _ScrollableContentFloatingPanelVisibleKey, a1);
}

uint64_t sub_100042A08(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100042500(a1, a2, a3, a4, (uint64_t (*)(void))sub_100042A48, (uint64_t)&type metadata for _ScrollableContentFloatingPanelVisibleKey);
}

uint64_t sub_100042A1C(uint64_t a1)
{
  sub_100040244(*(_QWORD *)a1, *(_BYTE *)(a1 + 8));
  return a1;
}

unint64_t sub_100042A48()
{
  unint64_t result;

  result = qword_100319230;
  if (!qword_100319230)
  {
    result = swift_getWitnessTable(&unk_10025DECC, &type metadata for _ScrollableContentFloatingPanelVisibleKey);
    atomic_store(result, (unint64_t *)&qword_100319230);
  }
  return result;
}

unint64_t sub_100042A8C()
{
  unint64_t result;

  result = qword_100319238;
  if (!qword_100319238)
  {
    result = swift_getWitnessTable(&unk_100252678, &type metadata for AXConditionalContentOnEnvironmentKey);
    atomic_store(result, (unint64_t *)&qword_100319238);
  }
  return result;
}

_QWORD *sub_100042AD0(_QWORD *a1)
{
  swift_release(*a1);
  return a1;
}

_QWORD *sub_100042AF8(_QWORD *a1)
{
  swift_bridgeObjectRelease(*a1);
  return a1;
}

void sub_100042B30(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

void sub_100042B58(double *a1@<X8>)
{
  *a1 = EnvironmentValues.minimumScaleFactor.getter();
}

uint64_t sub_100042B80(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_100042BA4(double *a1)
{
  return EnvironmentValues.minimumScaleFactor.setter(*a1);
}

uint64_t sub_100042BC8()
{
  return sub_10002B614(&qword_100319280, &qword_100319288, (void (*)(void))sub_100042BEC);
}

unint64_t sub_100042BEC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319290;
  if (!qword_100319290)
  {
    v1 = sub_100007FAC(&qword_100319298);
    sub_10002B614(&qword_1003192A0, &qword_1003192A8, (void (*)(void))sub_100042C90);
    sub_1000084FC(&qword_1003192C0, &qword_1003192C8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319290);
  }
  return result;
}

uint64_t sub_100042C90()
{
  return sub_10002B614(&qword_1003192B0, &qword_1003192B8, (void (*)(void))sub_10002B67C);
}

unint64_t sub_100042CB8()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t OpaqueTypeConformance2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  result = qword_1003192D8;
  if (!qword_1003192D8)
  {
    v1 = sub_100007FAC(&qword_1003191D0);
    v2 = sub_100007FAC(&qword_1003191C0);
    v3 = sub_100007FAC(&qword_1003191E8);
    v6 = sub_100007FAC(&qword_1003191D8);
    v7 = sub_1000084FC(&qword_1003191E0, &qword_1003191D8, (uint64_t)&unk_100256288);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v5 = sub_1000084FC(&qword_1003191F0, &qword_1003191E8, (uint64_t)&protocol conformance descriptor for TupleToolbarContent<A>);
    v6 = v2;
    v7 = v3;
    v8 = OpaqueTypeConformance2;
    v9 = v5;
    swift_getOpaqueTypeConformance2(&v6, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003192D8);
  }
  return result;
}

uint64_t IDSOffGridMode.debugDescription.getter(uint64_t a1)
{
  Swift::String v2;
  void *object;

  switch(a1)
  {
    case 0:
      return 0x6E776F6E6B6E752ELL;
    case 2:
      return 0x64656C62616E652ELL;
    case 1:
      return 0x656C62617369642ELL;
  }
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  return 0x756C61567761722ELL;
}

uint64_t sub_100042EA0()
{
  uint64_t *v0;

  return IDSOffGridMode.debugDescription.getter(*v0);
}

uint64_t IDSOffGridModePublishStatus.debugDescription.getter(uint64_t a1)
{
  uint64_t result;
  Swift::String v3;
  void *object;

  result = 0x676E69646E65702ELL;
  switch(a1)
  {
    case 0:
      return result;
    case 1:
    case 3:
      result = 0x737365636375732ELL;
      break;
    case 2:
      result = 0x64656C6961662ELL;
      break;
    default:
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      result = 0x756C61567761722ELL;
      break;
  }
  return result;
}

uint64_t sub_100042F8C()
{
  uint64_t *v0;

  return IDSOffGridModePublishStatus.debugDescription.getter(*v0);
}

uint64_t sub_100042F94()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000010;
  if (*v0 != 1)
    v1 = 0xD000000000000014;
  if (*v0)
    return v1;
  else
    return 0x726566666F2ELL;
}

uint64_t sub_100042FF0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return (*a1 == *a2) & (a2[1] ^ a1[1] ^ 1u);
}

void sub_100043018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v4;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  char v16;
  double v17;
  uint64_t v18;
  id v19;
  id v20;

  v10 = *(_QWORD *)&v4[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance];
  v9 = *(_QWORD *)&v4[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance + 8];
  v12 = *(_QWORD *)&v4[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance + 16];
  v11 = *(_QWORD *)&v4[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance + 24];
  if (!v9)
  {
    if (!a2)
      return;
    goto LABEL_17;
  }
  if (!a2)
  {
LABEL_17:
    sub_10004524C(*(_QWORD *)&v4[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance], *(_QWORD *)&v4[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance + 8], *(_QWORD *)&v4[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance + 16], *(_QWORD *)&v4[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance + 24]);
    sub_10004524C(a1, a2, a3, a4);
    sub_10003DADC(v10, v9, v12, v11);
    sub_10003DADC(a1, a2, a3, a4);
    goto LABEL_25;
  }
  if (v10 != a1 || v9 != a2)
  {
    v14 = a4;
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)&v4[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance], *(_QWORD *)&v4[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance + 8], a1, a2, 0) & 1) == 0)
    {
LABEL_22:
      sub_10004524C(v10, v9, v12, v11);
      sub_10004524C(v10, v9, v12, v11);
      goto LABEL_23;
    }
  }
  if (v11)
  {
    if (a4)
    {
      if (v12 != a3 || v11 != a4)
      {
        v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, a3, a4, 0);
        sub_10004524C(v10, v9, v12, v11);
        sub_10004524C(v10, v9, v12, v11);
        sub_10004524C(a1, a2, a3, a4);
        swift_bridgeObjectRelease(a2);
        if ((v16 & 1) != 0)
          goto LABEL_29;
        goto LABEL_24;
      }
      sub_10004524C(v10, v9, a3, a4);
      sub_10004524C(v10, v9, a3, a4);
      v18 = a4;
LABEL_28:
      sub_10004524C(a1, a2, a3, v18);
      swift_bridgeObjectRelease(a2);
LABEL_29:
      swift_bridgeObjectRelease(a4);
      sub_10003DADC(v10, v9, v12, v11);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v11);
      return;
    }
    v14 = 0;
    goto LABEL_22;
  }
  sub_10004524C(v10, v9, v12, 0);
  sub_10004524C(v10, v9, v12, 0);
  v14 = a4;
  if (!a4)
  {
    v18 = 0;
    goto LABEL_28;
  }
LABEL_23:
  sub_10004524C(a1, a2, a3, v14);
  swift_bridgeObjectRelease(a2);
LABEL_24:
  swift_bridgeObjectRelease(a4);
  sub_10003DADC(v10, v9, v12, v11);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)&v17 = swift_bridgeObjectRelease(v11).n128_u64[0];
LABEL_25:
  v19 = objc_msgSend(v4, "view", v17);
  if (v19)
  {
    v20 = v19;
    objc_msgSend(v19, "setNeedsLayout");

  }
  else
  {
    __break(1u);
  }
}

void sub_100043310(void *a1)
{
  char *v1;
  char *v2;
  void *v4;
  id v5;
  id v6;
  char v7;
  id v8;
  id v9;
  id v10;

  v2 = v1;
  v4 = *(void **)&v2[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_exclusionPath];
  *(_QWORD *)&v2[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_exclusionPath] = a1;
  v10 = a1;
  if (a1)
  {
    if (v4)
    {
      sub_10004527C();
      v5 = v4;
      v6 = v10;
      v7 = static NSObject.== infix(_:_:)();

      if ((v7 & 1) != 0)
      {
        v10 = v6;
LABEL_8:

        return;
      }
    }
  }
  else if (!v4)
  {
    v5 = 0;
    goto LABEL_8;
  }
  v8 = objc_msgSend(v2, "view");
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v8, "setNeedsLayout");

    v5 = v10;
    v10 = v9;
    goto LABEL_8;
  }
  __break(1u);
}

id sub_1000433F8()
{
  id v0;
  id v1;
  void *v2;
  id v3;
  double left;
  double bottom;
  double right;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  double v12;
  id v13;
  id v14;

  v0 = objc_msgSend(objc_allocWithZone((Class)UITextView), "init");
  objc_msgSend(v0, "setBackgroundColor:", 0);
  objc_msgSend(v0, "setEditable:", 0);
  objc_msgSend(v0, "setSelectable:", 0);
  objc_msgSend(v0, "setScrollEnabled:", 0);
  objc_msgSend(v0, "setContentInsetAdjustmentBehavior:", 2);
  v1 = objc_msgSend(v0, "textContainer");
  objc_msgSend(v1, "setLineBreakMode:", 0);

  v2 = (void *)objc_opt_self(UIColor);
  v3 = objc_msgSend(v2, "labelColor");
  objc_msgSend(v0, "setTextColor:", v3);

  left = UIEdgeInsetsZero.left;
  bottom = UIEdgeInsetsZero.bottom;
  right = UIEdgeInsetsZero.right;
  objc_msgSend(v0, "setContentInset:", UIEdgeInsetsZero.top, left, bottom, right);
  objc_msgSend(v0, "setTextContainerInset:", UIEdgeInsetsZero.top, left, bottom, right);
  v7 = objc_msgSend(v0, "textContainer");
  objc_msgSend(v7, "setLineFragmentPadding:", 0.0);

  v8 = objc_msgSend(v0, "layer");
  v9 = objc_msgSend(v2, "blackColor");
  v10 = objc_msgSend(v9, "CGColor");

  objc_msgSend(v8, "setShadowColor:", v10);
  v11 = objc_msgSend(v0, "layer");
  LODWORD(v12) = 1058642330;
  objc_msgSend(v11, "setShadowOpacity:", v12);

  v13 = objc_msgSend(v0, "layer");
  objc_msgSend(v13, "setShadowRadius:", 5.0);

  v14 = objc_msgSend(v0, "layer");
  objc_msgSend(v14, "setShadowOffset:", 0.0, 1.0);

  return v0;
}

id sub_10004369C()
{
  id v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  double left;
  double bottom;
  double right;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  double v13;
  id v14;
  id v15;

  v0 = objc_msgSend(objc_allocWithZone((Class)UITextView), "init");
  objc_msgSend(v0, "setBackgroundColor:", 0);
  objc_msgSend(v0, "setEditable:", 0);
  objc_msgSend(v0, "setSelectable:", 0);
  objc_msgSend(v0, "setScrollEnabled:", 0);
  objc_msgSend(v0, "setContentInsetAdjustmentBehavior:", 2);
  v1 = objc_msgSend(v0, "textContainer");
  objc_msgSend(v1, "setLineBreakMode:", 0);

  v2 = (void *)objc_opt_self(UIColor);
  v3 = objc_msgSend(v2, "secondaryLabelColor");
  objc_msgSend(v0, "setTextColor:", v3);

  v4 = objc_msgSend(v0, "layer");
  objc_msgSend(v4, "setCompositingFilter:", kCAFilterPlusL);

  left = UIEdgeInsetsZero.left;
  bottom = UIEdgeInsetsZero.bottom;
  right = UIEdgeInsetsZero.right;
  objc_msgSend(v0, "setContentInset:", UIEdgeInsetsZero.top, left, bottom, right);
  objc_msgSend(v0, "setTextContainerInset:", UIEdgeInsetsZero.top, left, bottom, right);
  v8 = objc_msgSend(v0, "textContainer");
  objc_msgSend(v8, "setLineFragmentPadding:", 0.0);

  v9 = objc_msgSend(v0, "layer");
  v10 = objc_msgSend(v2, "blackColor");
  v11 = objc_msgSend(v10, "CGColor");

  objc_msgSend(v9, "setShadowColor:", v11);
  v12 = objc_msgSend(v0, "layer");
  LODWORD(v13) = 1058642330;
  objc_msgSend(v12, "setShadowOpacity:", v13);

  v14 = objc_msgSend(v0, "layer");
  objc_msgSend(v14, "setShadowRadius:", 5.0);

  v15 = objc_msgSend(v0, "layer");
  objc_msgSend(v15, "setShadowOffset:", 0.0, 1.0);

  return v0;
}

id sub_100043974()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  char v6;
  char v7;
  char v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  objc_super v26;

  v1 = OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_state;
  v2 = qword_100315790;
  v3 = v0;
  if (v2 != -1)
    swift_once(&qword_100315790, sub_10007CCD0);
  v4 = &v3[v1];
  v5 = qword_10033FC68;
  v6 = word_10033FC70;
  v7 = HIBYTE(word_10033FC70);
  v8 = byte_10033FC72;
  v9 = qword_10033FC78;
  v10 = word_10033FCB0;
  v11 = HIBYTE(word_10033FCB0);
  v12 = byte_10033FCC8;
  v13 = xmmword_10033FC80;
  v14 = unk_10033FC90;
  v15 = xmmword_10033FCA0;
  v16 = *(_OWORD *)&qword_10033FCB8;
  *v4 = byte_10033FC60;
  *((_QWORD *)v4 + 1) = v5;
  v4[16] = v6;
  v4[17] = v7;
  v4[18] = v8;
  *((_QWORD *)v4 + 3) = v9;
  *((_OWORD *)v4 + 2) = v13;
  *((_OWORD *)v4 + 3) = v14;
  *((_OWORD *)v4 + 4) = v15;
  v4[80] = v10;
  v4[81] = v11;
  *(_OWORD *)(v4 + 88) = v16;
  v4[104] = v12;
  *(_WORD *)&v3[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController__connectivity] = 512;
  v17 = &v3[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController__connectivityStatusText];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0xE000000000000000;
  v18 = &v3[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance];
  *(_OWORD *)v18 = 0u;
  *((_OWORD *)v18 + 1) = 0u;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_coveredProgress] = 0;
  v19 = &v3[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_centerLocation];
  *(_QWORD *)v19 = 0;
  *((_QWORD *)v19 + 1) = 0;
  v20 = &v3[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_target];
  *(_QWORD *)v20 = 0;
  v20[8] = 4;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_exclusionPath] = 0;
  v21 = OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_guidanceTitleLabel;
  v22 = v13;
  v23 = v14;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRetain(v23);
  *(_QWORD *)&v3[v21] = sub_1000433F8();
  v24 = OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_guidanceSubtitleLabel;
  *(_QWORD *)&v3[v24] = sub_10004369C();

  v26.receiver = v3;
  v26.super_class = (Class)type metadata accessor for ConnectionAssistantConnectionViewController();
  return objc_msgSendSuper2(&v26, "initWithNibName:bundle:", 0, 0);
}

id sub_100043B70()
{
  char *v0;
  id result;
  void *v2;
  void *v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  objc_super v8;

  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for ConnectionAssistantConnectionViewController();
  objc_msgSendSuper2(&v8, "viewDidLoad");
  result = objc_msgSend(v0, "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = result;
  objc_msgSend(result, "addSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_guidanceTitleLabel]);

  result = objc_msgSend(v0, "view");
  if (!result)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  v3 = result;
  objc_msgSend(result, "addSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_guidanceSubtitleLabel]);

  result = objc_msgSend(v0, "view");
  if (!result)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  v5 = objc_msgSend(result, "layer");

  objc_msgSend(v5, "setAllowsGroupBlending:", 0);
  result = objc_msgSend(v0, "view");
  if (result)
  {
    v6 = result;
    v7 = objc_msgSend(result, "layer");

    objc_msgSend(v7, "setAllowsGroupOpacity:", 0);
    return sub_100044CFC();
  }
LABEL_9:
  __break(1u);
  return result;
}

void sub_100043D0C()
{
  char *v0;
  uint64_t isEscapingClosureAtFileLocation;
  CGFloat ty;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSString v8;
  __n128 v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSString v15;
  void *v16;
  void *v17;
  id v18;
  char **v19;
  id v20;
  double v21;
  double v22;
  id v23;
  SEL *p_name;
  id v25;
  SEL *v26;
  id v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  double v31;
  id v32;
  double v33;
  id v34;
  uint64_t v35;
  CGFloat v36;
  CGFloat a;
  id v38;
  Class v39;
  id v40;
  void *v41;
  double v42;
  CGFloat v43;
  double v44;
  CGFloat v45;
  double v46;
  CGFloat v47;
  double v48;
  CGFloat v49;
  id v50;
  id v51;
  uint64_t v52;
  id i;
  void *v54;
  id v55;
  void *v56;
  double v57;
  CGFloat v58;
  double v59;
  CGFloat v60;
  double v61;
  CGFloat v62;
  double v63;
  CGFloat v64;
  double Width;
  id v66;
  void *v67;
  double v68;
  double v69;
  CGFloat v70;
  double v71;
  CGFloat v72;
  double v73;
  CGFloat v74;
  double v75;
  CGFloat v76;
  double v77;
  double MaxX;
  void *v79;
  id v80;
  id v81;
  Class isa;
  id v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  double v89;
  double v90;
  id v91;
  void *v92;
  uint64_t v93;
  CGFloat v94;
  id v95;
  void *v96;
  char **v97;
  double v98;
  CGAffineTransform aBlock;
  objc_super v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;

  isEscapingClosureAtFileLocation = (uint64_t)v0;
  v100.receiver = v0;
  v100.super_class = (Class)type metadata accessor for ConnectionAssistantConnectionViewController();
  objc_msgSendSuper2(&v100, "viewWillLayoutSubviews");
  ty = *(double *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_guidanceTitleLabel];
  v3 = (uint64_t *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance];
  v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance + 8];
  if (v4)
  {
    v6 = v3[2];
    v5 = v3[3];
    v7 = *v3;
    sub_10004524C(*v3, v4, v6, v5);
    swift_bridgeObjectRetain(v4);
    sub_10003DADC(v7, v4, v6, v5);
  }
  else
  {
    v4 = *(_QWORD *)(isEscapingClosureAtFileLocation
                   + OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController__connectivityStatusText
                   + 8);
    swift_bridgeObjectRetain(v4);
  }
  v8 = String._bridgeToObjectiveC()();
  objc_msgSend(*(id *)&ty, "setText:", v8, swift_bridgeObjectRelease(v4).n128_f64[0]);

  v10 = *(_QWORD **)(isEscapingClosureAtFileLocation
                   + OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_guidanceSubtitleLabel);
  v11 = v3[1];
  if (v11)
  {
    v13 = v3[2];
    v12 = v3[3];
    v14 = *v3;
    swift_bridgeObjectRetain_n(v12, 2, v9);
    swift_bridgeObjectRetain(v11);
    sub_10003DADC(v14, v11, v13, v12);
    if (!v12)
    {
      v12 = *(_QWORD *)(isEscapingClosureAtFileLocation
                      + OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController__connectivityStatusText
                      + 8);
      swift_bridgeObjectRetain(v12);
    }
  }
  else
  {
    v12 = 0xE000000000000000;
  }
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v10, "setText:", v15, swift_bridgeObjectRelease(v12).n128_f64[0]);

  v16 = *(void **)(isEscapingClosureAtFileLocation
                 + OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_exclusionPath);
  if (v16)
  {
    v17 = (void *)objc_opt_self(UIFont);
    v18 = objc_allocWithZone((Class)UIFontMetrics);
    v19 = v16;
    v20 = objc_msgSend(v18, "initForTextStyle:", UIFontTextStyleBody);
    objc_msgSend(v20, "scaledValueForValue:", 14.0);
    v22 = v21;

    v23 = objc_msgSend(v17, "systemFontOfSize:weight:", v22, UIFontWeightMedium);
    objc_msgSend(*(id *)&ty, "setFont:", v23);

    objc_msgSend(*(id *)&ty, "setTextAlignment:", 4);
    p_name = (SEL *)&ResourceBundleClass.name;
    v25 = objc_msgSend(*(id *)&ty, "textContainer");
    v26 = (SEL *)&ResourceBundleClass.name;
    v27 = objc_msgSend(v25, "exclusionPaths");

    v28 = sub_10004527C();
    v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v27, v28);

    v96 = v17;
    if (!((unint64_t)v29 >> 62))
    {
      v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
      goto LABEL_11;
    }
  }
  else
  {
    v79 = (void *)objc_opt_self(UIFont);
    v28 = (unint64_t)&ResourceBundleClass.name;
    v80 = objc_msgSend(v79, "preferredFontForTextStyle:", UIFontTextStyleHeadline);
    objc_msgSend(*(id *)&ty, "setFont:", v80);

    v19 = &ResourceBundleClass.name;
    objc_msgSend(*(id *)&ty, "setTextAlignment:", 1);
    v81 = objc_msgSend(*(id *)&ty, "textContainer");
    sub_10004527C();
    isa = Array._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v81, "setExclusionPaths:", isa);

    v83 = objc_msgSend(v79, "preferredFontForTextStyle:", UIFontTextStyleFootnote);
    objc_msgSend(v10, "setFont:", v83);

    objc_msgSend(v10, "setTextAlignment:", 1);
    p_name = (SEL *)objc_opt_self(UIView);
    v29 = swift_allocObject(&unk_1002E6F98, 24, 7);
    *(_QWORD *)(v29 + 16) = isEscapingClosureAtFileLocation;
    v10 = (_QWORD *)swift_allocObject(&unk_1002E6FC0, 32, 7);
    v10[2] = sub_1000452DC;
    v10[3] = v29;
    *(_QWORD *)&aBlock.tx = sub_1000452F4;
    *(_QWORD *)&aBlock.ty = v10;
    *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
    *(_QWORD *)&aBlock.b = 1107296256;
    *(_QWORD *)&aBlock.c = sub_100187B58;
    *(_QWORD *)&aBlock.d = &unk_1002E6FD8;
    v26 = (SEL *)_Block_copy(&aBlock);
    ty = aBlock.ty;
    v84 = (id)isEscapingClosureAtFileLocation;
    swift_retain(v10);
    swift_release(*(_QWORD *)&ty);
    -[SEL performWithoutAnimation:](p_name, "performWithoutAnimation:", v26);
    _Block_release(v26);
    isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 150, 190, 44, 1);
    swift_release(v29);
    swift_release(v10);
    if ((isEscapingClosureAtFileLocation & 1) == 0)
      return;
    __break(1u);
  }
  if (v29 < 0)
    v85 = v29;
  else
    v85 = v29 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v29);
  v30 = _CocoaArrayWrapper.endIndex.getter(v85);
  swift_bridgeObjectRelease(v29);
LABEL_11:
  *(_QWORD *)&v31 = swift_bridgeObjectRelease(v29).n128_u64[0];
  v97 = v19;
  if (!v30)
  {
    v32 = objc_msgSend(v19, "copy", v31);
    _bridgeAnyObjectToAny(_:)(&aBlock, v32);
    swift_unknownObjectRelease(v32);
    if ((swift_dynamicCast(&v98, &aBlock, (char *)&type metadata for Any + 8, v28, 6) & 1) != 0)
    {
      v33 = v98;
      CGAffineTransformMakeTranslation(&aBlock, -28.0, -24.0);
      objc_msgSend(*(id *)&v33, "applyTransform:", &aBlock);
      v34 = objc_msgSend(*(id *)&ty, p_name[173]);
      v35 = sub_100003DB8(&qword_100328A00);
      v36 = COERCE_DOUBLE(swift_allocObject(v35, 40, 7));
      *(_OWORD *)(*(_QWORD *)&v36 + 16) = xmmword_10024E820;
      *(double *)(*(_QWORD *)&v36 + 32) = v33;
      aBlock.a = v36;
      specialized Array._endMutation()(*(_QWORD *)&v36);
      a = aBlock.a;
      v38 = *(id *)&v33;
      v39 = Array._bridgeToObjectiveC()().super.isa;
      objc_msgSend(v34, "setExclusionPaths:", v39, swift_bridgeObjectRelease(*(_QWORD *)&a).n128_f64[0]);

    }
  }
  v40 = objc_msgSend((id)isEscapingClosureAtFileLocation, "view", v31);
  if (!v40)
    goto LABEL_39;
  v41 = v40;
  objc_msgSend(v40, "bounds");
  v43 = v42;
  v45 = v44;
  v47 = v46;
  v49 = v48;

  v101.origin.x = v43;
  v101.origin.y = v45;
  v101.size.width = v47;
  v101.size.height = v49;
  v98 = CGRectGetWidth(v101) + -28.0 + -28.0;
  v50 = objc_msgSend(*(id *)&ty, p_name[173]);
  v51 = objc_msgSend(v50, v26[179]);

  v52 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v51, v28);
  if ((unint64_t)v52 >> 62)
  {
    if (v52 < 0)
      v86 = v52;
    else
      v86 = v52 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v52);
    v87 = _CocoaArrayWrapper.endIndex.getter(v86);
    swift_bridgeObjectRelease(v52);
    if (v87)
      goto LABEL_17;
LABEL_33:
    swift_bridgeObjectRelease(v52);
    goto LABEL_34;
  }
  if (!*(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_33;
LABEL_17:
  if ((v52 & 0xC000000000000001) != 0)
    goto LABEL_37;
  if (*(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    for (i = *(id *)(v52 + 32); ; i = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v52))
    {
      v54 = i;
      v55 = objc_msgSend((id)isEscapingClosureAtFileLocation, "view", swift_bridgeObjectRelease(v52).n128_f64[0]);
      if (!v55)
        break;
      v56 = v55;
      objc_msgSend(v55, "bounds");
      v58 = v57;
      v60 = v59;
      v62 = v61;
      v64 = v63;

      v102.origin.x = v58;
      v102.origin.y = v60;
      v102.size.width = v62;
      v102.size.height = v64;
      Width = CGRectGetWidth(v102);
      v66 = objc_msgSend((id)isEscapingClosureAtFileLocation, "view");
      if (!v66)
        goto LABEL_41;
      v67 = v66;
      v68 = Width + -28.0;
      objc_msgSend(v66, "bounds");
      v70 = v69;
      v72 = v71;
      v74 = v73;
      v76 = v75;

      v103.origin.x = v70;
      v103.origin.y = v72;
      v103.size.width = v74;
      v103.size.height = v76;
      v77 = CGRectGetWidth(v103);
      objc_msgSend(v54, "bounds");
      MaxX = CGRectGetMaxX(v104);

      v98 = v68 + MaxX - v77;
LABEL_34:
      v88 = objc_msgSend(objc_allocWithZone((Class)UIFontMetrics), "initForTextStyle:", UIFontTextStyleFootnote);
      objc_msgSend(v88, "scaledValueForValue:", 12.0);
      v90 = v89;

      v91 = objc_msgSend(v96, "systemFontOfSize:weight:", v90, UIFontWeightRegular);
      objc_msgSend(v10, "setFont:", v91);

      objc_msgSend(v10, "setTextAlignment:", 4);
      v92 = (void *)objc_opt_self(UIView);
      v93 = swift_allocObject(&unk_1002E7010, 64, 7);
      *(_QWORD *)(v93 + 16) = isEscapingClosureAtFileLocation;
      *(_QWORD *)(v93 + 24) = &v98;
      *(_OWORD *)(v93 + 32) = xmmword_10024F260;
      *(_OWORD *)(v93 + 48) = xmmword_10024F260;
      v10 = (_QWORD *)swift_allocObject(&unk_1002E7038, 32, 7);
      v10[2] = sub_100045338;
      v10[3] = v93;
      *(_QWORD *)&aBlock.tx = sub_100045520;
      *(_QWORD *)&aBlock.ty = v10;
      *(_QWORD *)&aBlock.a = _NSConcreteStackBlock;
      *(_QWORD *)&aBlock.b = 1107296256;
      *(_QWORD *)&aBlock.c = sub_100187B58;
      *(_QWORD *)&aBlock.d = &unk_1002E7050;
      v52 = (uint64_t)_Block_copy(&aBlock);
      v94 = aBlock.ty;
      v95 = (id)isEscapingClosureAtFileLocation;
      swift_retain(v10);
      swift_release(*(_QWORD *)&v94);
      objc_msgSend(v92, "performWithoutAnimation:", v52);

      _Block_release((const void *)v52);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 150, 175, 44, 1);
      swift_release(v93);
      swift_release(v10);
      if ((isEscapingClosureAtFileLocation & 1) == 0)
        return;
      __break(1u);
LABEL_37:
      ;
    }
    goto LABEL_40;
  }
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
}

id sub_100044700(char *a1, double *a2, double a3, double a4)
{
  void *v8;
  double v9;
  id result;
  void *v11;
  double v12;
  CGFloat v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  CGFloat v20;
  void *v21;
  double v22;
  void *v23;
  double v24;
  CGFloat v25;
  double v26;
  CGFloat v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  CGFloat v32;
  CGFloat v33;
  CGRect v34;
  CGRect v35;
  CGRect v36;
  CGRect v37;
  CGRect v38;
  CGRect v39;
  CGRect v40;

  v8 = *(void **)&a1[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_guidanceTitleLabel];
  v9 = *a2;
  result = objc_msgSend(a1, "view");
  if (result)
  {
    v11 = result;
    objc_msgSend(result, "bounds");
    v13 = v12;
    v15 = v14;
    v17 = v16;
    v19 = v18;

    v34.origin.x = v13;
    v34.origin.y = v15;
    v34.size.width = v17;
    v34.size.height = v19;
    objc_msgSend(v8, "sizeThatFits:", v9, CGRectGetHeight(v34));
    objc_msgSend(v8, "bounds");
    objc_msgSend(v8, "setBounds:");
    objc_msgSend(v8, "bounds");
    v20 = CGRectGetMidX(v35) + a4;
    objc_msgSend(v8, "bounds");
    objc_msgSend(v8, "setCenter:", v20, CGRectGetMidY(v36) + a3);
    v21 = *(void **)&a1[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_guidanceSubtitleLabel];
    v22 = *a2;
    result = objc_msgSend(a1, "view");
    if (result)
    {
      v23 = result;
      objc_msgSend(result, "bounds");
      v25 = v24;
      v27 = v26;
      v29 = v28;
      v31 = v30;

      v37.origin.x = v25;
      v37.origin.y = v27;
      v37.size.width = v29;
      v37.size.height = v31;
      objc_msgSend(v21, "sizeThatFits:", v22, CGRectGetHeight(v37));
      objc_msgSend(v21, "bounds");
      objc_msgSend(v21, "setBounds:");
      objc_msgSend(v21, "bounds");
      v32 = CGRectGetMidX(v38) + a4;
      objc_msgSend(v8, "bounds");
      v33 = CGRectGetHeight(v39) + a3 + 3.0;
      objc_msgSend(v21, "bounds");
      return objc_msgSend(v21, "setCenter:", v32, v33 + CGRectGetMidY(v40));
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

id sub_100044938(char *a1)
{
  void *v2;
  id result;
  void *v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double v11;
  CGFloat v12;
  double Width;
  void *v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  void *v23;
  void *v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double v31;
  CGFloat v32;
  double v33;
  void *v34;
  double v35;
  CGFloat v36;
  double v37;
  CGFloat v38;
  double v39;
  CGFloat v40;
  double v41;
  CGFloat v42;
  void *v43;
  double v44;
  CGFloat v45;
  double v46;
  CGFloat v47;
  double v48;
  CGFloat v49;
  double v50;
  CGFloat v51;
  double MidX;
  double *v53;
  double v54;
  void *v55;
  double v56;
  CGFloat v57;
  double v58;
  CGFloat v59;
  double v60;
  CGFloat v61;
  double v62;
  CGFloat v63;
  double v64;
  double v65;
  double v66;
  CGRect v67;
  CGRect v68;
  CGRect v69;
  CGRect v70;
  CGRect v71;
  CGRect v72;
  CGRect v73;
  CGRect v74;
  CGRect v75;

  v2 = *(void **)&a1[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_guidanceTitleLabel];
  result = objc_msgSend(a1, "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  v4 = result;
  objc_msgSend(result, "bounds");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;

  v67.origin.x = v6;
  v67.origin.y = v8;
  v67.size.width = v10;
  v67.size.height = v12;
  Width = CGRectGetWidth(v67);
  result = objc_msgSend(a1, "view");
  if (!result)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v14 = result;
  objc_msgSend(result, "bounds");
  v16 = v15;
  v18 = v17;
  v20 = v19;
  v22 = v21;

  v68.origin.x = v16;
  v68.origin.y = v18;
  v68.size.width = v20;
  v68.size.height = v22;
  objc_msgSend(v2, "sizeThatFits:", Width + -32.0 + -32.0, CGRectGetHeight(v68));
  objc_msgSend(v2, "bounds");
  objc_msgSend(v2, "setBounds:");
  v23 = *(void **)&a1[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_guidanceSubtitleLabel];
  result = objc_msgSend(a1, "view");
  if (!result)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v24 = result;
  objc_msgSend(result, "bounds");
  v26 = v25;
  v28 = v27;
  v30 = v29;
  v32 = v31;

  v69.origin.x = v26;
  v69.origin.y = v28;
  v69.size.width = v30;
  v69.size.height = v32;
  v33 = CGRectGetWidth(v69);
  result = objc_msgSend(a1, "view");
  if (!result)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v34 = result;
  objc_msgSend(result, "bounds");
  v36 = v35;
  v38 = v37;
  v40 = v39;
  v42 = v41;

  v70.origin.x = v36;
  v70.origin.y = v38;
  v70.size.width = v40;
  v70.size.height = v42;
  objc_msgSend(v23, "sizeThatFits:", v33 + -32.0 + -32.0, CGRectGetHeight(v70));
  objc_msgSend(v23, "bounds");
  objc_msgSend(v23, "setBounds:");
  result = objc_msgSend(a1, "view");
  if (!result)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v43 = result;
  objc_msgSend(result, "bounds");
  v45 = v44;
  v47 = v46;
  v49 = v48;
  v51 = v50;

  v71.origin.x = v45;
  v71.origin.y = v47;
  v71.size.width = v49;
  v71.size.height = v51;
  MidX = CGRectGetMidX(v71);
  v53 = (double *)&a1[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_centerLocation];
  v54 = *(double *)&a1[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_centerLocation + 8] + 64.0;
  objc_msgSend(v2, "bounds");
  objc_msgSend(v2, "setCenter:", MidX, v54 + CGRectGetMidY(v72));
  result = objc_msgSend(a1, "view");
  if (result)
  {
    v55 = result;
    objc_msgSend(result, "bounds");
    v57 = v56;
    v59 = v58;
    v61 = v60;
    v63 = v62;

    v73.origin.x = v57;
    v73.origin.y = v59;
    v73.size.width = v61;
    v73.size.height = v63;
    v64 = CGRectGetMidX(v73);
    v65 = v53[1] + 64.0;
    objc_msgSend(v2, "bounds");
    v66 = v65 + CGRectGetHeight(v74) + 6.0;
    objc_msgSend(v23, "bounds");
    return objc_msgSend(v23, "setCenter:", v64, v66 + CGRectGetMidY(v75));
  }
LABEL_13:
  __break(1u);
  return result;
}

id sub_100044CFC()
{
  char *v0;
  char *v1;
  int v2;
  int v3;
  id v4;
  char v5;
  __int16 v6;
  _BOOL4 v7;
  id result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v1 = &v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_state];
  v2 = v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_state + 16];
  if (v2 == 9)
  {
    v3 = v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController__connectivity + 1] << 8;
    *(_WORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController__connectivity] = 512;
    if (v3 == 512)
      goto LABEL_10;
    v4 = objc_msgSend(v0, "view");
    if (v4)
    {
LABEL_9:
      objc_msgSend(v4, "setNeedsLayout");

      goto LABEL_10;
    }
    __break(1u);
  }
  v5 = v1[18];
  v6 = *(_WORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController__connectivity];
  *(_WORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController__connectivity] = v2 & 0xFEFF | ((v5 & 1) << 8);
  if ((v6 & 0xFF00) == 0x200
    || (v7 = (v5 & 1) != 0, v2 != v6)
    || ((v7 ^ ((v6 & 0x100) == 0)) & 1) == 0)
  {
    result = objc_msgSend(v0, "view");
    v4 = result;
    if (!result)
    {
      __break(1u);
      goto LABEL_25;
    }
    goto LABEL_9;
  }
LABEL_10:
  v9 = *((_QWORD *)v1 + 4);
  if (v9)
  {
    v10 = *((_QWORD *)v1 + 3);
    v11 = *((_QWORD *)v1 + 4);
  }
  else
  {
    v10 = 0;
    v11 = 0xE000000000000000;
  }
  v12 = &v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController__connectivityStatusText];
  v14 = *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController__connectivityStatusText];
  v13 = *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController__connectivityStatusText
                     + 8];
  *(_QWORD *)v12 = v10;
  *((_QWORD *)v12 + 1) = v11;
  swift_bridgeObjectRetain(v9);
  v15 = v10 == v14 && v11 == v13;
  if (v15 || (_stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v14, v13, 0) & 1) != 0)
  {
    swift_bridgeObjectRelease(v13);
    v16 = *((_QWORD *)v1 + 6);
    if (v16)
    {
LABEL_19:
      v17 = *((_QWORD *)v1 + 5);
      v19 = *((_QWORD *)v1 + 7);
      v18 = *((_QWORD *)v1 + 8);
      v20 = &v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance];
      v21 = *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance];
      v22 = *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance + 8];
      v23 = *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance
                         + 16];
      v24 = *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance
                         + 24];
      *(_QWORD *)v20 = v17;
      *((_QWORD *)v20 + 1) = v16;
      *((_QWORD *)v20 + 2) = v19;
      *((_QWORD *)v20 + 3) = v18;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v16);
      sub_10004524C(v21, v22, v23, v24);
      sub_10003DADC(v21, v22, v23, v24);
      sub_100043018(v21, v22, v23, v24);
      v25 = v21;
      v26 = v22;
      v27 = v23;
      v28 = v24;
      return (id)sub_10003DADC(v25, v26, v27, v28);
    }
LABEL_22:
    v30 = &v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance];
    v31 = *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance];
    v32 = *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance + 8];
    v33 = *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance + 16];
    v34 = *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance + 24];
    *(_OWORD *)v30 = 0u;
    *((_OWORD *)v30 + 1) = 0u;
    sub_10004524C(v31, v32, v33, v34);
    sub_10003DADC(v31, v32, v33, v34);
    sub_100043018(v31, v32, v33, v34);
    v25 = v31;
    v26 = v32;
    v27 = v33;
    v28 = v34;
    return (id)sub_10003DADC(v25, v26, v27, v28);
  }
  result = objc_msgSend(v0, "view");
  if (result)
  {
    v29 = result;
    objc_msgSend(result, "setNeedsLayout");
    swift_bridgeObjectRelease(v13);

    v16 = *((_QWORD *)v1 + 6);
    if (v16)
      goto LABEL_19;
    goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

id sub_100044FCC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConnectionAssistantConnectionViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ConnectionAssistantConnectionViewController()
{
  return objc_opt_self(_TtC8SOSBuddy43ConnectionAssistantConnectionViewController);
}

_WORD *initializeBufferWithCopyOfBuffer for CoreTelephonySPIAgent.SelectRoadsideProviderResponse(_WORD *result, _WORD *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for TryOutModel.OfferedState(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *((unsigned __int8 *)a1 + 1);
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantConnectionViewController.Connectivity(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000451CC + 4 * byte_10024F275[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_100045200 + 4 * byte_10024F270[v4]))();
}

uint64_t sub_100045200(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_100045208(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x100045210);
  return result;
}

uint64_t sub_10004521C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x100045224);
  *(_BYTE *)(result + 1) = a2 + 1;
  return result;
}

uint64_t sub_100045228(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_100045230(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantConnectionViewController.Connectivity()
{
  return &type metadata for ConnectionAssistantConnectionViewController.Connectivity;
}

uint64_t sub_10004524C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

unint64_t sub_10004527C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319368;
  if (!qword_100319368)
  {
    v1 = objc_opt_self(UIBezierPath);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100319368);
  }
  return result;
}

uint64_t sub_1000452B8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000452DC()
{
  uint64_t v0;

  return sub_100044938(*(char **)(v0 + 16));
}

uint64_t sub_1000452E4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000452F4()
{
  uint64_t v0;

  return sub_100187B38(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t sub_1000452FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004530C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100045314()
{
  uint64_t v0;

  return swift_deallocObject(v0, 64, 7);
}

id sub_100045338()
{
  uint64_t v0;

  return sub_100044700(*(char **)(v0 + 16), *(double **)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t sub_100045348()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

void sub_100045358()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  char v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v1 = OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_state;
  if (qword_100315790 != -1)
    swift_once(&qword_100315790, sub_10007CCD0);
  v2 = &v0[v1];
  v3 = qword_10033FC68;
  v4 = word_10033FC70;
  v5 = HIBYTE(word_10033FC70);
  v6 = byte_10033FC72;
  v7 = qword_10033FC78;
  v8 = word_10033FCB0;
  v9 = HIBYTE(word_10033FCB0);
  v10 = byte_10033FCC8;
  v11 = xmmword_10033FC80;
  v12 = unk_10033FC90;
  v13 = xmmword_10033FCA0;
  v14 = *(_OWORD *)&qword_10033FCB8;
  *v2 = byte_10033FC60;
  *((_QWORD *)v2 + 1) = v3;
  v2[16] = v4;
  v2[17] = v5;
  v2[18] = v6;
  *((_QWORD *)v2 + 3) = v7;
  *((_OWORD *)v2 + 2) = v11;
  *((_OWORD *)v2 + 3) = v12;
  *((_OWORD *)v2 + 4) = v13;
  v2[80] = v8;
  v2[81] = v9;
  *(_OWORD *)(v2 + 88) = v14;
  v2[104] = v10;
  *(_WORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController__connectivity] = 512;
  v15 = &v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController__connectivityStatusText];
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = 0xE000000000000000;
  v16 = &v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_connectionGuidance];
  *(_OWORD *)v16 = 0u;
  *((_OWORD *)v16 + 1) = 0u;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_coveredProgress] = 0;
  v17 = &v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_centerLocation];
  *(_QWORD *)v17 = 0;
  *((_QWORD *)v17 + 1) = 0;
  v18 = &v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_target];
  *(_QWORD *)v18 = 0;
  v18[8] = 4;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_exclusionPath] = 0;
  v19 = OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_guidanceTitleLabel;
  v20 = v11;
  v21 = v12;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRetain(v21);
  *(_QWORD *)&v0[v19] = sub_1000433F8();
  v22 = OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_guidanceSubtitleLabel;
  *(_QWORD *)&v0[v22] = sub_10004369C();

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x7070757320746F6ELL, 0xED0000646574726FLL, "SOSBuddy/ConnectionAssistantConnectionViewController.swift", 58, 2, 132, 0);
  __break(1u);
}

uint64_t static ConnectionAssistantRenderer.Buffers.Error.__derived_enum_equals(_:_:)()
{
  return 1;
}

Swift::Int ConnectionAssistantRenderer.Buffers.Error.hashValue.getter()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void ConnectionAssistantRenderer.Buffers.Error.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int sub_100045598(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

char *sub_1000455D4(char a1, void *a2)
{
  char *v2;
  char *v3;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  char *v13;
  id v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  id v19;
  id v20;
  id v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  void *v27;
  id v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  objc_class *v42;
  id v43;
  objc_class *v44;
  char *v45;
  char *v46;
  uint64_t v47;
  id v48;
  id v49;
  void *v50;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  objc_super v56;
  objc_super v57;
  _BYTE v58[528];
  _BYTE v59[400];
  uint64_t v60;

  v3 = v2;
  v5 = a1 & 1;
  v6 = type metadata accessor for Date(0);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__kPixelFormat;
  *(_QWORD *)&v2[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__kPixelFormat] = 80;
  v10 = OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__metalView;
  v11 = type metadata accessor for MetalView();
  v12 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v11));
  v13 = v3;
  v14 = objc_msgSend(v12, "init");
  v55 = v10;
  *(_QWORD *)&v3[v10] = v14;
  v15 = OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__displayLink;
  *(_QWORD *)&v13[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__displayLink] = 0;
  v16 = &v13[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController_earth];
  static Date.now.getter(v14);
  sub_1000DAEB8((uint64_t)v9, v58);
  memcpy(v16, v58, 0x203uLL);
  v17 = (uint64_t)&v13[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController_camera];
  sub_100046580((uint64_t)v59);
  sub_1000463DC((uint64_t)v59, v17);
  HIDWORD(v52) = v5;
  v13[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__style] = v5;
  v18 = &v13[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__device];
  *(_QWORD *)&v13[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__device] = a2;
  v19 = objc_msgSend((id)swift_unknownObjectRetain(a2), "newCommandQueue");
  v54 = v15;
  if (v19)
  {
    v20 = v19;
    *(_QWORD *)&v13[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__commandQueue] = v19;
    swift_unknownObjectRetain(v19);
    objc_msgSend(v14, "setOpaque:", 0);
    v21 = objc_msgSend(v14, "layer");
    v22 = objc_opt_self(CAMetalLayer);
    v23 = (void *)swift_dynamicCastObjCClass(v21, v22);
    if (v23)
      objc_msgSend(v23, "setDevice:", a2);

    v24 = v55;
    v25 = objc_msgSend(*(id *)&v3[v55], "layer");
    v26 = objc_opt_self(CAMetalLayer);
    v27 = (void *)swift_dynamicCastObjCClass(v25, v26);
    if (v27)
      objc_msgSend(v27, "setOpaque:", 0);

    v28 = objc_msgSend(*(id *)&v3[v24], "layer");
    v29 = objc_opt_self(CAMetalLayer);
    v30 = (void *)swift_dynamicCastObjCClass(v28, v29);
    if (v30)
      objc_msgSend(v30, "setPixelFormat:", *(_QWORD *)&v3[v60]);

    v31 = objc_msgSend(*(id *)&v3[v24], "layer");
    v32 = objc_opt_self(CAMetalLayer);
    v33 = (void *)swift_dynamicCastObjCClass(v31, v32);
    if (v33)
      objc_msgSend(v33, "setFramebufferOnly:", 0);

    v34 = *(_QWORD *)&v3[v60];
    v35 = type metadata accessor for ConnectionAssistantRenderer();
    swift_allocObject(v35, 168, 7);
    swift_unknownObjectRetain(a2);
    v36 = v53;
    v37 = ConnectionAssistantRenderer.init(style:device:pixelFormat:)(SBYTE4(v52), a2, v34);
    if (!v36)
    {
      *(_QWORD *)&v13[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__renderer] = v37;

      v42 = (objc_class *)type metadata accessor for ConnectionAssistantEarthViewController();
      v57.receiver = v13;
      v57.super_class = v42;
      v43 = objc_msgSendSuper2(&v57, "initWithNibName:bundle:", 0, 0);
      v44 = (objc_class *)type metadata accessor for WeakCADisplayLinkTarget();
      v45 = (char *)objc_allocWithZone(v44);
      v46 = &v45[OBJC_IVAR____TtC8SOSBuddy23WeakCADisplayLinkTarget__target];
      *((_QWORD *)v46 + 1) = 0;
      v47 = swift_unknownObjectWeakInit(v46, 0);
      *(_QWORD *)(v47 + 8) = &off_1002E7088;
      swift_unknownObjectWeakAssign(v47, v43);
      v56.receiver = v45;
      v56.super_class = v44;
      v3 = (char *)v43;
      v48 = objc_msgSendSuper2(&v56, "init");
      v49 = objc_msgSend((id)objc_opt_self(CADisplayLink), "displayLinkWithTarget:selector:", v48, "updateFrom:");

      swift_unknownObjectRelease(v20);
      swift_unknownObjectRelease(a2);

      v50 = *(void **)&v3[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__displayLink];
      *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__displayLink] = v49;

      return v3;
    }
    swift_unknownObjectRelease(v20);
    swift_unknownObjectRelease(a2);
    swift_unknownObjectRelease(*(_QWORD *)v18);
    v18 = &v13[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__commandQueue];
  }
  else
  {
    v38 = sub_1000465C0();
    v39 = swift_allocError(&type metadata for ConnectionAssistantEarthViewController.Error, v38, 0, 0);
    swift_willThrow(v39);
    swift_unknownObjectRelease(a2);
    v24 = v55;
  }
  swift_unknownObjectRelease(*(_QWORD *)v18);

  v40 = *(void **)&v13[v54];
  v41 = type metadata accessor for ConnectionAssistantEarthViewController();
  swift_deallocPartialClassInstance(v13, v41, 977, 15);
  return v3;
}

void sub_100045AA0()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  objc_super v6;

  v6.receiver = v0;
  v6.super_class = (Class)type metadata accessor for ConnectionAssistantEarthViewController();
  objc_msgSendSuper2(&v6, "viewDidLoad");
  v1 = objc_msgSend(v0, "view");
  if (v1)
  {
    v2 = v1;
    v3 = objc_msgSend((id)objc_opt_self(UIColor), "systemBackgroundColor");
    objc_msgSend(v2, "setBackgroundColor:", v3);

    v4 = objc_msgSend(v0, "view");
    if (v4)
    {
      v5 = v4;
      objc_msgSend(v4, "addSubview:", *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__metalView]);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100045BDC(void *a1, uint64_t a2, uint64_t a3, const char **a4, SEL *a5)
{
  const char *v8;
  char *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  objc_super v14;

  v14.receiver = a1;
  v14.super_class = (Class)type metadata accessor for ConnectionAssistantEarthViewController();
  v8 = *a4;
  v9 = (char *)v14.receiver;
  objc_msgSendSuper2(&v14, v8, a3);
  v10 = *(void **)&v9[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__displayLink];
  if (v10)
  {
    v11 = (void *)objc_opt_self(NSRunLoop);
    v12 = v10;
    v13 = objc_msgSend(v11, "mainRunLoop", v14.receiver, v14.super_class);
    objc_msgSend(v12, *a5, v13, NSRunLoopCommonModes);

  }
  else
  {
    __break(1u);
  }
}

void sub_100045D8C(unsigned __int8 *a1)
{
  char *v1;
  NSObject *v2;
  char *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void *v11;
  unsigned int v12;
  int v13;
  void *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;

  v3 = v1;
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__displayLink;
  v11 = *(void **)&v3[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__displayLink];
  if (!v11)
  {
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v12 = objc_msgSend(v11, "isPaused");
  v13 = *a1;
  if (((v12 ^ v13) & 1) != 0)
    return;
  v14 = *(void **)&v3[v10];
  if (!v14)
    goto LABEL_13;
  objc_msgSend(v14, "setPaused:", (v13 & 1) == 0);
  if (qword_1003158D8 != -1)
    swift_once(&qword_1003158D8, sub_1000D9904);
  v15 = sub_10000D744(v5, (uint64_t)qword_10033FF40);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v15, v5);
  v2 = v3;
  v16 = Logger.logObject.getter(v2);
  v17 = static os_log_type_t.default.getter(v16);
  if (!os_log_type_enabled(v16, v17))
  {

    v16 = v2;
    goto LABEL_10;
  }
  v18 = (uint8_t *)swift_slowAlloc(8, -1);
  *(_DWORD *)v18 = 67109120;
  v19 = *(void **)&v3[v10];
  if (!v19)
  {
LABEL_14:

    __break(1u);
    return;
  }
  v21 = objc_msgSend(v19, "isPaused");
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v18 + 4, v18 + 8);

  _os_log_impl((void *)&_mh_execute_header, v16, v17, "Earth rendering is paused: %{BOOL}d", v18, 8u);
  swift_slowDealloc(v18, -1, -1);
LABEL_10:

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

id sub_100045FA4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConnectionAssistantEarthViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ConnectionAssistantEarthViewController()
{
  return objc_opt_self(_TtC8SOSBuddy38ConnectionAssistantEarthViewController);
}

void sub_10004605C(double a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  _BYTE v19[400];
  _BYTE __src[400];
  float32x4_t v21[33];
  float32x4_t __dst[24];

  v18 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__metalView), "layer");
  v3 = objc_opt_self(CAMetalLayer);
  v4 = (void *)swift_dynamicCastObjCClass(v18, v3);
  if (!v4)
  {

    return;
  }
  v5 = objc_msgSend(v4, "nextDrawable");

  if (v5)
  {
    sub_1000463DC(v1 + OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController_camera, (uint64_t)v19);
    sub_1000463DC((uint64_t)v19, (uint64_t)__src);
    if (sub_100046424((uint64_t)__src) != 1)
    {
      memcpy(__dst, __src, sizeof(__dst));
      v6 = objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__commandQueue), "commandBuffer");
      if (v6)
      {
        v7 = v6;
        v8 = objc_msgSend(objc_allocWithZone((Class)MTLRenderPassDescriptor), "init");
        v9 = objc_msgSend(v8, "colorAttachments");
        v10 = objc_msgSend(v9, "objectAtIndexedSubscript:", 0);

        if (v10)
        {
          objc_msgSend(v10, "setLoadAction:", 2);

          v11 = objc_msgSend(v8, "colorAttachments");
          v12 = objc_msgSend(v11, "objectAtIndexedSubscript:", 0);

          if (v12)
          {
            objc_msgSend(v12, "setClearColor:", 0.0, 0.0, 0.0, 0.0);

            v13 = objc_msgSend(v8, "colorAttachments");
            v14 = objc_msgSend(v13, "objectAtIndexedSubscript:", 0);

            if (v14)
            {
              objc_msgSend(v14, "setStoreAction:", 1);

              v15 = objc_msgSend(v8, "colorAttachments");
              v16 = objc_msgSend(v15, "objectAtIndexedSubscript:", 0);

              if (v16)
              {
                v17 = objc_msgSend(v5, "texture");
                objc_msgSend(v16, "setTexture:", v17);

                swift_unknownObjectRelease(v17);
                memcpy(v21, (const void *)(v1 + OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController_earth), 0x203uLL);
                ConnectionAssistantRenderer.render(dt:earth:camera:commandBuffer:renderPassDescriptor:)(v21, __dst, v7, v8, a1);
                objc_msgSend(v7, "presentDrawable:", v5);
                objc_msgSend(v7, "commit");
                swift_unknownObjectRelease(v5);
                swift_unknownObjectRelease(v7);

                return;
              }
              goto LABEL_16;
            }
LABEL_15:
            __break(1u);
LABEL_16:
            __break(1u);
            return;
          }
        }
        else
        {
          __break(1u);
        }
        __break(1u);
        goto LABEL_15;
      }
    }
    swift_unknownObjectRelease(v5);
  }
}

void sub_1000463C0(void *a1)
{
  double v1;

  objc_msgSend(a1, "duration");
  sub_10004605C(v1);
}

uint64_t sub_1000463DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_1003193E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100046424(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 384))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

void sub_100046440()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  char *v8;
  uint64_t v9;
  _BYTE v10[528];
  _BYTE v11[400];

  v1 = type metadata accessor for Date(0);
  __chkstk_darwin(v1, v2);
  v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__kPixelFormat] = 80;
  v5 = OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__metalView;
  v6 = type metadata accessor for MetalView();
  v7 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v6)), "init");
  *(_QWORD *)&v0[v5] = v7;
  *(_QWORD *)&v0[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__displayLink] = 0;
  v8 = &v0[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController_earth];
  static Date.now.getter(v7);
  sub_1000DAEB8((uint64_t)v4, v10);
  memcpy(v8, v10, 0x203uLL);
  v9 = (uint64_t)&v0[OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController_camera];
  sub_100046580((uint64_t)v11);
  sub_1000463DC((uint64_t)v11, v9);

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x7070757320746F6ELL, 0xED0000646574726FLL, "SOSBuddy/ConnectionAssistantEarthViewController.swift", 53, 2, 54, 0);
  __break(1u);
}

double sub_100046580(uint64_t a1)
{
  double result;

  result = 0.0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_BYTE *)(a1 + 384) = 1;
  return result;
}

unint64_t sub_1000465C0()
{
  unint64_t result;

  result = qword_1003193E8;
  if (!qword_1003193E8)
  {
    result = swift_getWitnessTable(&unk_10024F3B8, &type metadata for ConnectionAssistantEarthViewController.Error);
    atomic_store(result, (unint64_t *)&qword_1003193E8);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for LocationState.LocationAcquisitionStatus(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantEarthViewController.Error(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_100046698 + 4 * byte_10024F2F0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1000466B8 + 4 * byte_10024F2F5[v4]))();
}

_BYTE *sub_100046698(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1000466B8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000466C0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000466C8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1000466D0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1000466D8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantEarthViewController.Error()
{
  return &type metadata for ConnectionAssistantEarthViewController.Error;
}

unint64_t sub_1000466F8()
{
  unint64_t result;

  result = qword_1003193F0;
  if (!qword_1003193F0)
  {
    result = swift_getWitnessTable(&unk_10024F390, &type metadata for ConnectionAssistantEarthViewController.Error);
    atomic_store(result, (unint64_t *)&qword_1003193F0);
  }
  return result;
}

uint64_t initializeWithCopy for EndSessionButton(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v8 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  *(_BYTE *)(a1 + 48) = *((_BYTE *)a2 + 48);
  v9 = a2[7];
  *(_QWORD *)(a1 + 56) = v9;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v8);
  swift_retain(v9);
  return a1;
}

uint64_t *assignWithCopy for EndSessionButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a1[4];
  v9 = a2[4];
  a1[4] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[5] = a2[5];
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  v10 = a1[7];
  v11 = a2[7];
  a1[7] = v11;
  swift_retain(v11);
  swift_release(v10);
  return a1;
}

uint64_t *assignWithTake for EndSessionButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  v7 = a1[4];
  v8 = a2[4];
  a1[3] = a2[3];
  a1[4] = v8;
  swift_release(v7);
  a1[5] = a2[5];
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  v9 = a1[7];
  a1[7] = a2[7];
  swift_release(v9);
  return a1;
}

ValueMetadata *type metadata accessor for EndSessionButton()
{
  return &type metadata for EndSessionButton;
}

uint64_t sub_1000468D8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100295F84, 1);
}

uint64_t sub_1000468E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  BOOL v41;
  id v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  void *v46;
  id v47;
  Swift::String v48;
  Swift::String v49;
  Swift::String v50;
  id v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t result;
  Swift::String v56;
  Swift::String v57;
  Swift::String v58;
  void *v59;
  id v60;
  Swift::String v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  Swift::String v65;
  id v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  __n128 v70;
  uint64_t v71;
  _OWORD *v72;
  __int128 v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t KeyPath;
  uint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  void *v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t OpaqueTypeConformance2;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  __n128 v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD v123[2];
  _QWORD v124[2];
  void *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t countAndFlagsBits;
  void *v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  void *object;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  Swift::String v158;
  uint64_t v159;
  uint64_t v160;
  __int128 v161;
  _QWORD v162[2];
  Swift::String v163;
  Swift::String v164;
  Swift::String v165;
  Swift::String v166;
  Swift::String v167;

  v2 = v1;
  v4 = sub_100003DB8(&qword_100316A20);
  __chkstk_darwin(v4, v5);
  v156 = (char *)&v126 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for KeyboardShortcut(0);
  v154 = *(_QWORD *)(v7 - 8);
  v155 = v7;
  __chkstk_darwin(v7, v8);
  v153 = (char *)&v126 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v151 = type metadata accessor for ButtonBorderShape(0);
  v149 = *(_QWORD *)(v151 - 8);
  __chkstk_darwin(v151, v10);
  v12 = (char *)&v126 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = type metadata accessor for BorderedProminentButtonStyle(0);
  v145 = *(_QWORD *)(v147 - 8);
  __chkstk_darwin(v147, v13);
  v15 = (char *)&v126 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003DB8(&qword_100319400);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v126 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003DB8(&qword_100318730);
  v144 = *(_QWORD *)(v20 - 8);
  __chkstk_darwin(v20, v21);
  v23 = (char *)&v126 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v148 = sub_100003DB8(&qword_100319408);
  v146 = *(_QWORD *)(v148 - 8);
  __chkstk_darwin(v148, v24);
  v26 = (char *)&v126 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v150 = sub_100003DB8(&qword_100319410);
  __chkstk_darwin(v150, v27);
  v29 = (char *)&v126 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = sub_100003DB8(&qword_100319418);
  v140 = *(_QWORD *)(v141 - 8);
  __chkstk_darwin(v141, v30);
  v152 = (char *)&v126 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = sub_100003DB8(&qword_100319420);
  v142 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143, v32);
  v157 = (char *)&v126 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = sub_100003DB8(&qword_100319428);
  __chkstk_darwin(v34, v35);
  v39 = (char *)&v126 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = *(_QWORD *)(v2 + 16);
  if (v40)
  {
    if (!*(_QWORD *)(v40 + 64) || *(_BYTE *)(v40 + 56) != 5)
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v37 + 56))(a1, 1, 1);
    v132 = v39;
    v133 = v37;
    v134 = v36;
    v137 = v20;
    v135 = (void *)v4;
    v136 = a1;
    v41 = sub_100067058(0, *(_QWORD *)(v40 + 88));
    v42 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    if (v41)
    {
      v43._countAndFlagsBits = 0xD000000000000011;
      v163._countAndFlagsBits = 0xD000000000000025;
      v167._object = (void *)0x8000000100263FD0;
      v43._object = (void *)0x8000000100263FB0;
      v44._countAndFlagsBits = 0;
      v44._object = (void *)0xE000000000000000;
      v45 = NSLocalizedString(_:tableName:bundle:value:comment:)(v43, (Swift::String_optional)0, (NSBundle)v42, v44, v163);
      countAndFlagsBits = v45._countAndFlagsBits;
      object = v45._object;

      v46 = (void *)objc_opt_self(NSBundle);
      v47 = objc_msgSend(v46, "mainBundle");
      v164._countAndFlagsBits = 0xD000000000000028;
      v167._object = (void *)0x8000000100263F40;
      v48._object = (void *)0x8000000100263ED0;
      v48._countAndFlagsBits = 0x100000000000006ALL;
      v49._countAndFlagsBits = 0;
      v49._object = (void *)0xE000000000000000;
      v50 = NSLocalizedString(_:tableName:bundle:value:comment:)(v48, (Swift::String_optional)0, (NSBundle)v47, v49, v164);
      v129 = v50._countAndFlagsBits;
      v131 = v50._object;

      v51 = objc_msgSend(v46, "mainBundle");
      v52 = 0xD000000000000039;
      v167._object = (void *)0x8000000100263F70;
      v53 = 0x7373655320646E45;
      v54 = 0xEB000000006E6F69;
    }
    else
    {
      v56._countAndFlagsBits = 0xD000000000000018;
      v167._object = (void *)0x8000000100263D90;
      v56._object = (void *)0x8000000100263D70;
      v57._countAndFlagsBits = 0;
      v57._object = (void *)0xE000000000000000;
      v165._countAndFlagsBits = 0xD000000000000024;
      v58 = NSLocalizedString(_:tableName:bundle:value:comment:)(v56, (Swift::String_optional)0, (NSBundle)v42, v57, v165);
      countAndFlagsBits = v58._countAndFlagsBits;
      object = v58._object;

      v59 = (void *)objc_opt_self(NSBundle);
      v60 = objc_msgSend(v59, "mainBundle");
      v61._countAndFlagsBits = 0xD00000000000003ELL;
      v167._object = (void *)0x8000000100263D90;
      v61._object = (void *)0x8000000100263DC0;
      v62._countAndFlagsBits = 0;
      v62._object = (void *)0xE000000000000000;
      v166._countAndFlagsBits = 0xD000000000000024;
      v63 = NSLocalizedString(_:tableName:bundle:value:comment:)(v61, (Swift::String_optional)0, (NSBundle)v60, v62, v166);
      v129 = v63._countAndFlagsBits;
      v131 = v63._object;

      v51 = objc_msgSend(v59, "mainBundle");
      v52 = 0xD000000000000038;
      v167._object = (void *)0x8000000100263E00;
      v53 = 0x6E6E6F4320646E45;
      v54 = 0xEE006E6F69746365;
    }
    v64._countAndFlagsBits = 0;
    v64._object = (void *)0xE000000000000000;
    v65 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v53, (Swift::String_optional)0, (NSBundle)v51, v64, *(Swift::String *)&v52);
    v128 = v65._countAndFlagsBits;
    v138 = v65._object;

    v66 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v167._countAndFlagsBits = 0xD000000000000082;
    v167._object = (void *)0x8000000100263E40;
    v67._countAndFlagsBits = 6581829;
    v67._object = (void *)0xE300000000000000;
    v68._countAndFlagsBits = 0;
    v68._object = (void *)0xE000000000000000;
    v69 = NSLocalizedString(_:tableName:bundle:value:comment:)(v67, (Swift::String_optional)0, (NSBundle)v66, v68, v167);

    v158 = v69;
    static ButtonRole.destructive.getter(v70);
    v71 = type metadata accessor for ButtonRole(0);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 56))(v19, 0, 1, v71);
    v72 = (_OWORD *)swift_allocObject(&unk_1002E7228, 80, 7);
    v73 = *(_OWORD *)(v2 + 16);
    v72[1] = *(_OWORD *)v2;
    v72[2] = v73;
    v74 = *(_OWORD *)(v2 + 48);
    v72[3] = *(_OWORD *)(v2 + 32);
    v72[4] = v74;
    sub_10003826C((uint64_t *)v2);
    v127 = sub_10002B3F4();
    v75 = Button<>.init<A>(_:role:action:)(&v158, v19, sub_10004783C, v72, &type metadata for String, v127);
    BorderedProminentButtonStyle.init()(v75);
    v76 = sub_1000084FC(&qword_100318738, &qword_100318730, (uint64_t)&protocol conformance descriptor for Button<A>);
    v77 = sub_1000052EC(&qword_100318960, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
    v78 = v137;
    v79 = v147;
    v126 = v76;
    View.buttonStyle<A>(_:)(v15, v137, v147, v76, v77);
    (*(void (**)(char *, uint64_t))(v145 + 8))(v15, v79);
    v80 = (*(uint64_t (**)(char *, uint64_t))(v144 + 8))(v23, v78);
    static ButtonBorderShape.roundedRectangle.getter(v80);
    KeyPath = swift_getKeyPath(&unk_10024F468);
    v82 = v150;
    v83 = (uint64_t *)&v29[*(int *)(v150 + 36)];
    v84 = sub_100003DB8(&qword_100318968);
    v85 = v149;
    v86 = v151;
    (*(void (**)(char *, char *, uint64_t))(v149 + 16))((char *)v83 + *(int *)(v84 + 28), v12, v151);
    *v83 = KeyPath;
    v87 = v146;
    v88 = v148;
    (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v29, v26, v148);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v12, v86);
    v89 = (*(uint64_t (**)(char *, uint64_t))(v87 + 8))(v26, v88);
    v90 = v153;
    static KeyboardShortcut.defaultAction.getter(v89);
    v91 = (void *)sub_10004784C();
    v92 = v152;
    View.keyboardShortcut(_:)(v90, v82, v91);
    (*(void (**)(char *, uint64_t))(v154 + 8))(v90, v155);
    sub_100007FF0((uint64_t)v29, &qword_100319410);
    v93 = enum case for DynamicTypeSize.xxLarge(_:);
    v94 = type metadata accessor for DynamicTypeSize(0);
    v95 = (uint64_t)v156;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v94 - 8) + 104))(v156, v93, v94);
    v96 = sub_1000052EC(&qword_100316A30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v95, v95, v94, v96) & 1) != 0)
    {
      v158._countAndFlagsBits = v82;
      v158._object = v91;
      OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v158, &opaque type descriptor for <<opaque return type of View.keyboardShortcut(_:)>>, 1);
      v98 = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
      v99 = v92;
      v100 = v141;
      v101 = v135;
      View.dynamicTypeSize<A>(_:)(v95, v141, v135, OpaqueTypeConformance2, v98);
      sub_100007FF0(v95, &qword_100316A20);
      (*(void (**)(char *, uint64_t))(v140 + 8))(v99, v100);
      v162[0] = countAndFlagsBits;
      v162[1] = object;
      v161 = *(_OWORD *)(v2 + 48);
      v102 = sub_100003DB8(&qword_100316780);
      v103 = State.projectedValue.getter(&v158, v102);
      v156 = (char *)&v126;
      v104 = v78;
      v105 = v158._countAndFlagsBits;
      v106 = v158._object;
      LODWORD(v155) = v159;
      v108 = __chkstk_darwin(v103, v107);
      __chkstk_darwin(v108, v109);
      v110 = v131;
      v125 = v131;
      v158._countAndFlagsBits = v100;
      v158._object = v101;
      v159 = OpaqueTypeConformance2;
      v160 = v98;
      v111 = swift_getOpaqueTypeConformance2(&v158, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
      v167._object = &protocol witness table for Text;
      v124[1] = v126;
      v124[0] = v127;
      v123[0] = &type metadata for Text;
      v123[1] = v111;
      v122 = v104;
      v112 = v143;
      v113 = v132;
      v114 = v157;
      ((void (*)(_QWORD *, uint64_t, void *, _QWORD, uint64_t, uint64_t (*)(), _QWORD *, uint64_t (*)@<X0>(uint64_t@<X8>), _QWORD *, uint64_t, void *, uint64_t))View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:actions:message:))(v162, v105, v106, v155, 1, sub_100047954, v123, sub_100047960, v124, v143, &type metadata for String, v122);
      swift_release(v106);
      swift_release(v105);
      (*(void (**)(char *, uint64_t))(v142 + 8))(v114, v112);
      swift_bridgeObjectRelease(object);
      swift_bridgeObjectRelease(v138);
      v115 = swift_bridgeObjectRelease(v110);
      v116 = v133;
      v117 = v136;
      v118 = v134;
      (*(void (**)(uint64_t, char *, uint64_t, __n128))(v133 + 32))(v136, v113, v134, v115);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v116 + 56))(v117, 0, 1, v118);
    }
    __break(1u);
  }
  v119 = *(_QWORD *)(v2 + 24);
  v120 = type metadata accessor for StewieModel();
  v121 = sub_1000052EC(&qword_1003186E0, (uint64_t (*)(uint64_t))type metadata accessor for StewieModel, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v119, v120, v121);
  __break(1u);
  return result;
}

uint64_t sub_10004751C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  __int128 v9;

  if (*(_QWORD *)a1)
  {
    v2 = *(_QWORD *)(*(_QWORD *)a1 + 168);
    LOBYTE(v9) = 0;
    swift_retain(v2);
    PassthroughSubject.send(_:)(&v9);
    swift_release(v2);
    v9 = *(_OWORD *)(a1 + 48);
    v8 = 1;
    v3 = sub_100003DB8(&qword_100316780);
    return State.wrappedValue.setter(&v8, v3);
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = type metadata accessor for AppEvents();
    v7 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    result = EnvironmentObject.error()(0, v5, v6, v7);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000475D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __n128 v10;
  uint64_t v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  unint64_t v15;
  _QWORD v17[2];

  v6 = sub_100003DB8(&qword_100319400);
  __chkstk_darwin(v6, v7);
  v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = a1;
  v17[1] = a2;
  v10 = swift_bridgeObjectRetain(a2);
  static ButtonRole.destructive.getter(v10);
  v11 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v9, 0, 1, v11);
  v12 = (_OWORD *)swift_allocObject(&unk_1002E7250, 80, 7);
  v13 = *(_OWORD *)(a3 + 16);
  v12[1] = *(_OWORD *)a3;
  v12[2] = v13;
  v14 = *(_OWORD *)(a3 + 48);
  v12[3] = *(_OWORD *)(a3 + 32);
  v12[4] = v14;
  sub_10003826C((uint64_t *)a3);
  v15 = sub_10002B3F4();
  return Button<>.init<A>(_:role:action:)(v17, v9, sub_10004796C, v12, &type metadata for String, v15);
}

uint64_t sub_1000476E4(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  if (*a1)
  {
    v1 = *(_QWORD *)(*a1 + 16);
    swift_retain(v1);
    v2 = sub_100003DB8(&qword_10032B0E0);
    v3 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v2, v3);
    return swift_release(v1);
  }
  else
  {
    v5 = a1[1];
    v6 = type metadata accessor for AppEvents();
    v7 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    result = EnvironmentObject.error()(0, v5, v6, v7);
    __break(1u);
  }
  return result;
}

uint64_t sub_100047798@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  __n128 v6;
  uint64_t result;
  uint64_t v8;
  char v9;
  uint64_t v10;
  _QWORD v11[2];

  v11[0] = a1;
  v11[1] = a2;
  v5 = sub_10002B3F4();
  v6 = swift_bridgeObjectRetain(a2);
  result = Text.init<A>(_:)(v11, &type metadata for String, v5, v6);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v8;
  *(_BYTE *)(a3 + 16) = v9 & 1;
  *(_QWORD *)(a3 + 24) = v10;
  return result;
}

uint64_t sub_100047800@<X0>(uint64_t a1@<X8>)
{
  return sub_1000468E8(a1);
}

uint64_t sub_10004783C()
{
  uint64_t v0;

  return sub_10004751C(v0 + 16);
}

unint64_t sub_10004784C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100319430;
  if (!qword_100319430)
  {
    v1 = sub_100007FAC(&qword_100319410);
    v2[0] = sub_100007FAC(&qword_100318730);
    v2[1] = type metadata accessor for BorderedProminentButtonStyle(255);
    v2[2] = sub_1000084FC(&qword_100318738, &qword_100318730, (uint64_t)&protocol conformance descriptor for Button<A>);
    v2[3] = sub_1000052EC(&qword_100318960, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_1000084FC(&qword_100318978, &qword_100318968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319430);
  }
  return result;
}

uint64_t sub_100047954()
{
  uint64_t *v0;

  return sub_1000475D8(v0[2], v0[3], v0[4]);
}

uint64_t sub_100047960@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100047798(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t sub_10004796C()
{
  uint64_t v0;

  return sub_1000476E4((_QWORD *)(v0 + 16));
}

unint64_t sub_100047978()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t OpaqueTypeConformance2;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void *v18;

  result = qword_100319438;
  if (!qword_100319438)
  {
    v1 = sub_100007FAC(&qword_100319440);
    v2 = sub_100007FAC(&qword_100319420);
    v3 = sub_100007FAC(&qword_100318730);
    v4 = sub_100007FAC(&qword_100319418);
    v5 = sub_100007FAC(&qword_100316A20);
    v11 = sub_100007FAC(&qword_100319410);
    v12 = (void *)sub_10004784C();
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.keyboardShortcut(_:)>>, 1);
    v7 = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    v11 = v4;
    v12 = (void *)v5;
    v13 = OpaqueTypeConformance2;
    v14 = (void *)v7;
    v8 = swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    v9 = sub_10002B3F4();
    v10 = sub_1000084FC(&qword_100318738, &qword_100318730, (uint64_t)&protocol conformance descriptor for Button<A>);
    v11 = v2;
    v12 = &type metadata for String;
    v13 = v3;
    v14 = &type metadata for Text;
    v15 = v8;
    v16 = v9;
    v17 = v10;
    v18 = &protocol witness table for Text;
    swift_getOpaqueTypeConformance2(&v11, &opaque type descriptor for <<opaque return type of View.confirmationDialog<A, B, C>(_:isPresented:titleVisibility:actions:message:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100319438);
  }
  return result;
}

uint64_t sub_100047AFC()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for PhoneNumberFormatter()
{
  return objc_opt_self(_TtC8SOSBuddy20PhoneNumberFormatter);
}

uint64_t destroy for QuestionFooterView(_QWORD *a1)
{
  swift_release(*a1);
  return swift_release(a1[2]);
}

uint64_t _s8SOSBuddy18QuestionFooterViewVwCP_0(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;

  v3 = *((_QWORD *)a2 + 2);
  v4 = *a2;
  *(_OWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v4);
  swift_retain(v3);
  return a1;
}

uint64_t *assignWithCopy for QuestionFooterView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v7 = a2[1];
  v6 = a2[2];
  v8 = a1[2];
  a1[1] = v7;
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

_QWORD *assignWithTake for QuestionFooterView(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_release(*a1);
  v4 = *(_QWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v5 = a1[2];
  a1[2] = v4;
  swift_release(v5);
  return a1;
}

ValueMetadata *type metadata accessor for QuestionFooterView()
{
  return &type metadata for QuestionFooterView;
}

uint64_t sub_100047C5C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100296048, 1);
}

double sub_100047C6C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double result;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  char v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char v44;

  if (*(unsigned __int8 *)(a1 + 32) > 2u)
  {
    v32 = a1;
    v33 = a2;
    v34 = a3;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 1;
    v24 = sub_100047E60();
    v25 = sub_100047EA4();
    swift_retain(a1);
    swift_retain(a3);
    v23 = v24;
    v22 = v25;
  }
  else
  {
    v8 = type metadata accessor for AppEvents();
    v9 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    swift_retain(a1);
    swift_retain(a3);
    v10 = EnvironmentObject.init()(v8, v9);
    v12 = v11;
    v13 = type metadata accessor for UIMetrics();
    v14 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v15 = EnvironmentObject.init()(v13, v14);
    v17 = v16;
    v18 = type metadata accessor for QuestionnaireState();
    v19 = sub_1000052EC(&qword_100316A18, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState, (uint64_t)&unk_10024D2FC);
    v32 = v10;
    v33 = v12;
    v34 = v15;
    *(_QWORD *)&v35 = v17;
    *((_QWORD *)&v35 + 1) = EnvironmentObject.init()(v18, v19);
    *(_QWORD *)&v36 = v20;
    *((_QWORD *)&v36 + 1) = a1;
    *(_QWORD *)&v37 = a2;
    *((_QWORD *)&v37 + 1) = a3;
    v38 = 0;
    v21 = sub_100047E60();
    v22 = sub_100047EA4();
    v23 = v21;
  }
  _ConditionalContent<>.init(storage:)(&v32, &type metadata for DefaultQuestionFooterView, &type metadata for BuiltInQuestionFooterView, v23, v22);
  result = *(double *)&v39;
  v27 = v40;
  v28 = v41;
  v29 = v42;
  v30 = v43;
  v31 = v44;
  *(_OWORD *)a4 = v39;
  *(_OWORD *)(a4 + 16) = v27;
  *(_OWORD *)(a4 + 32) = v28;
  *(_OWORD *)(a4 + 48) = v29;
  *(_QWORD *)(a4 + 64) = v30;
  *(_BYTE *)(a4 + 72) = v31;
  return result;
}

double sub_100047E54@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100047C6C(*v1, v1[1], v1[2], a1);
}

unint64_t sub_100047E60()
{
  unint64_t result;

  result = qword_1003194F0;
  if (!qword_1003194F0)
  {
    result = swift_getWitnessTable(&unk_10024F59C, &type metadata for DefaultQuestionFooterView);
    atomic_store(result, (unint64_t *)&qword_1003194F0);
  }
  return result;
}

unint64_t sub_100047EA4()
{
  unint64_t result;

  result = qword_1003194F8;
  if (!qword_1003194F8)
  {
    result = swift_getWitnessTable(&unk_10024FB2C, &type metadata for BuiltInQuestionFooterView);
    atomic_store(result, (unint64_t *)&qword_1003194F8);
  }
  return result;
}

uint64_t destroy for DefaultQuestionFooterView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[6]);
  return swift_release(a1[8]);
}

uint64_t initializeWithCopy for DefaultQuestionFooterView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v8 = a2[4];
  v7 = a2[5];
  *(_QWORD *)(a1 + 32) = v8;
  *(_QWORD *)(a1 + 40) = v7;
  v9 = a2[8];
  v11 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 48) = v11;
  *(_QWORD *)(a1 + 64) = v9;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v8);
  swift_retain(v11);
  swift_retain(v9);
  return a1;
}

uint64_t *assignWithCopy for DefaultQuestionFooterView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a1[4];
  v9 = a2[4];
  a1[4] = v9;
  swift_retain(v9);
  swift_release(v8);
  a1[5] = a2[5];
  v10 = a2[6];
  v11 = a1[6];
  a1[6] = v10;
  swift_retain(v10);
  swift_release(v11);
  v13 = a2[7];
  v12 = a2[8];
  v14 = a1[8];
  a1[7] = v13;
  a1[8] = v12;
  swift_retain(v12);
  swift_release(v14);
  return a1;
}

_QWORD *assignWithTake for DefaultQuestionFooterView(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  *a1 = *(_QWORD *)a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = *(_QWORD *)(a2 + 16);
  a1[1] = *(_QWORD *)(a2 + 8);
  a1[2] = v6;
  swift_release(v5);
  v7 = a1[4];
  v8 = *(_QWORD *)(a2 + 32);
  a1[3] = *(_QWORD *)(a2 + 24);
  a1[4] = v8;
  swift_release(v7);
  a1[5] = *(_QWORD *)(a2 + 40);
  swift_release(a1[6]);
  v9 = *(_QWORD *)(a2 + 64);
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  v10 = a1[8];
  a1[8] = v9;
  swift_release(v10);
  return a1;
}

ValueMetadata *type metadata accessor for DefaultQuestionFooterView()
{
  return &type metadata for DefaultQuestionFooterView;
}

unint64_t sub_1000480F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319500;
  if (!qword_100319500)
  {
    v1 = sub_100007FAC(&qword_100319508);
    sub_100047E60();
    sub_100047EA4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319500);
  }
  return result;
}

uint64_t sub_100048164(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100296070, 1);
}

uint64_t sub_100048174@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t KeyPath;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  __n128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t OpaqueTypeConformance2;
  char *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  __int128 v178;
  uint64_t v179;
  __int128 v180;
  uint64_t v181;
  unint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  char *v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  char *v250;
  uint64_t v251;
  uint64_t v252;
  char *v253;
  char *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  char *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  char *v274;
  char *v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;

  v272 = a3;
  v5 = sub_100003DB8(&qword_100319518);
  __chkstk_darwin(v5, v6);
  v256 = (uint64_t)&v225 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v258 = type metadata accessor for BorderlessButtonStyle(0);
  v255 = *(_QWORD *)(v258 - 8);
  __chkstk_darwin(v258, v8);
  v254 = (char *)&v225 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v252 = sub_100003DB8(&qword_100319520);
  v251 = *(_QWORD *)(v252 - 8);
  __chkstk_darwin(v252, v10);
  v250 = (char *)&v225 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v248 = sub_100003DB8(&qword_100319528);
  __chkstk_darwin(v248, v12);
  v253 = (char *)&v225 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v261 = sub_100003DB8(&qword_100319530);
  v259 = *(_QWORD *)(v261 - 8);
  __chkstk_darwin(v261, v14);
  v257 = (char *)&v225 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v264 = sub_100003DB8(&qword_100319538);
  v263 = *(_QWORD *)(v264 - 8);
  __chkstk_darwin(v264, v16);
  v262 = (char *)&v225 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v260 = sub_100003DB8(&qword_100319540);
  __chkstk_darwin(v260, v18);
  v266 = (char *)&v225 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v268 = sub_100003DB8(&qword_100319548);
  v21 = __chkstk_darwin(v268, v20);
  v265 = (uint64_t)&v225 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21, v23);
  v267 = (uint64_t)&v225 - v24;
  v25 = sub_100003DB8(&qword_100319550);
  v27 = __chkstk_darwin(v25, v26);
  v29 = (char *)&v225 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27, v30);
  v275 = (char *)&v225 - v31;
  v32 = type metadata accessor for KeyboardShortcut(0);
  v279 = *(_QWORD *)(v32 - 8);
  v280 = v32;
  __chkstk_darwin(v32, v33);
  v278 = (char *)&v225 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v247 = type metadata accessor for ButtonBorderShape(0);
  v246 = *(_QWORD *)(v247 - 8);
  __chkstk_darwin(v247, v35);
  v245 = (char *)&v225 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v239 = type metadata accessor for BorderedProminentButtonStyle(0);
  v238 = *(_QWORD *)(v239 - 8);
  __chkstk_darwin(v239, v37);
  v237 = (char *)&v225 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for ControlSize(0);
  v276 = *(_QWORD *)(v39 - 8);
  v277 = v39;
  __chkstk_darwin(v39, v40);
  v42 = (char *)&v225 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v230 = sub_100003DB8(&qword_100318910);
  v229 = *(_QWORD *)(v230 - 8);
  __chkstk_darwin(v230, v43);
  v45 = (char *)&v225 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v231 = sub_100003DB8(&qword_100318918);
  __chkstk_darwin(v231, v46);
  v48 = (char *)&v225 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v235 = sub_100003DB8(&qword_100318920);
  v233 = *(_QWORD *)(v235 - 8);
  __chkstk_darwin(v235, v49);
  v232 = (char *)&v225 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v234 = sub_100003DB8(&qword_100318928);
  __chkstk_darwin(v234, v51);
  v236 = (char *)&v225 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v242 = sub_100003DB8(&qword_100318930);
  v241 = *(_QWORD *)(v242 - 8);
  __chkstk_darwin(v242, v53);
  v240 = (char *)&v225 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = sub_100003DB8(&qword_100318938);
  __chkstk_darwin(v55, v56);
  v244 = (char *)&v225 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = sub_100003DB8(&qword_100318980);
  v270 = *(_QWORD *)(v58 - 8);
  __chkstk_darwin(v58, v59);
  v243 = (uint64_t)&v225 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = sub_100003DB8(&qword_100319558);
  v63 = __chkstk_darwin(v61, v62);
  __chkstk_darwin(v63, v64);
  v281 = (uint64_t)&v225 - v65;
  v66 = *(_QWORD *)(a1 + 48);
  v67 = *(unsigned __int8 *)(v66 + 32) - 1 >= 2;
  v273 = v68;
  v274 = v29;
  v269 = v5;
  v249 = v42;
  v271 = a1;
  if (v67 && *(_BYTE *)(v66 + 64) != 6)
  {
    v127 = 1;
    v128 = (uint64_t)v275;
    v129 = v270;
    v130 = v66;
  }
  else
  {
    v228 = v66;
    v69 = swift_allocObject(&unk_1002E7428, 88, 7);
    v227 = v55;
    v70 = v69;
    v71 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(v69 + 48) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v69 + 64) = v71;
    *(_QWORD *)(v69 + 80) = *(_QWORD *)(a1 + 64);
    v72 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v69 + 16) = *(_OWORD *)a1;
    *(_OWORD *)(v69 + 32) = v72;
    sub_10004A7A0((uint64_t *)a1);
    v73 = sub_100003DB8(&qword_100318940);
    v226 = v58;
    v74 = v73;
    v75 = sub_100038540();
    Button.init(action:label:)(sub_10004AB24, v70, sub_100049904, 0, v74, v75);
    v76 = v276;
    v77 = a2;
    v78 = v277;
    (*(void (**)(char *, _QWORD, uint64_t))(v276 + 104))(v42, enum case for ControlSize.large(_:), v277);
    KeyPath = swift_getKeyPath(&unk_10024F5F0);
    v80 = v231;
    v81 = (uint64_t *)&v48[*(int *)(v231 + 36)];
    v82 = sub_100003DB8(&qword_100316C38);
    (*(void (**)(char *, char *, uint64_t))(v76 + 16))((char *)v81 + *(int *)(v82 + 28), v42, v78);
    *v81 = KeyPath;
    v83 = v229;
    v84 = v230;
    (*(void (**)(char *, char *, uint64_t))(v229 + 16))(v48, v45, v230);
    (*(void (**)(char *, uint64_t))(v76 + 8))(v42, v78);
    v85 = (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v45, v84);
    v86 = v237;
    BorderedProminentButtonStyle.init()(v85);
    v87 = sub_10004A894((unint64_t *)&qword_100318950, &qword_100318918, &qword_100318958, &qword_100318910);
    v88 = sub_1000052EC(&qword_100318960, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
    v89 = v232;
    v90 = v239;
    View.buttonStyle<A>(_:)(v86, v80, v239, v87, v88);
    (*(void (**)(char *, uint64_t))(v238 + 8))(v86, v90);
    v91 = sub_100007FF0((uint64_t)v48, &qword_100318918);
    v92 = v245;
    static ButtonBorderShape.roundedRectangle.getter(v91);
    v93 = swift_getKeyPath(&unk_10024F620);
    v94 = v234;
    v95 = (uint64_t)v236;
    v96 = (uint64_t *)&v236[*(int *)(v234 + 36)];
    v97 = sub_100003DB8(&qword_100318968);
    v98 = v246;
    v99 = v247;
    (*(void (**)(char *, char *, uint64_t))(v246 + 16))((char *)v96 + *(int *)(v97 + 28), v92, v247);
    *v96 = v93;
    v100 = v233;
    v101 = v235;
    (*(void (**)(uint64_t, char *, uint64_t))(v233 + 16))(v95, v89, v235);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v92, v99);
    v102 = (*(uint64_t (**)(char *, uint64_t))(v100 + 8))(v89, v101);
    v103 = v278;
    static KeyboardShortcut.defaultAction.getter(v102);
    v104 = sub_100038650();
    v105 = v240;
    View.keyboardShortcut(_:)(v103, v94, v104);
    (*(void (**)(char *, uint64_t))(v279 + 8))(v103, v280);
    sub_100007FF0(v95, &qword_100318928);
    v106 = v77[3];
    v107 = v77[4];
    sub_100007BBC(v77, v106);
    v108 = (*(uint64_t (**)(uint64_t, uint64_t))(v107 + 296))(v106, v107);
    v109 = swift_getKeyPath(&unk_10024F650);
    v282 = v108;
    v110 = swift_retain(v108);
    v111 = AnyShapeStyle.init<A>(_:)(&v282, &type metadata for Color, &protocol witness table for Color, v110);
    v112 = v241;
    v113 = (uint64_t)v244;
    v114 = v242;
    (*(void (**)(char *, char *, uint64_t))(v241 + 16))(v244, v105, v242);
    swift_release(v108);
    v115 = (uint64_t *)(v113 + *(int *)(v227 + 36));
    *v115 = v109;
    v115[1] = v111;
    (*(void (**)(char *, uint64_t))(v112 + 8))(v105, v114);
    v116 = v77[3];
    v117 = v77[4];
    sub_100007BBC(v77, v116);
    v118 = (*(double (**)(uint64_t, uint64_t))(v117 + 464))(v116, v117);
    v120 = v119;
    v122 = v121;
    v124 = v123;
    LOBYTE(v116) = static Edge.Set.all.getter(v118);
    v125 = v243;
    sub_10000B234(v113, v243, &qword_100318938);
    v58 = v226;
    v126 = v125 + *(int *)(v226 + 36);
    *(_BYTE *)v126 = v116;
    *(double *)(v126 + 8) = v118;
    *(_QWORD *)(v126 + 16) = v120;
    *(_QWORD *)(v126 + 24) = v122;
    *(_QWORD *)(v126 + 32) = v124;
    *(_BYTE *)(v126 + 40) = 0;
    sub_100007FF0(v113, &qword_100318938);
    sub_10000B458(v125, v281, &qword_100318980);
    v127 = 0;
    v128 = (uint64_t)v275;
    v129 = v270;
    v130 = v228;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v129 + 56))(v281, v127, 1, v58);
  if (sub_10008476C())
  {
    v131 = swift_allocObject(&unk_1002E7400, 88, 7);
    v132 = v271;
    v133 = *(_OWORD *)(v271 + 48);
    *(_OWORD *)(v131 + 48) = *(_OWORD *)(v271 + 32);
    *(_OWORD *)(v131 + 64) = v133;
    *(_QWORD *)(v131 + 80) = *(_QWORD *)(v132 + 64);
    v134 = *(_OWORD *)(v132 + 16);
    *(_OWORD *)(v131 + 16) = *(_OWORD *)v132;
    *(_OWORD *)(v131 + 32) = v134;
    sub_10004A7A0((uint64_t *)v132);
    v135 = sub_100003DB8(&qword_100319570);
    v136 = sub_10004A808();
    v137 = v250;
    Button.init(action:label:)(sub_10004AABC, v131, sub_100049D04, 0, v135, v136);
    v139 = v276;
    v138 = v277;
    v140 = v249;
    (*(void (**)(char *, _QWORD, uint64_t))(v276 + 104))(v249, enum case for ControlSize.large(_:), v277);
    v141 = swift_getKeyPath(&unk_10024F5F0);
    v142 = v248;
    v143 = v128;
    v144 = v253;
    v145 = (uint64_t *)&v253[*(int *)(v248 + 36)];
    v146 = sub_100003DB8(&qword_100316C38);
    (*(void (**)(char *, char *, uint64_t))(v139 + 16))((char *)v145 + *(int *)(v146 + 28), v140, v138);
    *v145 = v141;
    v147 = v251;
    v148 = v252;
    (*(void (**)(char *, char *, uint64_t))(v251 + 16))(v144, v137, v252);
    (*(void (**)(char *, uint64_t))(v139 + 8))(v140, v138);
    v149 = (*(uint64_t (**)(char *, uint64_t))(v147 + 8))(v137, v148);
    v150 = v254;
    BorderlessButtonStyle.init()(v149);
    v151 = sub_10004A894((unint64_t *)&qword_100319580, &qword_100319528, &qword_100319588, &qword_100319520);
    v152 = sub_1000052EC(&qword_100319590, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
    v153 = v257;
    v154 = v258;
    View.buttonStyle<A>(_:)(v150, v142, v258, v151, v152);
    (*(void (**)(char *, uint64_t))(v255 + 8))(v150, v154);
    v155 = (uint64_t)v144;
    v128 = v143;
    v156 = sub_100007FF0(v155, &qword_100319528);
    v157 = v278;
    static KeyboardShortcut.defaultAction.getter(v156);
    v282 = v142;
    v283 = v154;
    v284 = v151;
    v285 = v152;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v282, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v159 = v262;
    v160 = v261;
    View.keyboardShortcut(_:)(v157, v261, OpaqueTypeConformance2);
    (*(void (**)(char *, uint64_t))(v279 + 8))(v157, v280);
    v161 = (*(uint64_t (**)(char *, uint64_t))(v259 + 8))(v153, v160);
    LOBYTE(v160) = static Edge.Set.top.getter(v161);
    v162 = v263;
    v163 = (uint64_t)v266;
    v164 = v264;
    (*(void (**)(char *, char *, uint64_t))(v263 + 16))(v266, v159, v264);
    v165 = v163 + *(int *)(v260 + 36);
    *(_BYTE *)v165 = v160;
    *(_OWORD *)(v165 + 8) = 0u;
    *(_OWORD *)(v165 + 24) = 0u;
    *(_BYTE *)(v165 + 40) = 1;
    v166 = (*(uint64_t (**)(char *, uint64_t))(v162 + 8))(v159, v164);
    LOBYTE(v160) = static Edge.Set.bottom.getter(v166);
    v167 = v265;
    sub_10000B234(v163, v265, &qword_100319540);
    v168 = v268;
    v169 = v167 + *(int *)(v268 + 36);
    *(_BYTE *)v169 = v160;
    *(_OWORD *)(v169 + 8) = 0u;
    *(_OWORD *)(v169 + 24) = 0u;
    *(_BYTE *)(v169 + 40) = 1;
    sub_100007FF0(v163, &qword_100319540);
    v170 = v267;
    sub_10000B458(v167, v267, &qword_100319548);
    v171 = v256;
    sub_10000B234(v170, v256, &qword_100319548);
    swift_storeEnumTagMultiPayload(v171, v269, 0);
    v172 = sub_10004A92C();
    v173 = (uint64_t)v274;
    _ConditionalContent<>.init(storage:)(v171, v168, v168, v172, v172);
    sub_100007FF0(v170, &qword_100319548);
    v174 = sub_100003DB8(&qword_100319560);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v174 - 8) + 56))(v173, 0, 1, v174);
    sub_10000B458(v173, v143, &qword_100319550);
  }
  else
  {
    v175 = *(_QWORD *)(v130 + 152);
    v176 = v271;
    if (v175)
    {
      v177 = swift_allocObject(&unk_1002E73D8, 96, 7);
      v178 = *(_OWORD *)(v176 + 48);
      *(_OWORD *)(v177 + 48) = *(_OWORD *)(v176 + 32);
      *(_OWORD *)(v177 + 64) = v178;
      v179 = *(_QWORD *)(v176 + 64);
      v180 = *(_OWORD *)(v176 + 16);
      *(_OWORD *)(v177 + 16) = *(_OWORD *)v176;
      *(_OWORD *)(v177 + 32) = v180;
      *(_QWORD *)(v177 + 80) = v179;
      *(_QWORD *)(v177 + 88) = v175;
      swift_retain(v175);
      sub_10004A7A0((uint64_t *)v176);
      swift_retain(v175);
      v181 = sub_100003DB8(&qword_100319570);
      v182 = sub_10004A808();
      v183 = v250;
      Button.init(action:label:)(sub_10004A770, v177, sub_10004A798, v175, v181, v182);
      v185 = v276;
      v184 = v277;
      v186 = v249;
      (*(void (**)(char *, _QWORD, uint64_t))(v276 + 104))(v249, enum case for ControlSize.large(_:), v277);
      v187 = swift_getKeyPath(&unk_10024F5F0);
      v188 = v248;
      v189 = (uint64_t)v253;
      v190 = (uint64_t *)&v253[*(int *)(v248 + 36)];
      v191 = sub_100003DB8(&qword_100316C38);
      (*(void (**)(char *, char *, uint64_t))(v185 + 16))((char *)v190 + *(int *)(v191 + 28), v186, v184);
      *v190 = v187;
      v192 = v251;
      v193 = v252;
      (*(void (**)(uint64_t, char *, uint64_t))(v251 + 16))(v189, v183, v252);
      (*(void (**)(char *, uint64_t))(v185 + 8))(v186, v184);
      v194 = (*(uint64_t (**)(char *, uint64_t))(v192 + 8))(v183, v193);
      v195 = v254;
      BorderlessButtonStyle.init()(v194);
      v196 = sub_10004A894((unint64_t *)&qword_100319580, &qword_100319528, &qword_100319588, &qword_100319520);
      v197 = sub_1000052EC(&qword_100319590, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
      v198 = v257;
      v199 = v258;
      View.buttonStyle<A>(_:)(v195, v188, v258, v196, v197);
      (*(void (**)(char *, uint64_t))(v255 + 8))(v195, v199);
      v200 = sub_100007FF0(v189, &qword_100319528);
      v201 = v278;
      static KeyboardShortcut.defaultAction.getter(v200);
      v282 = v188;
      v283 = v199;
      v284 = v196;
      v285 = v197;
      v202 = swift_getOpaqueTypeConformance2(&v282, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
      v203 = v262;
      v204 = v261;
      View.keyboardShortcut(_:)(v201, v261, v202);
      v205 = v201;
      v128 = (uint64_t)v275;
      (*(void (**)(char *, uint64_t))(v279 + 8))(v205, v280);
      v206 = (*(uint64_t (**)(char *, uint64_t))(v259 + 8))(v198, v204);
      LOBYTE(v189) = static Edge.Set.top.getter(v206);
      v207 = v263;
      v208 = (uint64_t)v266;
      v209 = v264;
      (*(void (**)(char *, char *, uint64_t))(v263 + 16))(v266, v203, v264);
      v210 = v208 + *(int *)(v260 + 36);
      *(_BYTE *)v210 = v189;
      *(_OWORD *)(v210 + 8) = 0u;
      *(_OWORD *)(v210 + 24) = 0u;
      *(_BYTE *)(v210 + 40) = 1;
      v211 = (*(uint64_t (**)(char *, uint64_t))(v207 + 8))(v203, v209);
      LOBYTE(v189) = static Edge.Set.bottom.getter(v211);
      v212 = v265;
      sub_10000B234(v208, v265, &qword_100319540);
      v213 = v268;
      v214 = v212 + *(int *)(v268 + 36);
      *(_BYTE *)v214 = v189;
      *(_OWORD *)(v214 + 8) = 0u;
      *(_OWORD *)(v214 + 24) = 0u;
      *(_BYTE *)(v214 + 40) = 1;
      sub_100007FF0(v208, &qword_100319540);
      v215 = v267;
      sub_10000B458(v212, v267, &qword_100319548);
      v216 = v256;
      sub_10000B234(v215, v256, &qword_100319548);
      swift_storeEnumTagMultiPayload(v216, v269, 1);
      v217 = sub_10004A92C();
      v173 = (uint64_t)v274;
      _ConditionalContent<>.init(storage:)(v216, v213, v213, v217, v217);
      swift_release(v175);
      sub_100007FF0(v215, &qword_100319548);
      v218 = sub_100003DB8(&qword_100319560);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v218 - 8) + 56))(v173, 0, 1, v218);
      sub_10000B458(v173, v128, &qword_100319550);
    }
    else
    {
      v219 = sub_100003DB8(&qword_100319560);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v219 - 8) + 56))(v128, 1, 1, v219);
      v173 = (uint64_t)v274;
    }
  }
  v220 = v281;
  v221 = v273;
  sub_10000B234(v281, v273, &qword_100319558);
  sub_10000B234(v128, v173, &qword_100319550);
  v222 = v272;
  sub_10000B234(v221, v272, &qword_100319558);
  v223 = sub_100003DB8(&qword_100319568);
  sub_10000B234(v173, v222 + *(int *)(v223 + 48), &qword_100319550);
  sub_100007FF0(v128, &qword_100319550);
  sub_100007FF0(v220, &qword_100319558);
  sub_100007FF0(v173, &qword_100319550);
  return sub_100007FF0(v221, &qword_100319558);
}

void sub_100049574()
{
  uint64_t v1;
  uint64_t v2;

  v1 = type metadata accessor for Logger(0);
  __chkstk_darwin(v1, v2);
  __asm { BR              X10 }
}

uint64_t sub_1000495F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  uint64_t v20;
  uint64_t result;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v6 = *(_QWORD *)(v2 + 32);
  if (v6)
  {
    swift_retain(*(_QWORD *)(v2 + 32));
    v22 = sub_1000B07D4(v3);
    v23 = swift_release(v6);
    if ((v22 & 1) != 0)
      return (*(uint64_t (**)(uint64_t))(v2 + 56))(v23);
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v7 = sub_10000D744(v0, (uint64_t)qword_10033FEC8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v7, v0);
    sub_10004A7A0((uint64_t *)v2);
    sub_10004A7A0((uint64_t *)v2);
    sub_10004A7A0((uint64_t *)v2);
    v8 = sub_10004A7A0((uint64_t *)v2);
    v9 = Logger.logObject.getter(v8);
    v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v10))
    {
      sub_10004AB54((uint64_t *)v2);
      sub_10004AB54((uint64_t *)v2);
      sub_10004AB54((uint64_t *)v2);
      sub_10004AB54((uint64_t *)v2);

      return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v1, v0);
    }
    *(_QWORD *)(v5 - 112) = v9;
    *(_QWORD *)(v5 - 104) = v4;
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    *(_QWORD *)(v5 - 120) = v12;
    *(_QWORD *)(v5 - 88) = v12;
    *(_DWORD *)v11 = 136446467;
    v13 = *(_QWORD *)(v2 + 32);
    if (v13)
    {
      swift_retain(*(_QWORD *)(v2 + 32));
      v14 = sub_1000AD18C();
      v16 = v15;
      swift_release(v13);
      *(_QWORD *)(v5 - 96) = sub_100172BEC(v14, v16, (uint64_t *)(v5 - 88));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 96, v5 - 88, v11 + 4, v11 + 12);
      swift_bridgeObjectRelease(v16);
      sub_10004AB54((uint64_t *)v2);
      sub_10004AB54((uint64_t *)v2);
      *(_WORD *)(v11 + 12) = 2081;
      v18 = *(_QWORD *)(v3 + 16);
      v17 = *(_QWORD *)(v3 + 24);
      swift_bridgeObjectRetain(v17);
      *(_QWORD *)(v5 - 96) = sub_100172BEC(v18, v17, (uint64_t *)(v5 - 88));
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v5 - 96, v5 - 88, v11 + 14, v11 + 22);
      swift_bridgeObjectRelease(v17);
      sub_10004AB54((uint64_t *)v2);
      sub_10004AB54((uint64_t *)v2);
      v19 = *(NSObject **)(v5 - 112);
      _os_log_impl((void *)&_mh_execute_header, v19, v10, "[%{public}s] QuestionnaireBodyView: failed to record answer for %{private}s", (uint8_t *)v11, 0x16u);
      v20 = *(_QWORD *)(v5 - 120);
      swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1, -1);
      swift_slowDealloc(v11, -1, -1);

      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 104) + 8))(v1, v0);
    }
    v24 = *(_QWORD *)(v2 + 40);
    sub_10004AB54((uint64_t *)v2);
    sub_10004AB54((uint64_t *)v2);
  }
  else
  {
    v24 = *(_QWORD *)(v2 + 40);
  }
  v25 = type metadata accessor for QuestionnaireState();
  v26 = sub_1000052EC(&qword_100316A18, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v24, v25, v26);
  __break(1u);
  return result;
}

__n128 sub_100049904@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __n128 result;
  _OWORD v16[9];

  v2 = LocalizedStringKey.init(stringLiteral:)(0x65756E69746E6F43, 0xE800000000000000);
  v3 = Text.init(_:tableName:bundle:comment:)(v2);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v10 = static Alignment.center.getter(v3);
  sub_1001315E8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v16, 0.0, 1, 0.0, 1, v10, v11, v3, v5, v9, v7);
  sub_10002B438(v3, v5, v9);
  swift_bridgeObjectRelease(v7);
  v12 = v16[7];
  *(_OWORD *)(a1 + 96) = v16[6];
  *(_OWORD *)(a1 + 112) = v12;
  *(_OWORD *)(a1 + 128) = v16[8];
  v13 = v16[3];
  *(_OWORD *)(a1 + 32) = v16[2];
  *(_OWORD *)(a1 + 48) = v13;
  v14 = v16[5];
  *(_OWORD *)(a1 + 64) = v16[4];
  *(_OWORD *)(a1 + 80) = v14;
  result = (__n128)v16[1];
  *(_OWORD *)a1 = v16[0];
  *(__n128 *)(a1 + 16) = result;
  return result;
}

void sub_100049A1C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  _QWORD *v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *oslog;
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  v2 = v0[4];
  if (v2)
  {
    v3 = (_QWORD *)v0[6];
    swift_retain(v0[4]);
    v4 = sub_1000AE9AC(v3, 0, 3);
    v5 = swift_release(v2);
    if ((v4 & 1) != 0)
    {
      ((void (*)(uint64_t))v1[7])(v5);
    }
    else
    {
      if (qword_1003158B0 != -1)
        swift_once(&qword_1003158B0, sub_1000D9854);
      v6 = type metadata accessor for Logger(0);
      sub_10000D744(v6, (uint64_t)qword_10033FEC8);
      sub_10004A7A0(v1);
      sub_10004A7A0(v1);
      sub_10004A7A0(v1);
      v7 = sub_10004A7A0(v1);
      oslog = Logger.logObject.getter(v7);
      v8 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(oslog, v8))
      {
        v9 = swift_slowAlloc(22, -1);
        v10 = swift_slowAlloc(64, -1);
        v21 = v10;
        *(_DWORD *)v9 = 136446467;
        swift_retain(v2);
        v11 = sub_1000AD18C();
        v13 = v12;
        swift_release(v2);
        v20 = sub_100172BEC(v11, v13, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v9 + 4, v9 + 12);
        swift_bridgeObjectRelease(v13);
        sub_10004AB54(v1);
        sub_10004AB54(v1);
        *(_WORD *)(v9 + 12) = 2081;
        v15 = v3[2];
        v14 = v3[3];
        swift_bridgeObjectRetain(v14);
        v20 = sub_100172BEC(v15, v14, &v21);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v9 + 14, v9 + 22);
        swift_bridgeObjectRelease(v14);
        sub_10004AB54(v1);
        sub_10004AB54(v1);
        _os_log_impl((void *)&_mh_execute_header, oslog, v8, "[%{public}s] QuestionnaireBodyView: failed to record skip for %{private}s", (uint8_t *)v9, 0x16u);
        swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v10, -1, -1);
        swift_slowDealloc(v9, -1, -1);

      }
      else
      {
        sub_10004AB54(v1);
        sub_10004AB54(v1);
        sub_10004AB54(v1);
        sub_10004AB54(v1);

      }
    }
  }
  else
  {
    v16 = v0[5];
    v17 = type metadata accessor for QuestionnaireState();
    v18 = sub_1000052EC(&qword_100316A18, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, v16, v17, v18);
    __break(1u);
  }
}

__n128 sub_100049D04@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t KeyPath;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __n128 result;
  _OWORD v19[9];

  v2 = LocalizedStringKey.init(stringLiteral:)(1885956947, 0xE400000000000000);
  v3 = Text.init(_:tableName:bundle:comment:)(v2);
  v5 = v4;
  v7 = v6;
  v9 = v8 & 1;
  v10 = static Alignment.center.getter(v3);
  sub_1001315E8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v19, 0.0, 1, 0.0, 1, v10, v11, v3, v5, v9, v7);
  sub_10002B438(v3, v5, v9);
  v12 = swift_bridgeObjectRelease(v7);
  v13 = static Color.green.getter(v12);
  KeyPath = swift_getKeyPath(&unk_10024F680);
  v15 = v19[7];
  *(_OWORD *)(a1 + 96) = v19[6];
  *(_OWORD *)(a1 + 112) = v15;
  *(_OWORD *)(a1 + 128) = v19[8];
  v16 = v19[3];
  *(_OWORD *)(a1 + 32) = v19[2];
  *(_OWORD *)(a1 + 48) = v16;
  v17 = v19[5];
  *(_OWORD *)(a1 + 64) = v19[4];
  *(_OWORD *)(a1 + 80) = v17;
  result = (__n128)v19[1];
  *(_OWORD *)a1 = v19[0];
  *(__n128 *)(a1 + 16) = result;
  *(_QWORD *)(a1 + 144) = KeyPath;
  *(_QWORD *)(a1 + 152) = v13;
  return result;
}

uint64_t sub_100049E2C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v3 = v1[4];
  if (v3)
  {
    v5 = (_QWORD *)v1[6];
    swift_retain(v1[4]);
    v6 = sub_1000AE9AC(v5, a1, 0);
    v7 = swift_release(v3);
    if ((v6 & 1) == 0)
    {
      if (qword_1003158B0 != -1)
        swift_once(&qword_1003158B0, sub_1000D9854);
      v8 = type metadata accessor for Logger(0);
      sub_10000D744(v8, (uint64_t)qword_10033FEC8);
      sub_10004A7A0(v2);
      sub_10004A7A0(v2);
      sub_10004A7A0(v2);
      swift_retain(a1);
      sub_10004A7A0(v2);
      swift_retain(a1);
      v10 = Logger.logObject.getter(v9);
      v11 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v10, v11))
      {
        v12 = swift_slowAlloc(32, -1);
        v24 = swift_slowAlloc(96, -1);
        v26 = v24;
        *(_DWORD *)v12 = 136446723;
        swift_retain(v3);
        v13 = sub_1000AD18C();
        v15 = v14;
        swift_release(v3);
        v25 = sub_100172BEC(v13, v15, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v12 + 4, v12 + 12);
        swift_bridgeObjectRelease(v15);
        sub_10004AB54(v2);
        sub_10004AB54(v2);
        *(_WORD *)(v12 + 12) = 2081;
        v16 = *(_QWORD *)(a1 + 16);
        v17 = *(_QWORD *)(a1 + 24);
        swift_bridgeObjectRetain(v17);
        v25 = sub_100172BEC(v16, v17, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v12 + 14, v12 + 22);
        swift_release_n(a1);
        swift_bridgeObjectRelease(v17);
        *(_WORD *)(v12 + 22) = 2081;
        v19 = v5[2];
        v18 = v5[3];
        swift_bridgeObjectRetain(v18);
        v25 = sub_100172BEC(v19, v18, &v26);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v12 + 24, v12 + 32);
        swift_bridgeObjectRelease(v18);
        sub_10004AB54(v2);
        sub_10004AB54(v2);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "[%{public}s] QuestionnaireBodyView: failed to record %{private}s answer for %{private}s", (uint8_t *)v12, 0x20u);
        swift_arrayDestroy(v24, 3, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v12, -1, -1);
      }
      else
      {
        sub_10004AB54(v2);
        sub_10004AB54(v2);
        swift_release_n(a1);
        sub_10004AB54(v2);
        sub_10004AB54(v2);
      }

    }
    return ((uint64_t (*)(uint64_t))v2[7])(v7);
  }
  else
  {
    v21 = v1[5];
    v22 = type metadata accessor for QuestionnaireState();
    v23 = sub_1000052EC(&qword_100316A18, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v21, v22, v23);
    __break(1u);
  }
  return result;
}

__n128 sub_10004A164@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t KeyPath;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __n128 result;
  __int128 v22;
  __n128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __n128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)&v31 = *(_QWORD *)(v3 + 16);
  *((_QWORD *)&v31 + 1) = v4;
  v5 = sub_10002B3F4();
  v6 = swift_bridgeObjectRetain(v4);
  v7 = Text.init<A>(_:)(&v31, &type metadata for String, v5, v6);
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  v14 = static Alignment.center.getter(v7);
  sub_1001315E8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v22, 0.0, 1, 0.0, 1, v14, v15, v7, v9, v13, v11);
  sub_10002B438(v7, v9, v13);
  swift_bridgeObjectRelease(v11);
  v37 = v28;
  v38 = v29;
  v39 = v30;
  v33 = v24;
  v34 = v25;
  v35 = v26;
  v36 = v27;
  v31 = v22;
  v32 = v23;
  v16 = static Color.green.getter(v23);
  KeyPath = swift_getKeyPath(&unk_10024F680);
  v18 = v38;
  *(_OWORD *)(a2 + 96) = v37;
  *(_OWORD *)(a2 + 112) = v18;
  *(_OWORD *)(a2 + 128) = v39;
  v19 = v34;
  *(_OWORD *)(a2 + 32) = v33;
  *(_OWORD *)(a2 + 48) = v19;
  v20 = v36;
  *(_OWORD *)(a2 + 64) = v35;
  *(_OWORD *)(a2 + 80) = v20;
  result = v32;
  *(_OWORD *)a2 = v31;
  *(__n128 *)(a2 + 16) = result;
  *(_QWORD *)(a2 + 144) = KeyPath;
  *(_QWORD *)(a2 + 152) = v16;
  return result;
}

uint64_t sub_10004A2B4(__n128 a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[24];

  v2 = *(_QWORD *)(v1 + 48);
  if (*(_BYTE *)(v2 + 32) != 2)
  {
    v5 = 0;
    return v5 & 1;
  }
  if (*(_QWORD *)(*(_QWORD *)(v2 + 56) + 16))
  {
    v3 = *(_QWORD *)(v1 + 32);
    if (v3)
    {
LABEL_4:
      swift_retain(v3);
      v4 = sub_1000B03D8(v2);
LABEL_49:
      v5 = v4;
      swift_release(v3);
      return v5 & 1;
    }
    goto LABEL_53;
  }
  v6 = *(_QWORD *)(v2 + 144);
  if ((unint64_t)v6 >> 62)
    goto LABEL_43;
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  a1 = swift_bridgeObjectRetain(*(_QWORD *)(v2 + 144));
  if (v7)
  {
    while (1)
    {
      v3 = *(_QWORD *)(v1 + 32);
      v37 = *(_QWORD *)(v1 + 40);
      if ((v6 & 0xC000000000000001) == 0)
        break;
      v8 = 0;
      while (1)
      {
        v9 = specialized _ArrayBuffer._getElementSlowPath(_:)(v8, v6);
        v10 = v8 + 1;
        if (__OFADD__(v8, 1))
          break;
        if (!v3)
          goto LABEL_52;
        v11 = v9;
        if ((*(_BYTE *)(v9 + 40) & 1) != 0
          && (swift_beginAccess(v3 + 48, v38, 0, 0), v12 = *(_QWORD *)(v3 + 72), *(_QWORD *)(v12 + 16)))
        {
          swift_retain(v3);
          v13 = swift_unknownObjectRetain(v11);
          v14 = sub_10017D414(v13);
          if ((v15 & 1) != 0)
          {
            v16 = (uint64_t *)(*(_QWORD *)(v12 + 56) + 16 * v14);
            v17 = *v16;
            v1 = v16[1];
            swift_bridgeObjectRetain(v1);
          }
          else
          {
            v17 = 0;
            v1 = 0xE000000000000000;
          }
          swift_release(v3);
          swift_unknownObjectRelease(v11);
        }
        else
        {
          v17 = 0;
          v1 = 0xE000000000000000;
        }
        swift_unknownObjectRelease(v11);
        swift_bridgeObjectRelease(v1);
        v18 = HIBYTE(v1) & 0xF;
        if ((v1 & 0x2000000000000000) == 0)
          v18 = v17 & 0xFFFFFFFFFFFFLL;
        if (v18)
          goto LABEL_40;
        ++v8;
        if (v10 == v7)
          goto LABEL_39;
      }
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      if (v6 < 0)
        v30 = v6;
      else
        v30 = v6 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n(v6, 2, a1);
      v7 = _CocoaArrayWrapper.endIndex.getter(v30);
      a1 = swift_bridgeObjectRelease(v6);
      if (!v7)
        goto LABEL_47;
    }
    v19 = 0;
    while (1)
    {
      v20 = v19 + 1;
      if (__OFADD__(v19, 1))
        goto LABEL_42;
      v21 = v6 + 8 * v19;
      v22 = *(_QWORD *)(v21 + 32);
      if (!v3)
      {
        swift_retain(*(_QWORD *)(v21 + 32));
LABEL_52:
        v32 = type metadata accessor for QuestionnaireState();
        v33 = sub_1000052EC(&qword_100316A18, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState, (uint64_t)&unk_10024D2FC);
        EnvironmentObject.error()(v3, v37, v32, v33);
        __break(1u);
        goto LABEL_53;
      }
      if ((*(_BYTE *)(v22 + 40) & 1) == 0)
        break;
      swift_beginAccess(v3 + 48, v38, 0, 0);
      v23 = *(_QWORD *)(v3 + 72);
      v24 = *(_QWORD *)(v23 + 16);
      swift_retain(v22);
      if (v24)
      {
        swift_retain(v3);
        swift_retain(v22);
        v26 = sub_10017D414(v25);
        if ((v27 & 1) != 0)
        {
          v28 = (uint64_t *)(*(_QWORD *)(v23 + 56) + 16 * v26);
          v24 = *v28;
          v1 = v28[1];
          swift_bridgeObjectRetain(v1);
          swift_release(v3);
          swift_release(v22);
          goto LABEL_35;
        }
        swift_release(v3);
        swift_release(v22);
        goto LABEL_33;
      }
LABEL_34:
      v1 = 0xE000000000000000;
LABEL_35:
      swift_release(v22);
      a1 = swift_bridgeObjectRelease(v1);
      v29 = HIBYTE(v1) & 0xF;
      if ((v1 & 0x2000000000000000) == 0)
        v29 = v24 & 0xFFFFFFFFFFFFLL;
      if (v29)
      {
LABEL_40:
        swift_bridgeObjectRelease(v6);
        goto LABEL_4;
      }
      ++v19;
      if (v20 == v7)
      {
LABEL_39:
        swift_bridgeObjectRelease(v6);
        goto LABEL_48;
      }
    }
    swift_retain(v22);
LABEL_33:
    v24 = 0;
    goto LABEL_34;
  }
LABEL_47:
  swift_bridgeObjectRelease(v6);
  v3 = *(_QWORD *)(v1 + 32);
  if (v3)
  {
LABEL_48:
    swift_retain(v3);
    v4 = sub_1000AE9AC((_QWORD *)v2, 0, 3);
    goto LABEL_49;
  }
LABEL_53:
  v34 = *(_QWORD *)(v1 + 40);
  v35 = type metadata accessor for QuestionnaireState();
  v36 = sub_1000052EC(&qword_100316A18, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.error()(0, v34, v35, v36);
  __break(1u);
  return result;
}

uint64_t sub_10004A634@<X0>(uint64_t a1@<X8>)
{
  __int128 *v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[5];
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v3 = v1[3];
  v15 = v1[2];
  v16 = v3;
  v17 = *((_QWORD *)v1 + 8);
  v4 = v1[1];
  v13 = *v1;
  v14 = v4;
  if ((_QWORD)v4)
  {
    v5 = *(_QWORD *)(v4 + 72);
    v6 = *(_QWORD *)(v4 + 80);
    sub_100007BBC((_QWORD *)(v4 + 48), v5);
    v7 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 24))(v12, v5, v6);
    *(_QWORD *)a1 = static HorizontalAlignment.center.getter(v7);
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
    v8 = sub_100003DB8(&qword_100319510);
    sub_100048174((uint64_t)&v13, v12, a1 + *(int *)(v8 + 44));
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v12);
  }
  else
  {
    v10 = type metadata accessor for UIMetrics();
    v11 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, *((_QWORD *)&v14 + 1), v10, v11);
    __break(1u);
  }
  return result;
}

uint64_t sub_10004A724()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10004A770()
{
  uint64_t v0;

  return sub_100049E2C(*(_QWORD *)(v0 + 88));
}

double sub_10004A798@<D0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  double result;

  *(_QWORD *)&result = sub_10004A164(v1, a1).n128_u64[0];
  return result;
}

uint64_t *sub_10004A7A0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[6];
  v5 = a1[8];
  swift_retain(a1[4]);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v2);
  swift_retain(v3);
  return a1;
}

unint64_t sub_10004A808()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319578;
  if (!qword_100319578)
  {
    v1 = sub_100007FAC(&qword_100319570);
    sub_100038540();
    sub_1000084FC(&qword_100316C00, &qword_100316C08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319578);
  }
  return result;
}

uint64_t sub_10004A894(unint64_t *a1, uint64_t *a2, unint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v8 = sub_100007FAC(a2);
    sub_1000084FC(a3, a4, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_1000084FC(&qword_100316C30, &qword_100316C38, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v8);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_10004A92C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319598;
  if (!qword_100319598)
  {
    v1 = sub_100007FAC(&qword_100319548);
    sub_10004A998();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319598);
  }
  return result;
}

unint64_t sub_10004A998()
{
  unint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t OpaqueTypeConformance2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  result = qword_1003195A0;
  if (!qword_1003195A0)
  {
    v1 = sub_100007FAC(&qword_100319540);
    v2 = sub_100007FAC(&qword_100319530);
    v4 = sub_100007FAC(&qword_100319528);
    v5 = type metadata accessor for BorderlessButtonStyle(255);
    v6 = sub_10004A894((unint64_t *)&qword_100319580, &qword_100319528, &qword_100319588, &qword_100319520);
    v7 = sub_1000052EC(&qword_100319590, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    v4 = v2;
    v5 = OpaqueTypeConformance2;
    swift_getOpaqueTypeConformance2(&v4, &opaque type descriptor for <<opaque return type of View.keyboardShortcut(_:)>>, 1);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003195A0);
  }
  return result;
}

void sub_10004AABC()
{
  sub_100049A1C();
}

uint64_t sub_10004AAE0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[8]);
  swift_release(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

void sub_10004AB24()
{
  sub_100049574();
}

uint64_t *sub_10004AB54(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[6];
  swift_release(a1[8]);
  swift_release(v5);
  swift_release(v2);
  swift_release(v3);
  swift_release(v4);
  return a1;
}

uint64_t sub_10004ABC4()
{
  return sub_1000084FC(&qword_1003195A8, &qword_1003195B0, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t destroy for BuiltInRoadsideForkContentView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[4]);
  swift_release(a1[5]);
  swift_release(a1[7]);
  return swift_release(a1[9]);
}

uint64_t initializeWithCopy for BuiltInRoadsideForkContentView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v11;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v6 = a2[2];
  v5 = a2[3];
  *(_QWORD *)(a1 + 16) = v6;
  *(_QWORD *)(a1 + 24) = v5;
  v7 = a2[4];
  *(_QWORD *)(a1 + 32) = v7;
  v8 = a2[7];
  v11 = *(_OWORD *)(a2 + 5);
  *(_OWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 56) = v8;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a2 + 64);
  v9 = a2[9];
  *(_QWORD *)(a1 + 72) = v9;
  swift_retain(v3);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v11);
  swift_retain(v8);
  swift_retain(v9);
  return a1;
}

uint64_t *assignWithCopy for BuiltInRoadsideForkContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_retain(v10);
  swift_release(v11);
  v12 = a2[7];
  v13 = a1[7];
  a1[6] = a2[6];
  a1[7] = v12;
  swift_retain(v12);
  swift_release(v13);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  v14 = a1[9];
  v15 = a2[9];
  a1[9] = v15;
  swift_retain(v15);
  swift_release(v14);
  return a1;
}

__n128 initializeWithTake for BuiltInRoadsideForkContentView(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t *assignWithTake for BuiltInRoadsideForkContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  a1[3] = a2[3];
  swift_release(a1[4]);
  v7 = a1[5];
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  swift_release(v7);
  v8 = a1[7];
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  swift_release(v8);
  *((_BYTE *)a1 + 64) = *((_BYTE *)a2 + 64);
  v9 = a1[9];
  a1[9] = a2[9];
  swift_release(v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for BuiltInRoadsideForkContentView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 80))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for BuiltInRoadsideForkContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 80) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 32) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 80) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BuiltInRoadsideForkContentView()
{
  return &type metadata for BuiltInRoadsideForkContentView;
}

uint64_t sub_10004AF04(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002960B4, 1);
}

uint64_t sub_10004AF14@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD v21[8];
  _BYTE v22[135];
  char v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;

  v2 = v1;
  v4 = *(_QWORD **)(v1 + 16);
  if (v4)
  {
    v5 = v4[9];
    v6 = v4[10];
    sub_100007BBC(v4 + 6, v5);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 24))(v24, v5, v6);
    v7 = v25;
    v8 = v26;
    sub_100007BBC(v24, v25);
    v9 = (*(uint64_t (**)(uint64_t, uint64_t))(v8 + 232))(v7, v8);
    v11 = v10;
    v12 = static HorizontalAlignment.center.getter(v9);
    sub_10004B0B0(v2, (uint64_t)v21);
    *(_OWORD *)&v22[71] = v21[4];
    *(_OWORD *)&v22[87] = v21[5];
    *(_OWORD *)&v22[103] = v21[6];
    *(_OWORD *)&v22[119] = v21[7];
    *(_OWORD *)&v22[7] = v21[0];
    *(_OWORD *)&v22[23] = v21[1];
    *(_OWORD *)&v22[39] = v21[2];
    *(_OWORD *)&v22[55] = v21[3];
    *(_QWORD *)(a1 + 8) = v11;
    v13 = *(_OWORD *)&v22[64];
    *(_OWORD *)(a1 + 97) = *(_OWORD *)&v22[80];
    v14 = *(_OWORD *)&v22[112];
    *(_OWORD *)(a1 + 113) = *(_OWORD *)&v22[96];
    *(_OWORD *)(a1 + 129) = v14;
    v15 = *(_OWORD *)v22;
    *(_OWORD *)(a1 + 33) = *(_OWORD *)&v22[16];
    v16 = *(_OWORD *)&v22[48];
    *(_OWORD *)(a1 + 49) = *(_OWORD *)&v22[32];
    *(_OWORD *)(a1 + 65) = v16;
    v23 = 0;
    *(_QWORD *)a1 = v12;
    *(_BYTE *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 144) = *(_QWORD *)&v22[127];
    *(_OWORD *)(a1 + 81) = v13;
    *(_OWORD *)(a1 + 17) = v15;
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v24);
  }
  else
  {
    v18 = *(_QWORD *)(v1 + 24);
    v19 = type metadata accessor for UIMetrics();
    v20 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v18, v19, v20);
    __break(1u);
  }
  return result;
}

uint64_t sub_10004B0B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  id v5;
  Swift::String v6;
  Swift::String_optional v7;
  Swift::String v8;
  Swift::String v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  Swift::String v19;
  Swift::String_optional v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v23;
  Swift::String *v24;
  __n128 v25;
  _OWORD *v26;
  __int128 v27;
  __int128 v28;
  uint64_t result;
  uint64_t v30;
  Swift::String v31;
  Swift::String v32;

  v4 = (void *)objc_opt_self(NSBundle);
  v5 = objc_msgSend(v4, "mainBundle");
  v6._countAndFlagsBits = 0xD000000000000013;
  v31._countAndFlagsBits = 0xD00000000000004ALL;
  v31._object = (void *)0x80000001002640F0;
  v6._object = (void *)0x8000000100262940;
  v7.value._countAndFlagsBits = 0xD000000000000012;
  v7.value._object = (void *)0x80000001002621B0;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, v7, (NSBundle)v5, v8, v31);

  v10 = (_OWORD *)swift_allocObject(&unk_1002E7538, 96, 7);
  v11 = *(_OWORD *)(a1 + 48);
  v10[3] = *(_OWORD *)(a1 + 32);
  v10[4] = v11;
  v10[5] = *(_OWORD *)(a1 + 64);
  v12 = *(_OWORD *)(a1 + 16);
  v10[1] = *(_OWORD *)a1;
  v10[2] = v12;
  sub_10004B5FC((uint64_t *)a1);
  v13 = type metadata accessor for UIMetrics();
  v14 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v15 = EnvironmentObject.init()(v13, v14);
  v17 = v16;
  v18 = objc_msgSend(v4, "mainBundle");
  v32._countAndFlagsBits = 0xD000000000000044;
  v32._object = (void *)0x8000000100264140;
  v19._countAndFlagsBits = 0x636E656772656D45;
  v19._object = (void *)0xE900000000000079;
  v20.value._countAndFlagsBits = 0xD000000000000012;
  v20.value._object = (void *)0x80000001002621B0;
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  v22 = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, v20, (NSBundle)v18, v21, v32);

  v23 = type metadata accessor for OptionPresentation();
  v24 = (Swift::String *)swift_allocObject(v23, 72, 7);
  v24[1] = v22;
  v24[3]._countAndFlagsBits = 0;
  v24[3]._object = 0;
  v24[4]._countAndFlagsBits = static Color.clear.getter(v25);
  v24[2]._countAndFlagsBits = 0;
  v24[2]._object = 0;
  v26 = (_OWORD *)swift_allocObject(&unk_1002E7560, 96, 7);
  v27 = *(_OWORD *)(a1 + 48);
  v26[3] = *(_OWORD *)(a1 + 32);
  v26[4] = v27;
  v26[5] = *(_OWORD *)(a1 + 64);
  v28 = *(_OWORD *)(a1 + 16);
  v26[1] = *(_OWORD *)a1;
  v26[2] = v28;
  sub_10004B5FC((uint64_t *)a1);
  result = EnvironmentObject.init()(v13, v14);
  *(_QWORD *)a2 = v15;
  *(_QWORD *)(a2 + 8) = v17;
  *(Swift::String *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0xE000000000000000;
  *(_BYTE *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = sub_10004B5DC;
  *(_QWORD *)(a2 + 64) = v10;
  *(_QWORD *)(a2 + 72) = result;
  *(_QWORD *)(a2 + 80) = v30;
  *(_QWORD *)(a2 + 88) = v24;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = sub_10004B670;
  *(_QWORD *)(a2 + 120) = v26;
  return result;
}

_QWORD *sub_10004B324()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  _OWORD *v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  char v15;
  __int128 v16;

  v1 = v0;
  v2 = *v0;
  if (*v0)
  {
    v3 = *(_QWORD *)(v2 + 104);
    *(_QWORD *)&v16 = v1[4];
    v4 = v16;
    swift_retain(v3);
    swift_retain(v16);
    PassthroughSubject.send(_:)(&v16);
    swift_release(v4);
    swift_release(v3);
    v16 = *((_OWORD *)v1 + 4);
    v14 = *((_OWORD *)v1 + 4);
    v5 = sub_100003DB8(&qword_100316780);
    result = State.wrappedValue.getter(&v15, v5);
    if ((v15 & 1) == 0)
    {
      v14 = v16;
      v15 = 1;
      State.wrappedValue.setter(&v15, v5);
      v7 = *(_QWORD *)(v2 + 112);
      v8 = (_OWORD *)swift_allocObject(&unk_1002E7588, 96, 7);
      v9 = *((_OWORD *)v1 + 3);
      v8[3] = *((_OWORD *)v1 + 2);
      v8[4] = v9;
      v8[5] = *((_OWORD *)v1 + 4);
      v10 = *((_OWORD *)v1 + 1);
      v8[1] = *(_OWORD *)v1;
      v8[2] = v10;
      *(_QWORD *)&v14 = sub_10004B708;
      *((_QWORD *)&v14 + 1) = v8;
      swift_retain(v7);
      sub_10004B5FC(v1);
      PassthroughSubject.send(_:)(&v14);
      swift_release(v8);
      return (_QWORD *)swift_release(v7);
    }
  }
  else
  {
    v11 = v0[1];
    v12 = type metadata accessor for AppEvents();
    v13 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    result = (_QWORD *)EnvironmentObject.error()(0, v11, v12, v13);
    __break(1u);
  }
  return result;
}

_QWORD *sub_10004B48C(uint64_t a1)
{
  uint64_t v2;
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  ValueMetadata *v7;
  uint64_t v8;

  v6 = *(_OWORD *)(a1 + 64);
  v2 = sub_100003DB8(&qword_100316780);
  result = State.wrappedValue.getter(&v8, v2);
  if ((v8 & 1) == 0)
  {
    v4 = *(_QWORD *)(a1 + 40);
    v7 = &type metadata for RecordedForkAnswer;
    LOWORD(v6) = 0;
    sub_1000B35F8(v4, (uint64_t)&v6);
    v5 = sub_10004B678((uint64_t)&v6);
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(a1 + 48))(v5);
  }
  return result;
}

uint64_t sub_10004B504(unsigned __int8 *a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  ValueMetadata *v8;
  char v9;

  v3 = *a1;
  v7 = *(_OWORD *)(a2 + 64);
  v9 = 0;
  v4 = sub_100003DB8(&qword_100316780);
  State.wrappedValue.setter(&v9, v4);
  v5 = *(_QWORD *)(a2 + 40);
  v8 = &type metadata for RecordedForkAnswer;
  LOBYTE(v7) = 1;
  BYTE1(v7) = v3;
  sub_1000B35F8(v5, (uint64_t)&v7);
  result = sub_10004B678((uint64_t)&v7);
  if (v3 == 1)
    return (*(uint64_t (**)(uint64_t))(a2 + 48))(result);
  return result;
}

uint64_t sub_10004B598@<X0>(uint64_t a1@<X8>)
{
  return sub_10004AF14(a1);
}

_QWORD *sub_10004B5DC()
{
  return sub_10004B324();
}

uint64_t *sub_10004B5FC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[7];
  swift_retain(a1[9]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

_QWORD *sub_10004B670()
{
  uint64_t v0;

  return sub_10004B48C(v0 + 16);
}

uint64_t sub_10004B678(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003DB8(&qword_100324AC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10004B6BC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  swift_release(v0[7]);
  swift_release(v0[9]);
  swift_release(v0[11]);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10004B708(unsigned __int8 *a1)
{
  uint64_t v1;

  return sub_10004B504(a1, v1 + 16);
}

unint64_t sub_10004B714()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003195B8;
  if (!qword_1003195B8)
  {
    v1 = sub_100007FAC(&qword_1003195C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for VStack<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1003195B8);
  }
  return result;
}

uint64_t *initializeWithCopy for FullScreenGuidanceActionTextView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v6 = a2[2];
  v5 = a2[3];
  a1[2] = v6;
  a1[3] = v5;
  swift_retain(v3);
  swift_retain(v6);
  return a1;
}

uint64_t *assignWithCopy for FullScreenGuidanceActionTextView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  a1[3] = a2[3];
  return a1;
}

uint64_t *assignWithTake for FullScreenGuidanceActionTextView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a1[2];
  v6 = a2[2];
  a1[1] = a2[1];
  a1[2] = v6;
  swift_release(v5);
  a1[3] = a2[3];
  return a1;
}

uint64_t getEnumTagSinglePayload for FullScreenGuidanceActionTextView(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FullScreenGuidanceActionTextView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for FullScreenGuidanceActionTextView()
{
  return &type metadata for FullScreenGuidanceActionTextView;
}

uint64_t sub_10004B914(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002960F8, 1);
}

uint64_t sub_10004B924@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  id v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  unint64_t v45;
  __n128 v46;
  uint64_t v47;
  unint64_t v48;
  int v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  double v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  id v59;
  char v60;
  id v61;
  char v62;
  uint64_t v63;
  id v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  id v75;
  char v76;
  double v77;
  uint64_t v78;
  char *v79;
  __n128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t OpaqueTypeConformance2;
  Swift::String v90;
  void *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD *v97;
  __n128 v98;
  __n128 v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  void *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  uint64_t result;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t KeyPath;
  __int128 v118;
  __int128 v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  int v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  void *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  void *v143;
  char *v144;
  uint64_t v145;
  uint64_t v146;
  _BYTE v147[264];
  _BYTE v148[264];
  _QWORD v149[46];
  _QWORD v150[40];
  __int128 v151;
  __int128 v152;
  uint64_t (*v153)();
  _QWORD *v154;
  char v155;
  char v156;
  char v157;
  __n128 v158;
  __int128 v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  BOOL v167;
  _QWORD v168[5];
  __n128 v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  BOOL v178;
  Swift::String v179;

  v140 = a2;
  v141 = a4;
  v143 = a5;
  v7 = sub_100003DB8(&qword_1003195C8);
  v9 = __chkstk_darwin(v7, v8);
  v11 = (char *)&v116 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v142 = (uint64_t *)((char *)&v116 - v13);
  v145 = type metadata accessor for OpacityTransition(0);
  v134 = *(_QWORD *)(v145 - 8);
  __chkstk_darwin(v145, v14);
  v133 = (char *)&v116 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003DB8(&qword_1003195D0);
  v137 = *(_QWORD *)(v16 - 8);
  v138 = v16;
  v18 = __chkstk_darwin(v16, v17);
  v135 = (char *)&v116 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  v136 = (char *)&v116 - v21;
  v22 = type metadata accessor for Font.Leading(0);
  v23 = *(_QWORD *)(v22 - 8);
  __chkstk_darwin(v22, v24);
  v26 = (char *)&v116 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a3)
  {
    v113 = type metadata accessor for UIMetrics();
    v114 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v115 = v141;
LABEL_25:
    result = EnvironmentObject.error()(0, v115, v113, v114);
    __break(1u);
    return result;
  }
  v27 = *(_QWORD *)(a3 + 72);
  v28 = *(_QWORD *)(a3 + 80);
  sub_100007BBC((_QWORD *)(a3 + 48), v27);
  (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v28 + 32))(v168, v27, v28);
  if (!a1)
  {
    v113 = type metadata accessor for GuidanceMessagesModel();
    v114 = sub_1000052EC(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel, (uint64_t)&unk_10024D2FC);
    v115 = v140;
    goto LABEL_25;
  }
  v29 = *(unsigned __int8 *)(a1 + 96);
  v144 = v11;
  v139 = a1;
  if (v29 == 1)
  {
    v30 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v179._countAndFlagsBits = 0xD00000000000005CLL;
    v179._object = (void *)0x80000001002641D0;
    v31._object = (void *)0x8000000100264190;
    v132 = (void *)0xE000000000000000;
    v31._countAndFlagsBits = 0xD00000000000003FLL;
    v32._countAndFlagsBits = 0;
    v32._object = (void *)0xE000000000000000;
    v33 = NSLocalizedString(_:tableName:bundle:value:comment:)(v31, (Swift::String_optional)0, (NSBundle)v30, v32, v179);
    countAndFlagsBits = v33._countAndFlagsBits;
    object = v33._object;

    v131 = 0;
    v129 = 4;
  }
  else
  {
    v36 = *(_QWORD *)(a1 + 48);
    if (v36)
    {
      v37 = *(_QWORD *)(v36 + 24);
      v146 = *(_QWORD *)(v36 + 16);
      v38 = v37;
      swift_bridgeObjectRetain(v37);
    }
    else
    {
      v146 = 0;
      v38 = 0xE000000000000000;
    }
    swift_retain(a1);
    sub_1001BF7E0();
    v40 = v39;
    v42 = v41;
    swift_release(a1);
    v43 = (void *)0xE000000000000000;
    v129 = 3;
    if (v42)
      v44 = v40;
    else
      v44 = 0;
    if (v42)
      v43 = v42;
    v131 = v44;
    v132 = v43;
    object = (void *)v38;
    countAndFlagsBits = v146;
  }
  v146 = countAndFlagsBits;
  v150[0] = countAndFlagsBits;
  v150[1] = object;
  v45 = sub_10002B3F4();
  v130 = object;
  v46 = swift_bridgeObjectRetain(object);
  v47 = Text.init<A>(_:)(v150, &type metadata for String, v45, v46);
  v127 = v48;
  v128 = v47;
  v125 = v49;
  v126 = v50;
  v51 = sub_100007BBC(v168, v168[3]);
  v52 = *v51;
  v53 = *(_QWORD *)(*v51 + 184);
  v123 = *(_QWORD *)(*v51 + 192);
  v124 = v53;
  v54 = *(_QWORD *)(v52 + 200);
  v121 = *(_QWORD *)(v52 + 208);
  v122 = v54;
  v120 = static Edge.Set.all.getter(v55);
  v56 = static Font.title.getter();
  static Font.Weight.semibold.getter();
  v57 = Font.weight(_:)(v56);
  swift_release(v56);
  (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v26, enum case for Font.Leading.tight(_:), v22);
  *((_QWORD *)&v119 + 1) = Font.leading(_:)(v26, v57);
  swift_release(v57);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v26, v22);
  *(_QWORD *)&v119 = swift_getKeyPath(&unk_10024F798);
  v58 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  *((_QWORD *)&v118 + 1) = Color.init(uiColor:)(v58);
  *(_QWORD *)&v118 = swift_getKeyPath(&unk_10024F7C8);
  v59 = *(id *)(a3 + 112);
  v60 = static UIContentSizeCategory.>= infix(_:_:)(v59, UIContentSizeCategoryAccessibilityExtraLarge);

  KeyPath = swift_getKeyPath(&unk_10024F7F8);
  v61 = *(id *)(a3 + 112);
  v62 = static UIContentSizeCategory.>= infix(_:_:)(v61, UIContentSizeCategoryAccessibilityExtraLarge);

  v63 = swift_getKeyPath(&unk_10024F828);
  v64 = *(id *)(a3 + 112);
  v65 = static Alignment.center.getter(v64);
  v67 = v66;
  v68 = static UIContentSizeCategory.>= infix(_:_:)(v64, UIContentSizeCategoryAccessibilityExtraLarge);
  if ((v68 & 1) != 0)
  {
    v69 = static Alignment.center.getter(v68);
    v71 = static Alignment.== infix(_:_:)(v65, v67, v69, v70);
    if ((v71 & 1) != 0)
    {
      v65 = static Alignment.leading.getter(v71, v72);
      v67 = v73;
    }
  }

  v157 = v125 & 1;
  v156 = 0;
  v74 = v129;
  if ((v60 & 1) != 0)
    v74 = 0;
  v155 = v60 & 1;
  v158.n128_u64[0] = v128;
  v158.n128_u64[1] = v127;
  LOBYTE(v159) = v125 & 1;
  *((_QWORD *)&v159 + 1) = v126;
  LOBYTE(v160) = v120;
  *((_QWORD *)&v160 + 1) = v124;
  *(_QWORD *)&v161 = v123;
  *((_QWORD *)&v161 + 1) = v122;
  *(_QWORD *)&v162 = v121;
  BYTE8(v162) = 0;
  v163 = v119;
  v164 = v118;
  *(_QWORD *)&v165 = KeyPath;
  *((_QWORD *)&v165 + 1) = v74;
  LOBYTE(v166) = v60 & 1;
  *((_QWORD *)&v166 + 1) = v63;
  v167 = (v62 & 1) == 0;
  v173 = v162;
  v174 = v119;
  v171 = v160;
  v172 = v161;
  v178 = v167;
  v176 = v165;
  v177 = v166;
  v175 = v118;
  v169 = v158;
  v170 = v159;
  sub_10013196C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v147, v158, 0.0, 1, 0.0, 1, v65, v67);
  sub_10004D6C4((uint64_t)&v158);
  v75 = *(id *)(a3 + 112);
  v76 = static UIContentSizeCategory.>= infix(_:_:)(v75, UIContentSizeCategoryAccessibilityExtraLarge);

  if ((v76 & 1) != 0)
    v77 = 1.0;
  else
    v77 = 0.5;
  v78 = swift_getKeyPath(&unk_10024F858);
  v79 = v133;
  v81 = OpacityTransition.init()(v80);
  v82 = static Animation.easeInOut.getter(v81);
  v83 = sub_1000052EC(&qword_100318760, (uint64_t (*)(uint64_t))&type metadata accessor for OpacityTransition, (uint64_t)&protocol conformance descriptor for OpacityTransition);
  v84 = v136;
  v85 = v145;
  Transition.animation(_:)(v82, v145, v83);
  swift_release(v82);
  (*(void (**)(char *, uint64_t))(v134 + 8))(v79, v85);
  v87 = v137;
  v86 = v138;
  v88 = v135;
  (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v135, v84, v138);
  v150[0] = v85;
  v150[1] = v83;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v150, &opaque type descriptor for <<opaque return type of Transition.animation(_:)>>, 1);
  v145 = AnyTransition.init<A>(_:)(v88, v86, OpaqueTypeConformance2);
  memcpy(v148, v147, sizeof(v148));
  (*(void (**)(char *, uint64_t))(v87 + 8))(v84, v86);
  strcpy((char *)v150, "GuidanceText-");
  HIWORD(v150[1]) = -4864;
  v90._countAndFlagsBits = v146;
  v91 = v130;
  v90._object = v130;
  String.append(_:)(v90);
  swift_bridgeObjectRelease(v91);
  v92 = v150[0];
  v146 = v150[1];
  v93 = (_QWORD *)swift_allocObject(&unk_1002E7668, 48, 7);
  v95 = v139;
  v94 = v140;
  v93[2] = v139;
  v93[3] = v94;
  v96 = v141;
  v93[4] = a3;
  v93[5] = v96;
  v97 = (_QWORD *)swift_allocObject(&unk_1002E7690, 48, 7);
  v97[2] = v95;
  v97[3] = v94;
  v97[4] = a3;
  v97[5] = v96;
  swift_retain_n(v95, v98);
  v100 = swift_retain_n(a3, v99);
  v101 = static Alignment.top.getter(v100);
  v102 = (uint64_t)v142;
  *v142 = v101;
  *(_QWORD *)(v102 + 8) = v103;
  v104 = sub_100003DB8(&qword_1003195E0);
  v105 = v96;
  v106 = v132;
  sub_10004C670(v95, v94, a3, v105, v168, v131, v132, v102 + *(int *)(v104 + 44));
  swift_bridgeObjectRelease(v106);
  v107 = (uint64_t)v144;
  sub_10000B234(v102, (uint64_t)v144, &qword_1003195C8);
  memcpy(v149, v148, 0x108uLL);
  v149[33] = v78;
  *(double *)&v149[34] = v77;
  v149[35] = v145;
  v149[36] = v92;
  v108 = v92;
  v109 = v146;
  v149[37] = v146;
  v149[38] = sub_10004D764;
  v149[39] = v93;
  memset(&v149[40], 0, 32);
  v149[44] = sub_10004D79C;
  v149[45] = v97;
  v110 = v143;
  memcpy(v143, v149, 0x170uLL);
  v111 = sub_100003DB8(&qword_1003195E8);
  sub_10000B234(v107, (uint64_t)v110 + *(int *)(v111 + 48), &qword_1003195C8);
  sub_10004D7D0((uint64_t)v149);
  sub_100007FF0(v102, &qword_1003195C8);
  sub_100007FF0(v107, &qword_1003195C8);
  memcpy(v150, v148, 0x108uLL);
  v150[33] = v78;
  *(double *)&v150[34] = v77;
  v150[35] = v145;
  v150[36] = v108;
  v150[37] = v109;
  v150[38] = sub_10004D764;
  v150[39] = v93;
  v151 = 0u;
  v152 = 0u;
  v153 = sub_10004D79C;
  v154 = v97;
  sub_10004D8E8((uint64_t)v150);
  return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v168);
}

uint64_t sub_10004C2B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __n128 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (uint64_t *)((char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!a1)
    goto LABEL_9;
  sub_10000D75C();
  v9 = swift_retain(a1);
  *v8 = static OS_dispatch_queue.main.getter(v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  a2 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((a2 & 1) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  v10 = *(_QWORD *)(a1 + 104);
  v11 = v10 + 1;
  if (v10 == -1)
  {
LABEL_8:
    __break(1u);
LABEL_9:
    v13 = type metadata accessor for GuidanceMessagesModel();
    v14 = sub_1000052EC(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v13, v14);
    __break(1u);
    return result;
  }
  *(_QWORD *)(a1 + 104) = v11;
  if (v11 != v10)
    sub_1001D1814();
  return swift_release(a1);
}

uint64_t sub_10004C3EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  __n128 v20;
  void *v21;
  _QWORD *v22;
  void *v23;
  _QWORD *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD aBlock[5];
  _QWORD *v37;

  v31 = a6;
  v32 = a7;
  v12 = type metadata accessor for DispatchWorkItemFlags(0);
  v35 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v13);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS(0);
  v33 = *(_QWORD *)(v16 - 8);
  v34 = v16;
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000D75C();
  v21 = (void *)static OS_dispatch_queue.main.getter(v20);
  v22 = (_QWORD *)swift_allocObject(a5, 48, 7);
  v22[2] = a1;
  v22[3] = a2;
  v22[4] = a3;
  v22[5] = a4;
  aBlock[4] = v31;
  v37 = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = v32;
  v23 = _Block_copy(aBlock);
  v24 = v37;
  swift_retain(a3);
  swift_retain(a1);
  swift_release(v24);
  static DispatchQoS.unspecified.getter(v25);
  aBlock[0] = _swiftEmptyArrayStorage;
  v26 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v27 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v28 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v27, v28, v12, v26);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v19, v15, v23);
  _Block_release(v23);

  (*(void (**)(char *, uint64_t))(v35 + 8))(v15, v12);
  return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v19, v34);
}

uint64_t sub_10004C604(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;

  if (a1)
  {
    swift_retain(a1);
    sub_1001BF8AC();
    return swift_release(a1);
  }
  else
  {
    v5 = type metadata accessor for GuidanceMessagesModel();
    v6 = sub_1000052EC(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a2, v5, v6);
    __break(1u);
  }
  return result;
}

uint64_t sub_10004C670@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void *object;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t countAndFlagsBits;
  unint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  double v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  double v67;
  double v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  id v79;
  id v80;
  char v81;
  uint64_t v82;
  id v83;
  char v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  id v97;
  char v98;
  double v99;
  uint64_t v100;
  char *v101;
  __n128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t OpaqueTypeConformance2;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  void *v118;
  uint64_t result;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  __int128 v124;
  int v125;
  int v126;
  int v127;
  uint64_t v128;
  int v129;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t KeyPath;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  Swift::String v150;
  _BYTE v151[312];
  _QWORD v152[44];
  _BYTE v153[312];
  uint64_t v154;
  double v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char v159;
  __int128 v160;
  __int128 v161;
  __int128 v162;
  __int128 v163;
  __int128 v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __n128 v168;
  __int128 v169;
  __int128 v170;
  __int128 v171;
  BOOL v172;
  unsigned __int8 v173;
  _BYTE v174[7];
  _BYTE v175[7];
  unsigned __int8 v176;
  _BYTE v177[7];
  _BYTE v178[7];
  unsigned __int8 v179;
  _BYTE v180[7];
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __n128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  BOOL v193;

  v150._countAndFlagsBits = a6;
  v150._object = a7;
  v123 = a4;
  v149 = a3;
  v136 = a2;
  v143 = type metadata accessor for OpacityTransition(0);
  v140 = *(_QWORD *)(v143 - 8);
  __chkstk_darwin(v143, v11);
  v139 = (char *)&v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003DB8(&qword_1003195D0);
  v144 = *(_QWORD *)(v13 - 8);
  v15 = __chkstk_darwin(v13, v14);
  v141 = (char *)&v123 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  v142 = (char *)&v123 - v18;
  v19 = type metadata accessor for Font.Leading(0);
  v137 = *(_QWORD *)(v19 - 8);
  v138 = v19;
  __chkstk_darwin(v19, v20);
  v22 = (char *)&v123 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = sub_100003DB8(&qword_1003195F0);
  v24 = *(_QWORD *)(v23 - 8);
  __chkstk_darwin(v23, v25);
  v27 = (char *)&v123 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = sub_100003DB8(&qword_1003195F8);
  v30 = __chkstk_darwin(v28, v29);
  __chkstk_darwin(v30, v31);
  v148 = (uint64_t)&v123 - v33;
  if (!a1)
  {
    v120 = type metadata accessor for GuidanceMessagesModel();
    v121 = sub_1000052EC(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel, (uint64_t)&unk_10024D2FC);
    v122 = v136;
LABEL_28:
    result = EnvironmentObject.error()(0, v122, v120, v121);
    __break(1u);
    return result;
  }
  v34 = *(_QWORD *)(a1 + 48);
  v146 = v32;
  v147 = a8;
  v145 = v13;
  if (!v34)
    goto LABEL_8;
  v35 = *(_QWORD *)(v34 + 72);
  if (!v35)
  {
    swift_retain(v34);
    v36 = sub_1001DD7D8();
    swift_bridgeObjectRetain(v36);
    swift_release(v34);
    if (v36)
      goto LABEL_6;
LABEL_8:
    v47 = 1;
    v48 = v148;
    v49 = v138;
    goto LABEL_11;
  }
  v36 = *(_QWORD *)(v34 + 72);
LABEL_6:
  if (*(_QWORD *)(v36 + 16) < 2uLL)
  {
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRelease(v36);
    v50 = sub_100003DB8(&qword_100319608);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v27, 1, 1, v50);
  }
  else
  {
    v152[0] = v36;
    KeyPath = swift_getKeyPath(&unk_10024F890);
    sub_100007CBC((uint64_t)a5, (uint64_t)v153);
    v37 = (_QWORD *)swift_allocObject(&unk_1002E76B8, 104, 7);
    sub_100007D04((__int128 *)v153, (uint64_t)(v37 + 2));
    object = v150._object;
    v37[7] = v150._countAndFlagsBits;
    v37[8] = object;
    v39 = v136;
    v37[9] = a1;
    v37[10] = v39;
    v40 = v149;
    v41 = v123;
    v37[11] = v149;
    v37[12] = v41;
    swift_retain(v40);
    swift_bridgeObjectRetain(v35);
    swift_bridgeObjectRetain(object);
    swift_retain(a1);
    v42 = sub_100003DB8(&qword_100317980);
    v43 = sub_100003DB8(&qword_100319610);
    v44 = sub_1000084FC(&qword_100319618, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
    v45 = sub_10004DC8C();
    ForEach<>.init(_:id:content:)(v152, KeyPath, sub_10004DC78, v37, v42, v43, v44, &protocol witness table for String, v45);
    v46 = sub_100003DB8(&qword_100319608);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v27, 0, 1, v46);
  }
  v49 = v138;
  v48 = v148;
  sub_10000B458((uint64_t)v27, v148, &qword_1003195F0);
  v47 = 0;
LABEL_11:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56))(v48, v47, 1, v23);
  countAndFlagsBits = v150._countAndFlagsBits;
  v51 = (unint64_t)v150._object;
  *(Swift::String *)v153 = v150;
  v53 = sub_10002B3F4();
  v54 = swift_bridgeObjectRetain(v51);
  v138 = Text.init<A>(_:)(v153, &type metadata for String, v53, v54);
  KeyPath = v56;
  v136 = v55;
  v58 = v57;
  v59 = sub_100007BBC(a5, a5[3]);
  v60 = *v59;
  v61 = *(_QWORD *)(*v59 + 184);
  v133 = *(_QWORD *)(*v59 + 192);
  v134 = v61;
  v62 = *(_QWORD *)(v60 + 200);
  v131 = *(_QWORD *)(v60 + 208);
  v132 = v62;
  v64 = static Edge.Set.all.getter(v63);
  v129 = v64;
  v130 = static Edge.Set.top.getter(v64);
  v65 = HIBYTE(v51) & 0xF;
  if ((v51 & 0x2000000000000000) == 0)
    v65 = countAndFlagsBits & 0xFFFFFFFFFFFFLL;
  v66 = v149;
  if (v65)
    v67 = *(double *)(*sub_100007BBC(a5, a5[3]) + 40);
  else
    v67 = 0.0;
  v68 = EdgeInsets.init(_all:)(v67);
  v70 = v69;
  v72 = v71;
  v74 = v73;
  v179 = v58 & 1;
  v176 = 0;
  v173 = 0;
  v76 = static Font.body.getter(v75);
  static Font.Weight.semibold.getter();
  v77 = Font.weight(_:)(v76);
  swift_release(v76);
  v78 = v137;
  (*(void (**)(char *, _QWORD, uint64_t))(v137 + 104))(v22, enum case for Font.Leading.tight(_:), v49);
  v128 = Font.leading(_:)(v22, v77);
  swift_release(v77);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v22, v49);
  v137 = swift_getKeyPath(&unk_10024F798);
  v125 = v179;
  v126 = v176;
  v127 = v173;
  v79 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  *((_QWORD *)&v124 + 1) = Color.init(uiColor:)(v79);
  *(_QWORD *)&v124 = swift_getKeyPath(&unk_10024F7C8);
  if (!v66)
  {
    v120 = type metadata accessor for UIMetrics();
    v121 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v122 = v123;
    goto LABEL_28;
  }
  v80 = *(id *)(v66 + 112);
  v81 = static UIContentSizeCategory.>= infix(_:_:)(v80, UIContentSizeCategoryAccessibilityExtraLarge);

  v82 = swift_getKeyPath(&unk_10024F7F8);
  v83 = *(id *)(v66 + 112);
  v84 = static UIContentSizeCategory.>= infix(_:_:)(v83, UIContentSizeCategoryAccessibilityExtraLarge);

  v85 = swift_getKeyPath(&unk_10024F828);
  v86 = *(id *)(v66 + 112);
  v87 = static Alignment.center.getter(v86);
  v89 = v88;
  v90 = static UIContentSizeCategory.>= infix(_:_:)(v86, UIContentSizeCategoryAccessibilityExtraLarge);
  if ((v90 & 1) != 0)
  {
    v91 = static Alignment.center.getter(v90);
    v93 = static Alignment.== infix(_:_:)(v87, v89, v91, v92);
    if ((v93 & 1) != 0)
    {
      v87 = static Alignment.leading.getter(v93, v94);
      v89 = v95;
    }
  }

  *(_DWORD *)((char *)&v161 + 1) = *(_DWORD *)v178;
  v96 = 3;
  if ((v81 & 1) != 0)
    v96 = 0;
  DWORD1(v161) = *(_DWORD *)&v178[3];
  *(_DWORD *)((char *)&v162 + 1) = *(_DWORD *)v177;
  DWORD1(v162) = *(_DWORD *)&v177[3];
  *(_DWORD *)((char *)&v164 + 9) = *(_DWORD *)v175;
  HIDWORD(v164) = *(_DWORD *)&v175[3];
  DWORD1(v165) = *(_DWORD *)&v174[3];
  *(_DWORD *)((char *)&v165 + 1) = *(_DWORD *)v174;
  HIDWORD(v167) = *(_DWORD *)&v180[3];
  *(_DWORD *)((char *)&v167 + 9) = *(_DWORD *)v180;
  v159 = v81 & 1;
  *(_QWORD *)&v160 = v138;
  *((_QWORD *)&v160 + 1) = v136;
  LOBYTE(v161) = v125;
  *((_QWORD *)&v161 + 1) = KeyPath;
  LOBYTE(v162) = v129;
  *((_QWORD *)&v162 + 1) = v134;
  *(_QWORD *)&v163 = v133;
  *((_QWORD *)&v163 + 1) = v132;
  *(_QWORD *)&v164 = v131;
  BYTE8(v164) = v126;
  LOBYTE(v165) = v130;
  *((double *)&v165 + 1) = v68;
  *(_QWORD *)&v166 = v70;
  *((_QWORD *)&v166 + 1) = v72;
  *(_QWORD *)&v167 = v74;
  BYTE8(v167) = v127;
  v168.n128_u64[0] = v137;
  v168.n128_u64[1] = v128;
  v169 = v124;
  *(_QWORD *)&v170 = v82;
  *((_QWORD *)&v170 + 1) = v96;
  LOBYTE(v171) = v81 & 1;
  *((_QWORD *)&v171 + 1) = v85;
  v172 = (v84 & 1) == 0;
  v184 = v163;
  v183 = v162;
  v181 = v160;
  v182 = v161;
  v188 = v167;
  v187 = v166;
  v185 = v164;
  v186 = v165;
  v193 = v172;
  v192 = v171;
  v191 = v170;
  v189 = v168;
  v190 = v124;
  sub_100131B3C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v151, v168, 0.0, 1, 0.0, 1, v87, v89);
  sub_10004DA10((uint64_t)&v160);
  v97 = *(id *)(v149 + 112);
  v98 = static UIContentSizeCategory.>= infix(_:_:)(v97, UIContentSizeCategoryAccessibilityExtraLarge);

  if ((v98 & 1) != 0)
    v99 = 1.0;
  else
    v99 = 0.5;
  v100 = swift_getKeyPath(&unk_10024F858);
  v101 = v139;
  v103 = OpacityTransition.init()(v102);
  v104 = static Animation.easeInOut.getter(v103);
  v105 = sub_1000052EC(&qword_100318760, (uint64_t (*)(uint64_t))&type metadata accessor for OpacityTransition, (uint64_t)&protocol conformance descriptor for OpacityTransition);
  v107 = v142;
  v106 = v143;
  Transition.animation(_:)(v104, v143, v105);
  swift_release(v104);
  (*(void (**)(char *, uint64_t))(v140 + 8))(v101, v106);
  v109 = v144;
  v108 = v145;
  v110 = v141;
  (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v141, v107, v145);
  *(_QWORD *)v153 = v106;
  *(_QWORD *)&v153[8] = v105;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v153, &opaque type descriptor for <<opaque return type of Transition.animation(_:)>>, 1);
  v112 = AnyTransition.init<A>(_:)(v110, v108, OpaqueTypeConformance2);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v107, v108);
  *(_QWORD *)v153 = 0xD000000000000010;
  *(_QWORD *)&v153[8] = 0x8000000100264230;
  String.append(_:)(v150);
  v113 = *(_QWORD *)v153;
  v114 = *(_QWORD *)&v153[8];
  v115 = v148;
  v116 = v146;
  sub_10000B234(v148, v146, &qword_1003195F8);
  v117 = v147;
  sub_10000B234(v116, v147, &qword_1003195F8);
  v118 = (void *)(v117 + *(int *)(sub_100003DB8(&qword_100319600) + 48));
  memcpy(v152, v151, 0x138uLL);
  v152[39] = v100;
  *(double *)&v152[40] = v99;
  v152[41] = v112;
  v152[42] = v113;
  v152[43] = v114;
  memcpy(v118, v152, 0x160uLL);
  sub_10004DAA4((uint64_t)v152);
  sub_100007FF0(v115, &qword_1003195F8);
  memcpy(v153, v151, sizeof(v153));
  v154 = v100;
  v155 = v99;
  v156 = v112;
  v157 = v113;
  v158 = v114;
  sub_10004DB70((uint64_t)v153);
  return sub_100007FF0(v116, &qword_1003195F8);
}

uint64_t sub_10004D0C4@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  double v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  id v49;
  char v50;
  id v51;
  char v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  char v66;
  double v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t result;
  uint64_t v73;
  uint64_t v74;
  uint64_t KeyPath;
  __int128 v76;
  int v77;
  int v78;
  int v79;
  __n128 v80;
  int v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD v93[42];
  char v94;
  _QWORD v95[41];
  char v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __n128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  BOOL v109;
  _BYTE v110[312];
  unsigned __int8 v111;
  _BYTE v112[7];
  _BYTE v113[7];
  unsigned __int8 v114;
  _BYTE v115[7];
  _BYTE v116[7];
  unsigned __int8 v117;
  _BYTE v118[7];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __n128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  BOOL v131;

  v91 = a7;
  v92 = a5;
  v12 = type metadata accessor for Font.Leading(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (char *)&KeyPath - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003DB8(&qword_100319610);
  __chkstk_darwin(v17, v18);
  v90 = (char *)&KeyPath - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *a1;
  v21 = a1[1];
  v93[0] = v20;
  v93[1] = v21;
  v22 = sub_10002B3F4();
  v23 = swift_bridgeObjectRetain(v21);
  v24 = Text.init<A>(_:)(v93, &type metadata for String, v22, v23);
  v88 = v25;
  v89 = v24;
  v27 = v26;
  v87 = v28;
  v29 = sub_100007BBC(a2, a2[3]);
  v30 = *v29;
  v31 = *(_QWORD *)(*v29 + 184);
  v85 = *(_QWORD *)(*v29 + 192);
  v86 = v31;
  v32 = *(_QWORD *)(v30 + 200);
  v83 = *(_QWORD *)(v30 + 208);
  v84 = v32;
  v34 = static Edge.Set.all.getter(v33);
  v81 = v34;
  v82 = static Edge.Set.top.getter(v34);
  v35 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v35 = a3 & 0xFFFFFFFFFFFFLL;
  if (v35)
    v36 = *(double *)(*sub_100007BBC(a2, a2[3]) + 40);
  else
    v36 = 0.0;
  v37 = EdgeInsets.init(_all:)(v36);
  v39 = v38;
  v41 = v40;
  v43 = v42;
  v117 = v27 & 1;
  v114 = 0;
  v111 = 0;
  v45 = static Font.body.getter(v44);
  static Font.Weight.semibold.getter();
  v46 = Font.weight(_:)(v45);
  swift_release(v45);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for Font.Leading.tight(_:), v12);
  v80.n128_u64[1] = Font.leading(_:)(v16, v46);
  swift_release(v46);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v80.n128_u64[0] = swift_getKeyPath(&unk_10024F798);
  v77 = v117;
  v78 = v114;
  v79 = v111;
  v47 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  *((_QWORD *)&v76 + 1) = Color.init(uiColor:)(v47);
  *(_QWORD *)&v76 = swift_getKeyPath(&unk_10024F7C8);
  v48 = v92;
  if (v92)
  {
    v49 = *(id *)(v92 + 112);
    v50 = static UIContentSizeCategory.>= infix(_:_:)(v49, UIContentSizeCategoryAccessibilityExtraLarge);

    KeyPath = swift_getKeyPath(&unk_10024F7F8);
    v51 = *(id *)(v48 + 112);
    v52 = static UIContentSizeCategory.>= infix(_:_:)(v51, UIContentSizeCategoryAccessibilityExtraLarge);

    v53 = swift_getKeyPath(&unk_10024F828);
    v54 = *(id *)(v48 + 112);
    v55 = static Alignment.center.getter(v54);
    v57 = v56;
    v58 = static UIContentSizeCategory.>= infix(_:_:)(v54, UIContentSizeCategoryAccessibilityExtraLarge);
    if ((v58 & 1) != 0)
    {
      v59 = static Alignment.center.getter(v58);
      v61 = static Alignment.== infix(_:_:)(v55, v57, v59, v60);
      if ((v61 & 1) != 0)
      {
        v55 = static Alignment.leading.getter(v61, v62);
        v57 = v63;
      }
    }

    *(_DWORD *)((char *)&v98 + 1) = *(_DWORD *)v116;
    v64 = 3;
    if ((v50 & 1) != 0)
      v64 = 0;
    DWORD1(v98) = *(_DWORD *)&v116[3];
    *(_DWORD *)((char *)&v99 + 1) = *(_DWORD *)v115;
    DWORD1(v99) = *(_DWORD *)&v115[3];
    *(_DWORD *)((char *)&v101 + 9) = *(_DWORD *)v113;
    HIDWORD(v101) = *(_DWORD *)&v113[3];
    *(_DWORD *)((char *)&v102 + 1) = *(_DWORD *)v112;
    DWORD1(v102) = *(_DWORD *)&v112[3];
    HIDWORD(v104) = *(_DWORD *)&v118[3];
    *(_DWORD *)((char *)&v104 + 9) = *(_DWORD *)v118;
    v96 = v50 & 1;
    *(_QWORD *)&v97 = v89;
    *((_QWORD *)&v97 + 1) = v88;
    LOBYTE(v98) = v77;
    *((_QWORD *)&v98 + 1) = v87;
    LOBYTE(v99) = v81;
    *((_QWORD *)&v99 + 1) = v86;
    *(_QWORD *)&v100 = v85;
    *((_QWORD *)&v100 + 1) = v84;
    *(_QWORD *)&v101 = v83;
    BYTE8(v101) = v78;
    LOBYTE(v102) = v82;
    *((double *)&v102 + 1) = v37;
    *(_QWORD *)&v103 = v39;
    *((_QWORD *)&v103 + 1) = v41;
    *(_QWORD *)&v104 = v43;
    BYTE8(v104) = v79;
    v105 = v80;
    v106 = v76;
    *(_QWORD *)&v107 = KeyPath;
    *((_QWORD *)&v107 + 1) = v64;
    LOBYTE(v108) = v50 & 1;
    *((_QWORD *)&v108 + 1) = v53;
    v109 = (v52 & 1) == 0;
    v122 = v100;
    v121 = v99;
    v119 = v97;
    v120 = v98;
    v126 = v104;
    v125 = v103;
    v123 = v101;
    v124 = v102;
    v131 = v109;
    v130 = v108;
    v129 = v107;
    v127 = v80;
    v128 = v76;
    sub_100131B3C(0, 1, 0.0, 1, INFINITY, 0, 0, 1, (uint64_t)v110, v80, 0.0, 1, 0.0, 1, v55, v57);
    sub_10004DA10((uint64_t)&v97);
    v65 = *(id *)(v92 + 112);
    v66 = static UIContentSizeCategory.>= infix(_:_:)(v65, UIContentSizeCategoryAccessibilityExtraLarge);

    if ((v66 & 1) != 0)
      v67 = 1.0;
    else
      v67 = 0.5;
    v68 = swift_getKeyPath(&unk_10024F858);
    memcpy(v95, v110, 0x138uLL);
    v95[39] = v68;
    *(double *)&v95[40] = v67;
    memcpy(v93, v95, 0x148uLL);
    v93[41] = 0;
    v94 = 0;
    v69 = sub_100003DB8(&qword_100319630);
    v70 = sub_10004DD10();
    v71 = (uint64_t)v90;
    View.accessibilityHidden(_:)(1, v69, v70);
    sub_10004E118((uint64_t)v95);
    return sub_10000B458(v71, v91, &qword_100319610);
  }
  else
  {
    v73 = type metadata accessor for UIMetrics();
    v74 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, a6, v73, v74);
    __break(1u);
  }
  return result;
}

uint64_t sub_10004D698@<X0>(void *a1@<X8>)
{
  uint64_t *v1;

  return sub_10004B924(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t sub_10004D6C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 104);
  v7 = *(_QWORD *)(a1 + 112);
  v8 = *(_QWORD *)(a1 + 136);
  sub_10002B438(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v8);
  swift_release(v7);
  swift_release(v5);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v4);
  swift_release(v6);
  return a1;
}

uint64_t sub_10004D764()
{
  uint64_t *v0;

  return sub_10004C3EC(v0[2], v0[3], v0[4], v0[5], (uint64_t)&unk_1002E7730, (uint64_t)sub_10004E218, (uint64_t)&unk_1002E7748);
}

uint64_t sub_10004D79C()
{
  uint64_t *v0;

  return sub_10004C3EC(v0[2], v0[3], v0[4], v0[5], (uint64_t)&unk_1002E76E0, (uint64_t)sub_10004E1C4, (uint64_t)&unk_1002E76F8);
}

uint64_t sub_10004D7D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 104);
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 136);
  v8 = *(_QWORD *)(a1 + 264);
  v9 = *(_QWORD *)(a1 + 280);
  v10 = *(_QWORD *)(a1 + 296);
  v12 = *(_QWORD *)(a1 + 312);
  v13 = *(_QWORD *)(a1 + 304);
  v15 = *(_QWORD *)(a1 + 320);
  v16 = *(_QWORD *)(a1 + 96);
  v14 = *(_QWORD *)(a1 + 328);
  v17 = *(_QWORD *)(a1 + 344);
  v18 = *(_QWORD *)(a1 + 336);
  v19 = *(_QWORD *)(a1 + 360);
  v20 = *(_QWORD *)(a1 + 352);
  sub_10002B750(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v16);
  sub_100018F00(v13, v12);
  sub_100018F00(v15, v14);
  sub_100018F00(v18, v17);
  sub_100018F00(v20, v19);
  return a1;
}

uint64_t sub_10004D8E8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 80);
  v4 = *(_QWORD *)(a1 + 88);
  v5 = *(_QWORD *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 112);
  v7 = *(_QWORD *)(a1 + 136);
  v8 = *(_QWORD *)(a1 + 264);
  v9 = *(_QWORD *)(a1 + 280);
  v10 = *(_QWORD *)(a1 + 296);
  v13 = *(_QWORD *)(a1 + 304);
  v14 = *(_QWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a1 + 312);
  v15 = *(_QWORD *)(a1 + 328);
  v16 = *(_QWORD *)(a1 + 320);
  v17 = *(_QWORD *)(a1 + 344);
  v18 = *(_QWORD *)(a1 + 336);
  v19 = *(_QWORD *)(a1 + 360);
  v20 = *(_QWORD *)(a1 + 352);
  sub_10002B438(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v10);
  swift_release(v9);
  swift_release(v8);
  swift_release(v7);
  swift_release(v6);
  swift_release(v5);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v4);
  swift_release(v14);
  sub_10004DA00(v13, v12);
  sub_10004DA00(v16, v15);
  sub_10004DA00(v18, v17);
  sub_10004DA00(v20, v19);
  return a1;
}

uint64_t sub_10004DA00(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_10004DA10(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 184);
  sub_10002B438(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v8);
  swift_release(v7);
  swift_release(v5);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v4);
  swift_release(v6);
  return a1;
}

uint64_t sub_10004DAA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 152);
  v12 = *(_QWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 160);
  v7 = *(_QWORD *)(a1 + 184);
  v8 = *(_QWORD *)(a1 + 312);
  v9 = *(_QWORD *)(a1 + 328);
  v10 = *(_QWORD *)(a1 + 344);
  sub_10002B750(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_retain(v5);
  swift_retain(v6);
  swift_retain(v7);
  swift_retain(v8);
  swift_retain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v12);
  return a1;
}

uint64_t sub_10004DB70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  v12 = *(_QWORD *)(a1 + 152);
  v6 = *(_QWORD *)(a1 + 160);
  v7 = *(_QWORD *)(a1 + 184);
  v8 = *(_QWORD *)(a1 + 312);
  v9 = *(_QWORD *)(a1 + 328);
  v10 = *(_QWORD *)(a1 + 344);
  sub_10002B438(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRelease(v10);
  swift_release(v9);
  swift_release(v8);
  swift_release(v7);
  swift_release(v6);
  swift_release(v5);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v4);
  swift_release(v12);
  return a1;
}

uint64_t sub_10004DC3C()
{
  _QWORD *v0;

  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 2);
  swift_bridgeObjectRelease(v0[8]);
  swift_release(v0[9]);
  swift_release(v0[11]);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_10004DC78@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;

  return sub_10004D0C4(a1, v2 + 2, v2[7], v2[8], v2[11], v2[12], a2);
}

unint64_t sub_10004DC8C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319620;
  if (!qword_100319620)
  {
    v1 = sub_100007FAC(&qword_100319610);
    sub_10004DD10();
    sub_1000052EC(&qword_100316C10, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319620);
  }
  return result;
}

unint64_t sub_10004DD10()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319628;
  if (!qword_100319628)
  {
    v1 = sub_100007FAC(&qword_100319630);
    sub_10002B614(&qword_100319638, &qword_100319640, (void (*)(void))sub_10004DD9C);
    sub_10004E0D4();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319628);
  }
  return result;
}

unint64_t sub_10004DD9C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319648;
  if (!qword_100319648)
  {
    v1 = sub_100007FAC(&qword_100319650);
    sub_10002B614(&qword_100319658, &qword_100319660, (void (*)(void))sub_10004DE40);
    sub_1000084FC(&qword_1003192C0, &qword_1003192C8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319648);
  }
  return result;
}

unint64_t sub_10004DE40()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319668;
  if (!qword_100319668)
  {
    v1 = sub_100007FAC(&qword_100319670);
    sub_10004DEC4();
    sub_1000084FC(&qword_100318300, &qword_100318308, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319668);
  }
  return result;
}

unint64_t sub_10004DEC4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319678;
  if (!qword_100319678)
  {
    v1 = sub_100007FAC(&qword_100319680);
    sub_10004DF48();
    sub_1000084FC(&qword_1003183B8, &qword_1003183C0, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319678);
  }
  return result;
}

unint64_t sub_10004DF48()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319688;
  if (!qword_100319688)
  {
    v1 = sub_100007FAC(&qword_100319690);
    sub_10004DFCC();
    sub_1000084FC(&qword_100316C00, &qword_100316C08, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319688);
  }
  return result;
}

unint64_t sub_10004DFCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319698;
  if (!qword_100319698)
  {
    v1 = sub_100007FAC(&qword_1003196A0);
    sub_10002B614(&qword_1003196A8, &qword_1003196B0, (void (*)(void))sub_10004E070);
    sub_1000084FC(&qword_100316BF0, &qword_100316BF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319698);
  }
  return result;
}

unint64_t sub_10004E070()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003196B8;
  if (!qword_1003196B8)
  {
    v1 = sub_100007FAC(&qword_1003196C0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003196B8);
  }
  return result;
}

unint64_t sub_10004E0D4()
{
  unint64_t result;

  result = qword_1003196C8;
  if (!qword_1003196C8)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for _AllowsHitTestingModifier, &type metadata for _AllowsHitTestingModifier);
    atomic_store(result, (unint64_t *)&qword_1003196C8);
  }
  return result;
}

uint64_t sub_10004E118(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 128);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD *)(a1 + 144);
  v6 = *(_QWORD *)(a1 + 152);
  v7 = *(_QWORD *)(a1 + 160);
  v8 = *(_QWORD *)(a1 + 184);
  v9 = *(_QWORD *)(a1 + 312);
  sub_10002B438(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v9);
  swift_release(v8);
  swift_release(v7);
  swift_release(v5);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v4);
  swift_release(v6);
  return a1;
}

uint64_t sub_10004E1C4()
{
  uint64_t v0;

  return sub_10004C604(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10004E1D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10004E1E0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10004E1EC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004E218()
{
  uint64_t v0;

  return sub_10004C2B8(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10004E224()
{
  return sub_1000084FC(&qword_1003196D0, &qword_1003196D8, (uint64_t)&protocol conformance descriptor for TupleView<A>);
}

uint64_t destroy for TransitionAlertModel.AlertButton(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for ExplorerSuggestionView(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int128 v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  v4 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 24) = v3;
  swift_bridgeObjectRetain(v4);
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for ExplorerSuggestionView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v7 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = v6;
  swift_retain(v6);
  swift_release(v8);
  return a1;
}

uint64_t assignWithTake for ExplorerSuggestionView(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  v4 = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_release(v5);
  return a1;
}

ValueMetadata *type metadata accessor for ExplorerSuggestionView()
{
  return &type metadata for ExplorerSuggestionView;
}

uint64_t sub_10004E388(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100296160, 1);
}

void sub_10004E398(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_10004E3E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  Swift::String v5;
  Swift::String_optional v6;
  Swift::String v7;
  uint64_t countAndFlagsBits;
  uint64_t v9;
  uint64_t v10;
  id v11;
  Swift::String v12;
  Swift::String_optional v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v17;
  Swift::String v18;

  v3 = (void *)objc_opt_self(NSBundle);
  v4 = objc_msgSend(v3, "mainBundle");
  v17._countAndFlagsBits = 0xD000000000000028;
  v17._object = (void *)0x8000000100264870;
  v5._object = (void *)0x80000001002647B0;
  v5._countAndFlagsBits = 0xD000000000000019;
  v6.value._countAndFlagsBits = 0x5072656972726143;
  v6.value._object = (void *)0xED00006E6F656769;
  v7._countAndFlagsBits = 0;
  v7._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, v6, (NSBundle)v4, v7, v17)._countAndFlagsBits;

  v9 = sub_100003DB8((uint64_t *)&unk_10031B300);
  v10 = swift_allocObject(v9, 48, 7);
  *(_OWORD *)(v10 + 16) = xmmword_10024E070;
  v11 = objc_msgSend(v3, "mainBundle");
  v12._countAndFlagsBits = 0x1000000000000074;
  v18._countAndFlagsBits = 0xD000000000000027;
  v18._object = (void *)0x8000000100264920;
  v12._object = (void *)0x80000001002648A0;
  v13.value._countAndFlagsBits = 0x5072656972726143;
  v13.value._object = (void *)0xED00006E6F656769;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, (NSBundle)v11, v14, v18);

  *(Swift::String *)(v10 + 32) = v15;
  swift_bridgeObjectRetain(v0);
  swift_retain(v1);
  swift_bridgeObjectRetain(v2);
  sub_1000504BC(v2);
  swift_bridgeObjectRelease(v2);
  swift_release(v1);
  swift_bridgeObjectRelease(v0);
  return countAndFlagsBits;
}

void sub_10004F0CC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  unint64_t v27;
  __n128 v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  double v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int *v74;
  uint64_t v75;
  char *v76;
  int v77;
  int v78;
  uint64_t KeyPath;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  _QWORD v91[3];

  v86 = a7;
  v87 = a8;
  v85 = a6;
  v84 = a5;
  v80 = a4;
  v13 = sub_100003DB8(&qword_1003196F8);
  v15 = __chkstk_darwin(v13, v14);
  v89 = (uint64_t)&v76 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v17);
  v19 = (char *)&v76 - v18;
  v20 = sub_100003DB8(&qword_100319700);
  v22 = __chkstk_darwin(v20, v21);
  v88 = (uint64_t)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v24);
  v26 = (char *)&v76 - v25;
  v91[0] = a1;
  v91[1] = a2;
  v27 = sub_10002B3F4();
  v28 = swift_bridgeObjectRetain(a2);
  v29 = Text.init<A>(_:)(v91, &type metadata for String, v27, v28);
  v31 = v30;
  v33 = v32;
  v35 = v34 & 1;
  v36 = static Font.headline.getter();
  v37 = Text.font(_:)(v36, v29, v31, v35, v33);
  v81 = v38;
  v82 = v37;
  v40 = v39;
  v83 = v41;
  swift_release(v36);
  v77 = v40 & 1;
  sub_10002B438(v29, v31, v35);
  swift_bridgeObjectRelease(v33);
  KeyPath = swift_getKeyPath(&unk_10024F918);
  v78 = static Edge.Set.top.getter(KeyPath);
  v42 = EdgeInsets.init(_all:)(5.0);
  v44 = v43;
  v46 = v45;
  v48 = v47;
  *(_QWORD *)v26 = static HorizontalAlignment.center.getter(v49);
  *((_QWORD *)v26 + 1) = 0x4028000000000000;
  v26[16] = 0;
  v90 = v26;
  sub_100003DB8(&qword_100319708);
  v91[0] = a3;
  v50 = swift_getKeyPath(&unk_10024F950);
  swift_bridgeObjectRetain(a3);
  v51 = sub_100003DB8(&qword_100317980);
  v52 = sub_100003DB8(&qword_1003182F8);
  v53 = sub_1000084FC(&qword_100319618, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
  v54 = sub_10002B67C();
  v55 = ForEach<>.init(_:id:content:)(v91, v50, sub_10004F5F8, 0, v51, v52, v53, &protocol witness table for String, v54);
  v56 = (uint64_t)v19;
  *(_QWORD *)v19 = static HorizontalAlignment.center.getter(v55);
  *((_QWORD *)v19 + 1) = 0x4028000000000000;
  v19[16] = 0;
  sub_100003DB8(&qword_100319710);
  v76 = v19;
  v57 = v80;
  v91[0] = v80;
  v58 = swift_getKeyPath(&unk_10024F968);
  v59 = swift_allocObject(&unk_1002E7860, 48, 7);
  *(_BYTE *)(v59 + 16) = v84;
  v61 = v85;
  v60 = v86;
  *(_QWORD *)(v59 + 24) = v85;
  *(_QWORD *)(v59 + 32) = v60;
  v62 = v87;
  *(_QWORD *)(v59 + 40) = v87;
  swift_bridgeObjectRetain(v57);
  swift_bridgeObjectRetain(v61);
  swift_retain(v62);
  v63 = sub_100003DB8(&qword_100319718);
  v64 = sub_100003DB8(&qword_100319720);
  v65 = sub_1000084FC(&qword_100319728, &qword_100319718, (uint64_t)&protocol conformance descriptor for [A]);
  v66 = sub_10004FED0();
  v67 = sub_10004FF14();
  ForEach<>.init(_:id:content:)(v91, v58, sub_10004FEC0, v59, v63, v64, v65, v66, v67);
  LOBYTE(v57) = v77;
  LOBYTE(v91[0]) = v77;
  v68 = v88;
  sub_10000B234((uint64_t)v90, v88, &qword_100319700);
  v69 = v89;
  sub_10000B234(v56, v89, &qword_1003196F8);
  v70 = v81;
  v71 = v82;
  *(_QWORD *)a9 = v82;
  *(_QWORD *)(a9 + 8) = v70;
  *(_BYTE *)(a9 + 16) = v57;
  v72 = v83;
  v73 = KeyPath;
  *(_QWORD *)(a9 + 24) = v83;
  *(_QWORD *)(a9 + 32) = v73;
  *(_BYTE *)(a9 + 40) = 1;
  *(_BYTE *)(a9 + 48) = v78;
  *(double *)(a9 + 56) = v42;
  *(_QWORD *)(a9 + 64) = v44;
  *(_QWORD *)(a9 + 72) = v46;
  *(_QWORD *)(a9 + 80) = v48;
  *(_BYTE *)(a9 + 88) = 0;
  *(_QWORD *)(a9 + 96) = 0x4018000000000000;
  *(_BYTE *)(a9 + 104) = 0;
  v74 = (int *)sub_100003DB8(&qword_100319768);
  sub_10000B234(v68, a9 + v74[16], &qword_100319700);
  v75 = a9 + v74[20];
  *(_QWORD *)v75 = 0x4032000000000000;
  *(_BYTE *)(v75 + 8) = 0;
  sub_10000B234(v69, a9 + v74[24], &qword_1003196F8);
  sub_10002B750(v71, v70, v57);
  swift_bridgeObjectRetain(v72);
  swift_retain(v73);
  sub_10002B750(v71, v70, v57);
  swift_bridgeObjectRetain(v72);
  swift_retain(v73);
  sub_100007FF0((uint64_t)v76, &qword_1003196F8);
  sub_100007FF0((uint64_t)v90, &qword_100319700);
  sub_10002B438(v71, v70, v57);
  swift_release(v73);
  swift_bridgeObjectRelease(v72);
  sub_100007FF0(v69, &qword_1003196F8);
  sub_100007FF0(v68, &qword_100319700);
  sub_10002B438(v71, v70, v91[0]);
  swift_release(v73);
  swift_bridgeObjectRelease(v72);
}

uint64_t sub_10004F5F8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __n128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  _QWORD v38[2];

  v4 = type metadata accessor for Font.Leading(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *a1;
  v10 = a1[1];
  v38[0] = v9;
  v38[1] = v10;
  v11 = sub_10002B3F4();
  v12 = swift_bridgeObjectRetain(v10);
  v13 = Text.init<A>(_:)(v38, &type metadata for String, v11, v12);
  v15 = v14;
  v17 = v16;
  v19 = v18 & 1;
  v20 = static Font.subheadline.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for Font.Leading.tight(_:), v4);
  v21 = Font.leading(_:)(v8, v20);
  swift_release(v20);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  v22 = Text.font(_:)(v21, v13, v15, v19, v17);
  v24 = v23;
  LOBYTE(v20) = v25;
  v27 = v26;
  swift_release(v21);
  v28 = v20 & 1;
  sub_10002B438(v13, v15, v19);
  v29 = swift_bridgeObjectRelease(v17);
  LODWORD(v38[0]) = static HierarchicalShapeStyle.secondary.getter(v29);
  v30 = Text.foregroundStyle<A>(_:)(v38, v22, v24, v28, v27, &type metadata for HierarchicalShapeStyle, &protocol witness table for HierarchicalShapeStyle);
  v32 = v31;
  LOBYTE(v17) = v33;
  v35 = v34;
  sub_10002B438(v22, v24, v28);
  swift_bridgeObjectRelease(v27);
  result = swift_getKeyPath(&unk_10024F918);
  *(_QWORD *)a2 = v30;
  *(_QWORD *)(a2 + 8) = v32;
  *(_BYTE *)(a2 + 16) = v17 & 1;
  *(_QWORD *)(a2 + 24) = v35;
  *(_QWORD *)(a2 + 32) = result;
  *(_BYTE *)(a2 + 40) = 1;
  return result;
}

uint64_t sub_10004F7C8@<X0>(char *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  __n128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _BYTE v70[24];
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v59 = a4;
  v60 = a5;
  v58 = a2;
  v69 = a6;
  v66 = type metadata accessor for BorderedButtonStyle(0);
  v68 = *(_QWORD *)(v66 - 8);
  __chkstk_darwin(v66, v8);
  v64 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ButtonBorderShape(0);
  v62 = *(_QWORD *)(v10 - 8);
  v63 = v10;
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003DB8(&qword_100319758);
  v15 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100003DB8(&qword_100319740);
  __chkstk_darwin(v57, v19);
  v21 = (char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = sub_100003DB8(&qword_100319770);
  v65 = *(_QWORD *)(v67 - 8);
  __chkstk_darwin(v67, v22);
  v61 = (char *)&v56 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *a1;
  v26 = *((_QWORD *)a1 + 1);
  v25 = *((_QWORD *)a1 + 2);
  v27 = swift_allocObject(&unk_1002E7888, 72, 7);
  *(_BYTE *)(v27 + 16) = v58;
  v28 = a3;
  v29 = v59;
  *(_QWORD *)(v27 + 24) = a3;
  *(_QWORD *)(v27 + 32) = v29;
  v30 = v60;
  *(_QWORD *)(v27 + 40) = v60;
  *(_BYTE *)(v27 + 48) = v24;
  *(_QWORD *)(v27 + 56) = v26;
  *(_QWORD *)(v27 + 64) = v25;
  v70[16] = v24;
  v71 = v26;
  v72 = v25;
  swift_bridgeObjectRetain(v28);
  swift_retain(v30);
  swift_bridgeObjectRetain(v25);
  v31 = sub_100003DB8(&qword_100319778);
  v32 = sub_10005012C();
  v33 = Button.init(action:label:)(sub_1000500F8, v27, sub_100050120, v70, v31, v32);
  static ButtonBorderShape.roundedRectangle.getter(v33);
  KeyPath = swift_getKeyPath(&unk_10024F988);
  v35 = v57;
  v36 = (uint64_t *)&v21[*(int *)(v57 + 36)];
  v37 = sub_100003DB8(&qword_100318968);
  v39 = v62;
  v38 = v63;
  (*(void (**)(char *, char *, uint64_t))(v62 + 16))((char *)v36 + *(int *)(v37 + 28), v13, v63);
  *v36 = KeyPath;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v21, v18, v14);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v38);
  v40 = (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  v41 = v64;
  BorderedButtonStyle.init()(v40);
  v42 = sub_10004FFE0();
  v43 = sub_10005007C();
  v44 = v61;
  v45 = v66;
  View.buttonStyle<A>(_:)(v41, v35, v66, v42, v43);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v41, v45);
  sub_100007FF0((uint64_t)v21, &qword_100319740);
  v46 = objc_msgSend((id)objc_opt_self(UIColor), "labelColor");
  v47 = Color.init(uiColor:)(v46);
  v48 = swift_getKeyPath(&unk_10024F9B8);
  v73 = v47;
  v49 = swift_retain(v47);
  v50 = AnyShapeStyle.init<A>(_:)(&v73, &type metadata for Color, &protocol witness table for Color, v49);
  v51 = v65;
  v52 = v69;
  v53 = v67;
  (*(void (**)(uint64_t, char *, uint64_t))(v65 + 16))(v69, v44, v67);
  swift_release(v47);
  v54 = (uint64_t *)(v52 + *(int *)(sub_100003DB8(&qword_100319720) + 36));
  *v54 = v48;
  v54[1] = v50;
  return (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v44, v53);
}

void sub_10004FB84(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  unint64_t v5;
  __n128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  double v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD v27[9];
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;

  *(_QWORD *)&v29 = a1;
  *((_QWORD *)&v29 + 1) = a2;
  v5 = sub_10002B3F4();
  v6 = swift_bridgeObjectRetain(a2);
  v7 = Text.init<A>(_:)(&v29, &type metadata for String, v5, v6);
  v9 = v8;
  v11 = v10;
  v13 = v12 & 1;
  v14 = static Alignment.center.getter(v7);
  sub_1001315E8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v27, 0.0, 1, 0.0, 1, v14, v15, v7, v9, v13, v11);
  sub_10002B438(v7, v9, v13);
  swift_bridgeObjectRelease(v11);
  v35 = v27[6];
  v36 = v27[7];
  v37 = v27[8];
  v31 = v27[2];
  v32 = v27[3];
  v33 = v27[4];
  v34 = v27[5];
  v29 = v27[0];
  v30 = v27[1];
  v16 = static Font.subheadline.getter();
  static Font.Weight.semibold.getter();
  v17 = Font.weight(_:)(v16);
  swift_release(v16);
  KeyPath = swift_getKeyPath(&unk_10024F9E8);
  LOBYTE(v11) = static Edge.Set.vertical.getter();
  v19 = EdgeInsets.init(_all:)(4.0);
  v28 = 0;
  v20 = v36;
  *(_OWORD *)(a3 + 96) = v35;
  *(_OWORD *)(a3 + 112) = v20;
  *(_OWORD *)(a3 + 128) = v37;
  v21 = v32;
  *(_OWORD *)(a3 + 32) = v31;
  *(_OWORD *)(a3 + 48) = v21;
  v22 = v34;
  *(_OWORD *)(a3 + 64) = v33;
  *(_OWORD *)(a3 + 80) = v22;
  v23 = v30;
  *(_OWORD *)a3 = v29;
  *(_OWORD *)(a3 + 16) = v23;
  *(_QWORD *)(a3 + 144) = KeyPath;
  *(_QWORD *)(a3 + 152) = v17;
  *(_BYTE *)(a3 + 160) = v11;
  *(_DWORD *)(a3 + 161) = v27[0];
  *(_DWORD *)(a3 + 164) = *(_DWORD *)((char *)v27 + 3);
  *(double *)(a3 + 168) = v19;
  *(_QWORD *)(a3 + 176) = v24;
  *(_QWORD *)(a3 + 184) = v25;
  *(_QWORD *)(a3 + 192) = v26;
  *(_BYTE *)(a3 + 200) = v28;
}

uint64_t sub_10004FD28@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  double v20;
  uint64_t v21;
  uint64_t v23;

  v3 = sub_100003DB8(&qword_1003196E0);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = v1[1];
  v8 = v1[2];
  v9 = v1[3];
  v10 = *(unsigned __int8 *)v1;
  sub_10004E398(v10);
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;
  *(_QWORD *)v6 = static HorizontalAlignment.center.getter(v11);
  *((_QWORD *)v6 + 1) = 0;
  v6[16] = 0;
  v19 = sub_100003DB8(&qword_1003196E8);
  sub_10004F0CC(v12, v14, v16, v18, v10, v7, v8, v9, (uint64_t)&v6[*(int *)(v19 + 44)]);
  swift_bridgeObjectRelease(v18);
  swift_bridgeObjectRelease(v16);
  *(_QWORD *)&v20 = swift_bridgeObjectRelease(v14).n128_u64[0];
  LOBYTE(v18) = static Edge.Set.all.getter(v20);
  sub_10000B234((uint64_t)v6, a1, &qword_1003196E0);
  v21 = a1 + *(int *)(sub_100003DB8(&qword_1003196F0) + 36);
  *(_BYTE *)v21 = v18;
  *(_OWORD *)(v21 + 8) = 0u;
  *(_OWORD *)(v21 + 24) = 0u;
  *(_BYTE *)(v21 + 40) = 1;
  return sub_100007FF0((uint64_t)v6, &qword_1003196E0);
}

uint64_t sub_10004FE94()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 24));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10004FEC0@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10004F7C8(a1, *(unsigned __int8 *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32), *(_QWORD *)(v2 + 40), a2);
}

unint64_t sub_10004FED0()
{
  unint64_t result;

  result = qword_100319730;
  if (!qword_100319730)
  {
    result = swift_getWitnessTable(&unk_10025AA6C, &type metadata for ExplorerSuggestion.Action);
    atomic_store(result, (unint64_t *)&qword_100319730);
  }
  return result;
}

unint64_t sub_10004FF14()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_100319738;
  if (!qword_100319738)
  {
    v1 = sub_100007FAC(&qword_100319720);
    v2[0] = sub_100007FAC(&qword_100319740);
    v2[1] = type metadata accessor for BorderedButtonStyle(255);
    v2[2] = sub_10004FFE0();
    v2[3] = sub_10005007C();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_1000084FC(&qword_100318880, &qword_100318888, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319738);
  }
  return result;
}

unint64_t sub_10004FFE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319748;
  if (!qword_100319748)
  {
    v1 = sub_100007FAC(&qword_100319740);
    sub_1000084FC(&qword_100319750, &qword_100319758, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_1000084FC(&qword_100318978, &qword_100318968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319748);
  }
  return result;
}

unint64_t sub_10005007C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319760;
  if (!qword_100319760)
  {
    v1 = type metadata accessor for BorderedButtonStyle(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for BorderedButtonStyle, v1);
    atomic_store(result, (unint64_t *)&qword_100319760);
  }
  return result;
}

uint64_t sub_1000500C4()
{
  _QWORD *v0;

  swift_bridgeObjectRelease(v0[3]);
  swift_release(v0[5]);
  swift_bridgeObjectRelease(v0[8]);
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1000500F8()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 32))(*(unsigned __int8 *)(v0 + 48));
}

void sub_100050120(uint64_t a1@<X8>)
{
  uint64_t v1;

  sub_10004FB84(*(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

unint64_t sub_10005012C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319780;
  if (!qword_100319780)
  {
    v1 = sub_100007FAC(&qword_100319778);
    sub_100050198();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319780);
  }
  return result;
}

unint64_t sub_100050198()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319788;
  if (!qword_100319788)
  {
    v1 = sub_100007FAC(&qword_100319790);
    sub_100038540();
    sub_1000084FC(&qword_100316BF0, &qword_100316BF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319788);
  }
  return result;
}

void sub_100050234(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100050264()
{
  id v0;
  Swift::String v1;
  Swift::String_optional v2;
  Swift::String v3;
  uint64_t countAndFlagsBits;
  Swift::String v6;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v6._object = (void *)0x8000000100264950;
  v1._countAndFlagsBits = 0x6553206F74206F47;
  v1._object = (void *)0xEE0073676E697474;
  v2.value._countAndFlagsBits = 0x5072656972726143;
  v2.value._object = (void *)0xED00006E6F656769;
  v3._countAndFlagsBits = 0;
  v3._object = (void *)0xE000000000000000;
  v6._countAndFlagsBits = 0xD000000000000029;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, v2, (NSBundle)v0, v3, v6)._countAndFlagsBits;

  return countAndFlagsBits;
}

_QWORD *sub_1000504BC(uint64_t a1)
{
  int64_t v1;
  char *v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    sub_10017E35C(0, v1, 0);
    v3 = (char *)(a1 + 32);
    do
    {
      v5 = *v3++;
      v4 = v5;
      sub_100050234(v5);
      v7 = v6;
      v9 = v8;
      v11 = _swiftEmptyArrayStorage[2];
      v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1)
        sub_10017E35C(v10 > 1, v11 + 1, 1);
      _swiftEmptyArrayStorage[2] = v11 + 1;
      v12 = &_swiftEmptyArrayStorage[3 * v11];
      *((_BYTE *)v12 + 32) = v4;
      v12[5] = v7;
      v12[6] = v9;
      --v1;
    }
    while (v1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t destroy for QuestionnairePolicy(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
}

uint64_t _s8SOSBuddy22ExplorerSuggestionViewV18ActionPresentationVwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for ExplorerSuggestionView.ActionPresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for ExplorerSuggestionView.ActionPresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExplorerSuggestionView.ActionPresentation(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 24))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExplorerSuggestionView.ActionPresentation(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 24) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExplorerSuggestionView.ActionPresentation()
{
  return &type metadata for ExplorerSuggestionView.ActionPresentation;
}

unint64_t sub_100050700()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319798;
  if (!qword_100319798)
  {
    v1 = sub_100007FAC(&qword_1003196F0);
    sub_1000084FC(&qword_1003197A0, &qword_1003196E0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319798);
  }
  return result;
}

uint64_t destroy for QuestionnaireBackToPreviousPageView(_QWORD *a1)
{
  uint64_t result;

  swift_release(*a1);
  swift_release(a1[2]);
  result = a1[4];
  if (result)
  {
    swift_release(result);
    return swift_bridgeObjectRelease(a1[6]);
  }
  return result;
}

uint64_t initializeWithCopy for QuestionnaireBackToPreviousPageView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2[2];
  *(_QWORD *)(a1 + 16) = v6;
  *(_BYTE *)(a1 + 24) = *((_BYTE *)a2 + 24);
  v8 = a2 + 4;
  v7 = a2[4];
  swift_retain(v4);
  swift_retain(v6);
  if (v7)
  {
    v9 = a2[5];
    v10 = a2[6];
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = v10;
    swift_retain(v7);
    swift_bridgeObjectRetain(v10);
  }
  else
  {
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v8;
    *(_QWORD *)(a1 + 48) = v8[2];
  }
  return a1;
}

uint64_t *assignWithCopy for QuestionnaireBackToPreviousPageView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a1 + 4;
  v9 = a1[4];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  v11 = a2 + 4;
  v10 = a2[4];
  if (v9)
  {
    if (v10)
    {
      a1[4] = v10;
      swift_retain(v10);
      swift_release(v9);
      a1[5] = a2[5];
      v12 = a2[6];
      v13 = a1[6];
      a1[6] = v12;
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRelease(v13);
    }
    else
    {
      sub_100050978(a1 + 4);
      v15 = a2[6];
      *v8 = *v11;
      a1[6] = v15;
    }
  }
  else if (v10)
  {
    a1[4] = v10;
    a1[5] = a2[5];
    v14 = a2[6];
    a1[6] = v14;
    swift_retain(v10);
    swift_bridgeObjectRetain(v14);
  }
  else
  {
    v16 = *v11;
    a1[6] = a2[6];
    *v8 = v16;
  }
  return a1;
}

_QWORD *sub_100050978(_QWORD *a1)
{
  destroy for QuestionnaireNavigationPageForQuestion(a1);
  return a1;
}

uint64_t *assignWithTake for QuestionnaireBackToPreviousPageView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_release(v6);
  v7 = a2[4];
  v8 = a1[4];
  *((_BYTE *)a1 + 24) = *((_BYTE *)a2 + 24);
  if (!v8)
    goto LABEL_5;
  if (!v7)
  {
    sub_100050978(a1 + 4);
LABEL_5:
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    a1[6] = a2[6];
    return a1;
  }
  a1[4] = v7;
  swift_release(v8);
  v9 = a2[6];
  v10 = a1[6];
  a1[5] = a2[5];
  a1[6] = v9;
  swift_bridgeObjectRelease(v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionnaireBackToPreviousPageView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnaireBackToPreviousPageView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionnaireBackToPreviousPageView()
{
  return &type metadata for QuestionnaireBackToPreviousPageView;
}

uint64_t sub_100050AF0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002961A4, 1);
}

uint64_t sub_100050B00@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t KeyPath;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD v62[3];
  uint64_t v63;
  uint64_t v64;

  v61 = a1;
  v2 = type metadata accessor for ControlSize(0);
  v59 = *(_QWORD *)(v2 - 8);
  v60 = v2;
  __chkstk_darwin(v2, v3);
  v58 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for CircularProgressViewStyle(0);
  v54 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v6);
  v8 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_100003DB8(&qword_100316B28);
  v53 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = sub_100003DB8(&qword_100316B30);
  v55 = *(_QWORD *)(v57 - 8);
  __chkstk_darwin(v57, v13);
  v15 = (char *)&v53 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003DB8(&qword_1003197A8);
  __chkstk_darwin(v16, v17);
  v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100003DB8(&qword_1003197B0);
  __chkstk_darwin(v56, v20);
  v22 = (char *)&v53 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = (_QWORD *)*v1;
  if (*v1)
  {
    v24 = v23[9];
    v25 = v23[10];
    sub_100007BBC(v23 + 6, v24);
    v26 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v25 + 24))(v62, v24, v25);
    *(_QWORD *)v19 = static HorizontalAlignment.center.getter(v26);
    *((_QWORD *)v19 + 1) = 0;
    v19[16] = 1;
    v27 = &v19[*(int *)(sub_100003DB8(&qword_1003197B8) + 44)];
    v28 = ProgressView<>.init<>()();
    CircularProgressViewStyle.init()(v28);
    v29 = sub_1000084FC(&qword_100316C20, &qword_100316B28, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    v30 = sub_1000052EC(&qword_100316C28, (uint64_t (*)(uint64_t))&type metadata accessor for CircularProgressViewStyle, (uint64_t)&protocol conformance descriptor for CircularProgressViewStyle);
    View.progressViewStyle<A>(_:)(v8, v9, v5, v29, v30);
    (*(void (**)(char *, uint64_t))(v54 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v12, v9);
    v32 = v58;
    v31 = v59;
    v33 = v60;
    (*(void (**)(char *, _QWORD, uint64_t))(v59 + 104))(v58, enum case for ControlSize.regular(_:), v60);
    KeyPath = swift_getKeyPath(&unk_10024FAB8);
    v35 = (uint64_t *)&v27[*(int *)(sub_100003DB8(&qword_100316B38) + 36)];
    v36 = sub_100003DB8(&qword_100316C38);
    (*(void (**)(char *, char *, uint64_t))(v31 + 16))((char *)v35 + *(int *)(v36 + 28), v32, v33);
    *v35 = KeyPath;
    v37 = v55;
    v38 = v57;
    (*(void (**)(char *, char *, uint64_t))(v55 + 16))(v27, v15, v57);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v33);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v38);
    v39 = v63;
    v40 = v64;
    sub_100007BBC(v62, v63);
    v41 = (*(double (**)(uint64_t, uint64_t))(v40 + 24))(v39, v40);
    v43 = v42;
    v45 = v44;
    v47 = v46;
    LOBYTE(v39) = static Edge.Set.all.getter(v41);
    sub_100050F24((uint64_t)v19, (uint64_t)v22);
    v48 = &v22[*(int *)(v56 + 36)];
    *v48 = v39;
    *((double *)v48 + 1) = v41;
    *((_QWORD *)v48 + 2) = v43;
    *((_QWORD *)v48 + 3) = v45;
    *((_QWORD *)v48 + 4) = v47;
    v48[40] = 0;
    sub_100050F6C((uint64_t)v19);
    sub_100050FAC((uint64_t)v22, v61);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v62);
  }
  else
  {
    v50 = v1[1];
    v51 = type metadata accessor for UIMetrics();
    v52 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v50, v51, v52);
    __break(1u);
  }
  return result;
}

uint64_t sub_100050F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_1003197A8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100050F6C(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003DB8(&qword_1003197A8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100050FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_1003197B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100050FF8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1003197C0;
  if (!qword_1003197C0)
  {
    v1 = sub_100007FAC(&qword_1003197B0);
    sub_1000084FC(&qword_1003197C8, &qword_1003197A8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003197C0);
  }
  return result;
}

uint64_t sub_10005107C(uint64_t a1)
{
  return sub_100051164(a1, (SEL *)&selRef_systemGrayColor, (uint64_t (*)(id))&Color.init(uiColor:), &qword_10033FC20);
}

uint64_t sub_100051098()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;

  type metadata accessor for Color.RGBColorSpace(0);
  __chkstk_darwin();
  v1 = (char *)&v4 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD))(v2 + 104))(v1, enum case for Color.RGBColorSpace.sRGB(_:));
  result = Color.init(_:red:green:blue:opacity:)(v1, 0.549019608, 0.549019608, 0.576470588, 1.0);
  qword_10033FC28 = result;
  return result;
}

uint64_t sub_10005112C(uint64_t a1)
{
  return sub_100051164(a1, (SEL *)&selRef_systemGray3Color, (uint64_t (*)(id))&Color.init(_:), &qword_10033FC30);
}

uint64_t sub_100051148(uint64_t a1)
{
  return sub_100051164(a1, (SEL *)&selRef_secondaryLabelColor, (uint64_t (*)(id))&Color.init(_:), &qword_10033FC38);
}

uint64_t sub_100051164(uint64_t a1, SEL *a2, uint64_t (*a3)(id), uint64_t *a4)
{
  id v6;
  uint64_t result;

  v6 = objc_msgSend((id)objc_opt_self(UIColor), *a2);
  result = a3(v6);
  *a4 = result;
  return result;
}

ValueMetadata *type metadata accessor for BuiltInQuestionFooterView()
{
  return &type metadata for BuiltInQuestionFooterView;
}

uint64_t sub_1000511C4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002961E8, 1);
}

void sub_1000511D4(uint64_t a1)
{
  __asm { BR              X10 }
}

double sub_100051220()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27;
  double result;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  __int16 v33;
  char v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unsigned __int8 v40;
  char v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int16 v47;
  char v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  __int16 v54;
  char v55;

  v4 = type metadata accessor for AppEvents();
  v5 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  swift_retain(v1);
  swift_retain(v3);
  v6 = EnvironmentObject.init()(v4, v5);
  v8 = v7;
  v9 = type metadata accessor for UIMetrics();
  v10 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  v11 = EnvironmentObject.init()(v9, v10);
  v13 = v12;
  v14 = v3;
  v15 = type metadata accessor for QuestionnaireState();
  v16 = sub_1000052EC(&qword_100316A18, (uint64_t (*)(uint64_t))type metadata accessor for QuestionnaireState, (uint64_t)&unk_10024D2FC);
  v17 = EnvironmentObject.init()(v15, v16);
  *(_QWORD *)&v49 = v6;
  *((_QWORD *)&v49 + 1) = v8;
  *(_QWORD *)&v50 = v11;
  *((_QWORD *)&v50 + 1) = v13;
  *(_QWORD *)&v51 = v17;
  *((_QWORD *)&v51 + 1) = v18;
  *(_QWORD *)&v52 = v1;
  *((_QWORD *)&v52 + 1) = v2;
  v53 = v14;
  LOBYTE(v54) = 0;
  v19 = sub_100047E60();
  v20 = sub_100051BC4();
  swift_retain(v6);
  swift_retain(v11);
  swift_retain(v17);
  swift_retain(v1);
  swift_retain(v14);
  _ConditionalContent<>.init(storage:)(&v49, &type metadata for DefaultQuestionFooterView, &type metadata for BuiltInSelectRoadsidePhoneNumberFooterView, v19, v20);
  v49 = v42;
  v50 = v43;
  v51 = v44;
  v52 = v45;
  v53 = v46;
  LOBYTE(v54) = v47;
  HIBYTE(v54) = 1;
  v21 = sub_100003DB8(&qword_1003197E8);
  v22 = sub_100003DB8(&qword_100319808);
  v23 = sub_100051AF4();
  v24 = sub_100051BA0();
  _ConditionalContent<>.init(storage:)(&v49, v21, v22, v23, v24);
  if (v41)
    v25 = 256;
  else
    v25 = 0;
  v42 = v35;
  v43 = v36;
  v44 = v37;
  v45 = v38;
  v46 = v39;
  v47 = v25 | v40;
  v48 = 0;
  v26 = sub_100003DB8(&qword_1003197D0);
  v27 = sub_100008140(&qword_1003197D8, &qword_1003197D0, (void (*)(void))sub_100051AF4, (void (*)(void))sub_100051BA0);
  _ConditionalContent<>.init(storage:)(&v42, v26, &type metadata for EmptyView, v27, &protocol witness table for EmptyView);
  swift_release(v14);
  swift_release(v1);
  swift_release(v17);
  swift_release(v11);
  swift_release(v6);
  result = *(double *)&v49;
  v29 = v50;
  v30 = v51;
  v31 = v52;
  v32 = v53;
  v33 = v54;
  v34 = v55;
  *(_OWORD *)v0 = v49;
  *(_OWORD *)(v0 + 16) = v29;
  *(_OWORD *)(v0 + 32) = v30;
  *(_OWORD *)(v0 + 48) = v31;
  *(_QWORD *)(v0 + 64) = v32;
  *(_WORD *)(v0 + 72) = v33;
  *(_BYTE *)(v0 + 74) = v34;
  return result;
}

void sub_100051A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, __int128 a19, __int128 a20,__int128 a21,__int128 a22,uint64_t a23,__int16 a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  *(__int128 *)((char *)&a22 + 10) = 0u;
  a21 = 0u;
  a22 = 0u;
  a19 = 0u;
  a20 = 0u;
  a25 = 1;
  v25 = sub_100003DB8(&qword_1003197D0);
  v26 = sub_100008140(&qword_1003197D8, &qword_1003197D0, (void (*)(void))sub_100051AF4, (void (*)(void))sub_100051BA0);
  _ConditionalContent<>.init(storage:)(&a19, v25, &type metadata for EmptyView, v26, &protocol witness table for EmptyView);
  JUMPOUT(0x100051A2CLL);
}

void sub_100051AE8()
{
  uint64_t *v0;

  sub_1000511D4(*v0);
}

uint64_t sub_100051AF4()
{
  return sub_100008140(&qword_1003197E0, &qword_1003197E8, (void (*)(void))sub_100051B18, (void (*)(void))sub_100051B5C);
}

unint64_t sub_100051B18()
{
  unint64_t result;

  result = qword_1003197F0;
  if (!qword_1003197F0)
  {
    result = swift_getWitnessTable(&unk_100257888, &type metadata for BuiltInNotifyContactsConsentFooterView);
    atomic_store(result, (unint64_t *)&qword_1003197F0);
  }
  return result;
}

unint64_t sub_100051B5C()
{
  unint64_t result;

  result = qword_1003197F8;
  if (!qword_1003197F8)
  {
    result = swift_getWitnessTable(&unk_100258564, &type metadata for BuiltInSwitchToEmergencyFooterView);
    atomic_store(result, (unint64_t *)&qword_1003197F8);
  }
  return result;
}

uint64_t sub_100051BA0()
{
  return sub_100008140(&qword_100319800, &qword_100319808, (void (*)(void))sub_100047E60, (void (*)(void))sub_100051BC4);
}

unint64_t sub_100051BC4()
{
  unint64_t result;

  result = qword_100319810;
  if (!qword_100319810)
  {
    result = swift_getWitnessTable(&unk_10025ECCC, &type metadata for BuiltInSelectRoadsidePhoneNumberFooterView);
    atomic_store(result, (unint64_t *)&qword_100319810);
  }
  return result;
}

unint64_t sub_100051C0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319818;
  if (!qword_100319818)
  {
    v1 = sub_100007FAC(&qword_100319820);
    sub_100008140(&qword_1003197D8, &qword_1003197D0, (void (*)(void))sub_100051AF4, (void (*)(void))sub_100051BA0);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319818);
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionnaireIntroductionView()
{
  return &type metadata for QuestionnaireIntroductionView;
}

uint64_t sub_100051CA8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100296248, 1);
}

uint64_t sub_100051CB8@<X0>(void *a1@<X8>)
{
  uint64_t v1;
  _OWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  __int128 v8;
  _OWORD *v9;
  __int128 v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  char v16;
  uint64_t v17;
  _QWORD __src[47];
  _QWORD v19[5];
  __int128 v20;
  __int128 v21;

  v2 = (_OWORD *)v1;
  v3 = *(_QWORD **)(v1 + 32);
  if (v3)
  {
    v5 = v3[9];
    v6 = v3[10];
    sub_100007BBC(v3 + 6, v5);
    v7 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 24))(v19, v5, v6);
    v15[0] = static HorizontalAlignment.center.getter(v7);
    v15[1] = 0;
    v16 = 0;
    sub_100051E2C((__int128 *)v1, (uint64_t)v19, (uint64_t)&v17);
    v8 = *(_OWORD *)v1;
    v20 = *(_OWORD *)(v1 + 16);
    v21 = v8;
    v9 = (_OWORD *)swift_allocObject(&unk_1002E7B88, 64, 7);
    v10 = v2[1];
    v9[1] = *v2;
    v9[2] = v10;
    v9[3] = v2[2];
    sub_10000B234((uint64_t)v15, (uint64_t)__src, &qword_100319828);
    __src[43] = sub_1000548C4;
    __src[44] = v9;
    __src[46] = 0;
    __src[45] = 0;
    sub_100031A88(&v21);
    sub_100031A88(&v20);
    swift_retain(v3);
    sub_100007FF0((uint64_t)v15, &qword_100319828);
    memcpy(a1, __src, 0x178uLL);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v19);
  }
  else
  {
    v12 = *(_QWORD *)(v1 + 40);
    v13 = type metadata accessor for UIMetrics();
    v14 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v12, v13, v14);
    __break(1u);
  }
  return result;
}

uint64_t *sub_100051E2C@<X0>(__int128 *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  __int128 v10;
  _OWORD *v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t *result;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[136];
  __int128 v28[11];
  uint64_t v29;
  __int128 v30[11];
  uint64_t v31;
  _BYTE v32[128];
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v6 = *a1;
  v8 = *((_QWORD *)a1 + 2);
  v7 = *((_QWORD *)a1 + 3);
  v46 = a1[2];
  v47 = v6;
  sub_100007CBC(a2, (uint64_t)v30);
  v9 = (_OWORD *)swift_allocObject(&unk_1002E7BB0, 104, 7);
  v10 = a1[1];
  v9[1] = *a1;
  v9[2] = v10;
  v9[3] = a1[2];
  sub_100007D04(v30, (uint64_t)(v9 + 4));
  sub_100007CBC(a2, (uint64_t)v28);
  v11 = (_OWORD *)swift_allocObject(&unk_1002E7BD8, 104, 7);
  v12 = a1[1];
  v11[1] = *a1;
  v11[2] = v12;
  v11[3] = a1[2];
  sub_100007D04(v28, (uint64_t)(v11 + 4));
  sub_100031A88(&v47);
  swift_retain(v8);
  sub_100031A88(&v46);
  sub_100031A88(&v47);
  swift_retain(v8);
  sub_100031A88(&v46);
  sub_10012E328(&v34, ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter, 0, sub_1000548D0, v9, sub_10005494C, v11, 0);
  if (v8)
  {
    v13 = *(_QWORD *)(v8 + 88);
    if (v13)
    {
      v48 = *(_QWORD *)(v8 + 88);
      v49 = 1;
      v51 = 0;
      v52 = 0;
      v50 = 0;
      swift_retain(v13);
      sub_1000DDB6C((uint64_t)&v48, (uint64_t)v32);
    }
    else
    {
      v33 = 0;
      memset(v32, 0, sizeof(v32));
    }
    sub_10000B234((uint64_t)v32, (uint64_t)v27, &qword_100319830);
    v14 = v43;
    v28[8] = v42;
    v28[9] = v43;
    v15 = v44;
    v28[10] = v44;
    v16 = v38;
    v17 = v39;
    v28[4] = v38;
    v28[5] = v39;
    v18 = v40;
    v19 = v41;
    v28[6] = v40;
    v28[7] = v41;
    v20 = v34;
    v21 = v35;
    v28[0] = v34;
    v28[1] = v35;
    v22 = v36;
    v23 = v37;
    v28[2] = v36;
    v28[3] = v37;
    *(_OWORD *)(a3 + 128) = v42;
    *(_OWORD *)(a3 + 144) = v14;
    *(_OWORD *)(a3 + 160) = v15;
    *(_OWORD *)(a3 + 64) = v16;
    *(_OWORD *)(a3 + 80) = v17;
    *(_OWORD *)(a3 + 96) = v18;
    *(_OWORD *)(a3 + 112) = v19;
    *(_OWORD *)a3 = v20;
    *(_OWORD *)(a3 + 16) = v21;
    v29 = v45;
    *(_QWORD *)(a3 + 176) = v45;
    *(_OWORD *)(a3 + 32) = v22;
    *(_OWORD *)(a3 + 48) = v23;
    sub_10000B234((uint64_t)v27, a3 + 184, &qword_100319830);
    sub_100007DC0((uint64_t *)v28);
    sub_100007FF0((uint64_t)v32, &qword_100319830);
    sub_100007FF0((uint64_t)v27, &qword_100319830);
    v30[8] = v42;
    v30[9] = v43;
    v30[10] = v44;
    v31 = v45;
    v30[4] = v38;
    v30[5] = v39;
    v30[6] = v40;
    v30[7] = v41;
    v30[0] = v34;
    v30[1] = v35;
    v30[2] = v36;
    v30[3] = v37;
    return sub_100007E9C((uint64_t *)v30);
  }
  else
  {
    v25 = type metadata accessor for EmergencyModel();
    v26 = sub_1000052EC(&qword_100318690, (uint64_t (*)(uint64_t))type metadata accessor for EmergencyModel, (uint64_t)&unk_10024D2FC);
    result = (uint64_t *)EnvironmentObject.error()(0, v7, v25, v26);
    __break(1u);
  }
  return result;
}

uint64_t sub_1000521A8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  char v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  double v46;
  double v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  UIContentSizeCategory v92;
  char v93;
  uint64_t KeyPath;
  id v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  BOOL v106;
  uint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  double v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  id v126;
  Swift::String v127;
  Swift::String v128;
  Swift::String v129;
  id v130;
  Swift::String v131;
  Swift::String v132;
  Swift::String v133;
  id v134;
  Swift::String v135;
  Swift::String v136;
  Swift::String v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t result;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  UIContentSizeCategory v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  uint64_t v162;
  char *v163;
  uint64_t *v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  __int128 v170;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  _OWORD v181[2];
  char v182;
  _BYTE v183[7];
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  _OWORD v195[3];
  _OWORD v196[10];
  uint64_t v197;
  uint64_t v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  BOOL v202;
  Swift::String v203;
  Swift::String v204;
  Swift::String v205;

  v169 = a2;
  v165 = a3;
  v4 = sub_100003DB8(&qword_1003198D0);
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v152 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (uint64_t *)((char *)&v152 - v10);
  v12 = type metadata accessor for AccessibilityTraits(0);
  v159 = *(_QWORD *)(v12 - 8);
  v160 = v12;
  __chkstk_darwin(v12, v13);
  v158 = (char *)&v152 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003DB8(&qword_1003198D8);
  v17 = __chkstk_darwin(v15, v16);
  v19 = (char *)&v152 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __chkstk_darwin(v17, v20);
  v161 = (char *)&v152 - v22;
  __chkstk_darwin(v21, v23);
  v168 = (uint64_t)&v152 - v24;
  v25 = type metadata accessor for Image.ResizingMode(0);
  v26 = *(_QWORD *)(v25 - 8);
  __chkstk_darwin(v25, v27);
  v29 = (char *)&v152 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100003DB8(&qword_1003198E0);
  v32 = __chkstk_darwin(v30, v31);
  v162 = (uint64_t)&v152 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32, v34);
  v167 = (uint64_t)&v152 - v35;
  v36 = *(_QWORD *)(a1 + 32);
  if (v36)
  {
    v156 = *(_QWORD *)(a1 + 32);
    v37 = *(id *)(v36 + 112);
    v157 = UIContentSizeCategoryAccessibilityExtraLarge;
    v38 = static UIContentSizeCategory.>= infix(_:_:)(v37, UIContentSizeCategoryAccessibilityExtraLarge);

    v166 = v8;
    v163 = v19;
    v164 = v11;
    if ((v38 & 1) != 0)
    {
      v39 = sub_100003DB8(&qword_100319908);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v167, 1, 1, v39);
      v40 = v169;
    }
    else
    {
      v41 = Image.init(_:bundle:)(0xD000000000000021, 0x8000000100264C10, 0);
      (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v29, enum case for Image.ResizingMode.stretch(_:), v25);
      v42 = Image.resizable(capInsets:resizingMode:)(v29, v41, 0.0, 0.0, 0.0, 0.0);
      swift_release(v41);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v29, v25);
      v40 = v169;
      v43 = v169[3];
      v44 = v169[4];
      sub_100007BBC(v169, v43);
      v45 = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 32))(v43, v44);
      v47 = v46;
      v48 = static Alignment.center.getter(v45);
      sub_100131D14(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)&v184, 0.0, 1, v47, 0, v48, v49, v42, 0, 1);
      swift_release(v42);
      v176 = v190;
      v177 = v191;
      *(_QWORD *)&v178 = v192;
      v172 = v186;
      v173 = v187;
      v174 = v188;
      v175 = v189;
      v170 = v184;
      v171 = v185;
      v50 = v40[3];
      v51 = v40[4];
      sub_100007BBC(v40, v50);
      v52 = (*(double (**)(uint64_t, uint64_t))(v51 + 40))(v50, v51);
      v54 = v53;
      v56 = v55;
      v58 = v57;
      v59 = static Edge.Set.all.getter(v52);
      v190 = v176;
      v191 = v177;
      *(_QWORD *)&v192 = v178;
      v186 = v172;
      v187 = v173;
      v188 = v174;
      v189 = v175;
      v184 = v170;
      v185 = v171;
      LOBYTE(v197) = 0;
      BYTE8(v192) = v59;
      *(_DWORD *)((char *)&v192 + 9) = v196[0];
      HIDWORD(v192) = *(_DWORD *)((char *)v196 + 3);
      *(double *)&v193 = v52;
      *((_QWORD *)&v193 + 1) = v54;
      *(_QWORD *)&v194 = v56;
      *((_QWORD *)&v194 + 1) = v58;
      LOBYTE(v195[0]) = 0;
      v60 = sub_100003DB8(&qword_1003198E8);
      v61 = sub_10002B614(&qword_1003198F0, &qword_1003198E8, (void (*)(void))sub_1000557A4);
      v62 = v167;
      View.accessibility(hidden:)(1, v60, v61);
      sub_100042AD0(&v170);
      v63 = sub_100003DB8(&qword_100319908);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v62, 0, 1, v63);
    }
    v64 = LocalizedStringKey.init(stringLiteral:)(0xD00000000000001BLL, 0x8000000100262220);
    v65 = Text.init(_:tableName:bundle:comment:)(v64);
    v67 = v66;
    v69 = v68;
    v71 = v70 & 1;
    v72 = v40[3];
    v73 = v40[4];
    sub_100007BBC(v40, v72);
    v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 64))(v72, v73);
    v75 = Text.font(_:)(v74, v65, v67, v71, v69);
    v77 = v76;
    LOBYTE(v73) = v78;
    v153 = v79;
    swift_release(v74);
    v80 = v73 & 1;
    sub_10002B438(v65, v67, v71);
    swift_bridgeObjectRelease(v69);
    v81 = v40[3];
    v82 = v40[4];
    sub_100007BBC(v40, v81);
    v83 = (*(uint64_t (**)(uint64_t, uint64_t))(v82 + 56))(v81, v82);
    v84 = v153;
    v155 = Text.foregroundColor(_:)(v83, v75, v77, v80, v153);
    v86 = v85;
    v154 = v87;
    v89 = v88;
    swift_release(v83);
    sub_10002B438(v75, v77, v80);
    swift_bridgeObjectRelease(v84);
    v90 = v156;
    v91 = *(id *)(v156 + 112);
    v92 = v157;
    v93 = static UIContentSizeCategory.>= infix(_:_:)(v91, v157);

    KeyPath = swift_getKeyPath(&unk_10024FC00);
    v95 = *(id *)(v90 + 112);
    v96 = static Alignment.center.getter(v95);
    v98 = v97;
    v99 = static UIContentSizeCategory.>= infix(_:_:)(v95, v92);
    if ((v99 & 1) != 0)
    {
      v100 = static Alignment.center.getter(v99);
      v102 = static Alignment.== infix(_:_:)(v96, v98, v100, v101);
      if ((v102 & 1) != 0)
      {
        v96 = static Alignment.leading.getter(v102, v103);
        v98 = v104;
      }
    }

    v105 = v154 & 1;
    v106 = (v93 & 1) == 0;
    v107 = v155;
    v197 = v155;
    v198 = v86;
    v199 = v154 & 1;
    v200 = v89;
    v201 = KeyPath;
    v202 = v106;
    sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v196, 0.0, 1, 0.0, 1, v96, v98);
    sub_10002B438(v107, v86, v105);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v89);
    v108 = v169;
    v109 = v169[3];
    v110 = v169[4];
    sub_100007BBC(v169, v109);
    v111 = (*(double (**)(uint64_t, uint64_t))(v110 + 48))(v109, v110);
    v113 = v112;
    v115 = v114;
    v117 = v116;
    v118 = static Edge.Set.all.getter(v111);
    v182 = 0;
    v176 = v196[6];
    v177 = v196[7];
    v178 = v196[8];
    v179 = v196[9];
    v172 = v196[2];
    v173 = v196[3];
    v174 = v196[4];
    v175 = v196[5];
    v170 = v196[0];
    v171 = v196[1];
    LOBYTE(v180) = v118;
    *(_DWORD *)((char *)&v180 + 1) = *(_DWORD *)v183;
    DWORD1(v180) = *(_DWORD *)&v183[3];
    *((double *)&v180 + 1) = v111;
    *(_QWORD *)&v181[0] = v113;
    *((_QWORD *)&v181[0] + 1) = v115;
    *(_QWORD *)&v181[1] = v117;
    BYTE8(v181[1]) = 0;
    v119 = v158;
    static AccessibilityTraits.isHeader.getter();
    v120 = sub_100003DB8(&qword_100319910);
    v121 = sub_10002B614(&qword_100319918, &qword_100319910, (void (*)(void))sub_10002B5F0);
    v122 = (uint64_t)v161;
    View.accessibility(addTraits:)(v119, v120, v121);
    (*(void (**)(char *, uint64_t))(v159 + 8))(v119, v160);
    v194 = v180;
    v195[0] = v181[0];
    *(_OWORD *)((char *)v195 + 9) = *(_OWORD *)((char *)v181 + 9);
    v190 = v176;
    v191 = v177;
    v192 = v178;
    v193 = v179;
    v186 = v172;
    v187 = v173;
    v188 = v174;
    v189 = v175;
    v184 = v170;
    v185 = v171;
    sub_1000557C8((uint64_t)&v184);
    sub_10000B458(v122, v168, &qword_1003198D8);
    v123 = sub_100003DB8((uint64_t *)&unk_10031B300);
    v124 = swift_allocObject(v123, 80, 7);
    *(_OWORD *)(v124 + 16) = xmmword_10024FB80;
    v125 = (void *)objc_opt_self(NSBundle);
    v126 = objc_msgSend(v125, "mainBundle");
    v127._countAndFlagsBits = 0xD00000000000001FLL;
    v203._object = (void *)0x8000000100264C90;
    v127._object = (void *)0x8000000100264C70;
    v128._countAndFlagsBits = 0;
    v128._object = (void *)0xE000000000000000;
    v203._countAndFlagsBits = 0xD000000000000058;
    v129 = NSLocalizedString(_:tableName:bundle:value:comment:)(v127, (Swift::String_optional)0, (NSBundle)v126, v128, v203);

    *(Swift::String *)(v124 + 32) = v129;
    v130 = objc_msgSend(v125, "mainBundle");
    v131._countAndFlagsBits = 0xD000000000000022;
    v204._object = (void *)0x8000000100264C90;
    v131._object = (void *)0x8000000100264CF0;
    v132._countAndFlagsBits = 0;
    v132._object = (void *)0xE000000000000000;
    v204._countAndFlagsBits = 0xD000000000000058;
    v133 = NSLocalizedString(_:tableName:bundle:value:comment:)(v131, (Swift::String_optional)0, (NSBundle)v130, v132, v204);

    *(Swift::String *)(v124 + 48) = v133;
    v134 = objc_msgSend(v125, "mainBundle");
    v135._countAndFlagsBits = 0xD00000000000002FLL;
    v205._object = (void *)0x8000000100264C90;
    v135._object = (void *)0x80000001002624D0;
    v136._countAndFlagsBits = 0;
    v136._object = (void *)0xE000000000000000;
    v205._countAndFlagsBits = 0xD000000000000058;
    v137 = NSLocalizedString(_:tableName:bundle:value:comment:)(v135, (Swift::String_optional)0, (NSBundle)v134, v136, v205);

    *(Swift::String *)(v124 + 64) = v137;
    v138 = static VerticalAlignment.top.getter();
    v139 = (uint64_t)v164;
    *v164 = v138;
    *(_QWORD *)(v139 + 8) = 0;
    *(_BYTE *)(v139 + 16) = 1;
    v140 = sub_100003DB8(&qword_100319920);
    sub_100052D10(v124, (uint64_t)v108, 10649826, 0xA300000000000000, v139 + *(int *)(v140 + 44));
    swift_bridgeObjectRelease(v124);
    v141 = v167;
    v142 = v162;
    sub_10000B234(v167, v162, &qword_1003198E0);
    v143 = v168;
    v144 = (uint64_t)v163;
    sub_10000B234(v168, (uint64_t)v163, &qword_1003198D8);
    v145 = (uint64_t)v166;
    sub_10000B234(v139, (uint64_t)v166, &qword_1003198D0);
    v146 = v165;
    sub_10000B234(v142, v165, &qword_1003198E0);
    v147 = sub_100003DB8(&qword_100319928);
    sub_10000B234(v144, v146 + *(int *)(v147 + 48), &qword_1003198D8);
    sub_10000B234(v145, v146 + *(int *)(v147 + 64), &qword_1003198D0);
    sub_100007FF0(v139, &qword_1003198D0);
    sub_100007FF0(v143, &qword_1003198D8);
    sub_100007FF0(v141, &qword_1003198E0);
    sub_100007FF0(v145, &qword_1003198D0);
    sub_100007FF0(v144, &qword_1003198D8);
    return sub_100007FF0(v142, &qword_1003198E0);
  }
  else
  {
    v149 = *(_QWORD *)(a1 + 40);
    v150 = type metadata accessor for UIMetrics();
    v151 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v149, v150, v151);
    __break(1u);
  }
  return result;
}

uint64_t sub_100052D10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t KeyPath;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v27[2];
  uint64_t v28;

  v10 = sub_100003DB8(&qword_100319930);
  v12 = __chkstk_darwin(v10, v11);
  v14 = (char *)v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v12, v15);
  v18 = (char *)v27 - v17;
  *(_QWORD *)v18 = static HorizontalAlignment.leading.getter(v16);
  *((_QWORD *)v18 + 1) = 0;
  v18[16] = 0;
  sub_100003DB8(&qword_100319938);
  v28 = a1;
  KeyPath = swift_getKeyPath(&unk_10024FCF8);
  sub_100007CBC(a2, (uint64_t)v27);
  v20 = swift_allocObject(&unk_1002E7C50, 72, 7);
  sub_100007D04(v27, v20 + 16);
  *(_QWORD *)(v20 + 56) = a3;
  *(_QWORD *)(v20 + 64) = a4;
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(a4);
  v21 = sub_100003DB8(&qword_100317980);
  v22 = sub_100003DB8(&qword_100319940);
  v23 = sub_1000084FC(&qword_100319618, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
  v24 = sub_1000084FC(&qword_100319948, &qword_100319940, (uint64_t)&protocol conformance descriptor for TupleView<A>);
  ForEach<>.init(_:id:content:)(&v28, KeyPath, sub_100055840, v20, v21, v22, v23, &protocol witness table for String, v24);
  sub_10000B234((uint64_t)v18, (uint64_t)v14, &qword_100319930);
  sub_10000B234((uint64_t)v14, a5, &qword_100319930);
  v25 = a5 + *(int *)(sub_100003DB8(&qword_100319950) + 48);
  *(_QWORD *)v25 = 0;
  *(_BYTE *)(v25 + 8) = 0;
  sub_100007FF0((uint64_t)v18, &qword_100319930);
  return sub_100007FF0((uint64_t)v14, &qword_100319930);
}

uint64_t sub_100052F20@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  double *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  char v60;
  char v61;
  char v62;
  char v63;
  char v64;
  char v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;

  v57 = a5;
  v9 = sub_100003DB8(&qword_100319958);
  v11 = __chkstk_darwin(v9, v10);
  v58 = (uint64_t)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (double *)((char *)&v47 - v15);
  v17 = *a1;
  v18 = a1[1];
  v19 = static VerticalAlignment.firstTextLineCenter.getter(v14);
  v21 = a2[3];
  v20 = a2[4];
  sub_100007BBC(a2, v21);
  v22 = (*(double (**)(uint64_t, uint64_t))(v20 + 72))(v21, v20);
  *(_QWORD *)v16 = v19;
  v16[1] = v22;
  *((_BYTE *)v16 + 16) = 0;
  v23 = sub_100003DB8(&qword_100319960);
  sub_1000532B8(a3, a4, a2, v17, v18, (uint64_t)v16 + *(int *)(v23 + 44));
  v24 = a2[3];
  v25 = a2[4];
  sub_100007BBC(a2, v24);
  v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 80))(v24, v25);
  v28 = v27;
  v29 = static Alignment.center.getter(v26);
  v31 = v30;
  v32.n128_u64[0] = 8.0;
  if (v28 < 8.0)
  {
    v33 = static os_log_type_t.fault.getter(v32);
    v34 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

  }
  _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v66, 0, 1, 0, 1, 0, 1, 0x4020000000000000, 0, 0, 1, *(_QWORD *)&v28, 0, v29, v31);
  v56 = v66;
  v55 = v68;
  v54 = v70;
  v53 = v72;
  v52 = v74;
  v51 = v76;
  v50 = v78;
  v49 = v79;
  v65 = 1;
  v64 = v67;
  v63 = v69;
  v62 = v71;
  v61 = v73;
  v60 = v75;
  v59 = v77;
  v35 = v58;
  v48 = v16;
  sub_10000B234((uint64_t)v16, v58, &qword_100319958);
  v36 = v65;
  v37 = v64;
  v38 = v63;
  v39 = v62;
  v40 = v61;
  v41 = v60;
  v42 = v59;
  v43 = v57;
  sub_10000B234(v35, v57, &qword_100319958);
  v44 = v43 + *(int *)(sub_100003DB8(&qword_100319968) + 48);
  *(_QWORD *)v44 = 0;
  *(_BYTE *)(v44 + 8) = v36;
  *(_QWORD *)(v44 + 16) = v56;
  *(_BYTE *)(v44 + 24) = v37;
  *(_QWORD *)(v44 + 32) = v55;
  *(_BYTE *)(v44 + 40) = v38;
  *(_QWORD *)(v44 + 48) = v54;
  *(_BYTE *)(v44 + 56) = v39;
  *(_QWORD *)(v44 + 64) = v53;
  *(_BYTE *)(v44 + 72) = v40;
  *(_QWORD *)(v44 + 80) = v52;
  *(_BYTE *)(v44 + 88) = v41;
  *(_QWORD *)(v44 + 96) = v51;
  *(_BYTE *)(v44 + 104) = v42;
  v45 = v49;
  *(_QWORD *)(v44 + 112) = v50;
  *(_QWORD *)(v44 + 120) = v45;
  sub_100007FF0((uint64_t)v48, &qword_100319958);
  return sub_100007FF0(v35, &qword_100319958);
}

uint64_t sub_1000532B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t (*v27)(uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  __n128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t KeyPath;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v76;
  uint64_t (*v77)(uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  uint64_t v89;

  v81 = a4;
  v82 = a5;
  v84 = a6;
  v9 = sub_100003DB8(&qword_100319970);
  v11 = __chkstk_darwin(v9, v10);
  v83 = (uint64_t)&v76 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v13);
  v85 = (uint64_t)&v76 - v14;
  v86 = a1;
  v87 = a2;
  v15 = sub_10002B3F4();
  v80 = v15;
  v16 = swift_bridgeObjectRetain(a2);
  v17 = Text.init<A>(_:)(&v86, &type metadata for String, v15, v16);
  v19 = v18;
  v21 = v20;
  v23 = v22 & 1;
  v24 = a3[3];
  v25 = a3[4];
  v79 = v24;
  v26 = sub_100007BBC(a3, v24);
  v78 = v25;
  v27 = *(uint64_t (**)(uint64_t, uint64_t))(v25 + 88);
  v76 = v26;
  v77 = v27;
  v28 = v27(v24, v25);
  v29 = Text.font(_:)(v28, v17, v19, v23, v21);
  v31 = v30;
  LOBYTE(v24) = v32;
  v34 = v33;
  swift_release(v28);
  v35 = v24 & 1;
  sub_10002B438(v17, v19, v23);
  swift_bridgeObjectRelease(v21);
  v36 = a3[3];
  v37 = a3[4];
  sub_100007BBC(a3, v36);
  v38 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 56))(v36, v37);
  v39 = Text.foregroundColor(_:)(v38, v29, v31, v35, v34);
  v41 = v40;
  LOBYTE(v21) = v42;
  v44 = v43;
  swift_release(v38);
  LOBYTE(v21) = v21 & 1;
  sub_10002B438(v29, v31, v35);
  swift_bridgeObjectRelease(v34);
  v86 = v39;
  v87 = v41;
  v88 = v21;
  v89 = v44;
  View.accessibility(hidden:)(1, &type metadata for Text, &protocol witness table for Text);
  sub_10002B438(v39, v41, v21);
  swift_bridgeObjectRelease(v44);
  v86 = v81;
  v87 = v82;
  v45 = swift_bridgeObjectRetain(v82);
  v46 = Text.init<A>(_:)(&v86, &type metadata for String, v80, v45);
  v48 = v47;
  v50 = v49;
  v52 = v51 & 1;
  v53 = v77(v79, v78);
  v54 = Text.font(_:)(v53, v46, v48, v52, v50);
  v56 = v55;
  LOBYTE(v29) = v57;
  v59 = v58;
  swift_release(v53);
  v60 = v29 & 1;
  sub_10002B438(v46, v48, v52);
  swift_bridgeObjectRelease(v50);
  v61 = a3[3];
  v62 = a3[4];
  sub_100007BBC(a3, v61);
  v63 = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 56))(v61, v62);
  v64 = Text.foregroundColor(_:)(v63, v54, v56, v60, v59);
  v66 = v65;
  LOBYTE(v50) = v67;
  v69 = v68;
  swift_release(v63);
  sub_10002B438(v54, v56, v60);
  swift_bridgeObjectRelease(v59);
  KeyPath = swift_getKeyPath(&unk_10024FC00);
  v71 = v85;
  v72 = v83;
  sub_10000B234(v85, v83, &qword_100319970);
  v73 = v84;
  sub_10000B234(v72, v84, &qword_100319970);
  v74 = v73 + *(int *)(sub_100003DB8(&qword_100319978) + 48);
  *(_QWORD *)v74 = v64;
  *(_QWORD *)(v74 + 8) = v66;
  *(_BYTE *)(v74 + 16) = v50 & 1;
  *(_QWORD *)(v74 + 24) = v69;
  *(_QWORD *)(v74 + 32) = KeyPath;
  *(_WORD *)(v74 + 40) = 0;
  *(_BYTE *)(v74 + 42) = 1;
  sub_10002B750(v64, v66, v50 & 1);
  swift_bridgeObjectRetain(v69);
  swift_retain(KeyPath);
  sub_100007FF0(v71, &qword_100319970);
  sub_10002B438(v64, v66, v50 & 1);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v69);
  return sub_100007FF0(v72, &qword_100319970);
}

uint64_t sub_100053694@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, void (*a5)(uint64_t, _QWORD *)@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  double v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v14 = sub_100003DB8(a3);
  v16 = __chkstk_darwin(v14, v15);
  v18 = (char *)&v30 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)v18 = static HorizontalAlignment.center.getter(v16);
  *((_QWORD *)v18 + 1) = 0;
  v18[16] = 0;
  sub_100003DB8(a4);
  a5(a1, a2);
  v19 = a2[3];
  v20 = a2[4];
  sub_100007BBC(a2, v19);
  v21 = (*(double (**)(uint64_t, uint64_t))(v20 + 24))(v19, v20);
  v23 = v22;
  v25 = v24;
  v27 = v26;
  LOBYTE(a5) = static Edge.Set.all.getter(v21);
  sub_10000B234((uint64_t)v18, a7, a3);
  v28 = a7 + *(int *)(sub_100003DB8(a6) + 36);
  *(_BYTE *)v28 = (_BYTE)a5;
  *(double *)(v28 + 8) = v21;
  *(_QWORD *)(v28 + 16) = v23;
  *(_QWORD *)(v28 + 24) = v25;
  *(_QWORD *)(v28 + 32) = v27;
  *(_BYTE *)(v28 + 40) = 0;
  return sub_100007FF0((uint64_t)v18, a3);
}

uint64_t sub_1000537C8@<X0>(__int128 *a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  Swift::String v51;
  Swift::String v52;
  unint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  id v82;
  char v83;
  uint64_t KeyPath;
  id v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char v95;
  BOOL v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  double v104;
  double v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  __int128 *v113;
  __int128 v114;
  __int128 v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  unint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  __n128 v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  double v166;
  double v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  __int128 v177;
  _OWORD *v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  uint64_t v185;
  uint64_t result;
  uint64_t v187;
  uint64_t v188;
  uint64_t (*v189)();
  unint64_t *v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  uint64_t v199;
  char *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char *v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  char *v223;
  char *v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  _QWORD *v229;
  _OWORD *v230;
  __int128 *v231;
  uint64_t v232;
  unsigned __int8 v233;
  _BYTE v234[7];
  char v235;
  _BYTE v236[7];
  _BYTE v237[7];
  _DWORD v238[2];
  __int128 v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  __int128 v243;
  __int128 v244;
  __int128 v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  __int128 v254;
  __int128 v255;
  __int128 v256;
  __int128 v257;
  __int128 v258;
  _OWORD v259[3];
  __int128 v260;
  _OWORD v261[2];
  _OWORD v262[10];
  char v263;
  _BYTE v264[7];
  __int128 v265;
  __int128 v266;
  char v267;
  _BYTE v268[7];
  char v269;
  _BYTE v270[7];
  double v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char v275;
  _OWORD v276[10];
  __int128 v277;
  uint64_t v278;
  uint64_t v279;
  char v280;
  uint64_t v281;
  uint64_t v282;
  BOOL v283;

  v230 = a3;
  v5 = type metadata accessor for KeyboardShortcut(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v193 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for ButtonBorderShape(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v193 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for BorderedProminentButtonStyle(0);
  v211 = *(_QWORD *)(v15 - 8);
  v212 = v15;
  __chkstk_darwin(v15, v16);
  v210 = (char *)&v193 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for ControlSize(0);
  v202 = *(_QWORD *)(v18 - 8);
  v203 = v18;
  __chkstk_darwin(v18, v19);
  v200 = (char *)&v193 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100003DB8(&qword_100319850);
  v198 = *(_QWORD *)(v21 - 8);
  v199 = v21;
  __chkstk_darwin(v21, v22);
  v197 = (char *)&v193 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v201 = sub_100003DB8(&qword_100319858);
  __chkstk_darwin(v201, v24);
  v204 = (char *)&v193 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v208 = sub_100003DB8(&qword_100319860);
  v206 = *(_QWORD *)(v208 - 8);
  __chkstk_darwin(v208, v26);
  v205 = (char *)&v193 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v207 = sub_100003DB8(&qword_100319868);
  __chkstk_darwin(v207, v28);
  v209 = (char *)&v193 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = sub_100003DB8(&qword_100319870);
  v216 = *(_QWORD *)(v30 - 8);
  v217 = v30;
  __chkstk_darwin(v30, v31);
  v214 = (char *)&v193 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v213 = sub_100003DB8(&qword_100319878);
  __chkstk_darwin(v213, v33);
  v218 = (char *)&v193 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v215 = sub_100003DB8(&qword_100319880);
  __chkstk_darwin(v215, v35);
  v37 = (char *)&v193 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = sub_100003DB8(&qword_100319888);
  v40 = __chkstk_darwin(v38, v39);
  v42 = __chkstk_darwin(v40, v41);
  v231 = a1;
  v45 = *((_QWORD *)a1 + 2);
  if (!v45)
  {
    v187 = *((_QWORD *)v231 + 3);
    v188 = type metadata accessor for EmergencyModel();
    v189 = type metadata accessor for EmergencyModel;
    v190 = &qword_100318690;
LABEL_13:
    v191 = sub_1000052EC(v190, (uint64_t (*)(uint64_t))v189, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v187, v188, v191);
    __break(1u);
    return result;
  }
  v221 = v42;
  v222 = v10;
  v224 = v9;
  v225 = v6;
  v226 = v5;
  v227 = (uint64_t)&v193 - v43;
  v228 = v44;
  v46 = *(_QWORD *)(v45 + 152);
  v223 = v37;
  v219 = v14;
  v220 = v11;
  v232 = v45;
  if (v46 == 1 || *(_QWORD *)(v45 + 144) >> 60 == 15)
  {
    v47 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v48 = 0xD000000000000069;
    v192 = 0x8000000100264B00;
    v49 = 0x8000000100264AE0;
    v50 = 0xD00000000000001DLL;
  }
  else
  {
    v47 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v50 = 0xD00000000000002BLL;
    v48 = 0xD00000000000006ALL;
    v192 = 0x8000000100264BA0;
    v49 = 0x8000000100264B70;
  }
  v51._countAndFlagsBits = 0;
  v51._object = (void *)0xE000000000000000;
  v52 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v50, (Swift::String_optional)0, (NSBundle)v47, v51, *(Swift::String *)&v48);

  v262[0] = v52;
  v53 = sub_10002B3F4();
  v55 = Text.init<A>(_:)(v262, &type metadata for String, v53, v54);
  v57 = v56;
  v59 = v58;
  v61 = v60 & 1;
  v62 = a2[3];
  v63 = a2[4];
  sub_100007BBC(a2, v62);
  v64 = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 96))(v62, v63);
  v65 = Text.font(_:)(v64, v55, v57, v61, v59);
  v67 = v66;
  v69 = v68;
  v194 = v70;
  swift_release(v64);
  v71 = v69 & 1;
  sub_10002B438(v55, v57, v61);
  swift_bridgeObjectRelease(v59);
  v72 = a2[3];
  v73 = a2[4];
  v229 = a2;
  sub_100007BBC(a2, v72);
  v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v73 + 56))(v72, v73);
  v75 = v194;
  v76 = Text.foregroundColor(_:)(v74, v65, v67, v71, v194);
  v196 = v77;
  v195 = v78;
  v80 = v79;
  swift_release(v74);
  sub_10002B438(v65, v67, v71);
  swift_bridgeObjectRelease(v75);
  v81 = *((_QWORD *)v231 + 4);
  if (!v81)
  {
    v187 = *((_QWORD *)v231 + 5);
    v188 = type metadata accessor for UIMetrics();
    v189 = type metadata accessor for UIMetrics;
    v190 = (unint64_t *)&qword_100316A00;
    goto LABEL_13;
  }
  v82 = *(id *)(v81 + 112);
  v83 = static UIContentSizeCategory.>= infix(_:_:)(v82, UIContentSizeCategoryAccessibilityExtraLarge);

  KeyPath = swift_getKeyPath(&unk_10024FC00);
  v85 = *(id *)(v81 + 112);
  v86 = static Alignment.center.getter(v85);
  v88 = v87;
  v89 = static UIContentSizeCategory.>= infix(_:_:)(v85, UIContentSizeCategoryAccessibilityExtraLarge);
  v193 = v81;
  if ((v89 & 1) != 0)
  {
    v90 = static Alignment.center.getter(v89);
    v92 = static Alignment.== infix(_:_:)(v86, v88, v90, v91);
    if ((v92 & 1) != 0)
    {
      v86 = static Alignment.leading.getter(v92, v93);
      v88 = v94;
    }
  }

  v95 = v195 & 1;
  v96 = (v83 & 1) == 0;
  v97 = v76;
  v278 = v76;
  v98 = v196;
  v279 = v196;
  v280 = v195 & 1;
  v281 = v80;
  v282 = KeyPath;
  v283 = v96;
  sub_1001313B8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v276, 0.0, 1, 0.0, 1, v86, v88);
  sub_10002B438(v97, v98, v95);
  swift_release(KeyPath);
  swift_bridgeObjectRelease(v80);
  v245 = v276[6];
  v246 = v276[7];
  v247 = v276[8];
  v248 = v276[9];
  v241 = v276[2];
  v242 = v276[3];
  v243 = v276[4];
  v244 = v276[5];
  v239 = v276[0];
  v240 = v276[1];
  v100 = static Edge.Set.top.getter(v99);
  v195 = v100;
  v233 = 1;
  LODWORD(v196) = static Edge.Set.bottom.getter(v100);
  v101 = v229;
  v102 = v229[3];
  v103 = v229[4];
  sub_100007BBC(v229, v102);
  v104 = (*(double (**)(uint64_t, uint64_t))(v103 + 104))(v102, v103);
  v105 = EdgeInsets.init(_all:)(v104);
  v107 = v106;
  v109 = v108;
  v111 = v110;
  v238[0] = *(_DWORD *)v234;
  *(_DWORD *)((char *)v238 + 3) = *(_DWORD *)&v234[3];
  LODWORD(v194) = v233;
  v235 = 0;
  v112 = (_OWORD *)swift_allocObject(&unk_1002E7C00, 64, 7);
  v113 = v231;
  v114 = *v231;
  v115 = v231[1];
  v112[1] = *v231;
  v112[2] = v115;
  v112[3] = v113[2];
  v277 = v114;
  swift_retain(v193);
  swift_retain(v232);
  sub_100031A88(&v277);
  v116 = sub_100055494();
  v117 = v197;
  Button.init(action:label:)(sub_10005548C, v112, sub_10005471C, 0, &type metadata for ReportEmergencyButtonLabelView, v116);
  v119 = v202;
  v118 = v203;
  v120 = v200;
  (*(void (**)(char *, _QWORD, uint64_t))(v202 + 104))(v200, enum case for ControlSize.large(_:), v203);
  v121 = swift_getKeyPath(&unk_10024FC30);
  v122 = v201;
  v123 = (uint64_t)v204;
  v124 = (uint64_t *)&v204[*(int *)(v201 + 36)];
  v125 = sub_100003DB8(&qword_100316C38);
  (*(void (**)(char *, char *, uint64_t))(v119 + 16))((char *)v124 + *(int *)(v125 + 28), v120, v118);
  *v124 = v121;
  v127 = v198;
  v126 = v199;
  (*(void (**)(uint64_t, char *, uint64_t))(v198 + 16))(v123, v117, v199);
  (*(void (**)(char *, uint64_t))(v119 + 8))(v120, v118);
  v128 = (*(uint64_t (**)(char *, uint64_t))(v127 + 8))(v117, v126);
  v129 = v210;
  BorderedProminentButtonStyle.init()(v128);
  v130 = sub_1000554E0();
  v131 = sub_1000052EC(&qword_100318960, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v132 = v205;
  v133 = v212;
  View.buttonStyle<A>(_:)(v129, v122, v212, v130, v131);
  (*(void (**)(char *, uint64_t))(v211 + 8))(v129, v133);
  v134 = sub_100007FF0(v123, &qword_100319858);
  v135 = v219;
  static ButtonBorderShape.roundedRectangle.getter(v134);
  v136 = swift_getKeyPath(&unk_10024FC60);
  v137 = v207;
  v138 = (uint64_t)v209;
  v139 = (uint64_t *)&v209[*(int *)(v207 + 36)];
  v140 = sub_100003DB8(&qword_100318968);
  v141 = v220;
  v142 = v222;
  (*(void (**)(char *, char *, uint64_t))(v220 + 16))((char *)v139 + *(int *)(v140 + 28), v135, v222);
  *v139 = v136;
  v143 = v206;
  v144 = v208;
  (*(void (**)(uint64_t, char *, uint64_t))(v206 + 16))(v138, v132, v208);
  (*(void (**)(char *, uint64_t))(v141 + 8))(v135, v142);
  v145 = (*(uint64_t (**)(char *, uint64_t))(v143 + 8))(v132, v144);
  v146 = v224;
  static KeyboardShortcut.defaultAction.getter(v145);
  v147 = sub_100055584();
  v148 = v214;
  View.keyboardShortcut(_:)(v146, v137, v147);
  (*(void (**)(char *, uint64_t))(v225 + 8))(v146, v226);
  sub_100007FF0(v138, &qword_100319868);
  v149 = v101[3];
  v150 = v101[4];
  sub_100007BBC(v101, v149);
  v151 = (*(uint64_t (**)(uint64_t, uint64_t))(v150 + 296))(v149, v150);
  v152 = swift_getKeyPath(&unk_10024FC90);
  *(_QWORD *)&v262[0] = v151;
  v153 = swift_retain(v151);
  v154 = AnyShapeStyle.init<A>(_:)(v262, &type metadata for Color, &protocol witness table for Color, v153);
  v156 = v216;
  v155 = v217;
  v157 = (uint64_t)v218;
  (*(void (**)(char *, char *, uint64_t))(v216 + 16))(v218, v148, v217);
  swift_release(v151);
  v158 = (uint64_t *)(v157 + *(int *)(v213 + 36));
  *v158 = v152;
  v158[1] = v154;
  (*(void (**)(char *, uint64_t))(v156 + 8))(v148, v155);
  LOBYTE(v154) = *(_BYTE *)(v232 + 129);
  v159 = swift_getKeyPath(&unk_10024FCC0);
  v160 = swift_allocObject(&unk_1002E7C28, 17, 7);
  *(_BYTE *)(v160 + 16) = v154;
  v161 = (uint64_t)v223;
  sub_10000B234(v157, (uint64_t)v223, &qword_100319878);
  v162 = (uint64_t *)(v161 + *(int *)(v215 + 36));
  *v162 = v159;
  v162[1] = (uint64_t)sub_100055740;
  v162[2] = v160;
  v163 = sub_100007FF0(v157, &qword_100319878);
  LOBYTE(v160) = static Edge.Set.bottom.getter(v163);
  v164 = v101[3];
  v165 = v101[4];
  sub_100007BBC(v101, v164);
  v166 = (*(double (**)(uint64_t, uint64_t))(v165 + 112))(v164, v165);
  v167 = EdgeInsets.init(_all:)(v166);
  v169 = v168;
  v171 = v170;
  v173 = v172;
  v174 = v228;
  sub_10000B234(v161, v228, &qword_100319880);
  v175 = v174 + *(int *)(v221 + 36);
  *(_BYTE *)v175 = v160;
  *(double *)(v175 + 8) = v167;
  *(_QWORD *)(v175 + 16) = v169;
  *(_QWORD *)(v175 + 24) = v171;
  *(_QWORD *)(v175 + 32) = v173;
  *(_BYTE *)(v175 + 40) = 0;
  sub_100007FF0(v161, &qword_100319880);
  v176 = v227;
  sub_10000B458(v174, v227, &qword_100319888);
  LOBYTE(v160) = v235;
  sub_10000B234(v176, v174, &qword_100319888);
  v255 = v245;
  v256 = v246;
  v257 = v247;
  v258 = v248;
  v251 = v241;
  v252 = v242;
  v253 = v243;
  v254 = v244;
  v249 = v239;
  v250 = v240;
  LOBYTE(v161) = v195;
  LOBYTE(v137) = v196;
  LOBYTE(v259[0]) = v195;
  *(_DWORD *)((char *)v259 + 1) = v238[0];
  DWORD1(v259[0]) = *(_DWORD *)((char *)v238 + 3);
  *(_OWORD *)((char *)v259 + 8) = 0u;
  *(_OWORD *)((char *)&v259[1] + 8) = 0u;
  LOBYTE(v156) = v194;
  BYTE8(v259[2]) = v194;
  HIDWORD(v259[2]) = *(_DWORD *)&v237[3];
  *(_DWORD *)((char *)&v259[2] + 9) = *(_DWORD *)v237;
  LOBYTE(v260) = v196;
  *(_DWORD *)((char *)&v260 + 1) = *(_DWORD *)v236;
  DWORD1(v260) = *(_DWORD *)&v236[3];
  *((double *)&v260 + 1) = v105;
  *(_QWORD *)&v261[0] = v107;
  *((_QWORD *)&v261[0] + 1) = v109;
  *(_QWORD *)&v261[1] = v111;
  BYTE8(v261[1]) = v160;
  v177 = v242;
  v178 = v230;
  v230[2] = v241;
  v178[3] = v177;
  v179 = v250;
  *v178 = v249;
  v178[1] = v179;
  v180 = v256;
  v178[6] = v255;
  v178[7] = v180;
  v181 = v254;
  v178[4] = v253;
  v178[5] = v181;
  v182 = v259[1];
  v178[10] = v259[0];
  v178[11] = v182;
  v183 = v258;
  v178[8] = v257;
  v178[9] = v183;
  v184 = v260;
  v178[12] = v259[2];
  v178[13] = v184;
  *(_OWORD *)((char *)v178 + 233) = *(_OWORD *)((char *)v261 + 9);
  v178[14] = v261[0];
  v185 = sub_100003DB8(&qword_1003198B0);
  sub_10000B234(v174, (uint64_t)v178 + *(int *)(v185 + 48), &qword_100319888);
  sub_100055758((uint64_t)&v249);
  sub_100007FF0(v176, &qword_100319888);
  sub_100007FF0(v174, &qword_100319888);
  v262[6] = v245;
  v262[7] = v246;
  v262[8] = v247;
  v262[9] = v248;
  v262[2] = v241;
  v262[3] = v242;
  v262[4] = v243;
  v262[5] = v244;
  v262[0] = v239;
  v262[1] = v240;
  v263 = v161;
  *(_DWORD *)v264 = v238[0];
  *(_DWORD *)&v264[3] = *(_DWORD *)((char *)v238 + 3);
  v265 = 0u;
  v266 = 0u;
  v267 = v156;
  *(_DWORD *)v268 = *(_DWORD *)v237;
  *(_DWORD *)&v268[3] = *(_DWORD *)&v237[3];
  v269 = v137;
  *(_DWORD *)v270 = *(_DWORD *)v236;
  *(_DWORD *)&v270[3] = *(_DWORD *)&v236[3];
  v271 = v105;
  v272 = v107;
  v273 = v109;
  v274 = v111;
  v275 = v160;
  return sub_1000557C8((uint64_t)v262);
}

uint64_t *sub_1000545DC(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11[8];
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v1 = result[2];
  if (!v1)
  {
    v2 = result[3];
    v6 = type metadata accessor for EmergencyModel();
    v7 = sub_1000052EC(&qword_100318690, (uint64_t (*)(uint64_t))type metadata accessor for EmergencyModel, (uint64_t)&unk_10024D2FC);
    result = (uint64_t *)EnvironmentObject.error()(0, v2, v6, v7);
    __break(1u);
    goto LABEL_7;
  }
  v2 = *(_QWORD *)(v1 + 88);
  if (!v2)
    return result;
  v3 = *result;
  if (!*result)
  {
LABEL_7:
    v8 = result[1];
    v9 = type metadata accessor for AppEvents();
    v10 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    swift_retain(v2);
    result = (uint64_t *)EnvironmentObject.error()(0, v8, v9, v10);
    __break(1u);
    return result;
  }
  v4 = *(_QWORD *)(v3 + 200);
  v11[0] = 1;
  v12 = v2;
  v13 = 1;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  swift_retain(v2);
  swift_retain(v4);
  PassthroughSubject.send(_:)(v11);
  swift_release(v4);
  sub_1000AE2F0();
  v5 = *(_QWORD *)(v3 + 168);
  v11[0] = 0;
  swift_retain(v5);
  PassthroughSubject.send(_:)(v11);
  swift_release(v2);
  return (uint64_t *)swift_release(v5);
}

uint64_t sub_10005471C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;

  v2 = type metadata accessor for EmergencyModel();
  v3 = sub_1000052EC(&qword_100318690, (uint64_t (*)(uint64_t))type metadata accessor for EmergencyModel, (uint64_t)&unk_10024D2FC);
  result = EnvironmentObject.init()(v2, v3);
  *a1 = result;
  a1[1] = v5;
  return result;
}

_QWORD *sub_100054770(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[8];
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = result[2];
  if (!v1)
  {
    v2 = result[3];
    v4 = type metadata accessor for EmergencyModel();
    v5 = sub_1000052EC(&qword_100318690, (uint64_t (*)(uint64_t))type metadata accessor for EmergencyModel, (uint64_t)&unk_10024D2FC);
    result = (_QWORD *)EnvironmentObject.error()(0, v2, v4, v5);
    __break(1u);
    goto LABEL_7;
  }
  v2 = *(_QWORD *)(v1 + 88);
  if (!v2)
    return result;
  if (!*result)
  {
LABEL_7:
    v6 = result[1];
    v7 = type metadata accessor for AppEvents();
    v8 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    swift_retain(v2);
    result = (_QWORD *)EnvironmentObject.error()(0, v6, v7, v8);
    __break(1u);
    return result;
  }
  v3 = *(_QWORD *)(*result + 200);
  v9[0] = 0;
  v10 = v2;
  v11 = 1;
  v13 = 0;
  v14 = 0;
  v12 = 0;
  swift_retain(v2);
  swift_retain(v3);
  PassthroughSubject.send(_:)(v9);
  swift_release(v2);
  return (_QWORD *)swift_release(v3);
}

uint64_t sub_100054888@<X0>(void *a1@<X8>)
{
  return sub_100051CB8(a1);
}

_QWORD *sub_1000548C4()
{
  uint64_t v0;

  return sub_100054770((_QWORD *)(v0 + 16));
}

uint64_t sub_1000548D0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100053694(v1 + 16, (_QWORD *)(v1 + 64), &qword_1003198B8, &qword_1003198C0, (void (*)(uint64_t, _QWORD *))sub_1000521A8, &qword_1003198C8, a1);
}

uint64_t sub_100054910()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 8);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_10005494C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_100053694(v1 + 16, (_QWORD *)(v1 + 64), &qword_100319838, &qword_100319840, (void (*)(uint64_t, _QWORD *))sub_1000537C8, &qword_100319848, a1);
}

uint64_t sub_100054988@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t KeyPath;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  double v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  uint64_t v92;
  __n128 v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t result;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char v139;
  uint64_t v140;

  v107 = a2;
  v130 = a1;
  v136 = a3;
  v122 = type metadata accessor for ControlSize(0);
  v121 = *(_QWORD *)(v122 - 8);
  __chkstk_darwin(v122, v3);
  v119 = (char *)&v107 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v114 = type metadata accessor for CircularProgressViewStyle(0);
  v113 = *(_QWORD *)(v114 - 8);
  __chkstk_darwin(v114, v5);
  v112 = (char *)&v107 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = sub_100003DB8(&qword_100316B28);
  v110 = *(_QWORD *)(v111 - 8);
  __chkstk_darwin(v111, v7);
  v109 = (char *)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = sub_100003DB8(&qword_100316B30);
  v116 = *(_QWORD *)(v117 - 8);
  __chkstk_darwin(v117, v9);
  v115 = (char *)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = sub_100003DB8(&qword_100316B38);
  __chkstk_darwin(v108, v11);
  v120 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003DB8(&qword_1003199A0);
  v132 = *(_QWORD *)(v13 - 8);
  v133 = v13;
  __chkstk_darwin(v13, v14);
  v118 = (uint64_t)&v107 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_100003DB8(&qword_1003199A8);
  v18 = __chkstk_darwin(v16, v17);
  v135 = (char *)&v107 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18, v20);
  v134 = (uint64_t)&v107 - v21;
  v124 = sub_100003DB8(&qword_100316A20);
  __chkstk_darwin(v124, v22);
  v24 = (char *)&v107 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = sub_100003DB8(&qword_1003199B0);
  v25 = *(_QWORD *)(v126 - 8);
  __chkstk_darwin(v126, v26);
  v28 = (char *)&v107 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = sub_100003DB8(&qword_1003199B8);
  __chkstk_darwin(v123, v29);
  v31 = (char *)&v107 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = sub_100003DB8(&qword_1003199C0);
  __chkstk_darwin(v32, v33);
  v35 = (char *)&v107 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_100003DB8(&qword_1003199C8);
  __chkstk_darwin(v125, v36);
  v38 = (char *)&v107 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v128 = sub_100003DB8(&qword_1003199D0);
  __chkstk_darwin(v128, v39);
  v41 = (char *)&v107 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = sub_100003DB8(&qword_1003199D8);
  v44 = __chkstk_darwin(v42, v43);
  v131 = (char *)&v107 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = __chkstk_darwin(v44, v46);
  v127 = (char *)&v107 - v48;
  __chkstk_darwin(v47, v49);
  v129 = (uint64_t)&v107 - v50;
  v51 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000010, 0x8000000100264D20);
  v137 = Text.init(_:tableName:bundle:comment:)(v51);
  v138 = v52;
  v139 = v53 & 1;
  v140 = v54;
  v55 = enum case for DynamicTypeSize.accessibility2(_:);
  v56 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 104))(v24, v55, v56);
  v57 = sub_1000052EC(&qword_100316A30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v24, v24, v56, v57) & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }
  v58 = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  View.dynamicTypeSize<A>(_:)(v24, &type metadata for Text, v124, &protocol witness table for Text, v58);
  sub_100007FF0((uint64_t)v24, &qword_100316A20);
  sub_10002B438(v137, v138, v139);
  swift_bridgeObjectRelease(v140);
  KeyPath = swift_getKeyPath(&unk_10024FC00);
  v60 = v126;
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v31, v28, v126);
  v61 = &v31[*(int *)(v123 + 36)];
  *(_QWORD *)v61 = KeyPath;
  v61[8] = 1;
  v62 = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v28, v60);
  v63 = static Alignment.center.getter(v62);
  sub_100131EE8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v35, 0.0, 1, 0.0, 1, v63, v64);
  sub_100007FF0((uint64_t)v31, &qword_1003199B8);
  sub_10000B234((uint64_t)v35, (uint64_t)v38, &qword_1003199C0);
  *(_WORD *)&v38[*(int *)(v125 + 36)] = 256;
  sub_100007FF0((uint64_t)v35, &qword_1003199C0);
  v65 = v130;
  if (!v130)
  {
LABEL_11:
    v105 = type metadata accessor for EmergencyModel();
    v106 = sub_1000052EC(&qword_100318690, (uint64_t (*)(uint64_t))type metadata accessor for EmergencyModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v107, v105, v106);
    __break(1u);
    return result;
  }
  if (*(_BYTE *)(v130 + 129))
    v66 = 0.0;
  else
    v66 = 1.0;
  sub_10000B234((uint64_t)v38, (uint64_t)v41, &qword_1003199C8);
  v67 = v128;
  *(double *)&v41[*(int *)(v128 + 36)] = v66;
  sub_100007FF0((uint64_t)v38, &qword_1003199C8);
  v68 = *(unsigned __int8 *)(v65 + 129);
  v69 = sub_10002B614(&qword_1003199E0, &qword_1003199D0, (void (*)(void))sub_1000558F4);
  v70 = (uint64_t)v127;
  View.accessibilityHidden(_:)(v68, v67, v69);
  sub_100007FF0((uint64_t)v41, &qword_1003199D0);
  v71 = v129;
  v72 = sub_10000B458(v70, v129, &qword_1003199D8);
  if ((*(_BYTE *)(v65 + 129) & 1) != 0)
  {
    v73 = v109;
    v74 = ProgressView<>.init<>()(v72);
    v75 = v112;
    CircularProgressViewStyle.init()(v74);
    v76 = sub_1000084FC(&qword_100316C20, &qword_100316B28, (uint64_t)&protocol conformance descriptor for ProgressView<A, B>);
    v77 = sub_1000052EC(&qword_100316C28, (uint64_t (*)(uint64_t))&type metadata accessor for CircularProgressViewStyle, (uint64_t)&protocol conformance descriptor for CircularProgressViewStyle);
    v78 = v115;
    v79 = v111;
    v80 = v114;
    View.progressViewStyle<A>(_:)(v75, v111, v114, v76, v77);
    (*(void (**)(char *, uint64_t))(v113 + 8))(v75, v80);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v73, v79);
    v81 = v121;
    v82 = v119;
    v83 = v122;
    (*(void (**)(char *, _QWORD, uint64_t))(v121 + 104))(v119, enum case for ControlSize.small(_:), v122);
    v84 = swift_getKeyPath(&unk_10024FC30);
    v85 = (uint64_t)v120;
    v86 = (uint64_t *)&v120[*(int *)(v108 + 36)];
    v87 = sub_100003DB8(&qword_100316C38);
    (*(void (**)(char *, char *, uint64_t))(v81 + 16))((char *)v86 + *(int *)(v87 + 28), v82, v83);
    *v86 = v84;
    v88 = v116;
    v89 = v117;
    (*(void (**)(uint64_t, char *, uint64_t))(v116 + 16))(v85, v78, v117);
    (*(void (**)(char *, uint64_t))(v81 + 8))(v82, v83);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v78, v89);
    v90 = (void *)objc_opt_self(UIColor);
    v91 = Color.init(uiColor:)(objc_msgSend(v90, "labelColor", v107));
    v92 = swift_getKeyPath(&unk_10024FC90);
    v137 = v91;
    v93 = swift_retain(v91);
    v94 = AnyShapeStyle.init<A>(_:)(&v137, &type metadata for Color, &protocol witness table for Color, v93);
    v95 = v118;
    sub_10000B234(v85, v118, &qword_100316B38);
    swift_release(v91);
    v96 = v133;
    v97 = (uint64_t *)(v95 + *(int *)(v133 + 36));
    *v97 = v92;
    v97[1] = v94;
    sub_100007FF0(v85, &qword_100316B38);
    v98 = v134;
    sub_10000B458(v95, v134, &qword_1003199A0);
    v99 = 0;
    v101 = (uint64_t)v135;
    v100 = v136;
  }
  else
  {
    v99 = 1;
    v101 = (uint64_t)v135;
    v100 = v136;
    v96 = v133;
    v98 = v134;
  }
  v102 = (uint64_t)v131;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v132 + 56))(v98, v99, 1, v96);
  sub_10000B234(v71, v102, &qword_1003199D8);
  sub_10000B234(v98, v101, &qword_1003199A8);
  sub_10000B234(v102, v100, &qword_1003199D8);
  v103 = sub_100003DB8(&qword_100319A00);
  sub_10000B234(v101, v100 + *(int *)(v103 + 48), &qword_1003199A8);
  sub_100007FF0(v98, &qword_1003199A8);
  sub_100007FF0(v71, &qword_1003199D8);
  sub_100007FF0(v101, &qword_1003199A8);
  return sub_100007FF0(v102, &qword_1003199D8);
}

uint64_t sub_1000553FC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = *v2;
  v4 = v2[1];
  *a2 = static Alignment.center.getter(a1);
  a2[1] = v6;
  v7 = sub_100003DB8(&qword_100319998);
  return sub_100054988(v5, v4, (uint64_t)a2 + *(int *)(v7 + 44));
}

uint64_t sub_100055458()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[6]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t *sub_10005548C()
{
  uint64_t v0;

  return sub_1000545DC((uint64_t *)(v0 + 16));
}

unint64_t sub_100055494()
{
  unint64_t result;

  result = qword_100319890;
  if (!qword_100319890)
  {
    result = swift_getWitnessTable(&unk_10024FD30, &type metadata for ReportEmergencyButtonLabelView);
    atomic_store(result, (unint64_t *)&qword_100319890);
  }
  return result;
}

unint64_t sub_1000554E0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319898;
  if (!qword_100319898)
  {
    v1 = sub_100007FAC(&qword_100319858);
    sub_1000084FC(&qword_1003198A0, &qword_100319850, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_1000084FC(&qword_100316C30, &qword_100316C38, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319898);
  }
  return result;
}

unint64_t sub_100055584()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1003198A8;
  if (!qword_1003198A8)
  {
    v1 = sub_100007FAC(&qword_100319868);
    v2[0] = sub_100007FAC(&qword_100319858);
    v2[1] = type metadata accessor for BorderedProminentButtonStyle(255);
    v2[2] = sub_1000554E0();
    v2[3] = sub_1000052EC(&qword_100318960, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
    sub_1000084FC(&qword_100318978, &qword_100318968, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003198A8);
  }
  return result;
}

uint64_t sub_10005567C@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000556A8@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_1000556D4(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

uint64_t sub_1000556F8(unsigned __int8 *a1)
{
  return EnvironmentValues.isEnabled.setter(*a1);
}

_BYTE *sub_10005571C(_BYTE *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t sub_100055730()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_100055740(_BYTE *result)
{
  uint64_t v1;

  *result &= ~*(_BYTE *)(v1 + 16) & 1;
  return result;
}

uint64_t sub_100055758(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  sub_10002B750(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  return a1;
}

uint64_t sub_1000557A4()
{
  return sub_10002B614(&qword_1003198F8, &qword_100319900, (void (*)(void))sub_100034DFC);
}

uint64_t sub_1000557C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  sub_10002B438(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100055814()
{
  uint64_t v0;

  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((_QWORD *)(v0 + 16));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 64));
  return swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100055840@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;

  return sub_100052F20(a1, v2 + 2, v2[7], v2[8], a2);
}

ValueMetadata *type metadata accessor for ReportEmergencyButtonLabelView()
{
  return &type metadata for ReportEmergencyButtonLabelView;
}

unint64_t sub_100055860()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319980;
  if (!qword_100319980)
  {
    v1 = sub_100007FAC(&qword_100319988);
    sub_1000084FC(&qword_100319990, &qword_100319828, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319980);
  }
  return result;
}

uint64_t sub_1000558E4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100296270, 1);
}

uint64_t sub_1000558F4()
{
  return sub_10002B614(&qword_1003199E8, &qword_1003199C8, (void (*)(void))sub_100055918);
}

uint64_t sub_100055918()
{
  return sub_10002B614(&qword_1003199F0, &qword_1003199C0, (void (*)(void))sub_10005593C);
}

unint64_t sub_10005593C()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_1003199F8;
  if (!qword_1003199F8)
  {
    v1 = sub_100007FAC(&qword_1003199B8);
    v2[0] = &type metadata for Text;
    v2[1] = sub_100007FAC(&qword_100316A20);
    v2[2] = &protocol witness table for Text;
    v2[3] = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    sub_1000084FC(&qword_100318300, &qword_100318308, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1003199F8);
  }
  return result;
}

uint64_t sub_100055A1C()
{
  return sub_1000084FC(&qword_100319A08, &qword_100319A10, (uint64_t)&protocol conformance descriptor for ZStack<A>);
}

uint64_t sub_100055A48()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for Bits()
{
  return objc_opt_self(_TtC8SOSBuddy4Bits);
}

uint64_t destroy for BuiltInNotifyContactsConsentContentView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  return swift_release(a1[3]);
}

uint64_t *initializeWithCopy for BuiltInNotifyContactsConsentContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  v6 = a2[3];
  a1[2] = v5;
  a1[3] = v6;
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v6);
  return a1;
}

uint64_t *assignWithCopy for BuiltInNotifyContactsConsentContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_retain(v8);
  swift_release(v9);
  return a1;
}

_QWORD *assignWithTake for BuiltInNotifyContactsConsentContentView(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  *a1 = *(_QWORD *)a2;
  swift_release(v4);
  a1[1] = *(_QWORD *)(a2 + 8);
  swift_release(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  swift_release(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationAgent.ActionReceived(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 32))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NotificationAgent.ActionReceived(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 32) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for BuiltInNotifyContactsConsentContentView()
{
  return &type metadata for BuiltInNotifyContactsConsentContentView;
}

uint64_t sub_100055C5C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100296338, 1);
}

uint64_t sub_100055C6C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t result;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;

  v6 = sub_100003DB8(&qword_100319AB0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v11 = *(_QWORD *)(a1 + 152);
    if (v11 >= 2 && *(_QWORD *)(v11 + 16))
    {
      swift_bridgeObjectRetain(v11);
      v13 = sub_100055F98(v12);
      swift_bridgeObjectRelease(v11);
      *(_QWORD *)v10 = static HorizontalAlignment.center.getter(v14);
      *((_QWORD *)v10 + 1) = 0;
      v10[16] = 0;
      sub_100003DB8(&qword_100319AB8);
      v24 = v13;
      v15 = swift_allocObject(&unk_1002E7DE0, 24, 7);
      *(_QWORD *)(v15 + 16) = v13;
      swift_bridgeObjectRetain(v13);
      v16 = sub_100003DB8(&qword_100319AC0);
      v17 = sub_1000084FC(&qword_100319AC8, &qword_100319AC0, (uint64_t)&protocol conformance descriptor for [A]);
      v18 = sub_100056120();
      v19 = sub_100056164();
      ForEach<>.init(_:content:)(&v24, sub_100056118, v15, v16, &type metadata for String, &type metadata for EmergencyContactListItem, v17, v18, v19);
      sub_10000B458((uint64_t)v10, a3, &qword_100319AB0);
      return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(a3, 0, 1, v6);
    }
    else
    {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a3, 1, 1, v6);
    }
  }
  else
  {
    v21 = type metadata accessor for EmergencyModel();
    v22 = sub_100056D60(&qword_100318690, (uint64_t (*)(uint64_t))type metadata accessor for EmergencyModel);
    result = EnvironmentObject.error()(0, a2, v21, v22);
    __break(1u);
  }
  return result;
}

uint64_t sub_100055E84@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  char v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;

  v4 = *a1;
  v5 = a1[1];
  v7 = a1[2];
  v6 = a1[3];
  v8 = a2[2];
  if (v8)
  {
    v9 = a2[4];
    v10 = a2[5];
    v11 = a2 + 4;
    if (v4 == v9 && v5 == v10)
      v13 = 1;
    else
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(*a1, v5, v9, v10, 0);
    v15 = &v11[4 * v8];
    v16 = *(v15 - 4);
    v17 = *(v15 - 3);
    if (v4 == v16 && v5 == v17)
      v14 = 1;
    else
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v16, v17, 0);
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  v19 = type metadata accessor for UIMetrics();
  v20 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  result = EnvironmentObject.init()(v19, v20);
  *(_QWORD *)a3 = result;
  *(_QWORD *)(a3 + 8) = v22;
  *(_QWORD *)(a3 + 16) = v4;
  *(_QWORD *)(a3 + 24) = v5;
  *(_QWORD *)(a3 + 32) = v7;
  *(_QWORD *)(a3 + 40) = v6;
  *(_BYTE *)(a3 + 48) = v13 & 1;
  *(_BYTE *)(a3 + 49) = v14 & 1;
  return result;
}

_QWORD *sub_100055F98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;

  sub_10017E378(0, 0, 0);
  v2 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain(a1);
  if (v2)
  {
    v3 = 0;
    v4 = (unint64_t *)(a1 + 40);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      swift_bridgeObjectRetain(*v4);
      v7 = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      v9 = v8;
      v10 = HIBYTE(v6) & 0xF;
      if ((v6 & 0x2000000000000000) == 0)
        v10 = v5 & 0xFFFFFFFFFFFFLL;
      if (!v10)
      {
        swift_bridgeObjectRelease(v6);
        v6 = 0xE100000000000000;
        v5 = 63;
      }
      v12 = _swiftEmptyArrayStorage[2];
      v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1)
        sub_10017E378(v11 > 1, v12 + 1, 1);
      ++v3;
      v4 += 2;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      v13 = &_swiftEmptyArrayStorage[4 * v12];
      v13[4] = v7;
      v13[5] = v9;
      v13[6] = v5;
      v13[7] = v6;
    }
    while (v2 != v3);
  }
  swift_bridgeObjectRelease(a1);
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1000560EC@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_100055C6C(*v1, v1[1], a1);
}

uint64_t sub_1000560F4()
{
  uint64_t v0;

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100056118@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_100055E84(a1, *(_QWORD **)(v2 + 16), a2);
}

unint64_t sub_100056120()
{
  unint64_t result;

  result = qword_100319AD0;
  if (!qword_100319AD0)
  {
    result = swift_getWitnessTable(&unk_10024FE80, &type metadata for EmergencyContactListItem);
    atomic_store(result, (unint64_t *)&qword_100319AD0);
  }
  return result;
}

unint64_t sub_100056164()
{
  unint64_t result;

  result = qword_100319AD8;
  if (!qword_100319AD8)
  {
    result = swift_getWitnessTable(&unk_10024FE48, &type metadata for EmergencyContactInfo);
    atomic_store(result, (unint64_t *)&qword_100319AD8);
  }
  return result;
}

uint64_t sub_1000561A8@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;

  v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1000561B4@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD v24[5];

  v3 = sub_100003DB8(&qword_100319AF8);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v24[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_100319B00);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v24[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (_QWORD *)*v1;
  if (*v1)
  {
    v12 = v11[9];
    v13 = v11[10];
    sub_100007BBC(v11 + 6, v12);
    v14 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v13 + 24))(v24, v12, v13);
    *(_QWORD *)v6 = static HorizontalAlignment.leading.getter(v14);
    *((_QWORD *)v6 + 1) = 0;
    v6[16] = 0;
    v15 = sub_100003DB8(&qword_100319B08);
    v16 = sub_100056378((uint64_t)v1, v24, (uint64_t)&v6[*(int *)(v15 + 44)]);
    v17 = static Alignment.center.getter(v16);
    sub_10013210C(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v10, 0.0, 1, 0.0, 1, v17, v18);
    sub_100007FF0((uint64_t)v6, &qword_100319AF8);
    sub_10000B458((uint64_t)v10, a1, &qword_100319B00);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v24);
  }
  else
  {
    v20 = v1[1];
    v21 = type metadata accessor for UIMetrics();
    v22 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
    result = EnvironmentObject.error()(0, v20, v21, v22);
    __break(1u);
  }
  return result;
}

uint64_t sub_100056378@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t (*v21)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  char *v40;
  uint64_t v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  int v69;
  char *v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  _BYTE v77[7];
  _BYTE v78[7];
  _BYTE v79[7];
  _BYTE v80[7];
  _BYTE v81[7];
  _BYTE v82[7];
  _BYTE v83[7];
  _BYTE v84[7];
  _BYTE v85[7];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  _BYTE v98[7];
  unsigned __int8 v99;
  unsigned __int8 v100;
  unsigned __int8 v101;
  unsigned __int8 v102;
  unsigned __int8 v103;
  char v104;
  char v105;
  _QWORD v106[50];
  _QWORD v107[2];
  char v108;
  _BYTE v109[7];
  uint64_t v110;
  uint64_t v111;
  char v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  _BYTE v125[7];
  char v126;
  _BYTE v127[7];
  double v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  _BYTE v133[7];
  uint64_t v134;
  char v135;
  _BYTE v136[7];
  uint64_t v137;
  char v138;
  _BYTE v139[7];
  uint64_t v140;
  char v141;
  _BYTE v142[7];
  uint64_t v143;
  char v144;
  _BYTE v145[7];
  uint64_t v146;
  char v147;
  _BYTE v148[7];
  uint64_t v149;
  char v150;
  _BYTE v151[7];
  uint64_t v152;
  uint64_t v153;
  _OWORD v154[10];
  _OWORD v155[2];
  _OWORD v156[12];
  char v157;
  char v158;
  uint64_t v159;
  char v160;
  uint64_t v161;
  char v162;
  uint64_t v163;
  unsigned __int8 v164;
  uint64_t v165;
  unsigned __int8 v166;
  uint64_t v167;
  unsigned __int8 v168;
  uint64_t v169;
  unsigned __int8 v170;
  uint64_t v171;
  uint64_t v172;

  v53 = a3;
  v54 = type metadata accessor for Divider(0);
  v5 = *(_QWORD *)(v54 - 8);
  v7 = __chkstk_darwin(v54, v6);
  v75 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7, v9);
  v74 = (char *)&v51 - v10;
  v11 = sub_100003DB8(&qword_100319B10);
  v13 = __chkstk_darwin(v11, v12);
  v76 = (uint64_t)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)&v51 - v17;
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v20 = (char *)&v51 - v17;
    Divider.init()(v16);
    v18 = v20;
    v19 = 0;
  }
  else
  {
    v19 = 1;
  }
  v21 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
  v70 = v18;
  v22 = v21(v18, v19, 1, v54);
  v73 = static VerticalAlignment.center.getter(v22);
  v72 = static HorizontalAlignment.center.getter(v73);
  sub_100056B54(a1, a2, (uint64_t)v154);
  *(_OWORD *)((char *)&v156[8] + 7) = v154[8];
  *(_OWORD *)((char *)&v156[9] + 7) = v154[9];
  *(_OWORD *)((char *)&v156[10] + 7) = v155[0];
  v156[11] = *(_OWORD *)((char *)v155 + 9);
  *(_OWORD *)((char *)&v156[4] + 7) = v154[4];
  *(_OWORD *)((char *)&v156[5] + 7) = v154[5];
  *(_OWORD *)((char *)&v156[6] + 7) = v154[6];
  *(_OWORD *)((char *)&v156[7] + 7) = v154[7];
  *(_OWORD *)((char *)v156 + 7) = v154[0];
  *(_OWORD *)((char *)&v156[1] + 7) = v154[1];
  *(_OWORD *)((char *)&v156[2] + 7) = v154[2];
  v157 = 0;
  *(_OWORD *)((char *)&v156[3] + 7) = v154[3];
  v71 = 0;
  v158 = 0;
  v68 = v5;
  v24 = a2[3];
  v23 = a2[4];
  sub_100007BBC(a2, v24);
  v25 = (*(double (**)(uint64_t, uint64_t))(v23 + 344))(v24, v23);
  v27 = v26;
  v29 = v28;
  v31 = v30;
  v69 = static Edge.Set.all.getter(v25);
  v32 = a2[3];
  v33 = a2[4];
  sub_100007BBC(a2, v32);
  v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 336))(v32, v33);
  v36 = v35;
  v37 = static Alignment.center.getter(v34);
  v95 = v156[9];
  v96 = v156[10];
  v97 = v156[11];
  v91 = v156[5];
  v92 = v156[6];
  v93 = v156[7];
  v94 = v156[8];
  v86 = v156[0];
  v87 = v156[1];
  v88 = v156[2];
  v89 = v156[3];
  v90 = v156[4];
  v99 = 0;
  v39 = _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v159, 0, 1, 0, 1, 0, 1, v36, 0, 0, 1, 0, 1, v37, v38);
  v60 = v159;
  v61 = v161;
  v62 = v163;
  v63 = v165;
  v64 = v167;
  v65 = v169;
  v66 = v172;
  v67 = v171;
  v55 = v99;
  v105 = v160;
  v104 = v162;
  v103 = v164;
  v102 = v166;
  v101 = v168;
  v100 = v170;
  v40 = v74;
  Divider.init()(v39);
  v41 = v76;
  sub_1000570AC((uint64_t)v70, v76);
  v42 = v105;
  LOBYTE(v33) = v104;
  v56 = v103;
  v57 = v102;
  v58 = v101;
  v59 = v100;
  v52 = *(void (**)(char *, char *, uint64_t))(v68 + 16);
  v43 = v54;
  v52(v75, v40, v54);
  v44 = v53;
  sub_1000570AC(v41, v53);
  v45 = sub_100003DB8(&qword_100319B18);
  v46 = *(int *)(v45 + 48);
  *(_OWORD *)((char *)&v106[21] + 1) = v94;
  *(_OWORD *)((char *)&v106[23] + 1) = v95;
  *(_OWORD *)((char *)&v106[25] + 1) = v96;
  *(_OWORD *)((char *)&v106[27] + 1) = v97;
  *(_OWORD *)((char *)&v106[13] + 1) = v90;
  *(_OWORD *)((char *)&v106[15] + 1) = v91;
  *(_OWORD *)((char *)&v106[17] + 1) = v92;
  *(_OWORD *)((char *)&v106[19] + 1) = v93;
  *(_OWORD *)((char *)&v106[5] + 1) = v86;
  *(_OWORD *)((char *)&v106[7] + 1) = v87;
  *(_OWORD *)((char *)&v106[9] + 1) = v88;
  v106[0] = v73;
  v106[1] = 0;
  LOBYTE(v106[2]) = 0;
  *(_DWORD *)((char *)&v106[2] + 1) = *(_DWORD *)v98;
  HIDWORD(v106[2]) = *(_DWORD *)&v98[3];
  v106[3] = v72;
  v106[4] = 0;
  LOBYTE(v106[5]) = v71;
  *(_OWORD *)((char *)&v106[11] + 1) = v89;
  *(_DWORD *)((char *)&v106[29] + 1) = *(_DWORD *)v85;
  HIDWORD(v106[29]) = *(_DWORD *)&v85[3];
  LOBYTE(v106[30]) = v69;
  *(_DWORD *)((char *)&v106[30] + 1) = *(_DWORD *)v84;
  HIDWORD(v106[30]) = *(_DWORD *)&v84[3];
  *(double *)&v106[31] = v25;
  v106[32] = v27;
  v106[33] = v29;
  v106[34] = v31;
  LOBYTE(v106[35]) = v55;
  *(_DWORD *)((char *)&v106[35] + 1) = *(_DWORD *)v83;
  HIDWORD(v106[35]) = *(_DWORD *)&v83[3];
  v106[36] = v60;
  LOBYTE(v106[37]) = v42;
  *(_DWORD *)((char *)&v106[37] + 1) = *(_DWORD *)v82;
  HIDWORD(v106[37]) = *(_DWORD *)&v82[3];
  v106[38] = v61;
  LOBYTE(v106[39]) = v33;
  *(_DWORD *)((char *)&v106[39] + 1) = *(_DWORD *)v81;
  HIDWORD(v106[39]) = *(_DWORD *)&v81[3];
  v106[40] = v62;
  LOBYTE(v106[41]) = v56;
  *(_DWORD *)((char *)&v106[41] + 1) = *(_DWORD *)v80;
  HIDWORD(v106[41]) = *(_DWORD *)&v80[3];
  v106[42] = v63;
  LOBYTE(v106[43]) = v57;
  *(_DWORD *)((char *)&v106[43] + 1) = *(_DWORD *)v79;
  HIDWORD(v106[43]) = *(_DWORD *)&v79[3];
  v106[44] = v64;
  LOBYTE(v106[45]) = v58;
  *(_DWORD *)((char *)&v106[45] + 1) = *(_DWORD *)v78;
  HIDWORD(v106[45]) = *(_DWORD *)&v78[3];
  v106[46] = v65;
  LOBYTE(v106[47]) = v59;
  *(_DWORD *)((char *)&v106[47] + 1) = *(_DWORD *)v77;
  HIDWORD(v106[47]) = *(_DWORD *)&v77[3];
  v106[48] = v67;
  v106[49] = v66;
  memcpy((void *)(v44 + v46), v106, 0x190uLL);
  v47 = v44 + *(int *)(v45 + 64);
  v48 = v75;
  v52((char *)v47, v75, v43);
  sub_1000570F4((uint64_t)v106);
  v49 = *(void (**)(char *, uint64_t))(v68 + 8);
  v49(v74, v43);
  sub_100007FF0((uint64_t)v70, &qword_100319B10);
  v49(v48, v43);
  v121 = v94;
  v122 = v95;
  v123 = v96;
  v124 = v97;
  v117 = v90;
  v118 = v91;
  v119 = v92;
  v120 = v93;
  v113 = v86;
  v114 = v87;
  v115 = v88;
  v107[0] = v73;
  v107[1] = 0;
  v108 = 0;
  *(_DWORD *)v109 = *(_DWORD *)v98;
  *(_DWORD *)&v109[3] = *(_DWORD *)&v98[3];
  v110 = v72;
  v111 = 0;
  v112 = v71;
  v116 = v89;
  *(_DWORD *)v125 = *(_DWORD *)v85;
  *(_DWORD *)&v125[3] = *(_DWORD *)&v85[3];
  v126 = v69;
  *(_DWORD *)v127 = *(_DWORD *)v84;
  *(_DWORD *)&v127[3] = *(_DWORD *)&v84[3];
  v128 = v25;
  v129 = v27;
  v130 = v29;
  v131 = v31;
  v132 = v55;
  *(_DWORD *)v133 = *(_DWORD *)v83;
  *(_DWORD *)&v133[3] = *(_DWORD *)&v83[3];
  v134 = v60;
  v135 = v42;
  *(_DWORD *)v136 = *(_DWORD *)v82;
  *(_DWORD *)&v136[3] = *(_DWORD *)&v82[3];
  v137 = v61;
  v138 = v33;
  *(_DWORD *)v139 = *(_DWORD *)v81;
  *(_DWORD *)&v139[3] = *(_DWORD *)&v81[3];
  v140 = v62;
  v141 = v56;
  *(_DWORD *)v142 = *(_DWORD *)v80;
  *(_DWORD *)&v142[3] = *(_DWORD *)&v80[3];
  v143 = v63;
  v144 = v57;
  *(_DWORD *)v145 = *(_DWORD *)v79;
  *(_DWORD *)&v145[3] = *(_DWORD *)&v79[3];
  v146 = v64;
  v147 = v58;
  *(_DWORD *)v148 = *(_DWORD *)v78;
  *(_DWORD *)&v148[3] = *(_DWORD *)&v78[3];
  v149 = v65;
  v150 = v59;
  *(_DWORD *)v151 = *(_DWORD *)v77;
  *(_DWORD *)&v151[3] = *(_DWORD *)&v77[3];
  v152 = v67;
  v153 = v66;
  sub_10005717C((uint64_t)v107);
  return sub_100007FF0(v76, &qword_100319B10);
}

__n128 sub_100056B54@<Q0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t KeyPath;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __n128 result;
  _OWORD v30[9];
  __int128 v31;
  __n128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;

  v5 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)&v31 = *(_QWORD *)(a1 + 32);
  *((_QWORD *)&v31 + 1) = v5;
  v6 = sub_10002B3F4();
  v7 = swift_bridgeObjectRetain(v5);
  v8 = Text.init<A>(_:)(&v31, &type metadata for String, v6, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = static Alignment.leading.getter(v8, v9);
  sub_1001315E8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, (uint64_t)v30, 0.0, 1, 0.0, 1, v15, v16, v8, v10, v14, v12);
  sub_10002B438(v8, v10, v14);
  swift_bridgeObjectRelease(v12);
  v37 = v30[6];
  v38 = v30[7];
  v39 = v30[8];
  v33 = v30[2];
  v34 = v30[3];
  v35 = v30[4];
  v36 = v30[5];
  v31 = v30[0];
  v32 = (__n128)v30[1];
  v17 = a2[3];
  v18 = a2[4];
  sub_100007BBC(a2, v17);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 200))(v17, v18);
  KeyPath = swift_getKeyPath(&unk_10024FED0);
  v21 = a2[3];
  v22 = a2[4];
  sub_100007BBC(a2, v21);
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 168))(v21, v22);
  v24 = swift_getKeyPath(&unk_10024FF00);
  v25 = swift_getKeyPath(&unk_10024FF30);
  v26 = v38;
  *(_OWORD *)(a3 + 96) = v37;
  *(_OWORD *)(a3 + 112) = v26;
  *(_OWORD *)(a3 + 128) = v39;
  v27 = v34;
  *(_OWORD *)(a3 + 32) = v33;
  *(_OWORD *)(a3 + 48) = v27;
  v28 = v36;
  *(_OWORD *)(a3 + 64) = v35;
  *(_OWORD *)(a3 + 80) = v28;
  result = v32;
  *(_OWORD *)a3 = v31;
  *(__n128 *)(a3 + 16) = result;
  *(_QWORD *)(a3 + 144) = KeyPath;
  *(_QWORD *)(a3 + 152) = v19;
  *(_QWORD *)(a3 + 160) = v24;
  *(_QWORD *)(a3 + 168) = v23;
  *(_QWORD *)(a3 + 176) = v25;
  *(_BYTE *)(a3 + 184) = 0;
  return result;
}

uint64_t sub_100056D20@<X0>(uint64_t a1@<X8>)
{
  return sub_1000561B4(a1);
}

uint64_t sub_100056D60(unint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = a2(255);
    result = swift_getWitnessTable(&unk_10024D2FC, v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for EmergencyContactListItem(_QWORD *a1)
{
  swift_release(*a1);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t initializeWithCopy for EmergencyContactListItem(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
  v5 = a2[3];
  v4 = a2[4];
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v4;
  v6 = a2[5];
  *(_QWORD *)(a1 + 40) = v6;
  *(_WORD *)(a1 + 48) = *((_WORD *)a2 + 24);
  swift_retain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *assignWithCopy for EmergencyContactListItem(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  a1[2] = a2[2];
  v6 = a2[3];
  v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  v8 = a2[5];
  v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a1 + 49) = *((_BYTE *)a2 + 49);
  return a1;
}

__n128 initializeWithTake for EmergencyContactListItem(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for EmergencyContactListItem(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  v5 = a1[3];
  a1[3] = a2[3];
  swift_bridgeObjectRelease(v5);
  v6 = a2[5];
  v7 = a1[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease(v7);
  *((_BYTE *)a1 + 48) = *((_BYTE *)a2 + 48);
  *((_BYTE *)a1 + 49) = *((_BYTE *)a2 + 49);
  return a1;
}

uint64_t getEnumTagSinglePayload for EmergencyContactListItem(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 50))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for EmergencyContactListItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 50) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 50) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for EmergencyContactListItem()
{
  return &type metadata for EmergencyContactListItem;
}

ValueMetadata *type metadata accessor for EmergencyContactInfo()
{
  return &type metadata for EmergencyContactInfo;
}

unint64_t sub_100057014()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319AE0;
  if (!qword_100319AE0)
  {
    v1 = sub_100007FAC(&qword_100319AE8);
    sub_1000084FC(&qword_100319AF0, &qword_100319AB0, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_100319AE0);
  }
  return result;
}

void *sub_100057090()
{
  return &protocol witness table for String;
}

uint64_t sub_10005709C(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100296360, 1);
}

uint64_t sub_1000570AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100319B10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000570F4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 192);
  v4 = *(_QWORD *)(a1 + 200);
  v5 = *(_QWORD *)(a1 + 208);
  v6 = *(_QWORD *)(a1 + 216);
  v7 = *(_QWORD *)(a1 + 224);
  sub_10002B750(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  swift_retain(v6);
  swift_retain(v7);
  swift_bridgeObjectRetain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t sub_10005717C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 72);
  v3 = *(_QWORD *)(a1 + 192);
  v4 = *(_QWORD *)(a1 + 200);
  v5 = *(_QWORD *)(a1 + 208);
  v6 = *(_QWORD *)(a1 + 216);
  v7 = *(_QWORD *)(a1 + 224);
  sub_10002B438(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64));
  swift_release(v7);
  swift_release(v5);
  swift_release(v3);
  swift_bridgeObjectRelease(v2);
  swift_release(v4);
  swift_release(v6);
  return a1;
}

unint64_t sub_100057220()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319B20;
  if (!qword_100319B20)
  {
    v1 = sub_100007FAC(&qword_100319B00);
    sub_1000084FC(&qword_100319B28, &qword_100319AF8, (uint64_t)&protocol conformance descriptor for VStack<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_100319B20);
  }
  return result;
}

uint64_t destroy for ExplorerTryOutIntroductionView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[3]);
  swift_release(a1[4]);
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t initializeWithCopy for ExplorerTryOutIntroductionView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
  v5 = a2[3];
  v6 = a2[4];
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  v7 = a2[5];
  *(_QWORD *)(a1 + 40) = v7;
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *assignWithCopy for ExplorerTryOutIntroductionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  v6 = a1[3];
  v7 = a2[3];
  a1[3] = v7;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[4];
  v9 = a1[4];
  a1[4] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[5] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t *assignWithTake for ExplorerTryOutIntroductionView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + 16) = *((_BYTE *)a2 + 16);
  swift_release(a1[3]);
  v5 = a1[4];
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 3);
  swift_release(v5);
  v6 = a1[5];
  a1[5] = a2[5];
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *type metadata accessor for ExplorerTryOutIntroductionView()
{
  return &type metadata for ExplorerTryOutIntroductionView;
}

uint64_t sub_100057458(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002963C8, 1);
}

uint64_t sub_100057468@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t OpaqueTypeConformance2;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _OWORD v40[11];
  uint64_t v41;
  __int128 v42[11];
  uint64_t v43;
  _QWORD v44[5];
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];

  v2 = v1;
  v39 = a1;
  v3 = type metadata accessor for NavigationBarItem.TitleDisplayMode(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8(&qword_100319B30);
  v37 = *(_QWORD *)(v8 - 8);
  v38 = v8;
  __chkstk_darwin(v8, v9);
  v36 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD **)v1;
  if (*(_QWORD *)v1)
  {
    v12 = v11[9];
    v13 = v11[10];
    sub_100007BBC(v11 + 6, v12);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v13 + 24))(v44, v12, v13);
    sub_100058A00(*(_BYTE *)(v1 + 16));
    v14 = *(_QWORD *)(v1 + 24);
    v15 = *(_QWORD *)(v1 + 32);
    v48 = *(_QWORD *)(v2 + 40);
    v49[0] = v14;
    sub_100007CBC((uint64_t)v44, (uint64_t)v42);
    v16 = swift_allocObject(&unk_1002E8008, 144, 7);
    v17 = *(_OWORD *)(v2 + 16);
    *(_OWORD *)(v16 + 16) = *(_OWORD *)v2;
    *(_OWORD *)(v16 + 32) = v17;
    v18 = v45;
    v19 = v46;
    *(_OWORD *)(v16 + 48) = *(_OWORD *)(v2 + 32);
    *(_OWORD *)(v16 + 64) = v18;
    *(_OWORD *)(v16 + 80) = v19;
    *(_QWORD *)(v16 + 96) = v47;
    sub_100007D04(v42, v16 + 104);
    sub_100007CBC((uint64_t)v44, (uint64_t)v42);
    v20 = (_OWORD *)swift_allocObject(&unk_1002E8030, 104, 7);
    v21 = *(_OWORD *)(v2 + 16);
    v20[1] = *(_OWORD *)v2;
    v20[2] = v21;
    v20[3] = *(_OWORD *)(v2 + 32);
    sub_100007D04(v42, (uint64_t)(v20 + 4));
    swift_retain(v11);
    sub_100031A88(v49);
    swift_retain(v15);
    sub_100034218(&v48);
    swift_retain(v11);
    sub_100031A88(v49);
    swift_retain(v15);
    sub_100034218(&v48);
    sub_10012E328(v40, ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter, 0, sub_100058F88, v16, sub_100058FDC, v20, 0);
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v7, enum case for NavigationBarItem.TitleDisplayMode.inline(_:), v3);
    v22 = sub_100003DB8(&qword_100319B38);
    v23 = sub_1000084FC(&qword_100319B40, &qword_100319B38, (uint64_t)&unk_100256288);
    v24 = v36;
    View.navigationBarTitleDisplayMode(_:)(v7, v22, v23);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
    v42[8] = v40[8];
    v42[9] = v40[9];
    v42[10] = v40[10];
    v43 = v41;
    v42[4] = v40[4];
    v42[5] = v40[5];
    v42[6] = v40[6];
    v42[7] = v40[7];
    v42[0] = v40[0];
    v42[1] = v40[1];
    v42[2] = v40[2];
    v42[3] = v40[3];
    sub_100007E9C((uint64_t *)v42);
    v25 = sub_100003DB8(&qword_100319B48);
    *(_QWORD *)&v40[0] = v22;
    *((_QWORD *)&v40[0] + 1) = v23;
    OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(v40, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
    v27 = sub_100007FAC(&qword_100319200);
    v28 = sub_1000084FC(&qword_100319B50, &qword_100319200, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
    *(_QWORD *)&v40[0] = v27;
    *((_QWORD *)&v40[0] + 1) = v28;
    v29 = swift_getOpaqueTypeConformance2(v40, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
    v30 = v38;
    View.toolbar<A>(content:)(sub_100058874, 0, v38, v25, OpaqueTypeConformance2, v29);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v24, v30);
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v44);
  }
  else
  {
    v32 = *(_QWORD *)(v1 + 8);
    v33 = type metadata accessor for UIMetrics();
    v34 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v32, v33, v34);
    __break(1u);
  }
  return result;
}

void sub_100057840(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  id v24;
  id v25;
  Swift::String v26;
  uint64_t v27;
  uint64_t KeyPath;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;

  v60 = a3;
  v7 = sub_100003DB8(&qword_100319B60);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = sub_100003DB8(&qword_100319B68);
  __chkstk_darwin(v56, v11);
  v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100003DB8(&qword_100319B70);
  v15 = __chkstk_darwin(v59, v14);
  v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15, v18);
  v20 = (char *)&v53 - v19;
  v57 = a1;
  v21 = *a1;
  if (*a1)
  {
    v22 = a2[1];
    v62 = *a2;
    v23 = (void *)objc_opt_self(UIApplication);
    v24 = objc_msgSend(v23, "sharedApplication", swift_retain(v21).n128_f64[0]);
    v25 = objc_msgSend(v24, "userInterfaceLayoutDirection");

    v61 = v20;
    if (v25 == (id)1)
    {
      v63 = v62;
      v64 = v22;
      swift_bridgeObjectRetain(v22);
      v26._countAndFlagsBits = 1819570733;
      v26._object = (void *)0xE400000000000000;
      String.append(_:)(v26);
      v55 = v63;
      v58 = v64;
      v27 = v22;
    }
    else
    {
      v27 = 0;
      v55 = v62;
      v58 = v22;
      v62 = 0;
    }
    swift_bridgeObjectRetain(v22);
    swift_release(v21);
    KeyPath = swift_getKeyPath(&unk_10024FFF8);
    v29 = type metadata accessor for UIMetrics();
    v30 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    v31 = EnvironmentObject.init()(v29, v30);
    v54 = v32;
    *(_QWORD *)v10 = static HorizontalAlignment.center.getter(v31);
    *((_QWORD *)v10 + 1) = 0;
    v10[16] = 1;
    v33 = sub_100003DB8(&qword_100319B78);
    v34 = sub_100057C90((uint64_t)a2, v57, (uint64_t)&v10[*(int *)(v33 + 44)]);
    LOBYTE(v29) = static Edge.Set.top.getter(v34);
    sub_10000B234((uint64_t)v10, (uint64_t)v13, &qword_100319B60);
    v35 = &v13[*(int *)(v56 + 36)];
    *v35 = v29;
    *(_OWORD *)(v35 + 8) = 0u;
    *(_OWORD *)(v35 + 24) = 0u;
    v35[40] = 1;
    sub_100007FF0((uint64_t)v10, &qword_100319B60);
    v36 = v60[3];
    v37 = v60[4];
    sub_100007BBC(v60, v36);
    v38 = (*(double (**)(uint64_t, uint64_t))(v37 + 24))(v36, v37);
    v40 = v39;
    v42 = v41;
    v44 = v43;
    LOBYTE(v29) = static Edge.Set.all.getter(v38);
    sub_10000B234((uint64_t)v13, (uint64_t)v17, &qword_100319B68);
    v45 = &v17[*(int *)(v59 + 36)];
    *v45 = v29;
    *((double *)v45 + 1) = v38;
    *((_QWORD *)v45 + 2) = v40;
    *((_QWORD *)v45 + 3) = v42;
    *((_QWORD *)v45 + 4) = v44;
    v45[40] = 0;
    sub_100007FF0((uint64_t)v13, &qword_100319B68);
    v46 = (uint64_t)v61;
    sub_10000B458((uint64_t)v17, (uint64_t)v61, &qword_100319B70);
    sub_10000B234(v46, (uint64_t)v17, &qword_100319B70);
    v47 = v54;
    *(_QWORD *)a4 = v31;
    *(_QWORD *)(a4 + 8) = v47;
    *(_QWORD *)(a4 + 16) = KeyPath;
    *(_BYTE *)(a4 + 24) = 0;
    v48 = v58;
    *(_QWORD *)(a4 + 32) = v55;
    *(_QWORD *)(a4 + 40) = v48;
    *(_QWORD *)(a4 + 48) = v62;
    *(_QWORD *)(a4 + 56) = v27;
    v49 = sub_100003DB8(&qword_100319B80);
    sub_10000B234((uint64_t)v17, a4 + *(int *)(v49 + 48), &qword_100319B70);
    swift_retain(v31);
    sub_100040244(KeyPath, 0);
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v48);
    sub_100007FF0(v46, &qword_100319B70);
    sub_100007FF0((uint64_t)v17, &qword_100319B70);
    swift_release(v31);
    sub_100040294(KeyPath, 0);
    swift_bridgeObjectRelease(v27);
    swift_bridgeObjectRelease(v48);
  }
  else
  {
    v50 = v57[1];
    v51 = type metadata accessor for UIMetrics();
    v52 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, v50, v51, v52);
    __break(1u);
  }
}

uint64_t sub_100057C90@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  char v43;
  uint64_t KeyPath;
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  double v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  _OWORD *v74;
  uint64_t v75;
  uint64_t v76;
  _OWORD *v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void (*v91)(char *, uint64_t);
  uint64_t result;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  UIContentSizeCategory v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  _QWORD *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  _OWORD v129[12];
  _OWORD v130[10];
  uint64_t v131;
  _QWORD v132[3];
  char v133;
  uint64_t v134;
  uint64_t v135;
  BOOL v136;
  __int16 v137;

  v113 = a3;
  v116 = sub_100003DB8(&qword_100319B88);
  v114 = *(_QWORD *)(v116 - 8);
  v6 = __chkstk_darwin(v116, v5);
  v115 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v8);
  v112 = (char *)&v96 - v9;
  v10 = type metadata accessor for AccessibilityTraits(0);
  v103 = *(_QWORD *)(v10 - 8);
  v104 = v10;
  __chkstk_darwin(v10, v11);
  v102 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_100003DB8(&qword_100319B90);
  __chkstk_darwin(v13, v14);
  v107 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v106 = sub_100003DB8(&qword_100319B98);
  v17 = __chkstk_darwin(v106, v16);
  v111 = (uint64_t)&v96 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __chkstk_darwin(v17, v19);
  v105 = (uint64_t)&v96 - v21;
  __chkstk_darwin(v20, v22);
  v110 = (uint64_t)&v96 - v23;
  v108 = a1;
  v24 = *(_QWORD *)(a1 + 16);
  v25 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)&v129[0] = v24;
  *((_QWORD *)&v129[0] + 1) = v25;
  v26 = sub_10002B3F4();
  v27 = swift_bridgeObjectRetain(v25);
  v28 = Text.init<A>(_:)(v129, &type metadata for String, v26, v27);
  v30 = v29;
  v32 = v31;
  v34 = v33 & 1;
  v35 = static Font.title.getter();
  static Font.Weight.bold.getter();
  v36 = Font.weight(_:)(v35);
  swift_release(v35);
  v37 = Text.font(_:)(v36, v28, v30, v34, v32);
  v99 = v38;
  v98 = v39;
  v101 = v40;
  swift_release(v36);
  sub_10002B438(v28, v30, v34);
  swift_bridgeObjectRelease(v32);
  v109 = a2;
  v41 = *a2;
  if (*a2)
  {
    v42 = *(id *)(v41 + 112);
    v43 = static UIContentSizeCategory.>= infix(_:_:)(v42, UIContentSizeCategoryAccessibilityExtraLarge);

    KeyPath = swift_getKeyPath(&unk_100250020);
    v45 = *(id *)(v41 + 112);
    v46 = static Alignment.center.getter(v45);
    v48 = v47;
    v97 = UIContentSizeCategoryAccessibilityExtraLarge;
    v49 = static UIContentSizeCategory.>= infix(_:_:)(v45, UIContentSizeCategoryAccessibilityExtraLarge);
    v100 = v41;
    if ((v49 & 1) != 0
      && (v50 = static Alignment.center.getter(v49),
          v52 = static Alignment.== infix(_:_:)(v46, v48, v50, v51),
          (v52 & 1) != 0))
    {
      v54 = KeyPath;
      v46 = static Alignment.leading.getter(v52, v53);
      v48 = v55;
    }
    else
    {
      v54 = KeyPath;
    }

    v56 = v98 & 1;
    v57 = v99;
    v132[1] = v37;
    v132[2] = v99;
    v133 = v98 & 1;
    v58 = v37;
    v59 = v101;
    v134 = v101;
    v135 = v54;
    v136 = (v43 & 1) == 0;
    v137 = 256;
    sub_1001317C8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v130, 0.0, 1, 0.0, 1, v46, v48);
    sub_10002B438(v58, v57, v56);
    swift_release(v54);
    swift_bridgeObjectRelease(v59);
    v60 = v100;
    v61 = *(id *)(v100 + 112);
    LOBYTE(v59) = static UIContentSizeCategory.>= infix(_:_:)(v61, v97);

    if ((v59 & 1) != 0)
      v62 = 1.0;
    else
      v62 = 0.5;
    v63 = swift_getKeyPath(&unk_100250050);
    v124 = v130[6];
    v125 = v130[7];
    v126 = v130[8];
    v127 = v130[9];
    v120 = v130[2];
    v121 = v130[3];
    v122 = v130[4];
    v123 = v130[5];
    v118 = v130[0];
    v119 = v130[1];
    *(_QWORD *)&v128 = v63;
    *((double *)&v128 + 1) = v62;
    v64 = v102;
    static AccessibilityTraits.isHeader.getter();
    v65 = sub_100003DB8(&qword_100319298);
    v66 = sub_100042BEC();
    v67 = (uint64_t)v107;
    View.accessibility(addTraits:)(v64, v65, v66);
    (*(void (**)(char *, uint64_t))(v103 + 8))(v64, v104);
    v129[8] = v126;
    v129[9] = v127;
    v129[10] = v128;
    v129[4] = v122;
    v129[5] = v123;
    v129[6] = v124;
    v129[7] = v125;
    v129[0] = v118;
    v129[1] = v119;
    v129[2] = v120;
    v129[3] = v121;
    v68 = sub_100038994((uint64_t)v129);
    v69 = static Edge.Set.bottom.getter(v68);
    v70 = v105;
    sub_10000B234(v67, v105, &qword_100319B90);
    v71 = v70 + *(int *)(v106 + 36);
    *(_BYTE *)v71 = v69;
    *(_OWORD *)(v71 + 8) = 0u;
    *(_OWORD *)(v71 + 24) = 0u;
    *(_BYTE *)(v71 + 40) = 1;
    sub_100007FF0(v67, &qword_100319B90);
    v72 = v110;
    sub_10000B458(v70, v110, &qword_100319B98);
    v117 = *(_QWORD *)(v108 + 32);
    *(_QWORD *)&v118 = v117;
    v73 = swift_getKeyPath(&unk_100250088);
    v74 = v109;
    v75 = v109[3];
    v76 = v109[4];
    v131 = v109[5];
    v132[0] = v75;
    v77 = (_OWORD *)swift_allocObject(&unk_1002E8058, 64, 7);
    v78 = v74[1];
    v77[1] = *v74;
    v77[2] = v78;
    v77[3] = v74[2];
    sub_100034218(&v118);
    swift_retain(v60);
    sub_100031A88(v132);
    swift_retain(v76);
    sub_100034218(&v131);
    v79 = sub_100003DB8(&qword_100317980);
    v80 = sub_100003DB8(&qword_100319288);
    v81 = sub_1000084FC(&qword_100319618, &qword_100317980, (uint64_t)&protocol conformance descriptor for [A]);
    v82 = sub_10002B614(&qword_100319280, &qword_100319288, (void (*)(void))sub_100042BEC);
    v83 = v112;
    ForEach<>.init(_:id:content:)(&v117, v73, sub_100059080, v77, v79, v80, v81, &protocol witness table for String, v82);
    v84 = v111;
    sub_10000B234(v72, v111, &qword_100319B98);
    v86 = v114;
    v85 = v115;
    v87 = *(void (**)(char *, char *, uint64_t))(v114 + 16);
    v88 = v116;
    v87(v115, v83, v116);
    v89 = v113;
    sub_10000B234(v84, v113, &qword_100319B98);
    v90 = sub_100003DB8(&qword_100319BA0);
    v87((char *)(v89 + *(int *)(v90 + 48)), v85, v88);
    v91 = *(void (**)(char *, uint64_t))(v86 + 8);
    v91(v83, v88);
    sub_100007FF0(v72, &qword_100319B98);
    v91(v85, v88);
    return sub_100007FF0(v84, &qword_100319B98);
  }
  else
  {
    v93 = v109[1];
    v94 = type metadata accessor for UIMetrics();
    v95 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v93, v94, v95);
    __break(1u);
  }
  return result;
}

uint64_t sub_10005839C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  char v36;
  double v37;
  uint64_t v38;
  uint64_t result;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t KeyPath;
  char v50;
  uint64_t v51;
  _OWORD v52[10];
  uint64_t v53;
  uint64_t v54;
  char v55;
  uint64_t v56;
  uint64_t v57;
  BOOL v58;
  __int16 v59;

  v5 = a1[1];
  *(_QWORD *)&v52[0] = *a1;
  *((_QWORD *)&v52[0] + 1) = v5;
  v6 = sub_10002B3F4();
  v7 = swift_bridgeObjectRetain(v5);
  v8 = Text.init<A>(_:)(v52, &type metadata for String, v6, v7);
  v10 = v9;
  v12 = v11;
  v14 = v13 & 1;
  v15 = static Font.body.getter(v8);
  v16 = Text.font(_:)(v15, v8, v10, v14, v12);
  v51 = v17;
  v50 = v18;
  v20 = v19;
  swift_release(v15);
  sub_10002B438(v8, v10, v14);
  swift_bridgeObjectRelease(v12);
  v21 = *a2;
  if (*a2)
  {
    v22 = *(id *)(v21 + 112);
    v48 = static UIContentSizeCategory.>= infix(_:_:)(v22, UIContentSizeCategoryAccessibilityExtraLarge);

    KeyPath = swift_getKeyPath(&unk_100250020);
    v23 = *(id *)(v21 + 112);
    v24 = static Alignment.center.getter(v23);
    v26 = v25;
    v27 = static UIContentSizeCategory.>= infix(_:_:)(v23, UIContentSizeCategoryAccessibilityExtraLarge);
    if ((v27 & 1) != 0
      && (v28 = static Alignment.center.getter(v27),
          v30 = static Alignment.== infix(_:_:)(v24, v26, v28, v29),
          (v30 & 1) != 0))
    {
      v32 = v16;
      v33 = v20;
      v24 = static Alignment.leading.getter(v30, v31);
      v26 = v34;
    }
    else
    {
      v32 = v16;
      v33 = v20;
    }

    v53 = v32;
    v54 = v51;
    v55 = v50 & 1;
    v56 = v33;
    v57 = KeyPath;
    v58 = (v48 & 1) == 0;
    v59 = 256;
    sub_1001317C8(0.0, 1, 0.0, 1, INFINITY, 0, 0.0, 1, v52, 0.0, 1, 0.0, 1, v24, v26);
    sub_10002B438(v32, v51, v50 & 1);
    swift_release(KeyPath);
    swift_bridgeObjectRelease(v33);
    v35 = *(id *)(v21 + 112);
    v36 = static UIContentSizeCategory.>= infix(_:_:)(v35, UIContentSizeCategoryAccessibilityExtraLarge);

    if ((v36 & 1) != 0)
      v37 = 1.0;
    else
      v37 = 0.5;
    v38 = swift_getKeyPath(&unk_100250050);
    result = static Edge.Set.bottom.getter(v38);
    v40 = v52[7];
    *(_OWORD *)(a3 + 96) = v52[6];
    *(_OWORD *)(a3 + 112) = v40;
    v41 = v52[9];
    *(_OWORD *)(a3 + 128) = v52[8];
    *(_OWORD *)(a3 + 144) = v41;
    v42 = v52[3];
    *(_OWORD *)(a3 + 32) = v52[2];
    *(_OWORD *)(a3 + 48) = v42;
    v43 = v52[5];
    *(_OWORD *)(a3 + 64) = v52[4];
    *(_OWORD *)(a3 + 80) = v43;
    v44 = v52[1];
    *(_OWORD *)a3 = v52[0];
    *(_OWORD *)(a3 + 16) = v44;
    *(_QWORD *)(a3 + 160) = v38;
    *(double *)(a3 + 168) = v37;
    *(_BYTE *)(a3 + 176) = result;
    *(_OWORD *)(a3 + 184) = 0u;
    *(_OWORD *)(a3 + 200) = 0u;
    *(_BYTE *)(a3 + 216) = 1;
  }
  else
  {
    v45 = a2[1];
    v46 = type metadata accessor for UIMetrics();
    v47 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v45, v46, v47);
    __break(1u);
  }
  return result;
}

uint64_t sub_10005869C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  double v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD v33[2];
  char v34;
  char v35;
  uint64_t v36;
  char v37;
  double v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  char v43;
  __int128 v44;
  __int128 v45;
  char v46;
  char v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  _QWORD v53[24];

  if (*(_BYTE *)(a1 + 16) == 3)
  {
    v5 = type metadata accessor for AppEvents();
    v6 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    v7 = EnvironmentObject.init()(v5, v6);
    v31 = v8;
    v32 = v7;
    LOBYTE(v33[0]) = 0;
    State.init(wrappedValue:)(v53, v33, &type metadata for Bool);
    v9 = v53[0];
    v10 = v53[1];
    v11 = a2[3];
    v12 = a2[4];
    sub_100007BBC(a2, v11);
    v13 = (*(double (**)(uint64_t, uint64_t))(v12 + 24))(v11, v12);
    v15 = v14;
    v17 = v16;
    v19 = v18;
    v20 = static Edge.Set.all.getter(v13);
    LOBYTE(v11) = v20;
    v21 = static Edge.Set.top.getter(v20);
    LOBYTE(v12) = v21;
    v22 = static Edge.Set.bottom.getter(v21);
    v23 = a2[3];
    v24 = a2[4];
    sub_100007BBC(a2, v23);
    v25 = (*(double (**)(uint64_t, uint64_t))(v24 + 112))(v23, v24);
    v26 = EdgeInsets.init(_all:)(v25);
    v33[0] = v32;
    v33[1] = v31;
    v34 = 3;
    v35 = v9;
    v36 = v10;
    v37 = v11;
    v38 = v13;
    v39 = v15;
    v40 = v17;
    v41 = v19;
    v42 = 0;
    v43 = v12;
    v45 = 0u;
    v44 = 0u;
    v46 = 1;
    v47 = v22;
    v48 = v26;
    v49 = v27;
    v50 = v28;
    v51 = v29;
    v52 = 0;
    ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter(v33);
  }
  else
  {
    sub_100058FF0((uint64_t)v33);
  }
  sub_10000B458((uint64_t)v33, (uint64_t)v53, &qword_100319B58);
  return sub_10000B458((uint64_t)v53, a3, &qword_100319B58);
}

uint64_t sub_100058874()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v0 = type metadata accessor for ToolbarItemPlacement(0);
  __chkstk_darwin(v0, v1);
  v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = sub_100003DB8(&qword_100319200);
  v5 = *(_QWORD *)(v4 - 8);
  v7 = __chkstk_darwin(v4, v6);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ToolbarItemPlacement.navigationBarTrailing.getter(v7);
  v10 = sub_100042930();
  ToolbarItem<>.init(placement:content:)(v3, sub_100058984, 0, &type metadata for TryOutCancelIntroButton, v10);
  v11 = sub_1000084FC(&qword_100319B50, &qword_100319200, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  static ToolbarContentBuilder.buildBlock<A>(_:)(v9, v4, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v9, v4);
}

uint64_t sub_100058984@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v2 = type metadata accessor for AppEvents();
  v3 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
  v4 = EnvironmentObject.init()(v2, v3);
  v6 = v5;
  result = swift_getKeyPath(&unk_10024FFD0);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = result;
  *(_BYTE *)(a1 + 24) = 0;
  return result;
}

void sub_100058A00(char a1)
{
  __asm { BR              X11 }
}

void sub_100058A54()
{
  Swift::String *v0;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  Swift::String v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  Swift::String v13;
  id v14;
  Swift::String v15;
  Swift::String_optional v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;

  v1 = (void *)objc_opt_self(NSBundle);
  v2 = objc_msgSend(v1, "mainBundle");
  v3._countAndFlagsBits = 0xD000000000000016;
  v19._object = (void *)0x8000000100264DF0;
  v3._object = (void *)0x8000000100264DD0;
  v4.value._countAndFlagsBits = 0x5072656972726143;
  v4.value._object = (void *)0xED00006E6F656769;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v19._countAndFlagsBits = 0xD000000000000031;
  v6 = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, v19);

  v7 = sub_100003DB8((uint64_t *)&unk_10031B300);
  v8 = swift_allocObject(v7, 64, 7);
  *(_OWORD *)(v8 + 16) = xmmword_10024DEE0;
  v9 = objc_msgSend(v1, "mainBundle");
  v10._countAndFlagsBits = 0xD00000000000007CLL;
  v20._object = (void *)0x8000000100264EB0;
  v10._object = (void *)0x8000000100264E30;
  v11.value._countAndFlagsBits = 0x5072656972726143;
  v11.value._object = (void *)0xED00006E6F656769;
  v12._countAndFlagsBits = 0;
  v12._object = (void *)0xE000000000000000;
  v20._countAndFlagsBits = 0xD000000000000031;
  v13 = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v20);

  *(Swift::String *)(v8 + 32) = v13;
  v14 = objc_msgSend(v1, "mainBundle");
  v15._countAndFlagsBits = 0xD000000000000095;
  v21._object = (void *)0x8000000100264F90;
  v15._object = (void *)0x8000000100264EF0;
  v16.value._countAndFlagsBits = 0x5072656972726143;
  v16.value._object = (void *)0xED00006E6F656769;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  v21._countAndFlagsBits = 0xD000000000000031;
  v18 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, v16, (NSBundle)v14, v17, v21);

  *(Swift::String *)(v8 + 48) = v18;
  v0->_countAndFlagsBits = 0xD00000000000001BLL;
  v0->_object = (void *)0x8000000100264DB0;
  v0[1] = v6;
  v0[2]._countAndFlagsBits = v8;
}

uint64_t sub_100058F2C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  swift_bridgeObjectRelease(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  swift_bridgeObjectRelease(v0[12]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 13);
  return swift_deallocObject(v0, 144, 7);
}

void sub_100058F88(uint64_t a1@<X8>)
{
  _QWORD *v1;

  sub_100057840(v1 + 2, v1 + 8, v1 + 13, a1);
}

uint64_t sub_100058F98()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 8);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_100058FDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10005869C(v1 + 16, (_QWORD *)(v1 + 64), a1);
}

double sub_100058FF0(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = 1;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 161) = 0u;
  return result;
}

uint64_t sub_100059044()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[5]);
  swift_release(v0[6]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100059080@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return sub_10005839C(a1, (uint64_t *)(v2 + 16), a2);
}

uint64_t sub_100059088()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v0 = sub_100007FAC(&qword_100319B30);
  v1 = sub_100007FAC(&qword_100319B48);
  v7 = sub_100007FAC(&qword_100319B38);
  v8 = sub_1000084FC(&qword_100319B40, &qword_100319B38, (uint64_t)&unk_100256288);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.navigationBarTitleDisplayMode(_:)>>, 1);
  v3 = sub_100007FAC(&qword_100319200);
  v4 = sub_1000084FC(&qword_100319B50, &qword_100319200, (uint64_t)&protocol conformance descriptor for ToolbarItem<A, B>);
  v7 = v3;
  v8 = v4;
  v5 = swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of static ToolbarContentBuilder.buildBlock<A>(_:)>>, 1);
  v7 = v0;
  v8 = v1;
  v9 = OpaqueTypeConformance2;
  v10 = v5;
  return swift_getOpaqueTypeConformance2(&v7, &opaque type descriptor for <<opaque return type of View.toolbar<A>(content:)>>, 1);
}

id sub_100059180()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  __n128 v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  id v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint64_t v21;
  objc_super v22;

  v1 = OBJC_IVAR____TtC8SOSBuddy16LockScreenSource_lockedStateDidChange;
  v2 = sub_100003DB8(&qword_10031D150);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = v0;
  *(_QWORD *)&v0[v1] = PassthroughSubject.init()(v4);
  *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy16LockScreenSource_agent] = 0;

  v22.receiver = v3;
  v22.super_class = (Class)type metadata accessor for LockScreenSource();
  v5 = objc_msgSendSuper2(&v22, "init");
  v6 = qword_100315820;
  v7 = v5;
  if (v6 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v8 = type metadata accessor for Logger(0);
  sub_10000D744(v8, (uint64_t)qword_10033FD18);
  v9 = v7;
  v10 = Logger.logObject.getter(v9);
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = swift_slowAlloc(32, -1);
    v21 = v13;
    *(_DWORD *)v12 = 136446210;
    v14 = v9;
    v15 = objc_msgSend(v14, "description");
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(v15);
    v18 = v17;

    v20 = sub_100172BEC(v16, v18, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v12 + 4, v12 + 12);

    swift_bridgeObjectRelease(v18);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "init: %{public}s", v12, 0xCu);
    swift_arrayDestroy(v13, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

  }
  else
  {

  }
  return v9;
}

id sub_1000593E0()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  objc_class *v12;
  uint64_t v14;
  uint64_t v15;
  objc_super v16;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD18);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v15 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v14 = sub_100172BEC(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "deinit: %{public}s", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v12 = (objc_class *)type metadata accessor for LockScreenSource();
  v16.receiver = v2;
  v16.super_class = v12;
  return objc_msgSendSuper2(&v16, "dealloc");
}

uint64_t type metadata accessor for LockScreenSource()
{
  return objc_opt_self(_TtC8SOSBuddy16LockScreenSource);
}

uint64_t sub_100059644()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  BOOL v22;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_100315888 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315888, sub_1000D97B0);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FE50);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "start", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = swift_allocObject(&unk_1002E80C8, 24, 7);
  swift_unknownObjectWeakInit(v14 + 16, v1);
  v15 = objc_allocWithZone((Class)type metadata accessor for LockScreenAgent());
  v16 = sub_10000DF30((uint64_t)sub_100059B80, v14);
  v17 = OBJC_IVAR____TtC8SOSBuddy16LockScreenSource_agent;
  v18 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy16LockScreenSource_agent);
  *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy16LockScreenSource_agent) = v16;

  v20 = *(void **)(v1 + v17);
  if (v20)
  {
    v21 = v20;
    v22 = sub_10000E5F8();

    if (v22)
      return 1;
  }
  v24 = Logger.logObject.getter(v19);
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Failed to start LockScreenAgent", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

  return 0;
}

uint64_t sub_1000598A8(char a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __n128 v9;
  char v10;
  uint64_t result;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10000D75C();
  *v8 = static OS_dispatch_queue.main.getter(v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = _dispatchPreconditionTest(_:)(v8);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v10 & 1) != 0)
  {
    swift_beginAccess(a2 + 16, v15, 0, 0);
    result = swift_unknownObjectWeakLoadStrong(a2 + 16);
    if (result)
    {
      v12 = (void *)result;
      v13 = *(_QWORD *)(result + OBJC_IVAR____TtC8SOSBuddy16LockScreenSource_lockedStateDidChange);
      swift_retain(v13);

      HIBYTE(v14) = a1 & 1;
      PassthroughSubject.send(_:)((char *)&v14 + 7);
      return swift_release(v13);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_1000599C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  void *v15;
  id v16;
  uint64_t v17;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_100315888 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315888, sub_1000D97B0);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FE50);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "stop", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  v14 = OBJC_IVAR____TtC8SOSBuddy16LockScreenSource_agent;
  v15 = *(void **)(v1 + OBJC_IVAR____TtC8SOSBuddy16LockScreenSource_agent);
  if (v15)
  {
    v16 = v15;
    sub_10000EA74();

    v15 = *(void **)(v1 + v14);
  }
  *(_QWORD *)(v1 + v14) = 0;

}

uint64_t sub_100059B5C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100059B80(char a1)
{
  uint64_t v1;

  return sub_1000598A8(a1, v1);
}

uint64_t sub_100059B88(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_10006360C((uint64_t)v5, (uint64_t)v7) & 1;
}

BOOL sub_100059BD0(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && *(unsigned __int8 *)(a1 + 8) == *(unsigned __int8 *)(a2 + 8);
}

BOOL sub_100059BFC(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  _OWORD v6[2];
  _OWORD v7[2];
  _OWORD v8[2];

  v2 = a1[1];
  v5[0] = *a1;
  v5[1] = v2;
  v6[0] = a1[2];
  *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)a1 + 41);
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  v8[0] = a2[2];
  *(_OWORD *)((char *)v8 + 9) = *(_OWORD *)((char *)a2 + 41);
  return sub_100063564((uint64_t)v5, (uint64_t)v7);
}

_QWORD *sub_100059C54()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  __n128 v17;
  id v18;
  id v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String v23;
  __n128 v24;
  _QWORD *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  void *v31;
  __n128 v32;
  __n128 v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  _QWORD *v41;
  __n128 v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  unint64_t v55;

  v1 = v0;
  v2 = *v0;
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0);
  v51 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for OS_dispatch_queue.Attributes(0);
  __chkstk_darwin(v49, v7);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v15 = swift_retain(v0);
  v0[4] = PassthroughSubject.init()(v15);
  v16 = sub_100003DB8(&qword_100319D80);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v0[5] = PassthroughSubject.init()(v17);
  v0[7] = 0;
  swift_unknownObjectWeakInit(v0 + 6, 0);
  v0[9] = 0;
  swift_unknownObjectWeakInit(v0 + 8, 0);
  v0[11] = 0;
  swift_unknownObjectWeakInit(v0 + 10, 0);
  v18 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v19 = objc_msgSend(v18, "bundleIdentifier");

  v48 = v2;
  v52 = v3;
  v50 = v6;
  if (v19)
  {
    v20 = (_QWORD *)static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
    v22 = v21;

  }
  else
  {
    v22 = 0x8000000100260990;
    v20 = (_QWORD *)0xD000000000000012;
  }
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v54 = v20;
  v55 = v22;
  swift_bridgeObjectRetain(v22);
  v23._countAndFlagsBits = 0xD000000000000026;
  v23._object = (void *)0x80000001002654D0;
  String.append(_:)(v23);
  v24 = swift_bridgeObjectRelease(v22);
  v25 = v54;
  v26 = v55;
  static DispatchQoS.unspecified.getter(v24);
  v54 = _swiftEmptyArrayStorage;
  v27 = sub_1000052EC((unint64_t *)&unk_1003178B0, (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  v28 = sub_100003DB8((uint64_t *)&unk_100324AE0);
  v29 = sub_1000084FC((unint64_t *)&unk_1003178C0, (uint64_t *)&unk_100324AE0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v28, v29, v49, v27);
  v30 = v50;
  (*(void (**)(char *, _QWORD, uint64_t))(v51 + 104))(v50, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v52);
  v1[12] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)(v25, v26, v13, v9, v30, 0);
  *(_OWORD *)(v1 + 13) = 0u;
  *(_OWORD *)(v1 + 15) = 0u;
  *(_OWORD *)(v1 + 17) = 0u;
  *(_OWORD *)(v1 + 19) = 0u;
  *((_BYTE *)v1 + 168) = 2;
  v1[22] = 0;
  *((_BYTE *)v1 + 184) = 1;
  *((_OWORD *)v1 + 12) = 0u;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  v1[30] = 0;
  *((_WORD *)v1 + 124) = 3;
  v1[32] = 0;
  v1[33] = 0;
  *((_BYTE *)v1 + 272) = 2;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
  {
    v31 = &_swiftEmptySetSingleton;
    v1[35] = &_swiftEmptySetSingleton;
    goto LABEL_6;
  }
  if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100209204((uint64_t)_swiftEmptyArrayStorage);
    v1[35] = v47;
  }
  else
  {
    v31 = &_swiftEmptySetSingleton;
    v1[35] = &_swiftEmptySetSingleton;
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
      goto LABEL_6;
  }
  if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    sub_100209204((uint64_t)_swiftEmptyArrayStorage);
  else
    v31 = &_swiftEmptySetSingleton;
LABEL_6:
  v1[36] = v31;
  v1[37] = 0;
  *((_OWORD *)v1 + 19) = xmmword_1002500D0;
  *((_OWORD *)v1 + 20) = xmmword_1002500D0;
  v1[42] = 1;
  *(_OWORD *)(v1 + 43) = 0u;
  *(_OWORD *)(v1 + 45) = 0u;
  swift_release(v1);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v1[2] = PassthroughSubject.init()(v32);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  v1[3] = PassthroughSubject.init()(v33);
  v34 = qword_100315820;
  swift_retain(v1);
  if (v34 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v35 = type metadata accessor for Logger(0);
  sub_10000D744(v35, (uint64_t)qword_10033FD18);
  v37 = swift_retain_n(v1, v36);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(12, -1);
    v41 = (_QWORD *)swift_slowAlloc(32, -1);
    v53 = (uint64_t)v1;
    v54 = v41;
    *(_DWORD *)v40 = 136446210;
    v42 = swift_retain(v1);
    v43 = String.init<A>(describing:)(&v53, v48, v42);
    v45 = v44;
    v53 = sub_100172BEC(v43, v44, (uint64_t *)&v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v40 + 4, v40 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v45);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "[%{public}s] init", v40, 0xCu);
    swift_arrayDestroy(v41, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1, -1);
    swift_slowDealloc(v40, -1, -1);

    swift_release(v1);
  }
  else
  {

    swift_release_n(v1);
  }
  return v1;
}

double sub_10005A214()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double result;

  swift_release(*(_QWORD *)(v0 + 32));
  swift_release(*(_QWORD *)(v0 + 40));
  sub_100025CF8(v0 + 48);
  sub_100025CF8(v0 + 64);
  sub_100025CF8(v0 + 80);

  swift_release(*(_QWORD *)(v0 + 104));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 112));
  sub_100034464(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 136), *(_QWORD *)(v0 + 144), *(_QWORD *)(v0 + 152));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 160));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 264));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 280));
  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 288));
  v1 = *(_QWORD *)(v0 + 312);
  v2 = *(_QWORD *)(v0 + 320);
  v3 = *(_QWORD *)(v0 + 328);
  v4 = *(_QWORD *)(v0 + 336);
  v5 = *(_QWORD *)(v0 + 344);
  v6 = *(_QWORD *)(v0 + 352);
  sub_10006491C(*(_QWORD *)(v0 + 296), *(_QWORD *)(v0 + 304));
  sub_10006491C(v1, v2);
  sub_100064A24(v3, v4, v5, v6);
  *(_QWORD *)&result = swift_bridgeObjectRelease(*(_QWORD *)(v0 + 368)).n128_u64[0];
  return result;
}

_QWORD *sub_10005A2EC()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;

  v1 = v0;
  v2 = *v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v3 = type metadata accessor for Logger(0);
  sub_10000D744(v3, (uint64_t)qword_10033FD18);
  v5 = swift_retain_n(v0, v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v21 = (uint64_t)v1;
    v22 = v9;
    *(_DWORD *)v8 = 136446210;
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v21, v2, v10);
    v13 = v12;
    v21 = sub_100172BEC(v11, v12, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v8 + 4, v8 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%{public}s] deinit", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  swift_release(v1[2]);
  swift_release(v1[3]);
  swift_release(v1[4]);
  swift_release(v1[5]);
  sub_100025CF8((uint64_t)(v1 + 6));
  sub_100025CF8((uint64_t)(v1 + 8));
  sub_100025CF8((uint64_t)(v1 + 10));

  swift_release(v1[13]);
  swift_bridgeObjectRelease(v1[14]);
  sub_100034464(v1[15], v1[16], v1[17], v1[18], v1[19]);
  swift_bridgeObjectRelease(v1[20]);
  swift_bridgeObjectRelease(v1[33]);
  swift_bridgeObjectRelease(v1[35]);
  swift_bridgeObjectRelease(v1[36]);
  v14 = v1[39];
  v15 = v1[40];
  v16 = v1[41];
  v17 = v1[42];
  v18 = v1[43];
  v19 = v1[44];
  sub_10006491C(v1[37], v1[38]);
  sub_10006491C(v14, v15);
  sub_100064A24(v16, v17, v18, v19);
  swift_bridgeObjectRelease(v1[46]);
  return v1;
}

uint64_t sub_10005A560()
{
  uint64_t v0;

  sub_10005A2EC();
  return swift_deallocClassInstance(v0, 376, 7);
}

uint64_t type metadata accessor for RoadsideAssistanceModel()
{
  return objc_opt_self(_TtC8SOSBuddy23RoadsideAssistanceModel);
}

uint64_t destroy for QuestionnaireLoadingState(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = a1[1];
  if (v2 != 1)
    swift_bridgeObjectRelease(v2);
  v3 = a1[3];
  if (v3 != 1)
    swift_bridgeObjectRelease(v3);
  result = a1[5];
  if (result != 1)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a1[7]);
  }
  return result;
}

uint64_t initializeWithCopy for QuestionnaireLoadingState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _OWORD *v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_QWORD *)(a2 + 8);
  if (v4 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v4;
    swift_bridgeObjectRetain(v4);
  }
  v5 = (_OWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  if (v6 == 1)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    *(_QWORD *)(a1 + 16) = *(_QWORD *)v5;
    *(_QWORD *)(a1 + 24) = v6;
    swift_bridgeObjectRetain(v6);
  }
  v7 = *(_QWORD *)(a2 + 40);
  if (v7 == 1)
  {
    v8 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v8;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 40) = v7;
    v9 = *(_QWORD *)(a2 + 48);
    v10 = *(_QWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 48) = v9;
    *(_QWORD *)(a1 + 56) = v10;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v10);
  }
  return a1;
}

uint64_t assignWithCopy for QuestionnaireLoadingState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a2 + 8);
  if (v4 == 1)
  {
    if (v5 != 1)
    {
      *(_QWORD *)a1 = *(_QWORD *)a2;
      v6 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = v6;
      swift_bridgeObjectRetain(v6);
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v5 == 1)
  {
    sub_100031198(a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v4);
LABEL_8:
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a2 + 24);
  if (v8 == 1)
  {
    if (v9 != 1)
    {
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      v10 = *(_QWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 24) = v10;
      swift_bridgeObjectRetain(v10);
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v9 == 1)
  {
    sub_100031198(a1 + 16);
LABEL_13:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_15;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v11;
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRelease(v8);
LABEL_15:
  v12 = (_OWORD *)(a1 + 32);
  v13 = (_OWORD *)(a2 + 32);
  v14 = *(_QWORD *)(a1 + 40);
  v15 = *(_QWORD *)(a2 + 40);
  if (v14 == 1)
  {
    if (v15 == 1)
    {
      v16 = *(_OWORD *)(a2 + 48);
      *v12 = *v13;
      *(_OWORD *)(a1 + 48) = v16;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      v18 = *(_QWORD *)(a2 + 40);
      *(_QWORD *)(a1 + 40) = v18;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      v19 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a1 + 56) = v19;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v19);
    }
  }
  else if (v15 == 1)
  {
    sub_10005A86C(a1 + 32);
    v17 = *(_OWORD *)(a2 + 48);
    *v12 = *v13;
    *(_OWORD *)(a1 + 48) = v17;
  }
  else
  {
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    v20 = *(_QWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 40) = v20;
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease(v14);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    v21 = *(_QWORD *)(a2 + 56);
    v22 = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a1 + 56) = v21;
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease(v22);
  }
  return a1;
}

uint64_t sub_10005A86C(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 24));
  return a1;
}

uint64_t assignWithTake for QuestionnaireLoadingState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 == 1)
    goto LABEL_4;
  v5 = *(_QWORD *)(a2 + 8);
  if (v5 == 1)
  {
    sub_100031198(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
LABEL_6:
  v6 = (_OWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  if (v7 == 1)
  {
LABEL_9:
    *(_OWORD *)(a1 + 16) = *v6;
    goto LABEL_11;
  }
  v8 = *(_QWORD *)(a2 + 24);
  if (v8 == 1)
  {
    sub_100031198(a1 + 16);
    goto LABEL_9;
  }
  *(_QWORD *)(a1 + 16) = *(_QWORD *)v6;
  *(_QWORD *)(a1 + 24) = v8;
  swift_bridgeObjectRelease(v7);
LABEL_11:
  v9 = *(_QWORD *)(a1 + 40);
  if (v9 != 1)
  {
    v10 = *(_QWORD *)(a2 + 40);
    if (v10 != 1)
    {
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
      *(_QWORD *)(a1 + 40) = v10;
      swift_bridgeObjectRelease(v9);
      v12 = *(_QWORD *)(a2 + 56);
      v13 = *(_QWORD *)(a1 + 56);
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_QWORD *)(a1 + 56) = v12;
      swift_bridgeObjectRelease(v13);
      return a1;
    }
    sub_10005A86C(a1 + 32);
  }
  v11 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v11;
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionnaireLoadingState(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;
  BOOL v5;
  int v6;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFFD && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 2147483646);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  v5 = __OFSUB__(v4, 1);
  v6 = v4 - 1;
  if (v6 < 0 != v5)
    v6 = -1;
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnaireLoadingState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 > 0x7FFFFFFD)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2 + 1;
  }
  return result;
}

ValueMetadata *_s8SOSBuddy25QuestionnaireLoadingStateVMa_0()
{
  return &_s8SOSBuddy25QuestionnaireLoadingStateVN_0;
}

uint64_t getEnumTagSinglePayload for DeviceOrientationErrorOverrideMessage(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceOrientationErrorOverrideMessage(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *_s8SOSBuddy25QuestionnaireLoadingStateV11RequestDoneVMa_0()
{
  return &_s8SOSBuddy25QuestionnaireLoadingStateV11RequestDoneVN_0;
}

uint64_t getEnumTagSinglePayload for QuestionnaireState.RecordedAnswer(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnaireState.RecordedAnswer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *_s8SOSBuddy25QuestionnaireLoadingStateV7RequestVMa_0()
{
  return &_s8SOSBuddy25QuestionnaireLoadingStateV7RequestVN_0;
}

uint64_t getEnumTagSinglePayload for RoadsideAssistanceModel.RoadsideAssistance(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 57))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 56);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RoadsideAssistanceModel.RoadsideAssistance(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 56) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 57) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 57) = 0;
    if (a2)
      *(_BYTE *)(result + 56) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RoadsideAssistanceModel.RoadsideAssistance()
{
  return &type metadata for RoadsideAssistanceModel.RoadsideAssistance;
}

uint64_t initializeWithCopy for RoadsideAssistanceProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 24) = *(_WORD *)(a2 + 24);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

uint64_t assignWithCopy for RoadsideAssistanceProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  v6 = *(_QWORD *)(a1 + 32);
  v7 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t assignWithTake for RoadsideAssistanceProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(_BYTE *)(a1 + 25) = *(_BYTE *)(a2 + 25);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for RoadsideAssistanceProvider(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RoadsideAssistanceProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for RoadsideAssistanceProvider()
{
  return &type metadata for RoadsideAssistanceProvider;
}

double sub_10005AE4C()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  double result;
  _BYTE v38[24];
  _BYTE v39[64];
  _QWORD v40[5];
  _BYTE v41[16];
  uint64_t v42;
  _BYTE v43[64];

  v1 = v0;
  v2 = v0 + 37;
  v0[7] = 0;
  swift_unknownObjectWeakAssign(v0 + 6, 0);
  v0[9] = 0;
  swift_unknownObjectWeakAssign(v0 + 8, 0);
  v0[11] = 0;
  swift_unknownObjectWeakAssign(v0 + 10, 0);
  v3 = v0[37];
  v4 = v0[38];
  v5 = v0[39];
  v6 = v1[40];
  v7 = v2[4];
  v8 = v1[42];
  v9 = v1[43];
  v10 = v1[44];
  *(_OWORD *)v2 = xmmword_10024E030;
  *((_OWORD *)v2 + 1) = xmmword_10024E030;
  *((_OWORD *)v2 + 2) = xmmword_10024E030;
  v1[43] = 0;
  v1[44] = 0;
  sub_10006491C(v3, v4);
  sub_10006491C(v5, v6);
  sub_100064A24(v7, v8, v9, v10);
  v11 = *((unsigned __int8 *)v1 + 249);
  if ((_DWORD)v11 == 1)
  {
    v12 = sub_100003DB8(&qword_10032B0E0);
    v13 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v12, v13);
  }
  *((_BYTE *)v1 + 249) = 0;
  sub_10005F5E4(v11);
  *((_BYTE *)v1 + 272) = 2;
  swift_beginAccess(v1 + 14, v38, 1, 0);
  v14 = v1[14];
  if (v14)
  {
    swift_bridgeObjectRetain(v1[14]);
    v15 = sub_100003DB8(&qword_10032B0E0);
    v16 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v15, v16);
    v17 = v1[14];
  }
  else
  {
    v17 = 0;
  }
  v1[14] = 0;
  swift_bridgeObjectRelease(v17);
  sub_10005DEDC(v14);
  swift_bridgeObjectRelease(v14);
  sub_10000B458((uint64_t)(v1 + 15), (uint64_t)v40, &qword_100319D68);
  v18 = v1[15];
  v19 = v1[16];
  v20 = v1[17];
  v21 = v1[18];
  v22 = v1[19];
  sub_10000B458((uint64_t)v40, (uint64_t)v41, &qword_100319D68);
  if (v42)
  {
    sub_100064870(v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v20);
    sub_100034464(v18, v19, v20, v21, v22);
    sub_100034464(0, 0, 0, 0, 0);
    v23 = sub_100003DB8(&qword_10032B0E0);
    v24 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v23, v24);
  }
  v25 = v1[15];
  v26 = v1[16];
  v27 = v1[17];
  v28 = v1[18];
  v29 = v1[19];
  *(_OWORD *)(v1 + 15) = 0u;
  *(_OWORD *)(v1 + 17) = 0u;
  v1[19] = 0;
  sub_100034464(v25, v26, v27, v28, v29);
  sub_10005E68C(v40);
  sub_100064870(v40, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
  v30 = (_QWORD *)v1[20];
  if (v30)
  {
    swift_bridgeObjectRetain(v1[20]);
    v31 = sub_100003DB8(&qword_10032B0E0);
    v32 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v31, v32);
    v33 = v1[20];
  }
  else
  {
    v33 = 0;
  }
  v1[20] = 0;
  swift_bridgeObjectRelease(v33);
  sub_10005EB7C(v30);
  swift_bridgeObjectRelease(v30);
  sub_10000B458((uint64_t)(v1 + 24), (uint64_t)v39, &qword_100319D38);
  sub_10000B458((uint64_t)v39, (uint64_t)v43, &qword_100319D38);
  if (v43[56] != 3)
  {
    v34 = sub_100003DB8(&qword_10032B0E0);
    v35 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v34, v35);
  }
  v1[30] = 0;
  *((_OWORD *)v1 + 13) = 0u;
  *((_OWORD *)v1 + 14) = 0u;
  *((_OWORD *)v1 + 12) = 0u;
  *((_BYTE *)v1 + 248) = 3;
  sub_10005F24C((uint64_t)v39);
  v36 = v1[46];
  v1[45] = 0;
  v1[46] = 0;
  *(_QWORD *)&result = swift_bridgeObjectRelease(v36).n128_u64[0];
  return result;
}

uint64_t sub_10005B21C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  __n128 v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (qword_1003158B8 != -1)
    swift_once(&qword_1003158B8, sub_1000D9880);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FEE0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(12, -1);
    v7 = swift_slowAlloc(32, -1);
    v16 = v7;
    *(_DWORD *)v6 = 136446210;
    sub_10000B458(a1, (uint64_t)&v14, &qword_100319D60);
    v8 = sub_100003DB8(&qword_100319D60);
    v10 = String.init<A>(describing:)(&v14, v8, v9);
    v12 = v11;
    v14 = sub_100172BEC(v10, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "onRequest - %{public}s", v6, 0xCu);
    swift_arrayDestroy(v7, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1, -1);
    swift_slowDealloc(v6, -1, -1);
  }

  return sub_10005B3CC(a1, 0);
}

uint64_t sub_10005B3CC(uint64_t a1, int a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  __n128 v42;
  __n128 v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t Strong;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  __int128 v61;
  _OWORD v62[2];
  uint64_t v63[8];
  __int128 v64;
  _BYTE v65[32];
  uint64_t v66;
  char v67;

  v3 = v2;
  v6 = *v2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (uint64_t *)((char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003158B8 != -1)
    swift_once(&qword_1003158B8, sub_1000D9880);
  v12 = type metadata accessor for Logger(0);
  v13 = sub_10000D744(v12, (uint64_t)qword_10033FEE0);
  v15 = swift_retain_n(v3, v14);
  v60 = v13;
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(64, -1);
    v59 = v6;
    v20 = v19;
    v63[0] = v19;
    *(_DWORD *)v18 = 136446466;
    v58 = a2;
    v57 = v8;
    v56 = v7;
    sub_10000B458(a1, (uint64_t)&v64, &qword_100319D60);
    v21 = sub_100003DB8(&qword_100319D60);
    v23 = String.init<A>(describing:)(&v64, v21, v22);
    v25 = v24;
    *(_QWORD *)&v64 = sub_100172BEC(v23, v24, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, (char *)&v64 + 8, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v25);
    *(_WORD *)(v18 + 12) = 2082;
    v26 = v3[30];
    v27 = *((_BYTE *)v3 + 248);
    v28 = *((_OWORD *)v3 + 13);
    v64 = *((_OWORD *)v3 + 12);
    *(_OWORD *)v65 = v28;
    *(_OWORD *)&v65[16] = *((_OWORD *)v3 + 14);
    v66 = v26;
    v67 = v27;
    v29 = sub_100003DB8(&qword_100319D38);
    v31 = String.init<A>(describing:)(&v64, v29, v30);
    v33 = v32;
    *(_QWORD *)&v64 = sub_100172BEC(v31, v32, v63);
    v7 = v56;
    LOBYTE(a2) = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, (char *)&v64 + 8, v18 + 14, v18 + 22);
    swift_release_n(v3);
    v34 = v33;
    v8 = v57;
    swift_bridgeObjectRelease(v34);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Received request: %{public}s for currentRoadsideAssistance: %{public}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v20, 2, (char *)&type metadata for Any + 8);
    v35 = v20;
    v6 = v59;
    swift_slowDealloc(v35, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

    swift_release_n(v3);
  }
  sub_10000B458(a1, (uint64_t)&v61, &qword_100319D60);
  if (BYTE8(v61) != 2)
  {
    v64 = v61;
    *(_OWORD *)v65 = v62[0];
    *(_OWORD *)&v65[9] = *(_OWORD *)((char *)v62 + 9);
    v39 = swift_allocObject(&unk_1002E8390, 24, 7);
    swift_weakInit(v39 + 16, v3);
    v40 = swift_allocObject(&unk_1002E8458, 66, 7);
    *(_QWORD *)(v40 + 16) = v39;
    v41 = *(_OWORD *)v65;
    *(_OWORD *)(v40 + 24) = v64;
    *(_OWORD *)(v40 + 40) = v41;
    *(_OWORD *)(v40 + 49) = *(_OWORD *)&v65[9];
    *(_BYTE *)(v40 + 65) = a2 & 1;
    sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
    swift_retain_n(v39, v42);
    *v11 = static OS_dispatch_queue.main.getter(v43);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
    v44 = _dispatchPreconditionTest(_:)(v11);
    result = (*(uint64_t (**)(_QWORD *, uint64_t))(v8 + 8))(v11, v7);
    if ((v44 & 1) == 0)
    {
      __break(1u);
      return result;
    }
    swift_beginAccess(v3 + 14, v63, 0, 0);
    v45 = v3[14];
    if (v45)
    {
      swift_bridgeObjectRetain(v3[14]);
      sub_100063AD0(v39, &v64, a2 & 1);
      swift_release(v39);
      swift_release(v40);
      v46 = v45;
    }
    else
    {
      Strong = swift_unknownObjectWeakLoadStrong(v3 + 8);
      if (Strong)
      {
        v48 = Strong;
        v49 = Logger.logObject.getter(Strong);
        v50 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v49, v50))
        {
          v51 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v51 = 0;
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "Fetching roadside providers", v51, 2u);
          swift_slowDealloc(v51, -1, -1);
        }

        v52 = swift_allocObject(&unk_1002E8390, 24, 7);
        swift_weakInit(v52 + 16, v3);
        v53 = (_QWORD *)swift_allocObject(&unk_1002E8480, 48, 7);
        v53[2] = v52;
        v53[3] = sub_100064820;
        v53[4] = v40;
        v53[5] = v6;
        swift_retain(v52);
        swift_retain(v40);
        sub_10021BDC0((uint64_t)sub_100064C38, (uint64_t)v53);
        swift_release(v39);
        swift_release(v40);
        swift_unknownObjectRelease(v48);
        swift_release(v52);
        swift_release(v53);
        return swift_release(v39);
      }
      v54 = sub_10022710C((uint64_t)_swiftEmptyArrayStorage);
      sub_100063AD0(v39, &v64, a2 & 1);
      swift_release(v39);
      swift_release(v40);
      v46 = v54;
    }
    swift_bridgeObjectRelease(v46);
    return swift_release(v39);
  }
  sub_10000B458((uint64_t)(v3 + 24), (uint64_t)v63, &qword_100319D38);
  sub_10000B458((uint64_t)v63, (uint64_t)&v64, &qword_100319D38);
  if (v67 != 3)
  {
    v36 = sub_100003DB8(&qword_10032B0E0);
    v37 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v36, v37);
  }
  v3[30] = 0;
  *((_OWORD *)v3 + 13) = 0u;
  *((_OWORD *)v3 + 14) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_BYTE *)v3 + 248) = 3;
  return sub_10005F24C((uint64_t)v63);
}

void sub_10005B9DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  char v38;
  uint64_t v39;
  char v40;
  _QWORD v41[5];
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  char v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  char v57;

  if (qword_1003158B8 != -1)
    swift_once(&qword_1003158B8, sub_1000D9880);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10000D744(v3, (uint64_t)qword_10033FEE0);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v43 = v8;
    *(_DWORD *)v7 = 136446210;
    sub_10000B458(a1, (uint64_t)&v51, &qword_100319D78);
    v9 = sub_100003DB8(&qword_100319D78);
    v11 = String.init<A>(describing:)(&v51, v9, v10);
    v13 = v12;
    *(_QWORD *)&v51 = sub_100172BEC(v11, v12, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, (char *)&v51 + 8, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "onConversationDidChange - %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);
  }

  v14 = sub_10000B458(a1, (uint64_t)&v35, &qword_100319D78);
  if (v36 == 2)
  {
    v51 = xmmword_1002500E0;
    v53 = 0;
    v54 = 0;
    v52 = 0;
    v55 = 0;
    v15 = &v51;
LABEL_16:
    sub_10005B3CC((uint64_t)v15, 1);
    return;
  }
  v16 = v35;
  if (v35 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
  }
  else
  {
    v17 = v37;
    v18 = v39;
    v19 = v36 & 1;
    v20 = v38 & 1;
    v21 = v40 & 1;
    v22 = *(unsigned __int8 *)(v1 + 248);
    if (v22 == 3)
      goto LABEL_13;
    v23 = *(_QWORD *)(v1 + 240);
    v24 = *(_DWORD *)(v1 + 232);
    v25 = *(_QWORD *)(v1 + 224);
    v26 = *(_DWORD *)(v1 + 216);
    v27 = *(_QWORD *)(v1 + 208);
    v28 = *(_DWORD *)(v1 + 200);
    *(_QWORD *)&v51 = *(_QWORD *)(v1 + 192);
    BYTE8(v51) = v28 & 1;
    v52 = v37;
    LOBYTE(v53) = (_DWORD)v20 != 0;
    v54 = v39;
    v55 = v21 != 0;
    v56 = v35;
    v57 = 2 * v19;
    v43 = v51;
    v44 = v28 & 1;
    v45 = v27;
    v46 = v26 & 1;
    v47 = v25;
    v48 = v24 & 1;
    v49 = v23;
    v50 = v22;
    v14 = sub_100063564((uint64_t)&v43, (uint64_t)&v51);
    if ((v14 & 1) == 0)
    {
LABEL_13:
      v32 = Logger.logObject.getter(v14);
      v33 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "Updating roadside assistance with the simulated request", v34, 2u);
        swift_slowDealloc(v34, -1, -1);
      }

      v41[0] = v16;
      v41[1] = v19;
      v41[2] = v17;
      v41[3] = v20;
      v41[4] = v18;
      v42 = v21;
      v15 = (__int128 *)v41;
      goto LABEL_16;
    }
    v29 = Logger.logObject.getter(v14);
    v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "onConversationDidChange - the same roadside assistance request is tracked already", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

  }
}

void sub_10005BDBC(char a1)
{
  uint64_t v1;
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v7;
  __n128 v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(unsigned __int8 *)(v1 + 272);
  v4 = v2 == 2;
  v3 = v2 & 1;
  v4 = !v4 && v3 == (a1 & 1);
  if (!v4)
  {
    v5 = v1;
    if (qword_1003158B8 != -1)
      swift_once(&qword_1003158B8, sub_1000D9880);
    v7 = type metadata accessor for Logger(0);
    sub_10000D744(v7, (uint64_t)qword_10033FEE0);
    v9 = swift_retain_n(v1, v8);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = swift_slowAlloc(22, -1);
      v13 = swift_slowAlloc(64, -1);
      v27 = v13;
      *(_DWORD *)v12 = 136446466;
      LOBYTE(v26) = *(_BYTE *)(v5 + 272);
      v14 = sub_100003DB8((uint64_t *)&unk_1003263F0);
      v16 = String.init<A>(describing:)(&v26, v14, v15);
      v18 = v17;
      v26 = sub_100172BEC(v16, v17, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v12 + 4, v12 + 12);
      swift_release_n(v5);
      swift_bridgeObjectRelease(v18);
      *(_WORD *)(v12 + 12) = 2082;
      if ((a1 & 1) != 0)
        v19 = 1702195828;
      else
        v19 = 0x65736C6166;
      if ((a1 & 1) != 0)
        v20 = 0xE400000000000000;
      else
        v20 = 0xE500000000000000;
      v26 = sub_100172BEC(v19, v20, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v12 + 14, v12 + 22);
      swift_bridgeObjectRelease(v20);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Cached _linkConnected state changed from %{public}s to %{public}s", (uint8_t *)v12, 0x16u);
      swift_arrayDestroy(v13, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v13, -1, -1);
      swift_slowDealloc(v12, -1, -1);

    }
    else
    {

      swift_release_n(v5);
    }
    *(_BYTE *)(v5 + 272) = a1 & 1;
    if ((a1 & 1) != 0)
    {
      v21 = *(_QWORD *)(v5 + 104);
      if (v21)
      {
        swift_retain(*(_QWORD *)(v5 + 104));
        v22 = sub_1000AD998();
        v24 = v23;
        swift_release(v21);
        if (v24)
        {
          v25 = *(_QWORD *)(v5 + 104);
          if (v25)
          {
            swift_retain(v25);
            sub_1000AA8A0(v22, v24);
            swift_release(v25);
          }
          swift_bridgeObjectRelease(v24);
        }
      }
    }
  }
}

void sub_10005C058(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  __n128 v10;
  __n128 v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v3 = v2;
  v6 = v2[33];
  if (v6)
  {
    if (a2)
    {
      v7 = v2[32];
      v8 = v7 == a1 && v6 == a2;
      if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v6, a1, a2, 0) & 1) != 0)
        return;
    }
  }
  else if (!a2)
  {
    return;
  }
  if (qword_1003158B8 != -1)
    swift_once(&qword_1003158B8, sub_1000D9880);
  v9 = type metadata accessor for Logger(0);
  sub_10000D744(v9, (uint64_t)qword_10033FEE0);
  swift_bridgeObjectRetain_n(a2, 2, v10);
  v12 = swift_retain_n(v2, v11);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = swift_slowAlloc(22, -1);
    v16 = swift_slowAlloc(64, -1);
    v33 = v16;
    *(_DWORD *)v15 = 136446466;
    v17 = v3[33];
    v31 = v3[32];
    v32 = v17;
    swift_bridgeObjectRetain(v17);
    v18 = sub_100003DB8(&qword_100318260);
    v20 = String.init<A>(describing:)(&v31, v18, v19);
    v22 = v21;
    v31 = sub_100172BEC(v20, v21, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v15 + 4, v15 + 12);
    swift_release_n(v3);
    swift_bridgeObjectRelease(v22);
    *(_WORD *)(v15 + 12) = 2082;
    v31 = a1;
    v32 = a2;
    v23 = swift_bridgeObjectRetain(a2);
    v24 = String.init<A>(describing:)(&v31, v18, v23);
    v26 = v25;
    v31 = sub_100172BEC(v24, v25, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease_n(a2, 2);
    swift_bridgeObjectRelease(v26);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "iso3166Alpha3CountryCode changed from %{public}s to %{public}s", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy(v16, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1, -1);
    swift_slowDealloc(v15, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a2, 2);
    swift_release_n(v3);
  }
  v27 = v3[33];
  v3[32] = a1;
  v3[33] = a2;
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v27);
  if (v3[13])
  {
    sub_1000AD25C();
    if ((v28 & 1) == 0)
    {
      v29 = v3[32];
      v30 = v3[33];
      swift_bridgeObjectRetain(v30);
      sub_10005C318(v29, v30);
      swift_bridgeObjectRelease(v30);
    }
  }
}

void sub_10005C318(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint8_t *v27;
  __n128 v28;
  char v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  __n128 v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  _QWORD *v51;
  uint64_t v52;
  __n128 v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  __n128 v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  _QWORD *v69;
  uint64_t v70;
  __n128 v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  const char *v82;
  __n128 v83;
  uint64_t v84;
  _QWORD *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t aBlock;
  _QWORD v93[4];
  _QWORD *v94;

  v3 = v2;
  v89 = a1;
  v90 = a2;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v87 = *(_QWORD *)(v9 - 8);
  v88 = v9;
  __chkstk_darwin(v9, v10);
  v86 = (char *)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchPredicate(0);
  v13 = *(_QWORD *)(v12 - 8);
  __chkstk_darwin(v12, v14);
  v16 = (uint64_t *)((char *)&v84 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003158B8 != -1)
    swift_once(&qword_1003158B8, sub_1000D9880);
  v17 = type metadata accessor for Logger(0);
  v18 = sub_10000D744(v17, (uint64_t)qword_10033FEE0);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(2, -1);
    v85 = v3;
    v22 = v8;
    v23 = v5;
    v24 = v4;
    v25 = v18;
    v26 = v21;
    *(_WORD *)v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "_updateQuestionnaireStateAsync", v21, 2u);
    v27 = v26;
    v18 = v25;
    v4 = v24;
    v5 = v23;
    v8 = v22;
    v3 = v85;
    swift_slowDealloc(v27, -1, -1);
  }

  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v16 = static OS_dispatch_queue.main.getter(v28);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v13 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v12);
  v29 = _dispatchPreconditionTest(_:)(v16);
  (*(void (**)(_QWORD *, uint64_t))(v13 + 8))(v16, v12);
  if ((v29 & 1) == 0)
  {
    __break(1u);
    return;
  }
  v31 = v3[40];
  if (v31 == 1)
  {
    v32 = v3[42];
    v33 = v90;
    if (v32 == 1)
    {
LABEL_8:
      v34 = v3[39];
      v35 = v3[40];
      v36 = v89;
      v3[39] = v89;
      v3[40] = v33;
      swift_bridgeObjectRetain(v33);
      sub_10006491C(v34, v35);
      sub_10005F81C();
      v37 = swift_allocObject(&unk_1002E8390, 24, 7);
      swift_weakInit(v37 + 16, v3);
      v38 = (_QWORD *)swift_allocObject(&unk_1002E8598, 40, 7);
      v38[2] = v37;
      v38[3] = v36;
      v38[4] = v33;
      v93[3] = sub_100064984;
      v94 = v38;
      aBlock = (uint64_t)_NSConcreteStackBlock;
      v93[0] = 1107296256;
      v93[1] = sub_1001BAACC;
      v93[2] = &unk_1002E85B0;
      v39 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain(v33);
      v40 = swift_retain(v37);
      v41 = v86;
      static DispatchQoS.unspecified.getter(v40);
      v91 = _swiftEmptyArrayStorage;
      v42 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      v43 = sub_100003DB8((uint64_t *)&unk_1003178D0);
      v44 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v91, v43, v44, v4, v42);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v41, v8, v39);
      _Block_release(v39);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      (*(void (**)(char *, uint64_t))(v87 + 8))(v41, v88);
      v45 = v94;
      swift_release(v37);
      swift_release(v45);
      return;
    }
    if (v90)
    {
      if (!v32)
        goto LABEL_8;
      v57 = v3[41];
      v58 = v3[43];
      v59 = v3[44];
      if (v57 == v89 && v32 == v90)
      {
        swift_bridgeObjectRetain_n(v90, 2, v30);
        sub_100064990(v89, v33, v58, v59);
        swift_bridgeObjectRelease_n(v33, 2);
        swift_bridgeObjectRelease(v32);
        v60 = swift_bridgeObjectRelease(v59);
      }
      else
      {
        LODWORD(v85) = _stringCompareWithSmolCheck(_:_:expecting:)(v89, v90, v3[41], v3[42], 0);
        swift_bridgeObjectRetain_n(v33, 2, v83);
        sub_100064990(v57, v32, v58, v59);
        swift_bridgeObjectRelease_n(v33, 2);
        swift_bridgeObjectRelease(v32);
        v60 = swift_bridgeObjectRelease(v59);
        if ((v85 & 1) == 0)
          goto LABEL_8;
      }
    }
    else
    {
      swift_bridgeObjectRetain(v3[42]);
      if (v32)
      {
        swift_bridgeObjectRelease(v32);
        goto LABEL_8;
      }
    }
    v79 = Logger.logObject.getter(v60);
    v80 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v79, v80))
      goto LABEL_37;
    v81 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v81 = 0;
    v82 = "Questionnaire is already loaded for the requested country code, ignoring this request";
    goto LABEL_36;
  }
  v46 = v3[39];
  sub_1000649C4(v46, v3[40]);
  sub_1000649C4(v46, v31);
  swift_bridgeObjectRetain(v31);
  v48 = Logger.logObject.getter(v47);
  v49 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v48, v49))
  {
    v50 = (uint8_t *)swift_slowAlloc(12, -1);
    v51 = (_QWORD *)swift_slowAlloc(32, -1);
    v91 = v51;
    aBlock = v46;
    v88 = v18;
    *(_DWORD *)v50 = 136446210;
    v93[0] = v31;
    swift_bridgeObjectRetain(v31);
    v52 = sub_100003DB8(&qword_100318260);
    v54 = String.init<A>(describing:)(&aBlock, v52, v53);
    v56 = v55;
    aBlock = sub_100172BEC(v54, v55, (uint64_t *)&v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v93, v50 + 4, v50 + 12);
    swift_bridgeObjectRelease(v56);
    sub_10006491C(v46, v31);
    sub_10006491C(v46, v31);
    _os_log_impl((void *)&_mh_execute_header, v48, v49, "Questionnaire loading is in progress for iso3166Alpha3CountryCode: %{public}s", v50, 0xCu);
    swift_arrayDestroy(v51, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1, -1);
    swift_slowDealloc(v50, -1, -1);
  }
  else
  {
    sub_10006491C(v46, v31);
    sub_10006491C(v46, v31);
  }

  v63 = v89;
  v62 = v90;
  if (v90)
  {
    if (v31)
    {
      if (v46 == v89 && v31 == v90)
      {
        v61 = sub_10006491C(v89, v90);
LABEL_29:
        v79 = Logger.logObject.getter(v61);
        v80 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v79, v80))
        {
LABEL_37:

          return;
        }
        v81 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v81 = 0;
        v82 = "Questionnaire is already loading for the requested country code, ignoring this request";
LABEL_36:
        _os_log_impl((void *)&_mh_execute_header, v79, v80, v82, v81, 2u);
        swift_slowDealloc(v81, -1, -1);
        goto LABEL_37;
      }
      v78 = _stringCompareWithSmolCheck(_:_:expecting:)(v89, v90, v46, v31, 0);
      v61 = sub_10006491C(v46, v31);
      if ((v78 & 1) != 0)
        goto LABEL_29;
      goto LABEL_24;
    }
  }
  else if (!v31)
  {
    goto LABEL_29;
  }
  sub_10006491C(v46, v31);
LABEL_24:
  v65 = swift_bridgeObjectRetain_n(v62, 2, v64);
  v66 = Logger.logObject.getter(v65);
  v67 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v66, v67))
  {
    v68 = (uint8_t *)swift_slowAlloc(12, -1);
    v69 = (_QWORD *)swift_slowAlloc(32, -1);
    v91 = v69;
    aBlock = v63;
    *(_DWORD *)v68 = 136446210;
    v93[0] = v62;
    swift_bridgeObjectRetain(v62);
    v70 = sub_100003DB8(&qword_100318260);
    v72 = String.init<A>(describing:)(&aBlock, v70, v71);
    v74 = v73;
    aBlock = sub_100172BEC(v72, v73, (uint64_t *)&v91);
    v63 = v89;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v93, v68 + 4, v68 + 12);
    swift_bridgeObjectRelease_n(v90, 2);
    v75 = v74;
    v62 = v90;
    swift_bridgeObjectRelease(v75);
    _os_log_impl((void *)&_mh_execute_header, v66, v67, "Deferring questionnaire loading for iso3166Alpha3CountryCode: %{public}s", v68, 0xCu);
    swift_arrayDestroy(v69, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1, -1);
    swift_slowDealloc(v68, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v62, 2);
  }
  v76 = v3[37];
  v77 = v3[38];
  v3[37] = v63;
  v3[38] = v62;
  swift_bridgeObjectRetain(v62);
  sub_10006491C(v76, v77);
}

uint64_t sub_10005CBDC(void (*a1)(__n128), uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  __n128 v12;
  char v13;
  unint64_t v14;
  __n128 v15;
  unint64_t v16;
  uint64_t Strong;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  char v28[24];

  v3 = v2;
  v6 = *v2;
  v7 = type metadata accessor for DispatchPredicate(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = &v28[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *(_QWORD *)v11 = static OS_dispatch_queue.main.getter(v12);
  (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v7);
  v13 = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_12:
    swift_once(&qword_1003158B8, sub_1000D9880);
    goto LABEL_7;
  }
  swift_beginAccess(v3 + 14, v28, 0, 0);
  v14 = v3[14];
  if (v14)
  {
    v15 = swift_bridgeObjectRetain(v3[14]);
    a1(v15);
    v16 = v14;
    return swift_bridgeObjectRelease(v16);
  }
  Strong = swift_unknownObjectWeakLoadStrong(v3 + 8);
  if (!Strong)
  {
    v26 = sub_10022710C((uint64_t)_swiftEmptyArrayStorage);
    ((void (*)(void))a1)();
    v16 = v26;
    return swift_bridgeObjectRelease(v16);
  }
  v7 = Strong;
  if (qword_1003158B8 != -1)
    goto LABEL_12;
LABEL_7:
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10000D744(v19, (uint64_t)qword_10033FEE0);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Fetching roadside providers", v23, 2u);
    swift_slowDealloc(v23, -1, -1);
  }

  v24 = swift_allocObject(&unk_1002E8390, 24, 7);
  swift_weakInit(v24 + 16, v3);
  v25 = (_QWORD *)swift_allocObject(&unk_1002E83B8, 48, 7);
  v25[2] = v24;
  v25[3] = a1;
  v25[4] = a2;
  v25[5] = v6;
  swift_retain(v24);
  swift_retain(a2);
  sub_10021BDC0((uint64_t)sub_1000636E8, (uint64_t)v25);
  swift_unknownObjectRelease(v7);
  swift_release(v24);
  return swift_release(v25);
}

uint64_t sub_10005CE54(void *a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v13;
  char v14;
  uint64_t Strong;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD v39[2];
  void (*v40)(void);
  uint64_t v41;
  uint64_t v42[3];
  char v43[24];

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (_QWORD *)((char *)v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v12 = static OS_dispatch_queue.main.getter(v13);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_18:
    swift_once(&qword_100315820, sub_1000D95E4);
LABEL_4:
    v16 = type metadata accessor for Logger(0);
    sub_10000D744(v16, (uint64_t)qword_10033FD18);
    v17 = a1;
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = swift_slowAlloc(32, -1);
      v40 = a3;
      v41 = (uint64_t)a1;
      v22 = v21;
      v42[0] = v21;
      v39[1] = a4;
      *(_DWORD *)v20 = 136315138;
      v23 = v17;
      v24 = sub_100003DB8(&qword_100319D28);
      v26 = String.init<A>(describing:)(&v41, v24, v25);
      v28 = v27;
      v41 = sub_100172BEC(v26, v27, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, v42, v20 + 4, v20 + 12);

      swift_bridgeObjectRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Roadside providers fetched: %s", v20, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      v29 = v22;
      a3 = v40;
      swift_slowDealloc(v29, -1, -1);
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

    }
    v31 = sub_100063DF8(a1);
    if (!v31)
      v31 = sub_10022710C((uint64_t)_swiftEmptyArrayStorage);
    v30 = v31;
    swift_beginAccess(a2 + 112, v42, 1, 0);
    v32 = *(_QWORD *)(a2 + 112);
    if (v32)
    {
      swift_bridgeObjectRetain(v30);
      swift_bridgeObjectRetain(v32);
      v34 = v32;
      if ((sub_10001A96C(v33, v30) & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      swift_bridgeObjectRetain(v30);
      v34 = 0;
    }
    v35 = sub_100003DB8(&qword_10032B0E0);
    v36 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v35, v36);
LABEL_15:
    v37 = *(_QWORD *)(a2 + 112);
    *(_QWORD *)(a2 + 112) = v30;
    swift_bridgeObjectRelease(v37);
    sub_10005DEDC(v32);
    swift_bridgeObjectRelease(v34);
    ((void (*)(unint64_t))a3)(v30);
    swift_release(a2);
    return swift_bridgeObjectRelease(v30);
  }
  swift_beginAccess(a2 + 16, v43, 0, 0);
  Strong = swift_weakLoadStrong(a2 + 16);
  if (Strong)
  {
    a2 = Strong;
    if (qword_100315820 == -1)
      goto LABEL_4;
    goto LABEL_18;
  }
  v30 = sub_10022710C((uint64_t)_swiftEmptyArrayStorage);
  a3();
  return swift_bridgeObjectRelease(v30);
}

uint64_t sub_10005D1E4(uint64_t a1, char a2, uint64_t a3, uint64_t (*a4)(__int128 *))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v13;
  char v14;
  uint64_t result;
  uint64_t Strong;
  _QWORD *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  uint64_t (*v47)(__int128 *);
  _BYTE v48[24];
  _QWORD v49[5];
  _QWORD v50[5];
  __int128 v51;
  __int128 v52;
  uint64_t v53;

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (_QWORD *)((char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v12 = static OS_dispatch_queue.main.getter(v13);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = _dispatchPreconditionTest(_:)(v12);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v14 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  swift_beginAccess(a3 + 16, v48, 0, 0);
  Strong = swift_weakLoadStrong(a3 + 16);
  if (!Strong)
  {
    v53 = 0;
    v51 = 0u;
    v52 = 0u;
    return a4(&v51);
  }
  v17 = (_QWORD *)Strong;
  v47 = a4;
  if ((a2 & 1) != 0)
  {
    v28 = (_OWORD *)(Strong + 120);
    sub_10000B458(Strong + 120, (uint64_t)v50, &qword_100319D68);
    v29 = v17[15];
    v30 = v17[16];
    v31 = v17[17];
    v32 = v17[18];
    v33 = v17[19];
    sub_10000B458((uint64_t)v50, (uint64_t)&v51, &qword_100319D68);
    if ((_QWORD)v52)
    {
      sub_100064870(v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
      swift_bridgeObjectRetain(v33);
      swift_bridgeObjectRetain(v31);
      sub_100034464(v29, v30, v31, v32, v33);
      sub_100034464(0, 0, 0, 0, 0);
      v34 = sub_100003DB8(&qword_10032B0E0);
      v35 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v34, v35);
    }
    v36 = v17[15];
    v37 = v17[16];
    v38 = v17[17];
    v39 = v17[18];
    v40 = v17[19];
    *v28 = 0u;
    *(_OWORD *)(v17 + 17) = 0u;
    v17[19] = 0;
    sub_100034464(v36, v37, v38, v39, v40);
    goto LABEL_18;
  }
  swift_beginAccess(Strong + 112, v50, 32, 0);
  v18 = v17[14];
  v19 = 0uLL;
  if (v18)
  {
    if (*(_QWORD *)(v18 + 16))
    {
      v20 = sub_10018647C(a1);
      if ((v21 & 1) != 0)
      {
        v22 = *(_QWORD *)(v18 + 56) + 40 * v20;
        v46 = *(_OWORD *)v22;
        v18 = *(_QWORD *)(v22 + 16);
        v23 = *(unsigned __int8 *)(v22 + 24);
        v24 = *(unsigned __int8 *)(v22 + 25);
        v25 = *(_QWORD *)(v22 + 32);
        v26 = 256;
        if (!v24)
          v26 = 0;
        v27 = v26 | v23;
        swift_bridgeObjectRetain(v25);
        swift_bridgeObjectRetain(v18);
        v19 = v46;
      }
      else
      {
        v18 = 0;
        v27 = 0;
        v25 = 0;
        v19 = 0uLL;
      }
      goto LABEL_17;
    }
    v18 = 0;
  }
  v27 = 0;
  v25 = 0;
LABEL_17:
  v51 = v19;
  *(_QWORD *)&v52 = v18;
  *((_QWORD *)&v52 + 1) = v27;
  v53 = v25;
  swift_endAccess(v50);
  sub_10000B458((uint64_t)(v17 + 15), (uint64_t)v50, &qword_100319D68);
  sub_100064870(v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
  sub_10005E3C4(&v51);
  v41 = v17[15];
  v42 = v17[16];
  v43 = v17[17];
  v44 = v17[18];
  v45 = v17[19];
  sub_10000B458((uint64_t)&v51, (uint64_t)(v17 + 15), &qword_100319D68);
  sub_100034464(v41, v42, v43, v44, v45);
LABEL_18:
  sub_10005E68C(v50);
  sub_100064870(v50, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
  sub_10000B458((uint64_t)(v17 + 15), (uint64_t)v49, &qword_100319D68);
  sub_100064870(v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
  v47((__int128 *)v49);
  sub_100064870(v49, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
  return swift_release(v17);
}

uint64_t sub_10005D59C(_QWORD *a1, uint64_t a2, uint64_t (*a3)(_QWORD *), uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  __n128 v13;
  char v14;
  uint64_t Strong;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[24];

  v8 = type metadata accessor for DispatchPredicate(0);
  v9 = *(_QWORD *)(v8 - 8);
  __chkstk_darwin(v8, v10);
  v12 = (uint64_t *)((char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v12 = static OS_dispatch_queue.main.getter(v13);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v9 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v8);
  v14 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(_QWORD *, uint64_t))(v9 + 8))(v12, v8);
  if ((v14 & 1) == 0)
  {
    __break(1u);
LABEL_18:
    swift_once(&qword_1003158B8, sub_1000D9880);
    goto LABEL_4;
  }
  swift_beginAccess(a2 + 16, v38, 0, 0);
  Strong = swift_weakLoadStrong(a2 + 16);
  if (!Strong)
    return a3(_swiftEmptyArrayStorage);
  a2 = Strong;
  if (qword_1003158B8 != -1)
    goto LABEL_18;
LABEL_4:
  v16 = type metadata accessor for Logger(0);
  sub_10000D744(v16, (uint64_t)qword_10033FEE0);
  v18 = swift_bridgeObjectRetain_n(a1, 2, v17);
  v19 = Logger.logObject.getter(v18);
  v20 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc(12, -1);
    v22 = swift_slowAlloc(32, -1);
    v35 = a4;
    v36 = (uint64_t)a1;
    v23 = v22;
    v37 = v22;
    *(_DWORD *)v21 = 136315138;
    swift_bridgeObjectRetain(a1);
    v24 = sub_100003DB8(&qword_100319D70);
    v26 = String.init<A>(describing:)(&v36, v24, v25);
    v28 = v27;
    v36 = sub_100172BEC(v26, v27, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v28);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "My phone numbers fetched: %s", v21, 0xCu);
    swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1, -1);
    swift_slowDealloc(v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a1, 2);
  }
  if (a1)
    v30 = a1;
  else
    v30 = _swiftEmptyArrayStorage;
  v31 = *(_QWORD **)(a2 + 160);
  if (!v31)
    goto LABEL_15;
  if ((sub_1001DCCB4(*(_QWORD **)(a2 + 160), v30) & 1) == 0)
  {
    swift_bridgeObjectRetain(v31);
LABEL_15:
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(v30);
    v32 = sub_100003DB8(&qword_10032B0E0);
    v33 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v32, v33);
    goto LABEL_16;
  }
  swift_bridgeObjectRetain(a1);
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRetain(v31);
LABEL_16:
  v34 = *(_QWORD *)(a2 + 160);
  *(_QWORD *)(a2 + 160) = v30;
  swift_bridgeObjectRelease(v34);
  sub_10005EB7C(v31);
  swift_bridgeObjectRelease(v31);
  a3(v30);
  swift_release(a2);
  return swift_bridgeObjectRelease(v30);
}

void sub_10005D918(NSObject *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  os_log_type_t type;
  os_log_type_t typea[8];
  NSObject *log;
  os_log_t loga;
  NSObject *oslog;
  os_log_t osloga;
  _BYTE v57[64];
  uint64_t v58;
  char v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  char v65;
  uint64_t v66;
  BOOL v67;
  NSObject *v68;
  char v69;
  uint64_t v70;
  BOOL v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  BOOL v75[8];
  uint64_t v76;
  char v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  char v81;

  v3 = v1 + 192;
  v2 = *(_QWORD *)(v1 + 192);
  v4 = *(unsigned __int8 *)(v1 + 248);
  if (v4 == 3)
  {
    if (qword_1003158B8 != -1)
      swift_once(&qword_1003158B8, sub_1000D9880);
    v5 = type metadata accessor for Logger(0);
    v6 = sub_10000D744(v5, (uint64_t)qword_10033FEE0);
    oslog = Logger.logObject.getter(v6);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "onProviderSelected - _currentRoadsideAssistance == nil, ignoring request", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

  }
  else
  {
    v9 = v1;
    v10 = *(_QWORD *)(v1 + 208);
    v11 = *(_QWORD *)(v1 + 224);
    v12 = *(_QWORD *)(v1 + 240);
    v13 = *(_QWORD *)(v1 + 232);
    v14 = *(_QWORD *)(v1 + 216);
    osloga = (os_log_t)(*(_QWORD *)(v1 + 200) & 1);
    v15 = v13 & 1;
    if (v4 == 2)
    {
      if (qword_1003158B8 != -1)
        swift_once(&qword_1003158B8, sub_1000D9880);
      v16 = type metadata accessor for Logger(0);
      v17 = sub_10000D744(v16, (uint64_t)qword_10033FEE0);
      log = Logger.logObject.getter(v17);
      v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(log, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc(12, -1);
        v20 = swift_slowAlloc(32, -1);
        v21 = v2;
        v22 = v20;
        v23.n128_u64[0] = 136446210;
        *(_DWORD *)v19 = 136446210;
        v66 = v20;
        v74 = v21;
        v75[0] = osloga != 0;
        v76 = v10;
        v77 = v14 & 1;
        v78 = v11;
        v79 = v15 != 0;
        v80 = v12;
        v81 = 2;
        v24 = String.init<A>(describing:)(&v74, &type metadata for RoadsideAssistanceModel.RoadsideAssistance, v23);
        v26 = v25;
        v74 = sub_100172BEC(v24, v25, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75, v19 + 4, v19 + 12);
        swift_bridgeObjectRelease(v26);
        _os_log_impl((void *)&_mh_execute_header, log, v18, "onProviderSelected - current conversation is already committed: %{public}s", v19, 0xCu);
        swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v22, -1, -1);
        swift_slowDealloc(v19, -1, -1);

      }
      else
      {

      }
    }
    else
    {
      v50 = v13 & 1;
      loga = a1;
      if ((v14 & 1) != 0 || v10 != a1)
      {
        if (qword_1003158B8 != -1)
          swift_once(&qword_1003158B8, sub_1000D9880);
        v27 = type metadata accessor for Logger(0);
        v28 = sub_10000D744(v27, (uint64_t)qword_10033FEE0);
        v29 = Logger.logObject.getter(v28);
        type = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v29, type))
        {
          v30 = swift_slowAlloc(22, -1);
          v48 = swift_slowAlloc(32, -1);
          v66 = v48;
          *(_DWORD *)v30 = 136446466;
          v74 = v10;
          v75[0] = v14 & 1;
          v31 = sub_100003DB8(&qword_100319D40);
          v33 = String.init<A>(describing:)(&v74, v31, v32);
          v35 = v34;
          v74 = sub_100172BEC(v33, v34, &v66);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75, v30 + 4, v30 + 12);
          swift_bridgeObjectRelease(v35);
          *(_WORD *)(v30 + 12) = 2048;
          v74 = (uint64_t)loga;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, v75, v30 + 14, v30 + 22);
          _os_log_impl((void *)&_mh_execute_header, v29, type, "onProviderSelected - overriding current providerId: %{public}s with %llu", (uint8_t *)v30, 0x16u);
          swift_arrayDestroy(v48, 1, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v48, -1, -1);
          v36 = v30;
          v15 = v50;
          swift_slowDealloc(v36, -1, -1);

        }
        else
        {

        }
        a1 = loga;
      }
      v47 = v2;
      v49 = v11;
      v66 = v2;
      v67 = osloga != 0;
      v68 = a1;
      v69 = 0;
      v70 = v11;
      v71 = v15 != 0;
      *(_QWORD *)typea = v12;
      v72 = v12;
      v73 = v4;
      sub_10000B458(v3, (uint64_t)v57, &qword_100319D38);
      v38 = *(_QWORD *)(v9 + 192);
      v37 = *(_QWORD *)(v9 + 200);
      v39 = *(_QWORD *)(v9 + 208);
      v40 = *(_QWORD *)(v9 + 216);
      v42 = *(_QWORD *)(v9 + 224);
      v41 = *(_QWORD *)(v9 + 232);
      v46 = *(_QWORD *)(v9 + 240);
      v43 = *(_BYTE *)(v9 + 248);
      sub_10000B458((uint64_t)v57, (uint64_t)&v74, &qword_100319D38);
      if (v81 == 3)
        goto LABEL_23;
      v58 = v38;
      v59 = v37 & 1;
      v60 = v39;
      v61 = v40 & 1;
      v62 = v42;
      v63 = v41 & 1;
      v64 = v46;
      v65 = v43;
      if (!sub_100063564((uint64_t)&v58, (uint64_t)&v66))
      {
LABEL_23:
        v44 = sub_100003DB8(&qword_10032B0E0);
        v45 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
        Subject<>.send()(v44, v45);
      }
      *(_QWORD *)(v9 + 192) = v47;
      *(_QWORD *)(v9 + 200) = osloga;
      *(_QWORD *)(v9 + 208) = loga;
      *(_QWORD *)(v9 + 216) = 0;
      *(_QWORD *)(v9 + 224) = v49;
      *(_QWORD *)(v9 + 232) = v50;
      *(_QWORD *)(v9 + 240) = *(_QWORD *)typea;
      *(_BYTE *)(v9 + 248) = v4;
      sub_10005F24C((uint64_t)v57);
    }
  }
}

uint64_t sub_10005DEDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  __n128 v9;
  __n128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE v27[24];

  v2 = v1;
  result = swift_beginAccess(v1 + 112, v27, 0, 0);
  v5 = *(_QWORD *)(v1 + 112);
  if (v5)
  {
    if (a1)
    {
      swift_bridgeObjectRetain(a1);
      swift_bridgeObjectRetain(v5);
      v7 = sub_10001A96C(v6, a1);
      swift_bridgeObjectRelease(v5);
      result = swift_bridgeObjectRelease(a1);
      if ((v7 & 1) != 0)
        return result;
    }
  }
  else if (!a1)
  {
    return result;
  }
  if (qword_1003158B8 != -1)
    swift_once(&qword_1003158B8, sub_1000D9880);
  v8 = type metadata accessor for Logger(0);
  sub_10000D744(v8, (uint64_t)qword_10033FEE0);
  swift_bridgeObjectRetain_n(a1, 2, v9);
  v11 = swift_retain_n(v2, v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc(22, -1);
    v15 = swift_slowAlloc(64, -1);
    v25 = a1;
    v26 = v15;
    *(_DWORD *)v14 = 136446466;
    swift_bridgeObjectRetain(a1);
    v16 = sub_100003DB8(&qword_100319D30);
    v18 = String.init<A>(describing:)(&v25, v16, v17);
    v20 = v19;
    v25 = sub_100172BEC(v18, v19, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v20);
    *(_WORD *)(v14 + 12) = 2082;
    v25 = *(_QWORD *)(v2 + 112);
    v21 = swift_bridgeObjectRetain(v25);
    v22 = String.init<A>(describing:)(&v25, v16, v21);
    v24 = v23;
    v25 = sub_100172BEC(v22, v23, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v25, &v26, v14 + 14, v14 + 22);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v24);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "providers changed from %{public}s to %{public}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

  }
  else
  {

    swift_release_n(v2);
    swift_bridgeObjectRelease_n(a1, 2);
  }
  return sub_10005E170();
}

uint64_t sub_10005E170()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  void *v14;
  uint64_t v15;
  void *v16;
  __n128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  _QWORD aBlock[5];
  uint64_t v25;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v23 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003DB8(&qword_10032B0E0);
  v12 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Subject<>.send()(v11, v12);
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v14 = (void *)static OS_dispatch_queue.main.getter(v13);
  v15 = swift_allocObject(&unk_1002E8390, 24, 7);
  swift_weakInit(v15 + 16, v1);
  aBlock[4] = sub_100064740;
  v25 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002E83D0;
  v16 = _Block_copy(aBlock);
  swift_release(v25);
  static DispatchQoS.unspecified.getter(v17);
  aBlock[0] = _swiftEmptyArrayStorage;
  v18 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v19 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v20 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v19, v20, v2, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v5, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v23 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void sub_10005E3C4(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[5];
  _BYTE v17[16];
  uint64_t v18;

  sub_10000B458((uint64_t)a1, (uint64_t)v16, &qword_100319D68);
  v4 = v16[0];
  v3 = v16[1];
  v5 = v16[3];
  v14 = (_QWORD *)v16[4];
  v15 = v16[2];
  v7 = v1[15];
  v6 = v1[16];
  v8 = v1[17];
  v9 = v1[18];
  v10 = (_QWORD *)v1[19];
  if (v8)
  {
    sub_10000B458((uint64_t)a1, (uint64_t)v17, &qword_100319D68);
    if (v18)
    {
      if (v7 == v4)
      {
        if (v6 == v3 && v8 == v15)
        {
          if (((v5 ^ v9) & 1) != 0 || ((v5 >> 8) & 1) != ((v9 >> 8) & 1))
            goto LABEL_19;
        }
        else if ((_stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v3, v15, 0) & 1) == 0
               || ((v5 ^ v9) & 1) != 0
               || ((v5 >> 8) & 1) != ((v9 >> 8) & 1))
        {
          goto LABEL_19;
        }
        if (v10)
        {
          if (v14)
          {
            v11 = v10;
            if ((sub_1001DCCB4(v10, v14) & 1) != 0)
              goto LABEL_23;
          }
        }
        else if (!v14)
        {
          v11 = 0;
LABEL_23:
          sub_1000648A4(v4, v6, v8, v9, (uint64_t)v10);
          sub_1000648A4(v4, v6, v8, v9, (uint64_t)v10);
          sub_100064870(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
          swift_bridgeObjectRelease(v14);
          swift_bridgeObjectRelease(v15);
          sub_100034464(v4, v6, v8, v9, (uint64_t)v10);
          swift_bridgeObjectRelease(v11);
          swift_bridgeObjectRelease(v8);
          return;
        }
      }
LABEL_19:
      sub_1000648A4(v7, v6, v8, v9, (uint64_t)v10);
      sub_1000648A4(v7, v6, v8, v9, (uint64_t)v10);
      sub_100064870(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
      swift_bridgeObjectRelease(v15);
      swift_bridgeObjectRelease(v14);
      sub_100034464(v7, v6, v8, v9, (uint64_t)v10);
      swift_bridgeObjectRelease(v8);
      swift_bridgeObjectRelease(v10);
      goto LABEL_20;
    }
  }
  else
  {
    sub_10000B458((uint64_t)a1, (uint64_t)v17, &qword_100319D68);
    if (!v18)
      return;
  }
  sub_1000648A4(v7, v6, v8, v9, (uint64_t)v10);
  sub_100064870(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
  sub_100034464(v7, v6, v8, v9, (uint64_t)v10);
  sub_100034464(v4, v3, v15, v5, (uint64_t)v14);
LABEL_20:
  v12 = sub_100003DB8(&qword_10032B0E0);
  v13 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Subject<>.send()(v12, v13);
}

uint64_t sub_10005E68C(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t result;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v36[4];
  uint64_t v37;
  _QWORD v38[5];
  _BYTE v39[16];
  uint64_t v40;

  v2 = v1;
  sub_10000B458((uint64_t)a1, (uint64_t)v38, &qword_100319D68);
  v5 = v38[0];
  v4 = v38[1];
  v6 = v38[3];
  v33 = (_QWORD *)v38[4];
  v34 = v38[2];
  v8 = v1[15];
  v7 = v1[16];
  v9 = v1[17];
  v11 = v2[18];
  v10 = (_QWORD *)v2[19];
  if (v9)
  {
    sub_10000B458((uint64_t)a1, (uint64_t)v39, &qword_100319D68);
    if (v40)
    {
      if (v8 == v5)
      {
        if (v7 == v4 && v9 == v34)
        {
          if (((v6 ^ v11) & 1) != 0 || ((v6 >> 8) & 1) != ((v11 >> 8) & 1))
            goto LABEL_19;
        }
        else if ((_stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v4, v34, 0) & 1) == 0
               || ((v6 ^ v11) & 1) != 0
               || ((v6 >> 8) & 1) != ((v11 >> 8) & 1))
        {
          goto LABEL_19;
        }
        if (v10)
        {
          if (v33)
          {
            v13 = v10;
            if ((sub_1001DCCB4(v10, v33) & 1) != 0)
              goto LABEL_28;
          }
        }
        else if (!v33)
        {
          v13 = 0;
LABEL_28:
          sub_1000648A4(v5, v7, v9, v11, (uint64_t)v10);
          sub_1000648A4(v5, v7, v9, v11, (uint64_t)v10);
          sub_100064870(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
          swift_bridgeObjectRelease(v33);
          swift_bridgeObjectRelease(v34);
          sub_100034464(v5, v7, v9, v11, (uint64_t)v10);
          swift_bridgeObjectRelease(v13);
          return swift_bridgeObjectRelease(v9);
        }
      }
LABEL_19:
      sub_1000648A4(v8, v7, v9, v11, (uint64_t)v10);
      sub_1000648A4(v8, v7, v9, v11, (uint64_t)v10);
      sub_100064870(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
      swift_bridgeObjectRelease(v34);
      swift_bridgeObjectRelease(v33);
      sub_100034464(v8, v7, v9, v11, (uint64_t)v10);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v10);
      goto LABEL_20;
    }
  }
  else
  {
    result = sub_10000B458((uint64_t)a1, (uint64_t)v39, &qword_100319D68);
    if (!v40)
      return result;
  }
  sub_1000648A4(v8, v7, v9, v11, (uint64_t)v10);
  sub_100064870(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
  sub_100034464(v8, v7, v9, v11, (uint64_t)v10);
  sub_100034464(v5, v4, v34, v6, (uint64_t)v33);
LABEL_20:
  if (qword_1003158B8 != -1)
    swift_once(&qword_1003158B8, sub_1000D9880);
  v14 = type metadata accessor for Logger(0);
  sub_10000D744(v14, (uint64_t)qword_10033FEE0);
  sub_100064870(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
  swift_retain(v2);
  sub_100064870(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
  swift_retain(v2);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(64, -1);
    v37 = v19;
    *(_DWORD *)v18 = 136446466;
    sub_10000B458((uint64_t)a1, (uint64_t)&v35, &qword_100319D68);
    sub_100064870(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_1000648A4);
    v20 = sub_100003DB8(&qword_100319D68);
    v22 = String.init<A>(describing:)(&v35, v20, v21);
    v24 = v23;
    v35 = sub_100172BEC(v22, v23, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v24);
    sub_100064870(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
    sub_100064870(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
    *(_WORD *)(v18 + 12) = 2082;
    v25 = v2[16];
    v26 = v2[17];
    v27 = v2[18];
    v28 = v2[19];
    v35 = v2[15];
    v36[0] = v25;
    v36[1] = v26;
    v36[2] = v27;
    v36[3] = v28;
    sub_1000648A4(v35, v25, v26, v27, v28);
    v30 = String.init<A>(describing:)(&v35, v20, v29);
    v32 = v31;
    v35 = sub_100172BEC(v30, v31, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v18 + 14, v18 + 22);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "resumableProvider changed from %{public}s to %{public}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {
    sub_100064870(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);
    sub_100064870(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_100034464);

    swift_release_n(v2);
  }
  return sub_10005E170();
}

uint64_t sub_10005EB7C(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  __n128 v6;
  __n128 v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = v1;
  result = *(_QWORD *)(v1 + 160);
  if (result)
  {
    if (a1)
    {
      result = sub_1001DCCB4((_QWORD *)result, a1);
      if ((result & 1) != 0)
        return result;
    }
  }
  else if (!a1)
  {
    return result;
  }
  if (qword_1003158B8 != -1)
    swift_once(&qword_1003158B8, sub_1000D9880);
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FEE0);
  swift_bridgeObjectRetain_n(a1, 2, v6);
  v8 = swift_retain_n(v1, v7);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v22 = (uint64_t)a1;
    v23 = v12;
    *(_DWORD *)v11 = 136446467;
    swift_bridgeObjectRetain(a1);
    v13 = sub_100003DB8(&qword_100319D70);
    v15 = String.init<A>(describing:)(&v22, v13, v14);
    v17 = v16;
    v22 = sub_100172BEC(v15, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v11 + 12) = 2081;
    v22 = *(_QWORD *)(v2 + 160);
    v18 = swift_bridgeObjectRetain(v22);
    v19 = String.init<A>(describing:)(&v22, v13, v18);
    v21 = v20;
    v22 = sub_100172BEC(v19, v20, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v11 + 14, v11 + 22);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v21);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "My phone numbers changed from %{public}s to %{private}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_release_n(v2);
    swift_bridgeObjectRelease_n(a1, 2);
  }
  return sub_10005E170();
}

void sub_10005EDD8(char a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t v5;
  __n128 v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = v1;
  v4 = *(unsigned __int8 *)(v1 + 168);
  if (v4 == 2)
  {
    if (a1 == 2)
      return;
  }
  else if (a1 != 2 && ((((a1 & 1) == 0) ^ v4) & 1) != 0)
  {
    return;
  }
  if (qword_1003158B8 != -1)
    swift_once(&qword_1003158B8, sub_1000D9880);
  v5 = type metadata accessor for Logger(0);
  sub_10000D744(v5, (uint64_t)qword_10033FEE0);
  v7 = swift_retain_n(v1, v6);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(22, -1);
    v11 = swift_slowAlloc(64, -1);
    v22 = v11;
    *(_DWORD *)v10 = 136446466;
    LOBYTE(v21) = a1;
    v12 = sub_100003DB8((uint64_t *)&unk_1003263F0);
    v14 = String.init<A>(describing:)(&v21, v12, v13);
    v16 = v15;
    v21 = sub_100172BEC(v14, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v10 + 4, v10 + 12);
    swift_bridgeObjectRelease(v16);
    *(_WORD *)(v10 + 12) = 2082;
    LOBYTE(v21) = *(_BYTE *)(v2 + 168);
    v18 = String.init<A>(describing:)(&v21, v12, v17);
    v20 = v19;
    v21 = sub_100172BEC(v18, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v10 + 14, v10 + 22);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "lastConversationWasCommitted changed from %{public}s to %{public}s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

    swift_release_n(v2);
  }
}

void sub_10005F010(uint64_t a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  __n128 v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BYTE v24[8];
  uint64_t v25;

  v3 = v2;
  if ((*(_BYTE *)(v2 + 184) & 1) != 0)
  {
    if ((a2 & 1) != 0)
      return;
  }
  else if ((a2 & 1) == 0 && *(_QWORD *)(v2 + 176) == a1)
  {
    return;
  }
  if (qword_1003158B8 != -1)
    swift_once(&qword_1003158B8, sub_1000D9880);
  v6 = type metadata accessor for Logger(0);
  sub_10000D744(v6, (uint64_t)qword_10033FEE0);
  v8 = swift_retain_n(v2, v7);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = swift_slowAlloc(22, -1);
    v12 = swift_slowAlloc(64, -1);
    v25 = v12;
    *(_DWORD *)v11 = 136446466;
    v23 = a1;
    v24[0] = a2 & 1;
    v13 = sub_100003DB8(&qword_100319D40);
    v15 = String.init<A>(describing:)(&v23, v13, v14);
    v17 = v16;
    v23 = sub_100172BEC(v15, v16, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v17);
    *(_WORD *)(v11 + 12) = 2082;
    v18 = *(_BYTE *)(v3 + 184);
    v23 = *(_QWORD *)(v3 + 176);
    v24[0] = v18;
    v20 = String.init<A>(describing:)(&v23, v13, v19);
    v22 = v21;
    v23 = sub_100172BEC(v20, v21, &v25);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v11 + 14, v11 + 22);
    swift_release_n(v3);
    swift_bridgeObjectRelease(v22);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "lastActiveProviderId changed from %{public}s to %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy(v12, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

    swift_release_n(v3);
  }
}

uint64_t sub_10005F24C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  uint64_t result;
  uint64_t v6;
  char v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  _OWORD v45[2];
  __n128 v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unsigned __int8 v57;
  _BYTE v58[56];
  char v59;

  v2 = v1;
  sub_10000B458(a1, (uint64_t)&v50, &qword_100319D38);
  v4 = *(unsigned __int8 *)(v1 + 248);
  if (v4 == 3)
  {
    result = sub_10000B458(a1, (uint64_t)v58, &qword_100319D38);
    if (v59 == 3)
      return result;
    goto LABEL_22;
  }
  v6 = v50;
  v7 = v51;
  v8 = v53;
  v42 = v52;
  v43 = v55;
  v39 = v57;
  v10 = *(_QWORD *)(v2 + 192);
  v9 = *(_QWORD *)(v2 + 200);
  v11 = *(_QWORD *)(v2 + 208);
  v12 = *(_QWORD *)(v2 + 216);
  v37 = *(_QWORD *)(v2 + 224);
  v38 = v54;
  v44 = *(_QWORD *)(v2 + 232);
  v40 = *(_QWORD *)(v2 + 240);
  v41 = v56;
  result = sub_10000B458(a1, (uint64_t)v58, &qword_100319D38);
  if (v59 != 3)
  {
    if ((v9 & 1) != 0)
    {
      if ((v7 & 1) == 0)
        goto LABEL_22;
    }
    else if ((v7 & 1) != 0 || v10 != v6)
    {
      goto LABEL_22;
    }
    if ((v12 & 1) != 0)
    {
      if ((v8 & 1) == 0)
        goto LABEL_22;
    }
    else if ((v8 & 1) != 0 || v11 != v42)
    {
      goto LABEL_22;
    }
    if ((v44 & 1) == 0)
    {
      if ((v43 & 1) != 0 || v37 != v38)
        goto LABEL_22;
LABEL_20:
      if (v40 == v41 && v4 == v39)
        return result;
      goto LABEL_22;
    }
    if ((v43 & 1) != 0)
      goto LABEL_20;
  }
LABEL_22:
  if (qword_1003158B8 != -1)
    swift_once(&qword_1003158B8, sub_1000D9880);
  v13 = type metadata accessor for Logger(0);
  sub_10000D744(v13, (uint64_t)qword_10033FEE0);
  v15 = swift_retain_n(v2, v14);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc(22, -1);
    v19 = swift_slowAlloc(64, -1);
    v49 = v19;
    *(_DWORD *)v18 = 136446466;
    sub_10000B458(a1, (uint64_t)v45, &qword_100319D38);
    v20 = sub_100003DB8(&qword_100319D38);
    v22 = String.init<A>(describing:)(v45, v20, v21);
    v24 = v23;
    *(_QWORD *)&v45[0] = sub_100172BEC(v22, v23, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v45, (char *)v45 + 8, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease(v24);
    *(_WORD *)(v18 + 12) = 2082;
    v25 = *(_QWORD *)(v2 + 240);
    v26 = *(_BYTE *)(v2 + 248);
    v27 = *(_OWORD *)(v2 + 208);
    v45[0] = *(_OWORD *)(v2 + 192);
    v45[1] = v27;
    v46 = *(__n128 *)(v2 + 224);
    v47 = v25;
    v48 = v26;
    v28 = String.init<A>(describing:)(v45, v20, v46);
    v30 = v29;
    *(_QWORD *)&v45[0] = sub_100172BEC(v28, v29, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v45, (char *)v45 + 8, v18 + 14, v18 + 22);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "currentRoadsideAssistance changed from %{public}s to %{public}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v19, -1, -1);
    swift_slowDealloc(v18, -1, -1);

  }
  else
  {

    swift_release_n(v2);
  }
  v31 = *(unsigned __int8 *)(v2 + 248);
  if (v31 != 3)
  {
    v33 = *(_QWORD *)(v2 + 208);
    v32 = *(_QWORD *)(v2 + 216);
    v34 = *(_BYTE *)(v2 + 168);
    *(_BYTE *)(v2 + 168) = v31 != 0;
    sub_10005EDD8(v34);
    if ((*(_BYTE *)(v2 + 168) & 1) != 0)
    {
      v35 = *(_QWORD *)(v2 + 176);
      v36 = *(_BYTE *)(v2 + 184);
      *(_QWORD *)(v2 + 176) = v33;
      *(_BYTE *)(v2 + 184) = v32 & 1;
      sub_10005F010(v35, v36);
    }
  }
  return sub_10005E170();
}

uint64_t sub_10005F5E4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (*(_BYTE *)(v1 + 249) != (result & 1))
  {
    v2 = v1;
    v3 = result;
    if (qword_1003158B8 != -1)
      swift_once(&qword_1003158B8, sub_1000D9880);
    v4 = type metadata accessor for Logger(0);
    sub_10000D744(v4, (uint64_t)qword_10033FEE0);
    v6 = swift_retain_n(v1, v5);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = swift_slowAlloc(22, -1);
      v10 = swift_slowAlloc(64, -1);
      v16 = v10;
      *(_DWORD *)v9 = 136446466;
      if ((v3 & 1) != 0)
        v11 = 1702195828;
      else
        v11 = 0x65736C6166;
      if ((v3 & 1) != 0)
        v12 = 0xE400000000000000;
      else
        v12 = 0xE500000000000000;
      v15 = sub_100172BEC(v11, v12, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v9 + 4, v9 + 12);
      swift_bridgeObjectRelease(v12);
      *(_WORD *)(v9 + 12) = 2082;
      if (*(_BYTE *)(v2 + 249))
        v13 = 1702195828;
      else
        v13 = 0x65736C6166;
      if (*(_BYTE *)(v2 + 249))
        v14 = 0xE400000000000000;
      else
        v14 = 0xE500000000000000;
      v15 = sub_100172BEC(v13, v14, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v9 + 14, v9 + 22);
      swift_release_n(v2);
      swift_bridgeObjectRelease(v14);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "syncInProgress state changed from %{public}s to %{public}s", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v10, -1, -1);
      swift_slowDealloc(v9, -1, -1);

    }
    else
    {

      swift_release_n(v2);
    }
    return sub_10005E170();
  }
  return result;
}

uint64_t sub_10005F81C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t result;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (*(_QWORD *)(v1 + 320) == 1)
    {
      v10 = *(_QWORD *)(v1 + 368) != 0;
      v11 = *(unsigned __int8 *)(v1 + 249);
      if ((_DWORD)v11 == v10)
        goto LABEL_9;
    }
    else
    {
      LOBYTE(v10) = 1;
      if ((*(_BYTE *)(v1 + 249) & 1) != 0)
      {
        v11 = 1;
LABEL_9:
        *(_BYTE *)(v1 + 249) = v10;
        return sub_10005F5E4(v11);
      }
      v11 = 0;
    }
    v12 = sub_100003DB8(&qword_10032B0E0);
    v13 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v12, v13);
    goto LABEL_9;
  }
  __break(1u);
  return result;
}

uint64_t sub_10005F974()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(_QWORD, _QWORD);
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  __n128 v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  __n128 v32;
  void *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  void *v38;
  char *v39;
  __n128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void (*v48)(_QWORD, _QWORD);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t aBlock[5];
  _QWORD *v59;

  v1 = v0;
  v51 = type metadata accessor for DispatchWorkItemFlags(0);
  v56 = *(_QWORD *)(v51 - 8);
  __chkstk_darwin(v51, v2);
  v55 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for DispatchQoS(0);
  v53 = *(_QWORD *)(v4 - 8);
  v54 = v4;
  __chkstk_darwin(v4, v5);
  v52 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for DispatchTime(0);
  v7 = *(void (**)(_QWORD, _QWORD))(v50 - 8);
  v9 = __chkstk_darwin(v50, v8);
  v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v49 = (char *)&v48 - v13;
  v14 = type metadata accessor for UUID(0);
  v15 = *(_QWORD *)(v14 - 8);
  v17 = __chkstk_darwin(v14, v16);
  v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = UUID.init()(v17);
  v21 = UUID.uuidString.getter(v20);
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v14);
  if (qword_1003158B8 != -1)
    swift_once(&qword_1003158B8, sub_1000D9880);
  v24 = type metadata accessor for Logger(0);
  sub_10000D744(v24, (uint64_t)qword_10033FEE0);
  v26 = swift_bridgeObjectRetain_n(v23, 2, v25);
  v27 = Logger.logObject.getter(v26);
  v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v48 = v7;
    v29 = (uint8_t *)swift_slowAlloc(12, -1);
    v30 = swift_slowAlloc(32, -1);
    aBlock[0] = v30;
    *(_DWORD *)v29 = 136446210;
    swift_bridgeObjectRetain(v23);
    v57 = sub_100172BEC(v21, v23, aBlock);
    v7 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, aBlock, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease_n(v23, 3);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Artificially delaying sync for 2 seconds to let imagent to start up for token %{public}s", v29, 0xCu);
    swift_arrayDestroy(v30, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v30, -1, -1);
    swift_slowDealloc(v29, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v23, 2);
  }
  v31 = *(_QWORD *)(v1 + 368);
  *(_QWORD *)(v1 + 360) = v21;
  *(_QWORD *)(v1 + 368) = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease(v31);
  sub_10005F81C();
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v33 = (void *)static OS_dispatch_queue.main.getter(v32);
  static DispatchTime.now()(v33);
  v34 = v49;
  + infix(_:_:)(v11, 2.0);
  v48 = (void (*)(_QWORD, _QWORD))*((_QWORD *)v7 + 1);
  v35 = v50;
  v48(v11, v50);
  v36 = swift_allocObject(&unk_1002E8390, 24, 7);
  swift_weakInit(v36 + 16, v1);
  v37 = (_QWORD *)swift_allocObject(&unk_1002E8548, 40, 7);
  v37[2] = v36;
  v37[3] = v21;
  v37[4] = v23;
  aBlock[4] = (uint64_t)sub_100064910;
  v59 = v37;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1001BAACC;
  aBlock[3] = (uint64_t)&unk_1002E8560;
  v38 = _Block_copy(aBlock);
  swift_release(v59);
  v39 = v52;
  static DispatchQoS.unspecified.getter(v40);
  aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
  v41 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v42 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v43 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
  v44 = v55;
  v45 = v42;
  v46 = v51;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v45, v43, v51, v41);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v34, v39, v44, v38);
  _Block_release(v38);

  (*(void (**)(char *, uint64_t))(v56 + 8))(v44, v46);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v39, v54);
  return ((uint64_t (*)(char *, uint64_t))v48)(v34, v35);
}

uint64_t sub_10005FE34(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  _BYTE v8[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    sub_10005FEA4(a2, a3);
    return swift_release(v7);
  }
  return result;
}

void sub_10005FEA4(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v5 = *(_QWORD *)(v2 + 368);
  if (v5
    && ((v6 = v2, v7 = *(_QWORD *)(v2 + 360), v7 == a1) ? (v8 = v5 == a2) : (v8 = 0),
        v8 || (_stringCompareWithSmolCheck(_:_:expecting:)(a1, a2, v7, v5, 0) & 1) != 0))
  {
    if (qword_1003158B8 != -1)
      swift_once(&qword_1003158B8, sub_1000D9880);
    v9 = type metadata accessor for Logger(0);
    sub_10000D744(v9, (uint64_t)qword_10033FEE0);
    v11 = swift_bridgeObjectRetain_n(a2, 2, v10);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v25 = v15;
      *(_DWORD *)v14 = 136446210;
      swift_bridgeObjectRetain(a2);
      v24 = sub_100172BEC(a1, a2, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Done delaying sync for 2 seconds for token %{public}s", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
    v23 = *(_QWORD *)(v6 + 368);
    *(_QWORD *)(v6 + 360) = 0;
    *(_QWORD *)(v6 + 368) = 0;
    swift_bridgeObjectRelease(v23);
    sub_10005F81C();
  }
  else
  {
    if (qword_1003158B8 != -1)
      swift_once(&qword_1003158B8, sub_1000D9880);
    v16 = type metadata accessor for Logger(0);
    sub_10000D744(v16, (uint64_t)qword_10033FEE0);
    v18 = swift_bridgeObjectRetain_n(a2, 2, v17);
    v19 = Logger.logObject.getter(v18);
    v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc(12, -1);
      v22 = swift_slowAlloc(32, -1);
      v25 = v22;
      *(_DWORD *)v21 = 136446210;
      swift_bridgeObjectRetain(a2);
      v24 = sub_100172BEC(a1, a2, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease_n(a2, 3);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Delaying sync token %{public}s expired, ignoring", v21, 0xCu);
      swift_arrayDestroy(v22, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1, -1);
      swift_slowDealloc(v21, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n(a2, 2);
    }
  }
}

uint64_t sub_1000601F0(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  _BYTE v9[24];

  v6 = a2 + 16;
  swift_beginAccess(a2 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v6);
  if (result)
  {
    v8 = result;
    sub_100060260(a3, a4 & 1);
    return swift_release(v8);
  }
  return result;
}

void sub_100060260(uint64_t *a1, char a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v5;
  int v6;
  char v7;
  char v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  char v17;
  char v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint8_t *v64;
  uint64_t v65;
  uint64_t v66;
  os_log_type_t v67;
  uint8_t *v68;
  char v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  _BYTE v82[64];
  uint64_t v83;
  char v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  char v88;
  uint64_t v89;
  char v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  char v96;
  uint64_t v97;
  char v98;
  _BYTE v99[72];

  v3 = (_QWORD *)v2;
  v5 = (uint64_t *)(v2 + 192);
  v6 = *(unsigned __int8 *)(v2 + 248);
  if (v6 != 3)
  {
    v12 = (unsigned __int8 *)(v2 + 200);
    v13 = *(_QWORD *)(v2 + 240);
    v14 = *a1;
    v15 = v13 == *a1;
    v16 = *((_BYTE *)a1 + 8);
    v8 = v16 & 1;
    if ((v16 & 1) != 0)
    {
      if (v13 != v14)
      {
        v71 = 0;
        v70 = 0;
        v20 = a1 + 2;
        if ((a2 & 1) != 0)
          v20 = (uint64_t *)(v2 + 192);
        else
          v12 = (unsigned __int8 *)(a1 + 3);
        v10 = *v12;
        v11 = *v20;
        goto LABEL_26;
      }
      v70 = 0;
    }
    else
    {
      v70 = a2 ^ 1;
      if (v13 != v14)
        goto LABEL_27;
    }
    v18 = *((_BYTE *)a1 + 24);
    if ((*(_BYTE *)(v2 + 216) & 1) != 0)
    {
      if (v6 == 2)
        v19 = 0;
      else
        v19 = *((_BYTE *)a1 + 24);
      if ((v19 & 1) == 0)
        goto LABEL_27;
    }
    else
    {
      if (*(_QWORD *)(v2 + 208) != a1[2])
        v18 = 1;
      if (v6 == 2 || (v18 & 1) != 0)
      {
LABEL_27:
        v17 = 0;
        if ((a2 & 1) == 0)
          goto LABEL_25;
LABEL_28:
        v10 = *v12;
        v11 = *v5;
        LOBYTE(v71) = v17;
        BYTE4(v71) = v15;
        if ((a1[1] & 1) != 0)
          goto LABEL_26;
LABEL_29:
        v9 = 0;
        goto LABEL_30;
      }
    }
    v15 = 1;
    v17 = v16 & 1;
    if ((a2 & 1) == 0)
      goto LABEL_25;
    goto LABEL_28;
  }
  v7 = *((_BYTE *)a1 + 8);
  v8 = v7 & 1;
  if ((a2 & 1) != 0)
  {
    v71 = 0;
    v70 = 0;
    v9 = 0;
    v10 = *((unsigned __int8 *)a1 + 24);
    v11 = a1[2];
    if ((a1[1] & 1) == 0)
      goto LABEL_30;
    goto LABEL_26;
  }
  v70 = (v7 & 1) == 0;
  v17 = 0;
  v15 = 0;
LABEL_25:
  v10 = *((unsigned __int8 *)a1 + 24);
  v11 = a1[2];
  LOBYTE(v71) = v17;
  BYTE4(v71) = v15;
  if ((v8 & 1) == 0)
    goto LABEL_29;
LABEL_26:
  v9 = 2;
LABEL_30:
  v21 = *a1;
  v22 = a1[2];
  v23 = *((unsigned __int8 *)a1 + 24);
  v24 = a1[4];
  v77 = v11;
  v78 = *((unsigned __int8 *)a1 + 40);
  v91 = v11;
  v92 = v10;
  v73 = v23;
  v74 = v22;
  v93 = v22;
  v94 = v23;
  v79 = v24;
  v95 = v24;
  v96 = v78;
  v75 = v21;
  v97 = v21;
  v72 = v10;
  v76 = v9;
  v98 = v9;
  sub_10000B458((uint64_t)v5, (uint64_t)v82, &qword_100319D38);
  v25 = *(_QWORD *)(v2 + 192);
  v26 = *(_QWORD *)(v2 + 200);
  v27 = *(_QWORD *)(v2 + 208);
  v28 = *(_QWORD *)(v2 + 216);
  v29 = *(_QWORD *)(v2 + 224);
  v30 = *(_QWORD *)(v2 + 232);
  v31 = *(_QWORD *)(v2 + 240);
  v32 = *(_BYTE *)(v2 + 248);
  sub_10000B458((uint64_t)v82, (uint64_t)v99, &qword_100319D38);
  if (v99[56] == 3)
    goto LABEL_32;
  v83 = v25;
  v84 = v26 & 1;
  v85 = v27;
  v86 = v28 & 1;
  v87 = v29;
  v88 = v30 & 1;
  v89 = v31;
  v90 = v32;
  if (!sub_100063564((uint64_t)&v83, (uint64_t)&v91))
  {
LABEL_32:
    v33 = sub_100003DB8(&qword_10032B0E0);
    v34 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v33, v34);
  }
  *(_QWORD *)(v2 + 192) = v77;
  *(_QWORD *)(v2 + 200) = v72;
  *(_QWORD *)(v2 + 208) = v74;
  *(_QWORD *)(v2 + 216) = v73;
  *(_QWORD *)(v2 + 224) = v79;
  *(_QWORD *)(v2 + 232) = v78;
  *(_QWORD *)(v2 + 240) = v75;
  *(_BYTE *)(v2 + 248) = v76;
  sub_10005F24C((uint64_t)v82);
  if (!(v70 & 1 | ((v71 & 0x100000000) == 0)))
  {
    v35 = v71;
    if (qword_1003158B8 != -1)
      swift_once(&qword_1003158B8, sub_1000D9880);
    v42 = type metadata accessor for Logger(0);
    v43 = sub_10000D744(v42, (uint64_t)qword_10033FEE0);
    v44 = Logger.logObject.getter(v43);
    v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "ConversationId is the same, keeping the current questionnaire state", v46, 2u);
      swift_slowDealloc(v46, -1, -1);
    }

LABEL_46:
    if ((v78 & 1) != 0)
      goto LABEL_60;
    goto LABEL_53;
  }
  v35 = v71;
  if (qword_1003158B8 != -1)
    swift_once(&qword_1003158B8, sub_1000D9880);
  v36 = type metadata accessor for Logger(0);
  v37 = sub_10000D744(v36, (uint64_t)qword_10033FEE0);
  v38 = Logger.logObject.getter(v37);
  v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    v40 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "ConversationId changed or this is a new request for non-committed conversation, attempting to reset the questionnaire", v40, 2u);
    swift_slowDealloc(v40, -1, -1);
  }

  v41 = v3[13];
  if (!v41)
    goto LABEL_46;
  if (*(_QWORD *)(v41 + 32))
  {
    *(_BYTE *)(v41 + 40) = 1;
    swift_retain(v41);
  }
  else
  {
    swift_retain(v3[13]);
    v47 = sub_100003DB8(&qword_10032B0E0);
    v48 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v47, v48);
  }
  sub_1000ADCBC(0);
  if (*(_QWORD *)(v41 + 32))
  {
    *(_BYTE *)(v41 + 41) = 1;
  }
  else
  {
    v49 = sub_100003DB8(&qword_10032B0E0);
    v50 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v49, v50);
  }
  swift_release(v41);
  if ((v78 & 1) != 0)
    goto LABEL_60;
LABEL_53:
  if (v79 == 8)
  {
    v51 = 1;
    v52 = v3[13];
    if (!v52)
      goto LABEL_62;
LABEL_61:
    swift_retain(v52);
    sub_1000AE670(v51);
    swift_release(v52);
    goto LABEL_62;
  }
  if (v79 != 1)
  {
LABEL_60:
    v51 = 2;
    v52 = v3[13];
    if (!v52)
      goto LABEL_62;
    goto LABEL_61;
  }
  if (byte_100322668 == 2)
    v51 = 1;
  else
    v51 = byte_100322668;
  v52 = v3[13];
  if (v52)
    goto LABEL_61;
LABEL_62:
  if ((v35 & 1) != 0)
    return;
  v53 = v3[32];
  v54 = v3[33];
  swift_bridgeObjectRetain(v54);
  sub_10005C318(v53, v54);
  swift_bridgeObjectRelease(v54);
  if ((a2 & 1) != 0 && (v55 = v3[46]) != 0)
  {
    v56 = v3[45];
    v57 = qword_1003158B8;
    swift_bridgeObjectRetain(v55);
    if (v57 != -1)
      swift_once(&qword_1003158B8, sub_1000D9880);
    v58 = type metadata accessor for Logger(0);
    sub_10000D744(v58, (uint64_t)qword_10033FEE0);
    swift_bridgeObjectRetain(v55);
    v60 = Logger.logObject.getter(v59);
    v61 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc(12, -1);
      v63 = swift_slowAlloc(32, -1);
      v81 = v63;
      *(_DWORD *)v62 = 136446210;
      swift_bridgeObjectRetain(v55);
      v80 = sub_100172BEC(v56, v55, &v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v80, &v81, v62 + 4, v62 + 12);
      swift_bridgeObjectRelease_n(v55, 3);
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Delay request token %{public}s is already pending, skipping this one", v62, 0xCu);
      swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1, -1);
      v64 = v62;
      goto LABEL_75;
    }

    swift_bridgeObjectRelease_n(v55, 2);
  }
  else
  {
    if ((v78 & 1) == 0 && v79 == 1)
    {
      if (qword_1003158B8 != -1)
        swift_once(&qword_1003158B8, sub_1000D9880);
      v65 = type metadata accessor for Logger(0);
      v66 = sub_10000D744(v65, (uint64_t)qword_10033FEE0);
      v60 = Logger.logObject.getter(v66);
      v67 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v60, v67))
        goto LABEL_76;
      v68 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v68 = 0;
      _os_log_impl((void *)&_mh_execute_header, v60, v67, "Roadside assistance started from emergency flow, skipping the delay", v68, 2u);
      v64 = v68;
LABEL_75:
      swift_slowDealloc(v64, -1, -1);
LABEL_76:

      return;
    }
    sub_10005F974();
  }
}

uint64_t sub_100060A0C(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  _BYTE v4[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v4, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    sub_100060A60();
    return swift_release(v3);
  }
  return result;
}

void sub_100060A60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  __int16 v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t Strong;
  uint64_t v42;
  _UNKNOWN **v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  __n128 v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  unint64_t v57;
  uint64_t v58;
  __n128 v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  unint64_t v64;
  uint8_t *v65;
  uint64_t v66;
  __n128 v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  void *v71;
  __n128 v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint8_t *v78;
  uint8_t *v79;
  uint8_t *v80;
  uint64_t v81;
  NSObject *v82;
  void (*v83)(char *, uint64_t);
  uint64_t v84;
  uint8_t *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t aBlock[5];
  _QWORD *v92;
  char v93[32];

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v89 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchQoS(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchTime(0);
  v12 = *(_QWORD *)(v11 - 8);
  v14 = __chkstk_darwin(v11, v13);
  v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v17);
  v19 = (char *)&v79 - v18;
  v20 = *(unsigned __int8 *)(v1 + 248);
  if (v20 != 3)
  {
    if ((*(_BYTE *)(v1 + 249) & 1) != 0)
      return;
    if ((*(_BYTE *)(v1 + 216) & 1) == 0)
    {
      v88 = v2;
      v21 = *(_QWORD *)(v1 + 104);
      if (v20)
      {
        if (v21)
          goto LABEL_3;
        return;
      }
      if (v21)
      {
        swift_beginAccess(v21 + 48, v93, 0, 0);
        v22 = *(_QWORD *)(v21 + 144);
        v23 = *(_QWORD *)(v22 + 16);
        if (v23)
        {
          LODWORD(v87) = *(unsigned __int8 *)(v23 + v22 + 31);
          swift_retain(v21);
          if ((_DWORD)v87 == 4)
          {
            v87 = v21;
            v24 = sub_1000AD998();
            if (!v25)
            {
              LODWORD(v86) = *(unsigned __int8 *)(v1 + 272);
              Strong = swift_unknownObjectWeakLoadStrong(v1 + 48);
              if (Strong)
              {
                v42 = Strong;
                v85 = (uint8_t *)*(id *)(Strong + 152);
                swift_unknownObjectRelease(v42);
                v43 = &off_1002FA538;
              }
              else
              {
                v85 = 0;
                v43 = 0;
              }
              v84 = sub_1000ABA28(v86 & 1, (uint64_t)v85, (uint64_t)v43);
              v86 = v57;
              swift_unknownObjectRelease(v85);
              if (qword_1003158B8 != -1)
                swift_once(&qword_1003158B8, sub_1000D9880);
              v58 = type metadata accessor for Logger(0);
              sub_10000D744(v58, (uint64_t)qword_10033FEE0);
              v60 = swift_bridgeObjectRetain_n(v86, 2, v59);
              v61 = Logger.logObject.getter(v60);
              v62 = static os_log_type_t.default.getter();
              LODWORD(v83) = v62;
              if (os_log_type_enabled(v61, v62))
              {
                v85 = (uint8_t *)swift_slowAlloc(12, -1);
                v81 = swift_slowAlloc(32, -1);
                aBlock[0] = v81;
                v82 = v61;
                v63 = v85;
                v64 = v86;
                v65 = v85;
                *(_DWORD *)v85 = 136446210;
                v79 = v63 + 4;
                v80 = v65 + 12;
                swift_bridgeObjectRetain(v64);
                v90 = sub_100172BEC(v84, v64, aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, aBlock, v79, v80);
                swift_bridgeObjectRelease_n(v64, 3);
                _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v83, "Starting new questionnaire send attempt for token %{public}s", v85, 0xCu);
                v66 = v81;
                swift_arrayDestroy(v81, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v66, -1, -1);
                swift_slowDealloc(v85, -1, -1);

              }
              else
              {

                swift_bridgeObjectRelease_n(v86, 2);
              }
              sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
              v85 = (uint8_t *)static OS_dispatch_queue.main.getter(v67);
              static DispatchTime.now()(v85);
              + infix(_:_:)(v16, 8.0);
              v83 = *(void (**)(char *, uint64_t))(v12 + 8);
              v83(v16, v11);
              v68 = swift_allocObject(&unk_1002E8390, 24, 7);
              swift_weakInit(v68 + 16, v1);
              v69 = (_QWORD *)swift_allocObject(&unk_1002E8408, 40, 7);
              v70 = v84;
              v69[2] = v68;
              v69[3] = v70;
              v69[4] = v86;
              aBlock[4] = (uint64_t)sub_100064770;
              v92 = v69;
              aBlock[0] = (uint64_t)_NSConcreteStackBlock;
              aBlock[1] = 1107296256;
              aBlock[2] = (uint64_t)sub_1001BAACC;
              aBlock[3] = (uint64_t)&unk_1002E8420;
              v71 = _Block_copy(aBlock);
              swift_release(v92);
              static DispatchQoS.unspecified.getter(v72);
              aBlock[0] = (uint64_t)_swiftEmptyArrayStorage;
              v73 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              v74 = sub_100003DB8((uint64_t *)&unk_1003178D0);
              v75 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
              v76 = v74;
              v77 = v88;
              dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v76, v75, v88, v73);
              v78 = v85;
              OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v19, v10, v5, v71);
              swift_release(v87);
              _Block_release(v71);

              (*(void (**)(char *, uint64_t))(v89 + 8))(v5, v77);
              (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
              v83(v19, v11);
              return;
            }
            if ((v26 & 0x100) != 0)
            {
              v44 = v24;
              v45 = v25;
              if (qword_1003158B8 != -1)
                swift_once(&qword_1003158B8, sub_1000D9880);
              v46 = type metadata accessor for Logger(0);
              sub_10000D744(v46, (uint64_t)qword_10033FEE0);
              v48 = swift_bridgeObjectRetain_n(v45, 2, v47);
              v49 = Logger.logObject.getter(v48);
              v50 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v49, v50))
              {
                v51 = (uint8_t *)swift_slowAlloc(12, -1);
                v52 = swift_slowAlloc(32, -1);
                aBlock[0] = v52;
                *(_DWORD *)v51 = 136446210;
                swift_bridgeObjectRetain(v45);
                v90 = sub_100172BEC(v44, v45, aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, aBlock, v51 + 4, v51 + 12);
                swift_bridgeObjectRelease_n(v45, 3);
                _os_log_impl((void *)&_mh_execute_header, v49, v50, "Send questionnaire for token %{public}s", v51, 0xCu);
                swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v52, -1, -1);
                swift_slowDealloc(v51, -1, -1);

              }
              else
              {

                swift_bridgeObjectRelease_n(v45, 2);
              }
              sub_1000AB27C(v44, v45);
              v53 = swift_bridgeObjectRelease(v45);
              v54 = Logger.logObject.getter(v53);
              v55 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v54, v55))
              {
                v56 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v56 = 0;
                _os_log_impl((void *)&_mh_execute_header, v54, v55, "Sending the start message with questionnaire out", v56, 2u);
                swift_slowDealloc(v56, -1, -1);
              }

              sub_100062DA0();
            }
            else
            {
              v27 = v24;
              v28 = v25;
              if (qword_1003158B8 != -1)
                swift_once(&qword_1003158B8, sub_1000D9880);
              v29 = type metadata accessor for Logger(0);
              sub_10000D744(v29, (uint64_t)qword_10033FEE0);
              swift_bridgeObjectRetain(v28);
              v31 = Logger.logObject.getter(v30);
              v32 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v31, v32))
              {
                v33 = (uint8_t *)swift_slowAlloc(12, -1);
                v34 = swift_slowAlloc(32, -1);
                aBlock[0] = v34;
                *(_DWORD *)v33 = 136446210;
                swift_bridgeObjectRetain(v28);
                v90 = sub_100172BEC(v27, v28, aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, aBlock, v33 + 4, v33 + 12);
                swift_bridgeObjectRelease_n(v28, 3);
                _os_log_impl((void *)&_mh_execute_header, v31, v32, "Pending send token %{public}s", v33, 0xCu);
                swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v34, -1, -1);
                swift_slowDealloc(v33, -1, -1);

              }
              else
              {

                swift_bridgeObjectRelease_n(v28, 2);
              }
            }
            v40 = v87;
          }
          else
          {
            sub_1000AAEA8();
            v40 = v21;
          }
          swift_release(v40);
          return;
        }
        __break(1u);
      }
      else if (qword_1003158B8 == -1)
      {
LABEL_20:
        v35 = type metadata accessor for Logger(0);
        v36 = sub_10000D744(v35, (uint64_t)qword_10033FEE0);
        v37 = Logger.logObject.getter(v36);
        v38 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v37, v38))
        {
          v39 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v39 = 0;
          _os_log_impl((void *)&_mh_execute_header, v37, v38, "Sending start message without questionnaire out", v39, 2u);
          swift_slowDealloc(v39, -1, -1);
        }

        sub_100062DA0();
        return;
      }
      swift_once(&qword_1003158B8, sub_1000D9880);
      goto LABEL_20;
    }
  }
  v21 = *(_QWORD *)(v1 + 104);
  if (v21)
  {
LABEL_3:
    swift_retain(v21);
    sub_1000AAEA8();
    swift_release(v21);
  }
}

void sub_100061404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t Strong;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  __n128 v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __n128 v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __n128 v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  __n128 v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __n128 v78;
  void *v79;
  uint64_t v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  _QWORD *v85;
  char *v86;
  __n128 v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  id v102;
  char *v103;
  _QWORD *v104;
  _QWORD *aBlock;
  _QWORD v106[4];
  _QWORD *v107;
  uint64_t v108[3];
  char v109[32];

  v104 = (_QWORD *)a2;
  v5 = type metadata accessor for DispatchWorkItemFlags(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v103 = (char *)&v94 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a1 + 16;
  swift_beginAccess(a1 + 16, v109, 0, 0);
  Strong = swift_weakLoadStrong(a1 + 16);
  if (!Strong)
  {
    if (qword_1003158B8 != -1)
      swift_once(&qword_1003158B8, sub_1000D9880);
    v33 = type metadata accessor for Logger(0);
    sub_10000D744(v33, (uint64_t)qword_10033FEE0);
    v35 = swift_bridgeObjectRetain_n(a3, 2, v34);
    v36 = Logger.logObject.getter(v35);
    v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc(12, -1);
      v39 = swift_slowAlloc(32, -1);
      v108[0] = v39;
      *(_DWORD *)v38 = 136446210;
      aBlock = v104;
      v106[0] = a3;
      swift_bridgeObjectRetain(a3);
      v40 = sub_100003DB8(&qword_100318260);
      v42 = String.init<A>(describing:)(&aBlock, v40, v41);
      v44 = v43;
      aBlock = (_QWORD *)sub_100172BEC(v42, v43, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v106, v38 + 4, v38 + 12);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease(v44);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Loading questionnaire request for iso3166Alpha3CountryCode: %{public}s has expired", v38, 0xCu);
      swift_arrayDestroy(v39, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1, -1);
      swift_slowDealloc(v38, -1, -1);

      return;
    }

LABEL_22:
    swift_bridgeObjectRelease_n(a3, 2);
    return;
  }
  v16 = Strong;
  v17 = swift_unknownObjectWeakLoadStrong(Strong + 48);
  if (!v17)
  {
    if (qword_1003158B8 != -1)
      swift_once(&qword_1003158B8, sub_1000D9880);
    v45 = type metadata accessor for Logger(0);
    sub_10000D744(v45, (uint64_t)qword_10033FEE0);
    v47 = swift_bridgeObjectRetain_n(a3, 2, v46);
    v48 = Logger.logObject.getter(v47);
    v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(12, -1);
      v51 = v16;
      v52 = swift_slowAlloc(32, -1);
      v108[0] = v52;
      *(_DWORD *)v50 = 136446210;
      aBlock = v104;
      v106[0] = a3;
      swift_bridgeObjectRetain(a3);
      v53 = sub_100003DB8(&qword_100318260);
      v55 = String.init<A>(describing:)(&aBlock, v53, v54);
      v57 = v56;
      aBlock = (_QWORD *)sub_100172BEC(v55, v56, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v106, v50 + 4, v50 + 12);
      swift_bridgeObjectRelease_n(a3, 2);
      swift_bridgeObjectRelease(v57);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Loading questionnaire request for iso3166Alpha3CountryCode: %{public}s has expired, no countryBundleLocationProvider available", v50, 0xCu);
      swift_arrayDestroy(v52, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v52, -1, -1);
      swift_slowDealloc(v50, -1, -1);
      swift_release(v51);

      return;
    }

    swift_release(v16);
    goto LABEL_22;
  }
  v18 = v17;
  v97 = v10;
  v102 = *(id *)(v17 + 152);
  swift_unknownObjectRelease(v18);
  if (qword_1003158B8 != -1)
    swift_once(&qword_1003158B8, sub_1000D9880);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10000D744(v19, (uint64_t)qword_10033FEE0);
  v22 = swift_bridgeObjectRetain_n(a3, 2, v21);
  v95 = (_QWORD *)v20;
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  v25 = os_log_type_enabled(v23, v24);
  v100 = v5;
  v101 = v16;
  v98 = v9;
  v99 = v6;
  v96 = v11;
  if (v25)
  {
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v108[0] = v27;
    *(_DWORD *)v26 = 136446210;
    aBlock = v104;
    v106[0] = a3;
    swift_bridgeObjectRetain(a3);
    v28 = sub_100003DB8(&qword_100318260);
    v30 = String.init<A>(describing:)(&aBlock, v28, v29);
    v32 = v31;
    aBlock = (_QWORD *)sub_100172BEC(v30, v31, v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v106, v26 + 4, v26 + 12);
    swift_bridgeObjectRelease_n(a3, 2);
    swift_bridgeObjectRelease(v32);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Requesting bundle location for iso3166Alpha3CountryCode: %{public}s", v26, 0xCu);
    swift_arrayDestroy(v27, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(a3, 2);
  }
  v58 = sub_100219C50((uint64_t)v104, a3);
  v60 = v59;
  v62 = swift_bridgeObjectRetain_n(v59, 2, v61);
  v63 = Logger.logObject.getter(v62);
  v64 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v63, v64))
  {
    v95 = (_QWORD *)v58;
    v65 = (uint8_t *)swift_slowAlloc(12, -1);
    v66 = swift_slowAlloc(32, -1);
    v108[0] = v66;
    *(_DWORD *)v65 = 136446210;
    v94 = a3;
    aBlock = v95;
    v106[0] = v60;
    swift_bridgeObjectRetain(v60);
    v67 = sub_100003DB8(&qword_100318260);
    v69 = String.init<A>(describing:)(&aBlock, v67, v68);
    v71 = v70;
    aBlock = (_QWORD *)sub_100172BEC(v69, v70, v108);
    a3 = v94;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v106, v65 + 4, v65 + 12);
    swift_bridgeObjectRelease_n(v60, 2);
    v72 = v71;
    v58 = (uint64_t)v95;
    swift_bridgeObjectRelease(v72);
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Loading questionnaire from bundleLocation: %{public}s", v65, 0xCu);
    swift_arrayDestroy(v66, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1, -1);
    swift_slowDealloc(v65, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v60, 2);
  }
  v73 = sub_1000A8598(v58, v60);
  v75 = v74;
  v77 = v76;
  swift_bridgeObjectRelease(v60);
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  v79 = (void *)static OS_dispatch_queue.main.getter(v78);
  v80 = swift_allocObject(&unk_1002E8390, 24, 7);
  swift_beginAccess(v14, v108, 0, 0);
  v81 = swift_weakLoadStrong(v14);
  swift_weakInit(v80 + 16, v81);
  swift_release(v81);
  v82 = (_QWORD *)swift_allocObject(&unk_1002E85E8, 64, 7);
  v83 = (uint64_t)v104;
  v82[2] = v80;
  v82[3] = v83;
  v82[4] = a3;
  v82[5] = v73;
  v82[6] = v75;
  v82[7] = v77;
  v106[3] = sub_100064A14;
  v107 = v82;
  aBlock = _NSConcreteStackBlock;
  v106[0] = 1107296256;
  v106[1] = sub_1001BAACC;
  v106[2] = &unk_1002E8600;
  v84 = _Block_copy(&aBlock);
  v85 = v107;
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRetain(a3);
  swift_retain(v73);
  swift_release(v85);
  v86 = v103;
  static DispatchQoS.unspecified.getter(v87);
  aBlock = _swiftEmptyArrayStorage;
  v88 = sub_1000052EC((unint64_t *)&qword_10031B310, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  v89 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v90 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
  v91 = v98;
  v92 = v89;
  v93 = v100;
  dispatch thunk of SetAlgebra.init<A>(_:)(&aBlock, v92, v90, v100, v88);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v86, v91, v84);
  _Block_release(v84);
  swift_bridgeObjectRelease(v77);
  swift_release(v73);
  swift_release(v101);

  (*(void (**)(char *, uint64_t))(v99 + 8))(v91, v93);
  (*(void (**)(char *, uint64_t))(v96 + 8))(v86, v97);
}

uint64_t sub_100061D50(uint64_t a1, void (*a2)(char *, uint64_t, uint64_t, uint64_t), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t Strong;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _BYTE v17[24];

  v11 = a1 + 16;
  swift_beginAccess(a1 + 16, v17, 0, 0);
  Strong = swift_weakLoadStrong(v11);
  if (Strong)
  {
    v13 = Strong;
    sub_100061E18(a2, a3, a4, a5, a6);
    swift_release(v13);
  }
  swift_beginAccess(v11, &v16, 0, 0);
  result = swift_weakLoadStrong(v11);
  if (result)
  {
    v15 = result;
    sub_10005F81C();
    return swift_release(v15);
  }
  return result;
}

void sub_100061E18(void (*a1)(char *, uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  __n128 v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  _BOOL4 v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __n128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint8_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  __n128 v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  __n128 v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  __n128 v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  void (*v93)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t Strong;
  _UNKNOWN **v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned __int8 v100;
  void *v101;
  uint64_t v102;
  __n128 v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  __n128 v114;
  uint64_t v115;
  uint64_t v116;
  __n128 v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  __n128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void *v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(char *, uint64_t);
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void (*v141)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v142;
  __int128 v143;
  uint64_t v144[3];
  id v145;
  uint64_t v146;
  _QWORD v147[3];

  v6 = v5;
  v139 = a4;
  v140 = a5;
  v135 = a3;
  v9 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v9, v10);
  v136 = (char *)&v131 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = sub_100003DB8((uint64_t *)&unk_100326490);
  v12 = *(_QWORD *)(v138 - 8);
  __chkstk_darwin(v138, v13);
  v137 = (char *)&v131 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for DispatchPredicate(0);
  v142 = *(_QWORD *)(v15 - 8);
  *(_QWORD *)&v143 = v15;
  __chkstk_darwin(v15, v16);
  v18 = (uint64_t *)((char *)&v131 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (qword_1003158B8 != -1)
    swift_once(&qword_1003158B8, sub_1000D9880);
  v19 = type metadata accessor for Logger(0);
  v20 = sub_10000D744(v19, (uint64_t)qword_10033FEE0);
  v22 = swift_bridgeObjectRetain_n(a2, 2, v21);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  v25 = os_log_type_enabled(v23, v24);
  v141 = a1;
  if (v25)
  {
    v133 = (void (*)(char *, uint64_t))v20;
    v26 = (uint8_t *)swift_slowAlloc(12, -1);
    v27 = swift_slowAlloc(32, -1);
    v134 = v12;
    v28 = v27;
    v144[0] = v27;
    *(_DWORD *)v26 = 136446210;
    v146 = (uint64_t)a1;
    v147[0] = a2;
    swift_bridgeObjectRetain(a2);
    v29 = sub_100003DB8(&qword_100318260);
    v31 = String.init<A>(describing:)(&v146, v29, v30);
    v32 = v6;
    v34 = v33;
    v146 = sub_100172BEC(v31, v33, v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147, v26 + 4, v26 + 12);
    v35 = a2;
    swift_bridgeObjectRelease_n(a2, 2);
    v36 = v34;
    v6 = v32;
    swift_bridgeObjectRelease(v36);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "_onQuestionnaireLoadRequestDone for iso3166Alpha3CountryCode: %{public}s", v26, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    v37 = v28;
    v12 = v134;
    swift_slowDealloc(v37, -1, -1);
    swift_slowDealloc(v26, -1, -1);

  }
  else
  {

    v35 = a2;
    swift_bridgeObjectRelease_n(a2, 2);
  }
  v38 = sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v18 = static OS_dispatch_queue.main.getter(v39);
  v41 = v142;
  v40 = v143;
  (*(void (**)(_QWORD *, _QWORD, _QWORD))(v142 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v143);
  v42 = _dispatchPreconditionTest(_:)(v18);
  v43 = (*(uint64_t (**)(_QWORD *, uint64_t))(v41 + 8))(v18, v40);
  if ((v42 & 1) == 0)
  {
    __break(1u);
LABEL_55:
    if (_CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
    {
      sub_100209204((uint64_t)_swiftEmptyArrayStorage);
      v101 = v130;
      goto LABEL_50;
    }
LABEL_49:
    v101 = &_swiftEmptySetSingleton;
LABEL_50:
    *(_QWORD *)&v143 = v6 + 288;
    swift_beginAccess(v6 + 288, &v146, 1, 0);
    v102 = *(_QWORD *)(v6 + 288);
    *(_QWORD *)(v6 + 288) = v101;
    swift_bridgeObjectRelease(v102);
    v144[0] = *(_QWORD *)(v42 + 16);
    v103 = swift_retain(v144[0]);
    v145 = (id)static OS_dispatch_queue.main.getter(v103);
    v104 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
    v141 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v104 - 8) + 56);
    v142 = v104;
    v105 = (uint64_t)v136;
    v141(v136, 1, 1, v104);
    v106 = sub_100003DB8(&qword_10032B0E0);
    v135 = v106;
    v107 = sub_1000084FC((unint64_t *)&qword_1003264A0, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    v140 = v107;
    v139 = sub_1000647B4((unint64_t *)&qword_10032B100, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr, (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    v108 = v137;
    Publisher.receive<A>(on:options:)(&v145, v105, v106, v38, v107, v139);
    sub_100007FF0(v105, &qword_100329AF0);

    swift_release(v144[0]);
    v109 = swift_allocObject(&unk_1002E8390, 24, 7);
    v110 = v42;
    v132 = v42;
    v111 = v109;
    swift_weakInit(v109 + 16, v6);
    v112 = swift_allocObject(&unk_1002E8638, 32, 7);
    *(_QWORD *)(v112 + 16) = sub_100064A58;
    *(_QWORD *)(v112 + 24) = v111;
    v134 = sub_1000084FC((unint64_t *)&unk_1003264B0, (uint64_t *)&unk_100326490, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    v113 = v138;
    v115 = Publisher<>.sink(receiveValue:)(sub_100021640, v112, v138, v134, v114);
    swift_release(v112);
    v133 = *(void (**)(char *, uint64_t))(v12 + 8);
    v133(v108, v113);
    v116 = v143;
    swift_beginAccess(v143, v144, 33, 0);
    AnyCancellable.store(in:)(v116);
    swift_endAccess(v144);
    swift_release(v115);
    v144[0] = *(_QWORD *)(v110 + 24);
    v117 = swift_retain(v144[0]);
    v145 = (id)static OS_dispatch_queue.main.getter(v117);
    v141((char *)v105, 1, 1, v142);
    v118 = v135;
    Publisher.receive<A>(on:options:)(&v145, v105, v135, v38, v140, v139);
    sub_100007FF0(v105, &qword_100329AF0);

    swift_release(v144[0]);
    v119 = swift_allocObject(&unk_1002E8390, 24, 7);
    swift_weakInit(v119 + 16, v6);
    v120 = swift_allocObject(&unk_1002E8660, 32, 7);
    *(_QWORD *)(v120 + 16) = sub_100064A84;
    *(_QWORD *)(v120 + 24) = v119;
    v122 = Publisher<>.sink(receiveValue:)(sub_1000216F8, v120, v113, v134, v121);
    swift_release(v120);
    v133(v108, v113);
    swift_beginAccess(v116, v144, 33, 0);
    AnyCancellable.store(in:)(v116);
    swift_endAccess(v144);
    swift_release(v122);
    v123 = *(_QWORD *)(v6 + 104);
    v124 = v132;
    *(_QWORD *)(v6 + 104) = v132;
    swift_retain(v124);
    swift_release(v123);
    v125 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v118, v125);
    sub_10005E170();
    Subject<>.send()(v118, v125);
    swift_release(v124);
    return;
  }
  v44 = *(_QWORD *)(v6 + 312);
  v45 = *(_QWORD *)(v6 + 320);
  if (!v45)
  {
    if (!v35)
    {
      v50 = *(_QWORD *)(v6 + 312);
      goto LABEL_19;
    }
    goto LABEL_22;
  }
  if (v45 == 1)
  {
    v46 = Logger.logObject.getter(v43);
    v47 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v46, v47))
    {
LABEL_26:

      return;
    }
    v48 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "No questionnaire loading requests are in progress, ignoring", v48, 2u);
    v49 = v48;
LABEL_24:
    swift_slowDealloc(v49, -1, -1);
    goto LABEL_26;
  }
  if (!v35)
    goto LABEL_22;
  if ((void (*)(char *, uint64_t, uint64_t, uint64_t))v44 == v141 && v45 == v35)
  {
    v50 = (uint64_t)v141;
    goto LABEL_19;
  }
  if ((_stringCompareWithSmolCheck(_:_:expecting:)(*(_QWORD *)(v6 + 312), *(_QWORD *)(v6 + 320), v141, v35, 0) & 1) == 0)
  {
LABEL_22:
    sub_1000649C4(v44, v45);
    swift_bridgeObjectRetain(v45);
    v46 = Logger.logObject.getter(v60);
    v61 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v46, v61))
    {
      sub_10006491C(v44, v45);
      sub_10006491C(v44, v45);
      goto LABEL_26;
    }
    v62 = (uint8_t *)swift_slowAlloc(12, -1);
    v63 = swift_slowAlloc(32, -1);
    v144[0] = v63;
    *(_DWORD *)v62 = 136446210;
    v146 = v44;
    v147[0] = v45;
    swift_bridgeObjectRetain(v45);
    v64 = sub_100003DB8(&qword_100318260);
    v66 = String.init<A>(describing:)(&v146, v64, v65);
    v68 = v67;
    v146 = sub_100172BEC(v66, v67, v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147, v62 + 4, v62 + 12);
    swift_bridgeObjectRelease(v68);
    sub_10006491C(v44, v45);
    sub_10006491C(v44, v45);
    _os_log_impl((void *)&_mh_execute_header, v46, v61, "Received questionnaire loading result not for the expected country code %{public}s, ignoring", v62, 0xCu);
    swift_arrayDestroy(v63, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    v49 = v62;
    goto LABEL_24;
  }
  v50 = *(_QWORD *)(v6 + 312);
  v35 = *(_QWORD *)(v6 + 320);
LABEL_19:
  v143 = xmmword_10024E030;
  *(_OWORD *)(v6 + 312) = xmmword_10024E030;
  swift_bridgeObjectRetain(v45);
  sub_10006491C(v50, v35);
  v51 = *(_QWORD *)(v6 + 304);
  if (v51 != 1)
  {
    v69 = *(_QWORD *)(v6 + 296);
    sub_1000649C4(v69, *(_QWORD *)(v6 + 304));
    sub_10006491C(v44, v45);
    v70 = *(_QWORD *)(v6 + 296);
    v71 = *(_QWORD *)(v6 + 304);
    *(_OWORD *)(v6 + 296) = v143;
    sub_10006491C(v70, v71);
    sub_10005C318(v69, v51);
    sub_10006491C(v69, v51);
    return;
  }
  v52 = *(_QWORD *)(v6 + 328);
  v53 = *(_QWORD *)(v6 + 336);
  v54 = *(_QWORD *)(v6 + 344);
  v55 = *(_QWORD *)(v6 + 352);
  if (v53 == 1)
  {
    *(_QWORD *)&v143 = 1;
    v57 = v139;
    v56 = v140;
    v58 = v54;
    v59 = v55;
    goto LABEL_37;
  }
  v57 = v139;
  v56 = v140;
  if (v55)
  {
    if (v140)
    {
      if (v54 == v139 && v55 == v140)
        goto LABEL_33;
      v72 = *(_QWORD *)(v6 + 344);
      v142 = *(_QWORD *)(v6 + 352);
      *(_QWORD *)&v143 = v54;
      v73 = _stringCompareWithSmolCheck(_:_:expecting:)(v72, v142, v139, v140, 0);
      v55 = v142;
      v54 = v143;
      if ((v73 & 1) != 0)
        goto LABEL_33;
    }
LABEL_36:
    v52 = *(_QWORD *)(v6 + 328);
    *(_QWORD *)&v143 = *(_QWORD *)(v6 + 336);
    v58 = *(_QWORD *)(v6 + 344);
    v59 = *(_QWORD *)(v6 + 352);
LABEL_37:
    *(_QWORD *)(v6 + 328) = v44;
    *(_QWORD *)(v6 + 336) = v45;
    *(_QWORD *)(v6 + 344) = v57;
    *(_QWORD *)(v6 + 352) = v56;
    swift_bridgeObjectRetain(v56);
    sub_100064A24(v52, v143, v58, v59);
    Strong = swift_unknownObjectWeakLoadStrong(v6 + 48);
    if (Strong)
      v95 = &off_1002F3C70;
    else
      v95 = 0;
    v96 = type metadata accessor for QuestionnaireState();
    swift_allocObject(v96, 280, 7);
    swift_retain(v135);
    sub_1000ADAA0(v97, Strong, (uint64_t)v95);
    v42 = v98;
    if (*(_BYTE *)(v6 + 248) != 3 && (*(_BYTE *)(v6 + 232) & 1) == 0)
    {
      v99 = *(_QWORD *)(v6 + 224);
      if (v99 == 8)
      {
        v100 = 1;
        goto LABEL_48;
      }
      if (v99 == 1)
      {
        if (byte_100322668 == 2)
          v100 = 1;
        else
          v100 = byte_100322668;
LABEL_48:
        sub_1000AE670(v100);
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
          goto LABEL_49;
        goto LABEL_55;
      }
    }
    v100 = 2;
    goto LABEL_48;
  }
  if (v140)
    goto LABEL_36;
LABEL_33:
  v74 = v54;
  v75 = v55;
  sub_1000649C4(v44, v45);
  swift_bridgeObjectRetain(v75);
  swift_bridgeObjectRetain(v53);
  sub_1000649C4(v44, v45);
  v76 = v52;
  *(_QWORD *)&v143 = v74;
  sub_100064990(v52, v53, v74, v75);
  swift_bridgeObjectRetain(v53);
  swift_bridgeObjectRetain(v75);
  v78 = Logger.logObject.getter(v77);
  v79 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v78, v79))
  {
    v80 = swift_slowAlloc(22, -1);
    v140 = v76;
    v81 = v80;
    v141 = (void (*)(char *, uint64_t, uint64_t, uint64_t))swift_slowAlloc(64, -1);
    v144[0] = (uint64_t)v141;
    *(_DWORD *)v81 = 136446466;
    v146 = v44;
    v147[0] = v45;
    swift_bridgeObjectRetain(v45);
    v82 = sub_100003DB8(&qword_100318260);
    v142 = v6;
    v83 = v82;
    v85 = String.init<A>(describing:)(&v146, v82, v84);
    v87 = v86;
    v146 = sub_100172BEC(v85, v86, v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147, v81 + 4, v81 + 12);
    swift_bridgeObjectRelease(v87);
    sub_10006491C(v44, v45);
    sub_10006491C(v44, v45);
    *(_WORD *)(v81 + 12) = 2082;
    v146 = v140;
    v147[0] = v53;
    v88 = swift_bridgeObjectRetain(v53);
    v89 = v83;
    v6 = v142;
    v90 = String.init<A>(describing:)(&v146, v89, v88);
    v92 = v91;
    v146 = sub_100172BEC(v90, v91, v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v146, v147, v81 + 14, v81 + 22);
    swift_bridgeObjectRelease_n(v75, 2);
    swift_bridgeObjectRelease_n(v53, 2);
    swift_bridgeObjectRelease(v92);
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "Questionnaire for country code %{public}s, is loaded from the same source as the previous country code %{public}s, ignoring", (uint8_t *)v81, 0x16u);
    v93 = v141;
    swift_arrayDestroy(v141, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v93, -1, -1);
    swift_slowDealloc(v81, -1, -1);
    swift_bridgeObjectRelease(v53);

  }
  else
  {
    sub_10006491C(v44, v45);
    sub_10006491C(v44, v45);

    swift_bridgeObjectRelease_n(v75, 2);
    swift_bridgeObjectRelease_n(v53, 3);
  }
  v126 = *(_QWORD *)(v6 + 328);
  v127 = *(_QWORD *)(v6 + 336);
  v128 = *(_QWORD *)(v6 + 344);
  v129 = *(_QWORD *)(v6 + 352);
  *(_QWORD *)(v6 + 328) = v44;
  *(_QWORD *)(v6 + 336) = v45;
  *(_QWORD *)(v6 + 344) = v143;
  *(_QWORD *)(v6 + 352) = v75;
  sub_100064A24(v126, v127, v128, v129);
}

uint64_t sub_100062B20(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v3 = result;
    v4 = sub_100003DB8(&qword_10032B0E0);
    v5 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v4, v5);
    return swift_release(v3);
  }
  return result;
}

uint64_t sub_100062BB4(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0, 0);
  Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    sub_10005E170();
    swift_release(v3);
  }
  swift_beginAccess(v1, &v9, 0, 0);
  result = swift_weakLoadStrong(v1);
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)(result + 32);
    swift_retain(v6);
    swift_release(v5);
    v7 = sub_100003DB8(&qword_10032B0E0);
    v8 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v7, v8);
    return swift_release(v6);
  }
  return result;
}

unint64_t sub_100062C88()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  unint64_t v9;
  unint64_t v10;
  char v12[24];

  if (*(_BYTE *)(v0 + 248) == 3 || (*(_BYTE *)(v0 + 216) & 1) != 0)
    return 0;
  v1 = *(_QWORD *)(v0 + 208);
  swift_beginAccess(v0 + 112, v12, 0, 0);
  v2 = *(_QWORD *)(v0 + 112);
  if (v2)
  {
    v3 = *(_QWORD *)(v0 + 112);
    if (!*(_QWORD *)(v2 + 16))
      goto LABEL_12;
  }
  else
  {
    v3 = sub_10022710C((uint64_t)_swiftEmptyArrayStorage);
    if (!*(_QWORD *)(v3 + 16))
    {
LABEL_12:
      swift_bridgeObjectRetain(v2);
      v10 = v3;
      goto LABEL_13;
    }
  }
  v4 = sub_10018647C(v1);
  if ((v5 & 1) == 0)
    goto LABEL_12;
  v6 = *(_QWORD *)(v3 + 56) + 40 * v4;
  v7 = *(_QWORD *)(v6 + 16);
  v8 = *(_BYTE *)(v6 + 25);
  v9 = *(_QWORD *)(v6 + 32);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease(v3);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease(v9);
    v10 = v7;
    goto LABEL_13;
  }
  swift_bridgeObjectRelease(v7);
  if (v9 && !*(_QWORD *)(v9 + 16))
  {
    v10 = v9;
LABEL_13:
    swift_bridgeObjectRelease(v10);
    return 0;
  }
  return v9;
}

void sub_100062DA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  os_log_type_t v10;
  uint8_t *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  BOOL v33;
  uint8_t *v34;
  __n128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *oslog;
  os_log_t osloga;
  os_log_t oslogb;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  char v64;
  os_log_t v65;
  _BYTE v66[64];
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  char v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  char v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  char v82;
  uint64_t v83;
  _BYTE v84[64];

  v1 = v0;
  if (qword_1003158B8 != -1)
    swift_once(&qword_1003158B8, sub_1000D9880);
  v2 = type metadata accessor for Logger(0);
  v3 = sub_10000D744(v2, (uint64_t)qword_10033FEE0);
  v4 = Logger.logObject.getter(v3);
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "_sendStartMessage", v6, 2u);
    swift_slowDealloc(v6, -1, -1);
  }

  v8 = *(_QWORD *)(v1 + 192);
  v9 = *(unsigned __int8 *)(v1 + 248);
  if (v9 == 3)
  {
    oslog = Logger.logObject.getter(v7);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      v12 = "currentRoadsideAssistance == nil, nothing to associate start message with";
LABEL_17:
      _os_log_impl((void *)&_mh_execute_header, oslog, v10, v12, v11, 2u);
      swift_slowDealloc(v11, -1, -1);
      goto LABEL_18;
    }
    goto LABEL_18;
  }
  if ((*(_BYTE *)(v1 + 216) & 1) != 0)
  {
    oslog = Logger.logObject.getter(v7);
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v11 = 0;
      v12 = "currentRoadsideAssistance.providerId == nil, nothing to associate start message with";
      goto LABEL_17;
    }
LABEL_18:

    return;
  }
  v13 = *(_QWORD *)(v1 + 208);
  v14 = *(_QWORD *)(v1 + 224);
  v15 = *(_QWORD *)(v1 + 240);
  v53 = *(_QWORD *)(v1 + 232) & 1;
  osloga = (os_log_t)(*(_QWORD *)(v1 + 200) & 1);
  if (!*(_BYTE *)(v1 + 248))
  {
    v20 = Logger.logObject.getter(v7);
    v21 = static os_log_type_t.default.getter();
    v50 = v14;
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v22 = 134349056;
      v83 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v22 + 4, v22 + 12);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Marking conversation id %{public}llu as committing", v22, 0xCu);
      v23 = v22;
      v14 = v50;
      swift_slowDealloc(v23, -1, -1);
    }

    v75 = v8;
    v76 = osloga != 0;
    v49 = v13;
    v77 = v13;
    v78 = 0;
    v79 = v14;
    v80 = v53 != 0;
    v51 = v15;
    v81 = v15;
    v82 = 1;
    sub_10000B458(v1 + 192, (uint64_t)v66, &qword_100319D38);
    v25 = *(_QWORD *)(v1 + 192);
    v24 = *(_QWORD *)(v1 + 200);
    v26 = *(_QWORD *)(v1 + 208);
    v27 = *(_QWORD *)(v1 + 216);
    v28 = *(_QWORD *)(v1 + 224);
    v46 = *(_QWORD *)(v1 + 232);
    v48 = *(_QWORD *)(v1 + 240);
    v47 = *(_BYTE *)(v1 + 248);
    sub_10000B458((uint64_t)v66, (uint64_t)&v83, &qword_100319D38);
    if (v84[48] == 3)
      goto LABEL_23;
    v67 = v25;
    v68 = v24 & 1;
    v69 = v26;
    v70 = v27 & 1;
    v71 = v28;
    v72 = v46 & 1;
    v73 = v48;
    v74 = v47;
    if (!sub_100063564((uint64_t)&v67, (uint64_t)&v75))
    {
LABEL_23:
      v29 = sub_100003DB8(&qword_10032B0E0);
      v30 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
      Subject<>.send()(v29, v30);
    }
    *(_QWORD *)(v1 + 192) = v8;
    *(_QWORD *)(v1 + 200) = osloga;
    v13 = v49;
    v14 = v50;
    *(_QWORD *)(v1 + 208) = v49;
    *(_QWORD *)(v1 + 216) = 0;
    v15 = v51;
    *(_QWORD *)(v1 + 224) = v50;
    *(_QWORD *)(v1 + 232) = v53;
    *(_QWORD *)(v1 + 240) = v51;
    *(_BYTE *)(v1 + 248) = 1;
    v19 = sub_10005F24C((uint64_t)v66);
    if (*(_QWORD *)(v1 + 104))
      goto LABEL_28;
LABEL_25:
    v31 = Logger.logObject.getter(v19);
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v52 = v15;
      v33 = osloga != 0;
      v34 = (uint8_t *)swift_slowAlloc(12, -1);
      oslogb = (os_log_t)swift_slowAlloc(32, -1);
      v57 = v8;
      v65 = oslogb;
      v35.n128_u64[0] = 136446210;
      *(_DWORD *)v34 = 136446210;
      LOBYTE(v58) = v33;
      v15 = v52;
      v59 = v13;
      v60 = 0;
      v61 = v14;
      v62 = v53 != 0;
      v63 = v52;
      v64 = v9;
      v36 = String.init<A>(describing:)(&v57, &type metadata for RoadsideAssistanceModel.RoadsideAssistance, v35);
      v38 = v37;
      v57 = sub_100172BEC(v36, v37, (uint64_t *)&v65);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease(v38);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Questionnaire state is not defined for: %{public}s", v34, 0xCu);
      swift_arrayDestroy(oslogb, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(oslogb, -1, -1);
      swift_slowDealloc(v34, -1, -1);
    }

LABEL_28:
    v39 = *(_QWORD *)(v1 + 104);
    v57 = v15;
    v58 = v13;
    v59 = v39;
    swift_retain(v39);
    v40 = PassthroughSubject.send(_:)(&v57);
    v41 = Logger.logObject.getter(v40);
    v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Requested starting roadside assistance thread", v43, 2u);
      swift_slowDealloc(v43, -1, -1);
    }

    swift_release(v39);
    return;
  }
  if (v9 == 1)
  {
    v16 = Logger.logObject.getter(v7);
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v18 = 134349056;
      v83 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v18 + 4, v18 + 12);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Already in the process of committing conversation id %{public}llu, overriding it", v18, 0xCu);
      swift_slowDealloc(v18, -1, -1);
    }

    if (*(_QWORD *)(v1 + 104))
      goto LABEL_28;
    goto LABEL_25;
  }
  oslog = Logger.logObject.getter(v7);
  v44 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(oslog, v44))
    goto LABEL_18;
  v45 = (uint8_t *)swift_slowAlloc(12, -1);
  *(_DWORD *)v45 = 134349056;
  v83 = v15;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v45 + 4, v45 + 12);
  _os_log_impl((void *)&_mh_execute_header, oslog, v44, "conversation id %{public}llu is already committed, it should not have been", v45, 0xCu);
  swift_slowDealloc(v45, -1, -1);

}

uint64_t sub_1000634DC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  _BYTE v9[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v9, 0, 0);
  result = swift_weakLoadStrong(v5);
  if (result)
  {
    v7 = result;
    v8 = *(_QWORD *)(result + 104);
    swift_retain(v8);
    result = swift_release(v7);
    if (v8)
    {
      sub_1000AC1E8(a2, a3);
      return swift_release(v8);
    }
  }
  return result;
}

BOOL sub_100063564(uint64_t a1, uint64_t a2)
{
  char v2;
  char v3;
  char v4;

  v2 = *(_BYTE *)(a2 + 8);
  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 8))
      return 0;
  }
  else
  {
    if (*(_QWORD *)a1 != *(_QWORD *)a2)
      v2 = 1;
    if ((v2 & 1) != 0)
      return 0;
  }
  v3 = *(_BYTE *)(a2 + 24);
  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 24))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 16) != *(_QWORD *)(a2 + 16))
      v3 = 1;
    if ((v3 & 1) != 0)
      return 0;
  }
  v4 = *(_BYTE *)(a2 + 40);
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    if (!*(_BYTE *)(a2 + 40))
      return 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 32) != *(_QWORD *)(a2 + 32))
      v4 = 1;
    if ((v4 & 1) != 0)
      return 0;
  }
  return *(_QWORD *)(a1 + 48) == *(_QWORD *)(a2 + 48) && *(unsigned __int8 *)(a1 + 56) == *(unsigned __int8 *)(a2 + 56);
}

uint64_t sub_10006360C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  uint64_t result;
  _QWORD *v11;
  _QWORD *v12;

  if (*(_QWORD *)a1 != *(_QWORD *)a2)
    return 0;
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  v8 = v4 == v6 && v5 == v7;
  if (v8 || (v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0), result = 0, (v9 & 1) != 0))
  {
    if (((*(unsigned __int8 *)(a1 + 24) ^ *(unsigned __int8 *)(a2 + 24)) & 1) != 0
      || ((*(unsigned __int8 *)(a1 + 25) ^ *(unsigned __int8 *)(a2 + 25)) & 1) != 0)
    {
      return 0;
    }
    v11 = *(_QWORD **)(a1 + 32);
    v12 = *(_QWORD **)(a2 + 32);
    if (v11)
    {
      if (v12 && (sub_1001DCCB4(v11, v12) & 1) != 0)
        return 1;
    }
    else if (!v12)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t sub_1000636B4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000636D8()
{
  return sub_100064940((void (*)(_QWORD))&_swift_release, 48);
}

uint64_t sub_1000636E8(void *a1)
{
  uint64_t v1;

  return sub_10005CE54(a1, *(_QWORD *)(v1 + 16), *(void (**)(void))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_1000636F4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t Strong;
  uint64_t v17;
  __int128 v18;
  __n128 v19;
  __n128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t ObjectType;
  uint64_t v32;
  _QWORD *v33;
  void (*v34)(uint64_t (*)(_QWORD *), _QWORD *, uint64_t, uint64_t, __n128);
  __n128 v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v39[24];
  _BYTE v40[24];
  _BYTE v41[24];

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = &v39[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v11 = a1 + 16;
  swift_beginAccess(a1 + 16, v41, 0, 0);
  result = swift_weakLoadStrong(a1 + 16);
  if (result)
  {
    v13 = result;
    v14 = swift_allocObject(&unk_1002E8390, 24, 7);
    v15 = v14 + 16;
    swift_beginAccess(v11, v40, 0, 0);
    Strong = swift_weakLoadStrong(v11);
    swift_weakInit(v14 + 16, Strong);
    swift_release(Strong);
    v17 = swift_allocObject(&unk_1002E84F8, 66, 7);
    *(_QWORD *)(v17 + 16) = v14;
    v18 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v17 + 24) = *(_OWORD *)a2;
    *(_OWORD *)(v17 + 40) = v18;
    *(_OWORD *)(v17 + 49) = *(_OWORD *)(a2 + 25);
    *(_BYTE *)(v17 + 65) = a3 & 1;
    sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
    swift_retain_n(v14, v19);
    *v10 = static OS_dispatch_queue.main.getter(v20);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
    LOBYTE(Strong) = _dispatchPreconditionTest(_:)(v10);
    (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
    if ((Strong & 1) != 0)
    {
      v21 = *(_QWORD *)(v13 + 160);
      if (v21)
      {
        swift_beginAccess(v15, v39, 0, 0);
        v22 = swift_weakLoadStrong(v15);
        if (v22)
        {
          v23 = v22;
          swift_bridgeObjectRetain(v21);
          sub_100060260((uint64_t *)a2, a3 & 1);
          swift_release(v14);
          swift_release(v17);
          swift_bridgeObjectRelease(v21);
          v24 = (_QWORD *)v23;
LABEL_14:
          swift_release(v24);
          swift_release(v13);
          return swift_release(v14);
        }
        goto LABEL_13;
      }
      v25 = swift_unknownObjectWeakLoadStrong(v13 + 80);
      if (!v25)
      {
        swift_beginAccess(v15, v39, 0, 0);
        v36 = swift_weakLoadStrong(v15);
        if (v36)
        {
          v37 = v36;
          sub_100060260((uint64_t *)a2, a3 & 1);
          swift_release(v14);
          swift_release(v17);
          v24 = (_QWORD *)v37;
          goto LABEL_14;
        }
LABEL_13:
        swift_release(v14);
        v24 = (_QWORD *)v17;
        goto LABEL_14;
      }
      v6 = v25;
      a2 = *(_QWORD *)(v13 + 88);
      if (qword_1003158B8 == -1)
      {
LABEL_8:
        v26 = type metadata accessor for Logger(0);
        v27 = sub_10000D744(v26, (uint64_t)qword_10033FEE0);
        v28 = Logger.logObject.getter(v27);
        v29 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v28, v29))
        {
          v30 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v30 = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "Fetching my phone numbers", v30, 2u);
          swift_slowDealloc(v30, -1, -1);
        }

        ObjectType = swift_getObjectType(v6);
        v32 = swift_allocObject(&unk_1002E8390, 24, 7);
        swift_weakInit(v32 + 16, v13);
        v33 = (_QWORD *)swift_allocObject(&unk_1002E8520, 40, 7);
        v33[2] = v32;
        v33[3] = sub_1000648D4;
        v33[4] = v17;
        v34 = *(void (**)(uint64_t (*)(_QWORD *), _QWORD *, uint64_t, uint64_t, __n128))(a2 + 8);
        swift_retain(v32);
        v35 = swift_retain(v17);
        v34(sub_1000648F4, v33, ObjectType, a2, v35);
        swift_release(v14);
        swift_release(v17);
        swift_unknownObjectRelease(v6);
        swift_release(v32);
        v24 = v33;
        goto LABEL_14;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once(&qword_1003158B8, sub_1000D9880);
    goto LABEL_8;
  }
  return result;
}

uint64_t sub_100063AD0(uint64_t a1, _OWORD *a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t Strong;
  uint64_t v16;
  __int128 v17;
  __n128 v18;
  __n128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _BYTE v29[24];
  _BYTE v30[24];

  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = &v29[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = a1 + 16;
  swift_beginAccess(a1 + 16, v30, 0, 0);
  result = swift_weakLoadStrong(a1 + 16);
  if (result)
  {
    v13 = result;
    v14 = swift_allocObject(&unk_1002E8390, 24, 7);
    swift_beginAccess(v11, v29, 0, 0);
    Strong = swift_weakLoadStrong(v11);
    swift_weakInit(v14 + 16, Strong);
    swift_release(Strong);
    v16 = swift_allocObject(&unk_1002E84A8, 66, 7);
    *(_QWORD *)(v16 + 16) = v14;
    v17 = a2[1];
    *(_OWORD *)(v16 + 24) = *a2;
    *(_OWORD *)(v16 + 40) = v17;
    *(_OWORD *)(v16 + 49) = *(_OWORD *)((char *)a2 + 25);
    *(_BYTE *)(v16 + 65) = a3 & 1;
    sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
    swift_retain_n(v14, v18);
    *v10 = static OS_dispatch_queue.main.getter(v19);
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
    LOBYTE(Strong) = _dispatchPreconditionTest(_:)(v10);
    (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
    if ((Strong & 1) != 0)
    {
      v20 = swift_unknownObjectWeakLoadStrong(v13 + 64);
      if (!v20)
      {
        sub_1000636F4(v14, (uint64_t)a2, a3 & 1);
        swift_release(v14);
        v28 = (_QWORD *)v16;
LABEL_9:
        swift_release(v28);
        swift_release(v13);
        return swift_release(v14);
      }
      v6 = v20;
      if (qword_1003158B8 == -1)
      {
LABEL_5:
        v21 = type metadata accessor for Logger(0);
        v22 = sub_10000D744(v21, (uint64_t)qword_10033FEE0);
        v23 = Logger.logObject.getter(v22);
        v24 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v23, v24))
        {
          v25 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v25 = 0;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "Fetching resumable roadside provider", v25, 2u);
          swift_slowDealloc(v25, -1, -1);
        }

        v26 = swift_allocObject(&unk_1002E8390, 24, 7);
        swift_weakInit(v26 + 16, v13);
        v27 = (_QWORD *)swift_allocObject(&unk_1002E84D0, 40, 7);
        v27[2] = v26;
        v27[3] = sub_100064840;
        v27[4] = v16;
        swift_retain(v26);
        swift_retain(v16);
        sub_10021C34C((uint64_t)sub_100064860, (uint64_t)v27);
        swift_release(v14);
        swift_release(v16);
        swift_unknownObjectRelease(v6);
        swift_release(v26);
        v28 = v27;
        goto LABEL_9;
      }
    }
    else
    {
      __break(1u);
    }
    swift_once(&qword_1003158B8, sub_1000D9880);
    goto LABEL_5;
  }
  return result;
}

uint64_t sub_100063DF8(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t result;
  uint64_t v28;
  uint64_t v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t inited;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char **p_name;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  id v53;
  id v54;
  int64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  NSString v68;
  NSString v69;
  CFAllocatorRef v70;
  void *v71;
  uint64_t String;
  void *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v87;
  unint64_t v88;
  uint64_t v89;
  _BOOL8 v90;
  uint64_t v91;
  char v92;
  uint64_t v93;
  char v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  CFAllocatorRef v116;
  uint64_t v117;
  int64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  char v122[40];

  v2 = type metadata accessor for Locale(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v105 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_100319D48);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v105 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    v11 = objc_msgSend(a1, "providers");
    v12 = sub_10006477C(0, (unint64_t *)&unk_10032B1C0, NSNumber_ptr);
    v13 = sub_10006477C(0, &qword_100319D50, CTRoadsideProvider_ptr);
    v14 = sub_1000647B4(&qword_100319D58, (unint64_t *)&unk_10032B1C0, NSNumber_ptr, (uint64_t)&protocol conformance descriptor for NSObject);
    v115 = v13;
    v15 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v11, v12, v13, v14);

    v17 = static Locale.autoupdatingCurrent.getter(v16);
    Locale.region.getter(v17);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v18 = type metadata accessor for Locale.Region(0);
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v10, 1, v18) == 1)
    {
      sub_100007FF0((uint64_t)v10, &qword_100319D48);
      countAndFlagsBits = 0;
      object = 0;
    }
    else
    {
      Locale.Region.identifier.getter();
      v29 = v28;
      (*(void (**)(char *, uint64_t))(v19 + 8))(v10, v18);
      v30 = String.lowercased()();
      countAndFlagsBits = v30._countAndFlagsBits;
      object = v30._object;
      swift_bridgeObjectRelease(v29);
    }
    v31 = type metadata accessor for PhoneNumberFormatter();
    inited = swift_initStackObject(v31, v122);
    *(_QWORD *)(inited + 16) = countAndFlagsBits;
    *(_QWORD *)(inited + 24) = object;
    v110 = inited;
    v111 = sub_10022710C((uint64_t)_swiftEmptyArrayStorage);
    v33 = v15;
    if ((v15 & 0xC000000000000001) != 0)
    {
      if (v15 < 0)
        v34 = v15;
      else
        v34 = v15 & 0xFFFFFFFFFFFFFF8;
      v35 = __CocoaDictionary.makeIterator()(v34);
      v119 = 0;
      v36 = 0;
      v37 = 0;
      v33 = v35 | 0x8000000000000000;
    }
    else
    {
      v38 = -1 << *(_BYTE *)(v15 + 32);
      v39 = *(_QWORD *)(v15 + 64);
      v119 = v15 + 64;
      v36 = ~v38;
      v40 = -v38;
      if (v40 < 64)
        v41 = ~(-1 << v40);
      else
        v41 = -1;
      v37 = v41 & v39;
    }
    v42 = 0;
    v109 = v36;
    v117 = v33 & 0x7FFFFFFFFFFFFFFFLL;
    v118 = (unint64_t)(v36 + 64) >> 6;
    v116 = kCFAllocatorDefault;
    p_name = &ResourceBundleClass.name;
    v114 = (char *)&type metadata for Swift.AnyObject + 8;
    while (2)
    {
      v44 = v42;
      v45 = v37;
      if ((v33 & 0x8000000000000000) == 0)
      {
LABEL_20:
        if (v45)
        {
          v46 = (v45 - 1) & v45;
          v47 = __clz(__rbit64(v45)) | (v44 << 6);
          v42 = v44;
          goto LABEL_39;
        }
        v55 = v44 + 1;
        if (!__OFADD__(v44, 1))
        {
          if (v55 < v118)
          {
            v56 = *(_QWORD *)(v119 + 8 * v55);
            v42 = v44 + 1;
            if (v56)
              goto LABEL_38;
            v42 = v44 + 2;
            if (v44 + 2 >= v118)
              goto LABEL_72;
            v56 = *(_QWORD *)(v119 + 8 * v42);
            if (v56)
              goto LABEL_38;
            v42 = v44 + 3;
            if (v44 + 3 >= v118)
              goto LABEL_72;
            v56 = *(_QWORD *)(v119 + 8 * v42);
            if (v56)
            {
LABEL_38:
              v46 = (v56 - 1) & v56;
              v47 = __clz(__rbit64(v56)) + (v42 << 6);
LABEL_39:
              v58 = 8 * v47;
              v59 = *(void **)(*(_QWORD *)(v33 + 56) + v58);
              v53 = *(id *)(*(_QWORD *)(v33 + 48) + v58);
              v54 = v59;
              if (v53)
                goto LABEL_40;
              goto LABEL_72;
            }
            v42 = v44 + 4;
            if (v44 + 4 < v118)
            {
              v56 = *(_QWORD *)(v119 + 8 * v42);
              if (!v56)
              {
                v57 = v44 + 5;
                while (v118 != v57)
                {
                  v56 = *(_QWORD *)(v119 + 8 * v57++);
                  if (v56)
                  {
                    v42 = v57 - 1;
                    goto LABEL_38;
                  }
                }
                goto LABEL_72;
              }
              goto LABEL_38;
            }
          }
LABEL_72:
          sub_1000647F4(v33);
          v104 = v110;
          swift_setDeallocating(v110);
          swift_bridgeObjectRelease(*(_QWORD *)(v104 + 24));
          return v111;
        }
        __break(1u);
        goto LABEL_74;
      }
      while (1)
      {
        v48 = __CocoaDictionary.Iterator.next()();
        if (!v48)
          goto LABEL_72;
        v50 = v48;
        v51 = v49;
        v120 = v48;
        swift_unknownObjectRetain(v48);
        v52 = v114;
        swift_dynamicCast(&v121, &v120, v114, v12, 7);
        v53 = v121;
        swift_unknownObjectRelease(v50);
        v120 = v51;
        swift_unknownObjectRetain(v51);
        swift_dynamicCast(&v121, &v120, v52, v115, 7);
        v54 = v121;
        swift_unknownObjectRelease(v51);
        v42 = v44;
        v46 = v45;
        if (!v53)
          goto LABEL_72;
LABEL_40:

        if ((objc_msgSend(v54, p_name[238]) & 1) != 0)
          break;

        v44 = v42;
        v45 = v46;
        if ((v33 & 0x8000000000000000) == 0)
          goto LABEL_20;
      }
      v60 = (char *)objc_msgSend(v54, "associatedPhoneNumbers");
      v61 = v60;
      v106 = v46;
      v107 = v12;
      if (v60)
      {
        v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v60, &type metadata for String);

        v108 = v62;
        v63 = *(_QWORD *)(v62 + 16);
        if (v63)
        {
          v105 = v33;
          v64 = *(_QWORD *)(v110 + 24);
          v112 = *(_QWORD *)(v110 + 16);
          swift_retain(v110);
          swift_bridgeObjectRetain(v108);
          v66 = (_QWORD *)(v65 + 40);
          v61 = (char *)_swiftEmptyArrayStorage;
          v113 = v64;
          do
          {
            v67 = *v66;
            swift_bridgeObjectRetain(*v66);
            v68 = String._bridgeToObjectiveC()();
            if (v64)
              v69 = String._bridgeToObjectiveC()();
            else
              v69 = 0;
            v70 = v116;
            v71 = (void *)CFPhoneNumberCreate(v116, v68, v69);

            String = CFPhoneNumberCreateString(v70, v71, 7);
            if (String)
            {
              v73 = (void *)String;
              v74 = static String._unconditionallyBridgeFromObjectiveC(_:)(String);
              v76 = v75;
              swift_bridgeObjectRelease(v67);

              if ((swift_isUniquelyReferenced_nonNull_native(v61) & 1) == 0)
                v61 = sub_100171738(0, *((_QWORD *)v61 + 2) + 1, 1, v61);
              v64 = v113;
              v78 = *((_QWORD *)v61 + 2);
              v77 = *((_QWORD *)v61 + 3);
              if (v78 >= v77 >> 1)
                v61 = sub_100171738((char *)(v77 > 1), v78 + 1, 1, v61);
              *((_QWORD *)v61 + 2) = v78 + 1;
              v79 = &v61[16 * v78];
              *((_QWORD *)v79 + 4) = v74;
              *((_QWORD *)v79 + 5) = v76;
            }
            else
            {
              swift_bridgeObjectRelease(v67);

              v64 = v113;
            }
            v66 += 2;
            --v63;
          }
          while (v63);
          swift_release(v110);
          swift_bridgeObjectRelease(v108);
          v33 = v105;
        }
        else
        {
          v61 = (char *)_swiftEmptyArrayStorage;
        }
        swift_bridgeObjectRelease(v108);
      }
      v80 = (unint64_t)objc_msgSend(v54, "providerId");
      if ((v80 & 0x8000000000000000) == 0)
      {
        v81 = v80;
        v82 = objc_msgSend(v54, "providerName");
        v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
        v84 = v83;

        LODWORD(v112) = objc_msgSend(v54, "supportsPayPerUse");
        LODWORD(v108) = objc_msgSend(v54, "isCarrierProvider");
        swift_bridgeObjectRetain(v61);
        swift_bridgeObjectRetain(v84);
        v85 = v111;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v111);
        v121 = (_QWORD *)v85;
        v88 = sub_10018647C(v81);
        v89 = *(_QWORD *)(v85 + 16);
        v90 = (v87 & 1) == 0;
        v91 = v89 + v90;
        if (__OFADD__(v89, v90))
        {
          __break(1u);
        }
        else
        {
          v92 = v87;
          if (*(_QWORD *)(v85 + 24) >= v91)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              sub_10008B4FC();
          }
          else
          {
            sub_100088918(v91, isUniquelyReferenced_nonNull_native);
            v93 = sub_10018647C(v81);
            if ((v92 & 1) != (v94 & 1))
            {
LABEL_78:
              result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt64);
              __break(1u);
              return result;
            }
            v88 = v93;
          }
          v95 = v121;
          v111 = (unint64_t)v121;
          if ((v92 & 1) != 0)
          {
            v96 = v121[7] + 40 * v88;
            v97 = *(_QWORD *)(v96 + 32);
            swift_bridgeObjectRelease(*(_QWORD *)(v96 + 16));
            swift_bridgeObjectRelease(v97);
            v98 = v113;
            *(_QWORD *)v96 = v81;
            *(_QWORD *)(v96 + 8) = v98;
            *(_QWORD *)(v96 + 16) = v84;
            *(_BYTE *)(v96 + 24) = v112;
            *(_BYTE *)(v96 + 25) = v108;
            *(_QWORD *)(v96 + 32) = v61;
LABEL_71:
            v37 = v106;
            v12 = v107;
            p_name = (char **)(&ResourceBundleClass + 24);
            swift_bridgeObjectRelease(v61);
            swift_bridgeObjectRelease(v84);

            swift_bridgeObjectRelease(0x8000000000000000);
            continue;
          }
          v121[(v88 >> 6) + 8] |= 1 << v88;
          *(_QWORD *)(v95[6] + 8 * v88) = v81;
          v99 = v95[7] + 40 * v88;
          v100 = v113;
          *(_QWORD *)v99 = v81;
          *(_QWORD *)(v99 + 8) = v100;
          *(_QWORD *)(v99 + 16) = v84;
          *(_BYTE *)(v99 + 24) = v112;
          *(_BYTE *)(v99 + 25) = v108;
          *(_QWORD *)(v99 + 32) = v61;
          v101 = v95[2];
          v102 = __OFADD__(v101, 1);
          v103 = v101 + 1;
          if (!v102)
          {
            v95[2] = v103;
            goto LABEL_71;
          }
        }
        __break(1u);
      }
      break;
    }
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
    __break(1u);
    goto LABEL_78;
  }
  if (qword_100315820 != -1)
LABEL_74:
    swift_once(&qword_100315820, sub_1000D95E4);
  v22 = type metadata accessor for Logger(0);
  v23 = sub_10000D744(v22, (uint64_t)qword_10033FD18);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Roadside providers fetch failed", v26, 2u);
    swift_slowDealloc(v26, -1, -1);
  }

  return 0;
}

uint64_t sub_100064740()
{
  uint64_t v0;

  return sub_100060A0C(v0);
}

uint64_t sub_100064748(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100064758(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100064760()
{
  return sub_100064940((void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_100064770()
{
  uint64_t v0;

  return sub_1000634DC(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10006477C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_1000647B4(unint64_t *a1, unint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = sub_10006477C(255, a2, a3);
    result = swift_getWitnessTable(a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000647F4(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_1000647FC()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 66, 7);
}

uint64_t sub_100064820()
{
  uint64_t v0;

  return sub_100063AD0(*(_QWORD *)(v0 + 16), (_OWORD *)(v0 + 24), *(_BYTE *)(v0 + 65));
}

uint64_t sub_100064830()
{
  return sub_100064940((void (*)(_QWORD))&_swift_release, 48);
}

uint64_t sub_100064840()
{
  uint64_t v0;

  return sub_1000636F4(*(_QWORD *)(v0 + 16), v0 + 24, *(_BYTE *)(v0 + 65));
}

uint64_t sub_100064850()
{
  return sub_100064940((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_100064860(uint64_t a1, char a2)
{
  uint64_t v2;

  return sub_10005D1E4(a1, a2 & 1, *(_QWORD *)(v2 + 16), *(uint64_t (**)(__int128 *))(v2 + 24));
}

_QWORD *sub_100064870(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4]);
  return a1;
}

uint64_t sub_1000648A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRetain(a5);
    return swift_bridgeObjectRetain(a3);
  }
  return result;
}

uint64_t sub_1000648D4(uint64_t a1)
{
  uint64_t v1;

  return sub_1000601F0(a1, *(_QWORD *)(v1 + 16), (uint64_t *)(v1 + 24), *(_BYTE *)(v1 + 65));
}

uint64_t sub_1000648E4()
{
  return sub_100064940((void (*)(_QWORD))&_swift_release, 40);
}

uint64_t sub_1000648F4(_QWORD *a1)
{
  uint64_t v1;

  return sub_10005D59C(a1, *(_QWORD *)(v1 + 16), *(uint64_t (**)(_QWORD *))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_100064900()
{
  return sub_100064940((void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_100064910()
{
  uint64_t v0;

  return sub_10005FE34(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10006491C(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease(a2);
  return result;
}

uint64_t sub_100064930()
{
  return sub_100064940((void (*)(_QWORD))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_100064940(void (*a1)(_QWORD), uint64_t a2)
{
  uint64_t v2;

  swift_release(*(_QWORD *)(v2 + 16));
  a1(*(_QWORD *)(v2 + 32));
  return swift_deallocObject(v2, a2, 7);
}

void sub_100064984()
{
  uint64_t *v0;

  sub_100061404(v0[2], v0[3], v0[4]);
}

uint64_t sub_100064990(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a2);
  }
  return result;
}

uint64_t sub_1000649C4(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain(a2);
  return result;
}

uint64_t sub_1000649D8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_release(v0[5]);
  swift_bridgeObjectRelease(v0[7]);
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100064A14()
{
  uint64_t v0;

  return sub_100061D50(*(_QWORD *)(v0 + 16), *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
}

uint64_t sub_100064A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a2 != 1)
  {
    swift_bridgeObjectRelease(a2);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

uint64_t sub_100064A58()
{
  uint64_t v0;

  return sub_100062B20(v0);
}

uint64_t sub_100064A60()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100064A84()
{
  uint64_t v0;

  return sub_100062BB4(v0);
}

uint64_t storeEnumTagSinglePayload for RoadsideAssistanceModel.ConversationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100064AD8 + 4 * byte_1002500F5[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100064B0C + 4 * byte_1002500F0[v4]))();
}

uint64_t sub_100064B0C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100064B14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100064B1CLL);
  return result;
}

uint64_t sub_100064B28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x100064B30);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_100064B34(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100064B3C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RoadsideAssistanceModel.ConversationState()
{
  return &type metadata for RoadsideAssistanceModel.ConversationState;
}

uint64_t getEnumTagSinglePayload for EmergencyModel.Conversation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 254);
  v3 = *(unsigned __int8 *)(a1 + 8);
  v4 = v3 >= 3;
  v5 = v3 - 3;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EmergencyModel.Conversation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 8) = 0;
    *(_QWORD *)result = a2 - 254;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 9) = 0;
    if (a2)
      *(_BYTE *)(result + 8) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for RoadsideAssistanceModel.Conversation()
{
  return &type metadata for RoadsideAssistanceModel.Conversation;
}

unint64_t sub_100064BF4()
{
  unint64_t result;

  result = qword_100319D88;
  if (!qword_100319D88)
  {
    result = swift_getWitnessTable(&unk_100250308, &type metadata for RoadsideAssistanceModel.ConversationState);
    atomic_store(result, (unint64_t *)&qword_100319D88);
  }
  return result;
}

_BYTE *sub_100064C68(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  _BYTE *result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[7];
  uint64_t v40;
  _BYTE v41[24];
  _OWORD v42[4];
  __int16 v43;
  _OWORD v44[4];
  __int16 v45;
  char v46;
  _BYTE v47[9];

  v2 = v1;
  v4 = sub_100003DB8(&qword_100319FC0);
  __chkstk_darwin(v4, v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Data(0);
  v9 = *(_QWORD *)(v8 - 8);
  v11 = __chkstk_darwin(v8, v10);
  v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11, v14);
  v16 = (char *)&v37 - v15;
  sub_10000B458(a1, (uint64_t)v42, &qword_100319FD8);
  if (!*((_QWORD *)&v42[0] + 1)
    || (v44[2] = v42[2],
        v44[3] = v42[3],
        v45 = v43,
        v44[0] = v42[0],
        v44[1] = v42[1],
        sub_10001AE10(v44, &v46),
        result = sub_10001AE10(&v46, v47),
        v47[0] != 5))
  {
    v18 = v2 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsStartMessage_data;
    swift_beginAccess(v2 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsStartMessage_data, v41, 0, 0);
    sub_100066ACC(v18, (uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      return (_BYTE *)sub_100066B14((uint64_t)v7);
    }
    else
    {
      sub_100066B54((uint64_t)v7, (uint64_t)v16);
      if (qword_100315818 != -1)
        swift_once(&qword_100315818, sub_1000D95C0);
      v19 = type metadata accessor for Logger(0);
      sub_10000D744(v19, (uint64_t)qword_10033FD00);
      v20 = sub_100066F9C((uint64_t)v16, (uint64_t)v13);
      v21 = Logger.logObject.getter(v20);
      v22 = static os_log_type_t.default.getter(v21);
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc(12, -1);
        v24 = swift_slowAlloc(32, -1);
        v40 = v24;
        *(_DWORD *)v23 = 136446210;
        v25 = (uint64_t *)&v13[*(int *)(v8 + 20)];
        v26 = v25[1];
        v27 = v25[2];
        v28 = v25[3];
        v29 = v25[4];
        v30 = v25[5];
        v31 = v25[6];
        v32 = v25[7];
        v38 = *v25;
        v39[0] = v26;
        v39[1] = v27;
        v39[2] = v28;
        v39[3] = v29;
        v39[4] = v30;
        v39[5] = v31;
        v39[6] = v32;
        sub_10006650C(v38, v26, v27, v28, v29, v30, v31, v32);
        v34 = String.init<A>(describing:)(&v38, &type metadata for MessagesAgent.StartMessageSentEvent, v33);
        v36 = v35;
        v38 = sub_100172BEC(v34, v35, &v40);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, v39, v23 + 4, v23 + 12);
        swift_bridgeObjectRelease(v36);
        sub_100066EA0((uint64_t)v13);
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Start message %{public}s was not committed, considering it not ACKed and dropped.", v23, 0xCu);
        swift_arrayDestroy(v24, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v24, -1, -1);
        swift_slowDealloc(v23, -1, -1);
      }
      else
      {
        sub_100066EA0((uint64_t)v13);
      }

      sub_100065BF0();
      return (_BYTE *)sub_100066EA0((uint64_t)v16);
    }
  }
  return result;
}

uint64_t sub_100064FD0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  int *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  __n128 v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  const char *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v43;
  uint8_t *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  _BYTE v48[56];
  uint64_t v49;
  char v50[24];

  v3 = sub_100003DB8(&qword_100319FC0);
  v5 = __chkstk_darwin(v3, v4);
  v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v5, v8);
  v11 = (char *)&v43 - v10;
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v43 - v13;
  v15 = v1 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsStartMessage_data;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsStartMessage_data, v50, 0, 0);
  sub_100066ACC(v15, (uint64_t)v14);
  v16 = (int *)type metadata accessor for Data(0);
  v17 = *((_QWORD *)v16 - 1);
  v18 = (*(uint64_t (**)(char *, uint64_t, int *))(v17 + 48))(v14, 1, v16);
  sub_100066B14((uint64_t)v14);
  if (v18 != 1)
  {
    if (qword_100315818 != -1)
      swift_once(&qword_100315818, sub_1000D95C0);
    v31 = type metadata accessor for Logger(0);
    sub_10000D744(v31, (uint64_t)qword_10033FD00);
    sub_100066FE0(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006650C);
    v32 = sub_100066FE0(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006650C);
    v21 = Logger.logObject.getter(v32);
    v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      v45 = v17;
      v23 = (uint8_t *)swift_slowAlloc(12, -1);
      v33 = swift_slowAlloc(32, -1);
      v46 = v7;
      v25 = v33;
      v49 = v33;
      *(_DWORD *)v23 = 136446210;
      v44 = v23 + 4;
      sub_10006701C((uint64_t)a1, (uint64_t)&v47);
      sub_100066FE0(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006650C);
      v35 = String.init<A>(describing:)(&v47, &type metadata for MessagesAgent.StartMessageSentEvent, v34);
      v37 = v36;
      v47 = sub_100172BEC(v35, v36, &v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v44, v23 + 12);
      v38 = v37;
      v17 = v45;
      swift_bridgeObjectRelease(v38);
      sub_100066FE0(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006656C);
      sub_100066FE0(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006656C);
      v30 = "Resetting tracking start message for %{public}s";
      goto LABEL_10;
    }
LABEL_11:
    sub_100066FE0(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006656C);
    sub_100066FE0(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006656C);
    goto LABEL_12;
  }
  if (qword_100315818 != -1)
    swift_once(&qword_100315818, sub_1000D95C0);
  v19 = type metadata accessor for Logger(0);
  sub_10000D744(v19, (uint64_t)qword_10033FD00);
  sub_100066FE0(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006650C);
  v20 = sub_100066FE0(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006650C);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.default.getter(v21);
  if (!os_log_type_enabled(v21, v22))
    goto LABEL_11;
  v23 = (uint8_t *)swift_slowAlloc(12, -1);
  v24 = swift_slowAlloc(32, -1);
  v46 = v7;
  v25 = v24;
  v49 = v24;
  v45 = v17;
  *(_DWORD *)v23 = 136446210;
  v44 = v23 + 4;
  sub_10006701C((uint64_t)a1, (uint64_t)&v47);
  sub_100066FE0(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006650C);
  v27 = String.init<A>(describing:)(&v47, &type metadata for MessagesAgent.StartMessageSentEvent, v26);
  v29 = v28;
  v47 = sub_100172BEC(v27, v28, &v49);
  v17 = v45;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v44, v23 + 12);
  swift_bridgeObjectRelease(v29);
  sub_100066FE0(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006656C);
  sub_100066FE0(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006656C);
  v30 = "Tracking start message for %{public}s";
LABEL_10:
  _os_log_impl((void *)&_mh_execute_header, v21, v22, v30, v23, 0xCu);
  swift_arrayDestroy(v25, 1, (char *)&type metadata for Any + 8);
  v39 = v25;
  v7 = v46;
  swift_slowDealloc(v39, -1, -1);
  swift_slowDealloc(v23, -1, -1);
LABEL_12:

  static DispatchTime.now()(v40);
  sub_10006701C((uint64_t)a1, (uint64_t)&v11[v16[5]]);
  v41 = &v11[v16[6]];
  *((_QWORD *)v41 + 4) = 0;
  *(_OWORD *)v41 = 0u;
  *((_OWORD *)v41 + 1) = 0u;
  v41[40] = 1;
  v11[v16[7]] = 0;
  (*(void (**)(char *, _QWORD, uint64_t, int *))(v17 + 56))(v11, 0, 1, v16);
  sub_10000B458((uint64_t)v11, (uint64_t)v7, &qword_100319FC0);
  swift_beginAccess(v15, &v47, 33, 0);
  sub_100066FE0(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_10006650C);
  sub_100066EDC((uint64_t)v7, v15);
  return swift_endAccess(&v47);
}

uint64_t sub_1000654A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v31;
  int *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint64_t v41;
  uint8_t *v42;
  uint64_t v43;
  __n128 v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  uint64_t v53;
  uint64_t v54;
  __n128 v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  __n128 v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  os_log_t v72;
  void (*v73)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  os_log_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[16];
  char v86[24];
  uint64_t v87;
  uint64_t v88[4];
  char v89;
  uint64_t v90;
  uint64_t v91;
  char v92;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v81 = *(_QWORD *)(v4 - 8);
  v82 = v4;
  v6 = __chkstk_darwin(v4, v5);
  v8 = (char *)&v75 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6, v9);
  v11 = (char *)&v75 - v10;
  v12 = sub_100003DB8(&qword_100319FC0);
  v14 = __chkstk_darwin(v12, v13);
  v80 = (char *)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14, v16);
  v18 = (char *)&v75 - v17;
  v19 = type metadata accessor for Data(0);
  v20 = *(_QWORD *)(v19 - 8);
  v22 = __chkstk_darwin(v19, v21);
  v24 = (char *)&v75 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22, v25);
  v27 = (char *)&v75 - v26;
  v79 = v2;
  v28 = v2 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsStartMessage_data;
  swift_beginAccess(v28, v86, 1, 0);
  sub_100066ACC(v28, (uint64_t)v18);
  v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  if (v29(v18, 1, v19) == 1)
    return sub_100066B14((uint64_t)v18);
  sub_100066B54((uint64_t)v18, (uint64_t)v27);
  sub_100066F60(a1, (uint64_t)&v90);
  v78 = a1;
  if (v92 < 0)
  {
    v92 &= ~0x80u;
    v31 = v90;
    if (v90 < 0)
      goto LABEL_32;
    v32 = (int *)(v19 + 20);
    v33 = &v27[*(int *)(v19 + 20)];
    if ((*((_QWORD *)v33 + 3) & 0x8000000000000000) == 0)
      goto LABEL_16;
    goto LABEL_9;
  }
  v31 = v91;
  if (v91 < 0)
    goto LABEL_32;
  v32 = (int *)(v19 + 20);
  v33 = &v27[*(int *)(v19 + 20)];
  if ((*((_QWORD *)v33 + 3) & 0x8000000000000000) == 0)
  {
LABEL_9:
    if (v31 == *(_QWORD *)v33)
    {
      v77 = v27;
      if (qword_100315818 != -1)
        swift_once(&qword_100315818, sub_1000D95C0);
      v34 = v82;
      v35 = sub_10000D744(v82, (uint64_t)qword_10033FD00);
      v36 = v81;
      v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v81 + 16))(v11, v35, v34);
      v38 = Logger.logObject.getter(v37);
      v39 = static os_log_type_t.default.getter(v38);
      v40 = os_log_type_enabled(v38, v39);
      v41 = v78;
      if (v40)
      {
        v42 = (uint8_t *)swift_slowAlloc(12, -1);
        v43 = swift_slowAlloc(32, -1);
        v83 = v43;
        *(_DWORD *)v42 = 136446210;
        sub_100066F60(v41, (uint64_t)&v87);
        v45 = v89;
        if (v89 < 0)
        {
          v89 &= ~0x80u;
          v46 = v87;
          if (v87 < 0)
            goto LABEL_32;
        }
        else
        {
          v46 = v88[0];
          if (v88[0] < 0)
            goto LABEL_32;
        }
        v80 = (char *)(v42 + 4);
        v84 = v46;
        v85[0] = v45 < 0;
        v66 = String.init<A>(describing:)(&v84, &type metadata for AnalyticsConversationId, v44);
        v68 = v67;
        v84 = sub_100172BEC(v66, v67, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v80, v42 + 12);
        swift_bridgeObjectRelease(v68);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Conversation %{public}s is committed, considering start message ACKed.", v42, 0xCu);
        swift_arrayDestroy(v43, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1, -1);
        swift_slowDealloc(v42, -1, -1);

        (*(void (**)(char *, uint64_t))(v81 + 8))(v11, v82);
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v34);
      }
      if (v29((char *)v28, 1, v19) != 1)
      {
        *(_BYTE *)(v28 + *(int *)(v19 + 28)) = 1;
        sub_100065BF0();
        return sub_100066EA0((uint64_t)v77);
      }
      __break(1u);
      goto LABEL_32;
    }
  }
LABEL_16:
  if (qword_100315818 != -1)
    swift_once(&qword_100315818, sub_1000D95C0);
  v47 = v82;
  v48 = sub_10000D744(v82, (uint64_t)qword_10033FD00);
  v49 = v81;
  (*(void (**)(char *, uint64_t, uint64_t))(v81 + 16))(v8, v48, v47);
  v50 = sub_100066F9C((uint64_t)v27, (uint64_t)v24);
  v51 = (uint64_t)v27;
  v52 = Logger.logObject.getter(v50);
  LODWORD(v79) = static os_log_type_t.default.getter(v52);
  if (!os_log_type_enabled(v52, (os_log_type_t)v79))
  {

    sub_100066EA0((uint64_t)v24);
    (*(void (**)(char *, uint64_t))(v49 + 8))(v8, v47);
    v65 = v51;
LABEL_30:
    sub_100066EA0(v65);
    v73 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
    v74 = (uint64_t)v80;
    v73(v80, 1, 1, v19);
    swift_beginAccess(v28, &v84, 33, 0);
    sub_100066EDC(v74, v28);
    return swift_endAccess(&v84);
  }
  v76 = v52;
  v77 = (char *)v51;
  v53 = swift_slowAlloc(22, -1);
  v54 = swift_slowAlloc(64, -1);
  v83 = v54;
  v55.n128_u64[0] = 136446466;
  *(_DWORD *)v53 = 136446466;
  v56 = (uint64_t *)&v24[*v32];
  v57 = *v56;
  LOBYTE(v56) = v56[3] < 0;
  v87 = v57;
  LOBYTE(v88[0]) = (_BYTE)v56;
  v58 = String.init<A>(describing:)(&v87, &type metadata for AnalyticsConversationId, v55);
  v60 = v59;
  v87 = sub_100172BEC(v58, v59, &v83);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88, v53 + 4, v53 + 12);
  swift_bridgeObjectRelease(v60);
  sub_100066EA0((uint64_t)v24);
  *(_WORD *)(v53 + 12) = 2080;
  sub_100066F60(v78, (uint64_t)&v87);
  v62 = v89;
  if ((v89 & 0x80000000) == 0)
  {
    v63 = v54;
    v64 = v88[0];
    if (v88[0] < 0)
      goto LABEL_32;
    goto LABEL_29;
  }
  v63 = v54;
  v89 &= ~0x80u;
  v64 = v87;
  if ((v87 & 0x8000000000000000) == 0)
  {
LABEL_29:
    v84 = v64;
    v85[0] = v62 < 0;
    v69 = String.init<A>(describing:)(&v84, &type metadata for AnalyticsConversationId, v61);
    v71 = v70;
    v84 = sub_100172BEC(v69, v70, &v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, v85, v53 + 14, v53 + 22);
    swift_bridgeObjectRelease(v71);
    v72 = v76;
    _os_log_impl((void *)&_mh_execute_header, v76, (os_log_type_t)v79, "Conversation for the pending start message %{public}s does not match the current one %s, resetting.", (uint8_t *)v53, 0x16u);
    swift_arrayDestroy(v63, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v63, -1, -1);
    swift_slowDealloc(v53, -1, -1);

    (*(void (**)(char *, uint64_t))(v81 + 8))(v8, v82);
    v65 = (uint64_t)v77;
    goto LABEL_30;
  }
LABEL_32:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Negative value is not representable", 35, 2, "Swift/Integers.swift", 20, 2, 3451, 0);
  __break(1u);
  return result;
}

uint64_t sub_100065BF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v16;
  char v17;
  _BYTE *v18;
  __int128 v19;
  unint64_t v20;
  _BYTE v21[24];
  _BYTE v22[24];

  v1 = sub_100003DB8(&qword_100319FC0);
  v3 = __chkstk_darwin(v1, v2);
  v5 = &v21[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v3, v6);
  v8 = &v21[-v7];
  v9 = type metadata accessor for Data(0);
  v10 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9, v11);
  v13 = &v21[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v14 = v0 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsStartMessage_data;
  swift_beginAccess(v0 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsStartMessage_data, v22, 0, 0);
  sub_100066ACC(v14, (uint64_t)v8);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
    return sub_100066B14((uint64_t)v8);
  sub_100066B54((uint64_t)v8, (uint64_t)v13);
  v16 = *(_QWORD *)(v0 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsStartMessage_currentTarget + 32);
  v17 = *(_BYTE *)(v0 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsStartMessage_currentTarget + 40);
  v18 = &v13[*(int *)(v9 + 24)];
  v19 = *(_OWORD *)(v0 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsStartMessage_currentTarget + 16);
  *(_OWORD *)v18 = *(_OWORD *)(v0 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsStartMessage_currentTarget);
  *((_OWORD *)v18 + 1) = v19;
  *((_QWORD *)v18 + 4) = v16;
  v18[40] = v17;
  v20 = sub_100065DB0();
  sub_100176278(5, v20);
  swift_bridgeObjectRelease(v20);
  sub_100066EA0((uint64_t)v13);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v5, 1, 1, v9);
  swift_beginAccess(v14, v21, 33, 0);
  sub_100066EDC((uint64_t)v5, v14);
  return swift_endAccess(v21);
}

unint64_t sub_100065DB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t inited;
  int *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Class isa;
  char isUniquelyReferenced_nonNull_native;
  Class v19;
  char v20;
  char v21;
  Class v22;
  char v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  Class v32;
  char v33;
  unint64_t v34;
  NSString v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  NSString v39;
  char v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  Class v44;
  char v45;
  Class v46;
  char v47;
  unint64_t v49;
  char v50[56];

  v1 = v0;
  v2 = type metadata accessor for DispatchTime(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = &v50[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = sub_100003DB8(&qword_100319FC8);
  inited = swift_initStackObject(v7, v50);
  *(_OWORD *)(inited + 16) = xmmword_10024E070;
  *(_QWORD *)(inited + 32) = 0x737574617473;
  *(_QWORD *)(inited + 40) = 0xE600000000000000;
  v9 = (int *)type metadata accessor for Data(0);
  v10 = *(unsigned __int8 *)(v1 + v9[7]);
  *(NSNumber *)(inited + 48) = Bool._bridgeToObjectiveC()();
  v11 = sub_100224F60(inited);
  v12 = v11;
  if (v10 == 1)
  {
    v13 = static DispatchTime.now()(v11);
    v14 = DispatchTime.uptimeNanoseconds.getter(v13);
    v15 = DispatchTime.uptimeNanoseconds.getter(v14);
    if (v15 < v14)
    {
      v16 = DispatchTime.uptimeNanoseconds.getter(v15);
      if (v16 < DispatchTime.uptimeNanoseconds.getter(v16))
        __break(1u);
    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    isa = UInt64._bridgeToObjectiveC()().super.super.isa;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v12);
    v49 = v12;
    sub_10020D010((uint64_t)isa, 0xD000000000000010, 0x8000000100265560, isUniquelyReferenced_nonNull_native);
    v12 = v49;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if ((*(_BYTE *)(v1 + v9[6] + 40) & 1) == 0)
  {
    v19 = Int64._bridgeToObjectiveC()().super.super.isa;
    v20 = swift_isUniquelyReferenced_nonNull_native(v12);
    v49 = v12;
    sub_10020D010((uint64_t)v19, 0x4449746173, 0xE500000000000000, v20);
    v12 = v49;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  sub_100066B98();
  if ((v21 & 1) == 0)
  {
    v22 = Int._bridgeToObjectiveC()().super.super.isa;
    v23 = swift_isUniquelyReferenced_nonNull_native(v12);
    v49 = v12;
    sub_10020D010((uint64_t)v22, 0x4C79726574746162, 0xEC0000006C657665, v23);
    v12 = v49;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v24 = (_QWORD *)(v1 + v9[5]);
  v25 = v24[2];
  v26 = v24[3];
  if (v26 < 0)
  {
    sub_100066F24();
    v41 = NSString.init(stringLiteral:)("RSA", 3, 2);
    v42 = swift_isUniquelyReferenced_nonNull_native(v12);
    v49 = v12;
    sub_10020D010(v41, 0x5465636976726573, 0xEB00000000657079, v42);
    v43 = v49;
    swift_bridgeObjectRelease(0x8000000000000000);
    v44 = UInt64._bridgeToObjectiveC()().super.super.isa;
    v45 = swift_isUniquelyReferenced_nonNull_native(v43);
    v49 = v43;
    sub_10020D010((uint64_t)v44, 0x5065636976726573, 0xEF72656469766F72, v45);
    v34 = v49;
    swift_bridgeObjectRelease(0x8000000000000000);
    if ((v26 & 1) == 0)
    {
LABEL_18:
      v46 = UInt64._bridgeToObjectiveC()().super.super.isa;
      v47 = swift_isUniquelyReferenced_nonNull_native(v34);
      v49 = v34;
      sub_10020D010((uint64_t)v46, 0x6E6F697473657571, 0xEF6449657269616ELL, v47);
      v34 = v49;
      swift_bridgeObjectRelease(0x8000000000000000);
    }
  }
  else
  {
    v27 = v24[7];
    v28 = v24[5];
    sub_100066F24();
    v29 = NSString.init(stringLiteral:)("Emergency", 9, 2);
    v30 = swift_isUniquelyReferenced_nonNull_native(v12);
    v49 = v12;
    sub_10020D010(v29, 0x5465636976726573, 0xEB00000000657079, v30);
    v31 = v49;
    swift_bridgeObjectRelease(0x8000000000000000);
    v32 = Bool._bridgeToObjectiveC()().super.super.isa;
    v33 = swift_isUniquelyReferenced_nonNull_native(v31);
    v49 = v31;
    sub_10020D010((uint64_t)v32, 0x725079654B646545, 0xED0000746E657365, v33);
    v34 = v49;
    swift_bridgeObjectRelease(0x8000000000000000);
    if (v27)
    {
      v35 = String._bridgeToObjectiveC()();
      v36 = swift_isUniquelyReferenced_nonNull_native(v34);
      v49 = v34;
      sub_10020D010((uint64_t)v35, 0x65707954676D65, 0xE700000000000000, v36);
      v34 = v49;
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    sub_100066D20(v25);
    if (v37)
    {
      v38 = v37;
      v39 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v38);
      v40 = swift_isUniquelyReferenced_nonNull_native(v34);
      v49 = v34;
      sub_10020D010((uint64_t)v39, 0xD000000000000011, 0x8000000100265540, v40);
      v34 = v49;
      swift_bridgeObjectRelease(0x8000000000000000);
    }
    if ((v28 & 1) == 0)
      goto LABEL_18;
  }
  return v34;
}

uint64_t sub_1000662B8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  sub_100066B14((uint64_t)v0 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsStartMessage_data);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48), *(unsigned __int16 *)(*v0 + 52));
}

uint64_t sub_1000662F0()
{
  return type metadata accessor for AnalyticsStartMessage(0);
}

uint64_t type metadata accessor for AnalyticsStartMessage(uint64_t a1)
{
  return sub_10003D8E8(a1, (uint64_t *)&unk_100319DC8, (uint64_t)&nominal type descriptor for AnalyticsStartMessage);
}

void sub_10006630C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_100066390(319);
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    v4[2] = ")";
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 80);
  }
}

void sub_100066390(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_100319DD8)
  {
    v2 = type metadata accessor for Data(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_100319DD8);
  }
}

uint64_t type metadata accessor for Data(uint64_t a1)
{
  return sub_10003D8E8(a1, qword_100319F78, (uint64_t)&nominal type descriptor for Data);
}

{
  uint64_t result;

  result = qword_10031AE90;
  if (!qword_10031AE90)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for Data);
  return result;
}

_QWORD *sub_1000663F8(_QWORD *a1, _QWORD *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *a1 = *a2;
    a1 = (_QWORD *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain(v22);
  }
  else
  {
    v7 = type metadata accessor for DispatchTime(0);
    (*(void (**)(_QWORD *, _QWORD *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = (_QWORD *)((char *)a1 + v8);
    v10 = (_QWORD *)((char *)a2 + v8);
    v11 = v10[1];
    v12 = v10[2];
    v13 = v10[3];
    v14 = v10[4];
    v15 = v10[5];
    v16 = v10[6];
    v24 = v10[7];
    v25 = *v10;
    sub_10006650C(*v10, v11, v12, v13, v14, v15, v16, v24);
    *v9 = v25;
    v9[1] = v11;
    v9[2] = v12;
    v9[3] = v13;
    v9[4] = v14;
    v9[5] = v15;
    v9[6] = v16;
    v9[7] = v24;
    v17 = a3[6];
    v18 = a3[7];
    v19 = (_OWORD *)((char *)a1 + v17);
    v20 = (_OWORD *)((char *)a2 + v17);
    v21 = v20[1];
    *v19 = *v20;
    v19[1] = v21;
    *(_OWORD *)((char *)v19 + 25) = *(_OWORD *)((char *)v20 + 25);
    *((_BYTE *)a1 + v18) = *((_BYTE *)a2 + v18);
  }
  return a1;
}

uint64_t sub_10006650C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4 >= 0)
    return swift_bridgeObjectRetain(a8);
  else
    return swift_bridgeObjectRetain(a6);
}

uint64_t sub_100066518(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  return sub_10006656C(*v5, v5[1], v5[2], v5[3], v5[4], v5[5], v5[6], v5[7]);
}

uint64_t sub_10006656C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a4 >= 0)
    return swift_bridgeObjectRelease(a8);
  else
    return swift_bridgeObjectRelease(a6);
}

uint64_t sub_100066578(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  _OWORD *v21;
  __int128 v22;

  v6 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  v12 = v9[2];
  v13 = v9[3];
  v14 = v9[4];
  v15 = v9[5];
  v17 = v9[6];
  v16 = v9[7];
  sub_10006650C(*v9, v11, v12, v13, v14, v15, v17, v16);
  *v8 = v10;
  v8[1] = v11;
  v8[2] = v12;
  v8[3] = v13;
  v8[4] = v14;
  v8[5] = v15;
  v8[6] = v17;
  v8[7] = v16;
  v18 = a3[6];
  v19 = a3[7];
  v20 = (_OWORD *)(a1 + v18);
  v21 = (_OWORD *)(a2 + v18);
  v22 = v21[1];
  *v20 = *v21;
  v20[1] = v22;
  *(_OWORD *)((char *)v20 + 25) = *(_OWORD *)((char *)v21 + 25);
  *(_BYTE *)(a1 + v19) = *(_BYTE *)(a2 + v19);
  return a1;
}

uint64_t sub_100066664(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  _OWORD *v28;
  __int128 v29;
  __int128 v30;

  v6 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v10 = *v9;
  v11 = v9[1];
  v12 = v9[2];
  v13 = v9[3];
  v14 = v9[4];
  v15 = v9[5];
  v17 = v9[6];
  v16 = v9[7];
  sub_10006650C(*v9, v11, v12, v13, v14, v15, v17, v16);
  v18 = *v8;
  v19 = v8[1];
  v20 = v8[2];
  v21 = v8[3];
  v22 = v8[4];
  v23 = v8[5];
  v24 = v8[6];
  v25 = v8[7];
  *v8 = v10;
  v8[1] = v11;
  v8[2] = v12;
  v8[3] = v13;
  v8[4] = v14;
  v8[5] = v15;
  v8[6] = v17;
  v8[7] = v16;
  sub_10006656C(v18, v19, v20, v21, v22, v23, v24, v25);
  v26 = a3[6];
  v27 = (_OWORD *)(a1 + v26);
  v28 = (_OWORD *)(a2 + v26);
  v29 = *(_OWORD *)((char *)v28 + 25);
  v30 = v28[1];
  *v27 = *v28;
  v27[1] = v30;
  *(_OWORD *)((char *)v27 + 25) = v29;
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100066768(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  _OWORD *v13;
  _OWORD *v14;
  __int128 v15;

  v6 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_OWORD *)(a1 + v7);
  v10 = (_OWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = v10[3];
  v9[2] = v10[2];
  v9[3] = v12;
  v13 = (_OWORD *)(a1 + v8);
  v14 = (_OWORD *)(a2 + v8);
  v15 = v14[1];
  *v13 = *v14;
  v13[1] = v15;
  *(_OWORD *)((char *)v13 + 25) = *(_OWORD *)((char *)v14 + 25);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_1000667F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  __int128 v24;

  v6 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (uint64_t *)(a1 + v7);
  v9 = (_OWORD *)(a2 + v7);
  v10 = *v8;
  v11 = v8[1];
  v12 = v8[2];
  v13 = v8[3];
  v14 = v8[4];
  v15 = v8[5];
  v16 = v8[6];
  v17 = v8[7];
  v18 = v9[1];
  *(_OWORD *)v8 = *v9;
  *((_OWORD *)v8 + 1) = v18;
  v19 = v9[3];
  *((_OWORD *)v8 + 2) = v9[2];
  *((_OWORD *)v8 + 3) = v19;
  sub_10006656C(v10, v11, v12, v13, v14, v15, v16, v17);
  v20 = a3[6];
  v21 = a3[7];
  v22 = (_OWORD *)(a1 + v20);
  v23 = (_OWORD *)(a2 + v20);
  v24 = v23[1];
  *v22 = *v23;
  v22[1] = v24;
  *(_OWORD *)((char *)v22 + 25) = *(_OWORD *)((char *)v23 + 25);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  return a1;
}

uint64_t sub_10006689C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000668A8);
}

uint64_t sub_1000668A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unsigned int v9;

  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_DWORD *)(a1 + *(int *)(a3 + 20) + 25);
  if (v9 > 0x80000000)
    return -v9;
  else
    return 0;
}

uint64_t sub_100066924(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100066930);
}

double sub_100066930(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  double result;
  uint64_t v11;

  v8 = type metadata accessor for DispatchTime(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, v8);
  }
  else
  {
    v11 = a1 + *(int *)(a4 + 20);
    *(_QWORD *)v11 = 0;
    *(_QWORD *)(v11 + 8) = 0;
    *(_QWORD *)(v11 + 16) = 0;
    *(_QWORD *)(v11 + 24) = (unint64_t)-(int)a2 << 8;
    result = 0.0;
    *(_OWORD *)(v11 + 32) = 0u;
    *(_OWORD *)(v11 + 48) = 0u;
  }
  return result;
}

uint64_t sub_1000669BC(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  _QWORD v4[4];

  result = type metadata accessor for DispatchTime(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(result - 8) + 64;
    v4[1] = "@";
    v4[2] = ")";
    v4[3] = &unk_100250390;
    swift_initStructMetadata(a1, 256, 4, v4, a1 + 16);
    return 0;
  }
  return result;
}

uint64_t sub_100066A40(uint64_t a1)
{
  _QWORD *v1;

  return sub_10000B458(a1, *v1 + OBJC_IVAR____TtC8SOSBuddy21AnalyticsStartMessage_currentTarget, &qword_100319FB8);
}

_BYTE *sub_100066A6C(uint64_t a1)
{
  return sub_100064C68(a1);
}

uint64_t sub_100066A8C(_QWORD *a1)
{
  return sub_100064FD0(a1);
}

uint64_t sub_100066AAC(uint64_t a1)
{
  return sub_1000654A8(a1);
}

uint64_t sub_100066ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100319FC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100066B14(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003DB8(&qword_100319FC0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100066B54(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Data(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_100066B98()
{
  void *v0;
  id v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  float v7;
  float v8;
  float v9;
  id v10;
  float v11;

  v0 = (void *)objc_opt_self(UIDevice);
  v1 = objc_msgSend(v0, "currentDevice");
  v2 = objc_msgSend(v1, "isBatteryMonitoringEnabled");

  v3 = objc_msgSend(v0, "currentDevice");
  objc_msgSend(v3, "setBatteryMonitoringEnabled:", 1);

  v4 = objc_msgSend(v0, "currentDevice");
  v5 = objc_msgSend(v4, "batteryState");

  if (v5)
  {
    v6 = objc_msgSend(v0, "currentDevice");
    objc_msgSend(v6, "batteryLevel");
    v8 = v7;

    v9 = v8 * 100.0;
  }
  else
  {
    v9 = 0.0;
  }
  v10 = objc_msgSend(v0, "currentDevice");
  objc_msgSend(v10, "setBatteryMonitoringEnabled:", v2);

  if (v5)
  {
    v11 = roundf(v9);
    if ((~LODWORD(v11) & 0x7F800000) != 0)
    {
      if (v11 > -9.2234e18)
      {
        if (v11 < 9.2234e18)
          return;
LABEL_12:
        __break(1u);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_12;
  }
}

unint64_t sub_100066D20(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  unint64_t v8;
  uint64_t v9;

  v1 = a1;
  switch(a1)
  {
    case 0uLL:
      return v1;
    case 1uLL:
      v1 = 0x746F4E746F4E6F44;
      break;
    case 2uLL:
    case 3uLL:
      v1 = 0xD000000000000017;
      break;
    default:
      if (qword_100315818 != -1)
        swift_once(&qword_100315818, sub_1000D95C0);
      v2 = type metadata accessor for Logger(0);
      v3 = sub_10000D744(v2, (uint64_t)qword_10033FD00);
      v4 = Logger.logObject.getter(v3);
      v5 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v4, v5))
      {
        v6 = (uint8_t *)swift_slowAlloc(12, -1);
        *(_DWORD *)v6 = 134349056;
        v8 = v1;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v8, &v9, v6 + 4, v6 + 12);
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unhandled CTStewieNotifyOption value %{public}ld", v6, 0xCu);
        swift_slowDealloc(v6, -1, -1);
      }

      v1 = 0;
      break;
  }
  return v1;
}

uint64_t sub_100066EA0(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Data(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100066EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100319FC0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t sub_100066F24()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100319FD0;
  if (!qword_100319FD0)
  {
    v1 = objc_opt_self(NSString);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_100319FD0);
  }
  return result;
}

uint64_t sub_100066F60(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for RoadsideAssistanceRequest(a2, a1);
  return a2;
}

uint64_t sub_100066F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Data(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100066FE0(_QWORD *a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  return a1;
}

uint64_t sub_10006701C(uint64_t a1, uint64_t a2)
{
  initializeWithTake for QuestionPresentation(a2, a1);
  return a2;
}

uint64_t sub_10006705C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  _QWORD v25[9];

  if ((a2 & 0xC000000000000001) == 0)
  {
    if (*(_QWORD *)(a2 + 16))
    {
      Hasher.init(_seed:)(v25, *(_QWORD *)(a2 + 40));
      v8 = *(_QWORD *)(a1 + 16);
      v9 = *(_QWORD *)(a1 + 24);
      swift_bridgeObjectRetain(v9);
      String.hash(into:)(v25, v8, v9);
      swift_bridgeObjectRelease(v9);
      v10 = Hasher._finalize()();
      v11 = -1 << *(_BYTE *)(a2 + 32);
      v12 = v10 & ~v11;
      v13 = a2 + 56;
      if (((*(_QWORD *)(a2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) != 0)
      {
        v14 = *(_QWORD *)(a2 + 48);
        v15 = *(_QWORD *)(v14 + 8 * v12);
        v16 = *(_QWORD *)(v15 + 16);
        v17 = *(_QWORD *)(v15 + 24);
        v18 = v16 == v8 && v17 == v9;
        if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v8, v9, 0) & 1) != 0)
          return 1;
        v19 = ~v11;
        v20 = (v12 + 1) & v19;
        if (((*(_QWORD *)(v13 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) != 0)
        {
          while (1)
          {
            v21 = *(_QWORD *)(v14 + 8 * v20);
            v22 = *(_QWORD *)(v21 + 16);
            v23 = *(_QWORD *)(v21 + 24);
            v24 = v22 == v8 && v23 == v9;
            if (v24 || (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, v8, v9, 0) & 1) != 0)
              break;
            result = 0;
            v20 = (v20 + 1) & v19;
            if (((*(_QWORD *)(v13 + ((v20 >> 3) & 0xFFFFFFFFFFFFF8)) >> v20) & 1) == 0)
              return result;
          }
          return 1;
        }
      }
    }
    return 0;
  }
  if (a2 < 0)
    v4 = a2;
  else
    v4 = a2 & 0xFFFFFFFFFFFFFF8;
  v5 = swift_retain(a1);
  v6 = __CocoaSet.contains(_:)(v5, v4);
  swift_release(a1);
  return v6 & 1;
}

uint64_t sub_1000671D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  _QWORD v20[9];

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)(v20, *(_QWORD *)(a3 + 40));
    String.hash(into:)(v20, a1, a2);
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = v11[1];
      v13 = *v11 == a1 && v12 == a2;
      if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v11, v12, a1, a2, 0) & 1) != 0)
        return 1;
      v15 = ~v7;
      v16 = (v8 + 1) & v15;
      if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
      {
        while (1)
        {
          v17 = (_QWORD *)(v10 + 16 * v16);
          v18 = v17[1];
          v19 = *v17 == a1 && v18 == a2;
          if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0) & 1) != 0)
            break;
          result = 0;
          v16 = (v16 + 1) & v15;
          if (((*(_QWORD *)(v9 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL sub_10006730C(unsigned __int8 a1, uint64_t a2)
{
  Swift::UInt v3;
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  int v12;
  _QWORD v13[9];

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  v3 = a1;
  Hasher.init(_seed:)(v13, *(_QWORD *)(a2 + 40));
  Hasher._combine(_:)(v3);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(unsigned __int8 *)(v8 + v6) == (_DWORD)v3)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(unsigned __int8 *)(v8 + v11);
    result = v12 == (_DWORD)v3;
    if (v12 == (_DWORD)v3)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

void sub_1000673F8(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  char *v4;
  double *v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  CGRect v26;

  v9 = (double *)&v4[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__obstructedAreaAtTheTop];
  v26.origin.x = a1;
  v26.origin.y = a2;
  v26.size.width = a3;
  v26.size.height = a4;
  if (!CGRectEqualToRect(*(CGRect *)&v4[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__obstructedAreaAtTheTop], v26))
  {
    if (qword_1003158D8 != -1)
      swift_once(&qword_1003158D8, sub_1000D9904);
    v10 = type metadata accessor for Logger(0);
    sub_10000D744(v10, (uint64_t)qword_10033FF40);
    v11 = v4;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = swift_slowAlloc(22, -1);
      v15 = swift_slowAlloc(64, -1);
      v25 = v15;
      *(_DWORD *)v14 = 136315394;
      v16 = sub_1000E128C(2, a1, a2, a3, a4);
      v18 = v17;
      v24 = sub_100172BEC(v16, v17, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease(v18);
      *(_WORD *)(v14 + 12) = 2080;
      v19 = sub_1000E128C(2, *v9, v9[1], v9[2], v9[3]);
      v21 = v20;
      v24 = sub_100172BEC(v19, v20, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v14 + 14, v14 + 22);

      swift_bridgeObjectRelease(v21);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "obstructedAreaAtTheTop changed from %s to %s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy(v15, 2, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

    }
    v22 = objc_msgSend(v11, "view");
    if (v22)
    {
      v23 = v22;
      objc_msgSend(v22, "setNeedsLayout");

    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_100067668(unsigned __int8 *a1, _OWORD *a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  char *v9;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  char *v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;
  char v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  id v52;
  objc_class *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  char *v57;
  id v58;
  id v59;
  void *v60;
  uint64_t result;
  objc_super v65;
  objc_super v66;

  v15 = OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__displayMetrics;
  v16 = type metadata accessor for ConnectionAssistantDisplayState(0);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  v17 = v9;
  *(_QWORD *)&v9[v15] = sub_100012C44();
  v17[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__locationAnimationFinished] = 0;
  v18 = &v17[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__animateToLocation];
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = 0;
  v18[16] = 2;
  v19 = OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__connectionViewController;
  *(_QWORD *)&v17[v19] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ConnectionAssistantConnectionViewController()), "init");
  *(_QWORD *)&v17[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__innerShadowView] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__displayLink] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__locationAssertion] = 0;
  *(_QWORD *)&v17[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__offsetRotationProgress] = 0;
  v20 = &v17[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__offsetRotationProgressPending];
  *(_QWORD *)v20 = 0;
  v20[8] = 1;
  v21 = &v17[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__obstructedAreaAtTheTop];
  *(_OWORD *)v21 = 0u;
  *((_OWORD *)v21 + 1) = 0u;
  v22 = &v17[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__topInset];
  *(_OWORD *)v22 = 0u;
  *((_OWORD *)v22 + 1) = 0u;
  v22[32] = 0;
  v23 = &v17[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics];
  v24 = *((_OWORD *)a1 + 1);
  *(_OWORD *)v23 = *(_OWORD *)a1;
  *((_OWORD *)v23 + 1) = v24;
  v25 = *((_OWORD *)a1 + 3);
  *((_OWORD *)v23 + 2) = *((_OWORD *)a1 + 2);
  *((_OWORD *)v23 + 3) = v25;
  *((_QWORD *)v23 + 14) = *((_QWORD *)a1 + 14);
  v26 = *((_OWORD *)a1 + 6);
  v27 = *((_OWORD *)a1 + 4);
  *((_OWORD *)v23 + 5) = *((_OWORD *)a1 + 5);
  *((_OWORD *)v23 + 6) = v26;
  *((_OWORD *)v23 + 4) = v27;
  v28 = &v17[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthDiameter];
  v29 = a2[5];
  *((_OWORD *)v28 + 4) = a2[4];
  *((_OWORD *)v28 + 5) = v29;
  *(_OWORD *)(v28 + 89) = *(_OWORD *)((char *)a2 + 89);
  v30 = a2[1];
  *(_OWORD *)v28 = *a2;
  *((_OWORD *)v28 + 1) = v30;
  v31 = a2[3];
  *((_OWORD *)v28 + 2) = a2[2];
  *((_OWORD *)v28 + 3) = v31;
  v32 = &v17[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__locationAssertionProducer];
  *(_QWORD *)v32 = a6;
  *((_QWORD *)v32 + 1) = a7;
  v33 = &v17[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__viewDidLoadCallback];
  *(_QWORD *)v33 = a8;
  *((_QWORD *)v33 + 1) = a9;
  v34 = qword_100315790;
  swift_retain(a7);
  swift_retain(a9);
  if (v34 != -1)
    swift_once(&qword_100315790, sub_10007CCD0);
  v35 = qword_10033FC68;
  v36 = word_10033FC70;
  v37 = HIBYTE(word_10033FC70);
  v38 = byte_10033FC72;
  v39 = qword_10033FC78;
  v40 = word_10033FCB0;
  v41 = HIBYTE(word_10033FCB0);
  v42 = &v17[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__guidanceState];
  v43 = xmmword_10033FC80;
  v44 = unk_10033FC90;
  v45 = xmmword_10033FCA0;
  *v42 = byte_10033FC60;
  *((_QWORD *)v42 + 1) = v35;
  v42[16] = v36;
  v42[17] = v37;
  v42[18] = v38;
  *((_QWORD *)v42 + 3) = v39;
  *((_OWORD *)v42 + 2) = v43;
  *((_OWORD *)v42 + 3) = v44;
  *((_OWORD *)v42 + 4) = v45;
  v42[80] = v40;
  v42[81] = v41;
  *((_QWORD *)v42 + 11) = a3;
  *((_QWORD *)v42 + 12) = a4;
  v42[104] = a5;
  v17[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__skipLocationAnimation] = a5 != 2;
  v46 = v43;
  v47 = v44;
  v48 = *a1;
  swift_bridgeObjectRetain(v45);
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRetain(v46);
  swift_bridgeObjectRetain(v47);
  v49 = MTLCreateSystemDefaultDevice();
  if (v49)
  {
    v50 = v49;
    v51 = objc_allocWithZone((Class)type metadata accessor for ConnectionAssistantEarthViewController());
    *(_QWORD *)&v17[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthViewController] = sub_1000455D4(v48 ^ 1u, v50);

    v66.receiver = v17;
    v66.super_class = (Class)type metadata accessor for ConnectionAssistantViewController();
    v52 = objc_msgSendSuper2(&v66, "initWithNibName:bundle:", 0, 0);
    v53 = (objc_class *)type metadata accessor for WeakCADisplayLinkTarget();
    v54 = (char *)objc_allocWithZone(v53);
    v55 = &v54[OBJC_IVAR____TtC8SOSBuddy23WeakCADisplayLinkTarget__target];
    *((_QWORD *)v55 + 1) = 0;
    v56 = swift_unknownObjectWeakInit(v55, 0);
    *(_QWORD *)(v56 + 8) = &off_1002E8860;
    swift_unknownObjectWeakAssign(v56, v52);
    v65.receiver = v54;
    v65.super_class = v53;
    v57 = (char *)v52;
    v58 = objc_msgSendSuper2(&v65, "init");
    v59 = objc_msgSend((id)objc_opt_self(CADisplayLink), "displayLinkWithTarget:selector:", v58, "updateFrom:");

    swift_release(a7);
    swift_release(a9);

    v60 = *(void **)&v57[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__displayLink];
    *(_QWORD *)&v57[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__displayLink] = v59;

    return (uint64_t)v57;
  }
  else
  {
    __break(1u);
    result = swift_unexpectedError(v48, "SOSBuddy/ConnectionAssistantViewController.swift", 48, 1, 69);
    __break(1u);
  }
  return result;
}

id sub_100067AA0()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  objc_class *v11;
  id result;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  uint64_t v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  double v29;
  id v30;
  double vertical;
  id v32;
  void *v33;
  id v34;
  void *v35;
  void *v36;
  uint64_t v37;
  void *v38;
  void *v39;
  __n128 v40;
  void *v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  char *v45;
  __n128 v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD aBlock[5];
  uint64_t v55;
  objc_super v56;

  v1 = v0;
  v2 = type metadata accessor for DispatchWorkItemFlags(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v52 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (objc_class *)type metadata accessor for ConnectionAssistantViewController();
  v56.receiver = v0;
  v56.super_class = v11;
  objc_msgSendSuper2(&v56, "viewDidLoad");
  objc_msgSend(v0, "setOverrideUserInterfaceStyle:", 2);
  result = objc_msgSend(v0, "view");
  if (!result)
  {
    __break(1u);
    goto LABEL_15;
  }
  v13 = result;
  v14 = (void *)objc_opt_self(UIColor);
  v15 = objc_msgSend(v14, "systemBackgroundColor");
  objc_msgSend(v13, "setBackgroundColor:", v15);

  result = objc_msgSend(v1, "view");
  if (!result)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v16 = result;
  v53 = v7;
  v17 = objc_msgSend(v14, "labelColor");
  objc_msgSend(v16, "setTintColor:", v17);

  v18 = *(void **)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthViewController];
  objc_msgSend(v1, "addChildViewController:", v18);
  result = objc_msgSend(v1, "view");
  if (!result)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v19 = result;
  result = objc_msgSend(v18, "view");
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v20 = result;
  objc_msgSend(v19, "addSubview:", result);

  objc_msgSend(v18, "didMoveToParentViewController:", v1);
  if (v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics] == 1)
  {
    v51 = v3;
    v21 = type metadata accessor for ShadowView();
    v22 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata(v21)), "init");
    v23 = objc_msgSend(v14, "blackColor");
    v24 = objc_msgSend(v22, "layer");
    if (v23)
      v25 = objc_msgSend(v23, "CGColor");
    else
      v25 = 0;
    objc_msgSend(v24, "setShadowColor:", v25);

    v26 = objc_msgSend(v22, "layer");
    objc_msgSend(v26, "setInvertsShadow:", 1);

    v27 = objc_msgSend(v22, "layer");
    objc_msgSend(v27, "setCornerCurve:", kCACornerCurveContinuous);

    v28 = objc_msgSend(v22, "layer");
    LODWORD(v29) = 1.0;
    objc_msgSend(v28, "setShadowOpacity:", v29);

    v30 = objc_msgSend(v22, "layer");
    objc_msgSend(v30, "setShadowRadius:", 12.0);

    vertical = UIOffsetZero.vertical;
    v32 = objc_msgSend(v22, "layer");
    objc_msgSend(v32, "setShadowOffset:", UIOffsetZero.horizontal, vertical);

    v33 = *(void **)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__innerShadowView];
    *(_QWORD *)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__innerShadowView] = v22;
    v34 = v22;

    result = objc_msgSend(v1, "view");
    if (!result)
      goto LABEL_20;
    v35 = result;
    objc_msgSend(result, "addSubview:", v34);

    v3 = v51;
  }
  v36 = *(void **)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__connectionViewController];
  objc_msgSend(v1, "addChildViewController:", v36);
  result = objc_msgSend(v1, "view");
  v37 = v53;
  if (result)
  {
    v38 = result;
    result = objc_msgSend(v36, "view");
    if (result)
    {
      v39 = result;
      objc_msgSend(v38, "addSubview:", result);

      objc_msgSend(v36, "didMoveToParentViewController:", v1);
      sub_10000D75C();
      v41 = (void *)static OS_dispatch_queue.main.getter(v40);
      v42 = swift_allocObject(&unk_1002E88D0, 24, 7);
      *(_QWORD *)(v42 + 16) = v1;
      aBlock[4] = sub_10006A840;
      v55 = v42;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1001BAACC;
      aBlock[3] = &unk_1002E88E8;
      v43 = _Block_copy(aBlock);
      v44 = v55;
      v45 = v1;
      swift_release(v44);
      static DispatchQoS.unspecified.getter(v46);
      aBlock[0] = _swiftEmptyArrayStorage;
      v47 = sub_10006A7F8();
      v48 = sub_100003DB8((uint64_t *)&unk_1003178D0);
      v49 = sub_10003E608();
      dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v48, v49, v2, v47);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v43);
      _Block_release(v43);

      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      return (id)(*(uint64_t (**)(char *, uint64_t))(v52 + 8))(v10, v37);
    }
    goto LABEL_19;
  }
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t sub_1000680D8(char a1)
{
  char *v1;
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  objc_class *v22;
  __n128 v23;
  uint64_t v24;
  void *v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  void *v28;
  uint64_t v29;
  char *v30;
  __n128 v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t (*v36)(__n128);
  uint64_t v37;
  __n128 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD aBlock[5];
  uint64_t v46;
  objc_super v47;

  v2 = v1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS(0);
  v43 = *(_QWORD *)(v9 - 8);
  v44 = v9;
  __chkstk_darwin(v9, v10);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchTime(0);
  v14 = *(_QWORD *)(v13 - 8);
  v16 = __chkstk_darwin(v13, v15);
  v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16, v19);
  v21 = (char *)&v41 - v20;
  v22 = (objc_class *)type metadata accessor for ConnectionAssistantViewController();
  v47.receiver = v2;
  v47.super_class = v22;
  objc_msgSendSuper2(&v47, "viewDidAppear:", a1 & 1);
  if (v2[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__guidanceState + 104] == 2)
  {
    sub_10000D75C();
    v24 = static OS_dispatch_queue.main.getter(v23);
    v42 = v5;
    v25 = (void *)v24;
    static DispatchTime.now()(v24);
    + infix(_:_:)(v18, 2.0);
    v26 = *(void (**)(char *, uint64_t))(v14 + 8);
    v26(v18, v13);
    v27 = swift_allocObject(&unk_1002E8880, 24, 7);
    *(_QWORD *)(v27 + 16) = v2;
    aBlock[4] = sub_10006A7D8;
    v46 = v27;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1001BAACC;
    aBlock[3] = &unk_1002E8898;
    v28 = _Block_copy(aBlock);
    v29 = v46;
    v30 = v2;
    swift_release(v29);
    static DispatchQoS.unspecified.getter(v31);
    aBlock[0] = _swiftEmptyArrayStorage;
    v32 = sub_10006A7F8();
    v33 = sub_100003DB8((uint64_t *)&unk_1003178D0);
    v34 = sub_10003E608();
    dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v33, v34, v4, v32);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v21, v12, v8, v28);
    _Block_release(v28);

    (*(void (**)(char *, uint64_t))(v42 + 8))(v8, v4);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v12, v44);
    return ((uint64_t (*)(char *, uint64_t))v26)(v21, v13);
  }
  else
  {
    v36 = *(uint64_t (**)(__n128))&v2[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__locationAssertionProducer];
    v37 = *(_QWORD *)&v2[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__locationAssertionProducer + 8];
    v38 = swift_retain(v37);
    v39 = v36(v38);
    swift_release(v37);
    v40 = *(_QWORD *)&v2[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__locationAssertion];
    *(_QWORD *)&v2[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__locationAssertion] = v39;
    return swift_release(v40);
  }
}

uint64_t sub_1000683A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t (*v3)(uint64_t);
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(uint64_t (**)(uint64_t))(a1
                                         + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__locationAssertionProducer);
  v2 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__locationAssertionProducer + 8);
  v4 = swift_retain(v2);
  v5 = v3(v4);
  swift_release(v2);
  v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__locationAssertion);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__locationAssertion) = v5;
  return swift_release(v6);
}

void sub_1000684CC(void *a1, uint64_t a2, uint64_t a3, const char **a4, SEL *a5)
{
  const char *v8;
  char *v9;
  void *v10;
  void *v11;
  id v12;
  id v13;
  objc_super v14;

  v14.receiver = a1;
  v14.super_class = (Class)type metadata accessor for ConnectionAssistantViewController();
  v8 = *a4;
  v9 = (char *)v14.receiver;
  objc_msgSendSuper2(&v14, v8, a3);
  v10 = *(void **)&v9[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__displayLink];
  if (v10)
  {
    v11 = (void *)objc_opt_self(NSRunLoop);
    v12 = v10;
    v13 = objc_msgSend(v11, "mainRunLoop", v14.receiver, v14.super_class);
    objc_msgSend(v12, *a5, v13, NSRunLoopCommonModes);

  }
  else
  {
    __break(1u);
  }
}

void sub_1000685A0()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  double v5;
  double v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  id v25;
  void *v26;
  double v27;
  double v28;
  double v29;
  double v30;
  id v31;
  void *v32;
  double v33;
  double v34;
  double v35;
  double v36;
  double v37;
  double v38;
  double v39;
  double v40;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v45;
  CGFloat v46;
  char *v47;
  objc_super v48;
  CGRect v49;
  CGRect v50;

  v48.receiver = v0;
  v48.super_class = (Class)type metadata accessor for ConnectionAssistantViewController();
  objc_msgSendSuper2(&v48, "viewWillLayoutSubviews");
  v1 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthViewController], "view");
  if (!v1)
  {
    __break(1u);
    goto LABEL_11;
  }
  v2 = v1;
  v3 = objc_msgSend(v0, "view");
  if (!v3)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  v4 = v3;
  objc_msgSend(v3, "bounds");
  v6 = v5;
  v8 = v7;
  v10 = v9;
  v12 = v11;

  objc_msgSend(v2, "setFrame:", v6, v8, v10, v12);
  v13 = objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__connectionViewController], "view");
  if (!v13)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v14 = v13;
  v15 = objc_msgSend(v0, "view");
  if (!v15)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v15;
  objc_msgSend(v15, "bounds");
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;

  objc_msgSend(v14, "setFrame:", v18, v20, v22, v24);
  if ((v0[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics] & 1) != 0)
  {
    sub_100069114();
    return;
  }
  v25 = objc_msgSend(v0, "view");
  if (!v25)
    goto LABEL_14;
  v26 = v25;
  objc_msgSend(v25, "safeAreaInsets");
  v28 = v27;
  v30 = v29;

  v31 = objc_msgSend(v0, "view");
  if (v31)
  {
    v32 = v31;
    objc_msgSend(v31, "bounds");
    v34 = v33;
    v36 = v35;
    v38 = v37;
    v40 = v39;

    v49.origin.x = sub_10006A798(v34, v36, v38, v40, v28, v30);
    x = v49.origin.x;
    y = v49.origin.y;
    width = v49.size.width;
    height = v49.size.height;
    v45 = CGRectGetHeight(v49);
    v50.origin.x = x;
    v50.origin.y = y;
    v50.size.width = width;
    v50.size.height = height;
    v46 = CGRectGetHeight(v50);
    v47 = &v0[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__topInset];
    *(double *)v47 = v28;
    *((_QWORD *)v47 + 1) = 0x4075E00000000000;
    *((CGFloat *)v47 + 2) = v45;
    *((CGFloat *)v47 + 3) = v46;
    v47[32] = 1;
    return;
  }
LABEL_15:
  __break(1u);
}

void sub_100068864()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  float v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  void *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  float maximum;
  float preferred;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  double v28;
  double v29;
  double v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  double v35;
  _BYTE v36[8];
  CAFrameRateRange v37;

  v1 = v0;
  v2 = v0 + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__offsetRotationProgressPending;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__offsetRotationProgressPending + 8) != 1
    || (v3 = sub_1000102A8(), (v3 & 0x100000000) != 0))
  {
    v18 = OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__displayLink;
    v19 = *(void **)(v0 + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__displayLink);
    if (v19)
    {
      v20 = objc_msgSend(v19, "preferredFrameRateRange");
      maximum = CAFrameRateRangeDefault.maximum;
      preferred = CAFrameRateRangeDefault.preferred;
      if ((static CAFrameRateRange.== infix(_:_:)(v20) & 1) != 0)
        return;
      if (qword_1003158D8 != -1)
        swift_once(&qword_1003158D8, sub_1000D9904);
      v23 = type metadata accessor for Logger(0);
      v24 = sub_10000D744(v23, (uint64_t)qword_10033FF40);
      v25 = Logger.logObject.getter(v24);
      v26 = static os_log_type_t.default.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        v27 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Updating CA frame rate to: default", v27, 2u);
        swift_slowDealloc(v27, -1, -1);
      }

      v31 = *(void **)(v1 + v18);
      if (v31)
      {
        *(float *)&v28 = CAFrameRateRangeDefault.minimum;
        *(float *)&v29 = maximum;
        *(float *)&v30 = preferred;
        objc_msgSend(v31, "setPreferredFrameRateRange:", v28, v29, v30);
        v32 = *(void **)(v1 + v18);
        if (v32)
        {
          v33 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthViewController);
          objc_msgSend(v32, "preferredFrameRateRange");
          v34 = *(void **)(v33 + OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__displayLink);
          if (v34)
          {
            objc_msgSend(v34, "setPreferredFrameRateRange:");
            if ((*(_BYTE *)(v2 + 8) & 1) == 0)
              sub_100068BF4(*(double *)v2);
            return;
          }
          goto LABEL_29;
        }
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        goto LABEL_30;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_28;
  }
  v4 = *(float *)&v3;
  v5 = OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__displayLink;
  v6 = *(void **)(v0 + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__displayLink);
  if (!v6)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v7 = CAFrameRateRange.preferred.getter(objc_msgSend(v6, "preferredFrameRateRange"));
  if ((v7 & 0x100000000) != 0 || *(float *)&v7 != v4)
  {
    if (qword_1003158D8 != -1)
      swift_once(&qword_1003158D8, sub_1000D9904);
    v8 = type metadata accessor for Logger(0);
    v9 = sub_10000D744(v8, (uint64_t)qword_10033FF40);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v12 = 134217984;
      v35 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v35, v36, v12 + 4, v12 + 12);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Updating CA frame rate to: %f", v12, 0xCu);
      swift_slowDealloc(v12, -1, -1);
    }

    v13 = *(void **)(v1 + v5);
    if (v13)
    {
      v14 = v13;
      v36[4] = 0;
      v37 = CAFrameRateRange.init(minimum:maximum:preferred:)(v4, v4, (Swift::Float_optional *)LODWORD(v4));
      objc_msgSend(v14, "setPreferredFrameRateRange:", *(double *)&v37.minimum, *(double *)&v37.maximum, *(double *)&v37.preferred);

      v15 = *(void **)(v1 + v5);
      if (v15)
      {
        v16 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthViewController);
        objc_msgSend(v15, "preferredFrameRateRange");
        v17 = *(void **)(v16 + OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController__displayLink);
        if (v17)
        {
          objc_msgSend(v17, "setPreferredFrameRateRange:");
          return;
        }
        goto LABEL_33;
      }
LABEL_32:
      __break(1u);
LABEL_33:
      __break(1u);
      return;
    }
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
}

void sub_100068BF4(double a1)
{
  _BYTE *v1;
  char *v3;
  char *v4;
  double v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  double v10;
  double v11;
  double v12;
  double v13;
  id v14;
  void *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat height;
  CGFloat v28;
  CGFloat v29;
  char *v30;
  CGRect v31;
  CGRect v32;

  v3 = &v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__offsetRotationProgressPending];
  *(_QWORD *)v3 = 0;
  v3[8] = 1;
  v4 = *(char **)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__connectionViewController];
  v5 = *(double *)&v4[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_coveredProgress];
  *(double *)&v4[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_coveredProgress] = a1;
  if (v5 != a1)
  {
    v6 = objc_msgSend(v4, "view");
    if (!v6)
      goto LABEL_11;
    v7 = v6;
    objc_msgSend(v6, "setNeedsLayout");

  }
  *(double *)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__offsetRotationProgress] = a1;
  if ((v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics] & 1) != 0)
  {
    sub_100069114();
    return;
  }
  v8 = objc_msgSend(v1, "view");
  if (v8)
  {
    v9 = v8;
    objc_msgSend(v8, "safeAreaInsets");
    v11 = v10;
    v13 = v12;

    v14 = objc_msgSend(v1, "view");
    if (v14)
    {
      v15 = v14;
      objc_msgSend(v14, "bounds");
      v17 = v16;
      v19 = v18;
      v21 = v20;
      v23 = v22;

      v31.origin.x = sub_10006A798(v17, v19, v21, v23, v11, v13);
      x = v31.origin.x;
      y = v31.origin.y;
      width = v31.size.width;
      height = v31.size.height;
      v28 = CGRectGetHeight(v31);
      v32.origin.x = x;
      v32.origin.y = y;
      v32.size.width = width;
      v32.size.height = height;
      v29 = CGRectGetHeight(v32);
      v30 = &v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__topInset];
      *(double *)v30 = v11;
      *((_QWORD *)v30 + 1) = 0x4075E00000000000;
      *((CGFloat *)v30 + 2) = v28;
      *((CGFloat *)v30 + 3) = v29;
      v30[32] = 1;
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
LABEL_11:
  __break(1u);
}

void sub_100068DE0(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  char *v4;
  id v9;
  void *v10;
  double v11;
  CGFloat v12;
  double v13;
  CGFloat v14;
  double v15;
  CGFloat v16;
  double v17;
  CGFloat v18;
  double v19;
  double v20;
  id v21;
  void *v22;
  double v23;
  CGFloat v24;
  double v25;
  CGFloat v26;
  double v27;
  CGFloat v28;
  double v29;
  CGFloat v30;
  double Height;
  id v32;
  void *v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  double v38;
  CGFloat v39;
  double v40;
  CGFloat v41;
  CGFloat v42;
  uint64_t v43;
  double v44;
  double v45;
  double v46;
  double v47;
  CGFloat v48;
  CGFloat v49;
  CGFloat v50;
  CGFloat v51;
  id v52;
  void *v53;
  double v54;
  double v55;
  double v56;
  double v57;
  id v58;
  void *v59;
  double v60;
  double v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  CGFloat x;
  CGFloat y;
  CGFloat width;
  CGFloat v71;
  CGFloat v72;
  CGFloat v73;
  char *v74;
  CGRect v75;
  CGRect v76;
  CGRect v77;
  CGRect v78;
  CGRect v79;
  CGRect v80;
  CGRect v81;
  CGRect v82;

  v82.origin.x = 0.0;
  v82.origin.y = 0.0;
  v82.size.width = 0.0;
  v82.size.height = 0.0;
  if (!CGRectEqualToRect(*(CGRect *)&a1, v82))
  {
    v78.origin.x = a1;
    v78.origin.y = a2;
    v78.size.width = a3;
    v78.size.height = a4;
    *(CGRect *)&v42 = CGRectInset(v78, -5.0, 0.0);
    v20 = v44;
    Height = v45;
    goto LABEL_12;
  }
  v9 = objc_msgSend(v4, "view");
  if (!v9)
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v10 = v9;
  objc_msgSend(v9, "bounds");
  v12 = v11;
  v14 = v13;
  v16 = v15;
  v18 = v17;

  v75.origin.x = v12;
  v75.origin.y = v14;
  v75.size.width = v16;
  v75.size.height = v18;
  v19 = CGRectGetWidth(v75) * 0.5;
  if (v19 <= 2.0)
    v20 = v19;
  else
    v20 = 2.0;
  v21 = objc_msgSend(v4, "view");
  if (!v21)
    goto LABEL_18;
  v22 = v21;
  objc_msgSend(v21, "bounds");
  v24 = v23;
  v26 = v25;
  v28 = v27;
  v30 = v29;

  v76.origin.x = v24;
  v76.origin.y = v26;
  v76.size.width = v28;
  v76.size.height = v30;
  Height = CGRectGetHeight(v76);
  v32 = objc_msgSend(v4, "view");
  if (!v32)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v33 = v32;
  if (Height > 35.0)
    Height = 35.0;
  objc_msgSend(v32, "bounds");
  v35 = v34;
  v37 = v36;
  v39 = v38;
  v41 = v40;

  v77.origin.x = v35;
  v77.origin.y = v37;
  v77.size.width = v39;
  v77.size.height = v41;
  v42 = CGRectGetMidX(v77) + v20 * -0.5;
  v43 = 0;
LABEL_12:
  v46 = v20;
  v47 = Height;
  v79 = CGRectInset(*(CGRect *)&v42, 0.0, -10.0);
  v48 = *(double *)&v4[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__obstructedAreaAtTheTop];
  v49 = *(double *)&v4[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__obstructedAreaAtTheTop + 8];
  v50 = *(double *)&v4[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__obstructedAreaAtTheTop + 16];
  v51 = *(double *)&v4[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__obstructedAreaAtTheTop + 24];
  *(CGRect *)&v4[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__obstructedAreaAtTheTop] = v79;
  sub_1000673F8(v48, v49, v50, v51);
  if ((v4[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics] & 1) != 0)
  {
    sub_100069114();
    return;
  }
  v52 = objc_msgSend(v4, "view");
  if (!v52)
    goto LABEL_20;
  v53 = v52;
  objc_msgSend(v52, "safeAreaInsets");
  v55 = v54;
  v57 = v56;

  v58 = objc_msgSend(v4, "view");
  if (v58)
  {
    v59 = v58;
    objc_msgSend(v58, "bounds");
    v61 = v60;
    v63 = v62;
    v65 = v64;
    v67 = v66;

    v80.origin.x = sub_10006A798(v61, v63, v65, v67, v55, v57);
    x = v80.origin.x;
    y = v80.origin.y;
    width = v80.size.width;
    v71 = v80.size.height;
    v72 = CGRectGetHeight(v80);
    v81.origin.x = x;
    v81.origin.y = y;
    v81.size.width = width;
    v81.size.height = v71;
    v73 = CGRectGetHeight(v81);
    v74 = &v4[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__topInset];
    *(double *)v74 = v55;
    *((_QWORD *)v74 + 1) = 0x4075E00000000000;
    *((CGFloat *)v74 + 2) = v72;
    *((CGFloat *)v74 + 3) = v73;
    v74[32] = 1;
    return;
  }
LABEL_21:
  __break(1u);
}

void sub_100069114()
{
  char *v0;
  char *v1;
  id v2;
  void *v3;
  double v4;
  CGFloat v5;
  double v6;
  CGFloat v7;
  double v8;
  CGFloat v9;
  double v10;
  CGFloat v11;
  CGFloat MaxY;
  char *v13;
  id v14;
  void *v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  double v22;
  CGFloat v23;
  double MidX;
  CGFloat *v25;
  double Width;
  id v27;
  void *v28;
  double v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double v36;
  CGFloat v37;
  double MinY;
  double v39;
  double v40;
  CGFloat v41;
  void *v42;
  void *v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  id v48;
  void *v49;
  double v50;
  CGFloat v51;
  double v52;
  CGFloat v53;
  double v54;
  CGFloat v55;
  double v56;
  CGFloat v57;
  double v58;
  id v59;
  void *v60;
  double v61;
  CGFloat v62;
  double v63;
  CGFloat v64;
  double v65;
  CGFloat v66;
  double v67;
  CGFloat v68;
  id v69;
  id v70;
  void *v71;
  id v72;
  double v73;
  double v74;
  double v75;
  CGFloat v76;
  double v77;
  CGFloat v78;
  double v79;
  CGFloat v80;
  double v81;
  CGFloat v82;
  id v83;
  double v84;
  CGFloat v85;
  id v86;
  double v87;
  CGFloat v88;
  double x;
  double y;
  double v91;
  double height;
  id v93;
  double v94;
  double v95;
  id v96;
  id v97;
  id v98;
  CGRect v99;
  CGRect v100;
  CGRect v101;
  CGRect v102;
  CGRect v103;
  CGRect v104;
  CGRect v105;
  CGRect v106;

  v1 = v0;
  v2 = objc_msgSend(v0, "view");
  if (!v2)
  {
    __break(1u);
    goto LABEL_15;
  }
  v3 = v2;
  objc_msgSend(v2, "bounds");
  v5 = v4;
  v7 = v6;
  v9 = v8;
  v11 = v10;

  v99.origin.x = v5;
  v99.origin.y = v7;
  v99.size.width = v9;
  v99.size.height = v11;
  MaxY = CGRectGetMaxY(v99);
  v13 = &v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__topInset];
  *(CGFloat *)v13 = MaxY + -56.0;
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = 0;
  *((_QWORD *)v13 + 1) = 0;
  v13[32] = 0;
  v14 = objc_msgSend(v1, "view");
  if (!v14)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v15 = v14;
  objc_msgSend(v14, "bounds");
  v17 = v16;
  v19 = v18;
  v21 = v20;
  v23 = v22;

  v100.origin.x = v17;
  v100.origin.y = v19;
  v100.size.width = v21;
  v100.size.height = v23;
  MidX = CGRectGetMidX(v100);
  v25 = (CGFloat *)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__obstructedAreaAtTheTop];
  Width = CGRectGetWidth(*(CGRect *)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__obstructedAreaAtTheTop]);
  v27 = objc_msgSend(v1, "view");
  if (!v27)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v28 = v27;
  v29 = MidX - Width * 0.5;
  objc_msgSend(v27, "bounds");
  v31 = v30;
  v33 = v32;
  v35 = v34;
  v37 = v36;

  v101.origin.x = v31;
  v101.origin.y = v33;
  v101.size.width = v35;
  v101.size.height = v37;
  MinY = CGRectGetMinY(v101);
  v39 = v25[2];
  v40 = v25[3];
  v102.origin.x = *v25;
  v102.origin.y = v25[1];
  v102.size.width = v39;
  v102.size.height = v40;
  v41 = CGRectGetHeight(v102) * 0.5;
  v42 = (void *)objc_opt_self(UIBezierPath);
  sub_100043310(objc_msgSend(v42, "bezierPathWithRoundedRect:cornerRadius:", v29, MinY, v39, v40, v41));
  v43 = *(void **)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__innerShadowView];
  if (!v43)
    return;
  v44 = v43;
  v45 = objc_msgSend(v1, "view");
  if (!v45)
    goto LABEL_17;
  v46 = v45;
  objc_msgSend(v45, "bounds");

  objc_msgSend(v44, "bounds");
  objc_msgSend(v44, "setBounds:");

  v47 = v44;
  v48 = objc_msgSend(v1, "view");
  if (!v48)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v49 = v48;
  objc_msgSend(v48, "bounds");
  v51 = v50;
  v53 = v52;
  v55 = v54;
  v57 = v56;

  v103.origin.x = v51;
  v103.origin.y = v53;
  v103.size.width = v55;
  v103.size.height = v57;
  v58 = CGRectGetMidX(v103);
  v59 = objc_msgSend(v1, "view");
  if (!v59)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v60 = v59;
  objc_msgSend(v59, "bounds");
  v62 = v61;
  v64 = v63;
  v66 = v65;
  v68 = v67;

  v104.origin.x = v62;
  v104.origin.y = v64;
  v104.size.width = v66;
  v104.size.height = v68;
  objc_msgSend(v47, "setCenter:", v58, CGRectGetMidY(v104));

  v69 = objc_msgSend(v47, "layer");
  v70 = objc_msgSend(v1, "view");
  if (!v70)
  {
LABEL_20:
    __break(1u);
    return;
  }
  v71 = v70;
  v72 = objc_msgSend(v70, "traitCollection");

  objc_msgSend(v72, "displayCornerRadius");
  v74 = v73;

  objc_msgSend(v69, "setCornerRadius:", v74 + -11.0);
  objc_msgSend(v47, "bounds");
  v76 = v75;
  v78 = v77;
  v80 = v79;
  v82 = v81;
  v83 = objc_msgSend(v47, "layer");
  objc_msgSend(v83, "shadowRadius");
  v85 = v84;

  v86 = objc_msgSend(v47, "layer");
  objc_msgSend(v86, "shadowRadius");
  v88 = v87;

  v105.origin.x = v76;
  v105.origin.y = v78;
  v105.size.width = v80;
  v105.size.height = v82;
  v106 = CGRectInset(v105, v85, v88);
  x = v106.origin.x;
  y = v106.origin.y;
  v91 = v106.size.width;
  height = v106.size.height;
  v93 = objc_msgSend(v47, "layer");
  objc_msgSend(v93, "cornerRadius");
  v95 = v94;

  v98 = objc_msgSend(v42, "bezierPathWithRoundedRect:cornerRadius:", x, y, v91, height, v95);
  v96 = objc_msgSend(v47, "layer");
  if (v98)
    v97 = objc_msgSend(v98, "CGPath");
  else
    v97 = 0;
  objc_msgSend(v96, "setShadowPath:", v97);

}

void sub_100069664(char *a1)
{
  _BYTE *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  char v12;
  _QWORD *v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint8_t *v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  _BYTE *v28;
  double *v29;
  int v30;
  double v31;
  double v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  char v41;
  uint64_t v42;
  char v43;
  char v44;
  char v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  void *v74;
  id v75;
  void *v76;
  uint64_t v77;
  char *v78;
  void *v79;
  unsigned int v80;
  int v81;
  void *v82;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  char *v87;
  uint8_t *v88;
  void *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  _BYTE *v94;
  unsigned int v95;
  _OWORD v96[5];
  _OWORD v97[2];
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  _OWORD v103[2];
  _OWORD v104[5];
  _OWORD v105[3];

  v3 = type metadata accessor for Logger(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = &v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__guidanceState];
  v9 = *(_OWORD *)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__guidanceState + 80];
  v104[4] = *(_OWORD *)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__guidanceState + 64];
  v105[0] = v9;
  *(_OWORD *)((char *)v105 + 9) = *(_OWORD *)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__guidanceState
                                               + 89];
  v10 = *(_OWORD *)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__guidanceState + 16];
  v104[0] = *(_OWORD *)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__guidanceState];
  v104[1] = v10;
  v11 = *(_OWORD *)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__guidanceState + 48];
  v104[2] = *(_OWORD *)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__guidanceState + 32];
  v104[3] = v11;
  sub_10006A6F0(v104);
  v12 = sub_10007CD20((unsigned __int8 *)v104, (unsigned __int8 *)a1);
  sub_10006A744(v104);
  if ((v12 & 1) == 0)
  {
    v94 = v1;
    if (qword_100315868 != -1)
      swift_once(&qword_100315868, sub_1000D96FC);
    sub_10000D744(v3, (uint64_t)qword_10033FDF0);
    sub_10006A6F0(a1);
    v13 = sub_10006A6F0(a1);
    v14 = Logger.logObject.getter(v13);
    v15 = static os_log_type_t.default.getter(v14);
    v16 = os_log_type_enabled(v14, v15);
    v92 = v4;
    v93 = v3;
    v91 = v7;
    if (v16)
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      v18 = swift_slowAlloc(32, -1);
      v90 = (char *)v18;
      *(_DWORD *)v17 = 136315138;
      v19 = *((_OWORD *)a1 + 4);
      v20 = *((_OWORD *)a1 + 5);
      v21 = *((_OWORD *)a1 + 2);
      v101 = *((_OWORD *)a1 + 3);
      v102 = v19;
      v103[0] = v20;
      *(_OWORD *)((char *)v103 + 9) = *(_OWORD *)(a1 + 89);
      v22 = *((_OWORD *)a1 + 1);
      v98 = *(_OWORD *)a1;
      *(_QWORD *)&v96[0] = v18;
      v99 = v22;
      v100 = v21;
      sub_10006A6F0(a1);
      v24 = String.init<A>(describing:)(&v98, &type metadata for ExplorerGuidanceState, v23);
      v26 = v25;
      *(_QWORD *)&v98 = sub_100172BEC(v24, v25, (uint64_t *)v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, (char *)&v98 + 8, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease(v26);
      sub_10006A744(a1);
      sub_10006A744(a1);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "updateGuidanceState to %s", v17, 0xCu);
      v27 = v90;
      swift_arrayDestroy(v90, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1, -1);
      swift_slowDealloc(v17, -1, -1);
    }
    else
    {
      sub_10006A744(a1);
      sub_10006A744(a1);
    }

    v28 = v94;
    if ((v94[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__skipLocationAnimation] & 1) == 0
      && (v94[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__locationAnimationFinished] & 1) == 0)
    {
      v29 = (double *)&v94[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__animateToLocation];
      v30 = v94[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__animateToLocation + 16];
      v31 = *((double *)a1 + 11);
      v32 = *((double *)a1 + 12);
      v33 = a1[104];
      if (v30 == 2)
      {
        if (v33 == 2)
          goto LABEL_17;
LABEL_16:
        *v29 = v31;
        v29[1] = v32;
        *((_BYTE *)v29 + 16) = v33;
        goto LABEL_17;
      }
      if (v33 == 2 || *v29 != v31 || v29[1] != v32 || ((v33 ^ v30) & 1) != 0)
        goto LABEL_16;
    }
LABEL_17:
    v34 = *((_QWORD *)v8 + 1);
    v35 = *((_QWORD *)v8 + 4);
    v36 = *((_QWORD *)v8 + 6);
    v37 = *((_QWORD *)v8 + 8);
    v38 = *((_OWORD *)a1 + 5);
    *((_OWORD *)v8 + 4) = *((_OWORD *)a1 + 4);
    *((_OWORD *)v8 + 5) = v38;
    *(_OWORD *)(v8 + 89) = *(_OWORD *)(a1 + 89);
    v39 = *((_OWORD *)a1 + 1);
    *(_OWORD *)v8 = *(_OWORD *)a1;
    *((_OWORD *)v8 + 1) = v39;
    v40 = *((_OWORD *)a1 + 3);
    *((_OWORD *)v8 + 2) = *((_OWORD *)a1 + 2);
    *((_OWORD *)v8 + 3) = v40;
    sub_10006A6F0(a1);
    swift_bridgeObjectRelease(v34);
    swift_bridgeObjectRelease(v35);
    swift_bridgeObjectRelease(v36);
    swift_bridgeObjectRelease(v37);
    sub_100045D8C((unsigned __int8 *)a1);
    v41 = *v8;
    v42 = *((_QWORD *)v8 + 1);
    v43 = v8[16];
    v44 = v8[17];
    v45 = v8[18];
    v46 = *((_QWORD *)v8 + 3);
    v47 = v8[80];
    v48 = v8[81];
    v49 = v8[104];
    v90 = *(char **)&v28[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__connectionViewController];
    v50 = &v90[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_state];
    v51 = *((_OWORD *)v8 + 2);
    v52 = *((_OWORD *)v8 + 3);
    v53 = *((_OWORD *)v8 + 4);
    v54 = *(_OWORD *)(v8 + 88);
    v56 = *(_OWORD *)&v90[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_state + 64];
    v55 = *(_OWORD *)&v90[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_state + 80];
    v57 = *(_OWORD *)&v90[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_state + 48];
    *(_OWORD *)((char *)v103 + 9) = *(_OWORD *)&v90[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_state
                                                  + 89];
    v102 = v56;
    v103[0] = v55;
    v101 = v57;
    v58 = *(_OWORD *)&v90[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_state];
    v59 = *(_OWORD *)&v90[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_state + 32];
    v99 = *(_OWORD *)&v90[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_state + 16];
    v100 = v59;
    v98 = v58;
    v60 = *(_QWORD *)&v90[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_state + 8];
    v61 = *(_QWORD *)&v90[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_state + 32];
    v62 = *(_QWORD *)&v90[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_state + 48];
    v63 = *(_QWORD *)&v90[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_state + 64];
    *v50 = v41;
    *((_QWORD *)v50 + 1) = v42;
    v50[16] = v43;
    v50[17] = v44;
    v50[18] = v45;
    *((_QWORD *)v50 + 3) = v46;
    *((_OWORD *)v50 + 2) = v51;
    *((_OWORD *)v50 + 3) = v52;
    *((_OWORD *)v50 + 4) = v53;
    v50[80] = v47;
    v50[81] = v48;
    *(_OWORD *)(v50 + 88) = v54;
    v64 = v51;
    v65 = v52;
    v50[104] = v49;
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v64);
    swift_bridgeObjectRetain(v65);
    sub_10006A6F0(&v98);
    swift_bridgeObjectRelease(v60);
    swift_bridgeObjectRelease(v61);
    swift_bridgeObjectRelease(v62);
    swift_bridgeObjectRelease(v63);
    v66 = *(_OWORD *)v50;
    v67 = *((_OWORD *)v50 + 2);
    v96[1] = *((_OWORD *)v50 + 1);
    v96[2] = v67;
    v96[0] = v66;
    v68 = *((_OWORD *)v50 + 3);
    v69 = *((_OWORD *)v50 + 4);
    v70 = *((_OWORD *)v50 + 5);
    *(_OWORD *)((char *)v97 + 9) = *(_OWORD *)(v50 + 89);
    v96[4] = v69;
    v97[0] = v70;
    v96[3] = v68;
    sub_10006A6F0(v96);
    LOBYTE(v42) = sub_10007CD20((unsigned __int8 *)v96, (unsigned __int8 *)&v98);
    sub_10006A744(v96);
    v72 = v92;
    v71 = v93;
    v73 = v91;
    if ((v42 & 1) == 0)
    {
      v74 = v90;
      sub_100044CFC();
      v75 = objc_msgSend(v74, "view");
      if (!v75)
        goto LABEL_32;
      v76 = v75;
      objc_msgSend(v75, "setNeedsLayout");

    }
    sub_10006A744(&v98);
    v77 = OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__displayLink;
    v78 = v94;
    v79 = *(void **)&v94[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__displayLink];
    if (v79)
    {
      v80 = objc_msgSend(v79, "isPaused");
      v81 = *a1;
      if (((v80 ^ v81) & 1) != 0)
        return;
      v82 = *(void **)&v78[v77];
      if (v82)
      {
        objc_msgSend(v82, "setPaused:", (v81 & 1) == 0);
        if (qword_1003158D8 != -1)
          swift_once(&qword_1003158D8, sub_1000D9904);
        v83 = sub_10000D744(v71, (uint64_t)qword_10033FF40);
        (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v73, v83, v71);
        a1 = v78;
        v84 = Logger.logObject.getter(a1);
        v85 = static os_log_type_t.default.getter(v84);
        if (!os_log_type_enabled(v84, v85))
        {

          v84 = a1;
          goto LABEL_29;
        }
        v86 = (uint8_t *)swift_slowAlloc(8, -1);
        v87 = v78;
        v88 = v86;
        *(_DWORD *)v86 = 67109120;
        v89 = *(void **)&v87[v77];
        if (v89)
        {
          v95 = objc_msgSend(v89, "isPaused");
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v88 + 4, v88 + 8);

          _os_log_impl((void *)&_mh_execute_header, v84, v85, "Explorer rendering is paused: %{BOOL}d", v88, 8u);
          swift_slowDealloc(v88, -1, -1);
LABEL_29:

          (*(void (**)(char *, uint64_t))(v72 + 8))(v73, v71);
          return;
        }
LABEL_34:

        __break(1u);
        return;
      }
LABEL_33:
      __break(1u);
      goto LABEL_34;
    }
    __break(1u);
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
}

id sub_100069D18()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ConnectionAssistantViewController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ConnectionAssistantViewController()
{
  return objc_opt_self(_TtC8SOSBuddy33ConnectionAssistantViewController);
}

void sub_100069E48(double a1, double a2)
{
  char *v2;
  char *v3;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  char *v9;
  int v10;
  id v11;
  void *v12;
  double v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  double v18;
  double Height;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;
  char v41;
  char v42;
  char *v43;
  char v44;
  void *v45;
  __int16 v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  char *v50;
  int v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  void *v57;
  uint64_t v58;
  double v59;
  double v60;
  double *v61;
  double v62;
  double v63;
  id v64;
  void *v65;
  double *v66;
  double v67;
  int v68;
  id v69;
  void *v70;
  int v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  char v79;
  char v80;
  char v81;
  uint64_t v82;
  char v83;
  char v84;
  __int128 v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  double v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  double v119;
  double v120;
  double v121;
  unsigned __int8 v122;
  char *v123;
  __int128 v124;
  _BYTE __dst[400];
  double __src[66];
  _BYTE v127[384];
  double v128;
  double v129;
  char v130;
  char v131[8];
  uint64_t v132;
  char v133;
  char v134;
  char v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  char v140;
  char v141;
  __int128 v142;
  char v143;
  _QWORD v144[9];
  char v145;
  uint64_t v146;
  uint64_t v147;
  char v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  char v153;
  uint64_t v154;
  char v155;
  uint64_t v156;
  char v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char v161;
  uint64_t v162;
  char v163;
  uint64_t v164;
  char v165;
  uint64_t v166;
  char v167;
  uint64_t v168;
  char v169;
  uint64_t v170;
  char v171;
  uint64_t v172;
  char v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char v178;
  char v179;
  void *v180;
  __int16 v181;
  __int128 v182;
  uint64_t v183;
  char v184;
  uint64_t v185;
  uint64_t v186;
  char v187;
  double v188;
  unsigned __int8 v189;
  BOOL v190;
  char v191;
  CGRect v192;

  v3 = v2;
  *(double *)&v6 = COERCE_DOUBLE(sub_10006A5F8((uint64_t)v2));
  v8 = v7;
  v9 = &v2[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__guidanceState];
  v10 = v2[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__guidanceState + 16];
  v11 = objc_msgSend(v2, "view");
  if (!v11)
  {
    __break(1u);
    goto LABEL_28;
  }
  v12 = v11;
  v119 = a1;
  v120 = a2;
  v121 = *(double *)&v6;
  v122 = v8;
  v123 = v9;
  objc_msgSend(v11, "safeAreaInsets");
  v14 = v13;
  v117 = v16;
  v118 = v15;
  v116 = v17;

  v192.origin.x = *(CGFloat *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__obstructedAreaAtTheTop];
  v18 = *(double *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__obstructedAreaAtTheTop + 8];
  v192.size.width = *(CGFloat *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__obstructedAreaAtTheTop
                                  + 16];
  v192.size.height = *(CGFloat *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__obstructedAreaAtTheTop
                                   + 24];
  v192.origin.y = v18;
  Height = CGRectGetHeight(v192);
  v20 = objc_msgSend(v3, "view");
  if (!v20)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  v21 = v20;
  v115 = v10;
  v114 = v14 + v18 + Height;
  objc_msgSend(v20, "bounds");
  v112 = v23;
  v113 = v22;
  v25 = v24;
  v111 = v26;

  v27 = objc_msgSend(v3, "traitCollection");
  objc_msgSend(v27, "displayScale");
  v29 = v28;

  v94 = v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics];
  v30 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics + 8];
  v93 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics + 16];
  v90 = v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics + 24];
  v32 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics + 32];
  v31 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics + 40];
  v33 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics + 48];
  v102 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics + 56];
  v34 = v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics + 64];
  v107 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics + 72];
  v106 = v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics + 80];
  v105 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics + 88];
  v104 = v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics + 96];
  v35 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics + 104];
  v36 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__metrics + 112];
  v37 = v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthDiameter + 8];
  v91 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthDiameter];
  v92 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthDiameter + 16];
  v38 = v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthDiameter + 24];
  v101 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthDiameter + 32];
  v100 = v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthDiameter + 40];
  v39 = v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthDiameter + 56];
  v103 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthDiameter + 64];
  v40 = v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthDiameter + 72];
  v108 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthDiameter + 80];
  v41 = v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthDiameter + 88];
  v110 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthDiameter + 96];
  v109 = v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthDiameter + 104];
  v98 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__topInset];
  v99 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthDiameter + 48];
  v96 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__topInset + 16];
  v97 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__topInset + 8];
  v95 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__topInset + 24];
  v42 = v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__topInset + 32];
  v43 = *(char **)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__connectionViewController];
  v44 = sub_1001E7CAC(*(_WORD *)&v43[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController__connectivity]);
  v48 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__offsetRotationProgress];
  v49 = v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__skipLocationAnimation];
  v50 = &v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__animateToLocation];
  v51 = v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__animateToLocation + 16];
  v89 = &v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__animateToLocation];
  if (v51 == 2)
  {
    v52 = v123;
    v50 = v123 + 88;
    v53 = (uint64_t *)(v123 + 96);
    LOBYTE(v51) = v123[104];
  }
  else
  {
    v53 = (uint64_t *)(v50 + 8);
    v52 = v123;
  }
  v54 = *v53;
  v55 = *(_QWORD *)v50;
  v56 = v52[17];
  v144[0] = v113;
  v144[1] = v112;
  v144[2] = v25;
  v144[3] = v111;
  *(double *)&v144[4] = v114;
  v144[5] = v118;
  v144[6] = v117;
  v144[7] = v116;
  v144[8] = v29;
  v145 = v94;
  v146 = v30;
  v147 = v93;
  v148 = v90;
  v149 = v32;
  v150 = v31;
  v151 = v33;
  v152 = v102;
  v153 = v34;
  v154 = v107;
  v155 = v106;
  v156 = v105;
  v157 = v104;
  v158 = v35;
  v159 = v36;
  v160 = v91;
  v161 = v37;
  v162 = v92;
  v163 = v38;
  v164 = v101;
  v165 = v100;
  v166 = v99;
  v167 = v39;
  v168 = v103;
  v169 = v40;
  v170 = v108;
  v171 = v41;
  v172 = v110;
  v173 = v109;
  v174 = v98;
  v175 = v97;
  v176 = v96;
  v177 = v95;
  v178 = v42;
  v179 = v44 & 1;
  v57 = v45;
  v180 = v45;
  v181 = v46 & 0x101;
  v182 = v47;
  v183 = v48;
  v184 = v49;
  v185 = v55;
  v186 = v54;
  v187 = v51;
  v188 = v121;
  v189 = v122;
  v190 = v115 != 9;
  v191 = v56;
  sub_100010638((uint64_t)v144, __src, v119, v120);
  v58 = *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__earthViewController];
  memcpy((void *)(v58 + OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController_earth), __src, 0x203uLL);
  memcpy(__dst, v127, 0x180uLL);
  sub_10006A6E8((uint64_t)__dst);
  sub_1000463DC((uint64_t)__dst, v58 + OBJC_IVAR____TtC8SOSBuddy38ConnectionAssistantEarthViewController_camera);
  v59 = v128;
  v60 = v129;
  v61 = (double *)&v43[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_centerLocation];
  v63 = *(double *)&v43[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_centerLocation];
  v62 = *(double *)&v43[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_centerLocation + 8];
  *v61 = v128;
  v61[1] = v60;
  if (v59 != v63 || v60 != v62)
  {
    v64 = objc_msgSend(v43, "view", v89);
    if (!v64)
    {
LABEL_30:
      __break(1u);
      return;
    }
    v65 = v64;
    objc_msgSend(v64, "setNeedsLayout");

  }
  v66 = (double *)&v43[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_target];
  v67 = *(double *)&v43[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_target];
  v68 = v43[OBJC_IVAR____TtC8SOSBuddy43ConnectionAssistantConnectionViewController_target + 8];
  *v66 = v121;
  *((_BYTE *)v66 + 8) = v122;
  if (v122 != 4)
  {
    if (v68 != 4 && v67 == v121 && v68 == v122)
      goto LABEL_16;
LABEL_14:
    sub_100044CFC();
    v69 = objc_msgSend(v43, "view");
    if (v69)
    {
      v70 = v69;
      objc_msgSend(v69, "setNeedsLayout");

      goto LABEL_16;
    }
    goto LABEL_29;
  }
  if (v68 != 4)
    goto LABEL_14;
LABEL_16:
  v71 = v89[16];
  if (v71 != 2 && (v130 & 1) != 0)
  {
    v124 = *(_OWORD *)v89;
    v72 = v71 & 1;
    if (qword_100315868 != -1)
      swift_once(&qword_100315868, sub_1000D96FC);
    v73 = type metadata accessor for Logger(0);
    v74 = sub_10000D744(v73, (uint64_t)qword_10033FDF0);
    v75 = Logger.logObject.getter(v74);
    v76 = static os_log_type_t.default.getter(v75);
    if (os_log_type_enabled(v75, v76))
    {
      v77 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v77 = 0;
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Location animation finished", v77, 2u);
      swift_slowDealloc(v77, -1, -1);
    }

    v3[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__locationAnimationFinished] = 1;
    *(_QWORD *)v89 = 0;
    *((_QWORD *)v89 + 1) = 0;
    v89[16] = 2;
    v78 = *((_QWORD *)v52 + 1);
    v79 = v52[16];
    v80 = v52[17];
    v81 = v52[18];
    v82 = *((_QWORD *)v52 + 3);
    v83 = v52[80];
    v84 = v52[81];
    v131[0] = *v52;
    v132 = v78;
    v133 = v79;
    v134 = v80;
    v135 = v81;
    v136 = v82;
    v85 = *((_OWORD *)v52 + 3);
    v137 = *((_OWORD *)v52 + 2);
    v138 = v85;
    v139 = *((_OWORD *)v52 + 4);
    v140 = v83;
    v141 = v84;
    v142 = v124;
    v86 = v137;
    v87 = v85;
    v88 = v139;
    v143 = v72;
    swift_bridgeObjectRetain(v139);
    swift_bridgeObjectRetain(v78);
    swift_bridgeObjectRetain(v86);
    swift_bridgeObjectRetain(v87);
    sub_100069664(v131);
    swift_bridgeObjectRelease(v88);
    swift_bridgeObjectRelease(v87);
    swift_bridgeObjectRelease(v86);
    swift_bridgeObjectRelease(v78);
  }
  sub_100068864();

}

uint64_t sub_10006A5F8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = a1 + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__guidanceState;
  if ((*(_BYTE *)(a1 + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__guidanceState + 80) & 1) != 0)
    return 0;
  v2 = *(_QWORD *)(v1 + 72);
  if (!sub_10006730C(3u, *(_QWORD *)(v1 + 8)) && !sub_10006730C(1u, *(_QWORD *)(v1 + 8)))
    sub_10006730C(2u, *(_QWORD *)(v1 + 8));
  return v2;
}

void sub_10006A684(void *a1)
{
  double v2;
  double v3;
  double v4;
  double v5;
  double v6;

  objc_msgSend(a1, "targetTimestamp");
  v3 = v2;
  objc_msgSend(a1, "targetTimestamp");
  v5 = v4;
  objc_msgSend(a1, "timestamp");
  sub_100069E48(v3, v5 - v6);
}

uint64_t sub_10006A6E8(uint64_t result)
{
  *(_BYTE *)(result + 384) = 0;
  return result;
}

_QWORD *sub_10006A6F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[4];
  v4 = a1[6];
  swift_bridgeObjectRetain(a1[8]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

_QWORD *sub_10006A744(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[8];
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

double sub_10006A798(double a1, double a2, double a3, double a4, double a5, double a6)
{
  return a1 + a6;
}

uint64_t sub_10006A7B4()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10006A7D8()
{
  uint64_t v0;

  return sub_1000683A8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10006A7E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10006A7F0(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10006A7F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B310;
  if (!qword_10031B310)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_10031B310);
  }
  return result;
}

uint64_t sub_10006A840()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  v3 = *(void (**)(uint64_t))(v1
                                      + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__viewDidLoadCallback);
  v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__viewDidLoadCallback + 8);
  swift_retain(v2);
  v3(v1);
  return swift_release(v2);
}

void sub_10006A888()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;

  v1 = v0;
  v2 = OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__displayMetrics;
  v3 = type metadata accessor for ConnectionAssistantDisplayState(0);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(_QWORD *)&v0[v2] = sub_100012C44();
  v0[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__locationAnimationFinished] = 0;
  v4 = &v0[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__animateToLocation];
  *(_QWORD *)v4 = 0;
  *((_QWORD *)v4 + 1) = 0;
  v4[16] = 2;
  v5 = OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__connectionViewController;
  *(_QWORD *)&v1[v5] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ConnectionAssistantConnectionViewController()), "init");
  *(_QWORD *)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__innerShadowView] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__displayLink] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__locationAssertion] = 0;
  *(_QWORD *)&v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__offsetRotationProgress] = 0;
  v6 = &v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__offsetRotationProgressPending];
  *(_QWORD *)v6 = 0;
  v6[8] = 1;
  v7 = &v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__obstructedAreaAtTheTop];
  *(_OWORD *)v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  v8 = &v1[OBJC_IVAR____TtC8SOSBuddy33ConnectionAssistantViewController__topInset];
  v8[32] = 0;
  *(_OWORD *)v8 = 0u;
  *((_OWORD *)v8 + 1) = 0u;

  _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0x7070757320746F6ELL, 0xED0000646574726FLL, "SOSBuddy/ConnectionAssistantViewController.swift", 48, 2, 79, 0);
  __break(1u);
}

uint64_t destroy for TryOutMessageEntryView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[3]);
  swift_bridgeObjectRelease(a1[6]);
  swift_release(a1[7]);
  swift_bridgeObjectRelease(a1[9]);
  return swift_release(a1[10]);
}

uint64_t initializeWithCopy for TryOutMessageEntryView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  v6 = a2[3];
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = *((_BYTE *)a2 + 32);
  v7 = a2[6];
  *(_QWORD *)(a1 + 40) = a2[5];
  *(_QWORD *)(a1 + 48) = v7;
  v9 = a2[7];
  v8 = a2[8];
  *(_QWORD *)(a1 + 56) = v9;
  *(_QWORD *)(a1 + 64) = v8;
  v10 = a2[9];
  v11 = a2[10];
  *(_QWORD *)(a1 + 72) = v10;
  *(_QWORD *)(a1 + 80) = v11;
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v9);
  swift_bridgeObjectRetain(v10);
  swift_retain(v11);
  return a1;
}

uint64_t *assignWithCopy for TryOutMessageEntryView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a1[2];
  v7 = a2[2];
  a1[2] = v7;
  swift_retain(v7);
  swift_release(v6);
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_retain(v8);
  swift_release(v9);
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  a1[5] = a2[5];
  v10 = a2[6];
  v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = a1[7];
  v13 = a2[7];
  a1[7] = v13;
  swift_retain(v13);
  swift_release(v12);
  a1[8] = a2[8];
  v14 = a2[9];
  v15 = a1[9];
  a1[9] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  v16 = a1[10];
  v17 = a2[10];
  a1[10] = v17;
  swift_retain(v17);
  swift_release(v16);
  return a1;
}

__n128 initializeWithTake for TryOutMessageEntryView(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t *assignWithTake for TryOutMessageEntryView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  swift_release(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_release(v5);
  *((_BYTE *)a1 + 32) = *((_BYTE *)a2 + 32);
  a1[5] = a2[5];
  swift_bridgeObjectRelease(a1[6]);
  v6 = a1[7];
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  swift_release(v6);
  a1[8] = a2[8];
  swift_bridgeObjectRelease(a1[9]);
  v7 = a1[10];
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TryOutMessageEntryView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 88))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TryOutMessageEntryView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 88) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 88) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for TryOutMessageEntryView()
{
  return &type metadata for TryOutMessageEntryView;
}

ValueMetadata *type metadata accessor for TryOutMessageEntryViewHeader()
{
  return &type metadata for TryOutMessageEntryViewHeader;
}

uint64_t sub_10006AD40(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100296918, 1);
}

uint64_t sub_10006AD50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE *v38;
  uint64_t v39;
  uint64_t v40;
  double v41;
  char v42;
  _BYTE *v43;
  uint64_t v49;
  uint64_t v50;
  uint64_t result;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[4];
  int v56;
  uint64_t v57;
  uint64_t v58;
  __int128 *v59;

  v58 = a2;
  v3 = sub_100003DB8(&qword_10031A0A0);
  __chkstk_darwin(v3, v4);
  v6 = &v55[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v57 = sub_100003DB8(&qword_10031A0A8);
  v8 = __chkstk_darwin(v57, v7);
  v10 = &v55[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8, v11);
  v13 = &v55[-v12];
  v14 = sub_100003DB8(&qword_10031A0B0);
  __chkstk_darwin(v14, v15);
  v17 = &v55[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18 = sub_100003DB8(&qword_10031A0B8);
  v19 = *(_QWORD *)(v18 - 8);
  __chkstk_darwin(v18, v20);
  v22 = &v55[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v23 = sub_100003DB8(&qword_10031A0C0);
  v25 = __chkstk_darwin(v23, v24);
  v27 = &v55[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v29 = __chkstk_darwin(v25, v28);
  v31 = &v55[-v30];
  v59 = (__int128 *)a1;
  v32 = *(_QWORD *)(a1 + 16);
  if (v32)
  {
    v33 = *(_QWORD *)(v32 + 96);
    if (v33 && (v34 = *(_QWORD *)(v33 + 16)) != 0)
    {
      v35 = 1;
      if (*(_BYTE *)(v34 + 16) == 2)
      {
        *(_QWORD *)v17 = static VerticalAlignment.center.getter(v29);
        *((_QWORD *)v17 + 1) = 0;
        v17[16] = 1;
        v36 = sub_100003DB8(&qword_10031A0E0);
        v37 = sub_10006B134(v59, &v17[*(int *)(v36 + 44)]);
        v56 = static Edge.Set.bottom.getter(v37);
        sub_10000B234((uint64_t)v17, (uint64_t)v22, &qword_10031A0B0);
        v38 = &v22[*(int *)(v18 + 36)];
        *v38 = v56;
        *(_OWORD *)(v38 + 8) = 0u;
        *(_OWORD *)(v38 + 24) = 0u;
        v38[40] = 1;
        sub_100007FF0((uint64_t)v17, &qword_10031A0B0);
        sub_10000B458((uint64_t)v22, (uint64_t)v31, &qword_10031A0B8);
        v35 = 0;
      }
    }
    else
    {
      v35 = 1;
    }
    v39 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v31, v35, 1, v18);
    *(_QWORD *)v6 = static VerticalAlignment.firstTextLineCenter.getter(v39);
    *((_QWORD *)v6 + 1) = 0;
    v6[16] = 1;
    v40 = sub_100003DB8(&qword_10031A0D0);
    sub_10006BA78((uint64_t)v59, (uint64_t *)&v6[*(int *)(v40 + 44)]);
    v42 = static Edge.Set.all.getter(v41);
    sub_10000B234((uint64_t)v6, (uint64_t)v10, &qword_10031A0A0);
    v43 = &v10[*(int *)(v57 + 36)];
    *v43 = v42;
    *(_OWORD *)(v43 + 8) = xmmword_100250400;
    __asm { FMOV            V0.2D, #8.0 }
    *(_OWORD *)(v43 + 24) = _Q0;
    v43[40] = 0;
    sub_100007FF0((uint64_t)v6, &qword_10031A0A0);
    sub_10000B458((uint64_t)v10, (uint64_t)v13, &qword_10031A0A8);
    sub_10000B234((uint64_t)v31, (uint64_t)v27, &qword_10031A0C0);
    sub_10000B234((uint64_t)v13, (uint64_t)v10, &qword_10031A0A8);
    v49 = v58;
    sub_10000B234((uint64_t)v27, v58, &qword_10031A0C0);
    v50 = sub_100003DB8(&qword_10031A0D8);
    sub_10000B234((uint64_t)v10, v49 + *(int *)(v50 + 48), &qword_10031A0A8);
    sub_100007FF0((uint64_t)v13, &qword_10031A0A8);
    sub_100007FF0((uint64_t)v31, &qword_10031A0C0);
    sub_100007FF0((uint64_t)v10, &qword_10031A0A8);
    return sub_100007FF0((uint64_t)v27, &qword_10031A0C0);
  }
  else
  {
    v52 = *((_QWORD *)v59 + 3);
    v53 = type metadata accessor for TryOutModel(0);
    v54 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v52, v53, v54);
    __break(1u);
  }
  return result;
}

uint64_t sub_10006B134@<X0>(__int128 *a1@<X0>, char *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  _OWORD *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  _OWORD *v53;
  __int128 v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  void (*v72)(char *, char *, uint64_t);
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v79;
  char *v80;
  unint64_t v81;
  char *v82;
  void (*v83)(char *, char *, uint64_t);
  void (*v84)(char *, char *, uint64_t);
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  char *v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;

  v97 = a2;
  v106 = type metadata accessor for KeyboardShortcut(0);
  v94 = *(_QWORD *)(v106 - 8);
  __chkstk_darwin(v106, v3);
  v103 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for ButtonBorderShape(0);
  v93 = *(_QWORD *)(v102 - 8);
  __chkstk_darwin(v102, v5);
  v100 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for BorderedProminentButtonStyle(0);
  v91 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v8);
  v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = sub_100003DB8(&qword_100318730);
  v87 = *(_QWORD *)(v99 - 8);
  __chkstk_darwin(v99, v11);
  v13 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101 = sub_100003DB8(&qword_100319408);
  v92 = *(_QWORD *)(v101 - 8);
  __chkstk_darwin(v101, v14);
  v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = sub_100003DB8(&qword_100319410);
  __chkstk_darwin(v98, v17);
  v19 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = sub_100003DB8(&qword_100319418);
  v105 = *(_QWORD *)(v20 - 8);
  v22 = __chkstk_darwin(v20, v21);
  v96 = (char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __chkstk_darwin(v22, v24);
  v95 = (char *)&v79 - v26;
  v28 = __chkstk_darwin(v25, v27);
  v90 = (char *)&v79 - v29;
  __chkstk_darwin(v28, v30);
  v104 = (char *)&v79 - v31;
  v32 = *a1;
  v108 = a1[1];
  v109 = v32;
  v107 = a1[2];
  v33 = (_OWORD *)swift_allocObject(&unk_1002E8A38, 64, 7);
  v34 = a1[1];
  v33[1] = *a1;
  v33[2] = v34;
  v33[3] = a1[2];
  sub_100031A88(&v109);
  sub_100031A88(&v108);
  sub_100031A88(&v107);
  v35 = Button.init(action:label:)(sub_10004796C, v33, sub_10006B89C, 0, &type metadata for Text, &protocol witness table for Text);
  BorderedProminentButtonStyle.init()(v35);
  v36 = sub_1000084FC(&qword_100318738, &qword_100318730, (uint64_t)&protocol conformance descriptor for Button<A>);
  v89 = v36;
  v88 = sub_1000052EC(&qword_100318960, (uint64_t (*)(uint64_t))&type metadata accessor for BorderedProminentButtonStyle, (uint64_t)&protocol conformance descriptor for BorderedProminentButtonStyle);
  v82 = v10;
  v37 = v99;
  v85 = v7;
  v80 = v13;
  View.buttonStyle<A>(_:)(v10, v99, v7, v36, v88);
  v91 = *(_QWORD *)(v91 + 8);
  ((void (*)(char *, uint64_t))v91)(v10, v7);
  v87 = *(_QWORD *)(v87 + 8);
  v38 = ((uint64_t (*)(char *, uint64_t))v87)(v13, v37);
  v39 = v100;
  static ButtonBorderShape.capsule.getter(v38);
  KeyPath = swift_getKeyPath(&unk_100250510);
  v41 = v98;
  v42 = (uint64_t *)&v19[*(int *)(v98 + 36)];
  v86 = sub_100003DB8(&qword_100318968);
  v43 = (char *)v42 + *(int *)(v86 + 28);
  v44 = v93;
  v84 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
  v45 = v102;
  v84(v43, v39, v102);
  *v42 = KeyPath;
  v46 = v92;
  v83 = *(void (**)(char *, char *, uint64_t))(v92 + 16);
  v47 = v101;
  v83(v19, v16, v101);
  v93 = *(_QWORD *)(v44 + 8);
  ((void (*)(char *, uint64_t))v93)(v39, v45);
  v92 = *(_QWORD *)(v46 + 8);
  v48 = v16;
  v49 = ((uint64_t (*)(char *, uint64_t))v92)(v16, v47);
  v50 = v103;
  static KeyboardShortcut.defaultAction.getter(v49);
  v81 = sub_10004784C();
  v51 = v90;
  View.keyboardShortcut(_:)(v50, v41, v81);
  v94 = *(_QWORD *)(v94 + 8);
  ((void (*)(char *, uint64_t))v94)(v50, v106);
  sub_100007FF0((uint64_t)v19, &qword_100319410);
  v52 = *(void (**)(char *, char *, uint64_t))(v105 + 32);
  v52(v104, v51, v20);
  v53 = (_OWORD *)swift_allocObject(&unk_1002E8A60, 64, 7);
  v54 = a1[1];
  v53[1] = *a1;
  v53[2] = v54;
  v53[3] = a1[2];
  sub_100031A88(&v109);
  sub_100031A88(&v108);
  sub_100031A88(&v107);
  v55 = v80;
  v56 = Button.init(action:label:)(sub_10006DBF0, v53, sub_10006BA00, 0, &type metadata for Text, &protocol witness table for Text);
  v57 = v82;
  BorderedProminentButtonStyle.init()(v56);
  v58 = v99;
  v59 = v85;
  View.buttonStyle<A>(_:)(v57, v99, v85, v89, v88);
  ((void (*)(char *, uint64_t))v91)(v57, v59);
  v60 = ((uint64_t (*)(char *, uint64_t))v87)(v55, v58);
  v61 = v100;
  static ButtonBorderShape.capsule.getter(v60);
  v62 = swift_getKeyPath(&unk_100250510);
  v63 = v98;
  v64 = (uint64_t *)&v19[*(int *)(v98 + 36)];
  v65 = v102;
  v84((char *)v64 + *(int *)(v86 + 28), v61, v102);
  *v64 = v62;
  v66 = v101;
  v83(v19, v48, v101);
  ((void (*)(char *, uint64_t))v93)(v61, v65);
  v67 = ((uint64_t (*)(char *, uint64_t))v92)(v48, v66);
  v68 = v103;
  static KeyboardShortcut.defaultAction.getter(v67);
  v69 = v95;
  View.keyboardShortcut(_:)(v68, v63, v81);
  ((void (*)(char *, uint64_t))v94)(v68, v106);
  sub_100007FF0((uint64_t)v19, &qword_100319410);
  v52(v51, v69, v20);
  v71 = v104;
  v70 = v105;
  v72 = *(void (**)(char *, char *, uint64_t))(v105 + 16);
  v73 = v69;
  v72(v69, v104, v20);
  v74 = v96;
  v72(v96, v51, v20);
  v75 = v97;
  v72(v97, v73, v20);
  v76 = sub_100003DB8(&qword_10031A0E8);
  v72(&v75[*(int *)(v76 + 48)], v74, v20);
  v77 = *(void (**)(char *, uint64_t))(v70 + 8);
  v77(v51, v20);
  v77(v71, v20);
  v77(v74, v20);
  return ((uint64_t (*)(char *, uint64_t))v77)(v73, v20);
}

uint64_t sub_10006B89C@<X0>(uint64_t a1@<X8>)
{
  return sub_10006BA1C(a1);
}

void sub_10006B8B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t Strong;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    v2 = *(_QWORD *)(v1 + 96);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 16);
      if (v3)
      {
        Strong = swift_unknownObjectWeakLoadStrong(v3+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_progressDelegate);
        if (Strong)
        {
          v5 = Strong;
          v6 = *(_BYTE *)(v3
                        + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_connected);
          v7 = type metadata accessor for MessageSimulationEngineImplementation.OnState(0);
          v8 = swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
          swift_unknownObjectRetain(v5);
          swift_retain(v3);
          swift_retain(v2);
          v9 = sub_100238E98(v5, v6, v8);
          swift_unknownObjectRelease(v5);
          v10 = *(_QWORD *)(v2 + 16);
          *(_QWORD *)(v2 + 16) = v9;
          swift_release(v10);
          v11 = *(_QWORD *)(v2 + 16);
          if (v11)
          {
            swift_retain(*(_QWORD *)(v2 + 16));
            sub_100039064();
            swift_release(v11);
          }
          sub_100237F48();
          swift_release(v2);
          swift_release(v3);
          swift_unknownObjectRelease(v5);
        }
      }
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 24);
    v13 = type metadata accessor for TryOutModel(0);
    v14 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    EnvironmentObject.error()(0, v12, v13, v14);
    __break(1u);
  }
}

uint64_t sub_10006BA00@<X0>(uint64_t a1@<X8>)
{
  return sub_10006BA1C(a1);
}

uint64_t sub_10006BA1C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v2 = LocalizedStringKey.init(stringLiteral:)();
  result = Text.init(_:tableName:bundle:comment:)(v2);
  *(_QWORD *)a1 = result;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5 & 1;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

void sub_10006BA78(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  id v20;
  char v21;
  __n128 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  UIContentSizeCategory v53;
  BOOL v54;
  uint64_t KeyPath;
  id v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  id v73;
  char v74;
  double v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  __n128 v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  id v92;
  void (*v93)(char *, char *, uint64_t);
  char *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  double v102;
  void (*v103)(char *, uint64_t, double);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  UIContentSizeCategory v124;
  uint64_t v125;
  uint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  BOOL v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  char v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  double v138;
  __int16 v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  char v143;
  uint64_t v144;
  uint64_t v145;

  v108 = sub_100003DB8(&qword_100316A20);
  __chkstk_darwin(v108, v4);
  v121 = (char *)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8(&qword_10031A0F0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __chkstk_darwin(v9, v12);
  v15 = (char *)&v107 - v14;
  __chkstk_darwin(v13, v16);
  v18 = (char *)&v107 - v17;
  v19 = *(_QWORD *)(a1 + 32);
  if (v19)
  {
    v116 = a2;
    v123 = v19;
    v20 = *(id *)(v19 + 112);
    v124 = UIContentSizeCategoryAccessibilityExtraLarge;
    v21 = static UIContentSizeCategory.>= infix(_:_:)(v20, UIContentSizeCategoryAccessibilityExtraLarge);

    v122 = v7;
    v114 = v11;
    v113 = v18;
    v109 = v15;
    if ((v21 & 1) != 0)
    {
      v112 = 0;
      v111 = 0;
      v23 = 0;
      v110 = 0;
    }
    else
    {
      v24 = Image.init(systemName:)(0x7269632E6F666E69, 0xEB00000000656C63, v22);
      v25 = Text.init(_:)(v24);
      v27 = v26;
      v29 = v28;
      v31 = v30 & 1;
      v32 = static Font.footnote.getter();
      v112 = Text.font(_:)(v32, v25, v27, v31, v29);
      v111 = v33;
      v35 = v34;
      v110 = v36;
      swift_release(v32);
      v23 = v35 & 1;
      sub_10002B438(v25, v27, v31);
      swift_bridgeObjectRelease(v29);
    }
    v37 = LocalizedStringKey.init(stringLiteral:)(0xD000000000000037, 0x8000000100265840);
    v38 = Text.init(_:tableName:bundle:comment:)(v37);
    v40 = v39;
    v42 = v41;
    v44 = v43 & 1;
    v45 = static Font.footnote.getter();
    static Font.Weight.bold.getter();
    v46 = Font.weight(_:)(v45);
    swift_release(v45);
    v120 = Text.font(_:)(v46, v38, v40, v44, v42);
    v119 = v47;
    v118 = v48;
    v50 = v49;
    swift_release(v46);
    sub_10002B438(v38, v40, v44);
    swift_bridgeObjectRelease(v42);
    v51 = v123;
    v52 = *(id *)(v123 + 112);
    v53 = v124;
    LOBYTE(v40) = static UIContentSizeCategory.>= infix(_:_:)(v52, v124);

    v54 = (v40 & 1) == 0;
    KeyPath = swift_getKeyPath(&unk_100250540);
    v56 = *(id *)(v51 + 112);
    v57 = static Alignment.center.getter(v56);
    v59 = v58;
    v60 = static UIContentSizeCategory.>= infix(_:_:)(v56, v53);
    v115 = v6;
    v107 = v23;
    v117 = KeyPath;
    if ((v60 & 1) != 0
      && (v61 = static Alignment.center.getter(v60),
          v63 = static Alignment.== infix(_:_:)(v57, v59, v61, v62),
          (v63 & 1) != 0))
    {
      v65 = v50;
      v57 = static Alignment.leading.getter(v63, v64);
      v59 = v66;
    }
    else
    {
      v65 = v50;
    }

    _FrameLayout.init(width:height:alignment:)(&v140, 0, 1, 0, 1, v57, v59);
    v67 = v140;
    v68 = v141;
    v69 = v142;
    v70 = v143;
    v72 = v144;
    v71 = v145;
    v73 = *(id *)(v123 + 112);
    v74 = static UIContentSizeCategory.>= infix(_:_:)(v73, v124);

    if ((v74 & 1) != 0)
      v75 = 1.0;
    else
      v75 = 0.5;
    v76 = swift_getKeyPath(&unk_100250570);
    v125 = v120;
    v126 = v119;
    v127 = v118 & 1;
    v128 = v65;
    v129 = v117;
    v130 = v54;
    v131 = v67;
    v132 = v68;
    v133 = v69;
    v134 = v70;
    v135 = v72;
    v136 = v71;
    v137 = v76;
    v138 = v75;
    v139 = 256;
    v77 = enum case for DynamicTypeSize.xxxLarge(_:);
    v78 = type metadata accessor for DynamicTypeSize(0);
    v79 = (uint64_t)v121;
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 104))(v121, v77, v78);
    v80 = sub_1000052EC(&qword_100316A30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
    a1 = v78;
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v79, v79, v78, v80) & 1) != 0)
    {
      v81 = sub_100003DB8(&qword_10031A0F8);
      v82 = sub_10002B614(&qword_10031A100, &qword_10031A0F8, (void (*)(void))sub_10006DC08);
      v83 = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
      v84 = v109;
      View.dynamicTypeSize<A>(_:)(v79, v81, v108, v82, v83);
      sub_100007FF0(v79, &qword_100316A20);
      v85 = v128;
      v86 = v129;
      v87 = v137;
      sub_10002B438(v125, v126, v127);
      swift_release(v87);
      swift_release(v86);
      v88 = swift_bridgeObjectRelease(v85);
      v89 = v122;
      v90 = v113;
      v91 = v115;
      (*(void (**)(char *, char *, uint64_t, __n128))(v122 + 32))(v113, v84, v115, v88);
      v92 = *(id *)(v123 + 112);
      LODWORD(v124) = static UIContentSizeCategory.>= infix(_:_:)(v92, v124);

      v93 = *(void (**)(char *, char *, uint64_t))(v89 + 16);
      v94 = v114;
      v93(v114, v90, v91);
      v95 = v116;
      v96 = v112;
      v97 = v111;
      *v116 = v112;
      v95[1] = v97;
      v98 = v107;
      v99 = v110;
      v95[2] = v107;
      v95[3] = v99;
      v100 = sub_100003DB8(&qword_10031A128);
      v93((char *)v95 + *(int *)(v100 + 48), v94, v91);
      v101 = (char *)v95 + *(int *)(v100 + 64);
      *(_QWORD *)v101 = 0;
      v101[8] = 0;
      v101[9] = (v124 & 1) == 0;
      v102 = sub_10006DCAC(v96, v97, v98, v99);
      v103 = *(void (**)(char *, uint64_t, double))(v122 + 8);
      v103(v90, v91, v102);
      ((void (*)(char *, uint64_t))v103)(v94, v91);
      sub_10006DCDC(v96, v97, v98, v99);
      return;
    }
    __break(1u);
  }
  v104 = *(_QWORD *)(a1 + 40);
  v105 = type metadata accessor for UIMetrics();
  v106 = sub_1000052EC((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics, (uint64_t)&unk_10024D2FC);
  EnvironmentObject.error()(0, v104, v105, v106);
  __break(1u);
}

uint64_t sub_10006C1E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _OWORD *v2;
  __int128 v4;
  uint64_t v5;
  _OWORD v7[3];

  v4 = v2[1];
  v7[0] = *v2;
  v7[1] = v4;
  v7[2] = v2[2];
  *(_QWORD *)a2 = static HorizontalAlignment.center.getter(a1);
  *(_QWORD *)(a2 + 8) = 0;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = sub_100003DB8(&qword_10031A098);
  return sub_10006AD50((uint64_t)v7, a2 + *(int *)(v5 + 44));
}

uint64_t sub_10006C240@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t KeyPath;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  _OWORD *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v60;
  char *v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  __n128 v87;
  uint64_t result;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _OWORD *v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char v105;
  _OWORD v106[13];
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  _OWORD v121[2];
  uint64_t v122;

  v95 = type metadata accessor for RoundedRectangle(0);
  __chkstk_darwin(v95, v3);
  v5 = (char *)&v92 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8(&qword_10031A130);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = sub_100003DB8(&qword_10031A138);
  __chkstk_darwin(v92, v10);
  v12 = (uint64_t *)((char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for LayoutDirection(0);
  v93 = *(_QWORD *)(v13 - 8);
  v94 = v13;
  __chkstk_darwin(v13, v14);
  v16 = (char *)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_100003DB8(&qword_10031A140);
  __chkstk_darwin(v17, v18);
  v20 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = sub_100003DB8(&qword_10031A148);
  __chkstk_darwin(v21, v22);
  v24 = (char *)&v92 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = sub_100003DB8(&qword_10031A150);
  v27 = __chkstk_darwin(v25, v26);
  v30 = (char *)&v92 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = *(_QWORD *)v1;
  if (*(_QWORD *)v1)
  {
    v32 = *(_QWORD *)(v31 + 96);
    v102 = v24;
    v103 = a1;
    v100 = v21;
    v101 = v27;
    v98 = v30;
    v99 = v28;
    v96 = v31;
    v97 = v5;
    if (v32 && (v33 = *(_QWORD *)(v32 + 16)) != 0)
    {
      if (*(_BYTE *)(v33 + 16) == 2)
      {
        v34 = 1;
      }
      else
      {
        v35 = v33
            + OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_messagesInProgress;
        swift_beginAccess(v33+ OBJC_IVAR____TtCC8SOSBuddy37MessageSimulationEngineImplementationP33_823280F1246CE8B17C8172210A2C70437OnState_messagesInProgress, &v104, 0, 0);
        v34 = *(_QWORD *)(*(_QWORD *)v35 + 16) > 0x3FuLL;
      }
    }
    else
    {
      v34 = 0;
    }
    *(_QWORD *)v20 = static VerticalAlignment.bottom.getter();
    *((_QWORD *)v20 + 1) = 0;
    v20[16] = 1;
    v36 = &v20[*(int *)(sub_100003DB8(&qword_10031A158) + 44)];
    v37 = static Alignment.bottom.getter();
    v39 = v38;
    sub_10006C8B4(v1, v34, (uint64_t)v106);
    v118 = v106[10];
    v119 = v106[11];
    v120 = v106[12];
    v114 = v106[6];
    v115 = v106[7];
    v116 = v106[8];
    v117 = v106[9];
    v110 = v106[2];
    v111 = v106[3];
    v112 = v106[4];
    v113 = v106[5];
    v108 = v106[0];
    v109 = v106[1];
    *(_QWORD *)&v107 = v37;
    *((_QWORD *)&v107 + 1) = v39;
    KeyPath = swift_getKeyPath(&unk_1002505A0);
    v42 = v93;
    v41 = v94;
    (*(void (**)(char *, _QWORD, uint64_t))(v93 + 104))(v16, enum case for LayoutDirection.leftToRight(_:), v94);
    (*(void (**)(char *, char *, uint64_t))(v42 + 16))((char *)v12 + *(int *)(v92 + 28), v16, v41);
    *v12 = KeyPath;
    v43 = sub_100003DB8(&qword_10031A160);
    sub_10000B234((uint64_t)v12, (uint64_t)&v36[*(int *)(v43 + 36)], &qword_10031A138);
    v44 = v118;
    *((_OWORD *)v36 + 10) = v117;
    *((_OWORD *)v36 + 11) = v44;
    v45 = v120;
    *((_OWORD *)v36 + 12) = v119;
    *((_OWORD *)v36 + 13) = v45;
    v46 = v114;
    *((_OWORD *)v36 + 6) = v113;
    *((_OWORD *)v36 + 7) = v46;
    v47 = v116;
    *((_OWORD *)v36 + 8) = v115;
    *((_OWORD *)v36 + 9) = v47;
    v48 = v110;
    *((_OWORD *)v36 + 2) = v109;
    *((_OWORD *)v36 + 3) = v48;
    v49 = v112;
    *((_OWORD *)v36 + 4) = v111;
    *((_OWORD *)v36 + 5) = v49;
    v50 = v108;
    *(_OWORD *)v36 = v107;
    *((_OWORD *)v36 + 1) = v50;
    sub_10006DD14(&v107);
    sub_100007FF0((uint64_t)v12, &qword_10031A138);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v16, v41);
    sub_10006DDE0(v106);
    v51 = v97;
    v52 = (char *)v97 + *(int *)(v95 + 20);
    v53 = enum case for RoundedCornerStyle.continuous(_:);
    v54 = type metadata accessor for RoundedCornerStyle(0);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 104))(v52, v53, v54);
    __asm { FMOV            V0.2D, #20.0 }
    *v51 = _Q0;
    if (qword_100315778 != -1)
      swift_once(&qword_100315778, sub_10005112C);
    v60 = qword_10033FC30;
    swift_retain(qword_10033FC30);
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v121, 0, 0, _swiftEmptyArrayStorage, 1.0, 10.0, 0.0);
    sub_10002C428((uint64_t)v51, (uint64_t)v9);
    v61 = &v9[*(int *)(sub_100003DB8(&qword_10031A168) + 36)];
    v62 = v121[1];
    *(_OWORD *)v61 = v121[0];
    *((_OWORD *)v61 + 1) = v62;
    *((_QWORD *)v61 + 4) = v122;
    v63 = sub_100003DB8(&qword_10031A170);
    *(_QWORD *)&v9[*(int *)(v63 + 52)] = v60;
    *(_WORD *)&v9[*(int *)(v63 + 56)] = 256;
    v64 = static Alignment.center.getter(v63);
    v66 = v65;
    v67 = (uint64_t *)&v9[*(int *)(sub_100003DB8(&qword_10031A178) + 36)];
    *v67 = v64;
    v67[1] = v66;
    v68 = sub_10002C46C((uint64_t)v51);
    v69 = static Alignment.center.getter(v68);
    v71 = v70;
    v72 = v100;
    v73 = (uint64_t)v102;
    v74 = (uint64_t)&v102[*(int *)(v100 + 36)];
    sub_10000B234((uint64_t)v9, v74, &qword_10031A130);
    v75 = (uint64_t *)(v74 + *(int *)(sub_100003DB8(&qword_10031A180) + 36));
    *v75 = v69;
    v75[1] = v71;
    sub_10000B234((uint64_t)v20, v73, &qword_10031A140);
    sub_100007FF0((uint64_t)v9, &qword_10031A130);
    sub_100007FF0((uint64_t)v20, &qword_10031A140);
    v76 = *(_QWORD *)(v96 + 96);
    if (v76)
    {
      v77 = *(_QWORD *)(v76 + 16);
      v78 = v103;
      v79 = v101;
      if (v77)
        LOBYTE(v77) = *(_BYTE *)(v77 + 16);
    }
    else
    {
      LOBYTE(v77) = 3;
      v78 = v103;
      v79 = v101;
    }
    v105 = v77;
    v80 = swift_allocObject(&unk_1002E8A88, 104, 7);
    v81 = *(_OWORD *)(v1 + 48);
    *(_OWORD *)(v80 + 48) = *(_OWORD *)(v1 + 32);
    *(_OWORD *)(v80 + 64) = v81;
    *(_OWORD *)(v80 + 80) = *(_OWORD *)(v1 + 64);
    *(_QWORD *)(v80 + 96) = *(_QWORD *)(v1 + 80);
    v82 = *(_OWORD *)(v1 + 16);
    *(_OWORD *)(v80 + 16) = *(_OWORD *)v1;
    *(_OWORD *)(v80 + 32) = v82;
    sub_10006DEB4((uint64_t *)v1);
    v83 = sub_100003DB8(&qword_10031A188);
    v84 = sub_10006DF30();
    v85 = sub_10006DFCC();
    v86 = v98;
    View.onChange<A>(of:initial:_:)(&v105, 0, sub_10006DEAC, v80, v72, v83, v84, v85, v87);
    swift_release(v80);
    sub_100007FF0(v73, &qword_10031A148);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v99 + 32))(v78, v86, v79);
  }
  else
  {
    v89 = *(_QWORD *)(v1 + 8);
    v90 = type metadata accessor for TryOutModel(0);
    v91 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v89, v90, v91);
    __break(1u);
  }
  return result;
}

__n128 sub_10006C8B4@<Q0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 result;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __n128 v20;
  __n128 v21;
  _BYTE v22[24];
  _BYTE v23[40];
  uint64_t v24;

  v6 = static VerticalAlignment.center.getter(a1);
  sub_10006C9B4(a2, &v21);
  v7 = *(_QWORD *)v22;
  v19 = *(_OWORD *)&v22[8];
  v20 = v21;
  v17 = *(_OWORD *)&v23[16];
  v18 = *(_OWORD *)v23;
  v9 = static VerticalAlignment.center.getter(v8);
  sub_10006CA70(a1, a2, (uint64_t)&v21);
  result = v21;
  v11 = *(_OWORD *)v22;
  v12 = *(_QWORD *)&v22[16];
  v13 = v23[0];
  v14 = v24;
  v15 = *(_OWORD *)&v23[8];
  v16 = *(_OWORD *)&v23[24];
  *(_QWORD *)a3 = v6;
  *(_QWORD *)(a3 + 8) = 0;
  *(_BYTE *)(a3 + 16) = 1;
  *(__n128 *)(a3 + 24) = v20;
  *(_QWORD *)(a3 + 40) = v7;
  *(_OWORD *)(a3 + 48) = v19;
  *(_OWORD *)(a3 + 64) = v18;
  *(_OWORD *)(a3 + 80) = v17;
  *(_QWORD *)(a3 + 96) = v9;
  *(_QWORD *)(a3 + 104) = 0;
  *(_BYTE *)(a3 + 112) = 1;
  *(__n128 *)(a3 + 120) = result;
  *(_OWORD *)(a3 + 136) = v11;
  *(_QWORD *)(a3 + 152) = v12;
  *(_BYTE *)(a3 + 160) = v13;
  *(_OWORD *)(a3 + 168) = v15;
  *(_OWORD *)(a3 + 184) = v16;
  *(_QWORD *)(a3 + 200) = v14;
  return result;
}

__n128 sub_10006C9B4@<Q0>(char a1@<W1>, __n128 *a2@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t KeyPath;
  uint64_t v8;
  __n128 result;
  __n128 v10;
  __n128 v11;
  unint64_t v12;
  unint64_t v13;

  v4 = sub_100003DB8(&qword_10031A1B0);
  State.projectedValue.getter(&v11, v4);
  v10 = v11;
  v5 = v12;
  v6 = v13;
  KeyPath = swift_getKeyPath(&unk_1002505D0);
  v8 = swift_allocObject(&unk_1002E8B00, 17, 7);
  *(_BYTE *)(v8 + 16) = a1;
  result = v10;
  *a2 = v10;
  a2[1].n128_u64[0] = v5;
  a2[1].n128_u64[1] = v6;
  a2[2].n128_u64[0] = KeyPath;
  a2[2].n128_u64[1] = (unint64_t)sub_10006E628;
  a2[3].n128_u64[0] = v8;
  a2[3].n128_u64[1] = (unint64_t)ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t sub_10006CA70@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  BOOL v13;
  __int128 v14;
  uint64_t v15;
  uint64_t KeyPath;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v20 = *(_OWORD *)(a1 + 40);
  v21 = *(_QWORD *)(a1 + 56);
  v6 = sub_100003DB8(&qword_10031A1B0);
  State.projectedValue.getter(&v22, v6);
  v7 = v22;
  v8 = v23;
  v9 = v24;
  v10 = swift_allocObject(&unk_1002E8AB0, 104, 7);
  v11 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v10 + 48) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v10 + 64) = v11;
  *(_OWORD *)(v10 + 80) = *(_OWORD *)(a1 + 64);
  *(_QWORD *)(v10 + 96) = *(_QWORD *)(a1 + 80);
  v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v10 + 16) = *(_OWORD *)a1;
  *(_OWORD *)(v10 + 32) = v12;
  if ((a2 & 1) != 0)
  {
    sub_10006DEB4((uint64_t *)a1);
    v13 = 1;
  }
  else
  {
    v22 = *(_OWORD *)(a1 + 64);
    v23 = *(_QWORD *)(a1 + 80);
    sub_10006DEB4((uint64_t *)a1);
    State.wrappedValue.getter(&v20, v6);
    v14 = v20;
    swift_bridgeObjectRelease(*((_QWORD *)&v20 + 1));
    v15 = HIBYTE(*((_QWORD *)&v14 + 1)) & 0xFLL;
    if ((*((_QWORD *)&v14 + 1) & 0x2000000000000000) == 0)
      v15 = v14 & 0xFFFFFFFFFFFFLL;
    v13 = v15 == 0;
  }
  KeyPath = swift_getKeyPath(&unk_1002505D0);
  v17 = swift_allocObject(&unk_1002E8AD8, 17, 7);
  *(_BYTE *)(v17 + 16) = v13;
  *(_OWORD *)a3 = v7;
  *(_QWORD *)(a3 + 16) = v8;
  *(_QWORD *)(a3 + 24) = v9;
  *(_QWORD *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 40) = 1;
  *(_QWORD *)(a3 + 48) = sub_10006E088;
  *(_QWORD *)(a3 + 56) = v10;
  *(_QWORD *)(a3 + 64) = KeyPath;
  *(_QWORD *)(a3 + 72) = sub_10006E0A8;
  *(_QWORD *)(a3 + 80) = v17;
  swift_retain(v7);
  swift_retain(*((_QWORD *)&v7 + 1));
  swift_release(v18);
  return swift_release(v7);
}

uint64_t sub_10006CBFC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __n128 v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  uint64_t v23;

  v2 = type metadata accessor for UUID(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *a1;
  if (*a1)
  {
    v8 = *(_QWORD *)(v7 + 96);
    if (v8)
    {
      swift_retain(*(_QWORD *)(v7 + 96));
      UUID.init()(v9);
      v22 = *((_OWORD *)a1 + 4);
      v23 = a1[10];
      v10 = sub_100003DB8(&qword_10031A1B0);
      State.wrappedValue.getter(&v20, v10);
      v11 = v21;
      v12 = *(_QWORD *)(v8 + 16);
      if (v12)
      {
        v13 = v20;
        swift_retain(*(_QWORD *)(v8 + 16));
        sub_1000395D0((uint64_t)v6, v13, v11, 0);
        swift_release(v8);
        swift_bridgeObjectRelease(v11);
        swift_release(v12);
      }
      else
      {
        swift_release(v8);
        v14 = swift_bridgeObjectRelease(v11);
      }
      (*(void (**)(char *, uint64_t, __n128))(v3 + 8))(v6, v2, v14);
    }
    v22 = *((_OWORD *)a1 + 4);
    v23 = a1[10];
    v20 = 0;
    v21 = 0xE000000000000000;
    v15 = sub_100003DB8(&qword_10031A1B0);
    return State.wrappedValue.setter(&v20, v15);
  }
  else
  {
    v17 = a1[1];
    v18 = type metadata accessor for TryOutModel(0);
    v19 = sub_1000052EC(&qword_10031A0C8, type metadata accessor for TryOutModel, (uint64_t)&unk_10024D2FC);
    result = EnvironmentObject.error()(0, v17, v18, v19);
    __break(1u);
  }
  return result;
}

void sub_10006CD98(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  _QWORD v10[2];
  __int128 v11;
  uint64_t v12;

  if (*a2 == 2)
  {
    if (qword_100315860 != -1)
      swift_once(&qword_100315860, sub_1000D96D0);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10000D744(v4, (uint64_t)qword_10033FDD8);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Transcript is finished, clearing the state", v8, 2u);
      swift_slowDealloc(v8, -1, -1);
    }

    v11 = *(_OWORD *)(a3 + 64);
    v12 = *(_QWORD *)(a3 + 80);
    v10[0] = 0;
    v10[1] = 0xE000000000000000;
    v9 = sub_100003DB8(&qword_10031A1B0);
    State.wrappedValue.setter(v10, v9);
  }
}

uint64_t sub_10006CEB0@<X0>(uint64_t a1@<X8>)
{
  return sub_10006C240(a1);
}

uint64_t sub_10006CEF8(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_1002968F0, 1);
}

uint64_t sub_10006CF0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t KeyPath;
  uint64_t v37;
  char *v38;
  double v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  __n128 v52;
  char *v53;
  uint64_t v54;
  void (*v55)(uint64_t *);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  void (**v62)(uint64_t *);
  void (*v63)(char *, uint64_t, __n128);
  __n128 v64;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  Swift::String v89;
  Swift::String v90;

  v80 = a4;
  v67 = a3;
  v66 = a2;
  v79 = a5;
  v8 = sub_100003DB8(&qword_10031A230);
  v9 = *(_QWORD *)(v8 - 8);
  v75 = v8;
  v76 = v9;
  __chkstk_darwin(v8, v10);
  v74 = (char *)&v66 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_10031A238);
  v77 = *(_QWORD *)(v12 - 8);
  v78 = v12;
  __chkstk_darwin(v12, v13);
  v73 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_100003DB8(&qword_100318340);
  v15 = *(_QWORD *)(v71 - 8);
  __chkstk_darwin(v71, v16);
  v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v68 = sub_100003DB8(&qword_100318348);
  __chkstk_darwin(v68, v19);
  v21 = (char *)&v66 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = sub_100003DB8(&qword_10031A240);
  __chkstk_darwin(v69, v22);
  v24 = (char *)&v66 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = sub_100003DB8(&qword_10031A248);
  __chkstk_darwin(v72, v25);
  v70 = (uint64_t)&v66 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v90._countAndFlagsBits = 0xD000000000000055;
  v90._object = (void *)0x8000000100265970;
  v28._object = (void *)0x8000000100265950;
  v28._countAndFlagsBits = 0xD000000000000011;
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  v30 = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v90);

  v89 = v30;
  v81 = a1;
  v82 = a2;
  v83 = a3;
  v84 = v80;
  v31 = sub_100003DB8(&qword_10031ED10);
  Binding.projectedValue.getter(&v85, v31);
  v32 = v85;
  v33 = v86;
  v34 = v87;
  v35 = v88;
  sub_10002B3F4();
  TextField<>.init<A>(_:text:axis:)(&v89, v32, v33, v34, v35, 1);
  KeyPath = swift_getKeyPath(&unk_100250770);
  v37 = v71;
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v21, v18, v71);
  v38 = &v21[*(int *)(v68 + 36)];
  *(_QWORD *)v38 = KeyPath;
  *((_QWORD *)v38 + 1) = 5;
  v38[16] = 0;
  v39 = (*(double (**)(char *, uint64_t))(v15 + 8))(v18, v37);
  LOBYTE(KeyPath) = static Edge.Set.all.getter(v39);
  sub_10000B234((uint64_t)v21, (uint64_t)v24, &qword_100318348);
  v40 = &v24[*(int *)(v69 + 36)];
  *v40 = KeyPath;
  *(_OWORD *)(v40 + 8) = xmmword_100250410;
  *(_OWORD *)(v40 + 24) = xmmword_100250420;
  v40[40] = 0;
  v41 = sub_100007FF0((uint64_t)v21, &qword_100318348);
  v42 = static Font.body.getter(v41);
  v43 = swift_getKeyPath(&unk_100250710);
  v44 = v70;
  sub_10000B234((uint64_t)v24, v70, &qword_10031A240);
  v45 = (uint64_t *)(v44 + *(int *)(v72 + 36));
  *v45 = v43;
  v45[1] = v42;
  sub_100007FF0((uint64_t)v24, &qword_10031A240);
  v46 = a1;
  v47 = v66;
  v85 = a1;
  v86 = v66;
  v48 = v67;
  v49 = v80;
  v87 = v67;
  v88 = v80;
  Binding.wrappedValue.getter(&v81);
  v50 = v82;
  v85 = v81;
  v86 = v82;
  v51 = v74;
  Sequence.publisher.getter(&type metadata for String, &protocol witness table for String);
  v52 = swift_bridgeObjectRelease(v50);
  v53 = v73;
  v54 = v75;
  Publishers.Sequence.collect()(v75, v52);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v51, v54);
  v55 = (void (*)(uint64_t *))swift_allocObject(&unk_1002E8C50, 48, 7);
  *((_QWORD *)v55 + 2) = v46;
  *((_QWORD *)v55 + 3) = v47;
  *((_QWORD *)v55 + 4) = v48;
  *((_QWORD *)v55 + 5) = v49;
  v56 = v79;
  sub_10000B234(v44, v79, &qword_10031A248);
  v57 = sub_100003DB8(&qword_10031A250);
  v58 = v77;
  v59 = v53;
  v60 = v53;
  v61 = v78;
  (*(void (**)(uint64_t, char *, uint64_t))(v77 + 16))(v56 + *(int *)(v57 + 52), v59, v78);
  v62 = (void (**)(uint64_t *))(v56 + *(int *)(v57 + 56));
  *v62 = sub_10006E550;
  v62[1] = v55;
  v63 = *(void (**)(char *, uint64_t, __n128))(v58 + 8);
  swift_retain(v46);
  swift_retain(v47);
  v64 = swift_bridgeObjectRetain(v49);
  v63(v60, v61, v64);
  return sub_100007FF0(v44, &qword_10031A248);
}

void sub_10006D418(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __n128 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v9 = *a1;
  v19 = a2;
  v20 = a3;
  v21 = a4;
  v22 = a5;
  v10 = sub_100003DB8(&qword_10031ED10);
  Binding.wrappedValue.getter(&v23);
  v11 = v24;
  v12 = String.count.getter(v23, v24);
  swift_bridgeObjectRelease(v11);
  if (v12 >= 161)
  {
    v13 = *(_QWORD *)(v9 + 16);
    if (v13 >= 0xA0)
      v13 = 160;
    v19 = v9;
    v20 = v9 + 32;
    v21 = 0;
    v22 = (2 * v13) | 1;
    swift_bridgeObjectRetain(v9);
    v14 = sub_100003DB8(&qword_10031A258);
    v15 = sub_1000084FC(&qword_10031A260, &qword_10031A258, (uint64_t)&protocol conformance descriptor for ArraySlice<A>);
    v16 = String.init<A>(_:)(&v19, v14, v15);
    v19 = a2;
    v20 = a3;
    v21 = a4;
    v22 = a5;
    v23 = v16;
    v24 = v17;
    Binding.wrappedValue.setter(&v23, v10, v18);
  }
}

uint64_t sub_10006D52C@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_10006CF0C(*v1, v1[1], v1[2], v1[3], a1);
}

uint64_t sub_10006D538@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v24;
  uint64_t v25;
  uint64_t KeyPath;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  __n128 v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  double v48;
  uint64_t v49;
  uint64_t v50;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;

  v58 = a1;
  v57 = sub_100003DB8(&qword_100316A20);
  __chkstk_darwin(v57, v1);
  v60 = (char *)&v52 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = sub_100003DB8(&qword_10031A218);
  __chkstk_darwin(v59, v3);
  v5 = (uint64_t *)((char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for Image.Scale(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_100003DB8(&qword_10031A208);
  __chkstk_darwin(v11, v12);
  v14 = (uint64_t *)((char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = sub_100003DB8(&qword_10031A1F0);
  __chkstk_darwin(v15, v16);
  v18 = (char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_100003DB8(&qword_10031A228);
  v54 = *(_QWORD *)(v19 - 8);
  v55 = v19;
  __chkstk_darwin(v19, v20);
  v52 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = sub_100003DB8(&qword_10031A1E8);
  __chkstk_darwin(v53, v22);
  v56 = (char *)&v52 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = Image.init(systemName:)(0xD000000000000014, 0x8000000100265930, v24);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for Image.Scale.large(_:), v6);
  KeyPath = swift_getKeyPath(&unk_1002506E0);
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))((char *)v5 + *(int *)(v59 + 28), v10, v6);
  *v5 = KeyPath;
  v27 = v15;
  v28 = (uint64_t)v60;
  sub_10000B234((uint64_t)v5, (uint64_t)v14 + *(int *)(v11 + 36), &qword_10031A218);
  *v14 = v25;
  swift_retain(v25);
  sub_100007FF0((uint64_t)v5, &qword_10031A218);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v29 = swift_release(v25);
  v30 = static Font.title2.getter(v29);
  static Font.Weight.bold.getter();
  v31 = Font.weight(_:)(v30);
  swift_release(v30);
  v32 = swift_getKeyPath(&unk_100250710);
  sub_10000B234((uint64_t)v14, (uint64_t)v18, &qword_10031A208);
  v33 = (uint64_t *)&v18[*(int *)(v27 + 36)];
  *v33 = v32;
  v33[1] = v31;
  sub_100007FF0((uint64_t)v14, &qword_10031A208);
  v34 = enum case for DynamicTypeSize.accessibility2(_:);
  v35 = type metadata accessor for DynamicTypeSize(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(v28, v34, v35);
  v36 = sub_1000052EC(&qword_100316A30, (uint64_t (*)(uint64_t))&type metadata accessor for DynamicTypeSize, (uint64_t)&protocol conformance descriptor for DynamicTypeSize);
  if ((dispatch thunk of static Equatable.== infix(_:_:)(v28, v28, v35, v36) & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  v37 = sub_10006E3F4();
  v38 = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
  v25 = (uint64_t)v52;
  View.dynamicTypeSize<A>(_:)(v28, v27, v57, v37, v38);
  sub_100007FF0(v28, &qword_100316A20);
  sub_100007FF0((uint64_t)v18, &qword_10031A1F0);
  if (qword_100315768 != -1)
LABEL_5:
    swift_once(&qword_100315768, sub_10005107C);
  v39 = qword_10033FC20;
  v40 = swift_getKeyPath(&unk_100250740);
  v61 = v39;
  swift_retain_n(v39, v41);
  v43 = AnyShapeStyle.init<A>(_:)(&v61, &type metadata for Color, &protocol witness table for Color, v42);
  v45 = v54;
  v44 = v55;
  v46 = (uint64_t)v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v56, v25, v55);
  swift_release(v39);
  v47 = (uint64_t *)(v46 + *(int *)(v53 + 36));
  *v47 = v40;
  v47[1] = v43;
  v48 = (*(double (**)(uint64_t, uint64_t))(v45 + 8))(v25, v44);
  LOBYTE(v39) = static Edge.Set.all.getter(v48);
  v49 = v58;
  sub_10000B234(v46, v58, &qword_10031A1E8);
  v50 = v49 + *(int *)(sub_100003DB8(&qword_10031A1D0) + 36);
  *(_BYTE *)v50 = v39;
  *(_QWORD *)(v50 + 8) = 0;
  *(_QWORD *)(v50 + 16) = 0;
  *(_QWORD *)(v50 + 24) = 0;
  *(_QWORD *)(v50 + 32) = 0x4000000000000000;
  *(_BYTE *)(v50 + 40) = 0;
  return sub_100007FF0(v46, &qword_10031A1E8);
}

uint64_t sub_10006DA24()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v22;

  v1 = sub_100003DB8(&qword_10031A1C8);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1, v3);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v0;
  v6 = v0[1];
  v8 = swift_allocObject(&unk_1002E8C28, 32, 7);
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  swift_retain(v6);
  v9 = sub_100003DB8(&qword_10031A1D0);
  v10 = sub_10002B614(&qword_10031A1D8, &qword_10031A1D0, (void (*)(void))sub_10006E304);
  Button.init(action:label:)(sub_10002BF7C, v8, sub_10006D538, 0, v9, v10);
  v11 = LocalizedStringKey.init(stringLiteral:)(1684956499, 0xE400000000000000);
  v12 = Text.init(_:tableName:bundle:comment:)(v11);
  v14 = v13;
  v16 = v15;
  v18 = v17 & 1;
  v19 = sub_1000084FC(&qword_10031A220, &qword_10031A1C8, (uint64_t)&protocol conformance descriptor for Button<A>);
  View.accessibility(label:)(v12, v14, v18, v16, v1, v19);
  sub_10002B438(v12, v14, v18);
  v20 = swift_bridgeObjectRelease(v16);
  return (*(uint64_t (**)(char *, uint64_t, __n128))(v2 + 8))(v5, v1, v20);
}

void sub_10006DBF0()
{
  uint64_t v0;

  sub_10006B8B4(v0 + 16);
}

unint64_t sub_10006DC08()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031A108;
  if (!qword_10031A108)
  {
    v1 = sub_100007FAC(&qword_10031A110);
    sub_10002B614(&qword_10031A118, &qword_10031A120, (void (*)(void))sub_10002B67C);
    sub_1000084FC(&qword_1003192C0, &qword_1003192C8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031A108);
  }
  return result;
}

double sub_10006DCAC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double result;

  if (a4)
  {
    sub_10002B750(a1, a2, a3 & 1);
    *(_QWORD *)&result = swift_bridgeObjectRetain(a4).n128_u64[0];
  }
  return result;
}

double sub_10006DCDC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  double result;

  if (a4)
  {
    sub_10002B438(a1, a2, a3 & 1);
    *(_QWORD *)&result = swift_bridgeObjectRelease(a4).n128_u64[0];
  }
  return result;
}

_QWORD *sub_10006DD14(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[8];
  v5 = a1[9];
  v12 = a1[11];
  v13 = a1[13];
  v6 = a1[18];
  v7 = a1[20];
  v9 = a1[24];
  v8 = a1[25];
  v10 = a1[27];
  swift_retain(a1[17]);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  swift_retain(v9);
  swift_retain(v8);
  swift_retain(v10);
  swift_retain(v2);
  swift_retain(v3);
  swift_bridgeObjectRetain(v4);
  swift_retain(v5);
  swift_retain(v12);
  swift_retain(v13);
  return a1;
}

_QWORD *sub_10006DDE0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[4];
  v3 = a1[6];
  v4 = a1[7];
  v5 = a1[9];
  v6 = a1[11];
  v7 = a1[16];
  v12 = a1[15];
  v13 = a1[3];
  v8 = a1[18];
  v9 = a1[22];
  v10 = a1[23];
  swift_release(a1[25]);
  swift_release(v10);
  swift_release(v9);
  swift_bridgeObjectRelease(v8);
  swift_release(v7);
  swift_release(v6);
  swift_release(v5);
  swift_release(v4);
  swift_bridgeObjectRelease(v3);
  swift_release(v2);
  swift_release(v13);
  swift_release(v12);
  return a1;
}

void sub_10006DEAC(uint64_t a1, _BYTE *a2)
{
  uint64_t v2;

  sub_10006CD98(a1, a2, v2 + 16);
}

uint64_t *sub_10006DEB4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[6];
  v6 = a1[7];
  v7 = a1[9];
  swift_retain(a1[10]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

unint64_t sub_10006DF30()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031A190;
  if (!qword_10031A190)
  {
    v1 = sub_100007FAC(&qword_10031A148);
    sub_1000084FC(&qword_10031A198, &qword_10031A140, (uint64_t)&protocol conformance descriptor for HStack<A>);
    sub_1000084FC(&qword_10031A1A0, &qword_10031A180, (uint64_t)&protocol conformance descriptor for _OverlayModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031A190);
  }
  return result;
}

unint64_t sub_10006DFCC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031A1A8;
  if (!qword_10031A1A8)
  {
    v1 = sub_100007FAC(&qword_10031A188);
    sub_10003DA98();
    result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_10031A1A8);
  }
  return result;
}

uint64_t sub_10006E034()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_bridgeObjectRelease(v0[8]);
  swift_release(v0[9]);
  swift_bridgeObjectRelease(v0[11]);
  swift_release(v0[12]);
  return swift_deallocObject(v0, 104, 7);
}

uint64_t sub_10006E088()
{
  uint64_t v0;

  return sub_10006CBFC((uint64_t *)(v0 + 16));
}

uint64_t sub_10006E098()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

_BYTE *sub_10006E0A8(_BYTE *a1)
{
  uint64_t v1;

  return sub_10005571C(a1, *(_BYTE *)(v1 + 16));
}

uint64_t sub_10006E0B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 17, 7);
}

ValueMetadata *type metadata accessor for TryOutMessageEntrySendButton()
{
  return &type metadata for TryOutMessageEntrySendButton;
}

uint64_t destroy for TryOutMessageTextFieldView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[1]);
  return swift_bridgeObjectRelease(a1[3]);
}

uint64_t *initializeWithCopy for TryOutMessageTextFieldView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_retain(v3);
  swift_retain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for TryOutMessageTextFieldView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  v6 = a2[1];
  v7 = a1[1];
  a1[1] = v6;
  swift_retain(v6);
  swift_release(v7);
  a1[2] = a2[2];
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

_QWORD *assignWithTake for TryOutMessageTextFieldView(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_release(*a1);
  v4 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release(v4);
  v5 = *(_QWORD *)(a2 + 24);
  v6 = a1[3];
  a1[2] = *(_QWORD *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *type metadata accessor for TryOutMessageTextFieldView()
{
  return &type metadata for TryOutMessageTextFieldView;
}

uint64_t sub_10006E224()
{
  return sub_1000084FC(&qword_10031A1B8, &qword_10031A1C0, (uint64_t)&protocol conformance descriptor for VStack<A>);
}

uint64_t sub_10006E250()
{
  _QWORD v1[4];

  v1[0] = sub_100007FAC(&qword_10031A148);
  v1[1] = sub_100007FAC(&qword_10031A188);
  v1[2] = sub_10006DF30();
  v1[3] = sub_10006DFCC();
  return swift_getOpaqueTypeConformance2(v1, &opaque type descriptor for <<opaque return type of View.onChange<A>(of:initial:_:)>>, 1);
}

uint64_t sub_10006E2C0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100296968, 1);
}

uint64_t sub_10006E2D0(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100296940, 1);
}

uint64_t sub_10006E2E0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10006E304()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[4];

  result = qword_10031A1E0;
  if (!qword_10031A1E0)
  {
    v1 = sub_100007FAC(&qword_10031A1E8);
    v2[0] = sub_100007FAC(&qword_10031A1F0);
    v2[1] = sub_100007FAC(&qword_100316A20);
    v2[2] = sub_10006E3F4();
    v2[3] = sub_1000084FC(&qword_100316A40, &qword_100316A20, (uint64_t)&protocol conformance descriptor for PartialRangeThrough<A>);
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.dynamicTypeSize<A>(_:)>>, 1);
    sub_1000084FC(&qword_100318880, &qword_100318888, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031A1E0);
  }
  return result;
}

unint64_t sub_10006E3F4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031A1F8;
  if (!qword_10031A1F8)
  {
    v1 = sub_100007FAC(&qword_10031A1F0);
    sub_10006E478();
    sub_1000084FC(&qword_100316BF0, &qword_100316BF8, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031A1F8);
  }
  return result;
}

unint64_t sub_10006E478()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031A200;
  if (!qword_10031A200)
  {
    v1 = sub_100007FAC(&qword_10031A208);
    sub_1000084FC(&qword_10031A210, &qword_10031A218, (uint64_t)&protocol conformance descriptor for _EnvironmentKeyWritingModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031A200);
  }
  return result;
}

uint64_t sub_10006E51C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_bridgeObjectRelease(v0[5]);
  return swift_deallocObject(v0, 48, 7);
}

void sub_10006E550(uint64_t *a1)
{
  uint64_t *v1;

  sub_10006D418(a1, v1[2], v1[3], v1[4], v1[5]);
}

unint64_t sub_10006E560()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031A268;
  if (!qword_10031A268)
  {
    v1 = sub_100007FAC(&qword_10031A270);
    sub_1000084FC(&qword_10031A220, &qword_10031A1C8, (uint64_t)&protocol conformance descriptor for Button<A>);
    sub_1000052EC(&qword_100316C10, (uint64_t (*)(uint64_t))&type metadata accessor for AccessibilityAttachmentModifier, (uint64_t)&protocol conformance descriptor for AccessibilityAttachmentModifier);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031A268);
  }
  return result;
}

uint64_t sub_10006E5FC()
{
  return sub_1000084FC(&qword_10031A278, &qword_10031A250, (uint64_t)&protocol conformance descriptor for SubscriptionView<A, B>);
}

uint64_t sub_10006E62C@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t KeyPath;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v31 = a3;
  v5 = type metadata accessor for SymbolVariants(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_10031AAF0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10, v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = sub_100003DB8(&qword_10031AAF8);
  __chkstk_darwin(v15, v16);
  v19 = (char *)&v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) != 0)
    v20 = 1768319351;
  else
    v20 = 0xD000000000000021;
  if ((a1 & 1) != 0)
    v21 = 0xE400000000000000;
  else
    v21 = 0x8000000100266690;
  v22 = Image.init(systemName:)(v20, v21, v17);
  KeyPath = swift_getKeyPath(&unk_100250BA8);
  v32 = v22;
  v33 = KeyPath;
  v34 = a2;
  swift_retain(a2);
  static SymbolVariants.fill.getter(v24);
  v25 = sub_100003DB8(&qword_100316BE8);
  v26 = sub_10000AAB8();
  View.symbolVariant(_:)(v9, v25, v26);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  swift_release(v32);
  swift_release(v33);
  swift_release(v34);
  v28 = static Color.green.getter(v27);
  (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v19, v14, v10);
  *(_QWORD *)&v19[*(int *)(v15 + 36)] = v28;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  v29 = sub_100071420();
  View.accessibility(hidden:)(1, v15, v29);
  return sub_100007FF0((uint64_t)v19, &qword_10031AAF8);
}

uint64_t sub_10006E838(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 112))();
}

uint64_t sub_10006E840()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 32, 7);
}

uint64_t type metadata accessor for UIMetricsBannerX()
{
  return objc_opt_self(_TtC8SOSBuddy16UIMetricsBannerX);
}

double sub_10006E870()
{
  return 4.0;
}

uint64_t sub_10006E87C(uint64_t a1, uint64_t a2)
{
  return sub_10006F3E0(a1, a2, (SEL *)&selRef_systemGray2Color, (uint64_t (*)(id))&Color.init(uiColor:));
}

uint64_t sub_10006E890(uint64_t a1, uint64_t a2)
{
  return sub_10006F2D0(a1, a2, (uint64_t (*)(uint64_t))&static Font.subheadline.getter, (void (*)(void))&static Font.Weight.medium.getter);
}

uint64_t type metadata accessor for UIMetricsSessionX()
{
  return objc_opt_self(_TtC8SOSBuddy17UIMetricsSessionX);
}

uint64_t sub_10006E8C4(uint64_t a1)
{
  return sub_10006E838(a1, (uint64_t)&off_1002E9420);
}

double sub_10006E8D0(double a1, double a2, double a3, double a4, double a5, double a6, double a7, double a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  double v18;
  double result;

  *(double *)(v17 + 16) = a3;
  *(double *)(v17 + 24) = a4;
  *(double *)(v17 + 32) = a5;
  *(double *)(v17 + 40) = a2 * 0.01;
  *(_QWORD *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 56) = 0;
  *(double *)(v17 + 64) = a2 * 0.025;
  *(_QWORD *)(v17 + 80) = 0;
  *(_QWORD *)(v17 + 88) = 0;
  *(_QWORD *)(v17 + 72) = 0;
  *(double *)(v17 + 96) = a2 * 0.04;
  *(_QWORD *)(v17 + 104) = 0;
  *(double *)(v17 + 112) = a2 * 0.09;
  *(_QWORD *)(v17 + 120) = 0;
  *(double *)(v17 + 128) = a2 * 0.025;
  *(_QWORD *)(v17 + 136) = 0;
  *(double *)(v17 + 144) = a2 * 0.03;
  v18 = (a1 + a1 * -0.8) * 0.5;
  *(_QWORD *)(v17 + 152) = 0;
  *(double *)(v17 + 160) = v18;
  *(double *)(v17 + 168) = a2 * 0.015;
  *(double *)(v17 + 176) = v18;
  *(double *)(v17 + 184) = a6;
  *(double *)(v17 + 192) = a7;
  *(double *)(v17 + 200) = a8;
  result = a1 * 0.835;
  *(_QWORD *)(v17 + 208) = a17;
  *(double *)(v17 + 216) = result;
  return result;
}

uint64_t sub_10006E990()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 224, 7);
}

uint64_t type metadata accessor for UIMetricsFullScreenGuidanceX()
{
  return objc_opt_self(_TtC8SOSBuddy28UIMetricsFullScreenGuidanceX);
}

double sub_10006E9C0()
{
  return 5.0;
}

uint64_t sub_10006E9C8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v0 = type metadata accessor for Font.Leading(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = __chkstk_darwin();
  v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = static Font.body.getter(v2);
  v6 = Font.bold()();
  swift_release(v5);
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v4, enum case for Font.Leading.tight(_:), v0);
  v7 = Font.leading(_:)(v4, v6);
  swift_release(v6);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  return v7;
}

_QWORD *sub_10006EA8C(double a1, double a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v5 = type metadata accessor for UIMetricsSessionX();
  v6 = swift_allocObject(v5, 16, 7);
  v3[6] = v5;
  v3[7] = &off_1002E9420;
  v3[3] = v6;
  v7 = type metadata accessor for UIMetricsBannerX();
  v8 = swift_allocObject(v7, 32, 7);
  *(double *)(v8 + 16) = a1 + -32.0;
  *(_QWORD *)(v8 + 24) = 0x405C800000000000;
  v3[2] = v8;
  v9 = type metadata accessor for UIMetricsQuestionnaire390();
  v10 = swift_allocObject(v9, 104, 7);
  *(double *)(v10 + 16) = a2 * 0.03;
  *(_OWORD *)(v10 + 24) = xmmword_100250800;
  *(_QWORD *)(v10 + 40) = 0;
  *(float64x2_t *)(v10 + 48) = vmulq_n_f64((float64x2_t)xmmword_100250810, a2);
  *(float64x2_t *)(v10 + 64) = vmulq_n_f64((float64x2_t)xmmword_100250820, a2);
  *(_OWORD *)(v10 + 80) = xmmword_100250830;
  *(_QWORD *)(v10 + 96) = 0;
  v3[8] = v10;
  v11 = type metadata accessor for UIMetricsFullScreenGuidanceX();
  v12 = swift_allocObject(v11, 224, 7);
  sub_10006E8D0(a1, a2, a2 * 0.49, a2 * 0.45, a2 * 0.4, 0.0, 24.0, 0.0, v12, v13, v14, v15, v16, v17, v18, v19, 0x4038000000000000);
  v3[9] = v12;
  return v3;
}

uint64_t type metadata accessor for UIMetrics390()
{
  return objc_opt_self(_TtC8SOSBuddy12UIMetrics390);
}

uint64_t sub_10006EC18@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;

  return sub_100007CBC(*v1 + 24, a1);
}

uint64_t sub_10006EC28@<X0>(_QWORD *a1@<X8>)
{
  return sub_10006F154(type metadata accessor for UIMetricsQuestionnaire390, (uint64_t)&off_1002E9020, a1);
}

uint64_t sub_10006EC40(uint64_t a1, uint64_t a2)
{
  return sub_10006F3A4(a1, a2, (uint64_t (*)(void))&static Font.title3.getter);
}

uint64_t sub_10006EC4C(uint64_t a1, uint64_t a2)
{
  return sub_10006F3A4(a1, a2, (uint64_t (*)(void))&static Font.largeTitle.getter);
}

uint64_t sub_10006EC58(uint64_t a1, uint64_t a2)
{
  return sub_10006F3E0(a1, a2, (SEL *)&selRef_secondaryLabelColor, (uint64_t (*)(id))&Color.init(uiColor:));
}

double sub_10006EC6C()
{
  return 44.0;
}

uint64_t sub_10006EC7C(char a1)
{
  return (0x118u >> a1) & 1;
}

uint64_t sub_10006ECA4(char a1)
{
  return sub_1000711B0(a1 & 1);
}

uint64_t sub_10006ECB0()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 104, 7);
}

uint64_t type metadata accessor for UIMetricsQuestionnaire390()
{
  return objc_opt_self(_TtC8SOSBuddy25UIMetricsQuestionnaire390);
}

double sub_10006ECE0()
{
  return 0.0;
}

double sub_10006ECF8()
{
  return 258.0;
}

double sub_10006ED0C()
{
  return 0.0;
}

uint64_t sub_10006ED20(uint64_t a1, uint64_t a2)
{
  return sub_10006F2D0(a1, a2, (uint64_t (*)(uint64_t))&static Font.largeTitle.getter, (void (*)(void))&static Font.Weight.bold.getter);
}

double sub_10006ED34()
{
  return 10.0;
}

double sub_10006ED3C()
{
  return 25.0;
}

uint64_t sub_10006ED48(uint64_t a1, uint64_t a2)
{
  return sub_10006F218(a1, a2, (uint64_t (*)(uint64_t))&static Font.footnote.getter);
}

double sub_10006ED54()
{
  return 14.0;
}

double sub_10006ED5C()
{
  return 22.0;
}

double sub_10006ED64()
{
  uint64_t v0;

  return *(double *)(*(_QWORD *)v0 + 48);
}

double sub_10006ED70()
{
  return 34.0;
}

double sub_10006ED7C()
{
  uint64_t v0;

  return *(double *)(*(_QWORD *)v0 + 64);
}

double sub_10006ED88()
{
  uint64_t v0;

  return *(double *)(*(_QWORD *)v0 + 56);
}

uint64_t sub_10006ED94(uint64_t a1, uint64_t a2)
{
  return sub_10006F218(a1, a2, (uint64_t (*)(uint64_t))&static Font.body.getter);
}

double sub_10006EDA0()
{
  return 16.0;
}

double sub_10006EDA8()
{
  return 64.0;
}

uint64_t sub_10006EDB4(uint64_t a1, uint64_t a2)
{
  return sub_10006F2D0(a1, a2, (uint64_t (*)(uint64_t))&static Font.title3.getter, (void (*)(void))&static Font.Weight.semibold.getter);
}

double sub_10006EDD0()
{
  return 11.0;
}

double sub_10006EDD8()
{
  return 8.0;
}

double sub_10006EDE0()
{
  return 24.0;
}

double sub_10006EDEC()
{
  return 0.0;
}

double sub_10006EE00()
{
  return 20.0;
}

double sub_10006EE08()
{
  return 32.0;
}

double sub_10006EE18()
{
  return 24.0;
}

double sub_10006EE2C()
{
  return 55.0;
}

double sub_10006EE3C()
{
  return 0.0;
}

double sub_10006EE50()
{
  return 24.0;
}

uint64_t sub_10006EE58(uint64_t a1, uint64_t a2)
{
  return sub_10006F3E0(a1, a2, (SEL *)&selRef_systemGray4Color, (uint64_t (*)(id))&Color.init(uiColor:));
}

uint64_t sub_10006EE6C(uint64_t a1, uint64_t a2)
{
  return sub_10006F2D0(a1, a2, (uint64_t (*)(uint64_t))&static Font.headline.getter, (void (*)(void))&static Font.Weight.semibold.getter);
}

uint64_t sub_10006EE80(uint64_t a1, uint64_t a2)
{
  return sub_10006F2D0(a1, a2, (uint64_t (*)(uint64_t))&static Font.subheadline.getter, (void (*)(void))&static Font.Weight.semibold.getter);
}

double sub_10006EE94()
{
  return 0.8;
}

double sub_10006EEA4()
{
  return 24.0;
}

uint64_t sub_10006EEB8(uint64_t a1, uint64_t a2)
{
  return sub_10006F3A4(a1, a2, (uint64_t (*)(void))&static Font.body.getter);
}

double sub_10006EEC4()
{
  return 96.0;
}

double sub_10006EED0@<D0>(uint64_t a1@<X8>)
{
  double result;
  __int128 v3;
  _OWORD v4[2];
  uint64_t v5;

  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)(v4, 2, 0, &_swiftEmptyArrayStorage, 5.0, 10.0, 0.0);
  result = *(double *)v4;
  v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_10006EF2C(uint64_t a1, uint64_t a2)
{
  return sub_10006F3E0(a1, a2, (SEL *)&selRef_systemGray5Color, (uint64_t (*)(id))&Color.init(_:));
}

_QWORD *sub_10006EF48(double a1, double a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = v2;
  v5 = type metadata accessor for UIMetricsSessionX();
  v6 = swift_allocObject(v5, 16, 7);
  v3[6] = v5;
  v3[7] = &off_1002E9420;
  v3[3] = v6;
  v7 = type metadata accessor for UIMetricsBannerX();
  v8 = swift_allocObject(v7, 32, 7);
  *(double *)(v8 + 16) = a1 + -32.0;
  *(_QWORD *)(v8 + 24) = 0x405C800000000000;
  v3[2] = v8;
  v9 = type metadata accessor for UIMetricsQuestionnaire428();
  v10 = swift_allocObject(v9, 104, 7);
  *(double *)(v10 + 16) = a2 * 0.03;
  *(_OWORD *)(v10 + 24) = xmmword_100250800;
  *(_QWORD *)(v10 + 40) = 0;
  *(float64x2_t *)(v10 + 48) = vmulq_n_f64((float64x2_t)xmmword_100250810, a2);
  *(float64x2_t *)(v10 + 64) = vmulq_n_f64((float64x2_t)xmmword_100250820, a2);
  *(_OWORD *)(v10 + 80) = xmmword_100250830;
  *(_QWORD *)(v10 + 96) = 0;
  v3[8] = v10;
  v11 = type metadata accessor for UIMetricsFullScreenGuidanceX();
  v12 = swift_allocObject(v11, 224, 7);
  sub_10006E8D0(a1, a2, a2 * 0.5, a2 * 0.45, a2 * 0.4, 0.0, 44.0, 0.0, v12, v13, v14, v15, v16, v17, v18, v19, 0x4046000000000000);
  v3[9] = v12;
  return v3;
}

uint64_t sub_10006F0A8()
{
  _QWORD *v0;

  swift_release(v0[2]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 3);
  swift_release(v0[8]);
  swift_release(v0[9]);
  return swift_deallocClassInstance(v0, 80, 7);
}

uint64_t type metadata accessor for UIMetrics428()
{
  return objc_opt_self(_TtC8SOSBuddy12UIMetrics428);
}

double sub_10006F104@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  a1[3] = type metadata accessor for UIMetricsBannerX();
  a1[4] = &off_1002E9500;
  *a1 = v3;
  *(_QWORD *)&result = swift_retain(v3).n128_u64[0];
  return result;
}

uint64_t sub_10006F140@<X0>(_QWORD *a1@<X8>)
{
  return sub_10006F154(type metadata accessor for UIMetricsQuestionnaire428, (uint64_t)&off_1002E8D30, a1);
}

uint64_t sub_10006F154@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;

  v6 = *(_QWORD *)(*(_QWORD *)v3 + 64);
  a3[3] = a1();
  a3[4] = a2;
  *a3 = v6;
  return swift_retain(v6);
}

double sub_10006F194@<D0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  double result;

  v3 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  a1[3] = type metadata accessor for UIMetricsFullScreenGuidanceX();
  a1[4] = &off_1002E9338;
  *a1 = v3;
  *(_QWORD *)&result = swift_retain(v3).n128_u64[0];
  return result;
}

uint64_t type metadata accessor for UIMetricsQuestionnaire428()
{
  return objc_opt_self(_TtC8SOSBuddy25UIMetricsQuestionnaire428);
}

double sub_10006F1F0()
{
  return 0.0;
}

double sub_10006F208()
{
  uint64_t v0;

  return *(double *)(*(_QWORD *)v0 + 16);
}

uint64_t sub_10006F218(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v4 = type metadata accessor for Font.Leading(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin();
  v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = a3(v6);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for Font.Leading.tight(_:), v4);
  v10 = Font.leading(_:)(v8, v9);
  swift_release(v9);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  return v10;
}

uint64_t sub_10006F2D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), void (*a4)(void))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v6 = type metadata accessor for Font.Leading(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin();
  v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a3(v8);
  a4();
  v12 = Font.weight(_:)(v11);
  swift_release(v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for Font.Leading.tight(_:), v6);
  v13 = Font.leading(_:)(v10, v12);
  swift_release(v12);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return v13;
}

uint64_t sub_10006F3A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;

  v3 = a3();
  static Font.Weight.semibold.getter();
  v4 = Font.weight(_:)(v3);
  swift_release(v3);
  return v4;
}

uint64_t sub_10006F3E0(uint64_t a1, uint64_t a2, SEL *a3, uint64_t (*a4)(id))
{
  id v4;

  v4 = objc_msgSend((id)objc_opt_self(UIColor), *a3);
  return a4(v4);
}

uint64_t sub_10006F428()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = sub_100003DB8(&qword_100316B50);
  __chkstk_darwin(v0, v1);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Font.Design(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  v5 = static Font.system(size:weight:design:)(0, 1, v3, 43.0);
  sub_100007FF0((uint64_t)v3, &qword_100316B50);
  v6 = Font.bold()(v5);
  swift_release(v5);
  return v6;
}

double sub_10006F4F0()
{
  uint64_t v0;

  return *(double *)(*(_QWORD *)v0 + 72);
}

__n128 sub_10006F500()
{
  __n128 result;
  __int128 v1;

  result = *(__n128 *)&UIEdgeInsetsZero.top;
  v1 = *(_OWORD *)&UIEdgeInsetsZero.bottom;
  xmmword_10033FC40 = *(_OWORD *)&UIEdgeInsetsZero.top;
  *(_OWORD *)&qword_10033FC50 = v1;
  return result;
}

uint64_t sub_10006F51C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  void *v13;
  NSString *v14;
  id v15;
  id v16;
  double v17;
  CGFloat v18;
  double v19;
  CGFloat v20;
  double v21;
  CGFloat v22;
  double v23;
  CGFloat v24;
  double Width;
  id v26;
  id v27;
  double v28;
  CGFloat v29;
  double v30;
  CGFloat v31;
  double v32;
  CGFloat v33;
  double v34;
  CGFloat v35;
  double Height;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _UNKNOWN **v48;
  uint64_t v49;
  __n128 v50;
  __n128 v51;
  uint64_t v52;
  unint64_t v53;
  __n128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __n128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70[3];
  id v71;
  uint64_t v72;
  CGRect v73;
  CGRect v74;

  v1 = v0;
  v2 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_100003DB8(&qword_10031AAD0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_allocWithZone((Class)type metadata accessor for AccessibilitySettingsSource());
  *(_QWORD *)(v1 + 88) = objc_msgSend(v11, "init", swift_retain(v1).n128_f64[0]);
  v69 = v5;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100209204((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v12 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)(v1 + 96) = v12;
  *(_QWORD *)(v1 + 104) = UIContentSizeCategoryUnspecified;
  *(_QWORD *)(v1 + 112) = UIContentSizeCategoryUnspecified;
  v68 = v1 + 96;
  v13 = (void *)objc_opt_self(UIScreen);
  v14 = UIContentSizeCategoryUnspecified;
  v15 = objc_msgSend(v13, "mainScreen");
  v16 = objc_msgSend(v15, "fixedCoordinateSpace");

  objc_msgSend(v16, "bounds");
  v18 = v17;
  v20 = v19;
  v22 = v21;
  v24 = v23;
  swift_unknownObjectRelease(v16);
  v73.origin.x = v18;
  v73.origin.y = v20;
  v73.size.width = v22;
  v73.size.height = v24;
  Width = CGRectGetWidth(v73);
  v26 = objc_msgSend(v13, "mainScreen");
  v27 = objc_msgSend(v26, "fixedCoordinateSpace");

  objc_msgSend(v27, "bounds");
  v29 = v28;
  v31 = v30;
  v33 = v32;
  v35 = v34;
  swift_unknownObjectRelease(v27);
  v74.origin.x = v29;
  v74.origin.y = v31;
  v74.size.width = v33;
  v74.size.height = v35;
  Height = CGRectGetHeight(v74);
  if (qword_1003158D8 != -1)
    swift_once(&qword_1003158D8, sub_1000D9904);
  v37 = type metadata accessor for Logger(0);
  v38 = sub_10000D744(v37, (uint64_t)qword_10033FF40);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter(v39);
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    v70[0] = v42;
    v67 = v10;
    *(_DWORD *)v41 = 136315138;
    v43 = sub_1000DB284(2, Width, Height);
    v45 = v44;
    v71 = (id)sub_100172BEC(v43, v44, v70);
    v10 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease(v45);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Screen size = %s", v41, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);
  }

  if (Width >= 428.0)
  {
    v46 = type metadata accessor for UIMetrics428();
    v47 = swift_allocObject(v46, 80, 7);
    sub_10006EF48(Width, Height);
    v48 = &off_1002E8F70;
  }
  else
  {
    v46 = type metadata accessor for UIMetrics390();
    v47 = swift_allocObject(v46, 80, 7);
    sub_10006EA8C(Width, Height);
    v48 = &off_1002E9260;
  }
  *(_QWORD *)(v1 + 72) = v46;
  *(_QWORD *)(v1 + 80) = v48;
  *(_QWORD *)(v1 + 48) = v47;
  swift_release(v1);
  *(_QWORD *)(v1 + 32) = 0;
  *(_WORD *)(v1 + 40) = 0;
  v49 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
  *(_QWORD *)(v1 + 16) = PassthroughSubject.init()(v50);
  swift_allocObject(v49, *(unsigned int *)(v49 + 48), *(unsigned __int16 *)(v49 + 52));
  *(_QWORD *)(v1 + 24) = PassthroughSubject.init()(v51);
  v70[0] = *(_QWORD *)(*(_QWORD *)(v1 + 88)
                     + OBJC_IVAR____TtC8SOSBuddy27AccessibilitySettingsSource_contentSizeCategoryDidChange);
  v52 = v70[0];
  v53 = sub_10000D75C();
  swift_retain(v1);
  v54 = swift_retain(v52);
  v71 = (id)static OS_dispatch_queue.main.getter(v54);
  v55 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v56 = (uint64_t)v69;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v55 - 8) + 56))(v69, 1, 1, v55);
  v57 = sub_100003DB8(&qword_10031AAD8);
  v58 = sub_1000084FC(&qword_10031AAE0, &qword_10031AAD8, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v59 = sub_10002158C();
  Publisher.receive<A>(on:options:)(&v71, v56, v57, v53, v58, v59);
  sub_100007FF0(v56, &qword_100329AF0);

  swift_release(v70[0]);
  v60 = swift_allocObject(&unk_1002E95A8, 24, 7);
  swift_weakInit(v60 + 16);
  v61 = sub_1000084FC(&qword_10031AAE8, &qword_10031AAD0, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v63 = Publisher<>.sink(receiveValue:)(sub_1000713C8, v60, v6, v61, v62);
  swift_release(v60);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  v64 = v68;
  swift_beginAccess(v68, v70, 33, 0);
  AnyCancellable.store(in:)(v64);
  swift_endAccess(v70);
  swift_release(v63);
  swift_release(v1);
  return v1;
}

uint64_t sub_10006FB20(void **a1, uint64_t a2)
{
  void *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _BYTE v6[24];

  v2 = *a1;
  v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v6, 0, 0);
  result = swift_weakLoadStrong(v3);
  if (result)
  {
    v5 = result;
    sub_10006FF9C(v2);
    return swift_release(v5);
  }
  return result;
}

void sub_10006FB84()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  id v5;
  id v6;

  if ((sub_1001B7698() & 1) == 0)
  {
    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    v0 = type metadata accessor for Logger(0);
    v1 = sub_10000D744(v0, (uint64_t)qword_10033FD18);
    v2 = Logger.logObject.getter(v1);
    v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      v4 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to start AccessibilitySettingsSource", v4, 2u);
      swift_slowDealloc(v4, -1, -1);
    }

  }
  v5 = objc_msgSend((id)objc_opt_self(UITraitCollection), "currentTraitCollection");
  v6 = objc_msgSend(v5, "preferredContentSizeCategory");

  sub_10006FF9C(v6);
}

void sub_10006FCA4(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  char v11;
  uint64_t v12;
  id v13;
  __n128 v14;
  id v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  __n128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  id v27;
  __n128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  uint64_t v38;

  v2 = v1;
  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(_QWORD *)(v2 + 104));
  v6 = v5;
  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v4 == v7 && v6 == v8)
  {
    swift_bridgeObjectRelease_n(v6, 2);
  }
  else
  {
    v10 = v8;
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v6, v7, v8, 0);
    swift_bridgeObjectRelease(v6);
    swift_bridgeObjectRelease(v10);
    if ((v11 & 1) == 0)
    {
      if (qword_1003158D8 != -1)
        swift_once(&qword_1003158D8, sub_1000D9904);
      v12 = type metadata accessor for Logger(0);
      sub_10000D744(v12, (uint64_t)qword_10033FF40);
      v13 = a1;
      swift_retain_n(v2, 2, v14);
      v15 = v13;
      v16 = Logger.logObject.getter(v15);
      v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        v18 = swift_slowAlloc(22, -1);
        v19 = swift_slowAlloc(64, -1);
        v37 = v15;
        v38 = v19;
        *(_DWORD *)v18 = 136446466;
        type metadata accessor for UIContentSizeCategory(0);
        v21 = v20;
        v22 = v15;
        v24 = String.init<A>(describing:)(&v37, v21, v23);
        v26 = v25;
        v37 = (id)sub_100172BEC(v24, v25, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v18 + 4, v18 + 12);

        swift_bridgeObjectRelease(v26);
        *(_WORD *)(v18 + 12) = 2082;
        v37 = *(id *)(v2 + 104);
        v27 = v37;
        v29 = String.init<A>(describing:)(&v37, v21, v28);
        v31 = v30;
        v37 = (id)sub_100172BEC(v29, v30, &v38);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v18 + 14, v18 + 22);
        swift_release_n(v2, 2);
        swift_bridgeObjectRelease(v31);
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "contentSizeCategory changed from: %{public}s to: %{public}s", (uint8_t *)v18, 0x16u);
        swift_arrayDestroy(v19, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v19, -1, -1);
        swift_slowDealloc(v18, -1, -1);

      }
      else
      {

        swift_release_n(v2, 2);
      }
      v32 = *(void **)(v2 + 104);
      v33 = *(void **)(v2 + 112);
      *(_QWORD *)(v2 + 112) = v32;
      v34 = v32;

      if (*(_QWORD *)(v2 + 32))
      {
        *(_BYTE *)(v2 + 41) = 1;
      }
      else
      {
        v35 = sub_100003DB8(&qword_10032B0E0);
        v36 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
        Subject<>.send()(v35, v36);
      }
    }
  }
}

void sub_10006FF9C(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  char v12;
  id v13;
  id v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  v2 = v1;
  v4 = *(void **)(v1 + 104);
  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
  v7 = v6;
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v5 == v8 && v7 == v9)
  {
    v14 = v4;
    swift_bridgeObjectRelease_n(v7, 2);
  }
  else
  {
    v11 = v9;
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0);
    v13 = v4;
    swift_bridgeObjectRelease(v7);
    swift_bridgeObjectRelease(v11);
    if ((v12 & 1) == 0)
    {
      if (*(_QWORD *)(v2 + 32))
      {
        *(_BYTE *)(v2 + 40) = 1;
      }
      else
      {
        v16 = sub_100003DB8(&qword_10032B0E0);
        v17 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
        Subject<>.send()(v16, v17);
      }
    }
  }
  v15 = *(void **)(v2 + 104);
  *(_QWORD *)(v2 + 104) = a1;
  v18 = a1;

  sub_10006FCA4(v4);
}

void sub_1000700C0()
{
  uint64_t v0;

  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((_QWORD *)(v0 + 48));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
}

uint64_t sub_1000700F4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 24));
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0((_QWORD *)(v0 + 48));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 96));
  return swift_deallocClassInstance(v0, 120, 7);
}

uint64_t type metadata accessor for UIMetrics()
{
  return objc_opt_self(_TtC8SOSBuddy9UIMetrics);
}

ValueMetadata *type metadata accessor for AXTraits()
{
  return &type metadata for AXTraits;
}

ValueMetadata *type metadata accessor for UIMetricsConcrete()
{
  return &type metadata for UIMetricsConcrete;
}

uint64_t sub_100070188@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000701B0(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

void sub_1000701D8(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100070200()
{
  id v0;

  v0 = objc_msgSend((id)objc_opt_self(UIColor), "secondaryLabelColor");
  return ((uint64_t (*)(id))Color.init(uiColor:))(v0);
}

void sub_100070294(uint64_t a1, char a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1000702D0()
{
  uint64_t v0;
  int v1;
  uint64_t v2;
  objc_class *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  NSBundle v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t countAndFlagsBits;
  unint64_t v12;

  v1 = sub_1000ECEB4();
  v2 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for TransmissionProgress(0) + 28));
  v3 = (objc_class *)objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if (v1 == 2)
  {
    if (v2 == 100)
    {
      v4 = 0xD00000000000005CLL;
      v12 = 0x80000001002665B0;
      v5 = 0x6E6F697461636F4CLL;
      v6 = 0xED0000746E657320;
    }
    else
    {
      v4 = 0xD00000000000005ALL;
      v12 = 0x8000000100266550;
      v6 = 0x8000000100266530;
      v5 = 0x1000000000000013;
    }
    goto LABEL_8;
  }
  if (v2 == 100)
  {
    v4 = 0xD00000000000003DLL;
    v12 = 0x8000000100266650;
    v5 = 1953391955;
    v6 = 0xE400000000000000;
LABEL_8:
    v7.super.isa = v3;
    v8 = 0;
    v9 = 0xE000000000000000;
    goto LABEL_9;
  }
  v12 = 0x8000000100266610;
  v5 = 0xE2676E69646E6553;
  v6 = 0xAA0000000000A680;
  v7.super.isa = v3;
  v8 = 0;
  v9 = 0xE000000000000000;
  v4 = 0xD00000000000003BLL;
LABEL_9:
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v5, (Swift::String_optional)0, v7, *(Swift::String *)&v8, *(Swift::String *)&v4)._countAndFlagsBits;

  return countAndFlagsBits;
}

void sub_100070564(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100070598()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  unint64_t v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  Swift::String v10;
  uint64_t countAndFlagsBits;
  unint64_t v13;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for ConnectionClosed(0) + 24));
  if (sub_100067058(0, v1))
  {
    v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v3 = 0xD000000000000021;
    v4 = 0xD000000000000037;
    v13 = 0x8000000100266190;
    v5 = "Emergency SOS via Satellite Ended";
LABEL_10:
    v7 = (unint64_t)(v5 - 32) | 0x8000000000000000;
    v6 = 0;
    v8 = 0;
    goto LABEL_11;
  }
  if (!sub_100067058(1u, v1))
  {
    if (sub_100067058(3u, v1))
    {
      v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v3 = 0xD000000000000019;
      v4 = 0xD000000000000037;
      v13 = 0x8000000100266190;
      v5 = "SOS Demo Connection Ended";
    }
    else
    {
      v9 = sub_100067058(4u, v1);
      v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      if (v9)
      {
        v3 = 0xD00000000000001BLL;
        v4 = 0xD00000000000003ELL;
        v13 = 0x8000000100266370;
        v5 = "Location Sent via Satellite";
      }
      else
      {
        v3 = 0xD00000000000001ALL;
        v4 = 0xD000000000000037;
        v13 = 0x8000000100266190;
        v5 = "Satellite Connection Ended";
      }
    }
    goto LABEL_10;
  }
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v6 = 0xD000000000000012;
  v3 = 0xD000000000000027;
  v4 = 0xD000000000000037;
  v13 = 0x8000000100266190;
  v7 = 0x80000001002663D0;
  v8 = 0x80000001002621B0;
LABEL_11:
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v3, *(Swift::String_optional *)&v6, (NSBundle)v2, v10, *(Swift::String *)&v4)._countAndFlagsBits;

  return countAndFlagsBits;
}

void sub_100070A74(uint64_t a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100070AAC()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1._countAndFlagsBits = 0xD000000000000024;
  v5._object = (void *)0x8000000100266000;
  v1._object = (void *)0x8000000100266250;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v5._countAndFlagsBits = 0xD000000000000048;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

void sub_100070CBC(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100070CEC()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v1._countAndFlagsBits = 0xD00000000000001ALL;
  v5._countAndFlagsBits = 0xD000000000000037;
  v5._object = (void *)0x8000000100266190;
  v1._object = (void *)0x8000000100266170;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

void sub_100070E60(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_100070E98()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  uint64_t countAndFlagsBits;
  Swift::String v5;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5._countAndFlagsBits = 0xD00000000000005FLL;
  v5._object = (void *)0x8000000100266070;
  v1._object = (void *)0x8000000100266050;
  v1._countAndFlagsBits = 0xD00000000000001FLL;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v5)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_100070FA4(uint64_t a1)
{
  id v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  uint64_t countAndFlagsBits;
  BOOL v11;
  unint64_t v12;

  if (!a1)
  {
    v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
LABEL_5:
    v4 = 0xD000000000000014;
    v3 = 0xD00000000000008ALL;
    v12 = 0x8000000100262020;
    v5 = 0x8000000100262000;
    goto LABEL_6;
  }
  if (!sub_100067058(0, a1))
  {
    if (sub_100067058(1u, a1))
    {
      v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v4 = 0xD000000000000013;
      v3 = 0xD000000000000038;
      v12 = 0x8000000100265EE0;
      v5 = 0x8000000100262940;
      v7 = 0x80000001002621B0;
      v6 = 0xD000000000000012;
      goto LABEL_7;
    }
    v11 = sub_100067058(3u, a1);
    v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    if (v11)
    {
      v3 = 0xD00000000000004ELL;
      v12 = 0x8000000100265F80;
      v5 = 0x8000000100265F60;
      v4 = 0xD000000000000012;
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v3 = 0xD000000000000032;
  v12 = 0x8000000100265F20;
  v4 = 0x636E656772656D45;
  v5 = 0xED0000534F532079;
LABEL_6:
  v6 = 0;
  v7 = 0;
LABEL_7:
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v4, *(Swift::String_optional *)&v6, (NSBundle)v2, v8, *(Swift::String *)&v3)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_1000711B0(char a1)
{
  id v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  Swift::String v8;
  uint64_t countAndFlagsBits;
  unint64_t v11;

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if ((a1 & 1) != 0)
  {
    v4 = 0xD000000000000013;
    v3 = 0xD000000000000038;
    v11 = 0x8000000100265EE0;
    v5 = 0x8000000100262940;
    v7 = 0x80000001002621B0;
    v6 = 0xD000000000000012;
  }
  else
  {
    v3 = 0xD000000000000032;
    v11 = 0x8000000100265F20;
    v4 = 0x636E656772656D45;
    v5 = 0xED0000534F532079;
    v6 = 0;
    v7 = 0;
  }
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v4, *(Swift::String_optional *)&v6, (NSBundle)v2, v8, *(Swift::String *)&v3)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_1000712B8(char a1)
{
  id v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String v6;
  uint64_t countAndFlagsBits;
  unint64_t v9;

  v2 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  if ((a1 & 1) != 0)
  {
    v3 = 0xD00000000000005BLL;
    v9 = 0x8000000100265E80;
    v4 = 0x8000000100265E50;
    v5 = 0x1000000000000020;
  }
  else
  {
    v3 = 0xD000000000000063;
    v9 = 0x8000000100265DE0;
    v4 = 0x8000000100265DB0;
    v5 = 0xD000000000000021;
  }
  v6._countAndFlagsBits = 0;
  v6._object = (void *)0xE000000000000000;
  countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v5, (Swift::String_optional)0, (NSBundle)v2, v6, *(Swift::String *)&v3)._countAndFlagsBits;

  return countAndFlagsBits;
}

uint64_t sub_1000713A4()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000713C8(void **a1)
{
  uint64_t v1;

  return sub_10006FB20(a1, v1);
}

uint64_t sub_1000713D0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;

  result = EnvironmentValues.font.getter();
  *a1 = result;
  return result;
}

uint64_t sub_1000713F8(_QWORD *a1)
{
  uint64_t v1;

  v1 = swift_retain(*a1);
  return EnvironmentValues.font.setter(v1);
}

unint64_t sub_100071420()
{
  unint64_t result;
  uint64_t v1;
  _QWORD v2[2];

  result = qword_10031AB00;
  if (!qword_10031AB00)
  {
    v1 = sub_100007FAC(&qword_10031AAF8);
    v2[0] = sub_100007FAC(&qword_100316BE8);
    v2[1] = sub_10000AAB8();
    swift_getOpaqueTypeConformance2(v2, &opaque type descriptor for <<opaque return type of View.symbolVariant(_:)>>, 1);
    sub_1000084FC(&qword_10031AB08, &qword_10031AB10, (uint64_t)&protocol conformance descriptor for _ForegroundStyleModifier<A>);
    result = swift_getWitnessTable(&protocol conformance descriptor for <> ModifiedContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031AB00);
  }
  return result;
}

double sub_1000714CC()
{
  void *v0;
  id v1;
  id v2;
  double v3;
  CGFloat v4;
  double v5;
  CGFloat v6;
  double v7;
  CGFloat v8;
  double v9;
  CGFloat v10;
  double Width;
  id v12;
  id v13;
  double v14;
  CGFloat v15;
  double v16;
  CGFloat v17;
  double v18;
  CGFloat v19;
  double v20;
  CGFloat v21;
  CGRect v23;
  CGRect v24;

  v0 = (void *)objc_opt_self(UIScreen);
  v1 = objc_msgSend(v0, "mainScreen");
  v2 = objc_msgSend(v1, "fixedCoordinateSpace");

  objc_msgSend(v2, "bounds");
  v4 = v3;
  v6 = v5;
  v8 = v7;
  v10 = v9;
  swift_unknownObjectRelease(v2);
  v23.origin.x = v4;
  v23.origin.y = v6;
  v23.size.width = v8;
  v23.size.height = v10;
  Width = CGRectGetWidth(v23);
  v12 = objc_msgSend(v0, "mainScreen");
  v13 = objc_msgSend(v12, "fixedCoordinateSpace");

  objc_msgSend(v13, "bounds");
  v15 = v14;
  v17 = v16;
  v19 = v18;
  v21 = v20;
  swift_unknownObjectRelease(v13);
  v24.origin.x = v15;
  v24.origin.y = v17;
  v24.size.width = v19;
  v24.size.height = v21;
  CGRectGetHeight(v24);
  return Width;
}

uint64_t sub_100071600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  NSString v8;
  id v9;
  uint64_t v10;

  v4 = a2;
  if (a4)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    v8 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v4);
    v9 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v8);

    if (v9)
    {
      swift_bridgeObjectRelease(a4);
      swift_bridgeObjectRetain(v4);
      a3 = a1;
    }
    else
    {
      v4 = a4;
    }
    v10 = a3;
  }
  else
  {
    swift_bridgeObjectRetain(a2);
    v10 = a1;
  }
  return Image.init(_:bundle:)(v10, v4, 0);
}

ValueMetadata *type metadata accessor for UIMetrics.ImageNameWithFallback()
{
  return &type metadata for UIMetrics.ImageNameWithFallback;
}

uint64_t sub_100071700(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 72) = 0;
  *(_OWORD *)(v1 + 56) = 0u;
  *(_OWORD *)(v1 + 40) = 0u;
  *(_OWORD *)(v1 + 24) = 0u;
  *(_BYTE *)(v1 + 80) = 1;
  *(_QWORD *)(v1 + 96) = 0;
  *(_QWORD *)(v1 + 104) = 0;
  *(_QWORD *)(v1 + 88) = 0;
  *(_WORD *)(v1 + 112) = 769;
  *(_DWORD *)(v1 + 114) = 0;
  *(_WORD *)(v1 + 118) = 2;
  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_100071744(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t result;
  int v18;
  int v19;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v3 = type metadata accessor for LinkState(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_100003DB8((uint64_t *)&unk_10031B230);
  v10 = __chkstk_darwin(v8, v9);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10, v13);
  v15 = (char *)&v26 - v14;
  sub_10000B234(a1, (uint64_t)&v26 - v14, (uint64_t *)&unk_10031B230);
  v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48);
  if (v16(v15, 1, v3) == 1)
  {
    result = sub_100007FF0((uint64_t)v15, (uint64_t *)&unk_10031B230);
    v18 = 2;
  }
  else
  {
    v18 = v15[1];
    result = sub_10000AFFC((uint64_t)v15, type metadata accessor for LinkState);
  }
  v19 = *(unsigned __int8 *)(v1 + 118);
  if (v19 != 2 && (v19 & 1) != 0 && v18 != 2 && (v18 & 1) == 0)
  {
    v21 = *(_QWORD *)(v1 + 24);
    if (v21)
    {
      v22 = *(_QWORD *)(v21 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_lostSyncTimes);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v21 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_lostSyncTimes) = v24;
    }
  }
  *(_BYTE *)(v1 + 118) = v18;
  sub_10000B234(a1, (uint64_t)v12, (uint64_t *)&unk_10031B230);
  if (v16(v12, 1, v3) == 1)
    return sub_100007FF0((uint64_t)v12, (uint64_t *)&unk_10031B230);
  sub_1000747C0((uint64_t)v12, (uint64_t)v7);
  v25 = *(_QWORD *)(v1 + 24);
  if (v25)
  {
    swift_retain(v25);
    sub_100072B84((uint64_t)v7);
    swift_release(v25);
  }
  return sub_10000AFFC((uint64_t)v7, type metadata accessor for LinkState);
}

uint64_t sub_100071928(uint64_t a1)
{
  uint64_t v1;
  int v3;
  __int128 v4;
  uint64_t v5;
  char v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  if ((*(_BYTE *)(a1 + 80) & 1) != 0)
  {
    v5 = 0;
    *(_BYTE *)(v1 + 113) = 3;
LABEL_9:
    v4 = 0uLL;
    v6 = 1;
    goto LABEL_10;
  }
  if ((*(_BYTE *)(a1 + 66) & 1) != 0 || (v3 = *(unsigned __int8 *)(a1 + 64), v3 == 4))
    LOBYTE(v3) = 3;
  *(_BYTE *)(v1 + 113) = v3;
  if ((*(_BYTE *)(a1 + 66) & 1) != 0)
  {
    v5 = 0;
    goto LABEL_9;
  }
  v4 = *(_OWORD *)(a1 + 168);
  v5 = *(_QWORD *)(a1 + 184);
  v6 = *(_BYTE *)(a1 + 192);
LABEL_10:
  *(_OWORD *)(v1 + 88) = v4;
  *(_QWORD *)(v1 + 104) = v5;
  *(_BYTE *)(v1 + 112) = v6;
  *(_BYTE *)(v1 + 114) = sub_100067058(0, *(_QWORD *)(a1 + 200));
  result = sub_100067058(4u, *(_QWORD *)(a1 + 200));
  if ((result & 1) != 0 && (*(_BYTE *)(v1 + 116) & 1) == 0 && (*(_BYTE *)(v1 + 115) & 1) == 0)
  {
    v8 = *(_QWORD *)(v1 + 24);
    if (v8)
    {
      v9 = *(_QWORD *)(v8 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_obstructionGuidanceTimes);
      v10 = __OFADD__(v9, 1);
      v11 = v9 + 1;
      if (v10)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v8 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_obstructionGuidanceTimes) = v11;
    }
  }
  *(_BYTE *)(v1 + 115) = result & 1;
  if (*(_BYTE *)(v1 + 114) == 1)
  {
    v12 = *(_QWORD *)(v1 + 24);
    if (v12)
    {
      v13 = *(unsigned __int8 *)(v1 + 119);
      swift_retain(v12);
      sub_100072E8C(v13);
      return swift_release(v12);
    }
  }
  return result;
}

uint64_t sub_100071A44(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)(result + 48);
  if (!v2)
    goto LABEL_19;
  v3 = result;
  result = sub_100067058(2u, *(_QWORD *)(v2 + 48));
  v4 = result;
  v5 = *(_QWORD *)(v3 + 48);
  if (!v5)
  {
    if ((result & 1) != 0)
    {
      result = 0;
      goto LABEL_8;
    }
LABEL_19:
    v6 = 0;
    *(_BYTE *)(v1 + 116) = 0;
    goto LABEL_20;
  }
  result = sub_100067058(5u, *(_QWORD *)(v5 + 48));
  if ((v4 & 1) == 0)
  {
    *(_BYTE *)(v1 + 116) = 0;
    if ((result & 1) == 0)
    {
LABEL_5:
      v6 = 0;
LABEL_20:
      *(_BYTE *)(v1 + 117) = v6;
      return result;
    }
    goto LABEL_14;
  }
LABEL_8:
  if ((*(_BYTE *)(v1 + 116) & 1) == 0 && (*(_BYTE *)(v1 + 115) & 1) == 0)
  {
    v7 = *(_QWORD *)(v1 + 24);
    if (v7)
    {
      v8 = *(_QWORD *)(v7 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_obstructionGuidanceTimes);
      v9 = __OFADD__(v8, 1);
      v10 = v8 + 1;
      if (v9)
        goto LABEL_22;
      *(_QWORD *)(v7 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_obstructionGuidanceTimes) = v10;
    }
  }
  *(_BYTE *)(v1 + 116) = 1;
  if ((result & 1) == 0)
    goto LABEL_5;
LABEL_14:
  if ((*(_BYTE *)(v1 + 117) & 1) != 0)
    goto LABEL_18;
  v11 = *(_QWORD *)(v1 + 24);
  if (!v11)
    goto LABEL_18;
  v12 = *(_QWORD *)(v11 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_skimmerGuidanceTimes);
  v9 = __OFADD__(v12, 1);
  v13 = v12 + 1;
  if (!v9)
  {
    *(_QWORD *)(v11 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_skimmerGuidanceTimes) = v13;
LABEL_18:
    v6 = 1;
    goto LABEL_20;
  }
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

void sub_100071B34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  _BYTE *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(unsigned __int8 *, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[32];
  uint64_t v42;
  _OWORD v43[4];
  __int16 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  __int16 v49;
  char v50;
  char v51;

  v3 = v2;
  sub_10000B458(a1, (uint64_t)v41, &qword_100319FD8);
  v6 = v42;
  v7 = sub_100003DB8(&qword_1003180C0);
  v9 = __chkstk_darwin(v7, v8);
  v11 = &v41[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v9, v12);
  v14 = &v41[-v13];
  v15 = type metadata accessor for DispatchTime(0);
  __chkstk_darwin(v15, v16);
  v18 = &v41[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000B458(a1, (uint64_t)v43, &qword_100319FD8);
  if (*((_QWORD *)&v43[0] + 1))
  {
    v47 = v43[2];
    v48 = v43[3];
    v49 = v44;
    v45 = v43[0];
    v46 = v43[1];
    sub_10001AE10(&v45, &v50);
    v19 = sub_10001AE10(&v50, &v51);
    if (v51 == 5 && BYTE1(v46) == 1)
    {
      if (*(_QWORD *)(v3 + 24))
        return;
      static DispatchTime.now()(v19);
      v20 = sub_100067058(3u, v6);
      v21 = type metadata accessor for Data(0);
      swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
      v22 = sub_100072578(v18, v20);
      v23 = *(_QWORD *)(v3 + 24);
      *(_QWORD *)(v3 + 24) = v22;
      goto LABEL_18;
    }
  }
  v24 = *(_QWORD *)(v3 + 24);
  if (!v24)
    return;
  sub_10000B234(a2, (uint64_t)v14, &qword_1003180C0);
  v25 = type metadata accessor for ConnectionClosed(0);
  v26 = *(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 48);
  if (v26(v14, 1, v25) == 1)
  {
    swift_retain(v24);
    sub_100007FF0((uint64_t)v14, &qword_1003180C0);
LABEL_10:
    v28 = 0;
    v29 = 0;
    goto LABEL_12;
  }
  v27 = *v14;
  swift_retain(v24);
  sub_10000AFFC((uint64_t)v14, type metadata accessor for ConnectionClosed);
  if (v27 == 12)
    goto LABEL_10;
  v28 = sub_100071EA8(v27);
LABEL_12:
  v30 = (uint64_t *)(v24 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_exitReason);
  v31 = *(_QWORD *)(v24 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_exitReason + 8);
  *v30 = v28;
  v30[1] = v29;
  swift_release(v24);
  swift_bridgeObjectRelease(v31);
  sub_10000B234(a2, (uint64_t)v11, &qword_1003180C0);
  if (v26(v11, 1, v25) == 1)
  {
    sub_100007FF0((uint64_t)v11, &qword_1003180C0);
  }
  else
  {
    v32 = *(_QWORD *)&v11[*(int *)(v25 + 24)];
    swift_bridgeObjectRetain(v32);
    sub_10000AFFC((uint64_t)v11, type metadata accessor for ConnectionClosed);
    v33 = *(_QWORD *)(v3 + 24);
    if (!v33)
    {
LABEL_21:
      __break(1u);
      return;
    }
    v34 = sub_100112D9C(v32);
    v36 = v35;
    swift_retain(v33);
    swift_bridgeObjectRelease(v32);
    v37 = (uint64_t *)(v33 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_requestReason);
    v38 = *(_QWORD *)(v33 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_requestReason + 8);
    *v37 = v34;
    v37[1] = v36;
    swift_release(v33);
    swift_bridgeObjectRelease(v38);
  }
  v39 = *(_QWORD *)(v3 + 24);
  if (!v39)
  {
    __break(1u);
    goto LABEL_21;
  }
  swift_retain(*(_QWORD *)(v3 + 24));
  v40 = sub_100073A04();
  swift_release(v39);
  sub_100176278(0, v40);
  swift_bridgeObjectRelease(v40);
  v23 = *(_QWORD *)(v3 + 24);
  *(_QWORD *)(v3 + 24) = 0;
LABEL_18:
  swift_release(v23);
  sub_100072054();
}

uint64_t sub_100071EA8(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100071EE8 + 4 * aB[a1]))(0x7571655272657355, 0xED00006465747365);
}

uint64_t sub_100071EE8()
{
  return 0x794D646E6946;
}

uint64_t sub_100071EFC()
{
  return 0x656E616C70726941;
}

unint64_t sub_100071F1C()
{
  return 0xD000000000000011;
}

uint64_t sub_100071FF4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (*(_BYTE *)(v1 + 119) != (result & 1))
  {
    *(_BYTE *)(v1 + 119) = result & 1;
    if ((result & 1) != 0)
    {
      v2 = *(_QWORD *)(v1 + 24);
      if (v2)
      {
        v3 = *(_BYTE *)(v1 + 114);
        swift_retain(v2);
        sub_100073424(v3);
        return swift_release(v2);
      }
    }
  }
  return result;
}

uint64_t sub_100072054()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;
  char v12;
  uint64_t result;
  id v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  __n128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = v0;
  v2 = sub_100003DB8(&qword_10031B208);
  __chkstk_darwin(v2, v3);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint64_t *)((char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10006477C(0, (unint64_t *)&qword_10031ED20, OS_dispatch_queue_ptr);
  *v10 = static OS_dispatch_queue.main.getter(v11);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = _dispatchPreconditionTest(_:)(v10);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    return result;
  }
  result = *(_QWORD *)(v1 + 32);
  if (*(_QWORD *)(v1 + 24))
  {
    if (result)
      return result;
    sub_10006477C(0, (unint64_t *)&qword_10031B210, NSTimer_ptr);
    v14 = objc_msgSend((id)objc_opt_self(NSRunLoop), "mainRunLoop");
    v15 = type metadata accessor for NSRunLoop.SchedulerOptions(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v5, 1, 1, v15);
    v16 = static NSTimer.publish(every:tolerance:on:in:options:)(0, 1, v14, NSRunLoopCommonModes, v5, 1.0);

    sub_100007FF0((uint64_t)v5, &qword_10031B208);
    v26 = v16;
    v17 = type metadata accessor for NSTimer.TimerPublisher(0);
    v18 = sub_100074700();
    v19 = ConnectablePublisher.autoconnect()(v17, v18);
    swift_release(v16);
    v26 = v19;
    v20 = swift_allocObject(&unk_1002E9770, 24, 7);
    swift_weakInit(v20 + 16);
    v21 = sub_100003DB8(&qword_10031B220);
    v22 = sub_100074774();
    v24 = Publisher<>.sink(receiveValue:)(sub_10007476C, v20, v21, v22, v23);
    swift_release(v20);
    swift_release(v26);
    result = *(_QWORD *)(v1 + 32);
    *(_QWORD *)(v1 + 32) = v24;
  }
  else
  {
    if (!result)
      return result;
    *(_QWORD *)(v1 + 32) = 0;
  }
  return swift_release(result);
}

uint64_t sub_1000722BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  char v12;
  char v13;
  char v14[24];
  _BYTE v15[48];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v14, 0, 0);
  result = swift_weakLoadStrong(v2);
  if (result)
  {
    v4 = result;
    v5 = *(_QWORD *)(result + 24);
    if (v5)
    {
      sub_10000B458(result + 40, (uint64_t)v15, &qword_100319FB8);
      v6 = *(unint64_t **)(v4 + 88);
      v7 = *(_QWORD *)(v4 + 96);
      v8 = *(_QWORD *)(v4 + 104);
      v9 = *(unsigned __int8 *)(v4 + 112);
      v10 = *(_BYTE *)(v4 + 113);
      if ((*(_BYTE *)(v4 + 116) & 1) != 0)
        v11 = 1;
      else
        v11 = *(_BYTE *)(v4 + 115);
      v12 = *(_BYTE *)(v4 + 117);
      v13 = *(_BYTE *)(v4 + 118);
      swift_retain(v5);
      sub_1000735C8((uint64_t)v15, v6, v7, v8, v9, v10, v11, v12, v13);
      swift_release(v4);
      v4 = v5;
    }
    return swift_release(v4);
  }
  return result;
}

uint64_t sub_1000723B0()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[3]);
  swift_release(v0[4]);
  return swift_deallocClassInstance(v0, 120, 7);
}

uint64_t type metadata accessor for AnalyticsSatelliteConnectionStats()
{
  return objc_opt_self(_TtC8SOSBuddy33AnalyticsSatelliteConnectionStats);
}

uint64_t sub_100072404(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _OWORD v6[2];
  uint64_t v7;
  char v8;
  _OWORD v9[2];
  uint64_t v10;

  v3 = *v1;
  sub_10000B458(a1, *v1 + 40, &qword_100319FB8);
  result = sub_10000B458(a1, (uint64_t)v6, &qword_100319FB8);
  if ((v8 & 1) == 0)
  {
    v9[0] = v6[0];
    v9[1] = v6[1];
    v10 = v7;
    v5 = *(_QWORD *)(v3 + 24);
    if (v5)
    {
      swift_retain(*(_QWORD *)(v3 + 24));
      sub_100072950((uint64_t *)v9);
      return swift_release(v5);
    }
  }
  return result;
}

uint64_t sub_100072490(uint64_t a1)
{
  return sub_100071744(a1);
}

uint64_t sub_1000724B0(uint64_t a1)
{
  return sub_100071928(a1);
}

uint64_t sub_1000724D0(uint64_t a1)
{
  return sub_100071A44(a1);
}

void sub_1000724F0(uint64_t a1, uint64_t a2)
{
  sub_100071B34(a1, a2);
}

uint64_t sub_100072510()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t result;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 24);
  if (v2)
  {
    v3 = *(_BYTE *)(v1 + 114);
    swift_retain(v2);
    sub_1000731E4(v3);
    return swift_release(v2);
  }
  return result;
}

uint64_t sub_100072558(uint64_t a1)
{
  return sub_100071FF4(a1);
}

uint64_t sub_100072578(char *a1, char a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  void (*v20)(uint64_t, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  __n128 v33;
  void (*v34)(char *, uint64_t, __n128);
  void (*v35)(char *, uint64_t);
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;

  v3 = v2;
  v6 = type metadata accessor for DispatchTime(0);
  v7 = *(_QWORD *)(v6 - 8);
  v9 = __chkstk_darwin(v6, v8);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9, v12);
  v14 = (char *)&v37 - v13;
  v15 = v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_firstTargetId;
  *(_QWORD *)v15 = 0;
  *(_BYTE *)(v15 + 8) = 1;
  v16 = v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_lastTargetId;
  *(_QWORD *)v16 = 0;
  *(_BYTE *)(v16 + 8) = 1;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_inServiceSeconds) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_outOfServiceSeconds) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_kRelativeAzimuthBuckets) = &off_1002E07D8;
  v17 = OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_relativeAzimuth;
  *(_QWORD *)(v3 + v17) = sub_10022722C((uint64_t)_swiftEmptyArrayStorage);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_relativePitch) = &off_1002E0830;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_targetVisibility) = &off_1002E0868;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_caForegroundRequests) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_caLatencyTotal) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_caLatencyCount) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_caBannerTargetAimHelpCount) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_obstructionGuidanceTimes) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_obstructionGuidanceSeconds) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_skimmerGuidanceTimes) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_skimmerGuidanceSeconds) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_lostSyncTimes) = 0;
  *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_notSyncedSeconds) = 0;
  v18 = (_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_exitReason);
  *v18 = 0;
  v18[1] = 0;
  v19 = (_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_requestReason);
  *v19 = 0;
  v19[1] = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_trackingCALatencySince, 1, 1, v6);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_trackingLostConnection) = 2;
  v20 = *(void (**)(uint64_t, char *, uint64_t))(v7 + 16);
  v20(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_startTimestamp, a1, v6);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_isTryOut) = a2;
  if (qword_100315818 != -1)
    swift_once(&qword_100315818, sub_1000D95C0);
  v21 = type metadata accessor for Logger(0);
  sub_10000D744(v21, (uint64_t)qword_10033FD00);
  v22 = ((uint64_t (*)(char *, char *, uint64_t))v20)(v14, a1, v6);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc(12, -1);
    v40 = a1;
    v26 = (uint8_t *)v25;
    v27 = swift_slowAlloc(32, -1);
    v39 = v7;
    v28 = v27;
    v42 = v27;
    *(_DWORD *)v26 = 136315138;
    v38 = v26 + 4;
    v29.n128_f64[0] = ((double (*)(char *, char *, uint64_t))v20)(v11, v14, v6);
    v30 = String.init<A>(describing:)(v11, v6, v29);
    v32 = v31;
    v41 = sub_100172BEC(v30, v31, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v38, v26 + 12);
    v33 = swift_bridgeObjectRelease(v32);
    v34 = *(void (**)(char *, uint64_t, __n128))(v39 + 8);
    v34(v14, v6, v33);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "SatelliteConnectionStats: started tracking at %s", v26, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v26, -1, -1);

    ((void (*)(char *, uint64_t))v34)(v40, v6);
  }
  else
  {

    v35 = *(void (**)(char *, uint64_t))(v7 + 8);
    v35(v14, v6);
    v35(a1, v6);
  }
  return v3;
}

void sub_100072950(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;

  v2 = v1;
  v4 = v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_firstTargetId;
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_firstTargetId + 8) == 1)
  {
    v5 = *a1;
    *(_QWORD *)v4 = *a1;
    *(_BYTE *)(v4 + 8) = 0;
    if (qword_100315818 != -1)
      swift_once(&qword_100315818, sub_1000D95C0);
    v6 = type metadata accessor for Logger(0);
    v7 = sub_10000D744(v6, (uint64_t)qword_10033FD00);
    v8 = Logger.logObject.getter(v7);
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v10 = 134217984;
      v18 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v10 + 4, v10 + 12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "SatelliteConnectionStats: first targetId == %lld", v10, 0xCu);
      swift_slowDealloc(v10, -1, -1);
    }

  }
  v11 = v2 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_lastTargetId;
  v12 = *a1;
  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_lastTargetId + 8) & 1) != 0
    || *(_QWORD *)v11 != v12)
  {
    *(_QWORD *)v11 = v12;
    *(_BYTE *)(v11 + 8) = 0;
    if (qword_100315818 != -1)
      swift_once(&qword_100315818, sub_1000D95C0);
    v13 = type metadata accessor for Logger(0);
    v14 = sub_10000D744(v13, (uint64_t)qword_10033FD00);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(12, -1);
      *(_DWORD *)v17 = 134217984;
      v18 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v17 + 4, v17 + 12);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "SatelliteConnectionStats: last targetId == %lld", v17, 0xCu);
      swift_slowDealloc(v17, -1, -1);
    }

  }
}

void sub_100072B84(uint64_t a1)
{
  uint64_t v1;
  int v2;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint8_t *v7;
  const char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  os_log_t oslog;

  v2 = *(unsigned __int8 *)(a1 + 1);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_trackingLostConnection) != 2)
  {
    if (v2 == 2)
      return;
    v9 = *(unsigned __int8 *)(a1 + 2);
    if (v9 == 2 || (v2 & v9 & 1) == 0)
      return;
    *(_BYTE *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_trackingLostConnection) = 2;
    if (qword_100315818 != -1)
      swift_once(&qword_100315818, sub_1000D95C0);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_10000D744(v10, (uint64_t)qword_10033FD00);
    oslog = (os_log_t)Logger.logObject.getter(v11);
    v6 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(oslog, v6))
    {
LABEL_19:

      return;
    }
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    v8 = "SatelliteConnectionStats: stopped tracking lost connection";
LABEL_18:
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, v8, v7, 2u);
    swift_slowDealloc(v7, -1, -1);
    goto LABEL_19;
  }
  if (v2 != 2 && (v2 & 1) == 0)
  {
    *(_BYTE *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_trackingLostConnection) = 0;
    if (qword_100315818 != -1)
      swift_once(&qword_100315818, sub_1000D95C0);
    v4 = type metadata accessor for Logger(0);
    v5 = sub_10000D744(v4, (uint64_t)qword_10033FD00);
    oslog = (os_log_t)Logger.logObject.getter(v5);
    v6 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(oslog, v6))
      goto LABEL_19;
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    v8 = "SatelliteConnectionStats: started tracking lost connection";
    goto LABEL_18;
  }
}

void sub_100072D38(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;
  NSObject *oslog;
  uint64_t v13;
  uint64_t v14;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_caLatencyTotal);
  v4 = __CFADD__(v3, a1);
  v5 = v3 + a1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v2 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_caLatencyTotal) = v5;
    v6 = *(_QWORD *)(v2 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_caLatencyCount);
    v4 = __CFADD__(v6, 1);
    v7 = v6 + 1;
    if (!v4)
    {
      v1 = a1;
      *(_QWORD *)(v2 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_caLatencyCount) = v7;
      if (qword_100315818 == -1)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_9:
  swift_once(&qword_100315818, sub_1000D95C0);
LABEL_4:
  v8 = type metadata accessor for Logger(0);
  v9 = sub_10000D744(v8, (uint64_t)qword_10033FD00);
  oslog = Logger.logObject.getter(v9);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    *(_DWORD *)v11 = 134217984;
    v13 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v11 + 4, v11 + 12);
    _os_log_impl((void *)&_mh_execute_header, oslog, v10, "SatelliteConnectionStats: recorded CA latency = %llu", v11, 0xCu);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
}

void sub_100072E8C(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  uint64_t v35;
  BOOL v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  char *v43;
  int v44;
  _BYTE v45[24];
  char v46[24];

  v44 = a1;
  v2 = type metadata accessor for DispatchTime(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_1003180C8);
  v9 = __chkstk_darwin(v7, v8);
  v43 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9, v11);
  v14 = (char *)&v43 - v13;
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v43 - v16;
  v18 = v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_trackingCALatencySince;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_trackingCALatencySince, v46, 0, 0);
  sub_10000B234(v18, (uint64_t)v17, &qword_1003180C8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 48);
  v20 = v19(v17, 1, v2);
  v21 = sub_100007FF0((uint64_t)v17, &qword_1003180C8);
  v34 = v20 == 1;
  v22 = v1;
  if (v34)
    goto LABEL_8;
  static DispatchTime.now()(v21);
  sub_10000B234(v18, (uint64_t)v14, &qword_1003180C8);
  v23 = v19(v14, 1, v2);
  if ((_DWORD)v23 == 1)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    return;
  }
  v24 = DispatchTime.uptimeNanoseconds.getter(v23);
  v25 = DispatchTime.uptimeNanoseconds.getter(v24);
  if (v25 >= v24)
    goto LABEL_6;
  v26 = DispatchTime.uptimeNanoseconds.getter(v25);
  v27 = DispatchTime.uptimeNanoseconds.getter(v26);
  v28 = v26 - v27;
  if (v26 < v27)
  {
    __break(1u);
LABEL_6:
    v28 = 0;
  }
  v29 = v28;
  v30 = *(void (**)(char *, uint64_t))(v3 + 8);
  v30(v6, v2);
  v30(v14, v2);
  sub_100072D38(v29 / 0x3B9ACA00);
  v31 = (uint64_t)v43;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v43, 1, 1, v2);
  swift_beginAccess(v18, v45, 33, 0);
  sub_100025C08(v31, v18);
  swift_endAccess(v45);
LABEL_8:
  v32 = OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_trackingLostConnection;
  v33 = *(unsigned __int8 *)(v1
                           + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_trackingLostConnection);
  v34 = v33 != 2 && (v33 & 1) == 0;
  if (v34)
  {
    if ((v44 & 1) == 0)
      goto LABEL_19;
    v35 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_caBannerTargetAimHelpCount);
    v36 = __OFADD__(v35, 1);
    v37 = v35 + 1;
    if (v36)
    {
      __break(1u);
    }
    else
    {
      *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_caBannerTargetAimHelpCount) = v37;
      if (qword_100315818 == -1)
      {
LABEL_16:
        v38 = type metadata accessor for Logger(0);
        v39 = sub_10000D744(v38, (uint64_t)qword_10033FD00);
        v40 = Logger.logObject.getter(v39);
        v41 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v40, v41))
        {
          v42 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v42 = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, v41, "SatelliteConnectionStats: recorded CA banner orientation assistance", v42, 2u);
          swift_slowDealloc(v42, -1, -1);
        }

LABEL_19:
        if (*(_BYTE *)(v22 + v32) != 2)
        {
          *(_BYTE *)(v22 + v32) = 1;
          return;
        }
        goto LABEL_24;
      }
    }
    swift_once(&qword_100315818, sub_1000D95C0);
    goto LABEL_16;
  }
}

void sub_1000731E4(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  _BYTE v27[24];

  v3 = sub_100003DB8(&qword_1003180C8);
  v5 = __chkstk_darwin(v3, v4);
  v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  __chkstk_darwin(v5, v8);
  v10 = &v27[-v9 - 8];
  v11 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_caForegroundRequests);
  v12 = __OFADD__(v11, 1);
  v13 = v11 + 1;
  if (v12)
  {
    __break(1u);
  }
  else
  {
    *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_caForegroundRequests) = v13;
    if (qword_100315818 == -1)
      goto LABEL_3;
  }
  swift_once(&qword_100315818, sub_1000D95C0);
LABEL_3:
  v14 = type metadata accessor for Logger(0);
  v15 = sub_10000D744(v14, (uint64_t)qword_10033FD00);
  v16 = Logger.logObject.getter(v15);
  v17 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "SatelliteConnectionStats: recorded CA foreground request", v18, 2u);
    swift_slowDealloc(v18, -1, -1);
  }

  if ((a1 & 1) == 0)
  {
    static DispatchTime.now()(v19);
    v20 = type metadata accessor for DispatchTime(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v10, 0, 1, v20);
    sub_10000B458((uint64_t)v10, (uint64_t)v7, &qword_1003180C8);
    v21 = v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_trackingCALatencySince;
    swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_trackingCALatencySince, v27, 33, 0);
    sub_100025C08((uint64_t)v7, v21);
    swift_endAccess(v27);
    v23 = Logger.logObject.getter(v22);
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "SatelliteConnectionStats: started tracking CA latency", v25, 2u);
      swift_slowDealloc(v25, -1, -1);
    }

  }
}

void sub_100073424(char a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  _BYTE v20[24];

  v3 = sub_100003DB8(&qword_1003180C8);
  v5 = __chkstk_darwin(v3, v4);
  v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = __chkstk_darwin(v5, v8);
  v11 = &v20[-v10 - 8];
  if ((a1 & 1) == 0)
  {
    static DispatchTime.now()(v9);
    v12 = type metadata accessor for DispatchTime(0);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 1, v12);
    sub_10000B458((uint64_t)v11, (uint64_t)v7, &qword_1003180C8);
    v13 = v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_trackingCALatencySince;
    swift_beginAccess(v13, v20, 33, 0);
    sub_100025C08((uint64_t)v7, v13);
    swift_endAccess(v20);
    if (qword_100315818 != -1)
      swift_once(&qword_100315818, sub_1000D95C0);
    v14 = type metadata accessor for Logger(0);
    v15 = sub_10000D744(v14, (uint64_t)qword_10033FD00);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "SatelliteConnectionStats: started tracking CA latency", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }

  }
}

void sub_1000735C8(uint64_t a1, unint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, char a8, char a9)
{
  uint64_t v9;
  uint64_t v10;
  unint64_t v13;
  _QWORD *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36;
  double v37;
  double v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE v53[24];
  _QWORD v54[3];
  _BYTE v55[24];
  _BYTE v56[48];

  v10 = v9;
  LOBYTE(v13) = a6;
  sub_10000B458(a1, (uint64_t)v56, &qword_100319FB8);
  if ((v56[40] & 1) != 0)
  {
    v17 = (_QWORD *)(v10 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_outOfServiceSeconds);
    v18 = *(_QWORD *)(v10 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_outOfServiceSeconds);
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (!v19)
      goto LABEL_6;
    __break(1u);
  }
  v17 = (_QWORD *)(v10 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_inServiceSeconds);
  v21 = *(_QWORD *)(v10 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_inServiceSeconds);
  v19 = __OFADD__(v21, 1);
  v20 = v21 + 1;
  if (v19)
    goto LABEL_58;
LABEL_6:
  *v17 = v20;
  if ((a5 & 1) != 0)
    goto LABEL_36;
  v22 = *(double *)&a2;
  if (*(double *)&a2 < 0.0)
    v22 = -*(double *)&a2;
  v23 = floor(v22 * 57.2957795);
  if ((~*(_QWORD *)&v23 & 0x7FF0000000000000) == 0)
    goto LABEL_59;
  if (v23 <= -9.22337204e18)
    goto LABEL_60;
  if (v23 >= 9.22337204e18)
    goto LABEL_61;
  v24 = *(_QWORD **)(v10 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_kRelativeAzimuthBuckets);
  v25 = v24[2];
  if (v25)
  {
    a5 = v24[4];
    if (a5 >= (uint64_t)v23)
    {
LABEL_17:
      v29 = (_QWORD *)(v10 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_relativeAzimuth);
      swift_beginAccess(v10 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_relativeAzimuth, v53, 0, 0);
      v30 = *v29;
      v31 = *(_QWORD *)(*v29 + 16);
      if (v31)
      {
        v32 = sub_10017D498(a5);
        if ((v33 & 1) != 0)
          v31 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v32);
        else
          v31 = 0;
      }
      v34 = v31 + 1;
      if (__OFADD__(v31, 1))
        goto LABEL_72;
      swift_beginAccess(v29, v55, 33, 0);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v29);
      v54[0] = *v29;
      *v29 = 0x8000000000000000;
      *(double *)&a2 = COERCE_DOUBLE(v54);
      sub_10020D16C(v34, a5, isUniquelyReferenced_nonNull_native);
      v36 = *v29;
      *v29 = v54[0];
      swift_bridgeObjectRelease(v36);
      swift_endAccess(v55);
    }
    else
    {
      v26 = v24 + 5;
      v27 = v25 - 1;
      while (v27)
      {
        v28 = *v26++;
        a5 = v28;
        --v27;
        if (v28 >= (uint64_t)v23)
          goto LABEL_17;
      }
    }
  }
  v37 = *(double *)&a3;
  if (*(double *)&a3 < 0.0)
    v37 = -*(double *)&a3;
  v38 = floor(v37 * 57.2957795 / 15.0);
  if ((~*(_QWORD *)&v38 & 0x7FF0000000000000) == 0)
    goto LABEL_62;
  if (v38 <= -9.22337204e18)
    goto LABEL_63;
  if (v38 >= 9.22337204e18)
    goto LABEL_64;
  a2 = (unint64_t *)(v10 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_relativePitch);
  swift_beginAccess(v10 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_relativePitch, &v52, 0, 0);
  if (*(_QWORD *)(*a2 + 16) - 1 >= (uint64_t)v38)
    a5 = (uint64_t)v38;
  else
    a5 = *(_QWORD *)(*a2 + 16) - 1;
  swift_beginAccess(a2, v55, 33, 0);
  a3 = *a2;
  v39 = swift_isUniquelyReferenced_nonNull_native(*a2);
  *a2 = a3;
  if ((v39 & 1) == 0)
    goto LABEL_65;
  for (; (a5 & 0x8000000000000000) == 0; *a2 = a3)
  {
    if ((unint64_t)a5 >= *(_QWORD *)(a3 + 16))
      goto LABEL_67;
    v40 = *(_QWORD *)(a3 + 32 + 8 * a5);
    v19 = __OFADD__(v40, 1);
    v41 = v40 + 1;
    if (v19)
      goto LABEL_68;
    *(_QWORD *)(a3 + 32 + 8 * a5) = v41;
    swift_endAccess(v55);
LABEL_36:
    v42 = qword_100250D20[(char)v13];
    a2 = (unint64_t *)(v10 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_targetVisibility);
    swift_beginAccess(v10 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_targetVisibility, v55, 0, 0);
    if (*(_QWORD *)(*a2 + 16) - 1 >= v42)
      a3 = v42;
    else
      a3 = *(_QWORD *)(*a2 + 16) - 1;
    swift_beginAccess(a2, v54, 33, 0);
    v13 = *a2;
    v43 = swift_isUniquelyReferenced_nonNull_native(*a2);
    *a2 = v13;
    if ((v43 & 1) != 0)
    {
      if ((a3 & 0x8000000000000000) != 0)
        goto LABEL_55;
    }
    else
    {
      v13 = (unint64_t)sub_100190EDC((_QWORD *)v13);
      *a2 = v13;
      if ((a3 & 0x8000000000000000) != 0)
      {
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
        goto LABEL_57;
      }
    }
    if (a3 >= *(_QWORD *)(v13 + 16))
      goto LABEL_56;
    v44 = *(_QWORD *)(v13 + 32 + 8 * a3);
    v19 = __OFADD__(v44, 1);
    v45 = v44 + 1;
    if (!v19)
    {
      *(_QWORD *)(v13 + 32 + 8 * a3) = v45;
      swift_endAccess(v54);
      if ((a7 & 1) != 0)
      {
        v46 = *(_QWORD *)(v10
                        + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_obstructionGuidanceSeconds);
        v19 = __OFADD__(v46, 1);
        v47 = v46 + 1;
        if (v19)
          goto LABEL_69;
        *(_QWORD *)(v10 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_obstructionGuidanceSeconds) = v47;
      }
      if ((a8 & 1) != 0)
      {
        v48 = *(_QWORD *)(v10 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_skimmerGuidanceSeconds);
        v19 = __OFADD__(v48, 1);
        v49 = v48 + 1;
        if (v19)
          goto LABEL_70;
        *(_QWORD *)(v10 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_skimmerGuidanceSeconds) = v49;
      }
      if (a9 != 2 && (a9 & 1) == 0)
      {
        v50 = *(_QWORD *)(v10 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_notSyncedSeconds);
        v19 = __OFADD__(v50, 1);
        v51 = v50 + 1;
        if (v19)
          goto LABEL_71;
        *(_QWORD *)(v10 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_notSyncedSeconds) = v51;
      }
      return;
    }
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
LABEL_65:
    *(double *)&a3 = COERCE_DOUBLE(sub_100190EDC((_QWORD *)a3));
  }
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  __break(1u);
LABEL_72:
  __break(1u);
}

uint64_t sub_100073A04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  NSNumber v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  Swift::String v22;
  void *object;
  uint64_t v24;
  uint64_t v25;
  NSNumber v26;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v28;
  unint64_t v29;
  uint64_t v30;
  _BOOL8 v31;
  uint64_t v32;
  char v33;
  unint64_t v34;
  char v35;
  uint64_t *v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  Class isa;
  char v41;
  Class v42;
  char v43;
  Class v44;
  char v45;
  uint64_t v46;
  NSString v47;
  char v48;
  uint64_t v49;
  NSString v50;
  char v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;

  v1 = v0;
  v2 = type metadata accessor for DispatchTime(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (char *)&v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_100319FC8);
  inited = swift_initStackObject(v7, &v63);
  *(_OWORD *)(inited + 16) = xmmword_100250D40;
  *(_QWORD *)(inited + 32) = 0x6C614361436D756ELL;
  *(_QWORD *)(inited + 40) = 0xEB0000000070756CLL;
  *(NSNumber *)(inited + 48) = Int64._bridgeToObjectiveC()();
  strcpy((char *)(inited + 56), "numCaCallupFS");
  *(_WORD *)(inited + 70) = -4864;
  *(NSNumber *)(inited + 72) = Int64._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 80) = 0x306E65704F727564;
  *(_QWORD *)(inited + 88) = 0xE800000000000000;
  v9 = v0 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_targetVisibility;
  swift_beginAccess(v9, &v62, 0, 0);
  if (!*(_QWORD *)(*(_QWORD *)v9 + 16))
    goto LABEL_42;
  *(NSNumber *)(inited + 96) = Int64._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 104) = 0x316E65704F727564;
  *(_QWORD *)(inited + 112) = 0xE800000000000000;
  if (*(_QWORD *)(*(_QWORD *)v9 + 16) < 2uLL)
  {
LABEL_43:
    __break(1u);
    goto LABEL_44;
  }
  *(NSNumber *)(inited + 120) = Int64._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 128) = 0x326E65704F727564;
  *(_QWORD *)(inited + 136) = 0xE800000000000000;
  if (*(_QWORD *)(*(_QWORD *)v9 + 16) < 3uLL)
  {
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  *(NSNumber *)(inited + 144) = Int64._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 152) = 0x336E65704F727564;
  *(_QWORD *)(inited + 160) = 0xE800000000000000;
  if (*(_QWORD *)(*(_QWORD *)v9 + 16) < 4uLL)
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  *(NSNumber *)(inited + 168) = Int64._bridgeToObjectiveC()();
  strcpy((char *)(inited + 176), "durOrientv15");
  *(_BYTE *)(inited + 189) = 0;
  *(_WORD *)(inited + 190) = -5120;
  v10 = v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_relativePitch;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_relativePitch, &v61, 0, 0);
  if (!*(_QWORD *)(*(_QWORD *)v10 + 16))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  *(NSNumber *)(inited + 192) = Int64._bridgeToObjectiveC()();
  strcpy((char *)(inited + 200), "durOrientv30");
  *(_BYTE *)(inited + 213) = 0;
  *(_WORD *)(inited + 214) = -5120;
  if (*(_QWORD *)(*(_QWORD *)v10 + 16) < 2uLL)
  {
LABEL_47:
    __break(1u);
LABEL_48:
    __break(1u);
LABEL_49:
    result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
    __break(1u);
    return result;
  }
  *(NSNumber *)(inited + 216) = Int64._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 224) = 0x6E6569724F727564;
  *(_QWORD *)(inited + 232) = 0xEF726568744F7674;
  if (*(_QWORD *)(*(_QWORD *)v10 + 16) < 3uLL)
    goto LABEL_48;
  *(NSNumber *)(inited + 240) = Int64._bridgeToObjectiveC()();
  strcpy((char *)(inited + 248), "durInService");
  *(_BYTE *)(inited + 261) = 0;
  *(_WORD *)(inited + 262) = -5120;
  *(NSNumber *)(inited + 264) = Int64._bridgeToObjectiveC()();
  strcpy((char *)(inited + 272), "durOutService");
  *(_WORD *)(inited + 286) = -4864;
  v11.super.super.isa = Int64._bridgeToObjectiveC()().super.super.isa;
  *(NSNumber *)(inited + 288) = v11;
  *(_QWORD *)(inited + 296) = 0x6C61746F54727564;
  *(_QWORD *)(inited + 304) = 0xE800000000000000;
  v12 = static DispatchTime.now()(v11.super.super.isa);
  v13 = DispatchTime.uptimeNanoseconds.getter(v12);
  v14 = DispatchTime.uptimeNanoseconds.getter(v13);
  if (v14 < v13)
  {
    v15 = DispatchTime.uptimeNanoseconds.getter(v14);
    if (v15 < DispatchTime.uptimeNanoseconds.getter(v15))
      __break(1u);
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *(NSNumber *)(inited + 312) = UInt64._bridgeToObjectiveC()();
  strcpy((char *)(inited + 320), "is_tryout_mode");
  *(_BYTE *)(inited + 335) = -18;
  *(NSNumber *)(inited + 336) = Bool._bridgeToObjectiveC()();
  strcpy((char *)(inited + 344), "numObstruction");
  *(_BYTE *)(inited + 359) = -18;
  *(NSNumber *)(inited + 360) = Int64._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 368) = 0xD000000000000013;
  *(_QWORD *)(inited + 376) = 0x8000000100266A70;
  *(NSNumber *)(inited + 384) = Int64._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 392) = 0x6D6D696B536D756ELL;
  *(_QWORD *)(inited + 400) = 0xEA00000000007265;
  *(NSNumber *)(inited + 408) = Int64._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 416) = 0x6E6F697461727564;
  *(_QWORD *)(inited + 424) = 0xEF72656D6D696B53;
  *(NSNumber *)(inited + 432) = Int64._bridgeToObjectiveC()();
  *(_QWORD *)(inited + 440) = 0x6E79736E556D756ELL;
  *(_QWORD *)(inited + 448) = 0xE900000000000063;
  *(NSNumber *)(inited + 456) = Int64._bridgeToObjectiveC()();
  strcpy((char *)(inited + 464), "durationUnsync");
  *(_BYTE *)(inited + 479) = -18;
  *(NSNumber *)(inited + 480) = Int64._bridgeToObjectiveC()();
  v16 = (_QWORD *)sub_100224F60(inited);
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_kRelativeAzimuthBuckets);
  v56 = *(_QWORD *)(v17 + 16);
  if (v56)
  {
    v53 = v1;
    v18 = v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_relativeAzimuth;
    swift_bridgeObjectRetain(v17);
    v55 = v18;
    swift_beginAccess(v18, &v60, 0, 0);
    v19 = 0;
    v54 = v17;
    while (1)
    {
      v21 = *(_QWORD *)(v17 + 8 * v19 + 32);
      v58 = 0x6E6569724F727564;
      v59 = 0xEA00000000006874;
      v57 = v21;
      v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v22._object;
      String.append(_:)(v22);
      swift_bridgeObjectRelease(object);
      v25 = v58;
      v24 = v59;
      if (*(_QWORD *)(*(_QWORD *)v55 + 16))
        sub_10017D498(v21);
      v26.super.super.isa = Int64._bridgeToObjectiveC()().super.super.isa;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v16);
      v58 = (uint64_t)v16;
      v29 = sub_10017D3B0(v25, v24);
      v30 = v16[2];
      v31 = (v28 & 1) == 0;
      v32 = v30 + v31;
      if (__OFADD__(v30, v31))
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
        goto LABEL_43;
      }
      v33 = v28;
      if (v16[3] >= v32)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          v16 = (_QWORD *)v58;
          if ((v28 & 1) != 0)
            goto LABEL_13;
        }
        else
        {
          sub_10008BAAC();
          v16 = (_QWORD *)v58;
          if ((v33 & 1) != 0)
            goto LABEL_13;
        }
      }
      else
      {
        sub_100089264(v32, isUniquelyReferenced_nonNull_native);
        v34 = sub_10017D3B0(v25, v24);
        if ((v33 & 1) != (v35 & 1))
          goto LABEL_49;
        v29 = v34;
        v16 = (_QWORD *)v58;
        if ((v33 & 1) != 0)
        {
LABEL_13:
          v20 = v16[7];

          *(NSNumber *)(v20 + 8 * v29) = v26;
          goto LABEL_14;
        }
      }
      v16[(v29 >> 6) + 8] |= 1 << v29;
      v36 = (uint64_t *)(v16[6] + 16 * v29);
      *v36 = v25;
      v36[1] = v24;
      *(NSNumber *)(v16[7] + 8 * v29) = v26;
      v37 = v16[2];
      v38 = __OFADD__(v37, 1);
      v39 = v37 + 1;
      if (v38)
        goto LABEL_41;
      v16[2] = v39;
      swift_bridgeObjectRetain(v24);
LABEL_14:
      ++v19;
      swift_bridgeObjectRelease(v24);
      swift_bridgeObjectRelease(0x8000000000000000);
      v17 = v54;
      if (v56 == v19)
      {
        swift_bridgeObjectRelease(v54);
        v1 = v53;
        break;
      }
    }
  }
  if (*(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_caLatencyCount))
  {
    isa = UInt64._bridgeToObjectiveC()().super.super.isa;
    v41 = swift_isUniquelyReferenced_nonNull_native(v16);
    v58 = (uint64_t)v16;
    sub_10020D010((uint64_t)isa, 0x636E6574614C6163, 0xEC00000065764179, v41);
    v16 = (_QWORD *)v58;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_firstTargetId + 8) & 1) == 0)
  {
    v42 = Int64._bridgeToObjectiveC()().super.super.isa;
    v43 = swift_isUniquelyReferenced_nonNull_native(v16);
    v58 = (uint64_t)v16;
    sub_10020D010((uint64_t)v42, 0x6174536449746173, 0xEA00000000007472, v43);
    v16 = (_QWORD *)v58;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  if ((*(_BYTE *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_lastTargetId + 8) & 1) == 0)
  {
    v44 = Int64._bridgeToObjectiveC()().super.super.isa;
    v45 = swift_isUniquelyReferenced_nonNull_native(v16);
    v58 = (uint64_t)v16;
    sub_10020D010((uint64_t)v44, 0x646E456449746173, 0xE800000000000000, v45);
    v16 = (_QWORD *)v58;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v46 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_exitReason + 8);
  if (v46)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v1
                                       + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_exitReason
                                       + 8));
    v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v46);
    v48 = swift_isUniquelyReferenced_nonNull_native(v16);
    v58 = (uint64_t)v16;
    sub_10020D010((uint64_t)v47, 0x7361655274697865, 0xEA00000000006E6FLL, v48);
    v16 = (_QWORD *)v58;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  v49 = *(_QWORD *)(v1 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_requestReason + 8);
  if (v49)
  {
    swift_bridgeObjectRetain(*(_QWORD *)(v1
                                       + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_requestReason
                                       + 8));
    v50 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v49);
    v51 = swift_isUniquelyReferenced_nonNull_native(v16);
    v58 = (uint64_t)v16;
    sub_10020D010((uint64_t)v50, 0x5274736575716572, 0xED00006E6F736165, v51);
    v16 = (_QWORD *)v58;
    swift_bridgeObjectRelease(0x8000000000000000);
  }
  return (uint64_t)v16;
}

uint64_t sub_100074390()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_startTimestamp;
  v2 = type metadata accessor for DispatchTime(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_kRelativeAzimuthBuckets));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_relativeAzimuth));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_relativePitch));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_targetVisibility));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_exitReason
                                      + 8));
  swift_bridgeObjectRelease(*(_QWORD *)(v0
                                      + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_requestReason
                                      + 8));
  sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddyP33_01F568DD0E8813FA3CE40EF8739F88CF4Data_trackingCALatencySince, &qword_1003180C8);
  return v0;
}

uint64_t sub_100074454()
{
  uint64_t v0;

  v0 = sub_100074390();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100074474()
{
  return type metadata accessor for Data(0);
}

void sub_1000744B8(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD v6[24];

  v2 = type metadata accessor for DispatchTime(319);
  if (v3 <= 0x3F)
  {
    v6[0] = *(_QWORD *)(v2 - 8) + 64;
    v6[1] = &unk_100250CA8;
    v6[2] = &unk_100250CC0;
    v6[3] = &unk_100250CC0;
    v6[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[5] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[8] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[9] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v6[10] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[11] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[12] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[13] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[14] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[15] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[16] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[17] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[18] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[19] = (char *)&value witness table for Builtin.Int64 + 64;
    v6[20] = &unk_100250CD8;
    v6[21] = &unk_100250CD8;
    sub_100025B34(319);
    if (v5 <= 0x3F)
    {
      v6[22] = *(_QWORD *)(v4 - 8) + 64;
      v6[23] = &unk_100250CA8;
      swift_updateClassMetadata2(a1, 256, 24, v6, a1 + 80);
    }
  }
}

uint64_t getEnumTagSinglePayload for TryOutModel.WhenActive(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Data.LostConnectionTracking(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100074680 + 4 * byte_100250C11[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000746B4 + 4 * byte_100250C0C[v4]))();
}

uint64_t sub_1000746B4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000746BC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000746C4);
  return result;
}

uint64_t sub_1000746D0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000746D8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000746DC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000746E4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Data.LostConnectionTracking()
{
  return &type metadata for Data.LostConnectionTracking;
}

unint64_t sub_100074700()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B218;
  if (!qword_10031B218)
  {
    v1 = type metadata accessor for NSTimer.TimerPublisher(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSTimer.TimerPublisher, v1);
    atomic_store(result, (unint64_t *)&qword_10031B218);
  }
  return result;
}

uint64_t sub_100074748()
{
  uint64_t v0;

  swift_weakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007476C(uint64_t a1)
{
  uint64_t v1;

  return sub_1000722BC(a1, v1);
}

unint64_t sub_100074774()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B228;
  if (!qword_10031B228)
  {
    v1 = sub_100007FAC(&qword_10031B220);
    result = swift_getWitnessTable(&protocol conformance descriptor for Publishers.Autoconnect<A>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B228);
  }
  return result;
}

uint64_t sub_1000747C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LinkState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t SBUISystemApertureLayoutMode.debugDescription.getter(uint64_t a1)
{
  uint64_t v1;
  unint64_t result;
  Swift::String v3;
  void *object;
  Swift::String v5;

  v1 = a1 + 1;
  result = 0x6465766F6D6572;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      result = 0x6C616974696E69;
      break;
    case 2:
      result = 0x6576697463616E69;
      break;
    case 3:
      result = 0x6C616D696E696DLL;
      break;
    case 4:
      result = 0x746361706D6F63;
      break;
    case 5:
      result = 0x6D6F74737563;
      break;
    default:
      _StringGuts.grow(_:)(42);
      swift_bridgeObjectRelease(0xE000000000000000);
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      v5._countAndFlagsBits = 41;
      v5._object = (void *)0xE100000000000000;
      String.append(_:)(v5);
      result = 0xD000000000000027;
      break;
  }
  return result;
}

unint64_t sub_100074944()
{
  uint64_t *v0;

  return SBUISystemApertureLayoutMode.debugDescription.getter(*v0);
}

void sub_10007494C(_QWORD *a1@<X8>)
{
  *a1 = &off_1002E08A8;
}

uint64_t sub_10007495C(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[3];
  char v6;
  _OWORD v7[3];
  char v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v5[2] = *(_OWORD *)(a1 + 32);
  v6 = *(_BYTE *)(a1 + 48);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(a2 + 32);
  v8 = *(_BYTE *)(a2 + 48);
  return sub_1000774C8((uint64_t *)v5, (uint64_t)v7) & 1;
}

id sub_1000749B4()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  __n128 v7;
  uint64_t v8;
  char *v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  id v24;
  uint64_t v26;
  uint64_t v27;
  objc_super v28;

  v1 = OBJC_IVAR____TtC8SOSBuddy17NotificationAgent_didFinishPostNotificationRequest;
  v2 = sub_100003DB8(&qword_10031D150);
  swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  v3 = v0;
  *(_QWORD *)&v0[v1] = PassthroughSubject.init()(v4);
  v5 = OBJC_IVAR____TtC8SOSBuddy17NotificationAgent_didReceiveAction;
  v6 = sub_100003DB8(&qword_10031B330);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  *(_QWORD *)&v3[v5] = PassthroughSubject.init()(v7);
  v8 = OBJC_IVAR____TtC8SOSBuddy17NotificationAgent__currentNotifications;
  *(_QWORD *)&v3[v8] = sub_100227300((uint64_t)_swiftEmptyArrayStorage);
  v9 = &v3[OBJC_IVAR____TtC8SOSBuddy17NotificationAgent__pendingContent];
  *((_OWORD *)v9 + 1) = 0u;
  *((_OWORD *)v9 + 2) = 0u;
  *(_OWORD *)v9 = 0u;
  v9[48] = 0;

  v28.receiver = v3;
  v28.super_class = (Class)type metadata accessor for NotificationAgent();
  v10 = objc_msgSendSuper2(&v28, "init");
  v11 = qword_100315820;
  v12 = v10;
  if (v11 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v13 = type metadata accessor for Logger(0);
  sub_10000D744(v13, (uint64_t)qword_10033FD18);
  v14 = v12;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v18 = swift_slowAlloc(32, -1);
    v27 = v18;
    *(_DWORD *)v17 = 136446210;
    v19 = v14;
    v20 = objc_msgSend(v19, "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    v26 = sub_100172BEC(v21, v23, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v17 + 4, v17 + 12);

    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%{public}s] init", v17, 0xCu);
    swift_arrayDestroy(v18, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  v24 = objc_msgSend((id)objc_opt_self(UNUserNotificationCenter), "currentNotificationCenter");
  objc_msgSend(v24, "setDelegate:", v14);

  return v14;
}

id sub_100074C9C()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  objc_class *v12;
  uint64_t v14;
  uint64_t v15;
  objc_super v16;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD18);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v15 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v14 = sub_100172BEC(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] deinit", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v12 = (objc_class *)type metadata accessor for NotificationAgent();
  v16.receiver = v2;
  v16.super_class = v12;
  return objc_msgSendSuper2(&v16, "dealloc");
}

uint64_t type metadata accessor for NotificationAgent()
{
  return objc_opt_self(_TtC8SOSBuddy17NotificationAgent);
}

void sub_100074F30(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  __n128 v10;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  __int128 v33;
  __n128 v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint8_t *v43;
  uint64_t v44;
  __int128 v45;
  __n128 v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  unint64_t v60;
  const char *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v67;
  id v68;
  NSString v69;
  NSString v70;
  uint64_t v71;
  NSString v72;
  id v73;
  int v74;
  const char *v75;
  unint64_t v76;
  NSString v77;
  uint64_t v78;
  id v79;
  NSString v80;
  id v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t aBlock[5];
  uint64_t v105;
  uint64_t v106;
  char v107[24];
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  char v112;
  uint64_t v113[6];
  char v114;

  v2 = v1;
  v98 = *(_QWORD *)a1;
  v99 = *(_QWORD *)(a1 + 8);
  v97 = *(_QWORD *)(a1 + 16);
  v100 = *(_QWORD *)(a1 + 24);
  v96 = *(_QWORD *)(a1 + 32);
  v103 = *(_QWORD *)(a1 + 40);
  v4 = *(_BYTE *)(a1 + 48);
  v5 = type metadata accessor for DispatchPredicate(0);
  v6 = *(_QWORD *)(v5 - 8);
  __chkstk_darwin(v5, v7);
  v9 = (uint64_t *)((char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v9 = static OS_dispatch_queue.main.getter(v10);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v9, enum case for DispatchPredicate.onQueue(_:), v5);
  v11 = _dispatchPreconditionTest(_:)(v9);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v9, v5);
  if ((v11 & 1) == 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  v95 = v4 & 1;
  v102 = *(unsigned __int8 *)(a1 + 48);
  v101 = v2;
  v12 = (uint64_t *)(v2 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent__currentNotifications);
  swift_beginAccess(v2 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent__currentNotifications, v107, 0, 0);
  v13 = *v12;
  if (!*(_QWORD *)(*v12 + 16))
    goto LABEL_7;
  v14 = sub_10017D354(v102);
  if ((v15 & 1) == 0)
    goto LABEL_7;
  v16 = *(_QWORD *)(v13 + 56) + 72 * v14;
  v17 = *(_QWORD *)(v16 + 8);
  v93 = *(_QWORD *)v16;
  v18 = *(_QWORD *)(v16 + 16);
  v19 = *(_QWORD *)(v16 + 24);
  v20 = *(_QWORD *)(v16 + 32);
  v21 = *(_QWORD *)(v16 + 40);
  v22 = *(_QWORD *)(v16 + 48);
  v23 = *(_QWORD *)(v16 + 56);
  v24 = *(_BYTE *)(v16 + 64);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v19);
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v23);
  if (v17)
  {
    v113[0] = v18;
    v113[1] = v19;
    v113[2] = v20;
    v113[3] = v21;
    v113[4] = v22;
    v113[5] = v23;
    v114 = v24;
    sub_1000781A8(v113);
    sub_1000780B0(v93, v17, v18, v19, v20, v21, v22, v23);
    v25 = sub_1000774C8(v113, a1);
    sub_1000781F0(v113);
    if ((v25 & 1) != 0)
      return;
  }
  else
  {
LABEL_7:
    sub_1000781A8((_QWORD *)a1);
    sub_100025CBC(0, 0, 0, 0, 0, 0);
    sub_100025CBC(v98, v99, v97, v100, v96, v103);
  }
  v26 = v101 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent__pendingContent;
  if (*(_QWORD *)(v101 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent__pendingContent + 24))
  {
    if (qword_1003158A0 == -1)
    {
LABEL_10:
      v27 = type metadata accessor for Logger(0);
      sub_10000D744(v27, (uint64_t)qword_10033FE98);
      sub_1000781A8((_QWORD *)a1);
      v28 = sub_1000781A8((_QWORD *)a1);
      v29 = Logger.logObject.getter(v28);
      v30 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v29, v30))
      {
        v31 = (uint8_t *)swift_slowAlloc(12, -1);
        v32 = swift_slowAlloc(32, -1);
        aBlock[0] = v32;
        *(_DWORD *)v31 = 136446210;
        v33 = *(_OWORD *)(a1 + 16);
        v108 = *(_OWORD *)a1;
        v109 = v33;
        v110 = *(_OWORD *)(a1 + 32);
        LOBYTE(v111) = *(_BYTE *)(a1 + 48);
        sub_1000781A8((_QWORD *)a1);
        v35 = String.init<A>(describing:)(&v108, &type metadata for NotificationAgent.Content, v34);
        v37 = v36;
        *(_QWORD *)&v108 = sub_100172BEC(v35, v36, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, (char *)&v108 + 8, v31 + 4, v31 + 12);
        swift_bridgeObjectRelease(v37);
        sub_1000781F0((_QWORD *)a1);
        sub_1000781F0((_QWORD *)a1);
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Request for another content is already pending, postponing the update until it is done: %{public}s", v31, 0xCu);
        swift_arrayDestroy(v32, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v32, -1, -1);
        swift_slowDealloc(v31, -1, -1);
      }
      else
      {
        sub_1000781F0((_QWORD *)a1);
        sub_1000781F0((_QWORD *)a1);
      }

      return;
    }
LABEL_31:
    swift_once(&qword_1003158A0, sub_1000D9810);
    goto LABEL_10;
  }
  if (qword_1003158A0 != -1)
    swift_once(&qword_1003158A0, sub_1000D9810);
  v38 = type metadata accessor for Logger(0);
  sub_10000D744(v38, (uint64_t)qword_10033FE98);
  sub_1000781A8((_QWORD *)a1);
  v39 = sub_1000781A8((_QWORD *)a1);
  v40 = Logger.logObject.getter(v39);
  v41 = static os_log_type_t.default.getter();
  v42 = os_log_type_enabled(v40, v41);
  v94 = v12;
  if (v42)
  {
    v43 = (uint8_t *)swift_slowAlloc(12, -1);
    v44 = swift_slowAlloc(32, -1);
    aBlock[0] = v44;
    *(_DWORD *)v43 = 136446210;
    v45 = *(_OWORD *)(a1 + 16);
    v108 = *(_OWORD *)a1;
    v109 = v45;
    v110 = *(_OWORD *)(a1 + 32);
    LOBYTE(v111) = *(_BYTE *)(a1 + 48);
    sub_1000781A8((_QWORD *)a1);
    v47 = String.init<A>(describing:)(&v108, &type metadata for NotificationAgent.Content, v46);
    v49 = v48;
    *(_QWORD *)&v108 = sub_100172BEC(v47, v48, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v108, (char *)&v108 + 8, v43 + 4, v43 + 12);
    swift_bridgeObjectRelease(v49);
    sub_1000781F0((_QWORD *)a1);
    sub_1000781F0((_QWORD *)a1);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Present notification: %{public}s", v43, 0xCu);
    swift_arrayDestroy(v44, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v43, -1, -1);
  }
  else
  {
    sub_1000781F0((_QWORD *)a1);
    sub_1000781F0((_QWORD *)a1);
  }

  v93 = *(_QWORD *)v26;
  v92 = *(_QWORD *)(v26 + 8);
  v91 = *(_QWORD *)(v26 + 16);
  v90 = *(_QWORD *)(v26 + 24);
  v50 = *(_QWORD *)(v26 + 40);
  v89 = *(_QWORD *)(v26 + 32);
  v51 = v98;
  v52 = v99;
  *(_QWORD *)v26 = v98;
  *(_QWORD *)(v26 + 8) = v52;
  v53 = v97;
  v54 = v100;
  *(_QWORD *)(v26 + 16) = v97;
  *(_QWORD *)(v26 + 24) = v54;
  v55 = v96;
  v56 = v103;
  *(_QWORD *)(v26 + 32) = v96;
  *(_QWORD *)(v26 + 40) = v56;
  v57 = v95;
  *(_BYTE *)(v26 + 48) = v95;
  sub_1000781A8((_QWORD *)a1);
  sub_100025CBC(v93, v92, v91, v90, v89, v50);
  v58 = v102;
  v59 = 10;
  if (v102)
    v59 = 7;
  v60 = v59 | 0xD000000000000010;
  v61 = "ConnectionAssistantRequest";
  if (v102)
    v61 = "OffGridModeOfferRequest";
  v62 = (unint64_t)(v61 - 32) | 0x8000000000000000;
  *(_QWORD *)&v108 = v60;
  *((_QWORD *)&v108 + 1) = v62;
  *(_QWORD *)&v109 = v51;
  *((_QWORD *)&v109 + 1) = v52;
  *(_QWORD *)&v110 = v53;
  *((_QWORD *)&v110 + 1) = v54;
  v63 = v103;
  *(_QWORD *)&v111 = v55;
  *((_QWORD *)&v111 + 1) = v103;
  v112 = v57;
  v64 = v94;
  swift_beginAccess(v94, aBlock, 33, 0);
  sub_1000781A8((_QWORD *)a1);
  swift_bridgeObjectRetain(v52);
  swift_bridgeObjectRetain(v54);
  swift_bridgeObjectRetain(v63);
  v65 = *v64;
  swift_bridgeObjectRetain(v62);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v65);
  v106 = *v64;
  *v64 = 0x8000000000000000;
  sub_10020C6BC((uint64_t)&v108, v58, isUniquelyReferenced_nonNull_native);
  v67 = *v64;
  *v64 = v106;
  swift_bridgeObjectRelease(v67);
  swift_endAccess(aBlock);
  v68 = objc_msgSend(objc_allocWithZone((Class)UNMutableNotificationContent), "init");
  v69 = String._bridgeToObjectiveC()();
  objc_msgSend(v68, "setTitle:", v69);

  v70 = String._bridgeToObjectiveC()();
  objc_msgSend(v68, "setBody:", v70);

  v71 = *(_QWORD *)(a1 + 8);
  if (v71)
  {
    swift_bridgeObjectRetain(v71);
    v72 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v71);
    v73 = objc_msgSend((id)objc_opt_self(UNNotificationIcon), "iconForSystemImageNamed:", v72);

    objc_msgSend(v68, "setIcon:", v73);
  }
  objc_msgSend(v68, "setInterruptionLevel:", 1);
  v74 = v102;
  v75 = "OffGridModeOffer";
  if (!v102)
    v75 = "ConnectionAssistance";
  v76 = (unint64_t)(v75 - 32) | 0x8000000000000000;
  v77 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v76);
  objc_msgSend(v68, "setCategoryIdentifier:", v77);

  v78 = v101;
  if (v74)
    objc_msgSend(v68, "setShouldDisplayActionsInline:", 1);
  objc_msgSend(v68, "setShouldIgnoreDowntime:", 1);
  objc_msgSend(v68, "setShouldIgnoreDoNotDisturb:", 1);
  objc_msgSend(v68, "setShouldHideDate:", 1);
  objc_msgSend(v68, "setShouldPreemptPresentedNotification:", 1);
  objc_msgSend(v68, "setShouldPreventNotificationDismissalAfterDefaultAction:", 1);
  swift_bridgeObjectRetain(v62);
  v79 = v68;
  v80 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v62);
  v81 = objc_msgSend((id)objc_opt_self(UNNotificationRequest), "requestWithIdentifier:content:trigger:", v80, v79, 0);

  v82 = objc_msgSend((id)objc_opt_self(UNUserNotificationCenter), "currentNotificationCenter");
  v83 = swift_allocObject(&unk_1002E99F8, 24, 7);
  swift_unknownObjectWeakInit(v83 + 16, v78);
  v84 = swift_allocObject(&unk_1002E9A20, 89, 7);
  v85 = v108;
  *(_OWORD *)(v84 + 40) = v109;
  v86 = v111;
  *(_OWORD *)(v84 + 56) = v110;
  *(_OWORD *)(v84 + 72) = v86;
  *(_QWORD *)(v84 + 16) = v83;
  *(_BYTE *)(v84 + 88) = v112;
  *(_OWORD *)(v84 + 24) = v85;
  aBlock[4] = (uint64_t)sub_1000782A0;
  v105 = v84;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1002167A4;
  aBlock[3] = (uint64_t)&unk_1002E9A38;
  v87 = _Block_copy(aBlock);
  swift_release(v105);
  objc_msgSend(v82, "addNotificationRequest:withCompletionHandler:", v81, v87);
  _Block_release(v87);

}

uint64_t sub_100075A04(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  __n128 v15;
  void *v16;
  uint64_t v17;
  void *Strong;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  void *v22;
  uint64_t v23;
  __n128 v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD aBlock[5];
  uint64_t v33;
  char v34[24];

  v6 = type metadata accessor for DispatchWorkItemFlags(0);
  v31 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for DispatchQoS(0);
  v10 = *(_QWORD *)(v30 - 8);
  __chkstk_darwin(v30, v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = a2 + 16;
  sub_10000D75C();
  v16 = (void *)static OS_dispatch_queue.main.getter(v15);
  v17 = swift_allocObject(&unk_1002E99F8, 24, 7);
  swift_beginAccess(v14, v34, 0, 0);
  Strong = (void *)swift_unknownObjectWeakLoadStrong(v14);
  swift_unknownObjectWeakInit(v17 + 16, Strong);

  v19 = swift_allocObject(&unk_1002E9A70, 104, 7);
  v20 = *a3;
  *(_OWORD *)(v19 + 40) = a3[1];
  v21 = a3[3];
  *(_OWORD *)(v19 + 56) = a3[2];
  *(_OWORD *)(v19 + 72) = v21;
  *(_QWORD *)(v19 + 16) = v17;
  *(_BYTE *)(v19 + 88) = *((_BYTE *)a3 + 64);
  *(_OWORD *)(v19 + 24) = v20;
  *(_QWORD *)(v19 + 96) = a1;
  aBlock[4] = sub_1000782F8;
  v33 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1001BAACC;
  aBlock[3] = &unk_1002E9A88;
  v22 = _Block_copy(aBlock);
  v23 = v33;
  sub_100078100(a3);
  swift_errorRetain(a1);
  swift_release(v23);
  static DispatchQoS.unspecified.getter(v24);
  aBlock[0] = &_swiftEmptyArrayStorage;
  v25 = sub_10006A7F8();
  v26 = sub_100003DB8((uint64_t *)&unk_1003178D0);
  v27 = sub_1000084FC((unint64_t *)&qword_10031B320, (uint64_t *)&unk_1003178D0, (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v26, v27, v6, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v13, v9, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v6);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v30);
}

void sub_100075C74(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t Strong;
  void *v7;
  _BYTE v8[24];

  v5 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (void *)Strong;
    sub_100075CE0(a2, a3);

  }
}

uint64_t sub_100075CE0(__int128 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  NSObject *v22;
  os_log_type_t v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __n128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __n128 v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  __int128 v43;
  __int128 v44;
  __n128 v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t *v52;
  unint64_t v53;
  char v54;
  unint64_t v55;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  char v70;
  uint64_t v71;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (_QWORD *)((char *)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v10 = static OS_dispatch_queue.main.getter(v11);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v12 & 1) == 0)
  {
    __break(1u);
    goto LABEL_28;
  }
  v13 = v3 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent__pendingContent;
  v14 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent__pendingContent);
  v15 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent__pendingContent + 8);
  v16 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent__pendingContent + 16);
  v17 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent__pendingContent + 24);
  v18 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent__pendingContent + 32);
  v19 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent__pendingContent + 40);
  *(_OWORD *)v13 = 0u;
  *(_OWORD *)(v13 + 16) = 0u;
  *(_OWORD *)(v13 + 32) = 0u;
  *(_BYTE *)(v13 + 48) = 0;
  sub_100025CBC(v14, v15, v16, v17, v18, v19);
  if (a2)
  {
    swift_errorRetain(a2);
    if (qword_1003158A0 == -1)
    {
LABEL_4:
      v20 = type metadata accessor for Logger(0);
      sub_10000D744(v20, (uint64_t)qword_10033FE98);
      swift_errorRetain(a2);
      sub_100078100(a1);
      swift_errorRetain(a2);
      v21 = sub_100078100(a1);
      v22 = Logger.logObject.getter(v21);
      v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = swift_slowAlloc(22, -1);
        v25 = swift_slowAlloc(64, -1);
        v71 = v25;
        *(_DWORD *)v24 = 136446466;
        v26 = a1[3];
        v68 = a1[2];
        v69 = v26;
        v70 = *((_BYTE *)a1 + 64);
        v27 = a1[1];
        v66 = *a1;
        v67 = v27;
        sub_100078100(a1);
        v29 = String.init<A>(describing:)(&v66, &type metadata for NotificationAgent.NotificationState, v28);
        v31 = v30;
        *(_QWORD *)&v66 = sub_100172BEC(v29, v30, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, (char *)&v66 + 8, v24 + 4, v24 + 12);
        swift_bridgeObjectRelease(v31);
        sub_100078154(a1);
        sub_100078154(a1);
        *(_WORD *)(v24 + 12) = 2082;
        *(_QWORD *)&v66 = a2;
        swift_errorRetain(a2);
        v32 = sub_100003DB8((uint64_t *)&unk_100324AA0);
        v34 = String.init<A>(describing:)(&v66, v32, v33);
        v36 = v35;
        *(_QWORD *)&v66 = sub_100172BEC(v34, v35, &v71);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, (char *)&v66 + 8, v24 + 14, v24 + 22);
        swift_bridgeObjectRelease(v36);
        swift_errorRelease(a2);
        swift_errorRelease(a2);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to present notification: %{public}s, error: %{public}s", (uint8_t *)v24, 0x16u);
        swift_arrayDestroy(v25, 2, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v25, -1, -1);
        swift_slowDealloc(v24, -1, -1);
      }
      else
      {
        sub_100078154(a1);
        sub_100078154(a1);
        swift_errorRelease(a2);
        swift_errorRelease(a2);
      }

      v49 = *(_QWORD *)a1;
      v50 = *((_QWORD *)a1 + 1);
      if (v49 == 0xD00000000000001ALL && v50 == 0x8000000100266CA0)
      {
        v51 = 0;
      }
      else
      {
        v51 = 0;
        if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100266CA0, v49, v50, 0) & 1) == 0)
        {
          if (v49 == 0xD000000000000017 && v50 == 0x8000000100266CC0)
            v51 = 1;
          else
            v51 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100266CC0, v49, v50, 0);
        }
      }
      v52 = (uint64_t *)(v3 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent__currentNotifications);
      swift_beginAccess(v3 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent__currentNotifications, &v66, 33, 0);
      v53 = sub_10017D354(v51 & 1);
      if ((v54 & 1) != 0)
      {
        v55 = v53;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v52);
        v57 = *v52;
        v71 = *v52;
        *v52 = 0x8000000000000000;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_10008A888();
          v57 = v71;
        }
        v58 = (_QWORD *)(*(_QWORD *)(v57 + 56) + 72 * v55);
        v59 = v58[1];
        v60 = v58[3];
        v61 = v58[5];
        v62 = v58[7];
        sub_10017DCFC(v55, v57);
        v63 = *v52;
        *v52 = v57;
        swift_bridgeObjectRelease(v62);
        swift_bridgeObjectRelease(v61);
        swift_bridgeObjectRelease(v59);
        swift_bridgeObjectRelease(v63);
        swift_bridgeObjectRelease(v60);
      }
      swift_endAccess(&v66);
      swift_errorRelease(a2);
      goto LABEL_26;
    }
LABEL_28:
    swift_once(&qword_1003158A0, sub_1000D9810);
    goto LABEL_4;
  }
  if (qword_1003158A0 != -1)
    swift_once(&qword_1003158A0, sub_1000D9810);
  v37 = type metadata accessor for Logger(0);
  sub_10000D744(v37, (uint64_t)qword_10033FE98);
  sub_100078100(a1);
  v38 = sub_100078100(a1);
  v39 = Logger.logObject.getter(v38);
  v40 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc(12, -1);
    v42 = swift_slowAlloc(32, -1);
    *(_DWORD *)v41 = 136446210;
    v71 = v42;
    v43 = a1[3];
    v68 = a1[2];
    v69 = v43;
    v70 = *((_BYTE *)a1 + 64);
    v44 = a1[1];
    v66 = *a1;
    v67 = v44;
    sub_100078100(a1);
    v46 = String.init<A>(describing:)(&v66, &type metadata for NotificationAgent.NotificationState, v45);
    v48 = v47;
    *(_QWORD *)&v66 = sub_100172BEC(v46, v47, &v71);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, (char *)&v66 + 8, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease(v48);
    sub_100078154(a1);
    sub_100078154(a1);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Presented notification: %{public}s", v41, 0xCu);
    swift_arrayDestroy(v42, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1, -1);
    swift_slowDealloc(v41, -1, -1);
  }
  else
  {
    sub_100078154(a1);
    sub_100078154(a1);
  }

LABEL_26:
  v64 = *(_QWORD *)(v3 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent_didFinishPostNotificationRequest);
  LOBYTE(v66) = a2 == 0;
  swift_retain(v64);
  PassthroughSubject.send(_:)(&v66);
  return swift_release(v64);
}

unint64_t sub_100076338(uint64_t a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  __n128 v9;
  char v10;
  unint64_t result;
  uint64_t v12;
  char v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __n128 v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  Class isa;
  id v34;
  uint64_t v35;
  Class v36;
  unint64_t v37;
  char v38;
  unint64_t v39;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  int v49;
  uint64_t v50;
  uint64_t v51[3];
  char v52[24];

  v2 = v1;
  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (_QWORD *)((char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v8 = static OS_dispatch_queue.main.getter(v9);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v4);
  v10 = _dispatchPreconditionTest(_:)(v8);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v8, v4);
  if ((v10 & 1) == 0)
  {
    __break(1u);
LABEL_16:
    swift_once(&qword_1003158A0, sub_1000D9810);
    goto LABEL_6;
  }
  v2 = (uint64_t *)((char *)v2 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent__currentNotifications);
  result = swift_beginAccess(v2, v52, 0, 0);
  v12 = *v2;
  if (!*(_QWORD *)(*v2 + 16))
    return result;
  v49 = a1 & 1;
  result = sub_10017D354(a1 & 1);
  if ((v13 & 1) == 0)
    return result;
  v14 = (uint64_t *)(*(_QWORD *)(v12 + 56) + 72 * result);
  a1 = *v14;
  v4 = v14[1];
  v15 = v14[2];
  v16 = v14[3];
  v17 = v14[4];
  v18 = v14[5];
  v19 = v14[6];
  v20 = v14[7];
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v18);
  result = swift_bridgeObjectRetain(v20);
  if (!v4)
    return result;
  swift_bridgeObjectRetain(v4);
  sub_1000780B0(a1, v4, v15, v16, v17, v18, v19, v20);
  if (qword_1003158A0 != -1)
    goto LABEL_16;
LABEL_6:
  v21 = type metadata accessor for Logger(0);
  sub_10000D744(v21, (uint64_t)qword_10033FE98);
  v23 = swift_bridgeObjectRetain_n(v4, 2, v22);
  v24 = Logger.logObject.getter(v23);
  v25 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = a1;
    v27 = (uint8_t *)swift_slowAlloc(12, -1);
    v28 = swift_slowAlloc(32, -1);
    v51[0] = v28;
    *(_DWORD *)v27 = 136446210;
    swift_bridgeObjectRetain(v4);
    v50 = sub_100172BEC(a1, v4, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease_n(v4, 3);
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "Dismissing notification: %{public}s", v27, 0xCu);
    swift_arrayDestroy(v28, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1, -1);
    swift_slowDealloc(v27, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n(v4, 2);
    v26 = a1;
  }
  v29 = (void *)objc_opt_self(UNUserNotificationCenter);
  v30 = objc_msgSend(v29, "currentNotificationCenter");
  v31 = sub_100003DB8((uint64_t *)&unk_10031B300);
  v32 = swift_allocObject(v31, 48, 7);
  v48 = xmmword_10024E070;
  *(_OWORD *)(v32 + 16) = xmmword_10024E070;
  *(_QWORD *)(v32 + 32) = v26;
  *(_QWORD *)(v32 + 40) = v4;
  swift_bridgeObjectRetain(v4);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v32);
  objc_msgSend(v30, "removePendingNotificationRequestsWithIdentifiers:", isa);

  v34 = objc_msgSend(v29, "currentNotificationCenter");
  v35 = swift_allocObject(v31, 48, 7);
  *(_OWORD *)(v35 + 16) = v48;
  *(_QWORD *)(v35 + 32) = v26;
  *(_QWORD *)(v35 + 40) = v4;
  v36 = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v35);
  objc_msgSend(v34, "removeDeliveredNotificationsWithIdentifiers:", v36);

  swift_beginAccess(v2, v51, 33, 0);
  v37 = sub_10017D354(v49);
  if ((v38 & 1) != 0)
  {
    v39 = v37;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v41 = *v2;
    v50 = *v2;
    *v2 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_10008A888();
      v41 = v50;
    }
    v42 = (_QWORD *)(*(_QWORD *)(v41 + 56) + 72 * v39);
    v43 = v42[1];
    v44 = v42[3];
    v45 = v42[5];
    v46 = v42[7];
    sub_10017DCFC(v39, v41);
    v47 = *v2;
    *v2 = v41;
    swift_bridgeObjectRelease(v46);
    swift_bridgeObjectRelease(v45);
    swift_bridgeObjectRelease(v43);
    swift_bridgeObjectRelease(v47);
    swift_bridgeObjectRelease(v44);
  }
  return swift_endAccess(v51);
}

void sub_1000767E0(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  uint8_t *v5;
  const char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *oslog;
  id v24;
  uint64_t v25;

  switch((unint64_t)objc_msgSend(a1, "authorizationStatus"))
  {
    case 0uLL:
      if (qword_1003158A0 != -1)
        swift_once(&qword_1003158A0, sub_1000D9810);
      v17 = type metadata accessor for Logger(0);
      v18 = sub_10000D744(v17, (uint64_t)qword_10033FE98);
      oslog = Logger.logObject.getter(v18);
      v4 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(oslog, v4))
        goto LABEL_23;
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      v6 = "User hasn't been prompted for notification access";
      goto LABEL_22;
    case 1uLL:
      if (qword_1003158A0 != -1)
        swift_once(&qword_1003158A0, sub_1000D9810);
      v19 = type metadata accessor for Logger(0);
      v20 = sub_10000D744(v19, (uint64_t)qword_10033FE98);
      oslog = Logger.logObject.getter(v20);
      v4 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(oslog, v4))
        goto LABEL_23;
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      v6 = "User denied notification access";
      goto LABEL_22;
    case 2uLL:
      if (qword_1003158A0 != -1)
        swift_once(&qword_1003158A0, sub_1000D9810);
      v21 = type metadata accessor for Logger(0);
      v22 = sub_10000D744(v21, (uint64_t)qword_10033FE98);
      oslog = Logger.logObject.getter(v22);
      v4 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(oslog, v4))
        goto LABEL_23;
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      v6 = "Notifications are authorized";
      goto LABEL_22;
    case 3uLL:
    case 4uLL:
      if (qword_1003158A0 != -1)
        swift_once(&qword_1003158A0, sub_1000D9810);
      v2 = type metadata accessor for Logger(0);
      v3 = sub_10000D744(v2, (uint64_t)qword_10033FE98);
      oslog = Logger.logObject.getter(v3);
      v4 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(oslog, v4))
        goto LABEL_23;
      v5 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v5 = 0;
      v6 = "Notifications are provisional";
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, v6, v5, 2u);
      swift_slowDealloc(v5, -1, -1);
      goto LABEL_23;
    default:
      if (qword_1003158A0 != -1)
        swift_once(&qword_1003158A0, sub_1000D9810);
      v7 = type metadata accessor for Logger(0);
      sub_10000D744(v7, (uint64_t)qword_10033FE98);
      oslog = a1;
      v8 = Logger.logObject.getter(oslog);
      v9 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v8, v9))
      {
        v10 = (uint8_t *)swift_slowAlloc(12, -1);
        v11 = swift_slowAlloc(32, -1);
        v25 = v11;
        *(_DWORD *)v10 = 136446210;
        v24 = -[NSObject authorizationStatus](oslog, "authorizationStatus");
        type metadata accessor for UNAuthorizationStatus(0);
        v14 = String.init<A>(describing:)(&v24, v12, v13);
        v16 = v15;
        v24 = (id)sub_100172BEC(v14, v15, &v25);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v10 + 4, v10 + 12);

        swift_bridgeObjectRelease(v16);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unknown notification authorization status %{public}s", v10, 0xCu);
        swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v11, -1, -1);
        swift_slowDealloc(v10, -1, -1);

      }
      else
      {

LABEL_23:
      }
      return;
  }
}

void sub_100076C24(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t destroy for NotificationAgent.Content(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  return swift_bridgeObjectRelease(a1[5]);
}

uint64_t initializeWithCopy for NotificationAgent.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t assignWithCopy for NotificationAgent.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

__n128 initializeWithTake for QuestionnairePolicy(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for NotificationAgent.Content(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationAgent.Content(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NotificationAgent.Content(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationAgent.Content()
{
  return &type metadata for NotificationAgent.Content;
}

uint64_t destroy for NotificationAgent.NotificationState(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(a1[5]);
  return swift_bridgeObjectRelease(a1[7]);
}

uint64_t initializeWithCopy for NotificationAgent.NotificationState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v4;
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v5;
  v6 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for NotificationAgent.NotificationState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

__n128 initializeWithTake for NotificationAgent.NotificationState(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

uint64_t assignWithTake for NotificationAgent.NotificationState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v10;
  swift_bridgeObjectRelease(v11);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for NotificationAgent.NotificationState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 65))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NotificationAgent.NotificationState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 64) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 65) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 65) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for NotificationAgent.NotificationState()
{
  return &type metadata for NotificationAgent.NotificationState;
}

uint64_t storeEnumTagSinglePayload for NotificationAgent.ContentType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1000772A0 + 4 * byte_100250D9A[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000772D4 + 4 * byte_100250D95[v4]))();
}

uint64_t sub_1000772D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000772DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1000772E4);
  return result;
}

uint64_t sub_1000772F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000772F8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000772FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100077304(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotificationAgent.ContentType()
{
  return &type metadata for NotificationAgent.ContentType;
}

uint64_t destroy for NotificationAgent.ActionReceived(uint64_t a1)
{
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  return swift_release(*(_QWORD *)(a1 + 24));
}

uint64_t initializeWithCopy for NotificationAgent.ActionReceived(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  v4 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_retain(v4);
  return a1;
}

uint64_t assignWithCopy for NotificationAgent.ActionReceived(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v6;
  swift_retain(v6);
  swift_release(v7);
  return a1;
}

uint64_t assignWithTake for NotificationAgent.ActionReceived(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(*(_QWORD *)(a1 + 16));
  v4 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release(v4);
  return a1;
}

ValueMetadata *type metadata accessor for NotificationAgent.ActionReceived()
{
  return &type metadata for NotificationAgent.ActionReceived;
}

uint64_t sub_100077454()
{
  return sub_1000084FC(&qword_10031B2E8, &qword_10031B2F0, (uint64_t)&protocol conformance descriptor for [A]);
}

unint64_t sub_100077484()
{
  unint64_t result;

  result = qword_10031B2F8;
  if (!qword_10031B2F8)
  {
    result = swift_getWitnessTable(&unk_100250E88, &type metadata for NotificationAgent.ContentType);
    atomic_store(result, (unint64_t *)&qword_10031B2F8);
  }
  return result;
}

uint64_t sub_1000774C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;

  v4 = a1[1];
  v5 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    if (v5)
    {
      v6 = *a1;
      if (*a1 != *(_QWORD *)a2 || v4 != v5)
      {
        v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v4, *(_QWORD *)a2, v5, 0);
        v9 = 0;
        if ((v8 & 1) == 0)
          return v9 & 1;
      }
      goto LABEL_11;
    }
LABEL_10:
    v9 = 0;
    return v9 & 1;
  }
  if (v5)
    goto LABEL_10;
LABEL_11:
  v10 = a1[2];
  v11 = a1[3];
  v12 = *(_QWORD *)(a2 + 16);
  v13 = *(_QWORD *)(a2 + 24);
  v14 = v10 == v12 && v11 == v13;
  if (v14 || (v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0), v9 = 0, (v15 & 1) != 0))
  {
    if ((v16 = a1[4], v17 = a1[5], v18 = *(_QWORD *)(a2 + 32), v19 = *(_QWORD *)(a2 + 40), v16 == v18) && v17 == v19
      || (v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, v18, v19, 0), v9 = 0, (v20 & 1) != 0))
    {
      v9 = *((_BYTE *)a1 + 48) ^ *(_BYTE *)(a2 + 48) ^ 1;
    }
  }
  return v9 & 1;
}

void sub_10007758C()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  id v5;
  void *v6;
  _QWORD v7[6];

  if (qword_1003158A0 != -1)
    swift_once(&qword_1003158A0, sub_1000D9810);
  v0 = type metadata accessor for Logger(0);
  v1 = sub_10000D744(v0, (uint64_t)qword_10033FE98);
  v2 = Logger.logObject.getter(v1);
  v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "_confirmNotificationSettings", v4, 2u);
    swift_slowDealloc(v4, -1, -1);
  }

  v5 = objc_msgSend((id)objc_opt_self(UNUserNotificationCenter), "currentNotificationCenter");
  v7[4] = sub_1000767E0;
  v7[5] = 0;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256;
  v7[2] = sub_100076C24;
  v7[3] = &unk_1002E99C0;
  v6 = _Block_copy(v7);
  objc_msgSend(v5, "getNotificationSettingsWithCompletionHandler:", v6);
  _Block_release(v6);

}

uint64_t sub_1000776E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000776F8(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100077700(void *a1, uint64_t a2)
{
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;

  if (qword_1003158A0 != -1)
    swift_once(&qword_1003158A0, sub_1000D9810);
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FE98);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v17 = v9;
    *(_DWORD *)v8 = 136446210;
    v10 = objc_msgSend(v5, "request");
    v11 = objc_msgSend(v10, "identifier");

    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v14 = v13;

    v16 = sub_100172BEC(v12, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v8 + 4, v8 + 12);

    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "userNotificationCenter willPresent id = '%{public}s'", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 8);
}

uint64_t sub_100077900(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  char **p_name;
  char **v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  id v21;
  id v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  char v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;

  if (qword_1003158A0 != -1)
    swift_once(&qword_1003158A0, sub_1000D9810);
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FE98);
  v5 = a1;
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter(v6);
  p_name = &ResourceBundleClass.name;
  v9 = &ResourceBundleClass.name;
  if (os_log_type_enabled(v6, v7))
  {
    v10 = swift_slowAlloc(22, -1);
    v53 = (_QWORD *)swift_slowAlloc(8, -1);
    v54 = swift_slowAlloc(32, -1);
    v57 = (uint64_t)v5;
    v58 = v54;
    *(_DWORD *)v10 = 138543618;
    v52 = &v58;
    v11 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v10 + 4, v10 + 12);
    *v53 = v5;

    *(_WORD *)(v10 + 12) = 2082;
    v12 = objc_msgSend(v11, "notification");
    v13 = objc_msgSend(v12, "request");

    v14 = objc_msgSend(v13, "identifier");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    p_name = (char **)(&ResourceBundleClass + 24);
    v18 = v15;
    v9 = (char **)(&ResourceBundleClass + 24);
    v57 = sub_100172BEC(v18, v17, &v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v10 + 14, v10 + 22);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "userNotificationCenter didReceive %{public}@ for %{public}s", (uint8_t *)v10, 0x16u);
    v19 = sub_100003DB8(&qword_1003178F0);
    swift_arrayDestroy(v53, 1, v19);
    swift_slowDealloc(v53, -1, -1);
    swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1, -1);
    swift_slowDealloc(v10, -1, -1);

  }
  else
  {

  }
  v20 = objc_msgSend(v5, p_name[280], v52);
  v21 = objc_msgSend(v20, v9[281]);

  v22 = objc_msgSend(v21, "identifier");
  v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
  v25 = v24;

  v26 = objc_msgSend(v5, "actionIdentifier");
  v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  v29 = v28;

  v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(UNNotificationDefaultActionIdentifier);
  v32 = v31;
  if (v30 != v27 || v31 != v29)
  {
    v33 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v31, v27, v29, 0);
    swift_bridgeObjectRelease(v32);
    if ((v33 & 1) != 0)
      goto LABEL_10;
    if (v27 == 0x747065636341 && v29 == 0xE600000000000000)
    {
      v39 = 0xE600000000000000;
LABEL_18:
      swift_bridgeObjectRelease(v39);
      v34 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent_didReceiveAction);
      v40 = type metadata accessor for PreventSuspensionAssertion();
      swift_allocObject(v40, 32, 7);
      swift_retain(v34);
      v36 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, 0xD000000000000013, 0x8000000100266C80);
      v37 = v36;
      LOBYTE(v58) = 2;
      goto LABEL_11;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x747065636341, 0xE600000000000000, v27, v29, 0) & 1) != 0)
    {
      v39 = v29;
      goto LABEL_18;
    }
    if (v27 == 0x656E696C636544 && v29 == 0xE700000000000000)
    {
      v41 = 0xE700000000000000;
LABEL_24:
      swift_bridgeObjectRelease(v41);
      v34 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent_didReceiveAction);
      v42 = type metadata accessor for PreventSuspensionAssertion();
      swift_allocObject(v42, 32, 7);
      swift_retain(v34);
      v36 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, 0xD000000000000013, 0x8000000100266C80);
      v37 = v36;
      LOBYTE(v58) = 1;
      goto LABEL_11;
    }
    if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656E696C636544, 0xE700000000000000, v27, v29, 0) & 1) != 0)
    {
      v41 = v29;
      goto LABEL_24;
    }
    v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(UNNotificationDismissActionIdentifier);
    v45 = v44;
    if (v43 == v27 && v44 == v29)
    {
      swift_bridgeObjectRelease_n(v29, 2);
    }
    else
    {
      v46 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, v27, v29, 0);
      swift_bridgeObjectRelease(v29);
      swift_bridgeObjectRelease(v45);
      if ((v46 & 1) == 0)
      {
        swift_bridgeObjectRelease(v25);
        return (*(uint64_t (**)(void))(a3 + 16))();
      }
    }
    v47 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent_didReceiveAction);
    v48 = type metadata accessor for PreventSuspensionAssertion();
    swift_allocObject(v48, 32, 7);
    swift_retain(v47);
    swift_bridgeObjectRetain(v25);
    v49 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, 0xD000000000000013, 0x8000000100266C80);
    LOBYTE(v58) = 1;
    v59 = v23;
    v60 = v25;
    v61 = v49;
    PassthroughSubject.send(_:)(&v58);
    swift_release(v49);
    swift_bridgeObjectRelease(v25);
    swift_release(v47);
    if (v23 == 0xD00000000000001ALL && v25 == 0x8000000100266CA0)
    {
      v50 = 0x8000000100266CA0;
    }
    else
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100266CA0, v23, v25, 0) & 1) == 0)
      {
        if (v23 == 0xD000000000000017 && v25 == 0x8000000100266CC0)
        {
          swift_bridgeObjectRelease(0x8000000100266CC0);
          v51 = 1;
        }
        else
        {
          v51 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000017, 0x8000000100266CC0, v23, v25, 0);
          swift_bridgeObjectRelease(v25);
        }
        goto LABEL_35;
      }
      v50 = v25;
    }
    swift_bridgeObjectRelease(v50);
    v51 = 0;
LABEL_35:
    sub_100076338(v51 & 1);
    return (*(uint64_t (**)(void))(a3 + 16))();
  }
  swift_bridgeObjectRelease(v29);
LABEL_10:
  swift_bridgeObjectRelease(v29);
  v34 = *(_QWORD *)(a2 + OBJC_IVAR____TtC8SOSBuddy17NotificationAgent_didReceiveAction);
  v35 = type metadata accessor for PreventSuspensionAssertion();
  swift_allocObject(v35, 32, 7);
  swift_retain(v34);
  v36 = sub_1000D855C(0xD000000000000011, 0x8000000100260EC0, 0xD000000000000013, 0x8000000100266C80);
  v37 = v36;
  LOBYTE(v58) = 0;
LABEL_11:
  v59 = v23;
  v60 = v25;
  v61 = v36;
  PassthroughSubject.send(_:)(&v58);
  swift_release(v37);
  swift_bridgeObjectRelease(v25);
  swift_release(v34);
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t sub_1000780B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a8);
    return swift_bridgeObjectRelease(a4);
  }
  return result;
}

_QWORD *sub_100078100(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[5];
  v4 = a1[7];
  swift_bridgeObjectRetain(a1[3]);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v2);
  return a1;
}

_QWORD *sub_100078154(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = a1[1];
  v3 = a1[3];
  v4 = a1[5];
  swift_bridgeObjectRelease(a1[7]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  return a1;
}

_QWORD *sub_1000781A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[3];
  v3 = a1[5];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  return a1;
}

_QWORD *sub_1000781F0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  v3 = a1[3];
  swift_bridgeObjectRelease(a1[5]);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_100078238()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10007825C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  return swift_deallocObject(v0, 89, 7);
}

uint64_t sub_1000782A0(uint64_t a1)
{
  uint64_t v1;

  return sub_100075A04(a1, *(_QWORD *)(v1 + 16), (__int128 *)(v1 + 24));
}

uint64_t sub_1000782AC()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_bridgeObjectRelease(v0[4]);
  swift_bridgeObjectRelease(v0[6]);
  swift_bridgeObjectRelease(v0[8]);
  swift_bridgeObjectRelease(v0[10]);
  swift_errorRelease(v0[12]);
  return swift_deallocObject(v0, 104, 7);
}

void sub_1000782F8()
{
  uint64_t v0;

  sub_100075C74(*(_QWORD *)(v0 + 16), (__int128 *)(v0 + 24), *(_QWORD *)(v0 + 96));
}

uint64_t storeEnumTagSinglePayload for NotificationAgent.NotificationAction(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_100078354 + 4 * byte_100250DA4[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100078388 + 4 * byte_100250D9F[v4]))();
}

uint64_t sub_100078388(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100078390(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x100078398);
  return result;
}

uint64_t sub_1000783A4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1000783ACLL);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1000783B0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000783B8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotificationAgent.NotificationAction()
{
  return &type metadata for NotificationAgent.NotificationAction;
}

unint64_t sub_1000783D8()
{
  unint64_t result;

  result = qword_10031B338;
  if (!qword_10031B338)
  {
    result = swift_getWitnessTable(&unk_100250F34, &type metadata for NotificationAgent.NotificationAction);
    atomic_store(result, (unint64_t *)&qword_10031B338);
  }
  return result;
}

void ConnectionAssistantStars.makeStar()(uint64_t a1@<X8>)
{
  float32x4_t *v1;
  int v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  int32x2_t v8;
  float32x4_t v10;
  float32x4_t v11;
  float32x4_t v12;
  float32x4_t v18;
  float32x4_t v19;
  float v20;
  int v21;
  int v22;
  unsigned int v23;
  float v24;
  unsigned int v25;
  float v26;
  __float2 v27;
  __float2 v28;
  __int128 v29;
  float32x4_t v30;
  _BYTE v31[64];
  __int128 v32[3];
  char v33;
  char v34[48];
  double v35;
  char v36;

  sub_1000786CC(v1[6].f32[3], v1[7].f32[0]);
  v4 = v3;
  sub_1000786CC(v1[6].f32[1], v1[6].f32[2]);
  v6 = v5;
  v7 = sub_100078A34(16777217);
  if ((v1[6].i8[0] & 1) != 0)
  {
    *(float *)v8.i32 = (float)((float)((float)((float)v7 * 0.000000059605) + (float)((float)v7 * 0.000000059605)) + -1.0)
                     * 13.591;
    if (v7 == 0x1000000)
      *(float *)v8.i32 = 13.591;
    *(float *)v8.i32 = fminf(*(float *)v8.i32 - floorf(*(float *)v8.i32), 1.0);
    *(float32x2_t *)_Q1.f32 = vadd_f32((float32x2_t)vdup_lane_s32(v8, 0), (float32x2_t)0x3F2AAAAB3F800000);
    _Q1.f32[2] = *(float *)v8.i32 + 0.33333;
    _Q1.i32[3] = 0;
    v10 = _Q1;
    v10.i32[3] = 0;
    v11 = vsubq_f32(_Q1, vrndmq_f32(v10));
    v11.i32[3] = 0;
    _Q1.i64[1] = 1065353215;
    v12 = vminnmq_f32(v11, (float32x4_t)xmmword_100250F70);
    __asm
    {
      FMOV            V1.2S, #6.0
      FMOV            V2.2S, #-3.0
    }
    *(float32x2_t *)_Q1.f32 = vadd_f32(vmul_f32(*(float32x2_t *)v12.f32, *(float32x2_t *)_Q1.f32), _D2);
    v18 = _Q1;
    v18.f32[2] = vmuls_lane_f32(6.0, v12, 2) + -3.0;
    v19 = vabsq_f32(v18);
    *(float32x2_t *)v18.f32 = vadd_f32(vmul_f32((float32x2_t)(_Q1.i64[0] & 0x7FFFFFFF7FFFFFFFLL), (float32x2_t)vdup_n_s32(0x3ECCCCCDu)), (float32x2_t)vdup_n_s32(0x3F19999Au));
    v18.i64[1] = COERCE_UNSIGNED_INT(vmuls_lane_f32(0.4, v19, 2) + 0.6);
    v30 = v18;
  }
  else
  {
    v30 = v1[5];
  }
  sub_10007873C((uint64_t)&v1[1], (uint64_t)v31);
  sub_10007873C((uint64_t)v31, (uint64_t)v34);
  if (v36)
    v20 = 0.0;
  else
    v20 = v35;
  if (v20 < 0.0)
  {
    __break(1u);
  }
  else
  {
    sub_1000786CC(0.0, v20);
    v22 = v21;
    sub_10007873C((uint64_t)v31, (uint64_t)v32);
    if ((v33 & 1) != 0)
    {
      v23 = sub_100078A34(16777217);
      if (v23 == 0x1000000)
        v24 = 6.2832;
      else
        v24 = (float)((float)((float)v23 * 0.000000059605) * 6.2832) + 0.0;
      v25 = sub_100078A34(16777217);
      v26 = acosf(1.0- (float)((float)((float)((float)v25 * 0.000000059605) + 0.0)+ (float)((float)((float)v25 * 0.000000059605) + 0.0)));
      v27 = __sincosf_stret(v26);
      v28 = __sincosf_stret(v24);
      *(float *)&v29 = v27.__sinval * v28.__cosval;
      *((float *)&v29 + 1) = v27.__sinval * v28.__sinval;
      *((_QWORD *)&v29 + 1) = LODWORD(v27.__cosval);
    }
    else
    {
      v29 = v32[0];
    }
    *(_DWORD *)a1 = v6;
    *(float32x4_t *)(a1 + 16) = v30;
    *(_DWORD *)(a1 + 32) = v4;
    *(_OWORD *)(a1 + 48) = v29;
    *(_QWORD *)(a1 + 64) = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 80) = v22;
    *(float *)(a1 + 84) = v20;
  }
}

void sub_1000786CC(float a1, float a2)
{
  if ((~COERCE_INT(a2 - a1) & 0x7F800000) != 0)
    sub_100078A34(16777217);
  else
    __break(1u);
}

uint64_t sub_10007873C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031B340);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t ConnectionAssistantStars.starsCount.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t ConnectionAssistantStars.starsCount.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*ConnectionAssistantSatellite.radius.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

void ConnectionAssistantStars.Spawn.position.setter(__n128 a1)
{
  __n128 *v1;

  *v1 = a1;
}

__n128 ConnectionAssistantSatellite.color.getter()
{
  __n128 *v0;

  return v0[1];
}

void ConnectionAssistantSatellite.color.setter(__n128 a1)
{
  __n128 *v1;

  v1[1] = a1;
}

uint64_t (*ConnectionAssistantSatellite.color.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

float ConnectionAssistantRendererProjection.Ellipse.angle.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 32);
}

void ConnectionAssistantSatellite.opacity.setter(float a1)
{
  uint64_t v1;

  *(float *)(v1 + 32) = a1;
}

uint64_t (*ConnectionAssistantSatellite.opacity.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

float ConnectionAssistantStars.Spawn.speed.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 36);
}

void ConnectionAssistantStars.Spawn.speed.setter(float a1, float a2)
{
  uint64_t v2;

  *(float *)(v2 + 36) = a1;
  *(float *)(v2 + 40) = a2;
}

uint64_t (*ConnectionAssistantRenderer.RenderPipelines.Constants.earthAtmosphereInnerStrength.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

double ConnectionAssistantStars.Spawn.duration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + 48);
}

void ConnectionAssistantStars.Spawn.duration.setter(double a1)
{
  uint64_t v1;

  *(double *)(v1 + 48) = a1;
}

uint64_t (*ConnectionAssistantStars.Spawn.duration.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

__n128 ConnectionAssistantStars.spawn.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;
  __int128 v4;
  __n128 result;

  v2 = *(_QWORD *)(v1 + 64);
  v3 = *(_BYTE *)(v1 + 72);
  v4 = *(_OWORD *)(v1 + 32);
  *(_OWORD *)a1 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(a1 + 16) = v4;
  result = *(__n128 *)(v1 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_QWORD *)(a1 + 48) = v2;
  *(_BYTE *)(a1 + 56) = v3;
  return result;
}

uint64_t ConnectionAssistantStars.spawn.setter(uint64_t a1)
{
  uint64_t v1;

  return sub_10007873C(a1, v1 + 16);
}

uint64_t ConnectionAssistantStars.color.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 80);
}

uint64_t ConnectionAssistantStars.color.setter(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 80) = result;
  *(_QWORD *)(v3 + 88) = a2;
  *(_BYTE *)(v3 + 96) = a3 & 1;
  return result;
}

uint64_t (*ConnectionAssistantRenderer.RenderPipelines.Constants.earthOutlineColor.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

float ConnectionAssistantStars.size.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 100);
}

void ConnectionAssistantStars.size.setter(float a1, float a2)
{
  uint64_t v2;

  *(float *)(v2 + 100) = a1;
  *(float *)(v2 + 104) = a2;
}

uint64_t (*ConnectionAssistantStars.size.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

float ConnectionAssistantStars.opacity.getter()
{
  uint64_t v0;

  return *(float *)(v0 + 108);
}

void ConnectionAssistantStars.opacity.setter(float a1, float a2)
{
  uint64_t v2;

  *(float *)(v2 + 108) = a1;
  *(float *)(v2 + 112) = a2;
}

uint64_t (*ConnectionAssistantStars.opacity.modify())()
{
  return ConnectionAssistantRendererEarthOutline.Buffers.shapesCount.getter;
}

double ConnectionAssistantStars.init(count:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  *(_QWORD *)a2 = a1;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_QWORD *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 72) = 1;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_BYTE *)(a2 + 96) = 1;
  result = 2048.00049;
  *(_OWORD *)(a2 + 100) = xmmword_100250F80;
  return result;
}

__n128 initializeWithCopy for ConnectionAssistantStars(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __n128 result;
  __int128 v6;
  __int128 v7;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  result = (__n128)a2[4];
  v6 = a2[5];
  v7 = a2[6];
  *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = v7;
  *(__n128 *)(a1 + 64) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantStars(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 116))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantStars(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 112) = 0;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 116) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantStars()
{
  return &type metadata for ConnectionAssistantStars;
}

__n128 initializeWithCopy for ConnectionAssistantStars.Spawn(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ConnectionAssistantStars.Spawn(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 56))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ConnectionAssistantStars.Spawn(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = (a2 - 1);
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 56) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ConnectionAssistantStars.Spawn()
{
  return &type metadata for ConnectionAssistantStars.Spawn;
}

uint64_t sub_100078A34(uint64_t result)
{
  unsigned int v1;
  unsigned int v2;
  unint64_t v3;
  unsigned int v4;
  int64_t v5;
  uint64_t v6;

  if ((_DWORD)result)
  {
    v1 = result;
    v2 = result;
    v6 = 0;
    swift_stdlib_random(&v6, 8);
    v3 = v6 * (unint64_t)v2;
    result = HIDWORD(v3);
    if (v3 < v1)
    {
      v4 = -v1 % v1;
      if (v4 > v3)
      {
        do
        {
          v6 = 0;
          swift_stdlib_random(&v6, 8);
          v5 = v6 * (unint64_t)v2;
        }
        while (v4 > v5);
        return v5 >> 32;
      }
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100078AC0()
{
  return sub_100078ACC("[%{public}s] init");
}

uint64_t sub_100078ACC(const char *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t MyAgent;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v3 = v1;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FD18);
  v6 = swift_retain_n(v1, v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v17 = v3;
    v18 = v10;
    *(_DWORD *)v9 = 136446210;
    MyAgent = type metadata accessor for FindMyAgent();
    v12 = swift_retain(v3);
    v13 = String.init<A>(describing:)(&v17, MyAgent, v12);
    v15 = v14;
    v17 = sub_100172BEC(v13, v14, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v17, &v18, v9 + 4, v9 + 12);
    swift_release_n(v3);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, a1, v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_release_n(v3);
  }
  return v3;
}

uint64_t sub_100078C88()
{
  uint64_t v0;

  sub_100078ACC("[%{public}s] deinit");
  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for FindMyAgent()
{
  return objc_opt_self(_TtC8SOSBuddy11FindMyAgent);
}

void sub_100078CD0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  __n128 v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  NSObject *oslog;
  uint64_t v20;
  uint64_t v21;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FD18);
  swift_bridgeObjectRetain(a1);
  swift_errorRetain(a2);
  swift_bridgeObjectRetain(a1);
  v5 = swift_errorRetain(a2);
  oslog = Logger.logObject.getter(v5);
  v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v6))
  {
    v7 = swift_slowAlloc(22, -1);
    v8 = swift_slowAlloc(64, -1);
    v20 = a1;
    v21 = v8;
    *(_DWORD *)v7 = 136446466;
    swift_bridgeObjectRetain(a1);
    v9 = sub_100003DB8(&qword_10031B3F8);
    v11 = String.init<A>(describing:)(&v20, v9, v10);
    v13 = v12;
    v20 = sub_100172BEC(v11, v12, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease_n(a1, 2);
    swift_bridgeObjectRelease(v13);
    *(_WORD *)(v7 + 12) = 2082;
    v20 = a2;
    swift_errorRetain(a2);
    v14 = sub_100003DB8(&qword_10031CF20);
    v16 = String.init<A>(describing:)(&v20, v14, v15);
    v18 = v17;
    v20 = sub_100172BEC(v16, v17, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease(v18);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Opening Find My result: %{public}s, %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy(v8, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {
    swift_bridgeObjectRelease_n(a1, 2);
    swift_errorRelease(a2);
    swift_errorRelease(a2);

  }
}

void sub_100078F30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  id v18;
  NSURL *v19;
  void *v20;
  void *v21;
  void *v22;
  id v23;
  void *v24;
  _QWORD aBlock[6];

  v0 = sub_100003DB8(&qword_100317D60);
  __chkstk_darwin(v0, v1);
  v3 = (char *)aBlock - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for URL(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v9 = type metadata accessor for Logger(0);
  v10 = sub_10000D744(v9, (uint64_t)qword_10033FD18);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Opening Find My", v13, 2u);
    swift_slowDealloc(v13, -1, -1);
  }

  URL.init(string:)(0xD000000000000013, 0x8000000100266D60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    v14 = sub_1000400C0((uint64_t)v3);
    v15 = Logger.logObject.getter(v14);
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to form Find My URL", v17, 2u);
      swift_slowDealloc(v17, -1, -1);
    }

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v8, v3, v4);
    v18 = objc_msgSend((id)objc_opt_self(LSApplicationWorkspace), "defaultWorkspace");
    if (v18)
    {
      v20 = v18;
      URL._bridgeToObjectiveC()(v19);
      v22 = v21;
      v23 = objc_msgSend(objc_allocWithZone((Class)_LSOpenConfiguration), "init");
      aBlock[4] = sub_100078CD0;
      aBlock[5] = 0;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_10013EF08;
      aBlock[3] = &unk_1002E9CB8;
      v24 = _Block_copy(aBlock);
      objc_msgSend(v20, "openURL:configuration:completionHandler:", v22, v23, v24);
      _Block_release(v24);

      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
    else
    {
      __break(1u);
    }
  }
}

uint64_t sub_100079224(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100079234(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

_QWORD *sub_10007923C()
{
  _QWORD *v0;
  _QWORD *v1;
  id v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  __n128 v6;
  __n128 v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;

  v1 = v0;
  v2 = objc_allocWithZone((Class)type metadata accessor for TimeZoneSource());
  v1[4] = objc_msgSend(v2, "init", swift_retain(v1).n128_f64[0]);
  v1[5] = 0;
  v3 = (char *)v1 + OBJC_IVAR____TtC8SOSBuddy13TimeZoneModel__timeZone;
  v4 = type metadata accessor for TimeZone(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  swift_release(v1);
  v5 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v1[2] = PassthroughSubject.init()(v6);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  v1[3] = PassthroughSubject.init()(v7);
  v8 = qword_100315820;
  swift_retain(v1);
  if (v8 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v9 = type metadata accessor for Logger(0);
  sub_10000D744(v9, (uint64_t)qword_10033FD18);
  v11 = swift_retain_n(v1, v10);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(12, -1);
    v15 = swift_slowAlloc(32, -1);
    v22 = (uint64_t)v1;
    v23 = v15;
    *(_DWORD *)v14 = 136446210;
    v16 = type metadata accessor for TimeZoneModel(0);
    v17 = swift_retain(v1);
    v18 = String.init<A>(describing:)(&v22, v16, v17);
    v20 = v19;
    v22 = sub_100172BEC(v18, v19, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v14 + 4, v14 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "init: %{public}s", v14, 0xCu);
    swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1, -1);
    swift_slowDealloc(v14, -1, -1);

    swift_release(v1);
  }
  else
  {

    swift_release_n(v1);
  }
  return v1;
}

uint64_t sub_1000794B4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 40));
  return sub_100007FF0(v0 + OBJC_IVAR____TtC8SOSBuddy13TimeZoneModel__timeZone, &qword_10031B548);
}

uint64_t sub_1000794EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __n128 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v2 = type metadata accessor for Logger(0);
  sub_10000D744(v2, (uint64_t)qword_10033FD18);
  v4 = swift_retain_n(v0, v3);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(12, -1);
    v8 = swift_slowAlloc(32, -1);
    v15 = v1;
    v16 = v8;
    *(_DWORD *)v7 = 136446210;
    v9 = type metadata accessor for TimeZoneModel(0);
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v9, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v7 + 4, v7 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "deinit: %{public}s", v7, 0xCu);
    swift_arrayDestroy(v8, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1, -1);
    swift_slowDealloc(v7, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  swift_release(*(_QWORD *)(v1 + 16));
  swift_release(*(_QWORD *)(v1 + 24));

  swift_release(*(_QWORD *)(v1 + 40));
  sub_100007FF0(v1 + OBJC_IVAR____TtC8SOSBuddy13TimeZoneModel__timeZone, &qword_10031B548);
  return v1;
}

uint64_t sub_1000796E4()
{
  uint64_t v0;

  sub_1000794EC();
  return swift_deallocClassInstance(v0, *(unsigned int *)(*(_QWORD *)v0 + 48), *(unsigned __int16 *)(*(_QWORD *)v0 + 52));
}

uint64_t sub_100079708()
{
  return type metadata accessor for TimeZoneModel(0);
}

uint64_t type metadata accessor for TimeZoneModel(uint64_t a1)
{
  uint64_t result;

  result = qword_10031B430;
  if (!qword_10031B430)
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TimeZoneModel);
  return result;
}

void sub_10007974C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[3];

  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = "\b";
  sub_100079900(319);
  if (v3 <= 0x3F)
  {
    v4[2] = *(_QWORD *)(v2 - 8) + 64;
    swift_updateClassMetadata2(a1, 256, 3, v4, a1 + 104);
  }
}

void sub_1000797D0()
{
  uint64_t v0;
  uint64_t v1;
  __n128 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;

  v1 = v0;
  sub_10000D75C();
  v2 = swift_retain(v0);
  v3 = static OS_dispatch_queue.main.getter(v2);
  v4 = sub_100003DB8(&qword_10031B550);
  v5 = swift_allocObject(v4, 40, 7);
  swift_weakInit(v5 + 16, 0);
  if (((unint64_t)&_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(&_swiftEmptyArrayStorage))
  {
    sub_100209204((uint64_t)&_swiftEmptyArrayStorage);
  }
  else
  {
    v6 = &_swiftEmptySetSingleton;
  }
  *(_QWORD *)(v5 + 32) = v6;
  swift_weakAssign(v5 + 16, v1);
  swift_release(v1);
  *(_QWORD *)(v5 + 24) = v3;
  v7 = *(_QWORD *)(*(_QWORD *)(v1 + 32) + OBJC_IVAR____TtC8SOSBuddy14TimeZoneSource_timeZoneDidChange);
  swift_retain(v7);
  v9 = sub_1002458B0(v8, (uint64_t)sub_100079954, 0);
  swift_retain(v9);
  swift_release(v7);
  swift_release(v5);
  v10 = *(_QWORD *)(v1 + 40);
  *(_QWORD *)(v1 + 40) = v9;
  swift_release(v10);
  v11 = *(id *)(v1 + 32);
  sub_100015154();

}

void sub_100079900(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_10031B440)
  {
    v2 = type metadata accessor for TimeZone(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_10031B440);
  }
}

uint64_t sub_100079954(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v16[24];
  _BYTE v17[24];

  v4 = sub_100003DB8(&qword_10031B548);
  v6 = __chkstk_darwin(v4, v5);
  v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6, v9);
  v11 = &v16[-v10];
  v12 = type metadata accessor for TimeZone(0);
  v13 = *(_QWORD *)(v12 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v11, a2, v12);
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v11, 0, 1, v12);
  v14 = a1 + OBJC_IVAR____TtC8SOSBuddy13TimeZoneModel__timeZone;
  swift_beginAccess(a1 + OBJC_IVAR____TtC8SOSBuddy13TimeZoneModel__timeZone, v17, 0, 0);
  sub_10007A178(v14, (uint64_t)v8);
  sub_100079AA4((uint64_t)v11);
  swift_beginAccess(v14, v16, 33, 0);
  sub_10007A1C0((uint64_t)v11, v14);
  swift_endAccess(v16);
  sub_100079CEC((uint64_t)v8);
  sub_100007FF0((uint64_t)v11, &qword_10031B548);
  return sub_100007FF0((uint64_t)v8, &qword_10031B548);
}

uint64_t sub_100079AA4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int (*v19)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  unint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  unint64_t v25;
  _BYTE v27[24];

  v2 = v1;
  v4 = type metadata accessor for TimeZone(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4, v6);
  v8 = &v27[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v9 = sub_100003DB8(&qword_10031B548);
  __chkstk_darwin(v9, v10);
  v12 = &v27[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v13 = sub_100003DB8(&qword_10031B558);
  __chkstk_darwin(v13, v14);
  v16 = &v27[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v17 = v2 + OBJC_IVAR____TtC8SOSBuddy13TimeZoneModel__timeZone;
  swift_beginAccess(v2 + OBJC_IVAR____TtC8SOSBuddy13TimeZoneModel__timeZone, v27, 0, 0);
  v18 = (uint64_t)&v16[*(int *)(v13 + 48)];
  sub_10007A178(v17, (uint64_t)v16);
  sub_10007A178(a1, v18);
  v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (v19((uint64_t)v16, 1, v4) == 1)
  {
    if (v19(v18, 1, v4) == 1)
      return sub_100007FF0((uint64_t)v16, &qword_10031B548);
  }
  else
  {
    sub_10007A178((uint64_t)v16, (uint64_t)v12);
    if (v19(v18, 1, v4) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v8, v18, v4);
      v21 = sub_10007A208();
      v22 = dispatch thunk of static Equatable.== infix(_:_:)(v12, v8, v4, v21);
      v23 = *(void (**)(char *, uint64_t))(v5 + 8);
      v23(v8, v4);
      v23(v12, v4);
      result = sub_100007FF0((uint64_t)v16, &qword_10031B548);
      if ((v22 & 1) != 0)
        return result;
      goto LABEL_8;
    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v12, v4);
  }
  sub_100007FF0((uint64_t)v16, &qword_10031B558);
LABEL_8:
  v24 = sub_100003DB8(&qword_10032B0E0);
  v25 = sub_100016B20();
  return Subject<>.send()(v24, v25);
}

uint64_t sub_100079CEC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  __n128 v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __n128 v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  __n128 v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  _BYTE v57[24];

  v3 = type metadata accessor for TimeZone(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3, v5);
  v7 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = sub_100003DB8(&qword_10031B548);
  v9 = __chkstk_darwin(v52, v8);
  v51 = (uint64_t)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9, v11);
  v14 = (char *)&v50 - v13;
  __chkstk_darwin(v12, v15);
  v17 = (char *)&v50 - v16;
  v18 = sub_100003DB8(&qword_10031B558);
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = v1;
  v22 = v1 + OBJC_IVAR____TtC8SOSBuddy13TimeZoneModel__timeZone;
  swift_beginAccess(v1 + OBJC_IVAR____TtC8SOSBuddy13TimeZoneModel__timeZone, v57, 0, 0);
  v23 = (uint64_t)&v21[*(int *)(v18 + 48)];
  sub_10007A178(v22, (uint64_t)v21);
  v53 = a1;
  sub_10007A178(a1, v23);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v24((uint64_t)v21, 1, v3) == 1)
  {
    if (v24(v23, 1, v3) == 1)
      return sub_100007FF0((uint64_t)v21, &qword_10031B548);
  }
  else
  {
    sub_10007A178((uint64_t)v21, (uint64_t)v17);
    if (v24(v23, 1, v3) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v7, v23, v3);
      v47 = sub_10007A208();
      v48 = dispatch thunk of static Equatable.== infix(_:_:)(v17, v7, v3, v47);
      v49 = *(void (**)(char *, uint64_t))(v4 + 8);
      v49(v7, v3);
      v49(v17, v3);
      result = sub_100007FF0((uint64_t)v21, &qword_10031B548);
      if ((v48 & 1) != 0)
        return result;
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v17, v3);
  }
  sub_100007FF0((uint64_t)v21, &qword_10031B558);
LABEL_7:
  if (qword_1003158D0 != -1)
    swift_once(&qword_1003158D0, sub_1000D98EC);
  v26 = type metadata accessor for Logger(0);
  sub_10000D744(v26, (uint64_t)qword_10033FF28);
  sub_10007A178(v53, (uint64_t)v14);
  v27 = v54;
  v29 = swift_retain_n(v54, 2, v28);
  v30 = Logger.logObject.getter(v29);
  v31 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = swift_slowAlloc(22, -1);
    v53 = swift_slowAlloc(64, -1);
    v56 = v53;
    *(_DWORD *)v32 = 136315394;
    v33 = v51;
    sub_10007A178((uint64_t)v14, v51);
    v34 = v52;
    v36 = String.init<A>(describing:)(v33, v52, v35);
    v38 = v37;
    v55 = sub_100172BEC(v36, v37, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v32 + 4, v32 + 12);
    swift_bridgeObjectRelease(v38);
    sub_100007FF0((uint64_t)v14, &qword_10031B548);
    *(_WORD *)(v32 + 12) = 2080;
    sub_10007A178(v22, v33);
    v40 = String.init<A>(describing:)(v33, v34, v39);
    v42 = v41;
    v55 = sub_100172BEC(v40, v41, &v56);
    v43 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v32 + 14, v32 + 22);
    swift_release_n(v43, 2);
    swift_bridgeObjectRelease(v42);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "timeZone changed from %s to %s", (uint8_t *)v32, 0x16u);
    v44 = v53;
    swift_arrayDestroy(v53, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1, -1);
    swift_slowDealloc(v32, -1, -1);

  }
  else
  {
    sub_100007FF0((uint64_t)v14, &qword_10031B548);

    swift_release_n(v27, 2);
  }
  v45 = sub_100003DB8(&qword_10032B0E0);
  v46 = sub_100016B20();
  return Subject<>.send()(v45, v46);
}

uint64_t sub_10007A178(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031B548);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007A1C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031B548);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

unint64_t sub_10007A208()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B560;
  if (!qword_10031B560)
  {
    v1 = type metadata accessor for TimeZone(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for TimeZone, v1);
    atomic_store(result, (unint64_t *)&qword_10031B560);
  }
  return result;
}

uint64_t sub_10007A254(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  swift_retain(v3);
  return a1;
}

uint64_t assignWithCopy for StartEmegrencyThreadRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_retain(v4);
  swift_release(v3);
  return a1;
}

uint64_t assignWithTake for StartEmegrencyThreadRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_BYTE *)(a1 + 9) = *(_BYTE *)(a2 + 9);
  v3 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_release(v3);
  return a1;
}

ValueMetadata *type metadata accessor for StartEmegrencyThreadRequest()
{
  return &type metadata for StartEmegrencyThreadRequest;
}

void sub_10007A338(char *a1)
{
  sub_10022B3F4(*a1);
}

void sub_10007A344()
{
  unsigned __int8 *v0;
  uint64_t v1;
  _QWORD v2[9];

  v1 = *v0;
  Hasher.init(_seed:)(v2, 0);
  __asm { BR              X9 }
}

Swift::Int sub_10007A388()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 1954047348, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

void sub_10007A3F4()
{
  __asm { BR              X10 }
}

uint64_t sub_10007A428(uint64_t a1)
{
  uint64_t v1;

  String.hash(into:)(a1, 1954047348, v1);
  return swift_bridgeObjectRelease(v1);
}

void sub_10007A480(uint64_t a1)
{
  unsigned __int8 *v1;
  uint64_t v2;
  _QWORD v3[9];

  v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }
}

Swift::Int sub_10007A4C0()
{
  uint64_t v0;
  uint64_t v2;

  String.hash(into:)(&v2, 1954047348, v0);
  swift_bridgeObjectRelease(v0);
  return Hasher._finalize()();
}

unint64_t sub_10007A52C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10007A828(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10007A558()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_10007A580 + 4 * byte_10025101C[*v0]))();
}

void sub_10007A580(_QWORD *a1@<X8>)
{
  uint64_t v1;

  *a1 = 1954047348;
  a1[1] = v1;
}

void sub_10007A590(uint64_t a1@<X8>)
{
  strcpy((char *)a1, "fallDetection");
  *(_WORD *)(a1 + 14) = -4864;
}

void sub_10007A5B8(_QWORD *a1@<X8>)
{
  *a1 = 0x617070616BLL;
  a1[1] = 0xE500000000000000;
}

uint64_t getEnumTagSinglePayload for EmergencyConversationState(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for EmergencyConversationState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for EmergencyRequest()
{
  return &type metadata for EmergencyRequest;
}

uint64_t storeEnumTagSinglePayload for EmergencyRequestReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10007A6C8 + 4 * byte_100251025[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10007A6FC + 4 * byte_100251020[v4]))();
}

uint64_t sub_10007A6FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007A704(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007A70CLL);
  return result;
}

uint64_t sub_10007A718(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10007A720);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10007A724(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007A72C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for EmergencyRequestReason()
{
  return &type metadata for EmergencyRequestReason;
}

unint64_t sub_10007A74C()
{
  unint64_t result;

  result = qword_10031B568;
  if (!qword_10031B568)
  {
    result = swift_getWitnessTable(&unk_100251100, &type metadata for EmergencyRequestReason);
    atomic_store(result, (unint64_t *)&qword_10031B568);
  }
  return result;
}

uint64_t sub_10007A790(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  char v10;
  char v11;
  uint64_t result;
  char v13;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = *(_QWORD *)(a1 + 24);
  v5 = *(_BYTE *)(a1 + 32);
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(unsigned __int8 *)(a2 + 16);
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(unsigned __int8 *)(a2 + 32);
  sub_10022B3F4(*(_BYTE *)a1);
  v11 = v10;
  result = 0;
  if ((v11 & 1) != 0 && v2 == v6 && ((v3 ^ v7) & 1) == 0)
  {
    if ((v5 & 1) != 0)
    {
      if (v9)
        return 1;
    }
    else
    {
      if (v4 == v8)
        v13 = v9;
      else
        v13 = 1;
      if ((v13 & 1) == 0)
        return 1;
    }
    return 0;
  }
  return result;
}

unint64_t sub_10007A828(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1002E08D0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

uint64_t destroy for TryOutCancelIntroButton(uint64_t a1)
{
  swift_release(*(_QWORD *)a1);
  return sub_100040294(*(_QWORD *)(a1 + 16), *(_BYTE *)(a1 + 24));
}

uint64_t initializeWithCopy for TryOutCancelIntroButton(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  v6 = *((_BYTE *)a2 + 24);
  swift_retain(v3);
  sub_100040244(v5, v6);
  *(_QWORD *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = v6;
  return a1;
}

uint64_t *assignWithCopy for TryOutCancelIntroButton(uint64_t *a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;

  v2 = a2;
  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = v2[1];
  v6 = v2[2];
  LOBYTE(v2) = *((_BYTE *)v2 + 24);
  sub_100040244(v6, (char)v2);
  v7 = a1[2];
  v8 = *((_BYTE *)a1 + 24);
  a1[2] = v6;
  *((_BYTE *)a1 + 24) = (_BYTE)v2;
  sub_100040294(v7, v8);
  return a1;
}

__n128 initializeWithTake for StewieCompressedData(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for TryOutCancelIntroButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  char v7;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = *((_BYTE *)a2 + 24);
  v6 = a1[2];
  v7 = *((_BYTE *)a1 + 24);
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 1);
  *((_BYTE *)a1 + 24) = v5;
  sub_100040294(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for TryOutCancelIntroButton(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 25))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TryOutCancelIntroButton(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_BYTE *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 25) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for TryOutCancelIntroButton()
{
  return &type metadata for TryOutCancelIntroButton;
}

uint64_t sub_10007AA88(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100297AC4, 1);
}

uint64_t sub_10007AA98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  Swift::String v26;
  unint64_t v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  double v40;
  uint64_t OpaqueTypeConformance2;
  uint64_t v42;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  Swift::String v55;
  uint64_t v56;
  uint64_t v57;

  v46 = a2;
  v47 = a1;
  v54 = a5;
  v6 = a4 & 1;
  v7 = type metadata accessor for BorderlessButtonStyle(0);
  v52 = *(_QWORD *)(v7 - 8);
  v53 = (void *)v7;
  __chkstk_darwin(v7, v8);
  v51 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_100003DB8(&qword_100319400);
  __chkstk_darwin(v10, v11);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_100003DB8(&qword_100318730);
  v48 = *(_QWORD *)(v14 - 8);
  __chkstk_darwin(v14, v15);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_100003DB8(&qword_10031B570);
  v49 = *(_QWORD *)(v18 - 8);
  v50 = v18;
  __chkstk_darwin(v18, v19);
  v21 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100040244(a3, v6);
  v22 = sub_100042548(a3, v6);
  sub_100040294(a3, v6);
  v23 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v44 = 0x8000000100266DE0;
  if ((v22 & 1) != 0)
  {
    v24 = 1701736260;
    v25 = 0xE400000000000000;
  }
  else
  {
    v24 = 0x6C65636E6143;
    v25 = 0xE600000000000000;
  }
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  v27 = 0xD000000000000084;
  v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v24, (Swift::String_optional)0, (NSBundle)v23, v26, *(Swift::String *)(&v44 - 1));

  v55 = v28;
  static ButtonRole.cancel.getter();
  v29 = type metadata accessor for ButtonRole(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(v13, 0, 1, v29);
  v30 = swift_allocObject(&unk_1002E9F78, 41, 7);
  v31 = v46;
  v32 = v47;
  *(_QWORD *)(v30 + 16) = v47;
  *(_QWORD *)(v30 + 24) = v31;
  *(_QWORD *)(v30 + 32) = a3;
  *(_BYTE *)(v30 + 40) = v6 != 0;
  sub_100040244(a3, v6);
  v33 = sub_10002B3F4();
  swift_retain(v32);
  v34 = Button<>.init<A>(_:role:action:)(&v55, v13, sub_10007AF14, v30, &type metadata for String, v33);
  v35 = v51;
  BorderlessButtonStyle.init()(v34);
  v36 = sub_1000084FC(&qword_100318738, &qword_100318730, (uint64_t)&protocol conformance descriptor for Button<A>);
  v37 = sub_1000052EC(&qword_100319590, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
  v38 = v53;
  View.buttonStyle<A>(_:)(v35, v14, v53, v36, v37);
  (*(void (**)(char *, void *))(v52 + 8))(v35, v38);
  v39 = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v17, v14);
  v40 = static Font.Weight.bold.getter(v39);
  v55._countAndFlagsBits = v14;
  v55._object = v38;
  v56 = v36;
  v57 = v37;
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v55, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v42 = v50;
  View.fontWeight(_:)(*(_QWORD *)&v40, 0, v50, OpaqueTypeConformance2);
  return (*(uint64_t (**)(char *, uint64_t))(v49 + 8))(v21, v42);
}

uint64_t sub_10007AE28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 40);
    swift_retain(v2);
    v3 = sub_100003DB8(&qword_10032B0E0);
    v4 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v3, v4);
    return swift_release(v2);
  }
  else
  {
    v7 = type metadata accessor for AppEvents();
    v8 = sub_1000052EC((unint64_t *)&qword_100316A10, (uint64_t (*)(uint64_t))type metadata accessor for AppEvents, (uint64_t)&unk_100254EA8);
    result = EnvironmentObject.error()(0, a2, v7, v8);
    __break(1u);
  }
  return result;
}

uint64_t sub_10007AED4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_10007AA98(*(_QWORD *)v1, *(_QWORD *)(v1 + 8), *(_QWORD *)(v1 + 16), *(_BYTE *)(v1 + 24), a1);
}

uint64_t sub_10007AEE4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  sub_100040294(*(_QWORD *)(v0 + 32), *(_BYTE *)(v0 + 40));
  return swift_deallocObject(v0, 41, 7);
}

uint64_t sub_10007AF14()
{
  uint64_t v0;

  return sub_10007AE28(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10007AF24()
{
  uint64_t v0;
  uint64_t OpaqueTypeConformance2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = sub_100007FAC(&qword_10031B570);
  v3 = sub_100007FAC(&qword_100318730);
  v4 = type metadata accessor for BorderlessButtonStyle(255);
  v5 = sub_1000084FC(&qword_100318738, &qword_100318730, (uint64_t)&protocol conformance descriptor for Button<A>);
  v6 = sub_1000052EC(&qword_100319590, (uint64_t (*)(uint64_t))&type metadata accessor for BorderlessButtonStyle, (uint64_t)&protocol conformance descriptor for BorderlessButtonStyle);
  OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.buttonStyle<A>(_:)>>, 1);
  v3 = v0;
  v4 = OpaqueTypeConformance2;
  return swift_getOpaqueTypeConformance2(&v3, &opaque type descriptor for <<opaque return type of View.fontWeight(_:)>>, 1);
}

uint64_t destroy for QuestionnaireNavigationPageForQuestion(_QWORD *a1)
{
  swift_release(*a1);
  return swift_bridgeObjectRelease(a1[2]);
}

uint64_t *_s8SOSBuddy38QuestionnaireNavigationPageForQuestionVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *a2;
  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[2];
  a1[2] = v5;
  swift_retain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t *assignWithCopy for QuestionnaireNavigationPageForQuestion(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t *assignWithTake for QuestionnaireNavigationPageForQuestion(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a2[2];
  v6 = a1[2];
  a1[1] = a2[1];
  a1[2] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

ValueMetadata *type metadata accessor for QuestionnaireNavigationPageForQuestion()
{
  return &type metadata for QuestionnaireNavigationPageForQuestion;
}

unint64_t sub_10007B118()
{
  unint64_t result;

  result = qword_10031B578;
  if (!qword_10031B578)
  {
    result = swift_getWitnessTable(&unk_100251228, &type metadata for QuestionnaireNavigationPageForQuestion);
    atomic_store(result, (unint64_t *)&qword_10031B578);
  }
  return result;
}

Swift::Int sub_10007B15C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[9];

  Hasher.init(_seed:)(v9, 0);
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v9, v7, v6);
  swift_bridgeObjectRelease(v6);
  if (a3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(a3);
    String.hash(into:)(v9, a2, a3);
    swift_bridgeObjectRelease(a3);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t sub_10007B204(uint64_t *a1, uint64_t *a2)
{
  return sub_10007B774(*a1, a1[1], a1[2], *a2, a2[1], a2[2]);
}

Swift::Int sub_10007B220()
{
  uint64_t *v0;

  return sub_10007B15C(*v0, v0[1], v0[2]);
}

void sub_10007B22C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = *v1;
  v4 = v1[1];
  v5 = v1[2];
  v6 = *(_QWORD *)(*v1 + 16);
  v7 = *(_QWORD *)(v3 + 24);
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(a1, v6, v7);
  swift_bridgeObjectRelease(v7);
  if (v5)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v5);
    String.hash(into:)(a1, v4, v5);
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_10007B2D0(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[9];

  v3 = *v1;
  v2 = v1[1];
  v4 = v1[2];
  Hasher.init(_seed:)(v8, a1);
  v5 = *(_QWORD *)(v3 + 16);
  v6 = *(_QWORD *)(v3 + 24);
  swift_bridgeObjectRetain(v6);
  String.hash(into:)(v8, v5, v6);
  swift_bridgeObjectRelease(v6);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v4);
    String.hash(into:)(v8, v2, v4);
    swift_bridgeObjectRelease(v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

void sub_10007B370(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = v1;
  Hasher._combine(_:)(*(_QWORD *)v2);
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + 8));
  v4 = *(_QWORD *)(v2 + 16);
  if (v4)
  {
    v5 = *(_QWORD *)(v2 + 24);
    v6 = *(_QWORD *)(v2 + 32);
    Hasher._combine(_:)(1u);
    v7 = *(_QWORD *)(v4 + 16);
    v8 = *(_QWORD *)(v4 + 24);
    sub_10007BB44(v4, v5, v6);
    sub_10007BB44(v4, v5, v6);
    swift_bridgeObjectRetain(v8);
    String.hash(into:)(a1, v7, v8);
    swift_bridgeObjectRelease(v8);
    if (v6)
    {
      Hasher._combine(_:)(1u);
      swift_bridgeObjectRetain(v6);
      String.hash(into:)(a1, v5, v6);
      swift_release(v4);
      swift_bridgeObjectRelease_n(v6, 2);
      v9 = v4;
      v10 = v5;
      v11 = v6;
    }
    else
    {
      Hasher._combine(_:)(0);
      swift_release(v4);
      v9 = v4;
      v10 = v5;
      v11 = 0;
    }
    sub_10007BB74(v9, v10, v11);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

BOOL sub_10007B488(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  _OWORD v5[2];
  uint64_t v6;
  _OWORD v7[2];
  uint64_t v8;

  v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  v6 = *(_QWORD *)(a1 + 32);
  v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  v8 = *(_QWORD *)(a2 + 32);
  return sub_10007B548((uint64_t)v5, (uint64_t)v7);
}

Swift::Int sub_10007B4D0()
{
  _QWORD v1[9];

  Hasher.init(_seed:)(v1, 0);
  sub_10007B370((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_10007B510(uint64_t a1)
{
  _QWORD v2[9];

  Hasher.init(_seed:)(v2, a1);
  sub_10007B370((uint64_t)v2);
  return Hasher._finalize()();
}

BOOL sub_10007B548(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  if (*(_QWORD *)a1 != *(_QWORD *)a2 || *(unsigned __int8 *)(a1 + 8) != *(unsigned __int8 *)(a2 + 8))
    return 0;
  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD *)(a2 + 16);
  v4 = (v2 | v3) == 0;
  if (v2 && v3)
  {
    v5 = *(_QWORD *)(a1 + 24);
    v6 = *(_QWORD *)(a1 + 32);
    v8 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(v2 + 16);
    v10 = *(_QWORD *)(v2 + 24);
    v11 = *(_QWORD *)(v3 + 16);
    v12 = *(_QWORD *)(v3 + 24);
    v13 = v9 == v11 && v10 == v12;
    if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)(v9, v10, v11, v12, 0) & 1) == 0)
    {
      sub_10007BB44(v2, v5, v6);
      sub_10007BB44(v2, v5, v6);
      sub_10007BB44(v3, v8, v7);
      swift_release(v3);
      v4 = 0;
LABEL_26:
      swift_release(v2);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRelease(v6);
      sub_10007BB74(v2, v5, v6);
      return v4;
    }
    if (v6)
    {
      if (v7)
      {
        if (v5 == v8 && v6 == v7)
        {
          sub_10007BB44(v2, v5, v6);
          sub_10007BB44(v2, v5, v6);
          v14 = v3;
          v15 = v5;
          v16 = v6;
LABEL_19:
          sub_10007BB44(v14, v15, v16);
          swift_release(v3);
LABEL_25:
          v4 = 1;
          goto LABEL_26;
        }
        v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v8, v7, 0);
        sub_10007BB44(v2, v5, v6);
        sub_10007BB44(v2, v5, v6);
        sub_10007BB44(v3, v8, v7);
        swift_release(v3);
        if ((v18 & 1) != 0)
          goto LABEL_25;
        goto LABEL_23;
      }
      sub_10007BB44(v2, v5, v6);
      sub_10007BB44(v2, v5, v6);
      v16 = 0;
    }
    else
    {
      sub_10007BB44(v2, v5, 0);
      sub_10007BB44(v2, v5, 0);
      v16 = v7;
      if (!v7)
      {
        v14 = v3;
        v15 = v8;
        goto LABEL_19;
      }
    }
    sub_10007BB44(v3, v8, v16);
    swift_release(v3);
LABEL_23:
    v4 = 0;
    goto LABEL_26;
  }
  return v4;
}

uint64_t sub_10007B774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  char v16;
  uint64_t result;

  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a4 + 16);
  v14 = *(_QWORD *)(a4 + 24);
  v15 = v11 == v13 && v12 == v14;
  if (v15 || (v16 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v13, v14, 0), result = 0, (v16 & 1) != 0))
  {
    if (a3)
    {
      if (a6 && (a2 == a5 && a3 == a6 || (_stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, a5, a6, 0) & 1) != 0))
        return 1;
    }
    else if (!a6)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

uint64_t destroy for QuestionnaireNavigationPage(_QWORD *a1)
{
  uint64_t result;

  swift_release(*a1);
  result = a1[2];
  if (result)
  {
    swift_release(result);
    return swift_bridgeObjectRelease(a1[4]);
  }
  return result;
}

uint64_t initializeWithCopy for QuestionnaireNavigationPage(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  v6 = a2 + 2;
  v5 = a2[2];
  swift_retain(v4);
  if (v5)
  {
    v7 = a2[3];
    v8 = a2[4];
    *(_QWORD *)(a1 + 16) = v5;
    *(_QWORD *)(a1 + 24) = v7;
    *(_QWORD *)(a1 + 32) = v8;
    swift_retain(v5);
    swift_bridgeObjectRetain(v8);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
    *(_QWORD *)(a1 + 32) = v6[2];
  }
  return a1;
}

uint64_t *assignWithCopy for QuestionnaireNavigationPage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;

  v4 = *a2;
  v5 = *a1;
  *a1 = *a2;
  swift_retain(v4);
  swift_release(v5);
  v6 = a1 + 2;
  v7 = a1[2];
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  v9 = a2 + 2;
  v8 = a2[2];
  if (v7)
  {
    if (v8)
    {
      a1[2] = v8;
      swift_retain(v8);
      swift_release(v7);
      a1[3] = a2[3];
      v10 = a2[4];
      v11 = a1[4];
      a1[4] = v10;
      swift_bridgeObjectRetain(v10);
      swift_bridgeObjectRelease(v11);
    }
    else
    {
      sub_100050978(a1 + 2);
      v13 = a2[4];
      *v6 = *v9;
      a1[4] = v13;
    }
  }
  else if (v8)
  {
    a1[2] = v8;
    a1[3] = a2[3];
    v12 = a2[4];
    a1[4] = v12;
    swift_retain(v8);
    swift_bridgeObjectRetain(v12);
  }
  else
  {
    v14 = *v9;
    a1[4] = a2[4];
    *v6 = v14;
  }
  return a1;
}

uint64_t *assignWithTake for QuestionnaireNavigationPage(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  v5 = a2[2];
  v6 = a1[2];
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  if (!v6)
    goto LABEL_5;
  if (!v5)
  {
    sub_100050978(a1 + 2);
LABEL_5:
    *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
    a1[4] = a2[4];
    return a1;
  }
  a1[2] = v5;
  swift_release(v6);
  v7 = a2[4];
  v8 = a1[4];
  a1[3] = a2[3];
  a1[4] = v7;
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionnaireNavigationPage(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnaireNavigationPage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionnaireNavigationPage()
{
  return &type metadata for QuestionnaireNavigationPage;
}

unint64_t sub_10007BB00()
{
  unint64_t result;

  result = qword_10031B580[0];
  if (!qword_10031B580[0])
  {
    result = swift_getWitnessTable(&unk_1002512AC, &type metadata for QuestionnaireNavigationPage);
    atomic_store(result, qword_10031B580);
  }
  return result;
}

uint64_t sub_10007BB44(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  if (result)
  {
    v3 = result;
    swift_bridgeObjectRetain(a3);
    return swift_retain(v3);
  }
  return result;
}

uint64_t sub_10007BB74(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result)
  {
    swift_release(result);
    return swift_bridgeObjectRelease(a3);
  }
  return result;
}

uint64_t sub_10007BBA0(uint64_t a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = type metadata accessor for Spring(319);
  if (v3 <= 0x3F)
  {
    v5 = *(_QWORD *)(result - 8) + 64;
    result = swift_checkMetadataState(319, *(_QWORD *)(a1 + 16));
    if (v4 <= 0x3F)
    {
      v6 = *(_QWORD *)(result - 8) + 64;
      v7 = v6;
      v8 = v6;
      swift_initStructMetadata(a1, 0, 4, &v5, a1 + 32);
      return 0;
    }
  }
  return result;
}

uint64_t *sub_10007BC2C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(unint64_t, unint64_t, uint64_t);
  unint64_t v22;

  v6 = type metadata accessor for Spring(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_DWORD *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  v12 = *(_QWORD *)(v9 + 64);
  v13 = v12 + v10;
  v14 = ((v12 + v10 + ((v12 + v10 + (v11 & ~v10)) & ~v10)) & ~v10) + v12;
  v15 = (*(_BYTE *)(v7 + 80) | *(_BYTE *)(v9 + 80));
  if (v15 > 7 || ((*(_DWORD *)(v7 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0 || v14 > 0x18)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v15 + 16) & ~v15));
    swift_retain(v18);
  }
  else
  {
    v19 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
    v20 = ((unint64_t)a2 + v11) & v19;
    v21 = *(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16);
    v21(((unint64_t)a1 + v11) & v19, v20, v8);
    v22 = (v13 + v20) & v19;
    v21((v13 + (((unint64_t)a1 + v11) & v19)) & v19, v22, v8);
    v21((v13 + ((v13 + (((unint64_t)a1 + v11) & v19)) & v19)) & v19, (v13 + v22) & v19, v8);
  }
  return a1;
}

uint64_t sub_10007BD60(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v14)(uint64_t, uint64_t);

  v4 = type metadata accessor for Spring(0);
  v5 = *(_QWORD *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  v6 = *(_QWORD *)(v5 + 64) + a1;
  v7 = *(_QWORD *)(a2 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = (v6 + v9) & ~v9;
  v14 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v14(v10, v7);
  v11 = *(_QWORD *)(v8 + 64) + v9;
  v12 = (v11 + v10) & ~v9;
  v14(v12, v7);
  return ((uint64_t (*)(uint64_t, uint64_t))v14)((v11 + v12) & ~v9, v7);
}

uint64_t sub_10007BE10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for Spring(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a1, a2, v6);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  v12 = (v11 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v14(v12, v13, v8);
  v15 = *(_QWORD *)(v9 + 64) + v10;
  v16 = (v15 + v12) & ~v10;
  v17 = (v15 + v13) & ~v10;
  v14(v16, v17, v8);
  v14((v15 + v16) & ~v10, (v15 + v17) & ~v10, v8);
  return a1;
}

uint64_t sub_10007BEE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for Spring(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24))(a1, a2, v6);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  v12 = (v11 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 24);
  v14(v12, v13, v8);
  v15 = *(_QWORD *)(v9 + 64) + v10;
  v16 = (v15 + v12) & ~v10;
  v17 = (v15 + v13) & ~v10;
  v14(v16, v17, v8);
  v14((v15 + v16) & ~v10, (v15 + v17) & ~v10, v8);
  return a1;
}

uint64_t sub_10007BFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for Spring(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(a1, a2, v6);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  v12 = (v11 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  v14(v12, v13, v8);
  v15 = *(_QWORD *)(v9 + 64) + v10;
  v16 = (v15 + v12) & ~v10;
  v17 = (v15 + v13) & ~v10;
  v14(v16, v17, v8);
  v14((v15 + v16) & ~v10, (v15 + v17) & ~v10, v8);
  return a1;
}

uint64_t sub_10007C098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = type metadata accessor for Spring(0);
  v7 = *(_QWORD *)(v6 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40))(a1, a2, v6);
  v8 = *(_QWORD *)(a3 + 16);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v11 = *(_QWORD *)(v7 + 64) + v10;
  v12 = (v11 + a1) & ~v10;
  v13 = (v11 + a2) & ~v10;
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 40);
  v14(v12, v13, v8);
  v15 = *(_QWORD *)(v9 + 64) + v10;
  v16 = (v15 + v12) & ~v10;
  v17 = (v15 + v13) & ~v10;
  v14(v16, v17, v8);
  v14((v15 + v16) & ~v10, (v15 + v17) & ~v10, v8);
  return a1;
}

uint64_t sub_10007C170(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;

  v6 = type metadata accessor for Spring(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = *(unsigned int *)(v7 + 84);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_DWORD *)(v10 + 84);
  if (v11 <= v8)
    v12 = *(_DWORD *)(v7 + 84);
  else
    v12 = *(_DWORD *)(v10 + 84);
  if (!a2)
    return 0;
  v13 = *(unsigned __int8 *)(v10 + 80);
  v14 = *(_QWORD *)(v7 + 64) + v13;
  if (a2 <= v12)
    goto LABEL_23;
  v15 = ((*(_QWORD *)(v10 + 64) + v13 + ((*(_QWORD *)(v10 + 64) + v13 + (v14 & ~v13)) & ~v13)) & ~v13)
      + *(_QWORD *)(v10 + 64);
  v16 = 8 * v15;
  if (v15 <= 3)
  {
    v18 = ((a2 - v12 + ~(-1 << v16)) >> v16) + 1;
    if (HIWORD(v18))
    {
      v17 = *(_DWORD *)(a1 + v15);
      if (!v17)
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v18 > 0xFF)
    {
      v17 = *(unsigned __int16 *)(a1 + v15);
      if (!*(_WORD *)(a1 + v15))
        goto LABEL_23;
      goto LABEL_14;
    }
    if (v18 < 2)
    {
LABEL_23:
      if (v12)
      {
        if (v8 >= v11)
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, v8, v6);
        else
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(v10 + 48))((v14 + a1) & ~v13, *(unsigned int *)(v10 + 84), v9);
      }
      return 0;
    }
  }
  v17 = *(unsigned __int8 *)(a1 + v15);
  if (!*(_BYTE *)(a1 + v15))
    goto LABEL_23;
LABEL_14:
  v19 = (v17 - 1) << v16;
  if (v15 > 3)
    v19 = 0;
  if ((_DWORD)v15)
  {
    if (v15 <= 3)
      v20 = ((*(_DWORD *)(v10 + 64) + v13 + ((*(_DWORD *)(v10 + 64) + v13 + (v14 & ~(_DWORD)v13)) & ~(_DWORD)v13)) & ~(_DWORD)v13)
          + *(_DWORD *)(v10 + 64);
    else
      v20 = 4;
    __asm { BR              X12 }
  }
  return v12 + v19 + 1;
}

void sub_10007C314(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  size_t v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  int v16;

  v8 = *(_QWORD *)(type metadata accessor for Spring(0) - 8);
  v9 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v9 + 84) <= *(_DWORD *)(v8 + 84))
    v10 = *(_DWORD *)(v8 + 84);
  else
    v10 = *(_DWORD *)(v9 + 84);
  v11 = *(unsigned __int8 *)(v9 + 80);
  v12 = ((*(_QWORD *)(v9 + 64) + v11 + ((*(_QWORD *)(v9 + 64) + v11 + ((*(_QWORD *)(v8 + 64) + v11) & ~v11)) & ~v11)) & ~v11)
      + *(_QWORD *)(v9 + 64);
  if (a3 <= v10)
  {
    v13 = 0;
  }
  else if (v12 <= 3)
  {
    v15 = ((a3 - v10 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
    if (HIWORD(v15))
    {
      v13 = &dword_100000004;
    }
    else if (v15 >= 0x100)
    {
      v13 = 2;
    }
    else
    {
      v13 = v15 > 1;
    }
  }
  else
  {
    v13 = &_mh_execute_header.magic + 1;
  }
  if (v10 < a2)
  {
    v14 = ~v10 + a2;
    if (v12 < 4)
    {
      if ((_DWORD)v12)
      {
        v16 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if ((_DWORD)v12 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if ((_DWORD)v12 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t type metadata accessor for Spring(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100005D84(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for Spring);
}

uint64_t storeEnumTagSinglePayload for QuestionnairePolicy.QuestionnaireScope(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10007C594 + 4 * byte_100251305[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10007C5C8 + 4 * byte_100251300[v4]))();
}

uint64_t sub_10007C5C8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007C5D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007C5D8);
  return result;
}

uint64_t sub_10007C5E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10007C5ECLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10007C5F0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007C5F8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for QuestionnairePolicy.QuestionnaireScope()
{
  return &type metadata for QuestionnairePolicy.QuestionnaireScope;
}

uint64_t initializeWithCopy for QuestionnairePolicy(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for QuestionnairePolicy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  v6 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  *(_OWORD *)(a1 + 24) = v6;
  return a1;
}

uint64_t assignWithTake for QuestionnairePolicy(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 33) = *(_OWORD *)(a2 + 33);
  return a1;
}

uint64_t getEnumTagSinglePayload for QuestionnairePolicy(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 49))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for QuestionnairePolicy(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 48) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 49) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 49) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionnairePolicy()
{
  return &type metadata for QuestionnairePolicy;
}

unint64_t sub_10007C7B4()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B608;
  if (!qword_10031B608)
  {
    v1 = sub_100007FAC(&qword_10031B610);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_10031B608);
  }
  return result;
}

void sub_10007C800(_QWORD *a1@<X8>)
{
  *a1 = &off_1002E0950;
}

unint64_t sub_10007C814()
{
  unint64_t result;

  result = qword_10031B618;
  if (!qword_10031B618)
  {
    result = swift_getWitnessTable(&unk_1002513BC, &type metadata for QuestionnairePolicy.QuestionnaireScope);
    atomic_store(result, (unint64_t *)&qword_10031B618);
  }
  return result;
}

ValueMetadata *type metadata accessor for QuestionnairePolicy.AutoSendPolicy()
{
  return &type metadata for QuestionnairePolicy.AutoSendPolicy;
}

__n128 initializeWithTake for GuidanceMessagesModel.BitsForStats(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ExplorerGuidanceState.SettledLocation(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  BOOL v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFF && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 255);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = v3 >= 2;
  v5 = v3 - 2;
  if (!v4)
    v5 = -1;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ExplorerGuidanceState.SettledLocation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 255;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xFF)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = a2 + 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExplorerGuidanceState.SettledLocation()
{
  return &type metadata for ExplorerGuidanceState.SettledLocation;
}

uint64_t destroy for ExplorerGuidanceState(_QWORD *a1)
{
  swift_bridgeObjectRelease(a1[1]);
  swift_bridgeObjectRelease(a1[4]);
  swift_bridgeObjectRelease(a1[6]);
  return swift_bridgeObjectRelease(a1[8]);
}

uint64_t initializeWithCopy for ExplorerGuidanceState(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_WORD *)(a1 + 17) = *(_WORD *)(a2 + 17);
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v5;
  v6 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t assignWithCopy for ExplorerGuidanceState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  v8 = *(_QWORD *)(a2 + 48);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  v10 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  v12 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = v12;
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  v13 = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = v13;
  return a1;
}

uint64_t assignWithTake for ExplorerGuidanceState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  *(_BYTE *)(a1 + 18) = *(_BYTE *)(a2 + 18);
  v5 = *(_QWORD *)(a2 + 32);
  v6 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  v7 = *(_QWORD *)(a2 + 48);
  v8 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v7;
  swift_bridgeObjectRelease(v8);
  v9 = *(_QWORD *)(a2 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v9;
  swift_bridgeObjectRelease(v10);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExplorerGuidanceState(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 105))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ExplorerGuidanceState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 104) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 105) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 105) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for ExplorerGuidanceState()
{
  return &type metadata for ExplorerGuidanceState;
}

uint64_t sub_10007CC34(uint64_t a1, uint64_t a2)
{
  if (*(double *)a1 == *(double *)a2 && *(double *)(a1 + 8) == *(double *)(a2 + 8))
    return (*(unsigned __int8 *)(a2 + 16) ^ *(unsigned __int8 *)(a1 + 16) ^ 1) & 1;
  else
    return 0;
}

uint64_t sub_10007CC68(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD v10[5];
  _OWORD v11[2];
  _OWORD v12[5];
  _BYTE v13[25];

  v2 = a1[5];
  v10[4] = a1[4];
  v11[0] = v2;
  *(_OWORD *)((char *)v11 + 9) = *(_OWORD *)((char *)a1 + 89);
  v3 = a1[1];
  v10[0] = *a1;
  v10[1] = v3;
  v4 = a1[3];
  v10[2] = a1[2];
  v10[3] = v4;
  v5 = a2[1];
  v12[0] = *a2;
  v12[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  *(_OWORD *)&v13[9] = *(_OWORD *)((char *)a2 + 89);
  v8 = a2[5];
  v12[4] = a2[4];
  *(_OWORD *)v13 = v8;
  v12[2] = v6;
  v12[3] = v7;
  return sub_10007CD20((unsigned __int8 *)v10, (unsigned __int8 *)v12) & 1;
}

double sub_10007CCD0()
{
  double result;

  byte_10033FC60 = 0;
  qword_10033FC68 = (uint64_t)&_swiftEmptySetSingleton;
  word_10033FC70 = 9;
  byte_10033FC72 = 2;
  result = 0.0;
  *(_OWORD *)&qword_10033FC78 = 0u;
  *(__int128 *)((char *)&xmmword_10033FC80 + 8) = 0u;
  unk_10033FC98 = 0u;
  *((_QWORD *)&xmmword_10033FCA0 + 1) = 0;
  word_10033FCB0 = 1;
  qword_10033FCB8 = 0;
  unk_10033FCC0 = 0;
  byte_10033FCC8 = 2;
  return result;
}

uint64_t sub_10007CD20(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t result;
  int v5;
  int v6;
  int v7;
  int v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  int v22;
  int v23;

  if (((*a1 ^ *a2) & 1) != 0)
    return 0;
  result = sub_1001BF5E8(*((_QWORD *)a1 + 1), *((_QWORD *)a2 + 1));
  if ((result & 1) == 0)
    return 0;
  v5 = a1[16];
  v6 = a2[16];
  if (v5 == 9)
  {
    if (v6 != 9)
      return 0;
  }
  else
  {
    result = 0;
    if (v6 == 9 || v5 != v6)
      return result;
  }
  if (((a1[17] ^ a2[17]) & 1) != 0)
    return 0;
  v7 = a1[18];
  v8 = a2[18];
  if (v7 == 2)
  {
    if (v8 != 2)
      return 0;
  }
  else
  {
    result = 0;
    v9 = (v7 & 1) == 0;
    if (v8 == 2 || ((v9 ^ v8) & 1) == 0)
      return result;
  }
  v10 = *((_QWORD *)a1 + 4);
  v11 = *((_QWORD *)a2 + 4);
  if (v10)
  {
    if (!v11)
      return 0;
    result = *((_QWORD *)a1 + 3);
    v12 = *((_QWORD *)a2 + 3);
    if (result != v12 || v10 != v11)
    {
      v13 = _stringCompareWithSmolCheck(_:_:expecting:)(result, v10, v12, v11, 0);
      result = 0;
      if ((v13 & 1) == 0)
        return result;
    }
  }
  else if (v11)
  {
    return 0;
  }
  v14 = *((_QWORD *)a1 + 6);
  v15 = *((_QWORD *)a2 + 6);
  if (v14)
  {
    if (!v15)
      return 0;
    result = *((_QWORD *)a1 + 5);
    v16 = *((_QWORD *)a2 + 5);
    if (result != v16 || v14 != v15)
    {
      v17 = _stringCompareWithSmolCheck(_:_:expecting:)(result, v14, v16, v15, 0);
      result = 0;
      if ((v17 & 1) == 0)
        return result;
    }
  }
  else if (v15)
  {
    return 0;
  }
  v18 = *((_QWORD *)a1 + 8);
  v19 = *((_QWORD *)a2 + 8);
  if (!v18)
  {
    if (v19)
      return 0;
LABEL_37:
    if ((a1[80] & 1) != 0)
    {
      if (!a2[80])
        return 0;
    }
    else if ((a2[80] & 1) != 0
           || (static Angle.== infix(_:_:)(result, *((double *)a1 + 9), *((double *)a2 + 9)) & 1) == 0)
    {
      return 0;
    }
    if (((a1[81] ^ a2[81]) & 1) == 0)
    {
      v22 = a1[104];
      v23 = a2[104];
      if (v22 == 2)
      {
        if (v23 != 2)
          return 0;
      }
      else if (v23 == 2
             || *((double *)a1 + 11) != *((double *)a2 + 11)
             || *((double *)a1 + 12) != *((double *)a2 + 12)
             || ((v23 ^ v22) & 1) != 0)
      {
        return 0;
      }
      return 1;
    }
    return 0;
  }
  if (!v19)
    return 0;
  result = *((_QWORD *)a1 + 7);
  v20 = *((_QWORD *)a2 + 7);
  if (result == v20 && v18 == v19)
    goto LABEL_37;
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)(result, v18, v20, v19, 0);
  result = 0;
  if ((v21 & 1) != 0)
    goto LABEL_37;
  return result;
}

uint64_t storeEnumTagSinglePayload for ExplorerGuidanceState.LocationAccuracy(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_10007CF80 + 4 * byte_100251405[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10007CFB4 + 4 * asc_100251400[v4]))();
}

uint64_t sub_10007CFB4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007CFBC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10007CFC4);
  return result;
}

uint64_t sub_10007CFD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10007CFD8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_10007CFDC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10007CFE4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ExplorerGuidanceState.LocationAccuracy()
{
  return &type metadata for ExplorerGuidanceState.LocationAccuracy;
}

unint64_t sub_10007D004()
{
  unint64_t result;

  result = qword_10031B620;
  if (!qword_10031B620)
  {
    result = swift_getWitnessTable(&unk_1002514E4, &type metadata for ExplorerGuidanceState.LocationAccuracy);
    atomic_store(result, (unint64_t *)&qword_10031B620);
  }
  return result;
}

uint64_t destroy for SingleChoiceContentView(_QWORD *a1)
{
  swift_release(*a1);
  swift_release(a1[2]);
  swift_release(a1[3]);
  swift_release(a1[5]);
  return swift_release(a1[8]);
}

uint64_t initializeWithCopy for SingleChoiceContentView(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v9;

  v3 = *a2;
  v4 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a2[2];
  *(_QWORD *)(a1 + 16) = v5;
  v6 = a2[5];
  v9 = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 48) = *((_OWORD *)a2 + 3);
  v7 = a2[8];
  *(_QWORD *)(a1 + 64) = v7;
  swift_retain(v3);
  swift_retain(v5);
  swift_retain(v9);
  swift_retain(v6);
  swift_retain(v7);
  return a1;
}

uint64_t *assignWithCopy for SingleChoiceContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = *a1;
  v5 = *a2;
  *a1 = *a2;
  swift_retain(v5);
  swift_release(v4);
  a1[1] = a2[1];
  v6 = a2[2];
  v7 = a1[2];
  a1[2] = v6;
  swift_retain(v6);
  swift_release(v7);
  v8 = a2[3];
  v9 = a1[3];
  a1[3] = v8;
  swift_retain(v8);
  swift_release(v9);
  v10 = a2[5];
  v11 = a1[5];
  a1[4] = a2[4];
  a1[5] = v10;
  swift_retain(v10);
  swift_release(v11);
  a1[6] = a2[6];
  a1[7] = a2[7];
  v12 = a1[8];
  v13 = a2[8];
  a1[8] = v13;
  swift_retain(v13);
  swift_release(v12);
  return a1;
}

uint64_t *assignWithTake for SingleChoiceContentView(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = *a1;
  *a1 = *a2;
  swift_release(v4);
  a1[1] = a2[1];
  swift_release(a1[2]);
  v5 = a1[3];
  *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
  swift_release(v5);
  v6 = a1[5];
  *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
  swift_release(v6);
  *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
  v7 = a1[8];
  a1[8] = a2[8];
  swift_release(v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for SingleChoiceContentView(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SingleChoiceContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SingleChoiceContentView()
{
  return &type metadata for SingleChoiceContentView;
}

uint64_t sub_10007D2F4(uint64_t a1)
{
  return swift_getOpaqueTypeConformance2(a1, &unk_100297C24, 1);
}

uint64_t sub_10007D304@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t KeyPath;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t (**v30)(uint64_t *);
  uint64_t v32;
  __int128 v33[2];
  uint64_t v34;

  v6 = sub_100003DB8(&qword_10031B630);
  __chkstk_darwin(v6, v7);
  v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1[3];
  v11 = a1[4];
  sub_100007BBC(a1, v10);
  v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 232))(v10, v11);
  v14 = v13;
  *(_QWORD *)v9 = static HorizontalAlignment.center.getter(v12);
  *((_QWORD *)v9 + 1) = v14;
  v9[16] = 0;
  sub_100003DB8(&qword_10031B638);
  v15 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 136);
  sub_10007E04C((uint64_t *)a2);
  swift_bridgeObjectRetain(v15);
  v17 = sub_10007DED8(v16, a2);
  sub_10007E0B0((uint64_t *)a2);
  swift_bridgeObjectRelease(v15);
  v34 = v17;
  KeyPath = swift_getKeyPath(&unk_100251580);
  sub_100007CBC((uint64_t)a1, (uint64_t)v33);
  v19 = swift_allocObject(&unk_1002EA5F0, 128, 7);
  v20 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v19 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v19 + 64) = v20;
  *(_QWORD *)(v19 + 80) = *(_QWORD *)(a2 + 64);
  v21 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v19 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v19 + 32) = v21;
  sub_100007D04(v33, v19 + 88);
  sub_10007E04C((uint64_t *)a2);
  v22 = sub_100003DB8(&qword_100318210);
  v23 = sub_100003DB8(&qword_10031B640);
  v24 = sub_1000084FC(&qword_100318220, &qword_100318210, (uint64_t)&protocol conformance descriptor for [A]);
  v25 = sub_100027688();
  v26 = sub_10007E16C();
  ForEach<>.init(_:id:content:)(&v34, KeyPath, sub_10007E160, v19, v22, v23, v24, v25, v26);
  v27 = swift_allocObject(&unk_1002EA618, 88, 7);
  v28 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v27 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v27 + 64) = v28;
  *(_QWORD *)(v27 + 80) = *(_QWORD *)(a2 + 64);
  v29 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v27 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v27 + 32) = v29;
  sub_10007E268((uint64_t)v9, a3);
  v30 = (uint64_t (**)(uint64_t *))(a3 + *(int *)(sub_100003DB8(&qword_10031B658) + 36));
  *v30 = sub_10007E260;
  v30[1] = (uint64_t (*)(uint64_t *))v27;
  sub_10007E04C((uint64_t *)a2);
  return sub_10007E2B0((uint64_t)v9);
}

__n128 sub_10007D564@<Q0>(_BYTE *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  double (*v24)(uint64_t, uint64_t);
  double v25;
  uint64_t v26;
  double v27;
  double v28;
  uint64_t v29;
  __n128 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __n128 result;
  _OWORD v42[8];
  char v43;
  char v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t (*v56)();
  uint64_t v57;
  char v58;
  uint64_t v59;
  char v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  char v64;
  __int128 v65;
  uint64_t v66;
  char v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  char v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  char v77;
  __int128 v78;
  __int128 v79;
  __n128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  char v87;

  if (a1[8] == 1)
  {
    v6 = *(_QWORD *)a1;
    v7 = *(_QWORD *)(*(_QWORD *)a1 + 32);
    v79 = *(_OWORD *)(a2 + 48);
    v80.n128_u64[0] = *(_QWORD *)(a2 + 64);
    sub_10002AB80(v6, 1);
    swift_retain(v7);
    v8 = sub_100003DB8(&qword_10031B660);
    State.wrappedValue.getter(&v51, v8);
    v9 = v51;
    v10 = v52;
    v11 = swift_allocObject(&unk_1002EA640, 96, 7);
    v12 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(v11 + 48) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v11 + 64) = v12;
    v13 = *(_QWORD *)(a2 + 64);
    v14 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(v11 + 16) = *(_OWORD *)a2;
    *(_OWORD *)(v11 + 32) = v14;
    *(_QWORD *)(v11 + 80) = v13;
    *(_QWORD *)(v11 + 88) = v6;
    sub_10002AB80(v6, 1);
    sub_10007E04C((uint64_t *)a2);
    v15 = type metadata accessor for UIMetrics();
    v16 = sub_10007DE90();
    v17 = EnvironmentObject.init()(v15, v16);
    v51 = v17;
    v52 = v18;
    v53 = v7;
    v54 = v9;
    v55 = v10;
    v56 = sub_10007E390;
    v57 = v11;
    sub_10007E3B8((uint64_t)&v51);
    sub_10007E2FC((uint64_t)&v51, (uint64_t)&v79);
    swift_retain(v17);
    swift_retain(v11);
    swift_retain(v7);
    v19 = sub_100003DB8(&qword_100318248);
    v20 = sub_10007E1D8();
    v21 = sub_10002777C();
    _ConditionalContent<>.init(storage:)(&v79, &type metadata for QuestionnaireButton, v19, v20, v21);
    sub_10002AB8C(v6, 1);
    swift_release(v11);
    swift_release(v7);
    swift_release(v17);
    v85 = v42[6];
    v86 = v42[7];
    v87 = v43;
    v81 = v42[2];
    v82 = v42[3];
    v83 = v42[4];
    v84 = v42[5];
    v79 = v42[0];
    v80 = (__n128)v42[1];
  }
  else
  {
    v22 = a3[3];
    v23 = a3[4];
    sub_100007BBC(a3, v22);
    v24 = *(double (**)(uint64_t, uint64_t))(v23 + 272);
    v25 = v24(v22, v23);
    v26 = ((uint64_t (*)(uint64_t, uint64_t))v24)(v22, v23);
    v28 = v27;
    v29 = static Alignment.center.getter(v26);
    v32 = v31;
    if (v25 > v28)
    {
      v33 = static os_log_type_t.fault.getter(v30);
      v34 = (void *)static Log.runtimeIssuesLog.getter();
      os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Contradictory frame constraints specified.", 42, 2, _swiftEmptyArrayStorage);

    }
    _FlexFrameLayout.init(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(&v66, 0, 1, 0, 1, 0, 1, *(_QWORD *)&v25, 0, 0, 1, *(_QWORD *)&v28, 0, v29, v32);
    v50 = 1;
    v49 = v67;
    v48 = v69;
    v47 = v71;
    v46 = v73;
    v45 = v75;
    v44 = v77;
    v51 = 0;
    LOBYTE(v52) = 1;
    v53 = v66;
    LOBYTE(v54) = v67;
    v55 = v68;
    LOBYTE(v56) = v69;
    v57 = v70;
    v58 = v71;
    v59 = v72;
    v60 = v73;
    v61 = v74;
    v62 = v75;
    v63 = v76;
    v64 = v77;
    v65 = v78;
    sub_10007E2F0((uint64_t)&v51);
    sub_10007E2FC((uint64_t)&v51, (uint64_t)v42);
    v35 = sub_100003DB8(&qword_100318248);
    v36 = sub_10007E1D8();
    v37 = sub_10002777C();
    _ConditionalContent<>.init(storage:)(v42, &type metadata for QuestionnaireButton, v35, v36, v37);
  }
  v38 = v86;
  *(_OWORD *)(a4 + 96) = v85;
  *(_OWORD *)(a4 + 112) = v38;
  *(_BYTE *)(a4 + 128) = v87;
  v39 = v82;
  *(_OWORD *)(a4 + 32) = v81;
  *(_OWORD *)(a4 + 48) = v39;
  v40 = v84;
  *(_OWORD *)(a4 + 64) = v83;
  *(_OWORD *)(a4 + 80) = v40;
  result = v80;
  *(_OWORD *)a4 = v79;
  *(__n128 *)(a4 + 16) = result;
  return result;
}

uint64_t sub_10007D938(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(_QWORD **)(v1 + 24);
  if ((sub_1000AE9AC(v3, a1, 0) & 1) == 0)
  {
    if (qword_1003158B0 != -1)
      swift_once(&qword_1003158B0, sub_1000D9854);
    v4 = type metadata accessor for Logger(0);
    sub_10000D744(v4, (uint64_t)qword_10033FEC8);
    sub_10007E04C((uint64_t *)v1);
    sub_10007E04C((uint64_t *)v1);
    sub_10007E04C((uint64_t *)v1);
    swift_retain(a1);
    sub_10007E04C((uint64_t *)v1);
    swift_retain(a1);
    v6 = Logger.logObject.getter(v5);
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = swift_slowAlloc(32, -1);
      v17 = swift_slowAlloc(96, -1);
      v19 = v17;
      *(_DWORD *)v8 = 136446723;
      v9 = sub_1000AD18C();
      v11 = v10;
      v18 = sub_100172BEC(v9, v10, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v8 + 4, v8 + 12);
      swift_bridgeObjectRelease(v11);
      sub_10007E0B0((uint64_t *)v1);
      sub_10007E0B0((uint64_t *)v1);
      *(_WORD *)(v8 + 12) = 2081;
      v13 = *(_QWORD *)(a1 + 16);
      v12 = *(_QWORD *)(a1 + 24);
      swift_bridgeObjectRetain(v12);
      v18 = sub_100172BEC(v13, v12, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v8 + 14, v8 + 22);
      swift_release_n(a1);
      swift_bridgeObjectRelease(v12);
      *(_WORD *)(v8 + 22) = 2081;
      v15 = v3[2];
      v14 = v3[3];
      swift_bridgeObjectRetain(v14);
      v18 = sub_100172BEC(v15, v14, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v8 + 24, v8 + 32);
      swift_bridgeObjectRelease(v14);
      sub_10007E0B0((uint64_t *)v1);
      sub_10007E0B0((uint64_t *)v1);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%{public}s] QuestionnaireBodyView: failed to record %{private}s answer for %{private}s", (uint8_t *)v8, 0x20u);
      swift_arrayDestroy(v17, 3, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1, -1);
      swift_slowDealloc(v8, -1, -1);
    }
    else
    {
      sub_10007E0B0((uint64_t *)v1);
      sub_10007E0B0((uint64_t *)v1);
      swift_release_n(a1);
      sub_10007E0B0((uint64_t *)v1);
      sub_10007E0B0((uint64_t *)v1);
    }

  }
  return (*(uint64_t (**)(void))(v1 + 32))();
}

uint64_t sub_10007DBF4(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18[2];
  __int128 v19;
  uint64_t v20;

  v3 = *a1;
  v4 = a1[1];
  if (qword_1003158D8 != -1)
    swift_once(&qword_1003158D8, sub_1000D9904);
  v5 = type metadata accessor for Logger(0);
  v6 = sub_10000D744(v5, (uint64_t)qword_10033FF40);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(12, -1);
    v10 = swift_slowAlloc(32, -1);
    v18[0] = v10;
    *(_DWORD *)v9 = 136446210;
    *(_QWORD *)&v19 = v3;
    *((_QWORD *)&v19 + 1) = v4;
    type metadata accessor for CGSize(0);
    v13 = String.init<A>(describing:)(&v19, v11, v12);
    v15 = v14;
    *(_QWORD *)&v19 = sub_100172BEC(v13, v14, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, (char *)&v19 + 8, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Button icon size requested: %{public}s", v9, 0xCu);
    swift_arrayDestroy(v10, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);
  }

  v19 = *(_OWORD *)(a2 + 48);
  v20 = *(_QWORD *)(a2 + 64);
  v18[0] = v3;
  v18[1] = v4;
  v16 = sub_100003DB8(&qword_10031B660);
  return State.wrappedValue.setter(v18, v16);
}

uint64_t sub_10007DDB8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;
  _QWORD v12[5];
  _OWORD v13[4];
  uint64_t v14;

  v3 = *(_OWORD *)(v1 + 16);
  v13[0] = *(_OWORD *)v1;
  v13[1] = v3;
  v4 = *(_OWORD *)(v1 + 48);
  v13[2] = *(_OWORD *)(v1 + 32);
  v13[3] = v4;
  v14 = *(_QWORD *)(v1 + 64);
  if (*(_QWORD *)&v13[0])
  {
    v5 = *(_QWORD *)(*(_QWORD *)&v13[0] + 72);
    v6 = *(_QWORD *)(*(_QWORD *)&v13[0] + 80);
    sub_100007BBC((_QWORD *)(*(_QWORD *)&v13[0] + 48), v5);
    v7 = (*(_QWORD *(**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v6 + 24))(v12, v5, v6);
    *(_QWORD *)a1 = static VerticalAlignment.center.getter(v7);
    *(_QWORD *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 16) = 1;
    v8 = sub_100003DB8(&qword_10031B628);
    sub_10007D304(v12, (uint64_t)v13, a1 + *(int *)(v8 + 44));
    return _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v12);
  }
  else
  {
    v10 = type metadata accessor for UIMetrics();
    v11 = sub_10007DE90();
    result = EnvironmentObject.error()(0, *((_QWORD *)&v13[0] + 1), v10, v11);
    __break(1u);
  }
  return result;
}

unint64_t sub_10007DE90()
{
  unint64_t result;
  uint64_t v1;

  result = qword_100316A00;
  if (!qword_100316A00)
  {
    v1 = type metadata accessor for UIMetrics();
    result = swift_getWitnessTable(&unk_10024D2FC, v1);
    atomic_store(result, (unint64_t *)&qword_100316A00);
  }
  return result;
}

uint64_t sub_10007DED8(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *i;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v4 = 0;
    v18 = result + 40;
    do
    {
      if (v4 <= v2)
        v5 = v2;
      else
        v5 = v4;
      v6 = -(uint64_t)v5;
      for (i = (unsigned __int8 *)(v18 + 16 * v4++); ; i += 16)
      {
        if (v6 + v4 == 1)
        {
          __break(1u);
          return result;
        }
        v8 = *((_QWORD *)i - 1);
        v9 = *i;
        if (v9 != 1)
          break;
        v10 = *(_QWORD *)(*(_QWORD *)(a2 + 24) + 152);
        if (!v10
          || ((result = *(_QWORD *)(v8 + 16),
               v11 = *(_QWORD *)(v8 + 24),
               v12 = *(_QWORD *)(v10 + 16),
               v13 = *(_QWORD *)(v10 + 24),
               result == v12)
            ? (v14 = v11 == v13)
            : (v14 = 0),
              !v14
           && (result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v11, v12, v13, 0), (result & 1) == 0)))
        {
          swift_retain(v8);
          break;
        }
        if (++v4 - v2 == 1)
          return (uint64_t)_swiftEmptyArrayStorage;
      }
      result = swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage);
      if ((result & 1) == 0)
        result = sub_10017E394(0, _swiftEmptyArrayStorage[2] + 1, 1);
      v16 = _swiftEmptyArrayStorage[2];
      v15 = _swiftEmptyArrayStorage[3];
      if (v16 >= v15 >> 1)
        result = sub_10017E394(v15 > 1, v16 + 1, 1);
      _swiftEmptyArrayStorage[2] = v16 + 1;
      v17 = &_swiftEmptyArrayStorage[2 * v16];
      v17[4] = v8;
      *((_BYTE *)v17 + 40) = v9;
    }
    while (v4 != v2);
  }
  return (uint64_t)_swiftEmptyArrayStorage;
}

uint64_t *sub_10007E04C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[5];
  swift_retain(a1[8]);
  swift_retain(v2);
  swift_retain(v3);
  swift_retain(v4);
  swift_retain(v5);
  return a1;
}

uint64_t *sub_10007E0B0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *a1;
  v3 = a1[2];
  v4 = a1[3];
  v5 = a1[8];
  swift_release(a1[5]);
  swift_release(v4);
  swift_release(v3);
  swift_release(v2);
  swift_release(v5);
  return a1;
}

uint64_t sub_10007E114()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  swift_release(v0[10]);
  _s8SOSBuddy36CallEmergencyServicesButtonLabelViewVwxx_0(v0 + 11);
  return swift_deallocObject(v0, 128, 7);
}

double sub_10007E160@<D0>(_BYTE *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  double result;

  *(_QWORD *)&result = sub_10007D564(a1, v2 + 16, (_QWORD *)(v2 + 88), a2).n128_u64[0];
  return result;
}

unint64_t sub_10007E16C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_10031B648;
  if (!qword_10031B648)
  {
    v1 = sub_100007FAC(&qword_10031B640);
    sub_10007E1D8();
    sub_10002777C();
    result = swift_getWitnessTable(&protocol conformance descriptor for <> _ConditionalContent<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_10031B648);
  }
  return result;
}

unint64_t sub_10007E1D8()
{
  unint64_t result;

  result = qword_10031B650;
  if (!qword_10031B650)
  {
    result = swift_getWitnessTable("ͮ\t", &type metadata for QuestionnaireButton);
    atomic_store(result, (unint64_t *)&qword_10031B650);
  }
  return result;
}

uint64_t sub_10007E21C()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  swift_release(v0[10]);
  return swift_deallocObject(v0, 88, 7);
}

uint64_t sub_10007E260(uint64_t *a1)
{
  uint64_t v1;

  return sub_10007DBF4(a1, v1 + 16);
}

uint64_t sub_10007E268(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031B630);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007E2B0(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_100003DB8(&qword_10031B630);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10007E2F0(uint64_t result)
{
  *(_BYTE *)(result + 128) = 1;
  return result;
}

uint64_t sub_10007E2FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_10031B668);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10007E344()
{
  _QWORD *v0;

  swift_release(v0[2]);
  swift_release(v0[4]);
  swift_release(v0[5]);
  swift_release(v0[7]);
  swift_release(v0[10]);
  swift_release(v0[11]);
  return swift_deallocObject(v0, 96, 7);
}

uint64_t sub_10007E390()
{
  uint64_t v0;

  return sub_10007D938(*(_QWORD *)(v0 + 88));
}

uint64_t sub_10007E3B8(uint64_t result)
{
  *(_BYTE *)(result + 128) = 0;
  return result;
}

uint64_t sub_10007E3C0()
{
  return sub_1000084FC(&qword_10031B670, &qword_10031B678, (uint64_t)&protocol conformance descriptor for HStack<A>);
}

_QWORD *sub_10007E3EC()
{
  uint64_t *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  __n128 v13;
  void *v14;
  __n128 v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  __n128 v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  __n128 v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __n128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  __n128 v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49[3];
  id v50;
  uint64_t v51;

  v1 = v0;
  v2 = *v0;
  v3 = sub_100003DB8(&qword_100329AF0);
  __chkstk_darwin(v3, v4);
  v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_100003DB8(&qword_10031B748);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7, v9);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = sub_100003DB8(&qword_10032B0E0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v13 = swift_retain(v0);
  v0[4] = PassthroughSubject.init()(v13);
  v0[5] = (uint64_t)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for StewieStateSource()), "init");
  v47 = v6;
  v48 = v11;
  if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
    && _CocoaArrayWrapper.endIndex.getter(_swiftEmptyArrayStorage))
  {
    sub_100209204((uint64_t)_swiftEmptyArrayStorage);
  }
  else
  {
    v14 = &_swiftEmptySetSingleton;
  }
  v0[6] = (uint64_t)v14;
  *(_OWORD *)(v0 + 7) = 0u;
  *(_OWORD *)(v0 + 9) = 0u;
  *(_OWORD *)(v0 + 11) = 0u;
  *(_OWORD *)(v0 + 13) = 0u;
  *((_WORD *)v0 + 60) = 0;
  swift_release(v0);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v0[2] = PassthroughSubject.init()(v15);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  v0[3] = PassthroughSubject.init()(v16);
  v17 = qword_100315820;
  swift_retain(v1);
  if (v17 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v18 = type metadata accessor for Logger(0);
  sub_10000D744(v18, (uint64_t)qword_10033FD18);
  v20 = swift_retain_n(v1, v19);
  v21 = Logger.logObject.getter(v20);
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = v2;
    v24 = (uint8_t *)swift_slowAlloc(12, -1);
    v25 = swift_slowAlloc(32, -1);
    v46 = v8;
    v26 = v25;
    v49[0] = v25;
    *(_DWORD *)v24 = 136446210;
    v50 = v1;
    v27 = swift_retain(v1);
    v28 = String.init<A>(describing:)(&v50, v23, v27);
    v30 = v29;
    v50 = (id)sub_100172BEC(v28, v29, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v24 + 4, v24 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v30);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "[%{public}s] init", v24, 0xCu);
    swift_arrayDestroy(v26, 1, (char *)&type metadata for Any + 8);
    v31 = v26;
    v8 = v46;
    swift_slowDealloc(v31, -1, -1);
    swift_slowDealloc(v24, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  v49[0] = *(_QWORD *)(v1[5] + OBJC_IVAR____TtC8SOSBuddy17StewieStateSource_stateDidChange);
  v32 = v49[0];
  v33 = sub_10000D75C();
  v34 = swift_retain(v32);
  v50 = (id)static OS_dispatch_queue.main.getter(v34);
  v35 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0);
  v36 = (uint64_t)v47;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v47, 1, 1, v35);
  v37 = sub_100003DB8(&qword_100317940);
  v38 = sub_1000084FC(&qword_10031B750, &qword_100317940, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v39 = sub_10002158C();
  v40 = v48;
  Publisher.receive<A>(on:options:)(&v50, v36, v37, v33, v38, v39);
  sub_1000215D4(v36);

  swift_release(v49[0]);
  v41 = sub_1000084FC(&qword_10031B758, &qword_10031B748, (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  v42 = swift_retain(v1);
  v43 = Publisher<>.sink(receiveValue:)(sub_10007F304, v1, v7, v41, v42);
  swift_release(v1);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v40, v7);
  swift_beginAccess(v1 + 6, v49, 33, 0);
  AnyCancellable.store(in:)(v1 + 6);
  swift_endAccess(v49);
  swift_release(v43);
  swift_release(v1);
  return v1;
}

uint64_t sub_10007E880(unsigned __int8 *a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  char v14;
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  __int16 v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  __int16 v60;
  _BYTE v61[72];
  _OWORD v62[4];
  __int16 v63;
  _BYTE v64[8];
  uint64_t v65;

  v3 = *((_OWORD *)a1 + 1);
  v4 = *((_OWORD *)a1 + 3);
  v62[2] = *((_OWORD *)a1 + 2);
  v62[3] = v4;
  v40 = *((_WORD *)a1 + 32);
  v63 = v40;
  v62[0] = *(_OWORD *)a1;
  v62[1] = v3;
  v39 = *a1;
  v37 = *((_QWORD *)a1 + 3);
  v38 = *((_QWORD *)a1 + 1);
  v5 = *((_QWORD *)a1 + 6);
  v35 = *((_QWORD *)a1 + 5);
  v36 = *((_QWORD *)a1 + 4);
  v6 = a1[16] | ((unint64_t)a1[17] << 8);
  v7 = *((_QWORD *)a1 + 7);
  sub_10007F30C(a2 + 56, (uint64_t)v61);
  v8 = *(_QWORD *)(a2 + 56);
  v9 = *(_QWORD *)(a2 + 64);
  v11 = *(_QWORD *)(a2 + 72);
  v10 = *(_QWORD *)(a2 + 80);
  v12 = *(_QWORD *)(a2 + 88);
  v32 = *(_QWORD *)(a2 + 96);
  v33 = *(_QWORD *)(a2 + 104);
  v34 = *(_QWORD *)(a2 + 112);
  v13 = *(_WORD *)(a2 + 120);
  sub_10007F30C((uint64_t)v61, (uint64_t)v64);
  v42 = v5;
  v41 = v6;
  if (!v65)
  {
    v43 = v8;
    v44 = v9;
    v45 = v11;
    v46 = v10;
    v47 = v12;
    v48 = v32;
    v20 = v35;
    v49 = v33;
    v50 = v34;
    v51 = v13;
    v17 = v38;
    v16 = v39;
    v52 = v39;
    v53 = v38;
    v18 = v37;
    v54 = v6;
    v55 = v37;
    v19 = v36;
    v56 = v36;
    v57 = v35;
    v58 = v5;
    v59 = v7;
    v15 = v40;
    v60 = v40;
    sub_10007F354(v62);
    sub_10007F354(v62);
    sub_10007F3C0(&v43);
    goto LABEL_5;
  }
  LOBYTE(v43) = v8;
  v44 = v9;
  LOWORD(v45) = v11 & 0xFF01;
  v46 = v10;
  v47 = v12;
  v48 = v32;
  v49 = v33;
  v50 = v34;
  v51 = v13;
  v14 = sub_10001AC88((uint64_t)&v43, (uint64_t)v62);
  sub_10007F354(v62);
  v15 = v40;
  v17 = v38;
  v16 = v39;
  v19 = v36;
  v18 = v37;
  v20 = v35;
  if ((v14 & 1) == 0)
  {
LABEL_5:
    sub_10007F4D4((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007F464);
    v21 = sub_100003DB8(&qword_10032B0E0);
    v22 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v21, v22);
    goto LABEL_6;
  }
  sub_10007F4D4((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007F464);
LABEL_6:
  v23 = *(_QWORD *)(a2 + 56);
  v24 = *(_QWORD *)(a2 + 64);
  v25 = *(_QWORD *)(a2 + 72);
  v26 = *(_QWORD *)(a2 + 80);
  v27 = *(_QWORD *)(a2 + 88);
  v28 = *(_QWORD *)(a2 + 96);
  v29 = *(_QWORD *)(a2 + 104);
  v30 = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 56) = v16;
  *(_QWORD *)(a2 + 64) = v17;
  *(_QWORD *)(a2 + 72) = v41;
  *(_QWORD *)(a2 + 80) = v18;
  *(_QWORD *)(a2 + 88) = v19;
  *(_QWORD *)(a2 + 96) = v20;
  *(_QWORD *)(a2 + 104) = v42;
  *(_QWORD *)(a2 + 112) = v7;
  *(_WORD *)(a2 + 120) = v15;
  sub_10007ED6C(v23, v24, v25, v26, v27, v28, v29, v30);
  sub_10007EDDC((uint64_t)v61);
  return sub_10007F4D4((uint64_t)v61, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007ED6C);
}

uint64_t sub_10007EAE4()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));

  swift_bridgeObjectRelease(*(_QWORD *)(v0 + 48));
  return sub_10007ED6C(*(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80), *(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
}

_QWORD *sub_10007EB30()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  __n128 v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;

  v1 = v0;
  v2 = *v0;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v3 = type metadata accessor for Logger(0);
  sub_10000D744(v3, (uint64_t)qword_10033FD18);
  v5 = swift_retain_n(v0, v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(12, -1);
    v9 = swift_slowAlloc(32, -1);
    v15 = (uint64_t)v1;
    v16 = v9;
    *(_DWORD *)v8 = 136446210;
    v10 = swift_retain(v1);
    v11 = String.init<A>(describing:)(&v15, v2, v10);
    v13 = v12;
    v15 = sub_100172BEC(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v8 + 4, v8 + 12);
    swift_release_n(v1);
    swift_bridgeObjectRelease(v13);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[%{public}s] deinit", v8, 0xCu);
    swift_arrayDestroy(v9, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1, -1);
    swift_slowDealloc(v8, -1, -1);

  }
  else
  {

    swift_release_n(v1);
  }
  swift_release(v1[2]);
  swift_release(v1[3]);
  swift_release(v1[4]);

  swift_bridgeObjectRelease(v1[6]);
  sub_10007ED6C(v1[7], v1[8], v1[9], v1[10], v1[11], v1[12], v1[13], v1[14]);
  return v1;
}

uint64_t sub_10007ED2C()
{
  uint64_t v0;

  sub_10007EB30();
  return swift_deallocClassInstance(v0, 122, 7);
}

uint64_t type metadata accessor for StewieStateModel()
{
  return objc_opt_self(_TtC8SOSBuddy16StewieStateModel);
}

uint64_t sub_10007ED6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a5);
    swift_bridgeObjectRelease(a6);
    swift_bridgeObjectRelease(a7);
    return swift_bridgeObjectRelease(a8);
  }
  return result;
}

double sub_10007EDDC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  double result;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __n128 v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int16 v31;
  __n128 v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  __int16 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  __int16 v70;
  _QWORD v71[8];
  __int16 v72;
  uint64_t v73;
  _QWORD v74[3];
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  __int16 v79;
  char v80[8];
  uint64_t v81;
  char v82[8];
  uint64_t v83;
  __int16 v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  __int16 v90;

  v2 = v1;
  sub_10007F30C(a1, (uint64_t)v71);
  v4 = v71[2];
  v41 = v71[0];
  v42 = v71[1];
  v43 = v71[3];
  v44 = v71[4];
  v45 = v71[5];
  v46 = v71[6];
  v5 = v72;
  v7 = *(_QWORD *)(v2 + 56);
  v6 = *(_QWORD *)(v2 + 64);
  v9 = *(_QWORD *)(v2 + 72);
  v8 = *(_QWORD *)(v2 + 80);
  v10 = *(_QWORD *)(v2 + 88);
  v47 = v71[7];
  v48 = *(_QWORD *)(v2 + 96);
  v49 = *(_QWORD *)(v2 + 104);
  v50 = *(_QWORD *)(v2 + 112);
  v11 = *(_WORD *)(v2 + 120);
  v51 = a1;
  if (!v6)
  {
    sub_10007F30C(a1, (uint64_t)v82);
    if (!v83)
      return result;
    goto LABEL_6;
  }
  sub_10007F30C(a1, (uint64_t)v80);
  if (!v81)
  {
LABEL_6:
    v53 = v7;
    v54 = v6;
    v55 = v9;
    v56 = v8;
    v57 = v10;
    v58 = v48;
    v59 = v49;
    v60 = v50;
    v61 = v11;
    v62 = v41;
    v63 = v42;
    v64 = v4;
    v65 = v43;
    v66 = v44;
    v67 = v45;
    v68 = v46;
    v69 = v47;
    v70 = v5;
    sub_10007F464(v7, v6, v9, v8, v10, v48, v49, v50);
    sub_10007F4D4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007F464);
    sub_10007F3C0(&v53);
    goto LABEL_7;
  }
  LOBYTE(v53) = v41;
  v54 = v42;
  LOWORD(v55) = v4 & 0xFF01;
  v56 = v43;
  v57 = v44;
  v58 = v45;
  v59 = v46;
  v60 = v47;
  v61 = v5;
  v82[0] = v7;
  v83 = v6;
  v84 = v9 & 0xFF01;
  v85 = v8;
  v86 = v10;
  v87 = v48;
  v88 = v49;
  v89 = v50;
  v90 = v11;
  if ((sub_10001AC88((uint64_t)v82, (uint64_t)&v53) & 1) != 0)
    return result;
LABEL_7:
  if (qword_1003158C8 != -1)
    swift_once(&qword_1003158C8, sub_1000D98C4);
  v13 = type metadata accessor for Logger(0);
  sub_10000D744(v13, (uint64_t)qword_10033FF10);
  sub_10007F4D4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007F464);
  swift_retain(v2);
  sub_10007F4D4(a1, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007F464);
  swift_retain(v2);
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc(22, -1);
    v18 = swift_slowAlloc(64, -1);
    v52 = v18;
    *(_DWORD *)v17 = 136446466;
    sub_10007F30C(v51, (uint64_t)&v73);
    sub_10007F4D4(v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007F464);
    v19 = sub_100003DB8(&qword_100319FD8);
    v21 = String.init<A>(describing:)(&v73, v19, v20);
    v23 = v22;
    v73 = sub_100172BEC(v21, v22, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease(v23);
    sub_10007F4D4(v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007ED6C);
    sub_10007F4D4(v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007ED6C);
    *(_WORD *)(v17 + 12) = 2082;
    v24 = *(_QWORD *)(v2 + 64);
    v25 = *(_QWORD *)(v2 + 72);
    v26 = *(_QWORD *)(v2 + 80);
    v27 = *(_QWORD *)(v2 + 88);
    v28 = *(_QWORD *)(v2 + 96);
    v29 = *(_QWORD *)(v2 + 104);
    v30 = *(_QWORD *)(v2 + 112);
    v31 = *(_WORD *)(v2 + 120);
    v73 = *(_QWORD *)(v2 + 56);
    v74[0] = v24;
    v74[1] = v25;
    v74[2] = v26;
    v75 = v27;
    v76 = v28;
    v77 = v29;
    v78 = v30;
    v79 = v31;
    sub_10007F464(v73, v24, v25, v26, v27, v28, v29, v30);
    v33 = String.init<A>(describing:)(&v73, v19, v32);
    v35 = v34;
    v73 = sub_100172BEC(v33, v34, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, v74, v17 + 14, v17 + 22);
    swift_release_n(v2);
    swift_bridgeObjectRelease(v35);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "state changed from: %{public}s to: %{public}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy(v18, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {
    sub_10007F4D4(v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007ED6C);
    sub_10007F4D4(v51, (void (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))sub_10007ED6C);

    swift_release_n(v2);
  }
  v36 = sub_100003DB8(&qword_10032B0E0);
  v37 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  Subject<>.send()(v36, v37);
  if (*(_QWORD *)(v2 + 64))
  {
    v38 = *(_QWORD *)(v2 + 88);
    swift_bridgeObjectRetain(v38);
  }
  else
  {
    v38 = 0;
  }
  sub_10007F30C(v51, (uint64_t)&v73);
  if (!v74[0])
  {
    if (!v38)
      return result;
    goto LABEL_21;
  }
  v39 = v75;
  *(_QWORD *)&result = swift_bridgeObjectRetain(v75).n128_u64[0];
  if (!v38)
  {
    if (!v39)
      return result;
    goto LABEL_23;
  }
  if (!v39)
  {
LABEL_21:
    v39 = v38;
LABEL_23:
    swift_bridgeObjectRelease(v39);
    goto LABEL_24;
  }
  v40 = sub_1001BF5E8(v38, v39);
  swift_bridgeObjectRelease(v38);
  *(_QWORD *)&result = swift_bridgeObjectRelease(v39).n128_u64[0];
  if ((v40 & 1) == 0)
LABEL_24:
    *(_QWORD *)&result = Subject<>.send()(v36, v37).n128_u64[0];
  return result;
}

uint64_t sub_10007F304(unsigned __int8 *a1)
{
  uint64_t v1;

  return sub_10007E880(a1, v1);
}

uint64_t sub_10007F30C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_100003DB8(&qword_100319FD8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_QWORD *sub_10007F354(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = a1[3];
  v3 = a1[4];
  v4 = a1[5];
  v5 = a1[6];
  v6 = a1[7];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

uint64_t *sub_10007F3C0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = a1[9];
  v3 = a1[10];
  v4 = a1[11];
  v5 = a1[12];
  v6 = a1[13];
  v7 = a1[14];
  v8 = a1[15];
  v9 = a1[16];
  sub_10007ED6C(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
  sub_10007ED6C(v2, v3, v4, v5, v6, v7, v8, v9);
  return a1;
}

uint64_t sub_10007F464(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result;

  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRetain(a5);
    swift_bridgeObjectRetain(a6);
    swift_bridgeObjectRetain(a7);
    return swift_bridgeObjectRetain(a8);
  }
  return result;
}

uint64_t sub_10007F4D4(uint64_t a1, void (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, __int16))
{
  __int16 v4;

  v4 = *(_WORD *)(a1 + 64);
  a2(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), v4);
  return a1;
}

BOOL sub_10007F520(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2 | a2[1] ^ a1[1]) & 1) == 0;
}

id sub_10007F548()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  objc_super v21;

  v1 = OBJC_IVAR____TtC8SOSBuddy14StatusBarAgent__publisher;
  v2 = objc_allocWithZone((Class)STStewieStatusDomainPublisher);
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, "init");
  *(_WORD *)&v3[OBJC_IVAR____TtC8SOSBuddy14StatusBarAgent__lastReportedState] = 2;

  v21.receiver = v3;
  v21.super_class = (Class)type metadata accessor for StatusBarAgent();
  v4 = objc_msgSendSuper2(&v21, "init");
  v5 = qword_100315820;
  v6 = v4;
  if (v5 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v7 = type metadata accessor for Logger(0);
  sub_10000D744(v7, (uint64_t)qword_10033FD18);
  v8 = v6;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    v20 = v12;
    *(_DWORD *)v11 = 136446210;
    v13 = v8;
    v14 = objc_msgSend(v13, "description");
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v14);
    v17 = v16;

    v19 = sub_100172BEC(v15, v17, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v11 + 4, v11 + 12);

    swift_bridgeObjectRelease(v17);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "[%{public}s] init", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

  }
  else
  {

  }
  return v8;
}

id sub_10007F7A4()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  objc_class *v12;
  uint64_t v14;
  uint64_t v15;
  objc_super v16;

  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FD18);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v15 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v14 = sub_100172BEC(v9, v11, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] deinit", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v12 = (objc_class *)type metadata accessor for StatusBarAgent();
  v16.receiver = v2;
  v16.super_class = v12;
  return objc_msgSendSuper2(&v16, "dealloc");
}

uint64_t type metadata accessor for StatusBarAgent()
{
  return objc_opt_self(_TtC8SOSBuddy14StatusBarAgent);
}

uint64_t sub_10007F9E0(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  __n128 v11;
  char v12;
  uint64_t v13;
  char *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  char *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t aBlock[5];
  uint64_t v35;

  v3 = v2;
  v6 = type metadata accessor for DispatchPredicate(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6, v8);
  v10 = (uint8_t **)((char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v10 = static OS_dispatch_queue.main.getter(v11);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v6);
  v12 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v10, v6);
  if ((v12 & 1) != 0)
  {
    if (qword_100315820 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315820, sub_1000D95E4);
LABEL_3:
  v13 = type metadata accessor for Logger(0);
  sub_10000D744(v13, (uint64_t)qword_10033FD18);
  v14 = v3;
  v15 = Logger.logObject.getter(v14);
  v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc(12, -1);
    v31 = swift_slowAlloc(32, -1);
    v32 = a2;
    aBlock[0] = v31;
    *(_DWORD *)v17 = 136446210;
    v30 = v17 + 4;
    v18 = v14;
    v19 = a1;
    v20 = objc_msgSend(v18, "description");
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
    v23 = v22;

    a1 = v19;
    v33 = sub_100172BEC(v21, v23, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, aBlock, v30, v17 + 12);

    swift_bridgeObjectRelease(v23);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "[%{public}s] start", v17, 0xCu);
    v24 = v31;
    swift_arrayDestroy(v31, 1, (char *)&type metadata for Any + 8);
    a2 = v32;
    swift_slowDealloc(v24, -1, -1);
    swift_slowDealloc(v17, -1, -1);

  }
  else
  {

  }
  v25 = *(void **)&v14[OBJC_IVAR____TtC8SOSBuddy14StatusBarAgent__publisher];
  v26 = swift_allocObject(&unk_1002EA7A8, 32, 7);
  *(_QWORD *)(v26 + 16) = a1;
  *(_QWORD *)(v26 + 24) = a2;
  aBlock[4] = (uint64_t)sub_100080594;
  v35 = v26;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_100076C24;
  aBlock[3] = (uint64_t)&unk_1002EA7C0;
  v27 = _Block_copy(aBlock);
  v28 = v35;
  swift_retain(a2);
  swift_release(v28);
  objc_msgSend(v25, "handleUserInteractionsWithBlock:", v27);
  _Block_release(v27);
  sub_100080038(0);
  return 1;
}

uint64_t sub_10007FCFC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  if (qword_1003158C0 != -1)
    swift_once(&qword_1003158C0, sub_1000D98A0);
  v3 = type metadata accessor for Logger(0);
  v4 = sub_10000D744(v3, (uint64_t)qword_10033FEF8);
  v5 = Logger.logObject.getter(v4);
  v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Status pill tapped", v7, 2u);
    swift_slowDealloc(v7, -1, -1);
  }

  return a2();
}

void sub_10007FDE0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  __n128 v7;
  char v8;
  uint64_t v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  id v15;
  id v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  v2 = type metadata accessor for DispatchPredicate(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2, v4);
  v6 = (uint64_t *)((char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10000D75C();
  *v6 = static OS_dispatch_queue.main.getter(v7);
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v2);
  v8 = _dispatchPreconditionTest(_:)(v6);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v6, v2);
  if ((v8 & 1) != 0)
  {
    if (qword_100315820 == -1)
      goto LABEL_3;
  }
  else
  {
    __break(1u);
  }
  swift_once(&qword_100315820, sub_1000D95E4);
LABEL_3:
  v9 = type metadata accessor for Logger(0);
  sub_10000D744(v9, (uint64_t)qword_10033FD18);
  v10 = v1;
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc(12, -1);
    v14 = swift_slowAlloc(32, -1);
    v21 = v14;
    *(_DWORD *)v13 = 136446210;
    v15 = v10;
    v16 = objc_msgSend(v15, "description");
    v17 = static String._unconditionallyBridgeFromObjectiveC(_:)(v16);
    v19 = v18;

    v20 = sub_100172BEC(v17, v19, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v13 + 4, v13 + 12);

    swift_bridgeObjectRelease(v19);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "[%{public}s] stop", v13, 0xCu);
    swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1, -1);
    swift_slowDealloc(v13, -1, -1);

  }
  else
  {

  }
}

uint64_t sub_100080038(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint8_t *v4;
  unsigned int v5;
  uint64_t v6;
  __int16 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  __n128 v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t aBlock[5];
  uint64_t v29;

  v2 = v1;
  v3 = result;
  LODWORD(v4) = result & 1;
  v5 = result & 0x100;
  v6 = OBJC_IVAR____TtC8SOSBuddy14StatusBarAgent__lastReportedState;
  v7 = *(_WORD *)(v1 + OBJC_IVAR____TtC8SOSBuddy14StatusBarAgent__lastReportedState);
  if (v7 == 2
    || (v8 = (v7 & 1) == 0, v9 = (v7 & 0x100) == 0, ((_DWORD)v4 != 0) == v8)
    || (((v5 != 0) ^ v9) & 1) == 0)
  {
    if (qword_1003158C0 != -1)
      swift_once(&qword_1003158C0, sub_1000D98A0);
    v10 = type metadata accessor for Logger(0);
    v11 = sub_10000D744(v10, (uint64_t)qword_10033FEF8);
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v26 = (char)v4;
      v4 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v15.n128_u64[0] = 136446210;
      *(_DWORD *)v4 = 136446210;
      aBlock[0] = v14;
      LOBYTE(v27) = v26;
      v16 = v5 >> 8;
      BYTE1(v27) = BYTE1(v5);
      v17 = String.init<A>(describing:)(&v27, &type metadata for StatusBarAgent.State, v15);
      v19 = v18;
      v27 = sub_100172BEC(v17, v18, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, aBlock, v4 + 4, v4 + 12);
      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Updating state: %{public}s", v4, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      v20 = v4;
      LOBYTE(v4) = v26;
      swift_slowDealloc(v20, -1, -1);

    }
    else
    {

      v16 = v5 >> 8;
    }
    v21 = *(void **)(v2 + OBJC_IVAR____TtC8SOSBuddy14StatusBarAgent__publisher);
    v22 = swift_allocObject(&unk_1002EA730, 18, 7);
    *(_BYTE *)(v22 + 16) = (_BYTE)v4;
    *(_BYTE *)(v22 + 17) = v16;
    v23 = swift_allocObject(&unk_1002EA758, 32, 7);
    *(_QWORD *)(v23 + 16) = sub_100080508;
    *(_QWORD *)(v23 + 24) = v22;
    aBlock[4] = (uint64_t)sub_10002BF7C;
    v29 = v23;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000804C4;
    aBlock[3] = (uint64_t)&unk_1002EA770;
    v24 = _Block_copy(aBlock);
    v25 = v29;
    swift_retain(v23);
    swift_release(v25);
    objc_msgSend(v21, "updateVolatileDataWithBlock:", v24);
    _Block_release(v24);
    LOBYTE(v21) = swift_isEscapingClosureAtFileLocation(v23, "", 83, 70, 39, 1);
    result = swift_release(v23);
    if ((v21 & 1) != 0)
    {
      __break(1u);
    }
    else
    {
      *(_WORD *)(v2 + v6) = v3 & 0x101;
      return swift_release(v22);
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for CoreTelephonySPIAgent.SelectRoadsideProviderResponse(unsigned __int16 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 65281 <= 0xFFFEFFFF)
    v2 = 2;
  else
    v2 = 4;
  if (a2 + 65281 < 0xFF0000)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 16)) - 65281;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = a1[1];
      if (!a1[1])
        goto LABEL_17;
      return (*a1 | (v4 << 16)) - 65281;
    }
    v4 = *((unsigned __int8 *)a1 + 2);
    if (*((_BYTE *)a1 + 2))
      return (*a1 | (v4 << 16)) - 65281;
  }
LABEL_17:
  v6 = *(unsigned __int8 *)a1;
  v7 = v6 >= 2;
  v8 = (v6 + 2147483646) & 0x7FFFFFFF;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for StatusBarAgent.State(_WORD *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 65281 <= 0xFFFEFFFF)
    v3 = 2;
  else
    v3 = 4;
  if (a3 + 65281 < 0xFF0000)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_100080444 + 4 * byte_1002515D9[v4]))();
  *a1 = a2 - 255;
  return ((uint64_t (*)(void))((char *)sub_100080478 + 4 * asc_1002515D4[v4]))();
}

uint64_t sub_100080478(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 2) = v1;
  return result;
}

uint64_t sub_100080480(uint64_t result, int a2)
{
  *(_WORD *)(result + 2) = 0;
  if (a2)
    JUMPOUT(0x100080488);
  return result;
}

uint64_t sub_100080494(uint64_t result, int a2)
{
  *(_DWORD *)(result + 2) = 0;
  if (!a2)
    JUMPOUT(0x10008049CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1000804A0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 2) = v1;
  return result;
}

uint64_t sub_1000804A8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 2) = v1;
  return result;
}

ValueMetadata *type metadata accessor for StatusBarAgent.State()
{
  return &type metadata for StatusBarAgent.State;
}

void sub_1000804C4(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

uint64_t sub_1000804F8()
{
  uint64_t v0;

  return swift_deallocObject(v0, 18, 7);
}

id sub_100080508(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned __int8 *)(v1 + 16);
  v4 = *(unsigned __int8 *)(v1 + 17);
  objc_msgSend(a1, "setStewieActive:", v3);
  return objc_msgSend(a1, "setStewieConnected:", v4);
}

uint64_t sub_100080548()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100080558(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100080568(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100080570()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100080594(uint64_t a1)
{
  uint64_t v1;

  return sub_10007FCFC(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1000805A4()
{
  return swift_weakInit(&unk_10031B798, 0);
}

uint64_t sub_1000805B4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  __n128 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t MetatypeMetadata;
  __n128 v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __n128 v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = v1;
  if (qword_100315820 != -1)
    swift_once(&qword_100315820, sub_1000D95E4);
  v4 = type metadata accessor for Logger(0);
  sub_10000D744(v4, (uint64_t)qword_10033FD18);
  v6 = swift_retain_n(a1, 2, v5);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = swift_slowAlloc(22, -1);
    v10 = swift_slowAlloc(64, -1);
    v22 = v10;
    v23 = v2;
    *(_DWORD *)v9 = 136315394;
    MetatypeMetadata = swift_getMetatypeMetadata(v2);
    v13 = String.init<A>(describing:)(&v23, MetatypeMetadata, v12);
    v15 = v14;
    v23 = sub_100172BEC(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease(v15);
    *(_WORD *)(v9 + 12) = 2080;
    v23 = a1;
    swift_retain(a1);
    v16 = sub_100003DB8(&qword_10031B848);
    v18 = String.init<A>(describing:)(&v23, v16, v17);
    v20 = v19;
    v23 = sub_100172BEC(v18, v19, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, &v24, v9 + 14, v9 + 22);
    swift_release_n(a1, 2);
    swift_bridgeObjectRelease(v20);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "[%s] env = [%s]", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy(v10, 2, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1, -1);
    swift_slowDealloc(v9, -1, -1);

  }
  else
  {

    swift_release_n(a1, 2);
  }
  if (qword_100315798 != -1)
    swift_once(&qword_100315798, sub_1000805A4);
  return swift_weakAssign(&unk_10031B798, a1);
}

NSObject *sub_1000807F0()
{
  char *v0;
  uint64_t v1;
  id v2;
  char *v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  NSObject **v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v16;
  objc_super v17;

  v1 = OBJC_IVAR____TtC8SOSBuddy24LockScreenViewController_tapGesture;
  v2 = objc_allocWithZone((Class)UITapGestureRecognizer);
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, "init");
  *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy24LockScreenViewController_contentView] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy24LockScreenViewController_cornerRadius] = 0x4030000000000000;
  *(_QWORD *)&v3[OBJC_IVAR____TtC8SOSBuddy24LockScreenViewController_contentPreferences] = 0;

  v17.receiver = v3;
  v17.super_class = (Class)type metadata accessor for LockScreenViewController();
  v4 = objc_msgSendSuper2(&v17, "initWithNibName:bundle:", 0, 0);
  v5 = qword_100315888;
  v6 = v4;
  if (v5 != -1)
    swift_once(&qword_100315888, sub_1000D97B0);
  v7 = type metadata accessor for Logger(0);
  sub_10000D744(v7, (uint64_t)qword_10033FE50);
  v8 = v6;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138543362;
    v16 = v8;
    v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v11 + 4, v11 + 12);
    *v12 = v8;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, "init: '%{public}@'", v11, 0xCu);
    v14 = sub_100003DB8(&qword_1003178F0);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {

    v9 = v8;
  }

  sub_1000822E8();
  return v8;
}

id sub_100080A58()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  id v7;
  uint64_t v8;
  objc_class *v9;
  id v11;
  objc_super v12;

  if (qword_100315888 != -1)
    swift_once(&qword_100315888, sub_1000D97B0);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FE50);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (_QWORD *)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    v11 = v2;
    v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v11, &v12, v5 + 4, v5 + 12);
    *v6 = v2;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "deinit: '%{public}@'", v5, 0xCu);
    v8 = sub_100003DB8(&qword_1003178F0);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  v9 = (objc_class *)type metadata accessor for LockScreenViewController();
  v12.receiver = v2;
  v12.super_class = v9;
  return objc_msgSendSuper2(&v12, "dealloc");
}

void sub_100080C6C()
{
  void *v0;
  uint64_t v1;
  char *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  double v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  id v33;
  char *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  void *v38;
  id v39;
  id v40;
  double v41;
  double v42;
  double v43;
  double v44;
  double v45;
  double v46;
  double v47;
  double v48;
  char *v49;
  NSObject *v50;
  __n128 v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  char *v55;
  id v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t __dst[48];
  char v63;
  _QWORD __src[48];
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;

  if (qword_100315888 != -1)
    swift_once(&qword_100315888, sub_1000D97B0);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FE50);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v60 = v1;
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    __dst[0] = v6;
    *(_DWORD *)v5 = 136446210;
    v61 = v2;
    v7 = v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    __src[0] = sub_100172BEC(v9, v11, __dst);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(__src, &__src[1], v5 + 4, v5 + 12);

    v12 = v11;
    v1 = v60;
    v2 = v61;
    swift_bridgeObjectRelease(v12);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] loadView", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  if (qword_100315798 != -1)
    swift_once(&qword_100315798, sub_1000805A4);
  Strong = swift_weakLoadStrong(&unk_10031B798);
  if (Strong)
  {
    v14 = Strong;
    v15 = type metadata accessor for GuidanceMessagesModel();
    v16 = sub_100056D60(&qword_1003195D8, (uint64_t (*)(uint64_t))type metadata accessor for GuidanceMessagesModel);
    v17 = EnvironmentObject.init()(v15, v16);
    v19 = v18;
    v20 = type metadata accessor for ConnectionModel(0);
    v21 = sub_100056D60(&qword_100316B10, type metadata accessor for ConnectionModel);
    v22 = EnvironmentObject.init()(v20, v21);
    v24 = v23;
    v25 = type metadata accessor for UIMetrics();
    v26 = sub_100056D60((unint64_t *)&qword_100316A00, (uint64_t (*)(uint64_t))type metadata accessor for UIMetrics);
    v27 = EnvironmentObject.init()(v25, v26);
    *(_QWORD *)&v65 = v17;
    *((_QWORD *)&v65 + 1) = v19;
    v66 = v22;
    v67 = v24;
    v68 = v27;
    v69 = v28;
    v29 = sub_1001707F4(&v65, (uint64_t)__src);
    LOBYTE(v19) = static Edge.Set.all.getter(v29);
    swift_release(v17);
    swift_release(v22);
    swift_release(v27);
    memcpy(__dst, __src, sizeof(__dst));
    v63 = v19;
    v30 = sub_100003DB8(&qword_10031B858);
    v31 = sub_100083BE8();
    v32 = AnyView.init<A>(_:)(__dst, v30, v31);
    v33 = objc_allocWithZone((Class)sub_100003DB8(&qword_10031BB10));
    v34 = sub_100083768(v32);
    v35 = OBJC_IVAR____TtC8SOSBuddy24LockScreenViewController_contentView;
    v36 = *(void **)&v2[OBJC_IVAR____TtC8SOSBuddy24LockScreenViewController_contentView];
    *(_QWORD *)&v2[OBJC_IVAR____TtC8SOSBuddy24LockScreenViewController_contentView] = v34;

    v37 = *(void **)&v2[v35];
    if (v37)
    {
      v38 = (void *)objc_opt_self(UIScreen);
      v39 = v37;
      v40 = objc_msgSend(v38, "mainScreen");
      objc_msgSend(v40, "_referenceBounds");
      v42 = v41;
      v44 = v43;
      v46 = v45;
      v48 = v47;

      objc_msgSend(v39, "setFrame:", v42, v44, v46, v48);
      objc_msgSend(v2, "setView:", *(_QWORD *)&v2[v35]);
      swift_release(v14);
      swift_release(v32);
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    sub_10000D744(v1, (uint64_t)qword_10033FD18);
    v49 = v2;
    v50 = Logger.logObject.getter(v49);
    v52 = static os_log_type_t.fault.getter(v51);
    if (os_log_type_enabled(v50, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc(12, -1);
      v54 = swift_slowAlloc(32, -1);
      __dst[0] = v54;
      *(_DWORD *)v53 = 136446210;
      v55 = v49;
      v56 = objc_msgSend(v55, "description");
      v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v56);
      v59 = v58;

      __src[0] = sub_100172BEC(v57, v59, __dst);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(__src, &__src[1], v53 + 4, v53 + 12);

      swift_bridgeObjectRelease(v59);
      _os_log_impl((void *)&_mh_execute_header, v50, v52, "[%{public}s] env is gone", v53, 0xCu);
      swift_arrayDestroy(v54, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v54, -1, -1);
      swift_slowDealloc(v53, -1, -1);

    }
    else
    {

    }
  }
}

void sub_100081238()
{
  void *v0;
  uint64_t v1;
  NSObject *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  NSObject **v6;
  NSObject *v7;
  uint64_t v8;
  void *v9;
  id v10;
  void *v11;
  NSObject *v12;
  objc_super v13;

  v13.receiver = v0;
  v13.super_class = (Class)type metadata accessor for LockScreenViewController();
  objc_msgSendSuper2(&v13, "viewDidLoad");
  if (qword_100315888 != -1)
    swift_once(&qword_100315888, sub_1000D97B0);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FE50);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v5 = 138543362;
    v12 = v2;
    v7 = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v5 + 4, v5 + 12);
    *v6 = v2;

    _os_log_impl((void *)&_mh_execute_header, v3, v4, "viewDidLoad for '%{public}@'", v5, 0xCu);
    v8 = sub_100003DB8(&qword_1003178F0);
    swift_arrayDestroy(v6, 1, v8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);
  }
  else
  {

    v3 = v2;
  }

  v9 = *(Class *)((char *)&v2->isa + OBJC_IVAR____TtC8SOSBuddy24LockScreenViewController_tapGesture);
  objc_msgSend(v9, "addTarget:action:", v2, "didTap");
  v10 = -[NSObject view](v2, "view");
  if (v10)
  {
    v11 = v10;
    objc_msgSend(v10, "addGestureRecognizer:", v9);

  }
  else
  {
    __break(1u);
  }
}

void sub_1000814C4(char a1, SEL *a2, const char *a3)
{
  void *v3;
  uint64_t v7;
  NSObject *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  NSObject **v12;
  NSObject *v13;
  uint64_t v14;
  NSObject *v15;
  objc_super v16;

  v16.receiver = v3;
  v16.super_class = (Class)type metadata accessor for LockScreenViewController();
  objc_msgSendSuper2(&v16, *a2, a1 & 1);
  if (qword_100315888 != -1)
    swift_once(&qword_100315888, sub_1000D97B0);
  v7 = type metadata accessor for Logger(0);
  sub_10000D744(v7, (uint64_t)qword_10033FE50);
  v8 = v3;
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = (NSObject **)swift_slowAlloc(8, -1);
    *(_DWORD *)v11 = 138543362;
    v15 = v8;
    v13 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v15, &v16, v11 + 4, v11 + 12);
    *v12 = v8;

    _os_log_impl((void *)&_mh_execute_header, v9, v10, a3, v11, 0xCu);
    v14 = sub_100003DB8(&qword_1003178F0);
    swift_arrayDestroy(v12, 1, v14);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);
  }
  else
  {

    v9 = v8;
  }

}

void sub_1000816C4()
{
  void *v0;
  uint64_t v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t Strong;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  __n128 v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  if (qword_100315888 != -1)
    swift_once(&qword_100315888, sub_1000D97B0);
  v1 = type metadata accessor for Logger(0);
  sub_10000D744(v1, (uint64_t)qword_10033FE50);
  v2 = v0;
  v3 = Logger.logObject.getter(v2);
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v29 = v1;
    v5 = (uint8_t *)swift_slowAlloc(12, -1);
    v6 = swift_slowAlloc(32, -1);
    v31 = v6;
    *(_DWORD *)v5 = 136446210;
    v7 = v2;
    v8 = objc_msgSend(v7, "description");
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v12 = v9;
    v1 = v29;
    v30 = sub_100172BEC(v12, v11, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v5 + 4, v5 + 12);

    swift_bridgeObjectRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "[%{public}s] didTap", v5, 0xCu);
    swift_arrayDestroy(v6, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1, -1);
    swift_slowDealloc(v5, -1, -1);

  }
  else
  {

  }
  if (qword_100315798 != -1)
    swift_once(&qword_100315798, sub_1000805A4);
  Strong = swift_weakLoadStrong(&unk_10031B798);
  if (Strong)
  {
    v14 = Strong;
    v15 = *(_QWORD *)(*(_QWORD *)(Strong + 16) + 64);
    swift_retain(v15);
    v16 = sub_100003DB8(&qword_10032B0E0);
    v17 = sub_1000084FC((unint64_t *)&qword_100317750, &qword_10032B0E0, (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    Subject<>.send()(v16, v17);
    swift_release(v14);
    swift_release(v15);
  }
  else
  {
    if (qword_100315820 != -1)
      swift_once(&qword_100315820, sub_1000D95E4);
    sub_10000D744(v1, (uint64_t)qword_10033FD18);
    v18 = v2;
    v19 = Logger.logObject.getter(v18);
    v21 = static os_log_type_t.fault.getter(v20);
    if (os_log_type_enabled(v19, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v23 = swift_slowAlloc(32, -1);
      v31 = v23;
      *(_DWORD *)v22 = 136446210;
      v24 = v18;
      v25 = objc_msgSend(v24, "description");
      v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
      v28 = v27;

      v30 = sub_100172BEC(v26, v28, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v22 + 4, v22 + 12);

      swift_bridgeObjectRelease(v28);
      _os_log_impl((void *)&_mh_execute_header, v19, v21, "[%{public}s] env is gone", v22, 0xCu);
      swift_arrayDestroy(v23, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v23, -1, -1);
      swift_slowDealloc(v22, -1, -1);

    }
    else
    {

    }
  }
}

