id sub_100008590()
{
  void *v0;
  void *v1;
  id v2;
  NSString v3;
  NSString v4;
  NSString v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  NSString v9;
  NSString v10;
  NSString v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  objc_super v16;

  v1 = (void *)objc_opt_self(NSBundle);
  v2 = objc_msgSend(v1, "mainBundle");
  v3 = String._bridgeToObjectiveC()();
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v2, "localizedStringForKey:value:table:", v3, 0, v4);

  if (!v5)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v7 = v6;
    v5 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v7);
  }
  v8 = objc_msgSend(v1, "mainBundle");
  v9 = String._bridgeToObjectiveC()();
  v10 = String._bridgeToObjectiveC()();
  v11 = objc_msgSend(v8, "localizedStringForKey:value:table:", v9, 0, v10);

  if (!v11)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v13 = v12;
    v11 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v13);
  }
  v16.receiver = v0;
  v16.super_class = (Class)type metadata accessor for BuddySilentModeController();
  v14 = objc_msgSendSuper2(&v16, "initWithTitle:detailText:icon:contentLayout:", v5, v11, 0, 1);

  return v14;
}

void sub_100008788()
{
  void *v0;
  NSString v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  void *object;
  id v12;
  Swift::String v13;

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v1);

  v3 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v2);
  objc_msgSend(v3, "setContentMode:", 1);
  objc_msgSend(v3, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v4 = objc_msgSend(v0, "contentView");
  v5 = objc_msgSend((id)objc_opt_self(UIColor), "systemGray6Color");
  objc_msgSend(v4, "setBackgroundColor:", v5);

  v6 = objc_msgSend(v0, "contentView");
  objc_msgSend(v6, "addSubview:", v3);

  v7 = objc_msgSend(v0, "contentView");
  objc_msgSend(v7, "pinToEdges:", v3);

  v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v13._object = (void *)0xE000000000000000;
  v9._countAndFlagsBits = 0x45554E49544E4F43;
  v9._object = (void *)0xE800000000000000;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v13._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v13)._object;

  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v0, "addBoldButton:action:", v12, "continueTapped");

}

id sub_100008AC0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddySilentModeController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t variable initialization expression of IntelligenceManager.didShowIntelligencePaneThisBuddyRun()
{
  return 0;
}

uint64_t variable initialization expression of IntelligenceAvailabilityProvider.serverFlag()
{
  return 2;
}

uint64_t type metadata accessor for BuddySilentModeController()
{
  return objc_opt_self(_TtC5Setup25BuddySilentModeController);
}

void type metadata accessor for UITraitEnvironmentLayoutDirection(uint64_t a1)
{
  sub_10000922C(a1, &qword_1002E9FF0, (uint64_t)&unk_10027ED78);
}

uint64_t sub_100008B34(uint64_t a1, uint64_t a2)
{
  return sub_100008E48(a1, a2, (uint64_t (*)(uint64_t))&String._bridgeToObjectiveC());
}

uint64_t sub_100008B40(uint64_t a1, id *a2)
{
  uint64_t result;
  uint64_t v5;
  NSString v6;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = 0;
  result = static String._forceBridgeFromObjectiveC(_:result:)(a1, &v7);
  v5 = v8;
  if (v8)
  {
    v6 = String._bridgeToObjectiveC()();
    result = swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return result;
}

uint64_t sub_100008BB4(uint64_t a1, id *a2)
{
  char v4;
  uint64_t v5;
  NSString v6;
  uint64_t v8;
  uint64_t v9;

  v8 = 0;
  v9 = 0;
  v4 = static String._conditionallyBridgeFromObjectiveC(_:result:)(a1, &v8);
  v5 = v9;
  if (v9)
  {
    v6 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v5);
  }
  else
  {
    v6 = 0;
  }
  *a2 = v6;
  return v4 & 1;
}

uint64_t sub_100008C30@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  NSString v4;
  uint64_t result;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a1 = v4;
  return result;
}

BOOL sub_100008C70(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

_QWORD *sub_100008C84@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

void sub_100008C94(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

Swift::Int sub_100008CA0()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100008CE4()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100008D0C(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t sub_100008D4C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  NSString v4;
  uint64_t result;

  v3 = *(_QWORD *)(a1 + 8);
  v4 = String._bridgeToObjectiveC()();
  result = swift_bridgeObjectRelease(v3);
  *a2 = v4;
  return result;
}

uint64_t sub_100008D90@<X0>(uint64_t *a1@<X8>)
{
  _QWORD *v1;
  uint64_t result;
  uint64_t v4;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100008DB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = sub_100009090(&qword_1002EA110, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_10024C384);
  v3 = sub_100009090(&qword_1002EA118, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_10024C324);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()(a1, v2, v3, &protocol witness table for String);
}

uint64_t sub_100008E3C(uint64_t a1, uint64_t a2)
{
  return sub_100008E48(a1, a2, (uint64_t (*)(uint64_t))&String.hashValue.getter);
}

uint64_t sub_100008E48(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
  v7 = v6;
  v8 = a3(v5);
  swift_bridgeObjectRelease(v7);
  return v8;
}

uint64_t sub_100008E84(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v5);
}

Swift::Int sub_100008EC4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  Swift::Int v6;
  _QWORD v8[9];

  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v1);
  v5 = v4;
  Hasher.init(_seed:)(v8, a1);
  String.hash(into:)(v8, v3, v5);
  v6 = Hasher._finalize()();
  swift_bridgeObjectRelease(v5);
  return v6;
}

void type metadata accessor for BuddyDataTransferMethod(uint64_t a1)
{
  sub_10000922C(a1, &qword_1002EA0C0, (uint64_t)&unk_10027ED98);
}

uint64_t sub_100008F48(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain(v2);
  return v3;
}

__n128 sub_100008F7C(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t sub_100008F88(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_100008FA8(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 32) = v3;
  return result;
}

void type metadata accessor for CGRect(uint64_t a1)
{
  sub_10000922C(a1, &qword_1002EA0C8, (uint64_t)&unk_10027EE10);
}

void type metadata accessor for LARatchetManagerEnableFeatureResultKey(uint64_t a1)
{
  sub_10000922C(a1, &qword_1002EA0D0, (uint64_t)&unk_10027EE38);
}

void type metadata accessor for DBSDisplayZoomOption(uint64_t a1)
{
  sub_10000922C(a1, &qword_1002EA0D8, (uint64_t)&unk_10027EE58);
}

void type metadata accessor for BYDeviceType(uint64_t a1)
{
  sub_10000922C(a1, &qword_1002EA0E0, (uint64_t)&unk_10027EE78);
}

void type metadata accessor for UIContentSizeCategory(uint64_t a1)
{
  sub_10000922C(a1, &qword_1002EA0E8, (uint64_t)&unk_10027EE98);
}

uint64_t sub_100009038()
{
  return sub_100009090(&qword_1002EA0F0, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_10024C2E8);
}

uint64_t sub_100009064()
{
  return sub_100009090(&qword_1002EA0F8, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_10024C2BC);
}

uint64_t sub_100009090(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1000090D0(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char v10;

  v2 = *a2;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(*a1);
  v5 = v4;
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
  if (v3 == v6 && v5 == v7)
  {
    v10 = 1;
    v9 = v5;
  }
  else
  {
    v9 = v7;
    v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0);
  }
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v9);
  return v10 & 1;
}

uint64_t sub_100009158()
{
  return sub_100009090(&qword_1002EA100, (uint64_t (*)(uint64_t))type metadata accessor for UIContentSizeCategory, (uint64_t)&unk_10024C358);
}

uint64_t sub_100009184()
{
  return sub_100009090(&qword_1002EA108, (uint64_t (*)(uint64_t))type metadata accessor for LARatchetManagerEnableFeatureResultKey, (uint64_t)&unk_10024C4AC);
}

__n128 sub_1000091B0(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t sub_1000091BC(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_1000091DC(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for CGSize(uint64_t a1)
{
  sub_10000922C(a1, &qword_1002EA120, (uint64_t)&unk_10027EF18);
}

void type metadata accessor for CGPoint(uint64_t a1)
{
  sub_10000922C(a1, &qword_1002EA128, (uint64_t)&unk_10027EF98);
}

void sub_10000922C(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v5;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata(0, a3);
    if (!v5)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

id sub_100009294(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id *v5;
  id v6;
  id v7;

  v2 = objc_msgSend((id)objc_opt_self(DBSDisplayZoomConfigurationController), "defaultController");
  v3 = objc_msgSend(v2, "currentDisplayZoomMode");

  v4 = objc_msgSend(v3, "displayZoomOption");
  if (a1)
  {
    if (a1 == 2)
    {
      v5 = (id *)&UIContentSizeCategorySmall;
      goto LABEL_10;
    }
    if (a1 == 1 && v4 != (id)1)
    {
      v5 = (id *)&UIContentSizeCategoryExtraExtraLarge;
LABEL_10:
      v6 = *v5;
      v7 = *v5;
      return v6;
    }
  }
  else if (v4 == (id)1)
  {
    v5 = (id *)&UIContentSizeCategoryLarge;
    goto LABEL_10;
  }
  return 0;
}

UIContentSizeCategory sub_100009368()
{
  qword_1002EED18 = 0;
  byte_1002EED20 = 0;
  qword_1002EED28 = (uint64_t)UIContentSizeCategoryLarge;
  byte_1002EED30 = 0;
  return UIContentSizeCategoryLarge;
}

uint64_t sub_100009390(uint64_t a1, char a2, uint64_t a3, char a4)
{
  Swift::String v8;
  Swift::String v9;
  void *object;
  Swift::String v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  Swift::String v21;
  uint64_t v23;
  _QWORD v24[2];

  v24[0] = 0;
  v24[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(142);
  v8._countAndFlagsBits = 0xD000000000000029;
  v8._object = (void *)0x800000010020A460;
  String.append(_:)(v8);
  v23 = a1;
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for UInt, &protocol witness table for UInt);
  object = v9._object;
  String.append(_:)(v9);
  swift_bridgeObjectRelease(object);
  v11._countAndFlagsBits = 0xD000000000000021;
  v11._object = (void *)0x800000010020A490;
  String.append(_:)(v11);
  if ((a2 & 1) != 0)
    v12 = 1702195828;
  else
    v12 = 0x65736C6166;
  if ((a2 & 1) != 0)
    v13 = 0xE400000000000000;
  else
    v13 = 0xE500000000000000;
  v14 = v13;
  String.append(_:)(*(Swift::String *)&v12);
  swift_bridgeObjectRelease(v13);
  v15._object = (void *)0x800000010020A4C0;
  v15._countAndFlagsBits = 0xD00000000000001ALL;
  String.append(_:)(v15);
  v23 = a3;
  type metadata accessor for UIContentSizeCategory(0);
  _print_unlocked<A, B>(_:_:)(&v23, v24, v16, &type metadata for DefaultStringInterpolation, &protocol witness table for DefaultStringInterpolation);
  v17._countAndFlagsBits = 0xD00000000000001CLL;
  v17._object = (void *)0x800000010020A4E0;
  String.append(_:)(v17);
  if ((a4 & 1) != 0)
    v18 = 1702195828;
  else
    v18 = 0x65736C6166;
  if ((a4 & 1) != 0)
    v19 = 0xE400000000000000;
  else
    v19 = 0xE500000000000000;
  v20 = v19;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease(v19);
  v21._countAndFlagsBits = 0x29202020200ALL;
  v21._object = (void *)0xE600000000000000;
  String.append(_:)(v21);
  return v24[0];
}

uint64_t sub_10000954C(void *a1, char a2, void *a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  unint64_t v22;
  Swift::String v23;
  unint64_t v24;
  Swift::String v25;
  unint64_t v26;
  unint64_t v27;
  id v28;
  NSString v29;
  NSString v30;
  id v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t result;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  NSString v39;
  id v40;
  id v41;
  NSString v42;
  id v43;
  id v44;
  NSString v45;
  id v46;
  id v47;
  NSString v48;
  id v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  NSURL *v53;
  void *v54;
  void *v55;
  Class isa;
  id v57;
  id v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;

  v58 = a1;
  v7 = sub_10000A9E4(&qword_1002EA238);
  __chkstk_darwin(v7);
  v9 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for URL(0);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = __chkstk_darwin(v10);
  v14 = (char *)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  v59 = (char *)&v58 - v15;
  if ((a2 & 1) != 0)
    v16 = 5002322;
  else
    v16 = 5395532;
  if (a3 && objc_msgSend(a3, "userInterfaceStyle", v58) == (id)2)
  {
    v17 = (void *)0xE400000000000000;
    v18 = 1802658116;
  }
  else
  {
    v17 = (void *)0xE500000000000000;
    v18 = 0x746867694CLL;
  }
  v19 = qword_10024C670[a4];
  v20 = String.lowercased()();
  swift_bridgeObjectRelease(v19);
  v60 = v16;
  v61 = 0xE300000000000000;
  swift_bridgeObjectRetain(0xE300000000000000);
  v21._countAndFlagsBits = 45;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  swift_bridgeObjectRelease(0xE300000000000000);
  v22 = v61;
  swift_bridgeObjectRetain(v61);
  v23._countAndFlagsBits = v18;
  v23._object = v17;
  String.append(_:)(v23);
  swift_bridgeObjectRelease(v22);
  swift_bridgeObjectRelease(v17);
  v24 = v61;
  swift_bridgeObjectRetain(v61);
  v25._countAndFlagsBits = 45;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  swift_bridgeObjectRelease(v24);
  v26 = v61;
  swift_bridgeObjectRetain(v61);
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v26);
  swift_bridgeObjectRelease(v20._object);
  v27 = v61;
  v28 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v27);
  v30 = String._bridgeToObjectiveC()();
  v31 = objc_msgSend(v28, "URLForResource:withExtension:", v29, v30);

  if (v31)
  {
    static URL._unconditionallyBridgeFromObjectiveC(_:)(v31);

    v32 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
    v32(v9, v14, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
    if ((_DWORD)result != 1)
    {
      v34 = v59;
      v32(v59, v9, v10);
      v35 = sub_10000A9E4(&qword_1002EA500);
      v36 = swift_allocObject(v35, 64, 7);
      *(_OWORD *)(v36 + 16) = xmmword_10024C560;
      v37 = objc_allocWithZone((Class)OBAnimationState);
      v38 = v58;
      v39 = String._bridgeToObjectiveC()();
      v40 = objc_msgSend(v37, "initWithStateName:transitionDuration:transitionSpeed:", v39, 1.0, 1.0);

      *(_QWORD *)(v36 + 32) = v40;
      v41 = objc_allocWithZone((Class)OBAnimationState);
      v42 = String._bridgeToObjectiveC()();
      v43 = objc_msgSend(v41, "initWithStateName:transitionDuration:transitionSpeed:", v42, 1.0, 1.0);

      *(_QWORD *)(v36 + 40) = v43;
      v44 = objc_allocWithZone((Class)OBAnimationState);
      v45 = String._bridgeToObjectiveC()();
      v46 = objc_msgSend(v44, "initWithStateName:transitionDuration:transitionSpeed:", v45, 1.0, 1.0);

      *(_QWORD *)(v36 + 48) = v46;
      v47 = objc_allocWithZone((Class)OBAnimationState);
      v48 = String._bridgeToObjectiveC()();
      v49 = objc_msgSend(v47, "initWithStateName:transitionDuration:transitionSpeed:", v48, 1.0, 1.0);

      *(_QWORD *)(v36 + 56) = v49;
      v60 = v36;
      specialized Array._endMutation()(v50);
      v51 = v60;
      v52 = objc_allocWithZone((Class)OBAnimationController);
      URL._bridgeToObjectiveC()(v53);
      v55 = v54;
      sub_10000AA24(0, (unint64_t *)&unk_1002EA240, OBAnimationState_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v51);
      v57 = objc_msgSend(v52, "initWithUrlToPackage:animationView:animatedStates:startAtFirstState:", v55, v38, isa, 0);

      (*(void (**)(char *, uint64_t))(v11 + 8))(v34, v10);
      return (uint64_t)v57;
    }
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
  }
  __break(1u);
  return result;
}

BOOL sub_100009A70(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100009A84()
{
  unsigned __int8 *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100009AC8()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100009AF0(uint64_t a1)
{
  unsigned __int8 *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

unint64_t sub_100009B30@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = sub_10000A9D4(*a1);
  *a2 = result;
  return result;
}

void sub_100009B58(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void sub_100009C10()
{
  uint64_t v0;
  id v1;
  id v2;

  v1 = objc_msgSend((id)objc_opt_self(DBSDisplayZoomConfigurationController), "defaultController");
  v2 = objc_msgSend(v1, "currentDisplayZoomMode");

  objc_msgSend(v2, "displayZoomOption");
  objc_msgSend(*(id *)(v0 + OBJC_IVAR____TtC5Setup22AppearanceModeProvider_homeScreenService), "isLargeIconLayoutEnabled");
  sub_10001A58C();
  _AXSEnhanceTextLegibilityEnabled();
  JUMPOUT(0x100009DA8);
}

void sub_100009D28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, int a15, char a16)
{
  uint64_t v16;
  void *v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;

  v18 = v17;
  v19 = v18;
  if (v16 || (a16 & 1) != 0)
    JUMPOUT(0x100009CF4);
  v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  v22 = v21;
  v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(a14);
  v25 = v23;
  if (v20 == v24 && v22 == v23)
  {

    swift_bridgeObjectRelease_n(v22, 2);
    if (!a12)
      goto LABEL_12;
  }
  else
  {
    v26 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v22, v24, v23, 0);

    swift_bridgeObjectRelease(v22);
    swift_bridgeObjectRelease(v25);
    if ((v26 & 1) != 0 && !a12)
LABEL_12:
      JUMPOUT(0x100009EA4);
  }
  JUMPOUT(0x100009CF8);
}

_QWORD *sub_100009EE0(uint64_t a1)
{
  int64_t v1;
  _QWORD *result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int64_t v19;
  int v20;
  uint64_t v21;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  sub_100028FC4(0, v1, 0);
  result = (_QWORD *)sub_10000A650(a1);
  v5 = (uint64_t)result;
  v6 = 0;
  v7 = a1 + 64;
  v19 = v1;
  v20 = v4;
  v21 = a1 + 64;
  while ((v5 & 0x8000000000000000) == 0 && v5 < 1 << *(_BYTE *)(a1 + 32))
  {
    v10 = (unint64_t)v5 >> 6;
    if ((*(_QWORD *)(v7 + 8 * ((unint64_t)v5 >> 6)) & (1 << v5)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(a1 + 36) != v4)
      goto LABEL_24;
    result = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 56) + 8 * v5), "displayZoomOption");
    v11 = result;
    v13 = _swiftEmptyArrayStorage[2];
    v12 = _swiftEmptyArrayStorage[3];
    if (v13 >= v12 >> 1)
      result = (_QWORD *)sub_100028FC4(v12 > 1, v13 + 1, 1);
    _swiftEmptyArrayStorage[2] = v13 + 1;
    _swiftEmptyArrayStorage[v13 + 4] = v11;
    v8 = 1 << *(_BYTE *)(a1 + 32);
    if (v5 >= v8)
      goto LABEL_25;
    v7 = a1 + 64;
    v14 = *(_QWORD *)(v21 + 8 * v10);
    if ((v14 & (1 << v5)) == 0)
      goto LABEL_26;
    v4 = v20;
    if (*(_DWORD *)(a1 + 36) != v20)
      goto LABEL_27;
    v15 = v14 & (-2 << (v5 & 0x3F));
    if (v15)
    {
      v8 = __clz(__rbit64(v15)) | v5 & 0xFFFFFFFFFFFFFFC0;
      v9 = v19;
    }
    else
    {
      v16 = v10 + 1;
      v17 = (unint64_t)(v8 + 63) >> 6;
      v9 = v19;
      if (v10 + 1 < v17)
      {
        v18 = *(_QWORD *)(v21 + 8 * v16);
        if (v18)
        {
LABEL_20:
          v8 = __clz(__rbit64(v18)) + (v16 << 6);
        }
        else
        {
          while (v17 - 2 != v10)
          {
            v18 = *(_QWORD *)(a1 + 80 + 8 * v10++);
            if (v18)
            {
              v16 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    ++v6;
    v5 = v8;
    if (v6 == v9)
      return _swiftEmptyArrayStorage;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_10000A0E4(uint64_t a1, char a2, void *a3, char a4)
{
  uint64_t v4;
  id v9;
  id v10;
  id v11;
  id v12;
  void *v13;
  id v14;

  v9 = objc_msgSend((id)objc_opt_self(DBSDisplayZoomConfigurationController), "defaultController");
  v10 = objc_msgSend(v9, "currentDisplayZoomMode");

  v11 = objc_msgSend(v10, "displayZoomOption");
  if (v11 == (id)a1 || (v12 = sub_100009294(a1)) == 0)
    v12 = a3;
  v13 = v12;
  objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC5Setup22AppearanceModeProvider_homeScreenService), "setLargeIconLayoutEnabled:", a2 & 1);
  v14 = v13;
  sub_10001A660((uint64_t)v14);

  _AXSSetEnhanceTextLegibilityEnabled(a4 & 1);
}

uint64_t sub_10000A1DC(uint64_t a1, int a2, void *a3, char a4)
{
  uint64_t v4;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  unsigned int v16;
  UIContentSizeCategory v17;
  int v18;
  char v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;

  v7 = (void *)objc_opt_self(DBSDisplayZoomConfigurationController);
  v8 = objc_msgSend(v7, "defaultController");
  v9 = objc_msgSend(v8, "currentDisplayZoomMode");

  v10 = objc_msgSend(v9, "displayZoomOption");
  if (v10 == (id)a1)
  {
    v11 = a3;
  }
  else
  {
    v12 = sub_100009294(a1);
    if (!v12)
      v12 = a3;
    v11 = v12;
    a1 = (uint64_t)v10;
  }
  v13 = objc_msgSend(v7, "defaultController");
  v14 = objc_msgSend(v13, "currentDisplayZoomMode");

  v15 = objc_msgSend(v14, "displayZoomOption");
  v16 = objc_msgSend(*(id *)(v4 + OBJC_IVAR____TtC5Setup22AppearanceModeProvider_homeScreenService), "isLargeIconLayoutEnabled");
  v17 = sub_10001A58C();
  v18 = _AXSEnhanceTextLegibilityEnabled();
  if (v15 == (id)a1 && ((v16 ^ a2) & 1) == 0)
  {
    v20 = v18;
    v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
    v23 = v22;
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    v26 = v24;
    if (v21 == v25 && v23 == v24)
    {

      swift_bridgeObjectRelease_n(v23, 2);
    }
    else
    {
      v27 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v23, v25, v24, 0);

      swift_bridgeObjectRelease(v23);
      swift_bridgeObjectRelease(v26);
      v19 = 0;
      if ((v27 & 1) == 0)
        return v19 & 1;
    }
    v19 = (v20 == 0) ^ a4;
    return v19 & 1;
  }

  v19 = 0;
  return v19 & 1;
}

id sub_10000A404()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AppearanceModeProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AppearanceModeProvider()
{
  return objc_opt_self(_TtC5Setup22AppearanceModeProvider);
}

_BYTE *initializeBufferWithCopyOfBuffer for AppearanceMode(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AppearanceMode(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AppearanceMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_10000A574 + 4 * byte_10024C575[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10000A5A8 + 4 * byte_10024C570[v4]))();
}

uint64_t sub_10000A5A8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000A5B0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x10000A5B8);
  return result;
}

uint64_t sub_10000A5C4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x10000A5CCLL);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_10000A5D0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000A5D8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10000A5E4(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_10000A5F0(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for AppearanceMode()
{
  return &type metadata for AppearanceMode;
}

unint64_t sub_10000A60C()
{
  unint64_t result;

  result = qword_1002EA228;
  if (!qword_1002EA228)
  {
    result = swift_getWitnessTable(&unk_10024C620, &type metadata for AppearanceMode);
    atomic_store(result, (unint64_t *)&qword_1002EA228);
  }
  return result;
}

uint64_t sub_10000A650(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

void sub_10000A6D8()
{
  id v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  int64_t v9;
  unint64_t v10;
  unint64_t v11;
  id v12;
  id v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;

  v0 = objc_msgSend((id)objc_opt_self(DBSDisplayZoomConfigurationController), "defaultController");
  v1 = objc_msgSend(v0, "displayZoomModes");

  v2 = sub_10000AA24(0, &qword_1002EA230, DBSDisplayZoomMode_ptr);
  v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v1, &type metadata for String, v2, &protocol witness table for String);

  v4 = v3 + 64;
  v5 = 1 << *(_BYTE *)(v3 + 32);
  v6 = -1;
  if (v5 < 64)
    v6 = ~(-1 << v5);
  v7 = v6 & *(_QWORD *)(v3 + 64);
  v8 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(v3);
  v9 = 0;
  while (v7)
  {
    v10 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v11 = v10 | (v9 << 6);
LABEL_5:
    v12 = *(id *)(*(_QWORD *)(v3 + 56) + 8 * v11);
    v13 = objc_msgSend(v12, "displayZoomOption");

    if (v13 == (id)2)
      goto LABEL_25;
  }
  v14 = v9 + 1;
  if (__OFADD__(v9, 1))
  {
    __break(1u);
    goto LABEL_27;
  }
  if (v14 >= v8)
    goto LABEL_25;
  v15 = *(_QWORD *)(v4 + 8 * v14);
  ++v9;
  if (v15)
    goto LABEL_24;
  v9 = v14 + 1;
  if (v14 + 1 >= v8)
    goto LABEL_25;
  v15 = *(_QWORD *)(v4 + 8 * v9);
  if (v15)
    goto LABEL_24;
  v9 = v14 + 2;
  if (v14 + 2 >= v8)
    goto LABEL_25;
  v15 = *(_QWORD *)(v4 + 8 * v9);
  if (v15)
    goto LABEL_24;
  v9 = v14 + 3;
  if (v14 + 3 >= v8)
    goto LABEL_25;
  v15 = *(_QWORD *)(v4 + 8 * v9);
  if (v15)
    goto LABEL_24;
  v9 = v14 + 4;
  if (v14 + 4 >= v8)
    goto LABEL_25;
  v15 = *(_QWORD *)(v4 + 8 * v9);
  if (v15)
  {
LABEL_24:
    v7 = (v15 - 1) & v15;
    v11 = __clz(__rbit64(v15)) + (v9 << 6);
    goto LABEL_5;
  }
  v16 = v14 + 5;
  if (v16 >= v8)
  {
LABEL_25:
    swift_release(v3);
    swift_bridgeObjectRelease(v3);
    return;
  }
  v15 = *(_QWORD *)(v4 + 8 * v16);
  if (v15)
  {
    v9 = v16;
    goto LABEL_24;
  }
  while (1)
  {
    v9 = v16 + 1;
    if (__OFADD__(v16, 1))
      break;
    if (v9 >= v8)
      goto LABEL_25;
    v15 = *(_QWORD *)(v4 + 8 * v9);
    ++v16;
    if (v15)
      goto LABEL_24;
  }
LABEL_27:
  __break(1u);
}

void sub_10000A8EC(char a1)
{
  __asm { BR              X11 }
}

uint64_t sub_10000A928()
{
  return 0;
}

unint64_t sub_10000A9D4(unint64_t result)
{
  if (result >= 4)
    return 4;
  return result;
}

uint64_t sub_10000A9E4(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContext2((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000AA24(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

_QWORD *sub_10000AA5C(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 16))
    __asm { BR              X9 }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_10000AC60(uint64_t a1)
{
  _UNKNOWN **v1;
  id v3;
  unsigned int v4;
  void *v5;
  id v6;
  unsigned int v7;
  id v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;

  if (a1)
  {
    if (a1 != 1)
    {
      type metadata accessor for BYDeviceType(0);
      v16 = a1;
      result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v15, &v16, v15, &type metadata for Int);
      __break(1u);
      return result;
    }
    v3 = objc_msgSend((id)objc_opt_self(UIDevice), "currentDevice");
    v4 = objc_msgSend(v3, "sf_deviceSupportsDisplayZoom");

    if (v4)
      v1 = &off_10027EB88;
    else
      v1 = &off_10027EBB0;
  }
  else
  {
    v1 = &off_10027EBD8;
  }
  v5 = (void *)objc_opt_self(UIDevice);
  swift_bridgeObjectRetain(v1);
  v6 = objc_msgSend(v5, "currentDevice");
  v7 = objc_msgSend(v6, "sf_deviceSupportsDisplayZoom");

  if (v7)
  {
    v8 = objc_msgSend((id)objc_opt_self(DBSDisplayZoomConfigurationController), "defaultController");
    v9 = objc_msgSend(v8, "displayZoomModes");

    v10 = sub_10000AA24(0, &qword_1002EA230, DBSDisplayZoomMode_ptr);
    v11 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v9, &type metadata for String, v10, &protocol witness table for String);

    v12 = sub_100009EE0(v11);
    swift_bridgeObjectRelease(v11);
    v13 = sub_10000AA5C((uint64_t)v1);
    swift_bridgeObjectRelease(v1);
    swift_bridgeObjectRelease(v12);
    return (uint64_t)v13;
  }
  return (uint64_t)v1;
}

id sub_10000AE54()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  id v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  NSString v11;
  NSString v12;
  NSString v13;
  id v14;
  objc_super v16;
  Swift::String v17;
  Swift::String v18;

  v1 = &v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_name];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_childAge] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_delegate] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_runState] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_capabilities] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_paneFeatureAnalyticsManager] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_analyticsManager] = 0;
  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v17._object = (void *)0xE000000000000000;
  v4._object = (void *)0x800000010020A900;
  v4._countAndFlagsBits = 0xD000000000000012;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v17._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v17)._object;

  v7 = objc_msgSend(v2, "mainBundle");
  v8._countAndFlagsBits = 0xD000000000000013;
  v18._object = (void *)0xE000000000000000;
  v8._object = (void *)0x800000010020A920;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v18._countAndFlagsBits = 0;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v18)._object;

  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  v13 = String._bridgeToObjectiveC()();
  v16.receiver = v0;
  v16.super_class = (Class)type metadata accessor for BuddyMultitaskingController();
  v14 = objc_msgSendSuper2(&v16, "initWithTitle:detailText:symbolName:contentLayout:", v11, v12, v13, 2);

  return v14;
}

void sub_10000B068()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSString v12;
  void *v13;
  unsigned int v14;
  uint64_t v15;
  void *v16;
  void *v17;
  id v18;
  Swift::String v19;
  Swift::String v20;
  void *object;
  NSString v22;
  id v23;
  Swift::String v24;
  Swift::String v25;
  void *v26;
  NSString v27;
  NSString v28;
  id v29;
  Swift::String v30;
  Swift::String v31;
  void *v32;
  NSString v33;
  id v34;
  Swift::String v35;
  Swift::String v36;
  void *v37;
  NSString v38;
  NSString v39;
  id v40;
  Swift::String v41;
  Swift::String v42;
  void *v43;
  NSString v44;
  id v45;
  Swift::String v46;
  Swift::String v47;
  void *v48;
  NSString v49;
  NSString v50;
  id v51;
  id v52;
  Swift::String v53;
  Swift::String v54;
  void *v55;
  NSString v56;
  id v57;
  id v58;
  id v59;
  Swift::String v60;
  Swift::String v61;
  void *v62;
  NSString v63;
  id v64;
  objc_super v65;
  Swift::String v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  Swift::String v71;
  Swift::String v72;
  Swift::String v73;
  Swift::String v74;

  v65.receiver = v0;
  v65.super_class = (Class)type metadata accessor for BuddyMultitaskingController();
  objc_msgSendSuper2(&v65, "viewDidLoad");
  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_name + 8];
  if (v1)
  {
    v2 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_name];
    swift_bridgeObjectRetain(*(_QWORD *)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_name + 8]);
    v3 = objc_msgSend(v0, "headerView");
    v4 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v5._countAndFlagsBits = 0xD00000000000001CLL;
    v66._object = (void *)0xE000000000000000;
    v5._object = (void *)0x800000010020A8E0;
    v6._countAndFlagsBits = 0;
    v6._object = (void *)0xE000000000000000;
    v66._countAndFlagsBits = 0;
    v7 = NSLocalizedString(_:tableName:bundle:value:comment:)(v5, (Swift::String_optional)0, (NSBundle)v4, v6, v66);

    v8 = sub_10000A9E4(&qword_1002EA390);
    v9 = swift_allocObject(v8, 72, 7);
    *(_OWORD *)(v9 + 16) = xmmword_10024C690;
    *(_QWORD *)(v9 + 56) = &type metadata for String;
    *(_QWORD *)(v9 + 64) = sub_10000C908();
    *(_QWORD *)(v9 + 32) = v2;
    *(_QWORD *)(v9 + 40) = v1;
    String.init(format:_:)(v7._countAndFlagsBits, v7._object, v9);
    v11 = v10;
    swift_bridgeObjectRelease(v7._object);
    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v11);
    objc_msgSend(v3, "setTitle:", v12);

  }
  v13 = *(void **)&v0[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_capabilities];
  if (v13)
  {
    v14 = objc_msgSend(v13, "mgSupportsSingleDisplayEnhancedMultitasking");
    if (v14)
      v15 = 0xD000000000000018;
    else
      v15 = 0xD00000000000002ELL;
    if (v14)
      v16 = (void *)0x800000010020A8C0;
    else
      v16 = (void *)0x800000010020A7B0;
    v17 = (void *)objc_opt_self(NSBundle);
    v18 = objc_msgSend(v17, "mainBundle");
    v19._countAndFlagsBits = 0xD000000000000017;
    v67._object = (void *)0xE000000000000000;
    v19._object = (void *)0x800000010020A7E0;
    v20._countAndFlagsBits = 0;
    v20._object = (void *)0xE000000000000000;
    v67._countAndFlagsBits = 0;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v19, (Swift::String_optional)0, (NSBundle)v18, v20, v67)._object;

    v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v23 = objc_msgSend(v17, "mainBundle");
    v68._object = (void *)0xE000000000000000;
    v24._countAndFlagsBits = v15;
    v24._object = v16;
    v25._countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    v68._countAndFlagsBits = 0;
    v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, (Swift::String_optional)0, (NSBundle)v23, v25, v68)._object;

    swift_bridgeObjectRelease(v16);
    v27 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v26);
    v28 = String._bridgeToObjectiveC()();
    objc_msgSend(v0, "addMultitaskingBulletedListItemWithTitle:description:symbolName:", v22, v27, v28);

    v29 = objc_msgSend(v17, "mainBundle");
    v30._countAndFlagsBits = 0xD000000000000015;
    v69._object = (void *)0xE000000000000000;
    v30._object = (void *)0x800000010020A800;
    v31._countAndFlagsBits = 0;
    v31._object = (void *)0xE000000000000000;
    v69._countAndFlagsBits = 0;
    v32 = NSLocalizedString(_:tableName:bundle:value:comment:)(v30, (Swift::String_optional)0, (NSBundle)v29, v31, v69)._object;

    v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v32);
    v34 = objc_msgSend(v17, "mainBundle");
    v35._countAndFlagsBits = 0xD000000000000016;
    v70._object = (void *)0xE000000000000000;
    v35._object = (void *)0x800000010020A820;
    v36._countAndFlagsBits = 0;
    v36._object = (void *)0xE000000000000000;
    v70._countAndFlagsBits = 0;
    v37 = NSLocalizedString(_:tableName:bundle:value:comment:)(v35, (Swift::String_optional)0, (NSBundle)v34, v36, v70)._object;

    v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v37);
    v39 = String._bridgeToObjectiveC()();
    objc_msgSend(v0, "addMultitaskingBulletedListItemWithTitle:description:symbolName:", v33, v38, v39);

    v40 = objc_msgSend(v17, "mainBundle");
    v41._countAndFlagsBits = 0xD000000000000012;
    v71._object = (void *)0xE000000000000000;
    v41._object = (void *)0x800000010020A860;
    v42._countAndFlagsBits = 0;
    v42._object = (void *)0xE000000000000000;
    v71._countAndFlagsBits = 0;
    v43 = NSLocalizedString(_:tableName:bundle:value:comment:)(v41, (Swift::String_optional)0, (NSBundle)v40, v42, v71)._object;

    v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v43);
    v45 = objc_msgSend(v17, "mainBundle");
    v46._countAndFlagsBits = 0xD000000000000013;
    v72._object = (void *)0xE000000000000000;
    v46._object = (void *)0x800000010020A880;
    v47._countAndFlagsBits = 0;
    v47._object = (void *)0xE000000000000000;
    v72._countAndFlagsBits = 0;
    v48 = NSLocalizedString(_:tableName:bundle:value:comment:)(v46, (Swift::String_optional)0, (NSBundle)v45, v47, v72)._object;

    v49 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v48);
    v50 = String._bridgeToObjectiveC()();
    objc_msgSend(v0, "addMultitaskingBulletedListItemWithTitle:description:symbolName:", v44, v49, v50);

    v51 = objc_msgSend((id)objc_opt_self(OBBoldTrayButton), "boldButton");
    v52 = objc_msgSend(v17, "mainBundle");
    v73._object = (void *)0xE000000000000000;
    v53._countAndFlagsBits = 0x45554E49544E4F43;
    v53._object = (void *)0xE800000000000000;
    v54._countAndFlagsBits = 0;
    v54._object = (void *)0xE000000000000000;
    v73._countAndFlagsBits = 0;
    v55 = NSLocalizedString(_:tableName:bundle:value:comment:)(v53, (Swift::String_optional)0, (NSBundle)v52, v54, v73)._object;

    v56 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v55);
    objc_msgSend(v51, "setTitle:forState:", v56, 0);

    objc_msgSend(v51, "addTarget:action:forControlEvents:", v0, "continueTapped", 64);
    v57 = objc_msgSend(v0, "buttonTray");
    objc_msgSend(v57, "addButton:", v51);

    v58 = objc_msgSend((id)objc_opt_self(OBLinkTrayButton), "linkButton");
    v59 = objc_msgSend(v17, "mainBundle");
    v60._countAndFlagsBits = 0xD00000000000001ELL;
    v74._object = (void *)0xE000000000000000;
    v60._object = (void *)0x800000010020A8A0;
    v61._countAndFlagsBits = 0;
    v61._object = (void *)0xE000000000000000;
    v74._countAndFlagsBits = 0;
    v62 = NSLocalizedString(_:tableName:bundle:value:comment:)(v60, (Swift::String_optional)0, (NSBundle)v59, v61, v74)._object;

    v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v62);
    objc_msgSend(v58, "setTitle:forState:", v63, 0);

    objc_msgSend(v58, "addTarget:action:forControlEvents:", v0, "useDefaultSettingsTapped", 64);
    v64 = objc_msgSend(v0, "buttonTray");
    objc_msgSend(v64, "addButton:", v58);

  }
  else
  {
    __break(1u);
  }
}

id sub_10000B818(char a1)
{
  char *v1;
  id result;
  objc_super v4;

  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for BuddyMultitaskingController();
  objc_msgSendSuper2(&v4, "viewDidAppear:", a1 & 1);
  result = *(id *)&v1[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_paneFeatureAnalyticsManager];
  if (result)
  {
    objc_msgSend(result, "clearActionForFeature:", 16);
    result = *(id *)&v1[OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_analyticsManager];
    if (result)
      return objc_msgSend(result, "setChildMultitaskingSetupEventBlock:", 0);
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_10000B8E0()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  void *v13;
  Class isa;
  NSString v15;
  void *v16;
  Class v17;
  NSString v18;
  void *v19;
  Class v20;
  NSString v21;
  void *v22;
  Class v23;
  NSString v24;
  id v25;
  _QWORD v26[5];
  uint64_t v27;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_delegate);
  if (!v1)
    return;
  v2 = objc_allocWithZone((Class)NSNumber);
  swift_unknownObjectRetain(v1, v3);
  v4 = objc_msgSend(v2, "initWithInteger:", 1);
  v5 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_paneFeatureAnalyticsManager);
  if (!v5)
  {
    __break(1u);
    goto LABEL_9;
  }
  objc_msgSend(v5, "recordActionWithValue:forFeature:", v4, 16);
  v6 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_analyticsManager);
  if (!v6)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v7 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_childAge);
  v8 = swift_allocObject(&unk_10027F1F8, 24, 7);
  *(_QWORD *)(v8 + 16) = v7;
  v26[4] = sub_10000C8D4;
  v27 = v8;
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 1107296256;
  v26[2] = sub_10000BC60;
  v26[3] = &unk_10027F210;
  v9 = _Block_copy(v26);
  v10 = v27;
  v11 = v7;
  v12 = v6;
  swift_release(v10);
  objc_msgSend(v12, "setChildMultitaskingSetupEventBlock:", v9);
  _Block_release(v9);

  if (qword_1002E9D20 != -1)
    swift_once(&qword_1002E9D20, sub_10002B8DC);
  v13 = (void *)qword_1002EED58;
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "setValue:forKey:", isa, v15);

  v16 = (void *)qword_1002EED58;
  v17 = Bool._bridgeToObjectiveC()().super.super.isa;
  v18 = String._bridgeToObjectiveC()();
  objc_msgSend(v16, "setValue:forKey:", v17, v18);

  v19 = (void *)qword_1002EED58;
  v20 = Bool._bridgeToObjectiveC()().super.super.isa;
  v21 = String._bridgeToObjectiveC()();
  objc_msgSend(v19, "setValue:forKey:", v20, v21);

  v22 = (void *)qword_1002EED58;
  v23 = Bool._bridgeToObjectiveC()().super.super.isa;
  v24 = String._bridgeToObjectiveC()();
  objc_msgSend(v22, "setValue:forKey:", v23, v24);

  v25 = objc_msgSend(objc_allocWithZone((Class)BYMultitaskingGestures), "init");
  objc_msgSend(v25, "setMultitaskingWasTurnedOff:", 1);

  objc_msgSend(v1, "flowItemDone:", v0);
  swift_unknownObjectRelease(v1);

}

id sub_10000BBF8(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", 1);
  v3 = objc_msgSend(objc_allocWithZone((Class)BMSystemSettingsChildMultitaskingSetup), "initWithEnabled:age:", v2, a1);

  return v3;
}

id sub_10000BC60(uint64_t a1)
{
  uint64_t (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v4 = (void *)v1(v3);
  swift_release(v2);
  return v4;
}

void sub_10000BCCC()
{
  uint64_t v0;
  void *v1;
  id v2;
  uint64_t v3;
  id v4;
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  id v11;
  id v12;
  id v13;
  void *v14;
  NSString v15;
  void *v16;
  NSString v17;
  void *v18;
  NSString v19;
  void *v20;
  NSString v21;
  id v22;
  _QWORD v23[5];
  uint64_t v24;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_delegate);
  if (!v1)
    return;
  v2 = objc_allocWithZone((Class)NSNumber);
  swift_unknownObjectRetain(v1, v3);
  v4 = objc_msgSend(v2, "initWithInteger:", 0);
  v5 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_paneFeatureAnalyticsManager);
  if (!v5)
  {
    __break(1u);
    goto LABEL_9;
  }
  objc_msgSend(v5, "recordActionWithValue:forFeature:", v4, 16);
  v6 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_analyticsManager);
  if (!v6)
  {
LABEL_9:
    __break(1u);
    return;
  }
  v7 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_childAge);
  v8 = swift_allocObject(&unk_10027F1A8, 32, 7);
  *(_QWORD *)(v8 + 16) = v4;
  *(_QWORD *)(v8 + 24) = v7;
  v23[4] = sub_10000C878;
  v24 = v8;
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1107296256;
  v23[2] = sub_10000BC60;
  v23[3] = &unk_10027F1C0;
  v9 = _Block_copy(v23);
  v10 = v24;
  v11 = v7;
  v12 = v6;
  v13 = v4;
  swift_release(v10);
  objc_msgSend(v12, "setChildMultitaskingSetupEventBlock:", v9);
  _Block_release(v9);

  if (qword_1002E9D20 != -1)
    swift_once(&qword_1002E9D20, sub_10002B8DC);
  v14 = (void *)qword_1002EED58;
  v15 = String._bridgeToObjectiveC()();
  objc_msgSend(v14, "removeObjectForKey:", v15);

  v16 = (void *)qword_1002EED58;
  v17 = String._bridgeToObjectiveC()();
  objc_msgSend(v16, "removeObjectForKey:", v17);

  v18 = (void *)qword_1002EED58;
  v19 = String._bridgeToObjectiveC()();
  objc_msgSend(v18, "removeObjectForKey:", v19);

  v20 = (void *)qword_1002EED58;
  v21 = String._bridgeToObjectiveC()();
  objc_msgSend(v20, "removeObjectForKey:", v21);

  v22 = objc_msgSend(objc_allocWithZone((Class)BYMultitaskingGestures), "init");
  objc_msgSend(v22, "setMultitaskingWasTurnedOff:", 0);

  objc_msgSend(v1, "flowItemDone:", v0);
  swift_unknownObjectRelease(v1);

}

uint64_t sub_10000C028(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + *a4);
  *(_QWORD *)(a1 + *a4) = a3;
  swift_unknownObjectRetain(a3, a2);
  return swift_unknownObjectRelease(v4);
}

uint64_t sub_10000C0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t result;
  uint64_t v7;
  id v8;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_runState);
  if (!v3)
    return 0;
  if ((objc_msgSend((id)swift_unknownObjectRetain(*(_QWORD *)(v2 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_runState), a2), "hasCompletedInitialRun") & 1) != 0)
  {
    v4 = 0;
LABEL_6:
    swift_unknownObjectRelease(v3);
    return (uint64_t)v4;
  }
  v5 = objc_msgSend((id)objc_opt_self(BYDevice), "currentDevice");
  v4 = objc_msgSend(v5, "type");

  if ((unint64_t)v4 <= 1)
    goto LABEL_6;
  type metadata accessor for BYDeviceType(0);
  v8 = v4;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v7, &v8, v7, &type metadata for Int);
  __break(1u);
  return result;
}

uint64_t sub_10000C1F4(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  void *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD aBlock[5];
  _QWORD *v28;

  v22 = a1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v25 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v23 = *(_QWORD *)(v7 - 8);
  v24 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C6E8();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.userInitiated(_:), v10);
  v14 = (void *)static OS_dispatch_queue.global(qos:)(v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v15 = (_QWORD *)swift_allocObject(&unk_10027F158, 40, 7);
  v15[2] = v22;
  v15[3] = a2;
  v15[4] = v2;
  aBlock[4] = sub_10000C750;
  v28 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002434C;
  aBlock[3] = &unk_10027F170;
  v16 = _Block_copy(aBlock);
  swift_retain(a2);
  static DispatchQoS.unspecified.getter(v2);
  v26 = _swiftEmptyArrayStorage;
  v17 = sub_10000C774();
  v18 = sub_10000A9E4((uint64_t *)&unk_1002EA380);
  v19 = sub_10000C7BC();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v18, v19, v4, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v16);
  _Block_release(v16);

  (*(void (**)(char *, uint64_t))(v25 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v24);
  return swift_release(v28);
}

void sub_10000C440(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t *v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;

  v5 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  v6 = objc_msgSend(v5, "aa_primaryAppleAccount");
  if (v6)
  {
    v17 = v6;
    v7 = objc_msgSend(v6, "aa_firstName");
    if (v7)
    {
      v8 = v7;
      v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      v11 = v10;

    }
    else
    {
      v9 = 0;
      v11 = 0;
    }
    v13 = (uint64_t *)(a3 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_name);
    v14 = *(_QWORD *)(a3 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_name + 8);
    *v13 = v9;
    v13[1] = v11;
    swift_bridgeObjectRelease(v14);
    v15 = sub_10001309C();
    v16 = *(void **)(a3 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_childAge);
    *(_QWORD *)(a3 + OBJC_IVAR____TtC5Setup27BuddyMultitaskingController_childAge) = v15;

    a1(1);
    v12 = v17;
  }
  else
  {
    a1(1);
    v12 = v5;
  }

}

id sub_10000C60C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyMultitaskingController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BuddyMultitaskingController()
{
  return objc_opt_self(_TtC5Setup27BuddyMultitaskingController);
}

unint64_t sub_10000C6E8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002EA370;
  if (!qword_1002EA370)
  {
    v1 = objc_opt_self(OS_dispatch_queue);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002EA370);
  }
  return result;
}

uint64_t sub_10000C724()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

void sub_10000C750()
{
  uint64_t v0;

  sub_10000C440(*(void (**)(uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_10000C75C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000C76C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

unint64_t sub_10000C774()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002EA5E0;
  if (!qword_1002EA5E0)
  {
    v1 = type metadata accessor for DispatchWorkItemFlags(255);
    result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_1002EA5E0);
  }
  return result;
}

unint64_t sub_10000C7BC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002EA5F0;
  if (!qword_1002EA5F0)
  {
    v1 = sub_10000C808((uint64_t *)&unk_1002EA380);
    result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1002EA5F0);
  }
  return result;
}

uint64_t sub_10000C808(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = swift_getTypeByMangledNameInContextInMetadataState2(255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t sub_10000C84C()
{
  uint64_t v0;

  return swift_deallocObject(v0, 32, 7);
}

id sub_10000C878()
{
  uint64_t v0;

  return objc_msgSend(objc_allocWithZone((Class)BMSystemSettingsChildMultitaskingSetup), "initWithEnabled:age:", *(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t sub_10000C8B0()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_10000C8D4()
{
  uint64_t v0;

  return sub_10000BBF8(*(_QWORD *)(v0 + 16));
}

uint64_t sub_10000C8DC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000C900(char a1)
{
  uint64_t v1;

  return sub_100030920(a1, *(_QWORD *)(v1 + 16));
}

unint64_t sub_10000C908()
{
  unint64_t result;

  result = qword_1002EA600;
  if (!qword_1002EA600)
  {
    result = swift_getWitnessTable(&protocol conformance descriptor for String, &type metadata for String);
    atomic_store(result, (unint64_t *)&qword_1002EA600);
  }
  return result;
}

uint64_t IntelligenceStateProvider.isEnabled()()
{
  return swift_task_switch(sub_10000C970, 0, 0);
}

uint64_t sub_10000C970()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)objc_opt_self(CSFFeatureManager);
  v0[7] = v0 + 16;
  v0[2] = v0;
  v0[3] = sub_10000CA18;
  v3 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_10000CAC8;
  v4[3] = &unk_10027F260;
  v4[4] = v3;
  objc_msgSend(v2, "getGMOptInToggleWithCompletion:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_10000CA18()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 120) = v1;
  if (v1)
    v2 = sub_10000CA88;
  else
    v2 = sub_10000CA78;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10000CA78()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(unsigned __int8 *)(v0 + 128));
}

uint64_t sub_10000CA88()
{
  uint64_t v0;

  swift_willThrow();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(0);
}

uint64_t sub_10000CAC8(uint64_t a1, char a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_10000A9E4((uint64_t *)&unk_1002EAC40);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    **(_BYTE **)(*(_QWORD *)(v3 + 64) + 40) = a2;
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_10000CC64(const void *a1, void *a2)
{
  uint64_t v2;
  id v4;

  *(_QWORD *)(v2 + 120) = a2;
  *(_QWORD *)(v2 + 128) = _Block_copy(a1);
  v4 = a2;
  return swift_task_switch(sub_10000CCAC, 0, 0);
}

uint64_t sub_10000CCAC()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)objc_opt_self(CSFFeatureManager);
  v0[7] = v0 + 18;
  v0[2] = v0;
  v0[3] = sub_10000CD54;
  v3 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_10000CAC8;
  v4[3] = &unk_10027F2F0;
  v4[4] = v3;
  objc_msgSend(v2, "getGMOptInToggleWithCompletion:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_10000CD54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)();

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 136) = v1;
  if (v1)
    v2 = sub_10000CE04;
  else
    v2 = sub_10000CDB4;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10000CDB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(unsigned __int8 *)(v0 + 144);

  (*(void (**)(uint64_t, uint64_t, _QWORD))(v1 + 16))(v1, v2, 0);
  _Block_release(*(const void **)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10000CE04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v1 = *(_QWORD *)(v0 + 128);
  v2 = *(_QWORD *)(v0 + 136);
  v3 = *(void **)(v0 + 120);
  swift_willThrow();

  v4 = (void *)_convertErrorToNSError(_:)(v2);
  swift_errorRelease(v2);
  (*(void (**)(uint64_t, _QWORD, void *))(v1 + 16))(v1, 0, v4);

  _Block_release(*(const void **)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id IntelligenceStateProvider.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id IntelligenceStateProvider.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IntelligenceStateProvider();
  return objc_msgSendSuper2(&v2, "init");
}

uint64_t type metadata accessor for IntelligenceStateProvider()
{
  return objc_opt_self(_TtC5Setup25IntelligenceStateProvider);
}

id IntelligenceStateProvider.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IntelligenceStateProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10000CF60()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000CF8C()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1002EA3CC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10000CFF0;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1002EA3C8 + dword_1002EA3C8))(v2, v3);
}

uint64_t sub_10000CFF0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;

  v4 = *v0;
  v1 = *(_QWORD *)(v4 + 16);
  v2 = *v0;
  v4 = v2;
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10000D040()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

id sub_10000D1C8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyAppStateManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BuddyAppStateManager()
{
  return objc_opt_self(_TtC5Setup20BuddyAppStateManager);
}

Swift::Int sub_10000D218(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  Swift::Int result;
  int64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  unint64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  int64_t v26;
  char v27;
  unint64_t v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  int64_t v37;
  _QWORD *v38;
  __int128 v39;
  _QWORD v40[9];

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000A9E4(&qword_1002EA408);
  v7 = a2;
  v8 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v9 = v8;
  if (*(_QWORD *)(v5 + 16))
  {
    v36 = v3;
    v10 = 1 << *(_BYTE *)(v5 + 32);
    v38 = (_QWORD *)(v5 + 64);
    if (v10 < 64)
      v11 = ~(-1 << v10);
    else
      v11 = -1;
    v12 = v11 & *(_QWORD *)(v5 + 64);
    v37 = (unint64_t)(v10 + 63) >> 6;
    v13 = v8 + 64;
    result = swift_retain(v5);
    v15 = 0;
    while (1)
    {
      if (v12)
      {
        v22 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        v23 = v22 | (v15 << 6);
      }
      else
      {
        v24 = v15 + 1;
        if (__OFADD__(v15, 1))
        {
LABEL_42:
          __break(1u);
LABEL_43:
          __break(1u);
          return result;
        }
        if (v24 >= v37)
          goto LABEL_36;
        v25 = v38[v24];
        ++v15;
        if (!v25)
        {
          v15 = v24 + 1;
          if (v24 + 1 >= v37)
            goto LABEL_36;
          v25 = v38[v15];
          if (!v25)
          {
            v26 = v24 + 2;
            if (v26 >= v37)
            {
LABEL_36:
              swift_release(v5);
              v3 = v36;
              if ((v7 & 1) != 0)
              {
                v35 = 1 << *(_BYTE *)(v5 + 32);
                if (v35 >= 64)
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
                else
                  *v38 = -1 << v35;
                *(_QWORD *)(v5 + 16) = 0;
              }
              break;
            }
            v25 = v38[v26];
            if (!v25)
            {
              while (1)
              {
                v15 = v26 + 1;
                if (__OFADD__(v26, 1))
                  goto LABEL_43;
                if (v15 >= v37)
                  goto LABEL_36;
                v25 = v38[v15];
                ++v26;
                if (v25)
                  goto LABEL_33;
              }
            }
            v15 = v26;
          }
        }
LABEL_33:
        v12 = (v25 - 1) & v25;
        v23 = __clz(__rbit64(v25)) + (v15 << 6);
      }
      v31 = 16 * v23;
      v32 = (uint64_t *)(*(_QWORD *)(v5 + 48) + v31);
      v34 = *v32;
      v33 = v32[1];
      v39 = *(_OWORD *)(*(_QWORD *)(v5 + 56) + v31);
      if ((v7 & 1) == 0)
      {
        swift_bridgeObjectRetain(v33);
        sub_10000E078(v39, *((unint64_t *)&v39 + 1));
      }
      Hasher.init(_seed:)(v40, *(_QWORD *)(v9 + 40));
      String.hash(into:)(v40, v34, v33);
      result = Hasher._finalize()();
      v16 = -1 << *(_BYTE *)(v9 + 32);
      v17 = result & ~v16;
      v18 = v17 >> 6;
      if (((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6))) != 0)
      {
        v19 = __clz(__rbit64((-1 << v17) & ~*(_QWORD *)(v13 + 8 * (v17 >> 6)))) | v17 & 0x7FFFFFFFFFFFFFC0;
      }
      else
      {
        v27 = 0;
        v28 = (unint64_t)(63 - v16) >> 6;
        do
        {
          if (++v18 == v28 && (v27 & 1) != 0)
          {
            __break(1u);
            goto LABEL_42;
          }
          v29 = v18 == v28;
          if (v18 == v28)
            v18 = 0;
          v27 |= v29;
          v30 = *(_QWORD *)(v13 + 8 * v18);
        }
        while (v30 == -1);
        v19 = __clz(__rbit64(~v30)) + (v18 << 6);
      }
      *(_QWORD *)(v13 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v19;
      v20 = 16 * v19;
      v21 = (_QWORD *)(*(_QWORD *)(v9 + 48) + v20);
      *v21 = v34;
      v21[1] = v33;
      *(_OWORD *)(*(_QWORD *)(v9 + 56) + v20) = v39;
      ++*(_QWORD *)(v9 + 16);
    }
  }
  result = swift_release(v5);
  *v3 = v9;
  return result;
}

uint64_t sub_10000D524(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  unint64_t v20;
  unint64_t v21;
  int64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _OWORD v38[2];
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v3 = v2;
  v5 = *v2;
  if (*(_QWORD *)(*v2 + 24) <= a1)
    v6 = a1;
  else
    v6 = *(_QWORD *)(*v2 + 24);
  sub_10000A9E4(&qword_1002EA418);
  v7 = static _DictionaryStorage.resize(original:capacity:move:)(v5, v6, a2);
  v8 = v7;
  if (!*(_QWORD *)(v5 + 16))
    goto LABEL_44;
  v9 = 1 << *(_BYTE *)(v5 + 32);
  v37 = v5 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v11 = v10 & *(_QWORD *)(v5 + 64);
  v12 = (unint64_t)(v9 + 63) >> 6;
  v13 = v7 + 64;
  result = swift_retain(v5);
  v15 = 0;
  while (1)
  {
    if (v11)
    {
      v20 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      v21 = v20 | (v15 << 6);
      goto LABEL_25;
    }
    v22 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
LABEL_45:
      __break(1u);
LABEL_46:
      __break(1u);
      return result;
    }
    if (v22 >= v12)
      break;
    v23 = (_QWORD *)(v5 + 64);
    v24 = *(_QWORD *)(v37 + 8 * v22);
    ++v15;
    if (!v24)
    {
      v15 = v22 + 1;
      if (v22 + 1 >= v12)
        goto LABEL_37;
      v24 = *(_QWORD *)(v37 + 8 * v15);
      if (!v24)
      {
        v25 = v22 + 2;
        if (v25 >= v12)
        {
LABEL_37:
          swift_release(v5);
          if ((a2 & 1) == 0)
            goto LABEL_44;
          goto LABEL_40;
        }
        v24 = *(_QWORD *)(v37 + 8 * v25);
        if (!v24)
        {
          while (1)
          {
            v15 = v25 + 1;
            if (__OFADD__(v25, 1))
              goto LABEL_46;
            if (v15 >= v12)
              goto LABEL_37;
            v24 = *(_QWORD *)(v37 + 8 * v15);
            ++v25;
            if (v24)
              goto LABEL_24;
          }
        }
        v15 = v25;
      }
    }
LABEL_24:
    v11 = (v24 - 1) & v24;
    v21 = __clz(__rbit64(v24)) + (v15 << 6);
LABEL_25:
    v26 = *(_QWORD *)(v5 + 48) + 40 * v21;
    if ((a2 & 1) != 0)
    {
      v27 = *(_OWORD *)v26;
      v28 = *(_OWORD *)(v26 + 16);
      v41 = *(_QWORD *)(v26 + 32);
      v39 = v27;
      v40 = v28;
      sub_10000E2E8((_OWORD *)(*(_QWORD *)(v5 + 56) + 32 * v21), v38);
    }
    else
    {
      sub_10000E270(v26, (uint64_t)&v39);
      sub_10000E2AC(*(_QWORD *)(v5 + 56) + 32 * v21, (uint64_t)v38);
    }
    result = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v8 + 40));
    v29 = -1 << *(_BYTE *)(v8 + 32);
    v30 = result & ~v29;
    v31 = v30 >> 6;
    if (((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6))) != 0)
    {
      v16 = __clz(__rbit64((-1 << v30) & ~*(_QWORD *)(v13 + 8 * (v30 >> 6)))) | v30 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v32 = 0;
      v33 = (unint64_t)(63 - v29) >> 6;
      do
      {
        if (++v31 == v33 && (v32 & 1) != 0)
        {
          __break(1u);
          goto LABEL_45;
        }
        v34 = v31 == v33;
        if (v31 == v33)
          v31 = 0;
        v32 |= v34;
        v35 = *(_QWORD *)(v13 + 8 * v31);
      }
      while (v35 == -1);
      v16 = __clz(__rbit64(~v35)) + (v31 << 6);
    }
    *(_QWORD *)(v13 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
    v17 = *(_QWORD *)(v8 + 48) + 40 * v16;
    v18 = v39;
    v19 = v40;
    *(_QWORD *)(v17 + 32) = v41;
    *(_OWORD *)v17 = v18;
    *(_OWORD *)(v17 + 16) = v19;
    result = (uint64_t)sub_10000E2E8(v38, (_OWORD *)(*(_QWORD *)(v8 + 56) + 32 * v16));
    ++*(_QWORD *)(v8 + 16);
  }
  swift_release(v5);
  v23 = (_QWORD *)(v5 + 64);
  if ((a2 & 1) == 0)
    goto LABEL_44;
LABEL_40:
  v36 = 1 << *(_BYTE *)(v5 + 32);
  if (v36 >= 64)
    bzero(v23, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8);
  else
    *v23 = -1 << v36;
  *(_QWORD *)(v5 + 16) = 0;
LABEL_44:
  result = swift_release(v5);
  *v3 = v8;
  return result;
}

void *sub_10000D838()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  __int128 v24;

  v1 = v0;
  sub_10000A9E4(&qword_1002EA408);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 16 * v15;
    v17 = (uint64_t *)(*(_QWORD *)(v2 + 48) + v16);
    v19 = *v17;
    v18 = v17[1];
    v24 = *(_OWORD *)(*(_QWORD *)(v2 + 56) + v16);
    v20 = (_QWORD *)(*(_QWORD *)(v4 + 48) + v16);
    *v20 = v19;
    v20[1] = v18;
    *(_OWORD *)(*(_QWORD *)(v4 + 56) + v16) = v24;
    swift_bridgeObjectRetain(v18);
    result = (void *)sub_10000E078(v24, *((unint64_t *)&v24 + 1));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10000D9FC()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *result;
  uint64_t v6;
  unint64_t v7;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  _OWORD v24[2];
  _OWORD v25[2];
  uint64_t v26;

  v1 = v0;
  sub_10000A9E4(&qword_1002EA418);
  v2 = *v0;
  v3 = static _DictionaryStorage.copy(original:)(*v0);
  v4 = v3;
  if (!*(_QWORD *)(v2 + 16))
  {
LABEL_26:
    result = (void *)swift_release(v2);
    *v1 = v4;
    return result;
  }
  result = (void *)(v3 + 64);
  v6 = v2 + 64;
  v7 = (unint64_t)((1 << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  if (v4 != v2 || (unint64_t)result >= v2 + 64 + 8 * v7)
    result = memmove(result, (const void *)(v2 + 64), 8 * v7);
  v9 = 0;
  *(_QWORD *)(v4 + 16) = *(_QWORD *)(v2 + 16);
  v10 = 1 << *(_BYTE *)(v2 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & *(_QWORD *)(v2 + 64);
  v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }
    v21 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v21 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      v9 = v21 + 1;
      if (v21 + 1 >= v13)
        goto LABEL_26;
      v22 = *(_QWORD *)(v6 + 8 * v9);
      if (!v22)
        break;
    }
LABEL_25:
    v12 = (v22 - 1) & v22;
    v15 = __clz(__rbit64(v22)) + (v9 << 6);
LABEL_12:
    v16 = 40 * v15;
    sub_10000E270(*(_QWORD *)(v2 + 48) + 40 * v15, (uint64_t)v25);
    v17 = 32 * v15;
    sub_10000E2AC(*(_QWORD *)(v2 + 56) + v17, (uint64_t)v24);
    v18 = *(_QWORD *)(v4 + 48) + v16;
    v19 = v25[0];
    v20 = v25[1];
    *(_QWORD *)(v18 + 32) = v26;
    *(_OWORD *)v18 = v19;
    *(_OWORD *)(v18 + 16) = v20;
    result = sub_10000E2E8(v24, (_OWORD *)(*(_QWORD *)(v4 + 56) + v17));
  }
  v23 = v21 + 2;
  if (v23 >= v13)
    goto LABEL_26;
  v22 = *(_QWORD *)(v6 + 8 * v23);
  if (v22)
  {
    v9 = v23;
    goto LABEL_25;
  }
  while (1)
  {
    v9 = v23 + 1;
    if (__OFADD__(v23, 1))
      break;
    if (v9 >= v13)
      goto LABEL_26;
    v22 = *(_QWORD *)(v6 + 8 * v9);
    ++v23;
    if (v22)
      goto LABEL_25;
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_10000DBE0()
{
  id v0;
  id v1;
  id v2;
  char **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v15;
  id v16;
  void *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t isUniquelyReferenced_nonNull_native;
  char v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL8 v40;
  uint64_t v41;
  char v42;
  unint64_t v43;
  char v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  void *result;
  uint64_t v52;
  id v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  void *v57;
  uint64_t v58;

  v0 = objc_msgSend((id)objc_opt_self(LSApplicationRecord), "enumeratorWithOptions:", 192);
  v1 = objc_msgSend(v0, "nextObject");
  if (!v1)
  {
LABEL_44:

    return &_swiftEmptyDictionarySingleton;
  }
  v2 = v1;
  v3 = &selRef_webView_decidePolicyForNavigationResponse_decisionHandler_;
  v4 = LSUserApplicationType;
  while (1)
  {
    while (1)
    {
      v7 = objc_msgSend(v2, v3[291], v52);
      if (v7)
        break;
      static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      v6 = v5;
LABEL_4:

      swift_bridgeObjectRelease(v6);
LABEL_5:
      v2 = objc_msgSend(v0, "nextObject");
      if (!v2)
        goto LABEL_44;
    }
    v8 = v7;
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    v11 = v10;

    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v6 = v13;
    if (!v11)
      goto LABEL_4;
    if (v9 == v12 && v11 == v13)
    {
      swift_bridgeObjectRelease_n(v11, 2);
    }
    else
    {
      v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v9, v11, v12, v13, 0);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v6);
      if ((v15 & 1) == 0)
      {

        goto LABEL_5;
      }
    }
    v16 = objc_msgSend(v2, "uniqueInstallIdentifier");
    if (v16)
    {
      v17 = v16;
      v18 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      v20 = v19;

    }
    else
    {
      v18 = 0;
      v20 = 0xC000000000000000;
    }
    v21 = objc_msgSend(v2, "identities");
    v22 = sub_10000E03C();
    v23 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v21, v22);

    if (!((unint64_t)v23 >> 62))
    {
      v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
      v52 = v4;
      v53 = v0;
      if (v24)
        break;
      goto LABEL_43;
    }
    v50 = v23 < 0 ? v23 : v23 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v23);
    v24 = _CocoaArrayWrapper.endIndex.getter(v50);
    swift_bridgeObjectRelease(v23);
    v52 = v4;
    v53 = v0;
    if (v24)
      break;
LABEL_43:
    swift_bridgeObjectRelease(v23);
    sub_10000E0BC(v18, v20);

    v0 = v53;
    v2 = objc_msgSend(v53, "nextObject");
    v3 = &selRef_webView_decidePolicyForNavigationResponse_decisionHandler_;
    v4 = v52;
    if (!v2)
      goto LABEL_44;
  }
  v55 = v23;
  v56 = v23 & 0xC000000000000001;
  v25 = 4;
  v54 = v24;
  while (1)
  {
    v27 = v25 - 4;
    if (!v56)
      break;
    v28 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v25 - 4, v23);
    v29 = v25 - 3;
    if (__OFADD__(v27, 1))
      goto LABEL_45;
LABEL_28:
    v57 = v28;
    v58 = v29;
    v30 = objc_msgSend(v28, "identityString", v52);
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    v33 = v32;

    v34 = v18;
    v35 = v20;
    sub_10000E078(v18, v20);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
    v38 = sub_10003259C(v31, v33);
    v39 = *((_QWORD *)&_swiftEmptyDictionarySingleton + 2);
    v40 = (v37 & 1) == 0;
    v41 = v39 + v40;
    if (__OFADD__(v39, v40))
      goto LABEL_46;
    v42 = v37;
    if (*((_QWORD *)&_swiftEmptyDictionarySingleton + 3) >= v41)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
        if ((v37 & 1) != 0)
          goto LABEL_21;
      }
      else
      {
        sub_10000D838();
        if ((v42 & 1) != 0)
          goto LABEL_21;
      }
    }
    else
    {
      sub_10000D218(v41, isUniquelyReferenced_nonNull_native);
      v43 = sub_10003259C(v31, v33);
      if ((v42 & 1) != (v44 & 1))
        goto LABEL_48;
      v38 = v43;
      if ((v42 & 1) != 0)
      {
LABEL_21:
        v26 = *((_QWORD *)&_swiftEmptyDictionarySingleton + 7) + 16 * v38;
        sub_10000E0BC(*(_QWORD *)v26, *(_QWORD *)(v26 + 8));
        v18 = v34;
        *(_QWORD *)v26 = v34;
        *(_QWORD *)(v26 + 8) = v35;
        v20 = v35;
        goto LABEL_22;
      }
    }
    *((_QWORD *)&_swiftEmptyDictionarySingleton + (v38 >> 6) + 8) |= 1 << v38;
    v45 = (uint64_t *)(*((_QWORD *)&_swiftEmptyDictionarySingleton + 6) + 16 * v38);
    *v45 = v31;
    v45[1] = v33;
    v46 = (uint64_t *)(*((_QWORD *)&_swiftEmptyDictionarySingleton + 7) + 16 * v38);
    *v46 = v34;
    v46[1] = v35;
    v47 = *((_QWORD *)&_swiftEmptyDictionarySingleton + 2);
    v48 = __OFADD__(v47, 1);
    v49 = v47 + 1;
    if (v48)
      goto LABEL_47;
    v18 = v34;
    v20 = v35;
    *((_QWORD *)&_swiftEmptyDictionarySingleton + 2) = v49;
    swift_bridgeObjectRetain(v33);
LABEL_22:

    swift_bridgeObjectRelease(v33);
    swift_bridgeObjectRelease(0x8000000000000000);
    ++v25;
    v23 = v55;
    if (v58 == v54)
      goto LABEL_43;
  }
  v28 = *(id *)(v23 + 8 * v25);
  v29 = v25 - 3;
  if (!__OFADD__(v27, 1))
    goto LABEL_28;
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

unint64_t sub_10000E03C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002EA400;
  if (!qword_1002EA400)
  {
    v1 = objc_opt_self(LSApplicationIdentity);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002EA400);
  }
  return result;
}

uint64_t sub_10000E078(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain(result);
  }
  return swift_retain(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000E0BC(uint64_t result, unint64_t a2)
{
  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release(result);
  }
  return swift_release(a2 & 0x3FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10000E100(void *a1)
{
  NSString v2;
  id v3;
  uint64_t v4;
  uint64_t v6;
  _OWORD v7[2];
  _BYTE v8[24];
  uint64_t v9;

  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(a1, "objectForKey:", v2);

  if (v3)
  {
    _bridgeAnyObjectToAny(_:)(v3);
    swift_unknownObjectRelease(v3);
  }
  else
  {
    memset(v7, 0, sizeof(v7));
  }
  sub_10000E1E8((uint64_t)v7, (uint64_t)v8);
  if (v9)
  {
    v4 = sub_10000A9E4(&qword_1002EA410);
    if (swift_dynamicCast(&v6, v8, (char *)&type metadata for Any + 8, v4, 6))
      return v6;
    else
      return 0;
  }
  else
  {
    sub_10000E230((uint64_t)v8);
    return 0;
  }
}

uint64_t sub_10000E1E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A9E4((uint64_t *)&unk_1002EAC60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_10000E230(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000A9E4((uint64_t *)&unk_1002EAC60);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10000E270(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(&type metadata for AnyHashable - 1) + 16))(a2, a1);
  return a2;
}

uint64_t sub_10000E2AC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

_OWORD *sub_10000E2E8(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

id sub_10000E484()
{
  uint64_t v0;
  id result;
  void *v2;
  id v3;
  NSString v4;
  unsigned int v5;

  result = *(id *)(v0 + OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_deviceProvider);
  if (!result)
  {
    __break(1u);
    goto LABEL_7;
  }
  result = objc_msgSend(result, "hasCameraButton");
  if (!(_DWORD)result)
    return result;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_buddyPreferences);
  if (!v2)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "BOOLForKey:", v4);

  return (id)(v5 ^ 1);
}

id sub_10000E5B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  id v6;
  uint64_t v7;

  v3 = OBJC_IVAR____TtC5Setup27BuddyCameraButtonController____lazy_storage___cachedWrapper;
  v4 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5Setup27BuddyCameraButtonController____lazy_storage___cachedWrapper);
  if (v4)
  {
    v5 = *(id *)(v2 + OBJC_IVAR____TtC5Setup27BuddyCameraButtonController____lazy_storage___cachedWrapper);
  }
  else
  {
    v6 = objc_msgSend(objc_allocWithZone((Class)BuddyCameraButtonViewControllerWrapper), "init");
    objc_msgSend(v6, "setDelegate:", v2);
    v7 = *(_QWORD *)(v2 + v3);
    *(_QWORD *)(v2 + v3) = v6;
    v5 = v6;
    swift_unknownObjectRelease(v7);
    v4 = 0;
  }
  swift_unknownObjectRetain(v4, a2);
  return v5;
}

void sub_10000E638(void *a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5;
  uint64_t Strong;
  char *v7;
  objc_class *v8;
  char *v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  objc_super v14;
  _BYTE v15[24];

  v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v15, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v5);
  if (Strong)
  {
    v7 = (char *)Strong;
    v8 = (objc_class *)type metadata accessor for BuddyCameraButtonController.EnclosingViewController();
    v9 = (char *)objc_allocWithZone(v8);
    *(_QWORD *)&v9[OBJC_IVAR____TtCC5Setup27BuddyCameraButtonController23EnclosingViewController_enclosedViewController] = a1;
    v14.receiver = v9;
    v14.super_class = v8;
    v10 = a1;
    v11 = objc_msgSendSuper2(&v14, "initWithNibName:bundle:", 0, 0);
    v12 = *(void **)&v7[OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_cachedViewController];
    *(_QWORD *)&v7[OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_cachedViewController] = v11;
    v13 = v11;

    a3();
  }
}

void sub_10000E700(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

void sub_10000E898()
{
  char *v0;
  void *v1;
  id v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  id v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  Class isa;
  objc_super v41;

  v41.receiver = v0;
  v41.super_class = (Class)type metadata accessor for BuddyCameraButtonController.EnclosingViewController();
  objc_msgSendSuper2(&v41, "viewDidLoad");
  v1 = *(void **)&v0[OBJC_IVAR____TtCC5Setup27BuddyCameraButtonController23EnclosingViewController_enclosedViewController];
  objc_msgSend(v0, "addChildViewController:", v1);
  v2 = objc_msgSend(v0, "view");
  if (!v2)
  {
    __break(1u);
    goto LABEL_14;
  }
  v3 = v2;
  v4 = objc_msgSend(v1, "view");
  if (!v4)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v5 = v4;
  objc_msgSend(v3, "addSubview:", v4);

  objc_msgSend(v1, "didMoveToParentViewController:", v0);
  v6 = objc_msgSend(v1, "view");
  if (!v6)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  v7 = v6;
  objc_msgSend(v6, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

  v8 = sub_10000A9E4(&qword_1002EA500);
  v9 = swift_allocObject(v8, 64, 7);
  *(_OWORD *)(v9 + 16) = xmmword_10024C560;
  v10 = objc_msgSend(v1, "view");
  if (!v10)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  v11 = v10;
  v12 = objc_msgSend(v10, "topAnchor");

  v13 = objc_msgSend(v0, "view");
  if (!v13)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  v14 = v13;
  v15 = objc_msgSend(v13, "topAnchor");

  v16 = objc_msgSend(v12, "constraintEqualToAnchor:", v15);
  *(_QWORD *)(v9 + 32) = v16;
  v17 = objc_msgSend(v1, "view");
  if (!v17)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v18 = v17;
  v19 = objc_msgSend(v17, "leftAnchor");

  v20 = objc_msgSend(v0, "view");
  if (!v20)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v21 = v20;
  v22 = objc_msgSend(v20, "leftAnchor");

  v23 = objc_msgSend(v19, "constraintEqualToAnchor:", v22);
  *(_QWORD *)(v9 + 40) = v23;
  v24 = objc_msgSend(v1, "view");
  if (!v24)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v25 = v24;
  v26 = objc_msgSend(v24, "widthAnchor");

  v27 = objc_msgSend(v0, "view");
  if (!v27)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  v28 = v27;
  v29 = objc_msgSend(v27, "widthAnchor");

  v30 = objc_msgSend(v26, "constraintEqualToAnchor:", v29);
  *(_QWORD *)(v9 + 48) = v30;
  v31 = objc_msgSend(v1, "view");
  if (!v31)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v32 = v31;
  v33 = objc_msgSend(v31, "heightAnchor");

  v34 = objc_msgSend(v0, "view");
  if (v34)
  {
    v35 = v34;
    v36 = (void *)objc_opt_self(NSLayoutConstraint);
    v37 = objc_msgSend(v35, "heightAnchor");

    v38 = objc_msgSend(v33, "constraintEqualToAnchor:", v37);
    *(_QWORD *)(v9 + 56) = v38;
    specialized Array._endMutation()();
    v39 = v9;
    sub_10000EE0C();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v39);
    objc_msgSend(v36, "activateConstraints:", isa);

    return;
  }
LABEL_23:
  __break(1u);
}

id sub_10000ED0C()
{
  return sub_10000ED34(type metadata accessor for BuddyCameraButtonController.EnclosingViewController);
}

id sub_10000ED28()
{
  return sub_10000ED34(type metadata accessor for BuddyCameraButtonController);
}

id sub_10000ED34(uint64_t (*a1)(void))
{
  void *v1;
  objc_super v3;

  v3.receiver = v1;
  v3.super_class = (Class)a1();
  return objc_msgSendSuper2(&v3, "dealloc");
}

uint64_t type metadata accessor for BuddyCameraButtonController()
{
  return objc_opt_self(_TtC5Setup27BuddyCameraButtonController);
}

uint64_t type metadata accessor for BuddyCameraButtonController.EnclosingViewController()
{
  return objc_opt_self(_TtCC5Setup27BuddyCameraButtonController23EnclosingViewController);
}

unint64_t sub_10000EE0C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002EAB30;
  if (!qword_1002EAB30)
  {
    v1 = objc_opt_self(NSLayoutConstraint);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002EAB30);
  }
  return result;
}

uint64_t sub_10000EE48(uint64_t a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  id v9;
  uint64_t v10;
  _QWORD *v11;
  void *v12;
  _QWORD *v13;
  _QWORD v15[5];
  _QWORD *v16;

  v4 = swift_allocObject(&unk_10027F318, 24, 7);
  *(_QWORD *)(v4 + 16) = a2;
  v5 = swift_allocObject(&unk_10027F340, 32, 7);
  *(_QWORD *)(v5 + 16) = sub_10000F0C0;
  *(_QWORD *)(v5 + 24) = v4;
  v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_cachedViewController);
  swift_retain_n(v4, 2);
  v7 = _Block_copy(a2);
  if (v6)
  {
    a2[2](a2, 1);
    swift_release(v4);
    swift_release(v5);
  }
  else
  {
    v9 = sub_10000E5B0((uint64_t)v7, v8);
    v10 = swift_allocObject(&unk_10027F368, 24, 7);
    swift_unknownObjectWeakInit(v10 + 16, a1);
    v11 = (_QWORD *)swift_allocObject(&unk_10027F390, 40, 7);
    v11[2] = v10;
    v11[3] = sub_10000F0EC;
    v11[4] = v5;
    v15[4] = sub_10000F160;
    v16 = v11;
    v15[0] = _NSConcreteStackBlock;
    v15[1] = 1107296256;
    v15[2] = sub_10000E700;
    v15[3] = &unk_10027F3A8;
    v12 = _Block_copy(v15);
    v13 = v16;
    swift_retain(v5);
    swift_release(v13);
    objc_msgSend(v9, "createViewController:", v12);
    _Block_release(v12);
    swift_release(v4);
    swift_release(v5);
    swift_unknownObjectRelease(v9);
  }
  return swift_release(v4);
}

void sub_10000EFF0()
{
  uint64_t v0;
  void *v1;
  id v2;
  Class isa;
  NSString v4;
  void *v5;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_buddyPreferences);
  if (v1)
  {
    v2 = v1;
    isa = Bool._bridgeToObjectiveC()().super.super.isa;
    v4 = String._bridgeToObjectiveC()();
    objc_msgSend(v2, "setObject:forKey:", isa, v4);

    v5 = *(void **)(v0 + OBJC_IVAR____TtC5Setup27BuddyCameraButtonController_delegate);
    if (v5)
    {
      objc_msgSend(v5, "flowItemDone:", v0);
      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10000F09C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000F0C0(char a1)
{
  uint64_t v1;

  return sub_100030920(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10000F0C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000F0EC()
{
  uint64_t v0;

  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1);
}

uint64_t sub_10000F110()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10000F134()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10000F160(void *a1)
{
  uint64_t v1;

  sub_10000E638(a1, *(_QWORD *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

uint64_t sub_10000F16C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10000F17C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t IntelligenceServerControlProvider.isFeatureEnabled()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t (__cdecl *v3)();

  v3 = (uint64_t (__cdecl *)())((char *)&dword_1002EA510 + dword_1002EA510);
  v1 = (_QWORD *)swift_task_alloc(unk_1002EA514);
  *(_QWORD *)(v0 + 16) = v1;
  *v1 = v0;
  v1[1] = sub_10000F1DC;
  return v3();
}

uint64_t sub_10000F1DC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 16));
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t sub_10000F22C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[32];

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_10000A9E4((uint64_t *)&unk_1002EAC40);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    if (a2)
    {
      *((_QWORD *)&v14 + 1) = swift_getObjectType(a2);
      *(_QWORD *)&v13 = a2;
    }
    else
    {
      v13 = 0u;
      v14 = 0u;
    }
    sub_10000E1E8((uint64_t)&v13, (uint64_t)v15);
    v11 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
    swift_unknownObjectRetain(a2, v12);
    sub_10000E1E8((uint64_t)v15, v11);
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_10000F418(const void *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t (__cdecl *v4)();

  *(_QWORD *)(v1 + 16) = _Block_copy(a1);
  v4 = (uint64_t (__cdecl *)())((char *)&dword_1002EA510 + dword_1002EA510);
  v2 = (_QWORD *)swift_task_alloc(unk_1002EA514);
  *(_QWORD *)(v1 + 24) = v2;
  *v2 = v1;
  v2[1] = sub_10000F478;
  return v4();
}

uint64_t sub_10000F478(char a1)
{
  uint64_t *v1;
  void (**v3)(_QWORD, _QWORD);
  uint64_t v5;

  v3 = *(void (***)(_QWORD, _QWORD))(*v1 + 16);
  v5 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 24));
  v3[2](v3, a1 & 1);
  _Block_release(v3);
  return (*(uint64_t (**)(void))(v5 + 8))();
}

id IntelligenceServerControlProvider.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id IntelligenceServerControlProvider.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IntelligenceServerControlProvider();
  return objc_msgSendSuper2(&v2, "init");
}

id IntelligenceServerControlProvider.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IntelligenceServerControlProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10000F598()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for Logger(0);
  v0[26] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[27] = v2;
  v3 = (*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[28] = swift_task_alloc(v3);
  v0[29] = swift_task_alloc(v3);
  v0[30] = swift_task_alloc(v3);
  v0[31] = swift_task_alloc(v3);
  return swift_task_switch(sub_10000F61C, 0, 0);
}

uint64_t sub_10000F61C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  NSString v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;

  v1 = v0[31];
  v2 = v0[26];
  v3 = v0[27];
  v4 = objc_msgSend(objc_allocWithZone((Class)AKURLBag), "init");
  v0[32] = v4;
  v5 = String._bridgeToObjectiveC()();
  v0[33] = v5;
  v6 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v5);
  v0[34] = v6;
  v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[35] = v7;
  v8 = v7(v1, v6, v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Checking intelligence bag", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }
  v12 = v0 + 2;
  v13 = v0[31];
  v14 = v0[26];
  v15 = v0[27];

  v16 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v0[36] = v16;
  v16(v13, v14);
  v0[7] = v0 + 19;
  v0[2] = v0;
  v0[3] = sub_10000F7C4;
  v17 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v18 = v0 + 10;
  v18[1] = 0x40000000;
  v18[2] = sub_10000F22C;
  v18[3] = &unk_10027F448;
  v18[4] = v17;
  objc_msgSend(v4, "configurationValueForKey:fromCache:completion:", v5, 1, v18);
  return swift_continuation_await(v12);
}

uint64_t sub_10000F7C4()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 296) = v1;
  if (v1)
    v2 = sub_10000FA00;
  else
    v2 = sub_10000F824;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_10000F824()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  NSObject *v10;
  id *v11;
  void *v12;
  void *v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  sub_10000E1E8(v0 + 152, v0 + 120);
  if (!*(_QWORD *)(v0 + 144))
  {
    v12 = *(void **)(v0 + 264);

    sub_10000E230(v0 + 120);
LABEL_7:
    v5 = 0;
    goto LABEL_10;
  }
  if ((swift_dynamicCast(v0 + 308, v0 + 120, (char *)&type metadata for Any + 8, &type metadata for Bool, 6) & 1) == 0)
  {
    v13 = *(void **)(v0 + 264);

    goto LABEL_7;
  }
  v1 = *(_QWORD *)(v0 + 272);
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
  v3 = *(_QWORD *)(v0 + 240);
  v4 = *(_QWORD *)(v0 + 208);
  v5 = *(unsigned __int8 *)(v0 + 308);

  v6 = v2(v3, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v9 = 67109120;
    *(_DWORD *)(v0 + 304) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 308, v9 + 4, v9 + 8);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "intelligence value in bag: %{BOOL}d", v9, 8u);
    swift_slowDealloc(v9, -1, -1);
    v10 = *(NSObject **)(v0 + 264);
    v11 = (id *)(v0 + 256);
  }
  else
  {
    v11 = (id *)(v0 + 264);
    v10 = v7;
    v7 = *(NSObject **)(v0 + 256);
  }
  v14 = *(void (**)(uint64_t, uint64_t))(v0 + 288);
  v15 = *(_QWORD *)(v0 + 240);
  v16 = *(_QWORD *)(v0 + 208);

  v14(v15, v16);
LABEL_10:
  v17 = *(_QWORD *)(v0 + 240);
  v19 = *(_QWORD *)(v0 + 224);
  v18 = *(_QWORD *)(v0 + 232);
  swift_task_dealloc(*(_QWORD *)(v0 + 248));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

uint64_t sub_10000FA00(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;
  void **v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  char v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  NSObject *v26;
  uint64_t v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint8_t *v30;
  _DWORD *v31;
  id v32;
  uint8_t *v33;
  NSObject *v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void (*v39)(uint64_t, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject **v45;
  uint8_t *buf;

  v2 = *(_QWORD *)(v1 + 296);
  v3 = *(void **)(v1 + 264);
  swift_willThrow(a1);

  *(_QWORD *)(v1 + 184) = v2;
  v4 = (id *)(v1 + 192);
  v5 = sub_10000A9E4((uint64_t *)&unk_1002EAC40);
  v6 = sub_10000FEE0();
  result = swift_dynamicCast(v1 + 192, v1 + 184, v5, v6, 0);
  if ((result & 1) != 0)
  {
    v8 = (void **)(v1 + 264);
    v9 = *v4;
    v10 = objc_msgSend(*v4, "domain");
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(AKAppleIDAuthenticationErrorDomain);
    if (v11 == v14 && v13 == v15)
    {
      swift_bridgeObjectRelease_n(v13, 2);
    }
    else
    {
      v17 = v15;
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 0);
      swift_bridgeObjectRelease(v17);
      swift_bridgeObjectRelease(v13);
      if ((v18 & 1) == 0)
        goto LABEL_13;
    }
    if (objc_msgSend(v9, "code") == (id)-7097)
    {
      v19 = (uint64_t *)(v1 + 232);
      v20 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 280))(*(_QWORD *)(v1 + 232), *(_QWORD *)(v1 + 272), *(_QWORD *)(v1 + 208));
      v21 = static os_log_type_t.error.getter(v20);
      v22 = v21;
      v23 = Logger.logObject.getter(v21);
      v24 = v22;
      if (os_log_type_enabled(v23, v22))
      {
        v25 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "intelligence bag key not found", v25, 2u);
        swift_slowDealloc(v25, -1, -1);
        v26 = v23;
        v23 = *(NSObject **)(v1 + 264);
        v8 = (void **)(v1 + 256);
      }
      else
      {
        v26 = *(NSObject **)(v1 + 256);
      }
      v37 = 1;
      goto LABEL_18;
    }
LABEL_13:
    v19 = (uint64_t *)(v1 + 224);
    v27 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v1 + 280))(*(_QWORD *)(v1 + 224), *(_QWORD *)(v1 + 272), *(_QWORD *)(v1 + 208));
    v28 = static os_log_type_t.error.getter(v27);
    v23 = v9;
    v26 = Logger.logObject.getter(v23);
    if (os_log_type_enabled(v26, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc(12, -1);
      v45 = (NSObject **)swift_slowAlloc(8, -1);
      v30 = v29;
      buf = v29;
      *(_DWORD *)v29 = 138412290;
      v31 = v29 + 12;
      v32 = v9;
      v33 = v30 + 4;
      *(_QWORD *)(v1 + 200) = v23;
      v34 = v23;
      v35 = v33;
      v9 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 200, v1 + 208, v35, v31);
      *v45 = v23;

      _os_log_impl((void *)&_mh_execute_header, v26, v28, "intelligence bag check failed with error: %@", buf, 0xCu);
      v36 = sub_10000A9E4(&qword_1002EA810);
      swift_arrayDestroy(v45, 1, v36);
      swift_slowDealloc(v45, -1, -1);
      swift_slowDealloc(buf, -1, -1);
      v37 = 0;
      v23 = *(NSObject **)(v1 + 264);
      v8 = (void **)(v1 + 256);
    }
    else
    {

      v37 = 0;
      v26 = *(NSObject **)(v1 + 256);
    }
LABEL_18:
    v38 = *v8;
    v39 = *(void (**)(uint64_t, uint64_t))(v1 + 288);
    v40 = *v19;
    v41 = *(_QWORD *)(v1 + 208);

    v39(v40, v41);
    swift_errorRelease(*(_QWORD *)(v1 + 184));
    v42 = *(_QWORD *)(v1 + 240);
    v44 = *(_QWORD *)(v1 + 224);
    v43 = *(_QWORD *)(v1 + 232);
    swift_task_dealloc(*(_QWORD *)(v1 + 248));
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    return (*(uint64_t (**)(uint64_t))(v1 + 8))(v37);
  }
  return result;
}

uint64_t type metadata accessor for IntelligenceServerControlProvider()
{
  return objc_opt_self(_TtC5Setup33IntelligenceServerControlProvider);
}

uint64_t sub_10000FDD4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10000FE00()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  _QWORD *v3;

  v2 = *(const void **)(v0 + 16);
  v3 = (_QWORD *)swift_task_alloc(dword_1002EA544);
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = sub_10000FE64;
  return ((uint64_t (*)(const void *))((char *)&dword_1002EA540 + dword_1002EA540))(v2);
}

uint64_t sub_10000FE64()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10000FEB4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

unint64_t sub_10000FEE0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002EA550;
  if (!qword_1002EA550)
  {
    v1 = objc_opt_self(NSError);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002EA550);
  }
  return result;
}

void sub_10000FF1C()
{
  _BYTE *v0;
  _QWORD *v1;
  void *v2;
  NSString v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  void *object;
  NSString v12;
  objc_super v13;
  Swift::String v14;

  v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_skipNextSetUpForChildNetworkReachabilityCheck] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_runState] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_setupMethod] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_flowItemDispositionProvider] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_proximitySetupController] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_managedConfiguration] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_analyticsEventAppearance] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_childSetupPresenter] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_networkProvider] = 0;
  v1 = &v0[OBJC_IVAR____TtC5Setup21BuddyIntentController_showModalWiFiSettingsBlock];
  *v1 = 0;
  v1[1] = 0;
  v2 = (void *)objc_opt_self(UIDevice);
  v3 = String._bridgeToObjectiveC()();
  v4 = objc_msgSend(v2, "modelSpecificLocalizedStringKeyForKey:", v3);

  if (v4)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
    v7 = v6;

    v8 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v14._object = (void *)0xE000000000000000;
    v9._countAndFlagsBits = v5;
    v9._object = v7;
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    v14._countAndFlagsBits = 0;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v14)._object;
    swift_bridgeObjectRelease(v7);

    v12 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v13.receiver = v0;
    v13.super_class = (Class)type metadata accessor for BuddyIntentController();
    objc_msgSendSuper2(&v13, "initWithTitle:detailText:icon:contentLayout:", v12, 0, 0, 2);

  }
  else
  {
    __break(1u);
  }
}

void sub_100010108()
{
  void *v0;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::String v4;
  void *object;
  NSString v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  NSString v11;
  id v12;
  id v13;
  id v14;
  id v15;
  objc_super v16;
  Swift::String v17;
  Swift::String v18;

  v16.receiver = v0;
  v16.super_class = (Class)type metadata accessor for BuddyIntentController();
  objc_msgSendSuper2(&v16, "viewDidLoad");
  v1 = (void *)objc_opt_self(NSBundle);
  v2 = objc_msgSend(v1, "mainBundle");
  v3._countAndFlagsBits = 0xD000000000000011;
  v17._object = (void *)0xE000000000000000;
  v3._object = (void *)0x800000010020B0B0;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v17._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v17)._object;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v0, "addBoldButton:action:", v6, "setUpForMyselfTapped");

  v7 = objc_msgSend(v1, "mainBundle");
  v18._object = (void *)0xE000000000000000;
  v8._object = (void *)0x800000010020B0D0;
  v8._countAndFlagsBits = 0xD000000000000010;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v18._countAndFlagsBits = 0;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v18)._object;

  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  objc_msgSend(v0, "addLinkButton:action:", v11, "setUpForChildTapped");

  v12 = sub_100010348();
  v13 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v12);
  objc_msgSend(v13, "setContentMode:", 1);
  objc_msgSend(v13, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  v14 = objc_msgSend(v0, "contentView");
  objc_msgSend(v14, "addSubview:", v13);

  v15 = objc_msgSend(v0, "contentView");
  objc_msgSend(v15, "pinToEdges:", v13);

}

id sub_100010348()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_msgSend((id)objc_opt_self(BYDevice), "currentDevice");
  objc_msgSend(v0, "hasHomeButton");

  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v1);

  return v2;
}

void sub_100010448()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  id v16;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin();
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)&v1[OBJC_IVAR____TtC5Setup21BuddyIntentController_setupMethod];
  if (v6)
  {
    v16 = v6;
    v7 = objc_msgSend(v1, "delegate");
    if (v7)
    {
      v8 = v7;
      v1[OBJC_IVAR____TtC5Setup21BuddyIntentController_skipNextSetUpForChildNetworkReachabilityCheck] = 0;
      objc_msgSend(v16, "setIntent:", 1);
      v9 = *(void **)&v1[OBJC_IVAR____TtC5Setup21BuddyIntentController_analyticsEventAppearance];
      if (v9)
      {
        v10 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(objc_msgSend(v9, "didChooseToSetUpForChild:", 0));
        v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v10, v2);
        v12 = Logger.logObject.getter(v11);
        v13 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v12, v13))
        {
          v14 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v14 = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, v13, "Device will be set up for myself", v14, 2u);
          swift_slowDealloc(v14, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        objc_msgSend(v8, "flowItemDone:", v1);

        swift_unknownObjectRelease(v8);
      }
      else
      {
        __break(1u);
      }
    }
    else
    {

    }
  }
}

void sub_100010644()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint8_t *v20;
  uint8_t *v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  void *v29;
  id v30;
  id v31;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v8 = (char *)&v30 - v7;
  v9 = *(void **)&v1[OBJC_IVAR____TtC5Setup21BuddyIntentController_flowItemDispositionProvider];
  if (v9)
  {
    v10 = *(void **)&v1[OBJC_IVAR____TtC5Setup21BuddyIntentController_setupMethod];
    if (v10)
    {
      v11 = v9;
      v31 = v10;
      v12 = objc_msgSend(v1, "delegate");
      if (!v12)
      {

        return;
      }
      v13 = v12;
      v14 = OBJC_IVAR____TtC5Setup21BuddyIntentController_skipNextSetUpForChildNetworkReachabilityCheck;
      if ((v1[OBJC_IVAR____TtC5Setup21BuddyIntentController_skipNextSetUpForChildNetworkReachabilityCheck] & 1) != 0)
      {
        v15 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v12);
        v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v8, v15, v2);
        v17 = Logger.logObject.getter(v16);
        v18 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v17, v18))
        {
          v19 = (uint8_t *)swift_slowAlloc(2, -1);
          v30 = v11;
          v20 = v19;
          *(_WORD *)v19 = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "Intent controller skipped reachability check", v19, 2u);
          v21 = v20;
          v11 = v30;
          swift_slowDealloc(v21, -1, -1);
        }

        v22 = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
        v1[v14] = 0;
      }
      else
      {
        v23 = *(void **)&v1[OBJC_IVAR____TtC5Setup21BuddyIntentController_networkProvider];
        if (!v23)
          goto LABEL_18;
        v22 = (uint64_t)objc_msgSend(v23, "networkReachable");
        if ((v22 & 1) == 0)
        {
          sub_1000109A4();

          swift_unknownObjectRelease(v13);
          return;
        }
      }
      v24 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v22);
      v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v24, v2);
      v26 = Logger.logObject.getter(v25);
      v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v28 = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "Device will be set up for a child", v28, 2u);
        swift_slowDealloc(v28, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
      objc_msgSend(v31, "setIntent:", 2);
      objc_msgSend(v11, "setPreferredDispositions:", 8);
      v29 = *(void **)&v1[OBJC_IVAR____TtC5Setup21BuddyIntentController_analyticsEventAppearance];
      if (v29)
      {
        objc_msgSend(v29, "didChooseToSetUpForChild:", 1);
        objc_msgSend(v13, "flowItemDone:", v1);

        swift_unknownObjectRelease(v13);
        return;
      }
      __break(1u);
LABEL_18:
      __break(1u);
    }
  }
}

void sub_1000109A4()
{
  void *v0;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::String v4;
  void *object;
  NSString v6;
  NSString v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  void *v17;
  NSString v18;
  NSString v19;
  id v20;
  NSString v21;
  id v22;
  uint64_t v23;
  void *v24;
  void *v25;
  id v26;
  Swift::String v27;
  Swift::String v28;
  void *v29;
  uint64_t v30;
  id v31;
  NSString v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  Swift::String v37;
  Swift::String v38;
  void *v39;
  NSString v40;
  id v41;
  _QWORD aBlock[5];
  uint64_t v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;
  Swift::String v47;

  v1 = (void *)objc_opt_self(NSBundle);
  v2 = objc_msgSend(v1, "mainBundle");
  v44._object = (void *)0xE000000000000000;
  v3._object = (void *)0x800000010020AF90;
  v3._countAndFlagsBits = 0xD00000000000001CLL;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v44._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v44)._object;

  v6 = String._bridgeToObjectiveC()();
  v7 = (id)SFLocalizableWAPIStringKeyForKey();

  if (!v7)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(0);
    v9 = v8;
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v9);
  }
  v10 = objc_msgSend((id)objc_opt_self(UIDevice), "modelSpecificLocalizedStringKeyForKey:", v7);

  if (v10)
  {
    v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v13 = v12;

    v14 = objc_msgSend(v1, "mainBundle");
    v45._object = (void *)0xE000000000000000;
    v15._countAndFlagsBits = v11;
    v15._object = v13;
    v16._countAndFlagsBits = 0;
    v16._object = (void *)0xE000000000000000;
    v45._countAndFlagsBits = 0;
    v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v45)._object;
    swift_bridgeObjectRelease(v13);

    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v19 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v17);
    v20 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v18, v19, 1);

    v21 = String._bridgeToObjectiveC()();
    v22 = (id)SFLocalizableWAPIStringKeyForKey();

    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    v25 = v24;

    v26 = objc_msgSend(v1, "mainBundle");
    v46._object = (void *)0xE000000000000000;
    v27._countAndFlagsBits = v23;
    v27._object = v25;
    v28._countAndFlagsBits = 0;
    v28._object = (void *)0xE000000000000000;
    v46._countAndFlagsBits = 0;
    v29 = NSLocalizedString(_:tableName:bundle:value:comment:)(v27, (Swift::String_optional)0, (NSBundle)v26, v28, v46)._object;
    swift_bridgeObjectRelease(v25);

    v30 = swift_allocObject(&unk_10027F470, 24, 7);
    *(_QWORD *)(v30 + 16) = v0;
    v31 = v0;
    v32 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v29);
    aBlock[4] = sub_100011B44;
    v43 = v30;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100010E68;
    aBlock[3] = &unk_10027F488;
    v33 = _Block_copy(aBlock);
    swift_release(v43);
    v34 = (void *)objc_opt_self(UIAlertAction);
    v35 = objc_msgSend(v34, "actionWithTitle:style:handler:", v32, 0, v33);
    _Block_release(v33);

    objc_msgSend(v20, "addAction:", v35);
    v36 = objc_msgSend(v1, "mainBundle");
    v47._object = (void *)0xE000000000000000;
    v37._countAndFlagsBits = 0x4C45434E4143;
    v37._object = (void *)0xE600000000000000;
    v38._countAndFlagsBits = 0;
    v38._object = (void *)0xE000000000000000;
    v47._countAndFlagsBits = 0;
    v39 = NSLocalizedString(_:tableName:bundle:value:comment:)(v37, (Swift::String_optional)0, (NSBundle)v36, v38, v47)._object;

    v40 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v39);
    v41 = objc_msgSend(v34, "actionWithTitle:style:handler:", v40, 1, 0);

    objc_msgSend(v20, "addAction:", v41);
    objc_msgSend(v31, "presentViewController:animated:completion:", v20, 1, 0);

  }
  else
  {
    __break(1u);
  }
}

void sub_100010E00(uint64_t a1, uint64_t a2)
{
  void (*v2)(uint64_t);
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t))(a2 + OBJC_IVAR____TtC5Setup21BuddyIntentController_showModalWiFiSettingsBlock);
  if (v2)
  {
    v4 = *(_QWORD *)(a2 + OBJC_IVAR____TtC5Setup21BuddyIntentController_showModalWiFiSettingsBlock + 8);
    v5 = swift_retain(v4);
    v2(v5);
    sub_100011B64((uint64_t)v2, v4);
    *(_BYTE *)(a2 + OBJC_IVAR____TtC5Setup21BuddyIntentController_skipNextSetUpForChildNetworkReachabilityCheck) = 1;
  }
  else
  {
    __break(1u);
  }
}

void sub_100010E68(uint64_t a1, void *a2)
{
  uint64_t v3;
  void (*v4)(void);
  id v5;

  v4 = *(void (**)(void))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v5 = a2;
  v4();
  swift_release(v3);

}

uint64_t sub_1000110A8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + *a4);
  *(_QWORD *)(a1 + *a4) = a3;
  swift_unknownObjectRetain(a3, a2);
  return swift_unknownObjectRelease(v4);
}

uint64_t sub_100011228(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  id v5;
  unsigned int v7;

  v3 = *(void **)(v2 + OBJC_IVAR____TtC5Setup21BuddyIntentController_runState);
  if (!v3)
    return 0;
  v4 = *(void **)(v2 + OBJC_IVAR____TtC5Setup21BuddyIntentController_proximitySetupController);
  if (!v4)
    return 0;
  swift_unknownObjectRetain(v3, a2);
  v5 = v4;
  if ((objc_msgSend(v3, "hasCompletedInitialRun") & 1) != 0)
  {
    swift_unknownObjectRelease(v3);

    return 0;
  }
  v7 = objc_msgSend(v5, "hasConnection");
  swift_unknownObjectRelease(v3);

  return v7 ^ 1;
}

uint64_t sub_10001138C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  void *v16;
  _QWORD *v17;
  void *v18;
  _QWORD *v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[5];
  _QWORD *v31;

  v10 = type metadata accessor for DispatchWorkItemFlags(0);
  v29 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for DispatchQoS(0);
  v27 = *(_QWORD *)(v13 - 8);
  v28 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000C6E8();
  v16 = (void *)static OS_dispatch_queue.main.getter();
  v17 = (_QWORD *)swift_allocObject(&unk_10027F538, 56, 7);
  v17[2] = a2;
  v17[3] = a3;
  v17[4] = a1;
  v17[5] = a4;
  v17[6] = a5;
  aBlock[4] = sub_1000123B0;
  v31 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100024350;
  aBlock[3] = &unk_10027F550;
  v18 = _Block_copy(aBlock);
  v19 = v31;
  swift_errorRetain(a2);
  v20 = a3;
  swift_retain(a5);
  v21 = swift_release(v19);
  static DispatchQoS.unspecified.getter(v21);
  aBlock[0] = _swiftEmptyArrayStorage;
  v22 = sub_10000C774();
  v23 = sub_10000A9E4((uint64_t *)&unk_1002EA380);
  v24 = sub_10000C7BC();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v23, v24, v10, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v15, v12, v18);
  _Block_release(v18);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v10);
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v15, v28);
}

void sub_100011584(uint64_t a1, void *a2, uint64_t a3, void (*a4)(uint64_t))
{
  void *v8;
  NSString v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  void *object;
  id v18;
  NSString v19;
  NSString v20;
  id v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  Swift::String v26;
  Swift::String v27;
  Swift::String v28;
  void *v29;
  Class isa;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSString v40;
  Swift::String v41;
  Swift::String v42;

  v8 = (void *)objc_opt_self(UIDevice);
  if (a1)
  {
    swift_errorRetain(a1);
    v9 = String._bridgeToObjectiveC()();
    v10 = objc_msgSend(v8, "modelSpecificLocalizedStringKeyForKey:", v9);

    if (v10)
    {
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      v14 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
      v41._object = (void *)0xE000000000000000;
      v15._countAndFlagsBits = v11;
      v15._object = v13;
      v16._countAndFlagsBits = 0;
      v16._object = (void *)0xE000000000000000;
      v41._countAndFlagsBits = 0;
      object = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v41)._object;
      swift_bridgeObjectRelease(v13);

      v18 = objc_msgSend(a2, "headerView");
      v19 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(object);
      objc_msgSend(v18, "setDetailText:", v19);

      swift_errorRelease(a1);
LABEL_7:
      a4(1);
      return;
    }
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v20 = String._bridgeToObjectiveC()();
  v21 = objc_msgSend(v8, "modelSpecificLocalizedStringKeyForKey:", v20);

  if (v21)
  {
    v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
    v24 = v23;

    v25 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v42._object = (void *)0xE000000000000000;
    v26._countAndFlagsBits = v22;
    v26._object = v24;
    v27._countAndFlagsBits = 0;
    v27._object = (void *)0xE000000000000000;
    v42._countAndFlagsBits = 0;
    v28 = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, (Swift::String_optional)0, (NSBundle)v25, v27, v42);
    swift_bridgeObjectRelease(v24);

    v29 = (void *)objc_opt_self(NSNumberFormatter);
    if (!__OFSUB__(a3, 1))
    {
      isa = Int._bridgeToObjectiveC()().super.super.isa;
      v31 = objc_msgSend(v29, "localizedStringFromNumber:numberStyle:", isa, 0);

      v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
      v34 = v33;

      v35 = objc_msgSend(a2, "headerView");
      v36 = sub_10000A9E4(&qword_1002EA390);
      v37 = swift_allocObject(v36, 72, 7);
      *(_OWORD *)(v37 + 16) = xmmword_10024C690;
      *(_QWORD *)(v37 + 56) = &type metadata for String;
      *(_QWORD *)(v37 + 64) = sub_10000C908();
      *(_QWORD *)(v37 + 32) = v32;
      *(_QWORD *)(v37 + 40) = v34;
      String.init(format:_:)(v28._countAndFlagsBits, v28._object, v37);
      v39 = v38;
      swift_bridgeObjectRelease(v28._object);
      v40 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v39);
      objc_msgSend(v35, "setDetailText:", v40);

      goto LABEL_7;
    }
    __break(1u);
    goto LABEL_9;
  }
LABEL_10:
  __break(1u);
}

void sub_1000118EC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

id sub_100011A24()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyIntentController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BuddyIntentController()
{
  return objc_opt_self(_TtC5Setup21BuddyIntentController);
}

uint64_t sub_100011B20()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100011B44(uint64_t a1)
{
  uint64_t v1;

  sub_100010E00(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100011B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100011B5C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100011B64(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

void sub_100011B74(char *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  void *v32;
  id v33;
  void (*v34)(void);
  char *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  id v54;
  uint8_t *v55;
  uint8_t *v56;
  void *v57;
  void *v58;
  _QWORD *v59;
  uint64_t v60;
  void *v61;
  _QWORD *v62;
  id v63;
  char *v64;
  char v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  void *v74;
  NSString v75;
  id v76;
  uint64_t v77;
  void *v78;
  void *v79;
  id v80;
  Swift::String v81;
  Swift::String v82;
  void *object;
  id v84;
  NSString v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD aBlock[5];
  _QWORD *v91;
  Swift::String v92;

  v4 = type metadata accessor for DispatchPredicate(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (uint64_t *)((char *)&v86 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for Logger(0);
  v86 = *(_QWORD *)(v8 - 8);
  v87 = v8;
  v9 = __chkstk_darwin(v8);
  v11 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v86 - v13;
  v15 = __chkstk_darwin(v12);
  v17 = (char *)&v86 - v16;
  __chkstk_darwin(v15);
  v19 = (char *)&v86 - v18;
  v89 = swift_allocObject(&unk_10027F4C0, 24, 7);
  *(_QWORD *)(v89 + 16) = a2;
  v20 = (void *)objc_opt_self(BuddyAccountTools);
  v88 = a2;
  _Block_copy(a2);
  v21 = objc_msgSend(v20, "sharedBuddyAccountTools");
  if (!v21)
    goto LABEL_34;
  v22 = v21;
  v23 = objc_msgSend(v21, "primaryAccount");

  if (v23)
  {
    v25 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v24);
    v27 = v86;
    v26 = v87;
    v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v86 + 16))(v19, v25, v87);
    v29 = Logger.logObject.getter(v28);
    v30 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Skipping intent, there is already an account signed in.", v31, 2u);
      swift_slowDealloc(v31, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v27 + 8))(v19, v26);
    v32 = *(void **)&a1[OBJC_IVAR____TtC5Setup21BuddyIntentController_setupMethod];
    if (v32)
    {
      v33 = v32;
      if (!objc_msgSend(v33, "intent"))
        objc_msgSend(v33, "setIntent:", 1);

    }
    v34 = (void (*)(void))v88[2];
    goto LABEL_10;
  }
  v35 = a1;
  v36 = *(void **)&a1[OBJC_IVAR____TtC5Setup21BuddyIntentController_setupMethod];
  if (v36)
  {
    v37 = *(void **)&a1[OBJC_IVAR____TtC5Setup21BuddyIntentController_managedConfiguration];
    if (v37)
    {
      v38 = v36;
      v39 = v37;
      if (objc_msgSend(v39, "activationRecordIndicatesCloudConfigurationIsAvailable"))
      {
        v40 = v38;
        v41 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(objc_msgSend(v38, "setIntent:", 1));
        v43 = v86;
        v42 = v87;
        v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v86 + 16))(v17, v41, v87);
        v45 = Logger.logObject.getter(v44);
        v46 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v45, v46))
        {
          v47 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v47 = 0;
          _os_log_impl((void *)&_mh_execute_header, v45, v46, "CloudConfigurationDevice device, will be set up for myself", v47, 2u);
          swift_slowDealloc(v47, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v43 + 8))(v17, v42);
        ((void (*)(_QWORD *, _QWORD))v88[2])(v88, 0);
        swift_release(v89);

LABEL_22:
        return;
      }
      if ((objc_msgSend(v39, "isSupervised") & 1) != 0)
      {
        v48 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(objc_msgSend(v38, "setIntent:", 1));
        v50 = v86;
        v49 = v87;
        v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v86 + 16))(v14, v48, v87);
        v52 = Logger.logObject.getter(v51);
        v53 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v52, v53))
        {
          v54 = v38;
          v55 = (uint8_t *)swift_slowAlloc(2, -1);
          *(_WORD *)v55 = 0;
          _os_log_impl((void *)&_mh_execute_header, v52, v53, "Supervised device, will be set up for myself", v55, 2u);
          v56 = v55;
          v38 = v54;
          swift_slowDealloc(v56, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v50 + 8))(v14, v49);
        ((void (*)(_QWORD *, _QWORD))v88[2])(v88, 0);
        swift_release(v89);

        goto LABEL_22;
      }

      v35 = a1;
    }
  }
  v57 = *(void **)&v35[OBJC_IVAR____TtC5Setup21BuddyIntentController_networkProvider];
  if (!v57)
    goto LABEL_35;
  if ((objc_msgSend(v57, "networkReachable") & 1) != 0)
  {
    v58 = *(void **)&v35[OBJC_IVAR____TtC5Setup21BuddyIntentController_childSetupPresenter];
    if (v58)
    {
      v59 = (_QWORD *)swift_allocObject(&unk_10027F4E8, 40, 7);
      v59[2] = v35;
      v59[3] = sub_10001233C;
      v60 = v89;
      v59[4] = v89;
      aBlock[4] = sub_100012370;
      v91 = v59;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = sub_1000118EC;
      aBlock[3] = &unk_10027F500;
      v61 = _Block_copy(aBlock);
      v62 = v91;
      v63 = v58;
      v64 = v35;
      swift_retain(v60);
      swift_release(v62);
      objc_msgSend(v63, "fetchCutOffAgeForChildAccountWithCompletionHandler:", v61);
      _Block_release(v61);
      swift_release(v60);

      return;
    }
    goto LABEL_36;
  }
  sub_10000C6E8();
  *v7 = static OS_dispatch_queue.main.getter();
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  v65 = _dispatchPreconditionTest(_:)(v7);
  v66 = (*(uint64_t (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  if ((v65 & 1) == 0)
  {
    __break(1u);
LABEL_34:
    _Block_release(v88);
    __break(1u);
LABEL_35:
    _Block_release(v88);
    __break(1u);
LABEL_36:
    _Block_release(v88);
    __break(1u);
LABEL_37:
    _Block_release(v88);
    __break(1u);
    return;
  }
  v67 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v66);
  v69 = v86;
  v68 = v87;
  v70 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v86 + 16))(v11, v67, v87);
  v71 = Logger.logObject.getter(v70);
  v72 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v71, v72))
  {
    v73 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v73 = 0;
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "Network not reachable, not fetching cut off age for child account", v73, 2u);
    swift_slowDealloc(v73, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v69 + 8))(v11, v68);
  v74 = (void *)objc_opt_self(UIDevice);
  v75 = String._bridgeToObjectiveC()();
  v76 = objc_msgSend(v74, "modelSpecificLocalizedStringKeyForKey:", v75);

  if (!v76)
    goto LABEL_37;
  v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
  v79 = v78;

  v80 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v92._object = (void *)0xE000000000000000;
  v81._countAndFlagsBits = v77;
  v81._object = v79;
  v82._countAndFlagsBits = 0;
  v82._object = (void *)0xE000000000000000;
  v92._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v81, (Swift::String_optional)0, (NSBundle)v80, v82, v92)._object;
  swift_bridgeObjectRelease(v79);

  v84 = objc_msgSend(v35, "headerView");
  v85 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v84, "setDetailText:", v85);

  v34 = (void (*)(void))v88[2];
LABEL_10:
  v34();
  swift_release(v89);
}

uint64_t sub_10001233C(char a1)
{
  uint64_t v1;

  return sub_100030920(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100012344()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100012370(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return sub_10001138C(a1, a2, *(void **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t sub_10001237C()
{
  uint64_t v0;

  swift_errorRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

void sub_1000123B0()
{
  uint64_t v0;

  sub_100011584(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 32), *(void (**)(uint64_t))(v0 + 40));
}

uint64_t sub_1000123C0()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000123E4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

void sub_10001240C()
{
  qword_1002EED38 = 0x7665446573617265;
  unk_1002EED40 = 0xEB00000000656369;
}

void sub_100012438()
{
  strcpy((char *)&qword_1002EED48, "paneIdentifier");
  unk_1002EED57 = -18;
}

uint64_t sub_100012478(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, char a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;

  v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a4);
  v9 = v8;
  v10 = a3;
  sub_100012560(v10, v7, v9, a5);

  return swift_bridgeObjectRelease(v9);
}

id sub_10001250C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyStartOverAnalytics();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BuddyStartOverAnalytics()
{
  return objc_opt_self(_TtC5Setup23BuddyStartOverAnalytics);
}

void sub_100012560(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  NSString v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  id v11;
  NSString v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  Class isa;
  uint64_t v17;

  v7 = String._bridgeToObjectiveC()();
  v8 = sub_10000A9E4(&qword_1002EA638);
  inited = swift_initStackObject(v8, &v17);
  *(_OWORD *)(inited + 16) = xmmword_10024C800;
  if (qword_1002E9D00 != -1)
    swift_once(&qword_1002E9D00, sub_100012438);
  v10 = unk_1002EED50;
  *(_QWORD *)(inited + 32) = qword_1002EED48;
  *(_QWORD *)(inited + 40) = v10;
  v11 = objc_allocWithZone((Class)NSString);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(a3);
  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a3);
  v13 = objc_msgSend(v11, "initWithString:", v12);

  *(_QWORD *)(inited + 48) = v13;
  if (qword_1002E9CF8 != -1)
    swift_once(&qword_1002E9CF8, sub_10001240C);
  v14 = unk_1002EED40;
  *(_QWORD *)(inited + 56) = qword_1002EED38;
  *(_QWORD *)(inited + 64) = v14;
  sub_100012758(0, &qword_1002EAC30, NSNumber_ptr);
  swift_bridgeObjectRetain(v14);
  *(NSNumber *)(inited + 72) = NSNumber.init(BOOLeanLiteral:)(a4 & 1);
  v15 = sub_100029AB8(inited);
  sub_100012758(0, &qword_1002EA640, NSObject_ptr);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v15);
  objc_msgSend(a1, "addEvent:withPayload:persist:", v7, isa, 1);

}

uint64_t sub_100012758(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

id sub_10001282C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyDeviceImageUtilities();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BuddyDeviceImageUtilities()
{
  return objc_opt_self(_TtC5Setup25BuddyDeviceImageUtilities);
}

id sub_10001287C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ObjCClassFromMetadata;
  id v23;
  id v24;
  NSString v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  NSObject *v31;
  uint8_t *v32;
  uint64_t v34;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_10000A9E4((uint64_t *)&unk_1002EA670);
  __chkstk_darwin(v10);
  v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for iosmacHardware(0);
  v14 = *(_QWORD *)(v13 - 8);
  __chkstk_darwin(v13);
  v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain(a2);
  iosmacHardware.init(_:)(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    v17 = sub_100012B28((uint64_t)v12);
  }
  else
  {
    v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    iosmacHardware.imageName.getter(v18);
    if (v19)
    {
      v20 = v19;
      v21 = type metadata accessor for ProductKitCatalog(0);
      ObjCClassFromMetadata = swift_getObjCClassFromMetadata(v21);
      v23 = objc_msgSend((id)objc_opt_self(NSBundle), "bundleForClass:", ObjCClassFromMetadata);
      v24 = a3;
      v25 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
      v26 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:inBundle:compatibleWithTraitCollection:", v25, v23, v24);

      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return v26;
    }
    v17 = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  }
  v27 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v17);
  v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v27, v6);
  v29 = static os_log_type_t.error.getter(v28);
  v30 = v29;
  v31 = Logger.logObject.getter(v29);
  if (os_log_type_enabled(v31, v30))
  {
    v32 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v32 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v30, "Unable to fetch device image.", v32, 2u);
    swift_slowDealloc(v32, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return 0;
}

uint64_t sub_100012B28(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000A9E4((uint64_t *)&unk_1002EA670);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

id sub_100012B68(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  void *v11;
  uint64_t v12;
  objc_class *v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  Class isa;
  _QWORD v20[5];
  uint64_t v21;
  objc_super v22;

  *(_QWORD *)&v5[OBJC_IVAR____TtC5Setup28BuddyButtonConfigurationFlow_buddyPreferences] = 0;
  if (a4)
  {
    v20[4] = a4;
    v21 = a5;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 1107296256;
    v20[2] = sub_10002B950;
    v20[3] = &unk_10027F5F0;
    v11 = _Block_copy(v20);
    v12 = v21;
    swift_retain(a5);
    swift_release(v12);
  }
  else
  {
    v11 = 0;
  }
  v13 = (objc_class *)type metadata accessor for BuddyButtonConfigurationFlow();
  v22.receiver = v5;
  v22.super_class = v13;
  v14 = objc_msgSendSuper2(&v22, "initWithNavigationController:flowDelegate:flowStarter:dependencyInjector:", a1, a2, a3, v11);
  _Block_release(v11);
  if (v14)
  {

    v15 = sub_10000A9E4(&qword_1002EA6B0);
    v16 = swift_allocObject(v15, 48, 7);
    *(_OWORD *)(v16 + 16) = xmmword_10024C800;
    *(_QWORD *)(v16 + 32) = type metadata accessor for BuddySilentModeController();
    *(_QWORD *)(v16 + 40) = type metadata accessor for BuddyButtonConfigurationController();
    v17 = v14;
    sub_10000A9E4((uint64_t *)&unk_1002EB170);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v16);
    objc_msgSend(v17, "setClassList:", isa);
    sub_100013044(a4, a5);

  }
  else
  {
    sub_100013044(a4, a5);
  }

  swift_unknownObjectRelease(a2);
  return v14;
}

uint64_t sub_100012EC8()
{
  uint64_t v0;
  id v1;
  unsigned int v2;
  void *v3;
  id v4;
  NSString v5;
  unsigned int v6;

  v1 = objc_msgSend((id)objc_opt_self(BYDevice), "currentDevice");
  v2 = objc_msgSend(v1, "hasActionButton");

  if (!v2)
    return 0;
  v3 = *(void **)(v0 + OBJC_IVAR____TtC5Setup28BuddyButtonConfigurationFlow_buddyPreferences);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  v6 = objc_msgSend(v4, "BOOLForKey:", v5);

  return v6 ^ 1;
}

id sub_100012FB8()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyButtonConfigurationFlow();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BuddyButtonConfigurationFlow()
{
  return objc_opt_self(_TtC5Setup28BuddyButtonConfigurationFlow);
}

uint64_t sub_100013018()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_10001303C(uint64_t a1)
{
  uint64_t v1;

  return sub_10002B9A4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_100013044(uint64_t result, uint64_t a2)
{
  if (result)
    return swift_release(a2);
  return result;
}

uint64_t sub_100013054(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100013064(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001306C()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for BuddyAccountAgeProvider()
{
  return objc_opt_self(_TtC5Setup23BuddyAccountAgeProvider);
}

id sub_10001309C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  NSObject *v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  void (*v46)(char *, uint64_t);
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  NSObject *v57;
  NSObject *v58;
  os_log_type_t v59;
  uint64_t v60;
  id result;
  id v62;
  char *v63;
  NSObject *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v74;
  uint64_t v75;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  v2 = ((uint64_t (*)(void))__chkstk_darwin)();
  v4 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __chkstk_darwin(v2);
  v64 = ((char *)&v63 - v6);
  v7 = __chkstk_darwin(v5);
  v63 = (char *)&v63 - v8;
  __chkstk_darwin(v7);
  v67 = (char *)&v63 - v9;
  v10 = type metadata accessor for Date(0);
  v72 = *(_QWORD *)(v10 - 8);
  v73 = v10;
  __chkstk_darwin(v10);
  v12 = (char *)&v63 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Calendar.Component(0);
  v70 = *(_QWORD *)(v13 - 8);
  v71 = v13;
  __chkstk_darwin(v13);
  v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Calendar(0);
  v68 = *(_QWORD *)(v16 - 8);
  v69 = v16;
  __chkstk_darwin(v16);
  v18 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (void *)objc_opt_self(AKAccountManager);
  v20 = objc_msgSend(v19, "sharedInstance");
  v21 = objc_msgSend(v20, "primaryAuthKitAccount");

  if (!v21)
  {
    v41 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v22);
    v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 16))(v4, v41, v0);
    v43 = Logger.logObject.getter(v42);
    v44 = static os_log_type_t.error.getter();
    v35 = v0;
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Account age provider found no primary account", v45, 2u);
      swift_slowDealloc(v45, -1, -1);
    }

    v46 = *(void (**)(char *, uint64_t))(v1 + 8);
    v47 = v4;
    goto LABEL_17;
  }
  v65 = v1;
  v66 = v0;
  v23 = objc_msgSend(v19, "sharedInstance");
  v24 = objc_msgSend(v23, "birthYearForAccount:", v21);

  if (!v24)
  {
    v48 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v25);
    v50 = (char *)v64;
    v49 = v65;
    v51 = v66;
    v52 = (*(uint64_t (**)(NSObject *, uint64_t, uint64_t))(v65 + 16))(v64, v48, v66);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Account age provider found no birth year", v55, 2u);
      swift_slowDealloc(v55, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v49 + 8))(v50, v51);
    return 0;
  }
  v64 = v21;
  static Calendar.current.getter();
  v27 = v70;
  v26 = v71;
  v28 = (*(uint64_t (**)(char *, _QWORD, uint64_t))(v70 + 104))(v15, enum case for Calendar.Component.year(_:), v71);
  static Date.now.getter(v28);
  v29 = Calendar.component(_:from:)(v15, v12);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v12, v73);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v15, v26);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v18, v69);
  v30 = -[NSObject integerValue](v24, "integerValue");
  v31 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v30);
  v32 = v65;
  v33 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v65 + 16);
  if (v29 < (uint64_t)v30)
  {
    v34 = v63;
    v35 = v66;
    v36 = v33(v63, v31, v66);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Account age provider encountered current year before birth year", v39, 2u);
      swift_slowDealloc(v39, -1, -1);
      v40 = v24;
      v24 = v64;
    }
    else
    {
      v40 = v37;
      v37 = v64;
    }

    v46 = *(void (**)(char *, uint64_t))(v32 + 8);
    v47 = v34;
LABEL_17:
    v46(v47, v35);
    return 0;
  }
  v56 = v66;
  v33(v67, v31, v66);
  v57 = v24;
  v58 = Logger.logObject.getter(v57);
  v59 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v58, v59))
  {
    v60 = swift_slowAlloc(32, -1);
    *(_DWORD *)v60 = 134218496;
    v74 = (id)v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v60 + 4, v60 + 12);
    *(_WORD *)(v60 + 12) = 2048;
    v74 = -[NSObject integerValue](v57, "integerValue");
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v60 + 14, v60 + 22);
    *(_WORD *)(v60 + 22) = 2048;
    result = -[NSObject integerValue](v57, "integerValue");
    if (__OFSUB__(v29, result))
      goto LABEL_24;
    v74 = (id)(v29 - (_QWORD)result);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v60 + 24, v60 + 32);

    _os_log_impl((void *)&_mh_execute_header, v58, v59, "Account age provider returning %ld - %ld = %ld", (uint8_t *)v60, 0x20u);
    swift_slowDealloc(v60, -1, -1);
    v32 = v65;
    v56 = v66;
  }
  else
  {

    v58 = v57;
  }

  (*(void (**)(char *, uint64_t))(v32 + 8))(v67, v56);
  result = -[NSObject integerValue](v57, "integerValue");
  if (!__OFSUB__(v29, result))
  {
    v62 = objc_msgSend(objc_allocWithZone((Class)NSNumber), "initWithInteger:", v29 - (_QWORD)result);

    return v62;
  }
  __break(1u);
LABEL_24:
  __break(1u);
  return result;
}

void sub_1000136B4()
{
  char *v0;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::String v4;
  void *object;
  void *v6;
  NSString v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  Swift::String v13;
  Swift::String v14;
  void *v15;
  NSString v16;
  NSString v17;
  NSString v18;
  objc_super v19;
  Swift::String v20;
  Swift::String v21;

  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup27BuddyLockdownModeController_runState] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup27BuddyLockdownModeController_lockdownModeProvider] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup27BuddyLockdownModeController_setupMethod] = 0;
  v1 = (void *)objc_opt_self(NSBundle);
  v2 = objc_msgSend(v1, "mainBundle");
  v3._countAndFlagsBits = 0xD000000000000013;
  v20._object = (void *)0xE000000000000000;
  v3._object = (void *)0x800000010020B450;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v20._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v20)._object;

  v6 = (void *)objc_opt_self(UIDevice);
  v7 = String._bridgeToObjectiveC()();
  v8 = objc_msgSend(v6, "modelSpecificLocalizedStringKeyForKey:", v7);

  if (v8)
  {
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    v11 = v10;

    v12 = objc_msgSend(v1, "mainBundle");
    v21._object = (void *)0xE000000000000000;
    v13._countAndFlagsBits = v9;
    v13._object = v11;
    v14._countAndFlagsBits = 0;
    v14._object = (void *)0xE000000000000000;
    v21._countAndFlagsBits = 0;
    v15 = NSLocalizedString(_:tableName:bundle:value:comment:)(v13, (Swift::String_optional)0, (NSBundle)v12, v14, v21)._object;

    swift_bridgeObjectRelease(v11);
    v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v15);
    v18 = String._bridgeToObjectiveC()();
    v19.receiver = v0;
    v19.super_class = (Class)type metadata accessor for BuddyLockdownModeController();
    objc_msgSendSuper2(&v19, "initWithTitle:detailText:symbolName:contentLayout:", v16, v17, v18, 2);

  }
  else
  {
    __break(1u);
  }
}

void sub_1000138F8()
{
  char *v0;
  void *v1;
  id v2;
  char *v3;
  id v4;
  unint64_t v5;
  const char *v6;
  char *v7;
  BOOL v8;
  unint64_t v9;
  Swift::String v10;
  uint64_t v11;
  void *object;
  NSString v13;
  id v14;
  Swift::String v15;
  Swift::String v16;
  void *v17;
  NSString v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  objc_super v22;
  Swift::String v23;

  v22.receiver = v0;
  v22.super_class = (Class)type metadata accessor for BuddyLockdownModeController();
  objc_msgSendSuper2(&v22, "viewDidLoad");
  v1 = *(void **)&v0[OBJC_IVAR____TtC5Setup27BuddyLockdownModeController_setupMethod];
  if (!v1)
  {
LABEL_10:
    v4 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v5 = 0xD00000000000001CLL;
    v20 = 0xE000000000000000;
    v6 = "ENABLE_LOCKDOWN_WITH_RESTART";
    goto LABEL_11;
  }
  v2 = v1;
  v3 = (char *)objc_msgSend(v2, "dataTransferMethod");
  if ((unint64_t)(v3 - 1) >= 2)
  {
    v7 = v3;
    if (v3)
      v8 = v3 == (char *)3;
    else
      v8 = 1;
    if (!v8)
    {
      type metadata accessor for BuddyDataTransferMethod(0);
      v21 = v7;
      _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v19, &v21, v19, &type metadata for UInt);
      __break(1u);
      return;
    }

    goto LABEL_10;
  }

  v4 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v5 = 0xD00000000000001FLL;
  v20 = 0xE000000000000000;
  v6 = "ENABLE_LOCKDOWN_WITHOUT_RESTART";
LABEL_11:
  v9 = (unint64_t)(v6 - 32) | 0x8000000000000000;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v11 = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v5, (Swift::String_optional)0, (NSBundle)v4, v10, *(Swift::String *)(&v20 + -8))._object;

  v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v0, "addBoldButton:action:", v13, "enableTappedAndReturnError:");

  v14 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v23._object = (void *)0xE000000000000000;
  v15._object = (void *)0x800000010020B410;
  v15._countAndFlagsBits = 0xD000000000000018;
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  v23._countAndFlagsBits = 0;
  v17 = NSLocalizedString(_:tableName:bundle:value:comment:)(v15, (Swift::String_optional)0, (NSBundle)v14, v16, v23)._object;

  v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v17);
  objc_msgSend(v0, "addLinkButton:action:", v18, "setUpLaterTapped");

}

id sub_100013B58()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id result;
  id v5;
  uint64_t v6;
  uint64_t ObjectType;
  objc_class *ObjCClassFromMetadata;
  uint64_t v9;
  NSString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v1 = sub_10000A9E4(&qword_1002EA790);
  __chkstk_darwin(v1);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(v0, "delegate");
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup27BuddyLockdownModeController_lockdownModeProvider];
    if (v6)
    {
      type metadata accessor for ViewControllerSpinnerManager(0);
      ObjectType = swift_getObjectType(v0);
      ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(ObjectType);
      swift_unknownObjectRetain(v6, v9);
      v10 = NSStringFromClass(ObjCClassFromMetadata);
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      static ViewControllerSpinnerManager.startAnimatingSpinner(for:identifier:)(v0, v11, v13);
      swift_bridgeObjectRelease(v13);
      v14 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v3, 1, 1, v14);
      type metadata accessor for MainActor(0);
      swift_unknownObjectRetain(v6, v15);
      v16 = v0;
      v18 = swift_unknownObjectRetain(v5, v17);
      v19 = static MainActor.shared.getter(v18);
      v20 = (_QWORD *)swift_allocObject(&unk_10027F690, 56, 7);
      v20[2] = v19;
      v20[3] = &protocol witness table for MainActor;
      v20[4] = v6;
      v20[5] = v16;
      v20[6] = v5;
      v21 = sub_10001A760((uint64_t)v3, (uint64_t)&unk_1002EA7C0, (uint64_t)v20);
      swift_unknownObjectRelease(v5);
      swift_unknownObjectRelease(v6);
      return (id)swift_release(v21);
    }
    else
    {
      return (id)swift_unknownObjectRelease(result);
    }
  }
  return result;
}

uint64_t sub_100013D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  v7 = sub_10000A9E4(&qword_1002EA790);
  v6[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v6[19] = v8;
  v6[20] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v6[21] = v9;
  v6[22] = v10;
  return swift_task_switch(sub_100013DB4, v9, v10);
}

uint64_t sub_100013DB4()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)v0[15];
  v0[2] = v0;
  v0[3] = sub_100013E44;
  v3 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_100019110;
  v4[3] = &unk_10027F6A8;
  v4[4] = v3;
  objc_msgSend(v2, "enableWithStrategy:completionHandler:", 2, v4);
  return swift_continuation_await(v1);
}

uint64_t sub_100013E44()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 184) = v2;
  if (v2)
    v3 = sub_100013F64;
  else
    v3 = sub_100013EA0;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176));
}

uint64_t sub_100013EA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(void **)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 160));
  v4 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v1, 1, 1, v4);
  v5 = v3;
  v7 = swift_unknownObjectRetain(v2, v6);
  v8 = static MainActor.shared.getter(v7);
  v9 = (_QWORD *)swift_allocObject(&unk_10027F6D0, 48, 7);
  v9[2] = v8;
  v9[3] = &protocol witness table for MainActor;
  v9[4] = v5;
  v9[5] = v2;
  v10 = sub_100030934(v1, (uint64_t)&unk_1002EA7D0, (uint64_t)v9);
  swift_release(v10);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100013F64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(v0 + 144);
  v2 = swift_release(*(_QWORD *)(v0 + 160));
  swift_willThrow(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100013FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100014020, v7, v8);
}

uint64_t sub_100014020()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t ObjectType;
  objc_class *ObjCClassFromMetadata;
  NSString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *(void **)(v0 + 24);
  v2 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 32));
  type metadata accessor for ViewControllerSpinnerManager(0);
  ObjectType = swift_getObjectType(v2);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(ObjectType);
  v5 = NSStringFromClass(ObjCClassFromMetadata);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  static ViewControllerSpinnerManager.stopAnimatingSpinner(for:)(v6, v8);
  swift_bridgeObjectRelease(v8);
  objc_msgSend(v1, "flowItemDone:", v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_100014100()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  id result;
  id v5;
  uint64_t v6;
  uint64_t ObjectType;
  objc_class *ObjCClassFromMetadata;
  uint64_t v9;
  NSString *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;

  v1 = sub_10000A9E4(&qword_1002EA790);
  __chkstk_darwin(v1);
  v3 = (char *)&v22 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(v0, "delegate");
  if (result)
  {
    v5 = result;
    v6 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup27BuddyLockdownModeController_lockdownModeProvider];
    if (v6)
    {
      type metadata accessor for ViewControllerSpinnerManager(0);
      ObjectType = swift_getObjectType(v0);
      ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(ObjectType);
      swift_unknownObjectRetain(v6, v9);
      v10 = NSStringFromClass(ObjCClassFromMetadata);
      v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
      v13 = v12;

      static ViewControllerSpinnerManager.startAnimatingSpinner(for:identifier:)(v0, v11, v13);
      swift_bridgeObjectRelease(v13);
      v14 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v3, 1, 1, v14);
      type metadata accessor for MainActor(0);
      swift_unknownObjectRetain(v6, v15);
      v16 = v0;
      v18 = swift_unknownObjectRetain(v5, v17);
      v19 = static MainActor.shared.getter(v18);
      v20 = (_QWORD *)swift_allocObject(&unk_10027F628, 56, 7);
      v20[2] = v19;
      v20[3] = &protocol witness table for MainActor;
      v20[4] = v6;
      v20[5] = v16;
      v20[6] = v5;
      v21 = sub_10001A760((uint64_t)v3, (uint64_t)&unk_1002EA7A0, (uint64_t)v20);
      swift_unknownObjectRelease(v5);
      swift_unknownObjectRelease(v6);
      return (id)swift_release(v21);
    }
    else
    {
      return (id)swift_unknownObjectRelease(result);
    }
  }
  return result;
}

uint64_t sub_1000142C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  v7 = sub_10000A9E4(&qword_1002EA790);
  v6[18] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v6[19] = v8;
  v6[20] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  v6[21] = v9;
  v6[22] = v10;
  return swift_task_switch(sub_100014360, v9, v10);
}

uint64_t sub_100014360()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)v0[15];
  v0[2] = v0;
  v0[3] = sub_1000143EC;
  v3 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_100019110;
  v4[3] = &unk_10027F640;
  v4[4] = v3;
  objc_msgSend(v2, "acknowledgeWithCompletionHandler:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_1000143EC()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 184) = v2;
  if (v2)
    v3 = sub_100014BE4;
  else
    v3 = sub_100014448;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 168), *(_QWORD *)(v1 + 176));
}

uint64_t sub_100014448()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;

  v2 = *(_QWORD *)(v0 + 136);
  v1 = *(_QWORD *)(v0 + 144);
  v3 = *(void **)(v0 + 128);
  swift_release(*(_QWORD *)(v0 + 160));
  v4 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v1, 1, 1, v4);
  v5 = v3;
  v7 = swift_unknownObjectRetain(v2, v6);
  v8 = static MainActor.shared.getter(v7);
  v9 = (_QWORD *)swift_allocObject(&unk_10027F668, 48, 7);
  v9[2] = v8;
  v9[3] = &protocol witness table for MainActor;
  v9[4] = v5;
  v9[5] = v2;
  v10 = sub_100030934(v1, (uint64_t)&unk_1002EA7B0, (uint64_t)v9);
  swift_release(v10);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001450C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5[2] = a4;
  v5[3] = a5;
  v6 = type metadata accessor for MainActor(0);
  v5[4] = static MainActor.shared.getter();
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  return swift_task_switch(sub_100014BF0, v7, v8);
}

uint64_t sub_100014604(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + *a4);
  *(_QWORD *)(a1 + *a4) = a3;
  swift_unknownObjectRetain(a3, a2);
  return swift_unknownObjectRelease(v4);
}

uint64_t sub_1000146C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  void *v9;
  uint64_t result;

  v3 = *(void **)(v2 + OBJC_IVAR____TtC5Setup27BuddyLockdownModeController_runState);
  if (!v3)
    return 0;
  v4 = *(void **)(v2 + OBJC_IVAR____TtC5Setup27BuddyLockdownModeController_lockdownModeProvider);
  if (!v4)
    return 0;
  swift_unknownObjectRetain(*(_QWORD *)(v2 + OBJC_IVAR____TtC5Setup27BuddyLockdownModeController_runState), a2);
  swift_unknownObjectRetain(v4, v5);
  if ((objc_msgSend(v3, "hasCompletedInitialRun") & 1) != 0)
  {
    v6 = 0;
LABEL_13:
    swift_unknownObjectRelease(v3);
    swift_unknownObjectRelease(v4);
    return v6;
  }
  v6 = (uint64_t)objc_msgSend(v4, "deviceState");
  v7 = objc_msgSend(v4, "accountState");
  v8 = sub_10000A9E4(&qword_1002EA7D8);
  if (!v6)
  {
LABEL_12:
    v9 = v3;
    v3 = v4;
    v4 = v9;
    goto LABEL_13;
  }
  if (v6 == 1)
  {
    if (v7 == (id)1)
    {
      v6 = 0;
      goto LABEL_12;
    }
    if (!v7)
    {
      v6 = 1;
      goto LABEL_12;
    }
  }
  result = _diagnoseUnexpectedEnumCase<A>(type:)(v8, v8);
  __break(1u);
  return result;
}

id sub_10001484C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyLockdownModeController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BuddyLockdownModeController()
{
  return objc_opt_self(_TtC5Setup27BuddyLockdownModeController);
}

uint64_t sub_1000148E8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1002EA79C);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100014BE8;
  return sub_1000142C8(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10001496C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1002EA7AC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100014BEC;
  return sub_10001450C(a1, v4, v5, v7, v6);
}

uint64_t sub_1000149E8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100014A24(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1002EA7BC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_100014AA4;
  return sub_100013D1C(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_100014AA4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100014AF0()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100014B24(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v7 = v1[4];
  v6 = v1[5];
  v8 = (_QWORD *)swift_task_alloc(dword_1002EA7CC);
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = sub_100014B9C;
  return sub_100013FB4(a1, v4, v5, v7, v6);
}

uint64_t sub_100014B9C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

id IntelligenceManager.__allocating_init(featureFlags:availabilityProvider:stateProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  objc_class *v3;
  _BYTE *v7;
  objc_super v9;

  v7 = objc_allocWithZone(v3);
  v7[OBJC_IVAR____TtC5Setup19IntelligenceManager_didShowIntelligencePaneThisBuddyRun] = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC5Setup19IntelligenceManager_featureFlags] = a1;
  *(_QWORD *)&v7[OBJC_IVAR____TtC5Setup19IntelligenceManager_availabilityProvider] = a2;
  *(_QWORD *)&v7[OBJC_IVAR____TtC5Setup19IntelligenceManager_stateProvider] = a3;
  v9.receiver = v7;
  v9.super_class = v3;
  return objc_msgSendSuper2(&v9, "init");
}

id IntelligenceManager.init(featureFlags:availabilityProvider:stateProvider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v3;
  objc_super v5;

  v3[OBJC_IVAR____TtC5Setup19IntelligenceManager_didShowIntelligencePaneThisBuddyRun] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Setup19IntelligenceManager_featureFlags] = a1;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Setup19IntelligenceManager_availabilityProvider] = a2;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Setup19IntelligenceManager_stateProvider] = a3;
  v5.receiver = v3;
  v5.super_class = (Class)type metadata accessor for IntelligenceManager();
  return objc_msgSendSuper2(&v5, "init");
}

uint64_t type metadata accessor for IntelligenceManager()
{
  return objc_opt_self(_TtC5Setup19IntelligenceManager);
}

id IntelligenceManager.__allocating_init(featureFlags:)(uint64_t a1)
{
  objc_class *v1;
  id v3;
  id v4;
  id v5;
  id v6;

  v3 = objc_allocWithZone(v1);
  v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for IntelligenceAvailabilityProvider()), "init");
  v5 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for IntelligenceStateProvider()), "init");
  v6 = objc_msgSend(v3, "initWithFeatureFlags:availabilityProvider:stateProvider:", a1, v4, v5);

  swift_unknownObjectRelease(a1);
  return v6;
}

id IntelligenceManager.init(featureFlags:)(uint64_t a1)
{
  void *v1;
  id v3;
  id v4;
  id v5;

  v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for IntelligenceAvailabilityProvider()), "init");
  v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for IntelligenceStateProvider()), "init");
  v5 = objc_msgSend(v1, "initWithFeatureFlags:availabilityProvider:stateProvider:", a1, v3, v4);

  swift_unknownObjectRelease(a1);
  return v5;
}

uint64_t IntelligenceManager.shouldShowIntelligence(withServerCheck:)(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  *(_QWORD *)(v2 + 232) = v1;
  *(_BYTE *)(v2 + 334) = a1;
  v3 = type metadata accessor for Logger(0);
  *(_QWORD *)(v2 + 240) = v3;
  v4 = *(_QWORD *)(v3 - 8);
  *(_QWORD *)(v2 + 248) = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  *(_QWORD *)(v2 + 256) = swift_task_alloc(v5);
  *(_QWORD *)(v2 + 264) = swift_task_alloc(v5);
  *(_QWORD *)(v2 + 272) = swift_task_alloc(v5);
  *(_QWORD *)(v2 + 280) = swift_task_alloc(v5);
  return swift_task_switch(sub_100015000, 0, 0);
}

uint64_t sub_100015000()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v6;

  v1 = objc_msgSend(*(id *)(*(_QWORD *)(v0 + 232) + OBJC_IVAR____TtC5Setup19IntelligenceManager_featureFlags), "isIntelligenceEnabled");
  if ((_DWORD)v1
    && (*(_BYTE *)(*(_QWORD *)(v0 + 232)
                 + OBJC_IVAR____TtC5Setup19IntelligenceManager_didShowIntelligencePaneThisBuddyRun) & 1) == 0)
  {
    v6 = (_QWORD *)swift_task_alloc(dword_1002EA80C);
    *(_QWORD *)(v0 + 288) = v6;
    *v6 = v0;
    v6[1] = sub_1000150C8;
    return sub_100015D50();
  }
  else
  {
    v2 = *(_QWORD *)(v0 + 272);
    v4 = *(_QWORD *)(v0 + 256);
    v3 = *(_QWORD *)(v0 + 264);
    swift_task_dealloc(*(_QWORD *)(v0 + 280));
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(id))(v0 + 8))(v1);
  }
}

uint64_t sub_1000150C8(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 288);
  *(_BYTE *)(*(_QWORD *)v1 + 335) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100015124, 0, 0);
}

uint64_t sub_100015124(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t);
  void *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  _QWORD *v39;

  if ((*(_BYTE *)(v1 + 335) & 1) != 0)
  {
    v2 = *(_QWORD *)(v1 + 264);
    v3 = *(_QWORD *)(v1 + 240);
    v4 = *(_QWORD *)(v1 + 248);
    v5 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(a1);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Intelligence is already enabled.", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }
    v10 = *(_QWORD *)(v1 + 264);
    v11 = *(_QWORD *)(v1 + 240);
    v12 = *(_QWORD *)(v1 + 248);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    v13 = *(_QWORD *)(v1 + 272);
    v15 = *(_QWORD *)(v1 + 256);
    v14 = *(_QWORD *)(v1 + 264);
    swift_task_dealloc(*(_QWORD *)(v1 + 280));
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
  }
  else
  {
    if (*(_BYTE *)(v1 + 334) == 1)
    {
      v17 = *(_QWORD *)(v1 + 280);
      v18 = *(_QWORD *)(v1 + 240);
      v19 = *(_QWORD *)(v1 + 248);
      v20 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(a1);
      *(_QWORD *)(v1 + 296) = v20;
      v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
      *(_QWORD *)(v1 + 304) = v21;
      v22 = v21(v17, v20, v18);
      v23 = Logger.logObject.getter(v22);
      v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        v25 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Updating intelligence availability", v25, 2u);
        swift_slowDealloc(v25, -1, -1);
      }
      v26 = v1 + 80;
      v27 = *(_QWORD *)(v1 + 280);
      v28 = *(_QWORD *)(v1 + 240);
      v29 = *(_QWORD *)(v1 + 248);
      v30 = *(_QWORD *)(v1 + 232);

      v31 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      *(_QWORD *)(v1 + 312) = v31;
      v31(v27, v28);
      v32 = *(void **)(v30 + OBJC_IVAR____TtC5Setup19IntelligenceManager_availabilityProvider);
      *(_QWORD *)(v1 + 120) = v1 + 333;
      *(_QWORD *)(v1 + 80) = v1;
      *(_QWORD *)(v1 + 88) = sub_100015410;
      v33 = swift_continuation_init(v1 + 80, 1);
      *(_QWORD *)(v1 + 184) = _NSConcreteStackBlock;
      v34 = (_QWORD *)(v1 + 184);
      v34[1] = 0x40000000;
      v34[2] = sub_10000CAC8;
      v34[3] = &unk_10027F700;
      v34[4] = v33;
      objc_msgSend(v32, "fetchLatestAvailabilityWithCompletionHandler:", v34);
      v35 = v26;
    }
    else
    {
      v36 = v1 + 16;
      v37 = *(void **)(*(_QWORD *)(v1 + 232) + OBJC_IVAR____TtC5Setup19IntelligenceManager_availabilityProvider);
      *(_QWORD *)(v1 + 56) = v1 + 332;
      *(_QWORD *)(v1 + 16) = v1;
      *(_QWORD *)(v1 + 24) = sub_1000155A0;
      v38 = swift_continuation_init(v1 + 16, 0);
      *(_QWORD *)(v1 + 144) = _NSConcreteStackBlock;
      v39 = (_QWORD *)(v1 + 144);
      v39[1] = 0x40000000;
      v39[2] = sub_1000159E0;
      v39[3] = &unk_10027F6E8;
      v39[4] = v38;
      objc_msgSend(v37, "isDeviceEligibleForIntelligenceWithCompletionHandler:", v39);
      v35 = v36;
    }
    return swift_continuation_await(v35);
  }
}

uint64_t sub_100015410()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  *(_QWORD *)(*(_QWORD *)v0 + 320) = v1;
  if (v1)
    v2 = sub_100015728;
  else
    v2 = sub_100015470;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100015470(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned __int8 *)(v1 + 333);
  v3 = *(_QWORD *)(v1 + 272);
  v4 = *(_QWORD *)(v1 + 240);
  v5 = *(_QWORD *)(v1 + 248);
  v6 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(a1);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6, v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 67109120;
    *(_DWORD *)(v1 + 328) = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 328, v1 + 332, v10 + 4, v10 + 8);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Should show intelligence: %{BOOL}d", v10, 8u);
    swift_slowDealloc(v10, -1, -1);
  }
  v11 = *(_QWORD *)(v1 + 272);
  v12 = *(_QWORD *)(v1 + 240);
  v13 = *(_QWORD *)(v1 + 248);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  v14 = *(_QWORD *)(v1 + 272);
  v16 = *(_QWORD *)(v1 + 256);
  v15 = *(_QWORD *)(v1 + 264);
  swift_task_dealloc(*(_QWORD *)(v1 + 280));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v2);
}

uint64_t sub_1000155A0()
{
  return swift_task_switch(sub_1000155EC, 0, 0);
}

uint64_t sub_1000155EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(unsigned __int8 *)(v1 + 332);
  v3 = *(_QWORD *)(v1 + 272);
  v4 = *(_QWORD *)(v1 + 240);
  v5 = *(_QWORD *)(v1 + 248);
  v6 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(a1);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6, v4);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v10 = 67109120;
    *(_DWORD *)(v1 + 328) = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 328, v1 + 332, v10 + 4, v10 + 8);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Should show intelligence: %{BOOL}d", v10, 8u);
    swift_slowDealloc(v10, -1, -1);
  }
  v11 = *(_QWORD *)(v1 + 272);
  v12 = *(_QWORD *)(v1 + 240);
  v13 = *(_QWORD *)(v1 + 248);

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  v14 = *(_QWORD *)(v1 + 272);
  v16 = *(_QWORD *)(v1 + 256);
  v15 = *(_QWORD *)(v1 + 264);
  swift_task_dealloc(*(_QWORD *)(v1 + 280));
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v2);
}

uint64_t sub_100015728(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t, uint64_t);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v2 = *(_QWORD *)(v1 + 320);
  v3 = *(_QWORD *)(v1 + 296);
  v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 304);
  v5 = *(_QWORD *)(v1 + 256);
  v6 = *(_QWORD *)(v1 + 240);
  swift_willThrow(a1);
  v7 = v4(v5, v3, v6);
  LOBYTE(v3) = static os_log_type_t.error.getter(v7);
  swift_errorRetain(v2);
  v8 = swift_errorRetain(v2);
  v9 = Logger.logObject.getter(v8);
  v10 = v3;
  if (os_log_type_enabled(v9, (os_log_type_t)v3))
  {
    v11 = *(_QWORD *)(v1 + 320);
    v12 = (uint8_t *)swift_slowAlloc(12, -1);
    v13 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v12 = 138412290;
    swift_errorRetain(v11);
    v14 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(_QWORD *)(v1 + 224) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 224, v1 + 232, v12 + 4, v12 + 12);
    *v13 = v14;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to fetch latest availability status with error: %@", v12, 0xCu);
    v15 = sub_10000A9E4(&qword_1002EA810);
    swift_arrayDestroy(v13, 1, v15);
    swift_slowDealloc(v13, -1, -1);
    swift_slowDealloc(v12, -1, -1);

    swift_errorRelease(v11);
  }
  else
  {
    v16 = *(_QWORD *)(v1 + 320);
    swift_errorRelease(v16);
    swift_errorRelease(v16);
    swift_errorRelease(v16);

  }
  v17 = (*(uint64_t (**)(_QWORD, _QWORD))(v1 + 312))(*(_QWORD *)(v1 + 256), *(_QWORD *)(v1 + 240));
  v18 = *(_QWORD *)(v1 + 272);
  v19 = *(_QWORD *)(v1 + 240);
  v20 = *(_QWORD *)(v1 + 248);
  v21 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v17);
  v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v18, v21, v19);
  v23 = Logger.logObject.getter(v22);
  v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v25 = 67109120;
    *(_DWORD *)(v1 + 328) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 328, v1 + 332, v25 + 4, v25 + 8);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Should show intelligence: %{BOOL}d", v25, 8u);
    swift_slowDealloc(v25, -1, -1);
  }
  v26 = *(_QWORD *)(v1 + 272);
  v27 = *(_QWORD *)(v1 + 240);
  v28 = *(_QWORD *)(v1 + 248);

  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
  v29 = *(_QWORD *)(v1 + 272);
  v31 = *(_QWORD *)(v1 + 256);
  v30 = *(_QWORD *)(v1 + 264);
  swift_task_dealloc(*(_QWORD *)(v1 + 280));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
}

uint64_t sub_1000159E0(uint64_t a1, char a2)
{
  **(_BYTE **)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 64) + 40) = a2;
  return swift_continuation_resume();
}

uint64_t sub_100015B20(char a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  _QWORD *v7;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = dword_1002EA804;
  a3;
  v7 = (_QWORD *)swift_task_alloc(v6);
  v3[4] = v7;
  *v7 = v3;
  v7[1] = sub_100015B94;
  return IntelligenceManager.shouldShowIntelligence(withServerCheck:)(a1);
}

uint64_t sub_100015B94(char a1)
{
  uint64_t *v1;
  void (**v3)(_QWORD, _QWORD);
  void *v4;
  uint64_t v6;

  v3 = *(void (***)(_QWORD, _QWORD))(*v1 + 24);
  v4 = *(void **)(*v1 + 16);
  v6 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 32));

  v3[2](v3, a1 & 1);
  _Block_release(v3);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100015C08()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t result;
  uint64_t v13;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v4);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "didShowIntelligencePaneThisBuddyRun is set this buddy run.", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  *(_BYTE *)(v1 + OBJC_IVAR____TtC5Setup19IntelligenceManager_didShowIntelligencePaneThisBuddyRun) = 1;
  return result;
}

uint64_t sub_100015D50()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[16] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[17] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[18] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[19] = swift_task_alloc(v4);
  v1[20] = swift_task_alloc(v4);
  return swift_task_switch(sub_100015DC0, 0, 0);
}

uint64_t sub_100015DC0()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = *(void **)(v0[16] + OBJC_IVAR____TtC5Setup19IntelligenceManager_stateProvider);
  v0[7] = v0 + 22;
  v0[2] = v0;
  v0[3] = sub_100015E60;
  v3 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_10000CAC8;
  v4[3] = &unk_10027F808;
  v4[4] = v3;
  objc_msgSend(v2, "isEnabledWithCompletionHandler:", v4);
  return swift_continuation_await(v1);
}

uint64_t sub_100015E60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 168) = v1;
  if (v1)
    v2 = sub_100016094;
  else
    v2 = sub_100015EC0;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100015EC0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(v1 + 160);
  v3 = *(_QWORD *)(v1 + 136);
  v4 = *(_QWORD *)(v1 + 144);
  v5 = *(unsigned __int8 *)(v1 + 176);
  v6 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(a1);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v6, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = *(_QWORD *)(v1 + 144);
    v20 = *(_QWORD *)(v1 + 136);
    v21 = *(_QWORD *)(v1 + 160);
    v11 = (uint8_t *)swift_slowAlloc(12, -1);
    v12 = swift_slowAlloc(32, -1);
    *(_DWORD *)v11 = 136315138;
    v22 = v12;
    if ((_DWORD)v5)
      v13 = 0x64656C62616E45;
    else
      v13 = 0x64656C6261736944;
    if ((_DWORD)v5)
      v14 = 0xE700000000000000;
    else
      v14 = 0xE800000000000000;
    *(_QWORD *)(v1 + 120) = sub_10002F320(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 120, v1 + 128, v11 + 4, v11 + 12);
    swift_bridgeObjectRelease(v14);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Intelligence state: %s", v11, 0xCu);
    swift_arrayDestroy(v12, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v12, -1, -1);
    swift_slowDealloc(v11, -1, -1);

    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v21, v20);
  }
  else
  {
    v15 = *(_QWORD *)(v1 + 160);
    v16 = *(_QWORD *)(v1 + 136);
    v17 = *(_QWORD *)(v1 + 144);

    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  }
  v18 = *(_QWORD *)(v1 + 152);
  swift_task_dealloc(*(_QWORD *)(v1 + 160));
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v5);
}

uint64_t sub_100016094(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *(_QWORD *)(v1 + 144);
  v2 = *(_QWORD *)(v1 + 152);
  v4 = *(_QWORD *)(v1 + 136);
  v5 = swift_willThrow(a1);
  v6 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v5);
  v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
  v8 = static os_log_type_t.error.getter(v7);
  v9 = v8;
  v10 = Logger.logObject.getter(v8);
  if (os_log_type_enabled(v10, v9))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, v9, "Failed to determine intelligence status. Abort!", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }
  v13 = *(_QWORD *)(v1 + 144);
  v12 = *(_QWORD *)(v1 + 152);
  v14 = *(_QWORD *)(v1 + 136);
  swift_errorRelease(*(_QWORD *)(v1 + 168));

  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  v15 = *(_QWORD *)(v1 + 152);
  swift_task_dealloc(*(_QWORD *)(v1 + 160));
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
}

uint64_t sub_1000162B0(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_1002EA80C;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_10001672C;
  return sub_100015D50();
}

id IntelligenceManager.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

void IntelligenceManager.init()()
{
  _swift_stdlib_reportUnimplementedInitializer("Setup.IntelligenceManager", 25, "init()", 6, 0);
  __break(1u);
}

id IntelligenceManager.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IntelligenceManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_100016400()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001642C()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1002EA84C);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100016734;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1002EA848 + dword_1002EA848))(v2, v3);
}

uint64_t sub_100016498(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1002EB10C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100016730;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1002EB108 + dword_1002EB108))(a1, v4, v5, v6);
}

uint64_t sub_10001651C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100016548()
{
  uint64_t v0;
  uint64_t v1;
  char v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = *(_BYTE *)(v0 + 16);
  v4 = *(void **)(v0 + 24);
  v3 = *(void **)(v0 + 32);
  v5 = (_QWORD *)swift_task_alloc(dword_1002EA86C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000165B4;
  return ((uint64_t (*)(char, void *, void *))((char *)&dword_1002EA868 + dword_1002EA868))(v2, v4, v3);
}

uint64_t sub_1000165B4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100016600()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1002EB0FC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_100016738;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1002EB0F8 + dword_1002EB0F8))(v2, v3, v4);
}

uint64_t sub_10001667C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000166A8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1002EB10C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001673C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1002EB108 + dword_1002EB108))(a1, v4, v5, v6);
}

id sub_100016740()
{
  char *v0;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::String v4;
  void *object;
  id v6;
  Swift::String v7;
  Swift::String v8;
  void *v9;
  NSString v10;
  NSString v11;
  id v12;
  objc_super v14;
  Swift::String v15;
  Swift::String v16;

  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationLayer] = 0;
  *(_DWORD *)&v0[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationSpeed] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_flowItemDispositionProvider] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_runState] = 0;
  v1 = (void *)objc_opt_self(NSBundle);
  v2 = objc_msgSend(v1, "mainBundle");
  v15._object = (void *)0xE000000000000000;
  v3._object = (void *)0x800000010020B6E0;
  v3._countAndFlagsBits = 0xD000000000000012;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v15._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v15)._object;

  v6 = objc_msgSend(v1, "mainBundle");
  v7._countAndFlagsBits = 0xD000000000000013;
  v16._object = (void *)0xE000000000000000;
  v7._object = (void *)0x800000010020B700;
  v8._countAndFlagsBits = 0;
  v8._object = (void *)0xE000000000000000;
  v16._countAndFlagsBits = 0;
  v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v16)._object;

  v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v9);
  v14.receiver = v0;
  v14.super_class = (Class)type metadata accessor for BuddyChildSafetyController();
  v12 = objc_msgSendSuper2(&v14, "initWithTitle:detailText:icon:contentLayout:", v10, v11, 0, 2);

  return v12;
}

void sub_100016900()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  objc_class *v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  void *object;
  NSString v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  Class isa;
  void *v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  id v21;
  unsigned __int8 v22;
  void *v23;
  id v24;
  double v25;
  double v26;
  Swift::String v27;
  void *v28;
  void *v29;
  Swift::String v30;
  void *v31;
  unint64_t v32;
  uint64_t v33;
  id v34;
  NSString v35;
  id v36;
  uint64_t v37;
  id v38;
  id v39;
  void *v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  Class v45;
  id v46;
  uint64_t v47;
  void *v48;
  void *v49;
  int v50;
  void *v51;
  id v52;
  double v53;
  double v54;
  id v55;
  double v56;
  double v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  id v71;
  id v72;
  id v73;
  id v74;
  id v75;
  id v76;
  id v77;
  id v78;
  uint64_t countAndFlagsBits;
  Class v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  Swift::String v89;
  _QWORD v90[2];
  objc_super v91;
  Swift::String v92;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (objc_class *)type metadata accessor for BuddyChildSafetyController();
  v91.receiver = v0;
  v91.super_class = v6;
  objc_msgSendSuper2(&v91, "viewDidLoad");
  v7 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v92._object = (void *)0xE000000000000000;
  v8._countAndFlagsBits = 0x45554E49544E4F43;
  v8._object = (void *)0xE800000000000000;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v92._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v92)._object;

  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v1, "addBoldButton:action:", v11, "continueTapped");

  v12 = objc_msgSend(v1, "buttonTray");
  v13 = sub_10000A9E4((uint64_t *)&unk_1002EAE40);
  v14 = swift_allocObject(v13, 48, 7);
  *(_OWORD *)(v14 + 16) = xmmword_10024C690;
  *(_QWORD *)(v14 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(BYPrivacySafetyFeaturesIdentifier);
  *(_QWORD *)(v14 + 40) = v15;
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v14);
  objc_msgSend(v12, "setPrivacyLinkForBundles:", isa);

  v17 = (void *)objc_opt_self(BYDevice);
  v18 = objc_msgSend(v17, "currentDevice");
  LOBYTE(isa) = objc_msgSend(v18, "hasHomeButton");

  if ((isa & 1) != 0)
  {
    v19 = 0xE900000000000064;
    v20 = 0x6C6F685F656D6F68;
  }
  else
  {
    strcpy((char *)v90, "homeless_hold");
    HIWORD(v90[1]) = -4864;
    v21 = objc_msgSend(v17, "currentDevice");
    v22 = objc_msgSend(v21, "hasDynamicIsland");

    if ((v22 & 1) == 0)
      goto LABEL_6;
    v19 = 0x800000010020B6C0;
    v20 = 0xD000000000000012;
  }
  v90[0] = v20;
  v90[1] = v19;
LABEL_6:
  v23 = (void *)objc_opt_self(UIScreen);
  v24 = objc_msgSend(v23, "mainScreen");
  objc_msgSend(v24, "scale");
  v26 = v25;

  if ((~*(_QWORD *)&v26 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v26 <= -9.22337204e18)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (v26 >= 9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v89._countAndFlagsBits = (uint64_t)v26;
  v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(&type metadata for Int, &protocol witness table for Int);
  v28 = v27._object;
  v89._countAndFlagsBits = 64;
  v89._object = (void *)0xE100000000000000;
  String.append(_:)(v27);
  swift_bridgeObjectRelease(v28);
  v29 = v89._object;
  swift_bridgeObjectRetain(v89._object);
  v30._countAndFlagsBits = 120;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  swift_bridgeObjectRelease(v29);
  v31 = v89._object;
  String.append(_:)(v89);
  swift_bridgeObjectRelease(v31);
  v33 = v90[0];
  v32 = v90[1];
  v34 = objc_allocWithZone((Class)NSDataAsset);
  swift_bridgeObjectRetain(v32);
  v35 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v32);
  v36 = objc_msgSend(v34, "initWithName:", v35);

  if (v36)
  {
    v38 = objc_msgSend(objc_allocWithZone((Class)BuddyAspectFitLayerView), "init");
    objc_msgSend(v38, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    v39 = objc_msgSend(v1, "contentView");
    objc_msgSend(v39, "addSubview:", v38);

    v40 = (void *)objc_opt_self(CALayer);
    v41 = objc_msgSend(v36, "data");
    v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v44 = v43;

    v45 = Data._bridgeToObjectiveC()().super.isa;
    sub_10000E0BC(v42, v44);
    v46 = objc_msgSend(v40, "buddy_layerForPackageWithData:geometryFlipped:scale:", v45, 1, 1.0);

    v47 = OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationLayer;
    v48 = *(void **)&v1[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationLayer];
    *(_QWORD *)&v1[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationLayer] = v46;

    v49 = *(void **)&v1[v47];
    if (v49)
    {
      objc_msgSend(v49, "speed");
      *(_DWORD *)&v1[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationSpeed] = v50;
      if (*(_QWORD *)&v1[v47])
      {
        objc_msgSend(v38, "setManagedLayer:");
        v51 = *(void **)&v1[v47];
        if (v51)
        {
          v52 = v51;
          swift_bridgeObjectRelease(v32);
          objc_msgSend(v52, "bounds");
          v54 = v53;

          v55 = objc_msgSend(v23, "mainScreen");
          objc_msgSend(v55, "scale");
          v57 = v56;

          v58 = (void *)objc_opt_self(NSLayoutConstraint);
          v59 = sub_10000A9E4(&qword_1002EA500);
          v60 = swift_allocObject(v59, 72, 7);
          *(_OWORD *)(v60 + 16) = xmmword_10024C910;
          v61 = objc_msgSend(v38, "centerXAnchor");
          v62 = objc_msgSend(v1, "contentView");
          v63 = objc_msgSend(v62, "centerXAnchor");

          v64 = objc_msgSend(v61, "constraintEqualToAnchor:", v63);
          *(_QWORD *)(v60 + 32) = v64;
          v65 = objc_msgSend(v38, "widthAnchor");
          v66 = objc_msgSend(v1, "contentView");
          v67 = objc_msgSend(v66, "widthAnchor");

          v68 = objc_msgSend(v65, "constraintEqualToAnchor:", v67);
          *(_QWORD *)(v60 + 40) = v68;
          v69 = objc_msgSend(v38, "topAnchor");
          v70 = objc_msgSend(v1, "contentView");
          v71 = objc_msgSend(v70, "topAnchor");

          v72 = objc_msgSend(v69, "constraintEqualToAnchor:", v71);
          *(_QWORD *)(v60 + 48) = v72;
          v73 = objc_msgSend(v38, "heightAnchor");
          v74 = objc_msgSend(v73, "constraintEqualToConstant:", v54 / v57 + v54 / v57);

          *(_QWORD *)(v60 + 56) = v74;
          v75 = objc_msgSend(v38, "bottomAnchor");
          v76 = objc_msgSend(v1, "contentView");
          v77 = objc_msgSend(v76, "bottomAnchor");

          v78 = objc_msgSend(v75, "constraintEqualToAnchor:", v77);
          *(_QWORD *)(v60 + 64) = v78;
          v89._countAndFlagsBits = v60;
          specialized Array._endMutation()();
          countAndFlagsBits = v89._countAndFlagsBits;
          sub_10000EE0C();
          v80 = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(countAndFlagsBits);
          objc_msgSend(v58, "activateConstraints:", v80);

          return;
        }
        goto LABEL_22;
      }
LABEL_21:
      __break(1u);
LABEL_22:
      __break(1u);
      return;
    }
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  v81 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v37);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v81, v2);
  v82 = swift_bridgeObjectRetain(v32);
  v83 = Logger.logObject.getter(v82);
  v84 = static os_log_type_t.error.getter(v83);
  if (os_log_type_enabled(v83, (os_log_type_t)v84))
  {
    v87 = v2;
    v85 = (uint8_t *)swift_slowAlloc(12, -1);
    v86 = swift_slowAlloc(32, -1);
    v89._countAndFlagsBits = v86;
    *(_DWORD *)v85 = 136315138;
    swift_bridgeObjectRetain(v32);
    v88 = sub_10002F320(v33, v32, &v89._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v85 + 4, v85 + 12);
    swift_bridgeObjectRelease_n(v32, 3);
    _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v84, "Failed to load asset with name '%s'", v85, 0xCu);
    swift_arrayDestroy(v86, 1, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1, -1);
    swift_slowDealloc(v85, -1, -1);

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v87);
  }
  else
  {

    swift_bridgeObjectRelease_n(v32, 2);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

void sub_1000172AC(char a1)
{
  char *v1;
  double v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  objc_super v8;

  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for BuddyChildSafetyController();
  objc_msgSendSuper2(&v8, "viewWillAppear:", a1 & 1);
  v4 = OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationLayer;
  v5 = *(void **)&v1[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationLayer];
  if (v5)
  {
    LODWORD(v3) = 0;
    objc_msgSend(v5, "setSpeed:", v3);
    v6 = *(void **)&v1[v4];
    if (v6)
    {
      v7 = v6;
      objc_msgSend(v7, "setBeginTime:", CACurrentMediaTime());

    }
  }
}

id sub_100017374(char a1)
{
  char *v1;
  id result;
  uint64_t v4;
  void *v5;
  id v6;
  double v7;
  objc_super v8;

  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for BuddyChildSafetyController();
  result = objc_msgSendSuper2(&v8, "viewDidAppear:", a1 & 1);
  v4 = OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationLayer;
  v5 = *(void **)&v1[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationLayer];
  if (v5)
  {
    v6 = v5;
    objc_msgSend(v6, "setBeginTime:", CACurrentMediaTime());

    result = *(id *)&v1[v4];
    if (result)
    {
      LODWORD(v7) = *(_DWORD *)&v1[OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_animationSpeed];
      return objc_msgSend(result, "setSpeed:", v7);
    }
  }
  return result;
}

uint64_t sub_100017570(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  id v9;

  v3 = *(_QWORD *)(v2 + OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_runState);
  if (!v3)
    return 0;
  if ((objc_msgSend((id)swift_unknownObjectRetain(*(_QWORD *)(v2 + OBJC_IVAR____TtC5Setup26BuddyChildSafetyController_runState), a2), "hasCompletedInitialRun") & 1) != 0)goto LABEL_7;
  v4 = objc_msgSend((id)objc_opt_self(BYDevice), "currentDevice");
  v5 = objc_msgSend(v4, "type");

  if (!v5)
  {
    v6 = 1;
LABEL_8:
    swift_unknownObjectRelease(v3);
    return v6;
  }
  if (v5 == (id)1)
  {
LABEL_7:
    v6 = 0;
    goto LABEL_8;
  }
  type metadata accessor for BYDeviceType(0);
  v9 = v5;
  result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v8, &v9, v8, &type metadata for Int);
  __break(1u);
  return result;
}

id sub_1000176D4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyChildSafetyController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BuddyChildSafetyController()
{
  return objc_opt_self(_TtC5Setup26BuddyChildSafetyController);
}

uint64_t sub_10001776C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v10;
  id v11;
  void *v12;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_10000A9E4((uint64_t *)&unk_1002EAC40);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v12 = a2;
    v10 = *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40);
    v11 = a2;
    sub_10001890C((uint64_t)&v12, v10, &qword_1002EA928);
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_100017814(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  id v8;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 32);
  if (a3)
  {
    v5 = sub_10000A9E4((uint64_t *)&unk_1002EAC40);
    v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0, 0);
    *v7 = a3;
    v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }
  else
  {
    v10 = 0;
    if (a2)
    {
      v12 = sub_1000188D0();
      v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)(a2, v12);
    }
    v13 = v10;
    sub_10001890C((uint64_t)&v13, *(_QWORD *)(*(_QWORD *)(v3 + 64) + 40), &qword_1002EA918);
    return swift_continuation_throwingResume(v3);
  }
}

uint64_t sub_100017A18(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock, void *a5)
{
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  _QWORD *v18;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v5[2] = a5;
  v5[3] = _Block_copy(aBlock);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  v12 = v11;
  v5[4] = v11;
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
  v15 = v14;
  v5[5] = v14;
  v16 = unk_1002EA914;
  v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_1002EA910 + dword_1002EA910);
  v17 = a5;
  v18 = (_QWORD *)swift_task_alloc(v16);
  v5[6] = v18;
  *v18 = v5;
  v18[1] = sub_100017AEC;
  return v20(a1, v10, v12, v13, v15);
}

uint64_t sub_100017AEC(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;

  v5 = *(_QWORD *)(*v2 + 40);
  v4 = *(_QWORD *)(*v2 + 48);
  v6 = *(_QWORD *)(*v2 + 32);
  v7 = *(void **)(*v2 + 16);
  v8 = *v2;
  swift_task_dealloc(v4);

  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v6);
  v9 = *(_QWORD *)(v8 + 24);
  if (v1)
  {
    v10 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, _QWORD, void *))(v9 + 16))(v9, 0, v10);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v9 + 16))(*(_QWORD *)(v8 + 24), a1 & 1, 0);
  }
  _Block_release(*(const void **)(v8 + 24));
  return (*(uint64_t (**)(void))(v8 + 8))();
}

id sub_100017BF0()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SetupUserDispositionProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SetupUserDispositionProvider()
{
  return objc_opt_self(_TtC5Setup28SetupUserDispositionProvider);
}

uint64_t sub_100017C40()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 40));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100017C7C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  _QWORD *v7;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (void *)v0[5];
  v6 = (void *)v0[6];
  v7 = (_QWORD *)swift_task_alloc(dword_1002EA904);
  *(_QWORD *)(v1 + 16) = v7;
  *v7 = v1;
  v7[1] = sub_100017CFC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, void *, void *))((char *)&dword_1002EA900 + dword_1002EA900))(v2, v3, v4, v5, v6);
}

uint64_t sub_100017CFC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100017D4C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

_QWORD *sub_100017D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t i;
  unint64_t j;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v20;

  if ((unint64_t)a1 >> 62)
    goto LABEL_22;
  for (i = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter(v20))
  {
    for (j = 0; ; ++j)
    {
      if ((a1 & 0xC000000000000001) != 0)
      {
        v9 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(j, a1);
        goto LABEL_9;
      }
      if (j >= *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        break;
      v9 = *(id *)(a1 + 8 * j + 32);
LABEL_9:
      v10 = v9;
      v11 = j + 1;
      if (__OFADD__(j, 1))
        goto LABEL_21;
      v12 = objc_msgSend(v9, "serialNumber");
      if (!v12)
        goto LABEL_4;
      v13 = v12;
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
      v16 = v15;

      if (v14 == a2 && v16 == a3)
      {

        swift_bridgeObjectRelease(a3);
        goto LABEL_5;
      }
      v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v16, a2, a3, 0);
      swift_bridgeObjectRelease(v16);
      if ((v18 & 1) != 0)
      {

      }
      else
      {
LABEL_4:
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        v7 = _swiftEmptyArrayStorage[2];
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v7);
        v8 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v7, v10);
        specialized ContiguousArray._endMutation()(v8);
      }
LABEL_5:
      if (v11 == i)
        return _swiftEmptyArrayStorage;
    }
    __break(1u);
LABEL_21:
    __break(1u);
LABEL_22:
    if (a1 < 0)
      v20 = a1;
    else
      v20 = a1 & 0xFFFFFFFFFFFFFF8;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100017F34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;

  v5[27] = a4;
  v5[28] = a5;
  v5[25] = a2;
  v5[26] = a3;
  v5[24] = a1;
  return swift_task_switch(sub_100017F54, 0, 0);
}

id sub_100017F54()
{
  _QWORD *v0;
  id result;
  void *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  result = objc_msgSend((id)objc_opt_self(ACAccountStore), "defaultStore");
  v0[29] = result;
  if (result)
  {
    v2 = result;
    v3 = v0 + 2;
    v0[7] = v0 + 23;
    v0[2] = v0;
    v0[3] = sub_100018014;
    v4 = swift_continuation_init(v0 + 2, 1);
    v0[18] = _NSConcreteStackBlock;
    v5 = v0 + 18;
    v5[1] = 0x40000000;
    v5[2] = sub_10001776C;
    v5[3] = &unk_10027F898;
    v5[4] = v4;
    objc_msgSend(v2, "aa_primaryAppleAccountWithCompletion:", v5);
    return (id)swift_continuation_await(v3);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100018014()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 240) = v1;
  if (v1)
    v2 = sub_10001882C;
  else
    v2 = sub_100018074;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100018074()
{
  uint64_t v0;
  void *v1;
  void *v2;
  _QWORD *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  Class isa;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  Swift::String v34;
  void *v35;
  uint64_t v36;
  void *v37;
  _QWORD *v38;

  v1 = *(void **)(v0 + 184);
  v2 = *(void **)(v0 + 232);
  *(_QWORD *)(v0 + 248) = v1;

  if (v1)
  {
    v3 = (_QWORD *)(v0 + 144);
    v4 = objc_msgSend(objc_allocWithZone((Class)AKAppleIDAuthenticationController), "init");
    *(_QWORD *)(v0 + 256) = v4;
    v5 = objc_msgSend(objc_allocWithZone((Class)AKDeviceListRequestContext), "init");
    *(_QWORD *)(v0 + 264) = v5;
    v6 = objc_msgSend(v1, "aa_altDSID");
    objc_msgSend(v5, "setAltDSID:", v6);

    v7 = sub_10000A9E4((uint64_t *)&unk_1002EAE40);
    v8 = swift_allocObject(v7, 48, 7);
    *(_OWORD *)(v8 + 16) = xmmword_10024C690;
    *(_QWORD *)(v8 + 32) = 5459817;
    *(_QWORD *)(v8 + 40) = 0xE300000000000000;
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v8);
    objc_msgSend(v5, "setOperatingSystems:", isa);

    if (v4)
    {
      *(_QWORD *)(v0 + 120) = v0 + 184;
      *(_QWORD *)(v0 + 80) = v0;
      *(_QWORD *)(v0 + 88) = sub_1000184D8;
      *(_QWORD *)(v0 + 176) = swift_continuation_init(v0 + 80, 1);
      *(_QWORD *)(v0 + 144) = _NSConcreteStackBlock;
      *(_QWORD *)(v0 + 152) = 0x40000000;
      *(_QWORD *)(v0 + 160) = sub_100017814;
      *(_QWORD *)(v0 + 168) = &unk_10027F8B0;
      objc_msgSend(v4, "fetchDeviceListWithContext:completion:", v5, v0 + 144);
      return swift_continuation_await(v0 + 80);
    }
    swift_bridgeObjectRelease(0);
    v12 = *(_QWORD *)(v0 + 216);
    v13 = *(_QWORD *)(v0 + 224);
    swift_bridgeObjectRetain(v13);
    v14 = (uint64_t)sub_100017D78((uint64_t)_swiftEmptyArrayStorage, v12, v13);
    swift_bridgeObjectRelease(v13);
    swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
    if ((unint64_t)v14 >> 62)
    {
      if (v14 < 0)
        v27 = v14;
      else
        v27 = v14 & 0xFFFFFFFFFFFFFF8;
      v15 = _CocoaArrayWrapper.endIndex.getter(v27);
      if (v15)
        goto LABEL_7;
    }
    else
    {
      v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v15)
      {
LABEL_7:
        v38 = (_QWORD *)(v0 + 144);
        sub_100028FE0(0, v15 & ~(v15 >> 63), 0);
        if (v15 < 0)
        {
          __break(1u);
LABEL_37:
          __break(1u);
          JUMPOUT(0x1000184C8);
        }
        v16 = 0;
        do
        {
          if ((v14 & 0xC000000000000001) != 0)
            v17 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v16, v14);
          else
            v17 = *(id *)(v14 + 8 * v16 + 32);
          v18 = v17;
          v19 = objc_msgSend(v17, "model", v38);
          if (!v19)
            goto LABEL_37;
          v20 = v19;
          v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
          v23 = v22;

          v25 = _swiftEmptyArrayStorage[2];
          v24 = _swiftEmptyArrayStorage[3];
          if (v25 >= v24 >> 1)
            sub_100028FE0(v24 > 1, v25 + 1, 1);
          ++v16;
          _swiftEmptyArrayStorage[2] = v25 + 1;
          v26 = &_swiftEmptyArrayStorage[2 * v25];
          v26[4] = v21;
          v26[5] = v23;
        }
        while (v15 != v16);
        swift_bridgeObjectRelease(v14);
        v3 = v38;
        goto LABEL_22;
      }
    }
    swift_bridgeObjectRelease(v14);
LABEL_22:
    v28 = *(_QWORD *)(v0 + 192);
    switch(v28)
    {
      case 0:
      case 3:
        v29 = _swiftEmptyArrayStorage[2];
        if (!v29)
        {
          v35 = *(void **)(v0 + 264);
          swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
          goto LABEL_31;
        }
        swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
        v30 = &_swiftEmptyArrayStorage[5];
        while (1)
        {
          v32 = *(_QWORD *)(v0 + 200);
          v31 = *(void **)(v0 + 208);
          v33 = *v30;
          swift_bridgeObjectRetain(*v30);
          v34._countAndFlagsBits = v32;
          v34._object = v31;
          LOBYTE(v31) = String.hasPrefix(_:)(v34);
          swift_bridgeObjectRelease(v33);
          if ((v31 & 1) != 0)
            break;
          v30 += 2;
          if (!--v29)
          {
            v35 = *(void **)(v0 + 264);
            swift_bridgeObjectRelease_n(_swiftEmptyArrayStorage, 2);
LABEL_31:
            v11 = 1;
            goto LABEL_34;
          }
        }
        v35 = *(void **)(v0 + 264);
        swift_bridgeObjectRelease_n(_swiftEmptyArrayStorage, 2);
LABEL_33:
        v11 = 0;
LABEL_34:

        v37 = *(void **)(v0 + 248);
        break;
      case 1:
      case 2:
        v35 = *(void **)(v0 + 264);
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        goto LABEL_33;
      default:
        type metadata accessor for BuddyDataTransferMethod(0);
        *v3 = v28;
        return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v36, v3, v36, &type metadata for UInt);
    }
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
  }
  v11 = 0;
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v11);
}

uint64_t sub_1000184D8()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 112);
  *(_QWORD *)(*(_QWORD *)v0 + 272) = v1;
  if (v1)
    v2 = sub_100018870;
  else
    v2 = sub_100018538;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100018538()
{
  uint64_t v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  void *v26;
  uint64_t v27;
  uint64_t v29;
  void *v30;
  uint64_t v31;

  v1 = *(void **)(v0 + 264);
  v2 = *(_QWORD **)(v0 + 184);

  if (!v2)
  {
    swift_bridgeObjectRelease(0);
    v2 = _swiftEmptyArrayStorage;
  }
  v3 = *(_QWORD *)(v0 + 216);
  v4 = *(_QWORD *)(v0 + 224);
  swift_bridgeObjectRetain(v4);
  v5 = (uint64_t)sub_100017D78((uint64_t)v2, v3, v4);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v2);
  if ((unint64_t)v5 >> 62)
  {
    if (v5 < 0)
      v18 = v5;
    else
      v18 = v5 & 0xFFFFFFFFFFFFFF8;
    v6 = _CocoaArrayWrapper.endIndex.getter(v18);
    if (v6)
      goto LABEL_5;
LABEL_19:
    swift_bridgeObjectRelease(v5);
    goto LABEL_20;
  }
  v6 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v6)
    goto LABEL_19;
LABEL_5:
  sub_100028FE0(0, v6 & ~(v6 >> 63), 0);
  if (v6 < 0)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    JUMPOUT(0x10001881CLL);
  }
  v31 = v0;
  v7 = 0;
  do
  {
    if ((v5 & 0xC000000000000001) != 0)
      v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v7, v5);
    else
      v8 = *(id *)(v5 + 8 * v7 + 32);
    v9 = v8;
    v10 = objc_msgSend(v8, "model", v31);
    if (!v10)
      goto LABEL_34;
    v11 = v10;
    v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
    v14 = v13;

    v16 = _swiftEmptyArrayStorage[2];
    v15 = _swiftEmptyArrayStorage[3];
    if (v16 >= v15 >> 1)
      sub_100028FE0(v15 > 1, v16 + 1, 1);
    ++v7;
    _swiftEmptyArrayStorage[2] = v16 + 1;
    v17 = &_swiftEmptyArrayStorage[2 * v16];
    v17[4] = v12;
    v17[5] = v14;
  }
  while (v6 != v7);
  swift_bridgeObjectRelease(v5);
  v0 = v31;
LABEL_20:
  v19 = *(_QWORD *)(v0 + 192);
  switch(v19)
  {
    case 0:
    case 3:
      v20 = _swiftEmptyArrayStorage[2];
      if (!v20)
      {
        v26 = *(void **)(v0 + 264);
        swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
        goto LABEL_29;
      }
      swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
      v21 = &_swiftEmptyArrayStorage[5];
      while (1)
      {
        v23 = *(_QWORD *)(v0 + 200);
        v22 = *(void **)(v0 + 208);
        v24 = *v21;
        swift_bridgeObjectRetain(*v21);
        v25._countAndFlagsBits = v23;
        v25._object = v22;
        LOBYTE(v22) = String.hasPrefix(_:)(v25);
        swift_bridgeObjectRelease(v24);
        if ((v22 & 1) != 0)
          break;
        v21 += 2;
        if (!--v20)
        {
          v26 = *(void **)(v0 + 264);
          swift_bridgeObjectRelease_n(_swiftEmptyArrayStorage, 2);
LABEL_29:
          v29 = 1;
          goto LABEL_32;
        }
      }
      v26 = *(void **)(v0 + 264);
      swift_bridgeObjectRelease_n(_swiftEmptyArrayStorage, 2);
LABEL_31:
      v29 = 0;
LABEL_32:

      v30 = *(void **)(v0 + 248);
      return (*(uint64_t (**)(uint64_t))(v0 + 8))(v29);
    case 1:
    case 2:
      v26 = *(void **)(v0 + 264);
      swift_bridgeObjectRelease(_swiftEmptyArrayStorage);
      goto LABEL_31;
    default:
      type metadata accessor for BuddyDataTransferMethod(0);
      *(_QWORD *)(v0 + 144) = v19;
      return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(v27, v0 + 144, v27, &type metadata for UInt);
  }
}

uint64_t sub_10001882C(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 232);
  swift_willThrow(a1);

  return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
}

uint64_t sub_100018870(uint64_t a1)
{
  uint64_t v1;
  void *v2;
  void *v3;
  void *v4;

  v2 = *(void **)(v1 + 264);
  v4 = *(void **)(v1 + 248);
  v3 = *(void **)(v1 + 256);
  swift_willThrow(a1);

  return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
}

unint64_t sub_1000188D0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002EA920;
  if (!qword_1002EA920)
  {
    v1 = objc_opt_self(AKRemoteDevice);
    result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1002EA920);
  }
  return result;
}

uint64_t sub_10001890C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = sub_10000A9E4(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t BuddyGMAvailabilityProvider.fetchLatestAvailabilityStatus()()
{
  return swift_task_switch(sub_100018980, 0, 0);
}

uint64_t sub_100018980()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = type metadata accessor for AvailabilityClient(0);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  *(_QWORD *)(v0 + 16) = AvailabilityClient.init()();
  v2 = (_QWORD *)swift_task_alloc(async function pointer to AvailabilityClient.updateAll()[1]);
  *(_QWORD *)(v0 + 24) = v2;
  *v2 = v0;
  v2[1] = sub_1000189EC;
  return AvailabilityClient.updateAll()();
}

uint64_t sub_1000189EC()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*v1 + 24);
  v3 = *v1;
  *(_QWORD *)(v3 + 32) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100018A60, 0, 0);
  swift_release(*(_QWORD *)(v3 + 16));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100018A60()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100018BB0(const void *a1, void *a2)
{
  uint64_t v2;
  id v4;

  *(_QWORD *)(v2 + 16) = a2;
  *(_QWORD *)(v2 + 24) = _Block_copy(a1);
  v4 = a2;
  return swift_task_switch(sub_100018BF8, 0, 0);
}

uint64_t sub_100018BF8()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = type metadata accessor for AvailabilityClient(0);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  *(_QWORD *)(v0 + 32) = AvailabilityClient.init()();
  v2 = (_QWORD *)swift_task_alloc(async function pointer to AvailabilityClient.updateAll()[1]);
  *(_QWORD *)(v0 + 40) = v2;
  *v2 = v0;
  v2[1] = sub_100018C64;
  return AvailabilityClient.updateAll()();
}

uint64_t sub_100018C64()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*v1 + 40);
  v3 = *v1;
  *(_QWORD *)(v3 + 48) = v0;
  swift_task_dealloc(v2);
  if (v0)
    return swift_task_switch(sub_100018D04, 0, 0);
  v5 = *(_QWORD *)(v3 + 24);
  v6 = *(void **)(v3 + 16);
  swift_release(*(_QWORD *)(v3 + 32));

  (*(void (**)(uint64_t, _QWORD))(v5 + 16))(v5, 0);
  _Block_release(*(const void **)(v3 + 24));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_100018D04()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;

  v1 = *(_QWORD *)(v0 + 48);
  v2 = *(_QWORD *)(v0 + 24);
  v3 = *(void **)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 32));

  v4 = (void *)_convertErrorToNSError(_:)(v1);
  swift_errorRelease(v1);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v4);

  _Block_release(*(const void **)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id BuddyGMAvailabilityProvider.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), "init");
}

id BuddyGMAvailabilityProvider.init()()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyGMAvailabilityProvider();
  return objc_msgSendSuper2(&v2, "init");
}

id BuddyGMAvailabilityProvider.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyGMAvailabilityProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t _s5Setup27BuddyGMAvailabilityProviderC11isAvailableSbyF_0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  int v15;

  v0 = type metadata accessor for Logger(0);
  v1 = *(_QWORD *)(v0 - 8);
  __chkstk_darwin(v0);
  v3 = (char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = 2;
  v4 = static GenerativeModelsAvailability.shouldBeShown(inSetupAssistantReturning:)(&v13);
  v5 = v4;
  v6 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v4);
  v7 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v1 + 16))(v3, v6, v0);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc(18, -1);
    *(_DWORD *)v10 = 67109376;
    v14 = v5 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v10 + 4, v10 + 8);
    *(_WORD *)(v10 + 8) = 2048;
    swift_beginAccess(&v13, &v14, 0, 0);
    v12 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v12, &v13, v10 + 10, v10 + 18);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "GM on device status: shouldShow: %{BOOL}d, with availability state: %ld", (uint8_t *)v10, 0x12u);
    swift_slowDealloc(v10, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5 & 1;
}

uint64_t type metadata accessor for BuddyGMAvailabilityProvider()
{
  return objc_opt_self(_TtC5Setup27BuddyGMAvailabilityProvider);
}

uint64_t sub_100019004()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100019030()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1002EA964);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_100019094;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1002EA960 + dword_1002EA960))(v2, v3);
}

uint64_t sub_100019094()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000190E4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100019110(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  id v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (!a2)
    return swift_continuation_throwingResume(*(_QWORD *)(a1 + 32));
  v4 = sub_10000A9E4((uint64_t *)&unk_1002EAC40);
  v5 = swift_allocError(v4, &protocol self-conformance witness table for Error, 0, 0);
  *v6 = a2;
  v7 = a2;
  return swift_continuation_throwingResumeWithError(v2, v5);
}

uint64_t IntelligenceAvailabilityProvider.isDeviceEligibleForIntelligence()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1[2] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v1[5] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (_QWORD *)swift_task_alloc(dword_1002EA97C);
  v1[6] = v4;
  *v4 = v1;
  v4[1] = sub_1000192C4;
  return sub_100019C14();
}

uint64_t sub_1000192C4(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  *(_BYTE *)(*(_QWORD *)v1 + 60) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100019320, 0, 0);
}

uint64_t sub_100019320()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;

  if (*(_BYTE *)(v0 + 60) == 1)
  {
    v2 = *(_QWORD *)(v0 + 32);
    v1 = *(_QWORD *)(v0 + 40);
    v3 = *(_QWORD *)(v0 + 24);
    v4 = objc_msgSend(*(id *)(*(_QWORD *)(v0 + 16)+ OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_generativeModelsAvailabilityProvider), "isAvailable");
    v5 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v4);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v3);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v9 = 67109120;
      *(_DWORD *)(v0 + 56) = (_DWORD)v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 60, v9 + 4, v9 + 8);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking if intelligence is available: %{BOOL}d", v9, 8u);
      swift_slowDealloc(v9, -1, -1);
    }

    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 32) + 8))(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 24));
  }
  else
  {
    v4 = 0;
  }
  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(id))(v0 + 8))(v4);
}

uint64_t sub_100019580(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_1002EA974;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_1000195E0;
  return IntelligenceAvailabilityProvider.isDeviceEligibleForIntelligence()();
}

uint64_t sub_1000195E0(char a1)
{
  uint64_t *v1;
  void (**v3)(_QWORD, _QWORD);
  void *v4;
  uint64_t v6;

  v3 = *(void (***)(_QWORD, _QWORD))(*v1 + 24);
  v4 = *(void **)(*v1 + 16);
  v6 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 32));

  v3[2](v3, a1 & 1);
  _Block_release(v3);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t IntelligenceAvailabilityProvider.fetchLatestAvailability()()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v1[15] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[16] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[17] = v3;
  v1[18] = swift_task_alloc((*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (_QWORD *)swift_task_alloc(dword_1002EA97C);
  v1[19] = v4;
  *v4 = v1;
  v4[1] = sub_1000196C4;
  return sub_100019C14();
}

uint64_t sub_1000196C4(char a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 152);
  *(_BYTE *)(*(_QWORD *)v1 + 176) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100019720, 0, 0);
}

uint64_t sub_100019720(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = *(_QWORD *)(v1 + 144);
  if (*(_BYTE *)(v1 + 176) == 1)
  {
    v3 = *(_QWORD *)(v1 + 128);
    v4 = *(_QWORD *)(v1 + 136);
    v5 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(a1);
    v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
    v7 = Logger.logObject.getter(v6);
    v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Fetching latest Intelligence availability status", v9, 2u);
      swift_slowDealloc(v9, -1, -1);
    }
    v10 = v1 + 16;
    v12 = *(_QWORD *)(v1 + 136);
    v11 = *(_QWORD *)(v1 + 144);
    v14 = *(_QWORD *)(v1 + 120);
    v13 = *(_QWORD *)(v1 + 128);

    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    v15 = *(void **)(v14 + OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_generativeModelsAvailabilityProvider);
    *(_QWORD *)(v1 + 16) = v1;
    *(_QWORD *)(v1 + 24) = sub_1000198A0;
    v16 = swift_continuation_init(v1 + 16, 1);
    *(_QWORD *)(v1 + 80) = _NSConcreteStackBlock;
    v17 = (_QWORD *)(v1 + 80);
    v17[1] = 0x40000000;
    v17[2] = sub_100019110;
    v17[3] = &unk_10027F948;
    v17[4] = v16;
    objc_msgSend(v15, "fetchLatestAvailabilityStatusWithCompletionHandler:", v17);
    return swift_continuation_await(v10);
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v1 + 144));
    return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
  }
}

uint64_t sub_1000198A0()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 48);
  *(_QWORD *)(*(_QWORD *)v0 + 160) = v1;
  if (v1)
    v2 = sub_1000199A0;
  else
    v2 = sub_100019900;
  return swift_task_switch(v2, 0, 0);
}

uint64_t sub_100019900()
{
  uint64_t v0;
  _QWORD *v1;

  v1 = (_QWORD *)swift_task_alloc(dword_1002EA974);
  *(_QWORD *)(v0 + 168) = v1;
  *v1 = v0;
  v1[1] = sub_100019948;
  return IntelligenceAvailabilityProvider.isDeviceEligibleForIntelligence()();
}

uint64_t sub_100019948(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v5;

  v3 = *v1;
  v5 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 168));
  swift_task_dealloc(*(_QWORD *)(v3 + 144));
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(a1);
}

uint64_t sub_1000199A0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + 144);
  swift_willThrow(a1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(_QWORD))(v1 + 8))(0);
}

uint64_t sub_100019B08(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  _QWORD *v5;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_1002EA98C;
  a2;
  v5 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v5;
  *v5 = v2;
  v5[1] = sub_100019B68;
  return IntelligenceAvailabilityProvider.fetchLatestAvailability()();
}

uint64_t sub_100019B68(char a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;

  v4 = *(_QWORD *)(*v2 + 32);
  v5 = *(void **)(*v2 + 16);
  v6 = *v2;
  swift_task_dealloc(v4);

  v7 = *(_QWORD *)(v6 + 24);
  if (v1)
  {
    v8 = (void *)_convertErrorToNSError(_:)(v1);
    swift_errorRelease(v1);
    (*(void (**)(uint64_t, _QWORD, void *))(v7 + 16))(v7, 0, v8);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD, _QWORD))(v7 + 16))(*(_QWORD *)(v6 + 24), a1 & 1, 0);
  }
  _Block_release(*(const void **)(v6 + 24));
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_100019C14()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1[19] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[20] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[21] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[22] = swift_task_alloc(v4);
  v1[23] = swift_task_alloc(v4);
  v1[24] = swift_task_alloc(v4);
  return swift_task_switch(sub_100019C90, 0, 0);
}

uint64_t sub_100019C90(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t has_internal_ui;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t);
  NSString v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  NSString v26;
  id v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  _QWORD *v52;

  v3 = *(_QWORD *)(v2 + 152);
  v4 = OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_serverFlag;
  *(_QWORD *)(v2 + 200) = OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_serverFlag;
  v5 = *(unsigned __int8 *)(v3 + v4);
  if (v5 != 2)
  {
    v27 = (id)(v5 & 1);
LABEL_11:
    v34 = *(_QWORD *)(v2 + 184);
    v35 = *(_QWORD *)(v2 + 176);
    swift_task_dealloc(*(_QWORD *)(v2 + 192));
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(id))(v2 + 8))(v27);
  }
  has_internal_ui = os_variant_has_internal_ui("com.apple.purplebuddy", a2);
  if ((_DWORD)has_internal_ui)
  {
    v7 = *(void **)(*(_QWORD *)(v2 + 152) + OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_preferences);
    if (v7)
    {
      v8 = *(_QWORD *)(v2 + 192);
      v9 = *(_QWORD *)(v2 + 160);
      v10 = *(_QWORD *)(v2 + 168);
      v11 = v7;
      v12 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v11);
      v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16);
      v14 = v13(v8, v12, v9);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Checking override flag", v17, 2u);
        swift_slowDealloc(v17, -1, -1);
      }
      v18 = *(_QWORD *)(v2 + 192);
      v19 = *(_QWORD *)(v2 + 160);
      v20 = *(_QWORD *)(v2 + 168);

      v21 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v21(v18, v19);
      v22 = String._bridgeToObjectiveC()();
      v23 = objc_msgSend(v11, "objectForKey:", v22);

      if (v23)
      {
        v24 = *(_QWORD *)(v2 + 184);
        v25 = *(_QWORD *)(v2 + 160);
        _bridgeAnyObjectToAny(_:)(v23);
        swift_unknownObjectRelease(v23);
        sub_10000E230(v2 + 120);
        v26 = String._bridgeToObjectiveC()();
        v27 = objc_msgSend(v11, "BOOLForKey:", v26);

        v28 = v13(v24, v12, v25);
        v29 = Logger.logObject.getter(v28);
        v30 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v29, v30))
        {
          v31 = (uint8_t *)swift_slowAlloc(8, -1);
          *(_DWORD *)v31 = 67109120;
          *(_DWORD *)(v2 + 208) = (_DWORD)v27;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v2 + 208, v2 + 212, v31 + 4, v31 + 8);
          _os_log_impl((void *)&_mh_execute_header, v29, v30, "Found intelligence override flag: %{BOOL}d", v31, 8u);
          swift_slowDealloc(v31, -1, -1);
        }
        v32 = *(_QWORD *)(v2 + 184);
        v33 = *(_QWORD *)(v2 + 160);

        v21(v32, v33);
        goto LABEL_11;
      }
      *(_OWORD *)(v2 + 120) = 0u;
      *(_OWORD *)(v2 + 136) = 0u;

      has_internal_ui = sub_10000E230(v2 + 120);
    }
  }
  v38 = *(_QWORD *)(v2 + 168);
  v37 = *(_QWORD *)(v2 + 176);
  v39 = *(_QWORD *)(v2 + 160);
  v40 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(has_internal_ui);
  v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 16))(v37, v40, v39);
  v42 = Logger.logObject.getter(v41);
  v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Checking intelligence bag", v44, 2u);
    swift_slowDealloc(v44, -1, -1);
  }
  v45 = v2 + 16;
  v47 = *(_QWORD *)(v2 + 168);
  v46 = *(_QWORD *)(v2 + 176);
  v49 = *(_QWORD *)(v2 + 152);
  v48 = *(_QWORD *)(v2 + 160);

  (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v48);
  v50 = *(void **)(v49 + OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_serverControlProvider);
  *(_QWORD *)(v2 + 56) = v2 + 212;
  *(_QWORD *)(v2 + 16) = v2;
  *(_QWORD *)(v2 + 24) = sub_10001A0A4;
  v51 = swift_continuation_init(v2 + 16, 0);
  *(_QWORD *)(v2 + 80) = _NSConcreteStackBlock;
  v52 = (_QWORD *)(v2 + 80);
  v52[1] = 0x40000000;
  v52[2] = sub_1000159E0;
  v52[3] = &unk_10027FA50;
  v52[4] = v51;
  objc_msgSend(v50, "isFeatureEnabledWithCompletionHandler:", v52);
  return swift_continuation_await(v45);
}

uint64_t sub_10001A0A4()
{
  return swift_task_switch(sub_10001A0F0, 0, 0);
}

uint64_t sub_10001A0F0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned __int8 *)(v0 + 212);
  *(_BYTE *)(*(_QWORD *)(v0 + 152) + *(_QWORD *)(v0 + 200)) = v1;
  v2 = *(_QWORD *)(v0 + 184);
  v3 = *(_QWORD *)(v0 + 176);
  swift_task_dealloc(*(_QWORD *)(v0 + 192));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

id IntelligenceAvailabilityProvider.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for IntelligenceAvailabilityProvider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for IntelligenceAvailabilityProvider()
{
  return objc_opt_self(_TtC5Setup32IntelligenceAvailabilityProvider);
}

uint64_t sub_10001A1EC()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1002EA9D4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10001A250;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1002EA9D0 + dword_1002EA9D0))(v2, v3);
}

uint64_t sub_10001A250()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10001A2A4()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10001A2D0()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1002EA9E4);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10001A514;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1002EA9E0 + dword_1002EA9E0))(v2, v3);
}

uint64_t sub_10001A338()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1002EB0FC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10001A518;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1002EB0F8 + dword_1002EB0F8))(v2, v3, v4);
}

uint64_t sub_10001A3B4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10001A3E0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1002EB10C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001A51C;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1002EB108 + dword_1002EB108))(a1, v4, v5, v6);
}

id sub_10001A464(void *a1, void *a2, void *a3, _BYTE *a4)
{
  char *v7;
  id v8;
  id v9;
  uint64_t v10;
  id v11;
  objc_super v13;

  a4[OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_serverFlag] = 2;
  *(_QWORD *)&a4[OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_generativeModelsAvailabilityProvider] = a1;
  *(_QWORD *)&a4[OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_serverControlProvider] = a2;
  v7 = a4;
  v8 = a1;
  v9 = a2;
  if (os_variant_has_internal_ui("com.apple.purplebuddy", v10))
    v11 = a3;
  else
    a3 = 0;
  *(_QWORD *)&v7[OBJC_IVAR____TtC5Setup32IntelligenceAvailabilityProvider_preferences] = a3;

  v13.receiver = v7;
  v13.super_class = (Class)type metadata accessor for IntelligenceAvailabilityProvider();
  return objc_msgSendSuper2(&v13, "init");
}

NSString sub_10001A520()
{
  NSString result;

  result = String._bridgeToObjectiveC()();
  qword_1002EAA00 = (uint64_t)result;
  return result;
}

uint64_t sub_10001A55C()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for ContentSizeCategory()
{
  return objc_opt_self(_TtC5Setup19ContentSizeCategory);
}

UIContentSizeCategory sub_10001A58C()
{
  __CFString *v0;
  CFPropertyListRef v1;
  uint64_t v2;
  uint64_t v4;
  CFPropertyListRef v5;

  v0 = (__CFString *)String._bridgeToObjectiveC()();
  if (qword_1002E9D08 != -1)
    swift_once(&qword_1002E9D08, sub_10001A520);
  v1 = CFPreferencesCopyAppValue(v0, (CFStringRef)qword_1002EAA00);

  if (v1
    && (v5 = v1,
        type metadata accessor for UIContentSizeCategory(0),
        swift_dynamicCast(&v4, &v5, (char *)&type metadata for Swift.AnyObject + 8, v2, 6)))
  {
    return (UIContentSizeCategory)v4;
  }
  else
  {
    return UIContentSizeCategoryLarge;
  }
}

void sub_10001A660(uint64_t a1)
{
  __CFString *v2;
  uint64_t v3;
  uint64_t v4;
  NSString v5;
  __CFNotificationCenter *v6;
  __CFString *v7;

  v2 = (__CFString *)String._bridgeToObjectiveC()();
  static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  v4 = v3;
  v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v4);
  if (qword_1002E9D08 != -1)
    swift_once(&qword_1002E9D08, sub_10001A520);
  CFPreferencesSetAppValue(v2, v5, (CFStringRef)qword_1002EAA00);

  v6 = CFNotificationCenterGetDarwinNotifyCenter();
  v7 = (__CFString *)String._bridgeToObjectiveC()();
  CFNotificationCenterPostNotification(v6, v7, 0, 0, 1u);

}

uint64_t sub_10001A760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned __int8 v17;
  _QWORD v19[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10001D224(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
    {
LABEL_6:
      v16 = 0;
      return swift_task_create(v8, v16, (char *)&type metadata for () + 8, a2, a3);
    }
  }
  else
  {
    v17 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v17 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (!v9)
      goto LABEL_6;
  }
  v10 = *(_QWORD *)(a3 + 24);
  ObjectType = swift_getObjectType(v9);
  swift_unknownObjectRetain(v9, v12);
  v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
  v15 = v14;
  swift_unknownObjectRelease(v9);
  if (!(v15 | v13))
    goto LABEL_6;
  v19[0] = 0;
  v19[1] = 0;
  v16 = v19;
  v19[2] = v13;
  v19[3] = v15;
  return swift_task_create(v8, v16, (char *)&type metadata for () + 8, a2, a3);
}

void sub_10001A88C()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  Swift::String v4;
  Swift::String v5;
  void *object;
  void *v7;
  NSString v8;
  id v9;
  uint64_t v10;
  void *v11;
  void *v12;
  id v13;
  Swift::String v14;
  Swift::String v15;
  void *v16;
  NSString v17;
  NSString v18;
  objc_super v19;
  Swift::String v20;
  Swift::String v21;

  v1 = &v0[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_name];
  *(_QWORD *)v1 = 0;
  *((_QWORD *)v1 + 1) = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_accountStore] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_primaryAccount] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_buddyPreferencesExcludedFromBackup] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_flowItemDispositionProvider] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_lockdownModeProvider] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_setupMethod] = 0;
  v2 = (void *)objc_opt_self(NSBundle);
  v3 = objc_msgSend(v2, "mainBundle");
  v20._object = (void *)0xE000000000000000;
  v4._object = (void *)0x800000010020BAC0;
  v4._countAndFlagsBits = 0xD000000000000015;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v20._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v4, (Swift::String_optional)0, (NSBundle)v3, v5, v20)._object;

  v7 = (void *)objc_opt_self(UIDevice);
  v8 = String._bridgeToObjectiveC()();
  v9 = objc_msgSend(v7, "modelSpecificLocalizedStringKeyForKey:", v8);

  if (v9)
  {
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
    v12 = v11;

    v13 = objc_msgSend(v2, "mainBundle");
    v21._object = (void *)0xE000000000000000;
    v14._countAndFlagsBits = v10;
    v14._object = v12;
    v15._countAndFlagsBits = 0;
    v15._object = (void *)0xE000000000000000;
    v21._countAndFlagsBits = 0;
    v16 = NSLocalizedString(_:tableName:bundle:value:comment:)(v14, (Swift::String_optional)0, (NSBundle)v13, v15, v21)._object;
    swift_bridgeObjectRelease(v12);

    v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v16);
    v19.receiver = v0;
    v19.super_class = (Class)type metadata accessor for BuddyReadyForChildController();
    objc_msgSendSuper2(&v19, "initWithTitle:detailText:symbolName:contentLayout:", v17, v18, 0, 2);

  }
  else
  {
    __break(1u);
  }
}

void sub_10001AAE4()
{
  char *v0;
  void *v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  objc_class *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  NSString v20;
  id v21;
  void *v22;
  NSString v23;
  id v24;
  uint64_t v25;
  void *v26;
  void *v27;
  id v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSString v36;
  id v37;
  void *v38;
  id v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  id v46;
  id v47;
  id v48;
  uint64_t v49;
  Class isa;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  id v56;
  Swift::String v57;
  Swift::String v58;
  void *object;
  NSString v60;
  id v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  objc_super v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;

  v1 = v0;
  v2 = (_QWORD *)type metadata accessor for Logger(0);
  v3 = *(v2 - 1);
  __chkstk_darwin(v2);
  v5 = (char *)&v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = (objc_class *)type metadata accessor for BuddyReadyForChildController();
  v67.receiver = v0;
  v67.super_class = v6;
  objc_msgSendSuper2(&v67, "viewDidLoad");
  v7 = &v0[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_name];
  v8 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_name + 8];
  if (!v8)
  {
LABEL_4:
    v37 = sub_10001B1A8();
    if (v37)
    {
      v38 = v37;
      v39 = objc_msgSend(v1, "headerView");
      v40 = objc_msgSend(v39, "customIconContainerView");

      if (v40)
      {
        objc_msgSend(v40, "addSubview:", v38);
        v65 = (id)objc_opt_self(NSLayoutConstraint);
        v41 = sub_10000A9E4(&qword_1002EA500);
        v42 = swift_allocObject(v41, 48, 7);
        *(_OWORD *)(v42 + 16) = xmmword_10024C9F0;
        v43 = objc_msgSend(v38, "centerXAnchor");
        v44 = objc_msgSend(v40, "centerXAnchor");
        v45 = objc_msgSend(v43, "constraintEqualToAnchor:", v44);

        *(_QWORD *)(v42 + 32) = v45;
        v46 = objc_msgSend(v38, "centerYAnchor");
        v47 = objc_msgSend(v40, "centerYAnchor");
        v48 = objc_msgSend(v46, "constraintEqualToAnchor:", v47);

        *(_QWORD *)(v42 + 40) = v48;
        v66 = v42;
        specialized Array._endMutation()();
        v49 = v66;
        sub_10001D2D8(0, (unint64_t *)&qword_1002EAB30, NSLayoutConstraint_ptr);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v49);
        objc_msgSend(v65, "activateConstraints:", isa);

LABEL_11:
        v56 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
        v70._object = (void *)0xE000000000000000;
        v57._countAndFlagsBits = 0x45554E49544E4F43;
        v57._object = (void *)0xE800000000000000;
        v58._countAndFlagsBits = 0;
        v58._object = (void *)0xE000000000000000;
        v70._countAndFlagsBits = 0;
        object = NSLocalizedString(_:tableName:bundle:value:comment:)(v57, (Swift::String_optional)0, (NSBundle)v56, v58, v70)._object;

        v60 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(object);
        objc_msgSend(v1, "addBoldButton:action:", v60, "continueTapped");

        return;
      }

    }
    v51 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v37);
    v52 = (*(uint64_t (**)(char *, uint64_t, _QWORD *))(v3 + 16))(v5, v51, v2);
    v53 = Logger.logObject.getter(v52);
    v54 = static os_log_type_t.error.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Failed to get a header view for BuddyReadyForChildController", v55, 2u);
      swift_slowDealloc(v55, -1, -1);
    }

    (*(void (**)(char *, _QWORD *))(v3 + 8))(v5, v2);
    goto LABEL_11;
  }
  v63 = v5;
  v64 = v3;
  v65 = v2;
  v9 = *(_QWORD *)v7;
  swift_bridgeObjectRetain(v8);
  v10 = objc_msgSend(v1, "headerView");
  v61 = (id)objc_opt_self(NSBundle);
  v11 = objc_msgSend(v61, "mainBundle");
  v68._object = (void *)0xE000000000000000;
  v12._object = (void *)0x800000010020BA70;
  v12._countAndFlagsBits = 0xD00000000000001FLL;
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  v68._countAndFlagsBits = 0;
  v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, (Swift::String_optional)0, (NSBundle)v11, v13, v68);

  v15 = sub_10000A9E4(&qword_1002EA390);
  v16 = swift_allocObject(v15, 72, 7);
  *(_OWORD *)(v16 + 16) = xmmword_10024C690;
  *(_QWORD *)(v16 + 56) = &type metadata for String;
  v17 = sub_10000C908();
  *(_QWORD *)(v16 + 64) = v17;
  v62 = v9;
  *(_QWORD *)(v16 + 32) = v9;
  *(_QWORD *)(v16 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  String.init(format:_:)(v14._countAndFlagsBits, v14._object, v16);
  v19 = v18;
  swift_bridgeObjectRelease(v14._object);
  v20 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v19);
  objc_msgSend(v10, "setTitle:", v20);

  v21 = objc_msgSend(v1, "headerView");
  v22 = (void *)objc_opt_self(UIDevice);
  v23 = String._bridgeToObjectiveC()();
  v24 = objc_msgSend(v22, "modelSpecificLocalizedStringKeyForKey:", v23);

  if (v24)
  {
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    v28 = objc_msgSend(v61, "mainBundle");
    v69._object = (void *)0xE000000000000000;
    v29._countAndFlagsBits = v25;
    v29._object = v27;
    v30._countAndFlagsBits = 0;
    v30._object = (void *)0xE000000000000000;
    v69._countAndFlagsBits = 0;
    v31 = NSLocalizedString(_:tableName:bundle:value:comment:)(v29, (Swift::String_optional)0, (NSBundle)v28, v30, v69);
    swift_bridgeObjectRelease(v27);

    v32 = swift_allocObject(v15, 112, 7);
    *(_OWORD *)(v32 + 16) = xmmword_10024C800;
    *(_QWORD *)(v32 + 56) = &type metadata for String;
    *(_QWORD *)(v32 + 64) = v17;
    v33 = v62;
    *(_QWORD *)(v32 + 32) = v62;
    *(_QWORD *)(v32 + 40) = v8;
    *(_QWORD *)(v32 + 96) = &type metadata for String;
    *(_QWORD *)(v32 + 104) = v17;
    *(_QWORD *)(v32 + 72) = v33;
    *(_QWORD *)(v32 + 80) = v8;
    swift_bridgeObjectRetain(v8);
    String.init(format:_:)(v31._countAndFlagsBits, v31._object, v32);
    v35 = v34;
    swift_bridgeObjectRelease(v31._object);
    v36 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v35);
    objc_msgSend(v21, "setDetailText:", v36);

    v3 = v64;
    v2 = v65;
    v5 = v63;
    goto LABEL_4;
  }
  __break(1u);
}

id sub_10001B1A8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  char *v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  Swift::String v24;
  id v25;
  NSString v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  NSString v35;
  id v36;
  id v37;
  id v38;
  id v39;
  double v40;
  id v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  id v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  id v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  id v69;
  id v70;
  uint64_t v71;
  Class isa;
  uint64_t v74;
  id v75;
  id v76;
  id v77;
  char *v78;
  id v79;
  id v80;
  uint64_t v81;
  id v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v1 = type metadata accessor for Logger(0);
  __chkstk_darwin(v1);
  v83 = type metadata accessor for UTType(0);
  v2 = *(_QWORD *)(v83 - 8);
  v3 = __chkstk_darwin(v83);
  __chkstk_darwin(v3);
  v5 = (char *)&v74 - v4;
  v6 = *(void **)(v0 + OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_primaryAccount);
  if (!v6)
    return 0;
  v7 = *(void **)(v0 + OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_accountStore);
  if (!v7)
    return 0;
  v8 = objc_allocWithZone((Class)AAUIProfilePictureStore);
  v9 = v7;
  v10 = v6;
  v82 = objc_msgSend(v8, "initWithAppleAccount:store:", v10, v9);
  if (v82)
  {
    v79 = v10;
    v80 = v9;
    v11 = objc_msgSend((id)objc_opt_self(UTType), "_typeOfCurrentDevice");
    static UTType._unconditionallyBridgeFromObjectiveC(_:)();

    sub_10001D2D8(0, (unint64_t *)&unk_1002EAB20, ISSymbol_ptr);
    v12 = UTType.identifier.getter();
    v14 = sub_10001BD08(v12, v13, 1, 1);
    v81 = v2;
    v78 = v5;
    if (v14)
    {
      v16 = v5;
      v17 = v14;
      v18 = objc_msgSend(v17, "name");
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
      v21 = v20;

      v22 = objc_msgSend((id)objc_opt_self(BYDevice), "currentDevice");
      v23 = objc_msgSend(v22, "type");

      if (v23 == (id)1)
      {
        v84 = v19;
        v85 = v21;
        v24._countAndFlagsBits = 0x616373646E616C2ELL;
        v24._object = (void *)0xEA00000000006570;
        String.append(_:)(v24);
        v21 = v85;
      }
      v25 = objc_msgSend((id)objc_opt_self(UIImageSymbolConfiguration), "configurationWithPointSize:", 69.0);
      v26 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v21);
      v27 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v26, v25);

      v28 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v27);
      if (v28)
      {
        v29 = v28;
        objc_msgSend(v29, "setTranslatesAutoresizingMaskIntoConstraints:", 0);

      }
      v5 = v16;
    }
    else
    {
      v28 = 0;
      v17 = 0;
    }
    v30 = objc_msgSend(v82, "profilePictureForAccountOwner");
    v31 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v30);

    objc_msgSend(v31, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
    if (v28)
    {
      v32 = (void *)objc_opt_self(UIImageSymbolConfiguration);
      v33 = v28;
      v34 = objc_msgSend(v32, "configurationWithPointSize:weight:", 7, 24.0);
      v35 = String._bridgeToObjectiveC()();
      v36 = objc_msgSend((id)objc_opt_self(UIImage), "systemImageNamed:withConfiguration:", v35, v34);

      v37 = objc_msgSend(objc_allocWithZone((Class)UIImageView), "initWithImage:", v36);
      objc_msgSend(v37, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      v38 = objc_msgSend((id)objc_opt_self(BYDevice), "currentDevice");
      v39 = objc_msgSend(v38, "type");

      if (v39)
        v40 = 1.0;
      else
        v40 = -4.0;
      v41 = objc_msgSend(objc_allocWithZone((Class)UIView), "init");
      v77 = v17;
      v15 = v41;
      objc_msgSend(v41, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
      v42 = v31;
      objc_msgSend(v15, "addSubview:", v31);
      objc_msgSend(v15, "addSubview:", v37);
      objc_msgSend(v15, "addSubview:", v33);
      v76 = (id)objc_opt_self(NSLayoutConstraint);
      v43 = sub_10000A9E4(&qword_1002EA500);
      v44 = swift_allocObject(v43, 104, 7);
      *(_OWORD *)(v44 + 16) = xmmword_10024CA00;
      v45 = objc_msgSend(v31, "heightAnchor");
      v46 = objc_msgSend(v45, "constraintEqualToConstant:", 80.0);

      *(_QWORD *)(v44 + 32) = v46;
      v47 = objc_msgSend(v31, "widthAnchor");
      v48 = objc_msgSend(v47, "constraintEqualToConstant:", 80.0);

      *(_QWORD *)(v44 + 40) = v48;
      v75 = v33;
      v49 = objc_msgSend(v33, "leadingAnchor");
      v50 = objc_msgSend(v15, "leadingAnchor");
      v51 = objc_msgSend(v49, "constraintEqualToAnchor:", v50);

      *(_QWORD *)(v44 + 48) = v51;
      v52 = objc_msgSend(v37, "leadingAnchor");
      v53 = objc_msgSend(v33, "trailingAnchor");
      v54 = objc_msgSend(v52, "constraintEqualToAnchor:constant:", v53, v40);

      *(_QWORD *)(v44 + 56) = v54;
      v55 = objc_msgSend(v42, "leadingAnchor");
      v56 = objc_msgSend(v37, "trailingAnchor");
      v57 = objc_msgSend(v55, "constraintEqualToAnchor:constant:", v56, 10.0);

      *(_QWORD *)(v44 + 64) = v57;
      v58 = objc_msgSend(v42, "trailingAnchor");
      v59 = objc_msgSend(v15, "trailingAnchor");
      v60 = objc_msgSend(v58, "constraintEqualToAnchor:", v59);

      *(_QWORD *)(v44 + 72) = v60;
      v61 = v75;
      v62 = objc_msgSend(v75, "centerYAnchor");
      v63 = objc_msgSend(v15, "centerYAnchor");
      v64 = objc_msgSend(v62, "constraintEqualToAnchor:", v63);

      *(_QWORD *)(v44 + 80) = v64;
      v65 = objc_msgSend(v37, "centerYAnchor");
      v66 = objc_msgSend(v15, "centerYAnchor");
      v67 = objc_msgSend(v65, "constraintEqualToAnchor:", v66);

      *(_QWORD *)(v44 + 88) = v67;
      v68 = objc_msgSend(v42, "centerYAnchor");
      v69 = objc_msgSend(v15, "centerYAnchor");
      v70 = objc_msgSend(v68, "constraintEqualToAnchor:", v69);

      *(_QWORD *)(v44 + 96) = v70;
      v84 = v44;
      specialized Array._endMutation()();
      v71 = v84;
      sub_10001D2D8(0, (unint64_t *)&qword_1002EAB30, NSLayoutConstraint_ptr);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease(v71);
      objc_msgSend(v76, "activateConstraints:", isa);

      (*(void (**)(char *, uint64_t))(v81 + 8))(v78, v83);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v83);
      return v31;
    }
  }
  else
  {

    return 0;
  }
  return v15;
}

id sub_10001BD08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  NSString v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v15;

  v8 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  v15 = 0;
  v9 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), "symbolForTypeIdentifier:withResolutionStrategy:variantOptions:error:", v8, a3, a4, &v15);

  v10 = v15;
  if (v9)
  {
    v11 = v15;
  }
  else
  {
    v12 = v15;
    _convertNSErrorToError(_:)(v10);

    swift_willThrow(v13);
  }
  return v9;
}

void sub_10001BDF4()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  Class isa;
  id v24;
  void *v25;
  id v26;
  int v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  id v44;
  _QWORD *v45;
  id v46;
  void *v47;
  _QWORD *v48;
  id v49;
  id v50;
  uint64_t v51;
  char *v52;
  id v53;
  id v54;
  _QWORD aBlock[5];
  _QWORD *v56;

  v1 = v0;
  v2 = sub_10000A9E4(&qword_1002EA790);
  __chkstk_darwin(v2);
  v4 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v11 = (char *)&v53 - v10;
  v12 = *(void **)&v1[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_flowItemDispositionProvider];
  if (v12)
  {
    v13 = *(void **)&v1[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_lockdownModeProvider];
    if (v13)
    {
      v14 = v12;
      swift_unknownObjectRetain(v13, v15);
      v16 = objc_msgSend(v1, "delegate");
      if (v16)
      {
        v17 = v16;
        v18 = objc_msgSend(v1, "navigationController");
        if (v18)
        {
          v53 = v18;
          v54 = v14;
          v19 = objc_msgSend(v18, "viewControllers");
          v20 = sub_10001D2D8(0, &qword_1002EAB08, UIViewController_ptr);
          v21 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v19, v20);

          v22 = sub_10001C310(v21);
          swift_bridgeObjectRelease(v21);
          isa = Array._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease(v22);
          objc_msgSend(v17, "removeViewControllersOnNextPush:", isa);

          v24 = objc_msgSend(objc_allocWithZone((Class)BYSetupUserDisposition), "initWithChild:", 1);
          if (*(_QWORD *)&v1[OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_buddyPreferencesExcludedFromBackup])
          {
            v25 = v24;
            objc_msgSend(v24, "persistUsingPreferences:");
            v26 = objc_msgSend(v13, "hasStagedEnablement");
            v27 = (int)v26;
            v28 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v26);
            v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16);
            if (v27)
            {
              v30 = v29(v11, v28, v5);
              v31 = Logger.logObject.getter(v30);
              v32 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v31, v32))
              {
                v33 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v33 = 0;
                _os_log_impl((void *)&_mh_execute_header, v31, v32, "LockdownMode commit and rebooting ...", v33, 2u);
                swift_slowDealloc(v33, -1, -1);
              }

              (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
              v34 = type metadata accessor for TaskPriority(0);
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 56))(v4, 1, 1, v34);
              type metadata accessor for MainActor(0);
              v36 = swift_unknownObjectRetain(v13, v35);
              v37 = static MainActor.shared.getter(v36);
              v38 = (_QWORD *)swift_allocObject(&unk_10027FAC8, 40, 7);
              v38[2] = v37;
              v38[3] = &protocol witness table for MainActor;
              v38[4] = v13;
              v39 = sub_10001A760((uint64_t)v4, (uint64_t)&unk_1002EAB18, (uint64_t)v38);
              swift_unknownObjectRelease(v17);
              swift_unknownObjectRelease(v13);

              swift_release(v39);
            }
            else
            {
              v40 = v29(v9, v28, v5);
              v41 = Logger.logObject.getter(v40);
              v42 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v41, v42))
              {
                v43 = (uint8_t *)swift_slowAlloc(2, -1);
                *(_WORD *)v43 = 0;
                _os_log_impl((void *)&_mh_execute_header, v41, v42, "Locking the screen...", v43, 2u);
                swift_slowDealloc(v43, -1, -1);
              }

              (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
              v44 = objc_msgSend(objc_allocWithZone((Class)SBSLockScreenService), "init");
              v45 = (_QWORD *)swift_allocObject(&unk_10027FA78, 48, 7);
              v46 = v54;
              v45[2] = v44;
              v45[3] = v46;
              v45[4] = v17;
              v45[5] = v1;
              aBlock[4] = sub_10001D120;
              v56 = v45;
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1107296256;
              aBlock[2] = sub_10002B9CC;
              aBlock[3] = &unk_10027FA90;
              v47 = _Block_copy(aBlock);
              v48 = v56;
              v49 = v46;
              v50 = v44;
              swift_unknownObjectRetain(v17, v51);
              v52 = v1;
              swift_release(v48);
              objc_msgSend(v50, "lockDeviceAnimated:withCompletion:", 1, v47);
              swift_unknownObjectRelease(v17);
              swift_unknownObjectRelease(v13);

              _Block_release(v47);
            }
          }
          else
          {
            __break(1u);
          }
        }
        else
        {

          swift_unknownObjectRelease(v13);
          swift_unknownObjectRelease(v17);
        }
      }
      else
      {

        swift_unknownObjectRelease(v13);
      }
    }
  }
}

uint64_t sub_10001C310(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t result;
  uint64_t i;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  id *v9;
  uint64_t v10;
  id v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  _OWORD v16[2];
  _QWORD *v17;

  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0)
      v14 = a1;
    else
      v14 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v2 = _CocoaArrayWrapper.endIndex.getter(v14);
    swift_bridgeObjectRelease(a1);
  }
  else
  {
    v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v3 = _swiftEmptyArrayStorage;
  if (!v2)
    return (uint64_t)v3;
  v17 = _swiftEmptyArrayStorage;
  result = sub_100028FFC(0, v2 & ~(v2 >> 63), 0);
  if ((v2 & 0x8000000000000000) == 0)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      for (i = 0; i != v2; ++i)
      {
        v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, a1);
        v6 = sub_10001D2D8(0, &qword_1002EAB08, UIViewController_ptr);
        swift_dynamicCast(v16, &v15, v6, (char *)&type metadata for Any + 8, 7);
        v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_100028FFC(0, v3[2] + 1, 1);
          v3 = v17;
        }
        v8 = v3[2];
        v7 = v3[3];
        if (v8 >= v7 >> 1)
        {
          sub_100028FFC(v7 > 1, v8 + 1, 1);
          v3 = v17;
        }
        v3[2] = v8 + 1;
        sub_10000E2E8(v16, &v3[4 * v8 + 4]);
      }
    }
    else
    {
      v9 = (id *)(a1 + 32);
      v10 = sub_10001D2D8(0, &qword_1002EAB08, UIViewController_ptr);
      do
      {
        v15 = *v9;
        v11 = v15;
        swift_dynamicCast(v16, &v15, v10, (char *)&type metadata for Any + 8, 7);
        v3 = v17;
        if ((swift_isUniquelyReferenced_nonNull_native(v17) & 1) == 0)
        {
          sub_100028FFC(0, v3[2] + 1, 1);
          v3 = v17;
        }
        v13 = v3[2];
        v12 = v3[3];
        if (v13 >= v12 >> 1)
        {
          sub_100028FFC(v12 > 1, v13 + 1, 1);
          v3 = v17;
        }
        v3[2] = v13 + 1;
        sub_10000E2E8(v16, &v3[4 * v13 + 4]);
        ++v9;
        --v2;
      }
      while (v2);
    }
    return (uint64_t)v3;
  }
  __break(1u);
  return result;
}

uint64_t sub_10001C570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4[15] = a4;
  v5 = type metadata accessor for MainActor(0);
  v4[16] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v4[17] = v6;
  v4[18] = v7;
  return swift_task_switch(sub_10001C5DC, v6, v7);
}

uint64_t sub_10001C5DC()
{
  _QWORD *v0;
  _QWORD *v1;
  void *v2;
  uint64_t v3;
  _QWORD *v4;

  v1 = v0 + 2;
  v2 = (void *)v0[15];
  v0[2] = v0;
  v0[3] = sub_10001C66C;
  v3 = swift_continuation_init(v0 + 2, 1);
  v0[10] = _NSConcreteStackBlock;
  v4 = v0 + 10;
  v4[1] = 0x40000000;
  v4[2] = sub_100019110;
  v4[3] = &unk_10027FAE0;
  v4[4] = v3;
  objc_msgSend(v2, "enableWithStrategy:completionHandler:", 0, v4);
  return swift_continuation_await(v1);
}

uint64_t sub_10001C66C()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)();

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 48);
  *(_QWORD *)(*v0 + 152) = v2;
  if (v2)
    v3 = sub_10001C6FC;
  else
    v3 = sub_10001C6C8;
  return swift_task_switch(v3, *(_QWORD *)(v1 + 136), *(_QWORD *)(v1 + 144));
}

uint64_t sub_10001C6C8()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 128));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001C6FC()
{
  uint64_t v0;
  uint64_t v1;

  v1 = swift_release(*(_QWORD *)(v0 + 128));
  swift_willThrow(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10001C740(char a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint8_t *v25;
  uint8_t *v26;
  void *v27;
  _QWORD *v28;
  uint64_t v29;
  void *v30;
  _QWORD *v31;
  id v32;
  uint64_t v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD aBlock[5];
  _QWORD *v47;

  v42 = a4;
  v9 = type metadata accessor for DispatchWorkItemFlags(0);
  v45 = *(_QWORD *)(v9 - 8);
  __chkstk_darwin(v9);
  v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS(0);
  v43 = *(_QWORD *)(v12 - 8);
  v44 = v12;
  __chkstk_darwin(v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Logger(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = __chkstk_darwin(v15);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0)
  {
    v41 = a2;
    v20 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v17);
    v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v20, v15);
    v22 = Logger.logObject.getter(v21);
    v23 = static os_log_type_t.error.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc(2, -1);
      v40 = a5;
      v25 = v24;
      *(_WORD *)v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Failed to lock screen!", v24, 2u);
      v26 = v25;
      a5 = v40;
      swift_slowDealloc(v26, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    a2 = v41;
  }
  objc_msgSend(a2, "invalidate");
  sub_10001D2D8(0, (unint64_t *)&qword_1002EA370, OS_dispatch_queue_ptr);
  v27 = (void *)static OS_dispatch_queue.main.getter();
  v28 = (_QWORD *)swift_allocObject(&unk_10027FB08, 40, 7);
  v29 = v42;
  v28[2] = a3;
  v28[3] = v29;
  v28[4] = a5;
  aBlock[4] = sub_10001D298;
  v47 = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100024350;
  aBlock[3] = &unk_10027FB20;
  v30 = _Block_copy(aBlock);
  v31 = v47;
  v32 = a3;
  swift_unknownObjectRetain(v29, v33);
  v34 = a5;
  v35 = swift_release(v31);
  static DispatchQoS.unspecified.getter(v35);
  aBlock[0] = _swiftEmptyArrayStorage;
  v36 = sub_10000C774();
  v37 = sub_10000A9E4((uint64_t *)&unk_1002EA380);
  v38 = sub_10000C7BC();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v37, v38, v9, v36);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v14, v11, v30);
  _Block_release(v30);

  (*(void (**)(char *, uint64_t))(v45 + 8))(v11, v9);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v14, v44);
}

uint64_t sub_10001CBA0(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD aBlock[5];
  _QWORD *v31;

  v25 = a1;
  v4 = type metadata accessor for DispatchWorkItemFlags(0);
  v28 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v26 = *(_QWORD *)(v7 - 8);
  v27 = v7;
  __chkstk_darwin(v7);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for DispatchQoS.QoSClass(0);
  v11 = *(_QWORD *)(v10 - 8);
  __chkstk_darwin(v10);
  v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D2D8(0, (unint64_t *)&qword_1002EA370, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.userInitiated(_:), v10);
  v14 = (void *)static OS_dispatch_queue.global(qos:)(v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v15 = (_QWORD *)swift_allocObject(&unk_10027FB80, 40, 7);
  v16 = v25;
  v15[2] = v2;
  v15[3] = v16;
  v15[4] = a2;
  aBlock[4] = sub_10001D368;
  v31 = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002434C;
  aBlock[3] = &unk_10027FB98;
  v17 = _Block_copy(aBlock);
  v18 = v2;
  v19 = swift_retain(a2);
  static DispatchQoS.unspecified.getter(v19);
  v29 = _swiftEmptyArrayStorage;
  v20 = sub_10000C774();
  v21 = sub_10000A9E4((uint64_t *)&unk_1002EA380);
  v22 = sub_10000C7BC();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v21, v22, v4, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v9, v6, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v27);
  return swift_release(v31);
}

void sub_10001CDFC(uint64_t a1, void (*a2)(uint64_t))
{
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;
  id v8;
  uint64_t v9;
  void *v10;
  void *v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t *v18;
  uint64_t v19;
  id v20;
  id v21;

  v4 = objc_msgSend(objc_allocWithZone((Class)ACAccountStore), "init");
  v5 = OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_accountStore;
  v6 = *(void **)(a1 + OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_accountStore);
  *(_QWORD *)(a1 + OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_accountStore) = v4;

  v7 = *(void **)(a1 + v5);
  if (v7)
  {
    v21 = v7;
    v8 = objc_msgSend(v21, "aa_primaryAppleAccount");
    v9 = OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_primaryAccount;
    v10 = *(void **)(a1 + OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_primaryAccount);
    *(_QWORD *)(a1 + OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_primaryAccount) = v8;

    v11 = *(void **)(a1 + v9);
    if (v11)
    {
      v20 = v11;
      v12 = objc_msgSend(v20, "aa_firstName");
      if (v12)
      {
        v13 = v12;
        v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        v16 = v15;

      }
      else
      {
        v14 = 0;
        v16 = 0;
      }
      v18 = (uint64_t *)(a1 + OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_name);
      v19 = *(_QWORD *)(a1 + OBJC_IVAR____TtC5Setup28BuddyReadyForChildController_name + 8);
      *v18 = v14;
      v18[1] = v16;
      swift_bridgeObjectRelease(v19);
      a2(1);

      v17 = v20;
    }
    else
    {
      a2(1);
      v17 = v21;
    }

  }
  else
  {
    a2(1);
  }
}

id sub_10001D008()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyReadyForChildController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BuddyReadyForChildController()
{
  return objc_opt_self(_TtC5Setup28BuddyReadyForChildController);
}

uint64_t sub_10001D0E4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10001D120(char a1)
{
  uint64_t v1;

  return sub_10001C740(a1, *(void **)(v1 + 16), *(void **)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_10001D12C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10001D13C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10001D144()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10001D170(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1002EAB14);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10001D1DC;
  return sub_10001C570(a1, v4, v5, v6);
}

uint64_t sub_10001D1DC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10001D224(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_10000A9E4(&qword_1002EA790);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10001D264()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

id sub_10001D298()
{
  _QWORD *v0;
  void *v1;
  void *v2;
  uint64_t v3;

  v1 = (void *)v0[2];
  v2 = (void *)v0[3];
  v3 = v0[4];
  objc_msgSend(v1, "setPreferredDispositions:", 16);
  return objc_msgSend(v2, "flowItemDone:", v3);
}

uint64_t sub_10001D2D8(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_10001D310()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10001D334(char a1)
{
  uint64_t v1;

  return sub_100030920(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10001D33C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_10001D368()
{
  uint64_t v0;

  sub_10001CDFC(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24));
}

_QWORD *sub_10001D384()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  float v4;
  float v5;
  float v6;
  float v7;
  float v8;
  float v9;
  double Width;
  double v11;
  double v12;
  double MidY;
  unint64_t v14;
  unint64_t v15;
  double *v16;
  __int128 v18;
  CGRect v19;
  CGRect v20;

  v1 = *(_QWORD *)(*(_QWORD *)&v0[OBJC_IVAR____TtC5Setup13LabeledSlider_ticks] + 16);
  if (!v1)
    return _swiftEmptyArrayStorage;
  v2 = 0;
  v3 = _swiftEmptyArrayStorage;
  v18 = xmmword_10024CA50;
  do
  {
    objc_msgSend(v0, "maximumValue", v18);
    v5 = v4;
    objc_msgSend(v0, "maximumValue");
    v7 = v6;
    objc_msgSend(v0, "minimumValue");
    v9 = v8;
    objc_msgSend(v0, "bounds");
    objc_msgSend(v0, "trackRectForBounds:");
    Width = CGRectGetWidth(v19);
    objc_msgSend(v0, "bounds");
    objc_msgSend(v0, "trackRectForBounds:");
    v12 = v11;
    objc_msgSend(v0, "bounds");
    objc_msgSend(v0, "trackRectForBounds:");
    MidY = CGRectGetMidY(v20);
    if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      v3 = sub_10001ECD4(0, v3[2] + 1, 1, v3);
    v15 = v3[2];
    v14 = v3[3];
    if (v15 >= v14 >> 1)
      v3 = sub_10001ECD4((_QWORD *)(v14 > 1), v15 + 1, 1, v3);
    v3[2] = v15 + 1;
    v16 = (double *)&v3[4 * v15];
    v16[4] = (Width + -16.0) / (float)(v7 - v9) * (float)((float)(v5 / (float)(v1 - 1)) * (float)v2) + v12 + 8.0 + -1.0;
    v16[5] = MidY + -6.0;
    *((_OWORD *)v16 + 3) = v18;
    ++v2;
  }
  while (v1 != v2);
  return v3;
}

uint64_t sub_10001D5C8()
{
  char *v0;
  double v1;
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t i;
  id v7;
  void *v8;
  double MaxY;
  uint64_t v10;
  objc_super v11;
  CGRect v12;

  v11.receiver = v0;
  v11.super_class = (Class)type metadata accessor for LabeledSlider();
  objc_msgSendSuper2(&v11, "intrinsicContentSize");
  v2 = v1;
  v3 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup13LabeledSlider_labels];
  if (!((unint64_t)v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain_n(v3, 2);
    if (v4)
      goto LABEL_3;
    return swift_bridgeObjectRelease_n(v3, 2);
  }
  if (v3 < 0)
    v10 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup13LabeledSlider_labels];
  else
    v10 = v3 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain_n(v3, 2);
  result = _CocoaArrayWrapper.endIndex.getter(v10);
  v4 = result;
  if (!result)
    return swift_bridgeObjectRelease_n(v3, 2);
LABEL_3:
  if (v4 >= 1)
  {
    for (i = 0; i != v4; ++i)
    {
      if ((v3 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(i, v3);
      else
        v7 = *(id *)(v3 + 8 * i + 32);
      v8 = v7;
      objc_msgSend(v7, "frame");
      MaxY = CGRectGetMaxY(v12);

      if (v2 <= MaxY)
        v2 = MaxY;
    }
    return swift_bridgeObjectRelease_n(v3, 2);
  }
  __break(1u);
  return result;
}

uint64_t sub_10001D6F8(unint64_t *a1)
{
  char *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  void *v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  char **v26;
  void *v27;
  uint64_t *v28;
  uint64_t v29;
  id v30;
  id v31;
  id v32;
  NSString v33;
  uint64_t v34;
  uint64_t v35;
  objc_class *v36;
  id v37;
  double v38;
  char *v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  id v46;
  void *v47;
  float v48;
  float v49;
  id v50;
  id v51;
  float v52;
  float v53;
  float v54;
  float v55;
  CGFloat v56;
  double v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  id v66;
  id v67;
  uint64_t v68;
  uint64_t v69;
  Class isa;
  id v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  char *v78;
  uint64_t v79;
  Class v80;
  uint64_t result;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t *v86;
  id v87;
  _QWORD v88[3];
  objc_super v89;
  objc_super v90;
  CGRect v91;

  *(_QWORD *)&v1[OBJC_IVAR____TtC5Setup13LabeledSlider_labelPositionConstraints] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Setup13LabeledSlider_labelOffset] = 0x4024000000000000;
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Setup13LabeledSlider_thumbSize] = 0x403B000000000000;
  v2 = a1[2];
  v3 = v2 - 1;
  if (v2 <= 1)
    goto LABEL_55;
  v4 = a1;
  v5 = (void *)objc_opt_self(UIApplication);
  v6 = v1;
  v7 = objc_msgSend(v5, "sharedApplication");
  v8 = objc_msgSend(v7, "connectedScenes");

  v9 = sub_10001EC9C(0, &qword_1002EAB88, UIScene_ptr);
  v10 = sub_10001EC44();
  v11 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v8, v9, v10);

  sub_10001E040(v11);
  v13 = v12;
  swift_bridgeObjectRelease(v11);
  if ((unint64_t)v13 >> 62)
  {
LABEL_37:
    if (v13 < 0)
      v74 = v13;
    else
      v74 = v13 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v13);
    v75 = _CocoaArrayWrapper.endIndex.getter(v74);
    swift_bridgeObjectRelease(v13);
    if (!v75)
      goto LABEL_17;
  }
  else if (!*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_17;
  }
  if ((v13 & 0xC000000000000001) != 0)
  {
    v14 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v13);
    goto LABEL_7;
  }
  if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v14 = *(id *)(v13 + 32);
LABEL_7:
    v15 = v14;
    swift_bridgeObjectRelease(v13);
    v16 = objc_msgSend(v15, "windows");

    v17 = sub_10001EC9C(0, &qword_1002EAB90, UIWindow_ptr);
    v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v17);

    if ((unint64_t)v13 >> 62)
    {
      if (v13 < 0)
        v82 = v13;
      else
        v82 = v13 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain(v13);
      v18 = _CocoaArrayWrapper.endIndex.getter(v82);
      if (v18)
      {
LABEL_9:
        v19 = 4;
        while (1)
        {
          if ((v13 & 0xC000000000000001) != 0)
            v20 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v19 - 4, v13);
          else
            v20 = *(id *)(v13 + 8 * v19);
          v21 = v20;
          v22 = v19 - 3;
          if (__OFADD__(v19 - 4, 1))
          {
            __break(1u);
            goto LABEL_37;
          }
          if ((objc_msgSend(v20, "isKeyWindow") & 1) != 0)
            break;

          ++v19;
          if (v22 == v18)
            goto LABEL_16;
        }
        swift_bridgeObjectRelease_n(v13, 2);
        v71 = objc_msgSend(v21, "traitCollection");

        v72 = objc_msgSend(v71, "layoutDirection");
        if (v72 != (id)1)
          goto LABEL_18;
        swift_bridgeObjectRetain(v4);
        v23 = sub_10001E358(v73);
LABEL_19:
        *(_QWORD *)&v6[OBJC_IVAR____TtC5Setup13LabeledSlider_ticks] = v23;
        v24 = *(_QWORD *)(v23 + 16);
        v25 = _swiftEmptyArrayStorage;
        v26 = &selRef_hasBlackBackground;
        if (v24)
        {
          v83 = v6;
          v84 = v3;
          v86 = v4;
          v88[0] = _swiftEmptyArrayStorage;
          swift_bridgeObjectRetain(v23);
          specialized ContiguousArray.reserveCapacity(_:)(v24);
          v27 = (void *)objc_opt_self(UIFont);
          v28 = (uint64_t *)(v23 + 40);
          do
          {
            v29 = *v28;
            v30 = objc_allocWithZone((Class)UILabel);
            swift_bridgeObjectRetain(v29);
            v31 = objc_msgSend(v30, "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
            objc_msgSend(v31, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
            v32 = objc_msgSend(v27, "preferredFontForTextStyle:", UIFontTextStyleFootnote);
            objc_msgSend(v31, "setFont:", v32);

            v33 = String._bridgeToObjectiveC()();
            objc_msgSend(v31, "setText:", v33);
            swift_bridgeObjectRelease(v29);

            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            v34 = *(_QWORD *)(v88[0] + 16);
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v34);
            v35 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v34, v31);
            specialized ContiguousArray._endMutation()(v35);
            v28 += 2;
            --v24;
          }
          while (v24);
          v25 = (_QWORD *)v88[0];
          swift_bridgeObjectRelease(v23);
          v3 = v84;
          v4 = v86;
          v6 = v83;
          v26 = &selRef_hasBlackBackground;
        }
        *(_QWORD *)&v6[OBJC_IVAR____TtC5Setup13LabeledSlider_labels] = v25;

        v36 = (objc_class *)type metadata accessor for LabeledSlider();
        v90.receiver = v6;
        v90.super_class = v36;
        v89.receiver = objc_msgSendSuper2(&v90, v26[199], 0.0, 0.0, 0.0, 0.0);
        v89.super_class = v36;
        v37 = v89.receiver;
        objc_msgSendSuper2(&v89, "_setTrackEnabled:", 1);
        LODWORD(v38) = 0;
        objc_msgSend(v37, "setMinimumValue:", v38);
        v39 = (char *)v37;
        swift_bridgeObjectRelease(v4);
        *(float *)&v40 = (float)v3;
        objc_msgSend(v39, "setMaximumValue:", v40);

        v41 = *(_QWORD *)&v39[OBJC_IVAR____TtC5Setup13LabeledSlider_labels];
        if ((unint64_t)v41 >> 62)
        {
          if (v41 < 0)
            v76 = *(_QWORD *)&v39[OBJC_IVAR____TtC5Setup13LabeledSlider_labels];
          else
            v76 = v41 & 0xFFFFFFFFFFFFFF8;
          swift_bridgeObjectRetain(*(_QWORD *)&v39[OBJC_IVAR____TtC5Setup13LabeledSlider_labels]);
          v42 = _CocoaArrayWrapper.endIndex.getter(v76);
          if (v42)
          {
LABEL_25:
            v87 = (id)objc_opt_self(NSLayoutConstraint);
            if (v42 >= 1)
            {
              v43 = 0;
              v44 = &v39[OBJC_IVAR____TtC5Setup13LabeledSlider_labelPositionConstraints];
              v85 = OBJC_IVAR____TtC5Setup13LabeledSlider_ticks;
              v45 = v42;
              do
              {
                if ((v41 & 0xC000000000000001) != 0)
                  v46 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v43, v41);
                else
                  v46 = *(id *)(v41 + 8 * v43 + 32);
                v47 = v46;
                objc_msgSend(v39, "maximumValue");
                v49 = (float)(v48 / (float)(*(_QWORD *)(*(_QWORD *)&v39[v85] + 16) - 1)) * (float)v43;
                objc_msgSend(v39, "addSubview:", v47);
                v50 = objc_msgSend(v47, "centerXAnchor");
                v51 = objc_msgSend(v39, "leftAnchor");
                objc_msgSend(v39, "maximumValue");
                v53 = v52;
                objc_msgSend(v39, "minimumValue");
                v55 = v53 - v54;
                objc_msgSend(v39, "bounds");
                objc_msgSend(v39, "trackRectForBounds:");
                v56 = (CGRectGetWidth(v91) + -16.0) / v55 * v49;
                objc_msgSend(v39, "bounds");
                objc_msgSend(v39, "trackRectForBounds:");
                v58 = objc_msgSend(v50, "constraintEqualToAnchor:constant:", v51, v56 + v57 + 8.0);

                v59 = swift_beginAccess(v44, v88, 33, 0);
                specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v59);
                v61 = *(_QWORD *)((*(_QWORD *)v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
                v60 = *(_QWORD *)((*(_QWORD *)v44 & 0xFFFFFFFFFFFFFF8) + 0x18);
                if (v61 >= v60 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v60 > 1, v61 + 1, 1);
                ++v43;
                v62 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v61, v58);
                specialized Array._endMutation()(v62);
                swift_endAccess(v88);
                v63 = sub_10000A9E4(&qword_1002EA500);
                v64 = swift_allocObject(v63, 40, 7);
                *(_OWORD *)(v64 + 16) = xmmword_10024CA60;
                v65 = objc_msgSend(v47, "topAnchor");
                v66 = objc_msgSend(v39, "topAnchor");
                v67 = objc_msgSend(v65, "constraintEqualToAnchor:constant:", v66, 62.0);

                *(_QWORD *)(v64 + 32) = v67;
                v88[0] = v64;
                specialized Array._endMutation()(v68);
                v69 = v88[0];
                sub_10001EC9C(0, (unint64_t *)&qword_1002EAB30, NSLayoutConstraint_ptr);
                isa = Array._bridgeToObjectiveC()().super.isa;
                swift_bridgeObjectRelease(v69);
                objc_msgSend(v87, "activateConstraints:", isa);

              }
              while (v45 != v43);
              goto LABEL_46;
            }
            goto LABEL_54;
          }
        }
        else
        {
          v42 = *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain(*(_QWORD *)&v39[OBJC_IVAR____TtC5Setup13LabeledSlider_labels]);
          if (v42)
            goto LABEL_25;
        }
LABEL_46:
        swift_bridgeObjectRelease(v41);
        v77 = (void *)objc_opt_self(NSLayoutConstraint);
        v78 = &v39[OBJC_IVAR____TtC5Setup13LabeledSlider_labelPositionConstraints];
        swift_beginAccess(&v39[OBJC_IVAR____TtC5Setup13LabeledSlider_labelPositionConstraints], v88, 0, 0);
        v79 = *(_QWORD *)v78;
        sub_10001EC9C(0, (unint64_t *)&qword_1002EAB30, NSLayoutConstraint_ptr);
        swift_bridgeObjectRetain(v79);
        v80 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v79);
        objc_msgSend(v77, "activateConstraints:", v80);

        return (uint64_t)v39;
      }
    }
    else
    {
      v18 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain(v13);
      if (v18)
        goto LABEL_9;
    }
LABEL_16:
    swift_bridgeObjectRelease(v13);
LABEL_17:
    swift_bridgeObjectRelease(v13);
LABEL_18:
    swift_bridgeObjectRetain(v4);
    v23 = (uint64_t)v4;
    goto LABEL_19;
  }
  __break(1u);
LABEL_54:
  __break(1u);
LABEL_55:
  result = _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, 0xD000000000000020, 0x800000010020BCA0, "Setup/LabeledSlider.swift", 25, 2, 58, 0);
  __break(1u);
  return result;
}

void sub_10001E040(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _QWORD v34[5];
  unint64_t v35;

  v1 = a1;
  v35 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_10001EC9C(0, &qword_1002EAB88, UIScene_ptr);
    v5 = sub_10001EC44();
    v6 = Set.Iterator.init(_cocoa:)(v34, v3, v4, v5);
    v1 = v34[0];
    v31 = v34[1];
    v7 = v34[2];
    v8 = v34[3];
    v9 = v34[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v31 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v13 = (unint64_t)(v7 + 64) >> 6;
  while (v1 < 0)
  {
    v17 = __CocoaSet.Iterator.next()(v6);
    if (!v17)
      goto LABEL_40;
    v18 = v17;
    v32 = v17;
    v19 = sub_10001EC9C(0, &qword_1002EAB88, UIScene_ptr);
    swift_unknownObjectRetain(v18, v20);
    swift_dynamicCast(&v33, &v32, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
    v21 = v33;
    swift_unknownObjectRelease(v18);
    v16 = v8;
    v14 = v9;
    if (!v21)
      goto LABEL_40;
LABEL_36:
    v25 = objc_opt_self(UIWindowScene);
    v26 = swift_dynamicCastObjCClass(v21, v25);
    if (v26)
    {
      v27 = v26;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v29 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v28 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v29 >= v28 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
      v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v27);
      v6 = (_QWORD *)specialized Array._endMutation()(v30);
    }
    else
    {

    }
    v8 = v16;
    v9 = v14;
  }
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
LABEL_35:
    v21 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v21)
      goto LABEL_40;
    goto LABEL_36;
  }
  v22 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v22 >= v13)
      goto LABEL_40;
    v23 = *(_QWORD *)(v31 + 8 * v22);
    v16 = v8 + 1;
    if (!v23)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_40;
      v23 = *(_QWORD *)(v31 + 8 * v16);
      if (!v23)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_40;
        v23 = *(_QWORD *)(v31 + 8 * v16);
        if (!v23)
        {
          v16 = v8 + 4;
          if (v8 + 4 >= v13)
            goto LABEL_40;
          v23 = *(_QWORD *)(v31 + 8 * v16);
          if (!v23)
          {
            v16 = v8 + 5;
            if (v8 + 5 >= v13)
              goto LABEL_40;
            v23 = *(_QWORD *)(v31 + 8 * v16);
            if (!v23)
            {
              v24 = v8 + 6;
              while (v13 != v24)
              {
                v23 = *(_QWORD *)(v31 + 8 * v24++);
                if (v23)
                {
                  v16 = v24 - 1;
                  goto LABEL_34;
                }
              }
LABEL_40:
              sub_10001F0DC(v1);
              return;
            }
          }
        }
      }
    }
LABEL_34:
    v14 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v16 << 6);
    goto LABEL_35;
  }
  __break(1u);
}

uint64_t sub_10001E358(uint64_t result)
{
  _QWORD *v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;

  v1 = (_QWORD *)result;
  v2 = *(_QWORD *)(result + 16);
  if (v2 < 2)
    return (uint64_t)v1;
  v3 = 0;
  v4 = 0;
  v5 = v2 >> 1;
  v6 = v2 - 1;
  v7 = 16 * v2 + 16;
  v15 = v2 >> 1;
  while (1)
  {
    if (v4 == v6)
      goto LABEL_4;
    v8 = v1[2];
    if (v4 >= v8)
      break;
    if (v6 >= v8)
      goto LABEL_13;
    v10 = v1[v3 + 4];
    v9 = v1[v3 + 5];
    v12 = *(_QWORD *)((char *)v1 + v7);
    v11 = *(_QWORD *)((char *)v1 + v7 + 8);
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v11);
    if ((swift_isUniquelyReferenced_nonNull_native(v1) & 1) == 0)
      v1 = sub_10001EEEC(v1);
    v13 = &v1[v3];
    result = swift_bridgeObjectRelease(v1[v3 + 5]);
    v13[4] = v12;
    v13[5] = v11;
    if (v6 >= v1[2])
      goto LABEL_14;
    v14 = (_QWORD *)((char *)v1 + v7);
    result = swift_bridgeObjectRelease(*(_QWORD *)((char *)v1 + v7 + 8));
    *v14 = v10;
    v14[1] = v9;
    v5 = v15;
LABEL_4:
    ++v4;
    --v6;
    v7 -= 16;
    v3 += 2;
    if (v5 == v4)
      return (uint64_t)v1;
  }
  __break(1u);
LABEL_13:
  __break(1u);
LABEL_14:
  __break(1u);
  return result;
}

id sub_10001E554()
{
  char *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  id result;
  uint64_t v5;
  float v6;
  id v7;
  void *v8;
  float v9;
  float v10;
  float v11;
  float v12;
  float v13;
  float v14;
  CGFloat v15;
  double v16;
  uint64_t v17;
  objc_super v18;
  _BYTE v19[24];
  CGRect v20;

  v1 = (uint64_t *)&v0[OBJC_IVAR____TtC5Setup13LabeledSlider_labelPositionConstraints];
  swift_beginAccess(&v0[OBJC_IVAR____TtC5Setup13LabeledSlider_labelPositionConstraints], v19, 0, 0);
  v2 = *v1;
  if (!((unint64_t)v2 >> 62))
  {
    v3 = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = (id)swift_bridgeObjectRetain(v2);
    if (v3)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease(v2);
    v18.receiver = v0;
    v18.super_class = (Class)type metadata accessor for LabeledSlider();
    return objc_msgSendSuper2(&v18, "updateConstraints");
  }
  if (v2 < 0)
    v17 = v2;
  else
    v17 = v2 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v2);
  result = (id)_CocoaArrayWrapper.endIndex.getter(v17);
  v3 = (uint64_t)result;
  if (!result)
    goto LABEL_13;
LABEL_3:
  if (v3 >= 1)
  {
    v5 = 0;
    v6 = (float)(*(_QWORD *)(*(_QWORD *)&v0[OBJC_IVAR____TtC5Setup13LabeledSlider_ticks] + 16) - 1);
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v2);
      else
        v7 = *(id *)(v2 + 8 * v5 + 32);
      v8 = v7;
      objc_msgSend(v0, "maximumValue");
      v10 = (float)(v9 / v6) * (float)v5;
      objc_msgSend(v0, "maximumValue");
      v12 = v11;
      objc_msgSend(v0, "minimumValue");
      v14 = v12 - v13;
      objc_msgSend(v0, "bounds");
      objc_msgSend(v0, "trackRectForBounds:");
      v15 = (CGRectGetWidth(v20) + -16.0) / v14 * v10;
      objc_msgSend(v0, "bounds");
      objc_msgSend(v0, "trackRectForBounds:");
      objc_msgSend(v8, "setConstant:", v15 + v16 + 8.0);

      ++v5;
    }
    while (v3 != v5);
    goto LABEL_13;
  }
  __break(1u);
  return result;
}

void sub_10001E77C(double a1, double a2, double a3, double a4)
{
  char *v4;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  objc_super v19;
  CGRect v20;
  CGRect v21;

  v19.receiver = v4;
  v19.super_class = (Class)type metadata accessor for LabeledSlider();
  objc_msgSendSuper2(&v19, "trackRectForBounds:", a1, a2, a3, a4);
  v9 = *(_QWORD *)&v4[OBJC_IVAR____TtC5Setup13LabeledSlider_labels];
  if ((unint64_t)v9 >> 62)
  {
    if (v9 < 0)
      v18 = *(_QWORD *)&v4[OBJC_IVAR____TtC5Setup13LabeledSlider_labels];
    else
      v18 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    if (!_CocoaArrayWrapper.endIndex.getter(v18))
      goto LABEL_16;
  }
  else
  {
    v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v9);
    if (!v10)
    {
LABEL_16:
      swift_bridgeObjectRelease(v9);
      return;
    }
  }
  if ((v9 & 0xC000000000000001) != 0)
  {
    v11 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v9);
  }
  else
  {
    if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_28;
    }
    v11 = *(id *)(v9 + 32);
  }
  v12 = v11;
  swift_bridgeObjectRelease(v9);
  if (!((unint64_t)v9 >> 62))
  {
    v13 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v9);
    if (v13)
      goto LABEL_8;
    goto LABEL_15;
  }
  if (v9 < 0)
    v16 = v9;
  else
    v16 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v13 = _CocoaArrayWrapper.endIndex.getter(v16);
  if (!v13)
  {
LABEL_15:

    goto LABEL_16;
  }
LABEL_8:
  v14 = v13 - 1;
  if (__OFSUB__(v13, 1))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if ((v9 & 0xC000000000000001) != 0)
  {
    v15 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v14, v9);
LABEL_20:
    v17 = v15;
    swift_bridgeObjectRelease(v9);
    objc_msgSend(v12, "frame");
    CGRectGetWidth(v20);
    objc_msgSend(v17, "frame");
    CGRectGetWidth(v21);

    return;
  }
  if ((v14 & 0x8000000000000000) != 0)
    goto LABEL_29;
  if (v14 < *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v15 = *(id *)(v9 + 8 * v14 + 32);
    goto LABEL_20;
  }
LABEL_30:
  __break(1u);
}

id sub_10001EAA4(float a1)
{
  char *v1;
  id result;
  float v4;
  float v5;

  result = objc_msgSend(v1, "maximumValue");
  v5 = roundf(a1/ (float)(v4 / (float)(*(_QWORD *)(*(_QWORD *)&v1[OBJC_IVAR____TtC5Setup13LabeledSlider_ticks] + 16) - 1)));
  if ((~LODWORD(v5) & 0x7F800000) == 0)
  {
    __break(1u);
    goto LABEL_6;
  }
  if (v5 <= -9.2234e18)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  if (v5 < 9.2234e18)
    return (id)(uint64_t)v5;
LABEL_7:
  __break(1u);
  return result;
}

id sub_10001EBAC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LabeledSlider();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LabeledSlider()
{
  return objc_opt_self(_TtC5Setup13LabeledSlider);
}

unint64_t sub_10001EC44()
{
  unint64_t result;
  uint64_t v1;

  result = qword_1002EAE50;
  if (!qword_1002EAE50)
  {
    v1 = sub_10001EC9C(255, &qword_1002EAB88, UIScene_ptr);
    result = swift_getWitnessTable(&protocol conformance descriptor for NSObject, v1);
    atomic_store(result, (unint64_t *)&qword_1002EAE50);
  }
  return result;
}

uint64_t sub_10001EC9C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

_QWORD *sub_10001ECD4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10000A9E4(&qword_1002EAB98);
      v11 = (_QWORD *)swift_allocObject(v10, 32 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 1;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 5);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[4 * v8 + 4])
          memmove(v14, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10001EF00(0, v8, (char *)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10001EDE0(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      v10 = sub_10000A9E4((uint64_t *)&unk_1002EAE40);
      v11 = (_QWORD *)swift_allocObject(v10, 16 * v9 + 32, 7);
      v12 = j__malloc_size(v11);
      v13 = v12 - 32;
      if (v12 < 32)
        v13 = v12 - 17;
      v11[2] = v8;
      v11[3] = 2 * (v13 >> 4);
      v14 = v11 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v11 = _swiftEmptyArrayStorage;
      v14 = &_swiftEmptyArrayStorage[4];
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v11 != a4 || v14 >= &a4[2 * v8 + 4])
          memmove(v14, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_10001EFE8(0, v8, (unint64_t)v14, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease(a4);
    return v11;
  }
  __break(1u);
  return result;
}

_QWORD *sub_10001EEEC(_QWORD *a1)
{
  return sub_10001EDE0(0, a1[2], 0, a1);
}

char *sub_10001EF00(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = (char *)(a4 + 32 * a1 + 32);
    v6 = 32 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10001EFE8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else
  {
    if (v4 < 0)
    {
      result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize with negative count", 51, 2, "Swift/UnsafePointer.swift", 25, 2, 1090, 0);
      goto LABEL_9;
    }
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy(a3);
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
LABEL_9:
  __break(1u);
  return result;
}

uint64_t sub_10001F0DC(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

void sub_10001F0E4()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  void *v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  CGFloat v15;
  void *v16;
  id v17;
  id v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  float v23;
  uint64_t v24;
  double *i;
  double v26;
  double v27;
  double v28;
  double v29;
  uint64_t v30;
  id v31;
  float v32;
  float v33;
  float v34;
  float v35;
  float v36;
  float v37;
  CGFloat v38;
  double v39;
  id v40;
  _QWORD *v41;
  char v42[24];
  CGRect v43;
  CGRect v44;
  CGRect v45;

  v1 = objc_msgSend(v0, "_minTrackView");
  if (!v1)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  v2 = v1;
  objc_msgSend(v1, "setHidden:", 1);

  v3 = objc_msgSend(v0, "_maxTrackView");
  if (!v3)
  {
LABEL_14:
    __break(1u);
    return;
  }
  v4 = v3;
  objc_msgSend(v3, "setHidden:", 1);

  v5 = (void *)objc_opt_self(UIColor);
  v6 = objc_msgSend(v5, "systemFillColor");
  objc_msgSend(v6, "set");

  objc_msgSend(v0, "bounds");
  objc_msgSend(v0, "trackRectForBounds:");
  v8 = v7;
  v10 = v9;
  v12 = v11;
  v14 = v13;
  objc_msgSend(v0, "bounds");
  objc_msgSend(v0, "trackRectForBounds:");
  v15 = CGRectGetHeight(v43) * 0.5;
  v16 = (void *)objc_opt_self(UIBezierPath);
  v17 = objc_msgSend(v16, "bezierPathWithRoundedRect:cornerRadius:", v8, v10, v12, v14, v15);
  objc_msgSend(v17, "fill");

  v18 = objc_msgSend(v5, "systemGray4Color");
  objc_msgSend(v18, "set");

  v19 = sub_10001D384();
  v20 = v19;
  v21 = v19[2];
  if (v21)
  {
    v22 = &v0[OBJC_IVAR____TtC5Setup13LabeledSlider_labelPositionConstraints];
    v23 = (float)(*(_QWORD *)(*(_QWORD *)&v0[OBJC_IVAR____TtC5Setup13LabeledSlider_ticks] + 16) - 1);
    swift_beginAccess(&v0[OBJC_IVAR____TtC5Setup13LabeledSlider_labelPositionConstraints], v42, 0, 0);
    v24 = 0;
    v41 = v20;
    for (i = (double *)(v20 + 7); ; i += 4)
    {
      v26 = *(i - 3);
      v27 = *(i - 2);
      v28 = *(i - 1);
      v29 = *i;
      v30 = *(_QWORD *)v22;
      if ((*(_QWORD *)v22 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain(*(_QWORD *)v22);
        v31 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v24, v30);
        swift_bridgeObjectRelease(v30);
      }
      else
      {
        if ((unint64_t)v24 >= *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          goto LABEL_13;
        }
        v31 = *(id *)(v30 + 8 * v24 + 32);
      }
      objc_msgSend(v0, "maximumValue", v41);
      v33 = (float)(v32 / v23) * (float)v24;
      objc_msgSend(v0, "maximumValue");
      v35 = v34;
      objc_msgSend(v0, "minimumValue");
      v37 = v35 - v36;
      objc_msgSend(v0, "bounds");
      objc_msgSend(v0, "trackRectForBounds:");
      v38 = (CGRectGetWidth(v44) + -16.0) / v37 * v33;
      objc_msgSend(v0, "bounds");
      objc_msgSend(v0, "trackRectForBounds:");
      objc_msgSend(v31, "setConstant:", v38 + v39 + 8.0);

      v45.origin.x = v26;
      v45.origin.y = v27;
      v45.size.width = v28;
      v45.size.height = v29;
      v40 = objc_msgSend(v16, "bezierPathWithRoundedRect:cornerRadius:", v26, v27, v28, v29, CGRectGetWidth(v45) * 0.5);
      objc_msgSend(v40, "fill");

      if (v21 == ++v24)
      {
        swift_bridgeObjectRelease(v41);
        return;
      }
    }
  }
  swift_bridgeObjectRelease(v19);
}

uint64_t sub_10001F4BC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  void *v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;

  objc_msgSend(v0, "setNeedsDisplay");
  v1 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup13LabeledSlider_labels];
  if (!((unint64_t)v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v1);
    if (v2)
      goto LABEL_3;
    return swift_bridgeObjectRelease(v1);
  }
  if (v1 < 0)
    v9 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup13LabeledSlider_labels];
  else
    v9 = v1 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v1);
  v2 = _CocoaArrayWrapper.endIndex.getter(v9);
  if (!v2)
    return swift_bridgeObjectRelease(v1);
LABEL_3:
  result = objc_opt_self(UIFont);
  if (v2 >= 1)
  {
    v4 = (void *)result;
    v5 = 0;
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v5, v1);
      else
        v6 = *(id *)(v1 + 8 * v5 + 32);
      v7 = v6;
      ++v5;
      v8 = objc_msgSend(v4, "preferredFontForTextStyle:", UIFontTextStyleFootnote);
      objc_msgSend(v7, "setFont:", v8);

    }
    while (v2 != v5);
    return swift_bridgeObjectRelease(v1);
  }
  __break(1u);
  return result;
}

void *sub_10001F5F4()
{
  uint64_t v0;
  void *result;
  unsigned int v2;
  id v3;
  unint64_t v4;
  unint64_t v5;
  Swift::String_optional v6;
  Swift::String v7;
  uint64_t v8;
  uint64_t countAndFlagsBits;
  unint64_t v10;

  result = *(void **)(v0 + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_capabilities);
  if (result)
  {
    v2 = objc_msgSend(result, "supportsPearl");
    v3 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    if (v2)
    {
      v10 = 0xE000000000000000;
      v4 = 0x800000010020C020;
      v5 = 0xD00000000000002BLL;
    }
    else
    {
      v5 = 0xD00000000000002CLL;
      v10 = 0xE000000000000000;
      v4 = 0x800000010020BFF0;
    }
    v6.value._countAndFlagsBits = 0x654B656C706D6944;
    v6.value._object = (void *)0xE900000000000079;
    v7._countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    v8 = 0;
    countAndFlagsBits = NSLocalizedString(_:tableName:bundle:value:comment:)(*(Swift::String *)&v5, v6, (NSBundle)v3, v7, *(Swift::String *)(&v10 - 1))._countAndFlagsBits;

    return (void *)countAndFlagsBits;
  }
  else
  {
    __break(1u);
  }
  return result;
}

void sub_10001F6F0()
{
  char *v0;
  uint64_t v1;
  void *v2;
  char *v3;
  Swift::String *v4;
  void *v5;
  id v6;
  Swift::String v7;
  Swift::String_optional v8;
  Swift::String v9;
  Swift::String v10;
  id v11;
  Swift::String v12;
  Swift::String_optional v13;
  Swift::String v14;
  void *object;
  void *v16;
  NSString v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  Swift::String v23;
  Swift::String_optional v24;
  Swift::String v25;
  void *v26;
  NSString v27;
  id v28;
  NSString v29;
  NSString v30;
  objc_super v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;

  v1 = OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_notificationCenter;
  v2 = (void *)objc_opt_self(NSNotificationCenter);
  v3 = v0;
  *(_QWORD *)&v0[v1] = objc_msgSend(v2, "defaultCenter");
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_forceExecutePostAuthenticationWorkItem] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_postAuthenticationWorkItem] = 0;
  v4 = (Swift::String *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_localAuthenticationReason];
  v5 = (void *)objc_opt_self(NSBundle);
  v6 = objc_msgSend(v5, "mainBundle");
  v7._countAndFlagsBits = 0xD00000000000003ELL;
  v32._object = (void *)0xE000000000000000;
  v7._object = (void *)0x800000010020C180;
  v8.value._countAndFlagsBits = 0x654B656C706D6944;
  v8.value._object = (void *)0xE900000000000079;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v32._countAndFlagsBits = 0;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, v8, (NSBundle)v6, v9, v32);

  *v4 = v10;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_managedConfiguration] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_capabilities] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_paneFeatureAnalyticsManager] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_featureFlags] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_buddyPreferences] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_runState] = 0;
  *(_QWORD *)&v3[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_miscState] = 0;

  v11 = objc_msgSend(v5, "mainBundle");
  v12._countAndFlagsBits = 0xD00000000000001ELL;
  v33._object = (void *)0xE000000000000000;
  v12._object = (void *)0x800000010020C1C0;
  v13.value._countAndFlagsBits = 0x654B656C706D6944;
  v13.value._object = (void *)0xE900000000000079;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  v33._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v12, v13, (NSBundle)v11, v14, v33)._object;

  v16 = (void *)objc_opt_self(UIDevice);
  v17 = String._bridgeToObjectiveC()();
  v18 = objc_msgSend(v16, "modelSpecificLocalizedStringKeyForKey:", v17);

  if (v18)
  {
    v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
    v21 = v20;

    v22 = objc_msgSend(v5, "mainBundle");
    v34._object = (void *)0xE000000000000000;
    v23._countAndFlagsBits = v19;
    v23._object = v21;
    v24.value._countAndFlagsBits = 0x654B656C706D6944;
    v24.value._object = (void *)0xE900000000000079;
    v25._countAndFlagsBits = 0;
    v25._object = (void *)0xE000000000000000;
    v34._countAndFlagsBits = 0;
    v26 = NSLocalizedString(_:tableName:bundle:value:comment:)(v23, v24, (NSBundle)v22, v25, v34)._object;
    swift_bridgeObjectRelease(v21);

    v27 = String._bridgeToObjectiveC()();
    v28 = objc_msgSend((id)objc_opt_self(UIImage), "imageNamed:", v27);

    v29 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v30 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v26);
    v31.receiver = v3;
    v31.super_class = (Class)type metadata accessor for BuddyStolenDeviceProtectionController();
    objc_msgSendSuper2(&v31, "initWithTitle:detailText:icon:contentLayout:", v29, v30, v28, 2);

  }
  else
  {
    __break(1u);
  }
}

void sub_10001FA84()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  NSString v3;
  NSString v4;
  void *v5;
  unint64_t v6;
  NSString v7;
  void *v8;
  id v9;
  Swift::String v10;
  Swift::String_optional v11;
  Swift::String v12;
  void *object;
  NSString v14;
  NSString v15;
  NSString v16;
  void *v17;
  NSString v18;
  id v19;
  uint64_t v20;
  void *v21;
  void *v22;
  id v23;
  Swift::String v24;
  Swift::String_optional v25;
  Swift::String v26;
  void *v27;
  NSString v28;
  NSString v29;
  NSString v30;
  id v31;
  Swift::String v32;
  Swift::String_optional v33;
  Swift::String v34;
  void *v35;
  NSString v36;
  id v37;
  Swift::String v38;
  Swift::String_optional v39;
  Swift::String v40;
  void *v41;
  id v42;
  Swift::String v43;
  Swift::String v44;
  Swift::String v45;
  Swift::String v46;

  sub_10001F5F4();
  v2 = v1;
  v3 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v2);
  v4 = String._bridgeToObjectiveC()();
  v5 = *(void **)&v0[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_capabilities];
  if (v5)
  {
    if (objc_msgSend(v5, "supportsPearl"))
      v6 = 0xE600000000000000;
    else
      v6 = 0xE700000000000000;
    v7 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v6);
    objc_msgSend(v0, "addBulletedListItemWithTitle:description:symbolName:", v3, v4, v7);

    v8 = (void *)objc_opt_self(NSBundle);
    v9 = objc_msgSend(v8, "mainBundle");
    v10._countAndFlagsBits = 0xD000000000000029;
    v43._object = (void *)0xE000000000000000;
    v10._object = (void *)0x800000010020C0A0;
    v11.value._countAndFlagsBits = 0x654B656C706D6944;
    v11.value._object = (void *)0xE900000000000079;
    v12._countAndFlagsBits = 0;
    v12._object = (void *)0xE000000000000000;
    v43._countAndFlagsBits = 0;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v10, v11, (NSBundle)v9, v12, v43)._object;

    v14 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    v15 = String._bridgeToObjectiveC()();
    v16 = String._bridgeToObjectiveC()();
    objc_msgSend(v0, "addBulletedListItemWithTitle:description:symbolName:", v14, v15, v16);

    v17 = (void *)objc_opt_self(UIDevice);
    v18 = String._bridgeToObjectiveC()();
    v19 = objc_msgSend(v17, "modelSpecificLocalizedStringKeyForKey:", v18);

    if (v19)
    {
      v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(v19);
      v22 = v21;

      v23 = objc_msgSend(v8, "mainBundle");
      v44._object = (void *)0xE000000000000000;
      v24._countAndFlagsBits = v20;
      v24._object = v22;
      v25.value._countAndFlagsBits = 0x654B656C706D6944;
      v25.value._object = (void *)0xE900000000000079;
      v26._countAndFlagsBits = 0;
      v26._object = (void *)0xE000000000000000;
      v44._countAndFlagsBits = 0;
      v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, v25, (NSBundle)v23, v26, v44)._object;
      swift_bridgeObjectRelease(v22);

      v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v27);
      v29 = String._bridgeToObjectiveC()();
      v30 = String._bridgeToObjectiveC()();
      objc_msgSend(v0, "addBulletedListItemWithTitle:description:symbolName:", v28, v29, v30);

      v31 = objc_msgSend(v8, "mainBundle");
      v45._object = (void *)0xE000000000000000;
      v32._object = (void *)0x800000010020C120;
      v32._countAndFlagsBits = 0xD000000000000027;
      v33.value._countAndFlagsBits = 0x654B656C706D6944;
      v33.value._object = (void *)0xE900000000000079;
      v34._countAndFlagsBits = 0;
      v34._object = (void *)0xE000000000000000;
      v45._countAndFlagsBits = 0;
      v35 = NSLocalizedString(_:tableName:bundle:value:comment:)(v32, v33, (NSBundle)v31, v34, v45)._object;

      v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v35);
      objc_msgSend(v0, "addBoldButton:action:", v36, "turnOnTapped");

      v37 = objc_msgSend(v8, "mainBundle");
      v46._object = (void *)0xE000000000000000;
      v38._object = (void *)0x800000010020C150;
      v38._countAndFlagsBits = 0xD000000000000027;
      v39.value._countAndFlagsBits = 0x654B656C706D6944;
      v39.value._object = (void *)0xE900000000000079;
      v40._countAndFlagsBits = 0;
      v40._object = (void *)0xE000000000000000;
      v46._countAndFlagsBits = 0;
      v41 = NSLocalizedString(_:tableName:bundle:value:comment:)(v38, v39, (NSBundle)v37, v40, v46)._object;

      v42 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v41);
      objc_msgSend(v0, "addLinkButton:action:", v42, "notNowTapped");

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

id sub_10001FF24(char a1)
{
  char *v1;
  id result;
  void *v4;
  id v5;
  Class isa;
  NSString v7;
  objc_super v8;

  v8.receiver = v1;
  v8.super_class = (Class)type metadata accessor for BuddyStolenDeviceProtectionController();
  objc_msgSendSuper2(&v8, "viewDidAppear:", a1 & 1);
  result = *(id *)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_paneFeatureAnalyticsManager];
  if (result)
  {
    result = objc_msgSend(result, "clearActionForFeature:", 17);
    v4 = *(void **)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_buddyPreferences];
    if (v4)
    {
      v5 = v4;
      isa = Bool._bridgeToObjectiveC()().super.super.isa;
      v7 = String._bridgeToObjectiveC()();
      objc_msgSend(v5, "setObject:forKey:", isa, v7);

      return objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_notificationCenter], "addObserver:selector:name:object:", v1, "applicationDidBecomeActive", UIApplicationDidBecomeActiveNotification, 0);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_100020248(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + *a4);
  *(_QWORD *)(a1 + *a4) = a3;
  swift_unknownObjectRetain(a3, a2);
  return swift_unknownObjectRelease(v4);
}

id sub_100020314()
{
  uint64_t v0;
  id result;
  void *v2;
  id v3;
  NSString v4;
  unsigned __int8 v5;
  void *v6;
  id v7;
  unsigned __int8 v8;
  id v9;
  unsigned int v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void *v16;
  unsigned int v17;
  uint64_t v18;

  result = *(id *)(v0 + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_featureFlags);
  if (!result)
  {
    __break(1u);
    goto LABEL_22;
  }
  if (!objc_msgSend(result, "isStolenDeviceProtectionEnabled"))
    return 0;
  result = *(id *)(v0 + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_miscState);
  if (!result)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  result = objc_msgSend(result, "launchedToShowStolenDeviceProtection");
  if (!(_DWORD)result)
    return 0;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_buddyPreferences);
  if (!v2)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v3 = v2;
  v4 = String._bridgeToObjectiveC()();
  v5 = objc_msgSend(v3, "BOOLForKey:", v4);

  if ((v5 & 1) != 0)
    return 0;
  v6 = (void *)objc_opt_self(LARatchetManager);
  v7 = objc_msgSend(v6, "sharedInstance");
  v8 = objc_msgSend(v7, "isFeatureEnabled");

  if ((v8 & 1) != 0)
    return 0;
  v9 = objc_msgSend(v6, "sharedInstance");
  v10 = objc_msgSend(v9, "isFeatureAvailable");

  if (!v10)
    return 0;
  v11 = (void *)objc_opt_self(AKAccountManager);
  v12 = objc_msgSend(v11, "sharedInstance");
  v13 = objc_msgSend(v12, "primaryAuthKitAccount");

  if (!v13)
    return 0;
  v14 = objc_msgSend(v11, "sharedInstance");
  v15 = objc_msgSend(v14, "securityLevelForAccount:", v13);

  if (v15 != (id)4)
  {
LABEL_18:
    v18 = 0;
LABEL_19:

    return (id)v18;
  }
  result = objc_msgSend((id)objc_opt_self(BYSecurityInterface), "sharedInterface");
  if (!result)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v16 = result;
  v17 = objc_msgSend(result, "isManateeAvailable");

  if (!v17)
    goto LABEL_18;
  result = *(id *)(v0 + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_runState);
  if (result)
  {
    if (objc_msgSend(result, "hasCompletedInitialRun"))
      v18 = (uint64_t)objc_msgSend((id)objc_opt_self(CLLocationManager), "locationServicesEnabled");
    else
      v18 = 1;
    goto LABEL_19;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1000205A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;

  v6[2] = a5;
  v6[3] = a6;
  v7 = type metadata accessor for MainActor(0);
  v6[4] = v7;
  v6[5] = static MainActor.shared.getter(v7);
  v8 = (_QWORD *)swift_task_alloc(dword_1002EAC84);
  v6[6] = v8;
  *v8 = v6;
  v8[1] = sub_100020604;
  return sub_1000236E4();
}

uint64_t sub_100020604(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 48);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 32);
  *(_BYTE *)(*(_QWORD *)v1 + 56) = a1;
  swift_task_dealloc(v2);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(sub_10002067C, v4, v5);
}

uint64_t sub_10002067C()
{
  uint64_t v0;
  int v1;
  id v2;
  id v3;

  v1 = *(unsigned __int8 *)(v0 + 56);
  swift_release(*(_QWORD *)(v0 + 40));
  if (v1 == 1)
  {
    v2 = objc_msgSend(objc_allocWithZone((Class)BYFindMyManager), "init");
    v3 = objc_msgSend(v2, "isFindMyEnabled");

  }
  else
  {
    v3 = 0;
  }
  (*(void (**)(id))(v0 + 16))(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10002075C()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  _QWORD aBlock[5];
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v4);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Stolen device protection pane - Turn on tapped", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v12 = objc_msgSend((id)objc_opt_self(LARatchetManager), "sharedInstance");
  v13 = swift_allocObject(&unk_10027FD38, 24, 7);
  *(_QWORD *)(v13 + 16) = v1;
  aBlock[4] = sub_1000233EC;
  v18 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100020D58;
  aBlock[3] = &unk_10027FD50;
  v14 = _Block_copy(aBlock);
  v15 = v18;
  v16 = v1;
  swift_release(v15);
  objc_msgSend(v12, "checkCanEnableFeatureWithCompletion:", v14);
  _Block_release(v14);

}

void sub_100020914(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __chkstk_darwin(v6);
  v11 = (char *)&v40 - v10;
  v12 = __chkstk_darwin(v9);
  v14 = (char *)&v40 - v13;
  if (a2)
  {
    v15 = swift_errorRetain(a2);
    v16 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v15);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v14, v16, v4);
    swift_errorRetain(a2);
    v17 = swift_errorRetain(a2);
    v18 = Logger.logObject.getter(v17);
    v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc(12, -1);
      v21 = (uint64_t *)swift_slowAlloc(8, -1);
      v41 = v5;
      *(_DWORD *)v20 = 138412290;
      swift_errorRetain(a2);
      v22 = _swift_stdlib_bridgeErrorToNSError(a2);
      v43 = v22;
      v5 = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, &v44, v20 + 4, v20 + 12);
      *v21 = v22;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to checkCanEnableFeature (Stolen Device Protection) with error: %@", v20, 0xCu);
      v23 = sub_10000A9E4(&qword_1002EA810);
      swift_arrayDestroy(v21, 1, v23);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v20, -1, -1);

      swift_errorRelease(a2);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      swift_errorRelease(a2);

    }
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
  }
  else if (a1)
  {
    v42 = 2;
    type metadata accessor for LARatchetManagerEnableFeatureResultKey(0);
    v25 = v24;
    v26 = sub_1000233F4(&qword_1002EAC58, (uint64_t (*)(uint64_t))type metadata accessor for LARatchetManagerEnableFeatureResultKey, (uint64_t)&unk_10024C50C);
    AnyHashable.init<A>(_:)(&v42, v25, v26);
    if (*(_QWORD *)(a1 + 16) && (v27 = sub_100032600((uint64_t)&v43), (v28 & 1) != 0))
    {
      sub_10000E2AC(*(_QWORD *)(a1 + 56) + 32 * v27, (uint64_t)&v45);
    }
    else
    {
      v45 = 0u;
      v46 = 0u;
    }
    sub_1000232E0((uint64_t)&v43);
    if (*((_QWORD *)&v46 + 1))
    {
      v29 = swift_dynamicCast(&v42, &v45, (char *)&type metadata for Any + 8, &type metadata for Bool, 6);
      if ((v29 & 1) != 0 && v42 == 1)
      {
        sub_100022488();
        return;
      }
    }
    else
    {
      v29 = sub_10000E230((uint64_t)&v45);
    }
    v35 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v29);
    v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v35, v4);
    v37 = Logger.logObject.getter(v36);
    v38 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Liveness check failed; prompt for biometrics authenticate",
        v39,
        2u);
      swift_slowDealloc(v39, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    sub_100021190();
  }
  else
  {
    v30 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v12);
    v31 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v11, v30, v4);
    v32 = Logger.logObject.getter(v31);
    v33 = static os_log_type_t.error.getter(v32);
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "No results, and no error during checkCanEnableFeature (StolenDeviceProtection)", v34, 2u);
      swift_slowDealloc(v34, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v5 + 8))(v11, v4);
  }
}

uint64_t sub_100020D58(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4;
  void (*v5)(uint64_t, void *);
  uint64_t v6;
  id v7;

  v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  if (a2)
    v6 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(a2, &type metadata for AnyHashable, (char *)&type metadata for Any + 8, &protocol witness table for AnyHashable);
  else
    v6 = 0;
  swift_retain(v4);
  v7 = a3;
  v5(v6, a3);
  swift_release(v4);

  return swift_bridgeObjectRelease(v6);
}

void sub_100020E20()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v4);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Stolen device protection pane - not now tapped", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v12 = *(void **)(v1 + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_paneFeatureAnalyticsManager);
  if (v12)
  {
    v13 = objc_allocWithZone((Class)NSNumber);
    v14 = v12;
    v15 = objc_msgSend(v13, "initWithInteger:", 0);
    objc_msgSend(v14, "recordActionWithValue:forFeature:", v15, 17);

    sub_100020FC8(0);
  }
  else
  {
    __break(1u);
  }
}

void sub_100020FC8(char a1)
{
  char *v1;
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  Class isa;
  NSString v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  Class v15;
  id v16;
  id v17;

  v3 = objc_msgSend(v1, "view");
  if (!v3)
  {
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v4 = v3;
  v5 = objc_msgSend(v3, "window");

  if (v5)
  {
    objc_msgSend(v5, "setUserInteractionEnabled:", 1);

  }
  v6 = *(void **)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_buddyPreferences];
  if (!v6)
    goto LABEL_11;
  v7 = v6;
  isa = Bool._bridgeToObjectiveC()().super.super.isa;
  v9 = String._bridgeToObjectiveC()();
  objc_msgSend(v7, "setObject:forKey:", isa, v9);

  if ((a1 & 1) == 0)
    goto LABEL_8;
  v10 = objc_msgSend(v1, "delegate");
  if (v10)
  {
    v11 = v10;
    v12 = sub_10000A9E4(&qword_1002EAC50);
    v13 = swift_allocObject(v12, 64, 7);
    *(_OWORD *)(v13 + 16) = xmmword_10024C690;
    *(_QWORD *)(v13 + 56) = type metadata accessor for BuddyStolenDeviceProtectionController();
    *(_QWORD *)(v13 + 32) = v1;
    v14 = v1;
    v15 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v13);
    objc_msgSend(v11, "removeViewControllersOnNextPush:", v15);
    swift_unknownObjectRelease(v11);

LABEL_8:
    v16 = objc_msgSend(v1, "delegate");
    if (v16)
    {
      v17 = v16;
      objc_msgSend(v16, "flowItemDone:", v1);
      swift_unknownObjectRelease(v17);
      return;
    }
    goto LABEL_12;
  }
LABEL_13:
  __break(1u);
}

void sub_100021190()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  id v15;
  Class isa;
  uint64_t v17;
  uint64_t inited;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  id v23;
  Swift::String v24;
  Swift::String_optional v25;
  Swift::String v26;
  Swift::String v27;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v29;
  Class v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  char *v34;
  _QWORD v36[5];
  uint64_t v37;
  unint64_t v38;
  _OWORD v39[2];
  Swift::String v40;
  void *v41;
  uint64_t v42;
  Swift::String v43;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v36[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(v1, "view");
  if (!v6)
  {
    __break(1u);
LABEL_12:
    __break(1u);
    return;
  }
  v7 = v6;
  v8 = objc_msgSend(v6, "window");

  if (v8)
  {
    objc_msgSend(v8, "setUserInteractionEnabled:", 0);

  }
  v10 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v9);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v10, v2);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Start biometrics authentication", v14, 2u);
    swift_slowDealloc(v14, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v15 = objc_msgSend(objc_allocWithZone((Class)LAContext), "init");
  sub_10002331C(0, &qword_1002EAC30, NSNumber_ptr);
  isa = NSNumber.init(integerLiteral:)(4).super.super.isa;
  objc_msgSend(v15, "setTouchIDAuthenticationRetryLimit:", isa);

  v17 = sub_10000A9E4(&qword_1002EAC38);
  inited = swift_initStackObject(v17, &v42);
  *(_OWORD *)(inited + 16) = xmmword_10024C800;
  v36[0] = 2;
  AnyHashable.init<A>(_:)(v36, &type metadata for Int, &protocol witness table for Int);
  v20 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_localAuthenticationReason];
  v19 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_localAuthenticationReason + 8];
  *(_QWORD *)(inited + 96) = &type metadata for String;
  *(_QWORD *)(inited + 72) = v20;
  *(_QWORD *)(inited + 80) = v19;
  v36[0] = 1024;
  swift_bridgeObjectRetain(v19);
  AnyHashable.init<A>(_:)(v36, &type metadata for Int, &protocol witness table for Int);
  *(_QWORD *)(inited + 168) = &type metadata for Bool;
  *(_BYTE *)(inited + 144) = 1;
  v21 = sub_100029BD0(inited);
  v22 = *(void **)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_capabilities];
  if (!v22)
    goto LABEL_12;
  if (objc_msgSend(v22, "supportsPearl"))
  {
    v40._countAndFlagsBits = 1;
    AnyHashable.init<A>(_:)(&v40, &type metadata for Int, &protocol witness table for Int);
    v23 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v43._object = (void *)0xE000000000000000;
    v24._object = (void *)0x800000010020BF70;
    v24._countAndFlagsBits = 0xD000000000000032;
    v25.value._countAndFlagsBits = 0x654B656C706D6944;
    v25.value._object = (void *)0xE900000000000079;
    v26._countAndFlagsBits = 0;
    v26._object = (void *)0xE000000000000000;
    v43._countAndFlagsBits = 0;
    v27 = NSLocalizedString(_:tableName:bundle:value:comment:)(v24, v25, (NSBundle)v23, v26, v43);

    v41 = &type metadata for String;
    v40 = v27;
  }
  else
  {
    v40._countAndFlagsBits = 1011;
    AnyHashable.init<A>(_:)(&v40, &type metadata for Int, &protocol witness table for Int);
    v41 = &type metadata for Bool;
    LOBYTE(v40._countAndFlagsBits) = 0;
  }
  sub_10000E2E8(&v40, v39);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v21);
  v38 = v21;
  sub_1000231A8(v39, (uint64_t)v36, isUniquelyReferenced_nonNull_native);
  v29 = v38;
  swift_bridgeObjectRelease(0x8000000000000000);
  sub_1000232E0((uint64_t)v36);
  v30 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease(v29);
  v31 = swift_allocObject(&unk_10027FCE8, 24, 7);
  *(_QWORD *)(v31 + 16) = v1;
  v36[4] = sub_100023314;
  v37 = v31;
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 1107296256;
  v36[2] = sub_100020D58;
  v36[3] = &unk_10027FD00;
  v32 = _Block_copy(v36);
  v33 = v37;
  v34 = v1;
  swift_release(v33);
  objc_msgSend(v15, "evaluatePolicy:options:reply:", 1, v30, v32);

  _Block_release(v32);
}

void sub_100021618(uint64_t a1, NSObject *a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  NSObject *v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint8_t *v24;
  uint8_t *v25;
  NSObject *v26;
  uint8_t *v27;
  NSObject **v28;
  uint8_t *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43;
  id v44;
  id v45;
  void *v46;
  id v47;
  uint64_t v48;
  NSObject **v49;
  uint8_t *v50;
  void *v51;
  void *v52;
  NSObject *v53;
  uint64_t v54;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)&v48 - v12;
  if (a2)
  {
    v53 = a2;
    swift_errorRetain(a2);
    v14 = sub_10000A9E4((uint64_t *)&unk_1002EAC40);
    v15 = sub_10002331C(0, (unint64_t *)&qword_1002EA550, NSError_ptr);
    v11 = swift_dynamicCast(&v52, &v53, v14, v15, 6);
    if ((v11 & 1) != 0)
    {
      v16 = v52;
      v17 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v11);
      v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v13, v17, v6);
      v19 = static os_log_type_t.error.getter(v18);
      v20 = v16;
      v21 = Logger.logObject.getter(v20);
      v22 = v19;
      if (os_log_type_enabled(v21, v19))
      {
        v23 = (uint8_t *)swift_slowAlloc(12, -1);
        v49 = (NSObject **)swift_slowAlloc(8, -1);
        v50 = v23;
        v51 = a3;
        *(_DWORD *)v23 = 138412290;
        v24 = v23 + 12;
        v25 = v23 + 4;
        v53 = v20;
        v26 = v20;
        v27 = v24;
        a3 = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v25, v27);
        v28 = v49;
        *v49 = v20;

        v29 = v50;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Failed to authenticate with error: %@", v50, 0xCu);
        v30 = sub_10000A9E4(&qword_1002EA810);
        swift_arrayDestroy(v28, 1, v30);
        swift_slowDealloc(v28, -1, -1);
        swift_slowDealloc(v29, -1, -1);
      }
      else
      {

        v21 = v20;
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v13, v6);
      v39 = -[NSObject domain](v20, "domain");
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
      v42 = v41;

      if (v40 == 0xD00000000000001DLL && v42 == 0x800000010020BFB0)
      {
        swift_bridgeObjectRelease(0x800000010020BFB0);
      }
      else
      {
        v43 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v42, 0xD00000000000001DLL, 0x800000010020BFB0, 0);
        swift_bridgeObjectRelease(v42);
        if ((v43 & 1) == 0)
        {
          v45 = objc_msgSend(a3, "view");
          if (!v45)
          {
            __break(1u);
            return;
          }
          v46 = v45;
          v47 = objc_msgSend(v45, "window");

          if (v47)
          {
            objc_msgSend(v47, "setUserInteractionEnabled:", 1);

            return;
          }
          goto LABEL_23;
        }
      }
      v44 = -[NSObject code](v20, "code");
      if ((unint64_t)v44 + 8 <= 7 && ((1 << (v44 + 8)) & 0xA1) != 0)
        sub_100021190();
      else
        sub_100021A44(0);
LABEL_23:

      return;
    }
  }
  if (a1)
  {
    v31 = 1;
  }
  else
  {
    v32 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v11);
    v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, v32, v6);
    v34 = static os_log_type_t.error.getter(v33);
    v35 = v34;
    v36 = Logger.logObject.getter(v34);
    v37 = v35;
    if (os_log_type_enabled(v36, v35))
    {
      v38 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "No authentication results", v38, 2u);
      swift_slowDealloc(v38, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    v31 = 0;
  }
  sub_100021A44(v31);
}

uint64_t sub_100021A44(int a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint8_t *v23;
  uint8_t *v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void *v51;
  char *v52;
  char *v53;
  void (*v54)(char *, uint64_t);
  uint64_t v55;
  uint64_t v56;
  void *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  _QWORD *v76;
  void **aBlock;
  uint64_t v78;
  uint64_t (*v79)(uint64_t);
  void *v80;
  void (*v81)();
  uint64_t v82;

  v2 = v1;
  LODWORD(v74) = a1;
  v68 = type metadata accessor for DispatchQoS(0);
  v73 = *(_QWORD *)(v68 - 8);
  __chkstk_darwin(v68);
  v72 = (char *)&v62 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for DispatchTime(0);
  v66 = *(_QWORD *)(v71 - 8);
  v4 = __chkstk_darwin(v71);
  v65 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  v70 = (char *)&v62 - v6;
  v7 = type metadata accessor for DispatchWorkItemFlags(0);
  v69 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v67 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Logger(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = __chkstk_darwin(v9);
  v13 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __chkstk_darwin(v11);
  v16 = (char *)&v62 - v15;
  v17 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v14);
  v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
  v19 = v18(v16, v17, v9);
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc(8, -1);
    v75 = v7;
    v23 = v22;
    *(_DWORD *)v22 = 67109120;
    LODWORD(aBlock) = v74 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 4, v22 + 4, v22 + 8);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Authentication completed - did Authenticate: %{BOOL}d", v23, 8u);
    v24 = v23;
    v7 = v75;
    swift_slowDealloc(v24, -1, -1);
  }

  v25 = *(void (**)(char *, uint64_t))(v10 + 8);
  v25(v16, v9);
  v26 = OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_postAuthenticationWorkItem;
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_postAuthenticationWorkItem))
  {
    v27 = v18(v13, v17, v9);
    v28 = Logger.logObject.getter(v27);
    v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Ignoring user authentication completed more while another request is being processed.", v30, 2u);
      swift_slowDealloc(v30, -1, -1);
    }

    return ((uint64_t (*)(char *, uint64_t))v25)(v13, v9);
  }
  else
  {
    v32 = v2;
    v33 = swift_allocObject(&unk_10027FC20, 24, 7);
    swift_unknownObjectWeakInit(v33 + 16, v2);
    v34 = swift_allocObject(&unk_10027FC48, 25, 7);
    *(_QWORD *)(v34 + 16) = v33;
    *(_BYTE *)(v34 + 24) = v74 & 1;
    v81 = sub_10002318C;
    v82 = v34;
    aBlock = _NSConcreteStackBlock;
    v78 = 1107296256;
    v79 = (uint64_t (*)(uint64_t))sub_100024350;
    v80 = &unk_10027FC60;
    v35 = _Block_copy(&aBlock);
    v76 = _swiftEmptyArrayStorage;
    v36 = sub_1000233F4((unint64_t *)&qword_1002EA5E0, (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags, (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    swift_retain(v33);
    v37 = sub_10000A9E4((uint64_t *)&unk_1002EA380);
    v38 = sub_10000C7BC();
    v39 = v67;
    v63 = v37;
    v74 = v38;
    v40 = v32;
    v64 = v36;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v37, v38, v7, v36);
    v41 = type metadata accessor for DispatchWorkItem(0);
    v75 = v7;
    v42 = v41;
    swift_allocObject(v41, *(unsigned int *)(v41 + 48), *(unsigned __int16 *)(v41 + 52));
    v43 = DispatchWorkItem.init(flags:block:)(v39, v35);
    v44 = v82;
    swift_release(v33);
    swift_release(v44);
    v45 = *(_QWORD *)(v40 + v26);
    *(_QWORD *)(v40 + v26) = v43;
    swift_release(v45);
    v46 = swift_allocObject(&unk_10027FC20, 24, 7);
    swift_unknownObjectWeakInit(v46 + 16, v40);
    v81 = sub_100023198;
    v82 = v46;
    aBlock = _NSConcreteStackBlock;
    v78 = 1107296256;
    v79 = (uint64_t (*)(uint64_t))sub_100024350;
    v80 = &unk_10027FC88;
    v47 = _Block_copy(&aBlock);
    v76 = _swiftEmptyArrayStorage;
    swift_retain(v46);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v37, v38, v75, v36);
    swift_allocObject(v42, *(unsigned int *)(v42 + 48), *(unsigned __int16 *)(v42 + 52));
    v48 = DispatchWorkItem.init(flags:block:)(v39, v47);
    v49 = v82;
    swift_release(v46);
    swift_release(v49);
    v50 = *(_QWORD *)(v40
                    + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_forceExecutePostAuthenticationWorkItem);
    *(_QWORD *)(v40
              + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_forceExecutePostAuthenticationWorkItem) = v48;
    swift_release(v50);
    sub_10002331C(0, (unint64_t *)&qword_1002EA370, OS_dispatch_queue_ptr);
    v51 = (void *)static OS_dispatch_queue.main.getter();
    v52 = v65;
    static DispatchTime.now()();
    v53 = v70;
    + infix(_:_:)(v52, 1.5);
    v54 = *(void (**)(char *, uint64_t))(v66 + 8);
    v55 = v71;
    v54(v52, v71);
    v56 = swift_allocObject(&unk_10027FC20, 24, 7);
    swift_unknownObjectWeakInit(v56 + 16, v40);
    v81 = sub_1000231A0;
    v82 = v56;
    aBlock = _NSConcreteStackBlock;
    v78 = 1107296256;
    v79 = sub_10002434C;
    v80 = &unk_10027FCB0;
    v57 = _Block_copy(&aBlock);
    v58 = swift_retain(v56);
    v59 = v72;
    static DispatchQoS.unspecified.getter(v58);
    v76 = _swiftEmptyArrayStorage;
    v60 = v75;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v76, v63, v74, v75, v64);
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v53, v59, v39, v57);
    _Block_release(v57);

    (*(void (**)(char *, uint64_t))(v69 + 8))(v39, v60);
    (*(void (**)(char *, uint64_t))(v73 + 8))(v59, v68);
    v54(v53, v55);
    v61 = v82;
    swift_release(v56);
    return swift_release(v61);
  }
}

void sub_1000220E8(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t Strong;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  char *v10;
  char v11[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (char *)Strong;
    v6 = *(_QWORD *)(Strong
                   + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_forceExecutePostAuthenticationWorkItem);
    *(_QWORD *)&v5[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_forceExecutePostAuthenticationWorkItem] = 0;
    swift_release(v6);
    v7 = *(_QWORD *)&v5[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_postAuthenticationWorkItem];
    *(_QWORD *)&v5[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_postAuthenticationWorkItem] = 0;
    swift_release(v7);
    if ((a2 & 1) != 0)
      sub_100022488();
    v8 = objc_msgSend(v5, "view");
    if (v8)
    {
      v9 = v8;
      v10 = (char *)objc_msgSend(v8, "window");

      if (v10)
      {
        objc_msgSend(v10, "setUserInteractionEnabled:", 1);

        v5 = v10;
      }

    }
    else
    {
      __break(1u);
    }
  }
}

void sub_1000221D0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t Strong;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint8_t *v22;
  uint64_t ObjectType;
  uint64_t v24;
  char v25[24];

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v25, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v7 = (char *)Strong;
    v8 = *(_QWORD *)(Strong
                   + OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_forceExecutePostAuthenticationWorkItem);
    *(_QWORD *)&v7[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_forceExecutePostAuthenticationWorkItem] = 0;
    v9 = swift_release(v8);
    v10 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v9);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v10, v2);
    v11 = v7;
    v12 = Logger.logObject.getter(v11);
    v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc(12, -1);
      v15 = swift_slowAlloc(32, -1);
      v24 = v15;
      *(_DWORD *)v14 = 136315138;
      v22 = v14 + 4;
      ObjectType = swift_getObjectType(v11);
      v16 = sub_10000A9E4(&qword_1002EAC28);
      v17 = String.init<A>(describing:)(&ObjectType, v16);
      v19 = v18;
      ObjectType = sub_10002F320(v17, v18, &v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v24, v22, v14 + 12);

      swift_bridgeObjectRelease(v19);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Force navigation from %s", v14, 0xCu);
      swift_arrayDestroy(v15, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1, -1);
      swift_slowDealloc(v14, -1, -1);

    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v20 = *(_QWORD *)&v11[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_postAuthenticationWorkItem];
    if (v20)
    {
      v21 = swift_retain(*(_QWORD *)&v11[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_postAuthenticationWorkItem]);
      dispatch thunk of DispatchWorkItem.perform()(v21);
      swift_release(v20);
    }

  }
}

void sub_100022410(uint64_t a1)
{
  uint64_t v1;
  char *Strong;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE v6[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v6, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = Strong;
    v4 = *(_QWORD *)&Strong[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_forceExecutePostAuthenticationWorkItem];
    if (v4)
    {
      v5 = swift_retain(*(_QWORD *)&Strong[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_forceExecutePostAuthenticationWorkItem]);
      dispatch thunk of DispatchWorkItem.perform()(v5);

      swift_release(v4);
    }
    else
    {

    }
  }
}

void sub_100022488()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  char *v20;
  _QWORD aBlock[5];
  uint64_t v22;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v4);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Enabling stolen device protection enabled", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v12 = *(void **)&v1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_paneFeatureAnalyticsManager];
  if (v12)
  {
    v13 = objc_allocWithZone((Class)NSNumber);
    v14 = v12;
    v15 = objc_msgSend(v13, "initWithInteger:", 1);
    objc_msgSend(v14, "recordActionWithValue:forFeature:", v15, 17);

    v16 = objc_msgSend((id)objc_opt_self(LARatchetManager), "sharedInstance");
    v17 = swift_allocObject(&unk_10027FBD0, 24, 7);
    *(_QWORD *)(v17 + 16) = v1;
    aBlock[4] = sub_100023124;
    v22 = v17;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100020D58;
    aBlock[3] = &unk_10027FBE8;
    v18 = _Block_copy(aBlock);
    v19 = v22;
    v20 = v1;
    swift_release(v19);
    objc_msgSend(v16, "enableFeatureWithReply:", v18);
    _Block_release(v18);

  }
  else
  {
    __break(1u);
  }
}

void sub_1000226A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __chkstk_darwin(v7);
  v12 = (char *)&v28 - v11;
  if (a2)
  {
    v13 = swift_errorRetain(a2);
    v14 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v14, v5);
    swift_errorRetain(a2);
    v15 = swift_errorRetain(a2);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc(12, -1);
      v30 = a3;
      v19 = (uint8_t *)v18;
      v29 = (uint64_t *)swift_slowAlloc(8, -1);
      *(_DWORD *)v19 = 138412290;
      swift_errorRetain(a2);
      v20 = _swift_stdlib_bridgeErrorToNSError(a2);
      v31 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v19 + 4, v19 + 12);
      v21 = v29;
      *v29 = v20;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to enable stolen device protection: %@", v19, 0xCu);
      v22 = sub_10000A9E4(&qword_1002EA810);
      swift_arrayDestroy(v21, 1, v22);
      swift_slowDealloc(v21, -1, -1);
      swift_slowDealloc(v19, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    sub_100022960();
    swift_errorRelease(a2);
  }
  else
  {
    v23 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v10);
    v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v12, v23, v5);
    v25 = Logger.logObject.getter(v24);
    v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, (os_log_type_t)v26))
    {
      v27 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v26, "Stolen device protection enabled", v27, 2u);
      swift_slowDealloc(v27, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);
    sub_100020FC8(1);
  }
}

void sub_100022960()
{
  void *v0;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::String_optional v4;
  Swift::String v5;
  void *object;
  NSString v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  void *v11;
  NSString v12;
  id v13;
  id v14;
  Swift::String v15;
  Swift::String v16;

  v1 = (void *)objc_opt_self(NSBundle);
  v2 = objc_msgSend(v1, "mainBundle");
  v15._object = (void *)0xE000000000000000;
  v3._object = (void *)0x800000010020BF00;
  v3._countAndFlagsBits = 0xD000000000000035;
  v4.value._countAndFlagsBits = 0x654B656C706D6944;
  v4.value._object = (void *)0xE900000000000079;
  v5._countAndFlagsBits = 0;
  v5._object = (void *)0xE000000000000000;
  v15._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, v15)._object;

  v7 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v14 = objc_msgSend((id)objc_opt_self(UIAlertController), "alertControllerWithTitle:message:preferredStyle:", v7, 0, 1);

  v8 = objc_msgSend(v1, "mainBundle");
  v16._object = (void *)0xE000000000000000;
  v9._countAndFlagsBits = 19279;
  v9._object = (void *)0xE200000000000000;
  v10._countAndFlagsBits = 0;
  v10._object = (void *)0xE000000000000000;
  v16._countAndFlagsBits = 0;
  v11 = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v16)._object;

  v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v11);
  v13 = objc_msgSend((id)objc_opt_self(UIAlertAction), "actionWithTitle:style:handler:", v12, 0, 0);

  objc_msgSend(v14, "addAction:", v13);
  objc_msgSend(v0, "presentViewController:animated:completion:", v14, 1, 0);

}

void sub_100022B84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint8_t *v16;
  uint8_t *v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[5];
  uint64_t v26;

  v2 = sub_10000A9E4((uint64_t *)&unk_1002EB090);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = type metadata accessor for Logger(0);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = __chkstk_darwin(v5);
  v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v7);
  v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 16))(v9, v10, v5);
  v12 = Logger.logObject.getter(v11);
  v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc(2, -1);
    v24 = v2;
    v15 = a1;
    v16 = v14;
    *(_WORD *)v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Will call routine manager", v14, 2u);
    v17 = v16;
    a1 = v15;
    v2 = v24;
    swift_slowDealloc(v17, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  v18 = objc_msgSend((id)objc_opt_self(RTRoutineManager), "defaultManager");
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v19 = *(unsigned __int8 *)(v3 + 80);
  v20 = (v19 + 16) & ~v19;
  v21 = swift_allocObject(&unk_10027FDD8, v20 + v4, v19 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v21 + v20, (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  aBlock[4] = sub_100023A94;
  v26 = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100022F28;
  aBlock[3] = &unk_10027FDF0;
  v22 = _Block_copy(aBlock);
  swift_release(v26);
  objc_msgSend(v18, "fetchRoutineStateWithHandler:", v22);
  _Block_release(v22);

}

uint64_t sub_100022DBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  uint64_t v18;
  _BOOL4 v19;
  int v20;

  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a1 == 2 && a2 == 0;
  v11 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v6);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v11, v4);
  v13 = Logger.logObject.getter(v12);
  v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v15 = 67109120;
    v19 = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v19, &v20, v15 + 4, v15 + 8);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Routine manager supplied state %{BOOL}d", v15, 8u);
    swift_slowDealloc(v15, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  HIBYTE(v20) = v10;
  v16 = sub_10000A9E4((uint64_t *)&unk_1002EB090);
  return CheckedContinuation.resume(returning:)((char *)&v20 + 3, v16);
}

void sub_100022F28(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

id sub_100022FE4()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyStolenDeviceProtectionController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BuddyStolenDeviceProtectionController()
{
  return objc_opt_self(_TtC5Setup37BuddyStolenDeviceProtectionController);
}

uint64_t sub_100023100()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

void sub_100023124(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_1000226A4(a1, a2, *(_QWORD *)(v2 + 16));
}

uint64_t sub_10002312C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002313C(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_100023144()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100023168()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  return swift_deallocObject(v0, 25, 7);
}

void sub_10002318C()
{
  uint64_t v0;

  sub_1000220E8(*(_QWORD *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

void sub_100023198()
{
  uint64_t v0;

  sub_1000221D0(v0);
}

void sub_1000231A0()
{
  uint64_t v0;

  sub_100022410(v0);
}

_OWORD *sub_1000231A8(_OWORD *a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  _BYTE v21[40];

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_100032600(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = (_QWORD *)(v16[7] + 32 * v10);
        sub_1000233CC(v17);
        return sub_10000E2E8(a1, v17);
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_10000D9FC();
      goto LABEL_7;
    }
    sub_10000D524(v13, a3 & 1);
    v19 = sub_100032600(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_10000E270(a2, (uint64_t)v21);
      return sub_100023354(v10, (uint64_t)v21, a1, v16);
    }
  }
  result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for AnyHashable);
  __break(1u);
  return result;
}

uint64_t sub_1000232E0(uint64_t a1)
{
  (*(void (**)(void))(*(&type metadata for AnyHashable - 1) + 8))();
  return a1;
}

void sub_100023314(uint64_t a1, NSObject *a2)
{
  uint64_t v2;

  sub_100021618(a1, a2, *(void **)(v2 + 16));
}

uint64_t sub_10002331C(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

_OWORD *sub_100023354(unint64_t a1, uint64_t a2, _OWORD *a3, _QWORD *a4)
{
  uint64_t v5;
  __int128 v6;
  _OWORD *result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v5 = a4[6] + 40 * a1;
  v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(a2 + 32);
  result = sub_10000E2E8(a3, (_OWORD *)(a4[7] + 32 * a1));
  v8 = a4[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a4[2] = v10;
  return result;
}

uint64_t sub_1000233CC(_QWORD *a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1[3] - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release(*a1);
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_1000233EC(uint64_t a1, uint64_t a2)
{
  sub_100020914(a1, a2);
}

uint64_t sub_1000233F4(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100023434(char *a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_10000A9E4(&qword_1002EA790);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = swift_allocObject(&unk_10027FD88, 24, 7);
  *(_QWORD *)(result + 16) = a2;
  v8 = *(void **)&a1[OBJC_IVAR____TtC5Setup37BuddyStolenDeviceProtectionController_runState];
  if (v8)
  {
    v9 = result;
    _Block_copy(a2);
    if (objc_msgSend(v8, "hasCompletedInitialRun"))
    {
      v10 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 1, 1, v10);
      type metadata accessor for MainActor(0);
      v11 = a1;
      v12 = swift_retain(v9);
      v13 = static MainActor.shared.getter(v12);
      v14 = (_QWORD *)swift_allocObject(&unk_10027FDB0, 56, 7);
      v14[2] = v13;
      v14[3] = &protocol witness table for MainActor;
      v14[4] = v11;
      v14[5] = sub_1000235E0;
      v14[6] = v9;
      v15 = sub_100030934((uint64_t)v6, (uint64_t)&unk_1002EAC78, (uint64_t)v14);
      swift_release(v9);
      return swift_release(v15);
    }
    else
    {
      a2[2](a2, 1);
      return swift_release(v9);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000235BC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000235E0(char a1)
{
  uint64_t v1;

  return sub_100030920(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000235E8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10002361C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1002EAC74);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10002369C;
  return sub_1000205A4(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10002369C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000236E4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = type metadata accessor for Logger(0);
  v0[2] = v1;
  v2 = *(_QWORD *)(v1 - 8);
  v0[3] = v2;
  v3 = (*(_QWORD *)(v2 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v0[4] = swift_task_alloc(v3);
  v0[5] = swift_task_alloc(v3);
  v4 = type metadata accessor for MainActor(0);
  v0[6] = v4;
  v0[7] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  v0[8] = v5;
  v0[9] = v6;
  return swift_task_switch(sub_100023788, v5, v6);
}

uint64_t sub_100023788(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;

  v2 = v1[5];
  v3 = v1[2];
  v4 = v1[3];
  v5 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(a1);
  v1[10] = v5;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v1[11] = v6;
  v7 = v6(v2, v5, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Will await routine manager continuation", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }
  v11 = v1[5];
  v12 = v1[2];
  v13 = v1[3];

  v14 = *(uint64_t (**)(uint64_t, uint64_t))(v13 + 8);
  v1[12] = v14;
  v15 = v14(v11, v12);
  v16 = static MainActor.shared.getter(v15);
  v1[13] = v16;
  v17 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v1[14] = v17;
  *v17 = v1;
  v17[1] = sub_1000238E0;
  return withCheckedContinuation<A>(isolation:function:_:)(v1 + 15, v16, &protocol witness table for MainActor, 0xD00000000000001FLL, 0x800000010020C080, sub_100022B84, 0, &type metadata for Bool);
}

uint64_t sub_1000238E0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 104);
  swift_task_dealloc(*(_QWORD *)(*v0 + 112));
  swift_release(v2);
  return swift_task_switch(sub_100023934, *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_100023934()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *(_QWORD *)(v0 + 80);
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 88);
  v3 = *(_QWORD *)(v0 + 32);
  v4 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 56));
  v5 = *(unsigned __int8 *)(v0 + 120);
  v6 = v2(v3, v1, v4);
  v7 = Logger.logObject.getter(v6);
  v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Did finish await for routine manager continuation", v9, 2u);
    swift_slowDealloc(v9, -1, -1);
  }
  v10 = *(void (**)(uint64_t, uint64_t))(v0 + 96);
  v12 = *(_QWORD *)(v0 + 32);
  v11 = *(_QWORD *)(v0 + 40);
  v13 = *(_QWORD *)(v0 + 16);

  v10(v12, v13);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

uint64_t sub_100023A30()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000A9E4((uint64_t *)&unk_1002EB090);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100023A94(uint64_t a1, uint64_t a2)
{
  sub_10000A9E4((uint64_t *)&unk_1002EB090);
  return sub_100022DBC(a1, a2);
}

void sub_100023CC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8;
  _QWORD *v9;
  id v10;
  _QWORD v11[5];
  _QWORD *v12;

  v5 = *(void **)(v2 + OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController_wrapper);
  v6 = swift_allocObject(&unk_10027FE30, 24, 7);
  swift_unknownObjectWeakInit(v6 + 16, v2);
  v7 = (_QWORD *)swift_allocObject(&unk_10027FE58, 40, 7);
  v7[2] = v6;
  v7[3] = a1;
  v7[4] = a2;
  v11[4] = sub_100024168;
  v12 = v7;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256;
  v11[2] = sub_100024350;
  v11[3] = &unk_10027FE70;
  v8 = _Block_copy(v11);
  v9 = v12;
  v10 = v5;
  swift_retain(a2);
  swift_release(v9);
  objc_msgSend(v10, "prepare:", v8);
  _Block_release(v8);

}

void sub_100023DC8(uint64_t a1, void (*a2)(void))
{
  uint64_t v3;
  uint64_t Strong;
  void *v5;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  id v10;
  _QWORD aBlock[5];
  uint64_t v12;
  char v13[24];

  v3 = a1 + 16;
  swift_beginAccess(a1 + 16, v13, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v3);
  if (Strong)
  {
    v5 = (void *)Strong;
    v6 = *(void **)(Strong + OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController_wrapper);
    v7 = swift_allocObject(&unk_10027FE30, 24, 7);
    swift_unknownObjectWeakInit(v7 + 16, v5);
    aBlock[4] = sub_10002418C;
    v12 = v7;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_100024350;
    aBlock[3] = &unk_10027FE98;
    v8 = _Block_copy(aBlock);
    v9 = v12;
    v10 = v6;
    swift_release(v9);
    objc_msgSend(v10, "setConfigurationCompleted:", v8);
    _Block_release(v8);

    ((void (*)(uint64_t))a2)(1);
  }
  else
  {
    a2();
  }
}

void sub_100023EE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t Strong;
  char *v3;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  uint64_t v8;
  Class isa;
  NSString v10;
  char v11[24];

  v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v1);
  if (Strong)
  {
    v3 = (char *)Strong;
    v4 = *(void **)(Strong + OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController_settingsManager);
    if (v4)
    {
      objc_msgSend(v4, "stashCurrentActionButtonData");
      v5 = *(void **)&v3[OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController_buddyPreferences];
      if (v5 && (v6 = *(void **)&v3[OBJC_IVAR____TtC5Setup34BuddyButtonConfigurationController_delegate]) != 0)
      {
        v7 = v5;
        swift_unknownObjectRetain(v6, v8);
        isa = Bool._bridgeToObjectiveC()().super.super.isa;
        v10 = String._bridgeToObjectiveC()();
        objc_msgSend(v7, "setObject:forKey:", isa, v10);

        objc_msgSend(v6, "flowItemDone:", v3);
        swift_unknownObjectRelease(v6);
      }
      else
      {

      }
    }
    else
    {
      __break(1u);
    }
  }
}

id sub_100024070()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyButtonConfigurationController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BuddyButtonConfigurationController()
{
  return objc_opt_self(_TtC5Setup34BuddyButtonConfigurationController);
}

uint64_t sub_100024118()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10002413C()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 32));
  return swift_deallocObject(v0, 40, 7);
}

void sub_100024168()
{
  uint64_t v0;

  sub_100023DC8(*(_QWORD *)(v0 + 16), *(void (**)(void))(v0 + 24));
}

uint64_t sub_100024174(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100024184(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

void sub_10002418C()
{
  uint64_t v0;

  sub_100023EE4(v0);
}

uint64_t sub_100024194()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000241B8(char a1)
{
  uint64_t v1;

  return sub_100030920(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000241C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  id v6;
  void *v7;
  char v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  id v16;
  char v17;
  uint64_t v18;

  if ((unint64_t)a2 >> 62)
    goto LABEL_20;
  v4 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v4; v4 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    v5 = a2 & 0xC000000000000001;
    if ((a2 & 0xC000000000000001) == 0)
    {
      v6 = *(id *)(a2 + 32);
      goto LABEL_5;
    }
    while (1)
    {
      v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, a2);
LABEL_5:
      v7 = v6;
      sub_1000299F4(0, (unint64_t *)&unk_1002EADF0, OBTrayButton_ptr);
      v8 = static NSObject.== infix(_:_:)(v7, a1);

      if ((v8 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease(a2);
        return 1;
      }
      if (v4 == 1)
        goto LABEL_18;
      if (v5)
        break;
      v5 = 5;
      while (1)
      {
        v15 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
          break;
        v16 = *(id *)(a2 + 8 * v5);
        v17 = static NSObject.== infix(_:_:)(v16, a1);

        if ((v17 & 1) != 0)
          goto LABEL_6;
        ++v5;
        if (v15 == v4)
          goto LABEL_18;
      }
      __break(1u);
    }
    v10 = 1;
    while (1)
    {
      v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a2);
      v12 = v10 + 1;
      if (__OFADD__(v10, 1))
        break;
      v13 = v11;
      v14 = static NSObject.== infix(_:_:)(v11, a1);
      swift_unknownObjectRelease(v13);
      if ((v14 & 1) != 0)
        goto LABEL_6;
      ++v10;
      if (v12 == v4)
        goto LABEL_18;
    }
    __break(1u);
LABEL_20:
    if (a2 < 0)
      v18 = a2;
    else
      v18 = a2 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a2);
  }
LABEL_18:
  swift_bridgeObjectRelease(a2);
  return 0;
}

uint64_t sub_100024354(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;
  uint64_t v3;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = swift_retain(v2);
  v1(v3);
  return swift_release(v2);
}

void sub_100024380(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  _QWORD v34[5];
  unint64_t v35;

  v1 = a1;
  v35 = (unint64_t)_swiftEmptyArrayStorage;
  if ((a1 & 0xC000000000000001) != 0)
  {
    if (a1 < 0)
      v2 = a1;
    else
      v2 = a1 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(a1);
    v3 = __CocoaSet.makeIterator()(v2);
    v4 = sub_1000299F4(0, &qword_1002EAB88, UIScene_ptr);
    v5 = sub_10001EC44();
    v6 = Set.Iterator.init(_cocoa:)(v34, v3, v4, v5);
    v1 = v34[0];
    v31 = v34[1];
    v7 = v34[2];
    v8 = v34[3];
    v9 = v34[4];
  }
  else
  {
    v10 = -1 << *(_BYTE *)(a1 + 32);
    v31 = a1 + 56;
    v7 = ~v10;
    v11 = -v10;
    if (v11 < 64)
      v12 = ~(-1 << v11);
    else
      v12 = -1;
    v9 = v12 & *(_QWORD *)(a1 + 56);
    v6 = (_QWORD *)swift_bridgeObjectRetain(a1);
    v8 = 0;
  }
  v13 = (unint64_t)(v7 + 64) >> 6;
  while (v1 < 0)
  {
    v17 = __CocoaSet.Iterator.next()(v6);
    if (!v17)
      goto LABEL_40;
    v18 = v17;
    v32 = v17;
    v19 = sub_1000299F4(0, &qword_1002EAB88, UIScene_ptr);
    swift_unknownObjectRetain(v18, v20);
    swift_dynamicCast(&v33, &v32, (char *)&type metadata for Swift.AnyObject + 8, v19, 7);
    v21 = v33;
    swift_unknownObjectRelease(v18);
    v16 = v8;
    v14 = v9;
    if (!v21)
      goto LABEL_40;
LABEL_36:
    v25 = objc_opt_self(UIWindowScene);
    v26 = swift_dynamicCastObjCClass(v21, v25);
    if (v26)
    {
      v27 = v26;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      v29 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x10);
      v28 = *(_QWORD *)((v35 & 0xFFFFFFFFFFFFFF8) + 0x18);
      if (v29 >= v28 >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
      v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v29, v27);
      v6 = (_QWORD *)specialized Array._endMutation()(v30);
    }
    else
    {

    }
    v8 = v16;
    v9 = v14;
  }
  if (v9)
  {
    v14 = (v9 - 1) & v9;
    v15 = __clz(__rbit64(v9)) | (v8 << 6);
    v16 = v8;
LABEL_35:
    v21 = *(id *)(*(_QWORD *)(v1 + 48) + 8 * v15);
    if (!v21)
      goto LABEL_40;
    goto LABEL_36;
  }
  v22 = v8 + 1;
  if (!__OFADD__(v8, 1))
  {
    if (v22 >= v13)
      goto LABEL_40;
    v23 = *(_QWORD *)(v31 + 8 * v22);
    v16 = v8 + 1;
    if (!v23)
    {
      v16 = v8 + 2;
      if (v8 + 2 >= v13)
        goto LABEL_40;
      v23 = *(_QWORD *)(v31 + 8 * v16);
      if (!v23)
      {
        v16 = v8 + 3;
        if (v8 + 3 >= v13)
          goto LABEL_40;
        v23 = *(_QWORD *)(v31 + 8 * v16);
        if (!v23)
        {
          v16 = v8 + 4;
          if (v8 + 4 >= v13)
            goto LABEL_40;
          v23 = *(_QWORD *)(v31 + 8 * v16);
          if (!v23)
          {
            v16 = v8 + 5;
            if (v8 + 5 >= v13)
              goto LABEL_40;
            v23 = *(_QWORD *)(v31 + 8 * v16);
            if (!v23)
            {
              v24 = v8 + 6;
              while (v13 != v24)
              {
                v23 = *(_QWORD *)(v31 + 8 * v24++);
                if (v23)
                {
                  v16 = v24 - 1;
                  goto LABEL_34;
                }
              }
LABEL_40:
              sub_10001F0DC(v1);
              return;
            }
          }
        }
      }
    }
LABEL_34:
    v14 = (v23 - 1) & v23;
    v15 = __clz(__rbit64(v23)) + (v16 << 6);
    goto LABEL_35;
  }
  __break(1u);
}

id sub_10002482C()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyAppearanceController.BuddyAppearanceAnimationView();
  return objc_msgSendSuper2(&v2, "dealloc");
}

void sub_100024860()
{
  void *v0;
  NSString v1;
  id v2;
  uint64_t v3;
  void *v4;
  void *v5;
  id v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;

  v0 = (void *)objc_opt_self(UIDevice);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "modelSpecificLocalizedStringKeyForKey:", v1);

  if (v2)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    v5 = v4;

    v6 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
    v10._object = (void *)0xE000000000000000;
    v7._countAndFlagsBits = v3;
    v7._object = v5;
    v8._countAndFlagsBits = 0;
    v8._object = (void *)0xE000000000000000;
    v10._countAndFlagsBits = 0;
    v9 = NSLocalizedString(_:tableName:bundle:value:comment:)(v7, (Swift::String_optional)0, (NSBundle)v6, v8, v10);
    swift_bridgeObjectRelease(v5);

    xmmword_1002EACE0 = (__int128)v9;
  }
  else
  {
    __break(1u);
  }
}

void sub_100024968()
{
  id v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;

  v0 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v4._object = (void *)0xE000000000000000;
  v1._object = (void *)0x800000010020C600;
  v1._countAndFlagsBits = 0xD00000000000002CLL;
  v2._countAndFlagsBits = 0;
  v2._object = (void *)0xE000000000000000;
  v4._countAndFlagsBits = 0;
  v3 = NSLocalizedString(_:tableName:bundle:value:comment:)(v1, (Swift::String_optional)0, (NSBundle)v0, v2, v4);

  xmmword_1002EACF0 = (__int128)v3;
}

id sub_100024A08()
{
  void *v0;
  void *v1;
  _BYTE *v2;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  id v27;
  Swift::String v28;
  Swift::String v29;
  void *object;
  NSString v31;
  NSString v32;
  id v33;
  uint64_t v35;
  objc_super v36;
  Swift::String v37;

  v1 = (void *)objc_opt_self(UIApplication);
  v2 = v0;
  v3 = objc_msgSend(v1, "sharedApplication");
  v4 = objc_msgSend(v3, "connectedScenes");

  v5 = sub_1000299F4(0, &qword_1002EAB88, UIScene_ptr);
  v6 = sub_10001EC44();
  v7 = static Set._unconditionallyBridgeFromObjectiveC(_:)(v4, v5, v6);

  sub_100024380(v7);
  v9 = v8;
  swift_bridgeObjectRelease(v7);
  if ((unint64_t)v9 >> 62)
    goto LABEL_18;
  if (!*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_22:
    swift_bridgeObjectRelease(v9);
    goto LABEL_23;
  }
  while ((v9 & 0xC000000000000001) != 0)
  {
    v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0, v9);
LABEL_6:
    v11 = v10;
    swift_bridgeObjectRelease(v9);
    v12 = objc_msgSend(v11, "windows");

    v13 = sub_1000299F4(0, &qword_1002EAB90, UIWindow_ptr);
    v9 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v12, v13);

    if ((unint64_t)v9 >> 62)
      goto LABEL_29;
    v14 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain(v9);
    if (!v14)
      goto LABEL_15;
LABEL_8:
    v15 = 4;
    while (1)
    {
      v16 = (v9 & 0xC000000000000001) != 0
          ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v15 - 4, v9)
          : *(id *)(v9 + 8 * v15);
      v17 = v16;
      v18 = v15 - 3;
      if (__OFADD__(v15 - 4, 1))
        break;
      if ((objc_msgSend(v16, "isKeyWindow") & 1) != 0)
      {
        swift_bridgeObjectRelease_n(v9, 2);
        v19 = objc_msgSend(v17, "traitCollection");

        v20 = objc_msgSend(v19, "layoutDirection");
        goto LABEL_24;
      }

      ++v15;
      if (v18 == v14)
        goto LABEL_15;
    }
    __break(1u);
LABEL_18:
    if (v9 < 0)
      v21 = v9;
    else
      v21 = v9 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain(v9);
    v22 = _CocoaArrayWrapper.endIndex.getter(v21);
    swift_bridgeObjectRelease(v9);
    if (!v22)
      goto LABEL_22;
  }
  if (*(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v10 = *(id *)(v9 + 32);
    goto LABEL_6;
  }
  __break(1u);
LABEL_29:
  if (v9 < 0)
    v35 = v9;
  else
    v35 = v9 & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain(v9);
  v14 = _CocoaArrayWrapper.endIndex.getter(v35);
  if (v14)
    goto LABEL_8;
LABEL_15:
  swift_bridgeObjectRelease_n(v9, 2);
LABEL_23:
  v20 = 0;
LABEL_24:
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_layoutDirection] = v20;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_supportedModes] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_revertButton] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_continueButton] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_delegate] = 0;
  v23 = &v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_presentationDismissalObserver];
  *v23 = 0u;
  v23[1] = 0u;
  v24 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_cloudConfigManager;
  *(_QWORD *)&v2[v24] = objc_msgSend((id)objc_opt_self(BuddyCloudConfigManager), "sharedManager");
  v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_skippedByCloudConfiguration] = 0;
  v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_initialAppearanceMode] = 4;
  v25 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationView;
  v26 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for BuddyAppearanceController.BuddyAppearanceAnimationView()), "initWithFrame:", 0.0, 0.0, 0.0, 0.0);
  objc_msgSend(v26, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  *(_QWORD *)&v2[v25] = v26;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationController] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_heightConstraint] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_sliderLocationConstraints] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationViewConstraints] = _swiftEmptyArrayStorage;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_runState] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_appearanceModeProvider] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_displayZoomExecutor] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_flowItemDispositionProvider] = 0;
  *(_QWORD *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_analyticsEventAppearance] = 0;

  if (qword_1002E9D10 != -1)
    swift_once(&qword_1002E9D10, sub_100024860);
  v27 = objc_msgSend((id)objc_opt_self(NSBundle), "mainBundle");
  v37._object = (void *)0xE000000000000000;
  v28._object = (void *)0x800000010020C6F0;
  v28._countAndFlagsBits = 0xD00000000000001ELL;
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  v37._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v28, (Swift::String_optional)0, (NSBundle)v27, v29, v37)._object;

  v31 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  v32 = String._bridgeToObjectiveC()();
  v36.receiver = v2;
  v36.super_class = (Class)type metadata accessor for BuddyAppearanceController();
  v33 = objc_msgSendSuper2(&v36, "initWithTitle:detailText:icon:contentLayout:", v31, v32, 0, 2);

  return v33;
}

void sub_100024F30()
{
  char *v0;
  char *v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  Swift::String v6;
  Swift::String v7;
  void *object;
  NSString v9;
  id v10;
  void *v11;
  NSString v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  Swift::String v18;
  Swift::String v19;
  void *v20;
  NSString v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  void *v31;
  void *v32;
  void *v33;
  id v34;
  id v35;
  Swift::String v36;
  Swift::String v37;
  void *v38;
  NSString v39;
  void *v40;
  id v41;
  void *v42;
  id v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  Swift::String v49;
  Swift::String v50;
  void *v51;
  NSString v52;
  void *v53;
  uint64_t v54;
  int64_t v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  id v61;
  Swift::String v62;
  Swift::String v63;
  Swift::String v64;
  unint64_t v65;
  unint64_t v66;
  id v67;
  void *v68;
  id v69;
  id v70;
  void *v71;
  void *v72;
  id v73;
  id v74;
  id v75;
  id v76;
  void *v77;
  id v78;
  uint64_t v79;
  void *v80;
  id v81;
  uint64_t v82;
  void *v83;
  void **v84;
  uint64_t v85;
  id v86;
  uint64_t v87;
  id v88;
  uint64_t v89;
  void *v90;
  uint64_t v91;
  char *v92;
  id v93;
  char *v94;
  id v95;
  id v96;
  _BYTE v97[24];
  void **aBlock;
  uint64_t v99;
  uint64_t (*v100)(uint64_t, uint64_t);
  void *ObjectType;
  void *v102;
  uint64_t v103;
  objc_super v104;
  Swift::String v105;
  Swift::String v106;
  Swift::String v107;
  Swift::String v108;
  Swift::String v109;

  v1 = v0;
  v104.receiver = v0;
  v104.super_class = (Class)type metadata accessor for BuddyAppearanceController();
  objc_msgSendSuper2(&v104, "viewDidLoad");
  v2 = *(void **)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_flowItemDispositionProvider];
  if (!v2)
  {
    __break(1u);
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  if ((objc_msgSend(v2, "dispositions") & 0x10) != 0)
  {
    v3 = objc_msgSend(v0, "headerView");
    v4 = (void *)objc_opt_self(NSBundle);
    v5 = objc_msgSend(v4, "mainBundle");
    v6._countAndFlagsBits = 0xD000000000000024;
    v105._object = (void *)0xE000000000000000;
    v6._object = (void *)0x800000010020C690;
    v7._countAndFlagsBits = 0;
    v7._object = (void *)0xE000000000000000;
    v105._countAndFlagsBits = 0;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v6, (Swift::String_optional)0, (NSBundle)v5, v7, v105)._object;

    v9 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(object);
    objc_msgSend(v3, "setTitle:", v9);

    v10 = objc_msgSend(v1, "headerView");
    v11 = (void *)objc_opt_self(UIDevice);
    v12 = String._bridgeToObjectiveC()();
    v13 = objc_msgSend(v11, "modelSpecificLocalizedStringKeyForKey:", v12);

    if (!v13)
    {
LABEL_27:
      __break(1u);
      return;
    }
    v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
    v16 = v15;

    v17 = objc_msgSend(v4, "mainBundle");
    v106._object = (void *)0xE000000000000000;
    v18._countAndFlagsBits = v14;
    v18._object = v16;
    v19._countAndFlagsBits = 0;
    v19._object = (void *)0xE000000000000000;
    v106._countAndFlagsBits = 0;
    v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v106)._object;

    swift_bridgeObjectRelease(v16);
    v21 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v20);
    objc_msgSend(v10, "setDetailText:", v21);

  }
  v22 = *(void **)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_appearanceModeProvider];
  if (v22)
  {
    v23 = (void *)objc_opt_self(BYDevice);
    v24 = v22;
    v25 = objc_msgSend(v23, "currentDevice");
    v26 = objc_msgSend(v25, "type");

    v27 = sub_10000AC60((uint64_t)v26);
    v28 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_supportedModes];
    *(_QWORD *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_supportedModes] = v27;
    swift_bridgeObjectRelease(v28);

  }
  v29 = objc_msgSend((id)objc_opt_self(OBBoldTrayButton), "boldButton");
  v30 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_continueButton;
  v31 = *(void **)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_continueButton];
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_continueButton] = v29;

  v32 = *(void **)&v1[v30];
  if (!v32)
    goto LABEL_22;
  v33 = (void *)objc_opt_self(NSBundle);
  v34 = v32;
  v95 = v33;
  v35 = objc_msgSend(v33, "mainBundle");
  v107._object = (void *)0xE000000000000000;
  v36._countAndFlagsBits = 0x45554E49544E4F43;
  v36._object = (void *)0xE800000000000000;
  v37._countAndFlagsBits = 0;
  v37._object = (void *)0xE000000000000000;
  v107._countAndFlagsBits = 0;
  v38 = NSLocalizedString(_:tableName:bundle:value:comment:)(v36, (Swift::String_optional)0, (NSBundle)v35, v37, v107)._object;

  v39 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v38);
  objc_msgSend(v34, "setTitle:forState:", v39, 0);

  v40 = *(void **)&v1[v30];
  if (!v40)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  objc_msgSend(v40, "addTarget:action:forControlEvents:", v1, "continueTapped", 64);
  v41 = objc_msgSend(v1, "buttonTray");
  if (!*(_QWORD *)&v1[v30])
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  v42 = v41;
  objc_msgSend(v41, "addButton:");

  v43 = objc_msgSend((id)objc_opt_self(OBLinkTrayButton), "linkButton");
  v44 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_revertButton;
  v45 = *(void **)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_revertButton];
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_revertButton] = v43;

  v46 = *(void **)&v1[v44];
  if (!v46)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v47 = v46;
  v48 = objc_msgSend(v95, "mainBundle");
  v108._object = (void *)0xE000000000000000;
  v49._object = (void *)0x800000010020C650;
  v49._countAndFlagsBits = 0xD000000000000011;
  v50._countAndFlagsBits = 0;
  v50._object = (void *)0xE000000000000000;
  v108._countAndFlagsBits = 0;
  v51 = NSLocalizedString(_:tableName:bundle:value:comment:)(v49, (Swift::String_optional)0, (NSBundle)v48, v50, v108)._object;

  v52 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v51);
  objc_msgSend(v47, "setTitle:forState:", v52, 0);

  v53 = *(void **)&v1[v44];
  if (!v53)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  objc_msgSend(v53, "addTarget:action:forControlEvents:", v1, "revertTapped", 64);
  v54 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_supportedModes];
  v55 = *(_QWORD *)(v54 + 16);
  v56 = _swiftEmptyArrayStorage;
  if (v55)
  {
    v94 = v1;
    aBlock = (void **)_swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v54);
    sub_100028FE0(0, v55, 0);
    v57 = 0;
    v56 = _swiftEmptyArrayStorage;
    do
    {
      v58 = 8 * *(char *)(v54 + v57 + 32);
      v59 = *(_QWORD *)&aSmall_0[v58];
      v60 = *(void **)((char *)&unk_10024CB80 + v58);
      v61 = objc_msgSend(v95, "mainBundle");
      v109._object = (void *)0xE000000000000000;
      v62._countAndFlagsBits = v59;
      v62._object = v60;
      v63._countAndFlagsBits = 0;
      v63._object = (void *)0xE000000000000000;
      v109._countAndFlagsBits = 0;
      v64 = NSLocalizedString(_:tableName:bundle:value:comment:)(v62, (Swift::String_optional)0, (NSBundle)v61, v63, v109);

      swift_bridgeObjectRelease(v60);
      aBlock = (void **)v56;
      v66 = v56[2];
      v65 = v56[3];
      if (v66 >= v65 >> 1)
      {
        sub_100028FE0(v65 > 1, v66 + 1, 1);
        v56 = (unint64_t *)aBlock;
      }
      ++v57;
      v56[2] = v66 + 1;
      *(Swift::String *)&v56[2 * v66 + 4] = v64;
    }
    while (v55 != v57);
    swift_bridgeObjectRelease(v54);
    v1 = v94;
  }
  v67 = objc_allocWithZone((Class)type metadata accessor for LabeledSlider());
  v68 = (void *)sub_10001D6F8(v56);
  objc_msgSend(v68, "setTranslatesAutoresizingMaskIntoConstraints:", 0);
  objc_msgSend(v68, "addTarget:action:forControlEvents:", v1, "modeChanged", 192);
  v69 = objc_msgSend(v1, "contentView");
  objc_msgSend(v69, "addSubview:", v68);

  v70 = objc_msgSend(v1, "contentView");
  objc_msgSend(v70, "addSubview:", *(_QWORD *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationView]);

  v71 = *(void **)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider];
  *(_QWORD *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider] = v68;
  v96 = v68;

  sub_100026CAC();
  v72 = (void *)objc_opt_self(BuddyAccessibilityUtilities);
  v73 = objc_msgSend(v72, "accessibilityViewController");

  if (v73)
  {
    v74 = objc_msgSend(v72, "navigationBarButton");
    objc_msgSend(v74, "addTarget:action:forControlEvents:", v1, "showAccessibilitySettings", 64);
    v75 = objc_msgSend(v1, "navigationItem");
    v76 = objc_msgSend(v72, "navigationBarButtonItemWithButton:", v74);
    objc_msgSend(v75, "setRightBarButtonItem:", v76);

  }
  v77 = (void *)objc_opt_self(NSNotificationCenter);
  v78 = objc_msgSend(v77, "defaultCenter");
  v79 = UIPresentationControllerDismissalTransitionDidEndNotification;
  v80 = (void *)objc_opt_self(NSOperationQueue);
  v81 = objc_msgSend(v80, "mainQueue");
  v82 = swift_allocObject(&unk_10027FFC0, 24, 7);
  swift_unknownObjectWeakInit(v82 + 16, v1);
  v102 = sub_100029990;
  v103 = v82;
  aBlock = _NSConcreteStackBlock;
  v99 = 1107296256;
  v100 = sub_100025ABC;
  ObjectType = &unk_10027FFD8;
  v83 = _Block_copy(&aBlock);
  swift_release(v103);
  v84 = (void **)objc_msgSend(v78, "addObserverForName:object:queue:usingBlock:", v79, 0, v81, v83);
  _Block_release(v83);

  ObjectType = (void *)swift_getObjectType(v84);
  aBlock = v84;
  v85 = (uint64_t)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_presentationDismissalObserver];
  swift_beginAccess(&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_presentationDismissalObserver], v97, 33, 0);
  sub_100029998((uint64_t)&aBlock, v85);
  swift_endAccess(v97);
  v86 = objc_msgSend(v77, "defaultCenter");
  v87 = MCCloudConfigurationDidChangeNotification;
  v88 = objc_msgSend(v80, "mainQueue");
  v89 = swift_allocObject(&unk_100280010, 24, 7);
  *(_QWORD *)(v89 + 16) = v1;
  v102 = sub_1000299E0;
  v103 = v89;
  aBlock = _NSConcreteStackBlock;
  v99 = 1107296256;
  v100 = sub_100025ABC;
  ObjectType = &unk_100280028;
  v90 = _Block_copy(&aBlock);
  v91 = v103;
  v92 = v1;
  swift_release(v91);
  v93 = objc_msgSend(v86, "addObserverForName:object:queue:usingBlock:", v87, 0, v88, v90);
  _Block_release(v90);

  swift_unknownObjectRelease(v93);
}

void sub_10002594C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t Strong;
  char *v4;
  void *v5;
  char *v6;
  id v7;
  NSString v8;
  char *v9;
  char *v10;
  char v11[24];

  v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v11, 0, 0);
  Strong = swift_unknownObjectWeakLoadStrong(v2);
  if (Strong)
  {
    v4 = (char *)Strong;
    v5 = *(void **)(Strong + OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider);
    if (v5)
    {
      v6 = v5;
      if ((sub_100027F2C() & 1) != 0)
      {
        sub_100028760(v6);
      }
      else
      {
        objc_msgSend(v6, "setHidden:", 1);
        objc_msgSend(*(id *)&v4[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationView], "setHidden:", 1);
        v7 = objc_msgSend(v4, "headerView");
        if (qword_1002E9D18 != -1)
          swift_once(&qword_1002E9D18, sub_100024968);
        v8 = String._bridgeToObjectiveC()();
        objc_msgSend(v7, "setDetailText:", v8);

        v9 = (char *)objc_msgSend(v4, "buttonTray");
        if (!*(_QWORD *)&v4[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_revertButton])
        {
          __break(1u);
          return;
        }
        v10 = v9;
        objc_msgSend(v9, "addButton:");

        v4 = v6;
        v6 = v10;
      }

      v4 = v6;
    }

  }
}

uint64_t sub_100025ABC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  void (*v9)(char *);
  uint64_t v11;

  v4 = type metadata accessor for Notification(0);
  v5 = *(_QWORD *)(v4 - 8);
  __chkstk_darwin(v4);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(void (**)(char *))(a1 + 32);
  v8 = *(_QWORD *)(a1 + 40);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)(a2);
  swift_retain(v8);
  v9(v7);
  swift_release(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100025B60(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _QWORD aBlock[5];
  uint64_t v20;

  v3 = type metadata accessor for DispatchWorkItemFlags(0);
  v4 = *(_QWORD *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS(0);
  v8 = *(_QWORD *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000299F4(0, (unint64_t *)&qword_1002EA370, OS_dispatch_queue_ptr);
  v11 = (void *)static OS_dispatch_queue.main.getter();
  v12 = swift_allocObject(&unk_10027FFC0, 24, 7);
  swift_unknownObjectWeakInit(v12 + 16, a2);
  aBlock[4] = sub_1000299EC;
  v20 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_100024350;
  aBlock[3] = &unk_100280050;
  v13 = _Block_copy(aBlock);
  v14 = swift_release(v20);
  static DispatchQoS.unspecified.getter(v14);
  aBlock[0] = _swiftEmptyArrayStorage;
  v15 = sub_10000C774();
  v16 = sub_10000A9E4((uint64_t *)&unk_1002EA380);
  v17 = sub_10000C7BC();
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v16, v17, v3, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0, v10, v6, v13);
  _Block_release(v13);

  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

void sub_100025D3C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *Strong;
  char *v7;
  id v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  uint64_t v13;
  id v14;
  void *v15;
  char *v16;
  char *v17;
  id v18;
  char *v19;
  uint64_t ObjectType;
  uint64_t v21;
  char *v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint8_t *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  char *v32;
  uint8_t *v33;
  uint64_t v34;
  char *v35;
  NSObject *v36;
  int v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  char v42[24];

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  a1 += 16;
  swift_beginAccess(a1, v42, 0, 0);
  Strong = (char *)swift_unknownObjectWeakLoadStrong(a1);
  if (Strong)
  {
    v7 = Strong;
    v8 = objc_msgSend(Strong, "navigationController");
    if (v8)
    {
      v9 = v8;
      v10 = *(void **)&v7[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_cloudConfigManager];
      if (v10
        && (v11 = *(void **)&v7[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_delegate]) != 0
        && (v7[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_skippedByCloudConfiguration] & 1) == 0)
      {
        v38 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_skippedByCloudConfiguration;
        v12 = v10;
        swift_unknownObjectRetain(v11, v13);
        v14 = objc_msgSend(v9, "topViewController");
        if (v14)
        {
          v15 = v14;
          sub_1000299F4(0, &qword_1002EAB08, UIViewController_ptr);
          v16 = v7;
          v39 = v11;
          v17 = v16;
          v18 = v15;
          LOBYTE(v15) = static NSObject.== infix(_:_:)(v18, v17);

          v19 = v17;
          v11 = v39;

          if ((v15 & 1) != 0)
          {
            ObjectType = swift_getObjectType(v19);
            if (objc_msgSend(v12, "cloudConfigWantsToSkipControllerClass:", swift_getObjCClassFromMetadata(ObjectType)))
            {
              v21 = Logger.purpleBuddyAppearance.unsafeMutableAddressor();
              (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v21, v2);
              v22 = v19;
              v23 = Logger.logObject.getter(v22);
              v24 = static os_log_type_t.default.getter();
              v37 = v24;
              if (os_log_type_enabled(v23, v24))
              {
                v25 = swift_slowAlloc(12, -1);
                v36 = v23;
                v26 = (uint8_t *)v25;
                v34 = swift_slowAlloc(32, -1);
                v41 = v34;
                v35 = v22;
                *(_DWORD *)v26 = 136315138;
                v33 = v26 + 4;
                v27 = _typeName(_:qualified:)(ObjectType, 0);
                v29 = v28;
                v40 = sub_10002F320(v27, v28, &v41);
                v22 = v35;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v33, v26 + 12);

                swift_bridgeObjectRelease(v29);
                v30 = v26;
                _os_log_impl((void *)&_mh_execute_header, v36, (os_log_type_t)v37, "Advancing from %s due to cloud configuration...", v26, 0xCu);
                v31 = v34;
                swift_arrayDestroy(v34, 1, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v31, -1, -1);
                swift_slowDealloc(v30, -1, -1);

              }
              else
              {

              }
              (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
              v7[v38] = 1;
              v32 = v22;
              objc_msgSend(v11, "flowItemDone:", v32);

            }
          }
        }

        swift_unknownObjectRelease(v11);
      }
      else
      {
        v12 = v7;
      }

    }
    else
    {
      v9 = v7;
    }

  }
}

void sub_1000260C8(char a1)
{
  char *v1;
  char *v2;
  void *v4;
  id v5;
  uint64_t v6;
  char v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  void *v20;
  void *v21;
  id v22;
  double v23;
  double v24;
  double v25;
  double v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  Class isa;
  uint64_t v31;
  uint64_t v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  uint64_t v42;
  Class v43;
  uint64_t v44;
  Class v45;
  uint64_t v46;
  id v47;
  id v48;
  id v49;
  id v50;
  id v51;
  id v52;
  id v53;
  id v54;
  id v55;
  id v56;
  id v57;
  id v58;
  id v59;
  id v60;
  id v61;
  id v62;
  uint64_t v63;
  Class v64;
  int v65;
  uint64_t v66;
  void *v67;
  char v68;
  id v69;
  uint64_t v70;
  void *v71;
  id v72;
  void *v73;
  id v74;
  id v75;
  uint64_t v76;
  id v77;
  id v78;
  uint64_t v79;
  objc_super v80;

  v2 = v1;
  v80.receiver = v2;
  v80.super_class = (Class)type metadata accessor for BuddyAppearanceController();
  objc_msgSendSuper2(&v80, "viewWillAppear:", a1 & 1);
  v4 = *(void **)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_appearanceModeProvider];
  if (v4)
  {
    v5 = v4;
    sub_100009C10();
    v6 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_initialAppearanceMode;
    v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_initialAppearanceMode] = v7;
    v8 = objc_msgSend((id)objc_opt_self(BYDevice), "currentDevice");
    v9 = objc_msgSend(v8, "type");

    if (v9 == (id)1)
    {
      v10 = objc_msgSend(v2, "view");
      if (!v10)
        goto LABEL_17;
      v11 = v10;
      objc_msgSend(v10, "layoutIfNeeded");

    }
    v12 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_heightConstraint;
    v13 = *(void **)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_heightConstraint];
    if (v13)
    {
      v14 = v13;
      v15 = objc_msgSend(v2, "contentView");
      objc_msgSend(v15, "removeConstraint:", v14);

    }
    v16 = objc_msgSend(v2, "contentView");
    v17 = objc_msgSend(v16, "heightAnchor");

    objc_msgSend(v2, "availableContentViewHeight");
    v18 = objc_msgSend(v17, "constraintEqualToConstant:");

    v19 = *(void **)&v2[v12];
    *(_QWORD *)&v2[v12] = v18;

    v20 = *(void **)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider];
    if (v20)
    {
      v21 = *(void **)&v2[v12];
      if (v21)
      {
        v78 = v20;
        v22 = v21;
        sub_100026F14();
        objc_msgSend(v2, "availableContentViewHeight");
        v24 = v23;
        objc_msgSend(v78, "intrinsicContentSize");
        v26 = (v24 - v25) * 0.75;
        v27 = *(void **)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationView];
        v28 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationViewConstraints;
        v29 = *(_QWORD *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationViewConstraints];
        sub_1000299F4(0, (unint64_t *)&qword_1002EAB30, NSLayoutConstraint_ptr);
        swift_bridgeObjectRetain(v29);
        isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v29);
        objc_msgSend(v27, "removeConstraints:", isa);

        v31 = sub_10000A9E4(&qword_1002EA500);
        v32 = swift_allocObject(v31, 48, 7);
        *(_OWORD *)(v32 + 16) = xmmword_10024C9F0;
        v76 = v6;
        v33 = objc_msgSend(v27, "topAnchor");
        v77 = v5;
        v34 = objc_msgSend(v2, "contentView");
        v35 = objc_msgSend(v34, "topAnchor");

        v36 = objc_msgSend(v33, "constraintGreaterThanOrEqualToAnchor:", v35);
        *(_QWORD *)(v32 + 32) = v36;
        v37 = objc_msgSend(v27, "heightAnchor");
        v38 = objc_msgSend(v37, "constraintGreaterThanOrEqualToConstant:", v26);

        *(_QWORD *)(v32 + 40) = v38;
        specialized Array._endMutation()(v39);
        v40 = *(_QWORD *)&v2[v28];
        *(_QWORD *)&v2[v28] = v32;
        swift_bridgeObjectRelease(v40);
        v41 = (void *)objc_opt_self(NSLayoutConstraint);
        v42 = swift_allocObject(v31, 40, 7);
        *(_OWORD *)(v42 + 16) = xmmword_10024CA60;
        *(_QWORD *)(v42 + 32) = v22;
        v79 = v42;
        specialized Array._endMutation()(v42);
        v75 = v22;
        v43 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v79);
        v74 = v41;
        objc_msgSend(v41, "activateConstraints:", v43);

        v44 = *(_QWORD *)&v2[v28];
        swift_bridgeObjectRetain(v44);
        v45 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v44);
        objc_msgSend(v41, "activateConstraints:", v45);

        v46 = swift_allocObject(v31, 64, 7);
        *(_OWORD *)(v46 + 16) = xmmword_10024C560;
        v47 = objc_msgSend(v78, "leadingAnchor");
        v48 = objc_msgSend(v2, "contentView");
        v49 = objc_msgSend(v48, "leadingAnchor");

        v50 = objc_msgSend(v47, "constraintEqualToAnchor:", v49);
        *(_QWORD *)(v46 + 32) = v50;
        v51 = objc_msgSend(v78, "trailingAnchor");
        v52 = objc_msgSend(v2, "contentView");
        v53 = objc_msgSend(v52, "trailingAnchor");

        v54 = objc_msgSend(v51, "constraintEqualToAnchor:", v53);
        *(_QWORD *)(v46 + 40) = v54;
        v55 = objc_msgSend(v27, "leadingAnchor");
        v56 = objc_msgSend(v2, "contentView");
        v57 = objc_msgSend(v56, "leadingAnchor");

        v58 = objc_msgSend(v55, "constraintEqualToAnchor:", v57);
        v6 = v76;

        *(_QWORD *)(v46 + 48) = v58;
        v59 = objc_msgSend(v27, "trailingAnchor");
        v60 = objc_msgSend(v2, "contentView");
        v61 = objc_msgSend(v60, "trailingAnchor");

        v62 = objc_msgSend(v59, "constraintEqualToAnchor:", v61);
        *(_QWORD *)(v46 + 56) = v62;
        specialized Array._endMutation()(v63);
        v64 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease(v46);
        v5 = v77;
        objc_msgSend(v74, "activateConstraints:", v64);

        sub_100026E00((char *)v78);
      }
    }
    sub_100026CAC();
    v65 = v2[v6];
    if (v65 == 4)
    {
      v66 = 0;
    }
    else
    {
      v67 = *(void **)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationView];
      v68 = *(_QWORD *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_layoutDirection] == 1;
      v69 = objc_msgSend(v2, "traitCollection");
      v66 = sub_10000954C(v67, v68, v69, v65);

    }
    v70 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationController;
    v71 = *(void **)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationController];
    *(_QWORD *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationController] = v66;

    objc_msgSend(*(id *)&v2[v70], "startAnimation");
    v72 = objc_msgSend(v2, "view");
    if (v72)
    {
      v73 = v72;
      objc_msgSend(v72, "layoutIfNeeded");

      return;
    }
    __break(1u);
LABEL_17:
    __break(1u);
  }
}

void sub_10002688C(char a1)
{
  unsigned __int8 *v1;
  int v3;
  void *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char v10;
  char v11;
  void *v12;
  id v13;
  id v14;
  objc_super v15;

  v15.receiver = v1;
  v15.super_class = (Class)type metadata accessor for BuddyAppearanceController();
  objc_msgSendSuper2(&v15, "viewWillDisappear:", a1 & 1);
  v3 = v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_initialAppearanceMode];
  if (v3 != 4)
  {
    v4 = *(void **)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_appearanceModeProvider];
    if (v4)
    {
      v5 = v4;
      if (objc_msgSend(v1, "isMovingFromParentViewController"))
      {
        sub_10000A8EC(v3);
        v7 = v6;
        v9 = v8;
        v11 = v10;
        v12 = *(void **)&v5[OBJC_IVAR____TtC5Setup22AppearanceModeProvider_displayZoomExecutor];
        v14 = v13;
        objc_msgSend(v12, "setPendingOption:chosenByUser:", v7, 1);
        objc_msgSend(*(id *)&v5[OBJC_IVAR____TtC5Setup22AppearanceModeProvider_homeScreenService], "setLargeIconLayoutEnabled:", v9 & 1);
        sub_10001A660((uint64_t)v14);
        _AXSSetEnhanceTextLegibilityEnabled(v11 & 1);

      }
    }
  }
}

uint64_t sub_1000269D0()
{
  uint64_t v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD aBlock[5];
  uint64_t v37;

  v31 = type metadata accessor for DispatchWorkItemFlags(0);
  v34 = *(_QWORD *)(v31 - 8);
  __chkstk_darwin(v31);
  v1 = (char *)&v28 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = type metadata accessor for DispatchQoS(0);
  v32 = *(_QWORD *)(v2 - 8);
  v33 = v2;
  __chkstk_darwin(v2);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for DispatchTime(0);
  v5 = *(_QWORD *)(v29 - 8);
  v6 = __chkstk_darwin(v29);
  v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  v10 = (char *)&v28 - v9;
  v11 = type metadata accessor for DispatchQoS.QoSClass(0);
  v12 = *(_QWORD *)(v11 - 8);
  __chkstk_darwin(v11);
  v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000299F4(0, (unint64_t *)&qword_1002EA370, OS_dispatch_queue_ptr);
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.userInitiated(_:), v11);
  v15 = (void *)static OS_dispatch_queue.global(qos:)(v14);
  v16 = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  static DispatchTime.now()(v16);
  + infix(_:_:)(v8, 0.1);
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v18 = v8;
  v19 = v29;
  v17(v18, v29);
  v20 = swift_allocObject(&unk_10027FEF8, 24, 7);
  v21 = v30;
  *(_QWORD *)(v20 + 16) = v30;
  aBlock[4] = sub_1000295B8;
  v37 = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002434C;
  aBlock[3] = &unk_10027FF10;
  v22 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v21);
  v35 = _swiftEmptyArrayStorage;
  v23 = sub_10000C774();
  v24 = sub_10000A9E4((uint64_t *)&unk_1002EA380);
  v25 = sub_10000C7BC();
  v26 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v24, v25, v31, v23);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v10, v4, v1, v22);
  _Block_release(v22);

  (*(void (**)(char *, uint64_t))(v34 + 8))(v1, v26);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v4, v33);
  v17(v10, v19);
  return swift_release(v37);
}

void sub_100026CAC()
{
  char *v0;
  void *v1;
  void *v2;
  id v3;
  NSString v4;
  id v5;
  id v6;
  id v7;

  v1 = *(void **)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider];
  if (v1)
  {
    v7 = v1;
    if ((sub_100027F2C() & 1) != 0)
    {
      sub_100028760(v7);
      v2 = v7;
LABEL_9:

      return;
    }
    objc_msgSend(v7, "setHidden:", 1);
    objc_msgSend(*(id *)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationView], "setHidden:", 1);
    v3 = objc_msgSend(v0, "headerView");
    if (qword_1002E9D18 != -1)
      swift_once(&qword_1002E9D18, sub_100024968);
    v4 = String._bridgeToObjectiveC()();
    objc_msgSend(v3, "setDetailText:", v4);

    v5 = objc_msgSend(v0, "buttonTray");
    if (*(_QWORD *)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_revertButton])
    {
      v6 = v5;
      objc_msgSend(v5, "addButton:");

      v2 = v6;
      goto LABEL_9;
    }
    __break(1u);
  }
}

void sub_100026E00(char *a1)
{
  uint64_t v1;
  void *v2;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  float v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  float v12;
  double v13;
  id v14;

  v2 = *(void **)(v1 + OBJC_IVAR____TtC5Setup25BuddyAppearanceController_appearanceModeProvider);
  if (v2)
  {
    v14 = v2;
    sub_100009C10();
    if (v4 != 4)
    {
      v5 = *(_QWORD *)(v1 + OBJC_IVAR____TtC5Setup25BuddyAppearanceController_supportedModes);
      v6 = *(_QWORD *)(v5 + 16);
      if (v6)
      {
        v7 = 0.0;
        if (*(unsigned __int8 *)(v5 + 32) == v4)
        {
LABEL_9:
          objc_msgSend(a1, "maximumValue");
          *(float *)&v13 = (float)(v12
                                 / (float)(*(_QWORD *)(*(_QWORD *)&a1[OBJC_IVAR____TtC5Setup13LabeledSlider_ticks] + 16)
                                         - 1))
                         * v7;
          objc_msgSend(a1, "setValue:animated:", 1, v13);
        }
        else
        {
          v8 = 0;
          v9 = v5 + 33;
          v10 = v6 - 1;
          while (v10 != v8)
          {
            v11 = *(unsigned __int8 *)(v9 + v8++);
            if (v11 == v4)
            {
              v7 = (float)v8;
              goto LABEL_9;
            }
          }
        }
      }
    }

  }
}

void sub_100026F14()
{
  char *v0;
  void *v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  Class isa;
  uint64_t v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  Class v19;
  id v20;

  v1 = *(void **)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider];
  if (v1)
  {
    v2 = v0;
    v3 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_sliderLocationConstraints;
    v4 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_sliderLocationConstraints];
    sub_1000299F4(0, (unint64_t *)&qword_1002EAB30, NSLayoutConstraint_ptr);
    v20 = v1;
    swift_bridgeObjectRetain(v4);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v4);
    objc_msgSend(v20, "removeConstraints:", isa);

    v6 = sub_10000A9E4(&qword_1002EA500);
    v7 = swift_allocObject(v6, 48, 7);
    *(_OWORD *)(v7 + 16) = xmmword_10024C9F0;
    v8 = objc_msgSend(v20, "bottomAnchor");
    v9 = objc_msgSend(v2, "contentView");
    v10 = objc_msgSend(v9, "bottomAnchor");

    v11 = objc_msgSend(v8, "constraintEqualToAnchor:constant:", v10, -10.0);
    *(_QWORD *)(v7 + 32) = v11;
    v12 = objc_msgSend(v20, "topAnchor");
    v13 = objc_msgSend(*(id *)&v2[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationView], "bottomAnchor");
    v14 = objc_msgSend(v12, "constraintEqualToAnchor:", v13);

    *(_QWORD *)(v7 + 40) = v14;
    specialized Array._endMutation()(v15);
    v16 = *(_QWORD *)&v2[v3];
    *(_QWORD *)&v2[v3] = v7;
    swift_bridgeObjectRelease(v16);
    v17 = (void *)objc_opt_self(NSLayoutConstraint);
    v18 = *(_QWORD *)&v2[v3];
    swift_bridgeObjectRetain(v18);
    v19 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease(v18);
    objc_msgSend(v17, "activateConstraints:", v19);

    objc_msgSend(v20, "layoutIfNeeded");
  }
}

void sub_100027174()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  id v8;
  float v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  char v23;
  char v24;
  char v25;
  id v26;
  id v27;
  id v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  os_log_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  id v43;
  id v44;
  void *v45;
  char v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  os_log_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  id v57;
  id v58;
  uint64_t v59;
  uint64_t v60;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void **)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_appearanceModeProvider];
  if (v6)
  {
    v7 = *(void **)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider];
    if (v7)
    {
      v8 = v6;
      v58 = v7;
      objc_msgSend(v58, "value");
      v10 = (uint64_t)sub_10001EAA4(v9);
      if (v10 < 0
        || (v11 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_supportedModes],
            v10 >= *(_QWORD *)(v11 + 16)))
      {

      }
      else
      {
        v12 = *(unsigned __int8 *)(v11 + v10 + 32);
        v13 = Logger.purpleBuddyAppearance.unsafeMutableAddressor();
        v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v13, v2);
        v15 = Logger.logObject.getter(v14);
        v16 = static os_log_type_t.debug.getter();
        v17 = v16;
        if (os_log_type_enabled(v15, v16))
        {
          v18 = swift_slowAlloc(32, -1);
          v57 = v8;
          v19 = v18;
          v55 = swift_slowAlloc(64, -1);
          v60 = v55;
          *(_DWORD *)v19 = 136315650;
          v54 = v17;
          v59 = sub_10002F320(0x6E61684365646F6DLL, 0xED00002928646567, &v60);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v19 + 4, v19 + 12);
          *(_WORD *)(v19 + 12) = 2048;
          v59 = 239;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v19 + 14, v19 + 22);
          *(_WORD *)(v19 + 22) = 2080;
          v53 = v19 + 24;
          sub_10000A8EC(v12);
          v21 = v20;
          v23 = v22;
          v56 = v12;
          v25 = v24;
          v27 = v26;
          v52 = v15;
          v28 = v27;
          v29 = sub_100009390(v21, v23 & 1, (uint64_t)v27, v25 & 1);
          v31 = v30;

          v59 = sub_10002F320(v29, v31, &v60);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v59, &v60, v53, v19 + 32);
          v32 = v31;
          v12 = v56;
          swift_bridgeObjectRelease(v32);
          v33 = v52;
          _os_log_impl((void *)&_mh_execute_header, v52, (os_log_type_t)v54, "   %s: %ld\n   currentConfiguration: %s", (uint8_t *)v19, 0x20u);
          v34 = v55;
          swift_arrayDestroy(v55, 2, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v34, -1, -1);
          v35 = v19;
          v8 = v57;
          swift_slowDealloc(v35, -1, -1);

        }
        else
        {

        }
        (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
        sub_100009C10();
        if (v36 == 4 || v12 != v36)
        {
          sub_10000A8EC(v12);
          v38 = v37;
          v40 = v39;
          v42 = v41;
          v44 = v43;
          sub_10000A0E4(v38, v40 & 1, v44, v42 & 1);

        }
        v45 = *(void **)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationView];
        v46 = *(_QWORD *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_layoutDirection] == 1;
        v47 = objc_msgSend(v1, "traitCollection");
        v48 = sub_10000954C(v45, v46, v47, v12);

        v49 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationController;
        v50 = *(void **)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationController];
        *(_QWORD *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationController] = v48;

        objc_msgSend(*(id *)&v1[v49], "startAnimation");
        sub_100026F14();

      }
    }
  }
}

void sub_100027588()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  void *v4;
  id v5;
  id v6;
  double v7;
  double v8;
  double v9;
  double v10;
  id v11;
  void *v12;
  id v13;

  v1 = objc_msgSend(v0, "view");
  if (!v1)
  {
    __break(1u);
    goto LABEL_7;
  }
  v2 = v1;
  objc_msgSend(v1, "setNeedsLayout");

  v3 = objc_msgSend(v0, "view");
  if (!v3)
  {
LABEL_7:
    __break(1u);
    return;
  }
  v4 = v3;
  objc_msgSend(v3, "layoutIfNeeded");

  v5 = objc_msgSend(v0, "scrollView");
  v6 = objc_msgSend(v0, "buttonTray");
  objc_msgSend(v6, "frame");
  v8 = v7;
  v10 = v9;

  v11 = objc_msgSend(v0, "view");
  objc_msgSend(v5, "convertPoint:fromView:", v11, v8, v10);

  v12 = *(void **)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_heightConstraint];
  if (v12)
  {
    v13 = v12;
    objc_msgSend(v0, "availableContentViewHeight");
    objc_msgSend(v13, "setConstant:");

  }
}

void sub_1000277BC()
{
  char *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  void *v5;
  float v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char *v19;
  NSObject *v20;
  int v21;
  _BOOL4 v22;
  uint64_t v23;
  void *v24;
  void *v25;
  char *v26;
  id v27;
  id v28;
  id v29;
  UIContentSizeCategory v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  char v40;
  id v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  os_log_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  NSString v52;
  void *v53;
  id v54;
  uint64_t v55;
  NSString v56;
  NSString v57;
  char v58;
  void *v59;
  uint64_t v60;
  uint64_t *v61;
  char *v62;
  uint64_t v63;
  int v64;
  os_log_t v65;
  void *v66;
  void *v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  id v71;
  uint64_t v72;
  uint64_t v73;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  __chkstk_darwin(v1);
  v4 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(void **)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider];
  if (!v5)
    return;
  v71 = v5;
  objc_msgSend(v71, "value");
  v7 = (uint64_t)sub_10001EAA4(v6);
  if (v7 < 0
    || (v8 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_supportedModes], v7 >= *(_QWORD *)(v8 + 16)))
  {

    return;
  }
  v9 = *(char *)(v8 + v7 + 32);
  v10 = sub_100027F2C();
  if ((v10 & 1) != 0)
  {
    sub_10000A8EC(v9);
    v12 = v11;
    v14 = v13;
    v16 = v15 & 1;
    v68 = v17 & 1;
    v10 = v13;
  }
  else
  {
    v12 = 0;
    v16 = 0;
    v14 = 0;
    v68 = 0;
  }
  v18 = Logger.purpleBuddyAppearance.unsafeMutableAddressor(v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v18, v1);
  v19 = v0;
  v20 = Logger.logObject.getter(v19);
  v21 = static os_log_type_t.debug.getter();
  v22 = os_log_type_enabled(v20, (os_log_type_t)v21);
  v69 = v16;
  v70 = v9;
  if (v22)
  {
    v64 = v21;
    v65 = v20;
    v66 = v12;
    v67 = v14;
    v23 = swift_slowAlloc(42, -1);
    v63 = swift_slowAlloc(96, -1);
    v73 = v63;
    *(_DWORD *)v23 = 136315906;
    v72 = sub_10002F320(0xD000000000000010, 0x800000010020C5E0, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v23 + 4, v23 + 12);
    *(_WORD *)(v23 + 12) = 2048;
    v72 = 272;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v23 + 14, v23 + 22);
    *(_WORD *)(v23 + 22) = 2080;
    v62 = v19;
    v24 = *(void **)&v19[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_appearanceModeProvider];
    if (v24)
    {
      v25 = (void *)objc_opt_self(DBSDisplayZoomConfigurationController);
      v26 = v24;
      v27 = objc_msgSend(v25, "defaultController");
      v28 = objc_msgSend(v27, "currentDisplayZoomMode");

      v29 = objc_msgSend(v28, "displayZoomOption");
      LOBYTE(v28) = objc_msgSend(*(id *)&v26[OBJC_IVAR____TtC5Setup22AppearanceModeProvider_homeScreenService], "isLargeIconLayoutEnabled");
      v30 = sub_10001A58C();
      v31 = _AXSEnhanceTextLegibilityEnabled();

      v32 = sub_100009390((uint64_t)v29, (char)v28, (uint64_t)v30, v31 != 0);
      v34 = v33;

    }
    else
    {
      v34 = 0xE800000000000000;
      v32 = 0x74657320746F6E20;
    }
    v72 = sub_10002F320(v32, v34, &v73);
    v61 = &v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v23 + 24, v23 + 32);
    swift_bridgeObjectRelease(v34);
    v19 = v62;

    *(_WORD *)(v23 + 32) = 2080;
    sub_10000A8EC(v70);
    v36 = v35;
    v38 = v37;
    v40 = v39;
    v42 = v41;
    v43 = sub_100009390(v36, v38 & 1, (uint64_t)v42, v40 & 1);
    v45 = v44;

    v72 = sub_10002F320(v43, v45, &v73);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, v61, v23 + 34, v23 + 42);
    swift_bridgeObjectRelease(v45);
    v46 = v65;
    _os_log_impl((void *)&_mh_execute_header, v65, (os_log_type_t)v64, "    %s: %ld\n    currentConfiguration: %s\n    sliderConfiguration: %s", (uint8_t *)v23, 0x2Au);
    v47 = v63;
    swift_arrayDestroy(v63, 3, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v47, -1, -1);
    swift_slowDealloc(v23, -1, -1);

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    v12 = v66;
    v14 = v67;
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }
  v48 = *(void **)&v19[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_analyticsEventAppearance];
  if (!v48)
  {
    __break(1u);
    goto LABEL_23;
  }
  v49 = v70;
  v50 = qword_10024CB80[v70];
  v51 = v48;
  v52 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v50);
  v53 = *(void **)&v19[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_flowItemDispositionProvider];
  if (!v53)
  {
LABEL_23:
    __break(1u);
    return;
  }
  objc_msgSend(v51, "didChooseAppearanceModeName:forDisposition:", v52, objc_msgSend(v53, "dispositions"));

  v54 = objc_msgSend((id)objc_opt_self(BYPreferencesController), "buddyPreferencesExcludedFromBackup");
  v55 = qword_10024CB80[v49];
  v56 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v55);
  v57 = String._bridgeToObjectiveC()();
  objc_msgSend(v54, "setObject:forKey:persistImmediately:", v56, v57, 1);

  sub_100028A00(v12, v69, v14, v68);
  if ((v58 & 1) != 0)
  {
    sub_1000269D0();
  }
  else
  {
    v59 = *(void **)&v19[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_delegate];
    if (v59)
      objc_msgSend(v59, "flowItemDone:", v19);
  }

}

uint64_t sub_100027F2C()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  float v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  char v9;
  unsigned __int8 v10;
  char v11;
  void *v12;
  uint64_t v14;
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  char v19;
  id v20;
  id v21;

  v1 = *(void **)(v0 + OBJC_IVAR____TtC5Setup25BuddyAppearanceController_appearanceModeProvider);
  if (!v1 || (v2 = *(void **)(v0 + OBJC_IVAR____TtC5Setup25BuddyAppearanceController_slider)) == 0)
  {
    v11 = 0;
    return v11 & 1;
  }
  v3 = v1;
  v4 = v2;
  objc_msgSend(v4, "value");
  v6 = (uint64_t)sub_10001EAA4(v5);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v7 = *(_QWORD *)(v0 + OBJC_IVAR____TtC5Setup25BuddyAppearanceController_supportedModes);
    if (v6 < *(_QWORD *)(v7 + 16))
    {
      v8 = *(unsigned __int8 *)(v7 + v6 + 32);
      sub_100009C10();
      if (v9 != 4)
      {
        v11 = 1;
        v12 = v4;
        v4 = v3;
        goto LABEL_9;
      }
      sub_100009C10();
      if (v10 == 4 || v8 != v10)
      {
        sub_10000A8EC(v8);
        v15 = v14;
        v17 = v16;
        v19 = v18;
        v21 = v20;
        v11 = sub_10000A1DC(v15, v17 & 1, v21, v19 & 1);

        v12 = v4;
        v4 = v21;
        goto LABEL_9;
      }
    }
  }
  v11 = 0;
  v12 = v3;
LABEL_9:

  return v11 & 1;
}

uint64_t sub_100028240(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = sub_10000A9E4(&qword_1002EA790);
  v6[5] = swift_task_alloc((*(_QWORD *)(*(_QWORD *)(v7 - 8) + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for MainActor(0);
  v6[6] = v8;
  v6[7] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  return swift_task_switch(sub_1000282D8, v9, v10);
}

uint64_t sub_1000282D8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;

  v2 = *(_QWORD *)(v0 + 32);
  v1 = *(_QWORD *)(v0 + 40);
  v3 = *(void **)(v0 + 16);
  v4 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 56));
  v5 = sub_10001309C();
  v6 = type metadata accessor for TaskPriority(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v1, 1, 1, v6);
  v7 = v5;
  swift_retain(v2);
  v8 = v3;
  v9 = static MainActor.shared.getter(v8);
  v10 = (_QWORD *)swift_allocObject(&unk_10027FF98, 64, 7);
  v10[2] = v9;
  v10[3] = &protocol witness table for MainActor;
  v10[4] = v8;
  v10[5] = v5;
  v10[6] = v4;
  v10[7] = v2;
  v11 = sub_100030934(v1, (uint64_t)&unk_1002EAE18, (uint64_t)v10);
  swift_release(v11);

  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000283C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  v8 = type metadata accessor for MainActor(0);
  v7[6] = static MainActor.shared.getter(v8);
  v9 = dispatch thunk of Actor.unownedExecutor.getter(v8, &protocol witness table for MainActor);
  return swift_task_switch(sub_100028430, v9, v10);
}

void *sub_100028430()
{
  uint64_t v0;
  uint64_t v1;
  void *result;
  void (*v3)(uint64_t);

  v1 = *(_QWORD *)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 48));
  result = *(void **)(v1 + OBJC_IVAR____TtC5Setup25BuddyAppearanceController_analyticsEventAppearance);
  if (result)
  {
    v3 = *(void (**)(uint64_t))(v0 + 32);
    objc_msgSend(result, "setChildAge:", *(_QWORD *)(v0 + 24));
    v3(1);
    return (void *)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_1000284EC()
{
  char *v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  objc_super v7;
  __int128 v8;
  uint64_t v9;
  _BYTE v10[24];
  __int128 v11;
  uint64_t v12;

  v1 = (uint64_t)&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_presentationDismissalObserver];
  swift_beginAccess(&v0[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_presentationDismissalObserver], v10, 0, 0);
  sub_100029A2C(v1, (uint64_t)&v8);
  if (v9)
  {
    sub_10000E2E8(&v8, &v11);
    v2 = objc_msgSend((id)objc_opt_self(NSNotificationCenter), "defaultCenter");
    v3 = v12;
    v4 = sub_100029A74(&v11, v12);
    v5 = _bridgeAnythingToObjectiveC<A>(_:)(v4, v3);
    objc_msgSend(v2, "removeObserver:", v5);
    swift_unknownObjectRelease(v5);

    sub_1000233CC(&v11);
  }
  else
  {
    sub_10000E230((uint64_t)&v8);
  }
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for BuddyAppearanceController();
  return objc_msgSendSuper2(&v7, "dealloc");
}

void sub_100028760(void *a1)
{
  char *v1;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  char v10;
  id v11;
  void *v12;
  id v13;
  NSString v14;
  id v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v21;
  void *v22;
  id v23;

  objc_msgSend(a1, "setHidden:", 0);
  objc_msgSend(*(id *)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_animationView], "setHidden:", 0);
  v3 = objc_msgSend(v1, "buttonTray");
  v4 = objc_msgSend(v3, "allButtons");

  v5 = sub_1000299F4(0, (unint64_t *)&unk_1002EADF0, OBTrayButton_ptr);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v4, v5);

  v7 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_revertButton;
  v8 = *(void **)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_revertButton];
  if (!v8)
  {
    __break(1u);
    goto LABEL_11;
  }
  v9 = v8;
  v10 = sub_1000241C8((uint64_t)v9, v6);
  swift_bridgeObjectRelease(v6);

  if ((v10 & 1) != 0)
  {
    v11 = objc_msgSend(v1, "buttonTray");
    if (*(_QWORD *)&v1[v7])
    {
      v12 = v11;
      objc_msgSend(v11, "removeButton:");

      goto LABEL_5;
    }
LABEL_11:
    __break(1u);
    return;
  }
LABEL_5:
  v13 = objc_msgSend(v1, "headerView");
  if (qword_1002E9D10 != -1)
    swift_once(&qword_1002E9D10, sub_100024860);
  v14 = String._bridgeToObjectiveC()();
  objc_msgSend(v13, "setDetailText:", v14);

  sub_100026E00((char *)a1);
  v15 = objc_msgSend(v1, "scrollView");
  v16 = objc_msgSend(v1, "buttonTray");
  objc_msgSend(v16, "frame");
  v18 = v17;
  v20 = v19;

  v21 = objc_msgSend(v1, "view");
  objc_msgSend(v15, "convertPoint:fromView:", v21, v18, v20);

  v22 = *(void **)&v1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_heightConstraint];
  if (v22)
  {
    v23 = v22;
    objc_msgSend(v1, "availableContentViewHeight");
    objc_msgSend(v23, "setConstant:");

  }
}

void sub_100028A00(id a1, char a2, void *a3, char a4)
{
  char *v4;
  void *v5;
  void *v10;
  char *v11;
  id v12;
  id v13;
  unsigned int v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  void *v23;
  id v24;
  id v25;
  Swift::String v26;
  Swift::String v27;
  void *object;
  NSString v29;
  void *v30;
  id v31;
  void *v32;
  id v33;
  id v34;
  void *v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  __CFString *v41;
  uint64_t v42;
  uint64_t v43;
  NSString v44;
  id v45;
  char v46;
  Swift::String v47;

  v5 = *(void **)&v4[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_appearanceModeProvider];
  if (v5 && a3)
  {
    v10 = (void *)objc_opt_self(UIDevice);
    v11 = v5;
    v12 = a3;
    v13 = objc_msgSend(v10, "currentDevice");
    v14 = objc_msgSend(v13, "sf_deviceSupportsDisplayZoom");

    if (!v14
      || (v15 = objc_msgSend((id)objc_opt_self(DBSDisplayZoomConfigurationController), "defaultController"), v16 = objc_msgSend(v15, "currentDisplayZoomMode"), v15, v17 = objc_msgSend(v16, "displayZoomOption"), v16, v17 == a1))
    {
      objc_msgSend(*(id *)&v11[OBJC_IVAR____TtC5Setup22AppearanceModeProvider_displayZoomExecutor], "setPendingOption:chosenByUser:", a1, 1);
      objc_msgSend(*(id *)&v11[OBJC_IVAR____TtC5Setup22AppearanceModeProvider_homeScreenService], "setLargeIconLayoutEnabled:", a2 & 1);
      sub_10001A660((uint64_t)v12);
LABEL_19:
      _AXSSetEnhanceTextLegibilityEnabled(a4 & 1);

      return;
    }
    v18 = objc_msgSend(v4, "view");
    if (v18)
    {
      v19 = v18;
      v45 = v12;
      v46 = a4;
      v20 = objc_msgSend(v18, "window");

      if (v20)
      {
        objc_msgSend(v20, "setUserInteractionEnabled:", 0);

      }
      v21 = OBJC_IVAR____TtC5Setup25BuddyAppearanceController_continueButton;
      v22 = *(void **)&v4[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_continueButton];
      if (v22)
      {
        v23 = (void *)objc_opt_self(NSBundle);
        v24 = v22;
        v25 = objc_msgSend(v23, "mainBundle");
        v47._object = (void *)0xE000000000000000;
        v26._object = (void *)0x800000010020C570;
        v26._countAndFlagsBits = 0xD000000000000012;
        v27._countAndFlagsBits = 0;
        v27._object = (void *)0xE000000000000000;
        v47._countAndFlagsBits = 0;
        object = NSLocalizedString(_:tableName:bundle:value:comment:)(v26, (Swift::String_optional)0, (NSBundle)v25, v27, v47)._object;

        v29 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease(object);
        objc_msgSend(v24, "setTitle:forState:", v29, 0);

        v30 = *(void **)&v4[v21];
        if (v30)
        {
          objc_msgSend(v30, "setEnabled:", 0);
          v31 = objc_msgSend(v4, "navigationController");
          v12 = v45;
          if (v31)
          {
            v32 = v31;
            v33 = objc_msgSend(v31, "navigationBar");
            v34 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
            objc_msgSend(v33, "setTintColor:", v34);

          }
          v35 = (void *)objc_opt_self(BuddyAccessibilityUtilities);
          v36 = objc_msgSend(v35, "accessibilityViewController");

          if (v36)
          {
            v37 = objc_msgSend(v35, "navigationBarButton");
            v38 = objc_msgSend((id)objc_opt_self(UIColor), "tertiaryLabelColor");
            objc_msgSend(v37, "setTintColor:", v38);

            v39 = objc_msgSend(v4, "navigationItem");
            v40 = objc_msgSend(v35, "navigationBarButtonItemWithButton:", v37);
            objc_msgSend(v39, "setRightBarButtonItem:", v40);

          }
          objc_msgSend(*(id *)&v11[OBJC_IVAR____TtC5Setup22AppearanceModeProvider_displayZoomExecutor], "setPendingOption:chosenByUser:", a1, 1);
          objc_msgSend(*(id *)&v11[OBJC_IVAR____TtC5Setup22AppearanceModeProvider_homeScreenService], "setLargeIconLayoutEnabled:", a2 & 1);
          v41 = (__CFString *)String._bridgeToObjectiveC()();
          static String._unconditionallyBridgeFromObjectiveC(_:)(a3);
          v43 = v42;
          v44 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease(v43);
          if (qword_1002E9D08 != -1)
            swift_once(&qword_1002E9D08, sub_10001A520);
          CFPreferencesSetAppValue(v41, v44, (CFStringRef)qword_1002EAA00);

          a4 = v46;
          goto LABEL_19;
        }
        goto LABEL_22;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_22:
    __break(1u);
  }
}

uint64_t type metadata accessor for BuddyAppearanceController()
{
  return objc_opt_self(_TtC5Setup25BuddyAppearanceController);
}

uint64_t type metadata accessor for BuddyAppearanceController.BuddyAppearanceAnimationView()
{
  return objc_opt_self(_TtCC5Setup25BuddyAppearanceControllerP33_6B82E87976C9B809FE5943B5C46331D528BuddyAppearanceAnimationView);
}

uint64_t sub_100028FA8(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100029018(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100028FC4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100029164(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100028FE0(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_1000292C0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100028FFC(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_100029428(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_100029018(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000A9E4(&qword_1002EAE28);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100029164(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000A9E4((uint64_t *)&unk_1002EAE30);
    v11 = (char *)swift_allocObject(v10, 8 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 25;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[8 * v8])
      memmove(v14, v15, 8 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[8 * v8] || v14 >= &v15[8 * v8])
  {
    memcpy(v14, v15, 8 * v8);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_1000292C0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000A9E4((uint64_t *)&unk_1002EAE40);
    v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 17;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8])
      memmove(v14, v15, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[16 * v8] || v14 >= &v15[16 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100029428(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000A9E4(&qword_1002EAC50);
    v11 = (char *)swift_allocObject(v10, 32 * v9 + 32, 7);
    v12 = j__malloc_size_0(v11);
    v13 = v12 - 32;
    if (v12 < 32)
      v13 = v12 - 1;
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v14 = v11 + 32;
  v15 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[32 * v8])
      memmove(v14, v15, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v15 >= &v14[32 * v8] || v14 >= &v15[32 * v8])
  {
    swift_arrayInitWithCopy(v14);
LABEL_30:
    swift_release(a4);
    return (uint64_t)v11;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_100029594()
{
  uint64_t v0;

  return swift_deallocObject(v0, 24, 7);
}

id sub_1000295B8()
{
  uint64_t v0;
  id result;

  result = *(id *)(*(_QWORD *)(v0 + 16) + OBJC_IVAR____TtC5Setup25BuddyAppearanceController_displayZoomExecutor);
  if (result)
    return objc_msgSend(result, "commitIfNeededWithRelaunchURL:transitionWithScreenshot:", 0, 1);
  return result;
}

uint64_t sub_1000295E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000295F4(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_1000295FC(char *a1, void (**a2)(_QWORD, _QWORD))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v4 = sub_10000A9E4(&qword_1002EA790);
  __chkstk_darwin(v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = swift_allocObject(&unk_10027FF48, 24, 7);
  *(_QWORD *)(result + 16) = a2;
  v8 = *(void **)&a1[OBJC_IVAR____TtC5Setup25BuddyAppearanceController_flowItemDispositionProvider];
  if (v8)
  {
    v9 = result;
    _Block_copy(a2);
    if ((objc_msgSend(v8, "dispositions") & 0x10) != 0)
    {
      v10 = type metadata accessor for TaskPriority(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 1, 1, v10);
      type metadata accessor for MainActor(0);
      v11 = a1;
      v12 = swift_retain(v9);
      v13 = static MainActor.shared.getter(v12);
      v14 = (_QWORD *)swift_allocObject(&unk_10027FF70, 56, 7);
      v14[2] = v13;
      v14[3] = &protocol witness table for MainActor;
      v14[4] = v11;
      v14[5] = sub_1000297A0;
      v14[6] = v9;
      v15 = sub_100030934((uint64_t)v6, (uint64_t)&unk_1002EAE08, (uint64_t)v14);
      swift_release(v15);
    }
    else
    {
      a2[2](a2, 1);
    }
    return swift_release(v9);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002977C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1000297A0(char a1)
{
  uint64_t v1;

  return sub_100030920(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1000297A8()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1000297DC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1002EAE04);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10002985C;
  return sub_100028240(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10002985C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000298A4()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 56));
  return swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1000298E0(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v9 = v1[6];
  v8 = v1[7];
  v10 = (_QWORD *)swift_task_alloc(dword_1002EAE14);
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = sub_100029A98;
  return sub_1000283C0(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_10002996C()
{
  uint64_t v0;

  swift_unknownObjectWeakDestroy(v0 + 16);
  return swift_deallocObject(v0, 24, 7);
}

void sub_100029990(uint64_t a1)
{
  uint64_t v1;

  sub_10002594C(a1, v1);
}

uint64_t sub_100029998(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A9E4((uint64_t *)&unk_1002EAC60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000299E0(uint64_t a1)
{
  uint64_t v1;

  return sub_100025B60(a1, *(_QWORD *)(v1 + 16));
}

void sub_1000299EC()
{
  uint64_t v0;

  sub_100025D3C(v0);
}

uint64_t sub_1000299F4(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_100029A2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A9E4((uint64_t *)&unk_1002EAC60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *sub_100029A74(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

unint64_t sub_100029AB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  unint64_t result;
  char v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A9E4(&qword_1002EAF18);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (void **)(a1 + 48);
  while (1)
  {
    v7 = (uint64_t)*(v6 - 2);
    v8 = (uint64_t)*(v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    v10 = v9;
    result = sub_10003259C(v7, v8);
    if ((v12 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v13 = (uint64_t *)(v4[6] + 16 * result);
    *v13 = v7;
    v13[1] = v8;
    *(_QWORD *)(v4[7] + 8 * result) = v10;
    v14 = v4[2];
    v15 = __OFADD__(v14, 1);
    v16 = v14 + 1;
    if (v15)
      goto LABEL_11;
    v4[2] = v16;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100029BD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;
  __int128 v18;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A9E4(&qword_1002EA418);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  v6 = v3 + 64;
  v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10002B7BC(v7, (uint64_t)v16);
    result = sub_100032600((uint64_t)v16);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v10 = v4[6] + 40 * result;
    v11 = v16[0];
    v12 = v16[1];
    *(_QWORD *)(v10 + 32) = v17;
    *(_OWORD *)v10 = v11;
    *(_OWORD *)(v10 + 16) = v12;
    result = (unint64_t)sub_10000E2E8(&v18, (_OWORD *)(v4[7] + 32 * result));
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4[2] = v15;
    v7 += 72;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100029CFC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  unint64_t result;
  char v11;
  uint64_t *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 16);
  if (!v2)
  {
    v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000A9E4(&qword_1002EAEA8);
  v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  v4 = (_QWORD *)v3;
  v5 = *(_QWORD *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }
  swift_retain(v3);
  v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v7 = *((_QWORD *)v6 - 2);
    v8 = *((_QWORD *)v6 - 1);
    v9 = *v6;
    swift_bridgeObjectRetain(v8);
    result = sub_10003259C(v7, v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v12 = (uint64_t *)(v4[6] + 16 * result);
    *v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    v13 = v4[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v6 += 24;
    v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t *sub_100029E14@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  BOOL v3;

  v2 = *result;
  v3 = (unint64_t)*result > 2;
  if ((unint64_t)*result > 2)
    v2 = 0;
  *(_QWORD *)a2 = v2;
  *(_BYTE *)(a2 + 8) = v3;
  return result;
}

BOOL sub_100029E30(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

Swift::Int sub_100029E48()
{
  Swift::UInt *v0;
  Swift::UInt v1;
  _QWORD v3[9];

  v1 = *v0;
  Hasher.init(_seed:)(v3, 0);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_100029E8C()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int sub_100029EB8(uint64_t a1)
{
  Swift::UInt *v1;
  Swift::UInt v2;
  _QWORD v4[9];

  v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

_QWORD *sub_100029EF8@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;

  v2 = *result != 1 && *result != 0;
  *(_QWORD *)a2 = *result == 1;
  *(_BYTE *)(a2 + 8) = v2;
  return result;
}

void sub_100029F28(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

id sub_100029F34()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;

  v1 = OBJC_IVAR____TtC5Setup19LockdownModeManager____lazy_storage___manager;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC5Setup19LockdownModeManager____lazy_storage___manager);
  if (v2)
  {
    v3 = *(id *)(v0 + OBJC_IVAR____TtC5Setup19LockdownModeManager____lazy_storage___manager);
  }
  else
  {
    v4 = v0;
    type metadata accessor for LockdownModeManager(0);
    v5 = (void *)static LockdownModeManager.shared.getter();
    v6 = *(void **)(v0 + v1);
    *(_QWORD *)(v4 + v1) = v5;
    v3 = v5;

    v2 = 0;
  }
  v7 = v2;
  return v3;
}

uint64_t sub_100029FB8(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4;
  id v5;

  v4 = a1;
  v5 = sub_100029F34();
  LODWORD(a3) = a3();

  return ~(_DWORD)a3 & 1;
}

void sub_10002A028(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v2 = sub_10000A9E4(&qword_1002EAF08);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = sub_100029F34();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v6 = *(unsigned __int8 *)(v3 + 80);
  v7 = (v6 + 16) & ~v6;
  v8 = swift_allocObject(&unk_100280240, v7 + v4, v6 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v8 + v7, (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  LockdownModeManager.getEnabledInAccount(synchronize:completion:)(1, sub_10002B77C, v8);
  swift_release(v8);

}

uint64_t sub_10002A230(const void *a1, void *a2)
{
  uint64_t v2;
  id v4;

  *(_QWORD *)(v2 + 16) = a2;
  *(_QWORD *)(v2 + 24) = _Block_copy(a1);
  v4 = a2;
  return swift_task_switch(sub_10002A278, 0, 0);
}

uint64_t sub_10002A278()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[2];
  v2 = swift_task_alloc(32);
  v0[4] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[5] = v3;
  *v3 = v0;
  v3[1] = sub_10002A310;
  return withCheckedContinuation<A>(isolation:function:_:)(v3, 0, 0, 0xD000000000000013, 0x800000010020C7F0, sub_10002B70C, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_10002A310()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc(*(_QWORD *)(*(_QWORD *)v0 + 40));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10002A36C, 0, 0);
}

uint64_t sub_10002A36C()
{
  uint64_t v0;
  void (**v1)(_QWORD);

  v1 = *(void (***)(_QWORD))(v0 + 24);

  v1[2](v1);
  _Block_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002A3B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 24) = a1;
  *(_QWORD *)(v2 + 32) = v1;
  return swift_task_switch(sub_10002A3C8, 0, 0);
}

uint64_t sub_10002A3C8()
{
  uint64_t v0;
  id v1;
  char v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v1 = sub_100029F34();
  v2 = LockdownModeManager.enabled.getter();

  if ((v2 & 1) == 0)
  {
    v3 = *(_QWORD *)(v0 + 24);
    if (v3 < 2)
    {
      v4 = *(_QWORD *)(v0 + 32);
      v5 = swift_task_alloc(32);
      *(_QWORD *)(v0 + 40) = v5;
      *(_QWORD *)(v5 + 16) = v3;
      *(_QWORD *)(v5 + 24) = v4;
      v6 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
      *(_QWORD *)(v0 + 48) = v6;
      *v6 = v0;
      v6[1] = sub_10002A4F4;
      return withCheckedThrowingContinuation<A>(isolation:function:_:)();
    }
    if (v3 != 2)
    {
      *(_QWORD *)(v0 + 16) = v3;
      return _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for LockdownModeEnableStrategy, v0 + 16, &type metadata for LockdownModeEnableStrategy, &type metadata for Int);
    }
    *(_BYTE *)(*(_QWORD *)(v0 + 32) + OBJC_IVAR____TtC5Setup19LockdownModeManager_hasStagedEnablement) = 1;
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002A4F4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 48);
  *(_QWORD *)(*v1 + 56) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10002A56C;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 40));
    v4 = sub_10002A560;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10002A560()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002A56C()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 40));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002A5A0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t inited;
  unint64_t v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _BYTE v17[80];
  unint64_t v18;

  v4 = sub_10000A9E4(&qword_1002EAEA0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  if (a2 >= 3)
  {
    v18 = a2;
    result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)(&type metadata for LockdownModeEnableStrategy, &v18, &type metadata for LockdownModeEnableStrategy, &type metadata for Int);
    __break(1u);
  }
  else
  {
    v7 = sub_10000A9E4(&qword_1002EAEB0);
    inited = swift_initStackObject(v7, v17);
    *(_OWORD *)(inited + 16) = xmmword_10024C800;
    *(_QWORD *)(inited + 32) = 0x746F6F626572;
    *(_QWORD *)(inited + 40) = 0xE600000000000000;
    *(_BYTE *)(inited + 48) = (a2 & 7) == 0;
    *(_QWORD *)(inited + 56) = 0xD000000000000015;
    *(_QWORD *)(inited + 64) = 0x800000010020C7D0;
    *(_BYTE *)(inited + 72) = 0;
    v9 = sub_100029CFC(inited);
    v10 = sub_100029F34();
    v11 = sub_10002A748(v9);
    swift_bridgeObjectRelease(v9);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], a1, v4);
    v12 = *(unsigned __int8 *)(v5 + 80);
    v13 = (v12 + 16) & ~v12;
    v14 = swift_allocObject(&unk_1002800B0, v13 + v6, v12 | 7);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v5 + 32))(v14 + v13, &v17[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], v4);
    LockdownModeManager.setEnabled(enabled:options:completion:)(1, v11, sub_10002B2AC, v14);
    swift_release(v14);

    return swift_bridgeObjectRelease(v11);
  }
  return result;
}

uint64_t sub_10002A748(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t result;
  int64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  BOOL v26;
  uint64_t v27;
  int64_t v28;
  uint64_t v29;
  char v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  _OWORD v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  _OWORD v38[2];
  _OWORD v39[3];

  v2 = *(_QWORD *)(a1 + 16);
  if (v2)
  {
    sub_10000A9E4(&qword_1002EA418);
    v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)(v2);
  }
  else
  {
    v3 = _swiftEmptyDictionarySingleton;
  }
  v29 = a1 + 64;
  v4 = -1 << *(_BYTE *)(a1 + 32);
  if (-v4 < 64)
    v5 = ~(-1 << -(char)v4);
  else
    v5 = -1;
  v6 = v5 & *(_QWORD *)(a1 + 64);
  v28 = (unint64_t)(63 - v4) >> 6;
  v7 = v3 + 8;
  swift_bridgeObjectRetain(a1);
  result = swift_retain(v3);
  v9 = 0;
  while (1)
  {
    if (v6)
    {
      v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }
    v14 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v14);
    v16 = v9 + 1;
    if (!v15)
    {
      v16 = v9 + 2;
      if (v9 + 2 >= v28)
        goto LABEL_37;
      v15 = *(_QWORD *)(v29 + 8 * v16);
      if (!v15)
      {
        v16 = v9 + 3;
        if (v9 + 3 >= v28)
          goto LABEL_37;
        v15 = *(_QWORD *)(v29 + 8 * v16);
        if (!v15)
        {
          v16 = v9 + 4;
          if (v9 + 4 >= v28)
            goto LABEL_37;
          v15 = *(_QWORD *)(v29 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_27:
    v6 = (v15 - 1) & v15;
    v13 = __clz(__rbit64(v15)) + (v16 << 6);
    v9 = v16;
LABEL_28:
    v18 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v13);
    v19 = v18[1];
    v20 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + v13);
    *(_QWORD *)&v39[0] = *v18;
    *((_QWORD *)&v39[0] + 1) = v19;
    swift_bridgeObjectRetain(v19);
    swift_dynamicCast(&v31, v39, &type metadata for String, &type metadata for AnyHashable, 7);
    v30 = v20;
    swift_dynamicCast(v34, &v30, &type metadata for Bool, (char *)&type metadata for Any + 8, 7);
    v35 = v31;
    v36 = v32;
    v37 = v33;
    sub_10000E2E8(v34, v38);
    v31 = v35;
    v32 = v36;
    v33 = v37;
    sub_10000E2E8(v38, v39);
    sub_10000E2E8(v39, &v35);
    result = AnyHashable._rawHashValue(seed:)(v3[5]);
    v21 = -1 << *((_BYTE *)v3 + 32);
    v22 = result & ~v21;
    v23 = v22 >> 6;
    if (((-1 << v22) & ~v7[v22 >> 6]) != 0)
    {
      v10 = __clz(__rbit64((-1 << v22) & ~v7[v22 >> 6])) | v22 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v24 = 0;
      v25 = (unint64_t)(63 - v21) >> 6;
      do
      {
        if (++v23 == v25 && (v24 & 1) != 0)
        {
          __break(1u);
          goto LABEL_38;
        }
        v26 = v23 == v25;
        if (v23 == v25)
          v23 = 0;
        v24 |= v26;
        v27 = v7[v23];
      }
      while (v27 == -1);
      v10 = __clz(__rbit64(~v27)) + (v23 << 6);
    }
    *(_QWORD *)((char *)v7 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    v11 = v3[6] + 40 * v10;
    *(_OWORD *)v11 = v31;
    *(_OWORD *)(v11 + 16) = v32;
    *(_QWORD *)(v11 + 32) = v33;
    result = (uint64_t)sub_10000E2E8(&v35, (_OWORD *)(v3[7] + 32 * v10));
    ++v3[2];
  }
  v17 = v9 + 5;
  if (v9 + 5 >= v28)
  {
LABEL_37:
    swift_release(v3);
    sub_10002B290(a1);
    return (uint64_t)v3;
  }
  v15 = *(_QWORD *)(v29 + 8 * v17);
  if (v15)
  {
    v16 = v9 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v28)
      goto LABEL_37;
    v15 = *(_QWORD *)(v29 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_27;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t sub_10002AC1C(uint64_t a1, void *aBlock, void *a3)
{
  _QWORD *v3;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  v3[2] = a3;
  v3[3] = _Block_copy(aBlock);
  v6 = dword_1002EAE94;
  v7 = a3;
  v8 = (_QWORD *)swift_task_alloc(v6);
  v3[4] = v8;
  *v8 = v3;
  v8[1] = sub_10002B8D4;
  v8[3] = a1;
  v8[4] = v7;
  return swift_task_switch(sub_10002A3C8, 0, 0);
}

uint64_t sub_10002ACA4()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = v0;
  return swift_task_switch(sub_10002ACBC, 0, 0);
}

uint64_t sub_10002ACBC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = v0[2];
  *(_BYTE *)(v1 + OBJC_IVAR____TtC5Setup19LockdownModeManager_hasStagedEnablement) = 0;
  v2 = swift_task_alloc(32);
  v0[3] = v2;
  *(_QWORD *)(v2 + 16) = v1;
  v3 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[4] = v3;
  *v3 = v0;
  v3[1] = sub_10002AD68;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

uint64_t sub_10002AD68()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)();

  v2 = *v1;
  v3 = *(_QWORD *)(*v1 + 32);
  *(_QWORD *)(*v1 + 40) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    v4 = sub_10002ADE0;
  }
  else
  {
    swift_task_dealloc(*(_QWORD *)(v2 + 24));
    v4 = sub_10002ADD4;
  }
  return swift_task_switch(v4, 0, 0);
}

uint64_t sub_10002ADD4()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002ADE0()
{
  uint64_t v0;

  swift_task_dealloc(*(_QWORD *)(v0 + 24));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002AE14(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v2 = sub_10000A9E4(&qword_1002EAEA0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(_QWORD *)(v3 + 64);
  __chkstk_darwin(v2);
  v5 = sub_100029CFC((uint64_t)&off_10027EC00);
  v6 = sub_100029F34();
  v7 = sub_10002A748(v5);
  swift_bridgeObjectRelease(v5);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))((char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v2);
  v8 = *(unsigned __int8 *)(v3 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_100280088, v9 + v4, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v3 + 32))(v10 + v9, (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  LockdownModeManager.setEnabled(enabled:options:completion:)(0, v7, sub_10002B28C, v10);
  swift_release(v10);

  return swift_bridgeObjectRelease(v7);
}

uint64_t sub_10002AF30(void *a1)
{
  id v1;
  uint64_t v2;
  uint64_t v4;
  void *v5;

  if (a1)
  {
    v5 = a1;
    v1 = a1;
    v2 = sub_10000A9E4(&qword_1002EAEA0);
    return CheckedContinuation.resume(throwing:)(&v5, v2);
  }
  else
  {
    v4 = sub_10000A9E4(&qword_1002EAEA0);
    return CheckedContinuation.resume(returning:)(v4, v4);
  }
}

uint64_t sub_10002B0AC(const void *a1, void *a2)
{
  _QWORD *v2;
  uint64_t v4;
  id v5;
  _QWORD *v6;

  v2[2] = a2;
  v2[3] = _Block_copy(a1);
  v4 = dword_1002EAE9C;
  v5 = a2;
  v6 = (_QWORD *)swift_task_alloc(v4);
  v2[4] = v6;
  *v6 = v2;
  v6[1] = sub_10002B124;
  v6[2] = v5;
  return swift_task_switch(sub_10002ACBC, 0, 0);
}

uint64_t sub_10002B124()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v2 = *(_QWORD *)(*v1 + 32);
  v3 = *(void **)(*v1 + 16);
  v4 = *v1;
  swift_task_dealloc(v2);

  v5 = *(_QWORD *)(v4 + 24);
  if (v0)
  {
    v6 = (void *)_convertErrorToNSError(_:)(v0);
    swift_errorRelease(v0);
    (*(void (**)(uint64_t, void *))(v5 + 16))(v5, v6);

  }
  else
  {
    (*(void (**)(_QWORD, _QWORD))(v5 + 16))(*(_QWORD *)(v4 + 24), 0);
  }
  _Block_release(*(const void **)(v4 + 24));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

id sub_10002B218()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for LockdownModeManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for LockdownModeManager()
{
  return objc_opt_self(_TtC5Setup19LockdownModeManager);
}

uint64_t sub_10002B278(uint64_t a1)
{
  return sub_10002AE14(a1);
}

uint64_t sub_10002B280()
{
  return sub_10002B720(&qword_1002EAEA0);
}

uint64_t sub_10002B290(uint64_t a1)
{
  return swift_release(a1 & 0x7FFFFFFFFFFFFFFFLL);
}

uint64_t sub_10002B298(uint64_t a1)
{
  uint64_t v1;

  return sub_10002A5A0(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_10002B2A0()
{
  return sub_10002B720(&qword_1002EAEA0);
}

uint64_t sub_10002B2B0(void *a1)
{
  sub_10000A9E4(&qword_1002EAEA0);
  return sub_10002AF30(a1);
}

uint64_t sub_10002B2F8()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1002EAEBC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10002B35C;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1002EAEB8 + dword_1002EAEB8))(v2, v3);
}

uint64_t sub_10002B35C()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10002B3AC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));

  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_10002B3D8()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = (void *)v0[3];
  v4 = (void *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1002EAECC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10002B8B8;
  return ((uint64_t (*)(uint64_t, void *, void *))((char *)&dword_1002EAEC8 + dword_1002EAEC8))(v2, v3, v4);
}

uint64_t sub_10002B448()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1002EB0FC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10002B8BC;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1002EB0F8 + dword_1002EB0F8))(v2, v3, v4);
}

uint64_t sub_10002B4C4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1002EB10C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10002B8C0;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1002EB108 + dword_1002EB108))(a1, v4, v5, v6);
}

uint64_t sub_10002B54C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10002B578()
{
  uint64_t v0;
  uint64_t v1;
  const void *v2;
  void *v3;
  _QWORD *v4;

  v2 = *(const void **)(v0 + 16);
  v3 = *(void **)(v0 + 24);
  v4 = (_QWORD *)swift_task_alloc(dword_1002EAEEC);
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = sub_10002B8C4;
  return ((uint64_t (*)(const void *, void *))((char *)&dword_1002EAEE8 + dword_1002EAEE8))(v2, v3);
}

uint64_t sub_10002B5E0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1002EB0FC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_10002B8C8;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1002EB0F8 + dword_1002EB0F8))(v2, v3, v4);
}

uint64_t sub_10002B65C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10002B688(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1002EB10C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_10002B8CC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1002EB108 + dword_1002EB108))(a1, v4, v5, v6);
}

void sub_10002B70C(uint64_t a1)
{
  sub_10002A028(a1);
}

uint64_t sub_10002B714()
{
  return sub_10002B720(&qword_1002EAF08);
}

uint64_t sub_10002B720(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = sub_10000A9E4(a1);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = *(unsigned __int8 *)(v3 + 80);
  v5 = (v4 + 16) & ~v4;
  v6 = v5 + *(_QWORD *)(v3 + 64);
  v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);
  return swift_deallocObject(v1, v6, v7);
}

uint64_t sub_10002B77C()
{
  uint64_t v0;

  v0 = sub_10000A9E4(&qword_1002EAF08);
  return CheckedContinuation.resume(returning:)(v0, v0);
}

uint64_t sub_10002B7BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A9E4(&qword_1002EAF10);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for LockdownModeState()
{
  return &type metadata for LockdownModeState;
}

ValueMetadata *type metadata accessor for LockdownModeEnableStrategy()
{
  return &type metadata for LockdownModeEnableStrategy;
}

unint64_t sub_10002B828()
{
  unint64_t result;

  result = qword_1002EAF20;
  if (!qword_1002EAF20)
  {
    result = swift_getWitnessTable(&unk_10024CC74, &type metadata for LockdownModeEnableStrategy);
    atomic_store(result, (unint64_t *)&qword_1002EAF20);
  }
  return result;
}

unint64_t sub_10002B870()
{
  unint64_t result;

  result = qword_1002EAF28;
  if (!qword_1002EAF28)
  {
    result = swift_getWitnessTable(&unk_10024CD14, &type metadata for LockdownModeState);
    atomic_store(result, (unint64_t *)&qword_1002EAF28);
  }
  return result;
}

void sub_10002B8DC()
{
  id v0;
  NSString v1;
  id v2;

  v0 = objc_allocWithZone((Class)NSUserDefaults);
  v1 = String._bridgeToObjectiveC()();
  v2 = objc_msgSend(v0, "initWithSuiteName:", v1);

  if (v2)
    qword_1002EED58 = (uint64_t)v2;
  else
    __break(1u);
}

id sub_10002B950(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v4 = *(uint64_t (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v6 = swift_unknownObjectRetain(a2, v5);
  v7 = (void *)v4(v6);
  swift_release(v3);
  swift_unknownObjectRelease(a2);
  return v7;
}

id sub_10002B9A4(uint64_t a1, uint64_t a2)
{
  return (id)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, a1);
}

uint64_t sub_10002B9CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void (*v4)(uint64_t);

  v4 = *(void (**)(uint64_t))(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

id sub_10002BA08(void *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, uint64_t, uint64_t, uint64_t);
  void *v14;
  uint64_t v15;
  objc_class *v16;
  id v17;
  id v18;
  _QWORD v20[5];
  uint64_t v21;
  objc_super v22;

  v11 = &v5[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_passcodeFlowContinuation];
  v12 = type metadata accessor for BuddyChildSetupFlow.FlowContinuation(0);
  v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56);
  v13(v11, 1, 1, v12);
  v13(&v5[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_locationServicesFlowContinuation], 1, 1, v12);
  *(_QWORD *)&v5[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_managedConfiguration] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_featureFlags] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_runState] = 0;
  *(_QWORD *)&v5[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_childSetupPresenter] = 0;
  if (a4)
  {
    v20[4] = a4;
    v21 = a5;
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 1107296256;
    v20[2] = sub_10002B950;
    v20[3] = &unk_1002805E0;
    v14 = _Block_copy(v20);
    v15 = v21;
    swift_retain(a5);
    swift_release(v15);
  }
  else
  {
    v14 = 0;
  }
  v16 = (objc_class *)type metadata accessor for BuddyChildSetupFlow(0);
  v22.receiver = v5;
  v22.super_class = v16;
  v17 = objc_msgSendSuper2(&v22, "initWithNavigationController:flowDelegate:flowStarter:dependencyInjector:", a1, a2, a3, v14);
  sub_100013044(a4, a5);

  swift_unknownObjectRelease(a2);
  v18 = v17;
  _Block_release(v14);
  if (v18)

  return v18;
}

uint64_t sub_10002BCD8(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + *a4);
  *(_QWORD *)(a1 + *a4) = a3;
  swift_unknownObjectRetain(a3, a2);
  return swift_unknownObjectRelease(v4);
}

id sub_10002BE98(uint64_t a1, uint64_t a2)
{
  char *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  objc_class *v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _BYTE v50[24];
  objc_super v51;
  _BYTE v52[24];
  _BYTE v53[24];

  v49 = a2;
  v4 = type metadata accessor for BuddyChildSetupFlow.FlowContinuation(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v45 = (uint64_t)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)&v43 - v9;
  __chkstk_darwin(v8);
  v12 = (uint64_t *)((char *)&v43 - v11);
  v13 = sub_10000A9E4(&qword_1002EB0D8);
  v14 = __chkstk_darwin(v13);
  v46 = (uint64_t)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __chkstk_darwin(v14);
  v18 = (char *)&v43 - v17;
  v19 = __chkstk_darwin(v16);
  v47 = (char *)&v43 - v20;
  v21 = __chkstk_darwin(v19);
  v23 = (char *)&v43 - v22;
  __chkstk_darwin(v21);
  v25 = (char *)&v43 - v24;
  v26 = (uint64_t)&v2[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_passcodeFlowContinuation];
  swift_beginAccess(&v2[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_passcodeFlowContinuation], v53, 0, 0);
  sub_10003074C(v26, (uint64_t)v25);
  v48 = v5;
  v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48);
  if (v27(v25, 1, v4))
  {
    v28 = a1;
    sub_100030794((uint64_t)v25, &qword_1002EB0D8);
  }
  else
  {
    v44 = v10;
    sub_1000307D0((uint64_t)v25, (uint64_t)v12);
    sub_100030794((uint64_t)v25, &qword_1002EB0D8);
    v29 = *v12;
    swift_unknownObjectRetain(*v12, v30);
    sub_100030814((uint64_t)v12);
    swift_unknownObjectRelease(v29);
    v28 = a1;
    if (v29 == a1)
    {
      sub_10003074C(v26, (uint64_t)v23);
      if (v27(v23, 1, v4) == 1)
        return (id)sub_100030794((uint64_t)v23, &qword_1002EB0D8);
      v37 = (uint64_t)v44;
      sub_100030850((uint64_t)v23, (uint64_t)v44);
      v38 = sub_10000A9E4(&qword_1002EAF08);
      CheckedContinuation.resume(returning:)(v38, v38);
      v39 = (uint64_t)v47;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v47, 1, 1, v4);
      swift_beginAccess(v26, v52, 33, 0);
      sub_10002FB74(v39, v26);
      v40 = v52;
      goto LABEL_15;
    }
  }
  v31 = (uint64_t)&v2[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_locationServicesFlowContinuation];
  swift_beginAccess(&v2[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_locationServicesFlowContinuation], v52, 0, 0);
  sub_10003074C(v31, (uint64_t)v18);
  if (!v27(v18, 1, v4))
  {
    sub_1000307D0((uint64_t)v18, (uint64_t)v12);
    sub_100030794((uint64_t)v18, &qword_1002EB0D8);
    v32 = *v12;
    swift_unknownObjectRetain(*v12, v33);
    sub_100030814((uint64_t)v12);
    swift_unknownObjectRelease(v32);
    if (v32 != v28)
      goto LABEL_7;
    v36 = v46;
    sub_10003074C(v31, v46);
    if (v27((char *)v36, 1, v4) == 1)
      return (id)sub_100030794(v36, &qword_1002EB0D8);
    v37 = v45;
    sub_100030850(v36, v45);
    v41 = sub_10000A9E4(&qword_1002EAF08);
    CheckedContinuation.resume(returning:)(v41, v41);
    v42 = (uint64_t)v47;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v48 + 56))(v47, 1, 1, v4);
    swift_beginAccess(v31, v50, 33, 0);
    sub_10002FB74(v42, v31);
    v40 = v50;
LABEL_15:
    swift_endAccess(v40);
    return (id)sub_100030814(v37);
  }
  sub_100030794((uint64_t)v18, &qword_1002EB0D8);
LABEL_7:
  v34 = (objc_class *)type metadata accessor for BuddyChildSetupFlow(0);
  v51.receiver = v2;
  v51.super_class = v34;
  return objc_msgSendSuper2(&v51, "flowItemDone:nextItem:", v28, v49);
}

uint64_t sub_10002C454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[5] = v4;
  v3[6] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  return swift_task_switch(sub_10002C4C8, v5, v6);
}

uint64_t sub_10002C4C8()
{
  _QWORD *v0;
  const void *v1;
  void *v2;
  void *v3;
  id v4;
  _QWORD *v5;

  v1 = (const void *)v0[3];
  v2 = (void *)v0[4];
  v3 = (void *)v0[2];
  swift_release(v0[6]);
  v0[7] = _Block_copy(v1);
  v4 = v3;
  v0[8] = static MainActor.shared.getter(v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1002EAFCC);
  v0[9] = v5;
  *v5 = v0;
  v5[1] = sub_10002C544;
  return sub_10002C628();
}

uint64_t sub_10002C544(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_BYTE *)(*(_QWORD *)v1 + 80) = a1;
  swift_task_dealloc(v2);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(sub_10002C5BC, v4, v5);
}

uint64_t sub_10002C5BC()
{
  uint64_t v0;
  uint64_t v1;
  void (**v2)(_QWORD, _QWORD);
  void *v3;
  void *v4;

  v1 = *(unsigned __int8 *)(v0 + 80);
  v2 = *(void (***)(_QWORD, _QWORD))(v0 + 56);
  v3 = *(void **)(v0 + 32);
  v4 = *(void **)(v0 + 16);
  swift_release(*(_QWORD *)(v0 + 64));
  sub_10002D3D4(v4);

  v2[2](v2, v1);
  _Block_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10002C628()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1[2] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[5] = swift_task_alloc(v4);
  v1[6] = swift_task_alloc(v4);
  v5 = type metadata accessor for MainActor(0);
  v1[7] = v5;
  v1[8] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v1[9] = v6;
  v1[10] = v7;
  return swift_task_switch(sub_10002C6D0, v6, v7);
}

void *sub_10002C6D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  id v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *result;
  id v24;
  uint64_t v25;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(a1);
  *(_QWORD *)(v1 + 88) = v5;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v1 + 96) = v6;
  v7 = v6(v2, v5, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Presenting passcode pane...", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }
  v11 = *(_QWORD *)(v1 + 48);
  v12 = *(_QWORD *)(v1 + 24);
  v13 = *(_QWORD *)(v1 + 32);
  v14 = *(void **)(v1 + 16);

  v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(_QWORD *)(v1 + 104) = v15;
  v15(v11, v12);
  v16 = sub_10002FBBC(0, &qword_1002EB0E0, off_10027D458);
  v17 = objc_msgSend(v14, "createConditionalFlowItemForClass:", swift_getObjCClassFromMetadata(v16));
  *(_QWORD *)(v1 + 112) = v17;
  v18 = *(_QWORD *)(v1 + 16);
  if (v17)
  {
    v19 = v17;
    v20 = static MainActor.shared.getter(v17);
    *(_QWORD *)(v1 + 120) = v20;
    v21 = swift_task_alloc(32);
    *(_QWORD *)(v1 + 128) = v21;
    *(_QWORD *)(v21 + 16) = v18;
    *(_QWORD *)(v21 + 24) = v19;
    v22 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v1 + 136) = v22;
    *v22 = v1;
    v22[1] = sub_10002C8E8;
    return (void *)withCheckedContinuation<A>(isolation:function:_:)(v22, v20, &protocol witness table for MainActor, 0x7361507075746573, 0xEF292865646F6373, sub_10002FBF4, v21, (char *)&type metadata for () + 8);
  }
  else
  {
    swift_release(*(_QWORD *)(v1 + 64));
    result = *(void **)(v18 + OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_managedConfiguration);
    if (result)
    {
      v24 = objc_msgSend(result, "isPasscodeSet");
      v25 = *(_QWORD *)(v1 + 40);
      swift_task_dealloc(*(_QWORD *)(v1 + 48));
      swift_task_dealloc(v25);
      return (void *)(*(uint64_t (**)(id))(v1 + 8))(v24);
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10002C8E8()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 128);
  v3 = *(_QWORD *)(*v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*v0 + 136));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10002C950, *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
}

void *sub_10002C950()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  void (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  uint64_t v14;
  id v15;
  uint64_t v16;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 96);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 64));
  v5 = v2(v3, v1, v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Passcode pane completed", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }
  v9 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
  v10 = *(_QWORD *)(v0 + 40);
  v12 = *(_QWORD *)(v0 + 16);
  v11 = *(_QWORD *)(v0 + 24);

  v9(v10, v11);
  result = *(void **)(v12 + OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_managedConfiguration);
  if (result)
  {
    v14 = *(_QWORD *)(v0 + 112);
    v15 = objc_msgSend(result, "isPasscodeSet");
    swift_unknownObjectRelease(v14);
    v16 = *(_QWORD *)(v0 + 40);
    swift_task_dealloc(*(_QWORD *)(v0 + 48));
    swift_task_dealloc(v16);
    return (void *)(*(uint64_t (**)(id))(v0 + 8))(v15);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002CBA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[5] = v4;
  v3[6] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  return swift_task_switch(sub_10002CC1C, v5, v6);
}

uint64_t sub_10002CC1C()
{
  _QWORD *v0;
  const void *v1;
  void *v2;
  void *v3;
  id v4;
  _QWORD *v5;

  v1 = (const void *)v0[3];
  v2 = (void *)v0[4];
  v3 = (void *)v0[2];
  swift_release(v0[6]);
  v0[7] = _Block_copy(v1);
  v4 = v3;
  v0[8] = static MainActor.shared.getter(v2);
  v5 = (_QWORD *)swift_task_alloc(dword_1002EAFD4);
  v0[9] = v5;
  *v5 = v0;
  v5[1] = sub_10002CC98;
  return sub_10002CD10();
}

uint64_t sub_10002CC98(char a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(*(_QWORD *)v1 + 72);
  v3 = *(_QWORD *)(*(_QWORD *)v1 + 40);
  *(_BYTE *)(*(_QWORD *)v1 + 80) = a1;
  swift_task_dealloc(v2);
  v4 = dispatch thunk of Actor.unownedExecutor.getter(v3, &protocol witness table for MainActor);
  return swift_task_switch(sub_10003091C, v4, v5);
}

uint64_t sub_10002CD10()
{
  uint64_t v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v1[2] = v0;
  v2 = type metadata accessor for Logger(0);
  v1[3] = v2;
  v3 = *(_QWORD *)(v2 - 8);
  v1[4] = v3;
  v4 = (*(_QWORD *)(v3 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v1[5] = swift_task_alloc(v4);
  v1[6] = swift_task_alloc(v4);
  v5 = type metadata accessor for MainActor(0);
  v1[7] = v5;
  v1[8] = static MainActor.shared.getter(v5);
  v6 = dispatch thunk of Actor.unownedExecutor.getter(v5, &protocol witness table for MainActor);
  v1[9] = v6;
  v1[10] = v7;
  return swift_task_switch(sub_10002CDB8, v6, v7);
}

uint64_t sub_10002CDB8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void (*v15)(uint64_t, uint64_t);
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  id v24;
  uint64_t v25;

  v2 = *(_QWORD *)(v1 + 48);
  v3 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  v5 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(a1);
  *(_QWORD *)(v1 + 88) = v5;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(_QWORD *)(v1 + 96) = v6;
  v7 = v6(v2, v5, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Presenting Location Services pane...", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }
  v11 = *(_QWORD *)(v1 + 48);
  v12 = *(_QWORD *)(v1 + 24);
  v13 = *(_QWORD *)(v1 + 32);
  v14 = *(void **)(v1 + 16);

  v15 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  *(_QWORD *)(v1 + 104) = v15;
  v15(v11, v12);
  v16 = sub_10002FBBC(0, &qword_1002EB0D0, off_10027D2D8);
  v17 = objc_msgSend(v14, "createConditionalFlowItemForClass:", swift_getObjCClassFromMetadata(v16));
  *(_QWORD *)(v1 + 112) = v17;
  if (v17)
  {
    v18 = v17;
    v19 = *(_QWORD *)(v1 + 16);
    v20 = static MainActor.shared.getter(v17);
    *(_QWORD *)(v1 + 120) = v20;
    v21 = swift_task_alloc(32);
    *(_QWORD *)(v1 + 128) = v21;
    *(_QWORD *)(v21 + 16) = v19;
    *(_QWORD *)(v21 + 24) = v18;
    v22 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(_QWORD *)(v1 + 136) = v22;
    *v22 = v1;
    v22[1] = sub_10002CFC0;
    return withCheckedContinuation<A>(isolation:function:_:)(v22, v20, &protocol witness table for MainActor, 0xD000000000000017, 0x800000010020CB10, sub_10002FB34, v21, (char *)&type metadata for () + 8);
  }
  else
  {
    swift_release(*(_QWORD *)(v1 + 64));
    v24 = objc_msgSend((id)objc_opt_self(CLLocationManager), "locationServicesEnabled");
    v25 = *(_QWORD *)(v1 + 40);
    swift_task_dealloc(*(_QWORD *)(v1 + 48));
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(id))(v1 + 8))(v24);
  }
}

uint64_t sub_10002CFC0()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 128);
  v3 = *(_QWORD *)(*v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*v0 + 136));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10002D028, *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 80));
}

uint64_t sub_10002D028()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 96);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = *(_QWORD *)(v0 + 24);
  swift_release(*(_QWORD *)(v0 + 64));
  v5 = v2(v3, v1, v4);
  v6 = Logger.logObject.getter(v5);
  v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Location Services completed", v8, 2u);
    swift_slowDealloc(v8, -1, -1);
  }
  v10 = *(void (**)(uint64_t, uint64_t))(v0 + 104);
  v9 = *(_QWORD *)(v0 + 112);
  v11 = *(_QWORD *)(v0 + 40);
  v12 = *(_QWORD *)(v0 + 24);

  v10(v11, v12);
  v13 = objc_msgSend((id)objc_opt_self(CLLocationManager), "locationServicesEnabled");
  swift_unknownObjectRelease(v9);
  v14 = *(_QWORD *)(v0 + 40);
  swift_task_dealloc(*(_QWORD *)(v0 + 48));
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(id))(v0 + 8))(v13);
}

void sub_10002D144(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  _QWORD aBlock[5];
  uint64_t v23;

  v12 = sub_10000A9E4(&qword_1002EAF08);
  v13 = *(_QWORD *)(v12 - 8);
  v14 = *(_QWORD *)(v13 + 64);
  __chkstk_darwin(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v12);
  v15 = *(unsigned __int8 *)(v13 + 80);
  v16 = (v15 + 32) & ~v15;
  v17 = swift_allocObject(a4, v16 + v14, v15 | 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v17 + v16, (char *)aBlock - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  aBlock[4] = a5;
  v23 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002B9CC;
  aBlock[3] = a6;
  v18 = _Block_copy(aBlock);
  v19 = v23;
  v20 = a2;
  swift_unknownObjectRetain(a3, v21);
  swift_release(v19);
  objc_msgSend(v20, "pushFlowItem:inFlow:withExtendedInitialization:animated:willPushFlowItem:", a3, v20, 1, 1, v18);
  _Block_release(v18);
}

uint64_t sub_10002D2A0(char a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  _BYTE v21[24];

  v10 = sub_10000A9E4(&qword_1002EB0D8);
  __chkstk_darwin(v10);
  v12 = &v21[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if ((a1 & 1) != 0)
  {
    v13 = type metadata accessor for BuddyChildSetupFlow.FlowContinuation(0);
    v14 = (char *)v12 + *(int *)(v13 + 20);
    v15 = sub_10000A9E4(&qword_1002EAF08);
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v14, a4, v15);
    *v12 = a3;
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 0, 1, v13);
    v16 = a2 + *a5;
    swift_beginAccess(v16, v21, 33, 0);
    swift_unknownObjectRetain(a3, v17);
    sub_10002FB74((uint64_t)v12, v16);
    return swift_endAccess(v21);
  }
  else
  {
    v19 = sub_10000A9E4(&qword_1002EAF08);
    return CheckedContinuation.resume(returning:)(v19, v19);
  }
}

void sub_10002D3D4(void *a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  void *v18;
  id v19;
  id v20;
  void *v21;
  uint64_t ObjectType;
  objc_class *ObjCClassFromMetadata;
  NSString *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;

  v2 = v1;
  v4 = sub_10000A9E4(&qword_1002EA790);
  __chkstk_darwin(v4);
  v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Logger(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = __chkstk_darwin(v7);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v9);
  v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v12, v7);
  v14 = Logger.logObject.getter(v13);
  v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Starting spinner for next child setup task", v16, 2u);
    swift_slowDealloc(v16, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  v17 = objc_msgSend(v2, "navigationController");
  if (!v17)
  {
    __break(1u);
    goto LABEL_8;
  }
  v18 = v17;
  v19 = objc_msgSend(v17, "topViewController");

  if (!v19)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v20 = objc_msgSend(v19, "view");
  if (v20)
  {
    v21 = v20;
    objc_msgSend(v20, "setUserInteractionEnabled:", 0);

    type metadata accessor for ViewControllerSpinnerManager(0);
    ObjectType = swift_getObjectType(v2);
    ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(ObjectType);
    v24 = NSStringFromClass(ObjCClassFromMetadata);
    v25 = static String._unconditionallyBridgeFromObjectiveC(_:)(v24);
    v27 = v26;

    static ViewControllerSpinnerManager.startAnimatingSpinner(for:identifier:)(v19, v25, v27);
    swift_bridgeObjectRelease(v27);
    v28 = type metadata accessor for TaskPriority(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v6, 1, 1, v28);
    type metadata accessor for MainActor(0);
    v29 = a1;
    v30 = v2;
    v31 = v19;
    v32 = static MainActor.shared.getter(v31);
    v33 = (_QWORD *)swift_allocObject(&unk_100280358, 56, 7);
    v33[2] = v32;
    v33[3] = &protocol witness table for MainActor;
    v33[4] = v29;
    v33[5] = v30;
    v33[6] = v31;
    v34 = sub_100030934((uint64_t)v6, (uint64_t)&unk_1002EB0C8, (uint64_t)v33);

    swift_release(v34);
    return;
  }
LABEL_9:
  __break(1u);
}

uint64_t sub_10002D688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v6[16] = a5;
  v6[17] = a6;
  v6[15] = a4;
  v7 = type metadata accessor for Logger(0);
  v6[18] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[19] = v8;
  v9 = (*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v6[20] = swift_task_alloc(v9);
  v6[21] = swift_task_alloc(v9);
  v10 = type metadata accessor for MainActor(0);
  v6[22] = static MainActor.shared.getter(v10);
  v11 = dispatch thunk of Actor.unownedExecutor.getter(v10, &protocol witness table for MainActor);
  v6[23] = v11;
  v6[24] = v12;
  return swift_task_switch(sub_10002D730, v11, v12);
}

uint64_t sub_10002D730(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void (*v16)(uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;

  v2 = v1[21];
  v3 = v1[18];
  v4 = v1[19];
  v5 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(a1);
  v1[25] = v5;
  v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v1[26] = v6;
  v7 = v6(v2, v5, v3);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Will wait for next child setup task", v10, 2u);
    swift_slowDealloc(v10, -1, -1);
  }
  v11 = v1 + 2;
  v12 = v1[21];
  v13 = v1[18];
  v14 = v1[19];
  v15 = (void *)v1[15];

  v16 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v1[27] = v16;
  v16(v12, v13);
  v1[2] = v1;
  v1[3] = sub_10002D87C;
  v17 = swift_continuation_init(v1 + 2, 0);
  v1[10] = _NSConcreteStackBlock;
  v18 = v1 + 10;
  v18[1] = 0x40000000;
  v18[2] = sub_10002DA40;
  v18[3] = &unk_100280370;
  v18[4] = v17;
  objc_msgSend(v15, "waitUntilLoadedWithCompletion:", v18);
  return swift_continuation_await(v11);
}

uint64_t sub_10002D87C()
{
  uint64_t v0;

  return swift_task_switch(sub_10002D8C0, *(_QWORD *)(*(_QWORD *)v0 + 184), *(_QWORD *)(*(_QWORD *)v0 + 192));
}

id sub_10002D8C0()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t ObjectType;
  objc_class *ObjCClassFromMetadata;
  NSString *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id result;
  void *v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)(v0 + 128);
  v1 = *(void **)(v0 + 136);
  swift_release(*(_QWORD *)(v0 + 176));
  type metadata accessor for ViewControllerSpinnerManager(0);
  ObjectType = swift_getObjectType(v2);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata(ObjectType);
  v5 = NSStringFromClass(ObjCClassFromMetadata);
  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  v8 = v7;

  static ViewControllerSpinnerManager.stopAnimatingSpinner(for:)(v6, v8);
  swift_bridgeObjectRelease(v8);
  result = objc_msgSend(v1, "view");
  if (result)
  {
    v10 = result;
    v11 = *(_QWORD *)(v0 + 200);
    v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 208);
    v13 = *(_QWORD *)(v0 + 160);
    v14 = *(_QWORD *)(v0 + 144);
    objc_msgSend(result, "setUserInteractionEnabled:", 1);

    v15 = v12(v13, v11, v14);
    v16 = Logger.logObject.getter(v15);
    v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Did finish waiting for next child setup task", v18, 2u);
      swift_slowDealloc(v18, -1, -1);
    }
    v19 = *(void (**)(uint64_t, uint64_t))(v0 + 216);
    v21 = *(_QWORD *)(v0 + 160);
    v20 = *(_QWORD *)(v0 + 168);
    v22 = *(_QWORD *)(v0 + 144);

    v19(v21, v22);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (id)(*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10002DA40(uint64_t a1)
{
  return swift_continuation_resume(*(_QWORD *)(a1 + 32));
}

uint64_t sub_10002DA48(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2[3] = a1;
  v2[4] = v1;
  v3 = type metadata accessor for Logger(0);
  v2[5] = v3;
  v4 = *(_QWORD *)(v3 - 8);
  v2[6] = v4;
  v5 = (*(_QWORD *)(v4 + 64) + 15) & 0xFFFFFFFFFFFFFFF0;
  v2[7] = swift_task_alloc(v5);
  v2[8] = swift_task_alloc(v5);
  v6 = type metadata accessor for MainActor(0);
  v2[9] = v6;
  v2[10] = static MainActor.shared.getter(v6);
  v7 = dispatch thunk of Actor.unownedExecutor.getter(v6, &protocol witness table for MainActor);
  v2[11] = v7;
  v2[12] = v8;
  return swift_task_switch(sub_10002DAF0, v7, v8);
}

id sub_10002DAF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint8_t *v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id result;
  void *v23;
  void *v24;
  id v25;
  uint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;

  v1 = *(_QWORD *)(v0 + 64);
  v3 = *(_QWORD *)(v0 + 40);
  v2 = *(_QWORD *)(v0 + 48);
  v4 = sub_10002DFCC(*(char **)(v0 + 32));
  *(_QWORD *)(v0 + 104) = v4;
  v5 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v4);
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v6(v1, v5, v3);
  v7 = swift_unknownObjectRetain_n(v4, 2);
  v8 = Logger.logObject.getter(v7);
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v42 = *(_QWORD *)(v0 + 48);
    v43 = *(_QWORD *)(v0 + 40);
    v44 = *(_QWORD *)(v0 + 64);
    v46 = v6;
    v10 = (uint8_t *)swift_slowAlloc(12, -1);
    v45 = v5;
    v11 = swift_slowAlloc(32, -1);
    v47 = v11;
    *(_DWORD *)v10 = 136315138;
    v12 = objc_msgSend(v4, "description");
    v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
    v15 = v14;

    *(_QWORD *)(v0 + 16) = sub_10002F320(v13, v15, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v10 + 4, v10 + 12);
    swift_unknownObjectRelease_n(v4, 2);
    swift_bridgeObjectRelease(v15);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Initializing sign in task with flags: %s", v10, 0xCu);
    swift_arrayDestroy(v11, 1, (char *)&type metadata for Any + 8);
    v16 = v11;
    v5 = v45;
    swift_slowDealloc(v16, -1, -1);
    v17 = v10;
    v6 = v46;
    swift_slowDealloc(v17, -1, -1);

    v18 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v18(v44, v43);
  }
  else
  {
    v19 = *(_QWORD *)(v0 + 64);
    v20 = *(_QWORD *)(v0 + 40);
    v21 = *(_QWORD *)(v0 + 48);

    swift_unknownObjectRelease_n(v4, 2);
    v18 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v18(v19, v20);
  }
  result = objc_msgSend((id)objc_opt_self(BuddyAccountTools), "sharedBuddyAccountTools");
  if (!result)
  {
    __break(1u);
    goto LABEL_10;
  }
  v23 = result;
  v24 = *(void **)(v0 + 32);
  v25 = objc_allocWithZone((Class)BuddyAppleIDSignInTask);
  swift_unknownObjectRetain(v4, v26);
  v27 = objc_msgSend(v25, "initWithFeatureFlags:accountTools:", v4, v23);
  *(_QWORD *)(v0 + 112) = v27;
  swift_unknownObjectRelease(v4);

  result = objc_msgSend(v24, "navigationController");
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v28 = result;
  v29 = *(_QWORD *)(v0 + 56);
  v30 = *(_QWORD *)(v0 + 40);
  objc_msgSend(v27, "setNavigationController:", result);

  objc_msgSend(v27, "setEnableFindMy:", 0);
  objc_msgSend(v27, "setRestoreFromBackupMode:", 0);
  v31 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v29, v5, v30);
  v32 = Logger.logObject.getter(v31);
  v33 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v32, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Beginning sign-in...", v34, 2u);
    swift_slowDealloc(v34, -1, -1);
  }
  v35 = *(_QWORD *)(v0 + 56);
  v36 = *(_QWORD *)(v0 + 40);
  v37 = *(_QWORD *)(v0 + 24);

  v38 = ((uint64_t (*)(uint64_t, uint64_t))v18)(v35, v36);
  v39 = static MainActor.shared.getter(v38);
  *(_QWORD *)(v0 + 120) = v39;
  v40 = swift_task_alloc(32);
  *(_QWORD *)(v0 + 128) = v40;
  *(_QWORD *)(v40 + 16) = v27;
  *(_QWORD *)(v40 + 24) = v37;
  v41 = (_QWORD *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(_QWORD *)(v0 + 136) = v41;
  *v41 = v0;
  v41[1] = sub_10002DF00;
  return (id)withCheckedContinuation<A>(isolation:function:_:)(v0 + 144, v39, &protocol witness table for MainActor, 0xD00000000000001DLL, 0x800000010020C910, sub_10002F074, v40, &type metadata for Bool);
}

uint64_t sub_10002DF00()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 128);
  v3 = *(_QWORD *)(*v0 + 120);
  swift_task_dealloc(*(_QWORD *)(*v0 + 136));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10002DF68, *(_QWORD *)(v1 + 88), *(_QWORD *)(v1 + 96));
}

uint64_t sub_10002DF68()
{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(void **)(v0 + 112);
  v2 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 64);
  swift_unknownObjectRelease(*(_QWORD *)(v0 + 104));

  swift_release(v2);
  v5 = *(unsigned __int8 *)(v0 + 144);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v5);
}

id sub_10002DFCC(char *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  char *v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  uint8_t *v21;
  uint64_t ObjectType;
  uint64_t v23;

  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)&a1[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_featureFlags];
  if (v7)
  {
    v8 = *(id *)&a1[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_featureFlags];
  }
  else
  {
    v9 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(0);
    (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v9, v2);
    v10 = a1;
    v11 = Logger.logObject.getter(v10);
    v12 = static os_log_type_t.error.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc(12, -1);
      v14 = swift_slowAlloc(32, -1);
      v23 = v14;
      *(_DWORD *)v13 = 136315138;
      v21 = v13 + 4;
      ObjectType = swift_getObjectType(v10);
      v15 = sub_10000A9E4((uint64_t *)&unk_1002EB0B0);
      v16 = String.init<A>(describing:)(&ObjectType, v15);
      v18 = v17;
      ObjectType = sub_10002F320(v16, v17, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&ObjectType, &v23, v21, v13 + 12);
      swift_bridgeObjectRelease(v18);

      _os_log_impl((void *)&_mh_execute_header, v11, v12, "%s: Feature flag property was not set. Falling back to BuddyFeatureFlags.current.", v13, 0xCu);
      swift_arrayDestroy(v14, 1, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1, -1);
      swift_slowDealloc(v13, -1, -1);
    }
    else
    {

    }
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    v8 = objc_msgSend((id)objc_opt_self(BuddyFeatureFlags), "currentFlags");
    v7 = 0;
  }
  swift_unknownObjectRetain(v7, v4);
  return v8;
}

void sub_10002E1EC(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Class isa;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD aBlock[5];
  uint64_t v13;

  v4 = sub_10000A9E4((uint64_t *)&unk_1002EB090);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  __chkstk_darwin(v4);
  sub_10000A9E4((uint64_t *)&unk_1002EB0A0);
  isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  v8 = *(unsigned __int8 *)(v5 + 80);
  v9 = (v8 + 16) & ~v8;
  v10 = swift_allocObject(&unk_100280308, v9 + v6, v8 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_10002F9C8;
  v13 = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_10002E64C;
  aBlock[3] = &unk_100280320;
  v11 = _Block_copy(aBlock);
  swift_release(v13);
  objc_msgSend(a2, "signInToAllServicesWithAuthenticationResults:completion:", isa, v11);
  _Block_release(v11);

}

uint64_t sub_10002E354(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;

  v6 = type metadata accessor for Logger(0);
  v7 = *(_QWORD *)(v6 - 8);
  v8 = __chkstk_darwin(v6);
  v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __chkstk_darwin(v8);
  v13 = (char *)v28 - v12;
  v14 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v11);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 16);
  if ((a1 & 1) != 0)
  {
    v16 = v15(v13, v14, v6);
    v17 = Logger.logObject.getter(v16);
    v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Sign-in succeeded!", v19, 2u);
      swift_slowDealloc(v19, -1, -1);
    }
    v10 = v13;
  }
  else
  {
    v15(v10, v14, v6);
    swift_errorRetain(a2);
    v20 = swift_errorRetain(a2);
    v17 = Logger.logObject.getter(v20);
    v21 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v21))
    {
      v28[1] = a3;
      v22 = (uint8_t *)swift_slowAlloc(12, -1);
      v28[0] = swift_slowAlloc(8, -1);
      *(_DWORD *)v22 = 138412290;
      if (a2)
      {
        swift_errorRetain(a2);
        v23 = _swift_stdlib_bridgeErrorToNSError(a2);
        v29 = v23;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v22 + 4, v22 + 12);
      }
      else
      {
        v29 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v22 + 4, v22 + 12);
        v23 = 0;
      }
      v24 = v28[0];
      *(_QWORD *)v28[0] = v23;
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl((void *)&_mh_execute_header, v17, v21, "Sign-in failed: %@", v22, 0xCu);
      v25 = sub_10000A9E4(&qword_1002EA810);
      swift_arrayDestroy(v24, 1, v25);
      swift_slowDealloc(v24, -1, -1);
      swift_slowDealloc(v22, -1, -1);
    }
    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }
  }

  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  LOBYTE(v29) = a1 & 1;
  v26 = sub_10000A9E4((uint64_t *)&unk_1002EB090);
  return CheckedContinuation.resume(returning:)(&v29, v26);
}

void sub_10002E64C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5;
  void (*v6)(uint64_t, void *);
  id v7;

  v6 = *(void (**)(uint64_t, void *))(a1 + 32);
  v5 = *(_QWORD *)(a1 + 40);
  swift_retain(v5);
  v7 = a3;
  v6(a2, a3);
  swift_release(v5);

}

uint64_t sub_10002E7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  v4 = type metadata accessor for MainActor(0);
  v3[5] = static MainActor.shared.getter(v4);
  v5 = dispatch thunk of Actor.unownedExecutor.getter(v4, &protocol witness table for MainActor);
  return swift_task_switch(sub_10002E84C, v5, v6);
}

uint64_t sub_10002E84C()
{
  _QWORD *v0;
  void *v1;
  uint64_t v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  _QWORD *v8;

  v1 = (void *)v0[4];
  v2 = v0[2];
  v3 = (const void *)v0[3];
  swift_release(v0[5]);
  v0[6] = _Block_copy(v3);
  v4 = sub_10000A9E4((uint64_t *)&unk_1002EB0A0);
  v5 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v2, &type metadata for String, v4, &protocol witness table for String);
  v0[7] = v5;
  v6 = dword_1002EAFDC;
  v7 = v1;
  v8 = (_QWORD *)swift_task_alloc(v6);
  v0[8] = v8;
  *v8 = v0;
  v8[1] = sub_10002E8F0;
  return sub_10002DA48(v5);
}

uint64_t sub_10002E8F0(char a1)
{
  uint64_t *v1;
  uint64_t v3;
  void (**v4)(_QWORD, _QWORD);
  void *v5;
  uint64_t v7;

  v3 = *(_QWORD *)(*v1 + 56);
  v4 = *(void (***)(_QWORD, _QWORD))(*v1 + 48);
  v5 = *(void **)(*v1 + 32);
  v7 = *v1;
  swift_task_dealloc(*(_QWORD *)(*v1 + 64));
  swift_bridgeObjectRelease(v3);

  v4[2](v4, a1 & 1);
  _Block_release(v4);
  return (*(uint64_t (**)(void))(v7 + 8))();
}

id sub_10002EA18()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyChildSetupFlow(0);
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t sub_10002EAD4()
{
  return type metadata accessor for BuddyChildSetupFlow(0);
}

uint64_t type metadata accessor for BuddyChildSetupFlow(uint64_t a1)
{
  return sub_10002EBD4(a1, (uint64_t *)&unk_1002EAFB8, (uint64_t)&nominal type descriptor for BuddyChildSetupFlow);
}

void sub_10002EAF0(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[6];

  sub_10002EB6C(319);
  if (v3 <= 0x3F)
  {
    v4[0] = *(_QWORD *)(v2 - 8) + 64;
    v4[1] = v4[0];
    v4[2] = "\b";
    v4[3] = "\b";
    v4[4] = "\b";
    v4[5] = "\b";
    swift_updateClassMetadata2(a1, 256, 6, v4, a1 + 80);
  }
}

void sub_10002EB6C(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  if (!qword_1002EAFE0)
  {
    v2 = type metadata accessor for BuddyChildSetupFlow.FlowContinuation(255);
    v3 = type metadata accessor for Optional(a1, v2);
    if (!v4)
      atomic_store(v3, (unint64_t *)&qword_1002EAFE0);
  }
}

uint64_t type metadata accessor for BuddyChildSetupFlow.FlowContinuation(uint64_t a1)
{
  return sub_10002EBD4(a1, (uint64_t *)&unk_1002EB048, (uint64_t)&nominal type descriptor for BuddyChildSetupFlow.FlowContinuation);
}

uint64_t sub_10002EBD4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata(a1, a3);
  return result;
}

uint64_t *sub_10002EC08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain(v5);
  }
  else
  {
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    swift_unknownObjectRetain(v5, a2);
    v9 = sub_10000A9E4(&qword_1002EAF08);
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  }
  return a1;
}

uint64_t sub_10002EC90(_QWORD *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  swift_unknownObjectRelease(*a1);
  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = sub_10000A9E4(&qword_1002EAF08);
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_10002ECDC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = *a2;
  *a1 = *a2;
  v5 = *(int *)(a3 + 20);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  swift_unknownObjectRetain(v4, a2);
  v8 = sub_10000A9E4(&qword_1002EAF08);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7, v8);
  return a1;
}

uint64_t *sub_10002ED40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = *a1;
  *a1 = *a2;
  swift_unknownObjectRetain(v6, a2);
  swift_unknownObjectRelease(v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_10000A9E4(&qword_1002EAF08);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

_QWORD *sub_10002EDB8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_10000A9E4(&qword_1002EAF08);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_10002EE18(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;
  swift_unknownObjectRelease(v6);
  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_10000A9E4(&qword_1002EAF08);
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_10002EE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10002EE94);
}

uint64_t sub_10002EE94(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_10000A9E4(&qword_1002EAF08);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_10002EF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10002EF20);
}

char *sub_10002EF20(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_10000A9E4(&qword_1002EAF08);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void sub_10002EF98(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  _QWORD v4[2];

  v4[0] = "\b";
  sub_10002F00C();
  if (v3 <= 0x3F)
  {
    v4[1] = *(_QWORD *)(v2 - 8) + 64;
    swift_initStructMetadata(a1, 256, 2, v4, a1 + 16);
  }
}

void sub_10002F00C()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_1002EB058)
  {
    v0 = type metadata accessor for CheckedContinuation(0, (char *)&type metadata for () + 8, &type metadata for Never, &protocol witness table for Never);
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_1002EB058);
  }
}

void sub_10002F074(uint64_t a1)
{
  uint64_t v1;

  sub_10002E1EC(a1, *(void **)(v1 + 16));
}

uint64_t sub_10002F07C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc(a3[1]);
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = sub_1000308DC;
  return v6();
}

uint64_t sub_10002F0D0(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc(a4[1]);
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = sub_1000308E0;
  return v7();
}

uint64_t sub_10002F124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_100030794(a1, &qword_1002EA790);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9, v12);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v15 = v14;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = swift_allocObject(&unk_1002804B0, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, (char *)&type metadata for () + 8, &unk_1002EB120, v17);
}

uint64_t sub_10002F270(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_10002F2D4;
  return v6(a1);
}

uint64_t sub_10002F2D4()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_10002F320(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  void *ObjectType;

  v6 = sub_10002F3F0(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_10000E2AC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_10000E2AC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain(a2);
  }
  sub_1000233CC(v12);
  return v7;
}

uint64_t sub_10002F3F0(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0, HIBYTE(a6) & 0xF, __dst, a3);
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_10002F5A8(a5, a6);
    *a1 = v13;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Unexpectedly found nil while unwrapping an Optional value", 57, 2, "Swift/StringTesting.swift", 25, 2, 151, 0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableRawPointer.initializeMemory overlapping range", 58, 2, "Swift/UnsafeRawPointer.swift", 28, v14, 1173, 0);
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain(a6 & 0xFFFFFFFFFFFFFFFLL, __dst);
}

uint64_t sub_10002F5A8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = (uint64_t)sub_10002F63C(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0)
    v2 = sub_10002F814(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_10002F814(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

_QWORD *sub_10002F63C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  char v8;
  _QWORD *result;
  int v10;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v4 = HIBYTE(a2) & 0xF;
  else
    v4 = a1 & 0xFFFFFFFFFFFFLL;
  if (v4)
  {
    while (1)
    {
      v5 = sub_10002F7B0(v4, 0);
      if (v4 < 0)
        break;
      v6 = v5;
      v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0)
        goto LABEL_14;
      if (v7 == v4)
        return v6;
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "invalid Collection: less than 'count' elements in collection", 60, 2, "Swift/ContiguousArrayBuffer.swift", 33, v10, 1122, 0);
      __break(1u);
LABEL_10:
      v4 = String.UTF8View._foreignCount()();
      if (!v4)
        return _swiftEmptyArrayStorage;
    }
    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutableBufferPointer with negative count", 46, 2, "Swift/UnsafeBufferPointer.swift", 31, v10, 71, 0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    result = (_QWORD *)_assertionFailure(_:_:file:line:flags:)("Fatal error", 11, 2, "Insufficient space allocated to copy string contents", 52, 2, "Swift/StringUTF8View.swift", 26, v10, 430, 0);
    __break(1u);
  }
  else
  {
    return _swiftEmptyArrayStorage;
  }
  return result;
}

_QWORD *sub_10002F7B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return _swiftEmptyArrayStorage;
  v4 = sub_10000A9E4(&qword_1002EB088);
  v5 = (_QWORD *)swift_allocObject(v4, v2 + 32, 7);
  v6 = j__malloc_size_1(v5);
  v5[2] = a1;
  v5[3] = 2 * v6 - 64;
  return v5;
}

uint64_t sub_10002F814(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    v10 = sub_10000A9E4(&qword_1002EB088);
    v11 = (char *)swift_allocObject(v10, v9 + 32, 7);
    v12 = j__malloc_size_1(v11);
    *((_QWORD *)v11 + 2) = v8;
    *((_QWORD *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    v11 = (char *)_swiftEmptyArrayStorage;
  }
  v13 = v11 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8])
      memmove(v13, v14, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)("Fatal error", 11, 2, "UnsafeMutablePointer.initialize overlapping range", 49, 2, "Swift/UnsafePointer.swift", 25, 2, 1092, 0);
  __break(1u);
  return result;
}

uint64_t sub_10002F964()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000A9E4((uint64_t *)&unk_1002EB090);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 16) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10002F9C8(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000A9E4((uint64_t *)&unk_1002EB090) - 8) + 80);
  return sub_10002E354(a1, a2, v2 + ((v5 + 16) & ~v5));
}

uint64_t sub_10002FA18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10002FA28(uint64_t a1)
{
  return swift_release(*(_QWORD *)(a1 + 40));
}

uint64_t sub_10002FA30()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_10002FA6C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1002EB0C4);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_10002FAEC;
  return sub_10002D688(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_10002FAEC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void sub_10002FB34(uint64_t a1)
{
  uint64_t v1;

  sub_10002D144(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_100280398, (uint64_t)sub_10002FB68, (uint64_t)&unk_1002803B0);
}

uint64_t sub_10002FB68(char a1)
{
  return sub_10002FCB4(a1, &OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_locationServicesFlowContinuation);
}

uint64_t sub_10002FB74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A9E4(&qword_1002EB0D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_10002FBBC(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t v5;

  result = *a2;
  if (!*a2)
  {
    v5 = objc_opt_self(*a3);
    result = swift_getObjCClassMetadata(v5);
    atomic_store(result, a2);
  }
  return result;
}

void sub_10002FBF4(uint64_t a1)
{
  uint64_t v1;

  sub_10002D144(a1, *(void **)(v1 + 16), *(_QWORD *)(v1 + 24), (uint64_t)&unk_1002803E8, (uint64_t)sub_10002FCA8, (uint64_t)&unk_100280400);
}

uint64_t sub_10002FC28()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = sub_10000A9E4(&qword_1002EAF08);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  v4 = (v3 + 32) & ~v3;
  v5 = v4 + *(_QWORD *)(v2 + 64);
  v6 = v3 | 7;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10002FCA8(char a1)
{
  return sub_10002FCB4(a1, &OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_passcodeFlowContinuation);
}

uint64_t sub_10002FCB4(char a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;

  v5 = *(unsigned __int8 *)(*(_QWORD *)(sub_10000A9E4(&qword_1002EAF08) - 8) + 80);
  return sub_10002D2A0(a1, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), v2 + ((v5 + 32) & ~v5), a2);
}

void sub_10002FD0C()
{
  char *v0;
  char *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  void *v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = objc_msgSend(v1, "navigationController");
  if (v6)
  {
    v7 = v6;
    v8 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v6);
    v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v8, v2);
    v10 = Logger.logObject.getter(v9);
    v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc(2, -1);
      *(_WORD *)v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Starting child flow...", v12, 2u);
      swift_slowDealloc(v12, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v13 = OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_childSetupPresenter;
    v14 = *(void **)&v1[OBJC_IVAR____TtC5Setup19BuddyChildSetupFlow_childSetupPresenter];
    if (v14)
    {
      objc_msgSend(v14, "setDelegate:", v1);
      v15 = *(void **)&v1[v13];
      if (v15)
      {
        objc_msgSend(v15, "startFlowWithNavigationController:", v7);

        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
  }
  else
  {
    v16 = objc_msgSend(v1, "delegate");
    if (v16)
    {
      v17 = v16;
      objc_msgSend(v16, "flow:finishedWithLastItem:nextItem:", v1, v1, 0);
      swift_unknownObjectRelease(v17);
      return;
    }
  }
  __break(1u);
}

id sub_10002FED0()
{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id result;
  id v13;
  uint64_t v14;

  v1 = v0;
  v2 = type metadata accessor for Logger(0);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = __chkstk_darwin(v2);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v4);
  v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v3 + 16))(v6, v7, v2);
  v9 = Logger.logObject.getter(v8);
  v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc(2, -1);
    *(_WORD *)v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Child setup completed", v11, 2u);
    swift_slowDealloc(v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  result = objc_msgSend(v1, "delegate");
  if (result)
  {
    v13 = result;
    objc_msgSend(result, "flow:finishedWithLastItem:nextItem:", v1, v1, 0);
    return (id)swift_unknownObjectRelease(v13);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100030018(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint8_t *v18;
  id result;
  id v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;

  v2 = v1;
  v4 = type metadata accessor for Logger(0);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = __chkstk_darwin(v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, v9, v4);
  swift_errorRetain(a1);
  v10 = swift_errorRetain(a1);
  v11 = Logger.logObject.getter(v10);
  v12 = static os_log_type_t.error.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    v23 = v2;
    v13 = swift_slowAlloc(12, -1);
    v22 = v4;
    v14 = (uint8_t *)v13;
    v15 = (uint64_t *)swift_slowAlloc(8, -1);
    *(_DWORD *)v14 = 138412290;
    swift_errorRetain(a1);
    v16 = _swift_stdlib_bridgeErrorToNSError(a1);
    v24 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v14 + 4, v14 + 12);
    *v15 = v16;
    v2 = v23;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Child setup failed: %@", v14, 0xCu);
    v17 = sub_10000A9E4(&qword_1002EA810);
    swift_arrayDestroy(v15, 1, v17);
    swift_slowDealloc(v15, -1, -1);
    v18 = v14;
    v4 = v22;
    swift_slowDealloc(v18, -1, -1);
  }
  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  result = objc_msgSend(v2, "delegate");
  if (result)
  {
    v20 = result;
    objc_msgSend(result, "flow:finishedWithLastItem:nextItem:", v2, v2, 0);
    return (id)swift_unknownObjectRelease(v20);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10003023C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1002EB0EC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000308E4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1002EB0E8 + dword_1002EB0E8))(v2, v3, v4);
}

uint64_t sub_1000302AC()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1002EB0FC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000308E8;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1002EB0F8 + dword_1002EB0F8))(v2, v3, v4);
}

uint64_t sub_100030328()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10003034C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1002EB11C);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_1000303BC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1002EB118 + dword_1002EB118))(a1, v4);
}

uint64_t sub_1000303BC()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100030408()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1002EB12C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000308EC;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1002EB128 + dword_1002EB128))(v2, v3, v4);
}

uint64_t sub_100030478()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1002EB0FC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000308F0;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1002EB0F8 + dword_1002EB0F8))(v2, v3, v4);
}

uint64_t sub_1000304F4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1002EB10C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_1000308F4;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1002EB108 + dword_1002EB108))(a1, v4, v5, v6);
}

uint64_t sub_10003057C()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  return swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1000305B0()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1002EB14C);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000308F8;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1002EB148 + dword_1002EB148))(v2, v3, v4);
}

uint64_t sub_100030620()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc(dword_1002EB0FC);
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = sub_1000308FC;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&dword_1002EB0F8 + dword_1002EB0F8))(v2, v3, v4);
}

uint64_t sub_10003069C()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));
  swift_release(*(_QWORD *)(v0 + 40));
  return swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1000306C8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc(dword_1002EB10C);
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = sub_100030900;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&dword_1002EB108 + dword_1002EB108))(a1, v4, v5, v6);
}

uint64_t sub_10003074C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = sub_10000A9E4(&qword_1002EB0D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100030794(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_10000A9E4(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1000307D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BuddyChildSetupFlow.FlowContinuation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100030814(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for BuddyChildSetupFlow.FlowContinuation(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100030850(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for BuddyChildSetupFlow.FlowContinuation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100030894()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

id sub_1000308B8()
{
  uint64_t v0;

  return (id)(*(uint64_t (**)(void))(*(_QWORD *)(v0 + 16) + 16))();
}

uint64_t sub_100030920(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(a2 + 16))(a2, a1 & 1);
}

uint64_t sub_100030934(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t ObjectType;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD v20[4];

  v6 = type metadata accessor for TaskPriority(0);
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) == 1)
  {
    sub_10001D224(a1);
    v8 = 7168;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      v10 = *(_QWORD *)(a3 + 24);
      ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9, v12);
      v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      v15 = v14;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }
  else
  {
    v16 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    v8 = v16 | 0x1C00;
    v9 = *(_QWORD *)(a3 + 16);
    if (v9)
      goto LABEL_3;
  }
  v13 = 0;
  v15 = 0;
LABEL_6:
  v17 = swift_allocObject(&unk_100280670, 32, 7);
  *(_QWORD *)(v17 + 16) = a2;
  *(_QWORD *)(v17 + 24) = a3;
  if (v15 | v13)
  {
    v20[0] = 0;
    v20[1] = 0;
    v18 = v20;
    v20[2] = v13;
    v20[3] = v15;
  }
  else
  {
    v18 = 0;
  }
  return swift_task_create(v8, v18, (char *)&type metadata for () + 8, &unk_1002EB1F0, v17);
}

void sub_100030A78()
{
  char *v0;
  void *v1;
  NSString v2;
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  Swift::String v9;
  Swift::String v10;
  void *object;
  NSString v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  id v17;
  Swift::String v18;
  Swift::String v19;
  void *v20;
  NSString v21;
  NSString v22;
  objc_super v23;
  Swift::String v24;
  Swift::String v25;

  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_runState] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_buddyPreferencesExcludedFromBackup] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_proximitySetupController] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_analyticsManager] = 0;
  *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_capabilities] = 0;
  v1 = (void *)objc_opt_self(UIDevice);
  v2 = String._bridgeToObjectiveC()();
  v3 = objc_msgSend(v1, "modelSpecificLocalizedStringKeyForKey:", v2);

  if (v3)
  {
    v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    v6 = v5;

    v7 = (void *)objc_opt_self(NSBundle);
    v8 = objc_msgSend(v7, "mainBundle");
    v24._object = (void *)0xE000000000000000;
    v9._countAndFlagsBits = v4;
    v9._object = v6;
    v10._countAndFlagsBits = 0;
    v10._object = (void *)0xE000000000000000;
    v24._countAndFlagsBits = 0;
    object = NSLocalizedString(_:tableName:bundle:value:comment:)(v9, (Swift::String_optional)0, (NSBundle)v8, v10, v24)._object;
    swift_bridgeObjectRelease(v6);

    v12 = String._bridgeToObjectiveC()();
    v13 = objc_msgSend(v1, "modelSpecificLocalizedStringKeyForKey:", v12);

    if (v13)
    {
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      v16 = v15;

      v17 = objc_msgSend(v7, "mainBundle");
      v25._object = (void *)0xE000000000000000;
      v18._countAndFlagsBits = v14;
      v18._object = v16;
      v19._countAndFlagsBits = 0;
      v19._object = (void *)0xE000000000000000;
      v25._countAndFlagsBits = 0;
      v20 = NSLocalizedString(_:tableName:bundle:value:comment:)(v18, (Swift::String_optional)0, (NSBundle)v17, v19, v25)._object;
      swift_bridgeObjectRelease(v16);

      v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(object);
      v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v20);
      v23.receiver = v0;
      v23.super_class = (Class)type metadata accessor for BuddyPostActivationAppStateController();
      objc_msgSendSuper2(&v23, "initWithTitle:detailText:icon:contentLayout:", v21, v22, 0, 2);

      return;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_100030D08()
{
  void *v0;
  void *v1;
  id v2;
  Swift::String v3;
  Swift::String v4;
  void *object;
  NSString v6;
  id v7;
  Swift::String v8;
  Swift::String v9;
  void *v10;
  NSString v11;
  objc_super v12;
  Swift::String v13;
  Swift::String v14;

  v12.receiver = v0;
  v12.super_class = (Class)type metadata accessor for BuddyPostActivationAppStateController();
  objc_msgSendSuper2(&v12, "viewDidLoad");
  v1 = (void *)objc_opt_self(NSBundle);
  v2 = objc_msgSend(v1, "mainBundle");
  v13._object = (void *)0xE000000000000000;
  v3._object = (void *)0x800000010020CBA0;
  v3._countAndFlagsBits = 0xD000000000000016;
  v4._countAndFlagsBits = 0;
  v4._object = (void *)0xE000000000000000;
  v13._countAndFlagsBits = 0;
  object = NSLocalizedString(_:tableName:bundle:value:comment:)(v3, (Swift::String_optional)0, (NSBundle)v2, v4, v13)._object;

  v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  objc_msgSend(v0, "addBoldButton:action:", v6, "eraseTapped");

  v7 = objc_msgSend(v1, "mainBundle");
  v8._countAndFlagsBits = 0xD000000000000019;
  v14._object = (void *)0xE000000000000000;
  v8._object = (void *)0x800000010020CBC0;
  v9._countAndFlagsBits = 0;
  v9._object = (void *)0xE000000000000000;
  v14._countAndFlagsBits = 0;
  v10 = NSLocalizedString(_:tableName:bundle:value:comment:)(v8, (Swift::String_optional)0, (NSBundle)v7, v9, v14)._object;

  v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v10);
  objc_msgSend(v0, "addLinkButton:action:", v11, "continueSetupTapped");

}

void sub_100030F24()
{
  char *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;

  v1 = objc_msgSend(v0, "view");
  if (!v1)
  {
    __break(1u);
    goto LABEL_8;
  }
  v2 = v1;
  v3 = objc_msgSend(v1, "window");

  if (!v3)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  v4 = objc_msgSend(v0, "navigationController");
  if (!v4)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v5 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_proximitySetupController];
  if (!v5)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  v6 = *(_QWORD *)&v0[OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_analyticsManager];
  if (v6)
  {
    v7 = v4;
    v8 = objc_msgSend((id)objc_opt_self(BuddyEraseAlertController), "alertControllerWithWindow:navigationController:proximitySetupController:analyticsManager:", v3, v4, v5, v6);

    objc_msgSend(v0, "presentViewController:animated:completion:", v8, 1, 0);
    return;
  }
LABEL_11:
  __break(1u);
}

uint64_t sub_10003119C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a1 + *a4);
  *(_QWORD *)(a1 + *a4) = a3;
  swift_unknownObjectRetain(a3, a2);
  return swift_unknownObjectRelease(v4);
}

uint64_t sub_100031234()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  unsigned int v15;
  uint64_t v16;

  v1 = type metadata accessor for Logger(0);
  v2 = *(_QWORD *)(v1 - 8);
  result = __chkstk_darwin(v1);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(void **)(v0 + OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_runState);
  if (!v7)
    return 0;
  v8 = *(void **)(v0 + OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_capabilities);
  if (v8)
  {
    swift_unknownObjectRetain(v7, v4);
    v9 = objc_msgSend(v8, "mgIsHactivated");
    if ((_DWORD)v9)
    {
      v10 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v9);
      v11 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v2 + 16))(v6, v10, v1);
      v12 = Logger.logObject.getter(v11);
      v13 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v12, v13))
      {
        v14 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v14 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Skipping app states comparison", v14, 2u);
        swift_slowDealloc(v14, -1, -1);
      }

      swift_unknownObjectRelease(v7);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v6, v1);
      return 0;
    }
    v15 = objc_msgSend(v7, "hasCompletedInitialRun");
    swift_unknownObjectRelease(v7);
    return v15 ^ 1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000313D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v6[3] = a5;
  v6[4] = a6;
  v6[2] = a4;
  v7 = type metadata accessor for Logger(0);
  v6[5] = v7;
  v8 = *(_QWORD *)(v7 - 8);
  v6[6] = v8;
  v6[7] = swift_task_alloc((*(_QWORD *)(v8 + 64) + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for MainActor(0);
  v6[8] = static MainActor.shared.getter(v9);
  v10 = dispatch thunk of Actor.unownedExecutor.getter(v9, &protocol witness table for MainActor);
  return swift_task_switch(sub_100031470, v10, v11);
}

uint64_t sub_100031470()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = *(_QWORD *)(v0 + 16);
  result = swift_release(*(_QWORD *)(v0 + 64));
  v3 = *(void **)(v1 + OBJC_IVAR____TtC5Setup37BuddyPostActivationAppStateController_buddyPreferencesExcludedFromBackup);
  if (v3)
  {
    v4 = v3;
    v5 = sub_10000E100(v4);

    if (v5)
    {
      v7 = sub_10000DBE0();
      v8 = sub_1000315C4((uint64_t)v7, v5);
      swift_bridgeObjectRelease(v5);
      swift_bridgeObjectRelease(v7);
      v9 = v8 ^ 1;
    }
    else
    {
      v11 = *(_QWORD *)(v0 + 48);
      v10 = *(_QWORD *)(v0 + 56);
      v12 = *(_QWORD *)(v0 + 40);
      v13 = Logger.purpleBuddyGeneral.unsafeMutableAddressor(v6);
      v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v13, v12);
      v15 = Logger.logObject.getter(v14);
      v16 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc(2, -1);
        *(_WORD *)v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Found no original app states", v17, 2u);
        swift_slowDealloc(v17, -1, -1);
      }
      v19 = *(_QWORD *)(v0 + 48);
      v18 = *(_QWORD *)(v0 + 56);
      v20 = *(_QWORD *)(v0 + 40);

      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
      v9 = 1;
    }
    v21 = *(_QWORD *)(v0 + 56);
    (*(void (**)(_QWORD))(v0 + 24))(v9 & 1);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1000315C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  int64_t v21;

  if (a1 == a2)
    return 1;
  if (*(_QWORD *)(a1 + 16) == *(_QWORD *)(a2 + 16))
  {
    v3 = *(_QWORD *)(a1 + 64);
    v4 = 1 << *(_BYTE *)(a1 + 32);
    v5 = -1;
    if (v4 < 64)
      v5 = ~(-1 << v4);
    v21 = (unint64_t)(v4 + 63) >> 6;
    if ((v5 & v3) != 0)
    {
      v6 = __clz(__rbit64(v5 & v3));
LABEL_22:
      v10 = 16 * v6;
      v11 = (uint64_t *)(*(_QWORD *)(a1 + 48) + v10);
      v12 = *v11;
      v13 = v11[1];
      v14 = (uint64_t *)(*(_QWORD *)(a1 + 56) + v10);
      v16 = *v14;
      v15 = v14[1];
      swift_bridgeObjectRetain(v13);
      sub_10000E078(v16, v15);
      v17 = sub_10003259C(v12, v13);
      v19 = v18;
      swift_bridgeObjectRelease(v13);
      if ((v19 & 1) != 0)
        __asm { BR              X8 }
      sub_10000E0BC(v16, v15);
      return 0;
    }
    if ((unint64_t)(v4 + 63) >> 6 > 1)
    {
      v7 = *(_QWORD *)(a1 + 72);
      v8 = 1;
      if (v7)
        goto LABEL_21;
      v8 = 2;
      if (v21 <= 2)
        return 1;
      v7 = *(_QWORD *)(a1 + 80);
      if (v7)
        goto LABEL_21;
      v8 = 3;
      if (v21 <= 3)
        return 1;
      v7 = *(_QWORD *)(a1 + 88);
      if (v7)
        goto LABEL_21;
      v8 = 4;
      if (v21 <= 4)
        return 1;
      v7 = *(_QWORD *)(a1 + 96);
      if (v7)
      {
LABEL_21:
        v6 = __clz(__rbit64(v7)) + (v8 << 6);
        goto LABEL_22;
      }
      v9 = 5;
      if (v21 > 5)
      {
        v7 = *(_QWORD *)(a1 + 104);
        if (v7)
        {
          v8 = 5;
          goto LABEL_21;
        }
        while (1)
        {
          v8 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            JUMPOUT(0x100031FD4);
          }
          if (v8 >= v21)
            break;
          v7 = *(_QWORD *)(a1 + 64 + 8 * v8);
          ++v9;
          if (v7)
            goto LABEL_21;
        }
      }
    }
    return 1;
  }
  return 0;
}

id sub_100032224()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BuddyPostActivationAppStateController();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for BuddyPostActivationAppStateController()
{
  return objc_opt_self(_TtC5Setup37BuddyPostActivationAppStateController);
}

uint64_t sub_1000322DC()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 16));
  return swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100032300(char a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(v1 + 16) + 16))(*(_QWORD *)(v1 + 16), a1 & 1);
}

uint64_t sub_100032314()
{
  uint64_t v0;

  swift_unknownObjectRelease(*(_QWORD *)(v0 + 16));

  swift_release(*(_QWORD *)(v0 + 48));
  return swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100032348(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc(dword_1002EB1DC);
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = sub_1000323C8;
  return sub_1000313D8(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1000323C8()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_100032410(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc(a2[1]);
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = sub_100032474;
  return v6(a1);
}

uint64_t sub_100032474()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1000324C0()
{
  uint64_t v0;

  swift_release(*(_QWORD *)(v0 + 24));
  return swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1000324E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc(dword_1002EB1EC);
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_100032554;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1002EB1E8 + dword_1002EB1E8))(a1, v4);
}

uint64_t sub_100032554()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc(*(_QWORD *)(*v0 + 16));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

unint64_t sub_10003259C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  Swift::Int v5;
  _QWORD v7[9];

  Hasher.init(_seed:)(v7, *(_QWORD *)(v2 + 40));
  String.hash(into:)(v7, a1, a2);
  v5 = Hasher._finalize()();
  return sub_100032630(a1, a2, v5);
}

unint64_t sub_100032600(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return sub_100032710(a1, v4);
}

unint64_t sub_100032630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  BOOL v16;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = v10[1];
    v12 = *v10 == a1 && v11 == a2;
    if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0) & 1) == 0)
    {
      v13 = ~v5;
      do
      {
        v6 = (v6 + 1) & v13;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v14 = (_QWORD *)(v9 + 16 * v6);
        v15 = v14[1];
        v16 = *v14 == a1 && v15 == a2;
      }
      while (!v16 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v14, v15, a1, a2, 0) & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_100032710(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_10000E270(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = static AnyHashable.== infix(_:_:)(v9, a1);
      sub_1000232E0((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

uint64_t sub_1000327D4()
{
  uint64_t v0;

  return swift_deallocClassInstance(v0, 16, 7);
}

uint64_t type metadata accessor for ResourceBundleClass()
{
  return objc_opt_self(_TtC5SetupP33_F63810C6762A5E800CB2F297FDA1DD1819ResourceBundleClass);
}

void sub_100032BC8(uint64_t a1, char a2, id obj)
{
  id location;
  char v5;
  uint64_t v6;

  v6 = a1;
  v5 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  if (*(_QWORD *)(a1 + 32))
    (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  objc_storeStrong(&location, 0);
}

uint64_t start(int a1, char **a2)
{
  void *v2;

  v2 = objc_autoreleasePoolPush();
  UIApplicationMain(a1, a2, CFSTR("Application"), CFSTR("Application"));
  objc_autoreleasePoolPop(v2);
  return 0;
}

void sub_100033680(id *a1)
{
  id v1;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  v1 = objc_msgSend(location[0], "delegate");
  objc_msgSend(v1, "flowItemDone:", location[0]);

  objc_storeStrong(location, 0);
}

double sub_100033958()
{
  return 0.0;
}

uint64_t sub_1000341C4(NSObject *a1)
{
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility();
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_1000342B4((uint64_t)buf, (uint64_t)-[objc_class style](a1[4].isa, "style"));
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Welcome shown with style: %li", buf, 0xCu);
  }
  objc_storeStrong((id *)oslog, 0);
  return (*((uint64_t (**)(void))a1[5].isa + 2))();
}

double sub_1000342B4(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = 134217984;
  *(_DWORD *)a1 = 134217984;
  *(_QWORD *)(a1 + 4) = a2;
  return result;
}

uint64_t sub_1000344F4(uint64_t a1, char a2)
{
  uint64_t v3;

  if ((a2 & 1) != 0)
    v3 = 2;
  else
    v3 = 0;
  objc_msgSend(*(id *)(a1 + 32), "setStyle:", v3);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10003564C(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "delegate", a1, a1);
  objc_msgSend(v2, "flowItemDone:", *(_QWORD *)(a1 + 32));

}

void sub_100035EB0(id *a1, void *a2)
{
  void *v3;
  void **v4;
  int v5;
  int v6;
  void (*v7)(uint64_t);
  void *v8;
  id v9[4];

  v9[3] = a1;
  v9[2] = a2;
  v9[1] = a1;
  v3 = &_dispatch_main_q;
  v4 = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_100035F6C;
  v8 = &unk_100280730;
  v9[0] = a1[4];
  dispatch_async((dispatch_queue_t)v3, &v4);

  objc_storeStrong(v9, 0);
}

void sub_100035F6C(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "setHasIntent:", 1, a1, a1);
  if ((objc_msgSend(*(id *)(a1 + 32), "didAppear") & 1) != 0)
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "delegate");
    objc_msgSend(v2, "flowItemDone:", *(_QWORD *)(a1 + 32));

  }
}

uint64_t sub_10003641C(uint64_t result)
{
  if (*(_QWORD *)(result + 32))
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(result + 32) + 16))(*(_QWORD *)(result + 32), 1);
  return result;
}

void sub_100038A0C(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "_menuButtonPressed");
  objc_storeStrong(location, 0);
}

void sub_100038A4C(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "_showModalWiFiSettings");
  objc_storeStrong(location, 0);
}

void sub_100038A8C(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "_writeGreenInformedDefaultPlistIfNecessary");
  objc_storeStrong(location, 0);
}

uint64_t sub_100038ACC(id *a1)
{
  unsigned __int8 v1;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  v1 = objc_msgSend(location[0], "_doesRestartFlowCauseErase");
  objc_storeStrong(location, 0);
  return v1 & 1;
}

void sub_100038B1C(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "_prepareForCloudRestoreReboot");
  objc_storeStrong(location, 0);
}

void sub_100038B5C(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "_exitBuddyForDemoSetUp");
  objc_storeStrong(location, 0);
}

void sub_100038B9C(uint64_t a1, char a2)
{
  id WeakRetained;
  id v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = a1;
  v5 = a2;
  v4 = a1;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_prepareForDeviceMigrationAfterSoftwareUpdate:", v5 & 1, WeakRetained, v4);
  objc_storeStrong(&v3, 0);
}

void sub_100038BE8(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "_startDeviceMigration");
  objc_storeStrong(location, 0);
}

double sub_100038C28(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = 138412290;
  *(_DWORD *)a1 = 138412290;
  *(_QWORD *)(a1 + 4) = a2;
  return result;
}

_WORD *sub_100038C3C(_WORD *result)
{
  *result = 0;
  return result;
}

void sub_100038C44(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "_persistAnalyticsForSoftwareUpdate");
  objc_storeStrong(location, 0);
}

id sub_100038C84()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE808;
  v13 = qword_1002EE808;
  if (!qword_1002EE808)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10004BD2C;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_10004BD2C(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_100038D70(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "setShouldRereadCloudConfigurationForControllersToSkip:", 1);
  objc_storeStrong(location, 0);
}

void sub_100038DC4(uint64_t a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend(*(id *)(a1 + 32), "environment", a1, a1);
  v2 = objc_msgSend(v1, "managedConfiguration");
  objc_msgSend(v2, "waitForMigrationIncludingPostRestoreMigration:completion:", 1, &stru_100280838);

}

void sub_100038E3C(id a1)
{
  void *v1;

  v1 = &_dispatch_main_q;
  dispatch_async((dispatch_queue_t)v1, &stru_100280858);

}

void sub_100038E94(id a1)
{
  id v1;

  v1 = +[BuddyCloudConfigManager sharedManager](BuddyCloudConfigManager, "sharedManager", a1, a1);
  objc_msgSend(v1, "cloudConfigMayHaveChanged");

}

double sub_100039500(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = 138543362;
  *(_DWORD *)a1 = 138543362;
  *(_QWORD *)(a1 + 4) = a2;
  return result;
}

double sub_10003A6BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 138543618;
  *(_DWORD *)a1 = 138543618;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2114;
  *(_QWORD *)(a1 + 14) = a3;
  return result;
}

void sub_10003A6DC(uint64_t a1, uint64_t a2)
{
  id WeakRetained;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v6 = a1;
  v5 = a2;
  v4 = a1;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_preflightDispositionValidationWithControllerClass:", v5, WeakRetained, v4);
  objc_storeStrong(&v3, 0);
}

double sub_10003A724(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)&result = 67109634;
  *(_DWORD *)a1 = 67109634;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 2114;
  *(_QWORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 18) = 2114;
  *(_QWORD *)(a1 + 20) = a4;
  return result;
}

id sub_10003A74C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  _WORD v12[7];
  os_log_type_t v13;
  os_log_t v14;
  id location;
  os_log_type_t v16;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)((uint64_t (*)(void))_BYLoggingFacility)();
  v16 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    location = objc_msgSend(*(id *)(a1 + 32), "_stringForStartupCause:", objc_msgSend(*(id *)(a1 + 32), "startupCause"));
    sub_100039500((uint64_t)buf, (uint64_t)location);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], v16, "Start up cause: %{public}@", buf, 0xCu);

    objc_storeStrong(&location, 0);
  }
  objc_storeStrong((id *)oslog, 0);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0 && (*(_BYTE *)(a1 + 49) & 1) != 0)
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "environment");
    v3 = objc_msgSend(v2, "buddyPreferences");
    v4 = objc_msgSend(*(id *)(a1 + 40), "objectForKey:", CFSTR("Language"));
    objc_msgSend(v3, "setObject:forKey:", v4, CFSTR("Language"));

    objc_msgSend(*(id *)(a1 + 40), "removeObjectForKey:", CFSTR("Language"));
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 40) & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 40), "removeObjectForKey:", CFSTR("AnimateLanguageChoice"));
    objc_msgSend(*(id *)(a1 + 40), "synchronize");
    v14 = (os_log_t)(id)_BYLoggingFacility(objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setUserInteractionEnabled:", 0));
    v13 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v14;
      v6 = v13;
      sub_100038C3C(v12);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Locale screen prepped for swap. Waiting for setupsnapshotremoved...", (uint8_t *)v12, 2u);
    }
    objc_storeStrong((id *)&v14, 0);
  }
  else if ((objc_msgSend(*(id *)(a1 + 32), "shouldProceedFromAppearancePane") & 1) != 0)
  {
    v7 = objc_msgSend(*(id *)(a1 + 32), "environment");
    v8 = objc_msgSend(v7, "buddyPreferencesExcludedFromBackup");
    objc_msgSend(v8, "removeObjectForKey:onlyFromMemory:", CFSTR("DisplayZoomRestart"), 0);

  }
  v9 = objc_msgSend(*(id *)(a1 + 32), "navigationFlowController");
  v10 = objc_msgSend(v9, "wifiController");
  objc_msgSend(v10, "startScanningIfNecessary");

  return objc_msgSend(*(id *)(a1 + 32), "_setupAndStartReturnToServiceIfNeeded");
}

double sub_10003AA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)&result = 138543874;
  *(_DWORD *)a1 = 138543874;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2048;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2114;
  *(_QWORD *)(a1 + 24) = a4;
  return result;
}

void sub_10003AA64(uint64_t a1, char a2)
{
  id v2;
  id v3;

  if ((a2 & 1) != 0)
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "environment");
    v3 = objc_msgSend(v2, "proximitySetupController");
    objc_msgSend(v3, "resumeSession");

  }
}

double sub_10003B460(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, int a11)
{
  double result;

  *(_QWORD *)&result = 67111424;
  *(_DWORD *)a1 = 67111424;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 1024;
  *(_DWORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 14) = 1024;
  *(_DWORD *)(a1 + 16) = a4;
  *(_WORD *)(a1 + 20) = 1024;
  *(_DWORD *)(a1 + 22) = a5;
  *(_WORD *)(a1 + 26) = 1024;
  *(_DWORD *)(a1 + 28) = a6;
  *(_WORD *)(a1 + 32) = 1024;
  *(_DWORD *)(a1 + 34) = a7;
  *(_WORD *)(a1 + 38) = 1024;
  *(_DWORD *)(a1 + 40) = a8;
  *(_WORD *)(a1 + 44) = 1024;
  *(_DWORD *)(a1 + 46) = a9;
  *(_WORD *)(a1 + 50) = 1024;
  *(_DWORD *)(a1 + 52) = a10;
  *(_WORD *)(a1 + 56) = 1024;
  *(_DWORD *)(a1 + 58) = a11;
  return result;
}

void sub_10003CA34(id a1)
{
  +[BuddyNavigationFlowController preheat](BuddyNavigationFlowController, "preheat", a1, a1);
}

void sub_10003CA64(id a1)
{
  +[IPLanguageListManager preheat](IPLanguageListManager, "preheat", a1, a1);
}

void sub_10003CA94(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_menuButtonPressed", a1, a1);

}

void sub_10003CAD8(id *a1)
{
  char v2;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_alloc_init((Class)RadiosPreferences);
  v2 = objc_msgSend(a1[4], "_isBackInBuddyForActivationOnly") & 1;
  if ((objc_msgSend(location[0], "airplaneMode") & 1) != 0 && (v2 & 1) == 0)
    objc_msgSend(location[0], "setAirplaneMode:", 0);
  objc_storeStrong(location, 0);
}

void sub_10003CB58(id a1)
{
  id v1;

  v1 = +[AKURLBag sharedBag](AKURLBag, "sharedBag", a1, a1);
  objc_msgSend(v1, "isPhoneNumberSupportedConfig");

}

double sub_10003CBAC(uint64_t a1, int a2, int a3)
{
  double result;

  *(_QWORD *)&result = 67109376;
  *(_DWORD *)a1 = 67109376;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 1024;
  *(_DWORD *)(a1 + 10) = a3;
  return result;
}

void sub_10003CBCC(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "_networkPathChanged");
  objc_storeStrong(location, 0);
}

id sub_10003CC18(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_setupSnapshotRemoved");
}

id sub_10003CC4C(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_setupStateChanged");
}

id sub_10003CC80(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_localeChanged");
}

void sub_10003CCB4(NSObject *a1, char a2)
{
  NSObject *v3;
  os_log_type_t v4;
  id v5;
  void *v6;
  void **block;
  int v8;
  int v9;
  void (*v10)(uint64_t);
  void *v11;
  objc_class *v12;
  uint8_t buf[15];
  os_log_type_t v14;
  os_log_t oslog[2];
  char v16;
  NSObject *v17;

  v17 = a1;
  v16 = a2;
  oslog[1] = a1;
  if ((a2 & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    v14 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v3 = oslog[0];
      v4 = v14;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Preheating software update cache...", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    v5 = -[objc_class softwareUpdateCache](a1[4].isa, "softwareUpdateCache");
    objc_msgSend(v5, "scanUsingCache:withCompletion:", 0, &stru_100280998);

    v6 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v8 = -1073741824;
    v9 = 0;
    v10 = sub_10003D0C8;
    v11 = &unk_100280730;
    v12 = a1[4].isa;
    dispatch_async((dispatch_queue_t)v6, &block);

    objc_storeStrong((id *)&v12, 0);
  }
}

void sub_10003CE18(id a1, SUDescriptor *a2, SUDescriptor *a3, NSError *a4)
{
  uint64_t v7;
  NSString *v8;
  const __CFString *v9;
  const __CFString *v10;
  os_log_t v11;
  char v12;
  id v13;
  char v14;
  id v15;
  os_log_type_t v16;
  os_log_t oslog[2];
  id v18;
  id v19;
  id location[2];
  uint8_t v21[32];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v19 = 0;
  objc_storeStrong(&v19, a3);
  v18 = 0;
  objc_storeStrong(&v18, a4);
  oslog[1] = (os_log_t)a1;
  if (v18)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v7);
    v16 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v14 = 0;
      v12 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v8 = (NSString *)v18;
      }
      else if (v18)
      {
        v15 = objc_msgSend(v18, "domain");
        v14 = 1;
        v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v15, objc_msgSend(v18, "code"));
        v13 = v8;
        v12 = 1;
      }
      else
      {
        v8 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v8);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v16, "Preheating software update cache failed: %{public}@", buf, 0xCu);
      if ((v12 & 1) != 0)

      if ((v14 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v11 = (os_log_t)(id)_BYLoggingFacility(v7);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      if (location[0])
        v9 = CFSTR("did");
      else
        v9 = CFSTR("did not");
      if (v19)
        v10 = CFSTR("did");
      else
        v10 = CFSTR("did not");
      sub_10003A6BC((uint64_t)v21, (uint64_t)v9, (uint64_t)v10);
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Software update preheating succeeded and %{public}@ find preferred update, and %{public}@ find latest update", v21, 0x16u);
    }
    objc_storeStrong((id *)&v11, 0);
  }
  objc_storeStrong(&v18, 0);
  objc_storeStrong(&v19, 0);
  objc_storeStrong(location, 0);
}

void sub_10003D0C8(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "suspendTask", a1, a1);
  objc_msgSend(v1, "preheat");

}

void sub_10003D114(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "navigationFlowController", a1, a1);
  objc_msgSend(v1, "handleDebugGesture");

}

void sub_10003D160(uint64_t a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend(*(id *)(a1 + 32), "environment", a1, a1);
  v2 = objc_msgSend(v1, "buddyPreferencesExcludedFromBackup");
  objc_msgSend(v2, "setObject:forKey:persistImmediately:", &__kCFBooleanTrue, CFSTR("DisplayZoomRestart"), 1);

}

void sub_10003D648(uint64_t a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend(*(id *)(a1 + 32), "environment", a1, a1);
  v2 = objc_msgSend(v1, "suspendTask");
  objc_msgSend(v2, "preheat");

}

void sub_10003D784(id a1, NSError *a2)
{
  uint64_t v3;
  NSString *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t v7[15];
  os_log_type_t v8;
  os_log_t v9;
  char v10;
  id v11;
  char v12;
  id v13;
  os_log_type_t v14;
  os_log_t oslog[2];
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    v14 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v12 = 0;
      v10 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v4 = (NSString *)location[0];
      }
      else if (location[0])
      {
        v13 = objc_msgSend(location[0], "domain");
        v12 = 1;
        v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v13, objc_msgSend(location[0], "code"));
        v11 = v4;
        v10 = 1;
      }
      else
      {
        v4 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v4);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v14, "Failed to check for updated carrier bundles: %{public}@", buf, 0xCu);
      if ((v10 & 1) != 0)

      if ((v12 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v9 = (os_log_t)(id)_BYLoggingFacility(v3);
    v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v9;
      v6 = v8;
      sub_100038C3C(v7);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Successfully checked for updated carrier bundles", v7, 2u);
    }
    objc_storeStrong((id *)&v9, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_10003E37C(_QWORD *a1)
{
  void *v1;
  uint64_t v2;
  os_log_t oslog;
  id obj;
  id location[3];
  uint8_t buf[24];

  location[2] = a1;
  location[1] = a1;
  location[0] = 0;
  v1 = (void *)a1[4];
  obj = 0;
  objc_msgSend(v1, "installWiFiProfileIfNeeded:", &obj);
  objc_storeStrong(location, obj);
  if (location[0])
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v2);
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      sub_100039500((uint64_t)buf, (uint64_t)location[0]);
      _os_log_error_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_ERROR, "Failed to install Wi-Fi profile with error: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_10003E798(uint64_t a1)
{
  id v2;
  id v3;
  unsigned __int8 v4;
  id v5;
  id v6;

  v2 = objc_msgSend(*(id *)(a1 + 32), "environment", a1, a1);
  v3 = objc_msgSend(v2, "proximitySetupController");
  v4 = objc_msgSend(v3, "shouldEnableProximity");

  if ((v4 & 1) != 0)
  {
    v5 = objc_msgSend(*(id *)(a1 + 32), "environment");
    v6 = objc_msgSend(v5, "proximitySetupController");
    objc_msgSend(v6, "beginAdvertisingProximitySetup");

  }
}

double sub_10003EB04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 138412546;
  *(_DWORD *)a1 = 138412546;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(_QWORD *)(a1 + 14) = a3;
  return result;
}

void sub_1000418C0(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  void **v6;
  int v7;
  int v8;
  void (*v9)(id *, void *);
  void *v10;
  objc_class *v11;
  uint8_t buf[15];
  os_log_type_t v13;
  os_log_t oslog[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
  v13 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog[0];
    v5 = v13;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "User requested Emergency Call", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  v6 = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_1000419F8;
  v10 = &unk_100280A00;
  v11 = a1[4].isa;
  +[EmergencyDialer requestEmergencyCallControllerWithCompletion:](EmergencyDialer, "requestEmergencyCallControllerWithCompletion:", &v6);
  objc_storeStrong((id *)a1[4].isa + 2, 0);
  objc_storeStrong((id *)&v11, 0);
  objc_storeStrong(location, 0);
}

void sub_1000419F8(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_storeStrong((id *)a1[4] + 6, location[0]);
  objc_msgSend(*((id *)a1[4] + 6), "setDelegate:", a1[4]);
  objc_msgSend(a1[4], "endAdvertisingProximitySetup");
  v3 = objc_msgSend(a1[4], "navigationController");
  v4 = objc_msgSend(v3, "presentedViewController");

  v5 = objc_msgSend(a1[4], "navigationController");
  if (v4)
  {
    v6 = objc_msgSend(v5, "presentedViewController");
    objc_msgSend(v6, "presentViewController:animated:completion:", *((_QWORD *)a1[4] + 6), 1, 0);

  }
  else
  {
    objc_msgSend(v5, "presentViewController:animated:completion:", *((_QWORD *)a1[4] + 6), 1, 0);
  }

  objc_storeStrong(location, 0);
}

void sub_100041B38(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  id v6;
  id v7;
  _WORD v8[7];
  os_log_type_t v9;
  os_log_t oslog[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
  v9 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog[0];
    v5 = v9;
    sub_100038C3C(v8);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "User requested Accessibility Options", (uint8_t *)v8, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  -[objc_class _removeSBAlertItemsSupressionAssertion](a1[4].isa, "_removeSBAlertItemsSupressionAssertion");
  v6 = -[objc_class navigationController](a1[4].isa, "navigationController");
  objc_msgSend(v6, "presentViewController:animated:completion:", a1[5].isa, 1, 0);

  objc_storeStrong((id *)a1[4].isa + 2, 0);
  v7 = +[BuddySIMManager sharedManager](BuddySIMManager, "sharedManager");
  objc_msgSend(v7, "allowSIMUnlock");

  objc_storeStrong(location, 0);
}

void sub_100041C68(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  id v6;
  _WORD v7[7];
  os_log_type_t v8;
  os_log_t oslog[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
  v8 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog[0];
    v5 = v8;
    sub_100038C3C(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "User requested Wi-Fi Options", (uint8_t *)v7, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  -[objc_class _removeSBAlertItemsSupressionAssertion](a1[4].isa, "_removeSBAlertItemsSupressionAssertion");
  -[objc_class _showModalWiFiSettings](a1[4].isa, "_showModalWiFiSettings");
  objc_storeStrong((id *)a1[4].isa + 2, 0);
  v6 = +[BuddySIMManager sharedManager](BuddySIMManager, "sharedManager");
  objc_msgSend(v6, "allowSIMUnlock");

  objc_storeStrong(location, 0);
}

void sub_100041D6C(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  objc_class *v11;
  NSString *v12;
  id v13;
  id v14;
  _WORD v15[7];
  os_log_type_t v16;
  os_log_t oslog[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
  v16 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog[0];
    v5 = v16;
    sub_100038C3C(v15);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "User requested Start Over", (uint8_t *)v15, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  -[objc_class _removeSBAlertItemsSupressionAssertion](a1[4].isa, "_removeSBAlertItemsSupressionAssertion");
  v6 = -[objc_class navigationFlowController](a1[4].isa, "navigationFlowController");
  objc_msgSend(v6, "restartFlow");

  v7 = -[objc_class environment](a1[4].isa, "environment");
  v8 = objc_msgSend(v7, "analyticsManager");
  v9 = -[objc_class navigationController](a1[4].isa, "navigationController");
  v10 = objc_msgSend(v9, "topViewController");
  v11 = (objc_class *)objc_opt_class(v10);
  v12 = NSStringFromClass(v11);
  +[BuddyStartOverAnalytics addRestartEventWithAnalyticsManager:paneIdentifier:](_TtC5Setup23BuddyStartOverAnalytics, "addRestartEventWithAnalyticsManager:paneIdentifier:", v8, v12);

  v13 = -[objc_class environment](a1[4].isa, "environment");
  v14 = objc_msgSend(v13, "analyticsManager");
  objc_msgSend(v14, "removeNonPersistentEvents");

  objc_storeStrong((id *)a1[4].isa + 2, 0);
  objc_storeStrong(location, 0);
}

void sub_100041F5C(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  id v6;
  _WORD v7[7];
  os_log_type_t v8;
  os_log_t oslog[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
  v8 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog[0];
    v5 = v8;
    sub_100038C3C(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "User requested shut down UI...", (uint8_t *)v7, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  SBSPresentPowerDownUI();
  -[objc_class _removeSBAlertItemsSupressionAssertion](a1[4].isa, "_removeSBAlertItemsSupressionAssertion");
  objc_storeStrong((id *)a1[4].isa + 2, 0);
  v6 = +[BuddySIMManager sharedManager](BuddySIMManager, "sharedManager");
  objc_msgSend(v6, "allowSIMUnlock");

  objc_storeStrong(location, 0);
}

void sub_10004205C(id a1, UIAlertAction *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  id v6;
  _WORD v7[7];
  os_log_type_t v8;
  os_log_t oslog[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
  v8 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog[0];
    v5 = v8;
    sub_100038C3C(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "User requested log out...", (uint8_t *)v7, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  v6 = +[BYManagedAppleIDBootstrap sharedManager](BYManagedAppleIDBootstrap, "sharedManager");
  objc_msgSend(v6, "switchToLoginWindowDueToError:completion:", 0, &stru_100280AB0);

  objc_storeStrong(location, 0);
}

void sub_100042144(id a1, NSError *a2)
{
  uint64_t v3;
  NSString *v4;
  char v5;
  NSString *v6;
  char v7;
  id v8;
  os_log_t oslog[2];
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v7 = 0;
    v5 = 0;
    if ((_BYIsInternalInstall() & 1) != 0)
    {
      v4 = (NSString *)location[0];
    }
    else if (location[0])
    {
      v8 = objc_msgSend(location[0], "domain");
      v7 = 1;
      v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v8, objc_msgSend(location[0], "code"));
      v6 = v4;
      v5 = 1;
    }
    else
    {
      v4 = 0;
    }
    sub_100039500((uint64_t)buf, (uint64_t)v4);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Switch to login window finished with error: %{public}@", buf, 0xCu);
    if ((v5 & 1) != 0)

    if ((v7 & 1) != 0)
  }
  objc_storeStrong((id *)oslog, 0);
  objc_storeStrong(location, 0);
}

void sub_1000422F0(id a1, UIAlertAction *a2)
{
  id v2;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v2 = +[BYPreferencesController buddyPreferencesEphemeral](BYPreferencesController, "buddyPreferencesEphemeral");
  objc_msgSend(v2, "setObject:forKey:", &__kCFBooleanFalse, CFSTR("showInternalUI"));

  objc_storeStrong(location, 0);
}

void sub_100042370(id a1, UIAlertAction *a2)
{
  id v2;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v2 = +[BYPreferencesController buddyPreferencesEphemeral](BYPreferencesController, "buddyPreferencesEphemeral");
  objc_msgSend(v2, "setObject:forKey:", &__kCFBooleanTrue, CFSTR("showInternalUI"));

  objc_storeStrong(location, 0);
}

void sub_1000423F0(id *a1, void *a2)
{
  id v3;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "_removeSBAlertItemsSupressionAssertion");
  objc_storeStrong((id *)a1[4] + 2, 0);
  v3 = +[BuddySIMManager sharedManager](BuddySIMManager, "sharedManager");
  objc_msgSend(v3, "allowSIMUnlock");

  objc_storeStrong(location, 0);
}

id sub_1000428F0()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE818;
  v13 = qword_1002EE818;
  if (!qword_1002EE818)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10004C0B8;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_10004C0B8(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

id sub_1000429DC()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE828;
  v13 = qword_1002EE828;
  if (!qword_1002EE828)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10004C444;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_10004C444(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

id sub_100042AC8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "startAnimation", a1, a1);
}

void sub_100042F50(uint64_t a1)
{
  id v2;
  id v3;

  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setUserInteractionEnabled:", 1, a1, a1);
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 40) & 1) != 0)
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "navigationFlowController");
    objc_msgSend(v2, "proceedPastLanguageLocalePane");

    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 40) = 0;
  }
  else if ((objc_msgSend(*(id *)(a1 + 32), "shouldProceedFromAppearancePane") & 1) != 0)
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "navigationFlowController");
    objc_msgSend(v3, "proceedPastAppearancePane");

    objc_msgSend(*(id *)(a1 + 32), "setShouldProceedFromAppearancePane:", 0);
  }
}

void sub_1000430B8(uint64_t a1)
{
  id v2;
  unsigned __int8 v3;
  id v4;
  unsigned __int8 v5;
  uint64_t v6;
  void *v7;
  void **v8;
  int v9;
  int v10;
  void (*v11)(uint64_t);
  void *v12;
  id v13;
  os_log_type_t v14;
  os_log_t oslog;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint8_t buf[24];

  v19 = a1;
  v18 = a1;
  v17 = 0;
  v2 = +[BYSetupStateManager sharedManager](BYSetupStateManager, "sharedManager");
  v3 = 1;
  if ((objc_msgSend(v2, "didSetupUsingiTunes") & 1) == 0)
    v3 = objc_msgSend(*(id *)(a1 + 32), "_didRestoreIniTunes");

  v17 = v3 & 1;
  v4 = +[BuddyActivationConfiguration currentConfiguration](BuddyActivationConfiguration, "currentConfiguration");
  v5 = objc_msgSend(v4, "isActivated");

  v16 = v5 & 1;
  v6 = _BYLoggingEnabled();
  if ((v6 & 1) != 0)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v6);
    v14 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003CBAC((uint64_t)buf, v17 & 1, v16 & 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v14, "SetupState changed, restored=%d, activated=%d", buf, 0xEu);
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  if ((v17 & 1) != 0 && (v16 & 1) != 0)
  {
    v7 = &_dispatch_main_q;
    v8 = _NSConcreteStackBlock;
    v9 = -1073741824;
    v10 = 0;
    v11 = sub_1000432C4;
    v12 = &unk_100280730;
    v13 = *(id *)(a1 + 32);
    dispatch_async((dispatch_queue_t)v7, &v8);

    objc_storeStrong(&v13, 0);
  }
}

void sub_1000432C4(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "navigationFlowController", a1, a1);
  objc_msgSend(v1, "setUpByComputer");

}

id *sub_10004361C(id *result)
{
  if (((_BYTE)result[5] & 1) != 0)
    return (id *)objc_msgSend(result[4], "_languageChangeAlertDone", result, result);
  return result;
}

id sub_100043828()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE838;
  v13 = qword_1002EE838;
  if (!qword_1002EE838)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10004C7D0;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_10004C7D0(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_100043914(id a1, BOOL a2, NSError *a3)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  os_log_t v7;
  uint8_t buf[7];
  os_log_type_t v9;
  os_log_t oslog[2];
  id location;
  BOOL v12;
  id v13;
  uint8_t v14[24];

  v13 = a1;
  v12 = a2;
  location = 0;
  objc_storeStrong(&location, a3);
  oslog[1] = (os_log_t)a1;
  if (v12)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v5 = oslog[0];
      v6 = v9;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Successfully set up QR code control center module", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v7 = (os_log_t)(id)_BYLoggingFacility(v4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      sub_100038C28((uint64_t)v14, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Failed to set up QR code control center module: %@", v14, 0xCu);
    }
    objc_storeStrong((id *)&v7, 0);
  }
  objc_storeStrong(&location, 0);
}

double sub_100043C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 138543618;
  *(_DWORD *)a1 = 138543618;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2048;
  *(_QWORD *)(a1 + 14) = a3;
  return result;
}

double sub_100044C74(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  double result;

  *(_QWORD *)&result = 138543874;
  *(_DWORD *)a1 = 138543874;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2114;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 1024;
  *(_DWORD *)(a1 + 24) = a4;
  return result;
}

id sub_1000464DC(uint64_t a1)
{
  id v2;
  id v3;

  objc_msgSend(*(id *)(a1 + 32), "setApplyingProximitySettings:", 1, a1, a1);
  v2 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
  v3 = objc_msgSend(v2, "topViewController");
  +[BFFViewControllerSpinnerManager startAnimatingSpinnerFor:identifier:](BFFViewControllerSpinnerManager, "startAnimatingSpinnerFor:identifier:", v3, CFSTR("SETUP_CONTROLLER"));

  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setUserInteractionEnabled:", 0);
}

void sub_100046678(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "proximityPairingController", a1, a1);
  objc_msgSend(v2, "prepareForLanguageChange:", *(_QWORD *)(a1 + 40));

}

void sub_1000467BC(uint64_t a1)
{
  id v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  id v7;
  id v8;
  void **v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t);
  void *v12;
  id v13;
  char v14;
  uint64_t v15;
  uint64_t v16;

  v16 = a1;
  v15 = a1;
  objc_msgSend(*(id *)(a1 + 32), "setApplyingProximitySettings:", 0);
  v2 = objc_msgSend(*(id *)(a1 + 32), "setupAnalytics");
  objc_msgSend(v2, "setUsedProximitySetup:", 1);

  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:](BFFViewControllerSpinnerManager, "stopAnimatingSpinnerFor:", CFSTR("SETUP_CONTROLLER"));
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setUserInteractionEnabled:", 1);
  v14 = 0;
  v3 = *(void **)(a1 + 32);
  v9 = _NSConcreteStackBlock;
  v10 = 3221225472;
  v11 = sub_10004695C;
  v12 = &unk_100280780;
  v13 = *(id *)(a1 + 40);
  v14 = objc_msgSend(v3, "updateLanguageLocale:", &v9) & 1;
  if (!v14)
  {
    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(_QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, v4, v5);
    v6 = objc_msgSend(*(id *)(a1 + 32), "proximityPairingController", v9, v10, v11, v12);
    v7 = objc_msgSend(v6, "delegate");
    v8 = objc_msgSend(*(id *)(a1 + 32), "proximityPairingController");
    objc_msgSend(v7, "flowItemDone:", v8);

  }
  objc_msgSend(*(id *)(a1 + 32), "setProximityPairingController:", 0, v9, v10, v11, v12);
  objc_storeStrong(&v13, 0);
}

uint64_t sub_10004695C(uint64_t result)
{
  if (*(_QWORD *)(result + 32))
    return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(result + 32) + 16))(*(_QWORD *)(result + 32), 1);
  return result;
}

void sub_100046A44(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;

  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:](BFFViewControllerSpinnerManager, "stopAnimatingSpinnerFor:", CFSTR("SETUP_CONTROLLER"), a1, a1);
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setUserInteractionEnabled:", 1);
  v2 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
  v3 = objc_msgSend(v2, "topViewController");
  v4 = objc_msgSend(*(id *)(a1 + 32), "proximityPairingController");

  if (v3 == v4)
  {
    v5 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
    v6 = objc_msgSend(v5, "popViewControllerAnimated:", 1);

    objc_msgSend(*(id *)(a1 + 32), "setProximityPairingController:", 0);
  }
}

id sub_100046BEC(uint64_t a1)
{
  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:](BFFViewControllerSpinnerManager, "stopAnimatingSpinnerFor:", CFSTR("SETUP_CONTROLLER"), a1, a1);
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setUserInteractionEnabled:", 1);
}

double sub_100046FA0(_DWORD *a1, int a2)
{
  double result;

  *(_QWORD *)&result = 67109120;
  *a1 = 67109120;
  a1[1] = a2;
  return result;
}

void sub_100046FB4(uint64_t a1)
{
  id v2;
  unsigned __int8 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  id v7;
  id v8;
  id v9;
  _WORD v10[3];
  os_log_type_t v11;
  os_log_t oslog[3];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  v2 = objc_msgSend(*(id *)(a1 + 32), "navigationFlowController");
  v3 = 0;
  if ((objc_msgSend(v2, "currentlyShowingActivationFlow") & 1) == 0)
    v3 = objc_msgSend(*(id *)(a1 + 32), "shouldEndLifecycleForCause:", 0);

  if ((v3 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v11 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v5 = oslog[0];
      v6 = v11;
      sub_100038C3C(v10);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Terminating due to activation state change...", (uint8_t *)v10, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    objc_msgSend(*(id *)(a1 + 32), "willEndLifecycleDueToCause:allowDismissal:", 0, 1);
    objc_msgSend(*(id *)(a1 + 32), "endLifecycleDueToCause:", 0);
  }
  else
  {
    v7 = objc_msgSend(*(id *)(a1 + 32), "navigationFlowController");
    v8 = objc_msgSend(v7, "wifiController");
    objc_msgSend(v8, "updateNextButton");

    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      v9 = objc_msgSend(*(id *)(a1 + 32), "inactivityTimer");
      objc_msgSend(v9, "stop");

    }
  }
}

void sub_100047E4C(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "_prepareForMigrationReboot");
  objc_storeStrong(location, 0);
}

void sub_100047E8C(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  id v6;
  id v7;
  id v8;
  _WORD v9[7];
  char v10;
  os_log_t oslog[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    v10 = 16;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v4 = oslog[0];
      v5 = v10;
      sub_100038C3C(v9);
      _os_log_error_impl((void *)&_mh_execute_header, v4, v5, "Keychain data transfer failed; not starting preflight",
        (uint8_t *)v9,
        2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v6 = -[objc_class environment](a1[4].isa, "environment");
    v7 = objc_msgSend(v6, "miscState");
    v8 = objc_msgSend(v7, "migrationManager");
    objc_msgSend(v8, "startPreflight");

  }
  objc_storeStrong(location, 0);
}

void sub_100048334(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  id v6;
  id v7;
  id v8;
  _WORD v9[7];
  char v10;
  os_log_t oslog[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    v10 = 16;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v4 = oslog[0];
      v5 = v10;
      sub_100038C3C(v9);
      _os_log_error_impl((void *)&_mh_execute_header, v4, v5, "Not starting keychain data import as keychain data transfer failed", (uint8_t *)v9, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v6 = -[objc_class environment](a1[4].isa, "environment");
    v7 = objc_msgSend(v6, "miscState");
    v8 = objc_msgSend(v7, "migrationManager");
    objc_msgSend(v8, "startKeychainDataImport");

  }
  objc_storeStrong(location, 0);
}

void sub_100048F48(uint64_t a1)
{
  id v2;
  id v3;
  NSNumber *v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "environment", a1, a1);
  v3 = objc_msgSend(v2, "buddyPreferencesExcludedFromBackup");
  v4 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:", *(double *)(a1 + 40));
  objc_msgSend(v3, "setObject:forKey:persistImmediately:", v4, CFSTR("localeScrollOffset"), 1);

}

void sub_10004984C(NSObject *a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  void **v11;
  int v12;
  int v13;
  id (*v14);
  void *v15;
  objc_class *v16;
  int v17;
  uint8_t buf[15];
  os_log_type_t v19;
  os_log_t oslog[2];
  id v21;
  id v22;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v22 = 0;
  objc_storeStrong(&v22, a3);
  v21 = 0;
  objc_storeStrong(&v21, a4);
  oslog[1] = a1;
  if (v22)
  {
    v10 = &_dispatch_main_q;
    v11 = _NSConcreteStackBlock;
    v12 = -1073741824;
    v13 = 0;
    v14 = sub_1000499E0;
    v15 = &unk_100280730;
    v16 = a1[4].isa;
    dispatch_sync((dispatch_queue_t)v10, &v11);

    objc_storeStrong((id *)&v16, 0);
    v17 = 0;
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v7);
    v19 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v8 = oslog[0];
      v9 = v19;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Ignoring display layout observation; no layout given...",
        buf,
        2u);
    }
    objc_storeStrong((id *)oslog, 0);
    v17 = 1;
  }
  objc_storeStrong(&v21, 0);
  objc_storeStrong(&v22, 0);
  objc_storeStrong(location, 0);
}

id sub_1000499E0(NSObject *a1)
{
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  _WORD v6[3];
  os_log_type_t v7;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  v2 = -[objc_class monitor](a1[4].isa, "monitor");
  objc_msgSend(v2, "invalidate");

  oslog[0] = (os_log_t)(id)_BYLoggingFacility(-[objc_class setMonitor:](a1[4].isa, "setMonitor:", 0));
  v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v3 = oslog[0];
    v4 = v7;
    sub_100038C3C(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Handling display layout update...", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  -[objc_class markBuddyComplete](a1[4].isa, "markBuddyComplete");
  return -[objc_class didMarkBuddyComplete](a1[4].isa, "didMarkBuddyComplete");
}

void sub_10004A628(id a1, NSError *a2)
{
  uint64_t v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  _WORD v7[3];
  os_log_type_t v8;
  os_log_t v9;
  id v10;
  os_log_type_t v11;
  os_log_t oslog[2];
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    v11 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_100039500((uint64_t)buf, (uint64_t)location[0]);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v11, "Failed to enable lockdown: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
    v10 = objc_msgSend(objc_alloc((Class)FBSShutdownOptions), "initWithReason:", CFSTR("Failed Lockdown Reboot"));
    objc_msgSend(v10, "setRebootType:", 1);
    v4 = +[FBSSystemService sharedService](FBSSystemService, "sharedService");
    objc_msgSend(v4, "shutdownWithOptions:", v10);

    objc_storeStrong(&v10, 0);
  }
  else
  {
    v9 = (os_log_t)(id)_BYLoggingFacility(v3);
    v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v9;
      v6 = v8;
      sub_100038C3C(v7);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Lockdown enabled", (uint8_t *)v7, 2u);
    }
    objc_storeStrong((id *)&v9, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_10004A7F0(id a1, NSError *a2)
{
  void *v2;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v2 = &_dispatch_main_q;
  dispatch_async((dispatch_queue_t)v2, &stru_100280C30);

  objc_storeStrong(location, 0);
}

void sub_10004A864(id a1)
{
  NSObject *v1;
  os_log_type_t v2;
  UIApplication *v3;
  _WORD v4[3];
  os_log_type_t v5;
  os_log_t oslog[3];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v5 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v1 = oslog[0];
    v2 = v5;
    sub_100038C3C(v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Suspending...", (uint8_t *)v4, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  v3 = +[UIApplication sharedApplication](UIApplication, "sharedApplication");
  -[UIApplication suspend](v3, "suspend");

}

void sub_10004AB34(uint64_t a1)
{
  id v2;
  unsigned __int8 v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  unsigned __int8 v7;
  NSUserDefaults *v8;
  unsigned __int8 v9;
  id v10;
  id v11;
  unsigned __int8 v12;
  void *v13;
  char v14;
  char v15;
  char v16;

  v2 = +[BYSetupStateManager sharedManager](BYSetupStateManager, "sharedManager");
  v3 = objc_msgSend(v2, "didRestoreFromBackup");

  v16 = v3 & 1;
  v15 = BYSetupAssistantHasCompletedInitialRun(v4, v5) & 1;
  v6 = +[BuddyCloudConfigManager sharedManager](BuddyCloudConfigManager, "sharedManager");
  v7 = objc_msgSend(v6, "isMultiUser");

  v14 = v7 & 1;
  v8 = +[NSUserDefaults standardUserDefaults](NSUserDefaults, "standardUserDefaults");
  v9 = -[NSUserDefaults BOOLForKey:](v8, "BOOLForKey:", CFSTR("AnimateLanguageChoice"));

  if ((v9 & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setCachedStartupCause:", 1);
    goto LABEL_18;
  }
  v10 = objc_msgSend(*(id *)(a1 + 32), "environment");
  v11 = objc_msgSend(v10, "buddyPreferencesExcludedFromBackup");
  v12 = objc_msgSend(v11, "BOOLForKey:", CFSTR("DisplayZoomRestart"));

  if ((v12 & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setCachedStartupCause:", 2);
    goto LABEL_18;
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "_isBackInBuddyForActivationOnly") & 1) != 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 105) & 1) == 0)
    {
      objc_msgSend(*(id *)(a1 + 32), "setCachedStartupCause:", 3);
      goto LABEL_18;
    }
    goto LABEL_7;
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "launchedForMigration") & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setCachedStartupCause:", 6);
    goto LABEL_18;
  }
  if ((objc_msgSend(*(id *)(a1 + 32), "_isBackInBuddyAfterRestoreFromBackup:", v16 & 1) & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setCachedStartupCause:", 4);
    goto LABEL_18;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 105) & 1) != 0)
  {
LABEL_7:
    objc_msgSend(*(id *)(a1 + 32), "setCachedStartupCause:", 7);
    goto LABEL_18;
  }
  if ((v15 & 1) == 0 || (v14 & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "setCachedStartupCause:", 0);
  else
    objc_msgSend(*(id *)(a1 + 32), "setCachedStartupCause:", 5);
LABEL_18:
  v13 = &_dispatch_main_q;
  dispatch_async((dispatch_queue_t)v13, *(dispatch_block_t *)(a1 + 40));

}

void sub_10004BD2C(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_10004BE6C();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("DMCReturnToServiceController");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getDMCReturnToServiceControllerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("SetupController.m"), 187, CFSTR("Unable to find class %s"), "DMCReturnToServiceController");

    __break(1u);
  }
  qword_1002EE808 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_10004BE6C()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_10004BF98((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *DMCEnrollmentProviderLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SetupController.m"), 186, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_10004BF98(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE810;
  v9 = qword_1002EE810;
  if (!qword_1002EE810)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10004C028;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_10004C028((uint64_t)&v2);
  }
  return qword_1002EE810;
}

uint64_t sub_10004C028(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/DMCEnrollmentProvider.framework/DMCEnrollmentProvider";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE810 = result;
  return result;
}

void sub_10004C0B8(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_10004C1F8();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("WFBuddyViewController");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getWFBuddyViewControllerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("SetupController.m"), 196, CFSTR("Unable to find class %s"), "WFBuddyViewController");

    __break(1u);
  }
  qword_1002EE818 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_10004C1F8()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_10004C324((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *WiFiKitUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SetupController.m"), 195, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_10004C324(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE820;
  v9 = qword_1002EE820;
  if (!qword_1002EE820)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10004C3B4;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_10004C3B4((uint64_t)&v2);
  }
  return qword_1002EE820;
}

uint64_t sub_10004C3B4(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/WiFiKitUI.framework/WiFiKitUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE820 = result;
  return result;
}

void sub_10004C444(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_10004C584();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("WFNetworkListController");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getWFNetworkListControllerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("SetupController.m"), 198, CFSTR("Unable to find class %s"), "WFNetworkListController");

    __break(1u);
  }
  qword_1002EE828 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_10004C584()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_10004C6B0((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *WiFiKitLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SetupController.m"), 194, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_10004C6B0(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE830;
  v9 = qword_1002EE830;
  if (!qword_1002EE830)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10004C740;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_10004C740((uint64_t)&v2);
  }
  return qword_1002EE830;
}

uint64_t sub_10004C740(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/WiFiKit.framework/WiFiKit";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE830 = result;
  return result;
}

void sub_10004C7D0(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_10004C910();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("BCSConfigurationManager");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getBCSConfigurationManagerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("SetupController.m"), 211, CFSTR("Unable to find class %s"), "BCSConfigurationManager");

    __break(1u);
  }
  qword_1002EE838 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_10004C910()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_10004CA3C((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *BarcodeSupportLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("SetupController.m"), 210, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_10004CA3C(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE840;
  v9 = qword_1002EE840;
  if (!qword_1002EE840)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10004CACC;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_10004CACC((uint64_t)&v2);
  }
  return qword_1002EE840;
}

uint64_t sub_10004CACC(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/BarcodeSupport.framework/BarcodeSupport";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE840 = result;
  return result;
}

id sub_10004F400(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_finishedWithPasscode:", *(_QWORD *)(a1 + 40), a1, a1);
}

void sub_1000501AC(NSObject *a1, uint64_t a2, id obj)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  int v7;
  NSString *v8;
  char v9;
  NSString *v10;
  char v11;
  id v12;
  os_log_t v13;
  uint8_t buf[7];
  os_log_type_t v15;
  os_log_t oslog[2];
  __int128 location;
  NSObject *v18;
  uint8_t v19[24];

  v18 = a1;
  *((_QWORD *)&location + 1) = a2;
  *(_QWORD *)&location = 0;
  objc_storeStrong((id *)&location, obj);
  oslog[1] = a1;
  if (location == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v15 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v5 = oslog[0];
      v6 = v15;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Renew credentials was successful!", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v13 = (os_log_t)(id)_BYLoggingFacility(v4);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v7 = DWORD2(location);
      v11 = 0;
      v9 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v8 = (NSString *)location;
      }
      else if ((_QWORD)location)
      {
        v12 = objc_msgSend((id)location, "domain");
        v11 = 1;
        v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v12, objc_msgSend((id)location, "code"));
        v10 = v8;
        v9 = 1;
      }
      else
      {
        v8 = 0;
      }
      sub_1000503FC((uint64_t)v19, v7, (uint64_t)v8);
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Renew credentials failed (%d): %{public}@", v19, 0x12u);
      if ((v9 & 1) != 0)

      if ((v11 & 1) != 0)
    }
    objc_storeStrong((id *)&v13, 0);
  }
  -[objc_class startRestore:](a1[4].isa, "startRestore:", a1[5].isa);
  objc_storeStrong((id *)&location, 0);
}

double sub_1000503FC(uint64_t a1, int a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 67109378;
  *(_DWORD *)a1 = 67109378;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 2114;
  *(_QWORD *)(a1 + 10) = a3;
  return result;
}

void sub_10005050C(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  id v5;
  id v6;
  void *v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  void **v12;
  int v13;
  int v14;
  void (*v15)(uint64_t, void *);
  void *v16;
  id v17[2];
  os_log_type_t v18;
  os_log_t oslog;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint8_t buf[24];

  v22 = a1;
  v21 = a1;
  objc_msgSend(*(id *)(a1 + 32), "setBackupItem:", *(_QWORD *)(a1 + 40));
  v20 = 0;
  v2 = objc_msgSend(*(id *)(a1 + 32), "backupItem");
  v3 = objc_msgSend(v2, "snapshotID");

  v20 = v3;
  oslog = (os_log_t)(id)_BYLoggingFacility(v4);
  v18 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    v5 = objc_msgSend(*(id *)(a1 + 32), "backupItem");
    v6 = objc_msgSend(v5, "backupUDID");
    sub_100050750((uint64_t)buf, (uint64_t)v6, (uint64_t)v20);
    _os_log_impl((void *)&_mh_execute_header, oslog, v18, "Starting iCloud Restore for backup UDID %@ and snapshot %ld...", buf, 0x16u);

  }
  objc_storeStrong((id *)&oslog, 0);
  v7 = *(void **)(*(_QWORD *)(a1 + 32) + 104);
  v8 = objc_msgSend(*(id *)(a1 + 32), "backupItem");
  v9 = objc_msgSend(v8, "backupUDID");
  v10 = v20;
  v11 = objc_msgSend(*(id *)(a1 + 32), "_createRestoreOptions");
  v12 = _NSConcreteStackBlock;
  v13 = -1073741824;
  v14 = 0;
  v15 = sub_100050770;
  v16 = &unk_100280D50;
  v17[0] = *(id *)(a1 + 32);
  v17[1] = v20;
  objc_msgSend(v7, "startRestoreForBackupUDID:snapshotID:options:completion:", v9, v10, v11, &v12);

  objc_storeStrong(v17, 0);
}

double sub_100050750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 138412546;
  *(_DWORD *)a1 = 138412546;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2048;
  *(_QWORD *)(a1 + 14) = a3;
  return result;
}

void sub_100050770(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  NSString *v7;
  char v8;
  NSString *v9;
  char v10;
  id v11;
  os_log_t oslog;
  void **block;
  int v14;
  int v15;
  id (*v16)(uint64_t);
  void *v17;
  id v18;
  uint8_t buf[15];
  os_log_type_t v20;
  id v21[2];
  id location[2];
  uint8_t v23[24];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v21[1] = (id)a1;
  if (location[0])
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v3);
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 0;
      v8 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v7 = (NSString *)location[0];
      }
      else if (location[0])
      {
        v11 = objc_msgSend(location[0], "domain");
        v10 = 1;
        v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v11, objc_msgSend(location[0], "code"));
        v9 = v7;
        v8 = 1;
      }
      else
      {
        v7 = 0;
      }
      sub_100039500((uint64_t)v23, (uint64_t)v7);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Error starting restore: %{public}@", v23, 0xCu);
      if ((v8 & 1) != 0)

      if ((v10 & 1) != 0)
    }
    objc_storeStrong((id *)&oslog, 0);
    objc_msgSend(*(id *)(a1 + 32), "_failedToStartRestoreForSnapshotID:error:", *(_QWORD *)(a1 + 40), location[0]);
  }
  else
  {
    v21[0] = (id)_BYLoggingFacility(v3);
    v20 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)v21[0], OS_LOG_TYPE_DEFAULT))
    {
      v4 = v21[0];
      v5 = v20;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "iCloud Restore started successfully", buf, 2u);
    }
    objc_storeStrong(v21, 0);
    v6 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v14 = -1073741824;
    v15 = 0;
    v16 = sub_100050A30;
    v17 = &unk_100280730;
    v18 = *(id *)(a1 + 32);
    dispatch_sync((dispatch_queue_t)v6, &block);

    objc_storeStrong(&v18, 0);
  }
  objc_storeStrong(location, 0);
}

id sub_100050A30(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setRestoreState:", 1, a1, a1);
  return objc_msgSend(*(id *)(a1 + 32), "updateProgressText");
}

double sub_10005136C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 134218242;
  *(_DWORD *)a1 = 134218242;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(_QWORD *)(a1 + 14) = a3;
  return result;
}

void sub_10005138C(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  void **block;
  int v8;
  int v9;
  id (*v10)(uint64_t);
  void *v11;
  objc_class *v12;
  uint8_t v13[15];
  os_log_type_t v14;
  os_log_t v15;
  int v16;
  os_log_type_t v17;
  os_log_t oslog[2];
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    v17 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_100039500((uint64_t)buf, (uint64_t)location[0]);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v17, "Failed to start restore: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
    v16 = 1;
  }
  else
  {
    v15 = (os_log_t)(id)_BYLoggingFacility(v3);
    v14 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      v4 = v15;
      v5 = v14;
      sub_100038C3C(v13);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "iCloud Restore started successfully", v13, 2u);
    }
    objc_storeStrong((id *)&v15, 0);
    v6 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v8 = -1073741824;
    v9 = 0;
    v10 = sub_100051584;
    v11 = &unk_100280730;
    v12 = a1[4].isa;
    dispatch_sync((dispatch_queue_t)v6, &block);

    objc_storeStrong((id *)&v12, 0);
    v16 = 0;
  }
  objc_storeStrong(location, 0);
}

id sub_100051584(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setRestoreState:", 1, a1, a1);
  return objc_msgSend(*(id *)(a1 + 32), "updateProgressText");
}

id sub_1000515C4(id *a1)
{
  id v2;
  void **v4;
  int v5;
  int v6;
  void (*v7)(id *);
  void *v8;
  id v9;
  id v10;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  if (objc_msgSend(a1[4], "restoreState") != (id)3 && objc_msgSend(a1[5], "code") != (id)202)
  {
    objc_msgSend(a1[4], "setRestoreState:", 2);
    objc_initWeak(location, a1[4]);
    v2 = a1[5];
    v4 = _NSConcreteStackBlock;
    v5 = -1073741824;
    v6 = 0;
    v7 = sub_100051710;
    v8 = &unk_1002806B8;
    objc_copyWeak(&v9, location);
    v10 = +[BuddyRestoreHelpers alertForBackupError:okButtonAction:](BuddyRestoreHelpers, "alertForBackupError:okButtonAction:", v2, &v4);
    objc_msgSend(a1[4], "_presentAlert:", v10);
    objc_storeStrong(&v10, 0);
    objc_destroyWeak(&v9);
    objc_destroyWeak(location);
  }
  return objc_msgSend(a1[4], "releaseAssertions");
}

void sub_100051710(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "popBackFromProgress");
  objc_storeStrong(location, 0);
}

double sub_100052E50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)&result = 134218498;
  *(_DWORD *)a1 = 134218498;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2112;
  *(_QWORD *)(a1 + 24) = a4;
  return result;
}

double sub_100052E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;

  *(_QWORD *)&result = 134218754;
  *(_DWORD *)a1 = 134218754;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2112;
  *(_QWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 2112;
  *(_QWORD *)(a1 + 34) = a5;
  return result;
}

void sub_10005309C(NSObject *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  Class isa;
  id v9;
  id v10;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = a1;
  oslog[1] = a1;
  v2 = -[objc_class backupDeviceController](a1[4].isa, "backupDeviceController");
  objc_msgSend(v2, "retryBackup");

  v3 = -[objc_class backupDeviceController](a1[4].isa, "backupDeviceController");
  v4 = objc_msgSend(v3, "error");

  if (v4)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v6 = -[objc_class backupDeviceController](a1[4].isa, "backupDeviceController");
      v7 = objc_msgSend(v6, "error");
      sub_100039500((uint64_t)buf, (uint64_t)v7);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Failed to retry backup: %{public}@", buf, 0xCu);

    }
    objc_storeStrong((id *)oslog, 0);
    isa = a1[4].isa;
    v9 = -[objc_class backupDeviceController](isa, "backupDeviceController");
    v10 = objc_msgSend(v9, "error");
    -[objc_class handleBackupFailed:](isa, "handleBackupFailed:", v10);

  }
}

void sub_100053258(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "popBackFromProgress");
  objc_storeStrong(location, 0);
}

void sub_100053390(uint64_t a1)
{
  id v2;
  BOOL v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  NSBundle *v10;
  NSString *v11;
  id v12;
  id v13;
  NSBundle *v14;
  NSString *v15;
  id v16;
  NSBundle *v17;
  NSString *v18;
  UIAlertAction *v19;
  id v20;
  NSBundle *v21;
  NSString *v22;
  UIAlertAction *v23;
  NSObject *v24;
  id v25;
  NSBundle *v26;
  NSString *v27;
  id v28;
  id v29;
  id v30;
  UIAlertAction *v31;
  id v32;
  NSBundle *v33;
  UIAlertAction *v34;
  NSString *v35;
  void **v36;
  int v37;
  int v38;
  void (*v39)(uint64_t, void *);
  void *v40;
  id v41;
  id v42;
  id v43;
  id v44;
  id v45;
  void **block;
  int v47;
  int v48;
  void (*v49)(uint64_t);
  void *v50;
  id v51;
  void **v52;
  int v53;
  int v54;
  void (*v55)(id *, void *);
  void *v56;
  id v57;
  void **v58;
  int v59;
  int v60;
  void (*v61)(id *, void *);
  void *v62;
  id v63;
  id v64;
  id v65;
  id from;
  id v67;
  id v68;
  id v69;
  id v70;
  char v71;
  os_log_type_t v72;
  id location[3];
  uint8_t buf[16];

  location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = (id)_BYLoggingFacility(a1);
  v72 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)location[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_100038C28((uint64_t)buf, *(_QWORD *)(a1 + 32));
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)location[0], v72, "Displaying backup failed alert to user: %@", buf, 0xCu);
  }
  objc_storeStrong(location, 0);
  v71 = 0;
  v70 = 0;
  v2 = objc_msgSend(*(id *)(a1 + 32), "domain");
  v3 = 0;
  if ((objc_msgSend(v2, "isEqualToString:", CFSTR("MBErrorDomain")) & 1) != 0)
    v3 = objc_msgSend(*(id *)(a1 + 32), "code") == (id)303;

  if (v3)
  {
    objc_storeStrong(&v70, CFSTR("BACKUP_FAILED_ALERT_MESSAGE_QUOTA"));
  }
  else
  {
    v4 = objc_msgSend(*(id *)(a1 + 40), "proximitySetupController");
    v71 = objc_msgSend(v4, "hasConnection") & 1;

    v5 = objc_msgSend(*(id *)(a1 + 40), "proximitySetupController");
    v69 = objc_msgSend(v5, "deviceClass");

    v6 = +[BuddyLocalizationUtilities siblingDeviceSpecificLocalizedStringKeyForKey:deviceClass:](BuddyLocalizationUtilities, "siblingDeviceSpecificLocalizedStringKeyForKey:deviceClass:", CFSTR("BACKUP_FAILED_ALERT_MESSAGE"), v69);
    v7 = v70;
    v70 = v6;

    if ((v71 & 1) != 0)
    {
      v8 = (id)SFLocalizableWAPIStringKeyForKey(CFSTR("BACKUP_FAILED_ALERT_MESSAGE_RETRY_WIFI"));
      v9 = v70;
      v70 = v8;

    }
    objc_storeStrong(&v69, 0);
  }
  v10 = +[NSBundle mainBundle](NSBundle, "mainBundle");
  v11 = -[NSBundle localizedStringForKey:value:table:](v10, "localizedStringForKey:value:table:", v70, &stru_100284738, CFSTR("RestoreFromBackup"));
  v12 = objc_msgSend(*(id *)(a1 + 40), "backupDeviceController");
  v13 = objc_msgSend(v12, "backingUpDeviceName");
  v68 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v11, v13);

  v14 = +[NSBundle mainBundle](NSBundle, "mainBundle");
  v15 = -[NSBundle localizedStringForKey:value:table:](v14, "localizedStringForKey:value:table:", CFSTR("BACKUP_FAILED_ALERT_TITLE"), &stru_100284738, CFSTR("RestoreFromBackup"));
  v67 = +[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v15, v68, 1);

  objc_initWeak(&from, *(id *)(a1 + 40));
  v58 = _NSConcreteStackBlock;
  v59 = -1073741824;
  v60 = 0;
  v61 = sub_100053DB8;
  v62 = &unk_100280DA0;
  v63 = *(id *)(a1 + 40);
  objc_copyWeak(&v64, &from);
  v65 = objc_retainBlock(&v58);
  if ((v71 & 1) != 0)
  {
    v16 = v67;
    v17 = +[NSBundle mainBundle](NSBundle, "mainBundle");
    v18 = -[NSBundle localizedStringForKey:value:table:](v17, "localizedStringForKey:value:table:", CFSTR("TRY_AGAIN_ALERT"), &stru_100284738, CFSTR("RestoreFromBackup"));
    v52 = _NSConcreteStackBlock;
    v53 = -1073741824;
    v54 = 0;
    v55 = sub_100053FBC;
    v56 = &unk_100280A28;
    v57 = *(id *)(a1 + 40);
    v19 = +[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v18, 0, &v52);
    objc_msgSend(v16, "addAction:", v19);

    v20 = v67;
    v21 = +[NSBundle mainBundle](NSBundle, "mainBundle");
    v22 = -[NSBundle localizedStringForKey:value:table:](v21, "localizedStringForKey:value:table:", CFSTR("CHOOSE_A_DIFFERENT_BACKUP"), &stru_100284738, CFSTR("RestoreFromBackup"));
    v23 = +[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v22, 1, v65);
    objc_msgSend(v20, "addAction:", v23);

    objc_storeStrong(&v57, 0);
  }
  else
  {
    v24 = dispatch_get_global_queue(0, 0);
    block = _NSConcreteStackBlock;
    v47 = -1073741824;
    v48 = 0;
    v49 = sub_100054008;
    v50 = &unk_100280730;
    v51 = *(id *)(a1 + 40);
    dispatch_async(v24, &block);

    v25 = objc_msgSend(*(id *)(a1 + 40), "pendingRestoreState");
    v45 = objc_msgSend(v25, "backupItem");

    v26 = +[NSBundle mainBundle](NSBundle, "mainBundle");
    v27 = -[NSBundle localizedStringForKey:value:table:](v26, "localizedStringForKey:value:table:", CFSTR("USE_BACKUP_FROM"), &stru_100284738, CFSTR("RestoreFromBackup"));
    v28 = objc_msgSend(v45, "dateString");
    v44 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v27, v28);

    v29 = v67;
    v30 = v44;
    v36 = _NSConcreteStackBlock;
    v37 = -1073741824;
    v38 = 0;
    v39 = sub_10005407C;
    v40 = &unk_100280DC8;
    v41 = *(id *)(a1 + 40);
    v42 = v45;
    objc_copyWeak(&v43, &from);
    v31 = +[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v30, 0, &v36);
    objc_msgSend(v29, "addAction:", v31);

    v32 = v67;
    v33 = +[NSBundle mainBundle](NSBundle, "mainBundle");
    v35 = -[NSBundle localizedStringForKey:value:table:](v33, "localizedStringForKey:value:table:", CFSTR("OTHER_OPTIONS"), &stru_100284738, CFSTR("RestoreFromBackup"));
    v34 = +[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:");
    objc_msgSend(v32, "addAction:", v34);

    objc_destroyWeak(&v43);
    objc_storeStrong(&v42, 0);
    objc_storeStrong(&v41, 0);
    objc_storeStrong(&v44, 0);
    objc_storeStrong(&v45, 0);
    objc_storeStrong(&v51, 0);
  }
  objc_msgSend(*(id *)(a1 + 40), "_presentAlert:", v67);
  objc_storeStrong(&v65, 0);
  objc_destroyWeak(&v64);
  objc_storeStrong(&v63, 0);
  objc_destroyWeak(&from);
  objc_storeStrong(&v67, 0);
  objc_storeStrong(&v68, 0);
  objc_storeStrong(&v70, 0);
}

void sub_100053DB8(id *a1, void *a2)
{
  NSObject *v3;
  void **block;
  int v5;
  int v6;
  void (*v7)(id *);
  void *v8;
  id v9;
  id v10[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = a1;
  v3 = dispatch_get_global_queue(0, 0);
  block = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_100053EA4;
  v8 = &unk_100280D78;
  v9 = a1[4];
  objc_copyWeak(v10, a1 + 5);
  dispatch_async(v3, &block);

  objc_destroyWeak(v10);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_100053EA4(id *a1)
{
  id v2;
  void *v3;
  void **block;
  int v5;
  int v6;
  void (*v7)(id *);
  void *v8;
  id v9[3];

  v9[2] = a1;
  v9[1] = a1;
  v2 = objc_msgSend(a1[4], "proximitySetupController");
  objc_msgSend(v2, "setupFinished");

  v3 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_100053F7C;
  v8 = &unk_1002806B8;
  objc_copyWeak(v9, a1 + 5);
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_destroyWeak(v9);
}

void sub_100053F7C(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "popBackFromProgress");
  objc_storeStrong(location, 0);
}

void sub_100053FBC(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "reattemptBackup");
  objc_storeStrong(location, 0);
}

void sub_100054008(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController", a1, a1);
  objc_msgSend(v2, "setupFinished");

  v3 = objc_msgSend(*(id *)(a1 + 32), "backupDeviceController");
  objc_msgSend(v3, "reset");

}

void sub_10005407C(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  void **v6;
  int v7;
  int v8;
  void (*v9)(id *);
  void *v10;
  id v11;
  id v12[2];
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v12[1] = (id)a1;
  if ((objc_msgSend(*(id *)(a1 + 32), "takeAssertions") & 1) != 0)
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
    v4 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
    v5 = objc_msgSend(v4, "backupItem");
    objc_msgSend(v3, "setAttemptedBackupItem:", v5);

    objc_msgSend(*(id *)(a1 + 32), "setRestoreState:", 0);
    *(_BYTE *)(*(_QWORD *)(a1 + 32) + 8) = 0;
    objc_msgSend(*(id *)(a1 + 32), "updateProgressText");
    objc_msgSend(*(id *)(a1 + 32), "renewCredentialsThenStartRestore:", *(_QWORD *)(a1 + 40));
  }
  else
  {
    v6 = _NSConcreteStackBlock;
    v7 = -1073741824;
    v8 = 0;
    v9 = sub_100054234;
    v10 = &unk_1002806B8;
    objc_copyWeak(&v11, (id *)(a1 + 48));
    v12[0] = +[BuddyRestoreHelpers alertForBackupError:okButtonAction:](BuddyRestoreHelpers, "alertForBackupError:okButtonAction:", 0, &v6);
    objc_msgSend(*(id *)(a1 + 32), "_presentAlert:", v12[0]);
    objc_storeStrong(v12, 0);
    objc_destroyWeak(&v11);
  }
  objc_storeStrong(location, 0);
}

void sub_100054234(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "popBackFromProgress");
  objc_storeStrong(location, 0);
}

id sub_100054694(uint64_t a1)
{
  id v2;
  id v3;
  BOOL v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  NSObject *v9;
  os_log_type_t v10;
  _WORD v11[3];
  os_log_type_t v12;
  os_log_t v13;
  uint8_t buf[15];
  os_log_type_t v15;
  os_log_t oslog;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;

  v19 = a1;
  v18 = a1;
  v17 = 0;
  v2 = objc_msgSend(*(id *)(a1 + 32), "view");
  v3 = objc_msgSend(v2, "window");
  v4 = v3 != 0;

  v17 = v4;
  if (v4)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v5);
    v15 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v6 = oslog;
      v7 = v15;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Backup Progress presenting alert .... ", buf, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    return objc_msgSend(*(id *)(a1 + 32), "presentViewController:animated:completion:", *(_QWORD *)(a1 + 40), 1, 0);
  }
  else
  {
    v13 = (os_log_t)(id)_BYLoggingFacility(v5);
    v12 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v9 = v13;
      v10 = v12;
      sub_100038C3C(v11);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Backup Progress saving alert post viewDidAppear .... ", (uint8_t *)v11, 2u);
    }
    objc_storeStrong((id *)&v13, 0);
    return objc_msgSend(*(id *)(a1 + 32), "setAlert:", *(_QWORD *)(a1 + 40));
  }
}

uint64_t sub_100054814(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2);
}

void sub_100054DF4(id *a1, void *a2)
{
  id WeakRetained;
  id v4;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  WeakRetained = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(WeakRetained, "popBackFromProgress", WeakRetained, a1);
  objc_storeStrong(&v4, 0);
  objc_storeStrong(location, 0);
}

void sub_100054E58(id *a1, void *a2)
{
  id v3[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3[1] = a1;
  v3[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(v3[0], "takeAssertions");
  objc_msgSend(v3[0], "_attemptRestore");
  objc_storeStrong(v3, 0);
  objc_storeStrong(location, 0);
}

void sub_100054EC4(uint64_t a1)
{
  id v2;
  unsigned __int8 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  id v7;
  id v8;
  id v9;
  void *v10;
  id v11;
  uint64_t v12;
  NSString *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  __CFString *v22;
  BOOL v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  void *v34;
  id v35;
  id v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  unsigned __int8 v41;
  id v42;
  id v43;
  id v44;
  void **v45;
  void *v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  void *v53;
  id v54;
  id v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  char v59;
  NSString *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  id v64;
  id v65;
  id v66;
  id v67;
  id v68;
  void *v69;
  id v70;
  char v71;
  void *v72;
  id v73;
  void *v74;
  void **v75;
  int v76;
  int v77;
  void (*v78)(id *);
  void *v79;
  id v80;
  id v81;
  void **block;
  int v83;
  int v84;
  id (*v85)(uint64_t);
  void *v86;
  id v87;
  os_log_type_t v88;
  os_log_t v89;
  uint8_t v90[7];
  os_log_type_t v91;
  os_log_t v92;
  char v93;
  id v94;
  char v95;
  id v96;
  os_log_type_t v97;
  os_log_t v98;
  id obj;
  int v100;
  id v101;
  id v102;
  uint8_t v103[7];
  os_log_type_t v104;
  os_log_t v105;
  uint8_t v106[7];
  os_log_type_t v107;
  os_log_t v108;
  uint8_t v109[7];
  os_log_type_t v110;
  os_log_t v111;
  uint8_t v112[15];
  os_log_type_t v113;
  os_log_t oslog;
  id v115;
  char v116;
  NSString *v117;
  char v118;
  id v119;
  os_log_type_t v120;
  id v121;
  id v122;
  id v123;
  id v124;
  id v125;
  uint8_t buf[15];
  os_log_type_t v127;
  id location;
  char v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  uint8_t v133[16];
  uint8_t v134[16];
  uint8_t v135[24];

  v132 = a1;
  v131 = a1;
  v130 = 0;
  v130 = (objc_msgSend(*(id *)(a1 + 32), "hasAssertions") & 1) == 0;
  v129 = 1;
  v2 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
  v3 = objc_msgSend(v2, "useLatestSnapshot");

  if ((v3 & 1) != 0)
  {
    location = (id)_BYLoggingFacility(v4);
    v127 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_DEFAULT))
    {
      v5 = location;
      v6 = v127;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Searching for the latest snapshot...", buf, 2u);
    }
    objc_storeStrong(&location, 0);
    v7 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
    v8 = objc_msgSend(v7, "backupItem");
    v125 = objc_msgSend(v8, "backupUUID");

    v9 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
    v124 = objc_msgSend(v9, "snapshotDate");

    v123 = 0;
    v10 = *(void **)(a1 + 32);
    v122 = 0;
    v11 = objc_msgSend(v10, "latestSnapshotForBackupUUID:lastSnapshotDate:error:", v125, v124, &v122);
    objc_storeStrong(&v123, v122);
    objc_msgSend(*(id *)(a1 + 32), "setBackupItem:", v11);

    if (v123)
    {
      v121 = (id)_BYLoggingFacility(v12);
      v120 = OS_LOG_TYPE_ERROR;
      if (os_log_type_enabled((os_log_t)v121, OS_LOG_TYPE_ERROR))
      {
        v118 = 0;
        v116 = 0;
        if ((_BYIsInternalInstall() & 1) != 0)
        {
          v13 = (NSString *)v123;
        }
        else if (v123)
        {
          v119 = objc_msgSend(v123, "domain");
          v118 = 1;
          v13 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v119, objc_msgSend(v123, "code"));
          v117 = v13;
          v116 = 1;
        }
        else
        {
          v13 = 0;
        }
        sub_100039500((uint64_t)v135, (uint64_t)v13);
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v121, v120, "Failed to find the latest snapshot: %{public}@", v135, 0xCu);
        if ((v116 & 1) != 0)

        if ((v118 & 1) != 0)
      }
      objc_storeStrong(&v121, 0);
      v130 = 1;
    }
    else
    {
      v14 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
      v15 = objc_msgSend(*(id *)(a1 + 32), "backupItem");
      objc_msgSend(v14, "setBackupItem:updateBackupMetadata:prefetchAccounts:", v15, 1, 0);

    }
    objc_storeStrong(&v123, 0);
    objc_storeStrong(&v124, 0);
    objc_storeStrong(&v125, 0);
  }
  else
  {
    v16 = objc_msgSend(*(id *)(a1 + 32), "backupDeviceController");
    v17 = objc_msgSend(v16, "backingUpDeviceUUID");
    v18 = objc_msgSend(*(id *)(a1 + 32), "backupItem");
    v19 = objc_msgSend(v18, "backup");
    v20 = objc_msgSend(v19, "backupUUID");

    if (v17 == v20)
    {
      v21 = objc_msgSend(*(id *)(a1 + 32), "backupDeviceController");
      v115 = objc_msgSend(v21, "error");

      if (v115)
      {
        v22 = (__CFString *)objc_msgSend(v115, "domain");
        v23 = 0;
        if (v22 == CFSTR("BFFBackupDeviceErrorDomain"))
          v23 = objc_msgSend(v115, "code") == (id)-1;

        if (v23)
        {
          oslog = (os_log_t)(id)_BYLoggingFacility(v24);
          v113 = OS_LOG_TYPE_DEFAULT;
          if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
          {
            v25 = oslog;
            v26 = v113;
            sub_100038C3C(v112);
            _os_log_impl((void *)&_mh_execute_header, v25, v26, "Source device disconnected at/before pushing to the restore progress pane", v112, 2u);
          }
          objc_storeStrong((id *)&oslog, 0);
          v27 = objc_msgSend(*(id *)(a1 + 32), "waitForBackupToComplete");
          objc_msgSend(*(id *)(a1 + 32), "setBackupItem:", v27);

          v28 = *(void **)(a1 + 32);
          v29 = objc_msgSend(v28, "backupItem");
          objc_msgSend(v28, "_traceAnalyticsForGuideUserToBackup:foundBackup:polledForBackup:", 0, v29 != 0, 1);

          v30 = objc_msgSend(*(id *)(a1 + 32), "backupItem");
          if (!v30)
          {
            v111 = (os_log_t)(id)_BYLoggingFacility(v31);
            v110 = OS_LOG_TYPE_DEFAULT;
            if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
            {
              v32 = v111;
              v33 = v110;
              sub_100038C3C(v109);
              _os_log_impl((void *)&_mh_execute_header, v32, v33, "No latest backup found; giving up!", v109, 2u);
            }
            objc_storeStrong((id *)&v111, 0);
            objc_msgSend(*(id *)(a1 + 32), "handleBackupFailed:", v115);
            v129 = 0;
            v130 = 1;
          }
        }
        else
        {
          v34 = *(void **)(a1 + 32);
          v35 = objc_msgSend(v34, "backupDeviceController");
          v36 = objc_msgSend(v35, "error");
          objc_msgSend(v34, "_traceAnalyticsForGuideUserToBackup:foundBackup:polledForBackup:", v36, 0, 0);

          v37 = *(void **)(a1 + 32);
          v38 = objc_msgSend(v37, "backupDeviceController");
          v39 = objc_msgSend(v38, "error");
          objc_msgSend(v37, "handleBackupFailed:", v39);

          v129 = 0;
          v130 = 1;
        }
      }
      else
      {
        v40 = objc_msgSend(*(id *)(a1 + 32), "backupDeviceController");
        v41 = objc_msgSend(v40, "backupFinished");

        if ((v41 & 1) != 0)
        {
          v42 = objc_msgSend(*(id *)(a1 + 32), "backupItem");
          v43 = objc_msgSend(v42, "snapshot");
          v44 = objc_msgSend(v43, "date");
          v45 = (void **)(*(_QWORD *)(a1 + 32) + 16);
          v46 = *v45;
          *v45 = v44;

          v108 = (os_log_t)(id)_BYLoggingFacility(v47);
          v107 = OS_LOG_TYPE_DEFAULT;
          if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
          {
            v48 = v108;
            v49 = v107;
            sub_100038C3C(v106);
            _os_log_impl((void *)&_mh_execute_header, v48, v49, "Waiting 30 seconds for iCloud servers to ingest the new backup...", v106, 2u);
          }
          objc_storeStrong((id *)&v108, 0);
          v50 = sleep(0x1Eu);
          v105 = (os_log_t)(id)_BYLoggingFacility(v50);
          v104 = OS_LOG_TYPE_DEFAULT;
          if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
          {
            v51 = v105;
            v52 = v104;
            sub_100038C3C(v103);
            _os_log_impl((void *)&_mh_execute_header, v51, v52, "Searching for latest snapshot for source device...", v103, 2u);
          }
          objc_storeStrong((id *)&v105, 0);
          v102 = 0;
          v101 = 0;
          v100 = 0;
          do
          {
            v53 = *(void **)(a1 + 32);
            obj = v102;
            v54 = objc_msgSend(v53, "latestSnapshotForSourceDevice:", &obj);
            objc_storeStrong(&v102, obj);
            v55 = v101;
            v101 = v54;

            if (v101)
              break;
            v98 = (os_log_t)(id)_BYLoggingFacility(v56);
            v97 = OS_LOG_TYPE_DEFAULT;
            if (os_log_type_enabled(v98, OS_LOG_TYPE_DEFAULT))
            {
              v57 = v98;
              v58 = v97;
              v59 = _BYIsInternalInstall();
              v95 = 0;
              v93 = 0;
              if ((v59 & 1) != 0)
              {
                v60 = (NSString *)v102;
              }
              else if (v102)
              {
                v96 = objc_msgSend(v102, "domain");
                v95 = 1;
                v60 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v96, objc_msgSend(v102, "code"));
                v94 = v60;
                v93 = 1;
              }
              else
              {
                v60 = 0;
              }
              sub_100039500((uint64_t)v134, (uint64_t)v60);
              _os_log_impl((void *)&_mh_execute_header, v57, v58, "Unable to retrieve latest backup: %{public}@", v134, 0xCu);
              if ((v93 & 1) != 0)

              if ((v95 & 1) != 0)
            }
            objc_storeStrong((id *)&v98, 0);
            v92 = (os_log_t)(id)_BYLoggingFacility(v61);
            v91 = OS_LOG_TYPE_DEFAULT;
            if (os_log_type_enabled(v92, OS_LOG_TYPE_DEFAULT))
            {
              v62 = v92;
              v63 = v91;
              sub_100038C3C(v90);
              _os_log_impl((void *)&_mh_execute_header, v62, v63, "Attempting to retry to get latest backup due to error...", v90, 2u);
            }
            objc_storeStrong((id *)&v92, 0);
            ++v100;
            sleep(5u);
          }
          while (v100 < 3);
          v64 = objc_msgSend(*(id *)(a1 + 32), "_traceAnalyticsForGuideUserToBackup:foundBackup:polledForBackup:", 0, v101 != 0, 0);
          if (v101)
          {
            v89 = (os_log_t)(id)_BYLoggingFacility(v64);
            v88 = OS_LOG_TYPE_DEFAULT;
            if (os_log_type_enabled(v89, OS_LOG_TYPE_DEFAULT))
            {
              sub_100038C28((uint64_t)v133, (uint64_t)v101);
              _os_log_impl((void *)&_mh_execute_header, v89, v88, "Found latest backup item: %@", v133, 0xCu);
            }
            objc_storeStrong((id *)&v89, 0);
            v65 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
            objc_msgSend(v65, "setBackupItem:updateBackupMetadata:prefetchAccounts:", v101, 1, 0);

            objc_msgSend(*(id *)(a1 + 32), "setBackupItem:", v101);
          }
          else
          {
            v130 = 1;
          }
          objc_storeStrong(&v101, 0);
          objc_storeStrong(&v102, 0);
        }
      }
      objc_storeStrong(&v115, 0);
    }
  }
  v66 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
  v67 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
  v68 = objc_msgSend(v67, "backupItem");
  objc_msgSend(v66, "setAttemptedBackupItem:", v68);

  if (v130)
  {
    if ((v129 & 1) != 0)
    {
      v74 = &_dispatch_main_q;
      v75 = _NSConcreteStackBlock;
      v76 = -1073741824;
      v77 = 0;
      v78 = sub_100055C88;
      v79 = &unk_100280E18;
      objc_copyWeak(&v81, (id *)(a1 + 40));
      v80 = *(id *)(a1 + 32);
      dispatch_async((dispatch_queue_t)v74, &v75);

      objc_storeStrong(&v80, 0);
      objc_destroyWeak(&v81);
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setRestoreState:", 0);
    v69 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v83 = -1073741824;
    v84 = 0;
    v85 = sub_100055C60;
    v86 = &unk_100280730;
    v87 = *(id *)(a1 + 32);
    dispatch_async((dispatch_queue_t)v69, &block);

    v70 = objc_msgSend(*(id *)(a1 + 32), "backupDeviceController");
    v71 = objc_msgSend(v70, "isBackingUp") ^ 1;

    if ((v71 & 1) != 0)
    {
      v72 = *(void **)(a1 + 32);
      v73 = objc_msgSend(v72, "backupItem");
      objc_msgSend(v72, "renewCredentialsThenStartRestore:", v73);

    }
    objc_storeStrong(&v87, 0);
  }
}

id sub_100055C60(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateProgressText", a1, a1);
}

void sub_100055C88(id *a1)
{
  void **v2;
  int v3;
  int v4;
  void (*v5)(id *);
  void *v6;
  id v7;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  v2 = _NSConcreteStackBlock;
  v3 = -1073741824;
  v4 = 0;
  v5 = sub_100055D78;
  v6 = &unk_1002806B8;
  objc_copyWeak(&v7, a1 + 5);
  location[0] = +[BuddyRestoreHelpers alertForBackupError:okButtonAction:](BuddyRestoreHelpers, "alertForBackupError:okButtonAction:", 0, &v2);
  objc_msgSend(a1[4], "_presentAlert:", location[0]);
  objc_storeStrong(location, 0);
  objc_destroyWeak(&v7);
}

void sub_100055D4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  id *v11;

  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void sub_100055D78(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "popBackFromProgress");
  objc_storeStrong(location, 0);
}

void sub_100055EB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100055EEC(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "popBackFromProgress");
  objc_storeStrong(location, 0);
}

id sub_100056CF8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "updateProgress", a1, a1);
}

void sub_100056D20(uint64_t a1)
{
  uint64_t v2;
  void **v3;
  int v4;
  int v5;
  void (*v6)(id *);
  void *v7;
  id v8;
  id v9;
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  objc_initWeak(location, *(id *)(a1 + 32));
  v2 = *(_QWORD *)(a1 + 40);
  v3 = _NSConcreteStackBlock;
  v4 = -1073741824;
  v5 = 0;
  v6 = sub_100056E30;
  v7 = &unk_1002806B8;
  objc_copyWeak(&v8, location);
  v9 = +[BuddyRestoreHelpers alertForBackupError:okButtonAction:](BuddyRestoreHelpers, "alertForBackupError:okButtonAction:", v2, &v3);
  objc_msgSend(*(id *)(a1 + 32), "_presentAlert:", v9);
  objc_storeStrong(&v9, 0);
  objc_destroyWeak(&v8);
  objc_destroyWeak(location);
}

void sub_100056DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  id *v12;
  uint64_t v13;

  objc_destroyWeak(v12);
  objc_destroyWeak((id *)(v13 - 56));
  _Unwind_Resume(a1);
}

void sub_100056E30(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "popBackFromProgress");
  objc_storeStrong(location, 0);
}

id sub_100056F34(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setTimeRemainingEstimate:", (double)(unint64_t)(60 * *(_QWORD *)(a1 + 40)));
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + 120) = *(_QWORD *)(a1 + 48);
  return objc_msgSend(*(id *)(a1 + 32), "updateProgress");
}

id sub_100057098(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setTimeRemainingEstimate:", (double)(unint64_t)(60 * *(_QWORD *)(a1 + 40)));
  objc_msgSend(*(id *)(a1 + 32), "setRestorePercentComplete:", *(float *)(a1 + 48));
  return objc_msgSend(*(id *)(a1 + 32), "updateProgress");
}

void sub_100057388(id *a1)
{
  BuddyDisplayMonitor *v2;
  id v3;
  void **v4;
  int v5;
  int v6;
  id (*v7);
  void *v8;
  id v9;
  id v10[3];

  v10[2] = a1;
  v10[1] = a1;
  v2 = objc_alloc_init(BuddyDisplayMonitor);
  objc_msgSend(a1[4], "setDisplayMonitor:", v2);

  v3 = objc_msgSend(a1[4], "displayMonitor");
  v4 = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_100057484;
  v8 = &unk_100280D00;
  v9 = a1[4];
  v10[0] = a1[5];
  objc_msgSend(v3, "wakeDisplay:", &v4);

  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
}

id sub_100057484(NSObject *a1)
{
  id v2;
  unsigned __int8 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  id v7;
  void **v9;
  int v10;
  int v11;
  void (*v12)(NSObject *, void *);
  void *v13;
  objc_class *v14;
  uint8_t buf[7];
  os_log_type_t v16;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  v2 = -[objc_class lockdownModeProvider](a1[4].isa, "lockdownModeProvider");
  v3 = objc_msgSend(v2, "hasStagedEnablement");

  if ((v3 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v16 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v5 = oslog[0];
      v6 = v16;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Enabling lockdown...", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    v7 = -[objc_class lockdownModeProvider](a1[4].isa, "lockdownModeProvider");
    v9 = _NSConcreteStackBlock;
    v10 = -1073741824;
    v11 = 0;
    v12 = sub_1000575EC;
    v13 = &unk_100280B80;
    v14 = a1[5].isa;
    objc_msgSend(v7, "enableWithStrategy:completionHandler:", 1, &v9);

    objc_storeStrong((id *)&v14, 0);
  }
  else
  {
    -[objc_class rebootDevice:](a1[5].isa, "rebootDevice:", 0);
  }
  return -[objc_class releaseAssertions](a1[4].isa, "releaseAssertions");
}

void sub_1000575EC(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _WORD v6[7];
  os_log_type_t v7;
  os_log_t v8;
  os_log_type_t v9;
  os_log_t oslog[2];
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    v9 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_100039500((uint64_t)buf, (uint64_t)location[0]);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v9, "Failed to enable lockdown: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v8 = (os_log_t)(id)_BYLoggingFacility(v3);
    v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = v8;
      v5 = v7;
      sub_100038C3C(v6);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Lockdown enabled", (uint8_t *)v6, 2u);
    }
    objc_storeStrong((id *)&v8, 0);
  }
  -[objc_class rebootDevice:](a1[4].isa, "rebootDevice:", 1);
  objc_storeStrong(location, 0);
}

void sub_100057A8C(id *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  NSString *v9;
  void *v10;
  void **block;
  int v12;
  int v13;
  void (*v14)(uint64_t);
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  char v21;
  id v22;
  char v23;
  id v24;
  os_log_type_t v25;
  os_log_t oslog;
  id obj;
  id v28;
  id v29;
  os_log_type_t v30;
  id location[3];
  uint8_t v32[16];
  uint8_t buf[24];

  location[2] = a1;
  location[1] = a1;
  location[0] = (id)_BYLoggingFacility(a1);
  v30 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)location[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = objc_msgSend(a1[4], "backupItem");
    v3 = objc_msgSend(v2, "backupUUID");
    sub_100038C28((uint64_t)buf, (uint64_t)v3);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)location[0], v30, "Attempting to retrieve latest snapshot again to retry restore (for backup UUID %@)...", buf, 0xCu);

  }
  objc_storeStrong(location, 0);
  v29 = 0;
  v4 = objc_msgSend(a1[4], "backupItem");
  v5 = objc_msgSend(v4, "backupUUID");
  v6 = *((_QWORD *)a1[4] + 13);
  obj = 0;
  v7 = +[BuddyBackupUtilities backupForUUID:withManager:error:](BuddyBackupUtilities, "backupForUUID:withManager:error:", v5, v6, &obj);
  objc_storeStrong(&v29, obj);
  v28 = v7;

  if (v29)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v8);
    v25 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v23 = 0;
      v21 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v9 = (NSString *)v29;
      }
      else if (v29)
      {
        v24 = objc_msgSend(v29, "domain");
        v23 = 1;
        v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v24, objc_msgSend(v29, "code"));
        v22 = v9;
        v21 = 1;
      }
      else
      {
        v9 = 0;
      }
      sub_100039500((uint64_t)v32, (uint64_t)v9);
      _os_log_impl((void *)&_mh_execute_header, oslog, v25, "Failed to get the list of backups: %{public}@", v32, 0xCu);
      if ((v21 & 1) != 0)

      if ((v23 & 1) != 0)
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  else
  {
    v20 = +[BuddyBackupUtilities latestCommittedSnapshotFromBackup:requireCompatible:](BuddyBackupUtilities, "latestCommittedSnapshotFromBackup:requireCompatible:", v28, 1);
    v10 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v12 = -1073741824;
    v13 = 0;
    v14 = sub_100057EA8;
    v15 = &unk_100280E90;
    v16 = v20;
    v17 = v28;
    v18 = a1[4];
    v19 = a1[5];
    dispatch_async((dispatch_queue_t)v10, &block);

    objc_storeStrong(&v19, 0);
    objc_storeStrong(&v18, 0);
    objc_storeStrong(&v17, 0);
    objc_storeStrong(&v16, 0);
    objc_storeStrong(&v20, 0);
  }
  objc_storeStrong(&v28, 0);
  objc_storeStrong(&v29, 0);
}

void sub_100057EA8(uint64_t a1)
{
  NSObject *v2;
  os_log_type_t v3;
  _WORD v4[7];
  os_log_type_t v5;
  os_log_t v6;
  os_log_type_t v7;
  os_log_t oslog;
  id location[3];
  uint8_t buf[24];

  location[2] = (id)a1;
  location[1] = (id)a1;
  if (*(_QWORD *)(a1 + 32))
  {
    location[0] = +[RestorableBackupItem restorableBackupItemWithBackup:snapshot:](RestorableBackupItem, "restorableBackupItemWithBackup:snapshot:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
    oslog = (os_log_t)(id)_BYLoggingFacility(location[0]);
    v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_100038C28((uint64_t)buf, (uint64_t)location[0]);
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "Found latest backup item: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    objc_msgSend(*(id *)(a1 + 48), "renewCredentialsThenStartRestore:", location[0]);
    objc_storeStrong(location, 0);
  }
  else
  {
    v6 = (os_log_t)(id)_BYLoggingFacility(a1);
    v5 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      v2 = v6;
      v3 = v5;
      sub_100038C3C(v4);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to get the latest snapshot from a backup (no snapshot returned)", (uint8_t *)v4, 2u);
    }
    objc_storeStrong((id *)&v6, 0);
    objc_msgSend(*(id *)(a1 + 48), "restoreFailedWithError:", *(_QWORD *)(a1 + 56));
  }
}

id sub_10005A178()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE848;
  v13 = qword_1002EE848;
  if (!qword_1002EE848)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10005AD6C;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_10005AD6C(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_10005A264(uint64_t a1, char a2, id obj)
{
  void *v4;
  void **block;
  int v6;
  int v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  id v11;
  char v12;
  uint64_t v13;
  id location;
  char v15;
  uint64_t v16;

  v16 = a1;
  v15 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v13 = a1;
  v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_10005A368;
  v9 = &unk_100280EB8;
  v12 = v15 & 1;
  v10 = location;
  v11 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

void sub_10005A368(uint64_t a1)
{
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_10005A460((uint64_t)buf, *(_BYTE *)(a1 + 48) & 1, *(_QWORD *)(a1 + 32));
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "iCloudQuota needs to run: %d, error: %@", buf, 0x12u);
  }
  objc_storeStrong((id *)oslog, 0);
  if (*(_QWORD *)(a1 + 40))
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

double sub_10005A460(uint64_t a1, int a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 67109378;
  *(_DWORD *)a1 = 67109378;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 2112;
  *(_QWORD *)(a1 + 10) = a3;
  return result;
}

id sub_10005A614()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE858;
  v13 = qword_1002EE858;
  if (!qword_1002EE858)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10005B0F8;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_10005B0F8(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_10005AD6C(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_10005AEAC();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("ICQUpgradeFlowManager");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getICQUpgradeFlowManagerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyiCloudQuotaController.m"), 29, CFSTR("Unable to find class %s"), "ICQUpgradeFlowManager");

    __break(1u);
  }
  qword_1002EE848 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_10005AEAC()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_10005AFD8((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *iCloudQuotaUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyiCloudQuotaController.m"), 28, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_10005AFD8(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE850;
  v9 = qword_1002EE850;
  if (!qword_1002EE850)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10005B068;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_10005B068((uint64_t)&v2);
  }
  return qword_1002EE850;
}

uint64_t sub_10005B068(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/iCloudQuotaUI.framework/iCloudQuotaUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE850 = result;
  return result;
}

void sub_10005B0F8(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_10005B238();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("ICQOfferManager");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getICQOfferManagerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyiCloudQuotaController.m"), 25, CFSTR("Unable to find class %s"), "ICQOfferManager");

    __break(1u);
  }
  qword_1002EE858 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_10005B238()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_10005B364((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *iCloudQuotaLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyiCloudQuotaController.m"), 24, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_10005B364(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE860;
  v9 = qword_1002EE860;
  if (!qword_1002EE860)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10005B3F4;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_10005B3F4((uint64_t)&v2);
  }
  return qword_1002EE860;
}

uint64_t sub_10005B3F4(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/iCloudQuota.framework/iCloudQuota";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE860 = result;
  return result;
}

double sub_10005C530()
{
  return -5.0;
}

void sub_10005D54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10005D56C(uint64_t a1, char a2)
{
  id WeakRetained;
  id v4;

  if ((a2 & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    v4 = objc_msgSend(*(id *)(a1 + 32), "selectedChoice");
    objc_msgSend(WeakRetained, "selectChoice:", v4);

  }
}

void sub_10005F164(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  if (location[0])
    objc_msgSend(location[0], "_reverifyUserConfigurationState");
  objc_storeStrong(location, 0);
}

uint64_t sub_10005F1BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_10005F1EC(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

id sub_10005FF44(NSObject *a1, char a2)
{
  NSObject *v3;
  os_log_type_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _WORD v8[3];
  os_log_type_t v9;
  os_log_t v10;
  uint8_t buf[15];
  os_log_type_t v12;
  os_log_t oslog[2];
  char v14;
  NSObject *v15;

  v15 = a1;
  v14 = a2;
  oslog[1] = a1;
  if ((a2 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    v12 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v3 = oslog[0];
      v4 = v12;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Timed out waiting for Wi-Fi!", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v10 = (os_log_t)(id)_BYLoggingFacility(a1);
    v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v10;
      v6 = v9;
      sub_100038C3C(v8);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Wi-Fi Acquired!", (uint8_t *)v8, 2u);
    }
    objc_storeStrong((id *)&v10, 0);
  }
  return -[objc_class _startFlow](a1[4].isa, "_startFlow");
}

void sub_100060068(uint64_t a1)
{
  id v2;
  uint64_t v3;
  UIAlertAction *v4;
  id v5;
  void **v6;
  uint64_t v7;
  void (*v8)(_QWORD *, void *);
  void *v9;
  id v10;
  id location[2];
  uint64_t v12;

  v12 = a1;
  location[1] = (id)a1;
  location[0] = +[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", *(_QWORD *)(v12 + 32), *(_QWORD *)(v12 + 40), 1);
  v2 = location[0];
  v3 = *(_QWORD *)(a1 + 48);
  v6 = _NSConcreteStackBlock;
  v7 = 3221225472;
  v8 = sub_1000601C0;
  v9 = &unk_100280A28;
  v10 = *(id *)(a1 + 56);
  v4 = +[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v3, 0, &v6);
  objc_msgSend(v2, "addAction:", v4, v6, v7, v8, v9);

  v5 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 64) + 16), "topViewController");
  objc_msgSend(v5, "presentViewController:animated:completion:", location[0], 1, 0);

  objc_storeStrong(&v10, 0);
  objc_storeStrong(location, 0);
}

void sub_1000601C0(_QWORD *a1, void *a2)
{
  id v3;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = +[BYManagedAppleIDBootstrap sharedManager](BYManagedAppleIDBootstrap, "sharedManager");
  objc_msgSend(v3, "switchToLoginWindowDueToError:completion:", a1[4], 0);

  objc_storeStrong(location, 0);
}

void sub_100060960(uint64_t a1, uint64_t a2)
{
  void *v2;
  id *v3;

  v3 = (id *)(a2 + 40);
  v2 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);
  objc_storeStrong(v3, 0);
}

void sub_100060990(uint64_t a1)
{
  objc_storeStrong((id *)(a1 + 40), 0);
}

double sub_10006099C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)&result = 138412802;
  *(_DWORD *)a1 = 138412802;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2112;
  *(_QWORD *)(a1 + 24) = a4;
  return result;
}

void sub_1000609C4(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  void **block;
  int v7;
  int v8;
  void (*v9)(uint64_t);
  void *v10;
  id v11;
  id v12;
  id v13[2];
  id v14;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = (id)a1;
  v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_100060B10;
  v10 = &unk_100281000;
  v11 = v14;
  v12 = *(id *)(a1 + 32);
  v13[0] = location[0];
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), 0);
  objc_storeStrong(v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_100060B10(uint64_t a1)
{
  id v2;
  id *v3;
  id v4;
  void **v5;
  int v6;
  int v7;
  void (*v8)(uint64_t, char, id);
  void *v9;
  id v10;
  id location;
  id v12[3];

  v12[2] = (id)a1;
  v12[1] = (id)a1;
  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(*(id *)(a1 + 40), "_stopSpinning");
    objc_msgSend(*(id *)(a1 + 40), "_retryFlowIfPossibleOrFailWithError:", *(_QWORD *)(a1 + 32));
  }
  else
  {
    v2 = +[BYManagedAppleIDBootstrap sharedManager](BYManagedAppleIDBootstrap, "sharedManager");
    objc_msgSend(v2, "postUserSwitchContextHasBeenUsed");

    v12[0] = objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", AKAuthenticationUsernameKey);
    location = objc_msgSend(*(id *)(a1 + 48), "objectForKeyedSubscript:", AKAuthenticationPasswordKey);
    v3 = *(id **)(a1 + 40);
    v4 = objc_msgSend(v3[1], "passwordForCreating");
    v5 = _NSConcreteStackBlock;
    v6 = -1073741824;
    v7 = 0;
    v8 = sub_100060CA4;
    v9 = &unk_100280FD8;
    v10 = *(id *)(a1 + 40);
    objc_msgSend(v3, "createAndRecoverAccountWithUsername:password:rawPassword:completion:", v12[0], location, v4, &v5);

    objc_storeStrong(&v10, 0);
    objc_storeStrong(&location, 0);
    objc_storeStrong(v12, 0);
  }
}

void sub_100060CA4(uint64_t a1, char a2, id obj)
{
  void *v4;
  void **block;
  int v6;
  int v7;
  id (*v8)(uint64_t);
  void *v9;
  id v10;
  id v11;
  char v12;
  uint64_t v13;
  id location;
  char v15;
  uint64_t v16;

  v16 = a1;
  v15 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v13 = a1;
  v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_100060DA8;
  v9 = &unk_100280FB0;
  v10 = *(id *)(a1 + 32);
  v12 = v15 & 1;
  v11 = location;
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

id sub_100060DA8(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_stopSpinning", a1, a1);
  if ((*(_BYTE *)(a1 + 48) & 1) == 0 || *(_QWORD *)(a1 + 40))
    return objc_msgSend(*(id *)(a1 + 32), "_retryFlowIfPossibleOrFailWithError:", *(_QWORD *)(a1 + 40));
  v2 = +[BYManagedAppleIDBootstrap sharedManager](BYManagedAppleIDBootstrap, "sharedManager");
  objc_msgSend(v2, "markUserWithManagedCredentials");

  return objc_msgSend(*(id *)(a1 + 32), "controllerDone");
}

void sub_100061080(_QWORD *a1)
{
  id v2;
  NSBundle *v3;
  NSString *v4;
  id v5;
  id v6;
  id v7;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  v2 = objc_msgSend(*(id *)(a1[4] + 16), "topViewController");
  location[0] = objc_msgSend(v2, "navigationItem");

  +[BFFViewControllerSpinnerManager startAnimatingSpinnerFor:identifier:](BFFViewControllerSpinnerManager, "startAnimatingSpinnerFor:identifier:", *(_QWORD *)(a1[4] + 16), CFSTR("passwordchange"));
  v3 = +[NSBundle mainBundle](NSBundle, "mainBundle");
  v4 = -[NSBundle localizedStringForKey:value:table:](v3, "localizedStringForKey:value:table:", CFSTR("MULTI_USER_LOADING_PASSWORD_CHANGE"), &stru_100284738, CFSTR("Localizable"));
  objc_msgSend(location[0], "setTitle:", v4);

  v5 = objc_msgSend(*(id *)(a1[4] + 16), "topViewController");
  v6 = objc_msgSend(v5, "view");
  v7 = objc_msgSend(v6, "window");
  objc_msgSend(v7, "setUserInteractionEnabled:", 0);

  objc_storeStrong(location, 0);
}

void sub_1000613E8(uint64_t a1, char a2, char a3, id obj)
{
  void *v5;
  void **v6;
  int v7;
  int v8;
  void (*v9)(id *, char, id);
  void *v10;
  id v11;
  id v12;
  id v13[2];
  id location;
  char v15;
  char v16;
  uint64_t v17;

  v17 = a1;
  v16 = a2;
  v15 = a3;
  location = 0;
  objc_storeStrong(&location, obj);
  v13[1] = (id)a1;
  if ((v15 & 1) != 0)
  {
    v13[0] = objc_opt_new(ACAccountStore);
    v12 = objc_msgSend(v13[0], "aa_primaryAppleAccount");
    if (*(_QWORD *)(a1 + 32))
      objc_msgSend(v12, "_aa_setRawPassword:", *(_QWORD *)(a1 + 32));
    v5 = *(void **)(a1 + 40);
    v6 = _NSConcreteStackBlock;
    v7 = -1073741824;
    v8 = 0;
    v9 = sub_100061530;
    v10 = &unk_100280690;
    v11 = *(id *)(a1 + 48);
    objc_msgSend(v5, "enableDataClassesForAccount:completion:", v12, &v6);
    objc_storeStrong(&v11, 0);
    objc_storeStrong(&v12, 0);
    objc_storeStrong(v13, 0);
  }
  else if (*(_QWORD *)(a1 + 48))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  objc_storeStrong(&location, 0);
}

void sub_100061530(id *a1, char a2, id obj)
{
  id v4;
  void **v5;
  int v6;
  int v7;
  void (*v8)(NSObject *, char, id);
  void *v9;
  id v10[2];
  id location;
  char v12;
  id *v13;

  v13 = a1;
  v12 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v10[1] = a1;
  if ((v12 & 1) != 0)
  {
    v4 = +[BYManagedAppleIDBootstrap sharedManager](BYManagedAppleIDBootstrap, "sharedManager");
    v5 = _NSConcreteStackBlock;
    v6 = -1073741824;
    v7 = 0;
    v8 = sub_100061638;
    v9 = &unk_100280690;
    v10[0] = a1[4];
    objc_msgSend(v4, "recoverEMCSWithCompletion:", &v5);

    objc_storeStrong(v10, 0);
  }
  else if (a1[4])
  {
    (*((void (**)(void))a1[4] + 2))();
  }
  objc_storeStrong(&location, 0);
}

void sub_100061638(NSObject *a1, char a2, id obj)
{
  uint64_t v4;
  os_log_t oslog[2];
  id location;
  char v7;
  NSObject *v8;
  uint8_t buf[24];

  v8 = a1;
  v7 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if (location)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_100039500((uint64_t)buf, (uint64_t)location);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Failed to recover EMCS after password change. Ignoring error: %{public}@.", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  if (a1[4].isa)
    (*((void (**)(void))a1[4].isa + 2))();
  objc_storeStrong(&location, 0);
}

void sub_100061B88(id *a1)
{
  NSDate *v2;
  void **v3;
  int v4;
  int v5;
  void (*v6)(id *);
  void *v7;
  id v8;
  id v9;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  v2 = +[NSDate date](NSDate, "date");
  objc_msgSend(a1[4], "setStartTime:", v2);

  objc_initWeak(location, a1[4]);
  v3 = _NSConcreteStackBlock;
  v4 = -1073741824;
  v5 = 0;
  v6 = sub_100061CB4;
  v7 = &unk_1002806B8;
  objc_copyWeak(&v8, location);
  v9 = objc_retainBlock(&v3);
  if ((objc_msgSend(a1[4], "addWirelessNetworks") & 1) != 0)
    objc_msgSend(a1[4], "waitForWirelessConnection:", v9);
  else
    (*((void (**)(void))v9 + 2))();
  objc_storeStrong(&v9, 0);
  objc_destroyWeak(&v8);
  objc_destroyWeak(location);
}

void sub_100061CB4(id *a1)
{
  id v1;
  double v2;
  double v3;
  dispatch_time_t v4;
  void *v5;
  void *v6;
  void **v7;
  int v8;
  int v9;
  void (*v10)(uint64_t);
  void *v11;
  id v12;
  void **block;
  int v14;
  int v15;
  void (*v16)(uint64_t);
  void *v17;
  id v18;
  double v19;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "endProximityIfApplicable");
  v1 = objc_msgSend(location[0], "startTime");
  objc_msgSend(v1, "timeIntervalSinceNow");
  v3 = -v2;

  v19 = v3;
  if (v3 >= 1.0)
  {
    v6 = &_dispatch_main_q;
    v7 = _NSConcreteStackBlock;
    v8 = -1073741824;
    v9 = 0;
    v10 = sub_100061ED8;
    v11 = &unk_100280730;
    v12 = location[0];
    dispatch_async((dispatch_queue_t)v6, &v7);

    objc_storeStrong(&v12, 0);
  }
  else
  {
    v4 = dispatch_time(0, (uint64_t)((1.0 - v19) * 1000000000.0));
    v5 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v14 = -1073741824;
    v15 = 0;
    v16 = sub_100061E84;
    v17 = &unk_100280730;
    v18 = location[0];
    dispatch_after(v4, (dispatch_queue_t)v5, &block);

    objc_storeStrong(&v18, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_100061E84(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "delegate", a1, a1);
  objc_msgSend(v2, "flowItemDone:", *(_QWORD *)(a1 + 32));

}

void sub_100061ED8(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "delegate", a1, a1);
  objc_msgSend(v2, "flowItemDone:", *(_QWORD *)(a1 + 32));

}

void sub_100062380(NSObject *a1, char a2)
{
  NSObject *v3;
  os_log_type_t v4;
  NSObject *v5;
  os_log_type_t v6;
  id v7;
  _WORD v8[3];
  os_log_type_t v9;
  os_log_t v10;
  uint8_t buf[15];
  os_log_type_t v12;
  os_log_t oslog[2];
  char v14;
  NSObject *v15;

  v15 = a1;
  v14 = a2;
  oslog[1] = a1;
  if ((a2 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    v12 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v3 = oslog[0];
      v4 = v12;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Timed out waiting for device to connect to Wi-Fi", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v10 = (os_log_t)(id)_BYLoggingFacility(a1);
    v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v10;
      v6 = v9;
      sub_100038C3C(v8);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Device connected to Wi-Fi!", (uint8_t *)v8, 2u);
    }
    objc_storeStrong((id *)&v10, 0);
    v7 = -[objc_class networkProvider](a1[4].isa, "networkProvider");
    objc_msgSend(v7, "assumeNetworkReachabilityOverWiFi");

  }
  if (a1[5].isa)
    (*((void (**)(void))a1[5].isa + 2))();
}

uint64_t sub_1000627AC(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;
  id v5;
  id v6;
  id v7;
  BOOL v8;
  id v9;
  id v10;
  id v11;
  BOOL v12;
  void (**v13)(id, _QWORD);
  id v14;
  char v15;
  uint64_t v16;
  char v17;
  NSObject *v18;
  void **block;
  int v21;
  int v22;
  id (*v23)(uint64_t);
  void *v24;
  id v25;
  os_log_type_t v26;
  os_log_t oslog;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  BOOL v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint8_t buf[40];

  v38 = a1;
  v37 = a2;
  v36 = a1;
  v35 = 0;
  v3 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
  v4 = objc_msgSend(v3, "hasAppliedSettings");

  v35 = v4 & 1;
  v34 = 0;
  v5 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
  v6 = objc_msgSend(v5, "information");
  v7 = objc_msgSend(v6, "networks");
  v8 = objc_msgSend(v7, "count") != 0;

  v34 = v8;
  v33 = 0;
  v9 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
  v10 = objc_msgSend(v9, "handshake");
  LOBYTE(v7) = objc_msgSend(v10, "hasPasscodeSet");

  v33 = v7 & 1;
  v32 = 0;
  v11 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
  LOBYTE(v10) = objc_msgSend(v11, "hasValidatedPasscode");

  v32 = v10 & 1;
  v31 = 0;
  if ((v7 & 1) == 0 || (v12 = 1, (v32 & 1) == 0))
    v12 = (v33 & 1) == 0;
  v31 = v12;
  v30 = 0;
  if (v37 == 1)
  {
    v30 = 1;
  }
  else if (v37 == 2)
  {
    v30 = 0;
    v31 = 1;
  }
  if ((v30 & 1) != 0 && (v31 & 1) != 0)
  {
    v13 = (void (**)(id, _QWORD))objc_msgSend(*(id *)(a1 + 32), "prepareForDeviceMigrationBlock");
    v13[2](v13, 0);

  }
  v29 = 0;
  v14 = objc_msgSend(*(id *)(a1 + 32), "networkProvider");
  v15 = objc_msgSend(v14, "connectedOverWiFiAndNetworkReachable") ^ 1;

  v29 = v15 & 1;
  v28 = 0;
  v17 = 0;
  if ((v35 & 1) != 0)
  {
    v17 = 0;
    if ((v29 & 1) != 0)
    {
      v17 = 0;
      if (v34)
        v17 = v31;
    }
  }
  v28 = v17;
  if ((v17 & 1) == 0)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v16);
    v26 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_100062B84((uint64_t)buf, v35 & 1, v29 & 1, v34, v31 & 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v26, "Proximity Applying Settings does not need to run (applied settings: %d, waiting for Wi-Fi: %d, has networks to add: %d, user is trusted: %d)", buf, 0x1Au);
    }
    objc_storeStrong((id *)&oslog, 0);
    v18 = dispatch_get_global_queue(0, 0);
    block = _NSConcreteStackBlock;
    v21 = -1073741824;
    v22 = 0;
    v23 = sub_100062BB0;
    v24 = &unk_100280730;
    v25 = *(id *)(a1 + 32);
    dispatch_async(v18, &block);

    objc_storeStrong(&v25, 0);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

double sub_100062B84(uint64_t a1, int a2, int a3, int a4, int a5)
{
  double result;

  result = 2.0542726e-289;
  *(_DWORD *)a1 = 67109888;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 1024;
  *(_DWORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 14) = 1024;
  *(_DWORD *)(a1 + 16) = a4;
  *(_WORD *)(a1 + 20) = 1024;
  *(_DWORD *)(a1 + 22) = a5;
  return result;
}

id sub_100062BB0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "endProximityIfApplicable", a1, a1);
}

void sub_10006322C(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "_activationController", a1, a1);
  objc_msgSend(v1, "restart");

}

void sub_100063984()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_100071F08((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *WiFiKitUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyNavigationFlowController.m"), 103, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

void sub_100063FA8(id *a1)
{
  id v2;
  void **v3;
  int v4;
  int v5;
  void (*v6);
  void *v7;
  id v8;
  id v9[3];

  v9[2] = a1;
  v9[1] = a1;
  v2 = objc_msgSend(a1[4], "flowProducer");
  v3 = _NSConcreteStackBlock;
  v4 = -1073741824;
  v5 = 0;
  v6 = sub_10006407C;
  v7 = &unk_1002806E0;
  v8 = a1[4];
  v9[0] = a1[5];
  objc_msgSend(v2, "prepareWithCompletion:", &v3);

  objc_storeStrong(v9, 0);
  objc_storeStrong(&v8, 0);
}

void sub_10006407C(NSObject *a1)
{
  void *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  id v6;
  uint64_t v7;
  id v8;
  BOOL v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id location;
  os_log_type_t v17;
  os_log_t v18;
  id v19;
  uint8_t buf[7];
  os_log_type_t v21;
  os_log_t oslog[3];
  uint8_t v23[24];

  oslog[2] = a1;
  oslog[1] = a1;
  v2 = &_dispatch_main_q;
  dispatch_assert_queue_V2((dispatch_queue_t)v2);

  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
  v21 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog[0];
    v5 = v21;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Flow started preparation complete!", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  -[objc_class _resumeNavigationQueue](a1[4].isa, "_resumeNavigationQueue");
  v19 = 0;
  v6 = -[objc_class flowProducer](a1[4].isa, "flowProducer");
  v19 = objc_msgSend(v6, "initialFlowItemClass");

  v18 = (os_log_t)(id)_BYLoggingFacility(v7);
  v17 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    sub_100038C28((uint64_t)v23, (uint64_t)v19);
    _os_log_impl((void *)&_mh_execute_header, v18, v17, "Starting initial flow with %@...", v23, 0xCu);
  }
  objc_storeStrong((id *)&v18, 0);
  location = -[objc_class _createConditionalFlowItemForClass:](a1[4].isa, "_createConditionalFlowItemForClass:", v19);
  v8 = -[objc_class flowProducer](a1[4].isa, "flowProducer");
  v15 = objc_msgSend(v8, "debutFlowItemClass");

  while (1)
  {
    v9 = 0;
    if (v19)
      v9 = location == 0;
    if (!v9)
      break;
    v10 = -[objc_class _createConditionalFlowItemForClass:](a1[4].isa, "_createConditionalFlowItemForClass:", v19);
    v11 = location;
    location = v10;

    if (!location)
    {
      if (v15 == v19)
        objc_exception_throw(+[NSException exceptionWithName:reason:userInfo:](NSException, "exceptionWithName:reason:userInfo:", +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Debut flow item (%@) could not be created"), v15), 0, 0));
      v12 = -[objc_class flowProducer](a1[4].isa, "flowProducer");
      v19 = objc_msgSend(v12, "potentialNextFlowItemClassFollowingFlowItemClass:", v19);

    }
  }
  if (!location)
    objc_exception_throw(+[NSException exceptionWithName:reason:userInfo:](NSException, "exceptionWithName:reason:userInfo:", CFSTR("No Initial Flow Item Found"), 0, 0));
  if (v15)
  {
    -[objc_class _setupInitialFlowFromInitialFlowItem:debutFlowItemClass:completion:](a1[4].isa, "_setupInitialFlowFromInitialFlowItem:debutFlowItemClass:completion:", location, v15, a1[5].isa);
  }
  else
  {
    -[objc_class _beginEventForNavigationDuration](a1[4].isa, "_beginEventForNavigationDuration");
    v13 = objc_opt_class(BFFFlow);
    if ((objc_opt_isKindOfClass(location, v13) & 1) != 0)
    {
      v14 = -[objc_class buddyControllers](a1[4].isa, "buddyControllers");
      objc_msgSend(v14, "addObject:", location);

      objc_msgSend(location, "startFlowAnimated:", 0);
    }
    else
    {
      -[objc_class pushFlowItem:animated:](a1[4].isa, "pushFlowItem:animated:", location, 0);
    }
    if (a1[5].isa)
      (*((void (**)(void))a1[5].isa + 2))();
  }
  objc_storeStrong(&location, 0);
}

void sub_1000644CC(id *a1)
{
  void *v2;
  void **block;
  int v4;
  int v5;
  void (*v6)(id *);
  void *v7;
  id v8[3];

  v8[2] = a1;
  v8[1] = a1;
  v2 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v4 = -1073741824;
  v5 = 0;
  v6 = sub_100064584;
  v7 = &unk_100280730;
  v8[0] = a1[4];
  dispatch_async((dispatch_queue_t)v2, &block);

  objc_storeStrong(v8, 0);
}

void sub_100064584(id *a1)
{
  id v2;
  id v3;
  BOOL v4;
  id v5;
  objc_class *v6;
  id v7;
  id v8;
  id v9;
  id location;
  os_log_type_t v11;
  os_log_t oslog;
  char v13;
  id v14;
  id v15;
  id v16[3];
  uint8_t buf[24];

  v16[2] = a1;
  v16[1] = a1;
  objc_msgSend(a1[4], "setTapFreeSetUp:", 1);
  v2 = objc_msgSend(a1[4], "buddyControllers");
  v16[0] = objc_msgSend(v2, "lastObject");

  v3 = objc_msgSend(a1[4], "navigator");
  v15 = objc_msgSend(v3, "topViewController");

  v13 = 0;
  v4 = 0;
  if (v16[0])
  {
    v14 = objc_msgSend(a1[4], "_viewControllerForBuddyController:", v16[0]);
    v13 = 1;
    v4 = v14 == v15;
  }
  if ((v13 & 1) != 0)

  if (v4)
  {
    v5 = objc_msgSend(a1[4], "_doesTapFreeSetUpAffectsClass:", objc_opt_class(v16[0]));
    if ((v5 & 1) != 0)
    {
      oslog = (os_log_t)(id)_BYLoggingFacility(v5);
      v11 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
      {
        v6 = (objc_class *)objc_opt_class(v16[0]);
        location = NSStringFromClass(v6);
        sub_100038C28((uint64_t)buf, (uint64_t)location);
        _os_log_impl((void *)&_mh_execute_header, oslog, v11, "TFDEP: Forcing %@ to be done for tap free setup!", buf, 0xCu);

        objc_storeStrong(&location, 0);
      }
      objc_storeStrong((id *)&oslog, 0);
      v7 = a1[4];
      v8 = v16[0];
      v9 = objc_msgSend(v7, "_flowForFlowItem:", v16[0]);
      objc_msgSend(v7, "_flowItemDone:flow:nextItemClass:nextItem:", v8, v9, 0, 0);

    }
  }
  objc_storeStrong(&v15, 0);
  objc_storeStrong(v16, 0);
}

void sub_100064878(id *a1)
{
  void *v2;
  void **block;
  int v4;
  int v5;
  void (*v6);
  void *v7;
  id v8[3];

  v8[2] = a1;
  v8[1] = a1;
  v2 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v4 = -1073741824;
  v5 = 0;
  v6 = sub_100064930;
  v7 = &unk_100280730;
  v8[0] = a1[4];
  dispatch_async((dispatch_queue_t)v2, &block);

  objc_storeStrong(v8, 0);
}

void sub_100064930(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  Class isa;
  id v5;
  _WORD v6[3];
  os_log_type_t v7;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v7;
    sub_100038C3C(v6);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Proceeding past language/locale pane(s)...", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  isa = a1[4].isa;
  v5 = -[objc_class _flowItemFollowingClass:](isa, "_flowItemFollowingClass:", objc_opt_class(BuddyLanguageLocaleFlow));
  -[objc_class pushFlowItem:inFlow:animated:](isa, "pushFlowItem:inFlow:animated:", v5, 0, 1);

}

void sub_100064AC8(id *a1)
{
  void *v2;
  void **block;
  int v4;
  int v5;
  void (*v6);
  void *v7;
  id v8[3];

  v8[2] = a1;
  v8[1] = a1;
  v2 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v4 = -1073741824;
  v5 = 0;
  v6 = sub_100064B80;
  v7 = &unk_100280730;
  v8[0] = a1[4];
  dispatch_async((dispatch_queue_t)v2, &block);

  objc_storeStrong(v8, 0);
}

void sub_100064B80(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  Class isa;
  id v5;
  _WORD v6[3];
  os_log_type_t v7;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v7;
    sub_100038C3C(v6);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Proceeding past appearance pane...", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  isa = a1[4].isa;
  v5 = -[objc_class _flowItemFollowingClass:](isa, "_flowItemFollowingClass:", objc_opt_class(_TtC5Setup25BuddyAppearanceController));
  -[objc_class pushFlowItem:inFlow:animated:](isa, "pushFlowItem:inFlow:animated:", v5, 0, 1);

}

void sub_100064D18(id *a1)
{
  void *v2;
  void **block;
  int v4;
  int v5;
  void (*v6)(id *);
  void *v7;
  id v8[3];

  v8[2] = a1;
  v8[1] = a1;
  v2 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v4 = -1073741824;
  v5 = 0;
  v6 = sub_100064DD0;
  v7 = &unk_100280730;
  v8[0] = a1[4];
  dispatch_async((dispatch_queue_t)v2, &block);

  objc_storeStrong(v8, 0);
}

void sub_100064DD0(id *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t i;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  _QWORD v11[8];
  id v12;
  id location;
  id v14[3];
  _BYTE v15[128];

  v14[2] = a1;
  v14[1] = a1;
  v2 = objc_msgSend(a1[4], "buddyControllers");
  v14[0] = objc_msgSend(v2, "lastObject");

  if ((objc_msgSend(v14[0], "isMemberOfClass:", objc_opt_class(RestoreFromComputerController)) & 1) != 0)
  {
    location = objc_alloc_init((Class)NSMutableArray);
    memset(v11, 0, sizeof(v11));
    v3 = objc_msgSend(a1[4], "buddyControllers");
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", v11, v15, 16);
    if (v4)
    {
      v5 = *(_QWORD *)v11[2];
      do
      {
        for (i = 0; i < (unint64_t)v4; ++i)
        {
          if (*(_QWORD *)v11[2] != v5)
            objc_enumerationMutation(v3);
          v12 = *(id *)(v11[1] + 8 * i);
          if ((objc_msgSend(v12, "isMemberOfClass:", objc_opt_class(RestoreFromComputerController)) & 1) == 0)
          {
            v7 = v12;
            v8 = objc_opt_class(DeviceRestoreChoiceController);
            if ((objc_opt_isKindOfClass(v7, v8) & 1) == 0)
              continue;
          }
          v9 = location;
          v10 = objc_msgSend(a1[4], "_viewControllerForBuddyController:", v12);
          objc_msgSend(v9, "addObject:", v10);

        }
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", v11, v15, 16);
      }
      while (v4);
    }

    objc_msgSend(a1[4], "setViewControllersToRemoveOnPush:", location);
    objc_msgSend(a1[4], "flowItemDone:", v14[0]);
    objc_storeStrong(&location, 0);
  }
  objc_storeStrong(v14, 0);
}

double sub_100066BA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 136315394;
  *(_DWORD *)a1 = 136315394;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2048;
  *(_QWORD *)(a1 + 14) = a3;
  return result;
}

void sub_1000670A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  _Block_object_dispose(&a22, 8);
  _Unwind_Resume(a1);
}

void sub_1000670C0(NSObject *a1, char a2)
{
  void *v3;
  void **block;
  int v5;
  int v6;
  void (*v7)(uint64_t);
  void *v8;
  objc_class *v9;
  objc_class *v10;
  objc_class *v11;
  objc_class *v12;
  char v13;
  id location;
  os_log_type_t v15;
  os_log_t oslog[2];
  char v17;
  NSObject *v18;
  uint8_t buf[24];

  v18 = a1;
  v17 = a2;
  oslog[1] = a1;
  if ((*(_BYTE *)(*((_QWORD *)a1[8].isa + 1) + 24) & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    v15 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      location = (id)objc_opt_class(a1[4].isa);
      sub_100039500((uint64_t)buf, (uint64_t)location);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v15, "Extended init completion called more than once for %{public}@", buf, 0xCu);
      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    *(_BYTE *)(*((_QWORD *)a1[8].isa + 1) + 24) = 1;
    v3 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v5 = -1073741824;
    v6 = 0;
    v7 = sub_1000672D4;
    v8 = &unk_1002810A0;
    v9 = a1[4].isa;
    v13 = v17 & 1;
    v10 = a1[5].isa;
    v11 = a1[6].isa;
    v12 = a1[7].isa;
    dispatch_async((dispatch_queue_t)v3, &block);

    objc_storeStrong((id *)&v12, 0);
    objc_storeStrong((id *)&v11, 0);
    objc_storeStrong((id *)&v10, 0);
    objc_storeStrong((id *)&v9, 0);
  }
}

void sub_1000672D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  objc_class *v6;
  NSString *v7;
  NSNumber *v8;
  NSDictionary *v9;
  id v10;
  os_log_type_t v11;
  os_log_t v12;
  id location;
  os_log_type_t v14;
  os_log_t oslog;
  id v16[3];
  _QWORD v17[2];
  _QWORD v18[2];
  uint8_t v19[32];
  uint8_t buf[24];

  v16[2] = (id)a1;
  v16[1] = (id)a1;
  v16[0] = +[NSDate date](NSDate, "date");
  oslog = (os_log_t)(id)_BYLoggingFacility(v16[0]);
  v14 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    location = (id)objc_opt_class(*(_QWORD *)(a1 + 32));
    sub_100067590((uint64_t)buf, (uint64_t)location, *(_BYTE *)(a1 + 64) & 1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v14, "Extended init for %{public}@ finished, shouldShow = %d", buf, 0x12u);
    objc_storeStrong(&location, 0);
  }
  objc_storeStrong((id *)&oslog, 0);
  v12 = (os_log_t)(id)_BYLoggingFacility(v2);
  v11 = OS_LOG_TYPE_DEBUG;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEBUG))
  {
    objc_msgSend(v16[0], "timeIntervalSinceDate:", *(_QWORD *)(a1 + 40));
    v4 = v3;
    v10 = (id)objc_opt_class(*(_QWORD *)(a1 + 32));
    sub_10005136C((uint64_t)v19, v4, (uint64_t)v10);
    _os_log_debug_impl((void *)&_mh_execute_header, v12, v11, "Extended initialization took %fs for %@", v19, 0x16u);
    objc_storeStrong(&v10, 0);
  }
  objc_storeStrong((id *)&v12, 0);
  v5 = objc_msgSend(*(id *)(a1 + 48), "analyticsManager");
  v17[0] = CFSTR("class");
  v6 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 32));
  v7 = NSStringFromClass(v6);
  v18[0] = v7;
  v17[1] = CFSTR("duration");
  objc_msgSend(v16[0], "timeIntervalSinceDate:", *(_QWORD *)(a1 + 40));
  v8 = +[NSNumber numberWithDouble:](NSNumber, "numberWithDouble:");
  v18[1] = v8;
  v9 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v18, v17, 2);
  objc_msgSend(v5, "addEvent:withPayload:persist:", CFSTR("com.apple.setupassistant.ios.extendedinitialization"), v9, 1);

  (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  objc_storeStrong(v16, 0);
}

double sub_100067590(uint64_t a1, uint64_t a2, int a3)
{
  double result;

  *(_QWORD *)&result = 138543618;
  *(_DWORD *)a1 = 138543618;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  return result;
}

id sub_100067DB4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_startDisablingInteractionForExtendedInitialization", a1, a1);
}

id sub_100067DDC(uint64_t a1, char a2)
{
  id v3;

  if (*(_QWORD *)(a1 + 64))
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  if ((a2 & 1) != 0)
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "buddyControllers");
    objc_msgSend(v3, "addObject:", *(_QWORD *)(a1 + 40));

    return objc_msgSend(*(id *)(a1 + 40), "startFlowAnimated:", *(_BYTE *)(a1 + 72) & 1);
  }
  else if (*(_QWORD *)(a1 + 48))
  {
    return objc_msgSend(*(id *)(a1 + 48), "flowItemDone:", *(_QWORD *)(a1 + 56));
  }
  else
  {
    return objc_msgSend(*(id *)(a1 + 32), "flowItemDone:", *(_QWORD *)(a1 + 56));
  }
}

id sub_100067E94(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_startDisablingInteractionForExtendedInitialization", a1, a1);
}

id sub_100067EBC(uint64_t a1, char a2)
{
  if (*(_QWORD *)(a1 + 56))
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  if ((a2 & 1) != 0)
    return objc_msgSend(*(id *)(a1 + 32), "pushFlowItem:inFlow:withExtendedInitialization:animated:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), 0, *(_BYTE *)(a1 + 64) & 1);
  if (*(_QWORD *)(a1 + 48))
    return objc_msgSend(*(id *)(a1 + 48), "flowItemDone:", *(_QWORD *)(a1 + 40));
  return objc_msgSend(*(id *)(a1 + 32), "flowItemDone:", *(_QWORD *)(a1 + 40));
}

id sub_100067F58(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_endEventForNavigationDurationFromFlowItem:toFlowItem:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), a1, a1);
}

void sub_100067F8C(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  os_log_t oslog;
  int v6;
  uint64_t v7;
  id location[2];
  uint8_t buf[24];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v7 = a1;
  if (location[0])
  {
LABEL_9:
    v6 = 0;
    goto LABEL_10;
  }
  v3 = objc_opt_respondsToSelector(*(_QWORD *)(a1 + 32), "startFlowItem:");
  if ((v3 & 1) == 0)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v3);
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      sub_10003A6BC((uint64_t)buf, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
      _os_log_error_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_ERROR, "No view controller for BuddyController %{public}@ in flow %{public}@", buf, 0x16u);
    }
    objc_storeStrong((id *)&oslog, 0);
    if (*(_QWORD *)(a1 + 48))
      objc_msgSend(*(id *)(a1 + 48), "flowItemDone:", *(_QWORD *)(a1 + 32));
    else
      objc_msgSend(*(id *)(a1 + 40), "flowItemDone:", *(_QWORD *)(a1 + 32));
    goto LABEL_9;
  }
  v4 = objc_msgSend(*(id *)(a1 + 40), "buddyControllers");
  objc_msgSend(v4, "addObject:", *(_QWORD *)(a1 + 32));

  objc_msgSend(*(id *)(a1 + 32), "startFlowItem:", *(_BYTE *)(a1 + 56) & 1);
  v6 = 1;
LABEL_10:
  objc_storeStrong(location, 0);
}

void sub_100068F00(_QWORD *a1)
{
  void *v2;
  id v3;
  id v4;

  v2 = (void *)a1[4];
  v3 = objc_msgSend(v2, "navigator", a1, a1);
  v4 = objc_msgSend(v3, "navigationController");
  objc_msgSend(v2, "navigationController:didShowViewController:operation:animated:", v4, a1[5], 1, 1);

  if (a1[6])
    (*(void (**)(void))(a1[6] + 16))();
}

uint64_t sub_100068FA4(uint64_t result)
{
  if (*(_QWORD *)(result + 40))
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(result + 40) + 16))(*(_QWORD *)(result + 40), *(_QWORD *)(result + 32));
  return result;
}

uint64_t sub_100068FE0(uint64_t result)
{
  if (*(_QWORD *)(result + 40))
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(result + 40) + 16))(*(_QWORD *)(result + 40), *(_QWORD *)(result + 32));
  return result;
}

void sub_10006901C(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  intptr_t v10;
  uint64_t v11;
  NSDate *v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  id v16;
  os_log_type_t v17;
  os_log_t v18;
  id v19;
  id v20;
  os_log_type_t v21;
  os_log_t v22;
  int v23;
  os_log_type_t v24;
  os_log_t oslog[2];
  id location[2];
  uint8_t v27[32];
  uint8_t v28[32];
  uint8_t buf[24];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
  v24 = OS_LOG_TYPE_DEBUG;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEBUG))
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "navigator");
    v5 = objc_msgSend(v4, "view");
    v6 = objc_msgSend(v5, "window");
    sub_100066BA8((uint64_t)buf, (uint64_t)"-[BuddyNavigationFlowController _presentViewControllerForBuddyController:animated:willPresentViewController:completion:]_block_invoke", (uint64_t)v6);
    _os_log_debug_impl((void *)&_mh_execute_header, oslog[0], v24, "%s setUserInteractionEnabled YES %p", buf, 0x16u);

  }
  objc_storeStrong((id *)oslog, 0);
  v7 = objc_msgSend(*(id *)(a1 + 32), "navigator");
  v8 = objc_msgSend(v7, "view");
  v9 = objc_msgSend(v8, "window");
  objc_msgSend(v9, "setUserInteractionEnabled:", 1);

  if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) & 1) != 0)
  {
    v23 = 1;
  }
  else
  {
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24) = 1;
    v10 = dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
    v22 = (os_log_t)(id)_BYLoggingFacility(v10);
    v21 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v20 = (id)objc_opt_class(*(_QWORD *)(a1 + 48));
      v19 = (id)objc_opt_class(location[0]);
      sub_10003A6BC((uint64_t)v28, (uint64_t)v20, (uint64_t)v19);
      _os_log_impl((void *)&_mh_execute_header, v22, v21, "Hosted view controller creation for %{public}@ => %{public}@ finished", v28, 0x16u);
      objc_storeStrong(&v19, 0);
      objc_storeStrong(&v20, 0);
    }
    objc_storeStrong((id *)&v22, 0);
    v18 = (os_log_t)(id)_BYLoggingFacility(v11);
    v17 = OS_LOG_TYPE_DEBUG;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      v12 = +[NSDate date](NSDate, "date");
      -[NSDate timeIntervalSinceDate:](v12, "timeIntervalSinceDate:", *(_QWORD *)(a1 + 56));
      v14 = v13;
      v16 = (id)objc_opt_class(*(_QWORD *)(a1 + 48));
      sub_100069408((uint64_t)v27, v14, (uint64_t)v16);
      _os_log_debug_impl((void *)&_mh_execute_header, v18, v17, "Hosted view controller creation took %fs for %{public}@", v27, 0x16u);

      objc_storeStrong(&v16, 0);
    }
    objc_storeStrong((id *)&v18, 0);
    +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:](BFFViewControllerSpinnerManager, "stopAnimatingSpinnerFor:", CFSTR("BuddyNavigationFlowController"));
    if (location[0])
    {
      if (*(_QWORD *)(a1 + 64))
        (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 64) + 16))(*(_QWORD *)(a1 + 64));
      objc_msgSend(*(id *)(a1 + 32), "_hideBackButtonIfNecessaryOnFlowItem:withViewController:", *(_QWORD *)(a1 + 48), location[0], v16);
      v15 = objc_msgSend(*(id *)(a1 + 32), "buddyControllers");
      objc_msgSend(v15, "addObject:", *(_QWORD *)(a1 + 48));

    }
    if (*(_QWORD *)(a1 + 72))
      (*(void (**)(void))(*(_QWORD *)(a1 + 72) + 16))();
    v23 = 0;
  }
  objc_storeStrong(location, 0);
}

double sub_100069408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 134218242;
  *(_DWORD *)a1 = 134218242;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2114;
  *(_QWORD *)(a1 + 14) = a3;
  return result;
}

void sub_100069428(NSObject *a1)
{
  NSObject *isa;
  dispatch_time_t v3;
  intptr_t v4;
  void *v5;
  void **block;
  int v7;
  int v8;
  NSObject *(*v9);
  void *v10;
  objc_class *v11;
  objc_class *v12;
  objc_class *v13;
  id v14[3];
  id location;
  os_log_type_t v16;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = a1;
  oslog[1] = a1;
  isa = a1[4].isa;
  v3 = dispatch_time(0, 10000000000);
  v4 = dispatch_semaphore_wait(isa, v3);
  if (v4)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v16 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      location = (id)objc_opt_class(a1[5].isa);
      sub_100039500((uint64_t)buf, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v16, "Hosted view controller creation timed out for %{public}@", buf, 0xCu);
      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)oslog, 0);
    v5 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v7 = -1073741824;
    v8 = 0;
    v9 = sub_10006963C;
    v10 = &unk_1002811E0;
    v14[1] = a1[9].isa;
    v11 = a1[6].isa;
    v14[2] = a1[10].isa;
    v12 = a1[5].isa;
    v14[0] = a1[8].isa;
    v13 = a1[7].isa;
    dispatch_async((dispatch_queue_t)v5, &block);

    objc_storeStrong((id *)&v13, 0);
    objc_storeStrong(v14, 0);
    objc_storeStrong((id *)&v12, 0);
    objc_storeStrong((id *)&v11, 0);
  }
}

NSObject *sub_10006963C(NSObject *result)
{
  NSObject *v1;
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  os_log_t oslog[3];
  uint8_t buf[24];

  v1 = result;
  oslog[2] = result;
  oslog[1] = result;
  if ((*(_BYTE *)(*((_QWORD *)result[8].isa + 1) + 24) & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(result);
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEBUG))
    {
      v2 = -[objc_class navigator](v1[4].isa, "navigator");
      v3 = objc_msgSend(v2, "view");
      v4 = objc_msgSend(v3, "window");
      sub_100066BA8((uint64_t)buf, (uint64_t)"-[BuddyNavigationFlowController _presentViewControllerForBuddyController:animated:willPresentViewController:completion:]_block_invoke", (uint64_t)v4);
      _os_log_debug_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEBUG, "%s setUserInteractionEnabled YES %p", buf, 0x16u);

    }
    objc_storeStrong((id *)oslog, 0);
    v5 = -[objc_class navigator](v1[4].isa, "navigator");
    v6 = objc_msgSend(v5, "view");
    v7 = objc_msgSend(v6, "window");
    objc_msgSend(v7, "setUserInteractionEnabled:", 1);

    +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:](BFFViewControllerSpinnerManager, "stopAnimatingSpinnerFor:", CFSTR("BuddyNavigationFlowController"));
    *(_BYTE *)(*((_QWORD *)v1[9].isa + 1) + 24) = 1;
    result = -[objc_class cancelHostedPresentation](v1[5].isa, "cancelHostedPresentation");
    if (v1[7].isa)
      return (*((uint64_t (**)(void))v1[7].isa + 2))();
  }
  return result;
}

id sub_10006B464()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE870;
  v13 = qword_1002EE870;
  if (!qword_1002EE870)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100072028;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100072028(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

uint64_t sub_10006C870(uint64_t a1, objc_class *a2)
{
  id v3;
  id v4;
  id v5;
  uint64_t v6;
  unint64_t i;
  uint64_t isKindOfClass;
  int v10;
  id location;
  os_log_type_t v12;
  os_log_t oslog;
  _QWORD __b[8];
  uint64_t v15;
  uint64_t v16;
  Class aClass;
  uint64_t v18;
  char v19;
  uint8_t buf[24];
  _BYTE v21[128];

  v18 = a1;
  aClass = a2;
  v16 = a1;
  memset(__b, 0, sizeof(__b));
  v3 = objc_msgSend(*(id *)(a1 + 32), "navigator");
  v4 = objc_msgSend(v3, "viewControllers");

  v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", __b, v21, 16);
  if (v5)
  {
    v6 = *(_QWORD *)__b[2];
    while (2)
    {
      for (i = 0; i < (unint64_t)v5; ++i)
      {
        if (*(_QWORD *)__b[2] != v6)
          objc_enumerationMutation(v4);
        v15 = *(_QWORD *)(__b[1] + 8 * i);
        isKindOfClass = objc_opt_isKindOfClass(v15, aClass);
        if ((isKindOfClass & 1) != 0)
        {
          oslog = (os_log_t)(id)_BYLoggingFacility(isKindOfClass);
          v12 = OS_LOG_TYPE_DEBUG;
          if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
          {
            location = NSStringFromClass(aClass);
            sub_100038C28((uint64_t)buf, (uint64_t)location);
            _os_log_debug_impl((void *)&_mh_execute_header, oslog, v12, "%@ present", buf, 0xCu);

            objc_storeStrong(&location, 0);
          }
          objc_storeStrong((id *)&oslog, 0);
          v19 = 1;
          v10 = 1;
          goto LABEL_13;
        }
      }
      v5 = objc_msgSend(v4, "countByEnumeratingWithState:objects:count:", __b, v21, 16);
      if (v5)
        continue;
      break;
    }
  }
  v10 = 0;
LABEL_13:

  if (!v10)
    v19 = 0;
  return v19 & 1;
}

id sub_10006CAA4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_popToBuddyControllerWithClass:withOffset:animated:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 56) & 1, a1, a1);
}

void sub_10006CAE4(uint64_t a1)
{
  id v2;
  id v3;
  id v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController", a1, a1);
  objc_msgSend(v2, "beginAdvertisingProximitySetup");

  v3 = objc_msgSend(*(id *)(a1 + 32), "environment");
  v4 = objc_msgSend(v3, "miscState");
  objc_msgSend(v4, "setMigrationManager:", 0);

}

id sub_10006CB78(uint64_t a1, uint64_t a2)
{
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a2);
  return objc_msgSend(*(id *)(a1 + 32), "_popToBuddyControllerWithClass:withOffset:animated:", *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_BYTE *)(a1 + 64) & 1);
}

uint64_t sub_10006D014(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  id v8;
  _QWORD __b[8];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[128];

  v14 = a1;
  v13 = a1;
  v12 = 0x7FFFFFFFFFFFFFFFLL;
  memset(__b, 0, sizeof(__b));
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 128), "allObjects");
  v3 = objc_msgSend(v2, "reverseObjectEnumerator");

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", __b, v15, 16);
  if (v4)
  {
    v5 = *(_QWORD *)__b[2];
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)__b[2] != v5)
        objc_enumerationMutation(v3);
      v11 = *(_QWORD *)(__b[1] + 8 * v6);
      v7 = objc_msgSend(*(id *)(a1 + 32), "navigator");
      v8 = objc_msgSend(v7, "viewControllers");
      v12 = (uint64_t)objc_msgSend(v8, "indexOfObject:", v11);

      if (v12 != 0x7FFFFFFFFFFFFFFFLL)
        break;
      if (++v6 >= (unint64_t)v4)
      {
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", __b, v15, 16);
        if (v4)
          goto LABEL_3;
        break;
      }
    }
  }

  if (v12 == 0x7FFFFFFFFFFFFFFFLL)
    return 0;
  else
    return v12 + 1;
}

uint64_t sub_10006D20C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD __b[8];
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE v13[128];

  v12 = a1;
  v11 = a1;
  v10 = 0x7FFFFFFFFFFFFFFFLL;
  memset(__b, 0, sizeof(__b));
  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 120), "allObjects");
  v3 = objc_msgSend(v2, "reverseObjectEnumerator");

  v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", __b, v13, 16);
  if (v4)
  {
    v5 = *(_QWORD *)__b[2];
LABEL_3:
    v6 = 0;
    while (1)
    {
      if (*(_QWORD *)__b[2] != v5)
        objc_enumerationMutation(v3);
      v9 = *(_QWORD *)(__b[1] + 8 * v6);
      v10 = (uint64_t)objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 104), "indexOfObject:", v9);
      if (v10 != 0x7FFFFFFFFFFFFFFFLL)
        break;
      if (++v6 >= (unint64_t)v4)
      {
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", __b, v13, 16);
        if (v4)
          goto LABEL_3;
        break;
      }
    }
  }

  if (v10 == 0x7FFFFFFFFFFFFFFFLL)
    return 0;
  else
    return v10 + 1;
}

id sub_10006D598(uint64_t a1)
{
  id v1;
  id v2;
  id v3;

  v1 = objc_msgSend(*(id *)(a1 + 32), "navigator", a1, a1);
  v2 = objc_msgSend(v1, "viewControllers");
  v3 = objc_msgSend(v2, "indexOfFirstMatchingCondition:", &stru_1002812E8);

  return v3;
}

BOOL sub_10006D618(id a1, UIViewController *a2)
{
  id v2;
  uint64_t v3;
  char isKindOfClass;
  char v5;
  id v6;
  uint64_t v7;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v2 = location[0];
  v3 = objc_opt_class(BuddyLanguageController);
  isKindOfClass = objc_opt_isKindOfClass(v2, v3);
  v5 = 0;
  if ((isKindOfClass & 1) == 0)
  {
    v6 = location[0];
    v7 = objc_opt_class(BuddyLocaleController);
    v5 = objc_opt_isKindOfClass(v6, v7) ^ 1;
  }
  objc_storeStrong(location, 0);
  return v5 & 1;
}

id sub_10006D6AC(uint64_t a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend(*(id *)(a1 + 32), "buddyControllers", a1, a1);
  v2 = objc_msgSend(v1, "indexOfFirstMatchingCondition:", &stru_100281328);

  return v2;
}

BOOL sub_10006D708(id a1, id a2)
{
  id v2;
  uint64_t v3;
  char isKindOfClass;
  char v5;
  id v6;
  uint64_t v7;
  char v8;
  id v9;
  uint64_t v10;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v2 = location[0];
  v3 = objc_opt_class(BuddyLanguageLocaleFlow);
  isKindOfClass = objc_opt_isKindOfClass(v2, v3);
  v5 = 0;
  if ((isKindOfClass & 1) == 0)
  {
    v6 = location[0];
    v7 = objc_opt_class(BuddyLanguageController);
    v8 = objc_opt_isKindOfClass(v6, v7);
    v5 = 0;
    if ((v8 & 1) == 0)
    {
      v9 = location[0];
      v10 = objc_opt_class(BuddyLocaleController);
      v5 = objc_opt_isKindOfClass(v9, v10) ^ 1;
    }
  }
  objc_storeStrong(location, 0);
  return v5 & 1;
}

void sub_10006DA1C(id a1, unint64_t a2, NSArray *a3, NSString *a4)
{
  uint64_t v6;
  unint64_t v7;
  id v8;
  os_log_t v9;
  os_log_type_t v10;
  os_log_t oslog[2];
  id v12;
  id location;
  unint64_t v14;
  id v15;
  uint8_t v16[16];
  uint8_t buf[24];

  v15 = a1;
  v14 = a2;
  location = 0;
  objc_storeStrong(&location, a3);
  v12 = 0;
  objc_storeStrong(&v12, a4);
  oslog[1] = (os_log_t)a1;
  if (v14 == 0x7FFFFFFFFFFFFFFFLL)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v6);
    v10 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_100038C28((uint64_t)buf, (uint64_t)v12);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v10, "%@ generated index should return an actual index", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  v7 = v14;
  v8 = objc_msgSend(location, "count");
  if (v7 > (unint64_t)v8)
  {
    v9 = (os_log_t)(id)_BYLoggingFacility(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      sub_100038C28((uint64_t)v16, (uint64_t)v12);
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "%@ insertion out of bounds", v16, 0xCu);
    }
    objc_storeStrong((id *)&v9, 0);
  }
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&location, 0);
}

id sub_10006DBC4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_startDisablingInteractionForExtendedInitialization", a1, a1);
}

void sub_10006DBEC(NSObject *a1, char a2)
{
  id v3;
  objc_class *v4;
  id v5;
  id v6;
  id v7;
  Class isa;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  id location;
  os_log_type_t v15;
  os_log_t oslog[2];
  char v17;
  NSObject *v18;
  uint8_t buf[24];

  v18 = a1;
  v17 = a2;
  oslog[1] = a1;
  v3 = -[objc_class _stopDisablingInteractionForExtendedInitialization](a1[4].isa, "_stopDisablingInteractionForExtendedInitialization");
  if ((v17 & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    v15 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v4 = (objc_class *)objc_opt_class(a1[5].isa);
      location = NSStringFromClass(v4);
      sub_100038C28((uint64_t)buf, (uint64_t)location);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v15, "%@ doesn't want to show, but showing anyway.", buf, 0xCu);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  v13 = 0;
  v13 = (*((uint64_t (**)(void))a1[6].isa + 2))();
  v5 = -[objc_class navigator](a1[4].isa, "navigator");
  v6 = objc_msgSend(v5, "viewControllers");
  v12 = objc_msgSend(v6, "mutableCopy");

  (*((void (**)(void))a1[7].isa + 2))();
  objc_msgSend(v12, "insertObject:atIndex:", a1[5].isa, v13);
  v7 = -[objc_class navigator](a1[4].isa, "navigator");
  objc_msgSend(v7, "setViewControllers:animated:", v12, 0);

  v11 = (*((uint64_t (**)(void))a1[8].isa + 2))();
  isa = a1[7].isa;
  v9 = -[objc_class buddyControllers](a1[4].isa, "buddyControllers");
  (*((void (**)(Class, uint64_t, id, const __CFString *))isa + 2))(isa, v11, v9, CFSTR("buddyControllerInsertionIndexGenerator"));

  v10 = -[objc_class buddyControllers](a1[4].isa, "buddyControllers");
  objc_msgSend(v10, "insertObject:atIndex:", a1[5].isa, v11);

  if (a1[9].isa)
    (*((void (**)(void))a1[9].isa + 2))();
  objc_storeStrong(&v12, 0);
}

void sub_10006E1BC(id *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  v2 = objc_msgSend(a1[4], "navigator");
  v3 = objc_msgSend(v2, "viewControllers");
  location[0] = objc_msgSend(v3, "lastObject");

  v4 = a1[4];
  v5 = objc_msgSend(v4, "navigator");
  v6 = objc_msgSend(v5, "navigationController");
  objc_msgSend(v4, "navigationController:willShowViewController:operation:animated:", v6, location[0], 2, 1);

  v7 = a1[4];
  v8 = objc_msgSend(v7, "navigator");
  v9 = objc_msgSend(v8, "navigationController");
  objc_msgSend(v7, "navigationController:didShowViewController:operation:animated:", v9, location[0], 2, 1);

  objc_storeStrong(location, 0);
}

double sub_100070398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  double result;

  *(_QWORD *)&result = 138544130;
  *(_DWORD *)a1 = 138544130;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2048;
  *(_QWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 1024;
  *(_DWORD *)(a1 + 34) = a5;
  return result;
}

double sub_1000703D0(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  double result;

  *(_QWORD *)&result = 138543874;
  *(_DWORD *)a1 = 138543874;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2048;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 1024;
  *(_DWORD *)(a1 + 24) = a4;
  return result;
}

double sub_1000703FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)&result = 138412802;
  *(_DWORD *)a1 = 138412802;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2114;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2048;
  *(_QWORD *)(a1 + 24) = a4;
  return result;
}

BOOL sub_100070428(id a1, BFFFlowItem *a2, unint64_t a3, BOOL *a4)
{
  id v4;
  uint64_t v5;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v4 = location[0];
  v5 = objc_opt_class(BuddyWiFiController);
  LOBYTE(v4) = objc_opt_isKindOfClass(v4, v5);
  objc_storeStrong(location, 0);
  return v4 & 1;
}

id sub_100071598(id *a1, void *a2)
{
  id WeakRetained;
  id v4;
  id v5;
  id v6;
  id v8;
  id *v9;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v9 = a1;
  WeakRetained = objc_loadWeakRetained(a1 + 4);
  v4 = location[0];
  v5 = objc_msgSend(WeakRetained, "environment", WeakRetained, v9);
  objc_msgSend(WeakRetained, "_injectDependencies:withEnvironment:", v4, v5);

  v6 = location[0];
  objc_storeStrong(&v8, 0);
  objc_storeStrong(location, 0);
  return v6;
}

uint64_t sub_100071F08(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE868;
  v9 = qword_1002EE868;
  if (!qword_1002EE868)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100071F98;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_100071F98((uint64_t)&v2);
  }
  return qword_1002EE868;
}

uint64_t sub_100071F98(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/WiFiKitUI.framework/WiFiKitUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE868 = result;
  return result;
}

void sub_100072028(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_100063984();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("WFBuddyViewController");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getWFBuddyViewControllerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyNavigationFlowController.m"), 104, CFSTR("Unable to find class %s"), "WFBuddyViewController");

    __break(1u);
  }
  qword_1002EE870 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_10007249C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, int a20,_Unwind_Exception *exception_object,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000724F0(id *a1, void *a2)
{
  id WeakRetained;
  id v4;
  id v5;
  void (**v6)(_QWORD);
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  WeakRetained = objc_loadWeakRetained(a1 + 4);
  v4 = objc_msgSend(WeakRetained, "skipWiFi");

  if (v4)
  {
    v5 = objc_loadWeakRetained(a1 + 4);
    v6 = (void (**)(_QWORD))objc_msgSend(v5, "skipWiFi");
    v6[2](v6);

  }
  objc_storeStrong(location, 0);
}

void sub_1000725AC(id *a1, void *a2)
{
  id WeakRetained;
  id v4;
  id v5;
  void (**v6)(_QWORD);
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  WeakRetained = objc_loadWeakRetained(a1 + 4);
  v4 = objc_msgSend(WeakRetained, "useWiFi");

  if (v4)
  {
    v5 = objc_loadWeakRetained(a1 + 4);
    v6 = (void (**)(_QWORD))objc_msgSend(v5, "useWiFi");
    v6[2](v6);

  }
  objc_storeStrong(location, 0);
}

NSArray *__cdecl sub_1000731D0(id a1)
{
  return (NSArray *)+[BuddyMultilingualDataModelProvider _createLanguageSelectorDefaults](BuddyMultilingualDataModelProvider, "_createLanguageSelectorDefaults", a1, a1);
}

NSArray *__cdecl sub_100073200(id a1)
{
  return (NSArray *)+[BuddyMultilingualDataModelProvider _createLanguageSelectorAllData](BuddyMultilingualDataModelProvider, "_createLanguageSelectorAllData", a1, a1);
}

NSArray *__cdecl sub_100073278(id a1)
{
  return (NSArray *)+[BuddyMultilingualDataModelProvider _createKeyboardSelectorDefaults](BuddyMultilingualDataModelProvider, "_createKeyboardSelectorDefaults", a1, a1);
}

NSArray *__cdecl sub_1000732A8(id a1)
{
  return (NSArray *)+[BuddyMultilingualDataModelProvider _createKeyboardSelectorAllData](BuddyMultilingualDataModelProvider, "_createKeyboardSelectorAllData", a1, a1);
}

NSArray *__cdecl sub_1000732D8(id a1)
{
  return (NSArray *)+[BuddyMultilingualDataModelProvider _createKeyboardSelectorSelectedData](BuddyMultilingualDataModelProvider, "_createKeyboardSelectorSelectedData", a1, a1);
}

NSArray *__cdecl sub_10007334C(id a1)
{
  return (NSArray *)+[BuddyMultilingualDataModelProvider _createDictationSelectorDefaultsForExpress:](BuddyMultilingualDataModelProvider, "_createDictationSelectorDefaultsForExpress:", 0, a1, a1);
}

NSArray *__cdecl sub_100073380(id a1)
{
  return (NSArray *)+[BuddyMultilingualDataModelProvider _createDictationSelectorAllDataForExpress:](BuddyMultilingualDataModelProvider, "_createDictationSelectorAllDataForExpress:", 0, a1, a1);
}

NSArray *__cdecl sub_1000733F8(id a1)
{
  return (NSArray *)+[BuddyMultilingualDataModelProvider _createDictationSelectorDefaultsForExpress:](BuddyMultilingualDataModelProvider, "_createDictationSelectorDefaultsForExpress:", 1, a1, a1);
}

NSArray *__cdecl sub_100073430(id a1)
{
  return (NSArray *)+[BuddyMultilingualDataModelProvider _createDictationSelectorAllDataForExpress:](BuddyMultilingualDataModelProvider, "_createDictationSelectorAllDataForExpress:", 1, a1, a1);
}

double sub_100073860(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  double result;

  *(_QWORD *)&result = 138412802;
  *(_DWORD *)a1 = 138412802;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 1024;
  *(_DWORD *)(a1 + 24) = a4;
  return result;
}

uint64_t sub_100073D00(_QWORD *a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  void *v7;
  id v8;
  unsigned __int8 v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  unsigned __int8 v14;
  void *v15;
  id v16;
  _BYTE *v17;
  void *v18;
  id v19;
  char v21;
  char v22;
  id v23;
  id location[2];
  uint64_t v25;

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v23 = 0;
  objc_storeStrong(&v23, a3);
  v5 = (void *)a1[4];
  v6 = objc_msgSend(location[0], "identifier");
  LOBYTE(v5) = objc_msgSend(v5, "containsObject:", v6);

  v22 = v5 & 1;
  v7 = (void *)a1[4];
  v8 = objc_msgSend(v23, "identifier");
  v9 = objc_msgSend(v7, "containsObject:", v8);

  if ((v22 & 1) != 0 && (v9 & 1) != 0)
  {
    v10 = (void *)a1[5];
    v11 = objc_msgSend(location[0], "identifier");
    LOBYTE(v10) = objc_msgSend(v10, "containsObject:", v11);

    v21 = v10 & 1;
    v12 = (void *)a1[5];
    v13 = objc_msgSend(v23, "identifier");
    v14 = objc_msgSend(v12, "containsObject:", v13);

    if ((v21 & 1) == 0 || (v14 & 1) != 0)
    {
      if ((v21 & 1) != 0 || (v14 & 1) == 0)
      {
        v15 = (void *)a1[4];
        v16 = objc_msgSend(location[0], "identifier");
        v17 = objc_msgSend(v15, "indexOfObject:", v16);
        v18 = (void *)a1[4];
        v19 = objc_msgSend(v23, "identifier");
        v25 = v17 - (_BYTE *)objc_msgSend(v18, "indexOfObject:", v19);

      }
      else
      {
        v25 = 1;
      }
    }
    else
    {
      v25 = -1;
    }
  }
  else if ((v22 & 1) == 0 || (v9 & 1) != 0)
  {
    v25 = (v22 & 1) == 0 && (v9 & 1) != 0;
  }
  else
  {
    v25 = -1;
  }
  objc_storeStrong(&v23, 0);
  objc_storeStrong(location, 0);
  return v25;
}

id sub_100074150(id a1, UIKeyboardInputMode *a2)
{
  id v2;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v2 = objc_msgSend(location[0], "displayName");
  objc_storeStrong(location, 0);
  return v2;
}

void sub_1000741AC(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14[4];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v14[3] = a3;
  v14[2] = a4;
  v14[1] = a1;
  v14[0] = location[0];
  v13 = objc_msgSend(v14[0], "displayName");
  v12 = 0;
  if ((unint64_t)objc_msgSend(a1[4], "countForObject:", v13) > 1)
  {
    v7 = objc_msgSend(v14[0], "identifier");
    v8 = (id)UIKeyboardLocalizedSWLayoutName(v7);
    v9 = v12;
    v12 = v8;

  }
  v10 = objc_msgSend(v14[0], "identifier");
  v11 = +[BuddyMultilingualLanguageData withLanguageMainDisplayText:secondaryDisplayText:identifier:isDefault:editingOption:](BuddyMultilingualLanguageData, "withLanguageMainDisplayText:secondaryDisplayText:identifier:isDefault:editingOption:", v13, v12, v10, 1, 3);

  objc_msgSend(a1[5], "addObject:", v11);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(v14, 0);
  objc_storeStrong(location, 0);
}

id sub_10007455C(id a1, id a2)
{
  id v2;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v2 = objc_msgSend(location[0], "identifier");
  objc_storeStrong(location, 0);
  return v2;
}

id sub_1000745B8(id a1, UIKeyboardInputMode *a2)
{
  id v2;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v2 = objc_msgSend(location[0], "displayName");
  objc_storeStrong(location, 0);
  return v2;
}

void sub_100074614(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16[4];
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v16[3] = a3;
  v16[2] = a4;
  v16[1] = (id)a1;
  v16[0] = location[0];
  v15 = objc_msgSend(v16[0], "displayName");
  v14 = 0;
  if ((unint64_t)objc_msgSend(*(id *)(a1 + 32), "countForObject:", v15) > 1)
  {
    v7 = objc_msgSend(v16[0], "identifier");
    v8 = (id)UIKeyboardLocalizedSWLayoutName(v7);
    v9 = v14;
    v14 = v8;

  }
  v10 = objc_msgSend(v16[0], "identifier");
  v11 = *(void **)(a1 + 40);
  v12 = objc_msgSend(v16[0], "identifier");
  v13 = +[BuddyMultilingualLanguageData withLanguageMainDisplayText:secondaryDisplayText:identifier:isDefault:editingOption:](BuddyMultilingualLanguageData, "withLanguageMainDisplayText:secondaryDisplayText:identifier:isDefault:editingOption:", v15, v14, v10, (unint64_t)objc_msgSend(v11, "containsObject:", v12) & 1, 3);

  objc_msgSend(*(id *)(a1 + 48), "addObject:", v13);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(v16, 0);
  objc_storeStrong(location, 0);
}

id sub_100074CA4(id a1, UIKeyboardInputMode *a2)
{
  id v2;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v2 = objc_msgSend(location[0], "identifier");
  objc_storeStrong(location, 0);
  return v2;
}

id sub_100074D00(id a1, id a2)
{
  id v2;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v2 = objc_msgSend(location[0], "identifier");
  objc_storeStrong(location, 0);
  return v2;
}

id sub_100074D5C(id a1, UIKeyboardInputMode *a2)
{
  id v2;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v2 = objc_msgSend(location[0], "displayName");
  objc_storeStrong(location, 0);
  return v2;
}

void sub_10007599C(uint64_t a1, void *a2)
{
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(*(id *)(a1 + 64), "eraseWithWindow:navigationController:proximitySetupController:analyticsManager:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  objc_storeStrong(location, 0);
}

void sub_100075B9C(id *a1)
{
  id v2;
  id v3;
  objc_class *v4;
  NSString *v5;
  DDRResetService *v6;
  void **v7;
  int v8;
  int v9;
  void (*v10)(NSObject *, void *);
  void *v11;
  id v12;
  id location;
  id v14[3];

  v14[2] = a1;
  v14[1] = a1;
  objc_msgSend(a1[4], "setupFinished");
  v2 = a1[5];
  v3 = objc_msgSend(a1[6], "topViewController");
  v4 = (objc_class *)objc_opt_class(v3);
  v5 = NSStringFromClass(v4);
  +[BuddyStartOverAnalytics addEraseEventWithAnalyticsManager:paneIdentifier:](_TtC5Setup23BuddyStartOverAnalytics, "addEraseEventWithAnalyticsManager:paneIdentifier:", v2, v5);

  objc_msgSend(a1[5], "commitThenUpload");
  v14[0] = objc_alloc_init((Class)DDRResetOptions);
  location = objc_msgSend(objc_alloc((Class)DDRResetRequest), "initWithMode:options:reason:", 4, v14[0], CFSTR("User-Requested Erase"));
  v6 = +[DDRResetService sharedInstance](DDRResetService, "sharedInstance");
  v7 = _NSConcreteStackBlock;
  v8 = -1073741824;
  v9 = 0;
  v10 = sub_100075D28;
  v11 = &unk_100280B80;
  v12 = a1[7];
  -[DDRResetService resetWithRequest:completion:](v6, "resetWithRequest:completion:", location, &v7);

  objc_storeStrong(&v12, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(v14, 0);
}

void sub_100075D28(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSString *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t v7[15];
  os_log_type_t v8;
  os_log_t v9;
  char v10;
  id v11;
  char v12;
  id v13;
  os_log_type_t v14;
  os_log_t oslog[2];
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    v14 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v12 = 0;
      v10 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v4 = (NSString *)location[0];
      }
      else if (location[0])
      {
        v13 = objc_msgSend(location[0], "domain");
        v12 = 1;
        v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v13, objc_msgSend(location[0], "code"));
        v11 = v4;
        v10 = 1;
      }
      else
      {
        v4 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v4);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v14, "Reset failed: %{public}@", buf, 0xCu);
      if ((v10 & 1) != 0)

      if ((v12 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
    -[objc_class setUserInteractionEnabled:](a1[4].isa, "setUserInteractionEnabled:", 1);
  }
  else
  {
    v9 = (os_log_t)(id)_BYLoggingFacility(v3);
    v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v9;
      v6 = v8;
      sub_100038C3C(v7);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Reset was successful!", v7, 2u);
    }
    objc_storeStrong((id *)&v9, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_1000760C4(uint64_t a1)
{
  BuddyMigrationTargetLockscreenErrorController *v2;
  id v3;
  id v4;

  v2 = -[BuddyMigrationTargetErrorController initWithError:]([BuddyMigrationTargetLockscreenErrorController alloc], "initWithError:", *(_QWORD *)(a1 + 40), a1, a1);
  objc_msgSend(*(id *)(a1 + 32), "setErrorController:", v2);

  v3 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
  v4 = objc_msgSend(*(id *)(a1 + 32), "errorController");
  objc_msgSend(v3, "pushViewController:animated:", v4, 1);

}

id sub_1000763A8()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE878;
  v13 = qword_1002EE878;
  if (!qword_1002EE878)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100077084;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100077084(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

id sub_100076880()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE888;
  v13 = qword_1002EE888;
  if (!qword_1002EE888)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100077414;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100077414(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_100076AA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(a1);
}

void sub_100076AC4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  BOOL v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t isKindOfClass;
  id v15;
  id v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _WORD v23[3];
  char v24;
  os_log_t v25;
  uint8_t v26[15];
  os_log_type_t v27;
  os_log_t v28;
  id v29;
  id v30;
  id v31;
  os_log_type_t v32;
  os_log_t v33;
  uint8_t buf[7];
  os_log_type_t v35;
  os_log_t oslog[2];
  id v37;
  id location[2];
  uint8_t v39[24];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v37 = 0;
  objc_storeStrong(&v37, a3);
  oslog[1] = (os_log_t)a1;
  if (v37)
  {
    v5 = objc_msgSend(v37, "domain");
    v6 = sub_100076E94();
    v7 = 0;
    if ((objc_msgSend(v5, "isEqualToString:", v6) & 1) != 0)
      v7 = objc_msgSend(v37, "code") == (id)62;

    if (v7)
    {
      oslog[0] = (os_log_t)(id)_BYLoggingFacility(v8);
      v35 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
      {
        v9 = oslog[0];
        v10 = v35;
        sub_100038C3C(buf);
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "No mandatory software update information available", buf, 2u);
      }
      objc_storeStrong((id *)oslog, 0);
    }
    else
    {
      v33 = (os_log_t)(id)_BYLoggingFacility(v8);
      v32 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        sub_100038C28((uint64_t)v39, (uint64_t)v37);
        _os_log_impl((void *)&_mh_execute_header, v33, v32, "Unable to get mandatory software update information: %@", v39, 0xCu);
      }
      objc_storeStrong((id *)&v33, 0);
    }
  }
  else
  {
    v11 = location[0];
    v12 = sub_100076F8C();
    v31 = objc_msgSend(v11, "objectForKeyedSubscript:", v12);

    v13 = objc_opt_class(NSString);
    isKindOfClass = objc_opt_isKindOfClass(v31, v13);
    if ((isKindOfClass & 1) != 0)
    {
      v15 = location[0];
      v16 = sub_100076F8C();
      v30 = objc_msgSend(v15, "objectForKeyedSubscript:", v16);

      if (v30)
      {
        v29 = objc_alloc_init((Class)NSNumberFormatter);
        v18 = objc_msgSend(v29, "numberFromString:", v30);
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = objc_msgSend(v18, "unsignedIntegerValue");

        objc_storeStrong(&v29, 0);
      }
      else
      {
        v28 = (os_log_t)(id)_BYLoggingFacility(v17);
        v27 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          v19 = v28;
          v20 = v27;
          sub_100038C3C(v26);
          _os_log_impl((void *)&_mh_execute_header, v19, v20, "No mandatory software update information available (flags are nil)", v26, 2u);
        }
        objc_storeStrong((id *)&v28, 0);
      }
      objc_storeStrong(&v30, 0);
    }
    else
    {
      v25 = (os_log_t)(id)_BYLoggingFacility(isKindOfClass);
      v24 = 16;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        v21 = v25;
        v22 = v24;
        sub_100038C3C(v23);
        _os_log_error_impl((void *)&_mh_execute_header, v21, v22, "Mandatory software update information is not a string", (uint8_t *)v23, 2u);
      }
      objc_storeStrong((id *)&v25, 0);
    }
    objc_storeStrong(&v31, 0);
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
  objc_storeStrong(&v37, 0);
  objc_storeStrong(location, 0);
}

id sub_100076E94()
{
  NSAssertionHandler *v0;
  NSString *v1;
  id *v3;

  v3 = (id *)sub_100077554();
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *getSUErrorDomain(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyMandatoryUpdateUtilities.m"), 28, CFSTR("%s"), dlerror());

    __break(1u);
  }
  return *v3;
}

id sub_100076F8C()
{
  NSAssertionHandler *v0;
  NSString *v1;
  id *v3;

  v3 = (id *)sub_1000776A0();
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *getSUMandatoryUpdateFlagsKey(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyMandatoryUpdateUtilities.m"), 30, CFSTR("%s"), dlerror());

    __break(1u);
  }
  return *v3;
}

void sub_100077084(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1000771C4();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("SUDownloadPolicyFactory");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getSUDownloadPolicyFactoryClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyMandatoryUpdateUtilities.m"), 26, CFSTR("Unable to find class %s"), "SUDownloadPolicyFactory");

    __break(1u);
  }
  qword_1002EE878 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_1000771C4()
{
  NSAssertionHandler *v0;
  NSString *v1;
  uint64_t v3;
  void *v4;

  v4 = 0;
  v3 = sub_1000772F4((uint64_t)&v4);
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *SoftwareUpdateServicesLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyMandatoryUpdateUtilities.m"), 25, CFSTR("%s"), v4);

    __break(1u);
  }
  if (v4)
    free(v4);
  return v3;
}

uint64_t sub_1000772F4(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE880;
  v9 = qword_1002EE880;
  if (!qword_1002EE880)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100077384;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_100077384((uint64_t)&v2);
  }
  return qword_1002EE880;
}

uint64_t sub_100077384(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/SoftwareUpdateServices.framework/SoftwareUpdateServices";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE880 = result;
  return result;
}

void sub_100077414(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1000771C4();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("SUManagerClient");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getSUManagerClientClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyMandatoryUpdateUtilities.m"), 32, CFSTR("Unable to find class %s"), "SUManagerClient");

    __break(1u);
  }
  qword_1002EE888 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_100077554()
{
  uint64_t v0;
  void **v2;
  int v3;
  int v4;
  void *(*v5)(uint64_t);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 0x20000000;
  v12 = 32;
  v8 = qword_1002EE890;
  v13 = qword_1002EE890;
  if (!qword_1002EE890)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100077638;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100077638((uint64_t)&v2);
  }
  v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_100077638(uint64_t a1)
{
  void *v2;
  void *result;

  v2 = (void *)sub_1000771C4();
  result = dlsym(v2, "SUErrorDomain");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1002EE890 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000776A0()
{
  uint64_t v0;
  void **v2;
  int v3;
  int v4;
  void *(*v5)(uint64_t);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 0x20000000;
  v12 = 32;
  v8 = qword_1002EE898;
  v13 = qword_1002EE898;
  if (!qword_1002EE898)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100077784;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100077784((uint64_t)&v2);
  }
  v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_100077784(uint64_t a1)
{
  void *v2;
  void *result;

  v2 = (void *)sub_1000771C4();
  result = dlsym(v2, "SUMandatoryUpdateFlagsKey");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1002EE898 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100077ED8(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "controllerDone");
  objc_storeStrong(location, 0);
}

void sub_1000783EC(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v8 = 0;
  objc_storeStrong(&v8, a3);
  v7 = 0;
  objc_storeStrong(&v7, a4);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(&v7, 0);
  objc_storeStrong(&v8, 0);
  objc_storeStrong(location, 0);
}

void sub_100078788(id *a1)
{
  NSObject *v2;
  void *v3;
  NSObject *v4;
  id v5;
  void **v6;
  int v7;
  int v8;
  void (*v9)(id *, void *, void *);
  void *v10;
  id v11;
  id v12;
  int v13;
  void **v14;
  int v15;
  int v16;
  uint64_t (*v17)(uint64_t);
  void *v18;
  id v19[2];
  void **block;
  int v21;
  int v22;
  void (*v23)(uint64_t);
  void *v24;
  id v25[2];
  uint64_t v26;
  uint64_t *v27;
  int v28;
  int v29;
  void (*v30)(uint64_t, uint64_t);
  void (*v31)(uint64_t);
  id v32[3];

  v32[2] = a1;
  v32[1] = a1;
  v26 = 0;
  v27 = &v26;
  v28 = 838860800;
  v29 = 48;
  v30 = sub_100078A24;
  v31 = sub_100078A54;
  v32[0] = 0;
  v2 = objc_msgSend(a1[4], "termsQueue");
  block = _NSConcreteStackBlock;
  v21 = -1073741824;
  v22 = 0;
  v23 = sub_100078A60;
  v24 = &unk_100281780;
  v25[1] = &v26;
  v25[0] = a1[4];
  dispatch_sync(v2, &block);

  if (v27[5])
  {
    if (a1[5])
    {
      v3 = &_dispatch_main_q;
      v14 = _NSConcreteStackBlock;
      v15 = -1073741824;
      v16 = 0;
      v17 = sub_100078AB4;
      v18 = &unk_1002817A8;
      v19[0] = a1[5];
      v19[1] = &v26;
      dispatch_async((dispatch_queue_t)v3, &v14);

      objc_storeStrong(v19, 0);
    }
    v13 = 1;
  }
  else
  {
    v4 = objc_msgSend(a1[4], "termsRequestQueue");
    dispatch_suspend(v4);

    v5 = a1[4];
    v6 = _NSConcreteStackBlock;
    v7 = -1073741824;
    v8 = 0;
    v9 = sub_100078AF4;
    v10 = &unk_1002817F8;
    v11 = a1[4];
    v12 = a1[5];
    objc_msgSend(v5, "fetchTermsFromServer:", &v6);
    objc_storeStrong(&v12, 0);
    objc_storeStrong(&v11, 0);
    v13 = 0;
  }
  objc_storeStrong(v25, 0);
  _Block_object_dispose(&v26, 8);
  objc_storeStrong(v32, 0);
}

void sub_100078A24(uint64_t a1, uint64_t a2)
{
  void *v2;
  id *v3;

  v3 = (id *)(a2 + 40);
  v2 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);
  objc_storeStrong(v3, 0);
}

void sub_100078A54(uint64_t a1)
{
  objc_storeStrong((id *)(a1 + 40), 0);
}

void sub_100078A60(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "cachedTermsData", a1, a1);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

uint64_t sub_100078AB4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), 0);
}

void sub_100078AF4(id *a1, void *a2, void *a3)
{
  NSObject *v5;
  NSObject *v6;
  void *v7;
  void **v8;
  int v9;
  int v10;
  uint64_t (*v11)(_QWORD *);
  void *v12;
  id v13;
  id v14;
  id v15;
  void **block;
  int v17;
  int v18;
  id (*v19)(uint64_t);
  void *v20;
  id v21;
  id v22[2];
  id v23;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v23 = 0;
  objc_storeStrong(&v23, a3);
  v22[1] = a1;
  if (location[0])
  {
    v5 = objc_msgSend(a1[4], "termsQueue");
    block = _NSConcreteStackBlock;
    v17 = -1073741824;
    v18 = 0;
    v19 = sub_100078CF8;
    v20 = &unk_100280D00;
    v21 = a1[4];
    v22[0] = location[0];
    dispatch_sync(v5, &block);

    objc_storeStrong(v22, 0);
    objc_storeStrong(&v21, 0);
  }
  v6 = objc_msgSend(a1[4], "termsRequestQueue");
  dispatch_resume(v6);

  if (a1[5])
  {
    v7 = &_dispatch_main_q;
    v8 = _NSConcreteStackBlock;
    v9 = -1073741824;
    v10 = 0;
    v11 = sub_100078D24;
    v12 = &unk_1002817D0;
    v15 = a1[5];
    v13 = location[0];
    v14 = v23;
    dispatch_async((dispatch_queue_t)v7, &v8);

    objc_storeStrong(&v14, 0);
    objc_storeStrong(&v13, 0);
    objc_storeStrong(&v15, 0);
  }
  objc_storeStrong(&v23, 0);
  objc_storeStrong(location, 0);
}

id sub_100078CF8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setCachedTermsData:", *(_QWORD *)(a1 + 40), a1, a1);
}

uint64_t sub_100078D24(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10007912C(_QWORD *a1, void *a2, void *a3, void *a4)
{
  id v7;
  NSString *v8;
  char v9;
  NSString *v10;
  char v11;
  id v12;
  os_log_t oslog;
  id v14;
  id v15[2];
  id v16;
  id v17;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v17 = 0;
  objc_storeStrong(&v17, a3);
  v16 = 0;
  objc_storeStrong(&v16, a4);
  v15[1] = a1;
  v15[0] = v17;
  v14 = objc_msgSend(v15[0], "responseData");
  oslog = (os_log_t)(id)_BYLoggingFacility(v14);
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    v7 = objc_msgSend(v14, "length");
    v11 = 0;
    v9 = 0;
    if ((_BYIsInternalInstall() & 1) != 0)
    {
      v8 = (NSString *)v16;
    }
    else if (v16)
    {
      v12 = objc_msgSend(v16, "domain");
      v11 = 1;
      v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v12, objc_msgSend(v16, "code"));
      v10 = v8;
      v9 = 1;
    }
    else
    {
      v8 = 0;
    }
    sub_100069408((uint64_t)buf, (uint64_t)v7, (uint64_t)v8);
    _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Terms request completed with data length %llu, error (non-nil does not imply failure) = %{public}@", buf, 0x16u);
    if ((v9 & 1) != 0)

    if ((v11 & 1) != 0)
  }
  objc_storeStrong((id *)&oslog, 0);
  objc_msgSend(v14, "length");
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(&v14, 0);
  objc_storeStrong(v15, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(&v17, 0);
  objc_storeStrong(location, 0);
}

double sub_100079738()
{
  return 0.0;
}

double sub_10007A3E0(uint64_t a1, uint64_t a2)
{
  char v2;
  double result;

  v2 = BFFIsiPad(a1, a2);
  result = 57.0;
  if ((v2 & 1) == 0)
    return 18.0;
  return result;
}

uint64_t sub_10007B204(uint64_t a1)
{
  uint64_t result;

  result = (uint64_t)objc_msgSend(*(id *)(a1 + 32), "waiting", a1, a1);
  if ((result & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setPaneVisible:", 1);
    result = (uint64_t)objc_msgSend(*(id *)(a1 + 32), "setExtendedInitializationCompletion:", 0);
    if (*(_QWORD *)(a1 + 40))
      return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  return result;
}

id sub_10007B278(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_waitForKeychainAndPreflight", a1, a1);
}

void sub_10007B36C(id *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  void **block;
  int v8;
  int v9;
  id (*v10)(uint64_t);
  void *v11;
  id v12;
  id v13;
  uint8_t buf[15];
  char v15;
  id v16[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v16[1] = a1;
  if (location[0])
  {
    v16[0] = (id)_BYLoggingFacility(v3);
    v15 = 16;
    if (os_log_type_enabled((os_log_t)v16[0], OS_LOG_TYPE_ERROR))
    {
      v4 = v16[0];
      v5 = v15;
      sub_100038C3C(buf);
      _os_log_error_impl((void *)&_mh_execute_header, v4, v5, "Keychain transfer failed, not waiting for preflight!", buf, 2u);
    }
    objc_storeStrong(v16, 0);
    v6 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v8 = -1073741824;
    v9 = 0;
    v10 = sub_10007B4EC;
    v11 = &unk_100280D00;
    v12 = a1[4];
    v13 = location[0];
    dispatch_async((dispatch_queue_t)v6, &block);

    objc_storeStrong(&v13, 0);
    objc_storeStrong(&v12, 0);
  }
  else
  {
    objc_msgSend(a1[4], "_waitForPreflight");
  }
  objc_storeStrong(location, 0);
}

id sub_10007B4EC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_showError:", *(_QWORD *)(a1 + 40), a1, a1);
}

void sub_10007B5E8(id *a1, void *a2, void *a3)
{
  void *v5;
  void **block;
  int v7;
  int v8;
  id (*v9)(uint64_t);
  void *v10;
  id v11;
  id v12;
  id v13[2];
  id v14;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = a1;
  v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_10007B718;
  v10 = &unk_100281000;
  v11 = v14;
  v12 = a1[4];
  v13[0] = location[0];
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

id sub_10007B718(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 32))
    return objc_msgSend(*(id *)(a1 + 40), "_showError:", *(_QWORD *)(a1 + 32), a1, a1);
  if ((objc_msgSend(*(id *)(a1 + 40), "_ableToMigrateWithPreflightInformation:", *(_QWORD *)(a1 + 48), a1, a1) & 1) != 0)return objc_msgSend(*(id *)(a1 + 40), "_controllerDone");
  return objc_msgSend(*(id *)(a1 + 40), "_showOutOfSpaceError");
}

void sub_10007BB34(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "delegate", a1, a1);
  objc_msgSend(v2, "flowItemDone:nextItem:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

}

void sub_10007BFC4(uint64_t a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend(*(id *)(a1 + 32), "navigationController", a1, a1);
  v2 = objc_msgSend(v1, "popViewControllerAnimated:", 1);

}

void sub_10007C3DC(id *a1)
{
  void *v2;
  void **block;
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  void *v7;
  id v8[3];

  v8[2] = a1;
  v8[1] = a1;
  if (a1[4])
  {
    v2 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v4 = -1073741824;
    v5 = 0;
    v6 = sub_10007C49C;
    v7 = &unk_100280780;
    v8[0] = a1[4];
    dispatch_async((dispatch_queue_t)v2, &block);

    objc_storeStrong(v8, 0);
  }
}

uint64_t sub_10007C49C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), a2);
}

void sub_10007C92C(id a1)
{
  NSObject *v1;
  os_log_type_t v2;
  id v3;
  id location;
  uint8_t buf[7];
  os_log_type_t v6;
  os_log_t oslog[3];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v1 = oslog[0];
    v2 = v6;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "\"Installing\" fake software update...", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  +[BYPreferencesController flushEverything](BYPreferencesController, "flushEverything");
  sleep(2u);
  location = objc_msgSend(objc_alloc((Class)FBSShutdownOptions), "initWithReason:", CFSTR("Setup Assistant Software Update Restore Testing"));
  objc_msgSend(location, "setRebootType:", 1);
  v3 = +[FBSSystemService sharedService](FBSSystemService, "sharedService");
  objc_msgSend(v3, "shutdownWithOptions:", location);

  objc_storeStrong(&location, 0);
}

void sub_10007CA40(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  void **v4;
  int v5;
  int v6;
  void (*v7)(NSObject *, char, id);
  void *v8;
  objc_class *v9;
  id location;
  uint8_t buf[7];
  os_log_type_t v12;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v12 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v12;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Will cancel in-progress software update download", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  location = objc_msgSend(objc_alloc((Class)SUManagerClient), "initWithDelegate:clientType:", 0, 1);
  v4 = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_10007CB74;
  v8 = &unk_100280690;
  v9 = a1[4].isa;
  objc_msgSend(location, "cancelDownload:", &v4);
  objc_storeStrong((id *)&v9, 0);
  objc_storeStrong(&location, 0);
}

void sub_10007CB74(NSObject *a1, char a2, id obj)
{
  uint64_t v4;
  int v5;
  NSString *v6;
  char v7;
  NSString *v8;
  char v9;
  id v10;
  os_log_t oslog[2];
  id location;
  char v13;
  NSObject *v14;
  uint8_t buf[24];

  v14 = a1;
  v13 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v5 = v13 & 1;
    v9 = 0;
    v7 = 0;
    if ((_BYIsInternalInstall() & 1) != 0)
    {
      v6 = (NSString *)location;
    }
    else if (location)
    {
      v10 = objc_msgSend(location, "domain");
      v9 = 1;
      v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v10, objc_msgSend(location, "code"));
      v8 = v6;
      v7 = 1;
    }
    else
    {
      v6 = 0;
    }
    sub_10005A460((uint64_t)buf, v5, (uint64_t)v6);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Did cancel in-progress software update download with result %d error %@", buf, 0x12u);
    if ((v7 & 1) != 0)

    if ((v9 & 1) != 0)
  }
  objc_storeStrong((id *)oslog, 0);
  if (a1[4].isa)
    (*((void (**)(void))a1[4].isa + 2))();
  objc_storeStrong(&location, 0);
}

void sub_10007CD58(NSObject *a1, void *a2)
{
  Class isa;
  id v4;
  id v5;
  uint64_t v6;
  id v7;
  os_log_t oslog[2];
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (location[0])
  {
    isa = a1[5].isa;
    v4 = objc_msgSend(location[0], "productBuildVersion");
    -[objc_class setAbleToMigrateWithUpdate:](a1[4].isa, "setAbleToMigrateWithUpdate:", +[SASSystemInformation compareProductVersion:toProductVersion:](SASSystemInformation, "compareProductVersion:toProductVersion:", isa, v4) != (id)1);

  }
  v5 = -[objc_class ableToMigrateWithUpdate](a1[4].isa, "ableToMigrateWithUpdate");
  if ((v5 & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v6 = (uint64_t)a1[5].isa;
      v7 = -[objc_class update](a1[4].isa, "update");
      sub_10003EB04((uint64_t)buf, v6, (uint64_t)v7);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Entered migration flow without a compatible update! %@ vs %@", buf, 0x16u);

    }
    objc_storeStrong((id *)oslog, 0);
  }
  (*((void (**)(void))a1[6].isa + 2))();
  objc_storeStrong(location, 0);
}

void sub_10007E1FC(NSObject *a1, void *a2)
{
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _WORD v6[7];
  os_log_type_t v7;
  os_log_t oslog[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  v3 = -[objc_class forceNetworkReachabilityOverWiFi](a1[4].isa, "forceNetworkReachabilityOverWiFi");
  if ((v3 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v4 = oslog[0];
      v5 = v7;
      sub_100038C3C(v6);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Network path changed; removing forced network reachability for Wi-Fi",
        (uint8_t *)v6,
        2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  -[objc_class setForceNetworkReachabilityOverWiFi:](a1[4].isa, "setForceNetworkReachabilityOverWiFi:", 0);
  objc_storeStrong(location, 0);
}

id sub_10007F7CC(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  _WORD v5[3];
  os_log_type_t v6;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v6;
    sub_100038C3C(v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Forcing networking reachability over Wi-Fi...", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  return -[objc_class setForceNetworkReachabilityOverWiFi:](a1[4].isa, "setForceNetworkReachabilityOverWiFi:", 1);
}

void sub_1000801E4(_QWORD *a1)
{
  uint64_t v2;
  id v3;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_alloc_init((Class)BYBuddyDaemonGeneralClient);
  v2 = a1[4];
  v3 = objc_msgSend(location[0], "fetchAuthenticationContextForBiometric");
  (*(void (**)(uint64_t, BOOL))(v2 + 16))(v2, v3 != 0);

  objc_storeStrong(location, 0);
}

double sub_1000806F4(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = 136315138;
  *(_DWORD *)a1 = 136315138;
  *(_QWORD *)(a1 + 4) = a2;
  return result;
}

id sub_100080EC8()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE8A8;
  v13 = qword_1002EE8A8;
  if (!qword_1002EE8A8)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100082744;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100082744(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

id sub_100080FB4()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE8B8;
  v13 = qword_1002EE8B8;
  if (!qword_1002EE8B8)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100082AD0;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100082AD0(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_1000820F0(uint64_t a1, char a2, id obj)
{
  id location;
  char v5;
  uint64_t v6;

  v6 = a1;
  v5 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  objc_storeStrong(&location, 0);
}

void sub_100082744(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_100082884();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("BiometricKitUI");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getBiometricKitUIClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyMesaController.m"), 43, CFSTR("Unable to find class %s"), "BiometricKitUI");

    __break(1u);
  }
  qword_1002EE8A8 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_100082884()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_1000829B0((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *BiometricKitUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyMesaController.m"), 42, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_1000829B0(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE8B0;
  v9 = qword_1002EE8B0;
  if (!qword_1002EE8B0)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100082A40;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_100082A40((uint64_t)&v2);
  }
  return qword_1002EE8B0;
}

uint64_t sub_100082A40(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/BiometricKitUI.framework/BiometricKitUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE8B0 = result;
  return result;
}

void sub_100082AD0(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_100082C10();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("BiometricKit");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getBiometricKitClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyMesaController.m"), 41, CFSTR("Unable to find class %s"), "BiometricKit");

    __break(1u);
  }
  qword_1002EE8B8 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_100082C10()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_100082D3C((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *BiometricKitLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyMesaController.m"), 40, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_100082D3C(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE8C0;
  v9 = qword_1002EE8C0;
  if (!qword_1002EE8C0)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100082DCC;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_100082DCC((uint64_t)&v2);
  }
  return qword_1002EE8C0;
}

uint64_t sub_100082DCC(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/BiometricKit.framework/BiometricKit";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE8C0 = result;
  return result;
}

void sub_10008325C(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  id v4;
  void **v5;
  int v6;
  int v7;
  void (*v8)(NSObject *, void *, void *);
  void *v9;
  objc_class *v10;
  uint8_t buf[7];
  os_log_type_t v12;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v12 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v12;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting migration preflight...", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  v4 = -[objc_class _targetDeviceTransferTask](a1[4].isa, "_targetDeviceTransferTask");
  v5 = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_10008337C;
  v9 = &unk_100281848;
  v10 = a1[4].isa;
  objc_msgSend(v4, "startPreflightWithCompletionHandler:", &v5);

  objc_storeStrong((id *)&v10, 0);
}

void sub_10008337C(NSObject *a1, void *a2, void *a3)
{
  id v5;
  NSString *v6;
  id v7;
  void (**v8)(id, id, id);
  os_log_t v9;
  char v10;
  id v11;
  char v12;
  id v13;
  os_log_type_t v14;
  os_log_t oslog[2];
  id v16;
  id location[2];
  uint8_t v18[16];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v16 = 0;
  objc_storeStrong(&v16, a3);
  oslog[1] = a1;
  -[objc_class setPreflightInformation:](a1[4].isa, "setPreflightInformation:", location[0]);
  v5 = -[objc_class setPreflightError:](a1[4].isa, "setPreflightError:", v16);
  if (v16)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    v14 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v12 = 0;
      v10 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v6 = (NSString *)v16;
      }
      else if (v16)
      {
        v13 = objc_msgSend(v16, "domain");
        v12 = 1;
        v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v13, objc_msgSend(v16, "code"));
        v11 = v6;
        v10 = 1;
      }
      else
      {
        v6 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v6);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v14, "Migration preflight failed: %{public}@", buf, 0xCu);
      if ((v10 & 1) != 0)

      if ((v12 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v9 = (os_log_t)(id)_BYLoggingFacility(v5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      sub_100038C28((uint64_t)v18, (uint64_t)location[0]);
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Migration preflight completed: %@", v18, 0xCu);
    }
    objc_storeStrong((id *)&v9, 0);
  }
  v7 = -[objc_class preflightCompletionBlock](a1[4].isa, "preflightCompletionBlock");

  if (v7)
  {
    v8 = (void (**)(id, id, id))-[objc_class preflightCompletionBlock](a1[4].isa, "preflightCompletionBlock");
    v8[2](v8, location[0], v16);

    -[objc_class setPreflightCompletionBlock:](a1[4].isa, "setPreflightCompletionBlock:", 0);
  }
  objc_storeStrong(&v16, 0);
  objc_storeStrong(location, 0);
}

void sub_100083730(uint64_t a1)
{
  id v2;
  BOOL v3;
  uint64_t v4;
  id v5;
  id v6;
  char v7;
  id v8;

  v2 = objc_msgSend(*(id *)(a1 + 32), "preflightInformation");
  v7 = 0;
  v3 = 1;
  if (!v2)
  {
    v8 = objc_msgSend(*(id *)(a1 + 32), "preflightError");
    v7 = 1;
    v3 = v8 != 0;
  }
  if ((v7 & 1) != 0)

  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 40);
    v5 = objc_msgSend(*(id *)(a1 + 32), "preflightInformation");
    v6 = objc_msgSend(*(id *)(a1 + 32), "preflightError");
    (*(void (**)(uint64_t, id, id))(v4 + 16))(v4, v5, v6);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setPreflightCompletionBlock:", *(_QWORD *)(a1 + 40));
  }
}

void sub_100083918(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  id v4;
  void **v5;
  int v6;
  int v7;
  void (*v8)(NSObject *, void *, void *);
  void *v9;
  objc_class *v10;
  objc_class *v11;
  uint8_t buf[7];
  os_log_type_t v13;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v13 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v13;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting transfer of keychain data...", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  -[objc_class setHasTransferredData:](a1[4].isa, "setHasTransferredData:", 1);
  v4 = -[objc_class _targetDeviceTransferTask](a1[4].isa, "_targetDeviceTransferTask");
  v5 = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_100083A68;
  v9 = &unk_1002818E8;
  v10 = a1[4].isa;
  v11 = a1[5].isa;
  objc_msgSend(v4, "startKeychainDataTransferWithCompletionHandler:", &v5);

  objc_storeStrong((id *)&v11, 0);
  objc_storeStrong((id *)&v10, 0);
}

void sub_100083A68(NSObject *a1, void *a2, void *a3)
{
  id v5;
  NSString *v6;
  NSObject *v7;
  os_log_type_t v8;
  NSObject *v9;
  uint8_t v10[7];
  os_log_type_t v11;
  os_log_t v12;
  char v13;
  id v14;
  char v15;
  id v16;
  os_log_type_t v17;
  os_log_t oslog[2];
  id v19;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v19 = 0;
  objc_storeStrong(&v19, a3);
  oslog[1] = a1;
  -[objc_class setKeychainInfo:](a1[4].isa, "setKeychainInfo:", location[0]);
  v5 = -[objc_class setKeychainError:](a1[4].isa, "setKeychainError:", v19);
  if (v19)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    v17 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v15 = 0;
      v13 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v6 = (NSString *)v19;
      }
      else if (v19)
      {
        v16 = objc_msgSend(v19, "domain");
        v15 = 1;
        v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v16, objc_msgSend(v19, "code"));
        v14 = v6;
        v13 = 1;
      }
      else
      {
        v6 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v6);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v17, "Keychain data transfer failed: %{public}@", buf, 0xCu);
      if ((v13 & 1) != 0)

      if ((v15 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v12 = (os_log_t)(id)_BYLoggingFacility(v5);
    v11 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v7 = v12;
      v8 = v11;
      sub_100038C3C(v10);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Keychain data transferred completed", v10, 2u);
    }
    objc_storeStrong((id *)&v12, 0);
  }
  if (a1[5].isa)
    (*((void (**)(void))a1[5].isa + 2))();
  v9 = -[objc_class keychainDataTransferCompletionQueue](a1[4].isa, "keychainDataTransferCompletionQueue");
  dispatch_resume(v9);

  objc_storeStrong(&v19, 0);
  objc_storeStrong(location, 0);
}

void sub_100083DF8(uint64_t a1)
{
  NSObject *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;
  int v6;
  int v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10[4];
  uint64_t v11;
  uint64_t *v12;
  int v13;
  int v14;
  void (*v15)(uint64_t, uint64_t);
  void (*v16)(uint64_t);
  id v17[3];

  v17[2] = (id)a1;
  v17[1] = (id)a1;
  v11 = 0;
  v12 = &v11;
  v13 = 838860800;
  v14 = 48;
  v15 = sub_100083F34;
  v16 = sub_100083F64;
  v17[0] = 0;
  v2 = objc_msgSend(*(id *)(a1 + 32), "migrationQueue");
  v5 = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_100083F70;
  v9 = &unk_100281780;
  v10[1] = &v11;
  v10[0] = *(id *)(a1 + 32);
  dispatch_sync(v2, &v5);

  (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), v12[5], v3, v4);
  objc_storeStrong(v10, 0);
  _Block_object_dispose(&v11, 8);
  objc_storeStrong(v17, 0);
}

void sub_100083F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object, char a18)
{
  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(a1);
}

void sub_100083F34(uint64_t a1, uint64_t a2)
{
  void *v2;
  id *v3;

  v3 = (id *)(a2 + 40);
  v2 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);
  objc_storeStrong(v3, 0);
}

void sub_100083F64(uint64_t a1)
{
  objc_storeStrong((id *)(a1 + 40), 0);
}

void sub_100083F70(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "keychainError", a1, a1);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_10008406C(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  id v4;
  id v5;
  void **v6;
  int v7;
  int v8;
  void (*v9)(NSObject *, void *);
  void *v10;
  objc_class *v11;
  uint8_t buf[7];
  os_log_type_t v13;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v13 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v13;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting import of keychain data...", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  -[objc_class setHasTransferredData:](a1[4].isa, "setHasTransferredData:", 1);
  v4 = -[objc_class _targetDeviceTransferTask](a1[4].isa, "_targetDeviceTransferTask");
  v5 = -[objc_class keychainInfo](a1[4].isa, "keychainInfo");
  v6 = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_1000841BC;
  v10 = &unk_100280B80;
  v11 = a1[4].isa;
  objc_msgSend(v4, "startKeychainDataImportWithKeychainInfo:completionHandler:", v5, &v6);

  objc_storeStrong((id *)&v11, 0);
}

void sub_1000841BC(NSObject *a1, void *a2)
{
  id v3;
  NSString *v4;
  NSObject *v5;
  os_log_type_t v6;
  id v7;
  void (**v8)(id, id);
  uint8_t v9[15];
  os_log_type_t v10;
  os_log_t v11;
  char v12;
  id v13;
  char v14;
  id v15;
  os_log_type_t v16;
  os_log_t oslog[2];
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  -[objc_class setKeychainError:](a1[4].isa, "setKeychainError:", location[0]);
  v3 = -[objc_class setHasImportedKeychain:](a1[4].isa, "setHasImportedKeychain:", 1);
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    v16 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v14 = 0;
      v12 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v4 = (NSString *)location[0];
      }
      else if (location[0])
      {
        v15 = objc_msgSend(location[0], "domain");
        v14 = 1;
        v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v15, objc_msgSend(location[0], "code"));
        v13 = v4;
        v12 = 1;
      }
      else
      {
        v4 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v4);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v16, "Keychain data import failed: %{public}@", buf, 0xCu);
      if ((v12 & 1) != 0)

      if ((v14 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v11 = (os_log_t)(id)_BYLoggingFacility(v3);
    v10 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v11;
      v6 = v10;
      sub_100038C3C(v9);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Keychain data import completed", v9, 2u);
    }
    objc_storeStrong((id *)&v11, 0);
  }
  v7 = -[objc_class keychainDataImportCompletionBlock](a1[4].isa, "keychainDataImportCompletionBlock");

  if (v7)
  {
    v8 = (void (**)(id, id))-[objc_class keychainDataImportCompletionBlock](a1[4].isa, "keychainDataImportCompletionBlock");
    v8[2](v8, location[0]);

    -[objc_class setKeychainDataImportCompletionBlock:](a1[4].isa, "setKeychainDataImportCompletionBlock:", 0);
  }
  objc_storeStrong(location, 0);
}

void sub_10008454C(uint64_t a1)
{
  uint64_t v2;
  id v3;

  if ((objc_msgSend(*(id *)(a1 + 32), "hasImportedKeychain", a1, a1) & 1) != 0)
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = objc_msgSend(*(id *)(a1 + 32), "keychainError");
    (*(void (**)(uint64_t, id))(v2 + 16))(v2, v3);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setKeychainDataImportCompletionBlock:", *(_QWORD *)(a1 + 40));
  }
}

void sub_100084698(uint64_t a1, void *a2)
{
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (location[0])
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  else
    objc_msgSend(*(id *)(a1 + 32), "waitForKeychainDataImport:", *(_QWORD *)(a1 + 40));
  objc_storeStrong(location, 0);
}

void sub_1000847D0(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  id v4;
  id v5;
  _WORD v6[3];
  os_log_type_t v7;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v7;
    sub_100038C3C(v6);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting migration data transfer...", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  -[objc_class setHasTransferredData:](a1[4].isa, "setHasTransferredData:", 1);
  v4 = -[objc_class _targetDeviceTransferTask](a1[4].isa, "_targetDeviceTransferTask");
  v5 = -[objc_class preflightInformation](a1[4].isa, "preflightInformation");
  objc_msgSend(v4, "startDataTransferWithPreflightInfo:completionHandler:", v5, &stru_100281930);

}

void sub_1000848CC(id a1, NSError *a2)
{
  uint64_t v3;
  NSString *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t v7[15];
  os_log_type_t v8;
  os_log_t v9;
  char v10;
  id v11;
  char v12;
  id v13;
  os_log_type_t v14;
  os_log_t oslog[2];
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    v14 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v12 = 0;
      v10 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v4 = (NSString *)location[0];
      }
      else if (location[0])
      {
        v13 = objc_msgSend(location[0], "domain");
        v12 = 1;
        v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v13, objc_msgSend(location[0], "code"));
        v11 = v4;
        v10 = 1;
      }
      else
      {
        v4 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v4);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v14, "Migration data transfer failed: %{public}@", buf, 0xCu);
      if ((v10 & 1) != 0)

      if ((v12 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v9 = (os_log_t)(id)_BYLoggingFacility(v3);
    v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v9;
      v6 = v8;
      sub_100038C3C(v7);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Migration data transfer completed", v7, 2u);
    }
    objc_storeStrong((id *)&v9, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_100084E88(uint64_t a1)
{
  NSDictionary *v2;
  NSError *v3;
  id v4;
  void (**v5)(id, id, id);
  id v6;
  id v7;
  NSErrorUserInfoKey v8;
  const __CFString *v9;

  v8 = NSLocalizedDescriptionKey;
  v9 = CFSTR("Buddy migration manager already canceled");
  v2 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v9, &v8, 1);
  v3 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("MBErrorDomain"), 202, v2);
  objc_msgSend(*(id *)(a1 + 32), "setPreflightError:", v3);

  objc_msgSend(*(id *)(a1 + 32), "setPreflightInformation:", 0);
  v4 = objc_msgSend(*(id *)(a1 + 32), "preflightCompletionBlock");

  if (v4)
  {
    v5 = (void (**)(id, id, id))objc_msgSend(*(id *)(a1 + 32), "preflightCompletionBlock");
    v6 = objc_msgSend(*(id *)(a1 + 32), "preflightInformation");
    v7 = objc_msgSend(*(id *)(a1 + 32), "preflightError");
    v5[2](v5, v6, v7);

    objc_msgSend(*(id *)(a1 + 32), "setPreflightCompletionBlock:", 0);
  }
}

void sub_100085BC0(id *a1)
{
  BuddyDisplayMonitor *v2;
  id v3;
  void **v4;
  int v5;
  int v6;
  id (*v7)(uint64_t);
  void *v8;
  id v9[3];

  v9[2] = a1;
  v9[1] = a1;
  v2 = objc_alloc_init(BuddyDisplayMonitor);
  objc_msgSend(a1[4], "setDisplayMonitor:", v2);

  v3 = objc_msgSend(a1[4], "displayMonitor");
  v4 = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_100085C9C;
  v8 = &unk_100280730;
  v9[0] = a1[4];
  objc_msgSend(v3, "wakeDisplay:", &v4);

  objc_storeStrong(v9, 0);
}

id sub_100085C9C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_rebootDevice", a1, a1);
}

void sub_100085F24(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _WORD v6[7];
  os_log_type_t v7;
  os_log_t v8;
  os_log_type_t v9;
  os_log_t oslog[2];
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    v9 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_100039500((uint64_t)buf, (uint64_t)location[0]);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v9, "Failed to enable lockdown: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v8 = (os_log_t)(id)_BYLoggingFacility(v3);
    v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = v8;
      v5 = v7;
      sub_100038C3C(v6);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Lockdown enabled", (uint8_t *)v6, 2u);
    }
    objc_storeStrong((id *)&v8, 0);
  }
  -[objc_class rebootDevice:](a1[4].isa, "rebootDevice:", 1);
  objc_storeStrong(location, 0);
}

id sub_10008609C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "releaseAssertions", a1, a1);
}

void sub_100086F58(id a1)
{
  mach_timebase_info((mach_timebase_info_t)&dword_1002EE8C8);
}

double sub_1000878C0()
{
  return 1.0;
}

void sub_100088CA8(uint64_t a1)
{
  id v1;
  NSIndexSet *v2;

  v1 = objc_msgSend(*(id *)(a1 + 32), "tableView", a1, a1);
  v2 = +[NSIndexSet indexSetWithIndex:](NSIndexSet, "indexSetWithIndex:", 0);
  objc_msgSend(v1, "reloadSections:withRowAnimation:", v2, 0);

}

void sub_100089E24(id *a1)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  id v10;
  NSSortDescriptor *v11;
  NSArray *v12;
  id v13;
  id v14;
  void *v15;
  void **v16;
  int v17;
  int v18;
  void (*v19)(id *);
  void *v20;
  id v21;
  id v22;
  id v23;
  id v24[3];
  uint8_t v25[7];
  os_log_type_t v26;
  os_log_t v27;
  os_log_type_t v28;
  os_log_t v29;
  os_log_type_t v30;
  os_log_t oslog;
  id obj;
  id v33;
  id location[3];
  NSSortDescriptor *v35;
  uint8_t v36[16];
  uint8_t buf[8];

  location[2] = a1;
  location[1] = a1;
  location[0] = 0;
  v2 = *((_QWORD *)a1[4] + 1);
  if ((*((_BYTE *)a1[4] + 32) & 1) != 0)
    v3 = 0;
  else
    v3 = 3;
  obj = location[0];
  v4 = +[BuddyBackupUtilities getBackupListWithFiltering:manager:retries:error:](BuddyBackupUtilities, "getBackupListWithFiltering:manager:retries:error:", 0, v2, v3, &obj);
  objc_storeStrong(location, obj);
  v33 = v4;
  *((_BYTE *)a1[4] + 32) = 1;
  if (v33)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v5);
    v30 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_100046FA0(buf, (int)objc_msgSend(v33, "count"));
      _os_log_impl((void *)&_mh_execute_header, oslog, v30, "Backups list has %u backups", buf, 8u);
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  else
  {
    v29 = (os_log_t)(id)_BYLoggingFacility(v5);
    v28 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      sub_100038C28((uint64_t)v36, (uint64_t)location[0]);
      _os_log_impl((void *)&_mh_execute_header, v29, v28, "Error getting backup list: %@", v36, 0xCu);
    }
    objc_storeStrong((id *)&v29, 0);
  }
  v6 = objc_msgSend(a1[4], "filteredRestorableItemsFromBackupList:", v33);
  v7 = v33;
  v33 = v6;

  if (!objc_msgSend(v33, "count"))
  {
    v27 = (os_log_t)(id)_BYLoggingFacility(0);
    v26 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      v8 = v27;
      v9 = v26;
      sub_100038C3C(v25);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No backups are committed and ready to restore", v25, 2u);
    }
    objc_storeStrong((id *)&v27, 0);
  }
  v10 = v33;
  v11 = +[NSSortDescriptor sortDescriptorWithKey:ascending:](NSSortDescriptor, "sortDescriptorWithKey:ascending:", CFSTR("snapshot.date"), 0);
  v35 = v11;
  v12 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v35, 1);
  v13 = objc_msgSend(v10, "sortedArrayUsingDescriptors:", v12);
  v14 = v33;
  v33 = v13;

  v15 = &_dispatch_main_q;
  v16 = _NSConcreteStackBlock;
  v17 = -1073741824;
  v18 = 0;
  v19 = sub_10008A254;
  v20 = &unk_1002819A0;
  v21 = a1[4];
  v22 = v33;
  v23 = location[0];
  v24[0] = a1[5];
  v24[1] = a1[6];
  v24[2] = a1[7];
  dispatch_async((dispatch_queue_t)v15, &v16);

  objc_storeStrong(v24, 0);
  objc_storeStrong(&v23, 0);
  objc_storeStrong(&v22, 0);
  objc_storeStrong(&v21, 0);
  objc_storeStrong(&v33, 0);
  objc_storeStrong(location, 0);
}

void sub_10008A254(id *a1)
{
  id v2;
  void *v3;
  void *v4;
  NSObject *v5;
  os_signpost_type_t v6;
  os_signpost_id_t v7;
  id v8;
  id v9;
  void **v10;
  int v11;
  int v12;
  id (*v13)(uint64_t, char);
  void *v14;
  id v15;
  id v16;
  id v17;
  id v18[5];
  os_log_type_t v19;
  os_log_t oslog;
  uint8_t buf[8];
  void *v22;
  char v23;
  os_log_t log;
  void *v25;
  void *v26;
  void *v27;
  void *v28;
  id *v29;
  id *v30;
  uint8_t v31[24];

  v30 = a1;
  v29 = a1;
  v28 = 0;
  v27 = 0;
  v2 = (id)_BYSignpostSubsystem();
  v3 = (void *)_BYSignpostCreate(v2);
  v26 = v4;
  v25 = v3;

  log = (os_log_t)(id)_BYSignpostSubsystem();
  v23 = 1;
  v22 = v25;
  if (v25 && v22 != (void *)-1 && os_signpost_enabled(log))
  {
    v5 = log;
    v6 = v23;
    v7 = (os_signpost_id_t)v22;
    sub_100038C3C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, v6, v7, "BackupListSoftwareUpdateScan", " enableTelemetry=YES ", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  oslog = (os_log_t)(id)_BYSignpostSubsystem();
  v19 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000342B4((uint64_t)v31, (uint64_t)v25);
    _os_log_impl((void *)&_mh_execute_header, oslog, v19, "BEGIN [%lld]: BackupListSoftwareUpdateScan  enableTelemetry=YES ", v31, 0xCu);
  }
  objc_storeStrong((id *)&oslog, 0);
  v27 = v25;
  v28 = v26;
  v8 = a1[4];
  v9 = a1[5];
  v10 = _NSConcreteStackBlock;
  v11 = -1073741824;
  v12 = 0;
  v13 = sub_10008A508;
  v14 = &unk_100281978;
  v18[1] = v25;
  v18[2] = v26;
  v15 = a1[4];
  v16 = a1[5];
  v17 = a1[6];
  v18[0] = a1[7];
  v18[3] = a1[8];
  v18[4] = a1[9];
  objc_msgSend(v8, "scanForUpdateIfNecessaryForBackupList:withCompletion:", v9, &v10);
  objc_storeStrong(v18, 0);
  objc_storeStrong(&v17, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(&v15, 0);
}

id sub_10008A508(uint64_t a1, char a2)
{
  NSObject *v3;
  os_signpost_type_t v4;
  os_signpost_id_t v5;
  id result;
  NSObject *v7;
  os_signpost_type_t v8;
  os_signpost_id_t v9;
  os_log_t v10;
  uint8_t v11[16];
  os_signpost_id_t v12;
  char v13;
  os_log_t v14;
  double v15;
  os_log_type_t v16;
  os_log_t oslog;
  uint8_t buf[8];
  os_signpost_id_t v19;
  char v20;
  os_log_t log;
  double v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint8_t v26[32];
  uint8_t v27[24];

  v25 = a1;
  v24 = a2 & 1;
  v23 = a1;
  v22 = 0.0;
  v22 = (double)(unint64_t)_BYSignpostGetNanoseconds(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72)) / 1000000000.0;
  log = (os_log_t)(id)_BYSignpostSubsystem();
  v20 = 2;
  v19 = 0;
  v19 = *(_QWORD *)(a1 + 64);
  if (v19 && v19 != -1 && os_signpost_enabled(log))
  {
    v3 = log;
    v4 = v20;
    v5 = v19;
    sub_100038C3C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, v4, v5, "BackupListSoftwareUpdateScan", "", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  oslog = (os_log_t)(id)_BYSignpostSubsystem();
  v16 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_10008A810((uint64_t)v27, *(_QWORD *)(a1 + 64), *(uint64_t *)&v22);
    _os_log_impl((void *)&_mh_execute_header, oslog, v16, "END [%lld] %fs: BackupListSoftwareUpdateScan ", v27, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  result = objc_msgSend(*(id *)(a1 + 32), "setBackupList:forceReload:withError:", *(_QWORD *)(a1 + 40), v24 & 1, *(_QWORD *)(a1 + 48));
  if (*(_QWORD *)(a1 + 56))
  {
    v15 = 0.0;
    v15 = (double)(unint64_t)_BYSignpostGetNanoseconds(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88)) / 1000000000.0;
    v14 = (os_log_t)(id)_BYSignpostSubsystem();
    v13 = 2;
    v12 = 0;
    v12 = *(_QWORD *)(a1 + 80);
    if (v12 && v12 != -1 && os_signpost_enabled(v14))
    {
      v7 = v14;
      v8 = v13;
      v9 = v12;
      sub_100038C3C(v11);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, v8, v9, "BackupListLoadBackups", "", v11, 2u);
    }
    objc_storeStrong((id *)&v14, 0);
    v10 = (os_log_t)(id)_BYSignpostSubsystem();
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      sub_10008A810((uint64_t)v26, *(_QWORD *)(a1 + 80), *(uint64_t *)&v15);
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: BackupListLoadBackups ", v26, 0x16u);
    }
    objc_storeStrong((id *)&v10, 0);
    return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
  return result;
}

double sub_10008A810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 134218240;
  *(_DWORD *)a1 = 134218240;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2048;
  *(_QWORD *)(a1 + 14) = a3;
  return result;
}

void sub_10008A8DC(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "setRefreshTimerToDuration:", 20.0);
  objc_storeStrong(location, 0);
}

void sub_10008ADC0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  uint64_t v8;
  id v9;
  void **v10;
  int v11;
  int v12;
  void (*v13)(id *);
  void *v14;
  id v15;
  id v16;
  id v17[2];
  id v18;
  id v19;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v19 = 0;
  objc_storeStrong(&v19, a3);
  v18 = 0;
  objc_storeStrong(&v18, a4);
  v17[1] = (id)a1;
  v7 = objc_msgSend(*(id *)(a1 + 32), "betaEnrollmentStateManager");
  v8 = *(_QWORD *)(a1 + 40);
  v9 = objc_msgSend(v19, "productVersion");
  v10 = _NSConcreteStackBlock;
  v11 = -1073741824;
  v12 = 0;
  v13 = sub_10008AF44;
  v14 = &unk_100281168;
  v15 = *(id *)(a1 + 32);
  v16 = v19;
  v17[0] = *(id *)(a1 + 48);
  objc_msgSend(v7, "loadSeedEnrollmentStateForRestorables:incompatibleWithUpdateVersion:completion:", v8, v9, &v10);

  objc_storeStrong(v17, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(&v18, 0);
  objc_storeStrong(&v19, 0);
  objc_storeStrong(location, 0);
}

void sub_10008AF44(id *a1)
{
  void *v2;
  void **block;
  int v4;
  int v5;
  id (*v6)(uint64_t);
  void *v7;
  id v8;
  id v9;
  id v10[3];

  v10[2] = a1;
  v10[1] = a1;
  v2 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v4 = -1073741824;
  v5 = 0;
  v6 = sub_10008B044;
  v7 = &unk_100281168;
  v8 = a1[4];
  v9 = a1[5];
  v10[0] = a1[6];
  dispatch_async((dispatch_queue_t)v2, &block);

  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(&v8, 0);
}

id sub_10008B044(uint64_t a1)
{
  void *v2;
  id v3;
  id result;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 80) = 1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_100038C28((uint64_t)buf, *(_QWORD *)(a1 + 40));
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Restore list scan found software update: %@", buf, 0xCu);
  }
  objc_storeStrong((id *)oslog, 0);
  v2 = *(void **)(a1 + 32);
  v3 = objc_msgSend(*(id *)(a1 + 40), "productVersion");
  objc_msgSend(v2, "setAvailableUpdateVersion:", v3);

  result = objc_msgSend(*(id *)(a1 + 32), "setScanningForUpdate:", 0);
  if (*(_QWORD *)(a1 + 48))
    return (id)(*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 48) + 16))(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 40) != 0);
  return result;
}

BOOL sub_10008BAB8(id a1, UIViewController *a2, unint64_t a3, BOOL *a4)
{
  id v4;
  uint64_t v5;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v4 = location[0];
  v5 = objc_opt_class(DeviceRestoreChoiceController);
  LOBYTE(v4) = objc_opt_isKindOfClass(v4, v5);
  objc_storeStrong(location, 0);
  return v4 & 1;
}

uint64_t sub_10008C3C8(uint64_t result)
{
  if (*(_QWORD *)(result + 32))
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void sub_10008C408(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

void sub_10008C45C(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

void sub_10008C4B4(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

void sub_10008C508(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

uint64_t sub_10008C70C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 1);
}

void sub_10008EA64(uint64_t a1, char a2)
{
  void *v3;
  uint64_t v4;
  void **v5;
  int v6;
  int v7;
  void (*v8)(uint64_t, char);
  void *v9;
  id v10;
  id v11;
  char v12;
  uint64_t v13;
  char v14;
  uint64_t v15;

  v15 = a1;
  v14 = a2;
  v13 = a1;
  v3 = *(void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_10008EB40;
  v9 = &unk_100281AD0;
  v12 = a2 & 1;
  v10 = *(id *)(a1 + 32);
  v11 = *(id *)(a1 + 40);
  objc_msgSend(v3, "_presentNetworkWarningForRestorable:completion:", v4, &v5);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
}

void sub_10008EB40(uint64_t a1, char a2)
{
  uint64_t v3;
  id v4;
  char v5;
  id v6;
  id v7;
  os_log_t oslog[2];
  char v9;
  uint64_t v10;
  uint8_t buf[24];

  v10 = a1;
  v9 = a2;
  oslog[1] = (os_log_t)a1;
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 96), *(id *)(a1 + 40));
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_1000342B4((uint64_t)buf, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96));
      _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Selected snapshot: %p", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
    v4 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
    objc_msgSend(v4, "setBackupItem:updateBackupMetadata:prefetchAccounts:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 96), 1, 1);

    v5 = v9;
    v6 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
    objc_msgSend(v6, "setAllowCellularNetwork:", v5 & 1);

    v7 = objc_msgSend(*(id *)(a1 + 32), "delegate");
    objc_msgSend(v7, "flowItemDone:", *(_QWORD *)(a1 + 32));

  }
}

id sub_10008EF40()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE8D8;
  v13 = qword_1002EE8D8;
  if (!qword_1002EE8D8)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10008FAFC;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_10008FAFC(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_10008F02C(uint64_t a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _WORD v8[3];
  os_log_type_t v9;
  os_log_t v10;
  uint8_t buf[15];
  os_log_type_t v12;
  os_log_t oslog[2];
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    v12 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v4 = oslog[0];
      v5 = v12;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Disable iCloud Restore debug logging", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    objc_msgSend(*(id *)(a1 + 32), "resetAll");
  }
  else
  {
    v10 = (os_log_t)(id)_BYLoggingFacility(v3);
    v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v6 = v10;
      v7 = v9;
      sub_100038C3C(v8);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Enable iCloud Restore debug logging", (uint8_t *)v8, 2u);
    }
    objc_storeStrong((id *)&v10, 0);
    objc_msgSend(*(id *)(a1 + 32), "setEnabledLevel:", 4);
    objc_msgSend(*(id *)(a1 + 32), "setPersistedLevel:", 4);
  }
  objc_storeStrong(location, 0);
}

void sub_10008FAFC(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_10008FC3C();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("OSLogPreferencesSubsystem");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getOSLogPreferencesSubsystemClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("RestoreFromBackupController.m"), 61, CFSTR("Unable to find class %s"), "OSLogPreferencesSubsystem");

    __break(1u);
  }
  qword_1002EE8D8 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_10008FC3C()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_10008FD68((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *LoggingSupportLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("RestoreFromBackupController.m"), 60, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_10008FD68(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE8E0;
  v9 = qword_1002EE8E0;
  if (!qword_1002EE8E0)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10008FDF8;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_10008FDF8((uint64_t)&v2);
  }
  return qword_1002EE8E0;
}

uint64_t sub_10008FDF8(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/LoggingSupport.framework/LoggingSupport";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE8E0 = result;
  return result;
}

double sub_100090174()
{
  return 1.0;
}

void sub_10009153C(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "setShowLocalizedNames:", 0);
  objc_storeStrong(location, 0);
}

void sub_10009158C(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "setShowLocalizedNames:", 1);
  objc_storeStrong(location, 0);
}

double sub_1000922AC()
{
  return 1.0;
}

void sub_100092498(id *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  v2 = +[BYLocationController sharedBuddyLocationController](BYLocationController, "sharedBuddyLocationController");
  location[0] = objc_msgSend(v2, "recommendedLocaleAnalyticsEvent");

  v3 = objc_msgSend(a1[4], "localeComposite", 0);
  v4 = objc_msgSend(v3, "dataSource");
  v5 = objc_msgSend(v4, "numberOfRecommendedLocales");

  v6 = objc_msgSend(a1[4], "localeComposite");
  v7 = objc_msgSend(v6, "dataSource");
  LOBYTE(v4) = objc_msgSend(v7, "hasRecommendedLocaleFromLanguage");

  if ((v4 & 1) != 0)
  {
    if (v5 == (id)1)
      objc_msgSend(location[0], "setSource:", 4);
    else
      objc_msgSend(location[0], "setSource:", 5);
  }
  objc_msgSend(location[0], "setUserSawRecommendedLocale:", v5 != 0);
  objc_msgSend(location[0], "setUserVisitedLocalePane:", 1);
  objc_storeStrong(location, 0);
}

void sub_10009281C(id a1, UIViewControllerTransitionCoordinatorContext *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_storeStrong(location, 0);
}

void sub_100092860(uint64_t a1, void *a2)
{
  id v3;
  id v4;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(*(id *)(a1 + 32), "buddyLocaleTableView");
  objc_msgSend(v3, "scrollToRowAtIndexPath:atScrollPosition:animated:", *(_QWORD *)(a1 + 40), 3, 1);

  v4 = objc_msgSend(*(id *)(a1 + 32), "buddyLocaleTableView");
  objc_msgSend(v4, "reloadData");

  objc_storeStrong(location, 0);
}

double sub_100094068()
{
  return 0.0;
}

void sub_100094344(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "setShowLocalizedNames:", 0);
  objc_storeStrong(location, 0);
}

void sub_100094394(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "setShowLocalizedNames:", 1);
  objc_storeStrong(location, 0);
}

id sub_10009504C()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE8F0;
  v13 = qword_1002EE8F0;
  if (!qword_1002EE8F0)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000958AC;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1000958AC(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_100095138(id *a1, char a2, id obj)
{
  id v4[2];
  id location;
  char v6;
  id *v7;

  v7 = a1;
  v6 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v4[1] = a1;
  v4[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(v4[0], "_welcomeKitDidFinishWithSuccess:settings:", v6 & 1, location);
  objc_storeStrong(v4, 0);
  objc_storeStrong(&location, 0);
}

void sub_1000951B0(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "_eraseDevice");
  objc_storeStrong(location, 0);
}

void sub_1000958AC(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1000959EC();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("WLWelcomeViewController");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getWLWelcomeViewControllerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyMoveFromAndroidController.m"), 29, CFSTR("Unable to find class %s"), "WLWelcomeViewController");

    __break(1u);
  }
  qword_1002EE8F0 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_1000959EC()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_100095B18((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *WelcomeKitUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyMoveFromAndroidController.m"), 28, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_100095B18(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE8F8;
  v9 = qword_1002EE8F8;
  if (!qword_1002EE8F8)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100095BA8;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_100095BA8((uint64_t)&v2);
  }
  return qword_1002EE8F8;
}

uint64_t sub_100095BA8(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/WelcomeKitUI.framework/WelcomeKitUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE8F8 = result;
  return result;
}

double sub_100096244()
{
  return 29.0;
}

void sub_100096A58(id *a1)
{
  id v2;
  void *v3;
  void **block;
  int v5;
  int v6;
  void (*v7)(uint64_t);
  void *v8;
  id v9[3];

  v9[2] = a1;
  v9[1] = a1;
  v2 = objc_msgSend(a1[4], "expressSetupDataProvider");
  objc_msgSend(v2, "applyExpressSettings");

  v3 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_100096B34;
  v8 = &unk_100280730;
  v9[0] = a1[4];
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_storeStrong(v9, 0);
}

void sub_100096B34(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  objc_class *v5;
  NSString *v6;
  id v7;

  v2 = objc_msgSend(*(id *)(a1 + 32), "view", a1, a1);
  v3 = objc_msgSend(v2, "window");
  objc_msgSend(v3, "setUserInteractionEnabled:", 1);

  v4 = objc_msgSend(*(id *)(a1 + 32), "miscState");
  objc_msgSend(v4, "setUserChoseExpress:", 1);

  v5 = (objc_class *)objc_opt_class(*(_QWORD *)(a1 + 32));
  v6 = NSStringFromClass(v5);
  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:](BFFViewControllerSpinnerManager, "stopAnimatingSpinnerFor:", v6);

  v7 = objc_msgSend(*(id *)(a1 + 32), "delegate");
  objc_msgSend(v7, "flowItemDone:", *(_QWORD *)(a1 + 32));

}

void sub_100097038(id *a1)
{
  id v2;
  void **v3;
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t);
  void *v7;
  id v8;
  id v9[3];

  v9[2] = a1;
  v9[1] = a1;
  v2 = a1[4];
  v3 = _NSConcreteStackBlock;
  v4 = -1073741824;
  v5 = 0;
  v6 = sub_1000970F4;
  v7 = &unk_100281190;
  v9[0] = a1[5];
  v8 = a1[4];
  objc_msgSend(v2, "prepare:", &v3);
  objc_storeStrong(&v8, 0);
  objc_storeStrong(v9, 0);
}

uint64_t sub_1000970F4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_100097278(uint64_t a1)
{
  id v2;
  BYExpressSetupBackupSource *v3;
  id v4;
  id v5;
  BYExpressSetupBackupSource *v6;
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  v2 = objc_msgSend(*(id *)(a1 + 32), "existingSettings");
  location[0] = objc_msgSend(v2, "backupMetadata");

  if (location[0])
  {
    v3 = [BYExpressSetupBackupSource alloc];
    v4 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
    v5 = objc_msgSend(v4, "backupItem");
    v6 = -[BYExpressSetupBackupSource initWithBackupItem:backupMetadata:](v3, "initWithBackupItem:backupMetadata:", v5, location[0]);

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    objc_storeStrong((id *)&v6, 0);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  objc_storeStrong(location, 0);
}

id sub_100097560()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE900;
  v13 = qword_1002EE900;
  if (!qword_1002EE900)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10009D740;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_10009D740(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_10009764C(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _WORD v6[7];
  char v7;
  os_log_t oslog[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (!location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    v7 = 16;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v4 = oslog[0];
      v5 = v7;
      sub_100038C3C(v6);
      _os_log_error_impl((void *)&_mh_execute_header, v4, v5, "Failed to create wallet provisioning context", (uint8_t *)v6, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  if (a1[4].isa)
    (*((void (**)(void))a1[4].isa + 2))();
  objc_storeStrong(location, 0);
}

void sub_1000977F4(_QWORD *a1, void *a2, void *a3)
{
  uint64_t v5;
  BYExpressSetupCloudSource *v6;
  os_log_t oslog;
  id v8[2];
  id v9;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v9 = 0;
  objc_storeStrong(&v9, a3);
  v8[1] = a1;
  if (location[0])
  {
    v6 = [BYExpressSetupCloudSource alloc];
    v8[0] = -[BYExpressSetupCloudSource initWithSettings:](v6, "initWithSettings:", location[0]);
    (*(void (**)(void))(a1[4] + 16))();
    objc_storeStrong(v8, 0);
  }
  else
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v5);
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      sub_100039500((uint64_t)buf, (uint64_t)v9);
      _os_log_error_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_ERROR, "Failed to fetch cloud settings for express: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    (*(void (**)(void))(a1[4] + 16))();
  }
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_100098128(uint64_t a1, void *a2)
{
  NSObject *v3;
  os_signpost_type_t v4;
  os_signpost_id_t v5;
  os_log_t oslog;
  uint8_t buf[8];
  os_signpost_id_t v8;
  char v9;
  os_log_t log;
  double v11;
  uint64_t v12;
  id location[2];
  uint8_t v14[24];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v12 = a1;
  objc_msgSend(*(id *)(a1 + 32), "setBackupDataSource:", location[0]);
  v11 = 0.0;
  v11 = (double)(unint64_t)_BYSignpostGetNanoseconds(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56)) / 1000000000.0;
  log = (os_log_t)(id)_BYSignpostSubsystem();
  v9 = 2;
  v8 = 0;
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 && v8 != -1 && os_signpost_enabled(log))
  {
    v3 = log;
    v4 = v9;
    v5 = v8;
    sub_100038C3C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, v4, v5, "ExpressSetupBackupDataSource", "", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  oslog = (os_log_t)(id)_BYSignpostSubsystem();
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_10008A810((uint64_t)v14, *(_QWORD *)(a1 + 48), *(uint64_t *)&v11);
    _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: ExpressSetupBackupDataSource ", v14, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  objc_storeStrong(location, 0);
}

void sub_1000982EC(uint64_t a1, void *a2)
{
  NSObject *v3;
  os_signpost_type_t v4;
  os_signpost_id_t v5;
  os_log_t oslog;
  uint8_t buf[8];
  os_signpost_id_t v8;
  char v9;
  os_log_t log;
  double v11;
  uint64_t v12;
  id location[2];
  uint8_t v14[24];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v12 = a1;
  objc_msgSend(*(id *)(a1 + 32), "setCloudDataSource:", location[0]);
  v11 = 0.0;
  v11 = (double)(unint64_t)_BYSignpostGetNanoseconds(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56)) / 1000000000.0;
  log = (os_log_t)(id)_BYSignpostSubsystem();
  v9 = 2;
  v8 = 0;
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 && v8 != -1 && os_signpost_enabled(log))
  {
    v3 = log;
    v4 = v9;
    v5 = v8;
    sub_100038C3C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, v4, v5, "ExpressSetupCloudDataSource", "", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  oslog = (os_log_t)(id)_BYSignpostSubsystem();
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_10008A810((uint64_t)v14, *(_QWORD *)(a1 + 48), *(uint64_t *)&v11);
    _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: ExpressSetupCloudDataSource ", v14, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  objc_storeStrong(location, 0);
}

void sub_1000984B0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  NSObject *v5;
  os_signpost_type_t v6;
  os_signpost_id_t v7;
  void *v8;
  uint64_t v9;
  void **v10;
  int v11;
  int v12;
  void (*v13)(uint64_t, void *);
  void *v14;
  id v15;
  id v16[3];
  os_log_type_t v17;
  os_log_t oslog;
  __int16 buf;
  uint64_t v20;
  char v21;
  os_log_t log;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t v29[24];

  v28 = a1;
  v27 = a1;
  v26 = 0;
  v25 = 0;
  v2 = (id)_BYSignpostSubsystem();
  v3 = _BYSignpostCreate(v2);
  v24 = v4;
  v23 = (void *)v3;

  log = (os_log_t)(id)_BYSignpostSubsystem();
  v21 = 1;
  v20 = (uint64_t)v23;
  if (v23 && v20 != -1 && os_signpost_enabled(log))
  {
    v5 = log;
    v6 = v21;
    v7 = v20;
    sub_100038C3C(&buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, v6, v7, "ExpressSetupWalletDataSource", "", (uint8_t *)&buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  oslog = (os_log_t)(id)_BYSignpostSubsystem();
  v17 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000342B4((uint64_t)v29, (uint64_t)v23);
    _os_log_impl((void *)&_mh_execute_header, oslog, v17, "BEGIN [%lld]: ExpressSetupWalletDataSource ", v29, 0xCu);
  }
  objc_storeStrong((id *)&oslog, 0);
  v25 = v23;
  v26 = v24;
  v8 = *(void **)(a1 + 32);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = _NSConcreteStackBlock;
  v11 = -1073741824;
  v12 = 0;
  v13 = sub_10009870C;
  v14 = &unk_100281CA8;
  v15 = *(id *)(a1 + 40);
  v16[1] = v25;
  v16[2] = v26;
  v16[0] = *(id *)(a1 + 48);
  objc_msgSend(v8, "createWalletProvisionalContextUsingDataProvider:completion:", v9, &v10);
  objc_storeStrong(v16, 0);
  objc_storeStrong(&v15, 0);
}

void sub_10009870C(uint64_t a1, void *a2)
{
  NSObject *v3;
  os_signpost_type_t v4;
  os_signpost_id_t v5;
  os_log_t oslog;
  uint8_t buf[8];
  os_signpost_id_t v8;
  char v9;
  os_log_t log;
  double v11;
  uint64_t v12;
  id location[2];
  uint8_t v14[24];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v12 = a1;
  objc_msgSend(*(id *)(a1 + 32), "setWalletProvisioningContext:", location[0]);
  v11 = 0.0;
  v11 = (double)(unint64_t)_BYSignpostGetNanoseconds(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56)) / 1000000000.0;
  log = (os_log_t)(id)_BYSignpostSubsystem();
  v9 = 2;
  v8 = 0;
  v8 = *(_QWORD *)(a1 + 48);
  if (v8 && v8 != -1 && os_signpost_enabled(log))
  {
    v3 = log;
    v4 = v9;
    v5 = v8;
    sub_100038C3C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v3, v4, v5, "ExpressSetupWalletDataSource", "", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  oslog = (os_log_t)(id)_BYSignpostSubsystem();
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_10008A810((uint64_t)v14, *(_QWORD *)(a1 + 48), *(uint64_t *)&v11);
    _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: ExpressSetupWalletDataSource ", v14, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  if (*(_QWORD *)(a1 + 40))
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_storeStrong(location, 0);
}

uint64_t sub_10009A750(_QWORD *a1, void *a2, void *a3)
{
  uint64_t v5;
  id v7;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v7 = 0;
  objc_storeStrong(&v7, a3);
  v5 = objc_opt_class(a1[4]);
  LOBYTE(v5) = objc_msgSend((id)v5, "_isSettingsFeature:", objc_msgSend(location[0], "unsignedIntegerValue", a1));
  objc_storeStrong(&v7, 0);
  objc_storeStrong(location, 0);
  return v5 & 1;
}

BOOL sub_10009A7DC(_QWORD *a1, void *a2, void *a3)
{
  void *v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  _BOOL8 v10;
  id v12;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v12 = 0;
  objc_storeStrong(&v12, a3);
  v5 = (void *)objc_opt_class(a1[4]);
  v6 = objc_msgSend(v5, "_localizedNameForFeature:", objc_msgSend(location[0], "unsignedIntegerValue", a1));
  v7 = objc_msgSend(v6, "length");
  v8 = (void *)objc_opt_class(a1[4]);
  v9 = objc_msgSend(v8, "_localizedNameForFeature:", objc_msgSend(v12, "unsignedIntegerValue"));
  v10 = v7 > objc_msgSend(v9, "length");

  objc_storeStrong(&v12, 0);
  objc_storeStrong(location, 0);
  return v10;
}

void sub_10009C6EC(uint64_t a1, uint64_t a2)
{
  void *v2;
  id *v3;

  v3 = (id *)(a2 + 40);
  v2 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);
  objc_storeStrong(v3, 0);
}

void sub_10009C71C(uint64_t a1)
{
  objc_storeStrong((id *)(a1 + 40), 0);
}

void sub_10009C728(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  id v6;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = &_dispatch_main_q;
  dispatch_assert_queue_V2((dispatch_queue_t)v3);

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), location[0]);
  v4 = objc_msgSend(sub_100097560(), "sharedInstance");
  v5 = objc_msgSend(location[0], "resolvedDataSource");
  v6 = objc_msgSend(v5, "walletMetadata");
  objc_msgSend(v4, "setBackupMetadata:", v6);

  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
  objc_storeStrong(location, 0);
}

void sub_10009C818(id *a1, void *a2, void *a3)
{
  void *v5;
  void **block;
  int v7;
  int v8;
  void (*v9)(uint64_t);
  void *v10;
  id v11;
  id v12[3];
  id v13;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v13 = 0;
  objc_storeStrong(&v13, a3);
  v12[2] = a1;
  v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_10009C930;
  v10 = &unk_100281D38;
  v12[1] = a1[5];
  v11 = location[0];
  v12[0] = a1[4];
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(location, 0);
}

void sub_10009C930(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(id *)(a1 + 32));
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
}

void sub_10009C978(NSObject *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  _WORD v20[3];
  os_log_type_t v21;
  os_log_t v22;
  os_log_type_t v23;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v23 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_100039500((uint64_t)buf, *(_QWORD *)(*((_QWORD *)a1[6].isa + 1) + 40));
    _os_log_impl((void *)&_mh_execute_header, oslog[0], v23, "Using express setup data provider: %{public}@", buf, 0xCu);
  }
  objc_storeStrong((id *)oslog, 0);
  v2 = objc_msgSend(*(id *)(*((_QWORD *)a1[6].isa + 1) + 40), "expressSetupFeatures");
  v3 = objc_msgSend(v2, "count");

  if ((unint64_t)v3 > 2)
  {
    v8 = -[objc_class paneFeatureAnalyticsManager](a1[4].isa, "paneFeatureAnalyticsManager");
    v9 = objc_msgSend(*(id *)(*((_QWORD *)a1[6].isa + 1) + 40), "resolvedDataSource");
    v10 = objc_msgSend(*(id *)(*((_QWORD *)a1[6].isa + 1) + 40), "expressSetupFeatures");
    objc_msgSend(v8, "setExpressDataSource:features:", v9, v10);

    -[objc_class setExpressSetupDataProvider:](a1[4].isa, "setExpressSetupDataProvider:", *(_QWORD *)(*((_QWORD *)a1[6].isa + 1) + 40));
    v11 = -[objc_class expressSetupDataProvider](a1[4].isa, "expressSetupDataProvider");
    v12 = objc_msgSend(v11, "cloudDataSource");
    v13 = objc_msgSend(v12, "expressSettings");
    v14 = -[objc_class existingSettings](a1[4].isa, "existingSettings");
    objc_msgSend(v14, "setExpressSettings:", v13);

    v15 = (void *)objc_opt_class(a1[4].isa);
    v16 = -[objc_class expressSetupDataProvider](a1[4].isa, "expressSetupDataProvider");
    v17 = objc_msgSend(v16, "expressSetupFeatures");
    v18 = objc_msgSend(v15, "_privacyIdentifiersForFeatures:", v17);
    -[objc_class setPrivacyIdentifiers:](a1[4].isa, "setPrivacyIdentifiers:", v18);

    v19 = -[objc_class headerView](a1[4].isa, "headerView");
    objc_msgSend(v19, "setIcon:accessibilityLabel:", *(_QWORD *)(*((_QWORD *)a1[7].isa + 1) + 40), 0);

    if (a1[5].isa)
      (*((void (**)(void))a1[5].isa + 2))();
  }
  else
  {
    v22 = (os_log_t)(id)_BYLoggingFacility(v4);
    v21 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v22;
      v6 = v21;
      sub_100038C3C(v20);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Skipping Express Setup pane because we need more than two features to list", (uint8_t *)v20, 2u);
    }
    objc_storeStrong((id *)&v22, 0);
    -[objc_class _recordAnalyticsEventForDataProvider:presented:customized:](a1[4].isa, "_recordAnalyticsEventForDataProvider:presented:customized:", *(_QWORD *)(*((_QWORD *)a1[6].isa + 1) + 40), 0, 0);
    v7 = -[objc_class paneFeatureAnalyticsManager](a1[4].isa, "paneFeatureAnalyticsManager");
    objc_msgSend(v7, "setExpressDataSource:features:", 0, 0);

    if (a1[5].isa)
      (*((void (**)(void))a1[5].isa + 2))();
  }
}

void sub_10009D740(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_10009D880();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("PKPassLibrary");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getPKPassLibraryClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyExpressWelcomeController.m"), 63, CFSTR("Unable to find class %s"), "PKPassLibrary");

    __break(1u);
  }
  qword_1002EE900 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_10009D880()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_10009D9AC((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *PassKitCoreLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyExpressWelcomeController.m"), 62, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_10009D9AC(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE908;
  v9 = qword_1002EE908;
  if (!qword_1002EE908)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10009DA3C;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_10009DA3C((uint64_t)&v2);
  }
  return qword_1002EE908;
}

uint64_t sub_10009DA3C(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE908 = result;
  return result;
}

void sub_10009F110(uint64_t a1)
{
  id v2;
  unsigned __int8 v3;
  void *v4;
  void **v5;
  int v6;
  int v7;
  id (*v8)(uint64_t);
  void *v9;
  id v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  v15 = a1;
  v14 = a1;
  v2 = +[BuddyActivationConfiguration currentConfiguration](BuddyActivationConfiguration, "currentConfiguration");
  v3 = objc_msgSend(v2, "isActivated");

  v13 = v3 & 1;
  v4 = &_dispatch_main_q;
  v5 = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_10009F21C;
  v9 = &unk_100281DC8;
  v10 = *(id *)(a1 + 32);
  v11 = *(_BYTE *)(a1 + 40) & 1;
  v12 = v3 & 1;
  dispatch_async((dispatch_queue_t)v4, &v5);

  objc_storeStrong(&v10, 0);
}

id sub_10009F21C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_checkActivationFailIfNotActivated:isActivated:", *(_BYTE *)(a1 + 40) & 1, *(_BYTE *)(a1 + 41) & 1, a1, a1);
}

void sub_10009F8C4(uint64_t a1)
{
  id v2;
  unsigned __int8 v3;
  void *v4;
  void **v5;
  int v6;
  int v7;
  id *(*v8)(id *);
  void *v9;
  id v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;

  v14 = a1;
  v13 = a1;
  v2 = +[BuddyActivationConfiguration currentConfiguration](BuddyActivationConfiguration, "currentConfiguration");
  v3 = objc_msgSend(v2, "isActivated");

  v12 = v3 & 1;
  v4 = &_dispatch_main_q;
  v5 = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_10009F9C4;
  v9 = &unk_100280B18;
  v11 = v3 & 1;
  v10 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)v4, &v5);

  objc_storeStrong(&v10, 0);
}

id *sub_10009F9C4(id *result)
{
  if (((_BYTE)result[5] & 1) == 0)
    return (id *)objc_msgSend(result[4], "_activate", result, result);
  *((_DWORD *)result[4] + 24) = 3;
  return result;
}

void sub_1000A057C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v11 = 0;
  objc_storeStrong(&v11, a3);
  v10 = 0;
  objc_storeStrong(&v10, a4);
  v9 = 0;
  objc_storeStrong(&v9, a5);
  if (v9)
  {
    objc_msgSend(*(id *)(a1 + 32), "_handleFailureWithError:", v9, a1);
  }
  else if (location[0])
  {
    objc_msgSend(*(id *)(a1 + 32), "_handleActivationData:responseHeaders:baseURL:", location[0], v11, v10, a1);
  }
  if (*(_QWORD *)(a1 + 40))
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_storeStrong(&v9, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(location, 0);
}

double sub_1000A1110(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)&result = 67109634;
  *(_DWORD *)a1 = 67109634;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 2048;
  *(_QWORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 18) = 2112;
  *(_QWORD *)(a1 + 20) = a4;
  return result;
}

void sub_1000A113C(id *a1, void *a2, void *a3, void *a4)
{
  id WeakRetained;
  id v8;
  id v9;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v9 = 0;
  objc_storeStrong(&v9, a3);
  v8 = 0;
  objc_storeStrong(&v8, a4);
  WeakRetained = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(WeakRetained, "agreeToRemoteUIDialog");

  objc_storeStrong(&v8, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1000A11E4(id *a1, void *a2, void *a3, void *a4)
{
  id WeakRetained;
  id v8;
  id v9;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v9 = 0;
  objc_storeStrong(&v9, a3);
  v8 = 0;
  objc_storeStrong(&v8, a4);
  WeakRetained = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(WeakRetained, "disagreeToRemoteUIDialog");

  objc_storeStrong(&v8, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1000A128C(id *a1, void *a2, void *a3, void *a4)
{
  id WeakRetained;
  id v8;
  id v9;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v9 = 0;
  objc_storeStrong(&v9, a3);
  v8 = 0;
  objc_storeStrong(&v8, a4);
  WeakRetained = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(WeakRetained, "tryAgainOnRemoteUIDialog");

  objc_storeStrong(&v8, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1000A1334(uint64_t a1)
{
  uint64_t v2;
  NSDictionary *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_signpost_type_t v8;
  os_signpost_id_t v9;
  uint64_t v10;
  char v11;
  NSObject *v12;
  os_signpost_type_t v13;
  os_signpost_id_t v14;
  uint64_t v15;
  int v16;
  NSString *v17;
  void *v18;
  void **block;
  int v20;
  int v21;
  void (*v22)(uint64_t);
  void *v23;
  id v24;
  id v25;
  char v26;
  char v27;
  id v28;
  char v29;
  id v30;
  os_log_type_t v31;
  os_log_t v32;
  os_log_type_t v33;
  os_log_t v34;
  uint8_t v35[8];
  os_signpost_id_t v36;
  char v37;
  os_log_t v38;
  double v39;
  id obj;
  char v41;
  os_log_type_t v42;
  os_log_t oslog;
  uint8_t buf[8];
  os_signpost_id_t v45;
  char v46;
  os_log_t log;
  __int128 v48;
  __int128 v49;
  id location;
  char v51;
  NSDictionary *v52;
  id v53[3];
  uint8_t v54[32];
  uint8_t v55[32];
  uint8_t v56[24];
  uint64_t v57;
  uint64_t v58;

  v53[2] = (id)a1;
  v53[1] = (id)a1;
  v2 = *(_QWORD *)(a1 + 32);
  v51 = 0;
  if (v2)
  {
    v57 = kMAOptionsActivationResponseHeaders;
    v58 = *(_QWORD *)(a1 + 32);
    v3 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v58, &v57, 1);
    v52 = v3;
    v51 = 1;
  }
  else
  {
    v3 = 0;
  }
  v53[0] = v3;
  if ((v51 & 1) != 0)

  location = 0;
  v49 = 0uLL;
  v4 = (id)_BYSignpostSubsystem();
  v5 = _BYSignpostCreate(v4);
  *((_QWORD *)&v48 + 1) = v6;
  *(_QWORD *)&v48 = v5;

  log = (os_log_t)(id)_BYSignpostSubsystem();
  v46 = 1;
  v45 = v48;
  if ((_QWORD)v48 && v45 != -1 && os_signpost_enabled(log))
  {
    v7 = log;
    v8 = v46;
    v9 = v45;
    sub_100038C3C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v7, v8, v9, "ActivationActivate", "", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  oslog = (os_log_t)(id)_BYSignpostSubsystem();
  v42 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000342B4((uint64_t)v56, v48);
    _os_log_impl((void *)&_mh_execute_header, oslog, v42, "BEGIN [%lld]: ActivationActivate ", v56, 0xCu);
  }
  objc_storeStrong((id *)&oslog, 0);
  v49 = v48;
  v41 = 0;
  v10 = *(_QWORD *)(a1 + 40);
  obj = location;
  v11 = MAEActivateDeviceWithError(v10, v53[0], &obj);
  objc_storeStrong(&location, obj);
  v41 = v11;
  v39 = (double)(unint64_t)_BYSignpostGetNanoseconds(v49, *((_QWORD *)&v49 + 1)) / 1000000000.0;
  v38 = (os_log_t)(id)_BYSignpostSubsystem();
  v37 = 2;
  v36 = v49;
  if ((_QWORD)v49 && v36 != -1 && os_signpost_enabled(v38))
  {
    v12 = v38;
    v13 = v37;
    v14 = v36;
    sub_100038C3C(v35);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v12, v13, v14, "ActivationActivate", "", v35, 2u);
  }
  objc_storeStrong((id *)&v38, 0);
  v34 = (os_log_t)(id)_BYSignpostSubsystem();
  v33 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
  {
    sub_10008A810((uint64_t)v55, v49, *(uint64_t *)&v39);
    _os_log_impl((void *)&_mh_execute_header, v34, v33, "END [%lld] %fs: ActivationActivate ", v55, 0x16u);
  }
  objc_storeStrong((id *)&v34, 0);
  v32 = (os_log_t)(id)_BYLoggingFacility(v15);
  v31 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    v16 = v41 & 1;
    v29 = 0;
    v27 = 0;
    if ((_BYIsInternalInstall() & 1) != 0)
    {
      v17 = (NSString *)location;
    }
    else if (location)
    {
      v30 = objc_msgSend(location, "domain");
      v29 = 1;
      v17 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v30, objc_msgSend(location, "code"));
      v28 = v17;
      v27 = 1;
    }
    else
    {
      v17 = 0;
    }
    sub_1000503FC((uint64_t)v54, v16, (uint64_t)v17);
    _os_log_impl((void *)&_mh_execute_header, v32, v31, "Buddy Activate: ticketAccepted = %d, error = %{public}@", v54, 0x12u);
    if ((v27 & 1) != 0)

    if ((v29 & 1) != 0)
  }
  objc_storeStrong((id *)&v32, 0);
  v18 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v20 = -1073741824;
  v21 = 0;
  v22 = sub_1000A18DC;
  v23 = &unk_100280FB0;
  v26 = v41 & 1;
  v24 = *(id *)(a1 + 48);
  v25 = *(id *)(a1 + 56);
  dispatch_async((dispatch_queue_t)v18, &block);

  objc_storeStrong(&v25, 0);
  objc_storeStrong(&v24, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(v53, 0);
}

void sub_1000A18DC(uint64_t a1)
{
  NSObject *v2;
  os_log_type_t v3;
  NSTimer *v4;
  void **v5;
  void *v6;
  os_log_t v7;
  uint8_t buf[7];
  os_log_type_t v9;
  os_log_t oslog[3];
  uint8_t v11[24];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(objc_msgSend(*(id *)(a1 + 32), "_clearTicketAcceptedTimer"));
    v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v2 = oslog[0];
      v3 = v9;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Buddy Activate: Scheduling ticket accepted timer...", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    v4 = +[NSTimer scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:](NSTimer, "scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:", *(_QWORD *)(a1 + 32), "_ticketAcceptedDidTimeout", 0, 0, 20.0);
    v5 = (void **)(*(_QWORD *)(a1 + 32) + 120);
    v6 = *v5;
    *v5 = v4;

  }
  else
  {
    v7 = (os_log_t)(id)_BYLoggingFacility(a1);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      sub_100038C28((uint64_t)v11, *(_QWORD *)(a1 + 40));
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Buddy Activate: Failed with response body: %@", v11, 0xCu);
    }
    objc_storeStrong((id *)&v7, 0);
    objc_msgSend(*(id *)(a1 + 32), "_enterState:", 5);
  }
}

void sub_1000A1FF8(_QWORD *a1, void *a2, void *a3)
{
  NSObject *v5;
  os_signpost_type_t v6;
  os_signpost_id_t v7;
  uint64_t v8;
  NSString *v9;
  NSDictionary *v10;
  id v11;
  char v12;
  NSString *v13;
  char v14;
  id v15;
  os_log_t v16;
  id v17;
  os_log_type_t v18;
  os_log_t oslog;
  uint8_t buf[16];
  os_signpost_id_t v21;
  char v22;
  os_log_t log;
  double v24;
  _QWORD *v25;
  id v26;
  id location[2];
  uint64_t v28;
  id v29;
  uint8_t v30[16];
  uint8_t v31[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v26 = 0;
  objc_storeStrong(&v26, a3);
  v25 = a1;
  v24 = 0.0;
  v24 = (double)(unint64_t)_BYSignpostGetNanoseconds(a1[5], a1[6]) / 1000000000.0;
  log = (os_log_t)(id)_BYSignpostSubsystem();
  v22 = 2;
  v21 = 0;
  v21 = a1[5];
  if (v21 && v21 != -1 && os_signpost_enabled(log))
  {
    v5 = log;
    v6 = v22;
    v7 = v21;
    sub_100038C3C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, v6, v7, "ActivationFindMyIdentity", "", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  oslog = (os_log_t)(id)_BYSignpostSubsystem();
  v18 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_10008A810((uint64_t)v31, a1[5], *(uint64_t *)&v24);
    _os_log_impl((void *)&_mh_execute_header, oslog, v18, "END [%lld] %fs: ActivationFindMyIdentity ", v31, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  v17 = 0;
  if (!v26 && location[0])
  {
    v28 = kMAOptionsActivationLockInfo;
    v29 = location[0];
    v10 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v29, &v28, 1);
    v11 = v17;
    v17 = v10;

  }
  else
  {
    v16 = (os_log_t)(id)_BYLoggingFacility(v8);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v14 = 0;
      v12 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v9 = (NSString *)v26;
      }
      else if (v26)
      {
        v15 = objc_msgSend(v26, "domain");
        v14 = 1;
        v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v15, objc_msgSend(v26, "code"));
        v13 = v9;
        v12 = 1;
      }
      else
      {
        v9 = 0;
      }
      sub_100039500((uint64_t)v30, (uint64_t)v9);
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Buddy Activate: Error generating FMiP identity: %{public}@", v30, 0xCu);
      if ((v12 & 1) != 0)

      if ((v14 & 1) != 0)
    }
    objc_storeStrong((id *)&v16, 0);
  }
  if (a1[4])
    (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(&v17, 0);
  objc_storeStrong(&v26, 0);
  objc_storeStrong(location, 0);
}

id sub_1000A2570(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_handleFailureWithError:", 0, a1, a1);
}

void sub_1000A259C(id *a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v11 = 0;
  objc_storeStrong(&v11, a3);
  v10 = 0;
  objc_storeStrong(&v10, a4);
  v9 = 0;
  objc_storeStrong(&v9, a5);
  if (v9)
  {
    objc_msgSend(a1[4], "_handleFailureWithError:", v9, a1);
  }
  else if (location[0])
  {
    objc_msgSend(a1[4], "_handleActivationData:responseHeaders:baseURL:", location[0], v11, v10, a1);
  }
  objc_storeStrong(&v9, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(location, 0);
}

void sub_1000A2F3C(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "_tryActivateWithOptions:requestMutator:", location[0], 0);
  objc_storeStrong(location, 0);
}

double sub_1000A33AC(uint64_t a1, uint64_t a2, int a3)
{
  double result;

  *(_QWORD *)&result = 138412546;
  *(_DWORD *)a1 = 138412546;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  return result;
}

void sub_1000A39BC(id a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  _WORD v4[7];
  os_log_type_t v5;
  os_log_t oslog;
  uint64_t v7;
  id v8;
  id v9;

  v9 = a1;
  v8 = a1;
  v1 = lockdown_connect();
  v7 = v1;
  if (v1)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v1);
    v5 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v2 = oslog;
      v3 = v5;
      sub_100038C3C(v4);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Buddy Activate: Writing ActivationStateAcknowledged key.", (uint8_t *)v4, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    lockdown_set_value(v7, 0, CFSTR("ActivationStateAcknowledged"), kCFBooleanTrue);
    lockdown_disconnect(v7);
  }
}

void sub_1000A3CA4(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint8_t buf[15];
  os_log_type_t v11;
  os_log_t oslog[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
  v11 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog[0];
    v5 = v11;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Activation Lock Expiration Timer fired", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  v6 = -[objc_class navigationController](a1[4].isa, "navigationController");
  v9 = objc_msgSend(v6, "topViewController");

  if (v9 == *((id *)a1[4].isa + 22))
  {
    v7 = -[objc_class navigationController](a1[4].isa, "navigationController");
    v8 = objc_msgSend(v7, "popToViewController:animated:", a1[4].isa, 1);

  }
  -[objc_class _stopActivationLockExpirationTimer](a1[4].isa, "_stopActivationLockExpirationTimer");
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1000A4260(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "_userAgreedToTCs:", 1);
  objc_storeStrong(location, 0);
}

id sub_1000A4698(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_checkActivationFailIfNotActivated:isActivated:", 0, *(_BYTE *)(a1 + 40) & 1, a1, a1);
}

void sub_1000A61CC(uint64_t a1, void *a2, void *a3)
{
  NSObject *v5;
  os_signpost_type_t v6;
  os_signpost_id_t v7;
  void *v8;
  void **v9;
  int v10;
  int v11;
  void (*v12)(uint64_t);
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  id v19;
  os_log_type_t v20;
  os_log_t oslog;
  uint8_t buf[16];
  os_signpost_id_t v23;
  char v24;
  os_log_t log;
  double v26;
  uint64_t v27;
  id v28;
  id location[2];
  uint8_t v30[24];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v28 = 0;
  objc_storeStrong(&v28, a3);
  v27 = a1;
  v26 = 0.0;
  v26 = (double)(unint64_t)_BYSignpostGetNanoseconds(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72)) / 1000000000.0;
  log = (os_log_t)(id)_BYSignpostSubsystem();
  v24 = 2;
  v23 = 0;
  v23 = *(_QWORD *)(a1 + 64);
  if (v23 && v23 != -1 && os_signpost_enabled(log))
  {
    v5 = log;
    v6 = v24;
    v7 = v23;
    sub_100038C3C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v5, v6, v7, "ActivationFindMyIdentity", "", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  oslog = (os_log_t)(id)_BYSignpostSubsystem();
  v20 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_10008A810((uint64_t)v30, *(_QWORD *)(a1 + 64), *(uint64_t *)&v26);
    _os_log_impl((void *)&_mh_execute_header, oslog, v20, "END [%lld] %fs: ActivationFindMyIdentity ", v30, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  v8 = &_dispatch_main_q;
  v9 = _NSConcreteStackBlock;
  v10 = -1073741824;
  v11 = 0;
  v12 = sub_1000A64D8;
  v13 = &unk_100281F28;
  v14 = location[0];
  v15 = v28;
  v16 = *(id *)(a1 + 32);
  v17 = *(id *)(a1 + 40);
  v18 = *(id *)(a1 + 48);
  v19 = *(id *)(a1 + 56);
  dispatch_async((dispatch_queue_t)v8, &v9);

  objc_storeStrong(&v19, 0);
  objc_storeStrong(&v18, 0);
  objc_storeStrong(&v17, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v28, 0);
  objc_storeStrong(location, 0);
}

void sub_1000A64D8(uint64_t a1)
{
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  id v5;
  id v6;
  void *v7;
  NSString *v8;
  char v9;
  NSString *v10;
  char v11;
  id v12;
  os_log_t oslog;
  void **v14;
  int v15;
  int v16;
  void (*v17)(uint64_t, void *, void *, void *, void *);
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint8_t buf[7];
  os_log_type_t v25;
  id location[3];
  uint8_t v27[24];

  location[2] = (id)a1;
  location[1] = (id)a1;
  v2 = objc_msgSend(*(id *)(a1 + 32), "length");
  if (!v2 || *(_QWORD *)(a1 + 40))
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v2);
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v11 = 0;
      v9 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v8 = *(NSString **)(a1 + 40);
      }
      else if (*(_QWORD *)(a1 + 40))
      {
        v12 = objc_msgSend(*(id *)(a1 + 40), "domain");
        v11 = 1;
        v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v12, objc_msgSend(*(id *)(a1 + 40), "code"));
        v10 = v8;
        v9 = 1;
      }
      else
      {
        v8 = 0;
      }
      sub_100039500((uint64_t)v27, (uint64_t)v8);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Buddy Activate: Failed to get identity recovery blob, error: %{public}@", v27, 0xCu);
      if ((v9 & 1) != 0)

      if ((v11 & 1) != 0)
    }
    objc_storeStrong((id *)&oslog, 0);
    objc_msgSend(*(id *)(a1 + 64), "stopSpinningForIdentifier:", *(_QWORD *)(a1 + 72));
    objc_msgSend(*(id *)(a1 + 64), "_enterState:", 5);
  }
  else
  {
    location[0] = (id)_BYLoggingFacility(v2);
    v25 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)location[0], OS_LOG_TYPE_DEFAULT))
    {
      v3 = location[0];
      v4 = v25;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Buddy Activate: Posting activation with identity recovery blob", buf, 2u);
    }
    objc_storeStrong(location, 0);
    v23 = objc_opt_new(NSMutableDictionary);
    v5 = objc_msgSend(*(id *)(a1 + 48), "serverInfo");

    if (v5)
    {
      v6 = objc_msgSend(*(id *)(a1 + 48), "serverInfo");
      objc_msgSend(v23, "setObject:forKeyedSubscript:", v6, CFSTR("serverInfo"));

    }
    v22 = +[NSMutableURLRequest requestWithURL:](NSMutableURLRequest, "requestWithURL:", *(_QWORD *)(a1 + 56));
    objc_msgSend(v22, "setHTTPMethod:", CFSTR("POST"));
    objc_msgSend(v22, "setValue:forHTTPHeaderField:", CFSTR("application/x-plist"), CFSTR("Content-Type"));
    objc_msgSend(v23, "setObject:forKeyedSubscript:", *(_QWORD *)(a1 + 32), CFSTR("ActivationLockRecoveryInfo"));
    v21 = +[NSPropertyListSerialization dataWithPropertyList:format:options:error:](NSPropertyListSerialization, "dataWithPropertyList:format:options:error:", v23, 100, 0, 0);
    objc_msgSend(v22, "setHTTPBody:", v21);
    v7 = *(void **)(a1 + 64);
    v14 = _NSConcreteStackBlock;
    v15 = -1073741824;
    v16 = 0;
    v17 = sub_1000A68C4;
    v18 = &unk_100281F00;
    v19 = *(id *)(a1 + 64);
    v20 = *(id *)(a1 + 72);
    objc_msgSend(v7, "startRequest:completion:", v22, &v14);
    objc_storeStrong(&v20, 0);
    objc_storeStrong(&v19, 0);
    objc_storeStrong(&v21, 0);
    objc_storeStrong(&v22, 0);
    objc_storeStrong(&v23, 0);
  }
}

void sub_1000A68C4(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v11 = 0;
  objc_storeStrong(&v11, a3);
  v10 = 0;
  objc_storeStrong(&v10, a4);
  v9 = 0;
  objc_storeStrong(&v9, a5);
  objc_msgSend(*(id *)(a1 + 32), "stopSpinningForIdentifier:", *(_QWORD *)(a1 + 40), a1);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(location, 0);
}

void sub_1000A6A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  id *v11;
  uint64_t v12;

  objc_destroyWeak(v11);
  objc_destroyWeak((id *)(v12 - 40));
  _Unwind_Resume(a1);
}

BOOL sub_1000A6A54(id a1, RUIElement *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  unsigned __int8 v9;
  id v11[2];
  id location[2];
  char v13;

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v11[1] = a1;
  v3 = objc_msgSend(location[0], "pageElement");
  v4 = objc_msgSend(v3, "page");
  v5 = objc_msgSend(v4, "attributes");
  v11[0] = objc_msgSend(v5, "objectForKeyedSubscript:", CFSTR("name"));

  if ((objc_msgSend(v11[0], "isEqualToString:", CFSTR("FMIPLockPasscode")) & 1) == 0)
    goto LABEL_6;
  v6 = location[0];
  v7 = objc_opt_class(RUIPasscodeView);
  if ((objc_opt_isKindOfClass(v6, v7) & 1) == 0)
  {
    v8 = objc_msgSend(location[0], "identifier");
    v9 = objc_msgSend(v8, "isEqualToString:", CFSTR("next"));

    if ((v9 & 1) != 0)
    {
      v13 = 1;
      goto LABEL_7;
    }
LABEL_6:
    v13 = 0;
    goto LABEL_7;
  }
  v13 = 1;
LABEL_7:
  objc_storeStrong(v11, 0);
  objc_storeStrong(location, 0);
  return v13 & 1;
}

void sub_1000A6BD4(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t isKindOfClass;
  id v14;
  id v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  _WORD v20[7];
  os_log_type_t v21;
  os_log_t oslog;
  id v23;
  id v24;
  id v25;
  id v26[2];
  id v27;
  id v28;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v28 = 0;
  objc_storeStrong(&v28, a3);
  v27 = 0;
  objc_storeStrong(&v27, a4);
  v26[1] = a1;
  v26[0] = objc_loadWeakRetained(a1 + 4);
  if (v26[0])
  {
    v25 = 0;
    v7 = v28;
    v8 = objc_opt_class(RUIPasscodeView);
    if ((objc_opt_isKindOfClass(v7, v8) & 1) != 0)
    {
      v24 = v28;
      v9 = objc_msgSend(v24, "passcodeField");
      v10 = objc_msgSend(v9, "stringValue");
      v11 = v25;
      v25 = v10;

      objc_storeStrong(&v24, 0);
    }
    else
    {
      v23 = objc_msgSend(location[0], "subElementWithID:", CFSTR("passcode"));
      v12 = objc_opt_class(RUITableViewRow);
      isKindOfClass = objc_opt_isKindOfClass(v23, v12);
      if ((isKindOfClass & 1) != 0)
      {
        v14 = objc_msgSend(v23, "tableCell");
        v15 = objc_msgSend(v14, "editableTextField");
        v16 = objc_msgSend(v15, "text");
        v17 = v25;
        v25 = v16;

      }
      else
      {
        oslog = (os_log_t)(id)_BYLoggingFacility(isKindOfClass);
        v21 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
        {
          v18 = oslog;
          v19 = v21;
          sub_100038C3C(v20);
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "Unable to find passcode on FMIP passcode lock pane!", (uint8_t *)v20, 2u);
        }
        objc_storeStrong((id *)&oslog, 0);
      }
      objc_storeStrong(&v23, 0);
    }
    if (v25)
      objc_msgSend(v26[0], "_activateWithPasscode:fromObjectModel:", v25, location[0]);
    else
      objc_msgSend(v26[0], "_enterState:", 5);
    objc_storeStrong(&v25, 0);
  }
  objc_storeStrong(v26, 0);
  objc_storeStrong(&v27, 0);
  objc_storeStrong(&v28, 0);
  objc_storeStrong(location, 0);
}

void sub_1000A8704(id *a1, void *a2, void *a3)
{
  id v5;
  BOOL v6;
  uint64_t v7;
  NSString *v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  NSString *v12;
  void *v13;
  void **block;
  int v15;
  int v16;
  void (*v17);
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  char v23;
  id v24;
  char v25;
  id v26;
  os_log_type_t v27;
  os_log_t v28;
  uint8_t v29[7];
  os_log_type_t v30;
  os_log_t oslog;
  id v32;
  char v33;
  id v34;
  char v35;
  id v36;
  os_log_type_t v37;
  id v38;
  BOOL v39;
  BOOL v40;
  id *v41;
  id v42;
  id location[2];
  uint8_t v44[16];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v42 = 0;
  objc_storeStrong(&v42, a3);
  v41 = a1;
  v40 = 0;
  v5 = objc_msgSend(v42, "domain");
  v6 = 0;
  if ((objc_msgSend(v5, "isEqualToString:", AKAppleIDAuthenticationErrorDomain) & 1) != 0)
    v6 = objc_msgSend(v42, "code") == (id)-7003;

  v40 = v6;
  v39 = v42 == 0;
  v38 = (id)_BYLoggingFacility(v7);
  v37 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)v38, OS_LOG_TYPE_DEFAULT))
  {
    v35 = 0;
    v33 = 0;
    if ((_BYIsInternalInstall() & 1) != 0)
    {
      v8 = (NSString *)v42;
    }
    else if (v42)
    {
      v36 = objc_msgSend(v42, "domain");
      v35 = 1;
      v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v36, objc_msgSend(v42, "code"));
      v34 = v8;
      v33 = 1;
    }
    else
    {
      v8 = 0;
    }
    sub_1000503FC((uint64_t)buf, v39, (uint64_t)v8);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v38, v37, "Auth finished with success %i error %{public}@", buf, 0x12u);
    if ((v33 & 1) != 0)

    if ((v35 & 1) != 0)
  }
  objc_storeStrong(&v38, 0);
  v9 = v42;
  v32 = v9;
  if (v40)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v9);
    v30 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v10 = oslog;
      v11 = v30;
      sub_100038C3C(v29);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "AuthManager: Auth canceled", v29, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  else if (v42)
  {
    v28 = (os_log_t)(id)_BYLoggingFacility(v9);
    v27 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      v25 = 0;
      v23 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v12 = (NSString *)v42;
      }
      else if (v42)
      {
        v26 = objc_msgSend(v42, "domain");
        v25 = 1;
        v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v26, objc_msgSend(v42, "code"));
        v24 = v12;
        v23 = 1;
      }
      else
      {
        v12 = 0;
      }
      sub_100039500((uint64_t)v44, (uint64_t)v12);
      _os_log_impl((void *)&_mh_execute_header, v28, v27, "Authenticate failed with error: %{public}@", v44, 0xCu);
      if ((v23 & 1) != 0)

      if ((v25 & 1) != 0)
    }
    objc_storeStrong((id *)&v28, 0);
  }
  v13 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v15 = -1073741824;
  v16 = 0;
  v17 = sub_1000A8C0C;
  v18 = &unk_100281FB8;
  v19 = a1[4];
  v22 = a1[5];
  v20 = location[0];
  v21 = v32;
  dispatch_async((dispatch_queue_t)v13, &block);

  objc_storeStrong(&v21, 0);
  objc_storeStrong(&v20, 0);
  objc_storeStrong(&v22, 0);
  objc_storeStrong(&v19, 0);
  objc_storeStrong(&v32, 0);
  objc_storeStrong(&v42, 0);
  objc_storeStrong(location, 0);
}

void sub_1000A8C0C(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  _WORD v4[3];
  os_log_type_t v5;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(-[objc_class setEnabled:](a1[4].isa, "setEnabled:", 1));
  v5 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v5;
    sub_100038C3C(v4);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "AuthManager completion", (uint8_t *)v4, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  if (a1[7].isa)
    (*((void (**)(void))a1[7].isa + 2))();
}

void sub_1000A91D8(NSObject *a1, void *a2, id obj)
{
  uint64_t v4;
  const __CFString *v5;
  void *v6;
  void **block;
  int v8;
  int v9;
  uint64_t (*v10)(_QWORD *);
  void *v11;
  id v12;
  id v13[2];
  os_log_type_t v14;
  os_log_t oslog[2];
  id location;
  void *v17;
  NSObject *v18;
  uint8_t buf[24];

  v18 = a1;
  v17 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
  v14 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    if (v17 == (void *)2)
      v5 = CFSTR("YES");
    else
      v5 = CFSTR("NO");
    sub_100039500((uint64_t)buf, (uint64_t)v5);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], v14, "Account is federated auth account: %{public}@", buf, 0xCu);
  }
  objc_storeStrong((id *)oslog, 0);
  v6 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v8 = -1073741824;
  v9 = 0;
  v10 = sub_1000A9398;
  v11 = &unk_100282008;
  v13[0] = a1[4].isa;
  v13[1] = v17;
  v12 = location;
  dispatch_async((dispatch_queue_t)v6, &block);

  objc_storeStrong(&v12, 0);
  objc_storeStrong(v13, 0);
  objc_storeStrong(&location, 0);
}

uint64_t sub_1000A9398(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[5] + 16))(a1[5], a1[6], a1[4]);
}

double sub_1000A97B8()
{
  return 20.0;
}

void sub_1000A990C(uint64_t a1)
{
  UIColor *v2;
  CGColor *v3;
  id v4;
  id v5;
  id v6;
  UIColor *v7;
  CGColor *v8;
  id v9;

  if ((objc_msgSend(*(id *)(a1 + 32), "isFilled", a1, a1) & 1) != 0)
  {
    v2 = objc_retainAutorelease(+[UIColor labelColor](UIColor, "labelColor"));
    v3 = -[UIColor CGColor](v2, "CGColor");
    v4 = objc_msgSend(*(id *)(a1 + 32), "layer");
    objc_msgSend(v4, "setBackgroundColor:", v3);

    v5 = objc_msgSend(*(id *)(a1 + 32), "layer");
    objc_msgSend(v5, "setBorderColor:", 0);

  }
  else
  {
    v6 = objc_msgSend(*(id *)(a1 + 32), "layer");
    objc_msgSend(v6, "setBackgroundColor:", 0);

    v7 = objc_retainAutorelease(+[UIColor tertiaryLabelColor](UIColor, "tertiaryLabelColor"));
    v8 = -[UIColor CGColor](v7, "CGColor");
    v9 = objc_msgSend(*(id *)(a1 + 32), "layer");
    objc_msgSend(v9, "setBorderColor:", v8);

  }
}

void sub_1000AA2BC(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  void (**v4)(_QWORD);
  _WORD v5[3];
  char v6;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v6 = 2;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEBUG))
  {
    v2 = oslog[0];
    v3 = v6;
    sub_100038C3C(v5);
    _os_log_debug_impl((void *)&_mh_execute_header, v2, v3, "Add keyboard language view controller did complete dismiss", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  v4 = (void (**)(_QWORD))-[objc_class completion](a1[4].isa, "completion");
  v4[2](v4);

}

id sub_1000AA98C()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE910;
  v13 = qword_1002EE910;
  if (!qword_1002EE910)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000AB028;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1000AB028(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

id sub_1000AAA78()
{
  NSAssertionHandler *v0;
  NSString *v1;
  id *v3;

  v3 = (id *)sub_1000AB3B8();
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *getTSUserInfoFlowTypeKey(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyCloudSIMController.m"), 31, CFSTR("%s"), dlerror());

    __break(1u);
  }
  return *v3;
}

id sub_1000AAB70()
{
  NSAssertionHandler *v0;
  NSString *v1;
  id *v3;

  v3 = (id *)sub_1000AB504();
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *getTSUserInfoProximitySetupStateKey(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyCloudSIMController.m"), 32, CFSTR("%s"), dlerror());

    __break(1u);
  }
  return *v3;
}

void sub_1000AAC68(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (a1[4])
    (*(void (**)(_QWORD, BOOL))(a1[4] + 16))(a1[4], location[0] != 0);
  objc_storeStrong(location, 0);
}

void sub_1000AB028(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1000AB168();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("TSSIMSetupFlow");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getTSSIMSetupFlowClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyCloudSIMController.m"), 30, CFSTR("Unable to find class %s"), "TSSIMSetupFlow");

    __break(1u);
  }
  qword_1002EE910 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_1000AB168()
{
  NSAssertionHandler *v0;
  NSString *v1;
  uint64_t v3;
  void *v4;

  v4 = 0;
  v3 = sub_1000AB298((uint64_t)&v4);
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *SIMSetupSupportLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyCloudSIMController.m"), 29, CFSTR("%s"), v4);

    __break(1u);
  }
  if (v4)
    free(v4);
  return v3;
}

uint64_t sub_1000AB298(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE918;
  v9 = qword_1002EE918;
  if (!qword_1002EE918)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000AB328;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1000AB328((uint64_t)&v2);
  }
  return qword_1002EE918;
}

uint64_t sub_1000AB328(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/SIMSetupSupport.framework/SIMSetupSupport";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE918 = result;
  return result;
}

uint64_t sub_1000AB3B8()
{
  uint64_t v0;
  void **v2;
  int v3;
  int v4;
  void *(*v5)(uint64_t);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 0x20000000;
  v12 = 32;
  v8 = qword_1002EE920;
  v13 = qword_1002EE920;
  if (!qword_1002EE920)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000AB49C;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1000AB49C((uint64_t)&v2);
  }
  v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_1000AB49C(uint64_t a1)
{
  void *v2;
  void *result;

  v2 = (void *)sub_1000AB168();
  result = dlsym(v2, "TSUserInfoFlowTypeKey");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1002EE920 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1000AB504()
{
  uint64_t v0;
  void **v2;
  int v3;
  int v4;
  void *(*v5)(uint64_t);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 0x20000000;
  v12 = 32;
  v8 = qword_1002EE928;
  v13 = qword_1002EE928;
  if (!qword_1002EE928)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000AB5E8;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1000AB5E8((uint64_t)&v2);
  }
  v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_1000AB5E8(uint64_t a1)
{
  void *v2;
  void *result;

  v2 = (void *)sub_1000AB168();
  result = dlsym(v2, "TSUserInfoProximitySetupStateKey");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1002EE928 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1000ACBF4(id a1, NSArray *a2, NSError *a3)
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _WORD v8[3];
  char v9;
  os_log_t oslog[2];
  id v11;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v11 = 0;
  objc_storeStrong(&v11, a3);
  oslog[1] = (os_log_t)a1;
  if (v11)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    v9 = 16;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v6 = oslog[0];
      v7 = v9;
      sub_100038C3C(v8);
      _os_log_error_impl((void *)&_mh_execute_header, v6, v7, "Failed to register for store account additions for suspend task", (uint8_t *)v8, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  objc_storeStrong(&v11, 0);
  objc_storeStrong(location, 0);
}

id sub_1000AD0B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_attemptPreheat:", 3, a1, a1);
}

void sub_1000ADB48(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "launchURL", a1, a1);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v2 != 0;

  v3 = objc_msgSend(*(id *)(a1 + 32), "message");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v3 != 0;

}

id sub_1000ADBCC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setLaunchURL:", *(_QWORD *)(a1 + 40), a1, a1);
}

id sub_1000ADBF8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setMessage:", *(_QWORD *)(a1 + 40), a1, a1);
}

id sub_1000ADC24(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_attemptPreheat:", *(_QWORD *)(a1 + 40) - 1, a1, a1);
}

id sub_1000ADD88(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_attemptPreheat:", 1, a1, a1);
}

void sub_1000AE0D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, id location)
{
  id *v19;

  objc_destroyWeak(v19);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000AE0F0()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE930;
  v13 = qword_1002EE930;
  if (!qword_1002EE930)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000AE32C;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1000AE32C(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_1000AE1DC(uint64_t a1)
{
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 48));
  if (location[0])
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_storeStrong(location, 0);
}

void sub_1000AE32C(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1000AE46C();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("CAMCameraButtonBuddyViewController");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getCAMCameraButtonBuddyViewControllerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyCameraButtonViewControllerWrapper.m"), 17, CFSTR("Unable to find class %s"), "CAMCameraButtonBuddyViewController");

    __break(1u);
  }
  qword_1002EE930 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_1000AE46C()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_1000AE598((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *CameraUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyCameraButtonViewControllerWrapper.m"), 16, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_1000AE598(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE938;
  v9 = qword_1002EE938;
  if (!qword_1002EE938)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000AE628;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1000AE628((uint64_t)&v2);
  }
  return qword_1002EE938;
}

uint64_t sub_1000AE628(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/CameraUI.framework/CameraUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE938 = result;
  return result;
}

void sub_1000AF7F0(NSObject *a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _WORD v10[7];
  os_log_type_t v11;
  os_log_t v12;
  os_log_type_t v13;
  os_log_t oslog[2];
  id v15;
  id v16;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v16 = 0;
  objc_storeStrong(&v16, a3);
  v15 = 0;
  objc_storeStrong(&v15, a4);
  oslog[1] = a1;
  if (v15)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v7);
    v13 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_100039500((uint64_t)buf, (uint64_t)v15);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v13, "CloudKit migration failed: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
    BRSetMigrationStatusForDSID(a1[4].isa, 2);
  }
  else
  {
    v12 = (os_log_t)(id)_BYLoggingFacility(v7);
    v11 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v8 = v12;
      v9 = v11;
      sub_100038C3C(v10);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "CloudKit migration started!", (uint8_t *)v10, 2u);
    }
    objc_storeStrong((id *)&v12, 0);
    BRSetMigrationStatusForDSID(a1[4].isa, 3);
  }
  objc_storeStrong(&v15, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(location, 0);
}

void sub_1000AFC2C(NSObject *a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  NSString *v8;
  id v9;
  uint64_t v10;
  uint64_t isKindOfClass;
  id v12;
  os_log_t v13;
  os_log_type_t v14;
  os_log_t v15;
  char v16;
  id v17;
  id v18;
  int v19;
  char v20;
  id v21;
  char v22;
  id v23;
  os_log_type_t v24;
  os_log_t oslog[2];
  id v26;
  id v27;
  id location[2];
  uint8_t v29[16];
  uint8_t v30[16];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v27 = 0;
  objc_storeStrong(&v27, a3);
  v26 = 0;
  objc_storeStrong(&v26, a4);
  oslog[1] = a1;
  if (v26)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v7);
    v24 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v22 = 0;
      v20 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v8 = (NSString *)v26;
      }
      else if (v26)
      {
        v23 = objc_msgSend(v26, "domain");
        v22 = 1;
        v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v23, objc_msgSend(v26, "code"));
        v21 = v8;
        v20 = 1;
      }
      else
      {
        v8 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v8);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v24, "Failed to get CloudKit migration state: %{public}@", buf, 0xCu);
      if ((v20 & 1) != 0)

      if ((v22 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
    if (a1[4].isa)
      (*((void (**)(void))a1[4].isa + 2))();
    v19 = 1;
  }
  else
  {
    v9 = v27;
    v10 = objc_opt_class(AACloudKitMigrationStateResponse);
    isKindOfClass = objc_opt_isKindOfClass(v9, v10);
    if ((isKindOfClass & 1) != 0)
    {
      v18 = v27;
      v17 = objc_msgSend(v18, "name");
      v12 = objc_msgSend(v17, "isEqualToString:", AACloudKitMigrationStateNone);
      v16 = v12 & 1;
      v15 = (os_log_t)(id)_BYLoggingFacility(v12);
      v14 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        sub_100038C28((uint64_t)v30, (uint64_t)v17);
        _os_log_impl((void *)&_mh_execute_header, v15, v14, "Received migration state: %@", v30, 0xCu);
      }
      objc_storeStrong((id *)&v15, 0);
      if (a1[4].isa)
        (*((void (**)(void))a1[4].isa + 2))();
      objc_storeStrong(&v17, 0);
      objc_storeStrong(&v18, 0);
    }
    else
    {
      v13 = (os_log_t)(id)_BYLoggingFacility(isKindOfClass);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        sub_100038C28((uint64_t)v29, (uint64_t)v27);
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Received unexpected response type: %@", v29, 0xCu);
      }
      objc_storeStrong((id *)&v13, 0);
      if (a1[4].isa)
        (*((void (**)(void))a1[4].isa + 2))();
    }
    v19 = 0;
  }
  objc_storeStrong(&v26, 0);
  objc_storeStrong(&v27, 0);
  objc_storeStrong(location, 0);
}

void sub_1000B10C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000B10E0(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (*(_QWORD *)(a1 + 40))
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = objc_msgSend(WeakRetained, "choiceController");
  objc_msgSend(v4, "choiceConfirmed:", *(_QWORD *)(a1 + 32));

  objc_storeStrong(location, 0);
}

void sub_1000B12C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id location)
{
  id *v20;

  objc_destroyWeak(v20);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000B12E8(uint64_t a1, void *a2)
{
  id WeakRetained;
  id v4;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (*(_QWORD *)(a1 + 40))
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  v4 = objc_msgSend(WeakRetained, "choiceController");
  objc_msgSend(v4, "choiceCancelled:", *(_QWORD *)(a1 + 32));

  objc_storeStrong(location, 0);
}

void sub_1000B2544(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "learnMoreButtonTapped:", 0, a1, a1);

}

uint64_t sub_1000B5998(id *a1, void *a2)
{
  char v3;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(a1[4], "containsObject:", location[0]) ^ 1;
  objc_storeStrong(location, 0);
  return v3 & 1;
}

void sub_1000B5CE0(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v9[1] = a1;
  v9[0] = objc_loadWeakRetained(a1 + 4);
  v3 = objc_msgSend(v9[0], "dataSource");
  v4 = objc_msgSend(v9[0], "tableView");
  objc_msgSend(v3, "tableView:appendItem:inSection:", v4, location[0], 0);

  v5 = objc_msgSend(v9[0], "dataSource");
  v6 = objc_msgSend(v9[0], "tableView");
  v7 = objc_msgSend(v9[0], "dataSelectorController");
  v8 = objc_msgSend(v7, "dataStore");
  objc_msgSend(v5, "tableView:allowAdditionalDataSelection:", v6, objc_msgSend(v8, "count") != 0);

  objc_msgSend(v9[0], "dismissViewControllerAnimated:completion:", 1, 0);
  objc_storeStrong(v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1000B71B4(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;

  v2 = objc_msgSend(*(id *)(a1 + 32), "delegate", a1, a1);
  v3 = objc_msgSend(v2, "popToBuddyControllerWithClass:animated:", objc_opt_class(BuddyExpressRestoreController), 1);

  if (!v3)
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "delegate");
    v5 = objc_msgSend(v4, "popToBuddyControllerWithClass:animated:", objc_opt_class(RestoreFromBackupController), 1);

  }
}

void sub_1000B7D48(id a1)
{
  NSObject *v1;
  os_log_type_t v2;
  id v3;
  id location;
  uint8_t buf[7];
  os_log_type_t v6;
  os_log_t oslog[3];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v1 = oslog[0];
    v2 = v6;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "\"Installing\" fake software update...", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  +[BYPreferencesController flushEverything](BYPreferencesController, "flushEverything");
  sleep(2u);
  location = objc_msgSend(objc_alloc((Class)FBSShutdownOptions), "initWithReason:", CFSTR("Setup Assistant Software Update Restore Testing"));
  objc_msgSend(location, "setRebootType:", 1);
  v3 = +[FBSSystemService sharedService](FBSSystemService, "sharedService");
  objc_msgSend(v3, "shutdownWithOptions:", location);

  objc_storeStrong(&location, 0);
}

void sub_1000B7E5C(NSObject *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  os_log_t oslog[2];
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  v3 = -[objc_class backupItem](a1[4].isa, "backupItem");
  v4 = -[objc_class update](a1[4].isa, "update");
  v5 = objc_msgSend(v4, "productVersion");
  -[objc_class setAbleToRestoreWithUpdate:](a1[4].isa, "setAbleToRestoreWithUpdate:", (unint64_t)objc_msgSend(v3, "isCompatibleWithUpdateToSystemVersion:", v5) & 1);

  v6 = -[objc_class ableToRestoreWithUpdate](a1[4].isa, "ableToRestoreWithUpdate");
  if ((v6 & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v6);
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v7 = -[objc_class backupItem](a1[4].isa, "backupItem");
      v8 = -[objc_class update](a1[4].isa, "update");
      sub_10003EB04((uint64_t)buf, (uint64_t)v7, (uint64_t)v8);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Entered restore flow without a compatible update! backupItem: %@, update: %@", buf, 0x16u);

    }
    objc_storeStrong((id *)oslog, 0);
  }
  if (a1[5].isa)
    (*((void (**)(void))a1[5].isa + 2))();
  objc_storeStrong(location, 0);
}

id sub_1000B8A8C()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE940;
  v13 = qword_1002EE940;
  if (!qword_1002EE940)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000BA130;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1000BA130(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

id sub_1000B91B4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateImageViewPadding", a1, a1);
}

void sub_1000B91DC(id *a1, char a2)
{
  void **v2;
  int v3;
  int v4;
  void (*v5)(uint64_t);
  void *v6;
  id v7[2];
  char v8;
  id *v9;

  v9 = a1;
  v8 = a2;
  v7[1] = a1;
  v2 = _NSConcreteStackBlock;
  v3 = -1073741824;
  v4 = 0;
  v5 = sub_1000B927C;
  v6 = &unk_100280730;
  v7[0] = a1[4];
  +[UIView animateWithDuration:animations:](UIView, "animateWithDuration:animations:", &v2, 0.5);
  objc_storeStrong(v7, 0);
}

void sub_1000B927C(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "headerView", a1, a1);
  objc_msgSend(v2, "setAlpha:", 1.0);

  v3 = objc_msgSend(*(id *)(a1 + 32), "contentView");
  objc_msgSend(v3, "setAlpha:", 1.0);

}

void sub_1000B93CC(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "headerView", a1, a1);
  objc_msgSend(v2, "setAlpha:", 0.0);

  v3 = objc_msgSend(*(id *)(a1 + 32), "contentView");
  objc_msgSend(v3, "setAlpha:", 0.0);

}

void sub_1000B9ADC(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "headerView", a1, a1);
  objc_msgSend(v1, "setAlpha:", 0.0);

}

void sub_1000B9B2C(uint64_t a1, char a2)
{
  id v3;
  void **v4;
  int v5;
  int v6;
  id (*v7)(uint64_t);
  void *v8;
  id v9[2];
  char v10;
  uint64_t v11;

  v11 = a1;
  v10 = a2;
  v9[1] = (id)a1;
  v3 = objc_msgSend(*(id *)(a1 + 32), "headerView");
  objc_msgSend(v3, "setTitle:", *(_QWORD *)(a1 + 40));

  v4 = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_1000B9C00;
  v8 = &unk_100280730;
  v9[0] = *(id *)(a1 + 32);
  +[UIView animateWithDuration:animations:](UIView, "animateWithDuration:animations:", &v4, 0.5);
  objc_storeStrong(v9, 0);
}

id sub_1000B9C00(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "headerView", a1, a1);
  objc_msgSend(v2, "setAlpha:", 1.0);

  return objc_msgSend(*(id *)(a1 + 32), "_updateImageViewPadding");
}

id sub_1000B9DB4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateHeaderForConnectedToComputer:animated:", *(_QWORD *)(a1 + 40) != 0, 1, a1, a1);
}

id sub_1000B9EC0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateHeaderForConnectedToComputer:animated:", 0, 1, a1, a1);
}

void sub_1000BA130(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1000BA270();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("ATConnection");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getATConnectionClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("RestoreFromComputerController.m"), 25, CFSTR("Unable to find class %s"), "ATConnection");

    __break(1u);
  }
  qword_1002EE940 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_1000BA270()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_1000BA39C((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *AirTrafficLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("RestoreFromComputerController.m"), 24, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_1000BA39C(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE948;
  v9 = qword_1002EE948;
  if (!qword_1002EE948)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000BA42C;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1000BA42C((uint64_t)&v2);
  }
  return qword_1002EE948;
}

uint64_t sub_1000BA42C(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/AirTraffic.framework/AirTraffic";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE948 = result;
  return result;
}

id sub_1000BA568()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE950;
  v13 = qword_1002EE950;
  if (!qword_1002EE950)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000BC888;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1000BC888(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_1000BA744(uint64_t a1, uint64_t a2)
{
  id v3;
  unsigned __int8 v4;
  id v5;
  unsigned __int8 v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  void *v11;
  NSObject *v12;
  dispatch_time_t v13;
  intptr_t v14;
  NSObject *v15;
  os_log_type_t v16;
  NSObject *v17;
  os_log_type_t v18;
  id v19;
  char v20;
  NSObject *v21;
  os_log_type_t v22;
  void **v23;
  int v24;
  int v25;
  uint64_t (*v26)(NSObject *, char);
  void *v27;
  id v28[2];
  void **v29;
  int v30;
  int v31;
  id *(*v32)(id *, uint64_t);
  void *v33;
  id v34;
  id v35[2];
  id v36;
  uint8_t v37[7];
  os_log_type_t v38;
  os_log_t v39;
  char v40;
  id v41;
  char v42;
  id v43;
  char v44;
  id v45;
  uint8_t v46[7];
  os_log_type_t v47;
  os_log_t v48;
  uint8_t buf[15];
  os_log_type_t v50;
  os_log_t oslog;
  uint64_t (*v52)();
  id v53;
  void **v54;
  int v55;
  int v56;
  intptr_t (*v57)(uint64_t, char);
  void *v58;
  id v59[2];
  id v60;
  id v61;
  uint64_t v62;
  uint64_t *v63;
  int v64;
  int v65;
  char v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t *v70;
  int v71;
  int v72;
  char ShouldBeShownInSetupAssistant;
  uint64_t v74;
  uint64_t v75;
  id location;
  dispatch_once_t *v77;

  v75 = a1;
  v74 = a1;
  v69 = 0;
  v70 = &v69;
  v71 = 0x20000000;
  v72 = 32;
  ShouldBeShownInSetupAssistant = 0;
  ShouldBeShownInSetupAssistant = BYAssistantScreenShouldBeShownInSetupAssistant(a1, a2);
  v3 = objc_msgSend(sub_1000BA568(), "sharedPreferences");
  v4 = objc_msgSend(v3, "isCurrentLocaleNativelySupported");

  v68 = v4 & 1;
  v5 = objc_msgSend(sub_1000BAE6C(), "sharedPreferences");
  v6 = objc_msgSend(v5, "voiceTriggerEnabled");

  v67 = v6 & 1;
  if ((v70[3] & 1) == 0 && (v67 & 1) == 0 && (v68 & 1) != 0)
  {
    v62 = 0;
    v63 = &v62;
    v64 = 0x20000000;
    v65 = 32;
    v66 = 0;
    v77 = (dispatch_once_t *)&unk_1002EE980;
    location = 0;
    objc_storeStrong(&location, &stru_100282238);
    if (*v77 != -1)
      dispatch_once(v77, location);
    objc_storeStrong(&location, 0);
    v61 = dispatch_semaphore_create(0);
    v7 = (id)qword_1002EE988;
    objc_sync_enter(v7);
    v54 = _NSConcreteStackBlock;
    v55 = -1073741824;
    v56 = 0;
    v57 = sub_1000BAFA8;
    v58 = &unk_100282260;
    v59[1] = &v62;
    v59[0] = v61;
    v60 = objc_retainBlock(&v54);
    v8 = (void *)qword_1002EE988;
    v9 = objc_retainBlock(v60);
    objc_msgSend(v8, "addObject:", v9);

    objc_storeStrong(&v60, 0);
    objc_storeStrong(v59, 0);
    objc_sync_exit(v7);

    v53 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Setup-%u"), getpid());
    v52 = sub_1000BAFE8;
    v10 = objc_msgSend(objc_retainAutorelease(v53), "cStringUsingEncoding:", 4);
    v11 = &_dispatch_main_q;
    BTSessionAttachWithQueue(v10, &v52, 0, v11);

    v12 = v61;
    v13 = dispatch_time(0, 5000000000);
    v14 = dispatch_semaphore_wait(v12, v13);
    if (v14)
    {
      oslog = (os_log_t)(id)_BYLoggingFacility(v14);
      v50 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
      {
        v15 = oslog;
        v16 = v50;
        sub_100038C3C(buf);
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Timed out waiting for bluetooth check", buf, 2u);
      }
      objc_storeStrong((id *)&oslog, 0);
    }
    if ((v63[3] & 1) != 0)
    {
      v48 = (os_log_t)(id)_BYLoggingFacility(v14);
      v47 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        v17 = v48;
        v18 = v47;
        sub_100038C3C(v46);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Bluetooth device exists that supports Hey Siri, but Hey Siri is not enabled", v46, 2u);
      }
      objc_storeStrong((id *)&v48, 0);
      *((_BYTE *)v70 + 24) = 1;
    }
    objc_storeStrong(&v53, 0);
    objc_storeStrong(&v61, 0);
    _Block_object_dispose(&v62, 8);
  }
  v44 = 0;
  v42 = 0;
  v40 = 0;
  v19 = +[BYSiriUtilities isIntelligenceVoiceSelectionCompleted](BYSiriUtilities, "isIntelligenceVoiceSelectionCompleted");
  v20 = 0;
  if ((v19 & 1) == 0)
  {
    v19 = +[BYSiriUtilities currentVoiceIsDefaultVoice](BYSiriUtilities, "currentVoiceIsDefaultVoice");
    v20 = 0;
    if ((v19 & 1) != 0)
    {
      v45 = objc_msgSend(*(id *)(a1 + 32), "buddyPreferences");
      v44 = 1;
      v19 = objc_msgSend(v45, "BOOLForKey:", CFSTR("IntelligencePresented"));
      v20 = 0;
      if ((v19 & 1) != 0)
      {
        v43 = objc_msgSend(*(id *)(a1 + 32), "buddyPreferences");
        v42 = 1;
        v41 = objc_msgSend(v43, "objectForKey:includeCache:", CFSTR("IntelligencePresented"), 0);
        v40 = 1;
        v19 = objc_msgSend(v41, "BOOLValue");
        v20 = v19 ^ 1;
      }
    }
  }
  if ((v40 & 1) != 0)

  if ((v42 & 1) != 0)
  if ((v44 & 1) != 0)

  if ((v20 & 1) != 0)
  {
    v39 = (os_log_t)(id)_BYLoggingFacility(v19);
    v38 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      v21 = v39;
      v22 = v38;
      sub_100038C3C(v37);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Will show Siri for intelligence voice selection", v37, 2u);
    }
    objc_storeStrong((id *)&v39, 0);
    *((_BYTE *)v70 + 24) = 1;
  }
  v29 = _NSConcreteStackBlock;
  v30 = -1073741824;
  v31 = 0;
  v32 = sub_1000BB2DC;
  v33 = &unk_100282290;
  v35[1] = &v69;
  v34 = *(id *)(a1 + 32);
  v35[0] = *(id *)(a1 + 40);
  v36 = objc_retainBlock(&v29);
  if ((v70[3] & 1) != 0)
  {
    (*((void (**)(void))v36 + 2))();
  }
  else
  {
    v23 = _NSConcreteStackBlock;
    v24 = -1073741824;
    v25 = 0;
    v26 = sub_1000BB350;
    v27 = &unk_1002822B8;
    v28[1] = &v69;
    v28[0] = v36;
    +[BYSiriUtilities requiresAcknowledgementForDataSharing:](BYSiriUtilities, "requiresAcknowledgementForDataSharing:", &v23);
    objc_storeStrong(v28, 0);
  }
  objc_storeStrong(&v36, 0);
  objc_storeStrong(v35, 0);
  objc_storeStrong(&v34, 0);
  _Block_object_dispose(&v69, 8);
}

id sub_1000BAE6C()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE960;
  v13 = qword_1002EE960;
  if (!qword_1002EE960)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000BCC14;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1000BCC14(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_1000BAF58(id a1)
{
  id v1;
  void *v2;

  v1 = objc_alloc_init((Class)NSMutableArray);
  v2 = (void *)qword_1002EE988;
  qword_1002EE988 = (uint64_t)v1;

}

intptr_t sub_1000BAFA8(uint64_t a1, char a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = a2 & 1;
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

uint64_t sub_1000BAFE8(uint64_t result, int a2, int a3, uint64_t a4)
{
  uint64_t Default;
  unint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  size_t v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  unint64_t j;
  _BYTE v14[16];
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t i;
  uint64_t v23;
  _BYTE *v24;
  int v25;
  unint64_t v26;
  char v27;
  _QWORD v28[2];
  int v29;
  int v30;
  uint64_t v31;
  _BYTE v32[128];

  v31 = result;
  v30 = a2;
  v29 = a3;
  v28[1] = a4;
  if (!a2 && !v29)
  {
    v28[0] = 0;
    v27 = 0;
    Default = BTLocalDeviceGetDefault(v31, v28);
    if (!(_DWORD)Default && v28[0])
    {
      v26 = 0;
      v25 = 256;
      v24 = v14;
      __chkstk_darwin(Default);
      v6 = &v14[-((v5 + 15) & 0xFFFFFFFF0)];
      v23 = v7;
      if (v5 <= 0x200)
        v8 = v5;
      else
        v8 = 512;
      bzero(&v14[-((v5 + 15) & 0xFFFFFFFF0)], v8);
      BTLocalDeviceGetPairedDevices(v28[0], v6, &v26, v25);
      for (i = 0; i < v26; ++i)
      {
        v21 = 0;
        v21 = *(_QWORD *)&v6[8 * i];
        v20 = 0;
        if (!BTDeviceSupportsHS(v21, &v20) && v20 == -1)
        {
          v27 = 1;
          break;
        }
      }
    }
    v9 = (id)qword_1002EE988;
    objc_sync_enter(v9);
    v18 = 0u;
    v17 = 0u;
    v16 = 0u;
    v15 = 0u;
    v10 = (id)qword_1002EE988;
    v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v32, 16);
    if (v11)
    {
      v12 = *(_QWORD *)v16;
      do
      {
        for (j = 0; j < (unint64_t)v11; ++j)
        {
          if (*(_QWORD *)v16 != v12)
            objc_enumerationMutation(v10);
          v19 = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 8 * j);
          (*(void (**)(void))(v19 + 16))();
        }
        v11 = objc_msgSend(v10, "countByEnumeratingWithState:objects:count:", &v15, v32, 16);
      }
      while (v11);
    }

    objc_msgSend((id)qword_1002EE988, "removeAllObjects");
    objc_sync_exit(v9);

    return BTSessionDetachWithQueue(&v31);
  }
  return result;
}

id *sub_1000BB2DC(id *result, uint64_t a2)
{
  id *v2;

  v2 = result;
  if ((*(_BYTE *)(*((_QWORD *)result[6] + 1) + 24) & 1) != 0)
    result = (id *)objc_msgSend(result[4], "setDidOfferVoiceTrigger:", BYAssistantScreenShouldRunForPHSUpgrade(result, a2) & 1, result, result);
  if (v2[5])
    return (id *)(*((uint64_t (**)(void))v2[5] + 2))();
  return result;
}

uint64_t sub_1000BB350(NSObject *a1, char a2)
{
  NSObject *v3;
  os_log_type_t v4;
  _WORD v6[7];
  os_log_type_t v7;
  os_log_t oslog[2];
  char v9;
  NSObject *v10;

  v10 = a1;
  v9 = a2;
  oslog[1] = a1;
  if ((a2 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v3 = oslog[0];
      v4 = v7;
      sub_100038C3C(v6);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Will show Siri for data sharing acknowledgement", (uint8_t *)v6, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  *(_BYTE *)(*((_QWORD *)a1[5].isa + 1) + 24) = v9 & 1;
  return (*((uint64_t (**)(void))a1[4].isa + 2))();
}

id sub_1000BB520()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE970;
  v13 = qword_1002EE970;
  if (!qword_1002EE970)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000BCFA0;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1000BCFA0(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_1000BC888(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1000BC9C8();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("AFPreferences");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getAFPreferencesClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("AssistantOptInController.m"), 45, CFSTR("Unable to find class %s"), "AFPreferences");

    __break(1u);
  }
  qword_1002EE950 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_1000BC9C8()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_1000BCAF4((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *AssistantServicesLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AssistantOptInController.m"), 44, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_1000BCAF4(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE958;
  v9 = qword_1002EE958;
  if (!qword_1002EE958)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000BCB84;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1000BCB84((uint64_t)&v2);
  }
  return qword_1002EE958;
}

uint64_t sub_1000BCB84(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE958 = result;
  return result;
}

void sub_1000BCC14(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1000BCD54();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("VTPreferences");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getVTPreferencesClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("AssistantOptInController.m"), 62, CFSTR("Unable to find class %s"), "VTPreferences");

    __break(1u);
  }
  qword_1002EE960 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_1000BCD54()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_1000BCE80((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *VoiceTriggerLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AssistantOptInController.m"), 61, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_1000BCE80(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE968;
  v9 = qword_1002EE968;
  if (!qword_1002EE968)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000BCF10;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1000BCF10((uint64_t)&v2);
  }
  return qword_1002EE968;
}

uint64_t sub_1000BCF10(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/VoiceTrigger.framework/VoiceTrigger";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE968 = result;
  return result;
}

void sub_1000BCFA0(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1000BD0E0();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("VTUIEnrollTrainingViewController");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getVTUIEnrollTrainingViewControllerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("AssistantOptInController.m"), 54, CFSTR("Unable to find class %s"), "VTUIEnrollTrainingViewController");

    __break(1u);
  }
  qword_1002EE970 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_1000BD0E0()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_1000BD20C((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *VoiceTriggerUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("AssistantOptInController.m"), 53, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_1000BD20C(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE978;
  v9 = qword_1002EE978;
  if (!qword_1002EE978)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000BD29C;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1000BD29C((uint64_t)&v2);
  }
  return qword_1002EE978;
}

uint64_t sub_1000BD29C(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/VoiceTriggerUI.framework/VoiceTriggerUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE978 = result;
  return result;
}

void sub_1000BD9E8(NSObject *a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  Class isa;
  id v8;
  id v9;
  os_log_t oslog[2];
  id v11;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v11 = 0;
  objc_storeStrong(&v11, a3);
  oslog[1] = a1;
  if (v11)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v6 = objc_msgSend(v11, "localizedDescription");
      sub_100038C28((uint64_t)buf, (uint64_t)v6);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Error fetching device properties: %@", buf, 0xCu);

    }
    objc_storeStrong((id *)oslog, 0);
  }
  if (a1[4].isa)
  {
    isa = a1[4].isa;
    v8 = objc_msgSend(location[0], "valuesByPropertyKey");
    v9 = objc_msgSend(v8, "objectForKeyedSubscript:", DMFDeviceSkippedSetupPanesKey);
    (*((void (**)(Class, id))isa + 2))(isa, v9);

  }
  objc_storeStrong(&v11, 0);
  objc_storeStrong(location, 0);
}

void sub_1000BEC20(uint64_t a1, uint64_t a2)
{
  void *v2;
  id *v3;

  v3 = (id *)(a2 + 40);
  v2 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);
  objc_storeStrong(v3, 0);
}

void sub_1000BEC50(uint64_t a1)
{
  objc_storeStrong((id *)(a1 + 40), 0);
}

void sub_1000BEC5C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;

  v2 = objc_msgSend(*(id *)(a1 + 32), "appleIDMap", a1, a1);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = objc_msgSend(*(id *)(a1 + 32), "activeAppleID");
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

}

void sub_1000BECD8(uint64_t a1)
{
  NSObject *v2;
  id v3;
  dispatch_time_t v4;
  NSObject *v5;
  void **v6;
  int v7;
  int v8;
  void (*v9)(uint64_t);
  void *v10;
  id v11[5];
  uint64_t v12;
  uint64_t *v13;
  int v14;
  int v15;
  void (*v16)(uint64_t, uint64_t);
  void (*v17)(uint64_t);
  id v18;
  void **block;
  int v20;
  int v21;
  void (*v22)(id *);
  void *v23;
  id v24[2];
  id location;
  _QWORD v26[2];
  int v27;
  int v28;
  void (*v29)(uint64_t, uint64_t);
  void (*v30)(uint64_t);
  id v31[3];

  v31[2] = (id)a1;
  v31[1] = (id)a1;
  v26[0] = 0;
  v26[1] = v26;
  v27 = 838860800;
  v28 = 48;
  v29 = sub_1000BEC20;
  v30 = sub_1000BEC50;
  v31[0] = 0;
  block = _NSConcreteStackBlock;
  v20 = -1073741824;
  v21 = 0;
  v22 = sub_1000BEF7C;
  v23 = &unk_100282378;
  v24[0] = *(id *)(a1 + 32);
  v24[1] = v26;
  location = dispatch_block_create(DISPATCH_BLOCK_ASSIGN_CURRENT, &block);
  v2 = dispatch_get_global_queue(25, 0);
  dispatch_async(v2, location);

  v3 = location;
  v4 = dispatch_time(0, 30000000000);
  dispatch_block_wait(v3, v4);
  v12 = 0;
  v13 = &v12;
  v14 = 838860800;
  v15 = 48;
  v16 = sub_1000BEC20;
  v17 = sub_1000BEC50;
  v18 = 0;
  v5 = objc_msgSend(*(id *)(a1 + 32), "accountsQueue");
  v6 = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_1000BF234;
  v10 = &unk_1002823A0;
  v11[1] = *(id *)(a1 + 48);
  v11[0] = *(id *)(a1 + 32);
  v11[2] = *(id *)(a1 + 56);
  v11[3] = &v12;
  v11[4] = v26;
  dispatch_sync(v5, &v6);

  if (*(_QWORD *)(a1 + 40))
    (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v13[5]);
  objc_storeStrong(v11, 0);
  _Block_object_dispose(&v12, 8);
  objc_storeStrong(&v18, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(v24, 0);
  _Block_object_dispose(v26, 8);
  objc_storeStrong(v31, 0);
}

void sub_1000BEF7C(id *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  id v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  void **block;
  int v10;
  int v11;
  void (*v12)(uint64_t);
  void *v13;
  id v14;
  id v15;
  id v16;
  id v17[2];
  id v18;
  id obj;
  id v20;
  id v21;
  id v22;
  id v23;
  uint8_t buf[7];
  os_log_type_t v25;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = (id)_BYLoggingFacility(a1);
  v25 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)location[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = location[0];
    v3 = v25;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Fetching Apple ID's from backup...", buf, 2u);
  }
  objc_storeStrong(location, 0);
  v23 = 0;
  v22 = 0;
  v21 = 0;
  v20 = objc_alloc_init((Class)MBManager);
  v4 = objc_msgSend(a1[4], "backupUDID");
  v5 = objc_msgSend(a1[4], "snapshotID");
  obj = 0;
  v18 = 0;
  v6 = objc_msgSend(v20, "getAppleIDsMapForBackupUDID:snapshotID:activeAppleID:error:", v4, v5, &obj, &v18);
  objc_storeStrong(&v23, obj);
  objc_storeStrong(&v21, v18);
  v7 = v22;
  v22 = v6;

  v8 = objc_msgSend(a1[4], "accountsQueue");
  block = _NSConcreteStackBlock;
  v10 = -1073741824;
  v11 = 0;
  v12 = sub_1000BF1DC;
  v13 = &unk_100282350;
  v14 = a1[4];
  v15 = v22;
  v16 = v23;
  v17[1] = a1[5];
  v17[0] = v21;
  dispatch_sync(v8, &block);

  objc_storeStrong(v17, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v20, 0);
  objc_storeStrong(&v21, 0);
  objc_storeStrong(&v22, 0);
  objc_storeStrong(&v23, 0);
}

void sub_1000BF1DC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "setAppleIDMap:", *(_QWORD *)(a1 + 40), a1, a1);
  objc_msgSend(*(id *)(a1 + 32), "setActiveAppleID:", *(_QWORD *)(a1 + 48));
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), *(id *)(a1 + 56));
}

void sub_1000BF234(uint64_t a1)
{
  id v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  void *v7;

  v2 = objc_msgSend(*(id *)(a1 + 32), "appleIDMap", a1, a1);
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

  v5 = objc_msgSend(*(id *)(a1 + 32), "activeAppleID");
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v7 = *(void **)(v6 + 40);
  *(_QWORD *)(v6 + 40) = v5;

  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40));
}

void sub_1000C29D0(id a1)
{
  BuddyNavigationPit *v1;
  void *v2;

  v1 = objc_alloc_init(BuddyNavigationPit);
  v2 = (void *)qword_1002EE998;
  qword_1002EE998 = (uint64_t)v1;

}

double sub_1000C3528(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 138412546;
  *(_DWORD *)a1 = 138412546;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2114;
  *(_QWORD *)(a1 + 14) = a3;
  return result;
}

void sub_1000C3E30(uint64_t a1)
{
  id v2;
  BOOL v3;
  id v4;
  id location;
  os_log_type_t v6;
  os_log_t oslog;
  char v8;
  id v9;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint8_t buf[24];

  v13 = a1;
  v12 = a1;
  v2 = objc_msgSend(*(id *)(a1 + 32), "skippedByCloudConfiguration");
  v10 = 0;
  v8 = 0;
  v3 = 0;
  if ((v2 & 1) == 0)
  {
    v11 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
    v10 = 1;
    v2 = objc_msgSend(v11, "topViewController");
    v9 = v2;
    v8 = 1;
    v3 = v2 == *(id *)(a1 + 32);
  }
  if ((v8 & 1) != 0)

  if ((v10 & 1) != 0)
  if (v3)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v2);
    v6 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      location = (id)objc_opt_class(*(_QWORD *)(a1 + 32));
      sub_100038C28((uint64_t)buf, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "Advancing from %@ due to cloud configuration...", buf, 0xCu);
      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)&oslog, 0);
    objc_msgSend(*(id *)(a1 + 32), "setSkippedByCloudConfiguration:", 1);
    v4 = objc_msgSend(*(id *)(a1 + 32), "delegate");
    objc_msgSend(v4, "flowItemDone:", *(_QWORD *)(a1 + 32));

  }
}

void sub_1000C41EC(uint64_t a1)
{
  uint64_t v2;
  id v3;
  unsigned __int8 v4;
  unsigned int v5;
  char v6;
  id v7;

  if (*(_QWORD *)(a1 + 40))
  {
    v2 = *(_QWORD *)(a1 + 40);
    v3 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
    v4 = objc_msgSend(v3, "shouldEnableProximity");
    v6 = 0;
    LOBYTE(v5) = 0;
    if ((v4 & 1) != 0)
    {
      v7 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
      v6 = 1;
      v5 = objc_msgSend(v7, "hasAppliedSettings") ^ 1;
    }
    (*(void (**)(uint64_t, _QWORD))(v2 + 16))(v2, v5 & 1);
    if ((v6 & 1) != 0)

  }
}

void sub_1000C4AE0(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (a1[4])
    (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

void sub_1000C4DD4(id *a1, void *a2)
{
  void *v3;
  void **block;
  int v5;
  int v6;
  void (*v7);
  void *v8;
  id v9;
  id v10[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = a1;
  v3 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_1000C4EC4;
  v8 = &unk_100280D00;
  v9 = location[0];
  v10[0] = a1[4];
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1000C4EC4(NSObject *a1)
{
  NSString *isa;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  id v6;
  id v7;
  id v8;
  id v9;
  uint8_t v10[7];
  os_log_type_t v11;
  os_log_t v12;
  char v13;
  id v14;
  char v15;
  id v16;
  os_log_type_t v17;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = a1;
  oslog[1] = a1;
  if (a1[4].isa)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    v17 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v15 = 0;
      v13 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        isa = (NSString *)a1[4].isa;
      }
      else if (a1[4].isa)
      {
        v16 = -[objc_class domain](a1[4].isa, "domain");
        v15 = 1;
        isa = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v16, -[objc_class code](a1[4].isa, "code"));
        v14 = isa;
        v13 = 1;
      }
      else
      {
        isa = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)isa);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v17, "Configure MDM failed with error: %{public}@", buf, 0xCu);
      if ((v13 & 1) != 0)

      if ((v15 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
    v3 = -[objc_class mdmReturnToServiceController](a1[5].isa, "mdmReturnToServiceController");
    objc_msgSend(v3, "returnToServiceFlowCompleted");

    -[objc_class _presentTryAgainAlert](a1[5].isa, "_presentTryAgainAlert");
  }
  else
  {
    v12 = (os_log_t)(id)_BYLoggingFacility(a1);
    v11 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v4 = v12;
      v5 = v11;
      sub_100038C3C(v10);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Configure MDM succeed!", v10, 2u);
    }
    objc_storeStrong((id *)&v12, 0);
    v6 = +[BuddyCloudConfigManager sharedManager](BuddyCloudConfigManager, "sharedManager");
    v7 = -[objc_class managedConfiguration](a1[5].isa, "managedConfiguration");
    v8 = objc_msgSend(v7, "cloudConfigurationDetails");
    objc_msgSend(v6, "setCloudConfigurationDetails:", v8);

    v9 = -[objc_class delegate](a1[5].isa, "delegate");
    objc_msgSend(v9, "flowItemDone:", a1[5].isa);

  }
}

void sub_1000C5198(id *a1, void *a2, void *a3)
{
  void *v5;
  void **block;
  int v7;
  int v8;
  void (*v9)(uint64_t);
  void *v10;
  id v11;
  id v12;
  id v13[2];
  id v14;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = a1;
  v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_1000C52D0;
  v10 = &unk_100281000;
  v11 = location[0];
  v12 = v14;
  v13[0] = a1[4];
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_1000C52D0(uint64_t a1)
{
  NSString *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  id v7;
  id v8;
  os_log_t v9;
  uint8_t v10[7];
  os_log_type_t v11;
  os_log_t v12;
  os_log_type_t v13;
  os_log_t v14;
  char v15;
  id v16;
  char v17;
  id v18;
  os_log_type_t v19;
  os_log_t oslog[3];
  uint8_t v21[16];
  uint8_t v22[16];
  uint8_t buf[24];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  if (*(_QWORD *)(a1 + 32))
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    v19 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v17 = 0;
      v15 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v2 = *(NSString **)(a1 + 32);
      }
      else if (*(_QWORD *)(a1 + 32))
      {
        v18 = objc_msgSend(*(id *)(a1 + 32), "domain");
        v17 = 1;
        v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v18, objc_msgSend(*(id *)(a1 + 32), "code"));
        v16 = v2;
        v15 = 1;
      }
      else
      {
        v2 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v2);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v19, "Could not retrieve cloud configuration: %{public}@", buf, 0xCu);
      if ((v15 & 1) != 0)

      if ((v17 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
    v14 = (os_log_t)(id)_BYLoggingFacility(v3);
    v13 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      sub_100038C28((uint64_t)v22, *(_QWORD *)(a1 + 40));
      _os_log_impl((void *)&_mh_execute_header, v14, v13, "Detail: %@", v22, 0xCu);
    }
    objc_storeStrong((id *)&v14, 0);
    objc_msgSend(*(id *)(a1 + 48), "_presentTryAgainAlert");
  }
  else
  {
    v12 = (os_log_t)(id)_BYLoggingFacility(a1);
    v11 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v4 = v12;
      v5 = v11;
      sub_100038C3C(v10);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Successfully fetched cloud configuration!", v10, 2u);
    }
    objc_storeStrong((id *)&v12, 0);
    v9 = (os_log_t)(id)_BYLoggingFacility(v6);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEBUG))
    {
      sub_100038C28((uint64_t)v21, *(_QWORD *)(a1 + 40));
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "Details: %@", v21, 0xCu);
    }
    objc_storeStrong((id *)&v9, 0);
    v7 = +[BuddyCloudConfigManager sharedManager](BuddyCloudConfigManager, "sharedManager");
    objc_msgSend(v7, "setCloudConfigurationDetails:", *(_QWORD *)(a1 + 40));

    v8 = objc_msgSend(*(id *)(a1 + 48), "delegate");
    objc_msgSend(v8, "flowItemDone:", *(_QWORD *)(a1 + 48));

  }
}

void sub_1000C598C(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "_fetchCloudConfig");
  objc_storeStrong(location, 0);
}

void sub_1000C59D8(id *a1, void *a2)
{
  id v3;
  id v4;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(a1[4], "navigationController");
  v4 = objc_msgSend(v3, "popViewControllerAnimated:", 1);

  objc_storeStrong(location, 0);
}

id sub_1000C5F4C(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  UIColor *v11;
  id v12;
  id v13;
  double v14;
  double v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  UIColor *v23;
  id v24;
  id v26;
  id v27;
  id v28[2];
  id v29;
  id v30;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v30 = 0;
  objc_storeStrong(&v30, a3);
  v29 = 0;
  objc_storeStrong(&v29, a4);
  v28[1] = a1;
  v28[0] = v30;
  v27 = objc_msgSend(location[0], "dequeueReusableCellWithIdentifier:", v29);
  if (!v27)
  {
    v7 = objc_alloc((Class)UITableViewCell);
    v27 = objc_msgSend(v7, "initWithStyle:reuseIdentifier:", 0, v29);

  }
  v8 = +[BFFStyle sharedStyle](BFFStyle, "sharedStyle");
  objc_msgSend(v8, "applyThemeToTableCell:", v27);

  v9 = objc_msgSend(v27, "textLabel");
  objc_msgSend(v9, "setLineBreakMode:", 0);

  v10 = objc_msgSend(v27, "textLabel");
  objc_msgSend(v10, "setNumberOfLines:", 0);

  v11 = +[UIColor systemBlueColor](UIColor, "systemBlueColor");
  v12 = objc_msgSend(v27, "imageView");
  objc_msgSend(v12, "setTintColor:", v11);

  v26 = 0;
  if ((objc_msgSend(a1[4], "_useCompactMode") & 1) != 0)
  {
    v13 = objc_msgSend(v28[0], "icon");
    v14 = sub_1000C6254();
    v16 = objc_msgSend(v13, "imageByPreparingThumbnailOfSize:", v14, v15, *(_QWORD *)&v14, *(_QWORD *)&v15);
    v17 = v26;
    v26 = v16;

  }
  else
  {
    v18 = objc_msgSend(v28[0], "icon");
    v19 = v26;
    v26 = v18;

  }
  v20 = objc_msgSend(v27, "imageView");
  objc_msgSend(v20, "setImage:", v26);

  v21 = objc_msgSend(v27, "textLabel");
  v22 = objc_msgSend(v30, "title");
  objc_msgSend(v21, "setText:", v22);

  v23 = +[UIColor secondarySystemBackgroundColor](UIColor, "secondarySystemBackgroundColor");
  objc_msgSend(v27, "setBackgroundColor:", v23);

  v24 = v27;
  objc_storeStrong(&v26, 0);
  objc_storeStrong(&v27, 0);
  objc_storeStrong(v28, 0);
  objc_storeStrong(&v29, 0);
  objc_storeStrong(&v30, 0);
  objc_storeStrong(location, 0);
  return v24;
}

double sub_1000C6254()
{
  return 35.0;
}

double sub_1000C6290()
{
  return 1.0;
}

void sub_1000C76AC(id *a1)
{
  id v1;
  char v2;
  id v3;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  v1 = objc_msgSend(location[0], "delegate");
  v2 = objc_opt_respondsToSelector(v1, "presentWiFiPaneForFlowItem:");

  if ((v2 & 1) != 0)
  {
    v3 = objc_msgSend(location[0], "delegate");
    objc_msgSend(v3, "presentWiFiPaneForFlowItem:", location[0]);

  }
  objc_storeStrong(location, 0);
}

uint64_t sub_1000C774C(id *a1)
{
  id v1;
  char v2;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  v1 = objc_msgSend(location[0], "networkProvider");
  v2 = objc_msgSend(v1, "currentNetworkSupportsRestore") ^ 1;

  objc_storeStrong(location, 0);
  return v2 & 1;
}

BOOL sub_1000C77B8(id *a1)
{
  id location;
  id v3[3];
  BOOL v4;

  v3[2] = a1;
  v3[1] = a1;
  v3[0] = objc_msgSend(a1[4], "productVersion");
  location = +[SASSystemInformation productVersion](SASSystemInformation, "productVersion");
  if (v3[0])
    v4 = +[SASSystemInformation compareProductVersion:toProductVersion:](SASSystemInformation, "compareProductVersion:toProductVersion:", v3[0], location) == (id)1;
  else
    v4 = 0;
  objc_storeStrong(&location, 0);
  objc_storeStrong(v3, 0);
  return v4;
}

void sub_1000C8388(NSObject *a1, char a2, id obj)
{
  uint64_t v4;
  NSString *v5;
  void *v6;
  void **block;
  int v8;
  int v9;
  void (*v10)(uint64_t);
  void *v11;
  objc_class *v12;
  char v13;
  char v14;
  id v15;
  char v16;
  id v17;
  os_log_type_t v18;
  os_log_t oslog[2];
  id location;
  char v21;
  NSObject *v22;
  uint8_t buf[24];

  v22 = a1;
  v21 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if (location)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v18 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v16 = 0;
      v14 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v5 = (NSString *)location;
      }
      else if (location)
      {
        v17 = objc_msgSend(location, "domain");
        v16 = 1;
        v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v17, objc_msgSend(location, "code"));
        v15 = v5;
        v14 = 1;
      }
      else
      {
        v5 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v18, "Primary account removal failed: %{public}@", buf, 0xCu);
      if ((v14 & 1) != 0)

      if ((v16 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  v6 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v8 = -1073741824;
  v9 = 0;
  v10 = sub_1000C85E0;
  v11 = &unk_100280B18;
  v12 = a1[4].isa;
  v13 = v21 & 1;
  dispatch_async((dispatch_queue_t)v6, &block);

  objc_storeStrong((id *)&v12, 0);
  objc_storeStrong(&location, 0);
}

void sub_1000C85E0(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;

  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:](BFFViewControllerSpinnerManager, "stopAnimatingSpinnerFor:", CFSTR("com.apple.buddy.migrateFromiOSChoice.spinner"), a1, a1);
  v2 = objc_msgSend(*(id *)(a1 + 32), "view");
  v3 = objc_msgSend(v2, "window");
  objc_msgSend(v3, "setUserInteractionEnabled:", 1);

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
    objc_msgSend(v4, "setIntentToMigrate:", 1);

    v5 = objc_msgSend(*(id *)(a1 + 32), "delegate");
    v6 = objc_msgSend(v5, "popToBuddyControllerWithClass:animated:", objc_opt_class(BuddyProximitySetupController), 1);

  }
}

void sub_1000C9AF0(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v13 = 0;
  objc_storeStrong(&v13, a3);
  v12 = 0;
  objc_storeStrong(&v12, a4);
  v11 = 0;
  objc_storeStrong(&v11, a5);
  objc_msgSend(*(id *)(a1 + 32), "setProfileInstallationRequestCompleteHandler:", v11, a1);
  objc_msgSend(*(id *)(a1 + 32), "setProfileIdentifier:", v13);
  objc_msgSend(*(id *)(a1 + 32), "setBaseViewController:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setNavController:", 0);
  objc_msgSend(*(id *)(a1 + 32), "setSignInTask:", 0);
  v9 = +[MCProfileConnection sharedConnection](MCProfileConnection, "sharedConnection");
  objc_msgSend(v9, "updateCloudConfigurationWithRMAccountIdentifier:", v12);

  v10 = +[BuddyCloudConfigManager sharedManager](BuddyCloudConfigManager, "sharedManager");
  objc_msgSend(v10, "cloudConfigMayHaveChanged");

  if (*(_QWORD *)(a1 + 40))
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(location, 0);
}

void sub_1000C9C50(NSObject *a1, char a2, char a3, id obj)
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  _WORD v8[3];
  os_log_type_t v9;
  os_log_t v10;
  int v11;
  os_log_type_t v12;
  os_log_t oslog[2];
  id location;
  char v15;
  char v16;
  NSObject *v17;
  uint8_t buf[24];

  v17 = a1;
  v16 = a2;
  v15 = a3;
  location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if (location)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    v12 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_100039500((uint64_t)buf, (uint64_t)location);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v12, "Enrollment flow failed with error: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
    -[objc_class _cacheAuthenticationResults:](a1[4].isa, "_cacheAuthenticationResults:", 0);
    if (a1[5].isa)
      (*((void (**)(void))a1[5].isa + 2))();
    v11 = 1;
  }
  else
  {
    v10 = (os_log_t)(id)_BYLoggingFacility(v5);
    v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v6 = v10;
      v7 = v9;
      sub_100038C3C(v8);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Enrollment flow succeed!", (uint8_t *)v8, 2u);
    }
    objc_storeStrong((id *)&v10, 0);
    v11 = 0;
  }
  objc_storeStrong(&location, 0);
}

void sub_1000CA05C(NSObject *a1, uint64_t a2, id obj, void *a4)
{
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _WORD v9[7];
  char v10;
  os_log_t oslog[2];
  id v12;
  id location;
  uint64_t v14;
  NSObject *v15;

  v15 = a1;
  v14 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v12 = 0;
  objc_storeStrong(&v12, a4);
  oslog[1] = a1;
  if (v12)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v6);
    v10 = 16;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v7 = oslog[0];
      v8 = v10;
      sub_100038C3C(v9);
      _os_log_error_impl((void *)&_mh_execute_header, v7, v8, "Failed to discover enrollment channel", (uint8_t *)v9, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  if (v14 == 1)
  {
    -[objc_class setMdmEnrollmentChannel:](a1[4].isa, "setMdmEnrollmentChannel:", 2);
  }
  else if (v14 == 3)
  {
    -[objc_class setMdmEnrollmentChannel:](a1[4].isa, "setMdmEnrollmentChannel:", 1);
  }
  else
  {
    -[objc_class setMdmEnrollmentChannel:](a1[4].isa, "setMdmEnrollmentChannel:", 0);
  }
  (*((void (**)(void))a1[5].isa + 2))();
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&location, 0);
}

void sub_1000CA750(NSObject *a1, void *a2, void *a3)
{
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _WORD v10[7];
  os_log_type_t v11;
  os_log_t v12;
  int v13;
  uint8_t buf[7];
  char v15;
  os_log_t oslog[2];
  id v17;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v17 = 0;
  objc_storeStrong(&v17, a3);
  oslog[1] = a1;
  v5 = objc_msgSend(location[0], "length");
  if (v5 && !v17)
  {
    v12 = (os_log_t)(id)_BYLoggingFacility(v5);
    v11 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      v8 = v12;
      v9 = v11;
      sub_100038C3C(v10);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Current bearer token is still valid!", (uint8_t *)v10, 2u);
    }
    objc_storeStrong((id *)&v12, 0);
    (*((void (**)(void))a1[4].isa + 2))();
    v13 = 0;
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    v15 = 16;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v6 = oslog[0];
      v7 = v15;
      sub_100038C3C(buf);
      _os_log_error_impl((void *)&_mh_execute_header, v6, v7, "Failed to communicate with the MDM server with existing bearer token", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    (*((void (**)(void))a1[4].isa + 2))();
    v13 = 1;
  }
  objc_storeStrong(&v17, 0);
  objc_storeStrong(location, 0);
}

void sub_1000CABC0(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint64_t v8;
  id v9;
  os_log_t v10;
  int v11;
  uint8_t buf[7];
  os_log_type_t v13;
  os_log_t oslog[2];
  id v15;
  id location[2];
  uint8_t v17[24];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v15 = 0;
  objc_storeStrong(&v15, a3);
  oslog[1] = (os_log_t)a1;
  if (v15)
  {
    v10 = (os_log_t)(id)_BYLoggingFacility(v5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      sub_100039500((uint64_t)v17, (uint64_t)v15);
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Silent auth failed! We have to do UI Auth. Error: %{public}@", v17, 0xCu);
    }
    objc_storeStrong((id *)&v10, 0);
    objc_msgSend(*(id *)(a1 + 32), "_requestInteractiveMAIDAuthenticationWithManagedAppleID:personaID:ephemeral:completionHandler:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_BYTE *)(a1 + 64) & 1, *(_QWORD *)(a1 + 56));
    v11 = 0;
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    v13 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v6 = oslog[0];
      v7 = v13;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Silent auth succeed! No need to do UI auth", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    v8 = *(_QWORD *)(a1 + 56);
    v9 = objc_msgSend(location[0], "mutableCopy");
    (*(void (**)(uint64_t, id, _QWORD, id))(v8 + 16))(v8, v9, 0, v15);

    v11 = 1;
  }
  objc_storeStrong(&v15, 0);
  objc_storeStrong(location, 0);
}

void sub_1000CAEF8(id *a1)
{
  id v2;
  id v3;
  id v4;
  void **v5;
  int v6;
  int v7;
  void (*v8)(NSObject *, void *, void *);
  void *v9;
  id v10;
  id v11;
  id v12;
  id location;
  id v14[3];

  v14[2] = a1;
  v14[1] = a1;
  v2 = objc_msgSend(a1[4], "navController");
  v3 = objc_msgSend(a1[4], "passcodeCacheManager");
  v14[0] = +[BuddyAppleIDSignInController federatedAuthSignInControllerInNavigationController:mode:passcodeCacheManager:](BuddyAppleIDSignInController, "federatedAuthSignInControllerInNavigationController:mode:passcodeCacheManager:", v2, 8, v3);

  if (objc_msgSend(a1[5], "length"))
  {
    objc_msgSend(v14[0], "setUsername:", a1[5]);
    objc_msgSend(v14[0], "setIsUsernameEditable:", 0);
  }
  objc_initWeak(&location, v14[0]);
  v5 = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_1000CB0D4;
  v9 = &unk_1002825B0;
  v10 = a1[4];
  objc_copyWeak(&v12, &location);
  v11 = a1[6];
  objc_msgSend(v14[0], "setHandler:", &v5);
  v4 = objc_msgSend(a1[4], "navController");
  objc_msgSend(v4, "pushViewController:animated:", v14[0], 1);

  objc_storeStrong(&v11, 0);
  objc_destroyWeak(&v12);
  objc_storeStrong(&v10, 0);
  objc_destroyWeak(&location);
  objc_storeStrong(v14, 0);
}

void sub_1000CB0A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  id *v12;
  uint64_t v13;

  objc_destroyWeak(v12);
  objc_destroyWeak((id *)(v13 - 64));
  _Unwind_Resume(a1);
}

void sub_1000CB0D4(NSObject *a1, void *a2, void *a3)
{
  BuddyAppleIDSignInTask *v5;
  id v6;
  id v7;
  BuddyAppleIDSignInTask *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  uint64_t v13;
  id v14;
  id v15;
  id v16;
  id v17;
  void *v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  id v22;
  id v23;
  id v24;
  void **v25;
  int v26;
  int v27;
  void (*v28)(uint64_t, void *, void *);
  void *v29;
  objc_class *v30;
  objc_class *v31;
  id v32;
  uint8_t v33[3];
  os_log_type_t v34;
  os_log_t v35;
  void **block;
  int v37;
  int v38;
  void (*v39)(uint64_t);
  void *v40;
  id v41;
  os_log_type_t v42;
  os_log_t oslog[2];
  id v44;
  id location[2];
  uint8_t buf[40];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v44 = 0;
  objc_storeStrong(&v44, a3);
  oslog[1] = a1;
  v5 = [BuddyAppleIDSignInTask alloc];
  v6 = -[objc_class featureFlags](a1[4].isa, "featureFlags");
  v7 = +[BuddyAccountTools sharedBuddyAccountTools](BuddyAccountTools, "sharedBuddyAccountTools");
  v8 = -[BuddyAppleIDSignInTask initWithFeatureFlags:accountTools:](v5, "initWithFeatureFlags:accountTools:", v6, v7);
  -[objc_class setSignInTask:](a1[4].isa, "setSignInTask:", v8);

  LOBYTE(v8) = +[DMCFeatureOverrides allowAnyMAIDToSignIn](DMCFeatureOverrides, "allowAnyMAIDToSignIn") ^ 1;
  v9 = -[objc_class signInTask](a1[4].isa, "signInTask");
  objc_msgSend(v9, "setRequireAppleMAID:", v8 & 1);

  v10 = -[objc_class navController](a1[4].isa, "navController");
  v11 = -[objc_class signInTask](a1[4].isa, "signInTask");
  objc_msgSend(v11, "setNavigationController:", v10);

  v12 = -[objc_class featureFlags](a1[4].isa, "featureFlags");
  LOBYTE(v11) = objc_msgSend(v12, "isUseCDPContextSecretInsteadOfSBDSecretEnabled");

  if ((v11 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v13);
    v42 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v14 = -[objc_class passcodeCacheManager](a1[4].isa, "passcodeCacheManager");
      v15 = -[objc_class signInTask](a1[4].isa, "signInTask");
      sub_1000CB654((uint64_t)buf, (uint64_t)"-[BuddyEnrollmentCoordinator _requestInteractiveMAIDAuthenticationWithManagedAppleID:personaID:ephemeral:completionHandler:]_block_invoke_2", (uint64_t)v14, (uint64_t)v15);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v42, "%s: Setting cache manager %@ on sign in task %@", buf, 0x20u);

    }
    objc_storeStrong((id *)oslog, 0);
    v16 = -[objc_class passcodeCacheManager](a1[4].isa, "passcodeCacheManager");
    v17 = -[objc_class signInTask](a1[4].isa, "signInTask");
    objc_msgSend(v17, "setCacheManager:", v16);

  }
  v18 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v37 = -1073741824;
  v38 = 0;
  v39 = sub_1000CB67C;
  v40 = &unk_1002806B8;
  objc_copyWeak(&v41, (id *)&a1[6].isa);
  dispatch_async((dispatch_queue_t)v18, &block);

  v35 = (os_log_t)(id)_BYLoggingFacility(v19);
  v34 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    v20 = v35;
    v21 = v34;
    sub_100038C3C(v33);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Beginning authentication...", v33, 2u);
  }
  objc_storeStrong((id *)&v35, 0);
  v22 = -[objc_class signInTask](a1[4].isa, "signInTask");
  v23 = location[0];
  v24 = v44;
  v25 = _NSConcreteStackBlock;
  v26 = -1073741824;
  v27 = 0;
  v28 = sub_1000CB6C4;
  v29 = &unk_100282588;
  objc_copyWeak(&v32, (id *)&a1[6].isa);
  v30 = a1[4].isa;
  v31 = a1[5].isa;
  objc_msgSend(v22, "authenticateWithUsername:password:completion:", v23, v24, &v25);

  objc_storeStrong((id *)&v31, 0);
  objc_storeStrong((id *)&v30, 0);
  objc_destroyWeak(&v32);
  objc_destroyWeak(&v41);
  objc_storeStrong(&v44, 0);
  objc_storeStrong(location, 0);
}

void sub_1000CB620(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, uint64_t a19)
{
  id *v19;
  id *v20;
  _Unwind_Exception *v21;

  objc_destroyWeak(v20);
  objc_destroyWeak(v19);
  _Unwind_Resume(v21);
}

double sub_1000CB654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)&result = 136315650;
  *(_DWORD *)a1 = 136315650;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2112;
  *(_QWORD *)(a1 + 24) = a4;
  return result;
}

void sub_1000CB67C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setEnabled:", 0, a1, a1);

}

void sub_1000CB6C4(uint64_t a1, void *a2, void *a3)
{
  void *v5;
  uint64_t v6;
  NSString *v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  id v11;
  uint8_t v12[7];
  os_log_type_t v13;
  os_log_t v14;
  int v15;
  char v16;
  NSString *v17;
  char v18;
  id v19;
  os_log_type_t v20;
  os_log_t oslog;
  void **block;
  int v23;
  int v24;
  void (*v25)(uint64_t);
  void *v26;
  id v27[2];
  id v28;
  id location[2];
  uint8_t buf[24];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v28 = 0;
  objc_storeStrong(&v28, a3);
  v27[1] = (id)a1;
  v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v23 = -1073741824;
  v24 = 0;
  v25 = sub_1000CBA74;
  v26 = &unk_1002806B8;
  objc_copyWeak(v27, (id *)(a1 + 48));
  dispatch_async((dispatch_queue_t)v5, &block);

  if (v28)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v6);
    v20 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      v18 = 0;
      v16 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v7 = (NSString *)v28;
      }
      else if (v28)
      {
        v19 = objc_msgSend(v28, "domain");
        v18 = 1;
        v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v19, objc_msgSend(v28, "code"));
        v17 = v7;
        v16 = 1;
      }
      else
      {
        v7 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v7);
      _os_log_error_impl((void *)&_mh_execute_header, oslog, v20, "Authentication failed: %{public}@", buf, 0xCu);
      if ((v16 & 1) != 0)

      if ((v18 & 1) != 0)
    }
    objc_storeStrong((id *)&oslog, 0);
    v15 = 1;
  }
  else
  {
    v14 = (os_log_t)(id)_BYLoggingFacility(objc_msgSend(*(id *)(a1 + 32), "_cacheAuthenticationResults:", location[0]));
    v13 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      v8 = v14;
      v9 = v13;
      sub_100038C3C(v12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Authentication succeeded!", v12, 2u);
    }
    objc_storeStrong((id *)&v14, 0);
    v10 = *(_QWORD *)(a1 + 40);
    v11 = objc_msgSend(location[0], "mutableCopy");
    (*(void (**)(uint64_t, id, _QWORD, id))(v10 + 16))(v10, v11, 0, v28);

    v15 = 0;
  }
  objc_destroyWeak(v27);
  if (!v15)
    v15 = 0;
  objc_storeStrong(&v28, 0);
  objc_storeStrong(location, 0);
}

void sub_1000CBA74(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "setEnabled:", 1, a1, a1);

}

void sub_1000CBC40(uint64_t a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  id v6;
  id v7;
  NSArray *v8;
  id v9;
  id v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  id v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  NSObject *v19;
  os_log_type_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint8_t v26[7];
  os_log_type_t v27;
  os_log_t v28;
  void **v29;
  int v30;
  int v31;
  void (*v32)(uint64_t, char, id);
  void *v33;
  id v34;
  id v35;
  uint8_t v36[7];
  os_log_type_t v37;
  os_log_t v38;
  uint8_t v39[15];
  os_log_type_t v40;
  os_log_t oslog;
  id v42;
  id v43;
  id v44;
  uint8_t buf[7];
  os_log_type_t v46;
  id location;
  id v48[3];
  _QWORD v49[2];

  v48[2] = (id)a1;
  v48[1] = (id)a1;
  v48[0] = -[BuddyAppleIDSpinnerPage initWithAccountMode:]([BuddyAppleIDSpinnerPage alloc], "initWithAccountMode:", 1);
  v2 = objc_msgSend(*(id *)(a1 + 32), "navController");
  objc_msgSend(v2, "pushViewController:animated:", v48[0], 1);

  location = (id)_BYLoggingFacility(v3);
  v46 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_DEFAULT))
  {
    v4 = location;
    v5 = v46;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Beginning sign-in...", buf, 2u);
  }
  objc_storeStrong(&location, 0);
  v6 = +[MDMCloudConfiguration sharedConfiguration](MDMCloudConfiguration, "sharedConfiguration");
  v7 = objc_msgSend(v6, "details");
  v44 = objc_msgSend(v7, "objectForKeyedSubscript:", kCCRemoteManagementAccountIdentifierKey);

  v49[0] = ACAccountTypeIdentifierAppleAccount;
  v49[1] = ACAccountTypeIdentifieriTunesStore;
  v8 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v49, 2);
  v43 = -[NSArray mutableCopy](v8, "mutableCopy");

  if (objc_msgSend(v44, "length"))
  {
    v42 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", AKAuthenticationAlternateDSIDKey);
    v9 = +[ACAccountStore defaultStore](ACAccountStore, "defaultStore");
    v10 = objc_msgSend(v9, "dmc_iCloudAccountForRemoteManagingAccountWithAltDSID:", v42);

    if (v10)
    {
      oslog = (os_log_t)(id)_BYLoggingFacility(v11);
      v40 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
      {
        v12 = oslog;
        v13 = v40;
        sub_100038C3C(v39);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "We have signed in AppleAccount already!", v39, 2u);
      }
      objc_storeStrong((id *)&oslog, 0);
      objc_msgSend(v43, "removeObject:", ACAccountTypeIdentifierAppleAccount);
    }
    v14 = +[ACAccountStore defaultStore](ACAccountStore, "defaultStore");
    v15 = objc_msgSend(v14, "dmc_iTunesAccountForRemoteManagingAccountWithAltDSID:", v42);

    if (v15)
    {
      v38 = (os_log_t)(id)_BYLoggingFacility(v16);
      v37 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        v17 = v38;
        v18 = v37;
        sub_100038C3C(v36);
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "We have signed in iTunesStore already!", v36, 2u);
      }
      objc_storeStrong((id *)&v38, 0);
      objc_msgSend(v43, "removeObject:", ACAccountTypeIdentifieriTunesStore);
    }
    objc_storeStrong(&v42, 0);
  }
  v29 = _NSConcreteStackBlock;
  v30 = -1073741824;
  v31 = 0;
  v32 = sub_1000CC194;
  v33 = &unk_100280690;
  v34 = *(id *)(a1 + 56);
  v35 = objc_retainBlock(&v29);
  if (objc_msgSend(v43, "count"))
  {
    v21 = (void *)objc_opt_new(DMCAccountUtilities);
    v22 = v43;
    v23 = *(_QWORD *)(a1 + 40);
    v24 = *(_QWORD *)(a1 + 48);
    v25 = objc_msgSend(*(id *)(a1 + 32), "navController");
    objc_msgSend(v21, "signInAccountsWithTypes:authenticationResult:personaID:canMakeAccountActive:baseViewController:completionHandler:", v22, v23, v24, 1, v25, v35);

  }
  else
  {
    v28 = (os_log_t)(id)_BYLoggingFacility(0);
    v27 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      v19 = v28;
      v20 = v27;
      sub_100038C3C(v26);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "No need to sign-in any accounts!", v26, 2u);
    }
    objc_storeStrong((id *)&v28, 0);
    (*((void (**)(id, uint64_t, _QWORD))v35 + 2))(v35, 1, 0);
  }
  objc_storeStrong(&v35, 0);
  objc_storeStrong(&v34, 0);
  objc_storeStrong(&v43, 0);
  objc_storeStrong(&v44, 0);
  objc_storeStrong(v48, 0);
}

void sub_1000CC194(uint64_t a1, char a2, id obj)
{
  void *v4;
  void **block;
  int v6;
  int v7;
  uint64_t (*v8)(uint64_t);
  void *v9;
  id v10;
  id v11;
  char v12;
  uint64_t v13;
  id location;
  char v15;
  uint64_t v16;

  v16 = a1;
  v15 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v13 = a1;
  v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_1000CC298;
  v9 = &unk_100280EB8;
  v12 = v15 & 1;
  v10 = location;
  v11 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

uint64_t sub_1000CC298(uint64_t a1)
{
  NSString *v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t v6[7];
  os_log_type_t v7;
  os_log_t v8;
  char v9;
  id v10;
  char v11;
  id v12;
  os_log_type_t v13;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v8 = (os_log_t)(id)_BYLoggingFacility(a1);
    v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v3 = v8;
      v4 = v7;
      sub_100038C3C(v6);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sign-in succeeded!", v6, 2u);
    }
    objc_storeStrong((id *)&v8, 0);
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    v13 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v11 = 0;
      v9 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v2 = *(NSString **)(a1 + 32);
      }
      else if (*(_QWORD *)(a1 + 32))
      {
        v12 = objc_msgSend(*(id *)(a1 + 32), "domain");
        v11 = 1;
        v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v12, objc_msgSend(*(id *)(a1 + 32), "code"));
        v10 = v2;
        v9 = 1;
      }
      else
      {
        v2 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v2);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v13, "Sign-in failed: %{public}@", buf, 0xCu);
      if ((v9 & 1) != 0)

      if ((v11 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1000CC5A8(uint64_t a1)
{
  id v2;
  id v3;
  id v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "navController", a1, a1);
  v3 = objc_msgSend(*(id *)(a1 + 32), "baseViewController");
  v4 = objc_msgSend(v2, "popToViewController:animated:", v3, 1);

}

void sub_1000CD4F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000CD538(id *a1, void *a2, id obj)
{
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v10[2];
  id location[3];

  location[2] = a1;
  location[1] = a2;
  location[0] = 0;
  objc_storeStrong(location, obj);
  v10[1] = a1;
  v10[0] = objc_loadWeakRetained(a1 + 4);
  if ((objc_msgSend(v10[0], "isShowingVisualPairing") & 1) != 0)
  {
    v4 = objc_msgSend(location[0], "heightAnchor");
    v5 = objc_msgSend(location[0], "widthAnchor");
    v6 = objc_msgSend(v4, "constraintEqualToAnchor:", v5);
    objc_msgSend(v10[0], "setHeightConstraint:", v6);

  }
  else
  {
    v7 = objc_msgSend(v10[0], "heightConstraint");
    objc_msgSend(v7, "setActive:", 0);

    objc_msgSend(v10[0], "setHeightConstraint:", 0);
  }
  v8 = objc_msgSend(v10[0], "heightConstraint");
  objc_storeStrong(v10, 0);
  objc_storeStrong(location, 0);
  return v8;
}

void sub_1000CDAD0(uint64_t a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend(*(id *)(a1 + 32), "visualPairingViewController", a1, a1);
  v2 = objc_msgSend(v1, "view");
  objc_msgSend(v2, "setAlpha:", 0.0);

}

id sub_1000CDB3C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id result;

  v2 = objc_msgSend(*(id *)(a1 + 32), "visualPairingViewController");
  objc_msgSend(v2, "stop");

  v3 = objc_msgSend(*(id *)(a1 + 32), "visualPairingViewController");
  v4 = objc_msgSend(v3, "view");
  objc_msgSend(v4, "removeFromSuperview");

  result = objc_msgSend(*(id *)(a1 + 32), "setVisualPairingViewController:", 0);
  if (*(_QWORD *)(a1 + 40))
    return (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  return result;
}

void sub_1000CFF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,int a32,_Unwind_Exception *exception_object)
{
  uint64_t v33;

  objc_destroyWeak((id *)(v33 - 176));
  _Unwind_Resume(a1);
}

void sub_1000CFFE0(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "_animationTickForPresentationValue:", 0);
  objc_storeStrong(location, 0);
}

void sub_1000D0024(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(location[0], "_animationTickForPresentationValue:", 1);
  objc_storeStrong(location, 0);
}

double sub_1000D09C0()
{
  return 0.0;
}

id sub_1000D09F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateForLocation:interactive:", 0, *(double *)(a1 + 40), *(double *)(a1 + 48), a1, a1);
}

void sub_1000D0A2C(uint64_t a1)
{
  id v2;
  id v3;
  void (**v4)(_QWORD);

  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "gestureRecognizer");
    objc_msgSend(v2, "setEnabled:", 0);

    v3 = objc_msgSend(*(id *)(a1 + 32), "backgroundViewControllerPresented");
    if (v3)
    {
      v4 = (void (**)(_QWORD))objc_msgSend(*(id *)(a1 + 32), "backgroundViewControllerPresented");
      v4[2](v4);

    }
  }
}

void sub_1000D1618(uint64_t a1)
{
  UIColor *v2;
  CGColor *v3;
  id v4;

  v2 = objc_retainAutorelease(+[UIColor systemGrayColor](UIColor, "systemGrayColor", a1, a1));
  v3 = -[UIColor CGColor](v2, "CGColor");
  v4 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 32), "layer");
  objc_msgSend(v4, "setBorderColor:", v3);

}

void sub_1000D22E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000D2300(uint64_t a1, void *a2)
{
  id WeakRetained;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (*(_QWORD *)(a1 + 32))
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_choiceConfirmed:", 1);

  objc_storeStrong(location, 0);
}

void sub_1000D24AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000D24CC(uint64_t a1, void *a2)
{
  id WeakRetained;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (*(_QWORD *)(a1 + 32))
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_choiceConfirmed:", 0);

  objc_storeStrong(location, 0);
}

void sub_1000D2F38(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "_tappedChoice:", *(_QWORD *)(a1 + 32), a1, a1);

}

id *sub_1000D3058(id *result, char a2)
{
  if ((a2 & 1) != 0)
    return (id *)objc_msgSend(result[4], "didSelectChoice:", result[5]);
  return result;
}

NSString *__cdecl sub_1000D3A18(id a1, NSString *a2)
{
  id location[2];
  __CFString *v4;

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (location[0])
    v4 = (__CFString *)location[0];
  else
    v4 = &stru_100284738;
  objc_storeStrong(location, 0);
  return (NSString *)v4;
}

void sub_1000D4440(id a1)
{
  BuddyAppleIDConfigurationManager *v1;
  void *v2;

  v1 = objc_opt_new(BuddyAppleIDConfigurationManager);
  v2 = (void *)qword_1002EE9A8;
  qword_1002EE9A8 = (uint64_t)v1;

}

void sub_1000D463C(id *a1)
{
  void *v2;
  void **block;
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t);
  void *v7;
  id v8;
  id v9;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_msgSend(a1[4], "URLConfiguration");
  if (a1[5])
  {
    v2 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v4 = -1073741824;
    v5 = 0;
    v6 = sub_1000D473C;
    v7 = &unk_100281190;
    v9 = a1[5];
    v8 = location[0];
    dispatch_async((dispatch_queue_t)v2, &block);

    objc_storeStrong(&v8, 0);
    objc_storeStrong(&v9, 0);
  }
  objc_storeStrong(location, 0);
}

uint64_t sub_1000D473C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
}

void sub_1000D4870(uint64_t a1, uint64_t a2)
{
  void *v2;
  id *v3;

  v3 = (id *)(a2 + 40);
  v2 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);
  objc_storeStrong(v3, 0);
}

void sub_1000D48A0(uint64_t a1)
{
  objc_storeStrong((id *)(a1 + 40), 0);
}

void sub_1000D48AC(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  uint64_t v8;
  BOOL v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  _WORD v13[3];
  os_log_type_t v14;
  os_log_t v15;
  os_log_type_t v16;
  os_log_t v17;
  char v18;
  id v19;
  uint8_t buf[7];
  os_log_type_t v21;
  os_log_t oslog[3];
  uint8_t v23[8];

  oslog[2] = a1;
  oslog[1] = a1;
  if (*((_QWORD *)a1[4].isa + 1))
  {
    objc_storeStrong((id *)(*((_QWORD *)a1[5].isa + 1) + 40), *((id *)a1[4].isa + 1));
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    v21 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v2 = oslog[0];
      v3 = v21;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "ConfigurationManager downloading Apple ID URL Configuration...", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    v4 = +[AASetupAssistantService urlConfiguration](AASetupAssistantService, "urlConfiguration");
    v5 = *((_QWORD *)a1[5].isa + 1);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

    v8 = *(_QWORD *)(*((_QWORD *)a1[5].isa + 1) + 40);
    v18 = 0;
    v9 = 0;
    if (v8)
    {
      v19 = objc_msgSend(*(id *)(*((_QWORD *)a1[5].isa + 1) + 40), "xmlUI");
      v18 = 1;
      v7 = objc_msgSend(v19, "length");
      v9 = v7 != 0;
    }
    if ((v18 & 1) != 0)

    if (v9)
    {
      objc_storeStrong((id *)a1[4].isa + 1, *(id *)(*((_QWORD *)a1[5].isa + 1) + 40));
      v10 = objc_msgSend(*(id *)(*((_QWORD *)a1[5].isa + 1) + 40), "setupAssistantServerEnabled");
      *((_BYTE *)a1[4].isa + 24) = v10 & 1;
      v17 = (os_log_t)(id)_BYLoggingFacility(v10);
      v16 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        sub_100046FA0(v23, *((_BYTE *)a1[4].isa + 24) & 1);
        _os_log_impl((void *)&_mh_execute_header, v17, v16, "ConfigurationManager downloaded AppleID configuration. Service Enabled = %d", v23, 8u);
      }
      objc_storeStrong((id *)&v17, 0);
    }
    else
    {
      v15 = (os_log_t)(id)_BYLoggingFacility(v7);
      v14 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v11 = v15;
        v12 = v14;
        sub_100038C3C(v13);
        _os_log_impl((void *)&_mh_execute_header, v11, v12, "ConfigurationManager downloaded AppleID configuration. Empty XMLUI, assuming error.", (uint8_t *)v13, 2u);
      }
      objc_storeStrong((id *)&v15, 0);
      *((_BYTE *)a1[4].isa + 24) = 1;
      objc_storeStrong((id *)a1[4].isa + 1, 0);
      +[AASetupAssistantService resetURLConfiguration](AASetupAssistantService, "resetURLConfiguration");
    }
  }
}

id sub_1000D51FC()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE9B8;
  v13 = qword_1002EE9B8;
  if (!qword_1002EE9B8)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000D8DEC;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1000D8DEC(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_1000D56A0(id *a1, void *a2, void *a3)
{
  id v5;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v5 = 0;
  objc_storeStrong(&v5, a3);
  objc_msgSend(a1[4], "_handleScanResults:error:", location[0], v5, a1);
  objc_storeStrong(&v5, 0);
  objc_storeStrong(location, 0);
}

void sub_1000D5714(id *a1, void *a2, void *a3)
{
  id v5;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v5 = 0;
  objc_storeStrong(&v5, a3);
  objc_msgSend(a1[4], "_handleScanResults:error:", location[0], v5, a1);
  objc_storeStrong(&v5, 0);
  objc_storeStrong(location, 0);
}

void sub_1000D5AC0(id *a1, char a2, id obj)
{
  uint64_t v4;
  NSString *v5;
  NSObject *v6;
  os_log_type_t v7;
  id v8;
  id v9;
  id v10;
  unsigned __int8 v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t v17[7];
  os_log_type_t v18;
  os_log_t v19;
  uint8_t v20[15];
  os_log_type_t v21;
  os_log_t v22;
  char v23;
  id v24;
  char v25;
  id v26;
  char v27;
  id v28;
  char v29;
  id v30;
  char v31;
  int v32;
  uint8_t v33[7];
  os_log_type_t v34;
  os_log_t oslog;
  char v36;
  id v37;
  char v38;
  id v39;
  os_log_type_t v40;
  id v41[2];
  id location;
  char v43;
  id *v44;
  uint8_t buf[24];

  v44 = a1;
  v43 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v41[1] = a1;
  if (location)
  {
    v41[0] = (id)_BYLoggingFacility(v4);
    v40 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v41[0], OS_LOG_TYPE_ERROR))
    {
      v38 = 0;
      v36 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v5 = (NSString *)location;
      }
      else if (location)
      {
        v39 = objc_msgSend(location, "domain");
        v38 = 1;
        v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v39, objc_msgSend(location, "code"));
        v37 = v5;
        v36 = 1;
      }
      else
      {
        v5 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v41[0], v40, "Failed to determine if an existing download is in progress: %{public}@", buf, 0xCu);
      if ((v36 & 1) != 0)

      if ((v38 & 1) != 0)
    }
    objc_storeStrong(v41, 0);
  }
  if ((v43 & 1) != 0)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v4);
    v34 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v6 = oslog;
      v7 = v34;
      sub_100038C3C(v33);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Not starting a new download; a download is already in progress",
        v33,
        2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    v32 = 1;
  }
  else
  {
    v31 = 0;
    v8 = objc_msgSend(a1[4], "updateManager");
    v9 = objc_msgSend(v8, "download");
    v10 = objc_msgSend(v9, "progress");
    v29 = 0;
    v27 = 0;
    v25 = 0;
    v23 = 0;
    v11 = 0;
    if ((objc_msgSend(v10, "isDone") & 1) != 0)
    {
      v30 = objc_msgSend(a1[4], "updateManager");
      v29 = 1;
      v28 = objc_msgSend(v30, "download");
      v27 = 1;
      v26 = objc_msgSend(v28, "progress");
      v25 = 1;
      v24 = objc_msgSend(v26, "phase");
      v23 = 1;
      v11 = objc_msgSend(v24, "isEqualToString:", kSUDownloadPhasePreparingForInstallation);
    }
    if ((v23 & 1) != 0)

    if ((v25 & 1) != 0)
    if ((v27 & 1) != 0)

    if ((v29 & 1) != 0)
    v31 = v11 & 1;
    if ((v11 & 1) != 0)
    {
      v22 = (os_log_t)(id)_BYLoggingFacility(v12);
      v21 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        v13 = v22;
        v14 = v21;
        sub_100038C3C(v20);
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Update already downloaded; starting install...", v20, 2u);
      }
      objc_storeStrong((id *)&v22, 0);
      objc_msgSend(a1[4], "startInstall");
    }
    else
    {
      v19 = (os_log_t)(id)_BYLoggingFacility(v12);
      v18 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        v15 = v19;
        v16 = v18;
        sub_100038C3C(v17);
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Starting download of update...", v17, 2u);
      }
      objc_storeStrong((id *)&v19, 0);
      objc_msgSend(a1[4], "startDownload");
    }
    v32 = 0;
  }
  objc_storeStrong(&location, 0);
}

void sub_1000D60DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1000D60F8(_QWORD *a1, void *a2, _BYTE *a3)
{
  id v5;
  BOOL v6;
  _BYTE *v7;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v7 = a3;
  v5 = objc_msgSend(location[0], "domain", a1);
  v6 = 0;
  if ((objc_msgSend(v5, "isEqualToString:", CFSTR("com.apple.MobileAssetError.Download")) & 1) != 0)
    v6 = objc_msgSend(location[0], "code") == (id)18;

  if (v6)
  {
    *(_BYTE *)(*(_QWORD *)(a1[4] + 8) + 24) = 1;
    *v7 = 1;
  }
  objc_storeStrong(location, 0);
}

void sub_1000D6708(NSObject *a1, void *a2)
{
  id v3;
  unsigned __int8 v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  id v8;
  id v9;
  unsigned __int8 v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  NSObject *v14;
  os_log_type_t v15;
  id v16;
  Class v17;
  Class isa;
  id v19;
  id v20;
  _WORD v21[3];
  os_log_type_t v22;
  os_log_t v23;
  uint8_t v24[7];
  os_log_type_t v25;
  os_log_t v26;
  uint8_t buf[15];
  os_log_type_t v28;
  os_log_t oslog[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  -[objc_class resetProgress](a1[4].isa, "resetProgress");
  v3 = -[objc_class updateManager](a1[4].isa, "updateManager");
  v4 = objc_msgSend(v3, "readyToResume");

  if ((v4 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    v28 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v6 = oslog[0];
      v7 = v28;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Attempting to resume download...", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    v8 = -[objc_class updateManager](a1[4].isa, "updateManager");
    objc_msgSend(v8, "resumeDownload");

  }
  else
  {
    v9 = -[objc_class updateManager](a1[4].isa, "updateManager");
    v10 = objc_msgSend(v9, "readyToDownloadPreferredUpdate");

    if ((v10 & 1) != 0)
    {
      v26 = (os_log_t)(id)_BYLoggingFacility(v11);
      v25 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        v12 = v26;
        v13 = v25;
        sub_100038C3C(v24);
        _os_log_impl((void *)&_mh_execute_header, v12, v13, "Attempting to start download...", v24, 2u);
      }
      objc_storeStrong((id *)&v26, 0);
      -[objc_class startDownload](a1[4].isa, "startDownload");
    }
    else
    {
      v23 = (os_log_t)(id)_BYLoggingFacility(v11);
      v22 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        v14 = v23;
        v15 = v22;
        sub_100038C3C(v21);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Update is not ready to resume or download", (uint8_t *)v21, 2u);
      }
      objc_storeStrong((id *)&v23, 0);
      v16 = -[objc_class navigationController](a1[4].isa, "navigationController");
      v17 = (Class)objc_msgSend(v16, "topViewController");
      isa = a1[4].isa;

      if (v17 == isa)
      {
        v19 = -[objc_class navigationController](a1[4].isa, "navigationController");
        v20 = objc_msgSend(v19, "popViewControllerAnimated:", 1);

      }
    }
  }
  objc_storeStrong(location, 0);
}

void sub_1000D69AC(id *a1, void *a2)
{
  id v3;
  id v4;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(a1[4], "navigationController");
  v4 = objc_msgSend(v3, "popViewControllerAnimated:", 1);

  objc_storeStrong(location, 0);
}

void sub_1000D6E18(id *a1, void *a2)
{
  id v3;
  id v4;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(a1[4], "delegate");
  v4 = objc_msgSend(v3, "popToBuddyControllerWithClass:animated:", +[BuddyCloudConfigController disclosureViewControllerClass](BuddyCloudConfigController, "disclosureViewControllerClass"), 1);

  objc_storeStrong(location, 0);
}

void sub_1000D7020(uint64_t a1, char a2, id obj)
{
  id location;
  char v5;
  uint64_t v6;

  v6 = a1;
  v5 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  objc_msgSend(*(id *)(a1 + 32), "handleDownload:error:", v5 & 1, location, a1);
  objc_storeStrong(&location, 0);
}

void sub_1000D7080(uint64_t a1, char a2, id obj)
{
  id location;
  char v5;
  uint64_t v6;

  v6 = a1;
  v5 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  objc_msgSend(*(id *)(a1 + 32), "handleDownload:error:", v5 & 1, location, a1);
  objc_storeStrong(&location, 0);
}

id sub_1000D772C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "showAlertForError:", *(_QWORD *)(a1 + 40), a1, a1);
}

id sub_1000D775C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "showAlertForError:", *(_QWORD *)(a1 + 40), a1, a1);
}

void sub_1000D778C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;

  v2 = objc_msgSend(*(id *)(a1 + 32), "navigationController", a1, a1);
  v3 = objc_msgSend(v2, "topViewController");
  v4 = *(id *)(a1 + 32);

  if (v3 == v4)
  {
    v5 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
    v6 = objc_msgSend(v5, "popViewControllerAnimated:", 1);

  }
}

void sub_1000D78F0(NSObject *a1, char a2, id obj)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  void *v7;
  void **v8;
  int v9;
  int v10;
  id (*v11)(uint64_t);
  void *v12;
  objc_class *v13;
  id v14;
  os_log_type_t v15;
  os_log_t v16;
  uint8_t buf[7];
  os_log_type_t v18;
  os_log_t oslog[2];
  id location;
  char v21;
  NSObject *v22;
  uint8_t v23[24];

  v22 = a1;
  v21 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if ((v21 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v18 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v5 = oslog[0];
      v6 = v18;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Started install...", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v16 = (os_log_t)(id)_BYLoggingFacility(v4);
    v15 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      sub_100038C28((uint64_t)v23, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, v16, v15, "Failed to start install: %@", v23, 0xCu);
    }
    objc_storeStrong((id *)&v16, 0);
    v7 = &_dispatch_main_q;
    v8 = _NSConcreteStackBlock;
    v9 = -1073741824;
    v10 = 0;
    v11 = sub_1000D7B00;
    v12 = &unk_100280D00;
    v13 = a1[4].isa;
    v14 = location;
    dispatch_async((dispatch_queue_t)v7, &v8);

    objc_storeStrong(&v14, 0);
    objc_storeStrong((id *)&v13, 0);
  }
  objc_storeStrong(&location, 0);
}

id sub_1000D7B00(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "showAlertForError:", *(_QWORD *)(a1 + 40), a1, a1);
}

void sub_1000D7CFC(uint64_t a1)
{
  int v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  char v9;

  v9 = 1;
  v2 = *(_DWORD *)(a1 + 40);
  if (v2 == 3)
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
    v4 = objc_msgSend(v3, "topViewController");
    v5 = *(id *)(a1 + 32);

    if (v4 == v5)
    {
      v6 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
      v7 = objc_msgSend(v6, "popViewControllerAnimated:", 1);

    }
  }
  else if (v2 == 14)
  {
    v9 = 0;
  }
  v8 = objc_msgSend(*(id *)(a1 + 32), "navigationItem");
  objc_msgSend(v8, "setHidesBackButton:", v9 & 1);

}

void sub_1000D7F44(uint64_t a1)
{
  id v2;
  NSBundle *v3;
  NSString *v4;
  void *v5;
  id v6;
  float v7;
  void *v8;
  id v9;
  id v10;

  v2 = objc_msgSend(*(id *)(a1 + 32), "headerView", a1, a1);
  v3 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BuddyMandatoryUpdateProgressController));
  v4 = -[NSBundle localizedStringForKey:value:table:](v3, "localizedStringForKey:value:table:", CFSTR("MANDATORY_UPDATE_PROGRESS_TITLE_DOWNLOADING"), &stru_100284738, CFSTR("MandatorySoftwareUpdate"));
  objc_msgSend(v2, "setTitle:", v4);

  v5 = *(void **)(a1 + 32);
  v6 = objc_msgSend(*(id *)(a1 + 40), "progress");
  objc_msgSend(v6, "normalizedPercentComplete");
  objc_msgSend(v5, "setProgress:", v7);

  v8 = *(void **)(a1 + 32);
  v9 = objc_msgSend(v8, "updateManager");
  v10 = objc_msgSend(v9, "progressString");
  objc_msgSend(v8, "setProgressText:", v10);

}

id sub_1000D82F0(uint64_t a1)
{
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_100038C28((uint64_t)buf, *(_QWORD *)(a1 + 32));
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Download of software update failed: %@", buf, 0xCu);
  }
  objc_storeStrong((id *)oslog, 0);
  return objc_msgSend(*(id *)(a1 + 40), "showAlertForError:", *(_QWORD *)(a1 + 32));
}

void sub_1000D84B8(uint64_t a1)
{
  id v2;
  NSBundle *v3;
  NSString *v4;
  void *v5;
  id v6;
  id v7;

  v2 = objc_msgSend(*(id *)(a1 + 32), "headerView", a1, a1);
  v3 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BuddyMandatoryUpdateProgressController));
  v4 = -[NSBundle localizedStringForKey:value:table:](v3, "localizedStringForKey:value:table:", CFSTR("MANDATORY_UPDATE_PROGRESS_TITLE_INSTALLING"), &stru_100284738, CFSTR("MandatorySoftwareUpdate"));
  objc_msgSend(v2, "setTitle:", v4);

  objc_msgSend(*(id *)(a1 + 32), "setProgress:", 1.0);
  v5 = *(void **)(a1 + 32);
  v6 = objc_msgSend(v5, "updateManager");
  v7 = objc_msgSend(v6, "progressString");
  objc_msgSend(v5, "setProgressText:", v7);

}

id sub_1000D86E8(uint64_t a1)
{
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_100038C28((uint64_t)buf, *(_QWORD *)(a1 + 32));
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Install of software update failed: %@", buf, 0xCu);
  }
  objc_storeStrong((id *)oslog, 0);
  return objc_msgSend(*(id *)(a1 + 40), "showAlertForError:", *(_QWORD *)(a1 + 32));
}

void sub_1000D89B8(uint64_t a1)
{
  void *v2;
  id v3;
  id v4;

  if ((objc_msgSend(*(id *)(a1 + 32), "failedToFindMDMRequiredUpdate", a1, a1) & 1) != 0)
  {
    v2 = *(void **)(a1 + 32);
    v3 = objc_msgSend(v2, "updateOptions");
    objc_msgSend(v2, "showAlertForMDMMissingUpdate:", v3);
  }
  else
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
    v4 = objc_msgSend(v3, "popViewControllerAnimated:", 1);
  }

}

void sub_1000D8DEC(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1000D8F2C();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("SUSUISoftwareUpdateManager");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getSUSUISoftwareUpdateManagerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyMandatoryUpdateProgressController.m"), 28, CFSTR("Unable to find class %s"), "SUSUISoftwareUpdateManager");

    __break(1u);
  }
  qword_1002EE9B8 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_1000D8F2C()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_1000D9058((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *SoftwareUpdateSettingsUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyMandatoryUpdateProgressController.m"), 27, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_1000D9058(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE9C0;
  v9 = qword_1002EE9C0;
  if (!qword_1002EE9C0)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000D90E8;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1000D90E8((uint64_t)&v2);
  }
  return qword_1002EE9C0;
}

uint64_t sub_1000D90E8(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/SoftwareUpdateSettingsUI.framework/SoftwareUpdateSettingsUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE9C0 = result;
  return result;
}

double sub_1000D9634(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  double result;

  *(_QWORD *)&result = 138413058;
  *(_DWORD *)a1 = 138413058;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2112;
  *(_QWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 2112;
  *(_QWORD *)(a1 + 34) = a5;
  return result;
}

SetupController *sub_1000D9664(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = 1;
  return objc_alloc_init(SetupController);
}

void sub_1000DA170(id a1, LSBundleProxy *a2, BOOL *a3)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_storeStrong(location, 0);
}

void sub_1000DA1BC(id *a1, void *a2)
{
  void (**v3)(_QWORD);
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = (void (**)(_QWORD))objc_msgSend(a1[4], "showModalWiFiSettingsBlock");
  v3[2](v3);

  objc_storeStrong(location, 0);
}

void sub_1000DA228(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  *((_BYTE *)a1[4] + 10) = 1;
  objc_msgSend(a1[4], "_skipPressed:", 0);
  objc_storeStrong(location, 0);
}

id sub_1000DAF04(id *a1, void *a2)
{
  id v3;
  id v4;
  id location[2];
  id v7;

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(a1[4], "traitCollection");
  v4 = objc_msgSend(v3, "userInterfaceStyle");

  if (v4 == (id)2)
    v7 = objc_msgSend(location[0], "stringByAppendingString:", CFSTR("_Dark"));
  else
    v7 = location[0];
  objc_storeStrong(location, 0);
  return v7;
}

void sub_1000DB490(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _WORD v6[7];
  os_log_type_t v7;
  os_log_t oslog[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
  v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog[0];
    v5 = v7;
    sub_100038C3C(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Tapped Skip Apple ID", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  -[objc_class _reallySkip](a1[4].isa, "_reallySkip");
  *((_BYTE *)a1[4].isa + 10) = 0;
  objc_storeStrong(location, 0);
}

void sub_1000DB568(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  void (**v6)(_QWORD);
  _WORD v7[7];
  os_log_type_t v8;
  os_log_t oslog[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
  v8 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog[0];
    v5 = v8;
    sub_100038C3C(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Tapped Don't Skip Apple ID", (uint8_t *)v7, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  if ((*((_BYTE *)a1[4].isa + 10) & 1) != 0)
  {
    v6 = (void (**)(_QWORD))-[objc_class showModalWiFiSettingsBlock](a1[4].isa, "showModalWiFiSettingsBlock");
    v6[2](v6);

  }
  *((_BYTE *)a1[4].isa + 10) = 0;
  objc_storeStrong(location, 0);
}

void sub_1000DBA74(uint64_t a1, void *a2)
{
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(*(id *)(a1 + 32), "setUrlConfiguration:", location[0]);
  if (*(_QWORD *)(a1 + 40))
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_storeStrong(location, 0);
}

id sub_1000DDA74()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE9C8;
  v13 = qword_1002EE9C8;
  if (!qword_1002EE9C8)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000DE0F0;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1000DE0F0(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_1000DE0F0(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1000DE230();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("DMCEnrollmentFlowManagedConfigurationHelper");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getDMCEnrollmentFlowManagedConfigurationHelperClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyEnrollmentFlowMCBridge.m"), 22, CFSTR("Unable to find class %s"), "DMCEnrollmentFlowManagedConfigurationHelper");

    __break(1u);
  }
  qword_1002EE9C8 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_1000DE230()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_1000DE35C((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *DMCEnrollmentProviderLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyEnrollmentFlowMCBridge.m"), 21, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_1000DE35C(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE9D0;
  v9 = qword_1002EE9D0;
  if (!qword_1002EE9D0)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000DE3EC;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1000DE3EC((uint64_t)&v2);
  }
  return qword_1002EE9D0;
}

uint64_t sub_1000DE3EC(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/DMCEnrollmentProvider.framework/DMCEnrollmentProvider";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE9D0 = result;
  return result;
}

void sub_1000DEB84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000DEBB8(id *a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  id v4;
  id v5;
  void **v6;
  int v7;
  int v8;
  void (*v9)(double *, void *);
  void *v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  void **v14;
  int v15;
  int v16;
  void (*v17)(double *, void *);
  void *v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD __b[2];
  id location[2];
  double v24;
  id *v25;

  v25 = a1;
  v24 = a2;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  memset(__b, 0, sizeof(__b));
  objc_msgSend(location[0], "_contentDisplayModel");
  __b[0] = v2;
  __b[1] = v3;
  v4 = objc_msgSend(location[0], "timeLabelCenterYConstraints");
  v14 = _NSConcreteStackBlock;
  v15 = -1073741824;
  v16 = 0;
  v17 = sub_1000DECFC;
  v18 = &unk_100282830;
  v19 = v24;
  v20 = __b[0];
  v21 = __b[1];
  objc_msgSend(v4, "enumerateObjectsUsingBlock:", &v14);

  v5 = objc_msgSend(location[0], "timeLabelWidthConstraints");
  v6 = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_1000DED70;
  v10 = &unk_100282830;
  v11 = v24;
  v12 = __b[0];
  v13 = __b[1];
  objc_msgSend(v5, "enumerateObjectsUsingBlock:", &v6);

  objc_storeStrong(location, 0);
}

void sub_1000DECFC(double *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(location[0], "setConstant:", -(a1[4] * a1[5]));
  objc_storeStrong(location, 0);
}

void sub_1000DED70(double *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(location[0], "setConstant:", a1[4] * a1[6]);
  objc_storeStrong(location, 0);
}

void sub_1000E0614(id *a1, void *a2, void *a3)
{
  uint64_t v5;
  NSString *v6;
  void *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  void **v11;
  int v12;
  int v13;
  void (*v14)(uint64_t);
  void *v15;
  id v16;
  id v17;
  uint8_t v18[15];
  os_log_type_t v19;
  os_log_t oslog;
  int v21;
  void **block;
  int v23;
  int v24;
  id (*v25)(uint64_t);
  void *v26;
  id v27;
  id v28;
  char v29;
  id v30;
  char v31;
  id v32;
  os_log_type_t v33;
  id v34[2];
  id v35;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v35 = 0;
  objc_storeStrong(&v35, a3);
  v34[1] = a1;
  if (v35)
  {
    v34[0] = (id)_BYLoggingFacility(v5);
    v33 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v34[0], OS_LOG_TYPE_ERROR))
    {
      v31 = 0;
      v29 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v6 = (NSString *)v35;
      }
      else if (v35)
      {
        v32 = objc_msgSend(v35, "domain");
        v31 = 1;
        v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v32, objc_msgSend(v35, "code"));
        v30 = v6;
        v29 = 1;
      }
      else
      {
        v6 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v6);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v34[0], v33, "Credential recovery failed: %{public}@", buf, 0xCu);
      if ((v29 & 1) != 0)

      if ((v31 & 1) != 0)
    }
    objc_storeStrong(v34, 0);
    v7 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v23 = -1073741824;
    v24 = 0;
    v25 = sub_1000E09B8;
    v26 = &unk_100280D00;
    v27 = a1[4];
    v28 = v35;
    dispatch_async((dispatch_queue_t)v7, &block);

    v21 = 1;
    objc_storeStrong(&v28, 0);
    objc_storeStrong(&v27, 0);
  }
  else
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v5);
    v19 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v8 = oslog;
      v9 = v19;
      sub_100038C3C(v18);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Credential recovery succeeded!", v18, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    v10 = &_dispatch_main_q;
    v11 = _NSConcreteStackBlock;
    v12 = -1073741824;
    v13 = 0;
    v14 = sub_1000E09E8;
    v15 = &unk_100280D00;
    v16 = a1[4];
    v17 = location[0];
    dispatch_async((dispatch_queue_t)v10, &v11);

    objc_storeStrong(&v17, 0);
    objc_storeStrong(&v16, 0);
    v21 = 0;
  }
  objc_storeStrong(&v35, 0);
  objc_storeStrong(location, 0);
}

id sub_1000E09B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_signInFailedWithError:", *(_QWORD *)(a1 + 40), a1, a1);
}

void sub_1000E09E8(uint64_t a1)
{
  id v2;
  char v3;
  id v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  id v9;
  uint64_t v10;
  void **v11;
  int v12;
  int v13;
  void (*v14)(uint64_t, char, id);
  void *v15;
  id v16;
  uint8_t buf[15];
  os_log_type_t v18;
  os_log_t oslog;
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  v2 = objc_msgSend(*(id *)(a1 + 32), "delegate");
  v3 = objc_opt_respondsToSelector(v2, "appleIDController:didAuthenticateForCredentialRecovery:");

  if ((v3 & 1) != 0)
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "delegate");
    objc_msgSend(v4, "appleIDController:didAuthenticateForCredentialRecovery:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));

  }
  else
  {
    location[0] = -[BuddyAppleIDSpinnerPage initWithAccountMode:]([BuddyAppleIDSpinnerPage alloc], "initWithAccountMode:", objc_msgSend(*(id *)(a1 + 32), "operationType"));
    v5 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
    objc_msgSend(v5, "pushViewController:animated:", location[0], 1);

    oslog = (os_log_t)(id)_BYLoggingFacility(v6);
    v18 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v7 = oslog;
      v8 = v18;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Beginning sign-in...", buf, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    v9 = objc_msgSend(*(id *)(a1 + 32), "signInTask");
    v10 = *(_QWORD *)(a1 + 40);
    v11 = _NSConcreteStackBlock;
    v12 = -1073741824;
    v13 = 0;
    v14 = sub_1000E0BE0;
    v15 = &unk_100280FD8;
    v16 = *(id *)(a1 + 32);
    objc_msgSend(v9, "signInToAllServicesWithAuthenticationResults:completion:", v10, &v11);

    objc_storeStrong(&v16, 0);
    objc_storeStrong(location, 0);
  }
}

void sub_1000E0BE0(uint64_t a1, char a2, id obj)
{
  void *v4;
  void **block;
  int v6;
  int v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  id v11;
  char v12;
  uint64_t v13;
  id location;
  char v15;
  uint64_t v16;

  v16 = a1;
  v15 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v13 = a1;
  v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_1000E0CE4;
  v9 = &unk_100280FB0;
  v12 = v15 & 1;
  v10 = location;
  v11 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

void sub_1000E0CE4(uint64_t a1)
{
  NSString *v2;
  id v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t v8[7];
  os_log_type_t v9;
  os_log_t v10;
  char v11;
  id v12;
  char v13;
  id v14;
  os_log_type_t v15;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v10 = (os_log_t)(id)_BYLoggingFacility(a1);
    v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v6 = v10;
      v7 = v9;
      sub_100038C3C(v8);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Sign-in succeeded!", v8, 2u);
    }
    objc_storeStrong((id *)&v10, 0);
    objc_msgSend(*(id *)(a1 + 40), "_signInSucceeded");
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    v15 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v13 = 0;
      v11 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v2 = *(NSString **)(a1 + 32);
      }
      else if (*(_QWORD *)(a1 + 32))
      {
        v14 = objc_msgSend(*(id *)(a1 + 32), "domain");
        v13 = 1;
        v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v14, objc_msgSend(*(id *)(a1 + 32), "code"));
        v12 = v2;
        v11 = 1;
      }
      else
      {
        v2 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v2);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v15, "Sign-in failed: %{public}@", buf, 0xCu);
      if ((v11 & 1) != 0)

      if ((v13 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
    v3 = objc_msgSend(*(id *)(a1 + 40), "navigationController");
    v4 = objc_msgSend(*(id *)(a1 + 40), "authAttemptLandingViewController");
    v5 = objc_msgSend(v3, "popToViewController:animated:", v4, 1);

  }
}

void sub_1000E1300(id *a1, void *a2, void *a3)
{
  uint64_t v5;
  NSString *v6;
  void *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  void **v11;
  int v12;
  int v13;
  void (*v14)(uint64_t);
  void *v15;
  id v16;
  id v17;
  uint8_t v18[15];
  os_log_type_t v19;
  os_log_t oslog;
  int v21;
  void **block;
  int v23;
  int v24;
  id (*v25)(uint64_t);
  void *v26;
  id v27;
  id v28;
  char v29;
  id v30;
  char v31;
  id v32;
  os_log_type_t v33;
  id v34[2];
  id v35;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v35 = 0;
  objc_storeStrong(&v35, a3);
  v34[1] = a1;
  if (v35)
  {
    v34[0] = (id)_BYLoggingFacility(v5);
    v33 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v34[0], OS_LOG_TYPE_ERROR))
    {
      v31 = 0;
      v29 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v6 = (NSString *)v35;
      }
      else if (v35)
      {
        v32 = objc_msgSend(v35, "domain");
        v31 = 1;
        v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v32, objc_msgSend(v35, "code"));
        v30 = v6;
        v29 = 1;
      }
      else
      {
        v6 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v6);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v34[0], v33, "Account creation failed: %{public}@", buf, 0xCu);
      if ((v29 & 1) != 0)

      if ((v31 & 1) != 0)
    }
    objc_storeStrong(v34, 0);
    v7 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v23 = -1073741824;
    v24 = 0;
    v25 = sub_1000E16A4;
    v26 = &unk_100280D00;
    v27 = a1[4];
    v28 = v35;
    dispatch_async((dispatch_queue_t)v7, &block);

    v21 = 1;
    objc_storeStrong(&v28, 0);
    objc_storeStrong(&v27, 0);
  }
  else
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v5);
    v19 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v8 = oslog;
      v9 = v19;
      sub_100038C3C(v18);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Account creation succeeded!", v18, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    v10 = &_dispatch_main_q;
    v11 = _NSConcreteStackBlock;
    v12 = -1073741824;
    v13 = 0;
    v14 = sub_1000E16D4;
    v15 = &unk_100280D00;
    v16 = a1[4];
    v17 = location[0];
    dispatch_async((dispatch_queue_t)v10, &v11);

    objc_storeStrong(&v17, 0);
    objc_storeStrong(&v16, 0);
    v21 = 0;
  }
  objc_storeStrong(&v35, 0);
  objc_storeStrong(location, 0);
}

id sub_1000E16A4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_signInFailedWithError:", *(_QWORD *)(a1 + 40), a1, a1);
}

void sub_1000E16D4(uint64_t a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  id v6;
  uint64_t v7;
  void **v8;
  int v9;
  int v10;
  void (*v11)(uint64_t, char, id);
  void *v12;
  id v13;
  uint8_t buf[15];
  os_log_type_t v15;
  os_log_t oslog;
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = -[BuddyAppleIDSpinnerPage initWithAccountMode:]([BuddyAppleIDSpinnerPage alloc], "initWithAccountMode:", objc_msgSend(*(id *)(a1 + 32), "operationType"));
  v2 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
  objc_msgSend(v2, "pushViewController:animated:", location[0], 1);

  oslog = (os_log_t)(id)_BYLoggingFacility(v3);
  v15 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog;
    v5 = v15;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Beginning sign-in...", buf, 2u);
  }
  objc_storeStrong((id *)&oslog, 0);
  v6 = objc_msgSend(*(id *)(a1 + 32), "signInTask");
  v7 = *(_QWORD *)(a1 + 40);
  v8 = _NSConcreteStackBlock;
  v9 = -1073741824;
  v10 = 0;
  v11 = sub_1000E1864;
  v12 = &unk_100280FD8;
  v13 = *(id *)(a1 + 32);
  objc_msgSend(v6, "signInToAllServicesWithAuthenticationResults:completion:", v7, &v8);

  objc_storeStrong(&v13, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E1864(uint64_t a1, char a2, id obj)
{
  void *v4;
  void **block;
  int v6;
  int v7;
  id (*v8)(uint64_t);
  void *v9;
  id v10;
  id v11;
  char v12;
  uint64_t v13;
  id location;
  char v15;
  uint64_t v16;

  v16 = a1;
  v15 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v13 = a1;
  v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_1000E1968;
  v9 = &unk_100280FB0;
  v12 = v15 & 1;
  v10 = location;
  v11 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

id sub_1000E1968(uint64_t a1)
{
  NSString *v2;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t v6[7];
  os_log_type_t v7;
  os_log_t v8;
  char v9;
  id v10;
  char v11;
  id v12;
  os_log_type_t v13;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v8 = (os_log_t)(id)_BYLoggingFacility(a1);
    v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = v8;
      v5 = v7;
      sub_100038C3C(v6);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Sign-in succeeded!", v6, 2u);
    }
    objc_storeStrong((id *)&v8, 0);
    return objc_msgSend(*(id *)(a1 + 40), "_signInSucceeded");
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    v13 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v11 = 0;
      v9 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v2 = *(NSString **)(a1 + 32);
      }
      else if (*(_QWORD *)(a1 + 32))
      {
        v12 = objc_msgSend(*(id *)(a1 + 32), "domain");
        v11 = 1;
        v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v12, objc_msgSend(*(id *)(a1 + 32), "code"));
        v10 = v2;
        v9 = 1;
      }
      else
      {
        v2 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v2);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v13, "Sign-in failed: %{public}@", buf, 0xCu);
      if ((v9 & 1) != 0)

      if ((v11 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
    return objc_msgSend(*(id *)(a1 + 40), "_signInFailedWithError:", *(_QWORD *)(a1 + 32));
  }
}

void sub_1000E224C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,int a21,_Unwind_Exception *exception_object,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,id location)
{
  id *v29;

  objc_destroyWeak(v29);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000E229C(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  _WORD v5[3];
  os_log_type_t v6;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v6;
    sub_100038C3C(v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "iForgot tapped", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  return -[objc_class showCredentialRecovery](a1[4].isa, "showCredentialRecovery");
}

void sub_1000E2344(uint64_t a1)
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = objc_msgSend(WeakRetained, "isMovingToParentViewController", a1, a1) ^ 1;

  if ((v3 & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "cancelAuthentication");
}

void sub_1000E23A4(NSObject *a1, void *a2, void *a3)
{
  id WeakRetained;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  Class isa;
  id v10;
  id v11;
  id v12;
  _WORD v13[3];
  os_log_type_t v14;
  os_log_t oslog[2];
  id v16;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v16 = 0;
  objc_storeStrong(&v16, a3);
  oslog[1] = a1;
  WeakRetained = objc_loadWeakRetained((id *)&a1[5].isa);
  -[objc_class setAuthAttemptLandingViewController:](a1[4].isa, "setAuthAttemptLandingViewController:", WeakRetained);

  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v6);
  v14 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v7 = oslog[0];
    v8 = v14;
    sub_100038C3C(v13);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Begin post-upgrade sign in from sign in page", (uint8_t *)v13, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  isa = a1[4].isa;
  v10 = location[0];
  v11 = v16;
  v12 = objc_loadWeakRetained((id *)&a1[5].isa);
  -[objc_class _beginPostUpgradeAppleIDLoginWithUsername:password:signInController:](isa, "_beginPostUpgradeAppleIDLoginWithUsername:password:signInController:", v10, v11, v12);

  objc_storeStrong(&v16, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E24D0(id *a1, void *a2, void *a3)
{
  void *v5;
  void **block;
  int v7;
  int v8;
  void (*v9)(uint64_t);
  void *v10;
  id v11;
  id v12;
  id v13[2];
  id v14;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = a1;
  v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_1000E2600;
  v10 = &unk_100281000;
  v11 = v14;
  v12 = a1[4];
  v13[0] = location[0];
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E2600(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void **v3;
  int v4;
  int v5;
  void (*v6)(uint64_t, char, id);
  void *v7;
  id v8[3];

  v8[2] = (id)a1;
  v8[1] = (id)a1;
  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(*(id *)(a1 + 40), "_authCompletedShouldProceed:error:", 0, *(_QWORD *)(a1 + 32));
  }
  else
  {
    v1 = *(void **)(a1 + 40);
    v2 = *(_QWORD *)(a1 + 48);
    v3 = _NSConcreteStackBlock;
    v4 = -1073741824;
    v5 = 0;
    v6 = sub_1000E26C0;
    v7 = &unk_100280FD8;
    v8[0] = *(id *)(a1 + 40);
    objc_msgSend(v1, "_upgradeAccountWithAuthenticationResults:completion:", v2, &v3);
    objc_storeStrong(v8, 0);
  }
}

void sub_1000E26C0(uint64_t a1, char a2, id obj)
{
  void *v4;
  void **block;
  int v6;
  int v7;
  id (*v8)(uint64_t);
  void *v9;
  id v10;
  id v11;
  char v12;
  uint64_t v13;
  id location;
  char v15;
  uint64_t v16;

  v16 = a1;
  v15 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v13 = a1;
  v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_1000E27C4;
  v9 = &unk_100280FB0;
  v10 = *(id *)(a1 + 32);
  v12 = v15 & 1;
  v11 = location;
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

id sub_1000E27C4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_appleIDControllerCompletedShouldProceed:error:", *(_BYTE *)(a1 + 48) & 1, *(_QWORD *)(a1 + 40), a1, a1);
}

void sub_1000E2A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, _Unwind_Exception *exception_object, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,id location)
{
  id *v25;

  objc_destroyWeak(v25);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

id sub_1000E2AC0(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  _WORD v5[3];
  os_log_type_t v6;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v6;
    sub_100038C3C(v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "iForgot tapped", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  return -[objc_class showCredentialRecovery](a1[4].isa, "showCredentialRecovery");
}

void sub_1000E2B68(uint64_t a1)
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = objc_msgSend(WeakRetained, "isMovingToParentViewController", a1, a1) ^ 1;

  if ((v3 & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "cancelAuthentication");
}

void sub_1000E2BC8(NSObject *a1, void *a2, void *a3)
{
  id WeakRetained;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  Class isa;
  id v10;
  id v11;
  id v12;
  _WORD v13[3];
  os_log_type_t v14;
  os_log_t oslog[2];
  id v16;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v16 = 0;
  objc_storeStrong(&v16, a3);
  oslog[1] = a1;
  WeakRetained = objc_loadWeakRetained((id *)&a1[5].isa);
  -[objc_class setAuthAttemptLandingViewController:](a1[4].isa, "setAuthAttemptLandingViewController:", WeakRetained);

  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v6);
  v14 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v7 = oslog[0];
    v8 = v14;
    sub_100038C3C(v13);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Begin restore upgrade sign in from sign in page", (uint8_t *)v13, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  isa = a1[4].isa;
  v10 = location[0];
  v11 = v16;
  v12 = objc_loadWeakRetained((id *)&a1[5].isa);
  -[objc_class _beginPostUpgradeAppleIDLoginWithUsername:password:signInController:](isa, "_beginPostUpgradeAppleIDLoginWithUsername:password:signInController:", v10, v11, v12);

  objc_storeStrong(&v16, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E2EF4(id *a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  _WORD v12[7];
  os_log_type_t v13;
  os_log_t oslog;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  v2 = objc_msgSend(a1[4], "navigationController");
  location[0] = objc_msgSend(v2, "viewControllers");

  if ((unint64_t)objc_msgSend(location[0], "count") <= 1)
  {
    v3 = objc_msgSend(a1[4], "navigationController");
    v4 = objc_msgSend(v3, "topViewController");
    objc_msgSend(a1[4], "setAuthAttemptLandingViewController:", v4);

  }
  else
  {
    v3 = objc_msgSend(location[0], "objectAtIndexedSubscript:", (char *)objc_msgSend(location[0], "count") - 2);
    objc_msgSend(a1[4], "setAuthAttemptLandingViewController:", v3);
  }

  oslog = (os_log_t)(id)_BYLoggingFacility(v5);
  v13 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    v6 = oslog;
    v7 = v13;
    sub_100038C3C(v12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Begin silent post-upgrade sign in", (uint8_t *)v12, 2u);
  }
  objc_storeStrong((id *)&oslog, 0);
  v8 = a1[4];
  v9 = objc_msgSend(a1[5], "appleID");
  v10 = objc_msgSend(a1[5], "rawPassword");
  v11 = objc_msgSend(a1[5], "continuationKey");
  objc_msgSend(v8, "_beginPostUpgradeAppleIDLoginWithUsername:password:continuationKey:signInController:", v9, v10, v11, 0);

  objc_storeStrong(location, 0);
}

void sub_1000E3954(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,id location,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,int a36,int a37,uint64_t a38)
{
  id *v38;
  id *v39;
  uint64_t v40;
  _Unwind_Exception *v41;

  objc_destroyWeak(v39);
  objc_destroyWeak(v38);
  objc_destroyWeak((id *)(v40 - 216));
  _Unwind_Resume(v41);
}

void sub_1000E3A00(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  id v4;
  char v5;
  id v6;
  _WORD v7[3];
  os_log_type_t v8;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v8 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v8;
    sub_100038C3C(v7);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "iForgot with create tapped", (uint8_t *)v7, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  v4 = -[objc_class delegate](a1[4].isa, "delegate");
  v5 = objc_opt_respondsToSelector(v4, "appleIDControllerWantsChoiceController:");

  if ((v5 & 1) != 0)
  {
    v6 = -[objc_class delegate](a1[4].isa, "delegate");
    objc_msgSend(v6, "appleIDControllerWantsChoiceController:", a1[4].isa);

  }
}

void sub_1000E3B00(uint64_t a1)
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = objc_msgSend(WeakRetained, "isMovingToParentViewController", a1, a1) ^ 1;

  if ((v3 & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "cancelAuthentication");
}

void sub_1000E3B60(id *a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  NSString *v8;
  void *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  void **v13;
  int v14;
  int v15;
  void (*v16)(uint64_t);
  void *v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  uint8_t v23[7];
  os_log_type_t v24;
  os_log_t oslog;
  int v26;
  void **block;
  int v28;
  int v29;
  void (*v30)(id *);
  void *v31;
  id v32;
  id v33;
  char v34;
  id v35;
  char v36;
  id v37;
  os_log_type_t v38;
  id v39[2];
  id v40;
  id v41;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v41 = 0;
  objc_storeStrong(&v41, a3);
  v40 = 0;
  objc_storeStrong(&v40, a4);
  v39[1] = a1;
  if (v40)
  {
    v39[0] = (id)_BYLoggingFacility(v7);
    v38 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v39[0], OS_LOG_TYPE_ERROR))
    {
      v36 = 0;
      v34 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v8 = (NSString *)v40;
      }
      else if (v40)
      {
        v37 = objc_msgSend(v40, "domain");
        v36 = 1;
        v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v37, objc_msgSend(v40, "code"));
        v35 = v8;
        v34 = 1;
      }
      else
      {
        v8 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v8);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v39[0], v38, "Authentication failed: %{public}@", buf, 0xCu);
      if ((v34 & 1) != 0)

      if ((v36 & 1) != 0)
    }
    objc_storeStrong(v39, 0);
    v9 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v28 = -1073741824;
    v29 = 0;
    v30 = sub_1000E3F8C;
    v31 = &unk_100280E18;
    objc_copyWeak(&v33, a1 + 6);
    v32 = a1[4];
    dispatch_async((dispatch_queue_t)v9, &block);

    v26 = 1;
    objc_storeStrong(&v32, 0);
    objc_destroyWeak(&v33);
  }
  else
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(objc_msgSend(a1[5], "markSignInStartedAfterAuthenticationCompleted"));
    v24 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v10 = oslog;
      v11 = v24;
      sub_100038C3C(v23);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Authentication succeeded!", v23, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    v12 = &_dispatch_main_q;
    v13 = _NSConcreteStackBlock;
    v14 = -1073741824;
    v15 = 0;
    v16 = sub_1000E402C;
    v17 = &unk_100282920;
    v18 = a1[4];
    v19 = location[0];
    v20 = v41;
    objc_copyWeak(&v22, a1 + 6);
    v21 = a1[5];
    dispatch_async((dispatch_queue_t)v12, &v13);

    objc_storeStrong(&v21, 0);
    objc_destroyWeak(&v22);
    objc_storeStrong(&v20, 0);
    objc_storeStrong(&v19, 0);
    objc_storeStrong(&v18, 0);
    v26 = 0;
  }
  objc_storeStrong(&v40, 0);
  objc_storeStrong(&v41, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E3F8C(id *a1)
{
  id WeakRetained;
  id v3;
  id v4;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 5);
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  objc_msgSend(WeakRetained, "setEnabled:", 1);

  v3 = objc_msgSend(a1[4], "navigationController");
  v4 = objc_msgSend(v3, "popToViewController:animated:", location[0], 1);

  objc_storeStrong(location, 0);
}

void sub_1000E402C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint64_t v7;
  void **v8;
  int v9;
  int v10;
  void (*v11)(id *, char, id);
  void *v12;
  id v13;
  id v14;
  id v15;
  uint8_t buf[15];
  os_log_type_t v17;
  id location;
  id v19[3];

  v19[2] = (id)a1;
  v19[1] = (id)a1;
  v19[0] = -[BuddyAppleIDSpinnerPage initWithAccountMode:]([BuddyAppleIDSpinnerPage alloc], "initWithAccountMode:", objc_msgSend(*(id *)(a1 + 32), "operationType"));
  v2 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
  objc_msgSend(v2, "pushViewController:animated:", v19[0], 1);

  location = (id)_BYLoggingFacility(v3);
  v17 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_DEFAULT))
  {
    v4 = location;
    v5 = v17;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Beginning sign-in...", buf, 2u);
  }
  objc_storeStrong(&location, 0);
  v6 = *(void **)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v8 = _NSConcreteStackBlock;
  v9 = -1073741824;
  v10 = 0;
  v11 = sub_1000E41F4;
  v12 = &unk_1002828F8;
  objc_copyWeak(&v15, (id *)(a1 + 64));
  v13 = *(id *)(a1 + 32);
  v14 = *(id *)(a1 + 56);
  objc_msgSend(v6, "signInToAllServicesWithAuthenticationResults:completion:", v7, &v8);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v13, 0);
  objc_destroyWeak(&v15);
  objc_storeStrong(v19, 0);
}

void sub_1000E41DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  id *v12;

  objc_destroyWeak(v12);
  _Unwind_Resume(a1);
}

void sub_1000E41F4(id *a1, char a2, id obj)
{
  void *v4;
  void **block;
  int v6;
  int v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  char v14;
  id *v15;
  id location;
  char v17;
  id *v18;

  v18 = a1;
  v17 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v15 = a1;
  v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_1000E433C;
  v9 = &unk_1002828D0;
  objc_copyWeak(&v13, a1 + 6);
  v14 = v17 & 1;
  v10 = location;
  v11 = a1[4];
  v12 = a1[5];
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_destroyWeak(&v13);
  objc_storeStrong(&location, 0);
}

void sub_1000E433C(uint64_t a1)
{
  id WeakRetained;
  NSString *v3;
  id v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t v8[15];
  os_log_type_t v9;
  os_log_t v10;
  int v11;
  char v12;
  id v13;
  char v14;
  id v15;
  os_log_type_t v16;
  os_log_t oslog;
  id location[3];
  uint8_t buf[24];

  location[2] = (id)a1;
  location[1] = (id)a1;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  location[0] = WeakRetained;
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    v10 = (os_log_t)(id)_BYLoggingFacility(WeakRetained);
    v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v6 = v10;
      v7 = v9;
      sub_100038C3C(v8);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Sign-in succeeded!", v8, 2u);
    }
    objc_storeStrong((id *)&v10, 0);
    objc_msgSend(*(id *)(a1 + 48), "markSignInCompleted");
    objc_msgSend(*(id *)(a1 + 40), "_signInSucceeded");
    v11 = 0;
  }
  else
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(WeakRetained);
    v16 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      v14 = 0;
      v12 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v3 = *(NSString **)(a1 + 32);
      }
      else if (*(_QWORD *)(a1 + 32))
      {
        v15 = objc_msgSend(*(id *)(a1 + 32), "domain");
        v14 = 1;
        v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v15, objc_msgSend(*(id *)(a1 + 32), "code"));
        v13 = v3;
        v12 = 1;
      }
      else
      {
        v3 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v3);
      _os_log_error_impl((void *)&_mh_execute_header, oslog, v16, "Sign-in failed: %{public}@", buf, 0xCu);
      if ((v12 & 1) != 0)

      if ((v14 & 1) != 0)
    }
    objc_storeStrong((id *)&oslog, 0);
    objc_msgSend(location[0], "setEnabled:", 1);
    v4 = objc_msgSend(*(id *)(a1 + 40), "navigationController");
    v5 = objc_msgSend(v4, "popToViewController:animated:", location[0], 1);

    v11 = 1;
  }
  objc_storeStrong(location, 0);
}

void sub_1000E45D0(NSObject *a1, void *a2, void *a3)
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  id WeakRetained;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void **v15;
  int v16;
  int v17;
  void (*v18)(uint64_t, void *, void *);
  void *v19;
  objc_class *v20;
  id v21;
  uint8_t buf[7];
  os_log_type_t v23;
  os_log_t oslog[2];
  id v25;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v25 = 0;
  objc_storeStrong(&v25, a3);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
  v23 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v6 = oslog[0];
    v7 = v23;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Beginning authentication...", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  WeakRetained = objc_loadWeakRetained((id *)&a1[5].isa);
  objc_msgSend(WeakRetained, "setEnabled:", 0);

  v9 = objc_loadWeakRetained((id *)&a1[5].isa);
  v10 = objc_msgSend(v9, "navigationController");
  v11 = objc_loadWeakRetained((id *)&a1[6].isa);
  objc_msgSend(v11, "setNavigationController:", v10);

  v12 = objc_loadWeakRetained((id *)&a1[6].isa);
  v13 = location[0];
  v14 = v25;
  v15 = _NSConcreteStackBlock;
  v16 = -1073741824;
  v17 = 0;
  v18 = sub_1000E47D4;
  v19 = &unk_100282970;
  v20 = a1[4].isa;
  objc_copyWeak(&v21, (id *)&a1[6].isa);
  objc_msgSend(v12, "authenticateWithUsername:password:completion:", v13, v14, &v15);

  objc_destroyWeak(&v21);
  objc_storeStrong((id *)&v20, 0);
  objc_storeStrong(&v25, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E47BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  id *v11;

  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void sub_1000E47D4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id WeakRetained;
  id v7;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v7 = 0;
  objc_storeStrong(&v7, a3);
  v5 = *(_QWORD *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(uint64_t, id, id, id))(v5 + 16))(v5, WeakRetained, location[0], v7);

  objc_storeStrong(&v7, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E4868(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id WeakRetained;
  id v7;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v7 = 0;
  objc_storeStrong(&v7, a3);
  v5 = *(_QWORD *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(uint64_t, id, id, id))(v5 + 16))(v5, WeakRetained, location[0], v7);

  objc_storeStrong(&v7, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E5194(uint64_t a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;
  id *v24;
  id *v25;
  id *v26;
  id *v27;
  id *v28;
  uint64_t v29;
  id v30;

  *(_QWORD *)(v29 - 184) = a1;
  *(_DWORD *)(v29 - 188) = a2;
  objc_destroyWeak(v28);
  objc_destroyWeak(v27);
  objc_destroyWeak(&location);
  objc_destroyWeak(v26);
  objc_destroyWeak(v25);
  objc_destroyWeak(v24);
  objc_destroyWeak(&v30);
  objc_destroyWeak(v23);
  objc_destroyWeak((id *)(v29 - 168));
  _Unwind_Resume(*(_Unwind_Exception **)(v29 - 184));
}

void sub_1000E525C(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  id WeakRetained;
  _WORD v5[3];
  os_log_type_t v6;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v6;
    sub_100038C3C(v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "iForgot tapped", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  WeakRetained = objc_loadWeakRetained((id *)&a1[4].isa);
  objc_msgSend(WeakRetained, "showCredentialRecovery");

}

void sub_1000E5318(NSObject *a1)
{
  id WeakRetained;
  char v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  id v7;
  _WORD v8[3];
  os_log_type_t v9;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  WeakRetained = objc_loadWeakRetained((id *)&a1[4].isa);
  v3 = objc_msgSend(WeakRetained, "isMovingToParentViewController") ^ 1;

  if ((v3 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v5 = oslog[0];
      v6 = v9;
      sub_100038C3C(v8);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Navigated back, cancelling auth", (uint8_t *)v8, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    v7 = objc_loadWeakRetained((id *)&a1[5].isa);
    objc_msgSend(v7, "cancelAuthentication");

  }
}

void sub_1000E53F8(id *a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  NSString *v8;
  void *v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  void **v13;
  int v14;
  int v15;
  void (*v16)(uint64_t);
  void *v17;
  id v18;
  id v19;
  id v20;
  uint8_t v21[7];
  os_log_type_t v22;
  os_log_t oslog;
  int v24;
  void **block;
  int v26;
  int v27;
  void (*v28)(id *);
  void *v29;
  id v30;
  id v31;
  char v32;
  id v33;
  char v34;
  id v35;
  os_log_type_t v36;
  id v37[2];
  id v38;
  id v39;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v39 = 0;
  objc_storeStrong(&v39, a3);
  v38 = 0;
  objc_storeStrong(&v38, a4);
  v37[1] = a1;
  if (v38)
  {
    v37[0] = (id)_BYLoggingFacility(v7);
    v36 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v37[0], OS_LOG_TYPE_ERROR))
    {
      v34 = 0;
      v32 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v8 = (NSString *)v38;
      }
      else if (v38)
      {
        v35 = objc_msgSend(v38, "domain");
        v34 = 1;
        v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v35, objc_msgSend(v38, "code"));
        v33 = v8;
        v32 = 1;
      }
      else
      {
        v8 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v8);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v37[0], v36, "Authentication failed: %{public}@", buf, 0xCu);
      if ((v32 & 1) != 0)

      if ((v34 & 1) != 0)
    }
    objc_storeStrong(v37, 0);
    v9 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v26 = -1073741824;
    v27 = 0;
    v28 = sub_1000E57D4;
    v29 = &unk_100280E18;
    objc_copyWeak(&v31, a1 + 5);
    v30 = a1[4];
    dispatch_async((dispatch_queue_t)v9, &block);

    v24 = 1;
    objc_storeStrong(&v30, 0);
    objc_destroyWeak(&v31);
  }
  else
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v7);
    v22 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v10 = oslog;
      v11 = v22;
      sub_100038C3C(v21);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Authentication succeeded!", v21, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    v12 = &_dispatch_main_q;
    v13 = _NSConcreteStackBlock;
    v14 = -1073741824;
    v15 = 0;
    v16 = sub_1000E5874;
    v17 = &unk_100282A88;
    v18 = a1[4];
    v19 = v39;
    objc_copyWeak(&v20, a1 + 5);
    dispatch_async((dispatch_queue_t)v12, &v13);

    objc_destroyWeak(&v20);
    objc_storeStrong(&v19, 0);
    objc_storeStrong(&v18, 0);
    v24 = 0;
  }
  objc_storeStrong(&v38, 0);
  objc_storeStrong(&v39, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E57D4(id *a1)
{
  id WeakRetained;
  id v3;
  id v4;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 5);
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  objc_msgSend(WeakRetained, "setEnabled:", 1);

  v3 = objc_msgSend(a1[4], "navigationController");
  v4 = objc_msgSend(v3, "popToViewController:animated:", location[0], 1);

  objc_storeStrong(location, 0);
}

void sub_1000E5874(uint64_t a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  id v6;
  NSArray *v7;
  uint64_t v8;
  void **v9;
  int v10;
  int v11;
  void (*v12)(uint64_t, char, id);
  void *v13;
  id v14;
  id v15;
  uint8_t buf[7];
  os_log_type_t v17;
  os_log_t oslog;
  id location[3];
  _QWORD v20[2];

  location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = -[BuddyAppleIDSpinnerPage initWithAccountMode:]([BuddyAppleIDSpinnerPage alloc], "initWithAccountMode:", objc_msgSend(*(id *)(a1 + 32), "operationType"));
  v2 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
  objc_msgSend(v2, "pushViewController:animated:", location[0], 1);

  oslog = (os_log_t)(id)_BYLoggingFacility(v3);
  v17 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog;
    v5 = v17;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Beginning sign-in...", buf, 2u);
  }
  objc_storeStrong((id *)&oslog, 0);
  v6 = objc_msgSend(*(id *)(a1 + 32), "signInTask");
  v20[0] = AIDAServiceTypeCloud;
  v20[1] = AIDAServiceTypeStore;
  v7 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v20, 2);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = _NSConcreteStackBlock;
  v10 = -1073741824;
  v11 = 0;
  v12 = sub_1000E5B00;
  v13 = &unk_100282A10;
  objc_copyWeak(&v15, (id *)(a1 + 48));
  v14 = *(id *)(a1 + 32);
  objc_msgSend(v6, "signInToServices:authenticationResults:completion:", v7, v8, &v9);

  objc_storeStrong(&v14, 0);
  objc_destroyWeak(&v15);
  objc_storeStrong(location, 0);
}

void sub_1000E5ADC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  id *v11;

  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void sub_1000E5B00(uint64_t a1, char a2, id obj)
{
  void *v4;
  void **v5;
  int v6;
  int v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  id v11;
  id v12;
  char v13;
  uint64_t v14;
  id location;
  char v16;
  uint64_t v17;

  v17 = a1;
  v16 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v14 = a1;
  v4 = &_dispatch_main_q;
  v5 = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_1000E5C28;
  v9 = &unk_1002829E8;
  objc_copyWeak(&v12, (id *)(a1 + 40));
  v13 = v16 & 1;
  v10 = location;
  v11 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)v4, &v5);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_destroyWeak(&v12);
  objc_storeStrong(&location, 0);
}

void sub_1000E5C28(uint64_t a1)
{
  id WeakRetained;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  id v7;
  _WORD v8[7];
  os_log_type_t v9;
  os_log_t v10;
  int v11;
  os_log_type_t v12;
  os_log_t oslog;
  id location[3];
  uint8_t buf[24];

  location[2] = (id)a1;
  location[1] = (id)a1;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  location[0] = WeakRetained;
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    v10 = (os_log_t)(id)_BYLoggingFacility(WeakRetained);
    v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v10;
      v6 = v9;
      sub_100038C3C(v8);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Sign-in succeeded!", (uint8_t *)v8, 2u);
    }
    objc_storeStrong((id *)&v10, 0);
    v7 = objc_msgSend(*(id *)(a1 + 40), "delegate");
    objc_msgSend(v7, "appleIDControllerFinished:", *(_QWORD *)(a1 + 40));

    v11 = 0;
  }
  else
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(WeakRetained);
    v12 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      sub_100038C28((uint64_t)buf, *(_QWORD *)(a1 + 32));
      _os_log_error_impl((void *)&_mh_execute_header, oslog, v12, "Sign-in failed: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    objc_msgSend(location[0], "setEnabled:", 1);
    v3 = objc_msgSend(*(id *)(a1 + 40), "navigationController");
    v4 = objc_msgSend(v3, "popToViewController:animated:", location[0], 1);

    v11 = 1;
  }
  objc_storeStrong(location, 0);
}

void sub_1000E5E0C(NSObject *a1, void *a2, void *a3)
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  id WeakRetained;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  void **v15;
  int v16;
  int v17;
  void (*v18)(uint64_t, void *, void *);
  void *v19;
  objc_class *v20;
  id v21;
  uint8_t buf[7];
  os_log_type_t v23;
  os_log_t oslog[2];
  id v25;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v25 = 0;
  objc_storeStrong(&v25, a3);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
  v23 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v6 = oslog[0];
    v7 = v23;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Beginning authentication...", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  WeakRetained = objc_loadWeakRetained((id *)&a1[5].isa);
  objc_msgSend(WeakRetained, "setEnabled:", 0);

  v9 = objc_loadWeakRetained((id *)&a1[5].isa);
  v10 = objc_msgSend(v9, "navigationController");
  v11 = objc_loadWeakRetained((id *)&a1[6].isa);
  objc_msgSend(v11, "setNavigationController:", v10);

  v12 = objc_loadWeakRetained((id *)&a1[6].isa);
  v13 = location[0];
  v14 = v25;
  v15 = _NSConcreteStackBlock;
  v16 = -1073741824;
  v17 = 0;
  v18 = sub_1000E6010;
  v19 = &unk_100282970;
  v20 = a1[4].isa;
  objc_copyWeak(&v21, (id *)&a1[6].isa);
  objc_msgSend(v12, "authenticateWithUsername:password:completion:", v13, v14, &v15);

  objc_destroyWeak(&v21);
  objc_storeStrong((id *)&v20, 0);
  objc_storeStrong(&v25, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E5FF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  id *v11;

  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void sub_1000E6010(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id WeakRetained;
  id v7;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v7 = 0;
  objc_storeStrong(&v7, a3);
  v5 = *(_QWORD *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(uint64_t, id, id, id))(v5 + 16))(v5, WeakRetained, location[0], v7);

  objc_storeStrong(&v7, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E60A4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  id WeakRetained;
  id v7;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v7 = 0;
  objc_storeStrong(&v7, a3);
  v5 = *(_QWORD *)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  (*(void (**)(uint64_t, id, id, id))(v5 + 16))(v5, WeakRetained, location[0], v7);

  objc_storeStrong(&v7, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E6EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object)
{
  id *v17;
  uint64_t v18;

  objc_destroyWeak(v17);
  objc_destroyWeak((id *)(v18 - 80));
  _Unwind_Resume(a1);
}

void sub_1000E6EFC(id *a1)
{
  id WeakRetained;
  char v3;
  id v4;
  id v5;
  void **v6;
  int v7;
  int v8;
  uint64_t (*v9)(id *, void *);
  void *v10;
  id v11[3];

  v11[2] = a1;
  v11[1] = a1;
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  v3 = objc_msgSend(WeakRetained, "isMovingToParentViewController") ^ 1;

  if ((v3 & 1) != 0)
    objc_msgSend(a1[4], "cancelAuthentication");
  v4 = objc_msgSend(a1[4], "twoAccountsiCloudSignInController");

  if (v4)
  {
    v5 = a1[4];
    v6 = _NSConcreteStackBlock;
    v7 = -1073741824;
    v8 = 0;
    v9 = sub_1000E6FE8;
    v10 = &unk_100282A60;
    v11[0] = a1[4];
    objc_msgSend(v5, "_removeBackToViewControllerMatchingBlock:withOffset:", &v6, 1);
    objc_storeStrong(v11, 0);
  }
}

uint64_t sub_1000E6FE8(id *a1, void *a2)
{
  id *v2;
  id v3;
  id v4;
  id location[2];

  v2 = a1;
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = location[0];
  v4 = objc_msgSend(v2[4], "twoAccountsiCloudSignInController");
  LOBYTE(v2) = v3 == v4;

  objc_storeStrong(location, 0);
  return v2 & 1;
}

void sub_1000E7050(id *a1, void *a2, void *a3)
{
  id WeakRetained;
  BuddyAppleIDSignInTask *v6;
  id v7;
  id v8;
  BuddyAppleIDSignInTask *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void **v27;
  int v28;
  int v29;
  void (*v30)(id *, void *, void *);
  void *v31;
  id v32;
  id v33;
  uint8_t v34[15];
  os_log_type_t v35;
  os_log_t v36;
  os_log_type_t v37;
  os_log_t oslog;
  int v39;
  id *v40;
  id v41;
  id location[2];
  uint8_t buf[40];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v41 = 0;
  objc_storeStrong(&v41, a3);
  v40 = a1;
  if (location[0] || v41)
  {
    WeakRetained = objc_loadWeakRetained(a1 + 5);
    objc_msgSend(a1[4], "setAuthAttemptLandingViewController:", WeakRetained);

    v6 = [BuddyAppleIDSignInTask alloc];
    v7 = objc_msgSend(a1[4], "featureFlags");
    v8 = +[BuddyAccountTools sharedBuddyAccountTools](BuddyAccountTools, "sharedBuddyAccountTools");
    v9 = -[BuddyAppleIDSignInTask initWithFeatureFlags:accountTools:](v6, "initWithFeatureFlags:accountTools:", v7, v8);
    objc_msgSend(a1[4], "setSignInTask:", v9);

    v10 = objc_loadWeakRetained(a1 + 5);
    v11 = objc_msgSend(v10, "navigationController");
    v12 = objc_msgSend(a1[4], "signInTask");
    objc_msgSend(v12, "setNavigationController:", v11);

    v13 = objc_msgSend(a1[4], "signInTask");
    objc_msgSend(v13, "setServiceType:", 2);

    LOBYTE(v13) = objc_msgSend(a1[4], "_isRestore");
    v14 = objc_msgSend(a1[4], "signInTask");
    objc_msgSend(v14, "setRestoreFromBackupMode:", v13 & 1);

    v15 = objc_msgSend(a1[4], "featureFlags");
    LOBYTE(v14) = objc_msgSend(v15, "isUseCDPContextSecretInsteadOfSBDSecretEnabled");

    if ((v14 & 1) != 0)
    {
      oslog = (os_log_t)(id)_BYLoggingFacility(v16);
      v37 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
      {
        v17 = objc_msgSend(a1[4], "passcodeCacheManager");
        v18 = objc_msgSend(a1[4], "signInTask");
        sub_1000CB654((uint64_t)buf, (uint64_t)"-[BuddyAppleIDController _showTwoAccountsiTunesSignInController]_block_invoke_3", (uint64_t)v17, (uint64_t)v18);
        _os_log_impl((void *)&_mh_execute_header, oslog, v37, "%s: Setting cache manager %@ on sign in task %@", buf, 0x20u);

      }
      objc_storeStrong((id *)&oslog, 0);
      v19 = objc_msgSend(a1[4], "passcodeCacheManager");
      v20 = objc_msgSend(a1[4], "signInTask");
      objc_msgSend(v20, "setCacheManager:", v19);

    }
    v36 = (os_log_t)(id)_BYLoggingFacility(v16);
    v35 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
    {
      v21 = v36;
      v22 = v35;
      sub_100038C3C(v34);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Beginning authentication for store account...", v34, 2u);
    }
    objc_storeStrong((id *)&v36, 0);
    v23 = objc_loadWeakRetained(a1 + 5);
    objc_msgSend(v23, "setEnabled:", 0);

    v24 = objc_msgSend(a1[4], "signInTask");
    v25 = location[0];
    v26 = v41;
    v27 = _NSConcreteStackBlock;
    v28 = -1073741824;
    v29 = 0;
    v30 = sub_1000E75DC;
    v31 = &unk_100282B00;
    objc_copyWeak(&v33, a1 + 5);
    v32 = a1[4];
    objc_msgSend(v24, "authenticateWithUsername:password:completion:", v25, v26, &v27);

    objc_storeStrong(&v32, 0);
    objc_destroyWeak(&v33);
    v39 = 0;
  }
  else
  {
    objc_msgSend(a1[4], "_signInSucceeded");
    v39 = 1;
  }
  objc_storeStrong(&v41, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E75B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  id *v11;

  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void sub_1000E75DC(id *a1, void *a2, void *a3)
{
  uint64_t v5;
  NSString *v6;
  void *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  void **v11;
  int v12;
  int v13;
  void (*v14)(uint64_t);
  void *v15;
  id v16;
  id v17;
  id v18;
  id v19;
  uint8_t v20[7];
  os_log_type_t v21;
  os_log_t oslog;
  int v23;
  void **block;
  int v25;
  int v26;
  void (*v27)(uint64_t);
  void *v28;
  id v29;
  id v30;
  id v31;
  char v32;
  NSString *v33;
  char v34;
  id v35;
  os_log_type_t v36;
  id v37[2];
  id v38;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v38 = 0;
  objc_storeStrong(&v38, a3);
  v37[1] = a1;
  if (v38)
  {
    v37[0] = (id)_BYLoggingFacility(v5);
    v36 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v37[0], OS_LOG_TYPE_ERROR))
    {
      v34 = 0;
      v32 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v6 = (NSString *)v38;
      }
      else if (v38)
      {
        v35 = objc_msgSend(v38, "domain");
        v34 = 1;
        v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v35, objc_msgSend(v38, "code"));
        v33 = v6;
        v32 = 1;
      }
      else
      {
        v6 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v6);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v37[0], v36, "Authentication failed: %{public}@", buf, 0xCu);
      if ((v32 & 1) != 0)

      if ((v34 & 1) != 0)
    }
    objc_storeStrong(v37, 0);
    v7 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v25 = -1073741824;
    v26 = 0;
    v27 = sub_1000E79D8;
    v28 = &unk_100282A88;
    objc_copyWeak(&v31, a1 + 5);
    v29 = a1[4];
    v30 = v38;
    dispatch_async((dispatch_queue_t)v7, &block);

    v23 = 1;
    objc_storeStrong(&v30, 0);
    objc_storeStrong(&v29, 0);
    objc_destroyWeak(&v31);
  }
  else
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v5);
    v21 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v8 = oslog;
      v9 = v21;
      sub_100038C3C(v20);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Authentication succeeded!", v20, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    v10 = &_dispatch_main_q;
    v11 = _NSConcreteStackBlock;
    v12 = -1073741824;
    v13 = 0;
    v14 = sub_1000E7A38;
    v15 = &unk_100282AD8;
    v16 = a1[4];
    v17 = location[0];
    objc_copyWeak(&v19, a1 + 5);
    v18 = v38;
    dispatch_async((dispatch_queue_t)v10, &v11);

    objc_storeStrong(&v18, 0);
    objc_destroyWeak(&v19);
    objc_storeStrong(&v17, 0);
    objc_storeStrong(&v16, 0);
    v23 = 0;
  }
  objc_storeStrong(&v38, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E79D8(uint64_t a1)
{
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(location[0], "setEnabled:", 1);
  objc_msgSend(*(id *)(a1 + 32), "_signInFailedWithError:", *(_QWORD *)(a1 + 40));
  objc_storeStrong(location, 0);
}

void sub_1000E7A38(uint64_t a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  id v6;
  NSArray *v7;
  uint64_t v8;
  void **v9;
  int v10;
  int v11;
  void (*v12)(id *, char, id);
  void *v13;
  id v14;
  id v15;
  id v16;
  uint8_t buf[15];
  os_log_type_t v18;
  os_log_t oslog;
  id location[3];
  uint64_t v21;

  location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = -[BuddyAppleIDSpinnerPage initWithAccountMode:]([BuddyAppleIDSpinnerPage alloc], "initWithAccountMode:", objc_msgSend(*(id *)(a1 + 32), "operationType"));
  v2 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
  objc_msgSend(v2, "pushViewController:animated:", location[0], 1);

  oslog = (os_log_t)(id)_BYLoggingFacility(v3);
  v18 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog;
    v5 = v18;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Beginning sign-in for store account...", buf, 2u);
  }
  objc_storeStrong((id *)&oslog, 0);
  v6 = objc_msgSend(*(id *)(a1 + 32), "signInTask");
  v21 = AIDAServiceTypeStore;
  v7 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v21, 1);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = _NSConcreteStackBlock;
  v10 = -1073741824;
  v11 = 0;
  v12 = sub_1000E7CDC;
  v13 = &unk_100282AB0;
  objc_copyWeak(&v16, (id *)(a1 + 56));
  v14 = *(id *)(a1 + 32);
  v15 = *(id *)(a1 + 48);
  objc_msgSend(v6, "signInToServices:authenticationResults:completion:", v7, v8, &v9);

  objc_storeStrong(&v15, 0);
  objc_storeStrong(&v14, 0);
  objc_destroyWeak(&v16);
  objc_storeStrong(location, 0);
}

void sub_1000E7CB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  id *v12;

  objc_destroyWeak(v12);
  _Unwind_Resume(a1);
}

void sub_1000E7CDC(id *a1, char a2, id obj)
{
  void *v4;
  void **block;
  int v6;
  int v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  char v14;
  id *v15;
  id location;
  char v17;
  id *v18;

  v18 = a1;
  v17 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v15 = a1;
  v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_1000E7E24;
  v9 = &unk_1002828D0;
  objc_copyWeak(&v13, a1 + 6);
  v14 = v17 & 1;
  v10 = location;
  v11 = a1[4];
  v12 = a1[5];
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_destroyWeak(&v13);
  objc_storeStrong(&location, 0);
}

void sub_1000E7E24(uint64_t a1)
{
  id WeakRetained;
  NSObject *v3;
  os_log_type_t v4;
  _WORD v5[7];
  os_log_type_t v6;
  os_log_t v7;
  int v8;
  os_log_type_t v9;
  os_log_t oslog;
  id location[3];
  uint8_t buf[24];

  location[2] = (id)a1;
  location[1] = (id)a1;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 56));
  location[0] = WeakRetained;
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    v7 = (os_log_t)(id)_BYLoggingFacility(WeakRetained);
    v6 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v3 = v7;
      v4 = v6;
      sub_100038C3C(v5);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sign-in succeeded!", (uint8_t *)v5, 2u);
    }
    objc_storeStrong((id *)&v7, 0);
    objc_msgSend(*(id *)(a1 + 40), "_signInSucceeded");
    v8 = 0;
  }
  else
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(WeakRetained);
    v9 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      sub_100038C28((uint64_t)buf, *(_QWORD *)(a1 + 32));
      _os_log_error_impl((void *)&_mh_execute_header, oslog, v9, "Sign-in failed: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    objc_msgSend(location[0], "setEnabled:", 1);
    objc_msgSend(*(id *)(a1 + 40), "_signInFailedWithError:", *(_QWORD *)(a1 + 48));
    v8 = 1;
  }
  objc_storeStrong(location, 0);
}

void sub_1000E8130(NSObject *a1, void *a2, void *a3)
{
  uint64_t v5;
  NSString *v6;
  id v7;
  uint64_t v8;
  void (**v9)(id, id, id);
  NSObject *v10;
  os_log_type_t v11;
  uint8_t v12[7];
  char v13;
  os_log_t v14;
  char v15;
  id v16;
  char v17;
  id v18;
  os_log_type_t v19;
  os_log_t oslog[2];
  id v21;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v21 = 0;
  objc_storeStrong(&v21, a3);
  oslog[1] = a1;
  if (v21)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    v19 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v17 = 0;
      v15 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v6 = (NSString *)v21;
      }
      else if (v21)
      {
        v18 = objc_msgSend(v21, "domain");
        v17 = 1;
        v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v18, objc_msgSend(v21, "code"));
        v16 = v6;
        v15 = 1;
      }
      else
      {
        v6 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v6);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v19, "Proximity authentication failed: %{public}@", buf, 0xCu);
      if ((v15 & 1) != 0)

      if ((v17 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  v7 = -[objc_class proximityLoginHandler](a1[4].isa, "proximityLoginHandler");

  if (v7)
  {
    v9 = (void (**)(id, id, id))-[objc_class proximityLoginHandler](a1[4].isa, "proximityLoginHandler");
    v9[2](v9, location[0], v21);

  }
  else
  {
    v14 = (os_log_t)(id)_BYLoggingFacility(v8);
    v13 = 17;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_FAULT))
    {
      v10 = v14;
      v11 = v13;
      sub_100038C3C(v12);
      _os_log_fault_impl((void *)&_mh_execute_header, v10, v11, "Proximity authentation called without a handler!", v12, 2u);
    }
    objc_storeStrong((id *)&v14, 0);
  }
  objc_storeStrong(&v21, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E85F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object)
{
  id *v17;
  uint64_t v18;

  objc_destroyWeak(v17);
  objc_destroyWeak((id *)(v18 - 80));
  _Unwind_Resume(a1);
}

void sub_1000E8640(uint64_t a1)
{
  id WeakRetained;
  char v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = objc_msgSend(WeakRetained, "isMovingToParentViewController", a1, a1) ^ 1;

  if ((v3 & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "cancelAuthentication");
}

void sub_1000E86A0(NSObject *a1, void *a2, void *a3)
{
  id WeakRetained;
  BuddyAppleIDSignInTask *v6;
  id v7;
  id v8;
  BuddyAppleIDSignInTask *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  id v23;
  id v24;
  id v25;
  id v26;
  void **v27;
  int v28;
  int v29;
  void (*v30)(id *, void *, void *);
  void *v31;
  objc_class *v32;
  id v33;
  uint8_t v34[7];
  os_log_type_t v35;
  os_log_t v36;
  os_log_type_t v37;
  os_log_t oslog[2];
  id v39;
  id location[2];
  uint8_t buf[40];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v39 = 0;
  objc_storeStrong(&v39, a3);
  oslog[1] = a1;
  WeakRetained = objc_loadWeakRetained((id *)&a1[5].isa);
  -[objc_class setAuthAttemptLandingViewController:](a1[4].isa, "setAuthAttemptLandingViewController:", WeakRetained);

  v6 = [BuddyAppleIDSignInTask alloc];
  v7 = -[objc_class featureFlags](a1[4].isa, "featureFlags");
  v8 = +[BuddyAccountTools sharedBuddyAccountTools](BuddyAccountTools, "sharedBuddyAccountTools");
  v9 = -[BuddyAppleIDSignInTask initWithFeatureFlags:accountTools:](v6, "initWithFeatureFlags:accountTools:", v7, v8);
  -[objc_class setSignInTask:](a1[4].isa, "setSignInTask:", v9);

  v10 = objc_loadWeakRetained((id *)&a1[5].isa);
  v11 = objc_msgSend(v10, "navigationController");
  v12 = -[objc_class signInTask](a1[4].isa, "signInTask");
  objc_msgSend(v12, "setNavigationController:", v11);

  v13 = -[objc_class signInTask](a1[4].isa, "signInTask");
  objc_msgSend(v13, "setMakeStoreServiceActive:", 0);

  LOBYTE(v13) = -[objc_class _isRestore](a1[4].isa, "_isRestore");
  v14 = -[objc_class signInTask](a1[4].isa, "signInTask");
  objc_msgSend(v14, "setRestoreFromBackupMode:", v13 & 1);

  v15 = -[objc_class featureFlags](a1[4].isa, "featureFlags");
  LOBYTE(v14) = objc_msgSend(v15, "isUseCDPContextSecretInsteadOfSBDSecretEnabled");

  if ((v14 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v16);
    v37 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v17 = -[objc_class passcodeCacheManager](a1[4].isa, "passcodeCacheManager");
      v18 = -[objc_class signInTask](a1[4].isa, "signInTask");
      sub_1000CB654((uint64_t)buf, (uint64_t)"-[BuddyAppleIDController _showTwoAccountsiCloudSignInController]_block_invoke_2", (uint64_t)v17, (uint64_t)v18);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v37, "%s: Setting cache manager %@ on sign in task %@", buf, 0x20u);

    }
    objc_storeStrong((id *)oslog, 0);
    v19 = -[objc_class passcodeCacheManager](a1[4].isa, "passcodeCacheManager");
    v20 = -[objc_class signInTask](a1[4].isa, "signInTask");
    objc_msgSend(v20, "setCacheManager:", v19);

  }
  v36 = (os_log_t)(id)_BYLoggingFacility(v16);
  v35 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    v21 = v36;
    v22 = v35;
    sub_100038C3C(v34);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Beginning authentication for iCloud account...", v34, 2u);
  }
  objc_storeStrong((id *)&v36, 0);
  v23 = objc_loadWeakRetained((id *)&a1[5].isa);
  objc_msgSend(v23, "setEnabled:", 0);

  v24 = -[objc_class signInTask](a1[4].isa, "signInTask");
  v25 = location[0];
  v26 = v39;
  v27 = _NSConcreteStackBlock;
  v28 = -1073741824;
  v29 = 0;
  v30 = sub_1000E8BE0;
  v31 = &unk_100282B00;
  objc_copyWeak(&v33, (id *)&a1[5].isa);
  v32 = a1[4].isa;
  objc_msgSend(v24, "authenticateWithUsername:password:completion:", v25, v26, &v27);

  objc_storeStrong((id *)&v32, 0);
  objc_destroyWeak(&v33);
  objc_storeStrong(&v39, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E8BBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  id *v11;

  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void sub_1000E8BE0(id *a1, void *a2, void *a3)
{
  uint64_t v5;
  NSString *v6;
  void *v7;
  NSObject *v8;
  os_log_type_t v9;
  void *v10;
  void **v11;
  int v12;
  int v13;
  void (*v14)(uint64_t);
  void *v15;
  id v16;
  id v17;
  id v18;
  uint8_t v19[7];
  os_log_type_t v20;
  os_log_t oslog;
  int v22;
  void **block;
  int v24;
  int v25;
  void (*v26)(uint64_t);
  void *v27;
  id v28;
  id v29;
  id v30;
  char v31;
  NSString *v32;
  char v33;
  id v34;
  os_log_type_t v35;
  id v36[2];
  id v37;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v37 = 0;
  objc_storeStrong(&v37, a3);
  v36[1] = a1;
  if (v37)
  {
    v36[0] = (id)_BYLoggingFacility(v5);
    v35 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v36[0], OS_LOG_TYPE_ERROR))
    {
      v33 = 0;
      v31 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v6 = (NSString *)v37;
      }
      else if (v37)
      {
        v34 = objc_msgSend(v37, "domain");
        v33 = 1;
        v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v34, objc_msgSend(v37, "code"));
        v32 = v6;
        v31 = 1;
      }
      else
      {
        v6 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v6);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v36[0], v35, "Authentication failed: %{public}@", buf, 0xCu);
      if ((v31 & 1) != 0)

      if ((v33 & 1) != 0)
    }
    objc_storeStrong(v36, 0);
    v7 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v24 = -1073741824;
    v25 = 0;
    v26 = sub_1000E8FBC;
    v27 = &unk_100282A88;
    objc_copyWeak(&v30, a1 + 5);
    v28 = a1[4];
    v29 = v37;
    dispatch_async((dispatch_queue_t)v7, &block);

    v22 = 1;
    objc_storeStrong(&v29, 0);
    objc_storeStrong(&v28, 0);
    objc_destroyWeak(&v30);
  }
  else
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v5);
    v20 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v8 = oslog;
      v9 = v20;
      sub_100038C3C(v19);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Authentication succeeded!", v19, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    v10 = &_dispatch_main_q;
    v11 = _NSConcreteStackBlock;
    v12 = -1073741824;
    v13 = 0;
    v14 = sub_1000E901C;
    v15 = &unk_100282A88;
    v16 = a1[4];
    v17 = location[0];
    objc_copyWeak(&v18, a1 + 5);
    dispatch_async((dispatch_queue_t)v10, &v11);

    objc_destroyWeak(&v18);
    objc_storeStrong(&v17, 0);
    objc_storeStrong(&v16, 0);
    v22 = 0;
  }
  objc_storeStrong(&v37, 0);
  objc_storeStrong(location, 0);
}

void sub_1000E8FBC(uint64_t a1)
{
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 48));
  objc_msgSend(location[0], "setEnabled:", 1);
  objc_msgSend(*(id *)(a1 + 32), "_signInFailedWithError:", *(_QWORD *)(a1 + 40));
  objc_storeStrong(location, 0);
}

void sub_1000E901C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  id v6;
  uint64_t v7;
  void **v8;
  int v9;
  int v10;
  void (*v11)(uint64_t, char, id);
  void *v12;
  id v13;
  id v14;
  uint8_t buf[15];
  os_log_type_t v16;
  os_log_t oslog;
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = -[BuddyAppleIDSpinnerPage initWithAccountMode:]([BuddyAppleIDSpinnerPage alloc], "initWithAccountMode:", objc_msgSend(*(id *)(a1 + 32), "operationType"));
  v2 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
  objc_msgSend(v2, "pushViewController:animated:", location[0], 1);

  oslog = (os_log_t)(id)_BYLoggingFacility(v3);
  v16 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog;
    v5 = v16;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Beginning sign-in for iCloud account...", buf, 2u);
  }
  objc_storeStrong((id *)&oslog, 0);
  v6 = objc_msgSend(*(id *)(a1 + 32), "signInTask");
  v7 = *(_QWORD *)(a1 + 40);
  v8 = _NSConcreteStackBlock;
  v9 = -1073741824;
  v10 = 0;
  v11 = sub_1000E91E0;
  v12 = &unk_100282B28;
  objc_copyWeak(&v14, (id *)(a1 + 48));
  v13 = *(id *)(a1 + 32);
  objc_msgSend(v6, "signInToAllServicesWithAuthenticationResults:completion:", v7, &v8);

  objc_storeStrong(&v13, 0);
  objc_destroyWeak(&v14);
  objc_storeStrong(location, 0);
}

void sub_1000E91C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  id *v11;

  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void sub_1000E91E0(uint64_t a1, char a2, id obj)
{
  void *v4;
  void **v5;
  int v6;
  int v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  id v11;
  id v12;
  char v13;
  uint64_t v14;
  id location;
  char v16;
  uint64_t v17;

  v17 = a1;
  v16 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v14 = a1;
  v4 = &_dispatch_main_q;
  v5 = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_1000E9308;
  v9 = &unk_1002829E8;
  objc_copyWeak(&v12, (id *)(a1 + 40));
  v13 = v16 & 1;
  v10 = location;
  v11 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)v4, &v5);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_destroyWeak(&v12);
  objc_storeStrong(&location, 0);
}

void sub_1000E9308(uint64_t a1)
{
  id WeakRetained;
  NSString *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t v6[15];
  os_log_type_t v7;
  os_log_t v8;
  int v9;
  char v10;
  id v11;
  char v12;
  id v13;
  os_log_type_t v14;
  os_log_t oslog;
  id location[3];
  uint8_t buf[24];

  location[2] = (id)a1;
  location[1] = (id)a1;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 48));
  location[0] = WeakRetained;
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    v8 = (os_log_t)(id)_BYLoggingFacility(WeakRetained);
    v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v4 = v8;
      v5 = v7;
      sub_100038C3C(v6);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Sign-in succeeded!", v6, 2u);
    }
    objc_storeStrong((id *)&v8, 0);
    objc_msgSend(*(id *)(a1 + 40), "_showTwoAccountsiTunesSignInController");
    v9 = 0;
  }
  else
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(WeakRetained);
    v14 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      v12 = 0;
      v10 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v3 = *(NSString **)(a1 + 32);
      }
      else if (*(_QWORD *)(a1 + 32))
      {
        v13 = objc_msgSend(*(id *)(a1 + 32), "domain");
        v12 = 1;
        v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v13, objc_msgSend(*(id *)(a1 + 32), "code"));
        v11 = v3;
        v10 = 1;
      }
      else
      {
        v3 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v3);
      _os_log_error_impl((void *)&_mh_execute_header, oslog, v14, "Sign-in failed: %{public}@", buf, 0xCu);
      if ((v10 & 1) != 0)

      if ((v12 & 1) != 0)
    }
    objc_storeStrong((id *)&oslog, 0);
    objc_msgSend(location[0], "setEnabled:", 1);
    objc_msgSend(*(id *)(a1 + 40), "_signInFailedWithError:", *(_QWORD *)(a1 + 32));
    v9 = 1;
  }
  objc_storeStrong(location, 0);
}

void sub_1000E9A14(uint64_t a1, char a2, id obj)
{
  id location;
  char v5;
  uint64_t v6;

  v6 = a1;
  v5 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  objc_msgSend(*(id *)(a1 + 32), "setUserInteractionEnabled:", 1, a1);
  objc_msgSend(*(id *)(a1 + 40), "_popBackToAuthAttemptLandingPage");
  objc_storeStrong(&location, 0);
}

double sub_1000E9E1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double result;

  *(_QWORD *)&result = 136315650;
  *(_DWORD *)a1 = 136315650;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 18) = 2112;
  *(_QWORD *)(a1 + 20) = a4;
  return result;
}

void sub_1000E9F7C(uint64_t a1)
{
  id v2;

  objc_msgSend(*(id *)(a1 + 32), "_createMeCard", a1, a1);
  objc_msgSend(*(id *)(a1 + 32), "_nameDevice");
  v2 = objc_msgSend(*(id *)(a1 + 32), "lockdownModeProvider");
  objc_msgSend(v2, "fetchAccountStateWithCompletionHandler:", &stru_100282B70);

}

void sub_1000EABAC(id *a1, void *a2, void *a3)
{
  void *v5;
  void **block;
  int v7;
  int v8;
  void (*v9)(uint64_t);
  void *v10;
  id v11;
  id v12;
  id v13[2];
  id v14;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = a1;
  v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_1000EACDC;
  v10 = &unk_100281000;
  v11 = v14;
  v12 = a1[4];
  v13[0] = location[0];
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_1000EACDC(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void **v3;
  int v4;
  int v5;
  void (*v6)(uint64_t, char, id);
  void *v7;
  id v8[3];

  v8[2] = (id)a1;
  v8[1] = (id)a1;
  if (*(_QWORD *)(a1 + 32))
  {
    objc_msgSend(*(id *)(a1 + 40), "_authCompletedShouldProceed:error:", 0, *(_QWORD *)(a1 + 32));
  }
  else
  {
    v1 = *(void **)(a1 + 40);
    v2 = *(_QWORD *)(a1 + 48);
    v3 = _NSConcreteStackBlock;
    v4 = -1073741824;
    v5 = 0;
    v6 = sub_1000EAD9C;
    v7 = &unk_100280FD8;
    v8[0] = *(id *)(a1 + 40);
    objc_msgSend(v1, "_upgradeAccountWithAuthenticationResults:completion:", v2, &v3);
    objc_storeStrong(v8, 0);
  }
}

void sub_1000EAD9C(uint64_t a1, char a2, id obj)
{
  void *v4;
  void **block;
  int v6;
  int v7;
  id (*v8)(uint64_t);
  void *v9;
  id v10;
  id v11;
  char v12;
  uint64_t v13;
  id location;
  char v15;
  uint64_t v16;

  v16 = a1;
  v15 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v13 = a1;
  v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_1000EAEA0;
  v9 = &unk_100280FB0;
  v10 = *(id *)(a1 + 32);
  v12 = v15 & 1;
  v11 = location;
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

id sub_1000EAEA0(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_appleIDControllerCompletedShouldProceed:error:", *(_BYTE *)(a1 + 48) & 1, *(_QWORD *)(a1 + 40), a1, a1);
}

void sub_1000EB430(uint64_t a1, char a2, id obj)
{
  void *v4;
  void **v5;
  int v6;
  int v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  id v11;
  id v12;
  char v13;
  uint64_t v14;
  id location;
  char v16;
  uint64_t v17;

  v17 = a1;
  v16 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v14 = a1;
  v4 = &_dispatch_main_q;
  v5 = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_1000EB55C;
  v9 = &unk_100282B98;
  v10 = *(id *)(a1 + 32);
  v13 = v16 & 1;
  v11 = location;
  v12 = *(id *)(a1 + 40);
  dispatch_async((dispatch_queue_t)v4, &v5);

  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

void sub_1000EB55C(uint64_t a1)
{
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint64_t v5;
  char v6;
  id v7;
  id v8;
  _WORD v9[3];
  os_log_type_t v10;
  os_log_t v11;
  os_log_type_t v12;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  v2 = objc_msgSend(*(id *)(a1 + 32), "_didFinishResponsibilityViewControllerPushSeesion");
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    v11 = (os_log_t)(id)_BYLoggingFacility(v2);
    v10 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v3 = v11;
      v4 = v10;
      sub_100038C3C(v9);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sign-in succeeded!", (uint8_t *)v9, 2u);
    }
    objc_storeStrong((id *)&v11, 0);
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v2);
    v12 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_100038C28((uint64_t)buf, *(_QWORD *)(a1 + 40));
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v12, "Sign-in failed: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  if (*(_QWORD *)(a1 + 48))
  {
    v5 = *(_QWORD *)(a1 + 48);
    v6 = *(_BYTE *)(a1 + 56);
    v7 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", AIDAServiceTypeCloud);
    v8 = objc_msgSend(v7, "error");
    (*(void (**)(uint64_t, _QWORD, id))(v5 + 16))(v5, v6 & 1, v8);

  }
}

void sub_1000EB814(id *a1, void *a2, void *a3)
{
  void ***v5;
  NSString *v6;
  id v7;
  void *v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t v11[15];
  os_log_type_t v12;
  os_log_t v13;
  void **block;
  int v15;
  int v16;
  void (*v17);
  void *v18;
  id v19;
  id v20;
  id v21;
  char v22;
  id v23;
  char v24;
  id v25;
  os_log_type_t v26;
  os_log_t oslog;
  void **v28;
  int v29;
  int v30;
  void (*v31)(id *);
  void *v32;
  id v33;
  id v34[2];
  id v35;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v35 = 0;
  objc_storeStrong(&v35, a3);
  v34[1] = a1;
  v28 = _NSConcreteStackBlock;
  v29 = -1073741824;
  v30 = 0;
  v31 = sub_1000EBBC4;
  v32 = &unk_100280730;
  v33 = a1[4];
  v5 = objc_retainBlock(&v28);
  v34[0] = v5;
  if (v35)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v5);
    v26 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      v24 = 0;
      v22 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v6 = (NSString *)v35;
      }
      else if (v35)
      {
        v25 = objc_msgSend(v35, "domain");
        v24 = 1;
        v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v25, objc_msgSend(v35, "code"));
        v23 = v6;
        v22 = 1;
      }
      else
      {
        v6 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v6);
      _os_log_error_impl((void *)&_mh_execute_header, oslog, v26, "Security upgrade authentication failed: %{public}@", buf, 0xCu);
      if ((v22 & 1) != 0)

      if ((v24 & 1) != 0)
    }
    objc_storeStrong((id *)&oslog, 0);
    (*((void (**)(void))v34[0] + 2))();
  }
  else
  {
    v7 = objc_msgSend(a1[4], "accountToUpgradeIsPrimary");
    if ((v7 & 1) != 0)
    {
      v8 = &_dispatch_main_q;
      block = _NSConcreteStackBlock;
      v15 = -1073741824;
      v16 = 0;
      v17 = sub_1000EBDAC;
      v18 = &unk_100281168;
      v19 = a1[4];
      v20 = location[0];
      v21 = v34[0];
      dispatch_async((dispatch_queue_t)v8, &block);

      objc_storeStrong(&v21, 0);
      objc_storeStrong(&v20, 0);
      objc_storeStrong(&v19, 0);
    }
    else
    {
      v13 = (os_log_t)(id)_BYLoggingFacility(v7);
      v12 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        v9 = v13;
        v10 = v12;
        sub_100038C3C(v11);
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Security upgrade authentication completed for non-primary Apple ID", v11, 2u);
      }
      objc_storeStrong((id *)&v13, 0);
      (*((void (**)(void))v34[0] + 2))();
    }
  }
  objc_storeStrong(v34, 0);
  objc_storeStrong(&v33, 0);
  objc_storeStrong(&v35, 0);
  objc_storeStrong(location, 0);
}

void sub_1000EBBC4(id *a1)
{
  void *v2;
  void **block;
  int v4;
  int v5;
  void (*v6)(id *);
  void *v7;
  id v8[3];

  v8[2] = a1;
  v8[1] = a1;
  v2 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v4 = -1073741824;
  v5 = 0;
  v6 = sub_1000EBC7C;
  v7 = &unk_100280730;
  v8[0] = a1[4];
  dispatch_async((dispatch_queue_t)v2, &block);

  objc_storeStrong(v8, 0);
}

void sub_1000EBC7C(id *a1)
{
  id v2;
  id v3;
  void **v4;
  int v5;
  int v6;
  uint64_t (*v7)(id *, void *);
  void *v8;
  id v9[3];

  v9[2] = a1;
  v9[1] = a1;
  v2 = a1[4];
  v4 = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_1000EBD44;
  v8 = &unk_100282A60;
  v9[0] = a1[4];
  objc_msgSend(v2, "_removeBackToViewControllerMatchingBlock:withOffset:", &v4, 0);
  v3 = objc_msgSend(a1[4], "delegate");
  objc_msgSend(v3, "appleIDControllerFinished:", a1[4]);

  objc_storeStrong(v9, 0);
}

uint64_t sub_1000EBD44(id *a1, void *a2)
{
  id *v2;
  id v3;
  id v4;
  id location[2];

  v2 = a1;
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = location[0];
  v4 = objc_msgSend(v2[4], "authAttemptLandingViewController");
  LOBYTE(v2) = v3 == v4;

  objc_storeStrong(location, 0);
  return v2 & 1;
}

void sub_1000EBDAC(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  Class isa;
  void **v5;
  int v6;
  int v7;
  void (*v8)(uint64_t);
  void *v9;
  objc_class *v10;
  objc_class *v11;
  objc_class *v12;
  uint8_t buf[7];
  os_log_type_t v14;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v14 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v14;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Security upgrade authentication completed for primary Apple ID; proceeding with next steps",
      buf,
      2u);
  }
  objc_storeStrong((id *)oslog, 0);
  isa = a1[4].isa;
  v5 = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_1000EBF04;
  v9 = &unk_100281168;
  v10 = a1[4].isa;
  v11 = a1[5].isa;
  v12 = a1[6].isa;
  -[objc_class _showSpinnerPageWithIdentifier:handler:](isa, "_showSpinnerPageWithIdentifier:handler:", CFSTR("appleIDSecurityUpgradePostActions"), &v5);
  objc_storeStrong((id *)&v12, 0);
  objc_storeStrong((id *)&v11, 0);
  objc_storeStrong((id *)&v10, 0);
}

void sub_1000EBF04(uint64_t a1)
{
  void *v1;
  uint64_t v2;
  void **v3;
  int v4;
  int v5;
  void (*v6)(uint64_t, char, id);
  void *v7;
  id v8[3];

  v8[2] = (id)a1;
  v8[1] = (id)a1;
  v1 = *(void **)(a1 + 32);
  v2 = *(_QWORD *)(a1 + 40);
  v3 = _NSConcreteStackBlock;
  v4 = -1073741824;
  v5 = 0;
  v6 = sub_1000EBFA4;
  v7 = &unk_100280690;
  v8[0] = *(id *)(a1 + 48);
  objc_msgSend(v1, "_upgradeAccountWithAuthenticationResults:completion:", v2, &v3);
  objc_storeStrong(v8, 0);
}

void sub_1000EBFA4(uint64_t a1, char a2, id obj)
{
  id location;
  char v5;
  uint64_t v6;

  v6 = a1;
  v5 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  (*(void (**)(_QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32));
  objc_storeStrong(&location, 0);
}

void ***sub_1000ED210(id *a1, _QWORD *a2)
{
  NSBundle *v3;
  void ***v4;
  void **v6;
  int v7;
  int v8;
  void (*v9)(id *);
  void *v10;
  id v11;
  id v12[2];
  _QWORD *v13;
  id *v14;

  v14 = a1;
  v13 = a2;
  v12[1] = a1;
  v3 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BuddyAppleIDSignInController));
  *v13 = -[NSBundle localizedStringForKey:value:table:](v3, "localizedStringForKey:value:table:", CFSTR("APPLE_ID_LOGIN_OPTIONS"), &stru_100284738, CFSTR("AppleIDAuth"));

  v6 = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_1000ED324;
  v10 = &unk_100280D78;
  v11 = a1[4];
  objc_copyWeak(v12, a1 + 5);
  v4 = objc_retainBlock(&v6);
  objc_destroyWeak(v12);
  objc_storeStrong(&v11, 0);
  return v4;
}

void sub_1000ED324(id *a1)
{
  NSBundle *v2;
  NSString *v3;
  id v4;
  NSBundle *v5;
  NSString *v6;
  UIAlertAction *v7;
  id v8;
  NSBundle *v9;
  NSString *v10;
  UIAlertAction *v11;
  id v12;
  NSBundle *v13;
  NSString *v14;
  UIAlertAction *v15;
  id v16;
  void **v17;
  uint64_t v18;
  void (*v19)(id *, void *);
  void *v20;
  id v21;
  void **v22;
  int v23;
  int v24;
  void (*v25)(uint64_t, void *);
  void *v26;
  id v27;
  id v28;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  v2 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BuddyAppleIDSignInController));
  v3 = -[NSBundle localizedStringForKey:value:table:](v2, "localizedStringForKey:value:table:", CFSTR("APPLE_ID_LOGIN_OPTIONS_TITLE"), &stru_100284738, CFSTR("AppleIDAuth"));
  location[0] = +[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v3, &stru_100284738, 0);

  v4 = location[0];
  v5 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BuddyAppleIDSignInController));
  v6 = -[NSBundle localizedStringForKey:value:table:](v5, "localizedStringForKey:value:table:", CFSTR("APPLE_ID_PROXIMITY_SIGNIN"), &stru_100284738, CFSTR("AppleIDAuth"));
  v22 = _NSConcreteStackBlock;
  v23 = -1073741824;
  v24 = 0;
  v25 = sub_1000ED714;
  v26 = &unk_100280DA0;
  v27 = a1[4];
  objc_copyWeak(&v28, a1 + 5);
  v7 = +[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v6, 0, &v22);
  objc_msgSend(v4, "addAction:", v7);

  v8 = location[0];
  v9 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BuddyAppleIDSignInController));
  v10 = -[NSBundle localizedStringForKey:value:table:](v9, "localizedStringForKey:value:table:", CFSTR("HAVE_TWO_ACCOUNTS"), &stru_100284738, CFSTR("AppleIDAuth"));
  v17 = _NSConcreteStackBlock;
  v18 = 3221225472;
  v19 = sub_1000ED77C;
  v20 = &unk_100280A28;
  v21 = a1[4];
  v11 = +[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v10, 0, &v17);
  objc_msgSend(v8, "addAction:", v11, v17, v18, v19, v20);

  v12 = location[0];
  v13 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BuddyAppleIDSignInController));
  v14 = -[NSBundle localizedStringForKey:value:table:](v13, "localizedStringForKey:value:table:", CFSTR("CANCEL"), &stru_100284738, CFSTR("AppleIDAuth"));
  v15 = +[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v14, 1, 0);
  objc_msgSend(v12, "addAction:", v15);

  v16 = objc_msgSend(a1[4], "navigationController");
  objc_msgSend(v16, "presentViewController:animated:completion:", location[0], 1, 0);

  objc_storeStrong(&v21, 0);
  objc_destroyWeak(&v28);
  objc_storeStrong(&v27, 0);
  objc_storeStrong(location, 0);
}

void sub_1000ED6E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _Unwind_Exception *exception_object)
{
  id *v16;

  objc_destroyWeak(v16);
  _Unwind_Resume(a1);
}

void sub_1000ED714(uint64_t a1, void *a2)
{
  void *v3;
  id WeakRetained;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v3, "_showProximityiCloudSignInController:", WeakRetained);

  objc_storeStrong(location, 0);
}

void sub_1000ED77C(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "_showTwoAccountsiCloudSignInController");
  objc_storeStrong(location, 0);
}

void ***sub_1000ED7C8(id *a1, _QWORD *a2)
{
  NSBundle *v3;
  void ***v4;
  void **v6;
  int v7;
  int v8;
  id (*v9)(uint64_t);
  void *v10;
  id v11[2];
  _QWORD *v12;
  id *v13;

  v13 = a1;
  v12 = a2;
  v11[1] = a1;
  v3 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BuddyAppleIDSignInController));
  *v12 = -[NSBundle localizedStringForKey:value:table:](v3, "localizedStringForKey:value:table:", CFSTR("HAVE_TWO_ACCOUNTS"), &stru_100284738, CFSTR("AppleIDAuth"));

  v6 = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_1000ED8BC;
  v10 = &unk_100280730;
  v11[0] = a1[4];
  v4 = objc_retainBlock(&v6);
  objc_storeStrong(v11, 0);
  return v4;
}

id sub_1000ED8BC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_showTwoAccountsiCloudSignInController", a1, a1);
}

void ***sub_1000ED8E4(id *a1, _QWORD *a2)
{
  NSBundle *v3;
  void ***v4;
  void **v6;
  int v7;
  int v8;
  void (*v9)(uint64_t);
  void *v10;
  id v11;
  id v12[2];
  _QWORD *v13;
  id *v14;

  v14 = a1;
  v13 = a2;
  v12[1] = a1;
  v3 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BuddyAppleIDSignInController));
  *v13 = -[NSBundle localizedStringForKey:value:table:](v3, "localizedStringForKey:value:table:", CFSTR("APPLE_ID_PROXIMITY_SIGNIN"), &stru_100284738, CFSTR("AppleIDAuth"));

  v6 = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_1000ED9F8;
  v10 = &unk_100280D78;
  v11 = a1[4];
  objc_copyWeak(v12, a1 + 5);
  v4 = objc_retainBlock(&v6);
  objc_destroyWeak(v12);
  objc_storeStrong(&v11, 0);
  return v4;
}

void sub_1000ED9F8(uint64_t a1)
{
  void *v1;
  id WeakRetained;

  v1 = *(void **)(a1 + 32);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(v1, "_showProximityiCloudSignInController:", WeakRetained, a1, a1);

}

void sub_1000EE4CC(uint64_t a1, char a2)
{
  void *v3;
  void **block;
  int v5;
  int v6;
  id (*v7)(uint64_t);
  void *v8;
  id v9;
  char v10;
  uint64_t v11;
  char v12;
  uint64_t v13;

  v13 = a1;
  v12 = a2;
  v11 = a1;
  v3 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_1000EE594;
  v8 = &unk_100280B18;
  v10 = v12 & 1;
  v9 = *(id *)(a1 + 32);
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_storeStrong(&v9, 0);
}

id sub_1000EE594(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 32), "exitMigrationReconnectController", a1, a1);
  objc_msgSend(*(id *)(a1 + 32), "setDidReconnect:", 1, a1, a1);
  return objc_msgSend(*(id *)(a1 + 32), "_startMigrationIfPossible");
}

void sub_1000EEA24(uint64_t a1, char a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  DDRResetService *v8;
  id location;
  id v10[2];
  char v11;
  uint64_t v12;

  v12 = a1;
  v11 = a2;
  v10[1] = (id)a1;
  if ((a2 & 1) != 0)
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "navigationItem");
    v4 = objc_msgSend(v3, "leftBarButtonItem");
    objc_msgSend(v4, "setEnabled:", 0);

    v5 = objc_msgSend(*(id *)(a1 + 32), "miscState");
    v6 = objc_msgSend(v5, "migrationManager");
    objc_msgSend(v6, "cancelWithCause:", 2);

    if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    {
      v7 = objc_msgSend(*(id *)(a1 + 32), "analyticsManager");
      objc_msgSend(v7, "commitThenUpload");

      v10[0] = objc_alloc_init((Class)DDRResetOptions);
      location = objc_msgSend(objc_alloc((Class)DDRResetRequest), "initWithMode:options:reason:", 4, v10[0], CFSTR("Migration Disconnect Erase"));
      v8 = +[DDRResetService sharedInstance](DDRResetService, "sharedInstance");
      -[DDRResetService resetWithRequest:completion:](v8, "resetWithRequest:completion:", location, &stru_100282C30);

      objc_storeStrong(&location, 0);
      objc_storeStrong(v10, 0);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 32), "exitMigrationReconnectController");
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setUserDidCancelReconnect:", 0);
    objc_msgSend(*(id *)(a1 + 32), "_startMigrationIfPossible");
  }
}

void sub_1000EEBC8(id a1, NSError *a2)
{
  uint64_t v3;
  NSString *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t v7[15];
  os_log_type_t v8;
  os_log_t v9;
  char v10;
  id v11;
  char v12;
  id v13;
  os_log_type_t v14;
  os_log_t oslog[2];
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    v14 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v12 = 0;
      v10 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v4 = (NSString *)location[0];
      }
      else if (location[0])
      {
        v13 = objc_msgSend(location[0], "domain");
        v12 = 1;
        v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v13, objc_msgSend(location[0], "code"));
        v11 = v4;
        v10 = 1;
      }
      else
      {
        v4 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v4);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v14, "Reset failed: %{public}@", buf, 0xCu);
      if ((v10 & 1) != 0)

      if ((v12 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v9 = (os_log_t)(id)_BYLoggingFacility(v3);
    v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v9;
      v6 = v8;
      sub_100038C3C(v7);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Reset was successful!", v7, 2u);
    }
    objc_storeStrong((id *)&v9, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_1000EF698(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000EF6C4(id *a1, void *a2, id obj)
{
  void *v4;
  void **block;
  int v6;
  int v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  id v11[3];
  id location;
  void *v13;
  id *v14;

  v14 = a1;
  v13 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v11[2] = a1;
  v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_1000EF7C0;
  v9 = &unk_100282C80;
  objc_copyWeak(v11, a1 + 5);
  v11[1] = v13;
  v10 = a1[4];
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v10, 0);
  objc_destroyWeak(v11);
  objc_storeStrong(&location, 0);
}

void sub_1000EF7C0(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  id v5;
  id v6;
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(location[0], "setScreenTimeState:", *(_QWORD *)(a1 + 48));
  v2 = objc_alloc((Class)STSetupAssistantViewController);
  v3 = *(_QWORD *)(a1 + 48);
  v4 = objc_msgSend(location[0], "managementState");
  v5 = objc_msgSend(v2, "initWithScreenTimeState:passcode:", v3, (unint64_t)objc_msgSend(v4, "isRestrictionsPasscodeSet") & 1);
  objc_msgSend(location[0], "setScreenTimeViewController:", v5);

  v6 = objc_msgSend(location[0], "screenTimeViewController");
  objc_msgSend(v6, "setDelegate:", location[0]);

  if (*(_QWORD *)(a1 + 32))
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_storeStrong(location, 0);
}

void sub_1000EFA6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000EFA98(uint64_t a1, void *a2)
{
  void *v3;
  void **v4;
  int v5;
  int v6;
  void (*v7)(uint64_t);
  void *v8;
  id v9;
  id v10;
  char v11;
  uint64_t v12;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v12 = a1;
  v3 = &_dispatch_main_q;
  v4 = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_1000EFB90;
  v8 = &unk_100282CD0;
  objc_copyWeak(&v10, (id *)(a1 + 32));
  v9 = location[0];
  v11 = *(_BYTE *)(a1 + 40) & 1;
  dispatch_async((dispatch_queue_t)v3, &v4);

  objc_storeStrong(&v9, 0);
  objc_destroyWeak(&v10);
  objc_storeStrong(location, 0);
}

void sub_1000EFB90(uint64_t a1)
{
  objc_class *v2;
  NSString *v3;
  id v4;
  id v5;
  id v6;
  uint64_t v7;
  const __CFString *v8;
  NSString *v9;
  const __CFString *v10;
  id v11;
  id v12;
  id v13;
  NSNumber *v14;
  id v15;
  os_log_t v16;
  char v17;
  id v18;
  char v19;
  id v20;
  os_log_type_t v21;
  os_log_t oslog;
  id location[3];
  uint8_t v24[16];
  uint8_t buf[24];

  location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 40));
  v2 = (objc_class *)objc_opt_class(location[0]);
  v3 = NSStringFromClass(v2);
  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:](BFFViewControllerSpinnerManager, "stopAnimatingSpinnerFor:", v3);

  v4 = objc_msgSend(location[0], "screenTimeViewController");
  v5 = objc_msgSend(v4, "view");
  v6 = objc_msgSend(v5, "window");
  objc_msgSend(v6, "setUserInteractionEnabled:", 1);

  if (*(_QWORD *)(a1 + 32))
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v7);
    v21 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      if ((*(_BYTE *)(a1 + 48) & 1) != 0)
        v8 = CFSTR("enable");
      else
        v8 = CFSTR("disable");
      v19 = 0;
      v17 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v9 = *(NSString **)(a1 + 32);
      }
      else if (*(_QWORD *)(a1 + 32))
      {
        v20 = objc_msgSend(*(id *)(a1 + 32), "domain");
        v19 = 1;
        v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v20, objc_msgSend(*(id *)(a1 + 32), "code"));
        v18 = v9;
        v17 = 1;
      }
      else
      {
        v9 = 0;
      }
      sub_10003EB04((uint64_t)buf, (uint64_t)v8, (uint64_t)v9);
      _os_log_error_impl((void *)&_mh_execute_header, oslog, v21, "Failed to %@ Screen Time: %@", buf, 0x16u);
      if ((v17 & 1) != 0)

      if ((v19 & 1) != 0)
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  else
  {
    v16 = (os_log_t)(id)_BYLoggingFacility(v7);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      if ((*(_BYTE *)(a1 + 48) & 1) != 0)
        v10 = CFSTR("enabled");
      else
        v10 = CFSTR("disabled");
      sub_100038C28((uint64_t)v24, (uint64_t)v10);
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Screen Time successfully %@", v24, 0xCu);
    }
    objc_storeStrong((id *)&v16, 0);
  }
  v11 = objc_msgSend(location[0], "buddyPreferences");
  objc_msgSend(v11, "setObject:forKey:", &__kCFBooleanTrue, CFSTR("ScreenTimePresented"));

  v12 = objc_msgSend(location[0], "settingsManager");
  objc_msgSend(v12, "setScreenTimeEnabled:", *(_BYTE *)(a1 + 48) & 1);

  v13 = objc_msgSend(location[0], "paneFeatureAnalyticsManager");
  v14 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_BYTE *)(a1 + 48) & 1);
  objc_msgSend(v13, "recordActionWithValue:forFeature:", v14, 0);

  v15 = objc_msgSend(location[0], "delegate");
  objc_msgSend(v15, "flowItemDone:", location[0]);

  objc_storeStrong(location, 0);
}

double sub_1000F0B6C()
{
  return 0.0;
}

void sub_1000F1198(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(*(id *)(a1[4] + 24), "reloadData");
  objc_storeStrong(location, 0);
}

void sub_1000F11F8(id a1, UIViewControllerTransitionCoordinatorContext *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_storeStrong(location, 0);
}

void sub_1000F3824(id *a1, void *a2)
{
  id v3;
  id v4[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v4[1] = a1;
  v4[0] = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("BYCloudConfigRetreiveProfileFromWebErrorDomain"), -5, 0);
  v3 = objc_msgSend(a1[4], "delegate");
  objc_msgSend(v3, "webAuthCanceled:", v4[0]);

  objc_storeStrong(v4, 0);
  objc_storeStrong(location, 0);
}

BYBackupMetadata *__cdecl sub_1000F42F0(id a1, NSString *a2, unint64_t a3)
{
  id v4;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v4 = (id)BYMetadataFromBackup(location[0], a3);
  objc_storeStrong(location, 0);
  return (BYBackupMetadata *)v4;
}

void sub_1000F47A4(id *a1)
{
  id v2;
  id v3;
  id v4;

  v2 = objc_msgSend(a1[4], "backupUDIDToSeedEnrolledMap", a1, a1);
  v3 = objc_msgSend(a1[5], "backupUDID");
  v4 = objc_msgSend(v2, "objectForKeyedSubscript:", v3);

  if (!v4)
    objc_msgSend(a1[6], "addObject:", a1[5]);
}

uint64_t sub_1000F4840(uint64_t a1)
{
  uint64_t v1;
  id v2;
  id v3;
  _QWORD **v4;
  uint64_t v5;
  unint64_t i;
  uint64_t (**v7)(id, id, id);
  id v8;
  id v9;
  BOOL v10;
  NSObject *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  _QWORD **v16;
  int v17;
  id v18;
  id v19;
  int v20;
  void *v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  NSObject *log;
  uint8_t v27[15];
  char v28;
  os_log_t v29;
  os_log_type_t v30;
  os_log_t oslog;
  void **block;
  int v33;
  int v34;
  void (*v35)(uint64_t);
  void *v36;
  id v37;
  id v38;
  BOOL v39;
  char v40;
  id v41;
  BOOL v42;
  id location;
  _QWORD __b[8];
  id v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t buf[32];
  _BYTE v49[128];

  v1 = a1;
  v47 = a1;
  v46 = a1;
  memset(__b, 0, sizeof(__b));
  v2 = *(id *)(v1 + 32);
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", __b, v49, 16);
  if (v3)
  {
    v4 = (_QWORD **)&__b[2];
    v5 = *(_QWORD *)__b[2];
    do
    {
      for (i = 0; i < (unint64_t)v3; ++i)
      {
        if (**v4 != v5)
          objc_enumerationMutation(v2);
        v45 = *(id *)(__b[1] + 8 * i);
        v7 = (uint64_t (**)(id, id, id))objc_msgSend(*(id *)(v1 + 40), "fetchBackupMetadataBlock");
        v8 = objc_msgSend(v45, "backupUDID");
        location = (id)v7[2](v7, v8, objc_msgSend(v45, "snapshotID"));

        v42 = 0;
        v9 = objc_msgSend(location, "seedEnrollmentProgram");
        v40 = 0;
        v10 = 0;
        if (v9)
        {
          v41 = objc_msgSend(location, "seedEnrollmentAssetAudience");
          v40 = 1;
          v10 = v41 != 0;
        }
        if ((v40 & 1) != 0)

        v42 = v10;
        v11 = objc_msgSend(*(id *)(v1 + 40), "backupUDIDToSeedEnrolledMapAccessQueue");
        block = _NSConcreteStackBlock;
        v33 = -1073741824;
        v34 = 0;
        v35 = sub_1000F4C44;
        v36 = &unk_100280FB0;
        v37 = *(id *)(v1 + 40);
        v38 = v45;
        v39 = v42;
        dispatch_sync(v11, &block);

        oslog = (os_log_t)(id)_BYLoggingFacility(v12);
        v30 = OS_LOG_TYPE_DEBUG;
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
        {
          log = oslog;
          v13 = v1;
          v14 = v5;
          v15 = v2;
          v16 = v4;
          v17 = v42;
          v18 = v3;
          v19 = objc_msgSend(v45, "backupUDID");
          v20 = v17;
          v4 = v16;
          v2 = v15;
          v5 = v14;
          v1 = v13;
          sub_10005A460((uint64_t)buf, v20, (uint64_t)v19);
          _os_log_debug_impl((void *)&_mh_execute_header, log, v30, "Did load seed enrollment state %d for restorable item %@", buf, 0x12u);
          v21 = v19;
          v3 = v18;

        }
        objc_storeStrong((id *)&oslog, 0);
        objc_storeStrong(&v38, 0);
        objc_storeStrong(&v37, 0);
        objc_storeStrong(&location, 0);
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", __b, v49, 16);
    }
    while (v3);
  }

  v29 = (os_log_t)(id)_BYLoggingFacility(v22);
  v28 = 2;
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEBUG))
  {
    v23 = v29;
    v24 = v28;
    sub_100038C3C(v27);
    _os_log_debug_impl((void *)&_mh_execute_header, v23, v24, "Finished loading seed enrollment state", v27, 2u);
  }
  objc_storeStrong((id *)&v29, 0);
  return (*(uint64_t (**)(void))(*(_QWORD *)(v1 + 48) + 16))();
}

void sub_1000F4C44(uint64_t a1)
{
  NSNumber *v2;
  id v3;
  id v4;

  v2 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", *(_BYTE *)(a1 + 48) & 1, a1, a1);
  v3 = objc_msgSend(*(id *)(a1 + 32), "backupUDIDToSeedEnrolledMap");
  v4 = objc_msgSend(*(id *)(a1 + 40), "backupUDID");
  objc_msgSend(v3, "setObject:forKeyedSubscript:", v2, v4);

}

void sub_1000F4E1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, _Unwind_Exception *exception_object, char a19)
{
  _Block_object_dispose(&a19, 8);
  _Unwind_Resume(a1);
}

void sub_1000F4E38(uint64_t a1)
{
  id v2;
  id v3;
  id v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "backupUDIDToSeedEnrolledMap", a1, a1);
  v3 = objc_msgSend(*(id *)(a1 + 40), "backupUDID");
  v4 = objc_msgSend(v2, "objectForKeyedSubscript:", v3);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(v4, "BOOLValue") & 1;

}

void sub_1000F72F8(NSObject *a1, void *a2, void *a3)
{
  uint64_t v5;
  Class isa;
  id v7;
  BOOL v8;
  os_log_t oslog[2];
  id v10;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10 = 0;
  objc_storeStrong(&v10, a3);
  oslog[1] = a1;
  if (v10)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_100038C28((uint64_t)buf, (uint64_t)v10);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Error fetching user information: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
    (*((void (**)(void))a1[4].isa + 2))();
  }
  else
  {
    isa = a1[4].isa;
    v7 = objc_msgSend(location[0], "repairState");
    v8 = 1;
    if (v7 != (id)2)
      v8 = objc_msgSend(location[0], "repairState") == (id)3;
    (*((void (**)(Class, BOOL))isa + 2))(isa, v8);
  }
  objc_storeStrong(&v10, 0);
  objc_storeStrong(location, 0);
}

void sub_1000F76E0(NSObject *a1, void *a2, void *a3)
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  void *v8;
  void **block;
  int v10;
  int v11;
  void (*v12)(uint64_t);
  void *v13;
  objc_class *v14;
  uint8_t v15[7];
  os_log_type_t v16;
  os_log_t v17;
  os_log_type_t v18;
  os_log_t oslog[2];
  id v20;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v20 = 0;
  objc_storeStrong(&v20, a3);
  oslog[1] = a1;
  if (v20)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    v18 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_100038C28((uint64_t)buf, (uint64_t)v20);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v18, "Repair flow completed with error: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v17 = (os_log_t)(id)_BYLoggingFacility(v5);
    v16 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      v6 = v17;
      v7 = v16;
      sub_100038C3C(v15);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Repair flow completed successfully!", v15, 2u);
    }
    objc_storeStrong((id *)&v17, 0);
  }
  v8 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v10 = -1073741824;
  v11 = 0;
  v12 = sub_1000F78E8;
  v13 = &unk_100280730;
  v14 = a1[4].isa;
  dispatch_async((dispatch_queue_t)v8, &block);

  objc_storeStrong((id *)&v14, 0);
  objc_storeStrong(&v20, 0);
  objc_storeStrong(location, 0);
}

void sub_1000F78E8(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "delegate", a1, a1);
  objc_msgSend(v2, "flowItemDone:", *(_QWORD *)(a1 + 32));

}

void sub_1000F7DA8(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

void sub_1000F8238(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

void sub_1000F828C(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

void sub_1000F8C5C(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(a1[4], "navigationController");
  v4 = objc_msgSend(v3, "view");
  objc_msgSend(v4, "setNeedsLayout");

  v5 = objc_msgSend(a1[4], "navigationController");
  v6 = objc_msgSend(v5, "view");
  objc_msgSend(v6, "layoutIfNeeded");

  v7 = a1[4];
  objc_msgSend(v7, "_contentViewHeight");
  objc_msgSend(v7, "_setPosedViewToBoundedHeight:animated:", 1);
  objc_storeStrong(location, 0);
}

void sub_1000F8EF4(uint64_t a1)
{
  id v2;
  id v3;
  double v4;
  double v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  void (**v11)(_QWORD, double);
  id v12;

  v2 = objc_msgSend(*(id *)(a1 + 32), "selectionView");
  v3 = objc_msgSend(v2, "leftPosedView");
  objc_msgSend(v3, "updateBoundsForMaxContentHeight:", *(double *)(a1 + 40));
  v5 = v4;

  v6 = objc_msgSend(*(id *)(a1 + 32), "selectionView");
  v7 = objc_msgSend(v6, "centerPosedView");
  objc_msgSend(v7, "updateBoundsForMaxContentHeight:", *(double *)(a1 + 40));

  v8 = objc_msgSend(*(id *)(a1 + 32), "selectionView");
  v9 = objc_msgSend(v8, "rightPosedView");
  objc_msgSend(v9, "updateBoundsForMaxContentHeight:", *(double *)(a1 + 40));

  v10 = objc_msgSend(*(id *)(a1 + 32), "selectionViewHeightChangeBlock");
  if (v10)
  {
    v11 = (void (**)(_QWORD, double))objc_msgSend(*(id *)(a1 + 32), "selectionViewHeightChangeBlock");
    v11[2](v11, v5);

  }
  if ((*(_BYTE *)(a1 + 48) & 1) != 0 && (*(_BYTE *)(a1 + 49) & 1) != 0)
  {
    v12 = objc_msgSend(*(id *)(a1 + 32), "view");
    objc_msgSend(v12, "layoutIfNeeded");

  }
}

void sub_1000F9088(uint64_t a1, char a2)
{
  id v2;

  if ((*(_BYTE *)(a1 + 40) & 1) == 0 && (a2 & 1) != 0 && (*(_BYTE *)(a1 + 41) & 1) != 0)
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "view");
    objc_msgSend(v2, "setNeedsLayout");

  }
}

BOOL sub_1000F96E8(uint64_t a1)
{
  BOOL v1;

  v1 = 1;
  if (a1 != 4)
    return a1 == 3;
  return v1;
}

id sub_1000F9A1C()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE9D8;
  v13 = qword_1002EE9D8;
  if (!qword_1002EE9D8)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000F9DAC;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1000F9DAC(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_1000F9B08(NSObject *a1, char a2)
{
  NSObject *v3;
  os_log_type_t v4;
  id v5;
  id v6;
  void **v7;
  int v8;
  int v9;
  void (*v10)(uint64_t);
  void *v11;
  objc_class *v12;
  uint8_t buf[15];
  char v14;
  os_log_t oslog[2];
  char v16;
  NSObject *v17;

  v17 = a1;
  v16 = a2;
  oslog[1] = a1;
  if ((a2 & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    v14 = 16;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v3 = oslog[0];
      v4 = v14;
      sub_100038C3C(buf);
      _os_log_error_impl((void *)&_mh_execute_header, v3, v4, "Preloading resources failed; will present anyway",
        buf,
        2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  v5 = sub_1000F9A1C();
  v7 = _NSConcreteStackBlock;
  v8 = -1073741824;
  v9 = 0;
  v10 = sub_1000F9C50;
  v11 = &unk_100280730;
  v12 = a1[4].isa;
  v6 = objc_msgSend(v5, "viewControllerWithDismissHandler:", &v7);
  -[objc_class setViewController:](a1[4].isa, "setViewController:", v6);

  (*((void (**)(void))a1[5].isa + 2))();
  objc_storeStrong((id *)&v12, 0);
}

void sub_1000F9C50(uint64_t a1)
{
  id v2;
  void (**v3)(_QWORD);

  v2 = objc_msgSend(*(id *)(a1 + 32), "configurationCompleted", a1, a1);

  if (v2)
  {
    v3 = (void (**)(_QWORD))objc_msgSend(*(id *)(a1 + 32), "configurationCompleted");
    v3[2](v3);

  }
}

void sub_1000F9DAC(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1000F9EEC();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("BCSetupAssistantDependencyAdapter");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getBCSetupAssistantDependencyAdapterClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyButtonConfigurationWrapper.m"), 19, CFSTR("Unable to find class %s"), "BCSetupAssistantDependencyAdapter");

    __break(1u);
  }
  qword_1002EE9D8 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_1000F9EEC()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_1000FA018((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *ActionButtonConfigurationUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyButtonConfigurationWrapper.m"), 18, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_1000FA018(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE9E0;
  v9 = qword_1002EE9E0;
  if (!qword_1002EE9E0)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1000FA0A8;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1000FA0A8((uint64_t)&v2);
  }
  return qword_1002EE9E0;
}

uint64_t sub_1000FA0A8(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/ActionButtonConfigurationUI.framework/ActionButtonConfigurationUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE9E0 = result;
  return result;
}

void sub_1000FA468(id *a1)
{
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  id v5;
  void **v6;
  int v7;
  int v8;
  void (*v9)(uint64_t, void *, void *, void *, void *);
  void *v10;
  id v11;
  id v12[3];
  id from;
  uint8_t buf[7];
  os_log_type_t v15;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  v2 = objc_msgSend(a1[4], "isActivating");
  if ((v2 & 1) == 1)
  {
    location[0] = (id)_BYLoggingFacility(v2);
    v15 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)location[0], OS_LOG_TYPE_DEFAULT))
    {
      v3 = location[0];
      v4 = v15;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Wi-Fi activation already in-progress, ignoring additional attempt", buf, 2u);
    }
    objc_storeStrong(location, 0);
  }
  else
  {
    objc_msgSend(a1[4], "setActivating:", 1);
    objc_initWeak(&from, a1[4]);
    v5 = objc_msgSend(a1[4], "activationEngine");
    v6 = _NSConcreteStackBlock;
    v7 = -1073741824;
    v8 = 0;
    v9 = sub_1000FA60C;
    v10 = &unk_100282E38;
    objc_copyWeak(v12, &from);
    v11 = a1[5];
    objc_msgSend(v5, "tryActivateWithOptions:requestMutator:completion:", 0, 0, &v6);

    objc_storeStrong(&v11, 0);
    objc_destroyWeak(v12);
    objc_destroyWeak(&from);
  }
}

void sub_1000FA5E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, _Unwind_Exception *exception_object, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1000FA60C(uint64_t a1, void *a2, void *a3, void *a4, void *a5)
{
  id WeakRetained;
  id v10;
  id v11;
  id v12;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v12 = 0;
  objc_storeStrong(&v12, a3);
  v11 = 0;
  objc_storeStrong(&v11, a4);
  v10 = 0;
  objc_storeStrong(&v10, a5);
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  objc_msgSend(WeakRetained, "activationFinishedWithData:responseHeaders:error:completionHandler:", location[0], v12, v10, *(_QWORD *)(a1 + 32), a1);

  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(location, 0);
}

void sub_1000FA89C(uint64_t a1)
{
  NSString *v2;
  NSObject *v3;
  os_log_type_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  id v8;
  uint8_t v9[15];
  char v10;
  os_log_t v11;
  os_log_type_t v12;
  os_log_t v13;
  id v14;
  uint8_t v15[7];
  os_log_type_t v16;
  os_log_t oslog;
  char v18;
  id v19;
  char v20;
  id v21;
  os_log_type_t v22;
  id location[3];
  uint8_t v24[16];
  uint8_t buf[24];

  location[2] = (id)a1;
  location[1] = (id)a1;
  if (*(_QWORD *)(a1 + 32))
  {
    location[0] = (id)_BYLoggingFacility(a1);
    v22 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)location[0], OS_LOG_TYPE_ERROR))
    {
      v20 = 0;
      v18 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v2 = *(NSString **)(a1 + 32);
      }
      else if (*(_QWORD *)(a1 + 32))
      {
        v21 = objc_msgSend(*(id *)(a1 + 32), "domain");
        v20 = 1;
        v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v21, objc_msgSend(*(id *)(a1 + 32), "code"));
        v19 = v2;
        v18 = 1;
      }
      else
      {
        v2 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v2);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)location[0], v22, "Error activating device: %{public}@", buf, 0xCu);
      if ((v18 & 1) != 0)

      if ((v20 & 1) != 0)
    }
    objc_storeStrong(location, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  }
  else
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(a1);
    v16 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v3 = oslog;
      v4 = v16;
      sub_100038C3C(v15);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Activation complete", v15, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    v14 = objc_msgSend(*(id *)(a1 + 40), "objectForKeyedSubscript:", CFSTR("Content-Type"));
    v13 = (os_log_t)(id)_BYLoggingFacility(v14);
    v12 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      sub_100039500((uint64_t)v24, (uint64_t)v14);
      _os_log_impl((void *)&_mh_execute_header, v13, v12, "Activation Content-Type: %{public}@", v24, 0xCu);
    }
    objc_storeStrong((id *)&v13, 0);
    v5 = objc_msgSend(v14, "containsString:", CFSTR("application/x-buddyml"));
    if ((v5 & 1) != 0)
    {
      v11 = (os_log_t)(id)_BYLoggingFacility(v5);
      v10 = 16;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        v6 = v11;
        v7 = v10;
        sub_100038C3C(v9);
        _os_log_error_impl((void *)&_mh_execute_header, v6, v7, "Activation response contains buddyml, assuming activation failed", v9, 2u);
      }
      objc_storeStrong((id *)&v11, 0);
      objc_msgSend(*(id *)(a1 + 48), "setActivating:", 0);
      v8 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.purplebuddy.noninteractive-deviceactivator"), 1, 0);
      (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
      objc_storeStrong(&v8, 0);
    }
    else
    {
      objc_msgSend(*(id *)(a1 + 48), "activateWithData:headers:completion:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 64));
    }
    objc_storeStrong(&v14, 0);
  }
}

void sub_1000FADD4(uint64_t a1)
{
  NSDictionary *v2;
  id v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  NSNumber *v7;
  NSString *v8;
  void *v9;
  void **block;
  int v11;
  int v12;
  void (*v13)(uint64_t);
  void *v14;
  id v15;
  id v16;
  id v17;
  char v18;
  char v19;
  id v20;
  char v21;
  id v22;
  os_log_type_t v23;
  os_log_t oslog;
  id obj;
  char v26;
  id location;
  id v28[3];
  uint8_t buf[24];
  uint64_t v30;
  uint64_t v31;

  v28[2] = (id)a1;
  v28[1] = (id)a1;
  v28[0] = 0;
  if (*(_QWORD *)(a1 + 32))
  {
    v30 = kMAOptionsActivationResponseHeaders;
    v31 = *(_QWORD *)(a1 + 32);
    v2 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v31, &v30, 1);
    v3 = v28[0];
    v28[0] = v2;

  }
  location = 0;
  v26 = 0;
  v4 = *(_QWORD *)(a1 + 40);
  obj = 0;
  v5 = MAEActivateDeviceWithError(v4, v28[0], &obj);
  objc_storeStrong(&location, obj);
  v26 = v5 & 1;
  oslog = (os_log_t)(id)_BYLoggingFacility(v6);
  v23 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    v7 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v26 & 1);
    v21 = 0;
    v19 = 0;
    if ((_BYIsInternalInstall() & 1) != 0)
    {
      v8 = (NSString *)location;
    }
    else if (location)
    {
      v22 = objc_msgSend(location, "domain");
      v21 = 1;
      v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v22, objc_msgSend(location, "code"));
      v20 = v8;
      v19 = 1;
    }
    else
    {
      v8 = 0;
    }
    sub_10003A6BC((uint64_t)buf, (uint64_t)v7, (uint64_t)v8);
    _os_log_impl((void *)&_mh_execute_header, oslog, v23, "Activation response accepted: %{public}@, error = %{public}@", buf, 0x16u);
    if ((v19 & 1) != 0)

    if ((v21 & 1) != 0)
  }
  objc_storeStrong((id *)&oslog, 0);
  v9 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v11 = -1073741824;
  v12 = 0;
  v13 = sub_1000FB11C;
  v14 = &unk_100282B98;
  v15 = *(id *)(a1 + 48);
  v18 = v26 & 1;
  v16 = location;
  v17 = *(id *)(a1 + 56);
  dispatch_async((dispatch_queue_t)v9, &block);

  objc_storeStrong(&v17, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(v28, 0);
}

void sub_1000FB11C(uint64_t a1)
{
  NSDictionary *v2;
  id v3[3];
  NSErrorUserInfoKey v4;
  uint64_t v5;

  v3[2] = (id)a1;
  v3[1] = (id)a1;
  objc_msgSend(*(id *)(a1 + 32), "setActivating:", 0);
  if ((*(_BYTE *)(a1 + 56) & 1) != 0)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  else
  {
    v4 = NSUnderlyingErrorKey;
    v5 = *(_QWORD *)(a1 + 40);
    v2 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v5, &v4, 1);
    v3[0] = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.purplebuddy.noninteractive-deviceactivator"), 2, v2);

    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    objc_storeStrong(v3, 0);
  }
}

double sub_1000FCA34(double a1, double a2)
{
  return fmin(a1, a2);
}

id sub_1000FDA58(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;
  NSLocale *v5;
  NSString *v6;
  id v7;
  id v9;
  id v10[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = a1;
  v3 = (void *)a1[4];
  v4 = location[0];
  v5 = +[NSLocale currentLocale](NSLocale, "currentLocale");
  v6 = -[NSLocale countryCode](v5, "countryCode");
  v10[0] = objc_msgSend(v3, "buddyLocaleIdentifierFromIdentifier:byAddingRegion:", v4, v6);

  v9 = +[NSLocale localeWithLocaleIdentifier:](NSLocale, "localeWithLocaleIdentifier:", v10[0]);
  v7 = v9;
  objc_storeStrong(&v9, 0);
  objc_storeStrong(v10, 0);
  objc_storeStrong(location, 0);
  return v7;
}

BOOL sub_1000FDBD0(id a1, UIKeyboardSuggestedInputMode *a2)
{
  unsigned __int8 v2;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v2 = objc_msgSend(location[0], "enabled");
  objc_storeStrong(location, 0);
  return v2 & 1;
}

BOOL sub_1000FEE30(uint64_t a1)
{
  BOOL v1;

  v1 = 1;
  if (a1 != 4)
    return a1 == 3;
  return v1;
}

void sub_1001007E0(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController", a1, a1);
  objc_msgSend(v1, "setupFinished");

}

void sub_10010082C(uint64_t a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  NSString *v8;
  char v9;
  id v10;
  id v11;
  id v12;
  BOOL v13;
  NSObject *v14;
  void **block;
  int v16;
  int v17;
  void (*v18)(uint64_t);
  void *v19;
  id v20;
  BOOL v21;
  char v22;
  char v23;
  id v24;
  char v25;
  id v26;
  os_log_type_t v27;
  os_log_t oslog[2];
  id v29;
  id v30;
  id location[2];
  uint8_t buf[24];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v30 = 0;
  objc_storeStrong(&v30, a3);
  v29 = 0;
  objc_storeStrong(&v29, a4);
  oslog[1] = (os_log_t)a1;
  if (v29)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v7);
    v27 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v25 = 0;
      v23 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v8 = (NSString *)v29;
      }
      else if (v29)
      {
        v26 = objc_msgSend(v29, "domain");
        v25 = 1;
        v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v26, objc_msgSend(v29, "code"));
        v24 = v8;
        v23 = 1;
      }
      else
      {
        v8 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v8);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v27, "Unable to scan for software updates: %{public}@", buf, 0xCu);
      if ((v23 & 1) != 0)

      if ((v25 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  v22 = 0;
  v9 = 1;
  if (!v30)
    v9 = *(_BYTE *)(a1 + 56);
  v22 = v9 & 1;
  if ((v9 & 1) == 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "cancelWithCause:", 6);
    v21 = 0;
    v10 = objc_msgSend(*(id *)(a1 + 40), "proximitySetupController");
    v11 = objc_msgSend(v10, "information");
    v12 = objc_msgSend(v11, "appleID");
    v13 = v12 != 0;

    v21 = v13;
    if (!v13)
    {
      v14 = dispatch_get_global_queue(0, 0);
      block = _NSConcreteStackBlock;
      v16 = -1073741824;
      v17 = 0;
      v18 = sub_100100B68;
      v19 = &unk_100280730;
      v20 = *(id *)(a1 + 40);
      dispatch_async(v14, &block);

      objc_storeStrong(&v20, 0);
    }
  }
  if (*(_QWORD *)(a1 + 48))
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  objc_storeStrong(&v29, 0);
  objc_storeStrong(&v30, 0);
  objc_storeStrong(location, 0);
}

void sub_100100B68(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController", a1, a1);
  objc_msgSend(v1, "setupFinished");

}

id sub_100103984()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EE9E8;
  v13 = qword_1002EE9E8;
  if (!qword_1002EE9E8)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100104014;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100104014(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

id sub_100103A70()
{
  NSAssertionHandler *v0;
  NSString *v1;
  id *v3;

  v3 = (id *)sub_1001043A4();
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *getTSUserInfoFlowTypeKey(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyManagedSIMController.m"), 26, CFSTR("%s"), dlerror());

    __break(1u);
  }
  return *v3;
}

id sub_100103B68()
{
  NSAssertionHandler *v0;
  NSString *v1;
  id *v3;

  v3 = (id *)sub_1001044F0();
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *getTSUserInfoIgnoreTransportKey(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyManagedSIMController.m"), 27, CFSTR("%s"), dlerror());

    __break(1u);
  }
  return *v3;
}

id sub_100103C60()
{
  NSAssertionHandler *v0;
  NSString *v1;
  id *v3;

  v3 = (id *)sub_10010463C();
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *getTSUserInfoWaitForServiceKey(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyManagedSIMController.m"), 28, CFSTR("%s"), dlerror());

    __break(1u);
  }
  return *v3;
}

void sub_100103D58(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (a1[4])
    (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

void sub_100104014(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_100104154();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("TSSIMSetupFlow");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getTSSIMSetupFlowClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyManagedSIMController.m"), 25, CFSTR("Unable to find class %s"), "TSSIMSetupFlow");

    __break(1u);
  }
  qword_1002EE9E8 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_100104154()
{
  NSAssertionHandler *v0;
  NSString *v1;
  uint64_t v3;
  void *v4;

  v4 = 0;
  v3 = sub_100104284((uint64_t)&v4);
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *SIMSetupSupportLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyManagedSIMController.m"), 24, CFSTR("%s"), v4);

    __break(1u);
  }
  if (v4)
    free(v4);
  return v3;
}

uint64_t sub_100104284(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EE9F0;
  v9 = qword_1002EE9F0;
  if (!qword_1002EE9F0)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100104314;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_100104314((uint64_t)&v2);
  }
  return qword_1002EE9F0;
}

uint64_t sub_100104314(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/SIMSetupSupport.framework/SIMSetupSupport";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EE9F0 = result;
  return result;
}

uint64_t sub_1001043A4()
{
  uint64_t v0;
  void **v2;
  int v3;
  int v4;
  void *(*v5)(uint64_t);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 0x20000000;
  v12 = 32;
  v8 = qword_1002EE9F8;
  v13 = qword_1002EE9F8;
  if (!qword_1002EE9F8)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100104488;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100104488((uint64_t)&v2);
  }
  v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_100104488(uint64_t a1)
{
  void *v2;
  void *result;

  v2 = (void *)sub_100104154();
  result = dlsym(v2, "TSUserInfoFlowTypeKey");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1002EE9F8 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1001044F0()
{
  uint64_t v0;
  void **v2;
  int v3;
  int v4;
  void *(*v5)(uint64_t);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 0x20000000;
  v12 = 32;
  v8 = qword_1002EEA00;
  v13 = qword_1002EEA00;
  if (!qword_1002EEA00)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001045D4;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001045D4((uint64_t)&v2);
  }
  v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_1001045D4(uint64_t a1)
{
  void *v2;
  void *result;

  v2 = (void *)sub_100104154();
  result = dlsym(v2, "TSUserInfoIgnoreTransportKey");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1002EEA00 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10010463C()
{
  uint64_t v0;
  void **v2;
  int v3;
  int v4;
  void *(*v5)(uint64_t);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 0x20000000;
  v12 = 32;
  v8 = qword_1002EEA08;
  v13 = qword_1002EEA08;
  if (!qword_1002EEA08)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100104720;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100104720((uint64_t)&v2);
  }
  v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_100104720(uint64_t a1)
{
  void *v2;
  void *result;

  v2 = (void *)sub_100104154();
  result = dlsym(v2, "TSUserInfoWaitForServiceKey");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1002EEA08 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1001064C0(uint64_t a1)
{
  uint64_t v1;
  id v2;

  if (*(_QWORD *)(a1 + 40))
  {
    v1 = *(_QWORD *)(a1 + 40);
    v2 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController", a1, a1);
    (*(void (**)(uint64_t, unint64_t))(v1 + 16))(v1, (unint64_t)objc_msgSend(v2, "shouldEnableProximity") & 1);

  }
}

void sub_1001068F0(NSObject *a1, char a2)
{
  void *v3;
  os_log_t oslog[2];
  char v5;
  NSObject *v6;
  uint8_t buf[8];

  v6 = a1;
  v5 = a2;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_100046FA0(buf, v5 & 1);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Finished fetching skip keys: %d", buf, 8u);
  }
  objc_storeStrong((id *)oslog, 0);
  v3 = &_dispatch_main_q;
  dispatch_async((dispatch_queue_t)v3, a1[4].isa);

}

void sub_100107490(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _WORD v6[7];
  os_log_type_t v7;
  os_log_t oslog[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
  v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog[0];
    v5 = v7;
    sub_100038C3C(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Keychain transferred and imported...", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  -[objc_class _beginSignIn](a1[4].isa, "_beginSignIn");
  objc_storeStrong(location, 0);
}

id sub_100107550(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_beginSignIn", a1, a1);
}

void sub_1001078B8(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "_signInCompleted:", location[0]);
  objc_storeStrong(location, 0);
}

void sub_100107C7C(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController", a1, a1);
  objc_msgSend(v1, "setupFinished");

}

void sub_100107CDC(id *a1)
{
  id v2;
  _BYTE *v3;
  id v4;
  id v5;
  NSIndexSet *v6;
  id v7;
  id v8;
  id location;
  _BYTE *v10;
  id v11[3];
  char *v12;
  _BYTE *v13;
  _BYTE *v14;
  char *v15;

  v11[2] = a1;
  v11[1] = a1;
  v11[0] = objc_msgSend(a1[4], "navigationController");
  v10 = 0;
  v2 = objc_msgSend(v11[0], "viewControllers");
  v3 = objc_msgSend(v2, "indexOfObject:", a1[4]);

  v10 = v3;
  v4 = objc_msgSend(v11[0], "viewControllers");
  v5 = objc_msgSend(v11[0], "viewControllers");
  v13 = v3;
  v12 = (char *)((_BYTE *)objc_msgSend(v5, "count") - v3);
  v14 = v3;
  v15 = v12;
  v6 = +[NSIndexSet indexSetWithIndexesInRange:](NSIndexSet, "indexSetWithIndexesInRange:", v3, v12);
  location = objc_msgSend(v4, "objectsAtIndexes:", v6);

  v7 = objc_msgSend(a1[4], "delegate");
  objc_msgSend(v7, "removeViewControllersOnNextPush:", location);

  v8 = objc_msgSend(a1[4], "delegate");
  objc_msgSend(v8, "flowItemDone:", a1[4]);

  objc_storeStrong(&location, 0);
  objc_storeStrong(v11, 0);
}

id sub_100108498()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEA10;
  v13 = qword_1002EEA10;
  if (!qword_1002EEA10)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100108A5C;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100108A5C(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

id sub_100108584()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEA20;
  v13 = qword_1002EEA20;
  if (!qword_1002EEA20)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100108DE8;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100108DE8(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_100108670(id *a1)
{
  id v1;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  v1 = objc_msgSend(location[0], "delegate");
  objc_msgSend(v1, "presentWiFiPaneForFlowItem:", location[0]);

  objc_storeStrong(location, 0);
}

void sub_1001086D8(id *a1)
{
  id v1;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  v1 = objc_msgSend(location[0], "delegate");
  objc_msgSend(v1, "flowItemDone:", location[0]);

  objc_storeStrong(location, 0);
}

uint64_t sub_10010882C(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "eraseFlow", a1, a1);
  v3 = objc_msgSend(v2, "startFlow");
  objc_msgSend(*(id *)(a1 + 32), "setInitialViewController:", v3);

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100108A5C(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_100108B9C();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("DKEraseFlow");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getDKEraseFlowClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyMigrationSourceEraseController.m"), 16, CFSTR("Unable to find class %s"), "DKEraseFlow");

    __break(1u);
  }
  qword_1002EEA10 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_100108B9C()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_100108CC8((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *DisembarkUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyMigrationSourceEraseController.m"), 15, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_100108CC8(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEA18;
  v9 = qword_1002EEA18;
  if (!qword_1002EEA18)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100108D58;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_100108D58((uint64_t)&v2);
  }
  return qword_1002EEA18;
}

uint64_t sub_100108D58(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/DisembarkUI.framework/DisembarkUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEA18 = result;
  return result;
}

void sub_100108DE8(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_100108B9C();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("DKConfiguration");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getDKConfigurationClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyMigrationSourceEraseController.m"), 18, CFSTR("Unable to find class %s"), "DKConfiguration");

    __break(1u);
  }
  qword_1002EEA20 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

id sub_1001093A8()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEA28;
  v13 = qword_1002EEA28;
  if (!qword_1002EEA28)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100109A88;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100109A88(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

uint64_t sub_1001096F4(uint64_t a1, char a2)
{
  id v3;

  if ((a2 & 1) != 0)
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "intelligenceProvider");
    objc_msgSend(v3, "setDidShowIntelligencePaneInCurrentSession");

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100109A88(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_100109BC8();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("VTUIGMEnrollmentViewController");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getVTUIGMEnrollmentViewControllerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyIntelligenceController.m"), 20, CFSTR("Unable to find class %s"), "VTUIGMEnrollmentViewController");

    __break(1u);
  }
  qword_1002EEA28 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_100109BC8()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_100109CF4((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *VoiceTriggerUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyIntelligenceController.m"), 19, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_100109CF4(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEA30;
  v9 = qword_1002EEA30;
  if (!qword_1002EEA30)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100109D84;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_100109D84((uint64_t)&v2);
  }
  return qword_1002EEA30;
}

uint64_t sub_100109D84(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/VoiceTriggerUI.framework/VoiceTriggerUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEA30 = result;
  return result;
}

double sub_10010A6AC()
{
  return 0.0;
}

void sub_10010B3DC(uint64_t a1)
{
  id v2;
  id v3;
  unsigned __int8 v4;
  id v5;
  id v6;
  BOOL v7;
  BOOL v8;
  id v9;
  BOOL v10;
  id v11;
  char v12;
  id v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  id v18;
  BOOL v19;
  char v20;
  char v21;
  BOOL v22;
  _BOOL8 v23;
  uint64_t v24;
  int v25;
  id v26;
  int v27;
  id v28;
  id v29;
  BOOL v30;
  NSNumber *v31;
  NSNumber *v32;
  NSNumber *v33;
  NSNumber *v34;
  NSNumber *v35;
  id v36;
  NSString *v37;
  id v38;
  const __CFString *v39;
  id v40;
  id v41;
  uint64_t v42;
  objc_super v43;
  os_log_type_t v44;
  os_log_t v45;
  unsigned int i;
  id location;
  id v48;
  os_log_type_t v49;
  os_log_t v50;
  os_log_type_t v51;
  os_log_t oslog;
  char v53;
  id v54;
  char v55;
  id v56;
  char v57;
  id v58;
  char v59;
  id v60;
  char v61;
  char v62;
  BOOL v63;
  char v64;
  id v65;
  BOOL v66;
  BOOL v67;
  char v68;
  objc_super v69;
  id v70[3];
  uint8_t v71[24];
  _QWORD v72[5];
  uint8_t v73[16];
  uint8_t buf[40];

  v70[2] = (id)a1;
  v70[1] = (id)a1;
  v70[0] = objc_alloc_init((Class)BYBuddyDaemonGeneralClient);
  v2 = objc_msgSend(v70[0], "fetchAuthenticationContextForBiometric");
  v69.receiver = *(id *)(a1 + 32);
  v69.super_class = (Class)PearlSplashController;
  objc_msgSendSuper2(&v69, "setAuthContext:", v2);

  v68 = 0;
  v3 = objc_msgSend(*(id *)(a1 + 32), "managedConfiguration");
  v4 = objc_msgSend(v3, "isPasscodeSet");

  v68 = v4 & 1;
  v67 = 0;
  v5 = objc_msgSend(*(id *)(a1 + 32), "passcodeCacheManager");
  v6 = objc_msgSend(v5, "cachedPasscode");
  v7 = v6 != 0;

  v67 = v7;
  v66 = 0;
  v64 = 0;
  v8 = 1;
  if ((v68 & 1) != 0)
  {
    v8 = 1;
    if (!v67)
    {
      v65 = objc_msgSend(*(id *)(a1 + 32), "authContext");
      v64 = 1;
      v8 = v65 != 0;
    }
  }
  if ((v64 & 1) != 0)

  v66 = v8;
  v63 = 0;
  v9 = objc_msgSend(*(id *)(a1 + 32), "managedConfiguration");
  v10 = objc_msgSend(v9, "effectiveBoolValueForSetting:", MCFeatureCameraAllowed) != 2;

  v63 = v10;
  v62 = 0;
  v11 = objc_msgSend(*(id *)(a1 + 32), "capabilities");
  v12 = objc_msgSend(v11, "isPearlEnrolled") ^ 1;

  v62 = v12 & 1;
  v61 = 0;
  v13 = objc_msgSend(*(id *)(a1 + 32), "capabilities");
  v14 = objc_msgSend(v13, "supportsPeriocularFaceID");

  if ((v14 & 1) != 0)
  {
    v59 = 0;
    v17 = 0;
    if ((BYSetupAssistantHasCompletedInitialRun(v15, v16) & 1) != 0)
    {
      v60 = objc_msgSend(*(id *)(a1 + 32), "capabilities");
      v59 = 1;
      v17 = objc_msgSend(v60, "isPearlEnrolled");
    }
    if ((v59 & 1) != 0)

    if ((v17 & 1) != 0)
    {
      v18 = objc_msgSend(*(id *)(a1 + 32), "setEnrollmentConfiguration:", 3);
      v57 = 0;
      v19 = 0;
      if ((v68 & 1) != 0)
      {
        v19 = 1;
        if (!v67)
        {
          v18 = objc_msgSend(*(id *)(a1 + 32), "authContext");
          v58 = v18;
          v57 = 1;
          v19 = v18 != 0;
        }
      }
      v66 = v19;
      if ((v57 & 1) != 0)

      v20 = *(_BYTE *)(a1 + 48);
      v55 = 0;
      v53 = 0;
      v21 = 0;
      if ((v20 & 1) != 0)
      {
        v21 = 0;
        if (v66)
        {
          v21 = 0;
          if (v63)
          {
            v56 = objc_msgSend(*(id *)(a1 + 32), "capabilities");
            v55 = 1;
            v18 = objc_msgSend(v56, "hasEligibleEnrolledIdentityForPeriocularFaceIDEnrollment");
            v21 = 0;
            if ((v18 & 1) != 0)
            {
              v54 = +[BYPreferencesController buddyPreferences](BYPreferencesController, "buddyPreferences");
              v53 = 1;
              v18 = objc_msgSend(v54, "BOOLForKey:", CFSTR("FaceIDPeriocularPresented"));
              v21 = v18 ^ 1;
            }
          }
        }
      }
      v61 = v21 & 1;
      if ((v53 & 1) != 0)

      if ((v55 & 1) != 0)
    }
    else
    {
      v18 = objc_msgSend(*(id *)(a1 + 32), "setEnrollmentConfiguration:", 1);
      v22 = 0;
      if ((*(_BYTE *)(a1 + 48) & 1) != 0)
      {
        v22 = 0;
        if (v66)
        {
          v22 = 0;
          if ((v62 & 1) != 0)
            v22 = v63;
        }
      }
      v61 = v22;
    }
    oslog = (os_log_t)(id)_BYLoggingFacility(v18);
    v51 = OS_LOG_TYPE_DEFAULT;
    v23 = os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT);
    if (v23)
    {
      v25 = BYSetupAssistantHasCompletedInitialRun(v23, v24) & 1;
      v26 = objc_msgSend(*(id *)(a1 + 32), "capabilities");
      v27 = objc_msgSend(v26, "isPearlEnrolled") & 1;
      v28 = objc_msgSend(*(id *)(a1 + 32), "enrollmentConfiguration");
      v29 = objc_msgSend(*(id *)(a1 + 32), "capabilities");
      sub_10010BC84((uint64_t)buf, v25, v27, (uint64_t)v28, objc_msgSend(v29, "hasEligibleEnrolledIdentityForPeriocularFaceIDEnrollment") & 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v51, "PearlSplashController: extendedInit for periocular, user has completed initial run :%i, is pearl enrollenabled %i and enrollmentConfiguration is: %lu, has eligible enrolled identity :%i", buf, 0x1Eu);

    }
    objc_storeStrong((id *)&oslog, 0);
  }
  else
  {
    v30 = 0;
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    {
      v30 = 0;
      if (v66)
      {
        v30 = 0;
        if ((v62 & 1) != 0)
          v30 = v63;
      }
    }
    v61 = v30;
    v50 = (os_log_t)(id)_BYLoggingFacility(v15);
    v49 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000342B4((uint64_t)v73, (uint64_t)objc_msgSend(*(id *)(a1 + 32), "enrollmentConfiguration"));
      _os_log_impl((void *)&_mh_execute_header, v50, v49, "PearlSplashController: extendedInit, enrollmentConfiguration is: %lu", v73, 0xCu);
    }
    objc_storeStrong((id *)&v50, 0);
  }
  if ((v61 & 1) == 0)
  {
    v48 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("PearlSplashController extended init preflight failure \nisPasscodeSet: $&0 \nhasCachedPasscode: $&1 \npassCodeCheck: $&2 \ncameraAllowed: $&3 \nunenrolled: $&4 \n"));
    v31 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v68 & 1);
    v72[0] = v31;
    v32 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v67);
    v72[1] = v32;
    v33 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v66);
    v72[2] = v33;
    v34 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v63);
    v72[3] = v34;
    v35 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v62 & 1);
    v72[4] = v35;
    location = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v72, 5);

    for (i = 0; ; ++i)
    {
      v36 = objc_msgSend(location, "count");
      if ((int)i >= (unint64_t)v36)
        break;
      v37 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("$&%i"), i);
      v38 = objc_msgSend(location, "objectAtIndexedSubscript:", (int)i);
      if ((objc_msgSend(v38, "isEqual:", &off_100290E08) & 1) != 0)
        v39 = CFSTR("YES");
      else
        v39 = CFSTR("NO");
      v40 = objc_msgSend(v48, "stringByReplacingOccurrencesOfString:withString:", v37, v39);
      v41 = v48;
      v48 = v40;

    }
    v45 = (os_log_t)(id)_BYLoggingFacility(v36);
    v44 = OS_LOG_TYPE_DEBUG;
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEBUG))
    {
      sub_100038C28((uint64_t)v71, (uint64_t)v48);
      _os_log_debug_impl((void *)&_mh_execute_header, v45, v44, "%@", v71, 0xCu);
    }
    objc_storeStrong((id *)&v45, 0);
    objc_storeStrong(&location, 0);
    objc_storeStrong(&v48, 0);
  }
  if (*(_QWORD *)(a1 + 40))
  {
    if ((v61 & 1) != 0)
    {
      v42 = *(_QWORD *)(a1 + 40);
      v43.receiver = *(id *)(a1 + 32);
      v43.super_class = (Class)PearlSplashController;
      objc_msgSendSuper2(&v43, "performExtendedInitializationWithCompletion:", v42);
    }
    else
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }
  }
  objc_storeStrong(v70, 0);
}

double sub_10010BC84(uint64_t a1, int a2, int a3, uint64_t a4, int a5)
{
  double result;

  result = 2.0542726e-289;
  *(_DWORD *)a1 = 67109888;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 1024;
  *(_DWORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 14) = 2048;
  *(_QWORD *)(a1 + 16) = a4;
  *(_WORD *)(a1 + 24) = 1024;
  *(_DWORD *)(a1 + 26) = a5;
  return result;
}

BOOL sub_10010C1B8(id a1, UIViewController *a2, NSDictionary *a3)
{
  id v4;
  id v5;
  uint64_t v6;
  id v8;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v8 = 0;
  objc_storeStrong(&v8, a3);
  v4 = location[0];
  v5 = sub_10010C23C();
  v6 = objc_opt_class(v5);
  LOBYTE(v4) = objc_opt_isKindOfClass(v4, v6);
  objc_storeStrong(&v8, 0);
  objc_storeStrong(location, 0);
  return v4 & 1;
}

id sub_10010C23C()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEA38;
  v13 = qword_1002EEA38;
  if (!qword_1002EEA38)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10010C568;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_10010C568(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_10010C568(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_10010C6A8();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("BKUIPeriocularEnableSplashViewController");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getBKUIPeriocularEnableSplashViewControllerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("PearlSplashController.m"), 24, CFSTR("Unable to find class %s"), "BKUIPeriocularEnableSplashViewController");

    __break(1u);
  }
  qword_1002EEA38 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_10010C6A8()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_10010C7D4((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *BiometricKitUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("PearlSplashController.m"), 23, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_10010C7D4(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEA40;
  v9 = qword_1002EEA40;
  if (!qword_1002EEA40)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10010C864;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_10010C864((uint64_t)&v2);
  }
  return qword_1002EEA40;
}

uint64_t sub_10010C864(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/BiometricKitUI.framework/BiometricKitUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEA40 = result;
  return result;
}

void sub_10010CA58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void **v6;
  int v7;
  int v8;
  id (*v9)(uint64_t);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = a1;
  v15 = a2;
  v14 = a3;
  v13 = a4;
  v12 = a5;
  v5 = &_dispatch_main_q;
  v6 = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_10010D2A4;
  v10 = &unk_100280C90;
  v11 = v15;
  dispatch_async((dispatch_queue_t)v5, &v6);

}

void sub_10010CF18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void *v5;
  void **v6;
  int v7;
  int v8;
  id (*v9)(uint64_t);
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v16 = a1;
  v15 = a2;
  v14 = a3;
  v13 = a4;
  v12 = a5;
  v5 = &_dispatch_main_q;
  v6 = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_10010D2CC;
  v10 = &unk_100280C90;
  v11 = v15;
  dispatch_async((dispatch_queue_t)v5, &v6);

}

id sub_10010D2A4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "languageDidChange", a1, a1);
}

id sub_10010D2CC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "localeDidChange", a1, a1);
}

void sub_10010D55C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10010D57C(uint64_t a1, void *a2)
{
  char v3;
  id v4;
  char v5;
  void **v6;
  int v7;
  int v8;
  void (*v9)(uint64_t, uint64_t, id);
  void *v10;
  id v11;
  id v12;
  char v13;
  id v14;
  id v15[2];
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v15[1] = (id)a1;
  v15[0] = objc_loadWeakRetained((id *)(a1 + 48));
  if (v15[0])
  {
    objc_msgSend(v15[0], "setEnabled:", 0);
    v14 = +[BuddyAppleIDAuthManager managerWithNavigationController:passcodeCacheManager:](BuddyAppleIDAuthManager, "managerWithNavigationController:passcodeCacheManager:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
    v13 = 0;
    v3 = 0;
    if (*(_DWORD *)(a1 + 56) == 8)
      v3 = +[DMCFeatureOverrides allowAnyMAIDToSignIn](DMCFeatureOverrides, "allowAnyMAIDToSignIn") ^ 1;
    v13 = v3 & 1;
    v4 = location[0];
    v5 = v3 & 1;
    v6 = _NSConcreteStackBlock;
    v7 = -1073741824;
    v8 = 0;
    v9 = sub_10010D6F4;
    v10 = &unk_100282FF8;
    v11 = v15[0];
    v12 = location[0];
    objc_msgSend(v14, "fetchAuthModeForUsername:requiresAppleMAID:completion:", v4, v5 & 1, &v6);
    objc_storeStrong(&v12, 0);
    objc_storeStrong(&v11, 0);
    objc_storeStrong(&v14, 0);
  }
  objc_storeStrong(v15, 0);
  objc_storeStrong(location, 0);
}

void sub_10010D6F4(uint64_t a1, uint64_t a2, id obj)
{
  id v4;
  id location;
  uint64_t v6;
  uint64_t v7;

  v7 = a1;
  v6 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  objc_msgSend(*(id *)(a1 + 32), "setEnabled:", 1, a1);
  if (v6 == 2)
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "handler");
    (*((void (**)(id, _QWORD, _QWORD))v4 + 2))(v4, *(_QWORD *)(a1 + 40), 0);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setShowsPasswordAsField:animated:", 1, 1);
  }
  objc_storeStrong(&location, 0);
}

void sub_10010D9A4(uint64_t a1)
{
  id v2;
  BOOL v3;
  void *v4;
  void **v5;
  int v6;
  int v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  BOOL v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v14 = a1;
  v13 = a1;
  v12 = 0;
  v2 = +[AKURLBag sharedBag](AKURLBag, "sharedBag");
  v3 = 0;
  if ((objc_msgSend(v2, "isPhoneNumberSupportedConfig") & 1) != 0)
    v3 = *(_DWORD *)(a1 + 40) != 8;

  v12 = v3;
  if (v3)
  {
    v4 = &_dispatch_main_q;
    v5 = _NSConcreteStackBlock;
    v6 = -1073741824;
    v7 = 0;
    v8 = sub_10010DABC;
    v9 = &unk_100280B18;
    v10 = *(id *)(a1 + 32);
    v11 = v12;
    dispatch_async((dispatch_queue_t)v4, &v5);

    objc_storeStrong(&v10, 0);
  }
}

void sub_10010DABC(uint64_t a1)
{
  id v1;
  NSBundle *v2;
  NSString *v3;

  *(_BYTE *)(*(_QWORD *)(a1 + 32) + 44) = *(_BYTE *)(a1 + 40) & 1;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 32) + 44) & 1) != 0)
  {
    v1 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "editableTextField", a1, a1);
    v2 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BuddyAppleIDSignInController));
    v3 = -[NSBundle localizedStringForKey:value:table:](v2, "localizedStringForKey:value:table:", CFSTR("SIGN_IN_EMAIL_OR_PHONE"), &stru_100284738, CFSTR("AppleIDAuth"));
    objc_msgSend(v1, "setPlaceholder:", v3);

  }
}

void sub_10010F788(uint64_t a1)
{
  NSBundle *v2;
  NSString *v3;
  NSBundle *v4;
  NSBundle *v5;
  const __CFString *v6;
  NSString *v7;
  NSBundle *v8;
  NSBundle *v9;
  const __CFString *v10;
  NSString *v11;
  UIAlertAction *v12;
  id v13;
  NSBundle *v14;
  NSString *v15;
  UIAlertAction *v16;
  id WeakRetained;
  void **v18;
  int v19;
  int v20;
  void (*v21)(id *, void *);
  void *v22;
  id v23;
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  v2 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BuddyAppleIDSignInController));
  v3 = -[NSBundle localizedStringForKey:value:table:](v2, "localizedStringForKey:value:table:", CFSTR("ICLOUD_UPGRADE_SKIP_TITLE"), &stru_100284738, CFSTR("AppleIDAuth"));
  v4 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BuddyAppleIDSignInController));
  v5 = v4;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    v6 = CFSTR("ICLOUD_UPGRADE_SKIP_BODY");
  else
    v6 = CFSTR("STORE_ACCOUNT_UPGRADE_SKIP_BODY");
  v7 = -[NSBundle localizedStringForKey:value:table:](v4, "localizedStringForKey:value:table:", v6, &stru_100284738, CFSTR("AppleIDAuth"));
  location[0] = +[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v3, v7, 1);

  v8 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BuddyAppleIDSignInController));
  v9 = v8;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    v10 = CFSTR("DONT_SKIP_ALERT_BUTTON");
  else
    v10 = CFSTR("CANCEL");
  v11 = -[NSBundle localizedStringForKey:value:table:](v8, "localizedStringForKey:value:table:", v10, &stru_100284738, CFSTR("AppleIDAuth"));
  v12 = +[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v11, 1, 0);
  objc_msgSend(location[0], "addAction:", v12);

  v13 = location[0];
  v14 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BuddyAppleIDSignInController));
  v15 = -[NSBundle localizedStringForKey:value:table:](v14, "localizedStringForKey:value:table:", CFSTR("SKIP_ALERT_BUTTON"), &stru_100284738, CFSTR("AppleIDAuth"));
  v18 = _NSConcreteStackBlock;
  v19 = -1073741824;
  v20 = 0;
  v21 = sub_10010FAA8;
  v22 = &unk_100280DF0;
  objc_copyWeak(&v23, (id *)(a1 + 32));
  v16 = +[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v15, 0, &v18);
  objc_msgSend(v13, "addAction:", v16);

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "presentViewController:animated:completion:", location[0], 1, 0);

  objc_destroyWeak(&v23);
  objc_storeStrong(location, 0);
}

void sub_10010FA7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  id *v11;

  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void sub_10010FAA8(id *a1, void *a2)
{
  id v3[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3[1] = a1;
  v3[0] = objc_loadWeakRetained(a1 + 4);
  if (v3[0] && *((_QWORD *)v3[0] + 7))
    (*(void (**)(void))(*((_QWORD *)v3[0] + 7) + 16))();
  objc_storeStrong(v3, 0);
  objc_storeStrong(location, 0);
}

void sub_10010FB50(id *a1)
{
  NSBundle *v2;
  NSString *v3;
  NSBundle *v4;
  NSString *v5;
  NSBundle *v6;
  NSString *v7;
  UIAlertAction *v8;
  id v9;
  NSBundle *v10;
  NSString *v11;
  UIAlertAction *v12;
  id WeakRetained;
  void **v14;
  int v15;
  int v16;
  void (*v17)(id *, void *);
  void *v18;
  id v19;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  v2 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BuddyAppleIDSignInController));
  v3 = -[NSBundle localizedStringForKey:value:table:](v2, "localizedStringForKey:value:table:", CFSTR("ICLOUD_UPGRADE_SKIP_TITLE"), &stru_100284738, CFSTR("AppleIDAuth"));
  v4 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BuddyAppleIDSignInController));
  v5 = -[NSBundle localizedStringForKey:value:table:](v4, "localizedStringForKey:value:table:", CFSTR("ICLOUD_UPGRADE_SKIP_BODY"), &stru_100284738, CFSTR("AppleIDAuth"));
  location[0] = +[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v3, v5, 1);

  v6 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BuddyAppleIDSignInController));
  v7 = -[NSBundle localizedStringForKey:value:table:](v6, "localizedStringForKey:value:table:", CFSTR("DONT_SKIP_ALERT_BUTTON"), &stru_100284738, CFSTR("AppleIDAuth"));
  v8 = +[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v7, 1, 0);
  objc_msgSend(location[0], "addAction:", v8);

  v9 = location[0];
  v10 = +[NSBundle bundleForClass:](NSBundle, "bundleForClass:", objc_opt_class(BuddyAppleIDSignInController));
  v11 = -[NSBundle localizedStringForKey:value:table:](v10, "localizedStringForKey:value:table:", CFSTR("SKIP_ALERT_BUTTON"), &stru_100284738, CFSTR("AppleIDAuth"));
  v14 = _NSConcreteStackBlock;
  v15 = -1073741824;
  v16 = 0;
  v17 = sub_10010FE48;
  v18 = &unk_100280DF0;
  objc_copyWeak(&v19, a1 + 4);
  v12 = +[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v11, 0, &v14);
  objc_msgSend(v9, "addAction:", v12);

  WeakRetained = objc_loadWeakRetained(a1 + 4);
  objc_msgSend(WeakRetained, "presentViewController:animated:completion:", location[0], 1, 0);

  objc_destroyWeak(&v19);
  objc_storeStrong(location, 0);
}

void sub_10010FE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object)
{
  id *v11;

  objc_destroyWeak(v11);
  _Unwind_Resume(a1);
}

void sub_10010FE48(id *a1, void *a2)
{
  id v3[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3[1] = a1;
  v3[0] = objc_loadWeakRetained(a1 + 4);
  if (v3[0] && *((_QWORD *)v3[0] + 7))
    (*(void (**)(void))(*((_QWORD *)v3[0] + 7) + 16))();
  objc_storeStrong(v3, 0);
  objc_storeStrong(location, 0);
}

uint64_t sub_1001108A4()
{
  dispatch_block_t block;
  dispatch_once_t *predicate;

  predicate = (dispatch_once_t *)&unk_1002EEA50;
  block = 0;
  objc_storeStrong(&block, &stru_1002830D0);
  if (*predicate != -1)
    dispatch_once(predicate, block);
  objc_storeStrong(&block, 0);
  return byte_1002EEA48 & 1;
}

uint64_t sub_10011133C()
{
  dispatch_block_t block;
  dispatch_once_t *predicate;

  predicate = (dispatch_once_t *)&unk_1002EEA58;
  block = 0;
  objc_storeStrong(&block, &stru_1002830F0);
  if (*predicate != -1)
    dispatch_once(predicate, block);
  objc_storeStrong(&block, 0);
  return byte_1002EEA49 & 1;
}

void sub_100111F90(uint64_t a1)
{
  id v2;
  void (**v3)(id, id, id);
  void *v4;
  id v5;
  id v6;
  id v7;
  id v8;

  v2 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "editableTextField", a1, a1);
  objc_msgSend(v2, "resignFirstResponder");

  v3 = (void (**)(id, id, id))objc_msgSend(*(id *)(a1 + 32), "handler");
  v4 = *(void **)(a1 + 32);
  v5 = objc_msgSend(v4, "username");
  v6 = objc_msgSend(v4, "_serverFriendlyDisplayNameForCurrentUserName:", v5);
  v7 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "editableTextField");
  v8 = objc_msgSend(v7, "text");
  v3[2](v3, v6, v8);

}

void sub_100112C64(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "tableView", a1, a1);
  objc_msgSend(v2, "insertRowsAtIndexPaths:withRowAnimation:", *(_QWORD *)(a1 + 40), 3);

  v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "editableTextField");
  objc_msgSend(v3, "becomeFirstResponder");

}

void sub_100112CF4(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "continueButton");
  objc_msgSend(v1, "setEnabled:", 0);

}

void sub_100112D48(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "tableView", a1, a1);
  objc_msgSend(v2, "layoutIfNeeded");

  v3 = objc_msgSend(*(id *)(a1 + 32), "tableView");
  objc_msgSend(v3, "deleteRowsAtIndexPaths:withRowAnimation:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

}

void sub_1001139E8(id a1)
{
  UIDevice *v1;

  v1 = +[UIDevice currentDevice](UIDevice, "currentDevice", a1, a1);
  byte_1002EEA48 = -[UIDevice userInterfaceIdiom](v1, "userInterfaceIdiom") == UIUserInterfaceIdiomPhone;

}

void sub_100113A54(id a1)
{
  UIDevice *v1;

  v1 = +[UIDevice currentDevice](UIDevice, "currentDevice", a1, a1);
  byte_1002EEA49 = (id)-[UIDevice userInterfaceIdiom](v1, "userInterfaceIdiom") == (id)1;

}

void sub_100113D04(id *a1, void *a2, void *a3)
{
  id v5;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v5 = 0;
  objc_storeStrong(&v5, a3);
  objc_msgSend(a1[4], "_updateFillColor", a1);
  objc_storeStrong(&v5, 0);
  objc_storeStrong(location, 0);
}

double sub_100114F70(uint64_t a1, int a2, int a3, uint64_t a4)
{
  double result;

  *(_QWORD *)&result = 67109634;
  *(_DWORD *)a1 = 67109634;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 1024;
  *(_DWORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 14) = 2114;
  *(_QWORD *)(a1 + 16) = a4;
  return result;
}

id sub_100116F34()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEA60;
  v13 = qword_1002EEA60;
  if (!qword_1002EEA60)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001183CC;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001183CC(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_100117020(id *a1, void *a2)
{
  void *v3;
  void **block;
  int v5;
  int v6;
  void (*v7)(uint64_t);
  void *v8;
  id v9;
  id v10[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = a1;
  v3 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_100117110;
  v8 = &unk_100280D00;
  v9 = a1[4];
  v10[0] = location[0];
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_100117110(uint64_t a1)
{
  NSNumber *v2;
  id v3;
  void (**v4)(id, id);
  id v5;

  v2 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", *(_QWORD *)(a1 + 40) != 0, a1);
  objc_msgSend(*(id *)(a1 + 32), "setReadyForPresentation:", v2);

  v3 = objc_msgSend(*(id *)(a1 + 32), "viewControllerAvailableBlock");
  if (v3)
  {
    v4 = (void (**)(id, id))objc_msgSend(*(id *)(a1 + 32), "viewControllerAvailableBlock");
    v5 = objc_msgSend(*(id *)(a1 + 32), "parentViewController");
    v4[2](v4, v5);

    objc_msgSend(*(id *)(a1 + 32), "setViewControllerAvailableBlock:", 0);
  }
}

void sub_10011744C(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "readyForPresentation", a1, a1);

  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 40);
    v4 = objc_msgSend(*(id *)(a1 + 32), "parentViewController");
    (*(void (**)(uint64_t, id))(v3 + 16))(v3, v4);

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setViewControllerAvailableBlock:", *(_QWORD *)(a1 + 40));
  }
}

id sub_1001175C8(uint64_t a1)
{
  if ((objc_msgSend(*(id *)(a1 + 32), "hasAccountType", a1, a1) & 1) != 0)
    return (id)(*(uint64_t (**)(_QWORD, id))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), objc_msgSend(*(id *)(a1 + 32), "accountType"));
  else
    return objc_msgSend(*(id *)(a1 + 32), "setAccountTypeSelectedBlock:", *(_QWORD *)(a1 + 40));
}

id sub_100117D68(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "hasAccountType", a1, a1);
  if ((result & 1) == 0)
    return objc_msgSend(*(id *)(a1 + 32), "_accountTypeSelected:", objc_msgSend(*(id *)(a1 + 40), "accountType"));
  return result;
}

id sub_100117EF8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_accountTypeSelected:", *(_QWORD *)(a1 + 40), a1, a1);
}

id sub_100118064(NSObject *a1)
{
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  _WORD v6[3];
  os_log_type_t v7;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  v2 = -[objc_class hasAccountType](a1[4].isa, "hasAccountType");
  if ((v2 & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v2);
    v7 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v3 = oslog[0];
      v4 = v7;
      sub_100038C3C(v6);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Forcing account type selection due to loss of proximity connection", (uint8_t *)v6, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    -[objc_class _accountTypeSelected:](a1[4].isa, "_accountTypeSelected:", 2);
  }
  return -[objc_class setDelegate:](a1[4].isa, "setDelegate:", 0);
}

void sub_1001183CC(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_10011850C();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("PASUIDependentViewPresenter");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getPASUIDependentViewPresenterClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyProximitySetupDependentController.m"), 21, CFSTR("Unable to find class %s"), "PASUIDependentViewPresenter");

    __break(1u);
  }
  qword_1002EEA60 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_10011850C()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_100118638((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *ProximityAppleIDSetupUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyProximitySetupDependentController.m"), 20, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_100118638(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEA68;
  v9 = qword_1002EEA68;
  if (!qword_1002EEA68)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001186C8;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1001186C8((uint64_t)&v2);
  }
  return qword_1002EEA68;
}

uint64_t sub_1001186C8(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/ProximityAppleIDSetupUI.framework/ProximityAppleIDSetupUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEA68 = result;
  return result;
}

void sub_1001199A0(NSObject *a1, char a2, id obj)
{
  uint64_t v4;
  NSString *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  BOOL v11;
  char v12;
  id v13;
  char v14;
  id v15;
  os_log_type_t v16;
  os_log_t oslog[2];
  id location;
  char v19;
  NSObject *v20;
  uint8_t buf[24];

  v20 = a1;
  v19 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if (location)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v16 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v14 = 0;
      v12 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v5 = (NSString *)location;
      }
      else if (location)
      {
        v15 = objc_msgSend(location, "domain");
        v14 = 1;
        v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v15, objc_msgSend(location, "code"));
        v13 = v5;
        v12 = 1;
      }
      else
      {
        v5 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v16, "Failed to determine new user disposition: %{public}@", buf, 0xCu);
      if ((v12 & 1) != 0)

      if ((v14 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v6 = -[objc_class setupMethod](a1[4].isa, "setupMethod");
    v7 = objc_msgSend(v6, "intent");

    v11 = v7 == (id)2;
    v8 = objc_alloc((Class)BYSetupUserDisposition);
    v10 = objc_msgSend(v8, "initWithNewUser:child:", v19 & 1, v7 == (id)2);
    v9 = -[objc_class buddyPreferencesExcludedFromBackup](a1[4].isa, "buddyPreferencesExcludedFromBackup");
    objc_msgSend(v10, "persistUsingPreferences:", v9);

    objc_storeStrong(&v10, 0);
  }
  if (a1[5].isa)
    (*((void (**)(void))a1[5].isa + 2))();
  objc_storeStrong(&location, 0);
}

uint64_t sub_10011B0D8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 0);
}

void sub_10011B438(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, id location)
{
  id *v17;

  objc_destroyWeak(v17);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10011B458(id *a1)
{
  id v1;
  id v2;
  id v3;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  v1 = objc_msgSend(location[0], "finishedController");
  objc_msgSend(v1, "setDelegate:", 0);

  v2 = objc_msgSend(location[0], "delegate");
  v3 = objc_msgSend(location[0], "appStoreController");
  objc_msgSend(v3, "setDelegate:", v2);

  objc_storeStrong(location, 0);
}

void sub_10011C650(NSObject *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  id v7;
  NSString *v8;
  char v9;
  NSString *v10;
  char v11;
  id v12;
  os_log_t v13;
  id location;
  uint8_t buf[7];
  os_log_type_t v16;
  os_log_t oslog[3];
  uint8_t v18[24];

  oslog[2] = a1;
  oslog[1] = a1;
  v2 = -[objc_class managedConfiguration](a1[4].isa, "managedConfiguration");
  objc_msgSend(v2, "setupAssistantDidFinish");

  v3 = -[objc_class mdmReturnToServiceController](a1[4].isa, "mdmReturnToServiceController");
  objc_msgSend(v3, "returnToServiceFlowCompleted");

  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
  v16 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v5 = oslog[0];
    v6 = v16;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Configuring Login Window...", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  v7 = +[DMCMultiUserModeUtilities configureToSharedDeviceWithPreferenceDomain:](DMCMultiUserModeUtilities, "configureToSharedDeviceWithPreferenceDomain:", kMDMNotBackedUpPreferencesDomain);
  location = v7;
  if (v7)
  {
    v13 = (os_log_t)(id)_BYLoggingFacility(v7);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v11 = 0;
      v9 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v8 = (NSString *)location;
      }
      else if (location)
      {
        v12 = objc_msgSend(location, "domain");
        v11 = 1;
        v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v12, objc_msgSend(location, "code"));
        v10 = v8;
        v9 = 1;
      }
      else
      {
        v8 = 0;
      }
      sub_100039500((uint64_t)v18, (uint64_t)v8);
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Switch to Login Window failed: %{public}@", v18, 0xCu);
      if ((v9 & 1) != 0)

      if ((v11 & 1) != 0)
    }
    objc_storeStrong((id *)&v13, 0);
    -[objc_class _showConfigurationFailedForError:](a1[4].isa, "_showConfigurationFailedForError:", location);
  }
  objc_storeStrong(&location, 0);
}

void sub_10011C9DC(id *a1)
{
  id v2;
  NSString *v3;
  id v4;
  NSBundle *v5;
  NSString *v6;
  id v7;
  NSBundle *v8;
  NSString *v9;
  UIAlertAction *v10;
  void **v11;
  int v12;
  int v13;
  void (*v14)(id *, void *);
  void *v15;
  id v16;
  id location;
  id v18[3];

  v18[2] = a1;
  v18[1] = a1;
  v18[0] = 0;
  if (CPIsInternalDevice())
  {
    v2 = objc_msgSend(a1[4], "localizedDescription");
    v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("Internal message: %@"), v2);
    v4 = v18[0];
    v18[0] = v3;

  }
  v5 = +[NSBundle mainBundle](NSBundle, "mainBundle");
  v6 = -[NSBundle localizedStringForKey:value:table:](v5, "localizedStringForKey:value:table:", CFSTR("MULTI_USER_CONFIG_FAILED"), &stru_100284738, CFSTR("Localizable"));
  location = +[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v6, v18[0], 1);

  v7 = location;
  v8 = +[NSBundle mainBundle](NSBundle, "mainBundle");
  v9 = -[NSBundle localizedStringForKey:value:table:](v8, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_100284738, CFSTR("Localizable"));
  v11 = _NSConcreteStackBlock;
  v12 = -1073741824;
  v13 = 0;
  v14 = sub_10011CC24;
  v15 = &unk_100280A28;
  v16 = a1[5];
  v10 = +[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v9, 0, &v11);
  objc_msgSend(v7, "addAction:", v10);

  objc_msgSend(a1[5], "presentViewController:animated:completion:", location, 1, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(v18, 0);
}

void sub_10011CC24(id *a1, void *a2)
{
  id v3;
  id v4;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(a1[4], "navigationController");
  v4 = objc_msgSend(v3, "popViewControllerAnimated:", 1);

  objc_storeStrong(location, 0);
}

id sub_10011D2E4()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEA70;
  v13 = qword_1002EEA70;
  if (!qword_1002EEA70)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10011E568;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_10011E568(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_10011D3D0(NSObject *a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  id v7;
  uint64_t isKindOfClass;
  Class isa;
  id v10;
  Class v11;
  id v12;
  os_log_t v13;
  int v14;
  os_log_type_t v15;
  os_log_t oslog[2];
  id v17;
  id location[2];
  uint8_t v19[16];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v17 = 0;
  objc_storeStrong(&v17, a3);
  oslog[1] = a1;
  if (v17)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    v15 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_100039500((uint64_t)buf, (uint64_t)v17);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v15, "Failed to request diagnostics view controller: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
    v14 = 1;
  }
  else
  {
    v6 = location[0];
    v7 = sub_10011D2E4();
    isKindOfClass = objc_opt_isKindOfClass(v6, v7);
    if ((isKindOfClass & 1) != 0)
    {
      -[objc_class setDiagnosticsRemoteController:](a1[4].isa, "setDiagnosticsRemoteController:", location[0]);
      isa = a1[4].isa;
      v10 = -[objc_class diagnosticsRemoteController](isa, "diagnosticsRemoteController");
      objc_msgSend(v10, "setDelegate:", isa);

      v11 = a1[4].isa;
      v12 = -[objc_class diagnosticsRemoteController](v11, "diagnosticsRemoteController");
      -[objc_class presentViewController:animated:completion:](v11, "presentViewController:animated:completion:", v12, 1, 0);

    }
    else
    {
      v13 = (os_log_t)(id)_BYLoggingFacility(isKindOfClass);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        sub_100038C28((uint64_t)v19, (uint64_t)location[0]);
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Unexpected diagnostics view controller type: %@", v19, 0xCu);
      }
      objc_storeStrong((id *)&v13, 0);
    }
    v14 = 0;
  }
  objc_storeStrong(&v17, 0);
  objc_storeStrong(location, 0);
}

void sub_10011D868(id *a1)
{
  NSXPCInterface *v2;
  id v3;
  id v4;
  NSObject *v5;
  dispatch_time_t v6;
  intptr_t v7;
  NSObject *v8;
  os_log_type_t v9;
  id v10;
  unsigned __int8 v11;
  void *v12;
  void **v13;
  int v14;
  int v15;
  uint64_t (*v16)(uint64_t);
  void *v17;
  id v18[2];
  uint8_t buf[7];
  os_log_type_t v20;
  os_log_t oslog;
  BOOL v22;
  void **v23;
  int v24;
  int v25;
  intptr_t (*v26)(uint64_t, char);
  void *v27;
  id v28;
  id v29[2];
  uint64_t v30;
  uint64_t *v31;
  int v32;
  int v33;
  char v34;
  void **v35;
  int v36;
  int v37;
  intptr_t (*v38)(uint64_t);
  void *v39;
  id v40;
  _QWORD v41[4];
  id v42;
  id location;
  id v44[3];

  v44[2] = a1;
  v44[1] = a1;
  sub_10011DC60();
  v44[0] = objc_msgSend(objc_alloc((Class)NSXPCConnection), "initWithServiceName:", CFSTR("com.apple.DiagnosticsSessionAvailibility"));
  v2 = +[NSXPCInterface interfaceWithProtocol:](NSXPCInterface, "interfaceWithProtocol:", &OBJC_PROTOCOL___DADiagnosticsSessionAvailabilityProtocol);
  objc_msgSend(v44[0], "setRemoteObjectInterface:", v2);

  location = dispatch_semaphore_create(0);
  v41[0] = _NSConcreteStackBlock;
  v41[1] = 3221225472;
  v41[2] = sub_10011DD8C;
  v41[3] = &unk_100280730;
  v42 = location;
  objc_msgSend(v44[0], "setInterruptionHandler:", v41);
  v3 = v44[0];
  v35 = _NSConcreteStackBlock;
  v36 = -1073741824;
  v37 = 0;
  v38 = sub_10011DE34;
  v39 = &unk_100280730;
  v40 = location;
  objc_msgSend(v3, "setInvalidationHandler:", &v35);
  objc_msgSend(v44[0], "resume");
  v30 = 0;
  v31 = &v30;
  v32 = 0x20000000;
  v33 = 32;
  v34 = 0;
  v4 = objc_msgSend(v44[0], "remoteObjectProxy");
  v23 = _NSConcreteStackBlock;
  v24 = -1073741824;
  v25 = 0;
  v26 = sub_10011DEDC;
  v27 = &unk_1002831F0;
  v28 = v44[0];
  v29[1] = &v30;
  v29[0] = location;
  objc_msgSend(v4, "checkAvailabilityWithTicketNumber:response:", 0, &v23);

  v5 = location;
  v6 = dispatch_time(0, 3000000000);
  v7 = dispatch_semaphore_wait(v5, v6);
  v22 = v7 == 0;
  if (v7)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v7);
    v20 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v8 = oslog;
      v9 = v20;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Timed out checking retail diagnostics availability", buf, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  v10 = +[BYPreferencesController buddyPreferencesInternal](BYPreferencesController, "buddyPreferencesInternal");
  v11 = objc_msgSend(v10, "BOOLForKey:", CFSTR("ForceShowDiagnostics"));

  if ((v11 & 1) != 0)
    *((_BYTE *)v31 + 24) = 1;
  if (a1[4])
  {
    v12 = &_dispatch_main_q;
    v13 = _NSConcreteStackBlock;
    v14 = -1073741824;
    v15 = 0;
    v16 = sub_10011DFF8;
    v17 = &unk_1002817A8;
    v18[0] = a1[4];
    v18[1] = &v30;
    dispatch_async((dispatch_queue_t)v12, &v13);

    objc_storeStrong(v18, 0);
  }
  objc_storeStrong(v29, 0);
  objc_storeStrong(&v28, 0);
  _Block_object_dispose(&v30, 8);
  objc_storeStrong(&v40, 0);
  objc_storeStrong(&v42, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(v44, 0);
}

void sub_10011DC60()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_10011E6A8((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *iOSDiagnosticsLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("RetailDiagnosticsController.m"), 30, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

intptr_t sub_10011DD8C(uint64_t a1)
{
  NSObject *v2;
  os_log_type_t v3;
  _WORD v5[3];
  os_log_type_t v6;
  os_log_t oslog[3];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v6;
    sub_100038C3C(v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Retail Diagnostics connection interrupted", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t sub_10011DE34(uint64_t a1)
{
  NSObject *v2;
  os_log_type_t v3;
  _WORD v5[3];
  os_log_type_t v6;
  os_log_t oslog[3];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v6;
    sub_100038C3C(v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Retail Diagnostics connection invalidated", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 32));
}

intptr_t sub_10011DEDC(uint64_t a1, char a2)
{
  id v3;
  const __CFString *v4;
  os_log_t oslog[2];
  char v7;
  uint64_t v8;
  uint8_t buf[24];

  v8 = a1;
  v7 = a2;
  oslog[1] = (os_log_t)a1;
  v3 = objc_msgSend(*(id *)(a1 + 32), "invalidate");
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = v7 & 1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) & 1) != 0)
      v4 = CFSTR("YASE");
    else
      v4 = CFSTR("NERP");
    sub_100038C28((uint64_t)buf, (uint64_t)v4);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "RetailDiagnostics available: %@", buf, 0xCu);
  }
  objc_storeStrong((id *)oslog, 0);
  return dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
}

uint64_t sub_10011DFF8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) & 1);
}

void sub_10011E3E0(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "delegate", a1, a1);
  objc_msgSend(v2, "flowItemDone:", *(_QWORD *)(a1 + 32));

}

void sub_10011E568(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_10011DC60();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("DADiagnosticsRemoteHostViewController");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getDADiagnosticsRemoteHostViewControllerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("RetailDiagnosticsController.m"), 31, CFSTR("Unable to find class %s"), "DADiagnosticsRemoteHostViewController");

    __break(1u);
  }
  qword_1002EEA70 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_10011E6A8(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEA78;
  v9 = qword_1002EEA78;
  if (!qword_1002EEA78)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10011E738;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_10011E738((uint64_t)&v2);
  }
  return qword_1002EEA78;
}

uint64_t sub_10011E738(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/iOSDiagnostics.framework/iOSDiagnostics";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEA78 = result;
  return result;
}

double sub_10011FC00(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = 136446210;
  *(_DWORD *)a1 = 136446210;
  *(_QWORD *)(a1 + 4) = a2;
  return result;
}

void sub_1001212BC(id a1, NSDictionary *a2, id a3)
{
  uint64_t v5;
  id v6;
  os_log_t oslog[2];
  id v8;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v8 = 0;
  objc_storeStrong(&v8, a3);
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEBUG))
  {
    v6 = objc_retainBlock(v8);
    sub_100038C28((uint64_t)buf, (uint64_t)v6);
    _os_log_debug_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEBUG, "BuddyAppleIDSignInTask proximityAIDAHandler called, invoking completion: %@", buf, 0xCu);

  }
  objc_storeStrong((id *)oslog, 0);
  if (v8)
    (*((void (**)(void))v8 + 2))();
  objc_storeStrong(&v8, 0);
  objc_storeStrong(location, 0);
}

void sub_10012194C(id *a1)
{
  id v2;
  id v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  void *v7;
  void **v8;
  int v9;
  int v10;
  void (*v11)(uint64_t, uint64_t, id);
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint8_t buf[15];
  os_log_type_t v19;
  os_log_t oslog;
  id location;
  id v22;
  id v23;
  id v24;
  id v25[3];

  v25[2] = a1;
  v25[1] = a1;
  v25[0] = objc_alloc_init((Class)ACAccountStore);
  v24 = objc_msgSend(objc_alloc((Class)AIDAServiceOwnersManager), "initWithAccountStore:", v25[0]);
  v23 = objc_msgSend(a1[4], "_createServiceContextWithAuthenticationResults:", a1[5]);
  v2 = objc_msgSend(v23, "signInContexts");
  v22 = objc_msgSend(v2, "mutableCopy");

  location = objc_msgSend(v22, "objectForKeyedSubscript:", AIDAServiceTypeStore);
  objc_msgSend(location, "setCanMakeAccountActive:", (unint64_t)objc_msgSend(a1[4], "makeStoreServiceActive") & 1);
  v3 = objc_msgSend(a1[4], "flowControllerDelegate");
  objc_msgSend(v3, "setBackgroundDataclassEnablement:", 1);

  oslog = (os_log_t)(id)_BYLoggingFacility(v4);
  v19 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    v5 = oslog;
    v6 = v19;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Fetching IDS registration state...", buf, 2u);
  }
  objc_storeStrong((id *)&oslog, 0);
  v8 = _NSConcreteStackBlock;
  v9 = -1073741824;
  v10 = 0;
  v11 = sub_100121C0C;
  v12 = &unk_1002832C0;
  v13 = a1[4];
  v14 = v23;
  v15 = v24;
  v16 = a1[5];
  v17 = a1[6];
  v7 = &_dispatch_main_q;
  IDSRegistrationControlGetStateForRegistrationType(0, &v8, v7);

  objc_storeStrong(&v17, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(&v22, 0);
  objc_storeStrong(&v23, 0);
  objc_storeStrong(&v24, 0);
  objc_storeStrong(v25, 0);
}

void sub_100121C0C(uint64_t a1, uint64_t a2, id obj)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  void *v12;
  uint64_t v13;
  void **v14;
  int v15;
  int v16;
  void (*v17)(uint64_t, char, id);
  void *v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint8_t v24[7];
  os_log_type_t v25;
  os_log_t oslog;
  void **v27;
  int v28;
  int v29;
  void (*v30)(uint64_t, char, id);
  void *v31;
  id v32;
  id v33;
  id v34;
  id v35;
  uint8_t buf[15];
  os_log_type_t v37;
  id v38;
  BOOL v39;
  uint64_t v40;
  id location;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];

  v43 = a1;
  v42 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v40 = a1;
  v39 = v42 != 1;
  if (v42 == 1)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v4);
    v25 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v10 = oslog;
      v11 = v25;
      sub_100038C3C(v24);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "IDS registration is disabled; not signing in iMessage or FaceTime...",
        v24,
        2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    v44[0] = AIDAServiceTypeCloud;
    v44[1] = AIDAServiceTypeStore;
    v44[2] = AIDAServiceTypeGameCenter;
    v23 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v44, 3);
    v12 = *(void **)(a1 + 48);
    v13 = *(_QWORD *)(a1 + 40);
    v14 = _NSConcreteStackBlock;
    v15 = -1073741824;
    v16 = 0;
    v17 = sub_100122064;
    v18 = &unk_100283298;
    v19 = *(id *)(a1 + 56);
    v20 = *(id *)(a1 + 32);
    v21 = *(id *)(a1 + 48);
    v22 = *(id *)(a1 + 64);
    objc_msgSend(v12, "signInToServices:usingContext:completion:", v23, v13, &v14);
    objc_storeStrong(&v22, 0);
    objc_storeStrong(&v21, 0);
    objc_storeStrong(&v20, 0);
    objc_storeStrong(&v19, 0);
    objc_storeStrong(&v23, 0);
  }
  else
  {
    v38 = (id)_BYLoggingFacility(v4);
    v37 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)v38, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v38;
      v6 = v37;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "IDS registration is enabled; continuing to sign in all services...",
        buf,
        2u);
    }
    objc_storeStrong(&v38, 0);
    v7 = *(void **)(a1 + 32);
    v8 = *(_QWORD *)(a1 + 40);
    v9 = *(_QWORD *)(a1 + 48);
    v27 = _NSConcreteStackBlock;
    v28 = -1073741824;
    v29 = 0;
    v30 = sub_100121FB4;
    v31 = &unk_100283270;
    v32 = *(id *)(a1 + 56);
    v33 = *(id *)(a1 + 32);
    v34 = *(id *)(a1 + 48);
    v35 = *(id *)(a1 + 64);
    objc_msgSend(v7, "_signInToAllServicesUsingContext:serviceOwnersManager:completion:", v8, v9, &v27);
    objc_storeStrong(&v35, 0);
    objc_storeStrong(&v34, 0);
    objc_storeStrong(&v33, 0);
    objc_storeStrong(&v32, 0);
  }
  objc_storeStrong(&location, 0);
}

void sub_100121FB4(uint64_t a1, char a2, id obj)
{
  id v4;
  uint64_t v5;
  id location;
  char v7;
  uint64_t v8;

  v8 = a1;
  v7 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v5 = a1;
  if ((v7 & 1) != 0)
  {
    v4 = +[BFFAppleAccountInfo primaryAccountInfo](BFFAppleAccountInfo, "primaryAccountInfo", a1);
    objc_msgSend(v4, "updateWithAuthenticationResults:", *(_QWORD *)(a1 + 32));

  }
  objc_msgSend(*(id *)(a1 + 40), "_updateAgreedTerms:", *(_QWORD *)(a1 + 48), v5);
  if (*(_QWORD *)(a1 + 56))
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  objc_storeStrong(&location, 0);
}

void sub_100122064(uint64_t a1, char a2, id obj)
{
  id v4;
  uint64_t v5;
  unsigned __int8 v6;
  id v7;
  id v8[2];
  id location;
  char v10;
  uint64_t v11;

  v11 = a1;
  v10 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v8[1] = (id)a1;
  if ((v10 & 1) != 0)
  {
    v4 = +[BFFAppleAccountInfo primaryAccountInfo](BFFAppleAccountInfo, "primaryAccountInfo");
    objc_msgSend(v4, "updateWithAuthenticationResults:", *(_QWORD *)(a1 + 32));

  }
  objc_msgSend(*(id *)(a1 + 40), "_updateAgreedTerms:", *(_QWORD *)(a1 + 48));
  if (*(_QWORD *)(a1 + 56))
  {
    v8[0] = objc_msgSend(location, "objectForKeyedSubscript:", AIDAServiceTypeCloud);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = objc_msgSend(v8[0], "success");
    v7 = objc_msgSend(v8[0], "error");
    (*(void (**)(uint64_t, _QWORD, id))(v5 + 16))(v5, v6 & 1, v7);

    objc_storeStrong(v8, 0);
  }
  objc_storeStrong(&location, 0);
}

void sub_1001222CC(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void **v5;
  int v6;
  int v7;
  void (*v8)(uint64_t, char, id);
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id location;
  id v15;
  id v16;
  id v17[3];

  v17[2] = (id)a1;
  v17[1] = (id)a1;
  v17[0] = objc_alloc_init((Class)ACAccountStore);
  v16 = objc_msgSend(objc_alloc((Class)AIDAServiceOwnersManager), "initWithAccountStore:", v17[0]);
  v15 = objc_msgSend(*(id *)(a1 + 32), "_createServiceContextWithAuthenticationResults:", *(_QWORD *)(a1 + 40));
  v2 = objc_msgSend(v15, "signInContexts");
  location = objc_msgSend(v2, "objectForKeyedSubscript:", AIDAServiceTypeStore);

  objc_msgSend(location, "setCanMakeAccountActive:", (unint64_t)objc_msgSend(*(id *)(a1 + 32), "makeStoreServiceActive") & 1);
  LOBYTE(v2) = objc_msgSend(*(id *)(a1 + 32), "skipDataclassEnablement");
  v3 = objc_msgSend(*(id *)(a1 + 32), "flowControllerDelegate");
  objc_msgSend(v3, "setSkipDataclassEnablement:", v2 & 1);

  v4 = *(_QWORD *)(a1 + 48);
  v5 = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_1001224E8;
  v9 = &unk_100283298;
  v10 = *(id *)(a1 + 40);
  v11 = *(id *)(a1 + 32);
  v12 = v16;
  v13 = *(id *)(a1 + 56);
  objc_msgSend(v16, "signInToServices:usingContext:completion:", v4, v15, &v5);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(v17, 0);
}

void sub_1001224E8(uint64_t a1, char a2, id obj)
{
  id v4;
  uint64_t v5;
  id location;
  char v7;
  uint64_t v8;

  v8 = a1;
  v7 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v5 = a1;
  if ((v7 & 1) != 0)
  {
    v4 = +[BFFAppleAccountInfo primaryAccountInfo](BFFAppleAccountInfo, "primaryAccountInfo", a1);
    objc_msgSend(v4, "updateWithAuthenticationResults:", *(_QWORD *)(a1 + 32));

  }
  objc_msgSend(*(id *)(a1 + 40), "_updateAgreedTerms:", *(_QWORD *)(a1 + 48), v5);
  if (*(_QWORD *)(a1 + 56))
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  objc_storeStrong(&location, 0);
}

void sub_1001233F0(_QWORD *a1, char a2, id obj)
{
  uint64_t v4;
  unsigned __int8 v5;
  id v6;
  id v7[2];
  id location;
  char v9;
  _QWORD *v10;

  v10 = a1;
  v9 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v7[1] = a1;
  v7[0] = objc_msgSend(location, "objectForKeyedSubscript:", AIDAServiceTypeCloud);
  v4 = a1[4];
  v5 = objc_msgSend(v7[0], "success");
  v6 = objc_msgSend(v7[0], "error");
  (*(void (**)(uint64_t, _QWORD, id))(v4 + 16))(v4, v5 & 1, v6);

  objc_storeStrong(v7, 0);
  objc_storeStrong(&location, 0);
}

id sub_100123F80(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "cancelMigration", a1, a1);
}

id sub_1001241C8(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  NSBundle *v5;
  id v6;
  NSString *v7;

  v2 = objc_msgSend(*(id *)(a1 + 32), "lockscreenController", a1, a1);

  if (v2)
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "lockscreenController");
    objc_msgSend(v3, "deviceMigrationManager:didChangeConnectionInformation:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));

  }
  else
  {
    objc_msgSend(*(id *)(a1 + 32), "setManager:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "setConnectionInfo:", *(_QWORD *)(a1 + 48));
  }
  if (objc_msgSend(*(id *)(a1 + 48), "connectionType") == (id)1)
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "headerView");
    v5 = +[NSBundle mainBundle](NSBundle, "mainBundle");
    v6 = +[UIDevice modelSpecificLocalizedStringKeyForKey:](UIDevice, "modelSpecificLocalizedStringKeyForKey:", CFSTR("PROGRESS_DETAIL_WIRED"));
  }
  else
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "headerView");
    v5 = +[NSBundle mainBundle](NSBundle, "mainBundle");
    v6 = +[UIDevice modelSpecificLocalizedStringKeyForKey:](UIDevice, "modelSpecificLocalizedStringKeyForKey:", CFSTR("PROGRESS_DETAIL_WIRELESS"));
  }
  v7 = -[NSBundle localizedStringForKey:value:table:](v5, "localizedStringForKey:value:table:", v6, &stru_100284738, CFSTR("Migration"));
  objc_msgSend(v4, "setDetailText:", v7);

  return objc_msgSend(*(id *)(a1 + 32), "setDeviceConnectionInformation:", *(_QWORD *)(a1 + 48));
}

void sub_1001243F8(id *a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void **v5;
  int v6;
  int v7;
  void (*v8)(id *);
  void *v9;
  id v10;
  id v11[3];

  v11[2] = a1;
  v11[1] = a1;
  v2 = objc_msgSend(a1[4], "connectionState");
  if (v2 != objc_msgSend(a1[5], "connectionState"))
  {
    v3 = objc_msgSend(a1[5], "disconnectionQueue");
    dispatch_suspend(v3);

    objc_msgSend(a1[5], "setConnectionState:", objc_msgSend(a1[4], "connectionState"));
    v4 = &_dispatch_main_q;
    v5 = _NSConcreteStackBlock;
    v6 = -1073741824;
    v7 = 0;
    v8 = sub_100124528;
    v9 = &unk_100280D00;
    v10 = a1[5];
    v11[0] = a1[4];
    dispatch_sync((dispatch_queue_t)v4, &v5);

    objc_storeStrong(v11, 0);
    objc_storeStrong(&v10, 0);
  }
}

void sub_100124528(id *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  BuddyMigrationDisconnectController *v10;
  id v11;
  BuddyMigrationDisconnectController *v12;
  id v13;
  id v14;
  void **v15;
  int v16;
  int v17;
  void (*v18)(uint64_t);
  void *v19;
  id v20;
  void **v21;
  int v22;
  int v23;
  id (*v24)(uint64_t);
  void *v25;
  id v26;
  void **v27;
  int v28;
  int v29;
  void (*v30)(uint64_t);
  void *v31;
  id v32[3];

  v32[2] = a1;
  v32[1] = a1;
  v2 = objc_msgSend(a1[4], "presentedViewController");
  objc_msgSend(v2, "dismissViewControllerAnimated:completion:", 1, 0);

  v3 = objc_msgSend(a1[5], "connectionState");
  if (!v3)
    goto LABEL_8;
  if (v3 != (id)1)
  {
    if (v3 != (id)2)
      return;
LABEL_8:
    v10 = [BuddyMigrationDisconnectController alloc];
    v11 = objc_msgSend(a1[5], "connectionType");
    v21 = _NSConcreteStackBlock;
    v22 = -1073741824;
    v23 = 0;
    v24 = sub_10012485C;
    v25 = &unk_100280730;
    v26 = a1[4];
    v12 = -[BuddyMigrationDisconnectController initWithConnectionType:cancel:](v10, "initWithConnectionType:cancel:", v11, &v21);
    objc_msgSend(a1[4], "setDisconnectController:", v12);

    v13 = objc_msgSend(a1[4], "navigationController");
    v14 = objc_msgSend(a1[4], "disconnectController");
    v15 = _NSConcreteStackBlock;
    v16 = -1073741824;
    v17 = 0;
    v18 = sub_10012488C;
    v19 = &unk_100280730;
    v20 = a1[4];
    objc_msgSend(v13, "pushViewController:completion:", v14, &v15);

    objc_storeStrong(&v20, 0);
    objc_storeStrong(&v26, 0);
    return;
  }
  v4 = objc_msgSend(a1[4], "navigationController");
  v5 = objc_msgSend(v4, "topViewController");
  v6 = objc_msgSend(a1[4], "disconnectController");

  if (v5 == v6)
  {
    objc_msgSend(a1[4], "setDisconnectController:", 0);
    v7 = objc_msgSend(a1[4], "navigationController");
    v8 = a1[4];
    v27 = _NSConcreteStackBlock;
    v28 = -1073741824;
    v29 = 0;
    v30 = sub_100124810;
    v31 = &unk_100280730;
    v32[0] = a1[4];
    objc_msgSend(v7, "popToViewController:completion:", v8, &v27);

    objc_storeStrong(v32, 0);
  }
  else
  {
    v9 = objc_msgSend(a1[4], "disconnectionQueue");
    dispatch_resume(v9);

  }
}

void sub_100124810(uint64_t a1)
{
  NSObject *v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "disconnectionQueue", a1, a1);
  dispatch_resume(v1);

}

id sub_10012485C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_cancelTapped:", *(_QWORD *)(a1 + 32), a1, a1);
}

void sub_10012488C(uint64_t a1)
{
  NSObject *v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "disconnectionQueue", a1, a1);
  dispatch_resume(v1);

}

id sub_100124A14(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setDeviceTransferProgress:", *(_QWORD *)(a1 + 40), a1, a1);
}

void sub_10012591C(uint64_t a1)
{
  id v2;
  unsigned __int8 v3;
  uint64_t HasCompletedInitialRun;
  uint64_t v5;
  char v6;
  NSObject *v7;
  os_log_type_t v8;
  NSDate *v9;
  id v10;
  uint64_t v11;
  NSDate *v12;
  NSDate *v13;
  id v14;
  void *v15;
  void **block;
  int v17;
  int v18;
  void (*v19)(uint64_t);
  void *v20;
  id v21;
  id v22;
  os_log_type_t v23;
  os_log_t v24;
  id location;
  uint8_t buf[15];
  os_log_type_t v27;
  os_log_t oslog;
  char v29;
  id v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t v35[24];

  v34 = a1;
  v33 = a1;
  v2 = +[BuddyActivationConfiguration currentConfiguration](BuddyActivationConfiguration, "currentConfiguration");
  v3 = objc_msgSend(v2, "isActivated");

  v32 = v3 & 1;
  v31 = 0;
  v29 = 0;
  v6 = 1;
  if ((v3 & 1) == 0)
  {
    HasCompletedInitialRun = BYSetupAssistantHasCompletedInitialRun(HasCompletedInitialRun, v5);
    v6 = 1;
    if ((HasCompletedInitialRun & 1) == 0)
    {
      v30 = +[BYSetupStateManager sharedManager](BYSetupStateManager, "sharedManager");
      v29 = 1;
      HasCompletedInitialRun = (uint64_t)objc_msgSend(v30, "didRestoreFromBackup");
      v6 = HasCompletedInitialRun;
    }
  }
  if ((v29 & 1) != 0)

  v31 = v6 & 1;
  if ((v6 & 1) != 0)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(HasCompletedInitialRun);
    v27 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v7 = oslog;
      v8 = v27;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Device is considered having been set up; not starting inactivity timer...",
        buf,
        2u);
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  else
  {
    v9 = +[NSDate date](NSDate, "date");
    location = +[NSDate dateWithTimeInterval:sinceDate:](NSDate, "dateWithTimeInterval:sinceDate:", v9, 43200.0);

    v10 = +[BYPreferencesController buddyPreferencesInternal](BYPreferencesController, "buddyPreferencesInternal");
    LOBYTE(v9) = objc_msgSend(v10, "BOOLForKey:", CFSTR("TestInactivityShutdown"));

    if ((v9 & 1) != 0)
    {
      v12 = +[NSDate date](NSDate, "date");
      v13 = +[NSDate dateWithTimeInterval:sinceDate:](NSDate, "dateWithTimeInterval:sinceDate:", v12, 30.0);
      v14 = location;
      location = v13;

    }
    v24 = (os_log_t)(id)_BYLoggingFacility(v11);
    v23 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      sub_100039500((uint64_t)v35, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, v24, v23, "Starting inactivity timer to fire at %{public}@...", v35, 0xCu);
    }
    objc_storeStrong((id *)&v24, 0);
    v15 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v17 = -1073741824;
    v18 = 0;
    v19 = sub_100125CA4;
    v20 = &unk_100280D00;
    v21 = *(id *)(a1 + 32);
    v22 = location;
    dispatch_async((dispatch_queue_t)v15, &block);

    objc_storeStrong(&v22, 0);
    objc_storeStrong(&v21, 0);
    objc_storeStrong(&location, 0);
  }
}

void sub_100125CA4(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  NSRunLoop *v5;

  v2 = objc_msgSend(objc_alloc((Class)PCPersistentTimer), "initWithFireDate:serviceIdentifier:target:selector:userInfo:", *(_QWORD *)(a1 + 40), CFSTR("com.apple.purplebuddy.inactivitytimer"), *(_QWORD *)(a1 + 32), "_timerFired:", 0, a1, a1);
  objc_msgSend(*(id *)(a1 + 32), "setTimer:", v2);

  v3 = objc_msgSend(*(id *)(a1 + 32), "timer");
  objc_msgSend(v3, "setMinimumEarlyFireProportion:", 1.0);

  v4 = objc_msgSend(*(id *)(a1 + 32), "timer");
  v5 = +[NSRunLoop mainRunLoop](NSRunLoop, "mainRunLoop");
  objc_msgSend(v4, "scheduleInRunLoop:", v5);

}

void sub_100125EF8(NSObject *a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  id v11;
  id v12;
  _WORD v13[3];
  os_log_type_t v14;
  os_log_t v15;
  uint8_t v16[7];
  os_log_type_t v17;
  os_log_t v18;
  int v19;
  os_log_type_t v20;
  os_log_t oslog[2];
  id v22;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v22 = 0;
  objc_storeStrong(&v22, a3);
  oslog[1] = a1;
  if (v22)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    v20 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_100039500((uint64_t)buf, (uint64_t)v22);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v20, "Failed to retrieve activation lock information: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
    v19 = 1;
  }
  else
  {
    v6 = objc_msgSend(location[0], "isActivationLocked");
    if ((v6 & 1) != 0)
    {
      v18 = (os_log_t)(id)_BYLoggingFacility(v6);
      v17 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        v7 = v18;
        v8 = v17;
        sub_100038C3C(v16);
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Device is activation locked; not shutting down device",
          v16,
          2u);
      }
      objc_storeStrong((id *)&v18, 0);
    }
    else
    {
      v15 = (os_log_t)(id)_BYLoggingFacility(v6);
      v14 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        v9 = v15;
        v10 = v14;
        sub_100038C3C(v13);
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Shutting down device...", (uint8_t *)v13, 2u);
      }
      objc_storeStrong((id *)&v15, 0);
      -[objc_class _removePowerLog](a1[4].isa, "_removePowerLog");
      -[objc_class _enableShelfLifeMode](a1[4].isa, "_enableShelfLifeMode");
      v11 = +[FBSSystemService sharedService](FBSSystemService, "sharedService");
      v12 = objc_msgSend(objc_alloc((Class)FBSShutdownOptions), "initWithReason:", CFSTR("Setup Assistant Inactivity"));
      objc_msgSend(v11, "shutdownWithOptions:", v12);

    }
    v19 = 0;
  }
  objc_storeStrong(&v22, 0);
  objc_storeStrong(location, 0);
}

void sub_100126B28(uint64_t a1, char a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  unsigned __int8 v21;
  id v22;
  objc_super v23;
  os_log_type_t v24;
  os_log_t oslog;
  id location;
  id v27;
  unsigned __int8 v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint8_t buf[24];

  v31 = a1;
  v30 = a2;
  v29 = a1;
  v28 = 0;
  v28 = objc_msgSend(*(id *)(a1 + 32), "isAbleToBackupBeforeRestore") & 1;
  if (v28)
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "backupDeviceController");
    v4 = objc_msgSend(*(id *)(a1 + 32), "deviceName");
    v5 = objc_msgSend(*(id *)(a1 + 32), "backupItem");
    v6 = objc_msgSend(v5, "backup");
    v7 = objc_msgSend(v6, "backupUUID");
    objc_msgSend(v3, "startBackupDevice:UUID:", v4, v7);

  }
  v8 = objc_msgSend(*(id *)(a1 + 32), "backupItem");
  v9 = objc_msgSend(v8, "backup");
  v10 = objc_msgSend(*(id *)(a1 + 32), "backupItem");
  v11 = objc_msgSend(v10, "snapshot");
  v27 = +[RestorableBackupItem restorableBackupItemWithBackup:snapshot:](RestorableBackupItem, "restorableBackupItemWithBackup:snapshot:", v9, v11);

  v12 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
  objc_msgSend(v12, "setBackupItem:updateBackupMetadata:prefetchAccounts:", v27, (v28 ^ 1) & 1, 1);

  v13 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
  objc_msgSend(v13, "setAllowCellularNetwork:", v30 & 1);

  if ((v28 & 1) != 0)
  {
    v14 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
    location = objc_msgSend(v14, "backupMetadata");

    oslog = (os_log_t)(id)_BYLoggingFacility(v15);
    v24 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_100038C28((uint64_t)buf, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog, v24, "Using metadata from source device, rather than backup: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    v16 = location;
    v17 = objc_msgSend(*(id *)(a1 + 32), "existingSettings");
    objc_msgSend(v17, "setBackupMetadata:", v16);

    v18 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
    objc_msgSend(v18, "setForceSoftwareUpdateRestore:", (unint64_t)objc_msgSend(*(id *)(a1 + 32), "forceSoftwareUpdateRequiredForNewBackup") & 1);

    objc_storeStrong(&location, 0);
  }
  v19 = objc_msgSend(*(id *)(a1 + 32), "buddyPreferences");
  objc_msgSend(v19, "setObject:forKey:", &__kCFBooleanTrue, CFSTR("RestoreChoice"));

  if ((v28 & 1) != 0)
  {
    v20 = objc_msgSend(*(id *)(a1 + 32), "expressRestoreAnalytics");
    objc_msgSend(v20, "setRestoreChoice:", 1);
  }
  else
  {
    v20 = objc_msgSend(*(id *)(a1 + 32), "expressRestoreAnalytics");
    objc_msgSend(v20, "setRestoreChoice:", 2);
  }

  v21 = v28;
  v22 = objc_msgSend(*(id *)(a1 + 32), "expressRestoreAnalytics");
  objc_msgSend(v22, "setOfferedBackup:", v21 & 1);

  v23.receiver = *(id *)(a1 + 32);
  v23.super_class = (Class)BuddyExpressRestoreController;
  objc_msgSendSuper2(&v23, "continueTapped");
  objc_storeStrong(&v27, 0);
}

void sub_10012707C(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController", a1, a1);
  objc_msgSend(v1, "setupFinished");

}

void sub_100127194(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(location[0], "setWillRestoreOrMigrate:", 1);
  (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

void sub_100127370(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  BYExpressSetupBackupSource *v5;
  id v6;
  BYExpressSetupBackupSource *v7;
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  v2 = objc_msgSend(*(id *)(a1 + 32), "backupItem");
  v3 = objc_msgSend(v2, "backupUDID");
  v4 = objc_msgSend(*(id *)(a1 + 32), "backupItem");
  location[0] = (id)BYMetadataFromBackup(v3, objc_msgSend(v4, "snapshotID"));

  if (location[0])
  {
    v5 = [BYExpressSetupBackupSource alloc];
    v6 = objc_msgSend(*(id *)(a1 + 32), "backupItem");
    v7 = -[BYExpressSetupBackupSource initWithBackupItem:backupMetadata:](v5, "initWithBackupItem:backupMetadata:", v6, location[0]);

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    objc_storeStrong((id *)&v7, 0);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  objc_storeStrong(location, 0);
}

void sub_100127888(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController", a1, a1);
  objc_msgSend(v1, "setupFinished");

}

void sub_1001279C4(id *a1)
{
  id v2;
  void **v3;
  int v4;
  int v5;
  void (*v6)(id *, void *, void *);
  void *v7;
  id v8;
  id v9[3];

  v9[2] = a1;
  v9[1] = a1;
  v2 = a1[4];
  v3 = _NSConcreteStackBlock;
  v4 = -1073741824;
  v5 = 0;
  v6 = sub_100127A80;
  v7 = &unk_100283360;
  v8 = a1[4];
  v9[0] = a1[5];
  objc_msgSend(v2, "_suggestedBackupToRestore:", &v3);
  objc_storeStrong(v9, 0);
  objc_storeStrong(&v8, 0);
}

void sub_100127A80(id *a1, void *a2, void *a3)
{
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  unsigned __int8 v8;
  id v9;
  char v10;
  NSObject *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  objc_super v17;
  void **v18;
  int v19;
  int v20;
  void (*v21)(uint64_t, char);
  void *v22;
  id v23;
  id v24;
  int v25;
  void **block;
  int v27;
  int v28;
  void (*v29)(uint64_t);
  void *v30;
  id v31;
  char v32;
  id v33;
  char v34;
  uint8_t v35[7];
  os_log_type_t v36;
  id v37;
  os_log_type_t v38;
  id v39[2];
  id v40;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v40 = 0;
  objc_storeStrong(&v40, a3);
  v39[1] = a1;
  if (location[0])
  {
    v39[0] = (id)_BYLoggingFacility(v5);
    v38 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)v39[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_10003EB04((uint64_t)buf, (uint64_t)v40, (uint64_t)location[0]);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v39[0], v38, "Express restore flow chose restorable item for device name \"%@\": %@", buf, 0x16u);
    }
    objc_storeStrong(v39, 0);
  }
  else
  {
    v37 = (id)_BYLoggingFacility(v5);
    v36 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)v37, OS_LOG_TYPE_DEFAULT))
    {
      v6 = v37;
      v7 = v36;
      sub_100038C3C(v35);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Express restore flow didn't find any usable restorables", v35, 2u);
    }
    objc_storeStrong(&v37, 0);
  }
  objc_msgSend(a1[4], "setDeviceName:", v40);
  objc_msgSend(a1[4], "setBackupItem:", location[0]);
  v34 = 0;
  objc_msgSend(a1[4], "setAbleToBackupBeforeRestore:", (unint64_t)objc_msgSend(a1[4], "_ableToBackupBeforeRestore:softwareUpdateRequired:", location[0], &v34) & 1);
  v32 = 0;
  v8 = 1;
  if ((v34 & 1) == 0)
  {
    v33 = +[BYPreferencesController buddyPreferencesInternal](BYPreferencesController, "buddyPreferencesInternal");
    v32 = 1;
    v8 = objc_msgSend(v33, "BOOLForKey:", CFSTR("RequireSoftwareUpdateForGuideUserToBackup"));
  }
  objc_msgSend(a1[4], "setForceSoftwareUpdateRequiredForNewBackup:", v8 & 1);
  if ((v32 & 1) != 0)

  v9 = objc_msgSend(a1[4], "proximitySetupController");
  v10 = 0;
  if ((objc_msgSend(v9, "hasConnection") & 1) != 0)
    v10 = objc_msgSend(a1[4], "isAbleToBackupBeforeRestore") ^ 1;

  if ((v10 & 1) != 0)
  {
    v11 = dispatch_get_global_queue(0, 0);
    block = _NSConcreteStackBlock;
    v27 = -1073741824;
    v28 = 0;
    v29 = sub_100127ECC;
    v30 = &unk_100280730;
    v31 = a1[4];
    dispatch_async(v11, &block);

    objc_storeStrong(&v31, 0);
  }
  v12 = objc_alloc((Class)BYAnalyticsExpressRestore);
  v13 = objc_msgSend(a1[4], "analyticsManager");
  v14 = objc_msgSend(v12, "initWithAnalyticsManager:", v13);
  objc_msgSend(a1[4], "setExpressRestoreAnalytics:", v14);

  if (location[0])
  {
    v16 = a1[4];
    v18 = _NSConcreteStackBlock;
    v19 = -1073741824;
    v20 = 0;
    v21 = sub_100127F18;
    v22 = &unk_100280708;
    v23 = a1[4];
    v24 = a1[5];
    v17.receiver = v16;
    v17.super_class = (Class)BuddyExpressRestoreController;
    objc_msgSendSuper2(&v17, "performExtendedInitializationWithCompletion:", &v18);
    objc_storeStrong(&v24, 0);
    objc_storeStrong(&v23, 0);
    v25 = 0;
  }
  else
  {
    v15 = objc_msgSend(a1[4], "expressRestoreAnalytics");
    objc_msgSend(v15, "setPaneShown:", 0);

    if (a1[5])
      (*((void (**)(void))a1[5] + 2))();
    v25 = 1;
  }
  objc_storeStrong(&v40, 0);
  objc_storeStrong(location, 0);
}

void sub_100127ECC(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController", a1, a1);
  objc_msgSend(v1, "setupFinished");

}

void sub_100127F18(uint64_t a1, char a2)
{
  id v4;

  v4 = objc_msgSend(*(id *)(a1 + 32), "expressRestoreAnalytics");
  objc_msgSend(v4, "setPaneShown:", a2 & 1);

  if (*(_QWORD *)(a1 + 40))
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100128848(NSObject *a1, char a2)
{
  NSObject *v3;
  os_log_type_t v4;
  _WORD v5[7];
  os_log_type_t v6;
  os_log_t oslog[2];
  char v8;
  NSObject *v9;

  v9 = a1;
  v8 = a2;
  oslog[1] = a1;
  if ((a2 & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    v6 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v3 = oslog[0];
      v4 = v6;
      sub_100038C3C(v5);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Backup chosen is not compatible!", (uint8_t *)v5, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  if (a1[6].isa)
    (*((void (**)(void))a1[6].isa + 2))();
}

void sub_100128B3C(NSObject *a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  NSString *v8;
  id v9;
  NSArray *v10;
  id v11;
  void **v12;
  int v13;
  int v14;
  uint64_t (*v15)(uint64_t);
  void *v16;
  objc_class *v17;
  id v18;
  objc_class *v19;
  objc_class *v20;
  char v21;
  id v22;
  char v23;
  id v24;
  os_log_type_t v25;
  os_log_t oslog[2];
  id v27;
  id v28;
  id location[2];
  Class isa;
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v28 = 0;
  objc_storeStrong(&v28, a3);
  v27 = 0;
  objc_storeStrong(&v27, a4);
  oslog[1] = a1;
  if (v27)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v7);
    v25 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v23 = 0;
      v21 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v8 = (NSString *)v27;
      }
      else if (v27)
      {
        v24 = objc_msgSend(v27, "domain");
        v23 = 1;
        v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v24, objc_msgSend(v27, "code"));
        v22 = v8;
        v21 = 1;
      }
      else
      {
        v8 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v8);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v25, "Failed to scan for software updates: %{public}@", buf, 0xCu);
      if ((v21 & 1) != 0)

      if ((v23 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  v9 = -[objc_class betaEnrollmentStateManager](a1[4].isa, "betaEnrollmentStateManager");
  isa = a1[5].isa;
  v10 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &isa, 1);
  v11 = objc_msgSend(v28, "productVersion");
  v12 = _NSConcreteStackBlock;
  v13 = -1073741824;
  v14 = 0;
  v15 = sub_100128E84;
  v16 = &unk_100282E88;
  v17 = a1[5].isa;
  v18 = v28;
  v19 = a1[4].isa;
  v20 = a1[6].isa;
  objc_msgSend(v9, "loadSeedEnrollmentStateForRestorables:incompatibleWithUpdateVersion:completion:", v10, v11, &v12);

  objc_storeStrong((id *)&v20, 0);
  objc_storeStrong((id *)&v19, 0);
  objc_storeStrong(&v18, 0);
  objc_storeStrong((id *)&v17, 0);
  objc_storeStrong(&v27, 0);
  objc_storeStrong(&v28, 0);
  objc_storeStrong(location, 0);
}

uint64_t sub_100128E84(uint64_t a1)
{
  void *v2;
  id v3;
  char v5;
  id v6;

  v2 = *(void **)(a1 + 32);
  v3 = objc_msgSend(*(id *)(a1 + 40), "productVersion");
  v5 = 0;
  if ((objc_msgSend(v2, "isCompatibleWithUpdateToSystemVersion:", v3) & 1) == 0)
  {
    v6 = objc_msgSend(*(id *)(a1 + 48), "betaEnrollmentStateManager");
    v5 = 1;
    objc_msgSend(v6, "isRestorableSeedEnrolled:", *(_QWORD *)(a1 + 32));
  }
  if ((v5 & 1) != 0)

  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

uint64_t sub_100129BE4(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), 1);
}

id sub_10012A1B8()
{
  NSString *v0;
  id v1;
  void *v2;
  uint64_t v3;
  os_log_t oslog;
  id v6;
  id v7;
  id location;
  id v9;
  id v10;
  id v11;
  uint8_t buf[24];

  if (!qword_1002EEA80)
  {
    v11 = (id)MGCopyAnswer(CFSTR("ProductVersion"), 0);
    location = v11;

    v10 = (id)MGCopyAnswer(CFSTR("BuildVersion"), 0);
    v7 = v10;

    v9 = (id)MGCopyAnswer(CFSTR("DeviceClass"), 0);
    v6 = v9;

    if (!objc_msgSend(location, "length"))
      objc_storeStrong(&location, CFSTR("1.0"));
    if (!objc_msgSend(v7, "length"))
      objc_storeStrong(&v7, CFSTR("1A001a"));
    if (!objc_msgSend(v6, "length"))
      objc_storeStrong(&v6, &stru_100284738);
    v0 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("iOS %@ %@ %@ Setup Assistant"), location, v7, v6);
    v1 = -[NSString copy](v0, "copy");
    v2 = (void *)qword_1002EEA80;
    qword_1002EEA80 = (uint64_t)v1;

    oslog = (os_log_t)(id)_BYLoggingFacility(v3);
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_100038C28((uint64_t)buf, qword_1002EEA80);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Setup Assistant User-Agent = %@", buf, 0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    objc_storeStrong(&v6, 0);
    objc_storeStrong(&v7, 0);
    objc_storeStrong(&location, 0);
  }
  return (id)qword_1002EEA80;
}

BOOL sub_10012A424()
{
  NSArray *v0;
  id v1;
  NSLocaleLanguageDirection v2;

  v0 = +[NSLocale preferredLanguages](NSLocale, "preferredLanguages");
  v1 = -[NSArray objectAtIndex:](v0, "objectAtIndex:", 0);
  v2 = +[NSLocale characterDirectionForLanguage:](NSLocale, "characterDirectionForLanguage:", v1);

  return v2 == NSLocaleLanguageDirectionRightToLeft;
}

id sub_10012A4C4(id obj, void *a2)
{
  id v3;
  id v4;
  NSDictionary *v5;
  id v6;
  id v8;
  id location;
  CFStringRef v10;
  id v11;

  location = 0;
  objc_storeStrong(&location, obj);
  v8 = 0;
  objc_storeStrong(&v8, a2);
  v3 = objc_alloc((Class)NSAttributedString);
  v4 = location;
  v10 = kCTLanguageAttributeName;
  v11 = v8;
  v5 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v11, &v10, 1);
  v6 = objc_msgSend(v3, "initWithString:attributes:", v4, v5);

  objc_storeStrong(&v8, 0);
  objc_storeStrong(&location, 0);
  return v6;
}

void sub_10012ACD8(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  unsigned __int8 v6;
  void *v7;
  void **v8;
  int v9;
  int v10;
  uint64_t (*v11)(uint64_t);
  void *v12;
  id v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a1;
  v16 = a1;
  v15 = 0;
  v2 = objc_msgSend(*(id *)(a1 + 32), "migrationController");
  v3 = objc_msgSend(*(id *)(a1 + 32), "existingSettings");
  v4 = objc_msgSend(v3, "backupMetadata");
  v5 = objc_msgSend(v4, "nanoRegistryData");
  v6 = objc_msgSend(v2, "shouldBeDisplayedGivenMigrationData:", v5);

  v15 = v6 & 1;
  v7 = &_dispatch_main_q;
  v8 = _NSConcreteStackBlock;
  v9 = -1073741824;
  v10 = 0;
  v11 = sub_10012AE30;
  v12 = &unk_1002833B0;
  v13 = *(id *)(a1 + 40);
  v14 = v6 & 1;
  dispatch_async((dispatch_queue_t)v7, &v8);

  objc_storeStrong(&v13, 0);
}

uint64_t sub_10012AE30(uint64_t result)
{
  if (*(_QWORD *)(result + 32))
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(result + 32) + 16))(*(_QWORD *)(result + 32), *(_BYTE *)(result + 40) & 1);
  return result;
}

void sub_10012DEE0(id *a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  id v6;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = (void *)objc_opt_class(a1[4]);
  v4 = objc_msgSend(a1[4], "settingsManager");
  objc_msgSend(v3, "setSettingEnabled:presented:settingsManager:", 0, 1, v4);

  v5 = objc_msgSend(a1[4], "paneFeatureAnalyticsManager");
  objc_msgSend(v5, "recordActionWithValue:forFeature:", &__kCFBooleanFalse, 6);

  v6 = objc_msgSend(a1[4], "delegate");
  objc_msgSend(v6, "flowItemDone:", a1[4]);

  objc_storeStrong(location, 0);
}

id sub_1001304EC(uint64_t a1)
{
  id result;

  result = objc_msgSend(*(id *)(a1 + 32), "hasVoiceProfileIniCloud", a1, a1);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = result & 1;
  return result;
}

id sub_100130530()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEA88;
  v13 = qword_1002EEA88;
  if (!qword_1002EEA88)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100133D38;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100133D38(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

double sub_10013061C(uint64_t a1, int a2, int a3, int a4, int a5, int a6, uint64_t a7, int a8)
{
  double result;

  *(_QWORD *)&result = 67110658;
  *(_DWORD *)a1 = 67110658;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 1024;
  *(_DWORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 14) = 1024;
  *(_DWORD *)(a1 + 16) = a4;
  *(_WORD *)(a1 + 20) = 1024;
  *(_DWORD *)(a1 + 22) = a5;
  *(_WORD *)(a1 + 26) = 1024;
  *(_DWORD *)(a1 + 28) = a6;
  *(_WORD *)(a1 + 32) = 2112;
  *(_QWORD *)(a1 + 34) = a7;
  *(_WORD *)(a1 + 42) = 1024;
  *(_DWORD *)(a1 + 44) = a8;
  return result;
}

void sub_100130D18(uint64_t a1)
{
  NSObject *v2;
  void *v3;
  void **v4;
  int v5;
  int v6;
  id (*v7)(uint64_t);
  void *v8;
  id v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a1;
  v12 = a1;
  v11 = 0;
  v11 = objc_msgSend(*(id *)(a1 + 32), "_fetchSiriVoiceProfileAvailability") & 1;
  v2 = objc_msgSend(*(id *)(a1 + 32), "voiceProfileQueue");
  v4 = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_100130E20;
  v8 = &unk_100280B18;
  v9 = *(id *)(a1 + 32);
  v10 = v11 & 1;
  dispatch_sync(v2, &v4);

  if (*(_QWORD *)(a1 + 40))
  {
    v3 = &_dispatch_main_q;
    dispatch_async((dispatch_queue_t)v3, *(dispatch_block_t *)(a1 + 40));

  }
  objc_storeStrong(&v9, 0);
}

id sub_100130E20(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setHasVoiceProfileIniCloud:", *(_BYTE *)(a1 + 40) & 1, a1, a1);
}

id sub_100132C40()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEA98;
  v13 = qword_1002EEA98;
  if (!qword_1002EEA98)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001340C4;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001340C4(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

id sub_100132D2C()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEAA8;
  v13 = qword_1002EEAA8;
  if (!qword_1002EEAA8)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100134450;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100134450(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

double sub_100132E18(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = 134349056;
  *(_DWORD *)a1 = 134349056;
  *(_QWORD *)(a1 + 4) = a2;
  return result;
}

void sub_100132E2C(id a1, NSError *a2)
{
  uint64_t v3;
  NSString *v4;
  char v5;
  NSString *v6;
  char v7;
  id v8;
  os_log_t oslog[2];
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v7 = 0;
      v5 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v4 = (NSString *)location[0];
      }
      else if (location[0])
      {
        v8 = objc_msgSend(location[0], "domain");
        v7 = 1;
        v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v8, objc_msgSend(location[0], "code"));
        v6 = v4;
        v5 = 1;
      }
      else
      {
        v4 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v4);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Unable to set Siri data sharing opt-in: %{public}@", buf, 0xCu);
      if ((v5 & 1) != 0)

      if ((v7 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_100133D38(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_100133E78();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("AFPreferences");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getAFPreferencesClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BYExpressSetupDataProvider.m"), 52, CFSTR("Unable to find class %s"), "AFPreferences");

    __break(1u);
  }
  qword_1002EEA88 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_100133E78()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_100133FA4((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *AssistantServicesLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BYExpressSetupDataProvider.m"), 51, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_100133FA4(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEA90;
  v9 = qword_1002EEA90;
  if (!qword_1002EEA90)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100134034;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_100134034((uint64_t)&v2);
  }
  return qword_1002EEA90;
}

uint64_t sub_100134034(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/AssistantServices.framework/AssistantServices";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEA90 = result;
  return result;
}

void sub_1001340C4(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_100134204();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("SSRVoiceProfileManager");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getSSRVoiceProfileManagerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BYExpressSetupDataProvider.m"), 66, CFSTR("Unable to find class %s"), "SSRVoiceProfileManager");

    __break(1u);
  }
  qword_1002EEA98 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_100134204()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_100134330((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *SpeakerRecognitionLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BYExpressSetupDataProvider.m"), 65, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_100134330(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEAA0;
  v9 = qword_1002EEAA0;
  if (!qword_1002EEAA0)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001343C0;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1001343C0((uint64_t)&v2);
  }
  return qword_1002EEAA0;
}

uint64_t sub_1001343C0(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/SpeakerRecognition.framework/SpeakerRecognition";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEAA0 = result;
  return result;
}

void sub_100134450(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_100133E78();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("AFSettingsConnection");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getAFSettingsConnectionClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BYExpressSetupDataProvider.m"), 54, CFSTR("Unable to find class %s"), "AFSettingsConnection");

    __break(1u);
  }
  qword_1002EEAA8 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_1001356C4(NSObject *a1, uint64_t a2)
{
  NSObject *v2;
  os_log_type_t v3;
  NSNotificationCenter *v4;
  _WORD v5[7];
  os_log_type_t v6;
  os_log_t v7;
  os_log_type_t v8;
  os_log_t oslog[2];
  uint64_t v10;
  NSObject *v11;
  uint8_t buf[24];

  v11 = a1;
  v10 = a2;
  oslog[1] = a1;
  if (a2)
  {
    *((_QWORD *)a1[4].isa + 1) = 3;
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_100038C28((uint64_t)buf, v10);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v8, "SetupAssistant Error setting time: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    *((_QWORD *)a1[4].isa + 1) = 2;
    v7 = (os_log_t)(id)_BYLoggingFacility(a1);
    v6 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      v2 = v7;
      v3 = v6;
      sub_100038C3C(v5);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "SetupAssistant System Time update complete.", (uint8_t *)v5, 2u);
    }
    objc_storeStrong((id *)&v7, 0);
  }
  v4 = +[NSNotificationCenter defaultCenter](NSNotificationCenter, "defaultCenter");
  -[NSNotificationCenter postNotificationName:object:](v4, "postNotificationName:object:", CFSTR("BuddySystemTimeUpdateFinishedNotification"), 0);

}

void sub_100135858(id a1, __CFError *a2)
{
  os_log_t oslog[2];
  __CFError *v3;
  id v4;
  uint8_t buf[24];

  v4 = a1;
  v3 = a2;
  oslog[1] = (os_log_t)a1;
  if (a2)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_100038C28((uint64_t)buf, (uint64_t)v3);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "SetupAssistant Error setting time zone: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
}

uint64_t sub_100135CC4(uint64_t result, char a2)
{
  if ((a2 & 1) != 0)
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void sub_100135E44(id a1, NSError *a2)
{
  uint64_t v3;
  NSString *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t v7[15];
  os_log_type_t v8;
  os_log_t v9;
  char v10;
  id v11;
  char v12;
  id v13;
  os_log_type_t v14;
  os_log_t oslog[2];
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    v14 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v12 = 0;
      v10 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v4 = (NSString *)location[0];
      }
      else if (location[0])
      {
        v13 = objc_msgSend(location[0], "domain");
        v12 = 1;
        v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v13, objc_msgSend(location[0], "code"));
        v11 = v4;
        v10 = 1;
      }
      else
      {
        v4 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v4);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v14, "Reset failed: %{public}@", buf, 0xCu);
      if ((v10 & 1) != 0)

      if ((v12 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v9 = (os_log_t)(id)_BYLoggingFacility(v3);
    v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v9;
      v6 = v8;
      sub_100038C3C(v7);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Reset was successful!", v7, 2u);
    }
    objc_storeStrong((id *)&v9, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_10013626C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;

  v2 = objc_msgSend(*(id *)(a1 + 32), "miscState", a1, a1);
  v3 = objc_msgSend(v2, "migrationManager");
  objc_msgSend(v3, "setIgnoreProximityDisconnections:", 1);

  v4 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
  objc_msgSend(v4, "showMigrationInterfaceOnSource");

  v5 = objc_msgSend(*(id *)(a1 + 32), "miscState");
  v6 = objc_msgSend(v5, "migrationManager");
  objc_msgSend(v6, "startDataTransfer");

  if (*(_QWORD *)(a1 + 40))
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100136518(id *a1)
{
  id v2;
  id v3;
  void **v4;
  uint64_t v5;
  void (*v6)(uint64_t);
  void *v7;
  id v8;
  id v9;
  id v10;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  v4 = _NSConcreteStackBlock;
  v5 = 3221225472;
  v6 = sub_100136664;
  v7 = &unk_100281000;
  v8 = a1[4];
  v9 = a1[5];
  v10 = a1[6];
  location[0] = objc_retainBlock(&v4);
  v2 = objc_msgSend(a1[6], "presentedViewController", v4, v5, v6, v7, v8, v9);

  if (v2)
  {
    v3 = objc_msgSend(a1[6], "presentedViewController");
    objc_msgSend(v3, "dismissViewControllerAnimated:completion:", 1, location[0]);

  }
  else
  {
    (*((void (**)(void))location[0] + 2))();
  }
  objc_storeStrong(location, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(&v8, 0);
}

void sub_100136664(uint64_t a1)
{
  id v2;
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = -[BuddyMigrationTargetErrorController initWithError:]([BuddyMigrationTargetErrorController alloc], "initWithError:", *(_QWORD *)(a1 + 32));
  objc_msgSend(location[0], "setForceErase:", (unint64_t)objc_msgSend(*(id *)(a1 + 40), "hasTransferredData") & 1);
  v2 = objc_msgSend(*(id *)(a1 + 48), "delegate");
  objc_msgSend(v2, "flowItemDone:nextItem:", *(_QWORD *)(a1 + 48), location[0]);

  objc_storeStrong(location, 0);
}

void sub_100136C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _Unwind_Exception *exception_object, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100136CB4(id *a1, void *a2)
{
  id WeakRetained;
  void (**v4)(_QWORD);
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  WeakRetained = objc_loadWeakRetained(a1 + 4);
  v4 = (void (**)(_QWORD))objc_msgSend(WeakRetained, "presentWiFiSettings");
  v4[2](v4);

  objc_storeStrong(location, 0);
}

void sub_1001371F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,int a22,_Unwind_Exception *exception_object,id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_100137258(id *a1, void *a2)
{
  id WeakRetained;
  void (**v4)(_QWORD);
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  WeakRetained = objc_loadWeakRetained(a1 + 4);
  v4 = (void (**)(_QWORD))objc_msgSend(WeakRetained, "presentWiFiSettings");
  v4[2](v4);

  objc_storeStrong(location, 0);
}

void sub_1001372D8(id *a1, void *a2)
{
  id WeakRetained;
  void (**v4)(_QWORD);
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  WeakRetained = objc_loadWeakRetained(a1 + 4);
  v4 = (void (**)(_QWORD))objc_msgSend(WeakRetained, "restoreOverCellular");
  v4[2](v4);

  objc_storeStrong(location, 0);
}

id sub_1001374BC()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEAB0;
  v13 = qword_1002EEAB0;
  if (!qword_1002EEAB0)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001375A8;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001375A8(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_1001375A8(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1001376E8();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("SOSUtilities");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getSOSUtilitiesClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyEmergencyExecutor.m"), 16, CFSTR("Unable to find class %s"), "SOSUtilities");

    __break(1u);
  }
  qword_1002EEAB0 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_1001376E8()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_100137814((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *SOSLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyEmergencyExecutor.m"), 15, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_100137814(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEAB8;
  v9 = qword_1002EEAB8;
  if (!qword_1002EEAB8)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001378A4;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1001378A4((uint64_t)&v2);
  }
  return qword_1002EEAB8;
}

uint64_t sub_1001378A4(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/SOS.framework/SOS";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEAB8 = result;
  return result;
}

void sub_100137C48(uint64_t a1, uint64_t a2)
{
  id v3;
  uint64_t v4;
  void *v5;

  v3 = (id)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), a2);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(void **)(v4 + 8);
  *(_QWORD *)(v4 + 8) = v3;

}

void sub_100137D88(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 8), *(id *)(a1 + 40));
}

void sub_100137ED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object, char a18)
{
  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(a1);
}

void sub_100137EEC(uint64_t a1, uint64_t a2)
{
  void *v2;
  id *v3;

  v3 = (id *)(a2 + 40);
  v2 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);
  objc_storeStrong(v3, 0);
}

void sub_100137F1C(uint64_t a1)
{
  objc_storeStrong((id *)(a1 + 40), 0);
}

void sub_100137F28(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 8));
}

void sub_100138B88(uint64_t a1)
{
  uint64_t v1;
  id v2;

  if (*(_QWORD *)(a1 + 32))
  {
    v1 = *(_QWORD *)(a1 + 32);
    v2 = +[BuddyActivationConfiguration currentConfiguration](BuddyActivationConfiguration, "currentConfiguration", a1, a1);
    (*(void (**)(uint64_t, _QWORD))(v1 + 16))(v1, (objc_msgSend(v2, "isActivated") ^ 1) & 1);

  }
}

void sub_100138CF0(id *a1)
{
  id *v1;
  char v2;
  BOOL v3;
  objc_class *v4;
  id v5;
  id v6;
  id location;
  os_log_type_t v8;
  os_log_t oslog;
  char v10;
  id v11;
  char v12;
  id v13;
  id *v14;
  id *v15;
  uint8_t buf[24];

  v1 = a1;
  v15 = a1;
  v14 = a1;
  v2 = *((_BYTE *)a1 + 40);
  v12 = 0;
  v10 = 0;
  v3 = 0;
  if ((v2 & 1) != 0)
  {
    a1 = (id *)objc_msgSend(a1[4], "didActivate");
    v3 = 0;
    if ((a1 & 1) == 0)
    {
      v3 = 0;
      if ((*((_BYTE *)v1 + 41) & 1) != 0)
      {
        v13 = objc_msgSend(v1[4], "navigationController");
        v12 = 1;
        a1 = (id *)objc_msgSend(v13, "topViewController");
        v11 = a1;
        v10 = 1;
        v3 = a1 == v1[4];
      }
    }
  }
  if ((v10 & 1) != 0)

  if ((v12 & 1) != 0)
  if (v3)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(a1);
    v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v4 = (objc_class *)objc_opt_class(v1[4]);
      location = NSStringFromClass(v4);
      sub_100038C28((uint64_t)buf, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog, v8, "Activation state changed while on %@", buf, 0xCu);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)&oslog, 0);
    v5 = +[BuddyActivationConfiguration currentConfiguration](BuddyActivationConfiguration, "currentConfiguration");
    objc_msgSend(v5, "removeDelegate:", v1[4]);

    objc_msgSend(v1[4], "setDidActivate:", 1);
    v6 = objc_msgSend(v1[4], "delegate");
    objc_msgSend(v6, "flowItemDone:", v1[4]);

  }
}

id sub_100139200()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEAC0;
  v13 = qword_1002EEAC0;
  if (!qword_1002EEAC0)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001398E0;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001398E0(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_1001394BC(uint64_t a1, char a2)
{
  __CFNotificationCenter *DarwinNotifyCenter;

  if ((a2 & 1) == 0)
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterPostNotification(DarwinNotifyCenter, BYSetupAssistantDidCompleteSIMSetupNotification, 0, 0, 1u);
  }
  if (*(_QWORD *)(a1 + 32))
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_100139534(id *a1, char a2)
{
  id v3;
  void **v4;
  int v5;
  int v6;
  void (*v7)(_QWORD *, void *);
  void *v8;
  id v9[2];
  char v10;
  id *v11;

  v11 = a1;
  v10 = a2;
  v9[1] = a1;
  if ((a2 & 1) != 0)
  {
    v3 = objc_msgSend(a1[4], "setupFlow");
    v4 = _NSConcreteStackBlock;
    v5 = -1073741824;
    v6 = 0;
    v7 = sub_10013960C;
    v8 = &unk_100282058;
    v9[0] = a1[5];
    objc_msgSend(v3, "firstViewController:", &v4);

    objc_storeStrong(v9, 0);
  }
  else
  {
    (*((void (**)(void))a1[5] + 2))();
  }
}

void sub_10013960C(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(_QWORD, BOOL))(a1[4] + 16))(a1[4], location[0] != 0);
  objc_storeStrong(location, 0);
}

void sub_1001398E0(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_100139A20();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("TSSetupAssistantSIMSetupFlow");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getTSSetupAssistantSIMSetupFlowClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddySIMController.m"), 26, CFSTR("Unable to find class %s"), "TSSetupAssistantSIMSetupFlow");

    __break(1u);
  }
  qword_1002EEAC0 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_100139A20()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_100139B4C((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *SIMSetupSupportLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddySIMController.m"), 25, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_100139B4C(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEAC8;
  v9 = qword_1002EEAC8;
  if (!qword_1002EEAC8)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100139BDC;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_100139BDC((uint64_t)&v2);
  }
  return qword_1002EEAC8;
}

uint64_t sub_100139BDC(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/SIMSetupSupport.framework/SIMSetupSupport";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEAC8 = result;
  return result;
}

id sub_10013A310()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEAD0;
  v13 = qword_1002EEAD0;
  if (!qword_1002EEAD0)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10013A914;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_10013A914(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_10013A5AC(uint64_t a1, char a2)
{
  id WeakRetained;
  id v3;
  uint64_t v4;
  char v5;
  uint64_t v6;

  v6 = a1;
  v5 = a2;
  v4 = a1;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_setupCompleted:", v5 & 1, WeakRetained, v4);
  objc_storeStrong(&v3, 0);
}

void sub_10013A914(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_10013AA54();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("MSDWelcomeViewController");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getMSDWelcomeViewControllerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyDemoController.m"), 24, CFSTR("Unable to find class %s"), "MSDWelcomeViewController");

    __break(1u);
  }
  qword_1002EEAD0 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_10013AA54()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_10013AB80((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *MobileStoreDemoSetupUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyDemoController.m"), 23, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_10013AB80(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEAD8;
  v9 = qword_1002EEAD8;
  if (!qword_1002EEAD8)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10013AC10;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_10013AC10((uint64_t)&v2);
  }
  return qword_1002EEAD8;
}

uint64_t sub_10013AC10(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/MobileStoreDemoSetupUI.framework/MobileStoreDemoSetupUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEAD8 = result;
  return result;
}

id sub_10013AEA4()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEAE0;
  v13 = qword_1002EEAE0;
  if (!qword_1002EEAE0)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100143E30;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100143E30(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

id sub_10013AF90()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEAF0;
  v13 = qword_1002EEAF0;
  if (!qword_1002EEAF0)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001441C0;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001441C0(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

double sub_10013B930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  double result;

  *(_QWORD *)&result = 136317186;
  *(_DWORD *)a1 = 136317186;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2114;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2048;
  *(_QWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 2114;
  *(_QWORD *)(a1 + 34) = a5;
  *(_WORD *)(a1 + 42) = 2114;
  *(_QWORD *)(a1 + 44) = a6;
  *(_WORD *)(a1 + 52) = 2048;
  *(_QWORD *)(a1 + 54) = a7;
  *(_WORD *)(a1 + 62) = 2114;
  *(_QWORD *)(a1 + 64) = a8;
  *(_WORD *)(a1 + 72) = 2082;
  *(_QWORD *)(a1 + 74) = a9;
  *(_WORD *)(a1 + 82) = 2082;
  *(_QWORD *)(a1 + 84) = a10;
  return result;
}

void sub_10013BA98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  id *v12;
  uint64_t v13;

  objc_destroyWeak(v12);
  objc_destroyWeak((id *)(v13 - 64));
  _Unwind_Resume(a1);
}

void sub_10013BAB8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  const __CFString *v7;
  id v8;
  id v9;
  id v10;
  const __CFString *v11;
  id v12;
  id v13;
  const char *v14;
  unsigned __int8 v15;
  const char *v16;
  char v17;
  __CFString *v18;
  char v19;
  id v20;
  char v21;
  __CFString *v22;
  char v23;
  id v24;
  os_log_t oslog;
  id v26;
  id v27[2];
  id v28;
  id location[2];
  uint8_t buf[112];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v28 = 0;
  objc_storeStrong(&v28, a3);
  v27[1] = (id)a1;
  v27[0] = objc_loadWeakRetained((id *)(a1 + 48));
  v5 = objc_msgSend(location[0], "preferredDescriptor");
  v26 = v5;
  if (v27[0])
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v5);
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v6 = objc_msgSend(*((id *)v27[0] + 1), "preferredUpdate");
      v23 = 0;
      v21 = 0;
      if (v6)
      {
        v24 = objc_msgSend(*((id *)v27[0] + 1), "preferredUpdate");
        v23 = 1;
        v7 = (const __CFString *)objc_msgSend(v24, "humanReadableUpdateName");
        v22 = (__CFString *)v7;
        v21 = 1;
      }
      else
      {
        v7 = CFSTR("N/A");
      }
      v8 = objc_msgSend(*((id *)v27[0] + 1), "preferredUpdate");
      v9 = objc_msgSend(*((id *)v27[0] + 1), "preferredUpdateError");
      v10 = objc_msgSend(*((id *)v27[0] + 1), "alternateUpdate");
      v19 = 0;
      v17 = 0;
      if (v10)
      {
        v20 = objc_msgSend(*((id *)v27[0] + 1), "alternateUpdate");
        v19 = 1;
        v11 = (const __CFString *)objc_msgSend(v20, "humanReadableUpdateName");
        v18 = (__CFString *)v11;
        v17 = 1;
      }
      else
      {
        v11 = CFSTR("N/A");
      }
      v12 = objc_msgSend(*((id *)v27[0] + 1), "alternateUpdate");
      v13 = objc_msgSend(*((id *)v27[0] + 1), "alternateUpdateError");
      if ((objc_msgSend(*((id *)v27[0] + 1), "isDelayingUpdates") & 1) != 0)
        v14 = "YES";
      else
        v14 = "NO";
      v15 = objc_msgSend(*((id *)v27[0] + 1), "automaticUpdateScheduled");
      v16 = "YES";
      if ((v15 & 1) == 0)
        v16 = "NO";
      sub_10013BF40((uint64_t)buf, (uint64_t)v7, (uint64_t)v8, (uint64_t)v9, (uint64_t)v11, (uint64_t)v12, (uint64_t)v13, (uint64_t)v14, (uint64_t)v16, (uint64_t)v28, (uint64_t)v26);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "%s: Software Update Buddy Checkpoint -\n\tmanager preferredUpdate: %{public}@ (%p)\n\tmanager preferredUpdateError: %{public}@\n\tmanager alternateDescriptor: %{public}@ (%p)\n\tmanager alternateUpdateError: %{public}@\n\tmanager isDelayingUpdates: %{public}s\n\tmanager automaticUpdateScheduled: %{public}s\n\nerror: %{public}@, SUScanResults: %@", buf, 0x70u);

      if ((v17 & 1) != 0)
      if ((v19 & 1) != 0)

      if ((v21 & 1) != 0)
      if ((v23 & 1) != 0)

    }
    objc_storeStrong((id *)&oslog, 0);
    objc_msgSend(*(id *)(a1 + 32), "setUpdate:", v26);
    objc_msgSend(*(id *)(a1 + 32), "setScannedForUpdate:", 1);
  }
  if (*(_QWORD *)(a1 + 40))
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_storeStrong(&v26, 0);
  objc_storeStrong(v27, 0);
  objc_storeStrong(&v28, 0);
  objc_storeStrong(location, 0);
}

double sub_10013BF40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double result;

  *(_QWORD *)&result = 136317698;
  *(_DWORD *)a1 = 136317698;
  *(_QWORD *)(a1 + 4) = "-[BuddySoftwareUpdateController scanForUpdateCompletion:]_block_invoke";
  *(_WORD *)(a1 + 12) = 2114;
  *(_QWORD *)(a1 + 14) = a2;
  *(_WORD *)(a1 + 22) = 2048;
  *(_QWORD *)(a1 + 24) = a3;
  *(_WORD *)(a1 + 32) = 2114;
  *(_QWORD *)(a1 + 34) = a4;
  *(_WORD *)(a1 + 42) = 2114;
  *(_QWORD *)(a1 + 44) = a5;
  *(_WORD *)(a1 + 52) = 2048;
  *(_QWORD *)(a1 + 54) = a6;
  *(_WORD *)(a1 + 62) = 2114;
  *(_QWORD *)(a1 + 64) = a7;
  *(_WORD *)(a1 + 72) = 2082;
  *(_QWORD *)(a1 + 74) = a8;
  *(_WORD *)(a1 + 82) = 2082;
  *(_QWORD *)(a1 + 84) = a9;
  *(_WORD *)(a1 + 92) = 2114;
  *(_QWORD *)(a1 + 94) = a10;
  *(_WORD *)(a1 + 102) = 2112;
  *(_QWORD *)(a1 + 104) = a11;
  return result;
}

double sub_10013C99C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  double result;

  *(_QWORD *)&result = 136317442;
  *(_DWORD *)a1 = 136317442;
  *(_QWORD *)(a1 + 4) = "-[BuddySoftwareUpdateController didBecomeActive:]";
  *(_WORD *)(a1 + 12) = 2114;
  *(_QWORD *)(a1 + 14) = a2;
  *(_WORD *)(a1 + 22) = 2048;
  *(_QWORD *)(a1 + 24) = a3;
  *(_WORD *)(a1 + 32) = 2114;
  *(_QWORD *)(a1 + 34) = a4;
  *(_WORD *)(a1 + 42) = 2114;
  *(_QWORD *)(a1 + 44) = a5;
  *(_WORD *)(a1 + 52) = 2048;
  *(_QWORD *)(a1 + 54) = a6;
  *(_WORD *)(a1 + 62) = 2114;
  *(_QWORD *)(a1 + 64) = a7;
  *(_WORD *)(a1 + 72) = 2082;
  *(_QWORD *)(a1 + 74) = a8;
  *(_WORD *)(a1 + 82) = 2082;
  *(_QWORD *)(a1 + 84) = a9;
  *(_WORD *)(a1 + 92) = 2112;
  *(_QWORD *)(a1 + 94) = a10;
  return result;
}

void sub_10013CEFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _Unwind_Exception *exception_object, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,id location)
{
  id *v23;

  objc_destroyWeak(v23);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10013CF2C(id *a1, char a2, id obj)
{
  id WeakRetained;
  id v5;
  const __CFString *v6;
  id v7;
  id v8;
  id v9;
  const __CFString *v10;
  id v11;
  id v12;
  const char *v13;
  unsigned __int8 v14;
  const char *v15;
  char v16;
  __CFString *v17;
  char v18;
  id v19;
  char v20;
  __CFString *v21;
  char v22;
  id v23;
  os_log_t oslog;
  id v25[2];
  id location;
  char v27;
  id *v28;
  uint8_t buf[112];

  v28 = a1;
  v27 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v25[1] = a1;
  WeakRetained = objc_loadWeakRetained(a1 + 5);
  v25[0] = WeakRetained;
  if (WeakRetained)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(WeakRetained);
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_msgSend(*((id *)v25[0] + 1), "preferredUpdate");
      v22 = 0;
      v20 = 0;
      if (v5)
      {
        v23 = objc_msgSend(*((id *)v25[0] + 1), "preferredUpdate");
        v22 = 1;
        v6 = (const __CFString *)objc_msgSend(v23, "humanReadableUpdateName");
        v21 = (__CFString *)v6;
        v20 = 1;
      }
      else
      {
        v6 = CFSTR("N/A");
      }
      v7 = objc_msgSend(*((id *)v25[0] + 1), "preferredUpdate");
      v8 = objc_msgSend(*((id *)v25[0] + 1), "preferredUpdateError");
      v9 = objc_msgSend(*((id *)v25[0] + 1), "alternateUpdate");
      v18 = 0;
      v16 = 0;
      if (v9)
      {
        v19 = objc_msgSend(*((id *)v25[0] + 1), "alternateUpdate");
        v18 = 1;
        v10 = (const __CFString *)objc_msgSend(v19, "humanReadableUpdateName");
        v17 = (__CFString *)v10;
        v16 = 1;
      }
      else
      {
        v10 = CFSTR("N/A");
      }
      v11 = objc_msgSend(*((id *)v25[0] + 1), "alternateUpdate");
      v12 = objc_msgSend(*((id *)v25[0] + 1), "alternateUpdateError");
      if ((objc_msgSend(*((id *)v25[0] + 1), "isDelayingUpdates") & 1) != 0)
        v13 = "YES";
      else
        v13 = "NO";
      v14 = objc_msgSend(*((id *)v25[0] + 1), "automaticUpdateScheduled");
      v15 = "YES";
      if ((v14 & 1) == 0)
        v15 = "NO";
      sub_10013D38C((uint64_t)buf, (uint64_t)"-[BuddySoftwareUpdateController beginDownloadingUpdate]_block_invoke", (uint64_t)v6, (uint64_t)v7, (uint64_t)v8, (uint64_t)v10, (uint64_t)v11, (uint64_t)v12, (uint64_t)v13, (uint64_t)v15, v27 & 1, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "%s: Software Update Buddy Checkpoint -\n\tmanager preferredUpdate: %{public}@ (%p)\n\tmanager preferredUpdateError: %{public}@\n\tmanager alternateDescriptor: %{public}@ (%p)\n\tmanager alternateUpdateError: %{public}@\n\tmanager isDelayingUpdates: %{public}s\n\tmanager automaticUpdateScheduled: %{public}s\n\nsuccessfullyStarted: %d, error: %@", buf, 0x6Cu);

      if ((v16 & 1) != 0)
      if ((v18 & 1) != 0)

      if ((v20 & 1) != 0)
      if ((v22 & 1) != 0)

    }
    objc_storeStrong((id *)&oslog, 0);
    objc_msgSend(*((id *)v25[0] + 3), "hidesBusyIndicator");
    if ((v27 & 1) == 0)
      objc_msgSend(a1[4], "_allButtonsSetEnabled:", 1);
  }
  objc_storeStrong(v25, 0);
  objc_storeStrong(&location, 0);
}

double sub_10013D38C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, uint64_t a12)
{
  double result;

  *(_QWORD *)&result = 136317698;
  *(_DWORD *)a1 = 136317698;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2114;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2048;
  *(_QWORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 32) = 2114;
  *(_QWORD *)(a1 + 34) = a5;
  *(_WORD *)(a1 + 42) = 2114;
  *(_QWORD *)(a1 + 44) = a6;
  *(_WORD *)(a1 + 52) = 2048;
  *(_QWORD *)(a1 + 54) = a7;
  *(_WORD *)(a1 + 62) = 2114;
  *(_QWORD *)(a1 + 64) = a8;
  *(_WORD *)(a1 + 72) = 2082;
  *(_QWORD *)(a1 + 74) = a9;
  *(_WORD *)(a1 + 82) = 2082;
  *(_QWORD *)(a1 + 84) = a10;
  *(_WORD *)(a1 + 92) = 1024;
  *(_DWORD *)(a1 + 94) = a11;
  *(_WORD *)(a1 + 98) = 2112;
  *(_QWORD *)(a1 + 100) = a12;
  return result;
}

void sub_10013DD38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, int a14, _Unwind_Exception *exception_object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,id location)
{
  id *v21;

  objc_destroyWeak(v21);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10013DD68(id *a1, char a2, id obj)
{
  id WeakRetained;
  id v5;
  const __CFString *v6;
  id v7;
  id v8;
  id v9;
  const __CFString *v10;
  id v11;
  id v12;
  const char *v13;
  unsigned __int8 v14;
  const char *v15;
  id v16;
  id v17;
  char v18;
  __CFString *v19;
  char v20;
  id v21;
  char v22;
  __CFString *v23;
  char v24;
  id v25;
  os_log_t oslog;
  id v27[2];
  id location;
  char v29;
  id *v30;
  uint8_t buf[112];

  v30 = a1;
  v29 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v27[1] = a1;
  WeakRetained = objc_loadWeakRetained(a1 + 4);
  v27[0] = WeakRetained;
  if (WeakRetained)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(WeakRetained);
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v5 = objc_msgSend(*((id *)v27[0] + 1), "preferredUpdate");
      v24 = 0;
      v22 = 0;
      if (v5)
      {
        v25 = objc_msgSend(*((id *)v27[0] + 1), "preferredUpdate");
        v24 = 1;
        v6 = (const __CFString *)objc_msgSend(v25, "humanReadableUpdateName");
        v23 = (__CFString *)v6;
        v22 = 1;
      }
      else
      {
        v6 = CFSTR("N/A");
      }
      v7 = objc_msgSend(*((id *)v27[0] + 1), "preferredUpdate");
      v8 = objc_msgSend(*((id *)v27[0] + 1), "preferredUpdateError");
      v9 = objc_msgSend(*((id *)v27[0] + 1), "alternateUpdate");
      v20 = 0;
      v18 = 0;
      if (v9)
      {
        v21 = objc_msgSend(*((id *)v27[0] + 1), "alternateUpdate");
        v20 = 1;
        v10 = (const __CFString *)objc_msgSend(v21, "humanReadableUpdateName");
        v19 = (__CFString *)v10;
        v18 = 1;
      }
      else
      {
        v10 = CFSTR("N/A");
      }
      v11 = objc_msgSend(*((id *)v27[0] + 1), "alternateUpdate");
      v12 = objc_msgSend(*((id *)v27[0] + 1), "alternateUpdateError");
      if ((objc_msgSend(*((id *)v27[0] + 1), "isDelayingUpdates") & 1) != 0)
        v13 = "YES";
      else
        v13 = "NO";
      v14 = objc_msgSend(*((id *)v27[0] + 1), "automaticUpdateScheduled");
      v15 = "YES";
      if ((v14 & 1) == 0)
        v15 = "NO";
      sub_10013D38C((uint64_t)buf, (uint64_t)"-[BuddySoftwareUpdateController installTonightPressed]_block_invoke", (uint64_t)v6, (uint64_t)v7, (uint64_t)v8, (uint64_t)v10, (uint64_t)v11, (uint64_t)v12, (uint64_t)v13, (uint64_t)v15, v29 & 1, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "%s: Software Update Buddy Checkpoint -\n\tmanager preferredUpdate: %{public}@ (%p)\n\tmanager preferredUpdateError: %{public}@\n\tmanager alternateDescriptor: %{public}@ (%p)\n\tmanager alternateUpdateError: %{public}@\n\tmanager isDelayingUpdates: %{public}s\n\tmanager automaticUpdateScheduled: %{public}s\n\nsuccessfullyStarted: %d, error: %@", buf, 0x6Cu);

      if ((v18 & 1) != 0)
      if ((v20 & 1) != 0)

      if ((v22 & 1) != 0)
      if ((v24 & 1) != 0)

    }
    objc_storeStrong((id *)&oslog, 0);
    if ((v29 & 1) != 0)
    {
      v16 = objc_msgSend(v27[0], "delegate");
      v17 = objc_loadWeakRetained(a1 + 4);
      objc_msgSend(v16, "flowItemDone:", v17);

    }
    else
    {
      objc_msgSend(v27[0], "_installFailedWithError:", location);
    }
  }
  objc_storeStrong(v27, 0);
  objc_storeStrong(&location, 0);
}

void sub_10013EB68(id *a1)
{
  void *v1;
  void **v2;
  int v3;
  int v4;
  void (*v5)(NSObject *, char, id);
  void *v6;
  id v7[3];

  v7[2] = a1;
  v7[1] = a1;
  v1 = (void *)*((_QWORD *)a1[4] + 1);
  v2 = _NSConcreteStackBlock;
  v3 = -1073741824;
  v4 = 0;
  v5 = sub_10013EC0C;
  v6 = &unk_100280FD8;
  v7[0] = a1[4];
  objc_msgSend(v1, "startInstallWithHandler:", &v2);
  objc_storeStrong(v7, 0);
}

void sub_10013EC0C(NSObject *a1, char a2, id obj)
{
  uint64_t v4;
  os_log_t oslog[2];
  id location;
  char v7;
  NSObject *v8;
  uint8_t buf[40];

  v8 = a1;
  v7 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_1000E9E1C((uint64_t)buf, (uint64_t)"-[BuddySoftwareUpdateController installNowPressed]_block_invoke_2", v7 & 1, (uint64_t)location);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "%s: Started install = %d, error = %@", buf, 0x1Cu);
  }
  objc_storeStrong((id *)oslog, 0);
  if ((v7 & 1) == 0)
    -[objc_class _installFailedWithError:](a1[4].isa, "_installFailedWithError:", location);
  objc_storeStrong(&location, 0);
}

double sub_10013FA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  double result;

  *(_QWORD *)&result = 136317442;
  *(_DWORD *)a1 = 136317442;
  *(_QWORD *)(a1 + 4) = "-[BuddySoftwareUpdateController _installFailedWithError:]";
  *(_WORD *)(a1 + 12) = 2114;
  *(_QWORD *)(a1 + 14) = a2;
  *(_WORD *)(a1 + 22) = 2048;
  *(_QWORD *)(a1 + 24) = a3;
  *(_WORD *)(a1 + 32) = 2114;
  *(_QWORD *)(a1 + 34) = a4;
  *(_WORD *)(a1 + 42) = 2114;
  *(_QWORD *)(a1 + 44) = a5;
  *(_WORD *)(a1 + 52) = 2048;
  *(_QWORD *)(a1 + 54) = a6;
  *(_WORD *)(a1 + 62) = 2114;
  *(_QWORD *)(a1 + 64) = a7;
  *(_WORD *)(a1 + 72) = 2082;
  *(_QWORD *)(a1 + 74) = a8;
  *(_WORD *)(a1 + 82) = 2082;
  *(_QWORD *)(a1 + 84) = a9;
  *(_WORD *)(a1 + 92) = 2114;
  *(_QWORD *)(a1 + 94) = a10;
  return result;
}

void sub_10013FBF0(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(_QWORD, BOOL))(a1[4] + 16))(a1[4], location[0] != 0);
  objc_storeStrong(location, 0);
}

void sub_1001406F4(id *a1)
{
  NSBundle *v1;
  NSString *v2;
  NSBundle *v3;
  NSString *v4;
  id v5;
  id v6;
  id v7;
  id location;
  id v9;
  id v10[3];

  v10[2] = a1;
  v10[1] = a1;
  v10[0] = objc_loadWeakRetained(a1 + 4);
  if (v10[0])
  {
    v9 = -[BuddyPasscodeEntryController initWithNibName:bundle:]([BuddyPasscodeEntryController alloc], "initWithNibName:bundle:", 0, 0);
    objc_msgSend(v9, "setDelegate:", v10[0]);
    v1 = +[NSBundle mainBundle](NSBundle, "mainBundle");
    v2 = -[NSBundle localizedStringForKey:value:table:](v1, "localizedStringForKey:value:table:", CFSTR("PASSCODE_TITLE"), &stru_100284738, CFSTR("SoftwareUpdate"));
    objc_msgSend(v9, "setTitleText:", v2);

    v3 = +[NSBundle mainBundle](NSBundle, "mainBundle");
    v4 = -[NSBundle localizedStringForKey:value:table:](v3, "localizedStringForKey:value:table:", CFSTR("PASSCODE_INSTRUCTIONS"), &stru_100284738, CFSTR("SoftwareUpdate"));
    objc_msgSend(v9, "setInstructions:", v4);

    v5 = objc_msgSend(v9, "navigationItem");
    v6 = objc_msgSend(objc_alloc((Class)UIBarButtonItem), "initWithBarButtonSystemItem:target:action:", 1, v10[0], "_cancelDevicePasscodePicker:");
    objc_msgSend(v5, "setLeftBarButtonItem:", v6);

    location = objc_msgSend(objc_alloc((Class)UINavigationController), "initWithRootViewController:", v9);
    v7 = +[BFFStyle sharedStyle](BFFStyle, "sharedStyle");
    objc_msgSend(v7, "applyThemeToNavigationController:", location);

    objc_msgSend(v10[0], "presentViewController:animated:completion:", location, 1, 0);
    objc_storeStrong(&location, 0);
    objc_storeStrong(&v9, 0);
  }
  objc_storeStrong(v10, 0);
}

uint64_t sub_100140EEC(unsigned int a1)
{
  NSAssertionHandler *v1;
  NSString *v2;
  uint64_t (*v4)(_QWORD);

  v4 = (uint64_t (*)(_QWORD))sub_10014454C();
  if (!v4)
  {
    v1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *const BYSUSUISoftwareUpdateStateToString(SUSUISoftwareUpdateState)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddySoftwareUpdateController.m"), 44, CFSTR("%s"), dlerror(), 0);

    __break(1u);
  }
  return v4(a1);
}

double sub_100140FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  double result;

  *(_QWORD *)&result = 136318466;
  *(_DWORD *)a1 = 136318466;
  *(_QWORD *)(a1 + 4) = "-[BuddySoftwareUpdateController manager:didTransitionToState:fromState:]";
  *(_WORD *)(a1 + 12) = 2114;
  *(_QWORD *)(a1 + 14) = a2;
  *(_WORD *)(a1 + 22) = 2048;
  *(_QWORD *)(a1 + 24) = a3;
  *(_WORD *)(a1 + 32) = 2114;
  *(_QWORD *)(a1 + 34) = a4;
  *(_WORD *)(a1 + 42) = 2114;
  *(_QWORD *)(a1 + 44) = a5;
  *(_WORD *)(a1 + 52) = 2048;
  *(_QWORD *)(a1 + 54) = a6;
  *(_WORD *)(a1 + 62) = 2114;
  *(_QWORD *)(a1 + 64) = a7;
  *(_WORD *)(a1 + 72) = 2082;
  *(_QWORD *)(a1 + 74) = a8;
  *(_WORD *)(a1 + 82) = 2082;
  *(_QWORD *)(a1 + 84) = a9;
  *(_WORD *)(a1 + 92) = 2114;
  *(_QWORD *)(a1 + 94) = a10;
  *(_WORD *)(a1 + 102) = 2048;
  *(_QWORD *)(a1 + 104) = a11;
  *(_WORD *)(a1 + 112) = 2114;
  *(_QWORD *)(a1 + 114) = a12;
  *(_WORD *)(a1 + 122) = 2048;
  *(_QWORD *)(a1 + 124) = a13;
  *(_WORD *)(a1 + 132) = 2112;
  *(_QWORD *)(a1 + 134) = a14;
  return result;
}

void sub_100141098(uint64_t a1)
{
  void *v2;
  NSBundle *v3;
  NSString *v4;
  id v5;
  id v6;
  id v7;
  id v8;
  void *v9;
  id v10;
  const __CFString *v11;
  __CFString *v12;
  const __CFString *v13;
  void *v14;
  id v15;
  id v16;
  id v17;
  BOOL v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  void *v23;
  id v24;
  NSString *v25;
  void *v26;
  NSBundle *v27;
  NSString *v28;
  void *v29;
  NSBundle *v30;
  NSString *v31;
  void *v32;
  NSBundle *v33;
  NSString *v34;
  void *v35;
  NSBundle *v36;
  NSString *v37;
  id v38;
  char v39;
  id v40;
  char v41;
  id v42;
  char v43;
  id v44;
  unsigned __int8 v45;
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 48));
  if (location[0])
  {
    v2 = (void *)*((_QWORD *)location[0] + 3);
    v3 = +[NSBundle mainBundle](NSBundle, "mainBundle");
    v4 = -[NSBundle localizedStringForKey:value:table:](v3, "localizedStringForKey:value:table:", CFSTR("DOWNLOAD_AND_INSTALL"), &stru_100284738, CFSTR("SoftwareUpdate"));
    objc_msgSend(v2, "setTitle:forState:", v4, 0);

    v5 = objc_msgSend(location[0], "buttonTray");
    objc_msgSend(v5, "setCaptionText:", &stru_100284738);

    objc_msgSend(*(id *)(a1 + 32), "resetButtonState:andEventHandlers:", *((_QWORD *)location[0] + 3), 1);
    if (*((_QWORD *)location[0] + 4))
      objc_msgSend(*(id *)(a1 + 32), "resetButtonState:andEventHandlers:", *((_QWORD *)location[0] + 4), 1);
    if (*((_QWORD *)location[0] + 5))
      objc_msgSend(*(id *)(a1 + 32), "resetButtonState:andEventHandlers:", *((_QWORD *)location[0] + 5), 0);
    if (*(_QWORD *)(a1 + 40))
    {
      v45 = objc_msgSend(*((id *)location[0] + 1), "enableUpdateButtonForError:", *(_QWORD *)(a1 + 40)) & 1;
      objc_msgSend(*((id *)location[0] + 3), "setEnabled:", v45);
      objc_msgSend(*((id *)location[0] + 4), "setEnabled:", v45 & 1);
      v6 = objc_msgSend(location[0], "buttonTray");
      v7 = objc_msgSend(*((id *)location[0] + 1), "humanReadableDescriptionForError:", *(_QWORD *)(a1 + 40));
      objc_msgSend(v6, "setCaptionText:", v7);

    }
    v8 = objc_msgSend(*((id *)location[0] + 1), "preferredUpdate");

    if (v8)
    {
      v9 = (void *)*((_QWORD *)location[0] + 2);
      v10 = objc_msgSend(*((id *)location[0] + 1), "preferredUpdate");
      v11 = (const __CFString *)objc_msgSend(v10, "publisher");
      v12 = (__CFString *)v11;
      if (v11)
        v13 = v11;
      else
        v13 = CFSTR("Apple, Inc.");
      objc_msgSend(v9, "setPublisherText:", v13);

      v14 = (void *)*((_QWORD *)location[0] + 2);
      v15 = objc_msgSend(*((id *)location[0] + 1), "prettyUpdateName");
      objc_msgSend(v14, "setUpdateName:", v15);

      v16 = objc_msgSend(*((id *)location[0] + 1), "preferredUpdate");
      v17 = objc_msgSend(v16, "documentation");
      v43 = 0;
      v41 = 0;
      v39 = 0;
      v18 = 0;
      if (v17)
      {
        v44 = objc_msgSend(*((id *)location[0] + 1), "preferredUpdate");
        v43 = 1;
        v42 = objc_msgSend(v44, "documentation");
        v41 = 1;
        v40 = objc_msgSend(v42, "releaseNotesSummary");
        v39 = 1;
        v18 = v40 != 0;
      }
      if ((v39 & 1) != 0)

      if ((v41 & 1) != 0)
      if ((v43 & 1) != 0)

      if (v18)
      {
        v19 = (void *)*((_QWORD *)location[0] + 2);
        v20 = objc_msgSend(*((id *)location[0] + 1), "preferredUpdate");
        v21 = objc_msgSend(v20, "documentation");
        v22 = objc_msgSend(v21, "releaseNotesSummary");
        objc_msgSend(v19, "setReleaseNotesSummary:", v22);

      }
      if (objc_msgSend(*((id *)location[0] + 1), "state") != 12)
      {
        v23 = (void *)*((_QWORD *)location[0] + 2);
        v24 = objc_msgSend(*((id *)location[0] + 1), "preferredUpdate");
        v25 = +[NSByteCountFormatter stringFromByteCount:countStyle:](NSByteCountFormatter, "stringFromByteCount:countStyle:", objc_msgSend(v24, "downloadSize"), 2);
        objc_msgSend(v23, "setStatusMessage:symbolizingError:", v25, 0);

      }
      objc_msgSend(*((id *)location[0] + 2), "setAnimatingGearView:", objc_msgSend(*((id *)location[0] + 1), "state") == 12);
    }
    switch(*(_DWORD *)(a1 + 56))
    {
      case 5:
        objc_msgSend(*((id *)location[0] + 2), "setProgressDisplayStyle:", 0);
        objc_msgSend(*((id *)location[0] + 3), "setEnabled:", 0);
        objc_msgSend(*((id *)location[0] + 4), "setEnabled:", 0);
        break;
      case 8:
        objc_msgSend(*((id *)location[0] + 2), "setProgressDisplayStyle:", 0);
        v26 = (void *)*((_QWORD *)location[0] + 3);
        v27 = +[NSBundle mainBundle](NSBundle, "mainBundle");
        v28 = -[NSBundle localizedStringForKey:value:table:](v27, "localizedStringForKey:value:table:", CFSTR("DOWNLOAD_AND_INSTALL"), &stru_100284738, CFSTR("SoftwareUpdate"));
        objc_msgSend(v26, "setTitle:forState:", v28, 0);

        objc_msgSend(*((id *)location[0] + 3), "addTarget:action:forControlEvents:", location[0], "downloadAndInstallPressed", 64);
        v29 = (void *)*((_QWORD *)location[0] + 4);
        v30 = +[NSBundle mainBundle](NSBundle, "mainBundle");
        v31 = -[NSBundle localizedStringForKey:value:table:](v30, "localizedStringForKey:value:table:", CFSTR("DOWNLOAD_AND_INSTALL_TONIGHT"), &stru_100284738, CFSTR("SoftwareUpdate"));
        objc_msgSend(v29, "setTitle:forState:", v31, 0);

        objc_msgSend(*((id *)location[0] + 4), "addTarget:action:forControlEvents:", location[0], "downloadAndInstallTonightPressed", 64);
        break;
      case 0xA:
        objc_msgSend(*((id *)location[0] + 2), "setProgressDisplayStyle:", 0);
        v32 = (void *)*((_QWORD *)location[0] + 3);
        v33 = +[NSBundle mainBundle](NSBundle, "mainBundle");
        v34 = -[NSBundle localizedStringForKey:value:table:](v33, "localizedStringForKey:value:table:", CFSTR("INSTALL_NOW"), &stru_100284738, CFSTR("SoftwareUpdate"));
        objc_msgSend(v32, "setTitle:forState:", v34, 0);

        v35 = (void *)*((_QWORD *)location[0] + 4);
        v36 = +[NSBundle mainBundle](NSBundle, "mainBundle");
        v37 = -[NSBundle localizedStringForKey:value:table:](v36, "localizedStringForKey:value:table:", CFSTR("INSTALL_TONIGHT"), &stru_100284738, CFSTR("SoftwareUpdate"));
        objc_msgSend(v35, "setTitle:forState:", v37, 0);

        objc_msgSend(*((id *)location[0] + 3), "addTarget:action:forControlEvents:", location[0], "installNowPressed", 64);
        objc_msgSend(*((id *)location[0] + 4), "addTarget:action:forControlEvents:", location[0], "installTonightPressed", 64);
        break;
      case 0xC:
        objc_msgSend(*((id *)location[0] + 3), "setHidden:", 1);
        objc_msgSend(*((id *)location[0] + 4), "setHidden:", 1);
        break;
      case 0xE:
        objc_msgSend(*((id *)location[0] + 3), "addTarget:action:forControlEvents:", location[0], "resumePressed", 64);
        objc_msgSend(*((id *)location[0] + 3), "setHidden:", (objc_msgSend(*((id *)location[0] + 1), "readyToResume") ^ 1) & 1);
        objc_msgSend(*((id *)location[0] + 4), "setHidden:", 1);
        break;
      case 0xF:
        objc_msgSend(location[0], "_allButtonsSetEnabled:", 0);
        objc_msgSend(*((id *)location[0] + 3), "setHidden:", 1);
        objc_msgSend(*((id *)location[0] + 4), "setHidden:", 1);
        objc_msgSend(*((id *)location[0] + 5), "setHidden:", 1);
        objc_msgSend(*((id *)location[0] + 2), "setProgressDisplayStyle:", 0);
        break;
      default:
        break;
    }
    v38 = objc_msgSend(location[0], "tableView");
    objc_msgSend(v38, "reloadData");

  }
  objc_storeStrong(location, 0);
}

void sub_100141D80(uint64_t a1)
{
  id WeakRetained;
  id v3;
  float v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  os_log_type_t v14;
  os_log_t oslog;
  id location[3];
  uint8_t buf[40];

  location[2] = (id)a1;
  location[1] = (id)a1;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  location[0] = WeakRetained;
  if (WeakRetained)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(WeakRetained);
    v14 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v3 = objc_msgSend(*(id *)(a1 + 32), "progress");
      objc_msgSend(v3, "normalizedPercentComplete");
      *(double *)&v5 = v4;
      v6 = objc_msgSend(*(id *)(a1 + 32), "descriptor");
      v13 = objc_msgSend(v6, "humanReadableUpdateName");
      sub_100141FFC((uint64_t)buf, v5, (uint64_t)v13);
      _os_log_impl((void *)&_mh_execute_header, oslog, v14, "%{public}s: Progress %f for download: %@", buf, 0x20u);

      objc_storeStrong(&v13, 0);
    }
    objc_storeStrong((id *)&oslog, 0);
    v7 = (void *)*((_QWORD *)location[0] + 2);
    v8 = objc_msgSend(*(id *)(a1 + 32), "progress");
    objc_msgSend(v8, "normalizedPercentComplete");
    objc_msgSend(v7, "setProgress:");

    v9 = (void *)*((_QWORD *)location[0] + 2);
    v10 = objc_msgSend(*((id *)location[0] + 1), "progressString");
    objc_msgSend(v9, "setStatusMessage:symbolizingError:", v10, 0);

    objc_msgSend(*((id *)location[0] + 2), "setProgressDisplayStyle:", *(unsigned int *)(a1 + 48));
    v11 = location[0];
    v12 = objc_msgSend(*((id *)location[0] + 1), "actionString");
    objc_msgSend(v11, "setButtonTitle:", v12);

  }
  objc_storeStrong(location, 0);
}

double sub_100141FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 136446722;
  *(_DWORD *)a1 = 136446722;
  *(_QWORD *)(a1 + 4) = "-[BuddySoftwareUpdateController manager:downloadProgressChanged:displayStyle:]_block_invoke";
  *(_WORD *)(a1 + 12) = 2048;
  *(_QWORD *)(a1 + 14) = a2;
  *(_WORD *)(a1 + 22) = 2112;
  *(_QWORD *)(a1 + 24) = a3;
  return result;
}

void sub_100142150(uint64_t a1)
{
  id WeakRetained;
  id v3;
  const __CFString *v4;
  id v5;
  id v6;
  id v7;
  const __CFString *v8;
  id v9;
  id v10;
  const char *v11;
  unsigned __int8 v12;
  const char *v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  __CFString *v18;
  id v19;
  id v20;
  id v21;
  __CFString *v22;
  id v23;
  id v24;
  const char *v25;
  unsigned __int8 v26;
  const char *v27;
  id v28;
  const __CFString *v29;
  id v30;
  id v31;
  id v32;
  const __CFString *v33;
  id v34;
  id v35;
  const char *v36;
  unsigned __int8 v37;
  const char *v38;
  id v39;
  id v40;
  char v41;
  __CFString *v42;
  char v43;
  id v44;
  char v45;
  __CFString *v46;
  char v47;
  id v48;
  os_log_t oslog;
  char v50;
  id v51;
  char v52;
  id v53;
  char v54;
  id v55;
  char v56;
  id v57;
  os_log_type_t v58;
  id v59;
  char v60;
  __CFString *v61;
  char v62;
  id v63;
  char v64;
  __CFString *v65;
  char v66;
  id v67;
  os_log_type_t v68;
  id location;
  id v70[3];
  uint8_t v71[96];
  uint8_t v72[96];
  uint8_t buf[104];

  v70[2] = (id)a1;
  v70[1] = (id)a1;
  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v70[0] = WeakRetained;
  if (WeakRetained)
  {
    if (*((_QWORD *)v70[0] + 7))
    {
      v14 = objc_msgSend(v70[0], "navigationController");
      v15 = objc_msgSend(v14, "topViewController");

      if (v15 == v70[0])
      {
        v59 = (id)_BYLoggingFacility(v16);
        v58 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled((os_log_t)v59, OS_LOG_TYPE_DEFAULT))
        {
          v17 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "preferredUpdate");
          v56 = 0;
          v54 = 0;
          v40 = v17;
          if (v17)
          {
            v57 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "preferredUpdate");
            v56 = 1;
            v18 = (__CFString *)objc_msgSend(v57, "humanReadableUpdateName");
            v55 = v18;
            v54 = 1;
          }
          else
          {
            v18 = CFSTR("N/A");
          }
          v19 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "preferredUpdate");
          v20 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "preferredUpdateError");
          v21 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "alternateUpdate");
          v52 = 0;
          v50 = 0;
          if (v21)
          {
            v53 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "alternateUpdate");
            v52 = 1;
            v22 = (__CFString *)objc_msgSend(v53, "humanReadableUpdateName");
            v51 = v22;
            v50 = 1;
          }
          else
          {
            v22 = CFSTR("N/A");
          }
          v23 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "alternateUpdate");
          v24 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "alternateUpdateError");
          if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "isDelayingUpdates") & 1) != 0)
            v25 = "YES";
          else
            v25 = "NO";
          v26 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "automaticUpdateScheduled");
          v27 = "YES";
          if ((v26 & 1) == 0)
            v27 = "NO";
          sub_10013B930((uint64_t)v72, (uint64_t)"-[BuddySoftwareUpdateController manager:downloadFinished:]_block_invoke", (uint64_t)v18, (uint64_t)v19, (uint64_t)v20, (uint64_t)v22, (uint64_t)v23, (uint64_t)v24, (uint64_t)v25, (uint64_t)v27);
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)v59, v58, "%s: Software Update Buddy Checkpoint -\n\tmanager preferredUpdate: %{public}@ (%p)\n\tmanager preferredUpdateError: %{public}@\n\tmanager alternateDescriptor: %{public}@ (%p)\n\tmanager alternateUpdateError: %{public}@\n\tmanager isDelayingUpdates: %{public}s\n\tmanager automaticUpdateScheduled: %{public}s\n\nUpdate finished downloading attempting to install...", v72, 0x5Cu);

          if ((v50 & 1) != 0)
          if ((v52 & 1) != 0)

          if ((v54 & 1) != 0)
          if ((v56 & 1) != 0)

        }
        objc_storeStrong(&v59, 0);
        if (*((_QWORD *)v70[0] + 7) == 1)
          objc_msgSend(v70[0], "installNowPressed");
        else
          objc_msgSend(v70[0], "installTonightPressed");
      }
      else
      {
        oslog = (os_log_t)(id)_BYLoggingFacility(v16);
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
        {
          v28 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "preferredUpdate");
          v47 = 0;
          v45 = 0;
          if (v28)
          {
            v48 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "preferredUpdate");
            v47 = 1;
            v29 = (const __CFString *)objc_msgSend(v48, "humanReadableUpdateName");
            v46 = (__CFString *)v29;
            v45 = 1;
          }
          else
          {
            v29 = CFSTR("N/A");
          }
          v30 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "preferredUpdate");
          v31 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "preferredUpdateError");
          v32 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "alternateUpdate");
          v43 = 0;
          v41 = 0;
          if (v32)
          {
            v44 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "alternateUpdate");
            v43 = 1;
            v33 = (const __CFString *)objc_msgSend(v44, "humanReadableUpdateName");
            v42 = (__CFString *)v33;
            v41 = 1;
          }
          else
          {
            v33 = CFSTR("N/A");
          }
          v34 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "alternateUpdate");
          v35 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "alternateUpdateError");
          if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "isDelayingUpdates") & 1) != 0)
            v36 = "YES";
          else
            v36 = "NO";
          v37 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "automaticUpdateScheduled");
          v38 = "YES";
          if ((v37 & 1) == 0)
            v38 = "NO";
          sub_10013B930((uint64_t)v71, (uint64_t)"-[BuddySoftwareUpdateController manager:downloadFinished:]_block_invoke", (uint64_t)v29, (uint64_t)v30, (uint64_t)v31, (uint64_t)v33, (uint64_t)v34, (uint64_t)v35, (uint64_t)v36, (uint64_t)v38);
          _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "%s: Software Update Buddy Checkpoint -\n\tmanager preferredUpdate: %{public}@ (%p)\n\tmanager preferredUpdateError: %{public}@\n\tmanager alternateDescriptor: %{public}@ (%p)\n\tmanager alternateUpdateError: %{public}@\n\tmanager isDelayingUpdates: %{public}s\n\tmanager automaticUpdateScheduled: %{public}s\n\nUpdate finished downloading, but waiting for user to initiate install (not frontmost)", v71, 0x5Cu);

          if ((v41 & 1) != 0)
          if ((v43 & 1) != 0)

          if ((v45 & 1) != 0)
          if ((v47 & 1) != 0)

        }
        objc_storeStrong((id *)&oslog, 0);
      }
    }
    else
    {
      location = (id)_BYLoggingFacility(WeakRetained);
      v68 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_DEFAULT))
      {
        v3 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "preferredUpdate");
        v66 = 0;
        v64 = 0;
        v39 = v3;
        if (v3)
        {
          v67 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "preferredUpdate");
          v66 = 1;
          v4 = (const __CFString *)objc_msgSend(v67, "humanReadableUpdateName");
          v65 = (__CFString *)v4;
          v64 = 1;
        }
        else
        {
          v4 = CFSTR("N/A");
        }
        v5 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "preferredUpdate");
        v6 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "preferredUpdateError");
        v7 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "alternateUpdate");
        v62 = 0;
        v60 = 0;
        if (v7)
        {
          v63 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "alternateUpdate");
          v62 = 1;
          v8 = (const __CFString *)objc_msgSend(v63, "humanReadableUpdateName");
          v61 = (__CFString *)v8;
          v60 = 1;
        }
        else
        {
          v8 = CFSTR("N/A");
        }
        v9 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "alternateUpdate");
        v10 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "alternateUpdateError");
        if ((objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "isDelayingUpdates") & 1) != 0)
          v11 = "YES";
        else
          v11 = "NO";
        v12 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "automaticUpdateScheduled");
        v13 = "YES";
        if ((v12 & 1) == 0)
          v13 = "NO";
        sub_10013B930((uint64_t)buf, (uint64_t)"-[BuddySoftwareUpdateController manager:downloadFinished:]_block_invoke", (uint64_t)v4, (uint64_t)v5, (uint64_t)v6, (uint64_t)v8, (uint64_t)v9, (uint64_t)v10, (uint64_t)v11, (uint64_t)v13);
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)location, v68, "%s: Software Update Buddy Checkpoint -\n\tmanager preferredUpdate: %{public}@ (%p)\n\tmanager preferredUpdateError: %{public}@\n\tmanager alternateDescriptor: %{public}@ (%p)\n\tmanager alternateUpdateError: %{public}@\n\tmanager isDelayingUpdates: %{public}s\n\tmanager automaticUpdateScheduled: %{public}s\n\nUpdate finished downloading, but waiting for user to initiate install", buf, 0x5Cu);

        if ((v60 & 1) != 0)
        if ((v62 & 1) != 0)

        if ((v64 & 1) != 0)
        if ((v66 & 1) != 0)

      }
      objc_storeStrong(&location, 0);
    }
  }
  objc_storeStrong(v70, 0);
}

void sub_100142E4C(uint64_t a1)
{
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_loadWeakRetained((id *)(a1 + 40));
  if (location[0])
    objc_msgSend(location[0], "_installFailedWithError:", *(_QWORD *)(a1 + 32));
  objc_storeStrong(location, 0);
}

id sub_10014363C()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEB08;
  v13 = qword_1002EEB08;
  if (!qword_1002EEB08)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100144698;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100144698(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_100143E30(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_100143F70();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("SUSUISoftwareUpdateManager");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getSUSUISoftwareUpdateManagerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddySoftwareUpdateController.m"), 33, CFSTR("Unable to find class %s"), "SUSUISoftwareUpdateManager");

    __break(1u);
  }
  qword_1002EEAE0 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_100143F70()
{
  NSAssertionHandler *v0;
  NSString *v1;
  uint64_t v3;
  void *v4;

  v4 = 0;
  v3 = sub_1001440A0((uint64_t)&v4);
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *SoftwareUpdateSettingsUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddySoftwareUpdateController.m"), 32, CFSTR("%s"), v4);

    __break(1u);
  }
  if (v4)
    free(v4);
  return v3;
}

uint64_t sub_1001440A0(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEAE8;
  v9 = qword_1002EEAE8;
  if (!qword_1002EEAE8)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100144130;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_100144130((uint64_t)&v2);
  }
  return qword_1002EEAE8;
}

uint64_t sub_100144130(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/SoftwareUpdateSettingsUI.framework/SoftwareUpdateSettingsUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEAE8 = result;
  return result;
}

void sub_1001441C0(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_100144300();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("SUSSoftwareUpdateTitleCell");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getSUSSoftwareUpdateTitleCellClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddySoftwareUpdateController.m"), 37, CFSTR("Unable to find class %s"), "SUSSoftwareUpdateTitleCell");

    __break(1u);
  }
  qword_1002EEAF0 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_100144300()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_10014442C((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *SoftwareUpdateSettingsLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddySoftwareUpdateController.m"), 36, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_10014442C(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEAF8;
  v9 = qword_1002EEAF8;
  if (!qword_1002EEAF8)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001444BC;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1001444BC((uint64_t)&v2);
  }
  return qword_1002EEAF8;
}

uint64_t sub_1001444BC(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/SoftwareUpdateSettings.framework/SoftwareUpdateSettings";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEAF8 = result;
  return result;
}

uint64_t sub_10014454C()
{
  uint64_t v0;
  void **v2;
  int v3;
  int v4;
  void *(*v5)(uint64_t);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 0x20000000;
  v12 = 32;
  v8 = qword_1002EEB00;
  v13 = qword_1002EEB00;
  if (!qword_1002EEB00)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100144630;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100144630((uint64_t)&v2);
  }
  v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_100144630(uint64_t a1)
{
  void *v2;
  void *result;

  v2 = (void *)sub_100143F70();
  result = dlsym(v2, "SUSUISoftwareUpdateStateToString");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1002EEB00 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100144698(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_100144300();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("SUSSoftwareUpdateReleaseNotesDetail");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getSUSSoftwareUpdateReleaseNotesDetailClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddySoftwareUpdateController.m"), 40, CFSTR("Unable to find class %s"), "SUSSoftwareUpdateReleaseNotesDetail");

    __break(1u);
  }
  qword_1002EEB08 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_100146DA4(id a1)
{
  NSDictionary *v1;
  void *v2;
  id location;
  id v4[3];
  _QWORD v5[2];
  _QWORD v6[2];

  v4[2] = a1;
  v4[1] = a1;
  v4[0] = objc_alloc_init((Class)NSMutableParagraphStyle);
  objc_msgSend(v4[0], "setLineBreakMode:", 4);
  objc_msgSend(v4[0], "setAlignment:", 1);
  objc_msgSend(v4[0], "setLineSpacing:", 0.0);
  location = +[UIFont preferredFontForTextStyle:](UIFont, "preferredFontForTextStyle:", UIFontTextStyleHeadline);
  v5[0] = NSFontAttributeName;
  v6[0] = location;
  v5[1] = NSParagraphStyleAttributeName;
  v6[1] = v4[0];
  v1 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 2);
  v2 = (void *)qword_1002EEB20;
  qword_1002EEB20 = (uint64_t)v1;

  objc_storeStrong(&location, 0);
  objc_storeStrong(v4, 0);
}

void sub_100146F5C(id a1)
{
  UIFont *v1;
  NSDictionary *v2;
  void *v3;
  id v4[3];
  _QWORD v5[2];
  _QWORD v6[2];

  v4[2] = a1;
  v4[1] = a1;
  v4[0] = objc_alloc_init((Class)NSMutableParagraphStyle);
  objc_msgSend(v4[0], "setLineBreakMode:", 4);
  objc_msgSend(v4[0], "setAlignment:", 1);
  v5[0] = NSFontAttributeName;
  v1 = +[UIFont preferredFontForTextStyle:](UIFont, "preferredFontForTextStyle:", UIFontTextStyleBody);
  v6[0] = v1;
  v5[1] = NSParagraphStyleAttributeName;
  v6[1] = v4[0];
  v2 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 2);
  v3 = (void *)qword_1002EEB30;
  qword_1002EEB30 = (uint64_t)v2;

  objc_storeStrong(v4, 0);
}

double sub_100147434()
{
  return 0.0;
}

double sub_100148618()
{
  return 0.0;
}

BOOL sub_100148670(double a1, double a2, double a3, double a4)
{
  BOOL v4;

  v4 = 0;
  if (a1 == a3)
    return a2 == a4;
  return v4;
}

void sub_1001497F0(uint64_t a1)
{
  id v2;
  id v3;
  id v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "miscState", a1, a1);
  objc_msgSend(v2, "setUserSkippedWiFi:", 1);

  v3 = objc_msgSend(*(id *)(a1 + 32), "miscState");
  objc_msgSend(v3, "setUserSelectedCellularActivation:", 0);

  v4 = objc_msgSend(*(id *)(a1 + 32), "delegate");
  objc_msgSend(v4, "flowItemDone:", *(_QWORD *)(a1 + 32));

}

void sub_100149898(uint64_t a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend(*(id *)(a1 + 32), "navigationController", a1, a1);
  v2 = objc_msgSend(v1, "popViewControllerAnimated:", 1);

}

void sub_100149C9C(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  objc_super v6;
  uint64_t v7;
  id v8;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v8 = 0;
  objc_storeStrong(&v8, a3);
  v7 = a1;
  objc_msgSend(*(id *)(a1 + 32), "setPreflightInformation:", location[0]);
  v5 = *(_QWORD *)(a1 + 40);
  v6.receiver = *(id *)(a1 + 32);
  v6.super_class = (Class)BuddyMigrationStoreRenewController;
  objc_msgSendSuper2(&v6, "performExtendedInitializationWithCompletion:", v5);
  objc_storeStrong(&v8, 0);
  objc_storeStrong(location, 0);
}

void sub_10014A424(NSObject *a1, uint64_t a2, id obj)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  int v7;
  NSString *v8;
  void *v9;
  void **block;
  int v11;
  int v12;
  void (*v13)(uint64_t);
  void *v14;
  objc_class *v15;
  char v16;
  id v17;
  char v18;
  id v19;
  os_log_type_t v20;
  os_log_t v21;
  uint8_t buf[7];
  os_log_type_t v23;
  os_log_t oslog[2];
  __int128 location;
  NSObject *v26;
  uint8_t v27[24];

  v26 = a1;
  *((_QWORD *)&location + 1) = a2;
  *(_QWORD *)&location = 0;
  objc_storeStrong((id *)&location, obj);
  oslog[1] = a1;
  if (location == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v23 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v5 = oslog[0];
      v6 = v23;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Renew credentials was successful!", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    -[objc_class setRenewSucceeded:](a1[4].isa, "setRenewSucceeded:", 1);
  }
  else
  {
    v21 = (os_log_t)(id)_BYLoggingFacility(v4);
    v20 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      v7 = DWORD2(location);
      v18 = 0;
      v16 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v8 = (NSString *)location;
      }
      else if ((_QWORD)location)
      {
        v19 = objc_msgSend((id)location, "domain");
        v18 = 1;
        v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v19, objc_msgSend((id)location, "code"));
        v17 = v8;
        v16 = 1;
      }
      else
      {
        v8 = 0;
      }
      sub_1000503FC((uint64_t)v27, v7, (uint64_t)v8);
      _os_log_impl((void *)&_mh_execute_header, v21, v20, "Renew credentials failed (%d): %{public}@", v27, 0x12u);
      if ((v16 & 1) != 0)

      if ((v18 & 1) != 0)
    }
    objc_storeStrong((id *)&v21, 0);
  }
  v9 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v11 = -1073741824;
  v12 = 0;
  v13 = sub_10014A704;
  v14 = &unk_100280730;
  v15 = a1[4].isa;
  dispatch_async((dispatch_queue_t)v9, &block);

  objc_storeStrong((id *)&v15, 0);
  objc_storeStrong((id *)&location, 0);
}

void sub_10014A704(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "delegate", a1, a1);
  objc_msgSend(v2, "flowItemDone:", *(_QWORD *)(a1 + 32));

}

void sub_10014B6FC(uint64_t a1, uint64_t a2)
{
  void *v2;
  id *v3;

  v3 = (id *)(a2 + 40);
  v2 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);
  objc_storeStrong(v3, 0);
}

void sub_10014B72C(uint64_t a1)
{
  objc_storeStrong((id *)(a1 + 40), 0);
}

void sub_10014B738(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;

  v2 = objc_msgSend(*(id *)(a1 + 32), "traitCollection", a1, a1);
  v3 = objc_msgSend(v2, "userInterfaceStyle");

  if (v3 == (id)2)
  {
    v4 = objc_msgSend(*(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), "stringByAppendingString:", CFSTR(" Dark"));
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = *(void **)(v5 + 40);
    *(_QWORD *)(v5 + 40) = v4;

  }
}

void sub_10014C5A0(id *a1, void *a2, void *a3, void *a4)
{
  id v7;
  BuddyAppleIDSignInTask *v8;
  id v9;
  id v10;
  BuddyAppleIDSignInTask *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  AKAccountManager *v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  id v31;
  id v32;
  id v33;
  id v34;
  id v35;
  id v36;
  void **v37;
  int v38;
  int v39;
  void (*v40)(id *, void *, void *);
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;
  uint8_t v46[15];
  os_log_type_t v47;
  os_log_t v48;
  os_log_type_t v49;
  os_log_t oslog;
  id v51;
  int v52;
  id *v53;
  id v54;
  id v55;
  id location[2];
  uint8_t buf[40];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v55 = 0;
  objc_storeStrong(&v55, a3);
  v54 = 0;
  objc_storeStrong(&v54, a4);
  v53 = a1;
  if (v54)
  {
    (*((void (**)(void))a1[5] + 2))();
    v52 = 1;
  }
  else
  {
    v51 = objc_alloc_init((Class)SASProximityAnisetteDataProvider);
    v7 = objc_msgSend(a1[4], "proximitySession");
    objc_msgSend(v51, "setSession:", v7);

    v8 = [BuddyAppleIDSignInTask alloc];
    v9 = objc_msgSend(a1[4], "featureFlags");
    v10 = +[BuddyAccountTools sharedBuddyAccountTools](BuddyAccountTools, "sharedBuddyAccountTools");
    v11 = -[BuddyAppleIDSignInTask initWithFeatureFlags:accountTools:](v8, "initWithFeatureFlags:accountTools:", v9, v10);
    objc_msgSend(a1[4], "setSignInTask:", v11);

    v12 = objc_msgSend(a1[4], "navigationController");
    v13 = objc_msgSend(a1[4], "signInTask");
    objc_msgSend(v13, "setNavigationController:", v12);

    LOBYTE(v12) = objc_msgSend(a1[4], "ignoreLockAssertErrors");
    v14 = objc_msgSend(a1[4], "signInTask");
    objc_msgSend(v14, "setIgnoreLockAssertErrors:", v12 & 1);

    LOBYTE(v12) = objc_msgSend(a1[4], "restoreFromBackupMode");
    v15 = objc_msgSend(a1[4], "signInTask");
    objc_msgSend(v15, "setRestoreFromBackupMode:", v12 & 1);

    LOBYTE(v12) = objc_msgSend(a1[4], "makeStoreServiceActive");
    v16 = objc_msgSend(a1[4], "signInTask");
    objc_msgSend(v16, "setMakeStoreServiceActive:", v12 & 1);

    v17 = objc_msgSend(a1[4], "featureFlags");
    LOBYTE(v16) = objc_msgSend(v17, "isUseCDPContextSecretInsteadOfSBDSecretEnabled");

    if ((v16 & 1) != 0)
    {
      oslog = (os_log_t)(id)_BYLoggingFacility(v18);
      v49 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
      {
        v19 = objc_msgSend(a1[4], "cacheManager");
        v20 = objc_msgSend(a1[4], "signInTask");
        sub_1000CB654((uint64_t)buf, (uint64_t)"-[BuddyProximityAppleIDSignInTask authenticateThenSignInWithCompletion:]_block_invoke", (uint64_t)v19, (uint64_t)v20);
        _os_log_impl((void *)&_mh_execute_header, oslog, v49, "%s: Setting cache manager %@ on sign in task %@", buf, 0x20u);

      }
      objc_storeStrong((id *)&oslog, 0);
      v21 = objc_msgSend(a1[4], "cacheManager");
      v22 = objc_msgSend(a1[4], "signInTask");
      objc_msgSend(v22, "setCacheManager:", v21);

    }
    v23 = objc_msgSend(a1[4], "signInTask");
    objc_msgSend(v23, "setEnableFindMy:", 0);

    v24 = +[AKAccountManager sharedInstance](AKAccountManager, "sharedInstance");
    v25 = -[AKAccountManager securityLevelForAccount:](v24, "securityLevelForAccount:", location[0]);

    if (v25 != (id)2)
    {
      v27 = objc_msgSend(a1[4], "messageSession");
      v28 = objc_msgSend(a1[4], "signInTask");
      objc_msgSend(v28, "setMessageSession:", v27);

    }
    v48 = (os_log_t)(id)_BYLoggingFacility(v26);
    v47 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
    {
      v29 = v48;
      v30 = v47;
      sub_100038C3C(v46);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "Beginning authentication for iCloud account...", v46, 2u);
    }
    objc_storeStrong((id *)&v48, 0);
    v31 = objc_alloc((Class)BYAnalyticsEventAppleIDSignIn);
    v32 = objc_msgSend(a1[4], "analyticsManager");
    v45 = objc_msgSend(v31, "initWithAnalyticsManager:context:", v32, 0);

    v33 = a1[4];
    v34 = objc_msgSend(location[0], "username");
    v35 = v55;
    v36 = v51;
    v37 = _NSConcreteStackBlock;
    v38 = -1073741824;
    v39 = 0;
    v40 = sub_10014CBA0;
    v41 = &unk_1002836D8;
    v44 = a1[5];
    v42 = v45;
    v43 = a1[4];
    objc_msgSend(v33, "_authenticateWithUsername:companionDevice:anisetteDataProvider:completion:", v34, v35, v36, &v37);

    objc_storeStrong(&v43, 0);
    objc_storeStrong(&v42, 0);
    objc_storeStrong(&v44, 0);
    objc_storeStrong(&v45, 0);
    objc_storeStrong(&v51, 0);
    v52 = 0;
  }
  objc_storeStrong(&v54, 0);
  objc_storeStrong(&v55, 0);
  objc_storeStrong(location, 0);
}

void sub_10014CBA0(id *a1, void *a2, void *a3)
{
  uint64_t v5;
  NSString *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  id v12;
  id v13;
  void **v14;
  int v15;
  int v16;
  void (*v17)(NSObject *, char, id);
  void *v18;
  id v19;
  id v20;
  id v21;
  uint8_t v22[7];
  os_log_type_t v23;
  os_log_t v24;
  uint8_t v25[7];
  os_log_type_t v26;
  os_log_t oslog;
  int v28;
  char v29;
  id v30;
  char v31;
  id v32;
  os_log_type_t v33;
  id v34[2];
  id v35;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v35 = 0;
  objc_storeStrong(&v35, a3);
  v34[1] = a1;
  if (v35)
  {
    v34[0] = (id)_BYLoggingFacility(v5);
    v33 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v34[0], OS_LOG_TYPE_ERROR))
    {
      v31 = 0;
      v29 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v6 = (NSString *)v35;
      }
      else if (v35)
      {
        v32 = objc_msgSend(v35, "domain");
        v31 = 1;
        v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v32, objc_msgSend(v35, "code"));
        v30 = v6;
        v29 = 1;
      }
      else
      {
        v6 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v6);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v34[0], v33, "Authentication failed: %{public}@", buf, 0xCu);
      if ((v29 & 1) != 0)

      if ((v31 & 1) != 0)
    }
    objc_storeStrong(v34, 0);
    (*((void (**)(void))a1[6] + 2))();
    v28 = 1;
  }
  else
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(objc_msgSend(a1[4], "markSignInStartedAfterAuthenticationCompleted"));
    v26 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v7 = oslog;
      v8 = v26;
      sub_100038C3C(v25);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Authentication succeeded!", v25, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    v24 = (os_log_t)(id)_BYLoggingFacility(v9);
    v23 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      v10 = v24;
      v11 = v23;
      sub_100038C3C(v22);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Beginning sign-in for iCloud account...", v22, 2u);
    }
    objc_storeStrong((id *)&v24, 0);
    v12 = objc_msgSend(a1[5], "signInTask");
    v13 = location[0];
    v14 = _NSConcreteStackBlock;
    v15 = -1073741824;
    v16 = 0;
    v17 = sub_10014CF50;
    v18 = &unk_1002836B0;
    v19 = a1[4];
    v20 = location[0];
    v21 = a1[6];
    objc_msgSend(v12, "signInToAllServicesWithAuthenticationResults:completion:", v13, &v14);

    objc_storeStrong(&v21, 0);
    objc_storeStrong(&v20, 0);
    objc_storeStrong(&v19, 0);
    v28 = 0;
  }
  objc_storeStrong(&v35, 0);
  objc_storeStrong(location, 0);
}

void sub_10014CF50(NSObject *a1, char a2, id obj)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  id v7;
  NSString *v8;
  char v9;
  NSString *v10;
  char v11;
  id v12;
  os_log_t v13;
  uint8_t buf[7];
  os_log_type_t v15;
  os_log_t oslog[2];
  id location;
  char v18;
  NSObject *v19;
  uint8_t v20[24];

  v19 = a1;
  v18 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if ((v18 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v15 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v5 = oslog[0];
      v6 = v15;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Sign-in succeeded!", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    -[objc_class markSignInCompleted](a1[4].isa, "markSignInCompleted");
    v7 = +[BFFAppleAccountInfo primaryAccountInfo](BFFAppleAccountInfo, "primaryAccountInfo");
    objc_msgSend(v7, "updateWithAuthenticationResults:", a1[5].isa);

  }
  else
  {
    v13 = (os_log_t)(id)_BYLoggingFacility(v4);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      v11 = 0;
      v9 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v8 = (NSString *)location;
      }
      else if (location)
      {
        v12 = objc_msgSend(location, "domain");
        v11 = 1;
        v8 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v12, objc_msgSend(location, "code"));
        v10 = v8;
        v9 = 1;
      }
      else
      {
        v8 = 0;
      }
      sub_100039500((uint64_t)v20, (uint64_t)v8);
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Sign-in failed: %{public}@", v20, 0xCu);
      if ((v9 & 1) != 0)

      if ((v11 & 1) != 0)
    }
    objc_storeStrong((id *)&v13, 0);
  }
  (*((void (**)(void))a1[6].isa + 2))();
  objc_storeStrong(&location, 0);
}

void sub_10014D4E4(NSObject *a1, char a2, id obj)
{
  uint64_t v4;
  NSString *v5;
  Class isa;
  Class v7;
  id v8;
  char v9;
  NSString *v10;
  char v11;
  id v12;
  os_log_t oslog[2];
  id location;
  char v15;
  NSObject *v16;
  uint8_t buf[24];

  v16 = a1;
  v15 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if ((v15 & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v11 = 0;
      v9 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v5 = (NSString *)location;
      }
      else if (location)
      {
        v12 = objc_msgSend(location, "domain");
        v11 = 1;
        v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v12, objc_msgSend(location, "code"));
        v10 = v5;
        v9 = 1;
      }
      else
      {
        v5 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Unable to save account: %{public}@", buf, 0xCu);
      if ((v9 & 1) != 0)

      if ((v11 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  isa = a1[6].isa;
  v7 = a1[4].isa;
  v8 = -[objc_class companionDevice](a1[5].isa, "companionDevice");
  (*((void (**)(Class, Class, id, id))isa + 2))(isa, v7, v8, location);

  objc_storeStrong(&location, 0);
}

void sub_10014D8C4(uint64_t a1, void *a2, void *a3)
{
  id v5;
  BOOL v6;
  id v7;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v7 = 0;
  objc_storeStrong(&v7, a3);
  v5 = objc_msgSend(v7, "domain");
  v6 = 0;
  if ((objc_msgSend(v5, "isEqualToString:", AKAppleIDAuthenticationErrorDomain) & 1) != 0)
    v6 = objc_msgSend(v7, "code") == (id)-7006;

  if (v6)
    objc_msgSend(*(id *)(a1 + 32), "_authenticateWithUsername:companionDevice:anisetteDataProvider:completion:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  else
    (*(void (**)(void))(*(_QWORD *)(a1 + 64) + 16))();
  objc_storeStrong(&v7, 0);
  objc_storeStrong(location, 0);
}

void sub_10014E7A0(id a1, NSError *a2)
{
  uint64_t v3;
  os_log_t oslog[2];
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_100038C28((uint64_t)buf, (uint64_t)location[0]);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Failed to get secure app assertion: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_10014EA20(id *a1)
{
  id v2;
  NSObject *v3;
  void *v4;
  void **v5;
  int v6;
  int v7;
  void (*v8)(id *);
  void *v9;
  id v10;
  id v11[3];

  v11[2] = a1;
  v11[1] = a1;
  v2 = objc_msgSend(a1[4], "connectionState");
  if (v2 != objc_msgSend(a1[5], "connectionState"))
  {
    v3 = objc_msgSend(a1[5], "disconnectionQueue");
    dispatch_suspend(v3);

    objc_msgSend(a1[5], "setConnectionState:", objc_msgSend(a1[4], "connectionState"));
    v4 = &_dispatch_main_q;
    v5 = _NSConcreteStackBlock;
    v6 = -1073741824;
    v7 = 0;
    v8 = sub_10014EB50;
    v9 = &unk_100280D00;
    v10 = a1[4];
    v11[0] = a1[5];
    dispatch_sync((dispatch_queue_t)v4, &v5);

    objc_storeStrong(v11, 0);
    objc_storeStrong(&v10, 0);
  }
}

void sub_10014EB50(id *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  BuddyMigrationLockscreenDisconnectController *v9;
  id v10;
  id v11;
  void **v12;
  int v13;
  int v14;
  void (*v15)(uint64_t);
  void *v16;
  id v17;
  void **v18;
  int v19;
  int v20;
  void (*v21)(uint64_t);
  void *v22;
  id v23[3];

  v23[2] = a1;
  v23[1] = a1;
  v2 = objc_msgSend(a1[4], "connectionState");
  if (!v2)
    goto LABEL_8;
  if (v2 != (id)1)
  {
    if (v2 != (id)2)
      return;
LABEL_8:
    v9 = -[BuddyMigrationBaseDisconnectController initWithConnectionType:]([BuddyMigrationLockscreenDisconnectController alloc], "initWithConnectionType:", objc_msgSend(a1[4], "connectionType"));
    objc_msgSend(a1[5], "setDisconnectController:", v9);

    v10 = objc_msgSend(a1[5], "navigationController");
    v11 = objc_msgSend(a1[5], "disconnectController");
    v12 = _NSConcreteStackBlock;
    v13 = -1073741824;
    v14 = 0;
    v15 = sub_10014EE0C;
    v16 = &unk_100280730;
    v17 = a1[5];
    objc_msgSend(v10, "pushViewController:completion:", v11, &v12);

    objc_storeStrong(&v17, 0);
    return;
  }
  v3 = objc_msgSend(a1[5], "navigationController");
  v4 = objc_msgSend(v3, "topViewController");
  v5 = objc_msgSend(a1[5], "disconnectController");

  if (v4 == v5)
  {
    objc_msgSend(a1[5], "setDisconnectController:", 0);
    v6 = objc_msgSend(a1[5], "navigationController");
    v7 = objc_msgSend(a1[5], "progressController");
    v18 = _NSConcreteStackBlock;
    v19 = -1073741824;
    v20 = 0;
    v21 = sub_10014EDC0;
    v22 = &unk_100280730;
    v23[0] = a1[5];
    objc_msgSend(v6, "popToViewController:completion:", v7, &v18);

    objc_storeStrong(v23, 0);
  }
  else
  {
    v8 = objc_msgSend(a1[5], "disconnectionQueue");
    dispatch_resume(v8);

  }
}

void sub_10014EDC0(uint64_t a1)
{
  NSObject *v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "disconnectionQueue", a1, a1);
  dispatch_resume(v1);

}

void sub_10014EE0C(uint64_t a1)
{
  NSObject *v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "disconnectionQueue", a1, a1);
  dispatch_resume(v1);

}

void sub_10014FC98(id *a1, void *a2)
{
  id v3;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(a1[4], "delegate");
  objc_msgSend(v3, "presentWiFiPaneForFlowItem:", a1[4]);

  objc_storeStrong(location, 0);
}

void sub_100150414(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "_beginInstall");
  objc_storeStrong(location, 0);
}

void sub_100150460(id a1, UIAlertAction *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_storeStrong(location, 0);
}

void sub_1001504A4(id *a1, void *a2)
{
  id v3;
  id v4;
  void **v5;
  int v6;
  int v7;
  id (*v8)(uint64_t);
  void *v9;
  id v10[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = a1;
  objc_msgSend(a1[4], "setAutoInstallTimeRemaining:", (char *)objc_msgSend(a1[4], "autoInstallTimeRemaining") - 1);
  if ((uint64_t)objc_msgSend(a1[4], "autoInstallTimeRemaining") <= 0)
  {
    objc_msgSend(location[0], "invalidate");
    v4 = a1[5];
    v5 = _NSConcreteStackBlock;
    v6 = -1073741824;
    v7 = 0;
    v8 = sub_1001505CC;
    v9 = &unk_100280730;
    v10[0] = a1[4];
    objc_msgSend(v4, "dismissViewControllerAnimated:completion:", 1, &v5);
    objc_storeStrong(v10, 0);
  }
  else
  {
    v3 = objc_msgSend(a1[4], "_autoInstallAlertMessageForTimeRemaining:", objc_msgSend(a1[4], "autoInstallTimeRemaining"));
    objc_msgSend(a1[5], "setMessage:", v3);

  }
  objc_storeStrong(location, 0);
}

id sub_1001505CC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_beginInstall", a1, a1);
}

void sub_1001508DC(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController", a1, a1);
  objc_msgSend(v1, "setupFinished");

}

void sub_100150AD0(uint64_t a1)
{
  id v2;
  char v3;
  id v4;
  char v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  void *v9;
  void **v10;
  int v11;
  int v12;
  void (*v13)(uint64_t);
  void *v14;
  id v15;
  id v16;
  char v17;
  void **v18;
  int v19;
  int v20;
  void (*v21)(uint64_t, char, id);
  void *v22;
  id v23;
  id v24;
  char v25;
  char v26;
  id v27;
  char v28;
  char v29;
  uint8_t buf[15];
  os_log_type_t v31;
  id location;
  char v33;
  uint64_t v34;
  uint64_t v35;

  v35 = a1;
  v34 = a1;
  v33 = +[BuddyMandatoryUpdateUtilities isUpdateRequired](BuddyMandatoryUpdateUtilities, "isUpdateRequired");
  v2 = +[BuddyCloudConfigManager sharedManager](BuddyCloudConfigManager, "sharedManager");
  v3 = 0;
  if ((objc_msgSend(v2, "hasCloudConfiguration") & 1) != 0)
    v3 = v33 ^ 1;

  if ((v3 & 1) != 0)
    goto LABEL_4;
  v4 = objc_msgSend(*(id *)(a1 + 32), "runState");
  v5 = 0;
  if ((objc_msgSend(v4, "hasCompletedInitialRun") & 1) != 0)
    v5 = v33 ^ 1;

  if ((v5 & 1) != 0)
  {
LABEL_4:
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    location = (id)_BYLoggingFacility(v6);
    v31 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_DEFAULT))
    {
      v7 = location;
      v8 = v31;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Checking for mandatory update...", buf, 2u);
    }
    objc_storeStrong(&location, 0);
    v29 = +[BuddyMandatoryUpdateUtilities hasInformation](BuddyMandatoryUpdateUtilities, "hasInformation");
    v28 = !+[BuddyMandatoryUpdateUtilities isUpdateRequired](BuddyMandatoryUpdateUtilities, "isUpdateRequired");
    v18 = _NSConcreteStackBlock;
    v19 = -1073741824;
    v20 = 0;
    v21 = sub_100150DC8;
    v22 = &unk_1002837E0;
    v25 = v33 & 1;
    v23 = *(id *)(a1 + 32);
    v24 = *(id *)(a1 + 40);
    v26 = v29 & 1;
    v27 = objc_retainBlock(&v18);
    v9 = &_dispatch_main_q;
    v10 = _NSConcreteStackBlock;
    v11 = -1073741824;
    v12 = 0;
    v13 = sub_1001510B0;
    v14 = &unk_100280EB8;
    v15 = *(id *)(a1 + 32);
    v16 = v27;
    v17 = v28 & 1;
    dispatch_async((dispatch_queue_t)v9, &v10);

    objc_storeStrong(&v16, 0);
    objc_storeStrong(&v15, 0);
    objc_storeStrong(&v27, 0);
    objc_storeStrong(&v24, 0);
    objc_storeStrong(&v23, 0);
  }
}

void sub_100150DC8(uint64_t a1, char a2, id obj)
{
  uint64_t v4;
  NSObject *v5;
  NSObject *v6;
  os_log_type_t v7;
  NSObject *v8;
  void **v9;
  int v10;
  int v11;
  void (*v12)(uint64_t);
  void *v13;
  id v14;
  uint8_t buf[15];
  os_log_type_t v16;
  os_log_t oslog;
  void **block;
  int v19;
  int v20;
  void (*v21)(uint64_t);
  void *v22;
  id v23[2];
  id location;
  char v25;
  uint64_t v26;

  v26 = a1;
  v25 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v23[1] = (id)a1;
  if ((v25 & 1) != 0)
  {
    if ((*(_BYTE *)(a1 + 48) & 1) != 0)
    {
      v5 = dispatch_get_global_queue(25, 0);
      block = _NSConcreteStackBlock;
      v19 = -1073741824;
      v20 = 0;
      v21 = sub_100151018;
      v22 = &unk_100280730;
      v23[0] = *(id *)(a1 + 32);
      dispatch_async(v5, &block);

      objc_storeStrong(v23, 0);
    }
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else if ((*(_BYTE *)(a1 + 48) & 1) != 0 && location)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v4);
    v16 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v6 = oslog;
      v7 = v16;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Activation has indicated an update is required and we can't successfully scan for an update", buf, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    v8 = dispatch_get_global_queue(25, 0);
    v9 = _NSConcreteStackBlock;
    v10 = -1073741824;
    v11 = 0;
    v12 = sub_100151064;
    v13 = &unk_100280730;
    v14 = *(id *)(a1 + 32);
    dispatch_async(v8, &v9);

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    objc_storeStrong(&v14, 0);
  }
  else
  {
    if ((v25 & 1) == 0 && (*(_BYTE *)(a1 + 49) & 1) != 0)
      +[BuddyMandatoryUpdateUtilities removeInformation](BuddyMandatoryUpdateUtilities, "removeInformation");
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  objc_storeStrong(&location, 0);
}

void sub_100151018(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController", a1, a1);
  objc_msgSend(v1, "setupFinished");

}

void sub_100151064(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController", a1, a1);
  objc_msgSend(v1, "setupFinished");

}

void sub_1001510B0(uint64_t a1)
{
  id v2;
  void **v3;
  int v4;
  int v5;
  void (*v6)(uint64_t, void *, void *, void *);
  void *v7;
  id v8;
  id v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v12 = a1;
  v11 = a1;
  v2 = objc_msgSend(*(id *)(a1 + 32), "softwareUpdateCache");
  v3 = _NSConcreteStackBlock;
  v4 = -1073741824;
  v5 = 0;
  v6 = sub_1001511A0;
  v7 = &unk_100283808;
  v8 = *(id *)(a1 + 32);
  v9 = *(id *)(a1 + 40);
  v10 = *(_BYTE *)(a1 + 48) & 1;
  objc_msgSend(v2, "scanUsingCache:allowBootstrap:retry:withCompletion:", 1, 1, 1, &v3);

  objc_storeStrong(&v9, 0);
  objc_storeStrong(&v8, 0);
}

void sub_1001511A0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  char v8;
  id v9;
  unsigned __int8 v10;
  char v11;
  id v12;
  NSNumber *v13;
  NSNumber *v14;
  NSNumber *v15;
  NSNumber *v16;
  NSDictionary *v17;
  uint64_t v18;
  NSString *v19;
  NSObject *v20;
  os_log_type_t v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  id v25;
  NSObject *v26;
  os_log_type_t v27;
  id v28;
  unsigned __int8 v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  id v33;
  NSObject *v34;
  os_log_type_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t v38[7];
  os_log_type_t v39;
  os_log_t v40;
  uint8_t v41[7];
  os_log_type_t v42;
  os_log_t v43;
  uint8_t v44[7];
  os_log_type_t v45;
  os_log_t v46;
  uint8_t v47[7];
  os_log_type_t v48;
  os_log_t v49;
  uint8_t v50[7];
  os_log_type_t v51;
  os_log_t v52;
  uint8_t v53[7];
  os_log_type_t v54;
  os_log_t v55;
  int v56;
  char v57;
  id v58;
  char v59;
  id v60;
  os_log_type_t v61;
  os_log_t oslog;
  char v63;
  char v64;
  char v65;
  id v66;
  char v67;
  uint64_t v68;
  id v69;
  id v70;
  id location[2];
  uint8_t buf[24];
  _QWORD v73[4];
  _QWORD v74[4];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v70 = 0;
  objc_storeStrong(&v70, a3);
  v69 = 0;
  objc_storeStrong(&v69, a4);
  v68 = a1;
  v67 = 0;
  v7 = objc_msgSend(*(id *)(a1 + 32), "networkProvider");
  v65 = 0;
  v8 = 0;
  if ((objc_msgSend(v7, "networkReachable") & 1) != 0)
  {
    v66 = objc_msgSend(*(id *)(a1 + 32), "networkProvider");
    v65 = 1;
    v8 = objc_msgSend(v66, "connectedOverWiFi") ^ 1;
  }
  if ((v65 & 1) != 0)

  v67 = v8 & 1;
  v64 = 0;
  v9 = objc_msgSend(*(id *)(a1 + 32), "networkProvider");
  v10 = objc_msgSend(v9, "connectedOverWiFiAndNetworkReachable");

  v64 = v10 & 1;
  v63 = 0;
  v11 = 0;
  if ((v10 & 1) == 0)
    v11 = v67 ^ 1;
  v63 = v11 & 1;
  v12 = objc_msgSend(*(id *)(a1 + 32), "analyticsManager");
  v73[0] = CFSTR("successfulScan");
  v13 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", v69 == 0);
  v74[0] = v13;
  v73[1] = CFSTR("cellular");
  v14 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v67 & 1);
  v74[1] = v14;
  v73[2] = CFSTR("wifi");
  v15 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v64 & 1);
  v74[2] = v15;
  v73[3] = CFSTR("bootstrap");
  v16 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v63 & 1);
  v74[3] = v16;
  v17 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v74, v73, 4);
  objc_msgSend(v12, "addEvent:withPayload:persist:", CFSTR("com.apple.setupassistant.ios.activation.mandatoryUpdate"), v17, 1);

  if (v69)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v18);
    v61 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      v59 = 0;
      v57 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v19 = (NSString *)v69;
      }
      else if (v69)
      {
        v60 = objc_msgSend(v69, "domain");
        v59 = 1;
        v19 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v60, objc_msgSend(v69, "code"));
        v58 = v19;
        v57 = 1;
      }
      else
      {
        v19 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v19);
      _os_log_error_impl((void *)&_mh_execute_header, oslog, v61, "Unable to scan for software updates: %{public}@", buf, 0xCu);
      if ((v57 & 1) != 0)

      if ((v59 & 1) != 0)
    }
    objc_storeStrong((id *)&oslog, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v56 = 1;
  }
  else if (location[0])
  {
    v22 = objc_msgSend(location[0], "mandatoryUpdateEligible");
    if ((v22 & 1) != 0)
    {
      if (+[BuddyMandatoryUpdateUtilities deviceIsFromFactory](BuddyMandatoryUpdateUtilities, "deviceIsFromFactory")|| (v25 = objc_msgSend(location[0], "mandatoryUpdateRestrictedToOutOfTheBox"), (v25 & 1) == 0))
      {
        if ((objc_msgSend(location[0], "mandatoryUpdateOptional") & 1) != 0
          && (*(_BYTE *)(a1 + 48) & 1) != 0)
        {
          v28 = +[BuddyCloudConfigManager sharedManager](BuddyCloudConfigManager, "sharedManager");
          v29 = objc_msgSend(v28, "hasCloudConfiguration");

          if ((v29 & 1) != 0)
          {
            v46 = (os_log_t)(id)_BYLoggingFacility(v30);
            v45 = OS_LOG_TYPE_DEFAULT;
            if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
            {
              v31 = v46;
              v32 = v45;
              sub_100038C3C(v44);
              _os_log_impl((void *)&_mh_execute_header, v31, v32, "Found an optional update and the device has a cloud configuration", v44, 2u);
            }
            objc_storeStrong((id *)&v46, 0);
            (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
            v56 = 1;
          }
          else
          {
            v33 = objc_msgSend(*(id *)(a1 + 32), "_isDEP");
            if ((v33 & 1) != 0)
            {
              v43 = (os_log_t)(id)_BYLoggingFacility(v33);
              v42 = OS_LOG_TYPE_DEFAULT;
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
              {
                v34 = v43;
                v35 = v42;
                sub_100038C3C(v41);
                _os_log_impl((void *)&_mh_execute_header, v34, v35, "Found an optional update and the device is enrolled in DEP", v41, 2u);
              }
              objc_storeStrong((id *)&v43, 0);
              (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
              v56 = 1;
            }
            else
            {
              v40 = (os_log_t)(id)_BYLoggingFacility(v33);
              v39 = OS_LOG_TYPE_DEFAULT;
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                v36 = v40;
                v37 = v39;
                sub_100038C3C(v38);
                _os_log_impl((void *)&_mh_execute_header, v36, v37, "Found an optional update", v38, 2u);
              }
              objc_storeStrong((id *)&v40, 0);
              objc_msgSend(*(id *)(a1 + 32), "setUpdate:", location[0]);
              (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
              v56 = 1;
            }
          }
        }
        else
        {
          objc_msgSend(*(id *)(a1 + 32), "setUpdate:", location[0]);
          (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
          v56 = 0;
        }
      }
      else
      {
        v49 = (os_log_t)(id)_BYLoggingFacility(v25);
        v48 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
        {
          v26 = v49;
          v27 = v48;
          sub_100038C3C(v47);
          _os_log_impl((void *)&_mh_execute_header, v26, v27, "Found an update (out-of-the-box), but this device has been erased", v47, 2u);
        }
        objc_storeStrong((id *)&v49, 0);
        (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
        v56 = 1;
      }
    }
    else
    {
      v52 = (os_log_t)(id)_BYLoggingFacility(v22);
      v51 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        v23 = v52;
        v24 = v51;
        sub_100038C3C(v50);
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Found an update, but it's not eligible", v50, 2u);
      }
      objc_storeStrong((id *)&v52, 0);
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
      v56 = 1;
    }
  }
  else
  {
    v55 = (os_log_t)(id)_BYLoggingFacility(v18);
    v54 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
    {
      v20 = v55;
      v21 = v54;
      sub_100038C3C(v53);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "No update found", v53, 2u);
    }
    objc_storeStrong((id *)&v55, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v56 = 1;
  }
  objc_storeStrong(&v69, 0);
  objc_storeStrong(&v70, 0);
  objc_storeStrong(location, 0);
}

id sub_1001533CC(uint64_t a1)
{
  objc_msgSend(*(id *)(a1 + 32), "resetPlayer", a1, a1);
  return objc_msgSend(*(id *)(a1 + 32), "setRetryAttempts:", (char *)objc_msgSend(*(id *)(a1 + 32), "retryAttempts") + 1);
}

void sub_100153B9C(id *a1)
{
  id v2;
  void **v3;
  int v4;
  int v5;
  id (*v6)(uint64_t);
  void *v7;
  id v8[3];

  v8[2] = a1;
  v8[1] = a1;
  v2 = objc_msgSend(a1[4], "existingSettings");
  v3 = _NSConcreteStackBlock;
  v4 = -1073741824;
  v5 = 0;
  v6 = sub_100153C50;
  v7 = &unk_100283830;
  v8[0] = a1[5];
  objc_msgSend(v2, "setBackupMetadataWithProviderBlock:", &v3);

  objc_storeStrong(v8, 0);
}

id sub_100153C50(uint64_t a1)
{
  id v2;
  uint64_t v3;
  id v4;
  os_log_t v6;
  id location;
  os_log_type_t v8;
  os_log_t oslog[3];
  uint8_t v10[16];
  uint8_t buf[24];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v8 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    sub_100038C28((uint64_t)buf, *(_QWORD *)(a1 + 32));
    _os_log_impl((void *)&_mh_execute_header, oslog[0], v8, "Fetching metadata for backup: %@", buf, 0xCu);
  }
  objc_storeStrong((id *)oslog, 0);
  v2 = objc_msgSend(*(id *)(a1 + 32), "backupUDID");
  location = (id)BYMetadataFromBackup(v2, objc_msgSend(*(id *)(a1 + 32), "snapshotID"));

  v6 = (os_log_t)(id)_BYLoggingFacility(v3);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_100038C28((uint64_t)v10, (uint64_t)location);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Chosen backup has metadata: %@", v10, 0xCu);
  }
  objc_storeStrong((id *)&v6, 0);
  v4 = location;
  objc_storeStrong(&location, 0);
  return v4;
}

void sub_100154314(id *a1, uint64_t a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  unsigned __int8 v7;
  id v8;
  id v9;
  NSNumber *v10;
  NSDictionary *v11;
  id v12;
  void **v13;
  int v14;
  int v15;
  void (*v16)(uint64_t, void *);
  void *v17;
  id v18;
  id v19;
  id v20;
  int v21;
  id location;
  id v23;
  unsigned __int8 v24;
  id v25[2];
  uint64_t v26;
  id *v27;
  _QWORD v28[2];
  _QWORD v29[2];

  v27 = a1;
  v26 = a2;
  v25[1] = a1;
  v3 = objc_msgSend(a1[4], "proximitySetupController");
  v25[0] = objc_msgSend(v3, "sharingMessageSession");

  v24 = 0;
  v4 = objc_msgSend(a1[4], "proximitySetupController");
  v5 = objc_msgSend(v4, "information");
  v6 = objc_msgSend(v5, "hasTransferrableTelephonyPlan");
  v7 = objc_msgSend(v6, "BOOLValue");

  v24 = v7;
  v8 = sub_100154620();
  v28[0] = v8;
  v29[0] = &off_100290F70;
  v9 = sub_100154718();
  v28[1] = v9;
  v10 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v7 & 1);
  v29[1] = v10;
  v11 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v29, v28, 2);
  v23 = +[NSMutableDictionary dictionaryWithDictionary:](NSMutableDictionary, "dictionaryWithDictionary:", v11);

  if (v26 == 1 && v25[0])
  {
    v12 = sub_100154810();
    objc_msgSend(v23, "setObject:forKeyedSubscript:", v25[0], v12);

  }
  location = objc_msgSend(sub_100154908(), "flowWithOptions:", v23);
  if (location)
  {
    v13 = _NSConcreteStackBlock;
    v14 = -1073741824;
    v15 = 0;
    v16 = sub_1001549F4;
    v17 = &unk_100283858;
    v18 = a1[4];
    v19 = location;
    v20 = a1[5];
    objc_msgSend(location, "firstViewController:", &v13);
    objc_storeStrong(&v20, 0);
    objc_storeStrong(&v19, 0);
    objc_storeStrong(&v18, 0);
    v21 = 0;
  }
  else
  {
    (*((void (**)(void))a1[5] + 2))();
    v21 = 1;
  }
  objc_storeStrong(&location, 0);
  objc_storeStrong(&v23, 0);
  objc_storeStrong(v25, 0);
}

id sub_100154620()
{
  NSAssertionHandler *v0;
  NSString *v1;
  id *v3;

  v3 = (id *)sub_100155030();
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *getTSUserInfoFlowTypeKey(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddySIMTransferController.m"), 27, CFSTR("%s"), dlerror());

    __break(1u);
  }
  return *v3;
}

id sub_100154718()
{
  NSAssertionHandler *v0;
  NSString *v1;
  id *v3;

  v3 = (id *)sub_1001553CC();
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *getTSUserInfoHasTransferablePlanKey(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddySIMTransferController.m"), 29, CFSTR("%s"), dlerror());

    __break(1u);
  }
  return *v3;
}

id sub_100154810()
{
  NSAssertionHandler *v0;
  NSString *v1;
  id *v3;

  v3 = (id *)sub_100155518();
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *getTSUserInfoMessageSessionKey(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddySIMTransferController.m"), 28, CFSTR("%s"), dlerror());

    __break(1u);
  }
  return *v3;
}

id sub_100154908()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEB60;
  v13 = qword_1002EEB60;
  if (!qword_1002EEB60)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100155664;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100155664(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_1001549F4(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  NSObject *v5;
  void **block;
  int v7;
  int v8;
  id (*v9)(uint64_t);
  void *v10;
  id v11;
  BOOL v12;
  uint64_t v13;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v13 = a1;
  v12 = location[0] != 0;
  if (location[0])
  {
    objc_msgSend(*(id *)(a1 + 32), "setSetupFlow:", *(_QWORD *)(a1 + 40));
    v3 = *(void **)(a1 + 32);
    v4 = objc_msgSend(v3, "setupFlow");
    objc_msgSend(v4, "setDelegate:", v3);

  }
  else
  {
    v5 = dispatch_get_global_queue(0, 0);
    block = _NSConcreteStackBlock;
    v7 = -1073741824;
    v8 = 0;
    v9 = sub_100154B3C;
    v10 = &unk_100280730;
    v11 = *(id *)(a1 + 32);
    dispatch_async(v5, &block);

    objc_storeStrong(&v11, 0);
  }
  if (*(_QWORD *)(a1 + 48))
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  objc_storeStrong(location, 0);
}

id sub_100154B3C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_endProximityIfApplicable", a1, a1);
}

void sub_100154C10(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  BOOL v5;
  id v6;
  id v7;
  unsigned __int8 v8;
  id v9;
  BOOL v10;

  v2 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
  v3 = objc_msgSend(v2, "information");
  v4 = objc_msgSend(v3, "appleID");
  v5 = v4 != 0;

  v10 = v5;
  v6 = objc_msgSend(*(id *)(a1 + 32), "miscState");
  v7 = objc_msgSend(v6, "migrationManager");
  v8 = objc_msgSend(v7, "willMigrate");

  if (!v10 && (v8 & 1) == 0)
  {
    v9 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
    objc_msgSend(v9, "setupFinished");

  }
}

uint64_t sub_100155030()
{
  uint64_t v0;
  void **v2;
  int v3;
  int v4;
  void *(*v5)(uint64_t);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 0x20000000;
  v12 = 32;
  v8 = qword_1002EEB40;
  v13 = qword_1002EEB40;
  if (!qword_1002EEB40)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100155114;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100155114((uint64_t)&v2);
  }
  v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_100155114(uint64_t a1)
{
  void *v2;
  void *result;

  v2 = (void *)sub_10015517C();
  result = dlsym(v2, "TSUserInfoFlowTypeKey");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1002EEB40 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_10015517C()
{
  NSAssertionHandler *v0;
  NSString *v1;
  uint64_t v3;
  void *v4;

  v4 = 0;
  v3 = sub_1001552AC((uint64_t)&v4);
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *SIMSetupSupportLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddySIMTransferController.m"), 25, CFSTR("%s"), v4);

    __break(1u);
  }
  if (v4)
    free(v4);
  return v3;
}

uint64_t sub_1001552AC(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEB48;
  v9 = qword_1002EEB48;
  if (!qword_1002EEB48)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_10015533C;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_10015533C((uint64_t)&v2);
  }
  return qword_1002EEB48;
}

uint64_t sub_10015533C(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/SIMSetupSupport.framework/SIMSetupSupport";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEB48 = result;
  return result;
}

uint64_t sub_1001553CC()
{
  uint64_t v0;
  void **v2;
  int v3;
  int v4;
  void *(*v5)(uint64_t);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 0x20000000;
  v12 = 32;
  v8 = qword_1002EEB50;
  v13 = qword_1002EEB50;
  if (!qword_1002EEB50)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001554B0;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001554B0((uint64_t)&v2);
  }
  v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_1001554B0(uint64_t a1)
{
  void *v2;
  void *result;

  v2 = (void *)sub_10015517C();
  result = dlsym(v2, "TSUserInfoHasTransferablePlanKey");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1002EEB50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_100155518()
{
  uint64_t v0;
  void **v2;
  int v3;
  int v4;
  void *(*v5)(uint64_t);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 0x20000000;
  v12 = 32;
  v8 = qword_1002EEB58;
  v13 = qword_1002EEB58;
  if (!qword_1002EEB58)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001555FC;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001555FC((uint64_t)&v2);
  }
  v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_1001555FC(uint64_t a1)
{
  void *v2;
  void *result;

  v2 = (void *)sub_10015517C();
  result = dlsym(v2, "TSUserInfoMessageSessionKey");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1002EEB58 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_100155664(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_10015517C();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("TSSIMSetupFlow");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getTSSIMSetupFlowClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddySIMTransferController.m"), 26, CFSTR("Unable to find class %s"), "TSSIMSetupFlow");

    __break(1u);
  }
  qword_1002EEB60 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

NSString *__cdecl sub_100155F5C(id a1, BOOL a2)
{
  if (a2)
    return (NSString *)CFSTR("YES");
  else
    return (NSString *)CFSTR("NO");
}

double sub_100155F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)&result = 138543874;
  *(_DWORD *)a1 = 138543874;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2114;
  *(_QWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 22) = 2114;
  *(_QWORD *)(a1 + 24) = a4;
  return result;
}

id sub_100156A7C()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEB68;
  v13 = qword_1002EEB68;
  if (!qword_1002EEB68)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001586FC;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001586FC(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_100156EF4(id *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  void *v6;
  void **v7;
  int v8;
  int v9;
  void (*v10)(uint64_t);
  void *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  void **v16;
  int v17;
  int v18;
  void (*v19)(uint64_t);
  void *v20;
  id v21;
  id v22;
  id v23;
  id location;
  id v25;
  id v26[3];

  v26[2] = a1;
  v26[1] = a1;
  v26[0] = objc_alloc_init((Class)BYBuddyDaemonGeneralClient);
  v2 = objc_msgSend(v26[0], "fetchAuthenticationContextForApplePay");
  v25 = objc_msgSend(v2, "externalizedContext");

  v16 = _NSConcreteStackBlock;
  v17 = -1073741824;
  v18 = 0;
  v19 = sub_100157188;
  v20 = &unk_100281168;
  v21 = v25;
  v22 = a1[4];
  v23 = a1[5];
  location = objc_retainBlock(&v16);
  v3 = objc_msgSend(sub_100157694(), "sharedInstance");
  v4 = objc_msgSend(a1[4], "existingSettings");
  v5 = objc_msgSend(v4, "walletData");
  objc_msgSend(v3, "setBackupMetadata:", v5);

  v6 = &_dispatch_main_q;
  v7 = _NSConcreteStackBlock;
  v8 = -1073741824;
  v9 = 0;
  v10 = sub_100157780;
  v11 = &unk_100283928;
  v12 = a1[4];
  v13 = v25;
  v14 = a1[5];
  v15 = location;
  dispatch_async((dispatch_queue_t)v6, &v7);

  objc_storeStrong(&v15, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(&v23, 0);
  objc_storeStrong(&v22, 0);
  objc_storeStrong(&v21, 0);
  objc_storeStrong(&v25, 0);
  objc_storeStrong(v26, 0);
}

void sub_100157188(uint64_t a1)
{
  id v2;
  id v3;
  void **v4;
  int v5;
  int v6;
  void (*v7)(uint64_t, char, id, uint64_t);
  void *v8;
  id v9;
  id v10;
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = objc_msgSend(objc_alloc((Class)sub_1001572C0()), "initWithSetupAssistant:", 1);
  objc_msgSend(location[0], "setExternalizedContext:", *(_QWORD *)(a1 + 32));
  objc_msgSend(location[0], "setDelegate:", *(_QWORD *)(a1 + 40));
  v2 = objc_msgSend(*(id *)(a1 + 40), "_createPaymentControllerWithContext:", location[0]);
  objc_msgSend(*(id *)(a1 + 40), "setPaymentController:", v2);

  v3 = objc_msgSend(*(id *)(a1 + 40), "paymentController");
  v4 = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_1001573AC;
  v8 = &unk_1002838D8;
  v9 = *(id *)(a1 + 40);
  v10 = *(id *)(a1 + 48);
  objc_msgSend(v3, "prepareForPresentationWithCompletion:", &v4);

  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

id sub_1001572C0()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEB78;
  v13 = qword_1002EEB78;
  if (!qword_1002EEB78)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100158A88;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100158A88(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_1001573AC(uint64_t a1, char a2, id obj, uint64_t a4)
{
  uint64_t v6;
  id v7;
  id v8;
  char v9;
  char v10;
  char v11;
  id v12;
  char v13;
  id v14;
  char v15;
  id v16;
  char v17;
  os_log_t oslog;
  int v19;
  uint64_t v20;
  uint64_t v21;
  id location;
  char v23;
  uint64_t v24;
  uint8_t buf[24];

  v24 = a1;
  v23 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v21 = a4;
  v20 = a1;
  if ((v23 & 1) != 0 && location)
  {
    objc_msgSend(*(id *)(a1 + 32), "setInitialViewController:", location);
    v7 = objc_msgSend(*(id *)(a1 + 32), "chronicle");
    objc_msgSend(v7, "recordFeatureShown:", 1);

    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v19 = 1;
  }
  else
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v6);
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_100157674((uint64_t)buf, v23 & 1, v21);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Skipping Apple Pay because it did not need to run (%d) and/or requirements were not met (%lu)", buf, 0x12u);
    }
    objc_storeStrong((id *)&oslog, 0);
    v8 = objc_msgSend(*(id *)(a1 + 32), "buddyPreferences");
    v9 = 0;
    if ((objc_msgSend(v8, "BOOLForKey:", CFSTR("Payment2Presented")) & 1) == 0)
      v9 = v23;

    if ((v9 & 1) != 0)
    {
      v17 = 1;
      v15 = 0;
      v10 = 0;
      if ((v21 & 2) != 0)
      {
        v16 = objc_msgSend(*(id *)(a1 + 32), "capabilities");
        v15 = 1;
        v10 = objc_msgSend(v16, "canShowPasscodeScreen") ^ 1;
      }
      if ((v15 & 1) != 0)

      if ((v10 & 1) != 0)
      {
        v17 = 0;
      }
      else
      {
        v13 = 0;
        v11 = 0;
        if ((v21 & 1) != 0)
        {
          v14 = objc_msgSend(*(id *)(a1 + 32), "capabilities");
          v13 = 1;
          v11 = objc_msgSend(v14, "canShowAppleIDScreen") ^ 1;
        }
        if ((v13 & 1) != 0)

        if ((v11 & 1) != 0)
          v17 = 0;
      }
      if ((v17 & 1) != 0)
      {
        v12 = objc_msgSend(*(id *)(a1 + 32), "flowSkipController");
        objc_msgSend(v12, "didSkipFlow:", BYFlowSkipIdentifierApplePay);

      }
    }
    if (*(_QWORD *)(a1 + 40))
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    v19 = 0;
  }
  objc_storeStrong(&location, 0);
}

double sub_100157674(uint64_t a1, int a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 67109376;
  *(_DWORD *)a1 = 67109376;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 2048;
  *(_QWORD *)(a1 + 10) = a3;
  return result;
}

id sub_100157694()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEB80;
  v13 = qword_1002EEB80;
  if (!qword_1002EEB80)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100158BC8;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100158BC8(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_100157780(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  void **v6;
  int v7;
  int v8;
  void (*v9)(id *, void *);
  void *v10;
  id v11;
  id v12;
  id location;
  id v14[3];

  v14[2] = (id)a1;
  v14[1] = (id)a1;
  v2 = objc_msgSend(*(id *)(a1 + 32), "miscState");
  v3 = objc_msgSend(v2, "walletProvisioningContext");

  if (v3)
  {
    v14[0] = objc_msgSend(objc_alloc((Class)sub_1001572C0()), "initWithSetupAssistant:", 1);
    objc_msgSend(v14[0], "setExternalizedContext:", *(_QWORD *)(a1 + 40));
    objc_msgSend(v14[0], "setDelegate:", *(_QWORD *)(a1 + 32));
    location = objc_msgSend(objc_alloc((Class)sub_100157924()), "initWithSetupAssistantContext:", v14[0]);
    v4 = objc_msgSend(*(id *)(a1 + 32), "miscState");
    v5 = objc_msgSend(v4, "walletProvisioningContext");
    v6 = _NSConcreteStackBlock;
    v7 = -1073741824;
    v8 = 0;
    v9 = sub_100157A10;
    v10 = &unk_100283900;
    v11 = *(id *)(a1 + 32);
    v12 = *(id *)(a1 + 48);
    objc_msgSend(location, "expressSetupFlowForSetupProvisioningContext:withCompletion:", v5, &v6);

    objc_storeStrong(&v12, 0);
    objc_storeStrong(&v11, 0);
    objc_storeStrong(&location, 0);
    objc_storeStrong(v14, 0);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
  }
}

id sub_100157924()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEB90;
  v13 = qword_1002EEB90;
  if (!qword_1002EEB90)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100158F54;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100158F54(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_100157A10(id *a1, void *a2)
{
  void *v3;
  void **v4;
  int v5;
  int v6;
  id (*v7);
  void *v8;
  id v9;
  id v10;
  id v11[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v11[1] = a1;
  v3 = &_dispatch_main_q;
  v4 = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_100157B28;
  v8 = &unk_100281168;
  v9 = a1[4];
  v10 = location[0];
  v11[0] = a1[5];
  dispatch_async((dispatch_queue_t)v3, &v4);

  objc_storeStrong(v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

id sub_100157B28(NSObject *a1)
{
  id result;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _WORD v6[3];
  os_log_type_t v7;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  result = -[objc_class setInitialViewController:](a1[4].isa, "setInitialViewController:", a1[5].isa);
  if (a1[6].isa)
  {
    if (a1[5].isa)
    {
      v3 = -[objc_class chronicle](a1[4].isa, "chronicle");
      objc_msgSend(v3, "recordFeatureShown:", 1);

    }
    else
    {
      oslog[0] = (os_log_t)(id)_BYLoggingFacility(result);
      v7 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
      {
        v4 = oslog[0];
        v5 = v7;
        sub_100038C3C(v6);
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Skipping Apple Pay because it did not return a view controller for the express flow", (uint8_t *)v6, 2u);
      }
      objc_storeStrong((id *)oslog, 0);
    }
    return (id)(*((uint64_t (**)(Class, BOOL))a1[6].isa + 2))(a1[6].isa, a1[5].isa != 0);
  }
  return result;
}

id sub_100157EB8()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEB98;
  v13 = qword_1002EEB98;
  if (!qword_1002EEB98)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100159094;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100159094(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_1001580F8(_QWORD *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  os_log_t oslog;
  int v7;
  _QWORD *v8;
  uint64_t v9;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v9 = a3;
  v8 = a1;
  if (location[0])
  {
    (*(void (**)(void))(a1[4] + 16))();
    v7 = 1;
  }
  else
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v5);
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000342B4((uint64_t)buf, v9);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "ExpressController did not need return a setupProvisioningContext; requirements were not met (%lu)",
        buf,
        0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    if (a1[4])
      (*(void (**)(void))(a1[4] + 16))();
    v7 = 0;
  }
  objc_storeStrong(location, 0);
}

void sub_1001586FC(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_10015883C();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("PKPaymentSetupAssistantController");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getPKPaymentSetupAssistantControllerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyPaymentController.m"), 53, CFSTR("Unable to find class %s"), "PKPaymentSetupAssistantController");

    __break(1u);
  }
  qword_1002EEB68 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_10015883C()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_100158968((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *PassKitUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyPaymentController.m"), 50, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_100158968(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEB70;
  v9 = qword_1002EEB70;
  if (!qword_1002EEB70)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001589F8;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1001589F8((uint64_t)&v2);
  }
  return qword_1002EEB70;
}

uint64_t sub_1001589F8(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/PassKitUI.framework/PassKitUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEB70 = result;
  return result;
}

void sub_100158A88(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_10015883C();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("PKSetupAssistantContext");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getPKSetupAssistantContextClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyPaymentController.m"), 51, CFSTR("Unable to find class %s"), "PKSetupAssistantContext");

    __break(1u);
  }
  qword_1002EEB78 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_100158BC8(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_100158D08();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("PKPassLibrary");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getPKPassLibraryClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyPaymentController.m"), 47, CFSTR("Unable to find class %s"), "PKPassLibrary");

    __break(1u);
  }
  qword_1002EEB80 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_100158D08()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_100158E34((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *PassKitCoreLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyPaymentController.m"), 46, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_100158E34(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEB88;
  v9 = qword_1002EEB88;
  if (!qword_1002EEB88)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100158EC4;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_100158EC4((uint64_t)&v2);
  }
  return qword_1002EEB88;
}

uint64_t sub_100158EC4(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/PassKitCore.framework/PassKitCore";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEB88 = result;
  return result;
}

void sub_100158F54(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_10015883C();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("PKPaymentSetupAssistantExpressController");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getPKPaymentSetupAssistantExpressControllerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyPaymentController.m"), 57, CFSTR("Unable to find class %s"), "PKPaymentSetupAssistantExpressController");

    __break(1u);
  }
  qword_1002EEB90 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_100159094(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_10015883C();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("PKPaymentVerificationMethodsViewController");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getPKPaymentVerificationMethodsViewControllerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyPaymentController.m"), 55, CFSTR("Unable to find class %s"), "PKPaymentVerificationMethodsViewController");

    __break(1u);
  }
  qword_1002EEB98 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_100159854(uint64_t a1, char a2)
{
  objc_msgSend(*(id *)(a1 + 32), "_setConnected:", a2 & 1);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1001599BC(id *a1, void *a2, void *a3, void *a4, void *a5, void *a6, char a7)
{
  id v13;
  id v14;
  id v15;
  id v16;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v16 = 0;
  objc_storeStrong(&v16, a3);
  v15 = 0;
  objc_storeStrong(&v15, a4);
  v14 = 0;
  objc_storeStrong(&v14, a5);
  v13 = 0;
  objc_storeStrong(&v13, a6);
  objc_msgSend(a1[4], "setHandshake:", location[0], a1);
  objc_msgSend(a1[4], "updateInformation:", v16);
  objc_msgSend(a1[4], "setHasAppliedSettings:", 1);
  objc_msgSend(a1[4], "setModel:", v14);
  objc_msgSend(a1[4], "setDeviceClass:", v13);
  objc_msgSend(a1[4], "_setConnected:", a7 & 1);
  objc_msgSend(a1[4], "_updatedMessageSession:", v15);
  objc_msgSend(a1[4], "_setSetupIntent");
  objc_msgSend(a1[4], "prepareForDependentSetup");
  objc_msgSend(a1[4], "setHasResumed:", 1);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(location, 0);
}

void sub_10015A558(id *a1)
{
  id v2;
  id v3;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_alloc_init((Class)SASProximityMigrationStartAction);
  v2 = objc_msgSend(a1[4], "session");
  v3 = objc_msgSend(v2, "sendAction:", location[0]);

  objc_storeStrong(location, 0);
}

uint64_t sub_10015ABE0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

id sub_10015AD64(uint64_t a1)
{
  id result;

  objc_msgSend(*(id *)(a1 + 32), "setupFinished", a1, a1);
  result = objc_msgSend(*(id *)(a1 + 32), "shouldEnableProximity");
  if ((result & 1) != 0)
    return objc_msgSend(*(id *)(a1 + 32), "beginAdvertisingProximitySetup");
  return result;
}

id *sub_10015B214(id *result, char a2)
{
  if ((a2 & 1) == 0)
    return (id *)objc_msgSend(result[4], "prepareForDependentSetup");
  return result;
}

double sub_10015C454(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 138412546;
  *(_DWORD *)a1 = 138412546;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2080;
  *(_QWORD *)(a1 + 14) = a3;
  return result;
}

void sub_10015C5E8(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "observers", a1, a1);
  objc_msgSend(v2, "addObject:", *(_QWORD *)(a1 + 40));

}

void sub_10015C728(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "observers", a1, a1);
  objc_msgSend(v2, "removeObject:", *(_QWORD *)(a1 + 40));

}

void sub_10015C824(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  unint64_t i;
  _QWORD v6[8];
  id v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[128];

  v9 = a1;
  v8 = a1;
  memset(v6, 0, sizeof(v6));
  v2 = objc_msgSend(*(id *)(a1 + 32), "observers");
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", v6, v10, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v6[2];
    do
    {
      for (i = 0; i < (unint64_t)v3; ++i)
      {
        if (*(_QWORD *)v6[2] != v4)
          objc_enumerationMutation(v2);
        v7 = *(id *)(v6[1] + 8 * i);
        objc_msgSend(v7, "connectionTerminated");
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", v6, v10, 16);
    }
    while (v3);
  }

}

void sub_10015D0D0(uint64_t a1)
{
  id v2;
  id v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "delegate", a1, a1);
  v3 = objc_msgSend(*(id *)(a1 + 32), "deviceClass");
  objc_msgSend(v2, "displayIncompatibleProximityPairingFromDeviceClass:", v3);

}

void sub_10015D140(uint64_t a1)
{
  NSBundle *v2;
  NSArray *v3;
  id v4;
  NSArray *v5;
  id v6;
  id v7;
  NSArray *v8;
  id v9;
  id v10;
  id v11;
  uint64_t v12;
  char v13;
  id v14;
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  v2 = +[NSBundle mainBundle](NSBundle, "mainBundle");
  v3 = -[NSBundle localizations](v2, "localizations");
  v4 = objc_msgSend(*(id *)(a1 + 32), "receivedLanguages");
  v5 = +[NSBundle preferredLocalizationsFromArray:forPreferences:](NSBundle, "preferredLocalizationsFromArray:forPreferences:", v3, v4);
  location[0] = -[NSArray firstObject](v5, "firstObject");

  v6 = objc_msgSend(*(id *)(a1 + 32), "buddyPreferences");
  v7 = objc_msgSend(v6, "objectForKey:", CFSTR("UserChoseLanguage"));

  if (v7)
  {
    v8 = +[NSLocale preferredLanguages](NSLocale, "preferredLanguages");
    v9 = -[NSArray firstObject](v8, "firstObject");
    v10 = location[0];
    location[0] = v9;

  }
  v11 = objc_msgSend(*(id *)(a1 + 32), "delegate");
  v12 = *(_QWORD *)(a1 + 40);
  v13 = *(_BYTE *)(a1 + 48);
  v14 = objc_msgSend(*(id *)(a1 + 32), "accessibilitySettings");
  objc_msgSend(v11, "displayProximityPinCode:language:visual:accessibilitySettings:", v12, location[0], v13 & 1, v14);

  objc_storeStrong(location, 0);
}

void sub_10015D42C(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "delegate", a1, a1);
  objc_msgSend(v1, "dismissProximityPinCode");

}

void sub_10015DBFC(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "delegate", a1, a1);
  objc_msgSend(v1, "displayUpdateRequiredToMigrate");

}

id sub_10015DC48(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "applySettings", a1, a1);
}

void sub_10015E120(id *a1)
{
  id v2;
  id v3;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  v2 = objc_msgSend(a1[4], "delegate");
  objc_msgSend(v2, "willPerformProximityHandshake");

  location[0] = objc_msgSend(a1[4], "performHandshake");
  if (location[0])
  {
    v3 = objc_msgSend(a1[4], "delegate");
    objc_msgSend(v3, "unableToApplyProximitySettings");

  }
  else
  {
    objc_msgSend(a1[4], "readyForInformation");
  }
  objc_storeStrong(location, 0);
}

void sub_10015E2B4(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  unint64_t i;
  _QWORD v6[8];
  id v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[128];

  v9 = a1;
  v8 = a1;
  memset(v6, 0, sizeof(v6));
  v2 = objc_msgSend(*(id *)(a1 + 32), "observers");
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", v6, v10, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v6[2];
    do
    {
      for (i = 0; i < (unint64_t)v3; ++i)
      {
        if (*(_QWORD *)v6[2] != v4)
          objc_enumerationMutation(v2);
        v7 = *(id *)(v6[1] + 8 * i);
        if ((objc_opt_respondsToSelector(v7, "receivedBackupAction:") & 1) != 0)
          objc_msgSend(v7, "receivedBackupAction:", *(_QWORD *)(a1 + 40));
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", v6, v10, 16);
    }
    while (v3);
  }

}

void sub_100160C84(uint64_t a1, void *a2, _BYTE *a3)
{
  BOOL v5;
  void *v6;
  NSBundle *v7;
  NSString *v8;
  id v9;
  id v10;
  NSString *v11;
  void *v12;
  id v13;
  char v14;
  id v15;
  _BYTE *v16;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v16 = a3;
  v14 = 0;
  v5 = 0;
  if ((*(_BYTE *)(a1 + 48) & 1) != 0)
  {
    v15 = objc_msgSend(location[0], "detailText");
    v14 = 1;
    v5 = objc_msgSend(v15, "length") != 0;
  }
  if ((v14 & 1) != 0)

  if (v5)
  {
    v6 = *(void **)(a1 + 32);
    v7 = +[NSBundle mainBundle](NSBundle, "mainBundle");
    v8 = -[NSBundle localizedStringForKey:value:table:](v7, "localizedStringForKey:value:table:", CFSTR("MULTILINGUAL_EXPRESS_KEYBOARD_WITH_SOFTWARE_LAYOUT"), &stru_100284738, CFSTR("Localizable"));
    v9 = objc_msgSend(location[0], "title");
    v10 = objc_msgSend(location[0], "detailText");
    v11 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v8, v9, v10);
    objc_msgSend(v6, "appendString:", v11);

  }
  else
  {
    v12 = *(void **)(a1 + 32);
    v13 = objc_msgSend(location[0], "title");
    objc_msgSend(v12, "appendString:", v13);

  }
  if (v16 != (char *)objc_msgSend(*(id *)(a1 + 40), "count") - 1)
    objc_msgSend(*(id *)(a1 + 32), "appendString:", CFSTR("\n"));
  objc_storeStrong(location, 0);
}

double sub_1001631FC(uint64_t a1, uint64_t a2, int a3, int a4)
{
  double result;

  *(_QWORD *)&result = 134218496;
  *(_DWORD *)a1 = 134218496;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 18) = 1024;
  *(_DWORD *)(a1 + 20) = a4;
  return result;
}

void sub_1001637F8(uint64_t a1, char a2, id obj)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  id v12;
  NSString *v13;
  uint64_t v14;
  int v15;
  int v16;
  id v17;
  os_log_t v18;
  char v19;
  id v20;
  char v21;
  id v22;
  os_log_type_t v23;
  os_log_t v24;
  uint8_t v25[15];
  os_log_type_t v26;
  os_log_t v27;
  id obja;
  id v29;
  id v30;
  uint8_t buf[15];
  os_log_type_t v32;
  os_log_t oslog;
  char v34;
  uint64_t v35;
  id location;
  char v37;
  uint64_t v38;
  uint8_t v39[48];
  uint8_t v40[24];

  v38 = a1;
  v37 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v35 = a1;
  v34 = 0;
  if ((v37 & 1) == 0)
  {
    if ((byte_1002EEBA0 & 1) != 0)
    {
      oslog = (os_log_t)(id)_BYLoggingFacility(v4);
      v32 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
      {
        v5 = oslog;
        v6 = v32;
        sub_100038C3C(buf);
        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Showing iCloud Analytics because re-opt was requested", buf, 2u);
      }
      objc_storeStrong((id *)&oslog, 0);
      v34 = 1;
    }
    else
    {
      v30 = 0;
      v7 = +[BuddyAccountTools sharedBuddyAccountTools](BuddyAccountTools, "sharedBuddyAccountTools");
      obja = 0;
      v8 = objc_msgSend(v7, "iCloudAnalyticsOptInError:", &obja);
      objc_storeStrong(&v30, obja);
      v29 = v8;

      if (v30)
      {
        v24 = (os_log_t)(id)_BYLoggingFacility(v9);
        v23 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          v12 = v29;
          v21 = 0;
          v19 = 0;
          if ((_BYIsInternalInstall() & 1) != 0)
          {
            v13 = (NSString *)v30;
          }
          else if (v30)
          {
            v22 = objc_msgSend(v30, "domain");
            v21 = 1;
            v13 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v22, objc_msgSend(v30, "code"));
            v20 = v13;
            v19 = 1;
          }
          else
          {
            v13 = 0;
          }
          sub_100163C6C((uint64_t)v40, (uint64_t)v12, (uint64_t)v13);
          _os_log_impl((void *)&_mh_execute_header, v24, v23, "Unable to read iCloud Analytics value from server, iCloudAnalyticsOptIn = %{public}@, error = %@", v40, 0x16u);
          if ((v19 & 1) != 0)

          if ((v21 & 1) != 0)
        }
        objc_storeStrong((id *)&v24, 0);
      }
      else if (!v29 || (v9 = objc_msgSend(v29, "integerValue"), v9 == (id)-1))
      {
        v27 = (os_log_t)(id)_BYLoggingFacility(v9);
        v26 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          v10 = v27;
          v11 = v26;
          sub_100038C3C(v25);
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Showing iCloud analytics because it's never been seen", v25, 2u);
        }
        objc_storeStrong((id *)&v27, 0);
        v34 = 1;
      }
      objc_storeStrong(&v29, 0);
      objc_storeStrong(&v30, 0);
    }
  }
  if ((v34 & 1) != 0)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) |= 1uLL;
  if (*(_QWORD *)(a1 + 40))
  {
    v18 = (os_log_t)(id)_BYLoggingFacility(v4);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      v14 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24);
      v15 = *(_BYTE *)(a1 + 56) & 1;
      v16 = *(_BYTE *)(a1 + 57) & 1;
      v17 = objc_msgSend(*(id *)(a1 + 32), "miscState");
      sub_100163C8C((uint64_t)v39, v14, v15, v16, objc_msgSend(v17, "launchedWithCombinedAnalyticsMismatch") & 1, *(_BYTE *)(a1 + 58) & 1);
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Diagnostics display mode = %ld, factors: Restricted = %d, AlreadyYes = %d, Mismatch = %d, AlreadyPresented = %d", v39, 0x24u);

    }
    objc_storeStrong((id *)&v18, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  objc_storeStrong(&location, 0);
}

double sub_100163C6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  double result;

  *(_QWORD *)&result = 138543618;
  *(_DWORD *)a1 = 138543618;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 2112;
  *(_QWORD *)(a1 + 14) = a3;
  return result;
}

double sub_100163C8C(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6)
{
  double result;

  *(_QWORD *)&result = 134219008;
  *(_DWORD *)a1 = 134219008;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 18) = 1024;
  *(_DWORD *)(a1 + 20) = a4;
  *(_WORD *)(a1 + 24) = 1024;
  *(_DWORD *)(a1 + 26) = a5;
  *(_WORD *)(a1 + 30) = 1024;
  *(_DWORD *)(a1 + 32) = a6;
  return result;
}

void sub_100164174(uint64_t a1, char a2, id obj)
{
  uint64_t v4;
  uint64_t v5;
  NSString *v6;
  char v7;
  NSString *v8;
  char v9;
  id v10;
  os_log_t v11;
  os_log_type_t v12;
  os_log_t oslog[2];
  id location;
  char v15;
  uint64_t v16;
  uint8_t v17[32];
  uint8_t buf[24];

  v16 = a1;
  v15 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = (os_log_t)a1;
  if ((v15 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v12 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_100038C28((uint64_t)buf, *(_QWORD *)(a1 + 32));
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v12, "Successfully wrote %@ to IdMS", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v11 = (os_log_t)(id)_BYLoggingFacility(v4);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v5 = *(_QWORD *)(a1 + 32);
      v9 = 0;
      v7 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v6 = (NSString *)location;
      }
      else if (location)
      {
        v10 = objc_msgSend(location, "domain");
        v9 = 1;
        v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v10, objc_msgSend(location, "code"));
        v8 = v6;
        v7 = 1;
      }
      else
      {
        v6 = 0;
      }
      sub_1000C3528((uint64_t)v17, v5, (uint64_t)v6);
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Failed to write %@ to IdMS, error: %{public}@", v17, 0x16u);
      if ((v7 & 1) != 0)

      if ((v9 & 1) != 0)
    }
    objc_storeStrong((id *)&v11, 0);
  }
  objc_storeStrong(&location, 0);
}

double sub_100164768(uint64_t a1, int a2, int a3, int a4)
{
  double result;

  *(_QWORD *)&result = 67109632;
  *(_DWORD *)a1 = 67109632;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 1024;
  *(_DWORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 14) = 1024;
  *(_DWORD *)(a1 + 16) = a4;
  return result;
}

void sub_100164AF8(uint64_t a1, char a2)
{
  void *v2;
  void **v3;
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t);
  void *v7;
  id v8;
  char v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = a1;
  v11 = a2;
  v10 = a1;
  if ((a2 & 1) != 0)
  {
    v2 = *(void **)(a1 + 32);
    v3 = _NSConcreteStackBlock;
    v4 = -1073741824;
    v5 = 0;
    v6 = sub_100164BC4;
    v7 = &unk_1002833B0;
    v8 = *(id *)(a1 + 40);
    v9 = v11 & 1;
    objc_msgSend(v2, "_prepareAnalyticsWithCompletion:", &v3);
    objc_storeStrong(&v8, 0);
  }
  else if (*(_QWORD *)(a1 + 40))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

uint64_t sub_100164BC4(uint64_t result)
{
  if (*(_QWORD *)(result + 32))
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(result + 32) + 16))(*(_QWORD *)(result + 32), *(_BYTE *)(result + 40) & 1);
  return result;
}

void sub_100164C04(id *a1)
{
  id v2;
  void **v3;
  int v4;
  int v5;
  uint64_t (*v6)(uint64_t, uint64_t);
  void *v7;
  id v8;
  id v9[3];

  v9[2] = a1;
  v9[1] = a1;
  v2 = a1[4];
  v3 = _NSConcreteStackBlock;
  v4 = -1073741824;
  v5 = 0;
  v6 = sub_100164CC0;
  v7 = &unk_100281078;
  v8 = a1[4];
  v9[0] = a1[5];
  objc_msgSend(v2, "_determineDisplayMode:", &v3);
  objc_storeStrong(v9, 0);
  objc_storeStrong(&v8, 0);
}

uint64_t sub_100164CC0(uint64_t a1, uint64_t a2)
{
  objc_msgSend(*(id *)(a1 + 32), "setMode:", a2);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_100166424(NSObject *a1, void *a2, void *a3)
{
  uint64_t v5;
  NSString *v6;
  id v7;
  id v8;
  os_log_t v9;
  char v10;
  id v11;
  char v12;
  id v13;
  os_log_type_t v14;
  os_log_t oslog[2];
  id v16;
  id location[2];
  uint8_t v18[32];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v16 = 0;
  objc_storeStrong(&v16, a3);
  oslog[1] = a1;
  if (v16)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    v14 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v12 = 0;
      v10 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v6 = (NSString *)v16;
      }
      else if (v16)
      {
        v13 = objc_msgSend(v16, "domain");
        v12 = 1;
        v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v13, objc_msgSend(v16, "code"));
        v11 = v6;
        v10 = 1;
      }
      else
      {
        v6 = 0;
      }
      sub_100038C28((uint64_t)buf, (uint64_t)v6);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v14, "Failed to fetch cut off age for child account: %@", buf, 0xCu);
      if ((v10 & 1) != 0)

      if ((v12 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
    (*((void (**)(void))a1[4].isa + 2))();
  }
  else
  {
    v9 = (os_log_t)(id)_BYLoggingFacility(v5);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v7 = objc_msgSend(location[0], "childCutOffAge");
      v8 = objc_msgSend(location[0], "childCutOffAgeLocalized");
      sub_100069408((uint64_t)v18, (uint64_t)v7, (uint64_t)v8);
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Did fetch cut off age for child account: %ld '%{public}@'", v18, 0x16u);

    }
    objc_storeStrong((id *)&v9, 0);
    (*((void (**)(Class, id, _QWORD))a1[4].isa + 2))(a1[4].isa, objc_msgSend(location[0], "childCutOffAge"), 0);
  }
  objc_storeStrong(&v16, 0);
  objc_storeStrong(location, 0);
}

id sub_100166760()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEBA8;
  v13 = qword_1002EEBA8;
  if (!qword_1002EEBA8)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100166FC0;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100166FC0(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_100166FC0(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_100167100();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("AISChildSetupPresenter");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getAISChildSetupPresenterClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyChildSetupPresenter.m"), 19, CFSTR("Unable to find class %s"), "AISChildSetupPresenter");

    __break(1u);
  }
  qword_1002EEBA8 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_100167100()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_10016722C((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *AppleIDSetupUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyChildSetupPresenter.m"), 18, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_10016722C(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEBB0;
  v9 = qword_1002EEBB0;
  if (!qword_1002EEBB0)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001672BC;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1001672BC((uint64_t)&v2);
  }
  return qword_1002EEBB0;
}

uint64_t sub_1001672BC(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/AppleIDSetupUI.framework/AppleIDSetupUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEBB0 = result;
  return result;
}

void sub_100167490(uint64_t a1)
{
  BuddyMigrationLockscreenFinishedController *v2;
  id v3;
  id v4;
  BuddyMigrationSourceLockscreenErrorController *v5;

  if (*(_QWORD *)(a1 + 32))
  {
    v5 = -[BuddyMigrationSourceErrorController initWithError:]([BuddyMigrationSourceLockscreenErrorController alloc], "initWithError:", *(_QWORD *)(a1 + 32), a1, a1);
    objc_msgSend(*(id *)(a1 + 40), "setErrorController:", v5);

    v3 = objc_msgSend(*(id *)(a1 + 40), "navigationController");
    v4 = objc_msgSend(*(id *)(a1 + 40), "errorController");
  }
  else
  {
    v2 = objc_alloc_init(BuddyMigrationLockscreenFinishedController);
    objc_msgSend(*(id *)(a1 + 40), "setFinishedController:", v2, a1, a1);

    v3 = objc_msgSend(*(id *)(a1 + 40), "navigationController");
    v4 = objc_msgSend(*(id *)(a1 + 40), "finishedController");
  }
  objc_msgSend(v3, "pushViewController:animated:", v4, 1);

}

void sub_100167814(id a1)
{
  BuddyCloudConfigManager *v1;
  void *v2;

  v1 = objc_alloc_init(BuddyCloudConfigManager);
  v2 = (void *)qword_1002EEBB8;
  qword_1002EEBB8 = (uint64_t)v1;

}

id sub_100167A6C(NSObject *a1, int a2)
{
  NSObject *v3;
  os_log_type_t v4;
  _WORD v6[7];
  os_log_type_t v7;
  os_log_t oslog[2];
  int v9;
  NSObject *v10;

  v10 = a1;
  v9 = a2;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v3 = oslog[0];
    v4 = v7;
    sub_100038C3C(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Profile list has changed. Reload skip keys", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  return -[objc_class _updateSkipKeysWithCachedDetails:](a1[4].isa, "_updateSkipKeysWithCachedDetails:", *((_QWORD *)a1[4].isa + 2));
}

double sub_100167B20(uint64_t a1, uint64_t a2, int a3)
{
  double result;

  *(_QWORD *)&result = 138543618;
  *(_DWORD *)a1 = 138543618;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1026;
  *(_DWORD *)(a1 + 14) = a3;
  return result;
}

id sub_100167D6C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateSkipKeysWithCachedDetails:", *(_QWORD *)(a1 + 40), a1, a1);
}

void sub_100168058(uint64_t a1)
{
  id v2;
  char v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "mdmReturnToServiceController", a1, a1);
  v3 = 0;
  if ((objc_msgSend(v2, "shouldDoReturnToService") & 1) != 0)
    v3 = objc_msgSend(*(id *)(a1 + 40), "isEqualToString:", kMCCCSkipWiFi) ^ 1;

  if ((v3 & 1) != 0)
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  else
    *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "containsObject:", *(_QWORD *)(a1 + 40)) & 1;
}

void sub_100168CFC(id *a1, char a2)
{
  id v3;
  id v4;
  void **v5;
  int v6;
  int v7;
  uint64_t (*v8)(uint64_t);
  void *v9;
  id v10;
  id v11;
  id v12[2];
  char v13;
  id *v14;

  v14 = a1;
  v13 = a2;
  v12[1] = a1;
  objc_msgSend(a1[4], "setRequiresTermsAcceptanceForPrimaryAccount:", a2 & 1);
  v3 = a1[4];
  v4 = a1[5];
  v5 = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_100168DFC;
  v9 = &unk_100281168;
  v10 = a1[4];
  v11 = a1[5];
  v12[0] = a1[6];
  objc_msgSend(v3, "_startSilentEscrowRecordRepairIfNecessaryWithAccount:completion:", v4, &v5);
  objc_storeStrong(v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
}

uint64_t sub_100168DFC(uint64_t a1)
{
  id v2;
  unsigned __int8 v3;
  void *v4;
  id v5;
  id v6;
  id v7;
  unsigned __int8 v8;
  id v9;
  char v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  NSObject *v14;
  os_log_type_t v15;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  NSObject *v22;
  os_log_type_t v23;
  id v24;
  id v25;
  id v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  id v31;
  id v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  id v36;
  BOOL v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  _WORD v41[3];
  os_log_type_t v42;
  os_log_t v43;
  char v44;
  id v45;
  char v46;
  id v47;
  uint8_t v48[15];
  os_log_type_t v49;
  os_log_t v50;
  id location;
  uint8_t v52[7];
  os_log_type_t v53;
  os_log_t v54;
  uint8_t v55[7];
  os_log_type_t v56;
  os_log_t v57;
  uint8_t v58[7];
  os_log_type_t v59;
  os_log_t v60;
  uint8_t buf[15];
  os_log_type_t v62;
  os_log_t oslog;
  char v64;
  id v65;
  char v66;
  void **v67;
  int v68;
  int v69;
  void (*v70)(id *, void *, char);
  void *v71;
  id v72;
  char v73;
  id v74;
  char v75;
  uint64_t v76;
  uint64_t v77;

  v77 = a1;
  v76 = a1;
  v75 = 0;
  v2 = +[BYSetupStateManager sharedManager](BYSetupStateManager, "sharedManager");
  v73 = 0;
  v3 = 1;
  if (objc_msgSend(v2, "restoreType") != (id)1)
  {
    v74 = objc_msgSend(*(id *)(a1 + 32), "miscState");
    v73 = 1;
    v3 = objc_msgSend(v74, "forcePrimaryAppleIDAuthentication");
  }
  if ((v73 & 1) != 0)

  v75 = v3 & 1;
  if ((v3 & 1) != 0)
  {
    objc_msgSend(*(id *)(a1 + 32), "setAccountToRepair:", *(_QWORD *)(a1 + 40));
    objc_msgSend(*(id *)(a1 + 32), "setPerformAuthKitRepair:", 0);
  }
  else
  {
    v4 = *(void **)(a1 + 32);
    v67 = _NSConcreteStackBlock;
    v68 = -1073741824;
    v69 = 0;
    v70 = sub_100169588;
    v71 = &unk_100283AF8;
    v72 = *(id *)(a1 + 32);
    objc_msgSend(v4, "_determineAccountToRepair:", &v67);
    v5 = objc_msgSend(*(id *)(a1 + 32), "accountToRepair");

    if (!v5)
    {
      v6 = objc_msgSend(*(id *)(a1 + 32), "_accountToUpdate");
      objc_msgSend(*(id *)(a1 + 32), "setAccountForSecurityUpgrade:", v6);

    }
    objc_storeStrong(&v72, 0);
  }
  v66 = 0;
  v7 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
  v8 = objc_msgSend(v7, "hasAppliedSettings");

  v66 = v8 & 1;
  if (!*(_QWORD *)(a1 + 40))
  {
    v17 = objc_msgSend(*(id *)(a1 + 32), "miscState");
    v18 = objc_msgSend(v17, "iCloudAppleIdFromActivation");
    v19 = objc_msgSend(v18, "length");

    if (v19)
    {
      v20 = objc_msgSend(*(id *)(a1 + 32), "miscState");
      v21 = objc_msgSend(v20, "iCloudAppleIdFromActivation");
      objc_msgSend(*(id *)(a1 + 32), "setExistingAccountUsername:", v21);

      v57 = (os_log_t)(id)_BYLoggingFacility(objc_msgSend(*(id *)(a1 + 32), "setExistingAccountType:", 1));
      v56 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
      {
        v22 = v57;
        v23 = v56;
        sub_100038C3C(v55);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "Buddy AppleID choice flow: Found iCloud account from activation.", v55, 2u);
      }
      objc_storeStrong((id *)&v57, 0);
    }
    else
    {
      v24 = +[SSAccountStore defaultStore](SSAccountStore, "defaultStore");
      v25 = objc_msgSend(v24, "activeAccount");
      v26 = objc_msgSend(v25, "accountName");
      objc_msgSend(*(id *)(a1 + 32), "setExistingAccountUsername:", v26);

      v27 = objc_msgSend(*(id *)(a1 + 32), "existingAccountUsername");
      v28 = objc_msgSend(v27, "length");

      if (v28)
      {
        v54 = (os_log_t)(id)_BYLoggingFacility(objc_msgSend(*(id *)(a1 + 32), "setExistingAccountType:", 2));
        v53 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
        {
          v29 = v54;
          v30 = v53;
          sub_100038C3C(v52);
          _os_log_impl((void *)&_mh_execute_header, v29, v30, "Buddy AppleID choice flow: Found Store account.", v52, 2u);
        }
        objc_storeStrong((id *)&v54, 0);
      }
      else
      {
        v31 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
        v32 = objc_msgSend(v31, "information");
        location = objc_msgSend(v32, "appleID");

        if (location)
        {
          v50 = (os_log_t)(id)_BYLoggingFacility(v33);
          v49 = OS_LOG_TYPE_DEFAULT;
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
          {
            v34 = v50;
            v35 = v49;
            sub_100038C3C(v48);
            _os_log_impl((void *)&_mh_execute_header, v34, v35, "Buddy AppleID choice flow: Found Apple ID from proximity", v48, 2u);
          }
          objc_storeStrong((id *)&v50, 0);
          objc_msgSend(*(id *)(a1 + 32), "setExistingAccountUsername:", location);
          objc_msgSend(*(id *)(a1 + 32), "setExistingAccountType:", 1);
        }
        objc_storeStrong(&location, 0);
      }
    }
    goto LABEL_36;
  }
  v9 = objc_msgSend(*(id *)(a1 + 32), "accountToRepair");
  v64 = 0;
  if (v9
    || (v65 = objc_msgSend(*(id *)(a1 + 32), "accountForSecurityUpgrade"),
        v64 = 1,
        v10 = 0,
        v65))
  {
    v10 = v66 ^ 1;
  }
  if ((v64 & 1) != 0)

  if ((v10 & 1) != 0)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v11);
    v62 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v12 = oslog;
      v13 = v62;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Buddy AppleID choice flow: account needs updating.", buf, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
LABEL_36:
    v36 = objc_msgSend(*(id *)(a1 + 32), "buddyPreferences");
    v46 = 0;
    v44 = 0;
    v37 = 0;
    if ((objc_msgSend(v36, "BOOLForKey:", CFSTR("AppleIDPB10Presented")) & 1) != 0)
    {
      v47 = objc_msgSend(*(id *)(a1 + 32), "accountToRepair");
      v46 = 1;
      v37 = 0;
      if (!v47)
      {
        v45 = objc_msgSend(*(id *)(a1 + 32), "accountForSecurityUpgrade");
        v44 = 1;
        v37 = v45 == 0;
      }
    }
    if ((v44 & 1) != 0)

    if ((v46 & 1) != 0)
    if (!v37)
      return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    v43 = (os_log_t)(id)_BYLoggingFacility(v38);
    v42 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      v39 = v43;
      v40 = v42;
      sub_100038C3C(v41);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Skipping AppleID Setup: already done.", (uint8_t *)v41, 2u);
    }
    objc_storeStrong((id *)&v43, 0);
    return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  v60 = (os_log_t)(id)_BYLoggingFacility(v11);
  v59 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
  {
    v14 = v60;
    v15 = v59;
    sub_100038C3C(v58);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Skipping AppleID Setup: iCloud account already present, no upgrade needed.", v58, 2u);
  }
  objc_storeStrong((id *)&v60, 0);
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
}

void sub_100169588(id *a1, void *a2, char a3)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "setAccountToRepair:", location[0], a1);
  objc_msgSend(a1[4], "setPerformAuthKitRepair:", a3 & 1);
  objc_storeStrong(location, 0);
}

void sub_100169DDC(NSObject *a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  NSString *v7;
  BOOL v8;
  char v9;
  NSString *v10;
  char v11;
  id v12;
  os_log_t oslog[2];
  id v14;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v14 = 0;
  objc_storeStrong(&v14, a3);
  oslog[1] = a1;
  if (v14)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v6 = -[objc_class aa_altDSID](a1[4].isa, "aa_altDSID");
      v11 = 0;
      v9 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v7 = (NSString *)v14;
      }
      else if (v14)
      {
        v12 = objc_msgSend(v14, "domain");
        v11 = 1;
        v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v12, objc_msgSend(v14, "code"));
        v10 = v7;
        v9 = 1;
      }
      else
      {
        v7 = 0;
      }
      sub_1000C3528((uint64_t)buf, (uint64_t)v6, (uint64_t)v7);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Failed to get accepted terms info for alt-DSID %@: %{public}@", buf, 0x16u);
      if ((v9 & 1) != 0)

      if ((v11 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  if (a1[5].isa)
  {
    v8 = 0;
    if (!v14)
      v8 = location[0] == 0;
    (*((void (**)(Class, BOOL))a1[5].isa + 2))(a1[5].isa, v8);
  }
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_10016A3B0(NSObject *a1, char a2, id obj)
{
  uint64_t v4;
  id v5;
  id v6;
  os_log_t v7;
  os_log_type_t v8;
  os_log_t oslog[2];
  id location;
  char v11;
  NSObject *v12;
  uint8_t v13[32];
  uint8_t buf[24];

  v12 = a1;
  v11 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if ((v11 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v5 = -[objc_class altDSID](a1[4].isa, "altDSID");
      sub_100038C28((uint64_t)buf, (uint64_t)v5);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v8, "Successfully started silent escrow record repair flow for account with altDSID (%@)", buf, 0xCu);

    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v7 = (os_log_t)(id)_BYLoggingFacility(v4);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      v6 = -[objc_class altDSID](a1[4].isa, "altDSID");
      sub_1000C3528((uint64_t)v13, (uint64_t)v6, (uint64_t)location);
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to start silent escrow record repair flow for account with altDSID (%@) with error (%{public}@)", v13, 0x16u);

    }
    objc_storeStrong((id *)&v7, 0);
  }
  if (a1[5].isa)
    (*((void (**)(void))a1[5].isa + 2))();
  objc_storeStrong(&location, 0);
}

uint64_t sub_10016B0C0(NSObject *a1)
{
  uint64_t result;
  NSObject *v3;
  os_log_type_t v4;
  _WORD v5[3];
  os_log_type_t v6;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  result = (uint64_t)-[objc_class waitingForMigration](a1[4].isa, "waitingForMigration");
  if ((result & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(result);
    v6 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v3 = oslog[0];
      v4 = v6;
      sub_100038C3C(v5);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Managed configuration migration is taking a while; showing completing setup UI...",
        (uint8_t *)v5,
        2u);
    }
    objc_storeStrong((id *)oslog, 0);
    result = (uint64_t)-[objc_class setPaneVisible:](a1[4].isa, "setPaneVisible:", 1);
    if (a1[5].isa)
      return (*((uint64_t (**)(void))a1[5].isa + 2))();
  }
  return result;
}

void sub_10016B19C(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  id v4;
  void **v5;
  int v6;
  int v7;
  void (*v8)(id *);
  void *v9;
  objc_class *v10;
  objc_class *v11;
  uint8_t buf[7];
  os_log_type_t v13;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v13 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v13;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Starting managed configuration migration...", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  v4 = -[objc_class managedConfiguration](a1[4].isa, "managedConfiguration");
  v5 = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_10016B2E4;
  v9 = &unk_1002806E0;
  v10 = a1[4].isa;
  v11 = a1[5].isa;
  objc_msgSend(v4, "waitForMigrationIncludingPostRestoreMigration:completion:", 1, &v5);

  objc_storeStrong((id *)&v11, 0);
  objc_storeStrong((id *)&v10, 0);
}

void sub_10016B2E4(id *a1)
{
  void *v2;
  void **v3;
  int v4;
  int v5;
  void (*v6);
  void *v7;
  id v8;
  id v9[3];

  v9[2] = a1;
  v9[1] = a1;
  v2 = &_dispatch_main_q;
  v3 = _NSConcreteStackBlock;
  v4 = -1073741824;
  v5 = 0;
  v6 = sub_10016B3BC;
  v7 = &unk_1002806E0;
  v8 = a1[4];
  v9[0] = a1[5];
  dispatch_async((dispatch_queue_t)v2, &v3);

  objc_storeStrong(v9, 0);
  objc_storeStrong(&v8, 0);
}

void sub_10016B3BC(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  id v4;
  _WORD v5[3];
  os_log_type_t v6;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v6;
    sub_100038C3C(v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Managed configuration migration complete!", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  -[objc_class setWaitingForMigration:](a1[4].isa, "setWaitingForMigration:", 0);
  if ((-[objc_class isPaneVisible](a1[4].isa, "isPaneVisible") & 1) != 0)
  {
    v4 = -[objc_class delegate](a1[4].isa, "delegate");
    objc_msgSend(v4, "flowItemDone:", a1[4].isa);

  }
  else if (a1[5].isa)
  {
    (*((void (**)(void))a1[5].isa + 2))();
  }
}

void sub_10016BC40(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  os_log_type_t v4;
  id v5;
  id v6;
  void **v7;
  int v8;
  int v9;
  void (*v10)(uint64_t, void *);
  void *v11;
  id v12;
  id v13;
  uint8_t buf[7];
  os_log_type_t v15;
  os_log_t oslog;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v20 = a1;
  v19 = a2;
  v18 = a1;
  v17 = 0;
  if (a2 == 1)
  {
    v17 = 0;
  }
  else if (a2 == 2)
  {
    v17 = 1;
  }
  if ((v17 & 1) != 0)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(a1);
    v15 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v3 = oslog;
      v4 = v15;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Beginning authentication and sign-in for iCloud account...", buf, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    v5 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
    v6 = objc_msgSend(v5, "dependentController");
    v7 = _NSConcreteStackBlock;
    v8 = -1073741824;
    v9 = 0;
    v10 = sub_10016BE04;
    v11 = &unk_100283900;
    v12 = *(id *)(a1 + 32);
    v13 = *(id *)(a1 + 40);
    objc_msgSend(v6, "waitForViewController:", &v7);

    objc_storeStrong(&v13, 0);
    objc_storeStrong(&v12, 0);
  }
  else if (*(_QWORD *)(a1 + 40))
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

void sub_10016BE04(uint64_t a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  id v6;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(*(id *)(a1 + 32), "setViewController:", location[0]);
  v3 = *(void **)(a1 + 32);
  v4 = objc_msgSend(v3, "proximitySetupController");
  v5 = objc_msgSend(v4, "dependentController");
  objc_msgSend(v5, "setDelegate:", v3);

  v6 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
  objc_msgSend(v6, "addObserver:", *(_QWORD *)(a1 + 32));

  if (*(_QWORD *)(a1 + 40))
    (*(void (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), location[0] != 0);
  objc_storeStrong(location, 0);
}

void sub_10016C6A8(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController", a1, a1);
  objc_msgSend(v1, "setupFinished");

}

id sub_10016C6F4(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_flowItemDone", a1, a1);
}

void sub_10016CBB8(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  char isKindOfClass;
  uint64_t v6;
  char v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  id v11;
  NSObject *v12;
  os_log_type_t v13;
  id v14;
  id v15;
  id v16;
  NSArray *v17;
  void *v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  _WORD v23[3];
  os_log_type_t v24;
  os_log_t v25;
  uint8_t v26[7];
  os_log_type_t v27;
  os_log_t v28;
  uint8_t buf[15];
  os_log_type_t v30;
  os_log_t oslog;
  char v32;
  char v33;
  char v34;
  id v35;
  char v36;
  id v37;
  char v38;
  uint64_t v39;
  uint64_t v40;
  id v41;

  v40 = a1;
  v39 = a1;
  v38 = 0;
  v2 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
  v3 = objc_msgSend(v2, "topViewController");
  v4 = objc_msgSend(*(id *)(a1 + 32), "viewController");
  v36 = 0;
  v34 = 0;
  isKindOfClass = 0;
  if (v3 == v4)
  {
    v37 = objc_msgSend(*(id *)(a1 + 32), "controllers");
    v36 = 1;
    v35 = objc_msgSend(v37, "firstObject");
    v34 = 1;
    v6 = objc_opt_class(BuddyProximityCloudDependentHostController);
    isKindOfClass = objc_opt_isKindOfClass(v35, v6);
  }
  if ((v34 & 1) != 0)

  if ((v36 & 1) != 0)
  v38 = isKindOfClass & 1;
  v33 = 0;
  v33 = objc_msgSend(*(id *)(a1 + 32), "presentedPasscodeFlow") & 1;
  v32 = 0;
  v7 = 1;
  if ((isKindOfClass & 1) == 0)
    v7 = v33;
  v32 = v7;
  objc_msgSend(*(id *)(a1 + 32), "setPresentedPasscodeFlow:", 1);
  v8 = objc_msgSend(*(id *)(a1 + 32), "setPasscodeFlowCompletion:", *(_QWORD *)(a1 + 40));
  if ((v32 & 1) != 0)
  {
    if ((v33 & 1) != 0)
    {
      oslog = (os_log_t)(id)_BYLoggingFacility(v8);
      v30 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
      {
        v9 = oslog;
        v10 = v30;
        sub_100038C3C(buf);
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Updating flow to show passcode flow next...", buf, 2u);
      }
      objc_storeStrong((id *)&oslog, 0);
      v11 = objc_msgSend(*(id *)(a1 + 32), "miscState");
      objc_msgSend(v11, "setHasPresentedPasscodeFlow:", 0);

      v8 = objc_msgSend(*(id *)(a1 + 32), "_updateClassListWithPasscodeShownInitially:", 0);
    }
    v28 = (os_log_t)(id)_BYLoggingFacility(v8);
    v27 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      v12 = v28;
      v13 = v27;
      sub_100038C3C(v26);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Presenting biometric/passcode setup during sign-in...", v26, 2u);
    }
    objc_storeStrong((id *)&v28, 0);
    v14 = objc_msgSend(*(id *)(a1 + 32), "viewController");

    if (v14)
    {
      v15 = objc_msgSend(*(id *)(a1 + 32), "navigationFlowDelegate");
      v16 = objc_msgSend(*(id *)(a1 + 32), "viewController");
      v41 = v16;
      v17 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v41, 1);
      objc_msgSend(v15, "removeViewControllersOnNextPush:", v17);

    }
    v18 = *(void **)(a1 + 32);
    v19 = objc_msgSend(v18, "controllers");
    v20 = objc_msgSend(v19, "lastObject");
    objc_msgSend(v18, "flowItemDone:", v20);

  }
  else
  {
    v25 = (os_log_t)(id)_BYLoggingFacility(v8);
    v24 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      v21 = v25;
      v22 = v24;
      sub_100038C3C(v23);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Updating flow to show passcode flow initially...", (uint8_t *)v23, 2u);
    }
    objc_storeStrong((id *)&v25, 0);
    objc_msgSend(*(id *)(a1 + 32), "_updateClassListWithPasscodeShownInitially:", 1);
  }
}

void sub_10016D5B4(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController", a1, a1);
  objc_msgSend(v1, "setupFinished");

}

void sub_10016D600(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController", a1, a1);
  objc_msgSend(v1, "setupFinished");

}

id sub_10016D64C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_flowItemDone", a1, a1);
}

void sub_10016D8F4(NSObject *a1, char a2, id obj)
{
  id v4;
  unsigned __int8 v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _WORD v9[3];
  os_log_type_t v10;
  os_log_t oslog[2];
  id location;
  char v13;
  NSObject *v14;

  v14 = a1;
  v13 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  -[objc_class setSignInTask:](a1[4].isa, "setSignInTask:", 0);
  v4 = -[objc_class proximitySetupController](a1[4].isa, "proximitySetupController");
  v5 = objc_msgSend(v4, "hasConnection");

  if ((v5 & 1) != 0)
  {
    (*((void (**)(void))a1[5].isa + 2))();
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v6);
    v10 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v7 = oslog[0];
      v8 = v10;
      sub_100038C3C(v9);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Prematurely ending dependent flow after sign-in due to loss of proximity connection", (uint8_t *)v9, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    -[objc_class _endFlowPrematurely](a1[4].isa, "_endFlowPrematurely");
  }
  objc_storeStrong(&location, 0);
}

void sub_10016DAB8(uint64_t a1)
{
  id v2;
  BOOL v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _WORD v7[3];
  os_log_type_t v8;
  os_log_t oslog;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  v13 = a1;
  v12 = a1;
  v2 = objc_msgSend(*(id *)(a1 + 32), "passcodeFlowCompletion");
  v10 = 0;
  v3 = 0;
  if (!v2)
  {
    v11 = objc_msgSend(*(id *)(a1 + 32), "signInTask");
    v10 = 1;
    v3 = v11 == 0;
  }
  if ((v10 & 1) != 0)

  if (v3)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v4);
    v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v5 = oslog;
      v6 = v8;
      sub_100038C3C(v7);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Prematurely ending dependent flow due to loss of proximity connection", (uint8_t *)v7, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    objc_msgSend(*(id *)(a1 + 32), "_endFlowPrematurely");
  }
}

void sub_10016E714(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController", a1, a1);
  objc_msgSend(v1, "endPairing");

}

void sub_10016EC00(id *a1, void *a2)
{
  id v3;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "setShouldOnlySetActiveStoreAccount:", 0);
  if (location[0])
  {
    objc_msgSend(a1[4], "_authenticateNextAccount");
  }
  else
  {
    v3 = objc_msgSend(a1[4], "storeAccountsToSignIn");
    objc_msgSend(v3, "removeObjectAtIndex:", 0);

    objc_msgSend(a1[4], "_authenticateThenSignInNextAccount");
  }
  objc_storeStrong(location, 0);
}

void sub_10016F188(NSObject *a1, char a2, id obj)
{
  uint64_t v4;
  NSString *v5;
  void *v6;
  void **block;
  int v8;
  int v9;
  uint64_t (*v10)(uint64_t);
  void *v11;
  id v12;
  objc_class *v13;
  char v14;
  id v15;
  char v16;
  id v17;
  os_log_type_t v18;
  os_log_t oslog[2];
  id location;
  char v21;
  NSObject *v22;
  uint8_t buf[24];

  v22 = a1;
  v21 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if ((v21 & 1) != 0)
  {
    -[objc_class setActiveStoreAccount:](a1[4].isa, "setActiveStoreAccount:", a1[5].isa);
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v18 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v16 = 0;
      v14 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v5 = (NSString *)location;
      }
      else if (location)
      {
        v17 = objc_msgSend(location, "domain");
        v16 = 1;
        v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v17, objc_msgSend(location, "code"));
        v15 = v5;
        v14 = 1;
      }
      else
      {
        v5 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v5);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v18, "Failed to make store account active: %{public}@", buf, 0xCu);
      if ((v14 & 1) != 0)

      if ((v16 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  v6 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v8 = -1073741824;
  v9 = 0;
  v10 = sub_10016F404;
  v11 = &unk_100281190;
  v13 = a1[6].isa;
  v12 = location;
  dispatch_async((dispatch_queue_t)v6, &block);

  objc_storeStrong(&v12, 0);
  objc_storeStrong((id *)&v13, 0);
  objc_storeStrong(&location, 0);
}

uint64_t sub_10016F404(uint64_t result)
{
  if (*(_QWORD *)(result + 40))
    return (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)(result + 40) + 16))(*(_QWORD *)(result + 40), *(_QWORD *)(result + 32));
  return result;
}

void sub_10016F834(id *a1, void *a2, void *a3)
{
  void *v5;
  void **block;
  int v7;
  int v8;
  void (*v9)(uint64_t);
  void *v10;
  id v11;
  id v12;
  id v13[2];
  id v14;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = a1;
  v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_10016F964;
  v10 = &unk_100283BB0;
  v11 = location[0];
  v13[0] = a1[4];
  v12 = v14;
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(&v12, 0);
  objc_storeStrong(v13, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_10016F964(uint64_t a1)
{
  id v2;
  id v3;
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  v2 = objc_msgSend(*(id *)(a1 + 32), "familyMembers");
  v3 = objc_msgSend(v2, "buddy_mapSet:", &stru_100283B88);
  location[0] = objc_msgSend(v3, "allObjects");

  if (*(_QWORD *)(a1 + 48))
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  objc_storeStrong(location, 0);
}

id sub_10016FA14(id a1, AMSFamilyMember *a2)
{
  id v2;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v2 = objc_msgSend(location[0], "iTunesUsername");
  objc_storeStrong(location, 0);
  return v2;
}

void sub_1001704A0(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  id v4;
  _WORD v5[3];
  os_log_type_t v6;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v6;
    sub_100038C3C(v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "iForgot tapped", (uint8_t *)v5, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  v4 = -[objc_class storeAppleIDController](a1[4].isa, "storeAppleIDController");
  objc_msgSend(v4, "showCredentialRecovery");

}

void sub_100170564(id *a1)
{
  id v1;
  char v2;
  id v3;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  v1 = objc_msgSend(location[0], "signInController");
  v2 = objc_msgSend(v1, "isMovingToParentViewController") ^ 1;

  if ((v2 & 1) != 0)
  {
    v3 = objc_msgSend(location[0], "storeAppleIDController");
    objc_msgSend(v3, "cancelAuthentication");

  }
  objc_storeStrong(location, 0);
}

void sub_1001705F4(id *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  uint64_t v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  id v15;
  os_log_t v16;
  void **v17;
  int v18;
  int v19;
  void (*v20)(id *, void *, void *);
  void *v21;
  id v22;
  id v23;
  os_log_type_t v24;
  os_log_t oslog;
  id v26[2];
  id v27;
  id location[2];
  uint8_t v29[16];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v27 = 0;
  objc_storeStrong(&v27, a3);
  v26[1] = a1;
  v26[0] = objc_loadWeakRetained(a1 + 5);
  v5 = objc_msgSend(v26[0], "storeAppleIDController");
  v6 = objc_msgSend(v26[0], "signInController");
  objc_msgSend(v5, "setAuthAttemptLandingViewController:", v6);

  if (location[0])
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v7);
    v24 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_100038C28((uint64_t)buf, (uint64_t)location[0]);
      _os_log_impl((void *)&_mh_execute_header, oslog, v24, "Beginning authentication for store account: %@...", buf, 0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    v8 = objc_msgSend(v26[0], "navigationController");
    v9 = objc_msgSend(v26[0], "passcodeCacheManager");
    v23 = +[BuddyAppleIDAuthManager managerWithNavigationController:passcodeCacheManager:](BuddyAppleIDAuthManager, "managerWithNavigationController:passcodeCacheManager:", v8, v9);

    objc_msgSend(v23, "setServiceType:", 2);
    v10 = objc_msgSend(v26[0], "signInController");
    v11 = location[0];
    v12 = v27;
    v13 = objc_msgSend(a1[4], "altDSID");
    v17 = _NSConcreteStackBlock;
    v18 = -1073741824;
    v19 = 0;
    v20 = sub_10017095C;
    v21 = &unk_100282880;
    v22 = v26[0];
    objc_msgSend(v23, "authenticateWithSignInController:username:password:altDSID:completion:", v10, v11, v12, v13, &v17);

    objc_storeStrong(&v22, 0);
    objc_storeStrong(&v23, 0);
  }
  else
  {
    v16 = (os_log_t)(id)_BYLoggingFacility(v7);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v14 = objc_msgSend(a1[4], "username");
      sub_100038C28((uint64_t)v29, (uint64_t)v14);
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Skipping sign-in for %@...", v29, 0xCu);

    }
    objc_storeStrong((id *)&v16, 0);
    v15 = objc_msgSend(v26[0], "storeAccountsToSignIn");
    objc_msgSend(v15, "removeObjectAtIndex:", 0);

    objc_msgSend(v26[0], "_authenticateThenSignInNextAccount");
  }
  objc_storeStrong(v26, 0);
  objc_storeStrong(&v27, 0);
  objc_storeStrong(location, 0);
}

void sub_10017095C(id *a1, void *a2, void *a3)
{
  void *v5;
  void **block;
  int v7;
  int v8;
  void (*v9);
  void *v10;
  id v11;
  id v12;
  id v13[2];
  id v14;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = a1;
  v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_100170A8C;
  v10 = &unk_100281000;
  v11 = v14;
  v12 = a1[4];
  v13[0] = location[0];
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_100170A8C(NSObject *a1)
{
  NSString *isa;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t v11[7];
  os_log_type_t v12;
  os_log_t v13;
  char v14;
  id v15;
  char v16;
  id v17;
  os_log_type_t v18;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = a1;
  oslog[1] = a1;
  if (a1[4].isa)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    v18 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v16 = 0;
      v14 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        isa = (NSString *)a1[4].isa;
      }
      else if (a1[4].isa)
      {
        v17 = -[objc_class domain](a1[4].isa, "domain");
        v16 = 1;
        isa = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v17, -[objc_class code](a1[4].isa, "code"));
        v15 = isa;
        v14 = 1;
      }
      else
      {
        isa = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)isa);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v18, "Authentication failed: %{public}@", buf, 0xCu);
      if ((v14 & 1) != 0)

      if ((v16 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
    v3 = -[objc_class navigationController](a1[5].isa, "navigationController");
    v4 = objc_msgSend(v3, "topViewController");
    v5 = -[objc_class signInController](a1[5].isa, "signInController");

    if (v4 != v5)
    {
      v6 = -[objc_class navigationController](a1[5].isa, "navigationController");
      v7 = -[objc_class signInController](a1[5].isa, "signInController");
      v8 = objc_msgSend(v6, "popToViewController:animated:", v7, 1);

    }
  }
  else
  {
    v13 = (os_log_t)(id)_BYLoggingFacility(a1);
    v12 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      v9 = v13;
      v10 = v12;
      sub_100038C3C(v11);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Authentication succeeded!", v11, 2u);
    }
    objc_storeStrong((id *)&v13, 0);
    -[objc_class _didAuthenticateWithAuthenticationResults:](a1[5].isa, "_didAuthenticateWithAuthenticationResults:", a1[6].isa);
  }
}

void sub_1001712B0(id *a1, char a2, id obj)
{
  void *v4;
  void **v5;
  int v6;
  int v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  id v14;
  char v15;
  id *v16;
  id location;
  char v18;
  id *v19;

  v19 = a1;
  v18 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v16 = a1;
  v4 = &_dispatch_main_q;
  v5 = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_100171424;
  v9 = &unk_100283C28;
  v10 = a1[4];
  v15 = v18 & 1;
  v11 = location;
  v12 = a1[5];
  v13 = a1[6];
  v14 = a1[7];
  dispatch_async((dispatch_queue_t)v4, &v5);

  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

void sub_100171424(uint64_t a1)
{
  id v2;
  NSString *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  id v11;
  BOOL v12;
  id v13;
  uint8_t v14[7];
  os_log_type_t v15;
  os_log_t v16;
  char v17;
  id v18;
  char v19;
  id v20;
  os_log_type_t v21;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  v2 = objc_msgSend(*(id *)(a1 + 32), "_stopSpinningForIdentifier:", CFSTR("signin"));
  if ((*(_BYTE *)(a1 + 72) & 1) != 0)
  {
    v16 = (os_log_t)(id)_BYLoggingFacility(v2);
    v15 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      v9 = v16;
      v10 = v15;
      sub_100038C3C(v14);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Sign-in succeeded!", v14, 2u);
    }
    objc_storeStrong((id *)&v16, 0);
    v11 = objc_msgSend(*(id *)(a1 + 32), "activeStoreAccount");
    v12 = v11 == 0;

    if (v12)
    {
      v13 = objc_msgSend(*(id *)(a1 + 48), "accountForService:", AIDAServiceTypeStore);
      objc_msgSend(*(id *)(a1 + 32), "setActiveStoreAccount:", v13);

    }
    objc_msgSend(*(id *)(a1 + 32), "_didSignInUsername:altDSID:", *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v2);
    v21 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v19 = 0;
      v17 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v3 = *(NSString **)(a1 + 40);
      }
      else if (*(_QWORD *)(a1 + 40))
      {
        v20 = objc_msgSend(*(id *)(a1 + 40), "domain");
        v19 = 1;
        v3 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v20, objc_msgSend(*(id *)(a1 + 40), "code"));
        v18 = v3;
        v17 = 1;
      }
      else
      {
        v3 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v3);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v21, "Sign-in failed: %{public}@", buf, 0xCu);
      if ((v17 & 1) != 0)

      if ((v19 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
    v4 = objc_msgSend(*(id *)(a1 + 32), "storeAppleIDController");
    v5 = objc_msgSend(v4, "authAttemptLandingViewController");

    if (v5)
    {
      v6 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
      v7 = objc_msgSend(*(id *)(a1 + 32), "storeAppleIDController");
      v8 = objc_msgSend(v7, "authAttemptLandingViewController");
      objc_msgSend(v6, "popToViewController:completion:", v8, 0);

    }
  }
}

void sub_1001719F0(NSObject *a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  _WORD v10[3];
  os_log_type_t v11;
  os_log_t v12;
  os_log_type_t v13;
  os_log_t v14;
  os_log_type_t v15;
  os_log_t v16;
  os_log_type_t v17;
  os_log_t oslog[2];
  id v19;
  id location[2];
  uint8_t v21[16];
  uint8_t v22[16];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v19 = 0;
  objc_storeStrong(&v19, a3);
  oslog[1] = a1;
  v5 = -[objc_class _stopSpinningForIdentifier:](a1[4].isa, "_stopSpinningForIdentifier:", CFSTR("family"));
  if (v19)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    v17 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      sub_100039500((uint64_t)buf, (uint64_t)v19);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v17, "Failed to look up family members: %{public}@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v6 = objc_msgSend(location[0], "count");
    if (v6)
    {
      v16 = (os_log_t)(id)_BYLoggingFacility(v6);
      v15 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        sub_100038C28((uint64_t)v22, (uint64_t)location[0]);
        _os_log_impl((void *)&_mh_execute_header, v16, v15, "Found family members: %@", v22, 0xCu);
      }
      objc_storeStrong((id *)&v16, 0);
      v14 = (os_log_t)(id)_BYLoggingFacility(-[objc_class _removeAccountsToSignIn:](a1[4].isa, "_removeAccountsToSignIn:", location[0]));
      v13 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v7 = -[objc_class storeAccountsToSignIn](a1[4].isa, "storeAccountsToSignIn");
        sub_100038C28((uint64_t)v21, (uint64_t)v7);
        _os_log_impl((void *)&_mh_execute_header, v14, v13, "Accounts to sign-in after removing family members: %@", v21, 0xCu);

      }
      objc_storeStrong((id *)&v14, 0);
    }
    else
    {
      v12 = (os_log_t)(id)_BYLoggingFacility(0);
      v11 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        v8 = v12;
        v9 = v11;
        sub_100038C3C(v10);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "Found no family members", (uint8_t *)v10, 2u);
      }
      objc_storeStrong((id *)&v12, 0);
    }
  }
  -[objc_class _authenticateThenSignInNextAccount](a1[4].isa, "_authenticateThenSignInNextAccount");
  objc_storeStrong(&v19, 0);
  objc_storeStrong(location, 0);
}

void sub_100172390(uint64_t a1)
{
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 32));
}

void sub_1001723B8(uint64_t a1, void *a2)
{
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(*(id *)(a1 + 32), "setMediaLinkedAccountDSID:", location[0]);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 40));
  objc_storeStrong(location, 0);
}

uint64_t sub_100172410(uint64_t result)
{
  uint64_t v1;
  id v2;

  v1 = result;
  if (*(_QWORD *)(result + 40))
  {
    v2 = objc_msgSend(*(id *)(result + 32), "storeAccountsToSignIn", result, result);
    objc_msgSend(v2, "count");

    return (*(uint64_t (**)(void))(*(_QWORD *)(v1 + 40) + 16))();
  }
  return result;
}

void sub_10017257C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t i;
  id v10;
  BuddyStoreAccount *v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  unint64_t v18;
  id v19;
  id v20;
  id v21;
  id v22;
  unsigned __int8 v23;
  BuddyStoreAccount *v24;
  BuddyStoreAccount *v25;
  id v26;
  id v27;
  id v28;
  id v29;
  id v30;
  id v31;
  id v32;
  id v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  id v40;
  id v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45;
  id v46;
  os_log_t v47;
  void **v48;
  int v49;
  int v50;
  uint64_t (*v51)(_QWORD *, void *);
  void *v52;
  id v53;
  id v54;
  id v55;
  id v56;
  os_log_type_t v57;
  os_log_t v58;
  os_log_type_t v59;
  os_log_t v60;
  os_log_type_t v61;
  os_log_t oslog;
  id v63;
  id v64;
  id v65;
  int v66;
  id v67;
  uint64_t j;
  uint64_t v69;
  id v70;
  void **v71;
  int v72;
  int v73;
  uint64_t (*v74)(_QWORD *, void *);
  void *v75;
  id v76;
  id v77;
  id v78;
  id v79;
  id v80;
  id v81;
  _QWORD __b[8];
  uint64_t v83;
  uint64_t v84;
  id v85;
  id location[2];
  uint8_t v87[16];
  uint8_t v88[16];
  uint8_t v89[16];
  uint8_t buf[24];
  _BYTE v91[128];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v85 = 0;
  objc_storeStrong(&v85, a3);
  v84 = a1;
  objc_msgSend(*(id *)(a1 + 32), "setStoreAccountMap:", location[0]);
  v5 = objc_alloc_init((Class)NSMutableArray);
  objc_msgSend(*(id *)(a1 + 32), "setStoreAccountsToSignIn:", v5);

  memset(__b, 0, sizeof(__b));
  v6 = objc_msgSend(location[0], "allKeys");
  v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", __b, v91, 16);
  if (v7)
  {
    v8 = *(_QWORD *)__b[2];
    do
    {
      for (i = 0; i < (unint64_t)v7; ++i)
      {
        if (*(_QWORD *)__b[2] != v8)
          objc_enumerationMutation(v6);
        v83 = *(_QWORD *)(__b[1] + 8 * i);
        v10 = objc_msgSend(*(id *)(a1 + 32), "storeAccountMap");
        v81 = objc_msgSend(v10, "objectForKeyedSubscript:", v83);

        v80 = objc_msgSend(v81, "objectForKeyedSubscript:", CFSTR("dsid"));
        v79 = objc_msgSend(v81, "objectForKeyedSubscript:", CFSTR("altDsid"));
        v11 = [BuddyStoreAccount alloc];
        v78 = -[BuddyStoreAccount initWithUsername:dsid:altDSID:](v11, "initWithUsername:dsid:altDSID:", v83, v80, v79);
        v12 = objc_msgSend(*(id *)(a1 + 32), "storeAccountsToSignIn");
        objc_msgSend(v12, "addObject:", v78);

        objc_storeStrong(&v78, 0);
        objc_storeStrong(&v79, 0);
        objc_storeStrong(&v80, 0);
        objc_storeStrong(&v81, 0);
      }
      v7 = objc_msgSend(v6, "countByEnumeratingWithState:objects:count:", __b, v91, 16);
    }
    while (v7);
  }

  v77 = 0;
  v13 = objc_msgSend(*(id *)(a1 + 32), "storeAccountsToSignIn");
  v71 = _NSConcreteStackBlock;
  v72 = -1073741824;
  v73 = 0;
  v74 = sub_100172F44;
  v75 = &unk_100283CC8;
  v76 = *(id *)(a1 + 32);
  v14 = objc_msgSend(v13, "indexOfObjectPassingTest:", &v71);

  v77 = v14;
  if (v14 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v15 = objc_msgSend(*(id *)(a1 + 32), "storeAccountsToSignIn");
    v70 = objc_msgSend(v15, "objectAtIndexedSubscript:", v77);

    v16 = objc_msgSend(*(id *)(a1 + 32), "storeAccountsToSignIn");
    objc_msgSend(v16, "removeObjectAtIndex:", v77);

    v17 = objc_msgSend(*(id *)(a1 + 32), "storeAccountsToSignIn");
    objc_msgSend(v17, "insertObject:atIndex:", v70, 0);

    objc_storeStrong(&v70, 0);
  }
  if (v85)
  {
    v69 = 0x7FFFFFFFFFFFFFFFLL;
    for (j = 0; ; ++j)
    {
      v18 = j;
      v19 = objc_msgSend(*(id *)(a1 + 32), "storeAccountsToSignIn");
      v20 = objc_msgSend(v19, "count");

      if (v18 >= (unint64_t)v20)
        break;
      v21 = objc_msgSend(*(id *)(a1 + 32), "storeAccountsToSignIn");
      v67 = objc_msgSend(v21, "objectAtIndexedSubscript:", j);

      v22 = objc_msgSend(v67, "username");
      v23 = objc_msgSend(v22, "isEqualToString:", v85);

      if ((v23 & 1) != 0)
      {
        v69 = j;
        v66 = 4;
      }
      else
      {
        v66 = 0;
      }
      objc_storeStrong(&v67, 0);
      if (v66)
        break;
    }
    v65 = 0;
    if (v69 == 0x7FFFFFFFFFFFFFFFLL)
    {
      v24 = [BuddyStoreAccount alloc];
      v25 = -[BuddyStoreAccount initWithUsername:dsid:altDSID:](v24, "initWithUsername:dsid:altDSID:", v85, 0, 0);
      v26 = v65;
      v65 = v25;

    }
    else
    {
      v28 = objc_msgSend(*(id *)(a1 + 32), "storeAccountsToSignIn");
      v29 = objc_msgSend(v28, "objectAtIndex:", v69);
      v30 = v65;
      v65 = v29;

      v31 = objc_msgSend(*(id *)(a1 + 32), "storeAccountsToSignIn");
      objc_msgSend(v31, "removeObject:", v65);

    }
    v27 = objc_msgSend(*(id *)(a1 + 32), "storeAccountsToSignIn");
    objc_msgSend(v27, "insertObject:atIndex:", v65, 0);

    objc_msgSend(*(id *)(a1 + 32), "setActiveBuddyStoreAccount:", v65);
    objc_storeStrong(&v65, 0);
  }
  v32 = objc_msgSend(*(id *)(a1 + 32), "_primaryAccountInfo");
  v64 = objc_msgSend(v32, "username");

  v33 = objc_msgSend(*(id *)(a1 + 32), "_primaryAccountInfo");
  v63 = objc_msgSend(v33, "altDSID");

  oslog = (os_log_t)(id)_BYLoggingFacility(v34);
  v61 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    v35 = objc_msgSend(*(id *)(a1 + 32), "storeAccountsToSignIn");
    sub_100038C28((uint64_t)buf, (uint64_t)v35);
    _os_log_impl((void *)&_mh_execute_header, oslog, v61, "Store accounts to sign in: %@", buf, 0xCu);

  }
  objc_storeStrong((id *)&oslog, 0);
  v60 = (os_log_t)(id)_BYLoggingFacility(v36);
  v59 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
  {
    sub_100038C28((uint64_t)v89, (uint64_t)v64);
    _os_log_impl((void *)&_mh_execute_header, v60, v59, "Primary Apple ID: %@", v89, 0xCu);
  }
  objc_storeStrong((id *)&v60, 0);
  v58 = (os_log_t)(id)_BYLoggingFacility(v37);
  v57 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    v38 = objc_msgSend(*(id *)(a1 + 32), "activeBuddyStoreAccount");
    sub_100038C28((uint64_t)v88, (uint64_t)v38);
    _os_log_impl((void *)&_mh_execute_header, v58, v57, "Active store account: %@", v88, 0xCu);

  }
  objc_storeStrong((id *)&v58, 0);
  v39 = objc_msgSend(*(id *)(a1 + 32), "_primaryAccountInfo");
  v56 = objc_msgSend(v39, "dsid");

  v55 = 0;
  v40 = objc_msgSend(*(id *)(a1 + 32), "storeAccountsToSignIn");
  v48 = _NSConcreteStackBlock;
  v49 = -1073741824;
  v50 = 0;
  v51 = sub_100172FF4;
  v52 = &unk_100283CF0;
  v53 = v63;
  v54 = v56;
  v41 = objc_msgSend(v40, "indexOfObjectPassingTest:", &v48);

  v55 = v41;
  if (v41 != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    v47 = (os_log_t)(id)_BYLoggingFacility(v42);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      v43 = objc_msgSend(*(id *)(a1 + 32), "storeAccountsToSignIn");
      v44 = objc_msgSend(v43, "objectAtIndexedSubscript:", v55);
      v45 = objc_msgSend(v44, "username");
      sub_100038C28((uint64_t)v87, (uint64_t)v45);
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Skipping owner account %@...", v87, 0xCu);

    }
    objc_storeStrong((id *)&v47, 0);
    v46 = objc_msgSend(*(id *)(a1 + 32), "storeAccountsToSignIn");
    objc_msgSend(v46, "removeObjectAtIndex:", v55);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_storeStrong(&v54, 0);
  objc_storeStrong(&v53, 0);
  objc_storeStrong(&v56, 0);
  objc_storeStrong(&v63, 0);
  objc_storeStrong(&v64, 0);
  objc_storeStrong(&v76, 0);
  objc_storeStrong(&v85, 0);
  objc_storeStrong(location, 0);
}

uint64_t sub_100172F44(_QWORD *a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = (void *)a1[4];
  v4 = objc_msgSend(location[0], "username");
  v5 = objc_msgSend(location[0], "altDSID");
  LOBYTE(v3) = objc_msgSend(v3, "_isPrimaryAccountWithUsername:orAltDSID:", v4, v5);

  objc_storeStrong(location, 0);
  return v3 & 1;
}

uint64_t sub_100172FF4(_QWORD *a1, void *a2)
{
  id v3;
  unsigned __int8 v4;
  id v5;
  id location[2];
  char v8;

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(location[0], "altDSID");
  v4 = objc_msgSend(v3, "isEqualToString:", a1[4]);

  if ((v4 & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    v5 = objc_msgSend(location[0], "dsid");
    v8 = objc_msgSend(v5, "isEqualToString:", a1[5]) & 1;

  }
  objc_storeStrong(location, 0);
  return v8 & 1;
}

void sub_1001735D0(id *a1, void *a2)
{
  void *v3;
  void **v4;
  int v5;
  int v6;
  void (*v7);
  void *v8;
  id v9;
  id v10[3];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[2] = a1;
  v3 = &_dispatch_main_q;
  v4 = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_1001736C8;
  v8 = &unk_100283D40;
  v10[1] = a1[5];
  v10[0] = a1[4];
  v9 = location[0];
  dispatch_async((dispatch_queue_t)v3, &v4);

  objc_storeStrong(&v9, 0);
  objc_storeStrong(v10, 0);
  objc_storeStrong(location, 0);
}

void sub_1001736C8(NSObject *a1)
{
  id v2;
  unsigned __int8 v3;
  uint64_t v4;
  id v5;
  Class isa;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _WORD v12[3];
  char v13;
  os_log_t v14;
  uint8_t v15[7];
  os_log_type_t v16;
  os_log_t v17;
  os_log_type_t v18;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = a1;
  oslog[1] = a1;
  if ((*(_BYTE *)(*((_QWORD *)a1[6].isa + 1) + 24) & 1) == 0)
  {
    *(_BYTE *)(*((_QWORD *)a1[6].isa + 1) + 24) = 1;
    if (a1[5].isa)
    {
      v2 = -[objc_class value](a1[4].isa, "value");
      v3 = objc_msgSend(v2, "BOOLValue");

      if ((v3 & 1) != 0)
      {
        oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
        v18 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
        {
          v5 = -[objc_class value](a1[4].isa, "value");
          sub_100039500((uint64_t)buf, (uint64_t)v5);
          _os_log_impl((void *)&_mh_execute_header, oslog[0], v18, "Media linked account result: %{public}@", buf, 0xCu);

        }
        objc_storeStrong((id *)oslog, 0);
        isa = a1[5].isa;
        v7 = -[objc_class value](a1[4].isa, "value");
        (*((void (**)(Class, id))isa + 2))(isa, v7);

      }
      else
      {
        v17 = (os_log_t)(id)_BYLoggingFacility(v4);
        v16 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v8 = v17;
          v9 = v16;
          sub_100038C3C(v15);
          _os_log_impl((void *)&_mh_execute_header, v8, v9, "No media linked account found", v15, 2u);
        }
        objc_storeStrong((id *)&v17, 0);
        (*((void (**)(void))a1[5].isa + 2))();
      }
    }
    else
    {
      v14 = (os_log_t)(id)_BYLoggingFacility(a1);
      v13 = 16;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        v10 = v14;
        v11 = v13;
        sub_100038C3C(v12);
        _os_log_error_impl((void *)&_mh_execute_header, v10, v11, "Completion handler missing.", (uint8_t *)v12, 2u);
      }
      objc_storeStrong((id *)&v14, 0);
    }
  }
}

void sub_100173934(NSObject *a1, void *a2, void *a3)
{
  uint64_t v5;
  NSString *v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t v9[7];
  os_log_type_t v10;
  os_log_t v11;
  char v12;
  id v13;
  char v14;
  id v15;
  os_log_type_t v16;
  os_log_t oslog[2];
  id v18;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v18 = 0;
  objc_storeStrong(&v18, a3);
  oslog[1] = a1;
  if (v18)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    v16 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v14 = 0;
      v12 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v6 = (NSString *)v18;
      }
      else if (v18)
      {
        v15 = objc_msgSend(v18, "domain");
        v14 = 1;
        v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v15, objc_msgSend(v18, "code"));
        v13 = v6;
        v12 = 1;
      }
      else
      {
        v6 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v6);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v16, "AMS cache update failed to resolve with error: %{public}@", buf, 0xCu);
      if ((v12 & 1) != 0)

      if ((v14 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
    (*((void (**)(void))a1[4].isa + 2))();
  }
  else
  {
    v11 = (os_log_t)(id)_BYLoggingFacility(v5);
    v10 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      v7 = v11;
      v8 = v10;
      sub_100038C3C(v9);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "AMS cache updated", v9, 2u);
    }
    objc_storeStrong((id *)&v11, 0);
    (*((void (**)(void))a1[4].isa + 2))();
  }
  objc_storeStrong(&v18, 0);
  objc_storeStrong(location, 0);
}

void sub_100173BA4(NSObject *a1, void *a2, void *a3)
{
  uint64_t v5;
  NSString *v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t v12[7];
  os_log_type_t v13;
  os_log_t v14;
  uint8_t v15[7];
  os_log_type_t v16;
  os_log_t v17;
  char v18;
  id v19;
  char v20;
  id v21;
  os_log_type_t v22;
  os_log_t oslog[2];
  id v24;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v24 = 0;
  objc_storeStrong(&v24, a3);
  oslog[1] = a1;
  if (v24)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    v22 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v20 = 0;
      v18 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v6 = (NSString *)v24;
      }
      else if (v24)
      {
        v21 = objc_msgSend(v24, "domain");
        v20 = 1;
        v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v21, objc_msgSend(v24, "code"));
        v19 = v6;
        v18 = 1;
      }
      else
      {
        v6 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v6);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v22, "AMS cache promise failure to resolve with error: %{public}@", buf, 0xCu);
      if ((v18 & 1) != 0)

      if ((v20 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
    (*((void (**)(void))a1[4].isa + 2))();
  }
  else
  {
    v7 = objc_msgSend(location[0], "isStale");
    if ((v7 & 1) != 0)
    {
      v17 = (os_log_t)(id)_BYLoggingFacility(v7);
      v16 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        v8 = v17;
        v9 = v16;
        sub_100038C3C(v15);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "AMS cache promise resolved with stale response. Wait for update.", v15, 2u);
      }
      objc_storeStrong((id *)&v17, 0);
    }
    else
    {
      v14 = (os_log_t)(id)_BYLoggingFacility(v7);
      v13 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        v10 = v14;
        v11 = v13;
        sub_100038C3C(v12);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "AMS cache promise resolved with non-stale response", v12, 2u);
      }
      objc_storeStrong((id *)&v14, 0);
      (*((void (**)(void))a1[4].isa + 2))();
    }
  }
  objc_storeStrong(&v24, 0);
  objc_storeStrong(location, 0);
}

void sub_100175630(NSObject *a1)
{
  id v2;
  char v3;
  uint64_t v4;
  id v5;
  id v6;
  id location;
  os_log_type_t v8;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = a1;
  oslog[1] = a1;
  v2 = -[objc_class delegate](a1[4].isa, "delegate");
  v3 = objc_opt_respondsToSelector(v2, "proximityAutomatedDeviceEnrollmentController:wantsToDismissPairingWithError:") ^ 1;

  if ((v3 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v8 = OS_LOG_TYPE_FAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_FAULT))
    {
      v5 = -[objc_class delegate](a1[4].isa, "delegate");
      location = NSStringFromSelector("proximityAutomatedDeviceEnrollmentController:wantsToDismissPairingWithError:");
      sub_10003A6BC((uint64_t)buf, (uint64_t)v5, (uint64_t)location);
      _os_log_fault_impl((void *)&_mh_execute_header, oslog[0], v8, "%{public}@ does not respond to %{public}@, bailing out.", buf, 0x16u);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v6 = -[objc_class delegate](a1[4].isa, "delegate");
    objc_msgSend(v6, "proximityAutomatedDeviceEnrollmentController:wantsToDismissPairingWithError:", a1[4].isa, a1[5].isa);

  }
}

void sub_1001758B8(NSObject *a1)
{
  id v2;
  char v3;
  uint64_t v4;
  id v5;
  id v6;
  id location;
  os_log_type_t v8;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = a1;
  oslog[1] = a1;
  v2 = -[objc_class delegate](a1[4].isa, "delegate");
  v3 = objc_opt_respondsToSelector(v2, "proximityAutomatedDeviceEnrollmentController:wantsToTransitionToPairingWithPin:") ^ 1;

  if ((v3 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v8 = OS_LOG_TYPE_FAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_FAULT))
    {
      v5 = -[objc_class delegate](a1[4].isa, "delegate");
      location = NSStringFromSelector("proximityAutomatedDeviceEnrollmentController:wantsToTransitionToPairingWithPin:");
      sub_10003A6BC((uint64_t)buf, (uint64_t)v5, (uint64_t)location);
      _os_log_fault_impl((void *)&_mh_execute_header, oslog[0], v8, "%{public}@ does not respond to %{public}@, bailing out.", buf, 0x16u);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v6 = -[objc_class delegate](a1[4].isa, "delegate");
    objc_msgSend(v6, "proximityAutomatedDeviceEnrollmentController:wantsToTransitionToPairingWithPin:", a1[4].isa, a1[5].isa);

  }
}

void sub_100175B40(NSObject *a1)
{
  id v2;
  char v3;
  uint64_t v4;
  id v5;
  id v6;
  id location;
  os_log_type_t v8;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = a1;
  oslog[1] = a1;
  -[objc_class setCurrentEnrollmentStatusViewModel:](a1[4].isa, "setCurrentEnrollmentStatusViewModel:", a1[5].isa);
  v2 = -[objc_class delegate](a1[4].isa, "delegate");
  v3 = objc_opt_respondsToSelector(v2, "proximityAutomatedDeviceEnrollmentController:wantsToTransitionToEnrollmentWithInitialViewModel:") ^ 1;

  if ((v3 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v8 = OS_LOG_TYPE_FAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_FAULT))
    {
      v5 = -[objc_class delegate](a1[4].isa, "delegate");
      location = NSStringFromSelector("proximityAutomatedDeviceEnrollmentController:wantsToTransitionToEnrollmentWithInitialViewModel:");
      sub_10003A6BC((uint64_t)buf, (uint64_t)v5, (uint64_t)location);
      _os_log_fault_impl((void *)&_mh_execute_header, oslog[0], v8, "%{public}@ does not respond to %{public}@, bailing out.", buf, 0x16u);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v6 = -[objc_class delegate](a1[4].isa, "delegate");
    objc_msgSend(v6, "proximityAutomatedDeviceEnrollmentController:wantsToTransitionToEnrollmentWithInitialViewModel:", a1[4].isa, a1[5].isa);

  }
}

void sub_100175DD4(NSObject *a1)
{
  id v2;
  char v3;
  uint64_t v4;
  id v5;
  id v6;
  id location;
  os_log_type_t v8;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = a1;
  oslog[1] = a1;
  -[objc_class setCurrentEnrollmentStatusViewModel:](a1[4].isa, "setCurrentEnrollmentStatusViewModel:", a1[5].isa);
  v2 = -[objc_class delegate](a1[4].isa, "delegate");
  v3 = objc_opt_respondsToSelector(v2, "proximityAutomatedDeviceEnrollmentController:hasEnrollmentStatusViewModelUpdate:") ^ 1;

  if ((v3 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v8 = OS_LOG_TYPE_FAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_FAULT))
    {
      v5 = -[objc_class delegate](a1[4].isa, "delegate");
      location = NSStringFromSelector("proximityAutomatedDeviceEnrollmentController:hasEnrollmentStatusViewModelUpdate:");
      sub_10003A6BC((uint64_t)buf, (uint64_t)v5, (uint64_t)location);
      _os_log_fault_impl((void *)&_mh_execute_header, oslog[0], v8, "%{public}@ does not respond to %{public}@, bailing out.", buf, 0x16u);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v6 = -[objc_class delegate](a1[4].isa, "delegate");
    objc_msgSend(v6, "proximityAutomatedDeviceEnrollmentController:hasEnrollmentStatusViewModelUpdate:", a1[4].isa, a1[5].isa);

  }
}

void sub_1001760BC(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  (*(void (**)(_QWORD, BOOL, id))(a1[4] + 16))(a1[4], location[0] == 0, location[0]);
  objc_storeStrong(location, 0);
}

void sub_1001761F4(NSObject *a1)
{
  id v2;
  char v3;
  uint64_t v4;
  id v5;
  id v6;
  id location;
  os_log_type_t v8;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = a1;
  oslog[1] = a1;
  v2 = -[objc_class delegate](a1[4].isa, "delegate");
  v3 = objc_opt_respondsToSelector(v2, "proximityAutomatedDeviceEnrollmentControllerWantsToTransitionToCompletion:") ^ 1;

  if ((v3 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v8 = OS_LOG_TYPE_FAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_FAULT))
    {
      v5 = -[objc_class delegate](a1[4].isa, "delegate");
      location = NSStringFromSelector("proximityAutomatedDeviceEnrollmentControllerWantsToTransitionToCompletion:");
      sub_10003A6BC((uint64_t)buf, (uint64_t)v5, (uint64_t)location);
      _os_log_fault_impl((void *)&_mh_execute_header, oslog[0], v8, "%{public}@ does not respond to %{public}@, bailing out.", buf, 0x16u);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v6 = -[objc_class delegate](a1[4].isa, "delegate");
    objc_msgSend(v6, "proximityAutomatedDeviceEnrollmentControllerWantsToTransitionToCompletion:", a1[4].isa);

  }
}

void sub_100176434(NSObject *a1)
{
  id v2;
  char v3;
  uint64_t v4;
  id v5;
  id v6;
  id location;
  os_log_type_t v8;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = a1;
  oslog[1] = a1;
  v2 = -[objc_class delegate](a1[4].isa, "delegate");
  v3 = objc_opt_respondsToSelector(v2, "proximityAutomatedDeviceEnrollmentControllerWantsToDisplayShutdownUI:") ^ 1;

  if ((v3 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v8 = OS_LOG_TYPE_FAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_FAULT))
    {
      v5 = -[objc_class delegate](a1[4].isa, "delegate");
      location = NSStringFromSelector("proximityAutomatedDeviceEnrollmentControllerWantsToDisplayShutdownUI:");
      sub_10003A6BC((uint64_t)buf, (uint64_t)v5, (uint64_t)location);
      _os_log_fault_impl((void *)&_mh_execute_header, oslog[0], v8, "%{public}@ does not respond to %{public}@, bailing out.", buf, 0x16u);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v6 = -[objc_class delegate](a1[4].isa, "delegate");
    objc_msgSend(v6, "proximityAutomatedDeviceEnrollmentControllerWantsToDisplayShutdownUI:", a1[4].isa);

  }
}

void sub_10017794C(id *a1, void *a2)
{
  void *v3;
  void **v4;
  int v5;
  int v6;
  void (*v7)(uint64_t);
  void *v8;
  id v9;
  id v10;
  int v11;
  id *v12;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v12 = a1;
  if (objc_msgSend(location[0], "length"))
  {
    v3 = &_dispatch_main_q;
    v4 = _NSConcreteStackBlock;
    v5 = -1073741824;
    v6 = 0;
    v7 = sub_100177A58;
    v8 = &unk_100280D00;
    v9 = location[0];
    v10 = a1[4];
    dispatch_async((dispatch_queue_t)v3, &v4);

    objc_storeStrong(&v10, 0);
    objc_storeStrong(&v9, 0);
    v11 = 0;
  }
  else
  {
    v11 = 1;
  }
  objc_storeStrong(location, 0);
}

void sub_100177A58(uint64_t a1)
{
  NSBundle *v2;
  NSString *v3;
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  v2 = +[NSBundle mainBundle](NSBundle, "mainBundle");
  v3 = -[NSBundle localizedStringForKey:value:table:](v2, "localizedStringForKey:value:table:", CFSTR("MIGRATING_TITLE_SOURCE_WITH_NAME"), &stru_100284738, CFSTR("Migration"));
  location[0] = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", v3, *(_QWORD *)(a1 + 32));

  objc_msgSend(*(id *)(a1 + 40), "setProgressTitle:", location[0]);
  objc_storeStrong(location, 0);
}

void sub_100177CF8(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "migrationSourceClient", a1, a1);
  objc_msgSend(v1, "cancel");

}

void sub_100177EEC(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  void **v5;
  int v6;
  int v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10[3];

  v10[2] = (id)a1;
  v10[1] = (id)a1;
  objc_msgSend(*(id *)(a1 + 32), "setError:", *(_QWORD *)(a1 + 40));
  v2 = objc_msgSend(*(id *)(a1 + 32), "presentedViewController");

  if (v2)
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "presentedViewController");
    v5 = _NSConcreteStackBlock;
    v6 = -1073741824;
    v7 = 0;
    v8 = sub_100178000;
    v9 = &unk_100280730;
    v10[0] = *(id *)(a1 + 32);
    objc_msgSend(v3, "dismissViewControllerAnimated:completion:", 1, &v5);

    objc_storeStrong(v10, 0);
  }
  else
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "delegate");
    objc_msgSend(v4, "flowItemDone:", *(_QWORD *)(a1 + 32));

  }
}

void sub_100178000(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "delegate", a1, a1);
  objc_msgSend(v2, "flowItemDone:", *(_QWORD *)(a1 + 32));

}

void sub_10017907C(id *a1, void *a2, void *a3)
{
  UIApplication *v5;
  char *v6;
  BOOL v7;
  uint64_t IntegerValue;
  id v9;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v9 = 0;
  objc_storeStrong(&v9, a3);
  v5 = +[UIApplication sharedApplication](UIApplication, "sharedApplication");
  v6 = -[UIApplication applicationState](v5, "applicationState");

  if ((!v6 || (unint64_t)(v6 - 1) >= 2)
    && IOHIDEventGetType(v9) == 3
    && IOHIDEventGetIntegerValue(v9, 196610))
  {
    IntegerValue = IOHIDEventGetIntegerValue(v9, 196609);
    v7 = 1;
    if (IntegerValue != 48)
    {
      v7 = 1;
      if (IntegerValue != 64)
      {
        v7 = 1;
        if (IntegerValue != 233)
        {
          v7 = 1;
          if (IntegerValue != 234)
            v7 = IntegerValue == 149;
        }
      }
    }
    objc_msgSend(a1[4], "setAnyButtonPressed:", v7);
  }
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

id *sub_100179EA4(id *result, char a2)
{
  if ((a2 & 1) != 0)
    return (id *)objc_msgSend(result[4], "selectChoice:", result[5]);
  return result;
}

void sub_10017B3FC(id *a1, void *a2)
{
  NSFileManager *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = +[NSFileManager defaultManager](NSFileManager, "defaultManager");
  -[NSFileManager removeItemAtPath:error:](v3, "removeItemAtPath:error:", CFSTR("/var/mobile/Media/iTunes_Control/iTunes/ShowLicense"), 0);

  +[BYWarranty acknowledge](BYWarranty, "acknowledge");
  v4 = objc_msgSend(a1[4], "iOSTermsController");

  if (v4)
  {
    v5 = objc_msgSend(a1[4], "iOSTermsController");
    objc_msgSend(v5, "didAgree");

  }
  v6 = objc_msgSend(a1[5], "navigationController");
  objc_msgSend(v6, "dismissViewControllerAnimated:completion:", 1, 0);

  v7 = objc_msgSend(a1[4], "delegate");
  objc_msgSend(v7, "flowItemDone:", a1[4]);

  objc_storeStrong(location, 0);
}

void sub_10017B918(uint64_t a1, void *a2, void *a3)
{
  NSDate *v5;
  dispatch_time_t v6;
  void *v7;
  id v8;
  void **v9;
  uint64_t v10;
  void (*v11)(uint64_t);
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16[2];
  id v17;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v17 = 0;
  objc_storeStrong(&v17, a3);
  v16[1] = (id)a1;
  v16[0] = objc_msgSend(location[0], "preferredDescriptor");
  v15 = objc_msgSend(location[0], "latestUpdate");
  objc_msgSend(*(id *)(a1 + 32), "setPreferredUpdate:", v16[0]);
  objc_msgSend(*(id *)(a1 + 32), "setLatestUpdate:", v15);
  v5 = +[NSDate date](NSDate, "date");
  objc_msgSend(*(id *)(a1 + 32), "setLastScanDate:", v5);

  v6 = dispatch_time(0, 300000000000);
  v7 = &_dispatch_main_q;
  v9 = _NSConcreteStackBlock;
  v10 = 3221225472;
  v11 = sub_10017BB60;
  v12 = &unk_100280D00;
  v13 = *(id *)(a1 + 32);
  v14 = v16[0];
  dispatch_after(v6, (dispatch_queue_t)v7, &v9);

  if (*(_QWORD *)(a1 + 40))
  {
    v8 = objc_msgSend(v17, "domain", v9, v10, v11, v12, v13);
    if ((objc_msgSend(v8, "isEqualToString:", SUErrorDomain) & 1) != 0)
      objc_msgSend(v17, "code");

    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v15, 0);
  objc_storeStrong(v16, 0);
  objc_storeStrong(&v17, 0);
  objc_storeStrong(location, 0);
}

void sub_10017BB60(uint64_t a1)
{
  id v2;
  unsigned __int8 v3;

  v2 = objc_msgSend(*(id *)(a1 + 32), "preferredUpdate", a1, a1);
  v3 = objc_msgSend(v2, "isEqual:", *(_QWORD *)(a1 + 40));

  if ((v3 & 1) != 0)
    objc_msgSend(*(id *)(a1 + 32), "reset");
}

void sub_10017BFE4(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v9 = 0;
  objc_storeStrong(&v9, a3);
  v8 = 0;
  objc_storeStrong(&v8, a4);
  if ((*(_BYTE *)(a1 + 48) & 1) != 0 && (objc_msgSend(*(id *)(a1 + 32), "BOOLValue") & 1) != 0)
  {
    v7 = +[CTCellularPlanManager sharedManager](CTCellularPlanManager, "sharedManager");
    objc_msgSend(v7, "setUserInPurchaseFlow:", 0);

  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  objc_storeStrong(&v8, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_10017C3B4(uint64_t a1, void *a2, void *a3, void *a4)
{
  dispatch_time_t v7;
  void *v8;
  void **v9;
  int v10;
  int v11;
  id (*v12)(uint64_t);
  void *v13;
  id v14;
  id v15[3];
  char v16;
  char v17;
  os_log_type_t v18;
  os_log_t oslog;
  uint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  id location[2];
  uint8_t buf[24];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v23 = 0;
  objc_storeStrong(&v23, a3);
  v22 = 0;
  objc_storeStrong(&v22, a4);
  v21 = a1;
  if (v22 && *(_QWORD *)(a1 + 48) < *(_QWORD *)(a1 + 56))
  {
    v20 = 0;
    v20 = (uint64_t)objc_msgSend(*(id *)(a1 + 32), "_retryDelaySecondsForAttemptCount:", *(_QWORD *)(a1 + 48));
    oslog = (os_log_t)(id)_BYLoggingFacility(v20);
    v18 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000342B4((uint64_t)buf, v20);
      _os_log_impl((void *)&_mh_execute_header, oslog, v18, "Software update scan failed; will retry in %ld seconds...",
        buf,
        0xCu);
    }
    objc_storeStrong((id *)&oslog, 0);
    v7 = dispatch_time(0, 1000000000 * v20);
    v8 = &_dispatch_main_q;
    v9 = _NSConcreteStackBlock;
    v10 = -1073741824;
    v11 = 0;
    v12 = sub_10017C638;
    v13 = &unk_100283E30;
    v14 = *(id *)(a1 + 32);
    v16 = *(_BYTE *)(a1 + 64) & 1;
    v17 = *(_BYTE *)(a1 + 65) & 1;
    v15[1] = *(id *)(a1 + 48);
    v15[2] = *(id *)(a1 + 56);
    v15[0] = *(id *)(a1 + 40);
    dispatch_after(v7, (dispatch_queue_t)v8, &v9);

    objc_storeStrong(v15, 0);
    objc_storeStrong(&v14, 0);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  objc_storeStrong(&v22, 0);
  objc_storeStrong(&v23, 0);
  objc_storeStrong(location, 0);
}

id sub_10017C638(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_scanUsingCache:allowBootstrap:attemptCount:attemptsAllowed:withCompletion:", *(_BYTE *)(a1 + 64) & 1, *(_BYTE *)(a1 + 65) & 1, *(_QWORD *)(a1 + 48) + 1, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 40), a1, a1);
}

void sub_10017C888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, id location)
{
  uint64_t v13;

  objc_storeStrong(&location, 0);
  objc_storeStrong((id *)(v13 - 24), 0);
  _Unwind_Resume(a1);
}

void sub_10017D30C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_10017D620(a1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10017D31C(uint64_t *a1, unint64_t a2)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;

  v10 = a1;
  v9 = a2;
  result = (uint64_t *)sub_10017EC98(a1);
  if (a2 > (unint64_t)result)
  {
    if (v9 > sub_10017ECDC((uint64_t)a1))
      sub_10017ED40();
    sub_10017ED54();
    v8 = v5;
    v6 = sub_10017ED7C(a1);
    sub_10017EDA4(v7, v9, v6, v8);
    sub_10017EDF0(a1, v7);
    return sub_10017EEF4((uint64_t *)v7);
  }
  return result;
}

_QWORD *sub_10017D3E4(_QWORD *a1)
{
  sub_100181408(a1);
  return a1;
}

void **sub_10017D418(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;

  v10 = a1;
  v9 = a2;
  result = (void **)sub_100180B68(a1);
  if (a2 > (unint64_t)result)
  {
    if (v9 > sub_10017FF38((uint64_t)a1))
      sub_10017FF98();
    sub_10017FFEC();
    v8 = v5;
    v6 = sub_10017FBF8(a1);
    sub_100181598(v7, v9, v6, v8);
    sub_1001815E4(a1, v7);
    return sub_1001816E8(v7);
  }
  return result;
}

uint64_t sub_10017D4E0(uint64_t *a1, void **a2, float32x4_t *a3)
{
  unint64_t *v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;

  v6 = a1[1];
  sub_100180014();
  if (v6 >= *v4)
  {
    result = sub_100182230(a1, a2, a3);
    v7 = result;
  }
  else
  {
    result = (uint64_t)sub_10018218C((uint64_t)a1, a2, a3);
    v7 = v6 + 64;
  }
  a1[1] = v7;
  return result;
}

uint64_t sub_10017D56C(uint64_t *a1, uint64_t *a2)
{
  unint64_t *v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  v5 = a1[1];
  sub_10017F724();
  if (v5 >= *v3)
  {
    result = sub_100183074(a1, a2);
    v6 = result;
  }
  else
  {
    result = (uint64_t)sub_100182FDC((uint64_t)a1, a2);
    v6 = v5 + 24;
  }
  a1[1] = v6;
  return result;
}

uint64_t *sub_10017D5EC(uint64_t *a1)
{
  sub_100181558(a1);
  return a1;
}

void sub_10017D620(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

float sub_10017D630(float a1)
{
  return powf(a1, 3.0);
}

_QWORD *sub_10017E488(_QWORD *a1)
{
  sub_10018333C(a1);
  return a1;
}

uint64_t sub_10017E4BC(uint64_t *a1)
{
  return sub_100183878((uint64_t)a1, *a1);
}

uint64_t sub_10017E4EC(uint64_t a1)
{
  return sub_100183878(a1, *(_QWORD *)(a1 + 8));
}

BOOL sub_10017E51C(uint64_t a1, uint64_t a2)
{
  return !sub_100183904(a1, a2);
}

uint64_t sub_10017E550(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *sub_10017E568(_QWORD *a1)
{
  sub_100183964(a1);
  return a1;
}

uint64_t sub_10017E59C(uint64_t *a1)
{
  return sub_100183E8C((uint64_t)a1, *a1);
}

uint64_t sub_10017E5CC(uint64_t a1)
{
  return sub_100183E8C(a1, *(_QWORD *)(a1 + 8));
}

BOOL sub_10017E5FC(uint64_t a1, uint64_t a2)
{
  return !sub_100183F18(a1, a2);
}

uint64_t sub_10017E630(uint64_t a1)
{
  return *(_QWORD *)a1;
}

double sub_10017E648(float32x4_t *a1, float a2)
{
  float v2;
  double result;

  v2 = 1.0 - a2;
  __asm { FMOV            V2.4S, #3.0 }
  *(_QWORD *)&result = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(vmulq_n_f32(vmulq_n_f32(*a1, v2), v2), v2), vmulq_n_f32(vmulq_n_f32(vmulq_n_f32(vmulq_f32(a1[1], _Q2), a2), v2), v2)), vmulq_n_f32(vmulq_n_f32(vmulq_n_f32(vmulq_f32(a1[2], _Q2), a2), a2), v2)), vmulq_n_f32(vmulq_n_f32(vmulq_n_f32(a1[3], a2), a2), a2)).u64[0];
  return result;
}

double sub_10017E720(float32x4_t *a1, float a2)
{
  float v2;
  double result;
  float32x4_t v12;

  v2 = 1.0 - a2;
  __asm
  {
    FMOV            V2.4S, #-3.0
    FMOV            V3.4S, #3.0
    FMOV            V4.4S, #-6.0
  }
  v12 = vmulq_n_f32(vmulq_n_f32(vmulq_f32(a1[1], _Q4), v2), a2);
  __asm { FMOV            V4.4S, #6.0 }
  *(_QWORD *)&result = vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(vmulq_n_f32(vmulq_f32(*a1, _Q2), v2), v2), vmulq_n_f32(vmulq_n_f32(vmulq_f32(a1[1], _Q3), v2), v2)), v12), vmulq_n_f32(vmulq_n_f32(vmulq_f32(a1[2], _Q4), v2), a2)), vmulq_n_f32(vmulq_n_f32(vmulq_f32(a1[2], _Q2), a2), a2)), vmulq_n_f32(vmulq_n_f32(vmulq_f32(a1[3], _Q3), a2), a2)).u64[0];
  return result;
}

uint64_t sub_10017E844()
{
  return 0;
}

uint64_t sub_10017E864(uint64_t *a1, _QWORD *a2)
{
  unint64_t *v3;
  uint64_t result;
  unint64_t v5;
  uint64_t v6;

  v5 = a1[1];
  sub_100183F78();
  if (v5 >= *v3)
  {
    result = sub_100184038(a1, a2);
    v6 = result;
  }
  else
  {
    result = (uint64_t)sub_100183FA0((uint64_t)a1, a2);
    v6 = v5 + 24;
  }
  a1[1] = v6;
  return result;
}

uint64_t sub_10017E8E4(uint64_t *a1, double *a2, double *a3, double *a4, double *a5)
{
  unint64_t *v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;

  v8 = a1[1];
  sub_100184398();
  if (v8 >= *v6)
  {
    result = sub_10018634C(a1, a2, a3, a4, a5);
    v9 = result;
  }
  else
  {
    result = (uint64_t)sub_100186298((uint64_t)a1, a2, a3, a4, a5);
    v9 = v8 + 24;
  }
  a1[1] = v9;
  return result;
}

_QWORD *sub_10017E988(_QWORD *result)
{
  *result += 64;
  return result;
}

uint64_t *sub_10017E9A8(uint64_t *a1)
{
  sub_100183AD0(a1);
  return a1;
}

_QWORD *sub_10017E9DC(_QWORD *result)
{
  *result += 24;
  return result;
}

uint64_t sub_10017E9FC(uint64_t *a1)
{
  return sub_1001871E8((uint64_t)a1, *a1);
}

uint64_t sub_10017EA2C(uint64_t a1)
{
  return sub_1001871E8(a1, *(_QWORD *)(a1 + 8));
}

BOOL sub_10017EA5C(uint64_t a1, uint64_t a2)
{
  return !sub_100187274(a1, a2);
}

uint64_t sub_10017EA90(uint64_t a1)
{
  return *(_QWORD *)a1;
}

BOOL sub_10017EAA8(_QWORD *a1)
{
  return *a1 == a1[1];
}

uint64_t sub_10017EAD0(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t sub_10017EAE8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) - 24;
}

uint64_t sub_10017EB04(_QWORD *a1)
{
  return (a1[1] - *a1) / 24;
}

uint64_t sub_10017EB2C(_QWORD *a1, uint64_t a2)
{
  return *a1 + 24 * a2;
}

float sub_10017EB54(float a1, float a2)
{
  return atan2f(a1, a2);
}

_QWORD *sub_10017EB80(_QWORD *result)
{
  *result += 24;
  return result;
}

uint64_t *sub_10017EBA0(uint64_t *a1)
{
  sub_1001834A8(a1);
  return a1;
}

uint64_t *sub_10017EC00(uint64_t *a1)
{
  sub_100187424(a1);
  return a1;
}

_QWORD *sub_10017EC64(_QWORD *a1)
{
  sub_1001872D4(a1);
  return a1;
}

uint64_t sub_10017EC98(_QWORD *a1)
{
  _QWORD *v2;

  sub_10017EF28();
  return (*v2 - *a1) / 24;
}

uint64_t sub_10017ECDC(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[2];

  v3[1] = a1;
  sub_10017EFD8();
  sub_10017EFB4();
  v3[0] = 0xAAAAAAAAAAAAAAALL;
  sub_10017F000();
  v2 = 0x7FFFFFFFFFFFFFFFLL;
  return *sub_10017EF88(v3, &v2);
}

void sub_10017ED30(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
  __cxa_call_unexpected(a1);
}

void sub_10017ED40()
{
  sub_10017F0D4();
}

void sub_10017ED54()
{
  sub_10017F1C8();
}

uint64_t sub_10017ED7C(_QWORD *a1)
{
  return (a1[1] - *a1) / 24;
}

void **sub_10017EDA4(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10017F200(a1, a2, a3, a4);
  return a1;
}

void sub_10017EDF0(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11[2];
  uint64_t v12[2];
  uint64_t v13[2];
  _QWORD v14[2];
  _QWORD *v15;
  uint64_t *v16;

  v16 = a1;
  v15 = a2;
  sub_10017F570();
  sub_10017ED54();
  v4 = v3;
  sub_10017F694(v13, a1[1]);
  sub_10017F694(v12, *a1);
  sub_10017F694(v11, v15[1]);
  v5 = sub_10017F580(v4, v13[0], v13[1], v12[0], v12[1], v11[0], v11[1]);
  v14[1] = v6;
  v14[0] = v5;
  v7 = sub_10017F6D0((uint64_t)v14);
  v15[1] = v7;
  sub_10017F6E8(a1, v15 + 1);
  sub_10017F6E8(a1 + 1, v15 + 2);
  sub_10017F724();
  v9 = v8;
  sub_10017F368();
  sub_10017F6E8(v9, v10);
  *v15 = v15[1];
  sub_10017ED7C(a1);
  sub_10017F74C();
}

uint64_t *sub_10017EEF4(uint64_t *a1)
{
  sub_1001811AC(a1);
  return a1;
}

void sub_10017EF28()
{
  sub_10017EF50();
}

void sub_10017EF50()
{
  sub_10017EF74();
}

_QWORD *sub_10017EF88(_QWORD *a1, _QWORD *a2)
{
  return sub_10017F014(a1, a2);
}

void sub_10017EFB4()
{
  sub_10017F088();
}

void sub_10017EFD8()
{
  sub_10017F098();
}

uint64_t sub_10017F000()
{
  return nullsub_2();
}

_QWORD *sub_10017F014(_QWORD *a1, _QWORD *a2)
{
  char v5;

  if (sub_10017F054((uint64_t)&v5, a2, a1))
    return a2;
  else
    return a1;
}

BOOL sub_10017F054(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return *a2 < *a3;
}

void sub_10017F098()
{
  sub_10017F0BC();
}

void sub_10017F0D4()
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_10017F13C(exception, "vector");
}

void sub_10017F124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object)
{
  void *v12;

  __cxa_free_exception(v12);
  _Unwind_Resume(a1);
}

std::logic_error *sub_10017F13C(std::logic_error *a1, const char *a2)
{
  sub_10017F178(a1, a2);
  return a1;
}

std::logic_error *sub_10017F178(std::logic_error *a1, const char *a2)
{
  std::logic_error::logic_error(a1, a2);
  return a1;
}

void sub_10017F1C8()
{
  sub_10017F1EC();
}

void **sub_10017F200(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD v11[2];
  uint64_t v12;
  unint64_t v13;
  void **v14;
  void **v15;

  v14 = a1;
  v13 = a2;
  v12 = a3;
  v11[1] = a4;
  v15 = a1;
  v11[0] = 0;
  sub_10017F2BC(a1 + 3, (uint64_t)v11, a4);
  if (v13)
  {
    v5 = sub_10017F340((uint64_t)a1);
    *a1 = sub_10017F300(v5, v13);
    v13 = v6;
  }
  else
  {
    *a1 = 0;
  }
  v7 = (uint64_t)*a1 + 24 * v12;
  a1[2] = (void *)v7;
  a1[1] = (void *)v7;
  v8 = (unint64_t)*a1 + 24 * v13;
  sub_10017F368();
  *v9 = v8;
  return v15;
}

_QWORD *sub_10017F2BC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_10017F390(a1, a2, a3);
  return a1;
}

void *sub_10017F300(uint64_t a1, unint64_t a2)
{
  return sub_10017F418(a1, a2);
}

uint64_t sub_10017F340(uint64_t a1)
{
  return sub_10017F4F8(a1 + 24);
}

void sub_10017F368()
{
  sub_10017F538();
}

_QWORD *sub_10017F390(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_10017F3DC(a1);
  sub_10017F3F8(a1 + 1, a3);
  return a1;
}

_QWORD *sub_10017F3DC(_QWORD *result)
{
  *result = 0;
  return result;
}

_QWORD *sub_10017F3F8(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

void *sub_10017F418(uint64_t a1, unint64_t a2)
{
  sub_10017EFB4();
  if (a2 > 0xAAAAAAAAAAAAAAALL)
    sub_10017F480();
  nullsub_3();
  return sub_10017F4AC(24 * a2);
}

void sub_10017F480()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
}

void *sub_10017F4AC(size_t a1)
{
  return sub_10017F4D4(a1);
}

void *sub_10017F4D4(size_t a1)
{
  return operator new(a1);
}

uint64_t sub_10017F4F8(uint64_t a1)
{
  return sub_10017F520(a1 + 8);
}

uint64_t sub_10017F520(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void sub_10017F538()
{
  sub_10017F55C();
}

uint64_t sub_10017F580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD v12[3];
  _BYTE v13[32];
  _QWORD v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[2];
  _QWORD v18[2];
  __int128 v19;

  v18[0] = a2;
  v18[1] = a3;
  v17[1] = a5;
  v17[0] = a4;
  *((_QWORD *)&v16 + 1) = a7;
  *(_QWORD *)&v16 = a6;
  v15 = a1;
  v14[0] = a6;
  v14[1] = a7;
  sub_10017F7A0(v12, a1, (uint64_t)v14, (uint64_t)&v16);
  sub_10017F760((uint64_t)v13, v12);
  while (sub_10017F7EC((uint64_t)v18, (uint64_t)v17))
  {
    v7 = v15;
    sub_10017F868((uint64_t)&v16);
    v9 = v8;
    v10 = (uint64_t *)sub_10017F88C((uint64_t)v18);
    sub_10017F834(v7, v9, v10);
    sub_10017F8B4((uint64_t)v18);
    sub_10017F8B4((uint64_t)&v16);
  }
  sub_10017F8D4((uint64_t)v13);
  v19 = v16;
  sub_10017F8F0((uint64_t)v13);
  return v19;
}

_QWORD *sub_10017F694(_QWORD *a1, uint64_t a2)
{
  sub_100181160(a1, a2);
  return a1;
}

uint64_t sub_10017F6D0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t *sub_10017F6E8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  return result;
}

void sub_10017F724()
{
  sub_100181188();
}

uint64_t sub_10017F760(uint64_t a1, _QWORD *a2)
{
  _QWORD v3[5];

  v3[4] = a1;
  v3[3] = a2;
  v3[0] = *a2;
  v3[1] = a2[1];
  v3[2] = a2[2];
  return sub_10017F924(a1, v3);
}

_QWORD *sub_10017F7A0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10017F990(a1, a2, a3, a4);
  return a1;
}

BOOL sub_10017F7EC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_10017F6D0(a1);
  return v2 != sub_10017F6D0(a2);
}

_QWORD *sub_10017F834(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  return sub_10017F9C8(a1, a2, a3);
}

void sub_10017F868(uint64_t a1)
{
  sub_100180D64(a1);
}

uint64_t sub_10017F88C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) - 24;
}

uint64_t sub_10017F8B4(uint64_t result)
{
  *(_QWORD *)(result + 8) -= 24;
  return result;
}

uint64_t sub_10017F8D4(uint64_t result)
{
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t sub_10017F8F0(uint64_t a1)
{
  sub_100180DD8(a1);
  return a1;
}

uint64_t sub_10017F924(uint64_t a1, _QWORD *a2)
{
  sub_10017F95C(a1, a2);
  return a1;
}

uint64_t sub_10017F95C(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 8) = a2[1];
  *(_QWORD *)(result + 16) = a2[2];
  *(_BYTE *)(result + 24) = 0;
  return result;
}

_QWORD *sub_10017F990(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

_QWORD *sub_10017F9C8(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  return sub_10017F9F8(a2, a3);
}

_QWORD *sub_10017F9F8(_QWORD *a1, uint64_t *a2)
{
  sub_10017FA34(a1, a2);
  return a1;
}

_QWORD *sub_10017FA34(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  v3 = a1 + 2;
  sub_10017FAD4();
  sub_10017FAC4();
  sub_10017FAFC(v3);
  v4 = *a2;
  v5 = a2[1];
  v6 = sub_10017FBF8(a2);
  sub_10017FB40(a1, v4, v5, v6);
  return a1;
}

void sub_10017FAD4()
{
  sub_10017FC1C();
}

_QWORD *sub_10017FAFC(_QWORD *a1)
{
  sub_10017FC54(a1);
  return a1;
}

uint64_t sub_10017FB40(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  _BYTE v7[16];
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v11 = a1;
  v10 = a2;
  v9 = a3;
  v8 = a4;
  sub_10017FD04(&v6, (uint64_t)a1);
  sub_10017FCD4((uint64_t)v7, v6);
  if (v8)
  {
    sub_10017FD40(a1, v8);
    sub_10017FDD8((uint64_t)a1, v10, v9, v8);
  }
  sub_10017FE68((uint64_t)v7);
  return sub_10017FE84((uint64_t)v7);
}

uint64_t sub_10017FBF8(_QWORD *a1)
{
  return (uint64_t)(a1[1] - *a1) >> 6;
}

void sub_10017FC1C()
{
  sub_10017FC40();
}

_QWORD *sub_10017FC54(_QWORD *a1)
{
  sub_10017FCA0(a1);
  sub_10017FCBC();
  return a1;
}

_QWORD *sub_10017FCA0(_QWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10017FCD4(uint64_t a1, uint64_t a2)
{
  return sub_10017FEB8(a1, a2);
}

_QWORD *sub_10017FD04(_QWORD *a1, uint64_t a2)
{
  sub_10017FF18(a1, a2);
  return a1;
}

void sub_10017FD40(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (a2 > sub_10017FF38((uint64_t)a1))
    sub_10017FF98();
  sub_10017FFEC();
  v4 = sub_10017FFAC(v3, a2);
  *a1 = v4;
  a1[1] = v4;
  v6 = *a1 + (v5 << 6);
  sub_100180014();
  *v7 = v6;
  sub_10018003C();
}

_QWORD *sub_10017FDD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a1;
  v10 = a2;
  v9 = a3;
  v8 = a4;
  sub_100180154(&v6, a1, a4);
  sub_10017FFEC();
  v7 = sub_100180198(v4, v10, v9, v7);
  return sub_10018021C(&v6);
}

void sub_10017FE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13)
{
  sub_10018021C(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10017FE68(uint64_t result)
{
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t sub_10017FE84(uint64_t a1)
{
  sub_100180A50(a1);
  return a1;
}

uint64_t sub_10017FEB8(uint64_t a1, uint64_t a2)
{
  sub_10017FEF4(a1, a2);
  return a1;
}

uint64_t sub_10017FEF4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = a2;
  *(_BYTE *)(result + 8) = 0;
  return result;
}

_QWORD *sub_10017FF18(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t sub_10017FF38(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[2];

  v3[1] = a1;
  sub_10017FAD4();
  sub_100180050();
  v3[0] = 0x3FFFFFFFFFFFFFFLL;
  sub_10017F000();
  v2 = 0x7FFFFFFFFFFFFFFFLL;
  return *sub_10017EF88(v3, &v2);
}

void sub_10017FF88(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
  __cxa_call_unexpected(a1);
}

void sub_10017FF98()
{
  sub_10017F0D4();
}

void *sub_10017FFAC(uint64_t a1, unint64_t a2)
{
  return sub_100180084(a1, a2);
}

void sub_10017FFEC()
{
  sub_1001800E4();
}

void sub_100180014()
{
  sub_10018011C();
}

void sub_100180050()
{
  sub_100180074();
}

void *sub_100180084(uint64_t a1, unint64_t a2)
{
  sub_100180050();
  if (a2 > 0x3FFFFFFFFFFFFFFLL)
    sub_10017F480();
  nullsub_3();
  return sub_10017F4AC(a2 << 6);
}

void sub_1001800E4()
{
  sub_100180108();
}

void sub_10018011C()
{
  sub_100180140();
}

_QWORD *sub_100180154(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_100180250(a1, a2, a3);
  return a1;
}

uint64_t sub_100180198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (_QWORD *)sub_100180298(a2, a3);
  v6 = v5;
  sub_1001803CC();
  v8 = sub_1001802EC(a1, v4, v6, v7);
  return sub_1001803F0(a4, v8);
}

_QWORD *sub_10018021C(_QWORD *a1)
{
  sub_100180A30(a1);
  return a1;
}

_QWORD *sub_100180250(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = *(_QWORD *)(a2 + 8);
  result[2] = *(_QWORD *)(a2 + 8) + (a3 << 6);
  return result;
}

uint64_t sub_100180298(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];

  v6[2] = a1;
  v6[1] = a2;
  sub_1001803CC();
  v6[0] = v2;
  sub_1001803CC();
  v5 = v3;
  return sub_10018041C(v6, &v5);
}

uint64_t sub_1001802EC(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _BYTE v9[32];
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v14 = a1;
  v13 = a2;
  v12 = a3;
  v11 = a4;
  v10 = a4;
  sub_10018050C(v8, a1, (uint64_t)&v10, (uint64_t)&v11);
  sub_1001804CC((uint64_t)v9, v8);
  while (v13 != v12)
  {
    v4 = v14;
    sub_10018058C();
    sub_100180558(v4, v5, v13);
    v13 += 8;
    v11 += 64;
  }
  sub_1001805A0((uint64_t)v9);
  v6 = v11;
  sub_1001805BC((uint64_t)v9);
  return v6;
}

void sub_1001803CC()
{
  sub_1001809C4();
}

uint64_t sub_1001803F0(uint64_t a1, uint64_t a2)
{
  return sub_1001809E8(a1, a2);
}

uint64_t sub_10018041C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  sub_100180454(&v3, a1, a2);
  return v3;
}

_QWORD *sub_100180454(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  sub_100180498(a1, a2, a3);
  return a1;
}

_QWORD *sub_100180498(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  *result = *a2;
  result[1] = *a3;
  return result;
}

uint64_t sub_1001804CC(uint64_t a1, _QWORD *a2)
{
  _QWORD v3[5];

  v3[4] = a1;
  v3[3] = a2;
  v3[0] = *a2;
  v3[1] = a2[1];
  v3[2] = a2[2];
  return sub_1001805F0(a1, v3);
}

_QWORD *sub_10018050C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10018065C(a1, a2, a3, a4);
  return a1;
}

void sub_100180558(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  sub_100180694(a1, a2, a3);
}

uint64_t sub_1001805A0(uint64_t result)
{
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t sub_1001805BC(uint64_t a1)
{
  sub_1001806F4(a1);
  return a1;
}

uint64_t sub_1001805F0(uint64_t a1, _QWORD *a2)
{
  sub_100180628(a1, a2);
  return a1;
}

uint64_t sub_100180628(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 8) = a2[1];
  *(_QWORD *)(result + 16) = a2[2];
  *(_BYTE *)(result + 24) = 0;
  return result;
}

_QWORD *sub_10018065C(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

void sub_100180694(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  a2[1] = a3[1];
  a2[2] = a3[2];
  a2[3] = a3[3];
  a2[4] = a3[4];
  a2[5] = a3[5];
  a2[6] = a3[6];
  a2[7] = a3[7];
}

uint64_t sub_1001806F4(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    sub_100180728(a1);
  return a1;
}

BOOL sub_100180728(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4[2];
  uint64_t v5[3];

  v5[2] = a1;
  v2 = *(_QWORD *)a1;
  sub_1001807F4(v5, **(_QWORD **)(a1 + 16));
  sub_1001807F4(v4, **(_QWORD **)(a1 + 8));
  return sub_10018078C(v2, v5[0], v5[1], v4[0], v4[1]);
}

BOOL sub_10018078C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 result;
  _QWORD v6[2];
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v6[1] = a5;
  v6[0] = a4;
  while (1)
  {
    result = sub_100180830((uint64_t)v7, (uint64_t)v6);
    if (!result)
      break;
    sub_1001808A4((uint64_t)v7);
    sub_100180878();
    sub_1001808C8((uint64_t)v7);
  }
  return result;
}

_QWORD *sub_1001807F4(_QWORD *a1, uint64_t a2)
{
  sub_10018099C(a1, a2);
  return a1;
}

BOOL sub_100180830(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_1001808E8(a1);
  return v2 != sub_1001808E8(a2);
}

void sub_100180878()
{
  sub_100180900();
}

void sub_1001808A4(uint64_t a1)
{
  sub_100180914(a1);
}

uint64_t sub_1001808C8(uint64_t result)
{
  *(_QWORD *)(result + 8) -= 64;
  return result;
}

uint64_t sub_1001808E8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_100180914(uint64_t a1)
{
  sub_100180950(a1);
  sub_10018058C();
}

void sub_100180940(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
  __cxa_call_unexpected(a1);
}

uint64_t sub_100180950(uint64_t a1)
{
  return sub_100180974(a1);
}

uint64_t sub_100180974(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) - 64;
}

_QWORD *sub_10018099C(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = a2;
  return result;
}

void sub_1001809C4()
{
  sub_10018058C();
}

uint64_t sub_1001809E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_10018058C();
  return a1 + ((a2 - v4) >> 6 << 6);
}

_QWORD *sub_100180A30(_QWORD *result)
{
  *(_QWORD *)(*result + 8) = result[1];
  return result;
}

uint64_t sub_100180A50(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    sub_100180A84((uint64_t **)a1);
  return a1;
}

void sub_100180A84(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (**a1)
  {
    sub_100180AFC(*a1);
    sub_100180B24();
    sub_10017FFEC();
    v3 = v2;
    v4 = (void *)**a1;
    sub_100180B68(*a1);
    sub_100180B34(v3, v4);
  }
}

void sub_100180AFC(uint64_t *a1)
{
  sub_100180BA8((uint64_t)a1, *a1);
}

void sub_100180B34(uint64_t a1, void *a2)
{
  sub_100180C34(a1, a2);
}

uint64_t sub_100180B68(_QWORD *a1)
{
  _QWORD *v2;

  sub_100180D04();
  return (uint64_t)(*v2 - *a1) >> 6;
}

void sub_100180BA8(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); a2 != i; i -= 64)
  {
    sub_10017FFEC();
    sub_10018058C();
    sub_100180878();
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_100180C34(uint64_t a1, void *a2)
{
  nullsub_3();
  sub_100180C88(a2);
}

void sub_100180C88(void *a1)
{
  sub_100180CB8(a1);
}

void sub_100180CB8(void *a1)
{
  sub_100180CE0(a1);
}

void sub_100180CE0(void *a1)
{
  operator delete(a1);
}

void sub_100180D04()
{
  sub_100180D2C();
}

void sub_100180D2C()
{
  sub_100180D50();
}

void sub_100180D64(uint64_t a1)
{
  sub_100180DB4(a1);
  sub_100180DA0();
}

void sub_100180D90(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
  __cxa_call_unexpected(a1);
}

uint64_t sub_100180DB4(uint64_t a1)
{
  return sub_10017F88C(a1);
}

uint64_t sub_100180DD8(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    sub_100180E0C(a1);
  return a1;
}

BOOL sub_100180E0C(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];
  _QWORD v5[5];

  v2 = *(_QWORD *)a1;
  sub_100180F20(v5, **(_QWORD **)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
  sub_100180F20(v4, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  return sub_100180EB0(v2, (uint64_t)v5, (uint64_t)v4);
}

BOOL sub_100180EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t *v6;

  while (1)
  {
    result = sub_100180F54(a2, a3);
    if (!result)
      break;
    sub_100180FD0(a2);
    sub_100180FA4(a1, v6);
    sub_100180FF4(a2);
  }
  return result;
}

_QWORD *sub_100180F20(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_100181124(a1, a2, a3);
}

BOOL sub_100180F54(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v9 = a2;
  v2 = sub_10018101C(a1);
  v8[1] = v3;
  v8[0] = v2;
  v4 = sub_10018101C(v9);
  v7[1] = v5;
  v7[0] = v4;
  return sub_10017F7EC((uint64_t)v8, (uint64_t)v7);
}

uint64_t *sub_100180FA4(uint64_t a1, uint64_t *a2)
{
  return sub_100181040(a1, a2);
}

void sub_100180FD0(uint64_t a1)
{
  sub_100181068(a1);
}

uint64_t sub_100180FF4(uint64_t a1)
{
  return sub_100181104(a1 + 24);
}

uint64_t sub_10018101C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

uint64_t *sub_100181040(uint64_t a1, uint64_t *a2)
{
  return sub_10017D5EC(a2);
}

void sub_100181068(uint64_t a1)
{
  sub_1001810A4(a1);
  sub_100180DA0();
}

void sub_100181094(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
  __cxa_call_unexpected(a1);
}

uint64_t sub_1001810A4(uint64_t a1)
{
  return sub_1001810C8(a1);
}

uint64_t sub_1001810C8(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[3];

  v3[2] = a1;
  v3[0] = *(_QWORD *)(a1 + 24);
  v3[1] = *(_QWORD *)(a1 + 32);
  v1 = sub_100181104((uint64_t)v3);
  return sub_10017F88C(v1);
}

uint64_t sub_100181104(uint64_t result)
{
  *(_QWORD *)(result + 8) += 24;
  return result;
}

_QWORD *sub_100181124(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[1] = a2;
  result[2] = a3;
  result[3] = a2;
  result[4] = a3;
  return result;
}

_QWORD *sub_100181160(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = a2;
  return result;
}

void sub_100181188()
{
  sub_10017F55C();
}

uint64_t *sub_1001811AC(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  sub_10018121C(a1);
  if (*a1)
  {
    v2 = sub_10017F340((uint64_t)a1);
    v3 = (void *)*a1;
    sub_100181278(a1);
    sub_100181244(v2, v3);
  }
  return a1;
}

uint64_t *sub_10018121C(uint64_t *a1)
{
  return sub_1001812BC(a1, a1[1]);
}

void sub_100181244(uint64_t a1, void *a2)
{
  sub_100181364(a1, a2);
}

uint64_t sub_100181278(_QWORD *a1)
{
  _QWORD *v2;

  sub_1001813BC();
  return (*v2 - *a1) / 24;
}

uint64_t *sub_1001812BC(uint64_t *a1, uint64_t a2)
{
  return sub_1001812E8(a1, a2);
}

uint64_t *sub_1001812E8(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v2 = (uint64_t)result;
  while (a2 != *(_QWORD *)(v2 + 16))
  {
    v3 = sub_10017F340(v2);
    *(_QWORD *)(v2 + 16) -= 24;
    sub_100180DA0();
    result = sub_100180FA4(v3, v4);
  }
  return result;
}

void sub_100181364(uint64_t a1, void *a2)
{
  nullsub_3();
  sub_100180C88(a2);
}

void sub_1001813BC()
{
  sub_1001813E4();
}

void sub_1001813E4()
{
  sub_10017EF74();
}

_QWORD *sub_100181408(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  sub_100181450(a1 + 2);
  return a1;
}

_QWORD *sub_100181450(_QWORD *a1)
{
  sub_100181494(a1);
  return a1;
}

_QWORD *sub_100181494(_QWORD *a1)
{
  sub_10017FCA0(a1);
  sub_1001814DC((uint64_t)a1);
  return a1;
}

uint64_t sub_1001814DC(uint64_t a1)
{
  sub_100181510(a1);
  return a1;
}

uint64_t sub_100181510(uint64_t a1)
{
  sub_100181544();
  return a1;
}

uint64_t *sub_100181558(uint64_t *a1)
{
  uint64_t *v3[2];

  v3[1] = a1;
  sub_10017FD04(v3, (uint64_t)a1);
  sub_100180A84(v3);
  return a1;
}

void **sub_100181598(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10018171C(a1, a2, a3, a4);
  return a1;
}

void sub_1001815E4(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11[2];
  uint64_t v12[2];
  uint64_t v13[2];
  _QWORD v14[2];
  _QWORD *v15;
  uint64_t *v16;

  v16 = a1;
  v15 = a2;
  sub_100180B24();
  sub_10017FFEC();
  v4 = v3;
  sub_1001807F4(v13, a1[1]);
  sub_1001807F4(v12, *a1);
  sub_1001807F4(v11, v15[1]);
  v5 = sub_10018193C(v4, v13[0], v13[1], v12[0], v12[1], v11[0], v11[1]);
  v14[1] = v6;
  v14[0] = v5;
  v7 = sub_1001808E8((uint64_t)v14);
  v15[1] = v7;
  sub_1001819B8(a1, v15 + 1);
  sub_1001819B8(a1 + 1, v15 + 2);
  sub_100180014();
  v9 = v8;
  sub_100181844();
  sub_1001819B8(v9, v10);
  *v15 = v15[1];
  sub_10017FBF8(a1);
  sub_10018003C();
}

void **sub_1001816E8(void **a1)
{
  sub_100181FC0(a1);
  return a1;
}

void **sub_10018171C(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD v11[2];
  uint64_t v12;
  unint64_t v13;
  void **v14;
  void **v15;

  v14 = a1;
  v13 = a2;
  v12 = a3;
  v11[1] = a4;
  v15 = a1;
  v11[0] = 0;
  sub_1001817D8(a1 + 3, (uint64_t)v11, a4);
  if (v13)
  {
    v5 = sub_10018181C((uint64_t)a1);
    *a1 = sub_10017FFAC(v5, v13);
    v13 = v6;
  }
  else
  {
    *a1 = 0;
  }
  v7 = (char *)*a1 + 64 * v12;
  a1[2] = v7;
  a1[1] = v7;
  v8 = (unint64_t)*a1 + 64 * v13;
  sub_100181844();
  *v9 = v8;
  return v15;
}

_QWORD *sub_1001817D8(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_10018186C(a1, a2, a3);
  return a1;
}

uint64_t sub_10018181C(uint64_t a1)
{
  return sub_1001818D8(a1 + 24);
}

void sub_100181844()
{
  sub_100181918();
}

_QWORD *sub_10018186C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_10017FCA0(a1);
  sub_1001818B8(a1 + 1, a3);
  return a1;
}

_QWORD *sub_1001818B8(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t sub_1001818D8(uint64_t a1)
{
  return sub_100181900(a1 + 8);
}

uint64_t sub_100181900(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void sub_100181918()
{
  sub_100180140();
}

uint64_t sub_10018193C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  nullsub_3();
  return sub_1001819F4(a2, a3, a4, a5, a6, a7);
}

uint64_t *sub_1001819B8(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  return result;
}

uint64_t sub_1001819F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[10];

  v7[8] = a1;
  v7[9] = a2;
  v7[7] = a4;
  v7[6] = a3;
  v7[5] = a6;
  v7[4] = a5;
  sub_100181A6C(v7, a1, a2, a3, a4, a5, a6);
  return v7[2];
}

_QWORD *sub_100181A6C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100181AD0(a1, a2, a3, a4, a5, a6, a7);
}

_QWORD *sub_100181AD0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100181B34(a1, a2, a3, a4, a5, a6, a7);
}

_QWORD *sub_100181B34(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  __int128 v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;

  *(_QWORD *)&v32 = a2;
  *((_QWORD *)&v32 + 1) = a3;
  *((_QWORD *)&v31 + 1) = a5;
  *(_QWORD *)&v31 = a4;
  *((_QWORD *)&v30 + 1) = a7;
  *(_QWORD *)&v30 = a6;
  v28 = v32;
  v27 = v31;
  sub_100181C50(v29, a2, a3, a4, a5);
  v23 = v29[0];
  v22 = v29[1];
  v19 = v30;
  sub_100181D94();
  v21 = v8;
  v20 = v9;
  sub_100181CCC(&v25, (uint64_t)&v24, v23, *((uint64_t *)&v23 + 1), v22, *((uint64_t *)&v22 + 1), v9, v8);
  v17 = v32;
  v16 = v25;
  v10 = sub_100181E04(v32, *((uint64_t *)&v32 + 1), v25);
  v18[1] = v11;
  v18[0] = v10;
  v12 = sub_100181E60(v30, *((uint64_t *)&v30 + 1), v26);
  v15[1] = v13;
  v15[0] = v12;
  return sub_100181DD8(a1, v18, v15);
}

_QWORD *sub_100181C50(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  __int128 v12;
  _QWORD v13[4];
  __int128 v14;

  *(_QWORD *)&v14 = a2;
  *((_QWORD *)&v14 + 1) = a3;
  v13[3] = a5;
  v13[2] = a4;
  v12 = v14;
  sub_100181D94();
  v13[1] = v6;
  v13[0] = v7;
  sub_100181D94();
  v11[1] = v8;
  v11[0] = v9;
  return sub_100181DD8(a1, v13, v11);
}

_QWORD *sub_100181CCC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];

  v14[0] = a3;
  v14[1] = a4;
  v13[1] = a6;
  v13[0] = a5;
  v12[1] = a8;
  v12[0] = a7;
  while (sub_100180830((uint64_t)v14, (uint64_t)v13))
  {
    v9 = (_QWORD *)sub_100181EBC((uint64_t)v14);
    v10 = (_QWORD *)sub_100180974((uint64_t)v12);
    *v10 = *v9;
    v10[1] = v9[1];
    v10[2] = v9[2];
    v10[3] = v9[3];
    v10[4] = v9[4];
    v10[5] = v9[5];
    v10[6] = v9[6];
    v10[7] = v9[7];
    sub_1001808C8((uint64_t)v14);
    sub_1001808C8((uint64_t)v12);
  }
  return sub_100181DD8(a1, v14, v12);
}

void sub_100181D94()
{
  sub_100181EE8();
}

_QWORD *sub_100181DD8(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  return sub_100181F0C(a1, a2, a3);
}

uint64_t sub_100181E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100181E60(a1, a2, a3);
}

uint64_t sub_100181E60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100181F94(a1, a2, a3);
}

uint64_t sub_100181EBC(uint64_t a1)
{
  nullsub_4();
  return sub_100180974(a1);
}

_QWORD *sub_100181F0C(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  sub_100181F50(a1, a2, a3);
  return a1;
}

_QWORD *sub_100181F50(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  *result = *a2;
  result[1] = a2[1];
  result[2] = *a3;
  result[3] = a3[1];
  return result;
}

uint64_t sub_100181F94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void **sub_100181FC0(void **a1)
{
  uint64_t v2;
  void *v3;

  sub_100182030((uint64_t)a1);
  if (*a1)
  {
    v2 = sub_10018181C((uint64_t)a1);
    v3 = *a1;
    sub_100182058(a1);
    sub_100180B34(v2, v3);
  }
  return a1;
}

void sub_100182030(uint64_t a1)
{
  sub_100182098(a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_100182058(_QWORD *a1)
{
  _QWORD *v2;

  sub_100182140();
  return (uint64_t)(*v2 - *a1) >> 6;
}

void sub_100182098(uint64_t a1, uint64_t a2)
{
  sub_1001820C4(a1, a2);
}

void sub_1001820C4(uint64_t a1, uint64_t a2)
{
  while (a2 != *(_QWORD *)(a1 + 16))
  {
    sub_10018181C(a1);
    *(_QWORD *)(a1 + 16) -= 64;
    sub_10018058C();
    sub_100180878();
  }
}

void sub_100182140()
{
  sub_100182168();
}

void sub_100182168()
{
  sub_100180D50();
}

_QWORD *sub_10018218C(uint64_t a1, void **a2, float32x4_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  float32x4_t *v5;
  uint64_t v7;
  uint64_t v8;
  float32x4_t *v9;
  void **v10;
  uint64_t v11;

  v11 = a1;
  v10 = a2;
  v9 = a3;
  sub_100180154(&v7, a1, 1);
  sub_10017FFEC();
  v4 = v3;
  sub_10018058C();
  sub_100182314(v4, v5, v10, v9);
  v8 += 64;
  return sub_10018021C(&v7);
}

void sub_10018220C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12)
{
  sub_10018021C(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100182230(uint64_t *a1, void **a2, float32x4_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float32x4_t *v9;
  uint64_t v10;
  void *v12[2];
  uint64_t v13;
  uint64_t v14;
  float32x4_t *v15;
  void **v16;
  uint64_t *v17;

  v17 = a1;
  v16 = a2;
  v15 = a3;
  sub_10017FFEC();
  v14 = v4;
  v5 = sub_10017FBF8(a1);
  v6 = sub_100182ECC(a1, v5 + 1);
  v7 = sub_10017FBF8(a1);
  sub_100181598(v12, v6, v7, v14);
  v8 = v14;
  sub_10018058C();
  sub_100182314(v8, v9, v16, v15);
  v13 += 64;
  sub_1001815E4(a1, v12);
  v10 = a1[1];
  sub_1001816E8(v12);
  return v10;
}

void sub_1001822F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, void *a13)
{
  sub_1001816E8(&a13);
  _Unwind_Resume(a1);
}

float32x4_t *sub_100182314(uint64_t a1, float32x4_t *a2, void **a3, float32x4_t *a4)
{
  return sub_100182350(a1, a2, a3, a4);
}

float32x4_t *sub_100182350(uint64_t a1, float32x4_t *a2, void **a3, float32x4_t *a4)
{
  return sub_100182390(a2, *a3, *a4);
}

float32x4_t *sub_100182390(float32x4_t *a1, void *a2, float32x4_t a3)
{
  float32x4_t *v3;
  id location;
  float32x4_t *v7;

  v7 = a1;
  location = 0;
  objc_storeStrong(&location, a2);
  v3 = v7;
  sub_100182410(v7, location, a3);
  objc_storeStrong(&location, 0);
  return v3;
}

void sub_1001823F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, _Unwind_Exception *exception_object)
{
  uint64_t v13;

  objc_storeStrong((id *)(v13 - 32), 0);
  _Unwind_Resume(a1);
}

float32x4_t *sub_100182410(float32x4_t *a1, void *a2, float32x4_t a3)
{
  float32x4_t *v3;
  id v4;
  id v5;
  unsigned int v6;
  unsigned int v7;
  id v8;
  unsigned int v9;
  unsigned int v10;
  id v11;
  unsigned int v12;
  unsigned int v13;
  id v14;
  unsigned int v15;
  float32x4_t *v16;
  id v17;
  id v18;
  unsigned int v19;
  unsigned int v20;
  id v21;
  unsigned int v22;
  unsigned int v23;
  id v24;
  unsigned int v25;
  unsigned int v26;
  id v27;
  unsigned int v28;
  float32x4_t *v29;
  id v30;
  id v31;
  unsigned int v32;
  unsigned int v33;
  id v34;
  unsigned int v35;
  unsigned int v36;
  id v37;
  unsigned int v38;
  unsigned int v39;
  id v40;
  unsigned int v41;
  id v42;
  id v43;
  unsigned int v44;
  unsigned int v45;
  id v46;
  unsigned int v47;
  unsigned int v48;
  id v49;
  unsigned int v50;
  unsigned int v51;
  id v52;
  unsigned int v53;
  float32x4_t v55;
  float32x4_t v56;
  float32x4_t v57;
  float32x4_t v58;
  id location;
  float32x4_t *v61;
  int v62;
  id v63;
  float32x4_t v64;
  int v65;
  id v66;
  float32x4_t v67;
  int v68;
  id v69;
  float32x4_t v70;
  int v71;
  id v72;
  float32x4_t v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  float32x4_t v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  int v91;
  int v92;
  int v93;
  int v94;
  float32x4_t v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  int v100;
  int v101;
  int v102;
  int v103;
  int v104;
  int v105;
  int v106;
  int v107;
  float32x4_t v108;
  unsigned int v109;
  unsigned int v110;
  unsigned int v111;
  unsigned int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  float32x4_t v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  unsigned int v125;

  v61 = a1;
  location = 0;
  objc_storeStrong(&location, a2);
  v3 = v61;
  v4 = objc_msgSend(location, "objectForKeyedSubscript:", CFSTR("p0"));
  v72 = 0;
  objc_storeStrong(&v72, v4);
  if (v72 && objc_msgSend(v72, "count") == (id)4)
  {
    v5 = objc_msgSend(v72, "objectAtIndexedSubscript:", 0);
    objc_msgSend(v5, "floatValue");
    v7 = v6;
    v8 = objc_msgSend(v72, "objectAtIndexedSubscript:", 1);
    objc_msgSend(v8, "floatValue");
    v10 = v9;
    v11 = objc_msgSend(v72, "objectAtIndexedSubscript:", 2);
    objc_msgSend(v11, "floatValue");
    v13 = v12;
    v14 = objc_msgSend(v72, "objectAtIndexedSubscript:", 3);
    objc_msgSend(v14, "floatValue");
    v86 = v7;
    v85 = v10;
    v84 = v13;
    v83 = v15;
    v82.i64[0] = __PAIR64__(v10, v7);
    v82.i64[1] = __PAIR64__(v15, v13);
    v73 = v82;

    v71 = 1;
  }
  else
  {
    v81 = 0;
    v80 = 0;
    v79 = 0;
    v78 = 0;
    v74 = 0;
    v75 = 0;
    v76 = 0;
    v77 = 0;
    v73 = 0u;
    v71 = 1;
  }
  objc_storeStrong(&v72, 0);
  v58 = vmulq_f32(v73, a3);

  *v3 = v58;
  v16 = v3 + 1;
  v17 = objc_msgSend(location, "objectForKeyedSubscript:", CFSTR("p1"));
  v69 = 0;
  objc_storeStrong(&v69, v17);
  if (v69 && objc_msgSend(v69, "count") == (id)4)
  {
    v18 = objc_msgSend(v69, "objectAtIndexedSubscript:", 0);
    objc_msgSend(v18, "floatValue");
    v20 = v19;
    v21 = objc_msgSend(v69, "objectAtIndexedSubscript:", 1);
    objc_msgSend(v21, "floatValue");
    v23 = v22;
    v24 = objc_msgSend(v69, "objectAtIndexedSubscript:", 2);
    objc_msgSend(v24, "floatValue");
    v26 = v25;
    v27 = objc_msgSend(v69, "objectAtIndexedSubscript:", 3);
    objc_msgSend(v27, "floatValue");
    v99 = v20;
    v98 = v23;
    v97 = v26;
    v96 = v28;
    v95.i64[0] = __PAIR64__(v23, v20);
    v95.i64[1] = __PAIR64__(v28, v26);
    v70 = v95;

    v68 = 1;
    v16 = v3 + 1;
  }
  else
  {
    v94 = 0;
    v93 = 0;
    v92 = 0;
    v91 = 0;
    v87 = 0;
    v88 = 0;
    v89 = 0;
    v90 = 0;
    v70 = 0u;
    v68 = 1;
  }
  objc_storeStrong(&v69, 0);
  v57 = vmulq_f32(v70, a3);

  *v16 = v57;
  v29 = v3 + 2;
  v30 = objc_msgSend(location, "objectForKeyedSubscript:", CFSTR("p2"));
  v66 = 0;
  objc_storeStrong(&v66, v30);
  if (v66 && objc_msgSend(v66, "count") == (id)4)
  {
    v31 = objc_msgSend(v66, "objectAtIndexedSubscript:", 0);
    objc_msgSend(v31, "floatValue");
    v33 = v32;
    v34 = objc_msgSend(v66, "objectAtIndexedSubscript:", 1);
    objc_msgSend(v34, "floatValue");
    v36 = v35;
    v37 = objc_msgSend(v66, "objectAtIndexedSubscript:", 2);
    objc_msgSend(v37, "floatValue");
    v39 = v38;
    v40 = objc_msgSend(v66, "objectAtIndexedSubscript:", 3);
    objc_msgSend(v40, "floatValue");
    v112 = v33;
    v111 = v36;
    v110 = v39;
    v109 = v41;
    v108.i64[0] = __PAIR64__(v36, v33);
    v108.i64[1] = __PAIR64__(v41, v39);
    v67 = v108;

    v65 = 1;
    v29 = v3 + 2;
  }
  else
  {
    v107 = 0;
    v106 = 0;
    v105 = 0;
    v104 = 0;
    v100 = 0;
    v101 = 0;
    v102 = 0;
    v103 = 0;
    v67 = 0u;
    v65 = 1;
  }
  objc_storeStrong(&v66, 0);
  v56 = vmulq_f32(v67, a3);

  *v29 = v56;
  v42 = objc_msgSend(location, "objectForKeyedSubscript:", CFSTR("p3"));
  v63 = 0;
  objc_storeStrong(&v63, v42);
  if (v63 && objc_msgSend(v63, "count") == (id)4)
  {
    v43 = objc_msgSend(v63, "objectAtIndexedSubscript:", 0);
    objc_msgSend(v43, "floatValue");
    v45 = v44;
    v46 = objc_msgSend(v63, "objectAtIndexedSubscript:", 1);
    objc_msgSend(v46, "floatValue");
    v48 = v47;
    v49 = objc_msgSend(v63, "objectAtIndexedSubscript:", 2);
    objc_msgSend(v49, "floatValue");
    v51 = v50;
    v52 = objc_msgSend(v63, "objectAtIndexedSubscript:", 3);
    objc_msgSend(v52, "floatValue");
    v125 = v45;
    v124 = v48;
    v123 = v51;
    v122 = v53;
    v121.i64[0] = __PAIR64__(v48, v45);
    v121.i64[1] = __PAIR64__(v53, v51);
    v64 = v121;

    v62 = 1;
  }
  else
  {
    v120 = 0;
    v119 = 0;
    v118 = 0;
    v117 = 0;
    v113 = 0;
    v114 = 0;
    v115 = 0;
    v116 = 0;
    v64 = 0u;
    v62 = 1;
  }
  objc_storeStrong(&v63, 0);
  v55 = vmulq_f32(v64, a3);

  v3[3] = v55;
  objc_storeStrong(&location, 0);
  return v3;
}

void sub_100182E50()
{
  JUMPOUT(0x100182EB8);
}

void sub_100182E5C()
{
  void *v0;

  JUMPOUT(0x100182EB8);
}

void sub_100182E74()
{
  void *v0;

  JUMPOUT(0x100182EB8);
}

void sub_100182E8C()
{
  void *v0;

  JUMPOUT(0x100182EB8);
}

void sub_100182EA4(_Unwind_Exception *a1)
{
  void *v1;
  id v3;

  objc_storeStrong(&v3, 0);
  _Unwind_Resume(a1);
}

unint64_t sub_100182ECC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  v7[1] = a1;
  v7[0] = a2;
  v6 = sub_10017FF38((uint64_t)a1);
  if (v7[0] > v6)
    sub_10017FF98();
  v5 = sub_100180B68(a1);
  if (v5 >= v6 >> 1)
    return v6;
  v4 = 2 * v5;
  return *sub_100182F70(&v4, v7);
}

_QWORD *sub_100182F70(_QWORD *a1, _QWORD *a2)
{
  return sub_100182F9C(a1, a2);
}

_QWORD *sub_100182F9C(_QWORD *a1, _QWORD *a2)
{
  char v5;

  if (sub_10017F054((uint64_t)&v5, a1, a2))
    return a2;
  else
    return a1;
}

_QWORD *sub_100182FDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;

  v9 = a1;
  v8 = a2;
  sub_100183150(&v6, a1);
  sub_10017ED54();
  v3 = v2;
  sub_100180DA0();
  sub_100183198(v3, v4, v8);
  v7 += 24;
  return sub_1001831CC(&v6);
}

void sub_100183050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13)
{
  sub_1001831CC(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100183074(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;

  v15 = a1;
  v14 = a2;
  sub_10017ED54();
  v13 = v3;
  v4 = sub_10017ED7C(a1);
  v5 = sub_100183298(a1, v4 + 1);
  v6 = sub_10017ED7C(a1);
  sub_10017EDA4(v11, v5, v6, v13);
  v7 = v13;
  sub_100180DA0();
  sub_100183198(v7, v8, v14);
  v12 += 24;
  sub_10017EDF0(a1, v11);
  v9 = a1[1];
  sub_10017EEF4((uint64_t *)v11);
  return v9;
}

void sub_10018312C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12)
{
  sub_10017EEF4(&a12);
  _Unwind_Resume(a1);
}

_QWORD *sub_100183150(_QWORD *a1, uint64_t a2)
{
  sub_100183200(a1, a2, 1);
  return a1;
}

_QWORD *sub_100183198(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  return sub_100183248(a1, a2, a3);
}

_QWORD *sub_1001831CC(_QWORD *a1)
{
  sub_100183278(a1);
  return a1;
}

_QWORD *sub_100183200(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = *(_QWORD *)(a2 + 8);
  result[2] = *(_QWORD *)(a2 + 8) + 24 * a3;
  return result;
}

_QWORD *sub_100183248(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  return sub_10017F9F8(a2, a3);
}

_QWORD *sub_100183278(_QWORD *result)
{
  *(_QWORD *)(*result + 8) = result[1];
  return result;
}

unint64_t sub_100183298(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  v7[1] = a1;
  v7[0] = a2;
  v6 = sub_10017ECDC((uint64_t)a1);
  if (v7[0] > v6)
    sub_10017ED40();
  v5 = sub_10017EC98(a1);
  if (v5 >= v6 >> 1)
    return v6;
  v4 = 2 * v5;
  return *sub_100182F70(&v4, v7);
}

_QWORD *sub_10018333C(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  sub_100183384(a1 + 2);
  return a1;
}

_QWORD *sub_100183384(_QWORD *a1)
{
  sub_1001833C8(a1);
  return a1;
}

_QWORD *sub_1001833C8(_QWORD *a1)
{
  sub_100183410(a1);
  sub_10018342C((uint64_t)a1);
  return a1;
}

_QWORD *sub_100183410(_QWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_10018342C(uint64_t a1)
{
  sub_100183460(a1);
  return a1;
}

uint64_t sub_100183460(uint64_t a1)
{
  sub_100183494();
  return a1;
}

uint64_t *sub_1001834A8(uint64_t *a1)
{
  uint64_t *v3[2];

  v3[1] = a1;
  sub_1001834E8(v3, (uint64_t)a1);
  sub_100183524(v3);
  return a1;
}

_QWORD *sub_1001834E8(_QWORD *a1, uint64_t a2)
{
  sub_10018359C(a1, a2);
  return a1;
}

void sub_100183524(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (**a1)
  {
    sub_1001835BC(*a1);
    sub_1001835E4();
    sub_100183628();
    v3 = v2;
    v4 = (void *)**a1;
    sub_100183650(*a1);
    sub_1001835F4(v3, v4);
  }
}

_QWORD *sub_10018359C(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t *sub_1001835BC(uint64_t *a1)
{
  return sub_100183694(a1, *a1);
}

void sub_1001835F4(uint64_t a1, void *a2)
{
  sub_100183788(a1, a2);
}

void sub_100183628()
{
  sub_1001837E0();
}

uint64_t sub_100183650(_QWORD *a1)
{
  _QWORD *v2;

  sub_100183818();
  return (*v2 - *a1) / 24;
}

uint64_t *sub_100183694(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t i;

  v2 = result;
  for (i = result[1]; a2 != i; i -= 24)
  {
    sub_100183628();
    v4 = v3;
    sub_10018374C();
    result = sub_100183720(v4, v5);
  }
  v2[1] = a2;
  return result;
}

uint64_t *sub_100183720(uint64_t a1, uint64_t *a2)
{
  return sub_100183760(a1, a2);
}

uint64_t *sub_100183760(uint64_t a1, uint64_t *a2)
{
  return sub_10017E9A8(a2);
}

void sub_100183788(uint64_t a1, void *a2)
{
  nullsub_3();
  sub_100180C88(a2);
}

void sub_1001837E0()
{
  sub_100183804();
}

void sub_100183818()
{
  sub_100183840();
}

void sub_100183840()
{
  sub_100183864();
}

uint64_t sub_100183878(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_1001838A8(&v3, a2);
  return v3;
}

_QWORD *sub_1001838A8(_QWORD *a1, uint64_t a2)
{
  sub_1001838E4(a1, a2);
  return a1;
}

_QWORD *sub_1001838E4(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

BOOL sub_100183904(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_10018394C(a1);
  return v2 == sub_10018394C(a2);
}

uint64_t sub_10018394C(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *sub_100183964(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  sub_1001839AC(a1 + 2);
  return a1;
}

_QWORD *sub_1001839AC(_QWORD *a1)
{
  sub_1001839F0(a1);
  return a1;
}

_QWORD *sub_1001839F0(_QWORD *a1)
{
  sub_100183A38(a1);
  sub_100183A54((uint64_t)a1);
  return a1;
}

_QWORD *sub_100183A38(_QWORD *result)
{
  *result = 0;
  return result;
}

uint64_t sub_100183A54(uint64_t a1)
{
  sub_100183A88(a1);
  return a1;
}

uint64_t sub_100183A88(uint64_t a1)
{
  sub_100183ABC();
  return a1;
}

uint64_t *sub_100183AD0(uint64_t *a1)
{
  uint64_t *v3[2];

  v3[1] = a1;
  sub_100183B10(v3, (uint64_t)a1);
  sub_100183B4C(v3);
  return a1;
}

_QWORD *sub_100183B10(_QWORD *a1, uint64_t a2)
{
  sub_100183BC4(a1, a2);
  return a1;
}

void sub_100183B4C(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (**a1)
  {
    sub_100183BE4(*a1);
    sub_100183C0C();
    sub_100183C50();
    v3 = v2;
    v4 = (void *)**a1;
    sub_100183C78(*a1);
    sub_100183C1C(v3, v4);
  }
}

_QWORD *sub_100183BC4(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

void sub_100183BE4(uint64_t *a1)
{
  sub_100183CBC((uint64_t)a1, *a1);
}

void sub_100183C1C(uint64_t a1, void *a2)
{
  sub_100183D9C(a1, a2);
}

void sub_100183C50()
{
  sub_100183DF4();
}

uint64_t sub_100183C78(_QWORD *a1)
{
  _QWORD *v2;

  sub_100183E2C();
  return (*v2 - *a1) / 24;
}

void sub_100183CBC(uint64_t a1, uint64_t a2)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8); a2 != i; i -= 24)
  {
    sub_100183C50();
    sub_100183D74();
    sub_100183D48();
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void sub_100183D48()
{
  sub_100183D88();
}

void sub_100183D9C(uint64_t a1, void *a2)
{
  nullsub_3();
  sub_100180C88(a2);
}

void sub_100183DF4()
{
  sub_100183E18();
}

void sub_100183E2C()
{
  sub_100183E54();
}

void sub_100183E54()
{
  sub_100183E78();
}

uint64_t sub_100183E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_100183EBC(&v3, a2);
  return v3;
}

_QWORD *sub_100183EBC(_QWORD *a1, uint64_t a2)
{
  sub_100183EF8(a1, a2);
  return a1;
}

_QWORD *sub_100183EF8(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

BOOL sub_100183F18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_100183F60(a1);
  return v2 == sub_100183F60(a2);
}

uint64_t sub_100183F60(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void sub_100183F78()
{
  sub_100184114();
}

_QWORD *sub_100183FA0(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v9 = a1;
  v8 = a2;
  sub_10018414C(&v6, a1);
  sub_100183628();
  v3 = v2;
  sub_10018374C();
  sub_100184194(v3, v4, v8);
  v7 += 24;
  return sub_1001841C8(&v6);
}

void sub_100184014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13)
{
  sub_1001841C8(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100184038(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  void *v11[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;

  v15 = a1;
  v14 = a2;
  sub_100183628();
  v13 = v3;
  v4 = sub_100184520(a1);
  v5 = sub_10018447C(a1, v4 + 1);
  v6 = sub_100184520(a1);
  sub_100184548(v11, v5, v6, v13);
  v7 = v13;
  sub_10018374C();
  sub_100184194(v7, v8, v14);
  v12 += 24;
  sub_100184594(a1, v11);
  v9 = a1[1];
  sub_100184698((uint64_t *)v11);
  return v9;
}

void sub_1001840F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12)
{
  sub_100184698(&a12);
  _Unwind_Resume(a1);
}

void sub_100184114()
{
  sub_100184138();
}

_QWORD *sub_10018414C(_QWORD *a1, uint64_t a2)
{
  sub_1001841FC(a1, a2, 1);
  return a1;
}

_QWORD *sub_100184194(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return sub_100184244(a1, a2, a3);
}

_QWORD *sub_1001841C8(_QWORD *a1)
{
  sub_10018445C(a1);
  return a1;
}

_QWORD *sub_1001841FC(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = *(_QWORD *)(a2 + 8);
  result[2] = *(_QWORD *)(a2 + 8) + 24 * a3;
  return result;
}

_QWORD *sub_100184244(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return sub_100184274(a2, a3);
}

_QWORD *sub_100184274(_QWORD *a1, _QWORD *a2)
{
  sub_1001842B0(a1, a2);
  return a1;
}

_QWORD *sub_1001842B0(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;

  *a1 = 0;
  a1[1] = 0;
  v3 = a1 + 2;
  sub_100183C50();
  sub_100184354(v3);
  *a1 = *a2;
  a1[1] = a2[1];
  sub_100184398();
  v5 = *v4;
  sub_100184398();
  *v6 = v5;
  sub_100184398();
  *v7 = 0;
  a2[1] = 0;
  *a2 = 0;
  return a1;
}

_QWORD *sub_100184354(_QWORD *a1)
{
  sub_1001843C0(a1);
  return a1;
}

void sub_100184398()
{
  sub_100184424();
}

_QWORD *sub_1001843C0(_QWORD *a1)
{
  sub_100183A38(a1);
  sub_10018440C();
  return a1;
}

void sub_100184424()
{
  sub_100184448();
}

_QWORD *sub_10018445C(_QWORD *result)
{
  *(_QWORD *)(*result + 8) = result[1];
  return result;
}

unint64_t sub_10018447C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  v7[1] = a1;
  v7[0] = a2;
  v6 = sub_1001846CC((uint64_t)a1);
  if (v7[0] > v6)
    sub_100184730();
  v5 = sub_100183650(a1);
  if (v5 >= v6 >> 1)
    return v6;
  v4 = 2 * v5;
  return *sub_100182F70(&v4, v7);
}

uint64_t sub_100184520(_QWORD *a1)
{
  return (a1[1] - *a1) / 24;
}

void **sub_100184548(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1001847D8(a1, a2, a3, a4);
  return a1;
}

void sub_100184594(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11[2];
  uint64_t v12[2];
  uint64_t v13[2];
  _QWORD v14[2];
  _QWORD *v15;
  uint64_t *v16;

  v16 = a1;
  v15 = a2;
  sub_1001835E4();
  sub_100183628();
  v4 = v3;
  sub_100184BB4(v13, a1[1]);
  sub_100184BB4(v12, *a1);
  sub_100184BB4(v11, v15[1]);
  v5 = sub_100184AA0(v4, v13[0], v13[1], v12[0], v12[1], v11[0], v11[1]);
  v14[1] = v6;
  v14[0] = v5;
  v7 = sub_100184BF0((uint64_t)v14);
  v15[1] = v7;
  sub_100184C08(a1, v15 + 1);
  sub_100184C08(a1 + 1, v15 + 2);
  sub_100183F78();
  v9 = v8;
  sub_100184940();
  sub_100184C08(v9, v10);
  *v15 = v15[1];
  sub_100184520(a1);
  sub_100184C44();
}

uint64_t *sub_100184698(uint64_t *a1)
{
  sub_1001860C8(a1);
  return a1;
}

uint64_t sub_1001846CC(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[2];

  v3[1] = a1;
  sub_100184768();
  sub_100184744();
  v3[0] = 0xAAAAAAAAAAAAAAALL;
  sub_10017F000();
  v2 = 0x7FFFFFFFFFFFFFFFLL;
  return *sub_10017EF88(v3, &v2);
}

void sub_100184720(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
  __cxa_call_unexpected(a1);
}

void sub_100184730()
{
  sub_10017F0D4();
}

void sub_100184744()
{
  sub_100184790();
}

void sub_100184768()
{
  sub_1001847A0();
}

void sub_1001847A0()
{
  sub_1001847C4();
}

void **sub_1001847D8(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD v11[2];
  uint64_t v12;
  unint64_t v13;
  void **v14;
  void **v15;

  v14 = a1;
  v13 = a2;
  v12 = a3;
  v11[1] = a4;
  v15 = a1;
  v11[0] = 0;
  sub_100184894(a1 + 3, (uint64_t)v11, a4);
  if (v13)
  {
    v5 = sub_100184918((uint64_t)a1);
    *a1 = sub_1001848D8(v5, v13);
    v13 = v6;
  }
  else
  {
    *a1 = 0;
  }
  v7 = (uint64_t)*a1 + 24 * v12;
  a1[2] = (void *)v7;
  a1[1] = (void *)v7;
  v8 = (unint64_t)*a1 + 24 * v13;
  sub_100184940();
  *v9 = v8;
  return v15;
}

_QWORD *sub_100184894(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_100184968(a1, a2, a3);
  return a1;
}

void *sub_1001848D8(uint64_t a1, unint64_t a2)
{
  return sub_1001849D4(a1, a2);
}

uint64_t sub_100184918(uint64_t a1)
{
  return sub_100184A3C(a1 + 24);
}

void sub_100184940()
{
  sub_100184A7C();
}

_QWORD *sub_100184968(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_100183410(a1);
  sub_1001849B4(a1 + 1, a3);
  return a1;
}

_QWORD *sub_1001849B4(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

void *sub_1001849D4(uint64_t a1, unint64_t a2)
{
  sub_100184744();
  if (a2 > 0xAAAAAAAAAAAAAAALL)
    sub_10017F480();
  nullsub_3();
  return sub_10017F4AC(24 * a2);
}

uint64_t sub_100184A3C(uint64_t a1)
{
  return sub_100184A64(a1 + 8);
}

uint64_t sub_100184A64(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void sub_100184A7C()
{
  sub_100184138();
}

uint64_t sub_100184AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  _QWORD v12[3];
  _BYTE v13[32];
  _QWORD v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[2];
  _QWORD v18[2];
  __int128 v19;

  v18[0] = a2;
  v18[1] = a3;
  v17[1] = a5;
  v17[0] = a4;
  *((_QWORD *)&v16 + 1) = a7;
  *(_QWORD *)&v16 = a6;
  v15 = a1;
  v14[0] = a6;
  v14[1] = a7;
  sub_100184C98(v12, a1, (uint64_t)v14, (uint64_t)&v16);
  sub_100184C58((uint64_t)v13, v12);
  while (sub_100184CE4((uint64_t)v18, (uint64_t)v17))
  {
    v7 = v15;
    sub_100184D60((uint64_t)&v16);
    v9 = v8;
    v10 = (uint64_t *)sub_100184D84((uint64_t)v18);
    sub_100184D2C(v7, v9, v10);
    sub_100184DAC((uint64_t)v18);
    sub_100184DAC((uint64_t)&v16);
  }
  sub_100184DCC((uint64_t)v13);
  v19 = v16;
  sub_100184DE8((uint64_t)v13);
  return v19;
}

_QWORD *sub_100184BB4(_QWORD *a1, uint64_t a2)
{
  sub_1001860A0(a1, a2);
  return a1;
}

uint64_t sub_100184BF0(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t *sub_100184C08(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  return result;
}

uint64_t sub_100184C58(uint64_t a1, _QWORD *a2)
{
  _QWORD v3[5];

  v3[4] = a1;
  v3[3] = a2;
  v3[0] = *a2;
  v3[1] = a2[1];
  v3[2] = a2[2];
  return sub_100184E1C(a1, v3);
}

_QWORD *sub_100184C98(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100184E88(a1, a2, a3, a4);
  return a1;
}

BOOL sub_100184CE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_100184BF0(a1);
  return v2 != sub_100184BF0(a2);
}

_QWORD *sub_100184D2C(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  return sub_100184EC0(a1, a2, a3);
}

void sub_100184D60(uint64_t a1)
{
  sub_100185D0C(a1);
}

uint64_t sub_100184D84(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) - 24;
}

uint64_t sub_100184DAC(uint64_t result)
{
  *(_QWORD *)(result + 8) -= 24;
  return result;
}

uint64_t sub_100184DCC(uint64_t result)
{
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t sub_100184DE8(uint64_t a1)
{
  sub_100185D6C(a1);
  return a1;
}

uint64_t sub_100184E1C(uint64_t a1, _QWORD *a2)
{
  sub_100184E54(a1, a2);
  return a1;
}

uint64_t sub_100184E54(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 8) = a2[1];
  *(_QWORD *)(result + 16) = a2[2];
  *(_BYTE *)(result + 24) = 0;
  return result;
}

_QWORD *sub_100184E88(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

_QWORD *sub_100184EC0(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  return sub_100184EF0(a2, a3);
}

_QWORD *sub_100184EF0(_QWORD *a1, uint64_t *a2)
{
  sub_100184F2C(a1, a2);
  return a1;
}

_QWORD *sub_100184F2C(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *a1 = 0;
  a1[1] = 0;
  v3 = a1 + 2;
  sub_100184FCC();
  sub_100184FBC();
  sub_100184354(v3);
  v4 = *a2;
  v5 = a2[1];
  v6 = sub_10017EB04(a2);
  sub_100184FF4(a1, v4, v5, v6);
  return a1;
}

void sub_100184FCC()
{
  sub_1001850AC();
}

uint64_t sub_100184FF4(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  _BYTE v7[16];
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;

  v11 = a1;
  v10 = a2;
  v9 = a3;
  v8 = a4;
  sub_100183B10(&v6, (uint64_t)a1);
  sub_1001850E4((uint64_t)v7, v6);
  if (v8)
  {
    sub_100185114(a1, v8);
    sub_1001851AC((uint64_t)a1, v10, v9, v8);
  }
  sub_10018523C((uint64_t)v7);
  return sub_100185258((uint64_t)v7);
}

void sub_1001850AC()
{
  sub_1001850D0();
}

uint64_t sub_1001850E4(uint64_t a1, uint64_t a2)
{
  return sub_10018528C(a1, a2);
}

void sub_100185114(_QWORD *a1, unint64_t a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;

  if (a2 > sub_1001852EC((uint64_t)a1))
    sub_100185350();
  sub_100183C50();
  v4 = sub_100185364(v3, a2);
  *a1 = v4;
  a1[1] = v4;
  v6 = *a1 + 24 * v5;
  sub_100184398();
  *v7 = v6;
  sub_1001853A4();
}

_QWORD *sub_1001851AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a1;
  v10 = a2;
  v9 = a3;
  v8 = a4;
  sub_100185454(&v6, a1, a4);
  sub_100183C50();
  v7 = sub_100185498(v4, v10, v9, v7);
  return sub_10018551C(&v6);
}

void sub_100185218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, uint64_t a13)
{
  sub_10018551C(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10018523C(uint64_t result)
{
  *(_BYTE *)(result + 8) = 1;
  return result;
}

uint64_t sub_100185258(uint64_t a1)
{
  sub_100185CD8(a1);
  return a1;
}

uint64_t sub_10018528C(uint64_t a1, uint64_t a2)
{
  sub_1001852C8(a1, a2);
  return a1;
}

uint64_t sub_1001852C8(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = a2;
  *(_BYTE *)(result + 8) = 0;
  return result;
}

uint64_t sub_1001852EC(uint64_t a1)
{
  uint64_t v2;
  _QWORD v3[2];

  v3[1] = a1;
  sub_100184FCC();
  sub_1001853B8();
  v3[0] = 0xAAAAAAAAAAAAAAALL;
  sub_10017F000();
  v2 = 0x7FFFFFFFFFFFFFFFLL;
  return *sub_10017EF88(v3, &v2);
}

void sub_100185340(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
  __cxa_call_unexpected(a1);
}

void sub_100185350()
{
  sub_10017F0D4();
}

void *sub_100185364(uint64_t a1, unint64_t a2)
{
  return sub_1001853EC(a1, a2);
}

void sub_1001853B8()
{
  sub_1001853DC();
}

void *sub_1001853EC(uint64_t a1, unint64_t a2)
{
  sub_1001853B8();
  if (a2 > 0xAAAAAAAAAAAAAAALL)
    sub_10017F480();
  nullsub_3();
  return sub_10017F4AC(24 * a2);
}

_QWORD *sub_100185454(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_100185550(a1, a2, a3);
  return a1;
}

uint64_t sub_100185498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = (_QWORD *)sub_100185598(a2, a3);
  v6 = v5;
  sub_1001856CC();
  v8 = sub_1001855EC(a1, v4, v6, v7);
  return sub_1001856F0(a4, v8);
}

_QWORD *sub_10018551C(_QWORD *a1)
{
  sub_100185CB8(a1);
  return a1;
}

_QWORD *sub_100185550(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = *(_QWORD *)(a2 + 8);
  result[2] = *(_QWORD *)(a2 + 8) + 24 * a3;
  return result;
}

uint64_t sub_100185598(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  _QWORD v6[3];

  v6[2] = a1;
  v6[1] = a2;
  sub_1001856CC();
  v6[0] = v2;
  sub_1001856CC();
  v5 = v3;
  return sub_10018571C(v6, &v5);
}

uint64_t sub_1001855EC(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD v8[3];
  _BYTE v9[32];
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v14 = a1;
  v13 = a2;
  v12 = a3;
  v11 = a4;
  v10 = a4;
  sub_10018580C(v8, a1, (uint64_t)&v10, (uint64_t)&v11);
  sub_1001857CC((uint64_t)v9, v8);
  while (v13 != v12)
  {
    v4 = v14;
    sub_100183D74();
    sub_100185858(v4, v5, v13);
    v13 += 3;
    v11 += 24;
  }
  sub_10018588C((uint64_t)v9);
  v6 = v11;
  sub_1001858A8((uint64_t)v9);
  return v6;
}

void sub_1001856CC()
{
  sub_100185C48();
}

uint64_t sub_1001856F0(uint64_t a1, uint64_t a2)
{
  return sub_100185C6C(a1, a2);
}

uint64_t sub_10018571C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  sub_100185754(&v3, a1, a2);
  return v3;
}

_QWORD *sub_100185754(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  sub_100185798(a1, a2, a3);
  return a1;
}

_QWORD *sub_100185798(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  *result = *a2;
  result[1] = *a3;
  return result;
}

uint64_t sub_1001857CC(uint64_t a1, _QWORD *a2)
{
  _QWORD v3[5];

  v3[4] = a1;
  v3[3] = a2;
  v3[0] = *a2;
  v3[1] = a2[1];
  v3[2] = a2[2];
  return sub_1001858DC(a1, v3);
}

_QWORD *sub_10018580C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100185948(a1, a2, a3, a4);
  return a1;
}

void sub_100185858(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  sub_100185980(a1, a2, a3);
}

uint64_t sub_10018588C(uint64_t result)
{
  *(_BYTE *)(result + 24) = 1;
  return result;
}

uint64_t sub_1001858A8(uint64_t a1)
{
  sub_1001859B8(a1);
  return a1;
}

uint64_t sub_1001858DC(uint64_t a1, _QWORD *a2)
{
  sub_100185914(a1, a2);
  return a1;
}

uint64_t sub_100185914(uint64_t result, _QWORD *a2)
{
  *(_QWORD *)result = *a2;
  *(_QWORD *)(result + 8) = a2[1];
  *(_QWORD *)(result + 16) = a2[2];
  *(_BYTE *)(result + 24) = 0;
  return result;
}

_QWORD *sub_100185948(_QWORD *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *result = a2;
  result[1] = a3;
  result[2] = a4;
  return result;
}

void sub_100185980(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
  a2[1] = a3[1];
  a2[2] = a3[2];
}

uint64_t sub_1001859B8(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    sub_1001859EC(a1);
  return a1;
}

BOOL sub_1001859EC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4[2];
  uint64_t v5[3];

  v5[2] = a1;
  v2 = *(_QWORD *)a1;
  sub_100185AB8(v5, **(_QWORD **)(a1 + 16));
  sub_100185AB8(v4, **(_QWORD **)(a1 + 8));
  return sub_100185A50(v2, v5[0], v5[1], v4[0], v4[1]);
}

BOOL sub_100185A50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _BOOL8 result;
  _QWORD v6[2];
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v6[1] = a5;
  v6[0] = a4;
  while (1)
  {
    result = sub_100185AF4((uint64_t)v7, (uint64_t)v6);
    if (!result)
      break;
    sub_100185B3C((uint64_t)v7);
    sub_100183D48();
    sub_100185B60((uint64_t)v7);
  }
  return result;
}

_QWORD *sub_100185AB8(_QWORD *a1, uint64_t a2)
{
  sub_100185C20(a1, a2);
  return a1;
}

BOOL sub_100185AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_100185B80(a1);
  return v2 != sub_100185B80(a2);
}

void sub_100185B3C(uint64_t a1)
{
  sub_100185B98(a1);
}

uint64_t sub_100185B60(uint64_t result)
{
  *(_QWORD *)(result + 8) -= 24;
  return result;
}

uint64_t sub_100185B80(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

void sub_100185B98(uint64_t a1)
{
  sub_100185BD4(a1);
  sub_100183D74();
}

void sub_100185BC4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
  __cxa_call_unexpected(a1);
}

uint64_t sub_100185BD4(uint64_t a1)
{
  return sub_100185BF8(a1);
}

uint64_t sub_100185BF8(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8) - 24;
}

_QWORD *sub_100185C20(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = a2;
  return result;
}

void sub_100185C48()
{
  sub_100183D74();
}

uint64_t sub_100185C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_100183D74();
  return a1 + 24 * ((a2 - v4) / 24);
}

_QWORD *sub_100185CB8(_QWORD *result)
{
  *(_QWORD *)(*result + 8) = result[1];
  return result;
}

uint64_t sub_100185CD8(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 8) & 1) == 0)
    sub_100183B4C((uint64_t **)a1);
  return a1;
}

void sub_100185D0C(uint64_t a1)
{
  sub_100185D48(a1);
  sub_10018374C();
}

void sub_100185D38(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
  __cxa_call_unexpected(a1);
}

uint64_t sub_100185D48(uint64_t a1)
{
  return sub_100184D84(a1);
}

uint64_t sub_100185D6C(uint64_t a1)
{
  if ((*(_BYTE *)(a1 + 24) & 1) == 0)
    sub_100185DA0(a1);
  return a1;
}

BOOL sub_100185DA0(uint64_t a1)
{
  uint64_t v2;
  _QWORD v4[5];
  _QWORD v5[5];

  v2 = *(_QWORD *)a1;
  sub_100185EB4(v5, **(_QWORD **)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
  sub_100185EB4(v4, **(_QWORD **)(a1 + 8), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
  return sub_100185E44(v2, (uint64_t)v5, (uint64_t)v4);
}

BOOL sub_100185E44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BOOL8 result;
  uint64_t *v6;

  while (1)
  {
    result = sub_100185EE8(a2, a3);
    if (!result)
      break;
    sub_100185F38(a2);
    sub_100183720(a1, v6);
    sub_100185F5C(a2);
  }
  return result;
}

_QWORD *sub_100185EB4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  return sub_100186064(a1, a2, a3);
}

BOOL sub_100185EE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD v7[2];
  _QWORD v8[2];
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v9 = a2;
  v2 = sub_100185F84(a1);
  v8[1] = v3;
  v8[0] = v2;
  v4 = sub_100185F84(v9);
  v7[1] = v5;
  v7[0] = v4;
  return sub_100184CE4((uint64_t)v8, (uint64_t)v7);
}

void sub_100185F38(uint64_t a1)
{
  sub_100185FA8(a1);
}

uint64_t sub_100185F5C(uint64_t a1)
{
  return sub_100186044(a1 + 24);
}

uint64_t sub_100185F84(uint64_t a1)
{
  return *(_QWORD *)(a1 + 24);
}

void sub_100185FA8(uint64_t a1)
{
  sub_100185FE4(a1);
  sub_10018374C();
}

void sub_100185FD4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *a12)
{
  __cxa_call_unexpected(a1);
}

uint64_t sub_100185FE4(uint64_t a1)
{
  return sub_100186008(a1);
}

uint64_t sub_100186008(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[3];

  v3[2] = a1;
  v3[0] = *(_QWORD *)(a1 + 24);
  v3[1] = *(_QWORD *)(a1 + 32);
  v1 = sub_100186044((uint64_t)v3);
  return sub_100184D84(v1);
}

uint64_t sub_100186044(uint64_t result)
{
  *(_QWORD *)(result + 8) += 24;
  return result;
}

_QWORD *sub_100186064(_QWORD *result, uint64_t a2, uint64_t a3)
{
  result[1] = a2;
  result[2] = a3;
  result[3] = a2;
  result[4] = a3;
  return result;
}

_QWORD *sub_1001860A0(_QWORD *result, uint64_t a2)
{
  *result = a2;
  result[1] = a2;
  return result;
}

uint64_t *sub_1001860C8(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  sub_100186138(a1);
  if (*a1)
  {
    v2 = sub_100184918((uint64_t)a1);
    v3 = (void *)*a1;
    sub_100186160(a1);
    sub_1001835F4(v2, v3);
  }
  return a1;
}

uint64_t *sub_100186138(uint64_t *a1)
{
  return sub_1001861A4(a1, a1[1]);
}

uint64_t sub_100186160(_QWORD *a1)
{
  _QWORD *v2;

  sub_10018624C();
  return (*v2 - *a1) / 24;
}

uint64_t *sub_1001861A4(uint64_t *a1, uint64_t a2)
{
  return sub_1001861D0(a1, a2);
}

uint64_t *sub_1001861D0(uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;

  v2 = (uint64_t)result;
  while (a2 != *(_QWORD *)(v2 + 16))
  {
    v3 = sub_100184918(v2);
    *(_QWORD *)(v2 + 16) -= 24;
    sub_10018374C();
    result = sub_100183720(v3, v4);
  }
  return result;
}

void sub_10018624C()
{
  sub_100186274();
}

void sub_100186274()
{
  sub_100183864();
}

_QWORD *sub_100186298(uint64_t a1, double *a2, double *a3, double *a4, double *a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  double *v12;
  double *v13;
  double *v14;
  uint64_t v15;

  v15 = a1;
  v14 = a2;
  v13 = a3;
  v12 = a4;
  v11 = a5;
  sub_100185454(&v9, a1, 1);
  sub_100183C50();
  v6 = v5;
  sub_100183D74();
  sub_100186440(v6, v7, v14, v13, v12, v11);
  v10 += 24;
  return sub_10018551C(&v9);
}

void sub_100186328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12)
{
  sub_10018551C(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_10018634C(uint64_t *a1, double *a2, double *a3, double *a4, double *a5)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  double *v17;
  double *v18;
  double *v19;
  double *v20;
  uint64_t *v21;

  v21 = a1;
  v20 = a2;
  v19 = a3;
  v18 = a4;
  v17 = a5;
  sub_100183C50();
  v16 = v6;
  v7 = sub_10017EB04(a1);
  v8 = sub_100186574(a1, v7 + 1);
  v9 = sub_10017EB04(a1);
  sub_100186618(v14, v8, v9, v16);
  v10 = v16;
  sub_100183D74();
  sub_100186440(v10, v11, v20, v19, v18, v17);
  v15 += 24;
  sub_100186664(a1, v14);
  v12 = a1[1];
  sub_100186768(v14);
  return v12;
}

void sub_10018641C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, _Unwind_Exception *exception_object, void *a13)
{
  sub_100186768(&a13);
  _Unwind_Resume(a1);
}

float sub_100186440(uint64_t a1, uint64_t a2, double *a3, double *a4, double *a5, double *a6)
{
  return sub_10018648C(a1, a2, a3, a4, a5, a6);
}

float sub_10018648C(uint64_t a1, uint64_t a2, double *a3, double *a4, double *a5, double *a6)
{
  float v6;
  float v7;

  v6 = *a5;
  v7 = *a6;
  return sub_1001864EC(a2, *a3, *a4, v6, v7);
}

float sub_1001864EC(uint64_t a1, double a2, double a3, float a4, float a5)
{
  return sub_100186530(a1, a2, a3, a4, a5);
}

float sub_100186530(uint64_t a1, double a2, double a3, float a4, float a5)
{
  float result;

  *(double *)a1 = a2;
  *(double *)(a1 + 8) = a3;
  *(float *)(a1 + 16) = a4;
  result = a5;
  *(float *)(a1 + 20) = a5;
  return result;
}

unint64_t sub_100186574(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD v7[2];

  v7[1] = a1;
  v7[0] = a2;
  v6 = sub_1001852EC((uint64_t)a1);
  if (v7[0] > v6)
    sub_100185350();
  v5 = sub_100183C78(a1);
  if (v5 >= v6 >> 1)
    return v6;
  v4 = 2 * v5;
  return *sub_100182F70(&v4, v7);
}

void **sub_100186618(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10018679C(a1, a2, a3, a4);
  return a1;
}

void sub_100186664(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11[2];
  uint64_t v12[2];
  uint64_t v13[2];
  _QWORD v14[2];
  _QWORD *v15;
  uint64_t *v16;

  v16 = a1;
  v15 = a2;
  sub_100183C0C();
  sub_100183C50();
  v4 = v3;
  sub_100185AB8(v13, a1[1]);
  sub_100185AB8(v12, *a1);
  sub_100185AB8(v11, v15[1]);
  v5 = sub_1001869BC(v4, v13[0], v13[1], v12[0], v12[1], v11[0], v11[1]);
  v14[1] = v6;
  v14[0] = v5;
  v7 = sub_100185B80((uint64_t)v14);
  v15[1] = v7;
  sub_100186A38(a1, v15 + 1);
  sub_100186A38(a1 + 1, v15 + 2);
  sub_100184398();
  v9 = v8;
  sub_1001868C4();
  sub_100186A38(v9, v10);
  *v15 = v15[1];
  sub_10017EB04(a1);
  sub_1001853A4();
}

void **sub_100186768(void **a1)
{
  sub_100187018(a1);
  return a1;
}

void **sub_10018679C(void **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  _QWORD v11[2];
  uint64_t v12;
  unint64_t v13;
  void **v14;
  void **v15;

  v14 = a1;
  v13 = a2;
  v12 = a3;
  v11[1] = a4;
  v15 = a1;
  v11[0] = 0;
  sub_100186858(a1 + 3, (uint64_t)v11, a4);
  if (v13)
  {
    v5 = sub_10018689C((uint64_t)a1);
    *a1 = sub_100185364(v5, v13);
    v13 = v6;
  }
  else
  {
    *a1 = 0;
  }
  v7 = (uint64_t)*a1 + 24 * v12;
  a1[2] = (void *)v7;
  a1[1] = (void *)v7;
  v8 = (unint64_t)*a1 + 24 * v13;
  sub_1001868C4();
  *v9 = v8;
  return v15;
}

_QWORD *sub_100186858(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_1001868EC(a1, a2, a3);
  return a1;
}

uint64_t sub_10018689C(uint64_t a1)
{
  return sub_100186958(a1 + 24);
}

void sub_1001868C4()
{
  sub_100186998();
}

_QWORD *sub_1001868EC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  sub_100183A38(a1);
  sub_100186938(a1 + 1, a3);
  return a1;
}

_QWORD *sub_100186938(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t sub_100186958(uint64_t a1)
{
  return sub_100186980(a1 + 8);
}

uint64_t sub_100186980(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void sub_100186998()
{
  sub_100184448();
}

uint64_t sub_1001869BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  nullsub_3();
  return sub_100186A74(a2, a3, a4, a5, a6, a7);
}

uint64_t *sub_100186A38(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *result;
  *result = *a2;
  *a2 = v2;
  return result;
}

uint64_t sub_100186A74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD v7[10];

  v7[8] = a1;
  v7[9] = a2;
  v7[7] = a4;
  v7[6] = a3;
  v7[5] = a6;
  v7[4] = a5;
  sub_100186AEC(v7, a1, a2, a3, a4, a5, a6);
  return v7[2];
}

_QWORD *sub_100186AEC(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100186B50(a1, a2, a3, a4, a5, a6, a7);
}

_QWORD *sub_100186B50(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return sub_100186BB4(a1, a2, a3, a4, a5, a6, a7);
}

_QWORD *sub_100186BB4(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v15[2];
  __int128 v16;
  __int128 v17;
  _QWORD v18[2];
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _OWORD v29[2];
  __int128 v30;
  __int128 v31;
  __int128 v32;

  *(_QWORD *)&v32 = a2;
  *((_QWORD *)&v32 + 1) = a3;
  *((_QWORD *)&v31 + 1) = a5;
  *(_QWORD *)&v31 = a4;
  *((_QWORD *)&v30 + 1) = a7;
  *(_QWORD *)&v30 = a6;
  v28 = v32;
  v27 = v31;
  sub_100186CD0(v29, a2, a3, a4, a5);
  v23 = v29[0];
  v22 = v29[1];
  v19 = v30;
  sub_100186DEC();
  v21 = v8;
  v20 = v9;
  sub_100186D4C(&v25, (uint64_t)&v24, v23, *((uint64_t *)&v23 + 1), v22, *((uint64_t *)&v22 + 1), v9, v8);
  v17 = v32;
  v16 = v25;
  v10 = sub_100186E5C(v32, *((uint64_t *)&v32 + 1), v25);
  v18[1] = v11;
  v18[0] = v10;
  v12 = sub_100186EB8(v30, *((uint64_t *)&v30 + 1), v26);
  v15[1] = v13;
  v15[0] = v12;
  return sub_100186E30(a1, v18, v15);
}

_QWORD *sub_100186CD0(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  __int128 v12;
  _QWORD v13[4];
  __int128 v14;

  *(_QWORD *)&v14 = a2;
  *((_QWORD *)&v14 + 1) = a3;
  v13[3] = a5;
  v13[2] = a4;
  v12 = v14;
  sub_100186DEC();
  v13[1] = v6;
  v13[0] = v7;
  sub_100186DEC();
  v11[1] = v8;
  v11[0] = v9;
  return sub_100186E30(a1, v13, v11);
}

_QWORD *sub_100186D4C(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];

  v14[0] = a3;
  v14[1] = a4;
  v13[1] = a6;
  v13[0] = a5;
  v12[1] = a8;
  v12[0] = a7;
  while (sub_100185AF4((uint64_t)v14, (uint64_t)v13))
  {
    v9 = (_QWORD *)sub_100186F14((uint64_t)v14);
    v10 = (_QWORD *)sub_100185BF8((uint64_t)v12);
    *v10 = *v9;
    v10[1] = v9[1];
    v10[2] = v9[2];
    sub_100185B60((uint64_t)v14);
    sub_100185B60((uint64_t)v12);
  }
  return sub_100186E30(a1, v14, v12);
}

void sub_100186DEC()
{
  sub_100186F40();
}

_QWORD *sub_100186E30(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  return sub_100186F64(a1, a2, a3);
}

uint64_t sub_100186E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100186EB8(a1, a2, a3);
}

uint64_t sub_100186EB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100186FEC(a1, a2, a3);
}

uint64_t sub_100186F14(uint64_t a1)
{
  nullsub_5();
  return sub_100185BF8(a1);
}

_QWORD *sub_100186F64(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  sub_100186FA8(a1, a2, a3);
  return a1;
}

_QWORD *sub_100186FA8(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  *result = *a2;
  result[1] = a2[1];
  result[2] = *a3;
  result[3] = a3[1];
  return result;
}

uint64_t sub_100186FEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a3;
}

void **sub_100187018(void **a1)
{
  uint64_t v2;
  void *v3;

  sub_100187088((uint64_t)a1);
  if (*a1)
  {
    v2 = sub_10018689C((uint64_t)a1);
    v3 = *a1;
    sub_1001870B0(a1);
    sub_100183C1C(v2, v3);
  }
  return a1;
}

void sub_100187088(uint64_t a1)
{
  sub_1001870F4(a1, *(_QWORD *)(a1 + 8));
}

uint64_t sub_1001870B0(_QWORD *a1)
{
  _QWORD *v2;

  sub_10018719C();
  return (*v2 - *a1) / 24;
}

void sub_1001870F4(uint64_t a1, uint64_t a2)
{
  sub_100187120(a1, a2);
}

void sub_100187120(uint64_t a1, uint64_t a2)
{
  while (a2 != *(_QWORD *)(a1 + 16))
  {
    sub_10018689C(a1);
    *(_QWORD *)(a1 + 16) -= 24;
    sub_100183D74();
    sub_100183D48();
  }
}

void sub_10018719C()
{
  sub_1001871C4();
}

void sub_1001871C4()
{
  sub_100183E78();
}

uint64_t sub_1001871E8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  sub_100187218(&v3, a2);
  return v3;
}

_QWORD *sub_100187218(_QWORD *a1, uint64_t a2)
{
  sub_100187254(a1, a2);
  return a1;
}

_QWORD *sub_100187254(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

BOOL sub_100187274(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = sub_1001872BC(a1);
  return v2 == sub_1001872BC(a2);
}

uint64_t sub_1001872BC(uint64_t a1)
{
  return *(_QWORD *)a1;
}

_QWORD *sub_1001872D4(_QWORD *a1)
{
  *a1 = 0;
  a1[1] = 0;
  sub_10018731C(a1 + 2);
  return a1;
}

_QWORD *sub_10018731C(_QWORD *a1)
{
  sub_100187360(a1);
  return a1;
}

_QWORD *sub_100187360(_QWORD *a1)
{
  sub_10017F3DC(a1);
  sub_1001873A8((uint64_t)a1);
  return a1;
}

uint64_t sub_1001873A8(uint64_t a1)
{
  sub_1001873DC(a1);
  return a1;
}

uint64_t sub_1001873DC(uint64_t a1)
{
  sub_100187410();
  return a1;
}

uint64_t *sub_100187424(uint64_t *a1)
{
  uint64_t *v3[2];

  v3[1] = a1;
  sub_100187464(v3, (uint64_t)a1);
  sub_1001874A0(v3);
  return a1;
}

_QWORD *sub_100187464(_QWORD *a1, uint64_t a2)
{
  sub_100187518(a1, a2);
  return a1;
}

void sub_1001874A0(uint64_t **a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (**a1)
  {
    sub_100187538(*a1);
    sub_10017F570();
    sub_10017ED54();
    v3 = v2;
    v4 = (void *)**a1;
    sub_10017EC98(*a1);
    sub_100181244(v3, v4);
  }
}

_QWORD *sub_100187518(_QWORD *result, uint64_t a2)
{
  *result = a2;
  return result;
}

uint64_t *sub_100187538(uint64_t *a1)
{
  return sub_100187560(a1, *a1);
}

uint64_t *sub_100187560(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t i;

  v2 = result;
  for (i = result[1]; a2 != i; i -= 24)
  {
    sub_10017ED54();
    v4 = v3;
    sub_100180DA0();
    result = sub_100180FA4(v4, v5);
  }
  v2[1] = a2;
  return result;
}

BOOL sub_1001881E4(uint64_t a1)
{
  BOOL v1;

  v1 = 1;
  if (a1 != 4)
    return a1 == 3;
  return v1;
}

void sub_1001891C0(id *a1)
{
  void *v1;
  void **v2;
  int v3;
  int v4;
  void (*v5)(uint64_t, uint64_t, id);
  void *v6;
  id v7[3];

  v7[2] = a1;
  v7[1] = a1;
  v2 = _NSConcreteStackBlock;
  v3 = -1073741824;
  v4 = 0;
  v5 = sub_100189270;
  v6 = &unk_100283E80;
  v7[0] = a1[4];
  v1 = &_dispatch_main_q;
  IDSRegistrationControlGetStateForRegistrationType(0, &v2, v1);

  objc_storeStrong(v7, 0);
}

void sub_100189270(uint64_t a1, uint64_t a2, id obj)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _WORD v7[7];
  os_log_type_t v8;
  os_log_t oslog;
  char v10;
  uint64_t v11;
  id location;
  uint64_t v13;
  uint64_t v14;

  v14 = a1;
  v13 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v11 = a1;
  v10 = 1;
  if (v13)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v4);
    v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v5 = oslog;
      v6 = v8;
      sub_100038C3C(v7);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "PhoneNumber Permission skipped because IDS registration status is already set", (uint8_t *)v7, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    v10 = 0;
  }
  if (*(_QWORD *)(a1 + 32))
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_storeStrong(&location, 0);
}

void sub_100189470(uint64_t a1, uint64_t a2, id obj)
{
  void *v4;
  id v5;
  id location;
  uint64_t v7;
  uint64_t v8;

  v8 = a1;
  v7 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  if (!v7)
  {
    v4 = *(void **)(a1 + 40);
    v5 = objc_msgSend(*(id *)(a1 + 32), "buddyPreferences", a1);
    objc_msgSend(v4, "_registerPhoneNumberPermissionEnabled:buddyPreferences:", 0, v5);

  }
  objc_storeStrong(&location, 0);
}

void sub_100189848(id a1, BOOL a2, NSError *a3)
{
  uint64_t v4;
  os_log_t oslog[2];
  id location;
  BOOL v7;
  id v8;
  uint8_t buf[24];

  v8 = a1;
  v7 = a2;
  location = 0;
  objc_storeStrong(&location, a3);
  oslog[1] = (os_log_t)a1;
  if (!v7)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_100038C28((uint64_t)buf, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "PhoneNumber Permission enable failed with error: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  objc_storeStrong(&location, 0);
}

void sub_10018993C(id a1, BOOL a2, NSError *a3)
{
  uint64_t v4;
  os_log_t oslog[2];
  id location;
  BOOL v7;
  id v8;
  uint8_t buf[24];

  v8 = a1;
  v7 = a2;
  location = 0;
  objc_storeStrong(&location, a3);
  oslog[1] = (os_log_t)a1;
  if (!v7)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_100038C28((uint64_t)buf, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "PhoneNumber Permission disable failed with error: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  objc_storeStrong(&location, 0);
}

void sub_10018A280(id *a1)
{
  NSObject *v2;
  id v3;
  id v4;
  void **v5;
  int v6;
  int v7;
  void (*v8)(id *, char, id);
  void *v9;
  id v10;
  id v11;
  id v12[3];

  v12[2] = a1;
  v12[1] = a1;
  v2 = objc_msgSend(a1[4], "accountOperationsQueue");
  dispatch_suspend(v2);

  v3 = +[ACAccountStore defaultStore](ACAccountStore, "defaultStore");
  v4 = a1[5];
  v5 = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_10018A3B0;
  v9 = &unk_1002836B0;
  v10 = a1[5];
  v11 = a1[4];
  v12[0] = a1[6];
  objc_msgSend(v3, "removeAccount:withCompletionHandler:", v4, &v5);

  objc_storeStrong(v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
}

void sub_10018A3B0(id *a1, char a2, id obj)
{
  void *v4;
  void **block;
  int v6;
  int v7;
  void (*v8)(uint64_t);
  void *v9;
  id v10;
  id v11;
  id v12;
  id v13;
  char v14;
  id *v15;
  id location;
  char v17;
  id *v18;

  v18 = a1;
  v17 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v15 = a1;
  v4 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v6 = -1073741824;
  v7 = 0;
  v8 = sub_10018A4FC;
  v9 = &unk_1002810A0;
  v14 = v17 & 1;
  v10 = a1[4];
  v11 = location;
  v12 = a1[5];
  v13 = a1[6];
  dispatch_async((dispatch_queue_t)v4, &block);

  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&location, 0);
}

void sub_10018A4FC(uint64_t a1)
{
  NSString *v2;
  NSObject *v3;
  char v4;
  NSString *v5;
  char v6;
  id v7;
  os_log_t v8;
  os_log_type_t v9;
  os_log_t oslog[3];
  uint8_t v11[16];
  uint8_t buf[24];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  if ((*(_BYTE *)(a1 + 64) & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    v9 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_100038C28((uint64_t)buf, *(_QWORD *)(a1 + 32));
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v9, "Done removing account: %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v8 = (os_log_t)(id)_BYLoggingFacility(a1);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      v6 = 0;
      v4 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v2 = *(NSString **)(a1 + 40);
      }
      else if (*(_QWORD *)(a1 + 40))
      {
        v7 = objc_msgSend(*(id *)(a1 + 40), "domain");
        v6 = 1;
        v2 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v7, objc_msgSend(*(id *)(a1 + 40), "code"));
        v5 = v2;
        v4 = 1;
      }
      else
      {
        v2 = 0;
      }
      sub_100039500((uint64_t)v11, (uint64_t)v2);
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Error removing account: %{public}@", v11, 0xCu);
      if ((v4 & 1) != 0)

      if ((v6 & 1) != 0)
    }
    objc_storeStrong((id *)&v8, 0);
  }
  objc_msgSend(*(id *)(*(_QWORD *)(a1 + 48) + 16), "removeObject:", *(_QWORD *)(a1 + 32));
  v3 = objc_msgSend(*(id *)(a1 + 48), "accountOperationsQueue");
  dispatch_resume(v3);

  if (*(_QWORD *)(a1 + 56))
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

BOOL sub_10018A8AC(id a1, id a2, NSDictionary *a3)
{
  id v4;
  uint64_t v5;
  char isKindOfClass;
  unsigned __int8 v7;
  char v9;
  id v10;
  char v11;
  id v12;
  id v13;
  id location[2];
  char v15;

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v13 = 0;
  objc_storeStrong(&v13, a3);
  v4 = location[0];
  v5 = objc_opt_class(ACAccount);
  isKindOfClass = objc_opt_isKindOfClass(v4, v5);
  v11 = 0;
  v9 = 0;
  v7 = 0;
  if ((isKindOfClass & 1) != 0)
  {
    v12 = objc_msgSend(location[0], "accountType");
    v11 = 1;
    v10 = objc_msgSend(v12, "identifier");
    v9 = 1;
    v7 = objc_msgSend(v10, "isEqualToString:", ACAccountTypeIdentifierIDMS);
  }
  v15 = v7 & 1;
  if ((v9 & 1) != 0)

  if ((v11 & 1) != 0)
  objc_storeStrong(&v13, 0);
  objc_storeStrong(location, 0);
  return v15 & 1;
}

void sub_10018A9CC(NSObject *a1, char a2, id obj)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _WORD v7[3];
  char v8;
  os_log_t oslog[2];
  id location;
  char v11;
  NSObject *v12;

  v12 = a1;
  v11 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  if ((v11 & 1) == 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v8 = 16;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v5 = oslog[0];
      v6 = v8;
      sub_100038C3C(v7);
      _os_log_error_impl((void *)&_mh_execute_header, v5, v6, "IDMS account removal failed", (uint8_t *)v7, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  if (a1[4].isa)
    (*((void (**)(void))a1[4].isa + 2))();
  objc_storeStrong(&location, 0);
}

void sub_10018ABB0(uint64_t a1, char a2, id obj)
{
  uint64_t v4;
  os_log_t oslog;
  int v6;
  uint64_t v7;
  id location;
  char v9;
  uint64_t v10;
  uint8_t buf[8];

  v10 = a1;
  v9 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v7 = a1;
  if ((v9 & 1) != 0)
  {
    v4 = SecItemDeleteAll();
    v6 = v4;
    if ((_DWORD)v4)
    {
      oslog = (os_log_t)(id)_BYLoggingFacility(v4);
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
      {
        sub_100046FA0(buf, v6);
        _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Unable to delete keychain items: %d for primary account type", buf, 8u);
      }
      objc_storeStrong((id *)&oslog, 0);
    }
  }
  if (*(_QWORD *)(a1 + 32))
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  objc_storeStrong(&location, 0);
}

void sub_10018ADC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, _Unwind_Exception *exception_object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id location)
{
  id *v18;

  objc_destroyWeak(v18);
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_10018ADE0(uint64_t a1, char a2, id obj)
{
  id WeakRetained;
  id v5;
  int v6;
  uint64_t v7;
  id location;
  char v9;
  uint64_t v10;

  v10 = a1;
  v9 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v7 = a1;
  if ((v9 & 1) != 0)
  {
    WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
    objc_msgSend(WeakRetained, "removeIDMSAccount:", *(_QWORD *)(a1 + 32), WeakRetained);
    objc_storeStrong(&v5, 0);
    v6 = 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 32))
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v6 = 1;
  }
  objc_storeStrong(&location, 0);
}

uint64_t sub_10018B010(id *a1, void *a2)
{
  id *v2;
  id v3;
  id v4;
  id location[2];

  v2 = a1;
  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(location[0], "identifier");
  v4 = objc_msgSend(v2[4], "identifier");
  LOBYTE(v2) = objc_msgSend(v3, "isEqualToString:", v4);

  objc_storeStrong(location, 0);
  return v2 & 1;
}

BOOL sub_10018B158(id a1, id a2, NSDictionary *a3)
{
  id v5;
  uint64_t v6;
  id v7;
  id v8;
  unsigned __int8 v9;
  unsigned __int8 v10;
  id v12[2];
  id v13;
  id location[2];
  char v15;

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v13 = 0;
  objc_storeStrong(&v13, a3);
  v12[1] = a1;
  v5 = location[0];
  v6 = objc_opt_class(ACAccount);
  if ((objc_opt_isKindOfClass(v5, v6) & 1) != 0)
  {
    v12[0] = location[0];
    v7 = objc_msgSend(v12[0], "accountType");
    v8 = objc_msgSend(v7, "identifier");
    v9 = objc_msgSend(v8, "isEqualToString:", ACAccountTypeIdentifieriTunesStore);
    v10 = 0;
    if ((v9 & 1) != 0)
      v10 = objc_msgSend(v12[0], "isActive");
    v15 = v10 & 1;

    objc_storeStrong(v12, 0);
  }
  else
  {
    v15 = 0;
  }
  objc_storeStrong(&v13, 0);
  objc_storeStrong(location, 0);
  return v15 & 1;
}

void sub_10018B42C(uint64_t a1, uint64_t a2)
{
  void *v2;
  id *v3;

  v3 = (id *)(a2 + 40);
  v2 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);
  objc_storeStrong(v3, 0);
}

void sub_10018B45C(uint64_t a1)
{
  objc_storeStrong((id *)(a1 + 40), 0);
}

void sub_10018B468(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  void *v5;

  v2 = +[ACAccountStore defaultStore](ACAccountStore, "defaultStore", a1, a1);
  v3 = objc_msgSend(v2, "accounts");
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_10018B794(uint64_t a1, char a2, id obj, void *a4)
{
  id v6;
  unsigned __int8 v7;
  id v8;
  unsigned __int8 v9;
  uint64_t v10;
  char v11;
  os_log_t oslog;
  char v13;
  char v14;
  char v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  id v19;
  id location;
  char v21;
  uint64_t v22;
  uint8_t buf[24];

  v22 = a1;
  v21 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v19 = 0;
  objc_storeStrong(&v19, a4);
  v18 = a1;
  if ((v21 & 1) != 0)
  {
    v16 = location == 0;
    v15 = objc_msgSend(location, "isManagedAppleID") & 1;
    v6 = objc_msgSend(location, "isUnderage");
    v7 = objc_msgSend(v6, "BOOLValue");

    v14 = v7 & 1;
    v8 = objc_msgSend(location, "isLegacyStudent");
    v9 = objc_msgSend(v8, "BOOLValue");

    v13 = v9 & 1;
    oslog = (os_log_t)(id)_BYLoggingFacility(v10);
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_100164768((uint64_t)buf, v15 & 1, v14 & 1, v13 & 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Account Tools: isChild - isMAID: %d isUnderage: %d isStudent: %d", buf, 0x14u);
    }
    objc_storeStrong((id *)&oslog, 0);
    if (*(_QWORD *)(a1 + 32))
    {
      v11 = 1;
      if (!v16)
      {
        v11 = 1;
        if ((v15 & 1) == 0)
        {
          v11 = 1;
          if ((v14 & 1) == 0)
            v11 = v13;
        }
      }
      (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), v11 & 1, 0);
    }
    v17 = 0;
  }
  else
  {
    if (*(_QWORD *)(a1 + 32))
      (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
    v17 = 1;
  }
  objc_storeStrong(&v19, 0);
  objc_storeStrong(&location, 0);
}

void sub_10018BC10(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  NSArray *v4;
  Class isa;
  void **v6;
  int v7;
  int v8;
  void (*v9)(uint64_t, void *, void *);
  void *v10;
  objc_class *v11;
  id v12[2];
  id location;
  id v14;
  uint8_t buf[7];
  os_log_type_t v16;
  os_log_t oslog[3];
  const __CFString *v18;

  oslog[2] = a1;
  oslog[1] = a1;
  if (!*((_QWORD *)a1[4].isa + 6))
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    v16 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v2 = oslog[0];
      v3 = v16;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Account Tools: Fetching configuration info...", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    v14 = dispatch_semaphore_create(0);
    location = (id)objc_opt_new(AKAppleIDAuthenticationController);
    v18 = CFSTR("com.apple.idms.config.privacy.icloud.data");
    v4 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", &v18, 1);
    isa = a1[5].isa;
    v6 = _NSConcreteStackBlock;
    v7 = -1073741824;
    v8 = 0;
    v9 = sub_10018BE24;
    v10 = &unk_100283FF0;
    v12[1] = a1[6].isa;
    v11 = a1[4].isa;
    v12[0] = v14;
    objc_msgSend(location, "configurationInfoWithIdentifiers:forAltDSID:completion:", v4, isa, &v6);

    dispatch_semaphore_wait((dispatch_semaphore_t)v14, 0xFFFFFFFFFFFFFFFFLL);
    objc_storeStrong(v12, 0);
    objc_storeStrong((id *)&v11, 0);
    objc_storeStrong(&location, 0);
    objc_storeStrong(&v14, 0);
  }
  objc_storeStrong((id *)(*((_QWORD *)a1[7].isa + 1) + 40), *((id *)a1[4].isa + 6));
}

void sub_10018BE24(uint64_t a1, void *a2, void *a3)
{
  uint64_t v5;
  NSString *v6;
  id v7;
  uint64_t v8;
  uint64_t isKindOfClass;
  NSError *v10;
  uint64_t v11;
  void *v12;
  os_log_t v13;
  id v14;
  os_log_type_t v15;
  os_log_t v16;
  char v17;
  id v18;
  char v19;
  id v20;
  os_log_type_t v21;
  os_log_t oslog[2];
  id obj;
  id location[2];
  uint8_t v25[16];
  uint8_t v26[16];
  uint8_t buf[24];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  obj = 0;
  objc_storeStrong(&obj, a3);
  oslog[1] = (os_log_t)a1;
  if (obj)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    v21 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v19 = 0;
      v17 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v6 = (NSString *)obj;
      }
      else if (obj)
      {
        v20 = objc_msgSend(obj, "domain");
        v19 = 1;
        v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v20, objc_msgSend(obj, "code"));
        v18 = v6;
        v17 = 1;
      }
      else
      {
        v6 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v6);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v21, "Account Tools: Error fetching configurationInfo: %{public}@", buf, 0xCu);
      if ((v17 & 1) != 0)

      if ((v19 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
    objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), obj);
  }
  else
  {
    v7 = location[0];
    v8 = objc_opt_class(NSDictionary);
    isKindOfClass = objc_opt_isKindOfClass(v7, v8);
    if ((isKindOfClass & 1) != 0)
    {
      v13 = (os_log_t)(id)_BYLoggingFacility(isKindOfClass);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        sub_100038C28((uint64_t)v25, (uint64_t)location[0]);
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Account Tools: fetched configurationInfo %@", v25, 0xCu);
      }
      objc_storeStrong((id *)&v13, 0);
      objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 48), location[0]);
    }
    else
    {
      v16 = (os_log_t)(id)_BYLoggingFacility(isKindOfClass);
      v15 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        v14 = (id)objc_opt_class(location[0]);
        sub_100039500((uint64_t)v26, (uint64_t)v14);
        _os_log_impl((void *)&_mh_execute_header, v16, v15, "Account Tools: configurationInfo dict was not a dict, it was a %{public}@", v26, 0xCu);
        objc_storeStrong(&v14, 0);
      }
      objc_storeStrong((id *)&v16, 0);
      v10 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.purplebuddy.accounterror"), 1, 0);
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v12 = *(void **)(v11 + 40);
      *(_QWORD *)(v11 + 40) = v10;

      objc_storeStrong(location, 0);
    }
  }
  dispatch_semaphore_signal(*(dispatch_semaphore_t *)(a1 + 40));
  objc_storeStrong(&obj, 0);
  objc_storeStrong(location, 0);
}

void sub_10018C294(uint64_t a1)
{
  void *v2;
  id v3;
  void *v4;
  void **v5;
  int v6;
  int v7;
  uint64_t (*v8)(_QWORD *);
  void *v9;
  id v10;
  id v11;
  id v12;
  id obj;
  id v14;
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = 0;
  v2 = *(void **)(a1 + 32);
  obj = 0;
  v3 = objc_msgSend(v2, "configurationInfoError:", &obj);
  objc_storeStrong(location, obj);
  v14 = v3;
  if (*(_QWORD *)(a1 + 40))
  {
    v4 = &_dispatch_main_q;
    v5 = _NSConcreteStackBlock;
    v6 = -1073741824;
    v7 = 0;
    v8 = sub_10018C3E0;
    v9 = &unk_1002817D0;
    v12 = *(id *)(a1 + 40);
    v10 = v14;
    v11 = location[0];
    dispatch_async((dispatch_queue_t)v4, &v5);

    objc_storeStrong(&v11, 0);
    objc_storeStrong(&v10, 0);
    objc_storeStrong(&v12, 0);
  }
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

uint64_t sub_10018C3E0(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(a1[6] + 16))(a1[6], a1[4], a1[5]);
}

void sub_10018C8A0(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 32));
}

void sub_10018C8D8(id *a1, void *a2, void *a3)
{
  uint64_t v5;
  NSString *v6;
  NSObject *v7;
  os_log_type_t v8;
  NSObject *v9;
  os_log_type_t v10;
  id v11;
  void **v12;
  int v13;
  int v14;
  void (*v15)(NSObject *, void *, void *);
  void *v16;
  id v17;
  id v18;
  id v19;
  uint8_t v20[7];
  os_log_type_t v21;
  os_log_t v22;
  uint8_t v23[7];
  os_log_type_t v24;
  os_log_t oslog;
  int v26;
  char v27;
  id v28;
  char v29;
  id v30;
  os_log_type_t v31;
  id v32[2];
  id v33;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v33 = 0;
  objc_storeStrong(&v33, a3);
  v32[1] = a1;
  if (v33)
  {
    v32[0] = (id)_BYLoggingFacility(v5);
    v31 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled((os_log_t)v32[0], OS_LOG_TYPE_ERROR))
    {
      v29 = 0;
      v27 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v6 = (NSString *)v33;
      }
      else if (v33)
      {
        v30 = objc_msgSend(v33, "domain");
        v29 = 1;
        v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v30, objc_msgSend(v33, "code"));
        v28 = v6;
        v27 = 1;
      }
      else
      {
        v6 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v6);
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)v32[0], v31, "Unable to retrieve the primary account: %{public}@", buf, 0xCu);
      if ((v27 & 1) != 0)

      if ((v29 & 1) != 0)
    }
    objc_storeStrong(v32, 0);
    if (a1[5])
      (*((void (**)(void))a1[5] + 2))();
    v26 = 1;
  }
  else if (location[0])
  {
    v22 = (os_log_t)(id)_BYLoggingFacility(v5);
    v21 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      v9 = v22;
      v10 = v21;
      sub_100038C3C(v20);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Account Tools: Fetching user information...", v20, 2u);
    }
    objc_storeStrong((id *)&v22, 0);
    v19 = (id)objc_opt_new(AKAppleIDAuthenticationController);
    v11 = objc_msgSend(location[0], "aa_altDSID");
    v12 = _NSConcreteStackBlock;
    v13 = -1073741824;
    v14 = 0;
    v15 = sub_10018CCBC;
    v16 = &unk_100284040;
    v18 = a1[5];
    v17 = a1[4];
    objc_msgSend(v19, "getUserInformationForAltDSID:completion:", v11, &v12);

    objc_storeStrong(&v17, 0);
    objc_storeStrong(&v18, 0);
    objc_storeStrong(&v19, 0);
    v26 = 0;
  }
  else
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v5);
    v24 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v7 = oslog;
      v8 = v24;
      sub_100038C3C(v23);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No primary account found!", v23, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    if (a1[5])
      (*((void (**)(void))a1[5] + 2))();
    v26 = 1;
  }
  objc_storeStrong(&v33, 0);
  objc_storeStrong(location, 0);
}

void sub_10018CCBC(NSObject *a1, void *a2, void *a3)
{
  uint64_t v5;
  NSString *v6;
  NSObject *v7;
  void **block;
  int v9;
  int v10;
  void (*v11)(uint64_t);
  void *v12;
  objc_class *v13;
  id v14;
  int v15;
  char v16;
  id v17;
  char v18;
  id v19;
  os_log_type_t v20;
  os_log_t oslog[2];
  id v22;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v22 = 0;
  objc_storeStrong(&v22, a3);
  oslog[1] = a1;
  if (v22)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v5);
    v20 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v18 = 0;
      v16 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v6 = (NSString *)v22;
      }
      else if (v22)
      {
        v19 = objc_msgSend(v22, "domain");
        v18 = 1;
        v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v19, objc_msgSend(v22, "code"));
        v17 = v6;
        v16 = 1;
      }
      else
      {
        v6 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v6);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v20, "Account Tools: Failed to fetch user information error: %{public}@", buf, 0xCu);
      if ((v16 & 1) != 0)

      if ((v18 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
    if (a1[5].isa)
      (*((void (**)(void))a1[5].isa + 2))();
    v15 = 1;
  }
  else
  {
    v7 = *((_QWORD *)a1[4].isa + 3);
    block = _NSConcreteStackBlock;
    v9 = -1073741824;
    v10 = 0;
    v11 = sub_10018CF74;
    v12 = &unk_100280D00;
    v13 = a1[4].isa;
    v14 = location[0];
    dispatch_async(v7, &block);
    (*((void (**)(void))a1[5].isa + 2))();
    objc_storeStrong(&v14, 0);
    objc_storeStrong((id *)&v13, 0);
    v15 = 0;
  }
  objc_storeStrong(&v22, 0);
  objc_storeStrong(location, 0);
}

void sub_10018CF74(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 32), *(id *)(a1 + 40));
}

void sub_10018EBAC(uint64_t a1, uint64_t a2)
{
  void *v2;
  id *v3;

  v3 = (id *)(a2 + 40);
  v2 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);
  objc_storeStrong(v3, 0);
}

void sub_10018EBDC(uint64_t a1)
{
  objc_storeStrong((id *)(a1 + 40), 0);
}

void sub_10018EBE8(uint64_t a1, void *a2, void *a3, void *a4)
{
  unint64_t Nanoseconds;
  NSObject *v8;
  os_signpost_type_t v9;
  os_signpost_id_t v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  NSString *v15;
  NSNumber *v16;
  NSDictionary *v17;
  NSError *v18;
  id v19;
  id v20;
  NSObject *v21;
  void **block;
  int v23;
  int v24;
  void (*v25)(uint64_t);
  void *v26;
  id v27;
  id v28;
  id v29;
  id v30;
  os_log_type_t v31;
  os_log_t v32;
  char v33;
  id v34;
  char v35;
  id v36;
  os_log_type_t v37;
  os_log_t v38;
  uint64_t v39;
  os_log_type_t v40;
  os_log_t oslog;
  uint8_t buf[8];
  os_signpost_id_t v43;
  char v44;
  id v45;
  double v46;
  uint64_t v47;
  id v48;
  id v49;
  id location[2];
  const __CFString *v51;
  NSNumber *v52;
  uint8_t v53[16];
  uint8_t v54[16];
  uint8_t v55[24];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v49 = 0;
  objc_storeStrong(&v49, a3);
  v48 = 0;
  objc_storeStrong(&v48, a4);
  v47 = a1;
  v46 = 0.0;
  Nanoseconds = _BYSignpostGetNanoseconds(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v46 = (double)Nanoseconds / 1000000000.0;
  v45 = (id)_BYSignpostSubsystem(Nanoseconds);
  v44 = 2;
  v43 = 0;
  v43 = *(_QWORD *)(a1 + 56);
  if (v43 && v43 != -1 && os_signpost_enabled((os_log_t)v45))
  {
    v8 = v45;
    v9 = v44;
    v10 = v43;
    sub_100038C3C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v8, v9, v10, "ActivationSendRequest", "", buf, 2u);
  }
  objc_storeStrong(&v45, 0);
  oslog = (os_log_t)(id)_BYSignpostSubsystem(v11);
  v40 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_10008A810((uint64_t)v55, *(_QWORD *)(a1 + 56), *(uint64_t *)&v46);
    _os_log_impl((void *)&_mh_execute_header, oslog, v40, "END [%lld] %fs: ActivationSendRequest ", v55, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  v39 = 0;
  v12 = v49;
  v13 = objc_opt_class(NSHTTPURLResponse);
  if ((objc_opt_isKindOfClass(v12, v13) & 1) != 0)
    v14 = (uint64_t)objc_msgSend(v49, "statusCode");
  else
    v14 = 200;
  v39 = v14;
  if (!v48 && v39 == 200)
  {
    v21 = dispatch_get_global_queue(25, 0);
    block = _NSConcreteStackBlock;
    v23 = -1073741824;
    v24 = 0;
    v25 = sub_10018F1C4;
    v26 = &unk_100281000;
    v27 = *(id *)(a1 + 32);
    v28 = *(id *)(a1 + 40);
    v29 = location[0];
    dispatch_async(v21, &block);

    objc_storeStrong(&v29, 0);
    objc_storeStrong(&v28, 0);
    objc_storeStrong(&v27, 0);
  }
  else
  {
    if (v48)
    {
      v38 = (os_log_t)(id)_BYLoggingFacility(v14);
      v37 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        v35 = 0;
        v33 = 0;
        if ((_BYIsInternalInstall() & 1) != 0)
        {
          v15 = (NSString *)v48;
        }
        else if (v48)
        {
          v36 = objc_msgSend(v48, "domain");
          v35 = 1;
          v15 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v36, objc_msgSend(v48, "code"));
          v34 = v15;
          v33 = 1;
        }
        else
        {
          v15 = 0;
        }
        sub_100039500((uint64_t)v54, (uint64_t)v15);
        _os_log_impl((void *)&_mh_execute_header, v38, v37, "Buddy Activation: Failed session request: %{public}@", v54, 0xCu);
        if ((v33 & 1) != 0)

        if ((v35 & 1) != 0)
      }
      objc_storeStrong((id *)&v38, 0);
    }
    else
    {
      v32 = (os_log_t)(id)_BYLoggingFacility(v14);
      v31 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        sub_1000342B4((uint64_t)v53, v39);
        _os_log_impl((void *)&_mh_execute_header, v32, v31, "Buddy Activation: Session request returned http %ld", v53, 0xCu);
      }
      objc_storeStrong((id *)&v32, 0);
      v51 = CFSTR("statusCode");
      v16 = +[NSNumber numberWithInteger:](NSNumber, "numberWithInteger:", v39);
      v52 = v16;
      v17 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v52, &v51, 1);
      v18 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", CFSTR("com.apple.purplebuddy.activation"), 1, v17);
      v19 = v48;
      v48 = v18;

    }
    v20 = objc_msgSend(*(id *)(a1 + 32), "completion");

    if (v20)
    {
      v30 = objc_msgSend(*(id *)(a1 + 32), "completion");
      objc_msgSend(*(id *)(a1 + 32), "_cleanup");
      (*((void (**)(id, _QWORD, _QWORD, _QWORD, id))v30 + 2))(v30, 0, 0, 0, v48);
      objc_storeStrong(&v30, 0);
    }
  }
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 40), 0);
  objc_storeStrong(&v48, 0);
  objc_storeStrong(&v49, 0);
  objc_storeStrong(location, 0);
}

void sub_10018F1C4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  void *v6;
  void **v7;
  int v8;
  int v9;
  void (*v10)(uint64_t);
  void *v11;
  id v12;
  id v13;
  id v14;
  id obj;
  id v16;
  id location[3];

  location[2] = (id)a1;
  location[1] = (id)a1;
  location[0] = 0;
  v2 = *(void **)(a1 + 32);
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(_QWORD *)(a1 + 48);
  obj = 0;
  v5 = objc_msgSend(v2, "_newActivationRequestWithOptions:sessionData:error:", v3, v4, &obj);
  objc_storeStrong(location, obj);
  v16 = v5;
  v6 = &_dispatch_main_q;
  v7 = _NSConcreteStackBlock;
  v8 = -1073741824;
  v9 = 0;
  v10 = sub_10018F308;
  v11 = &unk_100281000;
  v12 = v16;
  v13 = *(id *)(a1 + 32);
  v14 = location[0];
  dispatch_async((dispatch_queue_t)v6, &v7);

  objc_storeStrong(&v14, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v16, 0);
  objc_storeStrong(location, 0);
}

void sub_10018F308(uint64_t a1)
{
  uint64_t v2;
  int v3;
  id v4;
  uint64_t v5;
  void *v6;
  id v7;
  void *v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  os_signpost_type_t v12;
  os_signpost_id_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  os_log_type_t v19;
  os_log_t v20;
  id v21;
  void **v22;
  int v23;
  int v24;
  void (*v25)(_QWORD *, void *, void *, void *, void *);
  void *v26;
  id v27[3];
  os_log_type_t v28;
  os_log_t v29;
  uint8_t v30[16];
  void *v31;
  char v32;
  os_log_t log;
  void *v34;
  void *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  os_log_type_t v40;
  os_log_t oslog;
  id location;
  os_log_type_t v43;
  id v44[3];
  uint8_t v45[16];
  uint8_t v46[16];
  uint8_t v47[32];
  uint8_t buf[24];

  v44[2] = (id)a1;
  v44[1] = (id)a1;
  if (*(_QWORD *)(a1 + 32))
  {
    objc_storeStrong((id *)(*(_QWORD *)(a1 + 40) + 72), *(id *)(a1 + 32));
    v44[0] = (id)_BYLoggingFacility(v2);
    v43 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)v44[0], OS_LOG_TYPE_DEFAULT))
    {
      v3 = *(_BYTE *)(*(_QWORD *)(a1 + 40) + 25) & 1;
      v4 = objc_msgSend(*(id *)(a1 + 32), "URL");
      location = objc_msgSend(v4, "absoluteString");
      sub_10005A460((uint64_t)buf, v3, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v44[0], v43, "Buddy Activation Request: Activate, AllowAnyHTTPSCert=%d, with URL: %@.\n", buf, 0x12u);

      objc_storeStrong(&location, 0);
    }
    objc_storeStrong(v44, 0);
    oslog = (os_log_t)(id)_BYLoggingFacility(v5);
    v40 = OS_LOG_TYPE_DEBUG;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
    {
      v6 = *(void **)(a1 + 32);
      v39 = objc_msgSend(v6, "allHTTPHeaderFields");
      sub_10003EB04((uint64_t)v47, (uint64_t)v6, (uint64_t)v39);
      _os_log_debug_impl((void *)&_mh_execute_header, oslog, v40, "Using request %@ with headers %@", v47, 0x16u);

      objc_storeStrong(&v39, 0);
    }
    objc_storeStrong((id *)&oslog, 0);
    v38 = objc_msgSend(*(id *)(a1 + 40), "completion");
    v37 = 0;
    v36 = 0;
    v7 = (id)_BYSignpostSubsystem(v38);
    v8 = (void *)_BYSignpostCreate(v7);
    v35 = v9;
    v34 = v8;

    log = (os_log_t)(id)_BYSignpostSubsystem(v10);
    v32 = 1;
    v31 = v34;
    if (v34 && v31 != (void *)-1 && os_signpost_enabled(log))
    {
      v11 = log;
      v12 = v32;
      v13 = (os_signpost_id_t)v31;
      sub_100038C3C(v30);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v11, v12, v13, "ActivationSendRequest", "", v30, 2u);
    }
    objc_storeStrong((id *)&log, 0);
    v29 = (os_log_t)(id)_BYSignpostSubsystem(v14);
    v28 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000342B4((uint64_t)v46, (uint64_t)v34);
      _os_log_impl((void *)&_mh_execute_header, v29, v28, "BEGIN [%lld]: ActivationSendRequest ", v46, 0xCu);
    }
    objc_storeStrong((id *)&v29, 0);
    v36 = v34;
    v37 = v35;
    v22 = _NSConcreteStackBlock;
    v23 = -1073741824;
    v24 = 0;
    v25 = sub_10018F814;
    v26 = &unk_100284090;
    v27[1] = v34;
    v27[2] = v35;
    v27[0] = v38;
    objc_msgSend(*(id *)(a1 + 40), "setCompletion:", &v22);
    v15 = objc_msgSend(*(id *)(a1 + 40), "session");
    v21 = objc_msgSend(v15, "dataTaskWithRequest:", *(_QWORD *)(a1 + 32));

    v20 = (os_log_t)(id)_BYLoggingFacility(v16);
    v19 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      sub_100039500((uint64_t)v45, (uint64_t)v21);
      _os_log_impl((void *)&_mh_execute_header, v20, v19, "Buddy Activation Request: Created data task: %{public}@", v45, 0xCu);
    }
    objc_storeStrong((id *)&v20, 0);
    objc_msgSend(v21, "resume");
    objc_storeStrong(&v21, 0);
    objc_storeStrong(v27, 0);
    objc_storeStrong(&v38, 0);
  }
  else
  {
    v17 = objc_msgSend(*(id *)(a1 + 40), "completion");

    if (v17)
    {
      v18 = objc_msgSend(*(id *)(a1 + 40), "completion");
      objc_msgSend(*(id *)(a1 + 40), "_cleanup");
      (*((void (**)(id, _QWORD, _QWORD, _QWORD, _QWORD))v18 + 2))(v18, 0, 0, 0, *(_QWORD *)(a1 + 48));
      objc_storeStrong(&v18, 0);
    }
  }
}

void sub_10018F814(_QWORD *a1, void *a2, void *a3, void *a4, void *a5)
{
  unint64_t Nanoseconds;
  NSObject *v10;
  os_signpost_type_t v11;
  os_signpost_id_t v12;
  uint64_t v13;
  os_log_t oslog;
  uint8_t buf[16];
  os_signpost_id_t v16;
  char v17;
  os_log_t log;
  double v19;
  _QWORD *v20;
  id v21;
  id v22;
  id v23;
  id location[2];
  uint8_t v25[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v23 = 0;
  objc_storeStrong(&v23, a3);
  v22 = 0;
  objc_storeStrong(&v22, a4);
  v21 = 0;
  objc_storeStrong(&v21, a5);
  v20 = a1;
  v19 = 0.0;
  Nanoseconds = _BYSignpostGetNanoseconds(a1[5], a1[6]);
  v19 = (double)Nanoseconds / 1000000000.0;
  log = (os_log_t)(id)_BYSignpostSubsystem(Nanoseconds);
  v17 = 2;
  v16 = 0;
  v16 = a1[5];
  if (v16 && v16 != -1 && os_signpost_enabled(log))
  {
    v10 = log;
    v11 = v17;
    v12 = v16;
    sub_100038C3C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, v11, v12, "ActivationSendRequest", "", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  oslog = (os_log_t)(id)_BYSignpostSubsystem(v13);
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_10008A810((uint64_t)v25, a1[5], *(uint64_t *)&v19);
    _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: ActivationSendRequest ", v25, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  if (a1[4])
    (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(&v21, 0);
  objc_storeStrong(&v22, 0);
  objc_storeStrong(&v23, 0);
  objc_storeStrong(location, 0);
}

void sub_10018FBDC(uint64_t a1)
{
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_signpost_type_t v7;
  os_signpost_id_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  NSString *v12;
  void *v13;
  unint64_t Nanoseconds;
  NSObject *v15;
  os_signpost_type_t v16;
  os_signpost_id_t v17;
  uint64_t v18;
  id v19;
  id v20;
  id v21;
  os_log_type_t v22;
  os_log_t v23;
  os_log_type_t v24;
  os_log_t v25;
  uint8_t v26[16];
  uint64_t v27;
  char v28;
  os_log_t log;
  double v30;
  void **block;
  int v32;
  int v33;
  uint64_t (*v34)(uint64_t);
  void *v35;
  id v36;
  id v37;
  char v38;
  id v39;
  char v40;
  id v41;
  os_log_type_t v42;
  os_log_t v43;
  id v44;
  id obj;
  os_log_type_t v46;
  os_log_t oslog;
  uint8_t buf[8];
  uint64_t v49;
  char v50;
  id location;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  id v56;
  id v57[3];
  uint8_t v58[32];
  uint8_t v59[32];
  uint8_t v60[16];
  uint8_t v61[24];

  v57[2] = (id)a1;
  v57[1] = (id)a1;
  v57[0] = 0;
  v56 = 0;
  v55 = 0;
  v54 = 0;
  v2 = (id)_BYSignpostSubsystem(a1);
  v3 = _BYSignpostCreate(v2);
  v53 = v4;
  v52 = v3;

  location = (id)_BYSignpostSubsystem(v5);
  v50 = 1;
  v49 = v52;
  if (v52 && v49 != -1 && os_signpost_enabled((os_log_t)location))
  {
    v6 = location;
    v7 = v50;
    v8 = v49;
    sub_100038C3C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v6, v7, v8, "ActivationCreateSessionRequest", "", buf, 2u);
  }
  objc_storeStrong(&location, 0);
  oslog = (os_log_t)(id)_BYSignpostSubsystem(v9);
  v46 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000342B4((uint64_t)v61, v52);
    _os_log_impl((void *)&_mh_execute_header, oslog, v46, "BEGIN [%lld]: ActivationCreateSessionRequest ", v61, 0xCu);
  }
  objc_storeStrong((id *)&oslog, 0);
  v54 = v52;
  v55 = v53;
  obj = v57[0];
  v44 = v56;
  v10 = MAECreateSessionRequestWithError(&obj, 0, &v44);
  objc_storeStrong(v57, obj);
  objc_storeStrong(&v56, v44);
  if ((v10 & 1) != 0)
  {
    Nanoseconds = _BYSignpostGetNanoseconds(v54, v55);
    v30 = (double)Nanoseconds / 1000000000.0;
    log = (os_log_t)(id)_BYSignpostSubsystem(Nanoseconds);
    v28 = 2;
    v27 = v54;
    if (v54 && v27 != -1 && os_signpost_enabled(log))
    {
      v15 = log;
      v16 = v28;
      v17 = v27;
      sub_100038C3C(v26);
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v15, v16, v17, "ActivationCreateSessionRequest", "", v26, 2u);
    }
    objc_storeStrong((id *)&log, 0);
    v25 = (os_log_t)(id)_BYSignpostSubsystem(v18);
    v24 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      sub_10008A810((uint64_t)v59, v54, *(uint64_t *)&v30);
      _os_log_impl((void *)&_mh_execute_header, v25, v24, "END [%lld] %fs: ActivationCreateSessionRequest ", v59, 0x16u);
    }
    objc_storeStrong((id *)&v25, 0);
    v19 = objc_msgSend(*(id *)(a1 + 32), "_addCommonHeaders:", v57[0]);
    if (*(_QWORD *)(a1 + 56))
      v19 = (id)(*(uint64_t (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 48))
      v19 = objc_msgSend(v57[0], "setURL:", *(_QWORD *)(*(_QWORD *)(a1 + 32) + 48));
    v23 = (os_log_t)(id)_BYLoggingFacility(v19);
    v22 = OS_LOG_TYPE_DEBUG;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      v20 = v57[0];
      v21 = objc_msgSend(v57[0], "allHTTPHeaderFields");
      sub_10003EB04((uint64_t)v58, (uint64_t)v20, (uint64_t)v21);
      _os_log_debug_impl((void *)&_mh_execute_header, v23, v22, "Created session request %@ with headers %@", v58, 0x16u);

      objc_storeStrong(&v21, 0);
    }
    objc_storeStrong((id *)&v23, 0);
    objc_msgSend(*(id *)(a1 + 32), "_sendSessionRequest:withOptions:", v57[0], *(_QWORD *)(a1 + 40));
  }
  else
  {
    v43 = (os_log_t)(id)_BYLoggingFacility(v11);
    v42 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      v40 = 0;
      v38 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v12 = (NSString *)v56;
      }
      else if (v56)
      {
        v41 = objc_msgSend(v56, "domain");
        v40 = 1;
        v12 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v41, objc_msgSend(v56, "code"));
        v39 = v12;
        v38 = 1;
      }
      else
      {
        v12 = 0;
      }
      sub_100039500((uint64_t)v60, (uint64_t)v12);
      _os_log_impl((void *)&_mh_execute_header, v43, v42, "Activation: Failed to create session url request: %{public}@", v60, 0xCu);
      if ((v38 & 1) != 0)

      if ((v40 & 1) != 0)
    }
    objc_storeStrong((id *)&v43, 0);
    v13 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v32 = -1073741824;
    v33 = 0;
    v34 = sub_100190200;
    v35 = &unk_100281190;
    v37 = *(id *)(a1 + 48);
    v36 = v56;
    dispatch_async((dispatch_queue_t)v13, &block);

    objc_storeStrong(&v36, 0);
    objc_storeStrong(&v37, 0);
  }
  objc_storeStrong(&v56, 0);
  objc_storeStrong(v57, 0);
}

uint64_t sub_100190200(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), 0, 0, 0, *(_QWORD *)(a1 + 32));
}

void sub_1001905C0(_QWORD *a1, void *a2, void *a3, void *a4, void *a5)
{
  unint64_t Nanoseconds;
  NSObject *v10;
  os_signpost_type_t v11;
  os_signpost_id_t v12;
  uint64_t v13;
  os_log_t oslog;
  uint8_t buf[16];
  os_signpost_id_t v16;
  char v17;
  os_log_t log;
  double v19;
  _QWORD *v20;
  id v21;
  id v22;
  id v23;
  id location[2];
  uint8_t v25[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v23 = 0;
  objc_storeStrong(&v23, a3);
  v22 = 0;
  objc_storeStrong(&v22, a4);
  v21 = 0;
  objc_storeStrong(&v21, a5);
  v20 = a1;
  v19 = 0.0;
  Nanoseconds = _BYSignpostGetNanoseconds(a1[5], a1[6]);
  v19 = (double)Nanoseconds / 1000000000.0;
  log = (os_log_t)(id)_BYSignpostSubsystem(Nanoseconds);
  v17 = 2;
  v16 = 0;
  v16 = a1[5];
  if (v16 && v16 != -1 && os_signpost_enabled(log))
  {
    v10 = log;
    v11 = v17;
    v12 = v16;
    sub_100038C3C(buf);
    _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v10, v11, v12, "ActivationSendRequest", "", buf, 2u);
  }
  objc_storeStrong((id *)&log, 0);
  oslog = (os_log_t)(id)_BYSignpostSubsystem(v13);
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_10008A810((uint64_t)v25, a1[5], *(uint64_t *)&v19);
    _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "END [%lld] %fs: ActivationSendRequest ", v25, 0x16u);
  }
  objc_storeStrong((id *)&oslog, 0);
  if (a1[4])
    (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(&v21, 0);
  objc_storeStrong(&v22, 0);
  objc_storeStrong(&v23, 0);
  objc_storeStrong(location, 0);
}

double sub_1001912D4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  double result;

  *(_QWORD *)&result = 67109634;
  *(_DWORD *)a1 = 67109634;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 2112;
  *(_QWORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 18) = 2112;
  *(_QWORD *)(a1 + 20) = a4;
  return result;
}

void sub_100191520(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _WORD v6[7];
  os_log_type_t v7;
  os_log_t oslog[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
  v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog[0];
    v5 = v7;
    sub_100038C3C(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Invalidating and cancelling activation session task due to connectivity", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  -[objc_class cancel](a1[4].isa, "cancel");
  objc_storeStrong(location, 0);
}

void sub_100192980(id a1)
{
  id v1;
  id v2;
  id v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  id v7;
  id v8;
  void *v9;
  _QWORD __b[8];
  id v11;
  id location[3];
  _BYTE v13[128];

  location[2] = a1;
  location[1] = a1;
  v1 = +[BuddyTestFundamentalFlow classes](BuddyTestFundamentalFlow, "classes");
  location[0] = objc_msgSend(v1, "mutableCopy");

  memset(__b, 0, sizeof(__b));
  v2 = objc_msgSend(location[0], "copy");
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", __b, v13, 16);
  if (v3)
  {
    v4 = *(_QWORD *)__b[2];
    do
    {
      for (i = 0; i < (unint64_t)v3; ++i)
      {
        if (*(_QWORD *)__b[2] != v4)
          objc_enumerationMutation(v2);
        v11 = 0;
        v11 = *(id *)(__b[1] + 8 * i);
        if ((objc_msgSend(v11, "isSubclassOfClass:", objc_opt_class(BFFFlow)) & 1) != 0)
        {
          v6 = location[0];
          v7 = objc_msgSend(v11, "allowedFlowItems");
          objc_msgSend(v6, "addObjectsFromArray:", v7);

        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", __b, v13, 16);
    }
    while (v3);
  }

  v8 = objc_msgSend(location[0], "copy");
  v9 = (void *)qword_1002EEBD0;
  qword_1002EEBD0 = (uint64_t)v8;

  objc_storeStrong(location, 0);
}

void sub_100193658(uint64_t a1)
{
  double v2;
  double v3;
  id v4;

  objc_msgSend(*(id *)(a1 + 32), "alphaForBuddyBackgroundStyle:", *(_QWORD *)(a1 + 40), a1, a1);
  v3 = v2;
  v4 = objc_msgSend(*(id *)(a1 + 32), "view");
  objc_msgSend(v4, "setAlpha:", v3);

}

id sub_100193830()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEBE0;
  v13 = qword_1002EEBE0;
  if (!qword_1002EEBE0)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100193A80;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100193A80(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_10019391C(id a1, BOOL a2, NSError *a3)
{
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  _WORD v7[3];
  os_log_type_t v8;
  os_log_t v9;
  os_log_type_t v10;
  os_log_t oslog[2];
  id location;
  BOOL v13;
  id v14;
  uint8_t buf[24];

  v14 = a1;
  v13 = a2;
  location = 0;
  objc_storeStrong(&location, a3);
  oslog[1] = (os_log_t)a1;
  if (v13)
  {
    v9 = (os_log_t)(id)_BYLoggingFacility(v4);
    v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v9;
      v6 = v8;
      sub_100038C3C(v7);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "FTRegAppleIDSetupManager (background) setup success.", (uint8_t *)v7, 2u);
    }
    objc_storeStrong((id *)&v9, 0);
  }
  else
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v10 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      sub_100038C28((uint64_t)buf, (uint64_t)location);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], v10, "FTRegAppleIDSetupManager (background) setup failed with error %@", buf, 0xCu);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  objc_storeStrong(&location, 0);
}

void sub_100193A80(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_100193BC0();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("FTRegAppleIDSetupManager");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getFTRegAppleIDSetupManagerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyAppleIDFacetimeRegistrationManager.m"), 20, CFSTR("Unable to find class %s"), "FTRegAppleIDSetupManager");

    __break(1u);
  }
  qword_1002EEBE0 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_100193BC0()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_100193CEC((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *CommunicationsSetupUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyAppleIDFacetimeRegistrationManager.m"), 19, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_100193CEC(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEBE8;
  v9 = qword_1002EEBE8;
  if (!qword_1002EEBE8)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100193D7C;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_100193D7C((uint64_t)&v2);
  }
  return qword_1002EEBE8;
}

uint64_t sub_100193D7C(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/CommunicationsSetupUI.framework/CommunicationsSetupUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEBE8 = result;
  return result;
}

void sub_100193F8C(uint64_t a1, void *a2)
{
  id v3;
  NSURL *v4;
  uint64_t v5;
  id v6;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(location[0], "genericTermsURL");
  v4 = +[NSURL URLWithString:](NSURL, "URLWithString:", v3);
  objc_msgSend(*(id *)(a1 + 32), "setTermsURL:", v4);

  v5 = *(_QWORD *)(a1 + 40);
  v6 = objc_msgSend(*(id *)(a1 + 32), "termsURL");
  (*(void (**)(uint64_t, BOOL))(v5 + 16))(v5, v6 != 0);

  objc_storeStrong(location, 0);
}

void sub_10019419C(uint64_t a1, void *a2, void *a3)
{
  id v5;
  id v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  id v11;
  void *v12;
  id v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v17 = 0;
  objc_storeStrong(&v17, a3);
  if ((objc_msgSend(*(id *)(a1 + 32), "presentationCanceled") & 1) == 0)
  {
    if (location[0])
    {
      objc_msgSend(*(id *)(a1 + 32), "setNavigationController:", *(_QWORD *)(a1 + 40));
      objc_msgSend(*(id *)(a1 + 32), "setPresentationCompletion:", *(_QWORD *)(a1 + 48));
      v5 = objc_alloc_init((Class)RemoteUIController);
      objc_msgSend(*(id *)(a1 + 32), "setRemoteUIController:", v5);

      v6 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
      v7 = objc_msgSend(*(id *)(a1 + 32), "remoteUIController");
      objc_msgSend(v7, "setNavigationController:", v6);

      v8 = *(void **)(a1 + 32);
      v9 = objc_msgSend(v8, "remoteUIController");
      objc_msgSend(v9, "setDelegate:", v8);

      v10 = +[RUIStyle setupAssistantStyle](RUIStyle, "setupAssistantStyle");
      v11 = objc_msgSend(*(id *)(a1 + 32), "remoteUIController");
      objc_msgSend(v11, "setStyle:", v10);

      v12 = *(void **)(a1 + 32);
      v13 = objc_msgSend(v12, "remoteUIController");
      objc_msgSend(v12, "_addHandlersForTermsButtonsToRemoteUIController:", v13);

      v14 = objc_msgSend(*(id *)(a1 + 32), "remoteUIController");
      v15 = location[0];
      v16 = objc_msgSend(*(id *)(a1 + 32), "termsURL");
      objc_msgSend(v14, "loadData:baseURL:", v15, v16);

    }
    else
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
    }
  }
  objc_storeStrong(&v17, 0);
  objc_storeStrong(location, 0);
}

void sub_1001947BC(NSObject *a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  Class isa;
  void *v11;
  id v12;
  _WORD v13[7];
  os_log_type_t v14;
  os_log_t oslog[2];
  id v16;
  id v17;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v17 = 0;
  objc_storeStrong(&v17, a3);
  v16 = 0;
  objc_storeStrong(&v16, a4);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v7);
  v14 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v8 = oslog[0];
    v9 = v14;
    sub_100038C3C(v13);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "User agreed to terms", (uint8_t *)v13, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  isa = a1[4].isa;
  v11 = (void *)objc_opt_class(isa);
  v12 = objc_msgSend(v11, "_termsVersionFromObjectModel:", location[0]);
  -[objc_class _userRespondedToCombinedTCsWithAgreement:withSLAVersion:](isa, "_userRespondedToCombinedTCsWithAgreement:withSLAVersion:", 1, v12);

  objc_storeStrong(&v16, 0);
  objc_storeStrong(&v17, 0);
  objc_storeStrong(location, 0);
}

void sub_1001948F0(NSObject *a1, void *a2, void *a3, void *a4)
{
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  _WORD v10[7];
  os_log_type_t v11;
  os_log_t oslog[2];
  id v13;
  id v14;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v14 = 0;
  objc_storeStrong(&v14, a3);
  v13 = 0;
  objc_storeStrong(&v13, a4);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v7);
  v11 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v8 = oslog[0];
    v9 = v11;
    sub_100038C3C(v10);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "User disagreed to terms", (uint8_t *)v10, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  -[objc_class _userRespondedToCombinedTCsWithAgreement:withSLAVersion:](a1[4].isa, "_userRespondedToCombinedTCsWithAgreement:withSLAVersion:", 0, 0);
  objc_storeStrong(&v13, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_1001964AC(uint64_t a1, char a2, id obj)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  NSString *v7;
  char v8;
  NSString *v9;
  char v10;
  id v11;
  os_log_t oslog;
  void **v13;
  int v14;
  int v15;
  void (*v16)(NSObject *, char, id);
  void *v17;
  id v18;
  id v19[2];
  id location;
  char v21;
  uint64_t v22;
  uint8_t buf[24];

  v22 = a1;
  v21 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v19[1] = (id)a1;
  if ((v21 & 1) != 0)
  {
    v5 = *(void **)(a1 + 32);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 48);
    v13 = _NSConcreteStackBlock;
    v14 = -1073741824;
    v15 = 0;
    v16 = sub_10019671C;
    v17 = &unk_1002831A0;
    v18 = *(id *)(a1 + 40);
    v19[0] = *(id *)(a1 + 48);
    objc_msgSend(v5, "saveAccount:withCompletionHandler:", v6, &v13);
    objc_storeStrong(v19, 0);
    objc_storeStrong(&v18, 0);
  }
  else
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v4);
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v10 = 0;
      v8 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v7 = (NSString *)location;
      }
      else if (location)
      {
        v11 = objc_msgSend(location, "domain");
        v10 = 1;
        v7 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v11, objc_msgSend(location, "code"));
        v9 = v7;
        v8 = 1;
      }
      else
      {
        v7 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v7);
      _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "AppleIDHost: Silent -updateProperties failed, error: %{public}@", buf, 0xCu);
      if ((v8 & 1) != 0)

      if ((v10 & 1) != 0)
    }
    objc_storeStrong((id *)&oslog, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  }
  objc_storeStrong(&location, 0);
}

void sub_10019671C(NSObject *a1, char a2, id obj)
{
  int v4;
  NSString *v5;
  char v6;
  NSString *v7;
  char v8;
  id v9;
  os_log_t oslog[2];
  id location;
  char v12;
  NSObject *v13;
  uint8_t buf[24];

  v13 = a1;
  v12 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(-[objc_class setRanSilentUpdateProperties:](a1[4].isa, "setRanSilentUpdateProperties:", 1));
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v4 = v12 & 1;
    v8 = 0;
    v6 = 0;
    if ((_BYIsInternalInstall() & 1) != 0)
    {
      v5 = (NSString *)location;
    }
    else if (location)
    {
      v9 = objc_msgSend(location, "domain");
      v8 = 1;
      v5 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v9, objc_msgSend(location, "code"));
      v7 = v5;
      v6 = 1;
    }
    else
    {
      v5 = 0;
    }
    sub_1000503FC((uint64_t)buf, v4, (uint64_t)v5);
    _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "AppleIDHost: Silent -updateProperties succeeded! Save success = %d error: %{public}@", buf, 0x12u);
    if ((v6 & 1) != 0)

    if ((v8 & 1) != 0)
  }
  objc_storeStrong((id *)oslog, 0);
  (*((void (**)(void))a1[5].isa + 2))();
  objc_storeStrong(&location, 0);
}

void sub_1001971C4(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v8[1] = a1;
  v8[0] = objc_alloc_init((Class)ACAccountStore);
  v7 = objc_msgSend(v8[0], "accounts");
  if (objc_msgSend(v7, "count"))
  {
    v3 = +[BuddyAccountTools sharedBuddyAccountTools](BuddyAccountTools, "sharedBuddyAccountTools");
    v4 = objc_msgSend(v7, "objectAtIndexedSubscript:", 0);
    objc_msgSend(v3, "removeAccount:completion:", v4, 0);

  }
  v5 = objc_msgSend(a1[4], "delegate");
  v6 = objc_msgSend(v5, "popToBuddyControllerWithClass:withOffset:animated:", objc_opt_class(DeviceRestoreChoiceController), 1, 1);

  objc_storeStrong(&v7, 0);
  objc_storeStrong(v8, 0);
  objc_storeStrong(location, 0);
}

id sub_1001978F0()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEBF0;
  v13 = qword_1002EEBF0;
  if (!qword_1002EEBF0)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100197BB0;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_100197BB0(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_100197BB0(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_100197CF0();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("SBFSecureWindow");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getSBFSecureWindowClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyLockscreenSceneDelegate.m"), 21, CFSTR("Unable to find class %s"), "SBFSecureWindow");

    __break(1u);
  }
  qword_1002EEBF0 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_100197CF0()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_100197E1C((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *SpringBoardFoundationLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyLockscreenSceneDelegate.m"), 20, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_100197E1C(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEBF8;
  v9 = qword_1002EEBF8;
  if (!qword_1002EEBF8)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_100197EAC;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_100197EAC((uint64_t)&v2);
  }
  return qword_1002EEBF8;
}

uint64_t sub_100197EAC(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/SpringBoardFoundation.framework/SpringBoardFoundation";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEBF8 = result;
  return result;
}

void sub_1001995B8(uint64_t a1)
{
  id v2;
  unsigned __int8 v3;
  id v4;
  id v5;
  id v6;
  unsigned __int8 v7;
  uint64_t v8;
  NSString *v9;
  NSObject *v10;
  os_log_type_t v11;
  id v12;
  id v13;
  uint8_t v14[7];
  os_log_type_t v15;
  os_log_t v16;
  char v17;
  id v18;
  char v19;
  id v20;
  os_log_type_t v21;
  os_log_t oslog;
  id obj;
  id location;
  id v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint8_t buf[24];

  v28 = a1;
  v27 = a1;
  v26 = 0;
  v2 = objc_msgSend(*(id *)(a1 + 32), "managedConfiguration");
  v3 = objc_msgSend(v2, "isPasscodeSet");

  v26 = v3 & 1;
  if ((v3 & 1) == 0)
  {
    v4 = objc_msgSend(*(id *)(a1 + 32), "passcodeCacheManager");
    v25 = objc_msgSend(v4, "cachedPasscode");

    v5 = objc_msgSend(*(id *)(a1 + 32), "passcodeCacheManager");
    objc_msgSend(v5, "uncachePasscode");

    if (v25)
    {
      location = 0;
      v6 = objc_msgSend(*(id *)(a1 + 32), "managedConfiguration");
      obj = 0;
      v7 = objc_msgSend(v6, "changePasscodeFrom:to:outError:", 0, v25, &obj);
      objc_storeStrong(&location, obj);

      if (((v7 ^ 1) & 1) != 0)
      {
        oslog = (os_log_t)(id)_BYLoggingFacility(v8);
        v21 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
        {
          v19 = 0;
          v17 = 0;
          if ((_BYIsInternalInstall() & 1) != 0)
          {
            v9 = (NSString *)location;
          }
          else if (location)
          {
            v20 = objc_msgSend(location, "domain");
            v19 = 1;
            v9 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v20, objc_msgSend(location, "code"));
            v18 = v9;
            v17 = 1;
          }
          else
          {
            v9 = 0;
          }
          sub_100039500((uint64_t)buf, (uint64_t)v9);
          _os_log_impl((void *)&_mh_execute_header, oslog, v21, "Failed to set the passcode: %{public}@", buf, 0xCu);
          if ((v17 & 1) != 0)

          if ((v19 & 1) != 0)
        }
        objc_storeStrong((id *)&oslog, 0);
      }
      else
      {
        v16 = (os_log_t)(id)_BYLoggingFacility(v8);
        v15 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
        {
          v10 = v16;
          v11 = v15;
          sub_100038C3C(v14);
          _os_log_impl((void *)&_mh_execute_header, v10, v11, "Successfully set the passcode!", v14, 2u);
        }
        objc_storeStrong((id *)&v16, 0);
        BYSetupAssistantCreateAuthContext(v25);
        v12 = objc_msgSend(*(id *)(a1 + 32), "passcodeCacheManager");
        objc_msgSend(v12, "cachePasscode:retrievable:", v25, 1);

        v13 = objc_msgSend(*(id *)(a1 + 32), "buddyPreferences");
        objc_msgSend(v13, "setObject:forKey:", &__kCFBooleanTrue, CFSTR("Passcode4Presented"));

      }
      objc_storeStrong(&location, 0);
    }
    objc_storeStrong(&v25, 0);
  }
  if (*(_QWORD *)(a1 + 40))
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_10019AB4C(uint64_t a1)
{
  id v2;
  void *v3;
  id v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "delegate", a1, a1);
  v3 = *(void **)(a1 + 32);
  v4 = objc_msgSend(v3, "error");
  objc_msgSend(v2, "backupDeviceController:backupCompletedWithError:", v3, v4);

}

double sub_10019B5EC()
{
  return 0.0;
}

double sub_10019C688(uint64_t a1, int a2, uint64_t a3, int a4)
{
  double result;

  *(_QWORD *)&result = 67109634;
  *(_DWORD *)a1 = 67109634;
  *(_DWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 8) = 2112;
  *(_QWORD *)(a1 + 10) = a3;
  *(_WORD *)(a1 + 18) = 1024;
  *(_DWORD *)(a1 + 20) = a4;
  return result;
}

double sub_10019CDB8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  double result;

  *(_QWORD *)&result = 138412802;
  *(_DWORD *)a1 = 138412802;
  *(_QWORD *)(a1 + 4) = a2;
  *(_WORD *)(a1 + 12) = 1024;
  *(_DWORD *)(a1 + 14) = a3;
  *(_WORD *)(a1 + 18) = 2048;
  *(_QWORD *)(a1 + 20) = a4;
  return result;
}

void sub_10019D11C(id a1)
{
  NSMutableDictionary *v1;
  void *v2;

  v1 = objc_opt_new(NSMutableDictionary);
  v2 = (void *)qword_1002EEC00;
  qword_1002EEC00 = (uint64_t)v1;

}

void sub_10019E9BC(uint64_t a1)
{
  id v1;
  id v2;

  v1 = objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 16), "layer", a1, a1);
  v2 = objc_retainAutorelease(+[UIColor _labelColor](UIColor, "_labelColor"));
  objc_msgSend(v1, "setBorderColor:", objc_msgSend(v2, "CGColor"));

}

void sub_10019FCE0(id a1)
{
  BuddySIMManager *v1;
  void *v2;

  v1 = objc_alloc_init(BuddySIMManager);
  v2 = (void *)qword_1002EEC18;
  qword_1002EEC18 = (uint64_t)v1;

}

void sub_1001A06B8(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (a1[4])
    (*(void (**)(void))(a1[4] + 16))();
  objc_storeStrong(location, 0);
}

double sub_1001A1D68()
{
  return 0.01;
}

void sub_1001A2110(id *a1, void *a2)
{
  id v3;
  id v4;
  id v5;
  double v6;
  double v7;
  id v8;
  id v9;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(a1[4], "view", 0, a1);
  v4 = objc_msgSend(v3, "window");
  v5 = objc_msgSend(v4, "windowScene");
  +[BuddyPasscodeBaseViewController _passcodeInputVerticalPaddingForOrientation:](BuddyPasscodeBaseViewController, "_passcodeInputVerticalPaddingForOrientation:", objc_msgSend(v5, "interfaceOrientation"));
  v7 = v6;

  v8 = objc_msgSend(a1[4], "contentViewTopConstraint");
  objc_msgSend(v8, "setConstant:", v7);

  v9 = objc_msgSend(a1[4], "passcodeInputViewBottomConstraint");
  objc_msgSend(v9, "setConstant:", v7);

  objc_storeStrong(location, 0);
}

void sub_1001A2890(id *a1, void *a2)
{
  id v3;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(a1[4], "delegate");
  objc_msgSend(v3, "flowItemDone:", a1[4]);

  objc_storeStrong(location, 0);
}

void sub_1001A28FC(uint64_t a1)
{
  id v2;
  unsigned __int8 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  void *v7;
  NSObject *v8;
  os_log_type_t v9;
  id v10;
  id v11;
  unsigned __int8 v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  id v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  void *v20;
  void **v21;
  int v22;
  int v23;
  void (*v24)(uint64_t);
  void *v25;
  id v26;
  uint8_t v27[7];
  os_log_type_t v28;
  os_log_t v29;
  uint8_t v30[15];
  os_log_type_t v31;
  os_log_t v32;
  char v33;
  uint8_t v34[15];
  os_log_type_t v35;
  os_log_t oslog;
  void **block;
  int v38;
  int v39;
  void (*v40)(uint64_t);
  void *v41;
  id v42;
  uint8_t buf[15];
  os_log_type_t v44;
  id location;
  char v46;
  uint64_t v47;
  uint64_t v48;

  v48 = a1;
  v47 = a1;
  v46 = 0;
  v2 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
  v3 = objc_msgSend(v2, "validatePasscode:", *(_QWORD *)(a1 + 40));

  v46 = v3 & 1;
  if ((v3 & 1) != 0)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v4);
    v35 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      v8 = oslog;
      v9 = v35;
      sub_100038C3C(v34);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Passcode entered by user does match source device", v34, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
    v10 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
    objc_msgSend(v10, "setHasValidatedPasscode:", 1);

    v33 = 0;
    v11 = objc_msgSend(*(id *)(a1 + 32), "managedConfiguration");
    v12 = objc_msgSend(v11, "passcode:meetsCurrentConstraintsOutError:", *(_QWORD *)(a1 + 40), 0);

    v33 = v12 & 1;
    v13 = objc_msgSend(*(id *)(a1 + 32), "_shouldSetPasscode");
    if ((v13 & 1) != 0 && (v33 & 1) != 0)
    {
      v32 = (os_log_t)(id)_BYLoggingFacility(v13);
      v31 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        v14 = v32;
        v15 = v31;
        sub_100038C3C(v30);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Setting a breadcrumb for the passcode to be set later...", v30, 2u);
      }
      objc_storeStrong((id *)&v32, 0);
      v16 = +[UIKeyboardInputModeController sharedInputModeController](UIKeyboardInputModeController, "sharedInputModeController");
      objc_msgSend(v16, "saveDeviceUnlockPasscodeInputModes");

      v17 = objc_msgSend(*(id *)(a1 + 32), "passcodeCacheManager");
      objc_msgSend(v17, "cachePasscode:retrievable:", *(_QWORD *)(a1 + 40), 1);

    }
    else
    {
      v29 = (os_log_t)(id)_BYLoggingFacility(v13);
      v28 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        v18 = v29;
        v19 = v28;
        sub_100038C3C(v27);
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Passcode breadcrumb not set; not supposed to set passcode or does not meet current policy",
          v27,
          2u);
      }
      objc_storeStrong((id *)&v29, 0);
    }
    v20 = &_dispatch_main_q;
    v21 = _NSConcreteStackBlock;
    v22 = -1073741824;
    v23 = 0;
    v24 = sub_1001A2DF0;
    v25 = &unk_100280730;
    v26 = *(id *)(a1 + 32);
    dispatch_async((dispatch_queue_t)v20, &v21);

    objc_storeStrong(&v26, 0);
  }
  else
  {
    location = (id)_BYLoggingFacility(v4);
    v44 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_DEFAULT))
    {
      v5 = location;
      v6 = v44;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Passcode entered by user does not match source device", buf, 2u);
    }
    objc_storeStrong(&location, 0);
    v7 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v38 = -1073741824;
    v39 = 0;
    v40 = sub_1001A2D0C;
    v41 = &unk_100280730;
    v42 = *(id *)(a1 + 32);
    dispatch_async((dispatch_queue_t)v7, &block);

    objc_storeStrong(&v42, 0);
  }
}

void sub_1001A2D0C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;

  v2 = objc_msgSend(*(id *)(a1 + 32), "view", a1, a1);
  v3 = objc_msgSend(v2, "window");
  objc_msgSend(v3, "setUserInteractionEnabled:", 1);

  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:](BFFViewControllerSpinnerManager, "stopAnimatingSpinnerFor:", CFSTR("BUDDY_PROXIMITY_PASSCODE_VALIDATION_CONTROLLER"));
  v4 = objc_msgSend(*(id *)(a1 + 32), "passcodeInputView");
  objc_msgSend(v4, "shakePasscode");

  v5 = objc_msgSend(*(id *)(a1 + 32), "passcodeInputView");
  objc_msgSend(v5, "setPasscode:", &stru_100284738);

}

void sub_1001A2DF0(uint64_t a1)
{
  id v2;
  id v3;
  id v4;

  v2 = objc_msgSend(*(id *)(a1 + 32), "view", a1, a1);
  v3 = objc_msgSend(v2, "window");
  objc_msgSend(v3, "setUserInteractionEnabled:", 1);

  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:](BFFViewControllerSpinnerManager, "stopAnimatingSpinnerFor:", CFSTR("BUDDY_PROXIMITY_PASSCODE_VALIDATION_CONTROLLER"));
  v4 = objc_msgSend(*(id *)(a1 + 32), "delegate");
  objc_msgSend(v4, "flowItemDone:", *(_QWORD *)(a1 + 32));

}

void sub_1001A355C(id *a1, void *a2)
{
  id v3;
  id v4;
  NSObject *v5;
  id v6;
  void **v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  void *v10;
  id v11[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v11[1] = a1;
  v3 = objc_msgSend(a1[4], "proximitySetupController");
  objc_msgSend(v3, "resetInformation");

  v4 = objc_msgSend(a1[4], "proximitySetupController");
  objc_msgSend(v4, "setExpressDataSource:", 0);

  v5 = dispatch_get_global_queue(0, 0);
  v7 = _NSConcreteStackBlock;
  v8 = 3221225472;
  v9 = sub_1001A36A0;
  v10 = &unk_100280730;
  v11[0] = a1[4];
  dispatch_async(v5, &v7);

  v6 = objc_msgSend(a1[4], "delegate", v7, v8, v9, v10);
  objc_msgSend(v6, "flowItemDone:", a1[4]);

  objc_storeStrong(v11, 0);
  objc_storeStrong(location, 0);
}

void sub_1001A36A0(uint64_t a1)
{
  id v1;

  v1 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController", a1, a1);
  objc_msgSend(v1, "setupFinished");

}

uint64_t sub_1001A382C(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  id v3;
  id v4;
  unsigned __int8 v5;
  id v6;
  unsigned __int8 v7;
  BOOL v8;

  v2 = result;
  if (a2 == 1)
  {
    v3 = objc_msgSend(*(id *)(result + 32), "proximitySetupController");
    v4 = objc_msgSend(v3, "handshake");
    v5 = objc_msgSend(v4, "hasPasscodeSet");

    v6 = objc_msgSend(*(id *)(v2 + 32), "proximitySetupController");
    v7 = objc_msgSend(v6, "hasValidatedPasscode");

    v8 = 0;
    if ((v5 & 1) != 0)
      v8 = !(v7 & 1);
    return (*(uint64_t (**)(_QWORD, BOOL))(*(_QWORD *)(v2 + 40) + 16))(*(_QWORD *)(v2 + 40), v8);
  }
  else if (a2 == 2)
  {
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 40) + 16))();
  }
  return result;
}

uint64_t sub_1001A4768()
{
  NSAssertionHandler *v0;
  NSString *v1;
  uint64_t v3;
  void *v4;

  v4 = 0;
  v3 = sub_1001A76F0((uint64_t)&v4);
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *WiFiKitLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyWiFiController.m"), 40, CFSTR("%s"), v4);

    __break(1u);
  }
  if (v4)
    free(v4);
  return v3;
}

void sub_1001A4898()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_1001A7810((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *WiFiKitUILibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyWiFiController.m"), 41, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

id sub_1001A4D50()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEC30;
  v13 = qword_1002EEC30;
  if (!qword_1002EEC30)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001A7930;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001A7930(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

id sub_1001A4E3C()
{
  NSAssertionHandler *v0;
  NSString *v1;
  id *v3;

  v3 = (id *)sub_1001A7A70();
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *getWFNetworkListControllerAssociationDidFinishNotification(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyWiFiController.m"), 48, CFSTR("%s"), dlerror());

    __break(1u);
  }
  return *v3;
}

id sub_1001A4F34()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEC40;
  v13 = qword_1002EEC40;
  if (!qword_1002EEC40)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001A7BBC;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001A7BBC(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

id sub_1001A58D8(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "miscState", a1, a1);
  objc_msgSend(v2, "setUserSkippedWiFi:", 1);

  return objc_msgSend(*(id *)(a1 + 32), "_flowItemDoneWithResetActivationMethod:", *(_BYTE *)(a1 + 40) & 1);
}

id sub_1001A5940(uint64_t a1)
{
  return objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 24), "startScanning", a1, a1);
}

void sub_1001A5D40(uint64_t a1)
{
  id v2;
  char v3;
  id v4;
  char v5;
  unsigned __int8 v6;
  void *v7;
  void **v8;
  int v9;
  int v10;
  void (*v11)(uint64_t);
  void *v12;
  id v13;
  char v14;
  char v15;
  id v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;

  v20 = a1;
  v19 = a1;
  v2 = +[BuddyActivationConfiguration currentConfiguration](BuddyActivationConfiguration, "currentConfiguration");
  v3 = objc_msgSend(v2, "isActivated") ^ 1;

  v18 = v3 & 1;
  v17 = 0;
  v4 = objc_msgSend(*(id *)(a1 + 32), "networkProvider");
  v5 = 1;
  if ((objc_msgSend(v4, "connectedOverWiFiAndNetworkReachable") & 1) == 0)
    v5 = v18 ^ 1;

  v17 = v5 & 1;
  v15 = 0;
  v6 = 0;
  if ((v18 & 1) != 0)
  {
    v16 = +[BYPreferencesController buddyPreferencesInternal](BYPreferencesController, "buddyPreferencesInternal");
    v15 = 1;
    v6 = objc_msgSend(v16, "BOOLForKey:", CFSTR("skipWiFiRequirement"));
  }
  if ((v15 & 1) != 0)

  if ((v6 & 1) != 0)
    v17 = 1;
  v7 = &_dispatch_main_q;
  v8 = _NSConcreteStackBlock;
  v9 = -1073741824;
  v10 = 0;
  v11 = sub_1001A5EEC;
  v12 = &unk_100280B18;
  v13 = *(id *)(a1 + 32);
  v14 = v17 & 1;
  dispatch_async((dispatch_queue_t)v7, &v8);

  objc_storeStrong(&v13, 0);
}

void sub_1001A5EEC(uint64_t a1)
{
  id v2;
  id v3;
  unsigned __int8 v4;
  NSBundle *v5;
  NSString *v6;
  id v7;
  id v8;
  id location;
  int v10;
  id v11[3];

  v11[2] = (id)a1;
  v11[1] = (id)a1;
  v11[0] = objc_msgSend(*(id *)(a1 + 32), "viewController");
  if ((*(_BYTE *)(a1 + 40) & 1) == 0)
  {
    v8 = objc_msgSend(v11[0], "buttonTray");
    objc_msgSend(v8, "removeAllButtons");

    goto LABEL_8;
  }
  v2 = objc_msgSend(v11[0], "buttonTray");
  v3 = objc_msgSend(v2, "allButtons");
  v4 = 1;
  if (!objc_msgSend(v3, "count"))
    v4 = objc_msgSend(*(id *)(a1 + 32), "preventNextButtonCreation");

  if ((v4 & 1) == 0)
  {
    location = +[OBBoldTrayButton boldButton](OBBoldTrayButton, "boldButton");
    objc_msgSend(location, "addTarget:action:forEvents:", *(_QWORD *)(a1 + 32), "_nextTapped:", 64);
    v5 = +[NSBundle mainBundle](NSBundle, "mainBundle");
    v6 = -[NSBundle localizedStringForKey:value:table:](v5, "localizedStringForKey:value:table:", CFSTR("CONTINUE"), &stru_100284738, CFSTR("Localizable"));
    objc_msgSend(location, "setTitle:forState:", v6, 0);

    v7 = objc_msgSend(v11[0], "buttonTray");
    objc_msgSend(v7, "addButton:", location);

    objc_storeStrong(&location, 0);
LABEL_8:
    objc_msgSend(*(id *)(*(_QWORD *)(a1 + 32) + 8), "setShowAdditionalSetupInfo:", (*(_BYTE *)(a1 + 40) ^ 1) & 1);
    v10 = 0;
    goto LABEL_9;
  }
  v10 = 1;
LABEL_9:
  objc_storeStrong(v11, 0);
}

id sub_1001A6550()
{
  NSAssertionHandler *v0;
  NSString *v1;
  id *v3;

  v3 = (id *)sub_1001A7CFC();
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *getWFNetworkListControllerAssociationErrorKey(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyWiFiController.m"), 50, CFSTR("%s"), dlerror());

    __break(1u);
  }
  return *v3;
}

void sub_1001A6C88(id *a1, void *a2)
{
  void (**v3)(_QWORD);
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = (void (**)(_QWORD))objc_msgSend(a1[4], "showModalWiFiSettingsBlock");
  v3[2](v3);

  objc_storeStrong((id *)a1[4] + 4, 0);
  objc_storeStrong(location, 0);
}

void sub_1001A6D04(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_storeStrong((id *)(a1[4] + 32), 0);
  objc_storeStrong(location, 0);
}

void sub_1001A6E88(id *a1, void *a2)
{
  id v3;
  unsigned __int8 v4;
  id v5;
  unsigned __int8 v6;
  uint64_t v7;
  os_log_t oslog;
  char v9;
  char v10;
  id *v11;
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v11 = a1;
  objc_msgSend(a1[4], "_clearReturnToServiceTimer");
  v10 = 0;
  v3 = objc_msgSend(a1[4], "networkProvider");
  v4 = objc_msgSend(v3, "isCellularDataPossible");

  v10 = v4 & 1;
  v5 = +[BuddyActivationConfiguration currentConfiguration](BuddyActivationConfiguration, "currentConfiguration");
  v6 = objc_msgSend(v5, "supportsCellularActivation");

  v9 = v6 & 1;
  oslog = (os_log_t)(id)_BYLoggingFacility(v7);
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_10003CBAC((uint64_t)buf, v10 & 1, v9 & 1);
    _os_log_impl((void *)&_mh_execute_header, oslog, OS_LOG_TYPE_DEFAULT, "Return to Service timer timed out. isCellularDataPossible: %d isCellularActivationPossible: %d", buf, 0xEu);
  }
  objc_storeStrong((id *)&oslog, 0);
  if ((v10 & 1) != 0 && (v9 & 1) != 0)
    objc_msgSend(a1[4], "_flowItemDoneWithResetActivationMethod:", 0);
  objc_storeStrong(location, 0);
}

id sub_1001A7220(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_updateActivationMethod", a1, a1);
}

uint64_t sub_1001A76F0(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEC20;
  v9 = qword_1002EEC20;
  if (!qword_1002EEC20)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001A7780;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1001A7780((uint64_t)&v2);
  }
  return qword_1002EEC20;
}

uint64_t sub_1001A7780(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/WiFiKit.framework/WiFiKit";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEC20 = result;
  return result;
}

uint64_t sub_1001A7810(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEC28;
  v9 = qword_1002EEC28;
  if (!qword_1002EEC28)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001A78A0;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1001A78A0((uint64_t)&v2);
  }
  return qword_1002EEC28;
}

uint64_t sub_1001A78A0(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/WiFiKitUI.framework/WiFiKitUI";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEC28 = result;
  return result;
}

void sub_1001A7930(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1001A4898();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("WFBuddyViewController");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getWFBuddyViewControllerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyWiFiController.m"), 43, CFSTR("Unable to find class %s"), "WFBuddyViewController");

    __break(1u);
  }
  qword_1002EEC30 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_1001A7A70()
{
  uint64_t v0;
  void **v2;
  int v3;
  int v4;
  void *(*v5)(uint64_t);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 0x20000000;
  v12 = 32;
  v8 = qword_1002EEC38;
  v13 = qword_1002EEC38;
  if (!qword_1002EEC38)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001A7B54;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001A7B54((uint64_t)&v2);
  }
  v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_1001A7B54(uint64_t a1)
{
  void *v2;
  void *result;

  v2 = (void *)sub_1001A4768();
  result = dlsym(v2, "WFNetworkListControllerAssociationDidFinishNotification");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1002EEC38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1001A7BBC(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1001A4768();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("WFNetworkListController");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getWFNetworkListControllerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyWiFiController.m"), 45, CFSTR("Unable to find class %s"), "WFNetworkListController");

    __break(1u);
  }
  qword_1002EEC40 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_1001A7CFC()
{
  uint64_t v0;
  void **v2;
  int v3;
  int v4;
  void *(*v5)(uint64_t);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 0x20000000;
  v12 = 32;
  v8 = qword_1002EEC48;
  v13 = qword_1002EEC48;
  if (!qword_1002EEC48)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001A7DE0;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001A7DE0((uint64_t)&v2);
  }
  v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_1001A7DE0(uint64_t a1)
{
  void *v2;
  void *result;

  v2 = (void *)sub_1001A4768();
  result = dlsym(v2, "WFNetworkListControllerAssociationErrorKey");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1002EEC48 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void sub_1001A8054(uint64_t a1)
{
  id v2;
  unsigned __int8 v3;
  id v4;
  id v5;
  id v6;
  id v7;
  void **v8;
  int v9;
  int v10;
  uint64_t (*v11)(uint64_t, char);
  void *v12;
  id v13;
  id v14;
  char v15;
  uint64_t v16;
  uint64_t v17;

  v17 = a1;
  v16 = a1;
  v15 = 0;
  v2 = objc_msgSend(*(id *)(a1 + 32), "managedConfiguration");
  v3 = objc_msgSend(v2, "shouldShowCloudConfigurationUI");

  v15 = v3 & 1;
  v4 = +[BuddyCloudConfigManager sharedManager](BuddyCloudConfigManager, "sharedManager");
  v5 = objc_msgSend(v4, "cloudConfigurationDetails");
  v6 = objc_msgSend(v5, "objectForKeyedSubscript:", kCCRemoteManagementAccountIdentifierKey);
  v15 = (v15 & 1 & (v6 == 0)) != 0;

  if ((v15 & 1) != 0)
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v7 = objc_msgSend(*(id *)(a1 + 32), "enrollmentCoordinator");
    v8 = _NSConcreteStackBlock;
    v9 = -1073741824;
    v10 = 0;
    v11 = sub_1001A8208;
    v12 = &unk_100280708;
    v13 = *(id *)(a1 + 32);
    v14 = *(id *)(a1 + 40);
    objc_msgSend(v7, "verifyEnrollmentStateWithCompletionHandler:", &v8);

    objc_storeStrong(&v14, 0);
    objc_storeStrong(&v13, 0);
  }
}

uint64_t sub_1001A8208(uint64_t a1, char a2)
{
  id v3;

  if ((a2 & 1) == 0)
  {
    v3 = objc_msgSend(*(id *)(a1 + 32), "managedConfiguration");
    objc_msgSend(v3, "cloudConfigurationUIDidCompleteWasApplied:", 1);

  }
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
}

void sub_1001A8CC0(id *a1, void *a2)
{
  void *v3;
  void **v4;
  int v5;
  int v6;
  void (*v7);
  void *v8;
  id v9;
  id v10;
  id v11[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v11[1] = a1;
  v3 = &_dispatch_main_q;
  v4 = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_1001A8DD8;
  v8 = &unk_100281000;
  v9 = location[0];
  v10 = a1[4];
  v11[0] = a1[5];
  dispatch_async((dispatch_queue_t)v3, &v4);

  objc_storeStrong(v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1001A8DD8(NSObject *a1)
{
  NSString *isa;
  Class v3;
  id v4;
  id v5;
  char v6;
  NSString *v7;
  char v8;
  id v9;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = a1;
  oslog[1] = a1;
  if (a1[4].isa)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v8 = 0;
      v6 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        isa = (NSString *)a1[4].isa;
      }
      else if (a1[4].isa)
      {
        v9 = -[objc_class domain](a1[4].isa, "domain");
        v8 = 1;
        isa = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v9, -[objc_class code](a1[4].isa, "code"));
        v7 = isa;
        v6 = 1;
      }
      else
      {
        isa = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)isa);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Failed to set UI complete for cloud configuration. Error: %{public}@", buf, 0xCu);
      if ((v6 & 1) != 0)

      if ((v8 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
    v3 = a1[5].isa;
    v4 = -[objc_class disclosureViewController](a1[6].isa, "disclosureViewController");
    LOBYTE(v3) = -[objc_class isEqual:](v3, "isEqual:", v4);

    if ((v3 & 1) != 0)
    {
      v5 = -[objc_class disclosureViewController](a1[6].isa, "disclosureViewController");
      objc_msgSend(v5, "showRetrievalError:", a1[4].isa);

    }
    else
    {
      -[objc_class transitionToErrorViewInDisclosureViewControllerFromController:lastError:](a1[6].isa, "transitionToErrorViewInDisclosureViewControllerFromController:lastError:", a1[5].isa, a1[4].isa);
    }
  }
  else
  {
    -[objc_class _completeCloudConfig](a1[6].isa, "_completeCloudConfig");
  }
}

BOOL sub_1001A9778(id obj)
{
  id v1;
  BOOL v2;
  id location;

  location = 0;
  objc_storeStrong(&location, obj);
  v1 = objc_msgSend(location, "domain");
  v2 = 0;
  if ((objc_msgSend(v1, "isEqualToString:", DMCHTTPTransactionErrorDomain) & 1) != 0)
    v2 = objc_msgSend(location, "code") == (id)23006;

  objc_storeStrong(&location, 0);
  return v2;
}

id sub_1001A9C38()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EEC58;
  v13 = qword_1002EEC58;
  if (!qword_1002EEC58)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001B71C4;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001B71C4(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_1001A9D24(id a1, NSError *a2)
{
  uint64_t v3;
  NSString *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t v7[15];
  os_log_type_t v8;
  os_log_t v9;
  char v10;
  id v11;
  char v12;
  id v13;
  os_log_type_t v14;
  os_log_t oslog[2];
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    v14 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v12 = 0;
      v10 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v4 = (NSString *)location[0];
      }
      else if (location[0])
      {
        v13 = objc_msgSend(location[0], "domain");
        v12 = 1;
        v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v13, objc_msgSend(location[0], "code"));
        v11 = v4;
        v10 = 1;
      }
      else
      {
        v4 = 0;
      }
      sub_100038C28((uint64_t)buf, (uint64_t)v4);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v14, "Error enrolling in beta program: %@", buf, 0xCu);
      if ((v10 & 1) != 0)

      if ((v12 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v9 = (os_log_t)(id)_BYLoggingFacility(v3);
    v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v9;
      v6 = v8;
      sub_100038C3C(v7);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Successfully enrolled in beta program", v7, 2u);
    }
    objc_storeStrong((id *)&v9, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_1001AA600(id a1)
{
  UIFont *v1;
  NSDictionary *v2;
  void *v3;
  id v4[3];
  _QWORD v5[2];
  _QWORD v6[2];

  v4[2] = a1;
  v4[1] = a1;
  v4[0] = objc_alloc_init((Class)NSMutableParagraphStyle);
  objc_msgSend(v4[0], "setLineBreakMode:", 4);
  objc_msgSend(v4[0], "setAlignment:", 0);
  v5[0] = NSFontAttributeName;
  v1 = +[UIFont preferredFontForTextStyle:](UIFont, "preferredFontForTextStyle:", UIFontTextStyleBody);
  v6[0] = v1;
  v5[1] = NSParagraphStyleAttributeName;
  v6[1] = v4[0];
  v2 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", v6, v5, 2);
  v3 = (void *)qword_1002EEC68;
  qword_1002EEC68 = (uint64_t)v2;

  objc_storeStrong(v4, 0);
}

void sub_1001ACF00(id *a1, void *a2)
{
  void *v3;
  void **block;
  int v5;
  int v6;
  id (*v7);
  void *v8;
  id v9;
  id v10[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = a1;
  v3 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_1001ACFF0;
  v8 = &unk_100280D00;
  v9 = location[0];
  v10[0] = a1[4];
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

id sub_1001ACFF0(NSObject *a1)
{
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  id v6;
  _WORD v7[3];
  char v8;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  v2 = +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:](BFFViewControllerSpinnerManager, "stopAnimatingSpinnerFor:", CFSTR("Disclosure"));
  if (a1[4].isa)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v2);
    v8 = 16;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v3 = oslog[0];
      v4 = v8;
      sub_100038C3C(v7);
      _os_log_error_impl((void *)&_mh_execute_header, v3, v4, "BuddyCloudConfigController: _setupForCloudConfigurationState: Error attempting to store cloud config details!", (uint8_t *)v7, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    return -[objc_class showRetrievalError:](a1[5].isa, "showRetrievalError:", a1[4].isa);
  }
  else
  {
    -[objc_class setLastRetrievalError:](a1[5].isa, "setLastRetrievalError:", 0);
    v6 = -[objc_class configController](a1[5].isa, "configController");
    objc_msgSend(v6, "setCloudConfigState:", 3);

    return -[objc_class _setupForCloudConfigurationState](a1[5].isa, "_setupForCloudConfigurationState");
  }
}

void sub_1001AD100(id *a1, void *a2)
{
  void *v3;
  void **block;
  int v5;
  int v6;
  id (*v7)(uint64_t);
  void *v8;
  id v9;
  id v10[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = a1;
  v3 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_1001AD1F0;
  v8 = &unk_100280D00;
  v9 = location[0];
  v10[0] = a1[4];
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

id sub_1001AD1F0(uint64_t a1)
{
  id v3;

  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:](BFFViewControllerSpinnerManager, "stopAnimatingSpinnerFor:", CFSTR("Disclosure"), a1, a1);
  if (*(_QWORD *)(a1 + 32))
    return objc_msgSend(*(id *)(a1 + 40), "showRetrievalError:", *(_QWORD *)(a1 + 32));
  objc_msgSend(*(id *)(a1 + 40), "setLastRetrievalError:", 0);
  v3 = objc_msgSend(*(id *)(a1 + 40), "configController");
  objc_msgSend(v3, "setCloudConfigState:", 3);

  return objc_msgSend(*(id *)(a1 + 40), "_setupForCloudConfigurationState");
}

void sub_1001AD288(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "showAboutConfiguration", a1, a1);

}

void sub_1001AD77C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _Unwind_Exception *exception_object, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001AD7A8(id *a1, void *a2)
{
  void *v3;
  void **v4;
  int v5;
  int v6;
  void (*v7)(uint64_t);
  void *v8;
  id v9[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v9[1] = a1;
  v3 = &_dispatch_main_q;
  v4 = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_1001AD874;
  v8 = &unk_1002806B8;
  objc_copyWeak(v9, a1 + 4);
  dispatch_async((dispatch_queue_t)v3, &v4);

  objc_destroyWeak(v9);
  objc_storeStrong(location, 0);
}

void sub_1001AD874(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_showEraseDeviceAlert", a1, a1);

}

void sub_1001ADA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _Unwind_Exception *exception_object, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001ADA80(id *a1, void *a2)
{
  void *v3;
  void **v4;
  int v5;
  int v6;
  void (*v7)(uint64_t);
  void *v8;
  id v9[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v9[1] = a1;
  v3 = &_dispatch_main_q;
  v4 = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_1001ADB4C;
  v8 = &unk_1002806B8;
  objc_copyWeak(v9, a1 + 4);
  dispatch_async((dispatch_queue_t)v3, &v4);

  objc_destroyWeak(v9);
  objc_storeStrong(location, 0);
}

void sub_1001ADB4C(uint64_t a1)
{
  id WeakRetained;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  objc_msgSend(WeakRetained, "_leaveRemoteManagementAndErase", a1, a1);

}

void sub_1001ADCC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, int a15, _Unwind_Exception *exception_object)
{
  uint64_t v16;

  objc_destroyWeak((id *)(v16 - 40));
  _Unwind_Resume(a1);
}

void sub_1001ADCF4(id *a1, void *a2)
{
  DDRResetService *v3;
  NSBundle *v4;
  NSString *v5;
  NSBundle *v6;
  id v7;
  NSString *v8;
  NSBundle *v9;
  NSString *v10;
  void *v11;
  void **block;
  int v13;
  int v14;
  void (*v15)(uint64_t);
  void *v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v22[1] = a1;
  if (location[0])
  {
    v4 = +[NSBundle mainBundle](NSBundle, "mainBundle");
    v5 = -[NSBundle localizedStringForKey:value:table:](v4, "localizedStringForKey:value:table:", CFSTR("REMOTE_MANAGEMENT_LEAVE_FAILED_ALERT_TITLE"), &stru_100284738, CFSTR("Localizable"));
    v6 = +[NSBundle mainBundle](NSBundle, "mainBundle");
    v7 = +[UIDevice modelSpecificLocalizedStringKeyForKey:](UIDevice, "modelSpecificLocalizedStringKeyForKey:", CFSTR("REMOTE_MANAGEMENT_LEAVE_FAILED_ALERT_BODY"));
    v8 = -[NSBundle localizedStringForKey:value:table:](v6, "localizedStringForKey:value:table:", v7, &stru_100284738, CFSTR("Localizable"));
    v20 = +[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", v5, v8, 1);

    v9 = +[NSBundle mainBundle](NSBundle, "mainBundle");
    v10 = -[NSBundle localizedStringForKey:value:table:](v9, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_100284738, CFSTR("Localizable"));
    v19 = +[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v10, 1, 0);

    objc_msgSend(v20, "addAction:", v19);
    v11 = &_dispatch_main_q;
    block = _NSConcreteStackBlock;
    v13 = -1073741824;
    v14 = 0;
    v15 = sub_1001AE278;
    v16 = &unk_100280E18;
    objc_copyWeak(&v18, a1 + 4);
    v17 = v20;
    dispatch_async((dispatch_queue_t)v11, &block);

    objc_storeStrong(&v17, 0);
    objc_destroyWeak(&v18);
    objc_storeStrong(&v19, 0);
    objc_storeStrong(&v20, 0);
  }
  else
  {
    NSLog(CFSTR("Unenroll is successfull. Erasing the device..."));
    v22[0] = objc_alloc_init((Class)DDRResetOptions);
    objc_msgSend(v22[0], "setEraseDataPlan:", 1);
    v21 = objc_msgSend(objc_alloc((Class)DDRResetRequest), "initWithMode:options:reason:", 4, v22[0], CFSTR("Remote Management Unenroll"));
    v3 = +[DDRResetService sharedInstance](DDRResetService, "sharedInstance");
    -[DDRResetService resetWithRequest:completion:](v3, "resetWithRequest:completion:", v21, &stru_1002842A0);

    objc_storeStrong(&v21, 0);
    objc_storeStrong(v22, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_1001AE050(id a1, NSError *a2)
{
  uint64_t v3;
  NSString *v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t v7[15];
  os_log_type_t v8;
  os_log_t v9;
  char v10;
  id v11;
  char v12;
  id v13;
  os_log_type_t v14;
  os_log_t oslog[2];
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = (os_log_t)a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    v14 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v12 = 0;
      v10 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v4 = (NSString *)location[0];
      }
      else if (location[0])
      {
        v13 = objc_msgSend(location[0], "domain");
        v12 = 1;
        v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v13, objc_msgSend(location[0], "code"));
        v11 = v4;
        v10 = 1;
      }
      else
      {
        v4 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v4);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v14, "Reset failed: %{public}@", buf, 0xCu);
      if ((v10 & 1) != 0)

      if ((v12 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v9 = (os_log_t)(id)_BYLoggingFacility(v3);
    v8 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      v5 = v9;
      v6 = v8;
      sub_100038C3C(v7);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Reset was successful!", v7, 2u);
    }
    objc_storeStrong((id *)&v9, 0);
  }
  objc_storeStrong(location, 0);
}

void sub_1001AE278(uint64_t a1)
{
  id WeakRetained;
  id v3;

  WeakRetained = objc_loadWeakRetained((id *)(a1 + 40));
  v3 = objc_msgSend(WeakRetained, "navigationController", a1, a1);
  objc_msgSend(v3, "presentViewController:animated:completion:", *(_QWORD *)(a1 + 32), 1, 0);

}

id sub_1001AF45C(id obj)
{
  NSMutableArray *v1;
  id v2;
  id v3;
  id v4;
  uint64_t v5;
  unint64_t i;
  NSObject *v7;
  os_log_type_t v8;
  id v9;
  _WORD v11[7];
  os_log_type_t v12;
  os_log_t oslog;
  CFTypeRef cf;
  _QWORD __b[8];
  CFDataRef data;
  id v17;
  id location;
  _BYTE v19[128];

  location = 0;
  objc_storeStrong(&location, obj);
  v17 = 0;
  if (location)
  {
    v1 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:", objc_msgSend(location, "count"));
    v2 = v17;
    v17 = v1;

    memset(__b, 0, sizeof(__b));
    v3 = location;
    v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", __b, v19, 16);
    if (v4)
    {
      v5 = *(_QWORD *)__b[2];
      do
      {
        for (i = 0; i < (unint64_t)v4; ++i)
        {
          if (*(_QWORD *)__b[2] != v5)
            objc_enumerationMutation(v3);
          data = *(CFDataRef *)(__b[1] + 8 * i);
          cf = 0;
          cf = SecCertificateCreateWithData(0, data);
          if (cf)
          {
            objc_msgSend(v17, "addObject:", cf);
            CFRelease(cf);
          }
          else
          {
            oslog = (os_log_t)(id)_BYLoggingFacility(0);
            v12 = OS_LOG_TYPE_DEFAULT;
            if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
            {
              v7 = oslog;
              v8 = v12;
              sub_100038C3C(v11);
              _os_log_impl((void *)&_mh_execute_header, v7, v8, "Could not parse anchor certificate data. Ignoring.", (uint8_t *)v11, 2u);
            }
            objc_storeStrong((id *)&oslog, 0);
          }
        }
        v4 = objc_msgSend(v3, "countByEnumeratingWithState:objects:count:", __b, v19, 16);
      }
      while (v4);
    }

  }
  v9 = v17;
  objc_storeStrong(&v17, 0);
  objc_storeStrong(&location, 0);
  return v9;
}

void sub_1001AF694(id *a1, void *a2, void *a3)
{
  void *v5;
  void **block;
  int v7;
  int v8;
  void (*v9);
  void *v10;
  id v11;
  id v12;
  id v13[2];
  id v14;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = a1;
  v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_1001AF7C4;
  v10 = &unk_100281000;
  v11 = location[0];
  v12 = a1[4];
  v13[0] = v14;
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_1001AF7C4(NSObject *a1)
{
  id v2;
  _BOOL8 v3;
  id v4;
  id v5;
  NSString *isa;
  char v7;
  NSString *v8;
  char v9;
  id v10;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = a1;
  oslog[1] = a1;
  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:](BFFViewControllerSpinnerManager, "stopAnimatingSpinnerFor:", CFSTR("Disclosure"));
  if (a1[4].isa)
  {
    if (sub_1001A9778(a1[4].isa))
    {
      v2 = -[objc_class configController](a1[5].isa, "configController");
      objc_msgSend(v2, "transitionToSoftwareUpdateControllerFromController:lastError:", a1[5].isa, a1[4].isa);

    }
    else
    {
      v3 = sub_1001AFA44(a1[4].isa);
      if (v3)
      {
        v4 = -[objc_class configController](a1[5].isa, "configController");
        objc_msgSend(v4, "setCloudConfigState:", 6);

        v5 = -[objc_class configController](a1[5].isa, "configController");
        objc_msgSend(v5, "transitionToLoginViewControllerFromController:lastError:", a1[5].isa, a1[4].isa);

      }
      else
      {
        oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
        if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
        {
          v9 = 0;
          v7 = 0;
          if ((_BYIsInternalInstall() & 1) != 0)
          {
            isa = (NSString *)a1[4].isa;
          }
          else if (a1[4].isa)
          {
            v10 = -[objc_class domain](a1[4].isa, "domain");
            v9 = 1;
            isa = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v10, -[objc_class code](a1[4].isa, "code"));
            v8 = isa;
            v7 = 1;
          }
          else
          {
            isa = 0;
          }
          sub_100039500((uint64_t)buf, (uint64_t)isa);
          _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Error retrieving cloud config: %{public}@", buf, 0xCu);
          if ((v7 & 1) != 0)

          if ((v9 & 1) != 0)
        }
        objc_storeStrong((id *)oslog, 0);
        -[objc_class showRetrievalError:](a1[5].isa, "showRetrievalError:", a1[4].isa);
      }
    }
  }
  else
  {
    -[objc_class _storeProfileDataAndCompleteDisclosure:](a1[5].isa, "_storeProfileDataAndCompleteDisclosure:", a1[6].isa);
  }
}

BOOL sub_1001AFA44(id obj)
{
  id v1;
  id v2;
  BOOL v3;
  unsigned __int8 v4;
  char v6;
  id v7;
  id location;
  BOOL v9;

  location = 0;
  objc_storeStrong(&location, obj);
  v1 = objc_msgSend(location, "domain");
  v6 = 0;
  if ((objc_msgSend(v1, "isEqualToString:", DMCHTTPTransactionErrorDomain) & 1) == 0
    || (v2 = objc_msgSend(location, "code"), v3 = 1, v2 != (id)23003))
  {
    v7 = objc_msgSend(location, "domain");
    v6 = 1;
    v4 = objc_msgSend(v7, "isEqualToString:", MCCloudConfigErrorDomain);
    v3 = 0;
    if ((v4 & 1) != 0)
      v3 = objc_msgSend(location, "code") == (id)33000;
  }
  v9 = v3;
  if ((v6 & 1) != 0)

  objc_storeStrong(&location, 0);
  return v9;
}

void sub_1001AFCD8(id *a1, void *a2, void *a3)
{
  void *v5;
  void **block;
  int v7;
  int v8;
  void (*v9);
  void *v10;
  id v11;
  id v12;
  id v13[2];
  id v14;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = a1;
  v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_1001AFE08;
  v10 = &unk_100281000;
  v11 = v14;
  v12 = a1[4];
  v13[0] = location[0];
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_1001AFE08(NSObject *a1)
{
  id v2;
  _BOOL8 v3;
  id v4;
  id v5;
  NSString *isa;
  id v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t i;
  id v12;
  id v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t v17[15];
  os_log_type_t v18;
  os_log_t v19;
  _QWORD __b[8];
  id v21;
  char v22;
  id location;
  char v24;
  id v25;
  char v26;
  id v27;
  os_log_type_t v28;
  os_log_t oslog[3];
  uint8_t v30[128];
  uint8_t buf[24];

  oslog[2] = a1;
  oslog[1] = a1;
  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:](BFFViewControllerSpinnerManager, "stopAnimatingSpinnerFor:", CFSTR("Disclosure"));
  if (a1[4].isa)
  {
    if (sub_1001A9778(a1[4].isa))
    {
      v2 = -[objc_class configController](a1[5].isa, "configController");
      objc_msgSend(v2, "transitionToSoftwareUpdateControllerFromController:lastError:", a1[5].isa, a1[4].isa);

    }
    else
    {
      v3 = sub_1001AFA44(a1[4].isa);
      if (v3)
      {
        v4 = -[objc_class configController](a1[5].isa, "configController");
        objc_msgSend(v4, "setCloudConfigState:", 6);

        v5 = -[objc_class configController](a1[5].isa, "configController");
        objc_msgSend(v5, "transitionToLoginViewControllerFromController:lastError:", a1[5].isa, a1[4].isa);

      }
      else
      {
        oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
        v28 = OS_LOG_TYPE_ERROR;
        if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
        {
          v26 = 0;
          v24 = 0;
          if ((_BYIsInternalInstall() & 1) != 0)
          {
            isa = (NSString *)a1[4].isa;
          }
          else if (a1[4].isa)
          {
            v27 = -[objc_class domain](a1[4].isa, "domain");
            v26 = 1;
            isa = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v27, -[objc_class code](a1[4].isa, "code"));
            v25 = isa;
            v24 = 1;
          }
          else
          {
            isa = 0;
          }
          sub_100039500((uint64_t)buf, (uint64_t)isa);
          _os_log_error_impl((void *)&_mh_execute_header, oslog[0], v28, "Error retrieving cloud config: %{public}@", buf, 0xCu);
          if ((v24 & 1) != 0)

          if ((v26 & 1) != 0)
        }
        objc_storeStrong((id *)oslog, 0);
        -[objc_class showRetrievalError:](a1[5].isa, "showRetrievalError:", a1[4].isa);
      }
    }
  }
  else
  {
    location = objc_opt_new(NSMutableArray);
    v22 = 0;
    memset(__b, 0, sizeof(__b));
    v7 = -[objc_class navigationController](a1[5].isa, "navigationController");
    v8 = objc_msgSend(v7, "viewControllers");

    v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", __b, v30, 16);
    if (v9)
    {
      v10 = *(_QWORD *)__b[2];
      do
      {
        for (i = 0; i < (unint64_t)v9; ++i)
        {
          if (*(_QWORD *)__b[2] != v10)
            objc_enumerationMutation(v8);
          v21 = *(id *)(__b[1] + 8 * i);
          if ((v22 & 1) != 0)
          {
            objc_msgSend(location, "addObject:", v21);
          }
          else if ((objc_msgSend(v21, "isEqual:", a1[5].isa) & 1) != 0)
          {
            v22 = 1;
          }
        }
        v9 = objc_msgSend(v8, "countByEnumeratingWithState:objects:count:", __b, v30, 16);
      }
      while (v9);
    }

    v12 = -[objc_class configController](a1[5].isa, "configController");
    v13 = objc_msgSend(v12, "delegate");
    objc_msgSend(v13, "removeViewControllersOnNextPush:", location);

    v19 = (os_log_t)(id)_BYLoggingFacility(v14);
    v18 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      v15 = v19;
      v16 = v18;
      sub_100038C3C(v17);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "MDM profile retrieved!!", v17, 2u);
    }
    objc_storeStrong((id *)&v19, 0);
    -[objc_class _storeProfileDataAndCompleteDisclosure:](a1[5].isa, "_storeProfileDataAndCompleteDisclosure:", a1[6].isa);
    objc_storeStrong(&location, 0);
  }
}

void sub_1001B0458(id *a1, void *a2)
{
  void *v3;
  void **block;
  int v5;
  int v6;
  void (*v7);
  void *v8;
  id v9;
  id v10[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = a1;
  v3 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_1001B0548;
  v8 = &unk_100280D00;
  v9 = location[0];
  v10[0] = a1[4];
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1001B0548(NSObject *a1)
{
  NSString *isa;
  id v3;
  char v4;
  NSString *v5;
  char v6;
  id v7;
  os_log_t oslog[3];
  uint8_t buf[24];

  oslog[2] = a1;
  oslog[1] = a1;
  if (a1[4].isa)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_ERROR))
    {
      v6 = 0;
      v4 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        isa = (NSString *)a1[4].isa;
      }
      else if (a1[4].isa)
      {
        v7 = -[objc_class domain](a1[4].isa, "domain");
        v6 = 1;
        isa = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v7, -[objc_class code](a1[4].isa, "code"));
        v5 = isa;
        v4 = 1;
      }
      else
      {
        isa = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)isa);
      _os_log_error_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_ERROR, "Failed to store profile data with error: %{public}@", buf, 0xCu);
      if ((v4 & 1) != 0)

      if ((v6 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
    -[objc_class showRetrievalError:](a1[5].isa, "showRetrievalError:", a1[4].isa);
  }
  else
  {
    v3 = -[objc_class configController](a1[5].isa, "configController");
    objc_msgSend(v3, "cloudConfigDidFinishFromViewController:wasApplied:", a1[5].isa, 1);

  }
}

id sub_1001B0BEC(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  _WORD v5[3];
  os_log_type_t v6;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v6;
    sub_100038C3C(v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Web controller finished dimissing; advancing panes!",
      (uint8_t *)v5,
      2u);
  }
  objc_storeStrong((id *)oslog, 0);
  return -[objc_class _storeProfileDataAndCompleteDisclosure:](a1[4].isa, "_storeProfileDataAndCompleteDisclosure:", a1[5].isa);
}

void sub_1001B1A04(uint64_t a1)
{
  id v2;
  double v3;
  double v4;
  double v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  double v11;
  double v12;
  double v13;
  double v14;
  id v15;
  id v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;

  v2 = objc_msgSend(*(id *)(a1 + 32), "tableView");
  objc_msgSend(v2, "frame");
  v31 = v3;
  v30 = v4;
  v32 = v5;

  v33 = *(double *)(a1 + 48) - v31;
  v6 = objc_msgSend(*(id *)(a1 + 32), "tableView");
  objc_msgSend(v6, "setFrame:", v30, v31, v32, v33);

  v7 = objc_msgSend(*(id *)(a1 + 32), "activeTextField");
  if (v7)
  {
    v8 = objc_msgSend(*(id *)(a1 + 32), "tableView");
    v9 = objc_msgSend(*(id *)(a1 + 32), "activeTextField");
    v10 = objc_msgSend(v9, "superview");
    objc_msgSend(v10, "bounds");
    v23 = v11;
    v22 = v12;
    v25 = v13;
    v24 = v14;
    v15 = objc_msgSend(*(id *)(a1 + 32), "activeTextField");
    v16 = objc_msgSend(v15, "superview");
    objc_msgSend(v8, "convertRect:fromView:", v16, v22, v23, v24, v25);
    v27 = v17;
    v26 = v18;
    v29 = v19;
    v28 = v20;

    v21 = objc_msgSend(*(id *)(a1 + 32), "tableView");
    objc_msgSend(v21, "scrollRectToVisible:animated:", 0, v26, v27, v28, v29);

  }
}

id sub_1001B1C00(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setDisableExcessiveLayout:", 0);
}

id sub_1001B1D58(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_layoutTableView", a1, a1);
}

double sub_1001B2518(id obj)
{
  UIDevice *v1;
  id v2;
  id v3;
  double v4;
  id v5;
  id v6;
  double v7;
  double v8;
  id v9;
  id v10;
  unsigned __int8 v11;
  UIScreen *v12;
  double v13;
  float v14;
  double v16;
  id location;
  double v18;

  location = 0;
  objc_storeStrong(&location, obj);
  v1 = +[UIDevice currentDevice](UIDevice, "currentDevice");
  v2 = -[UIDevice userInterfaceIdiom](v1, "userInterfaceIdiom");

  if (v2 == (id)1)
  {
    v3 = objc_msgSend(location, "view");
    objc_msgSend(v3, "bounds");
    v18 = v4 * 0.09;

  }
  else
  {
    v5 = objc_msgSend(location, "navigationController");
    v6 = objc_msgSend(v5, "navigationBar");
    objc_msgSend(v6, "bounds");
    v8 = v7;

    v16 = v8;
    v9 = objc_msgSend(location, "navigationController");
    v10 = objc_msgSend(v9, "navigationBar");
    v11 = objc_msgSend(v10, "isHidden");

    if ((v11 & 1) != 0)
      v16 = 0.0;
    v12 = +[UIScreen mainScreen](UIScreen, "mainScreen");
    -[UIScreen bounds](v12, "bounds");
    v14 = v13 * 0.09 - v16;
    v18 = fmaxf(v14, 0.0);

  }
  objc_storeStrong(&location, 0);
  return v18;
}

void sub_1001B3014(id *a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  id v15;
  id v16;
  NSNumber *v17;
  NSDictionary *v18;
  void **v19;
  int v20;
  int v21;
  void (*v22)(id *, void *, void *);
  void *v23;
  id v24;
  os_log_type_t v25;
  os_log_t oslog;
  id location;
  id v28;
  id v29;
  id v30;
  id v31[3];
  uint64_t v32;
  NSNumber *v33;
  uint8_t buf[24];

  v31[2] = a1;
  v31[1] = a1;
  v2 = objc_msgSend(a1[4], "managedConfiguration");
  v31[0] = objc_msgSend(v2, "cloudConfigurationDetails");

  v3 = objc_msgSend(v31[0], "objectForKeyedSubscript:", kMCCCConfigurationURLKey);
  v30 = +[NSURL URLWithString:](NSURL, "URLWithString:", v3);

  v4 = a1[4];
  v5 = objc_msgSend(v4, "usernameCell");
  v6 = objc_msgSend(v5, "editableTextField");
  v7 = objc_msgSend(v6, "text");
  v29 = objc_msgSend(v4, "_sanitizedUsername:", v7);

  v8 = objc_msgSend(a1[4], "passwordCell");
  v9 = objc_msgSend(v8, "editableTextField");
  v28 = objc_msgSend(v9, "text");

  v10 = objc_msgSend(v31[0], "objectForKeyedSubscript:", kMCCCAnchorCertificatesKey);
  location = sub_1001AF45C(v10);

  oslog = (os_log_t)(id)_BYLoggingFacility(v11);
  v25 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
  {
    sub_1001B33C4((uint64_t)buf, (uint64_t)v29);
    _os_log_impl((void *)&_mh_execute_header, oslog, v25, "Retrieving configuration for username: \"%{private}@\"", buf, 0xCu);
  }
  objc_storeStrong((id *)&oslog, 0);
  v12 = objc_msgSend(a1[4], "managedConfiguration");
  v13 = v30;
  v14 = v29;
  v15 = v28;
  v16 = location;
  v32 = kMDMCanRequestSoftwareUpdateKey;
  v17 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", 1);
  v33 = v17;
  v18 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v33, &v32, 1);
  v19 = _NSConcreteStackBlock;
  v20 = -1073741824;
  v21 = 0;
  v22 = sub_1001B33D8;
  v23 = &unk_1002842F0;
  v24 = a1[4];
  objc_msgSend(v12, "retrieveCloudConfigurationFromURL:username:password:anchorCertificates:additionalMachineInfo:completionBlock:", v13, v14, v15, v16, v18, &v19);

  objc_storeStrong(&v24, 0);
  objc_storeStrong(&location, 0);
  objc_storeStrong(&v28, 0);
  objc_storeStrong(&v29, 0);
  objc_storeStrong(&v30, 0);
  objc_storeStrong(v31, 0);
}

double sub_1001B33C4(uint64_t a1, uint64_t a2)
{
  double result;

  *(_QWORD *)&result = 138477827;
  *(_DWORD *)a1 = 138477827;
  *(_QWORD *)(a1 + 4) = a2;
  return result;
}

void sub_1001B33D8(id *a1, void *a2, void *a3)
{
  void *v5;
  void **block;
  int v7;
  int v8;
  void (*v9)(uint64_t);
  void *v10;
  id v11;
  id v12;
  id v13[2];
  id v14;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v14 = 0;
  objc_storeStrong(&v14, a3);
  v13[1] = a1;
  v5 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v7 = -1073741824;
  v8 = 0;
  v9 = sub_1001B3508;
  v10 = &unk_100281000;
  v11 = a1[4];
  v12 = location[0];
  v13[0] = v14;
  dispatch_async((dispatch_queue_t)v5, &block);

  objc_storeStrong(v13, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v14, 0);
  objc_storeStrong(location, 0);
}

void sub_1001B3508(uint64_t a1)
{
  UIApplication *v2;
  id v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8;
  id v9;
  NSBundle *v10;
  NSString *v11;
  NSBundle *v12;
  NSString *v13;
  id v14;
  id v15;
  id v16;
  uint64_t v17;
  void **v18;
  int v19;
  int v20;
  void (*v21)(id *, void *);
  void *v22;
  id v23;
  void **v24;
  int v25;
  int v26;
  void (*v27)(id *, void *);
  void *v28;
  id v29;
  id location;
  id v31[3];

  v31[2] = (id)a1;
  v31[1] = (id)a1;
  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:](BFFViewControllerSpinnerManager, "stopAnimatingSpinnerFor:", CFSTR("Login"));
  v2 = +[UIApplication sharedApplication](UIApplication, "sharedApplication");
  -[UIApplication endIgnoringInteractionEvents](v2, "endIgnoringInteractionEvents");

  v3 = objc_msgSend(*(id *)(a1 + 32), "usernameCell");
  v4 = objc_msgSend(v3, "editableTextField");
  objc_msgSend(v4, "setEnabled:", 1);

  v5 = objc_msgSend(*(id *)(a1 + 32), "passwordCell");
  v6 = objc_msgSend(v5, "editableTextField");
  objc_msgSend(v6, "setEnabled:", 1);

  if (*(_QWORD *)(a1 + 40))
  {
    if (sub_1001AFA44(*(id *)(a1 + 40)))
    {
      v7 = objc_msgSend(*(id *)(a1 + 32), "configController");
      objc_msgSend(v7, "setCloudConfigState:", 6);

      v8 = objc_msgSend(*(id *)(a1 + 32), "passwordCell");
      v9 = objc_msgSend(v8, "editableTextField");
      objc_msgSend(v9, "becomeFirstResponder");

      v10 = +[NSBundle mainBundle](NSBundle, "mainBundle");
      v11 = -[NSBundle localizedStringForKey:value:table:](v10, "localizedStringForKey:value:table:", CFSTR("CLOUD_CONFIG_CREDENTIAL_MISSING_OR_WRONG"), &stru_100284738, CFSTR("Localizable"));
      v31[0] = +[UIAlertController alertControllerWithTitle:message:preferredStyle:](UIAlertController, "alertControllerWithTitle:message:preferredStyle:", 0, v11, 1);

      v12 = +[NSBundle mainBundle](NSBundle, "mainBundle");
      v13 = -[NSBundle localizedStringForKey:value:table:](v12, "localizedStringForKey:value:table:", CFSTR("OK"), &stru_100284738, 0);
      v24 = _NSConcreteStackBlock;
      v25 = -1073741824;
      v26 = 0;
      v27 = sub_1001B3944;
      v28 = &unk_100280A28;
      v29 = v31[0];
      location = +[UIAlertAction actionWithTitle:style:handler:](UIAlertAction, "actionWithTitle:style:handler:", v13, 0, &v24);

      objc_msgSend(v31[0], "addAction:", location);
      v14 = objc_msgSend(*(id *)(a1 + 32), "navigationController");
      objc_msgSend(v14, "presentViewController:animated:completion:", v31[0], 1, 0);

      objc_storeStrong(&location, 0);
      objc_storeStrong(&v29, 0);
      objc_storeStrong(v31, 0);
    }
    else
    {
      if (sub_1001A9778(*(id *)(a1 + 40)))
      {
        v15 = objc_msgSend(*(id *)(a1 + 32), "configController");
        objc_msgSend(v15, "transitionToSoftwareUpdateControllerFromController:lastError:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
      }
      else
      {
        v15 = objc_msgSend(*(id *)(a1 + 32), "configController");
        objc_msgSend(v15, "transitionToErrorViewInDisclosureViewControllerFromController:lastError:", *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
      }

    }
  }
  else
  {
    v16 = objc_msgSend(*(id *)(a1 + 32), "managedConfiguration");
    v17 = *(_QWORD *)(a1 + 48);
    v18 = _NSConcreteStackBlock;
    v19 = -1073741824;
    v20 = 0;
    v21 = sub_1001B399C;
    v22 = &unk_100280B80;
    v23 = *(id *)(a1 + 32);
    objc_msgSend(v16, "storeProfileData:completion:", v17, &v18);

    objc_storeStrong(&v23, 0);
  }
}

void sub_1001B3944(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "dismissViewControllerAnimated:completion:", 1, 0);
  objc_storeStrong(location, 0);
}

void sub_1001B399C(id *a1, void *a2)
{
  void *v3;
  void **block;
  int v5;
  int v6;
  void (*v7)(uint64_t);
  void *v8;
  id v9;
  id v10[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = a1;
  v3 = &_dispatch_main_q;
  block = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_1001B3A8C;
  v8 = &unk_100280D00;
  v9 = location[0];
  v10[0] = a1[4];
  dispatch_async((dispatch_queue_t)v3, &block);

  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1001B3A8C(uint64_t a1)
{
  id v2;

  if (*(_QWORD *)(a1 + 32))
  {
    v2 = objc_msgSend(*(id *)(a1 + 40), "configController", a1, a1);
    objc_msgSend(v2, "transitionToErrorViewInDisclosureViewControllerFromController:lastError:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  }
  else
  {
    v2 = objc_msgSend(*(id *)(a1 + 40), "configController", a1, a1);
    objc_msgSend(v2, "cloudConfigDidFinishFromViewController:wasApplied:", *(_QWORD *)(a1 + 40), 1);
  }

}

void sub_1001B51AC(id *a1, void *a2)
{
  id v3;
  void **v4;
  int v5;
  int v6;
  void (*v7)(NSObject *, void *);
  void *v8;
  id v9;
  id v10;
  id v11[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v11[1] = a1;
  v11[0] = objc_msgSend(a1[4], "managedConfiguration");
  v3 = location[0];
  v4 = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_1001B52B0;
  v8 = &unk_100284368;
  v9 = a1[4];
  v10 = a1[5];
  objc_msgSend(v11[0], "createMDMUnlockTokenIfNeededWithPasscode:completionBlock:", v3, &v4);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(v11, 0);
  objc_storeStrong(location, 0);
}

void sub_1001B52B0(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSString *v4;
  char v5;
  NSString *v6;
  char v7;
  id v8;
  os_log_t oslog[2];
  id location[2];
  uint8_t buf[24];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  if (location[0])
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v7 = 0;
      v5 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v4 = (NSString *)location[0];
      }
      else if (location[0])
      {
        v8 = objc_msgSend(location[0], "domain");
        v7 = 1;
        v4 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v8, objc_msgSend(location[0], "code"));
        v6 = v4;
        v5 = 1;
      }
      else
      {
        v4 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v4);
      _os_log_impl((void *)&_mh_execute_header, oslog[0], OS_LOG_TYPE_DEFAULT, "Failed to create unlock escrow with error: %{public}@", buf, 0xCu);
      if ((v5 & 1) != 0)

      if ((v7 & 1) != 0)
    }
    objc_storeStrong((id *)oslog, 0);
  }
  -[objc_class _tryToInstallStoredProfileShouldCreateEscrowIfNeeded:completion:](a1[4].isa, "_tryToInstallStoredProfileShouldCreateEscrowIfNeeded:completion:", 0, a1[5].isa);
  objc_storeStrong(location, 0);
}

void sub_1001B547C(id *a1)
{
  NSBundle *v2;
  NSString *v3;
  NSBundle *v4;
  NSString *v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = -[BuddyPasscodeEntryController initWithNibName:bundle:]([BuddyPasscodeEntryController alloc], "initWithNibName:bundle:", 0, 0);
  objc_msgSend(location[0], "setDelegate:", a1[4]);
  v2 = +[NSBundle mainBundle](NSBundle, "mainBundle");
  v3 = -[NSBundle localizedStringForKey:value:table:](v2, "localizedStringForKey:value:table:", CFSTR("CLOUD_CONFIG_PASSCODE_TITLE"), &stru_100284738, CFSTR("Localizable"));
  objc_msgSend(location[0], "setTitleText:", v3);

  v4 = +[NSBundle mainBundle](NSBundle, "mainBundle");
  v5 = -[NSBundle localizedStringForKey:value:table:](v4, "localizedStringForKey:value:table:", CFSTR("CLOUD_CONFIG_PASSCODE_INSTRUCTIONS"), &stru_100284738, CFSTR("Localizable"));
  objc_msgSend(location[0], "setInstructions:", v5);

  v6 = objc_msgSend(location[0], "navigationItem");
  v7 = objc_msgSend(objc_alloc((Class)UIBarButtonItem), "initWithBarButtonSystemItem:target:action:", 1, a1[4], "_cancelDevicePasscodePicker:");
  objc_msgSend(v6, "setLeftBarButtonItem:", v7);

  v11 = objc_msgSend(objc_alloc((Class)UINavigationController), "initWithRootViewController:", location[0]);
  v8 = +[BFFStyle sharedStyle](BFFStyle, "sharedStyle");
  objc_msgSend(v8, "applyThemeToNavigationController:", v11);

  objc_msgSend(a1[4], "presentViewController:animated:completion:", v11, 1, 0);
  v9 = a1[4];
  v10 = objc_msgSend(v11, "presentationController");
  objc_msgSend(v10, "setDelegate:", v9);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(location, 0);
}

void sub_1001B58EC(uint64_t a1, void *a2)
{
  void *v3;
  void **v4;
  int v5;
  int v6;
  void (*v7)(uint64_t);
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  char v13;
  uint64_t v14;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v14 = a1;
  v3 = &_dispatch_main_q;
  v4 = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_1001B5A30;
  v8 = &unk_1002843B8;
  v9 = location[0];
  v13 = *(_BYTE *)(a1 + 56) & 1;
  v10 = *(id *)(a1 + 32);
  v12 = *(id *)(a1 + 48);
  v11 = *(id *)(a1 + 40);
  dispatch_async((dispatch_queue_t)v3, &v4);

  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1001B5A30(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  id v5;
  NSString *v6;
  id v7;
  char v8;

  v8 = 1;
  if (*(_QWORD *)(a1 + 32))
  {
    if ((*(_BYTE *)(a1 + 64) & 1) != 0
      && (objc_msgSend(*(id *)(a1 + 40), "_isEscrowMissingError:", *(_QWORD *)(a1 + 32)) & 1) != 0)
    {
      v8 = 0;
      objc_msgSend(*(id *)(a1 + 40), "_createUnlockEscrowAndRetryProfileInstallationWithCompletion:", *(_QWORD *)(a1 + 56));
    }
    else
    {
      v2 = objc_msgSend(*(id *)(a1 + 32), "localizedRecoverySuggestion");
      v3 = objc_msgSend(v2, "length");

      if (v3)
      {
        v4 = objc_msgSend(*(id *)(a1 + 32), "localizedDescription");
        v5 = objc_msgSend(*(id *)(a1 + 32), "localizedRecoverySuggestion");
        v6 = +[NSString localizedStringWithFormat:](NSString, "localizedStringWithFormat:", CFSTR("%@\n%@"), v4, v5);
        objc_msgSend(*(id *)(a1 + 40), "setLastErrorDescription:", v6);

      }
      else
      {
        v7 = objc_msgSend(*(id *)(a1 + 32), "localizedDescription");
        objc_msgSend(*(id *)(a1 + 40), "setLastErrorDescription:", v7);

      }
    }
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 48), "storeProfileData:", 0);
    objc_msgSend(*(id *)(a1 + 40), "setLastErrorDescription:", 0);
  }
  if ((v8 & 1) != 0)
    (*(void (**)(void))(*(_QWORD *)(a1 + 56) + 16))();
}

void sub_1001B6254(uint64_t a1)
{
  unsigned __int8 v2;
  BOOL v3;
  void *v4;
  id v5;
  BOOL v6;
  NSObject *v7;
  os_log_type_t v8;
  void (**v9)(_QWORD);
  id v10;
  _WORD v11[3];
  os_log_type_t v12;
  os_log_t oslog;
  char v14;
  id v15;
  void **v16;
  int v17;
  int v18;
  void (*v19);
  void *v20;
  id v21;
  id location;
  char v23;
  id v24;
  uint64_t v25;
  uint64_t v26;

  v26 = a1;
  v25 = a1;
  v2 = objc_msgSend(*(id *)(a1 + 32), "isAwaitingDeviceConfigured");
  v23 = 0;
  v3 = 0;
  if ((v2 & 1) != 0)
  {
    v24 = objc_msgSend(*(id *)(a1 + 40), "lastErrorDescription");
    v23 = 1;
    v3 = v24 == 0;
  }
  if ((v23 & 1) != 0)

  if (v3)
  {
    objc_initWeak(&location, *(id *)(a1 + 40));
    v16 = _NSConcreteStackBlock;
    v17 = -1073741824;
    v18 = 0;
    v19 = sub_1001B6500;
    v20 = &unk_1002806B8;
    objc_copyWeak(&v21, &location);
    objc_msgSend(*(id *)(a1 + 40), "setDeviceConfiguredCompletionBlock:", &v16);
    objc_msgSend(*(id *)(a1 + 40), "setState:", 4);
    objc_msgSend(*(id *)(a1 + 40), "_setupForState");
    v4 = *(void **)(a1 + 40);
    v14 = 0;
    v5 = objc_msgSend(v4, "cloudConfigurationChangedDuringInstallation");
    v6 = 0;
    if ((v5 & 1) != 0)
    {
      v5 = objc_msgSend(*(id *)(a1 + 40), "deviceConfiguredCompletionBlock");
      v15 = v5;
      v14 = 1;
      v6 = v5 != 0;
    }
    if ((v14 & 1) != 0)

    if (v6)
    {
      oslog = (os_log_t)(id)_BYLoggingFacility(v5);
      v12 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
      {
        v7 = oslog;
        v8 = v12;
        sub_100038C3C(v11);
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Cloud configuration changed during installation; jumping straight to completion...",
          (uint8_t *)v11,
          2u);
      }
      objc_storeStrong((id *)&oslog, 0);
      v9 = (void (**)(_QWORD))objc_msgSend(*(id *)(a1 + 40), "deviceConfiguredCompletionBlock");
      v9[2](v9);

      objc_msgSend(*(id *)(a1 + 40), "setDeviceConfiguredCompletionBlock:", 0);
    }
    objc_destroyWeak(&v21);
    objc_destroyWeak(&location);
  }
  else
  {
    objc_msgSend(*(id *)(a1 + 40), "setState:", 5);
    objc_msgSend(*(id *)(a1 + 40), "_setupForState");
  }
  v10 = objc_msgSend(*(id *)(a1 + 40), "view");
  objc_msgSend(v10, "setNeedsLayout");

}

void sub_1001B6500(NSObject *a1)
{
  NSObject *v2;
  os_log_type_t v3;
  id location;
  uint8_t buf[7];
  os_log_type_t v6;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(a1);
  v6 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v2 = oslog[0];
    v3 = v6;
    sub_100038C3C(buf);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Device configuration completed!", buf, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  location = objc_loadWeakRetained((id *)&a1[4].isa);
  objc_msgSend(location, "setState:", 5);
  objc_msgSend(location, "_setupForState");
  objc_storeStrong(&location, 0);
}

void sub_1001B6694(NSObject *a1)
{
  id v2;
  unsigned __int8 v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  id v7;
  BOOL v8;
  NSObject *v9;
  os_log_type_t v10;
  void (**v11)(_QWORD);
  id v12;
  NSObject *v13;
  os_log_type_t v14;
  _WORD v15[3];
  os_log_type_t v16;
  os_log_t v17;
  uint8_t v18[7];
  os_log_type_t v19;
  os_log_t v20;
  char v21;
  id v22;
  uint8_t buf[7];
  os_log_type_t v24;
  os_log_t oslog[3];

  oslog[2] = a1;
  oslog[1] = a1;
  v2 = -[objc_class managedConfiguration](a1[4].isa, "managedConfiguration");
  v3 = objc_msgSend(v2, "isAwaitingDeviceConfigured");

  if ((v3 & 1) != 0)
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v24 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v5 = oslog[0];
      v6 = v24;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Cloud configuration changed, but we are still waiting for device to be configured. So ignore this change.", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
  }
  else
  {
    v7 = -[objc_class state](a1[4].isa, "state");
    v21 = 0;
    v8 = 0;
    if ((_DWORD)v7 == 4)
    {
      v7 = -[objc_class deviceConfiguredCompletionBlock](a1[4].isa, "deviceConfiguredCompletionBlock");
      v22 = v7;
      v21 = 1;
      v8 = v7 != 0;
    }
    if ((v21 & 1) != 0)

    if (v8)
    {
      v20 = (os_log_t)(id)_BYLoggingFacility(v7);
      v19 = OS_LOG_TYPE_DEFAULT;
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        v9 = v20;
        v10 = v19;
        sub_100038C3C(v18);
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "Cloud configuration installed!", v18, 2u);
      }
      objc_storeStrong((id *)&v20, 0);
      v11 = (void (**)(_QWORD))-[objc_class deviceConfiguredCompletionBlock](a1[4].isa, "deviceConfiguredCompletionBlock");
      v11[2](v11);

      -[objc_class setDeviceConfiguredCompletionBlock:](a1[4].isa, "setDeviceConfiguredCompletionBlock:", 0);
    }
    else
    {
      v12 = -[objc_class state](a1[4].isa, "state");
      if ((_DWORD)v12 == 3)
      {
        v17 = (os_log_t)(id)_BYLoggingFacility(v12);
        v16 = OS_LOG_TYPE_DEFAULT;
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          v13 = v17;
          v14 = v16;
          sub_100038C3C(v15);
          _os_log_impl((void *)&_mh_execute_header, v13, v14, "Cloud configuration did change during installation; taking note...",
            (uint8_t *)v15,
            2u);
        }
        objc_storeStrong((id *)&v17, 0);
        -[objc_class setCloudConfigurationChangedDuringInstallation:](a1[4].isa, "setCloudConfigurationChangedDuringInstallation:", 1);
      }
    }
  }
}

void sub_1001B71C4(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1001B7304();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("SDMDMConfigurator");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getSDMDMConfiguratorClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddyCloudConfigController.m"), 58, CFSTR("Unable to find class %s"), "SDMDMConfigurator");

    __break(1u);
  }
  qword_1002EEC58 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_1001B7304()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_1001B7430((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *SeedingLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddyCloudConfigController.m"), 57, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_1001B7430(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEC60;
  v9 = qword_1002EEC60;
  if (!qword_1002EEC60)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001B74C0;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1001B74C0((uint64_t)&v2);
  }
  return qword_1002EEC60;
}

uint64_t sub_1001B74C0(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/Seeding.framework/Seeding";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEC60 = result;
  return result;
}

id sub_1001B93AC(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "becomeFirstResponder", a1, a1);
}

double sub_1001B9AE4()
{
  return 0.01;
}

void sub_1001B9FC8(id *a1, void *a2)
{
  void *v3;
  id v4;
  id v5;
  id v6;
  double v7;
  double v8;
  id v9;
  id v10;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = (void *)objc_opt_class(a1[4]);
  v4 = objc_msgSend(a1[4], "view", 0, a1);
  v5 = objc_msgSend(v4, "window");
  v6 = objc_msgSend(v5, "windowScene");
  objc_msgSend(v3, "_passcodeInputVerticalPaddingForOrientation:", objc_msgSend(v6, "interfaceOrientation"));
  v8 = v7;

  v9 = objc_msgSend(a1[4], "contentViewTopConstraint");
  objc_msgSend(v9, "setConstant:", v8);

  v10 = objc_msgSend(a1[4], "passcodeInputViewBottomConstraint");
  objc_msgSend(v10, "setConstant:", v8);

  objc_storeStrong(location, 0);
}

void sub_1001BA5C0(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "passcodeManager", a1, a1);
  objc_msgSend(v2, "transitionToNextPasscodeStateForInput:", *(_QWORD *)(a1 + 40));

}

void sub_1001BABA0(uint64_t a1, double a2)
{
  id v3;
  double v4;
  double v5;
  void *v6;
  UIApplication *v7;
  double v8;
  double v9;
  double v10;
  void *v11;
  double v12;
  id v13;
  id v14;
  char v15;
  UIApplication *v16;
  char v17;
  id v18;

  v3 = objc_msgSend(*(id *)(a1 + 32), "contentViewTopConstraint");
  objc_msgSend(v3, "constant");
  v5 = v4 + a2;
  v6 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32));
  v7 = +[UIApplication sharedApplication](UIApplication, "sharedApplication");
  objc_msgSend(v6, "_passcodeInputVerticalPaddingForOrientation:", -[UIApplication activeInterfaceOrientation](v7, "activeInterfaceOrientation"));
  v17 = 0;
  v15 = 0;
  if (v5 <= v8)
  {
    v11 = (void *)objc_opt_class(*(_QWORD *)(a1 + 32));
    v16 = +[UIApplication sharedApplication](UIApplication, "sharedApplication");
    v15 = 1;
    objc_msgSend(v11, "_passcodeInputVerticalPaddingForOrientation:", -[UIApplication activeInterfaceOrientation](v16, "activeInterfaceOrientation"));
    v10 = v12;
  }
  else
  {
    v18 = objc_msgSend(*(id *)(a1 + 32), "contentViewTopConstraint");
    v17 = 1;
    objc_msgSend(v18, "constant");
    v10 = v9 + a2;
  }
  v13 = objc_msgSend(*(id *)(a1 + 32), "contentViewTopConstraint");
  objc_msgSend(v13, "setConstant:", v10);

  if ((v15 & 1) != 0)
  if ((v17 & 1) != 0)

  v14 = objc_msgSend(*(id *)(a1 + 32), "view");
  objc_msgSend(v14, "layoutIfNeeded");

}

void sub_1001BBF9C(id *a1, void *a2)
{
  id v3;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(a1[4], "passcodeManager");
  objc_msgSend(v3, "acceptWeakPasscode:", 0);

  objc_storeStrong(location, 0);
}

void sub_1001BC008(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  id v6;
  _WORD v7[7];
  os_log_type_t v8;
  os_log_t oslog[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
  v8 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog[0];
    v5 = v8;
    sub_100038C3C(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "User accepted weak passcode", (uint8_t *)v7, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  v6 = -[objc_class passcodeManager](a1[4].isa, "passcodeManager");
  objc_msgSend(v6, "acceptWeakPasscode:", 1);

  objc_storeStrong(location, 0);
}

void sub_1001BC440(NSObject *a1, void *a2)
{
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  _WORD v6[7];
  os_log_type_t v7;
  os_log_t oslog[2];
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  oslog[1] = a1;
  oslog[0] = (os_log_t)(id)_BYLoggingFacility(v3);
  v7 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
  {
    v4 = oslog[0];
    v5 = v7;
    sub_100038C3C(v6);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "User opted out of passcode", (uint8_t *)v6, 2u);
  }
  objc_storeStrong((id *)oslog, 0);
  -[objc_class _finishedWithPasscode:](a1[4].isa, "_finishedWithPasscode:", 0);
  objc_storeStrong(location, 0);
}

void sub_1001BCD84(id *a1, void *a2)
{
  id v3;
  id v4;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(a1[4], "passcodeManager");
  objc_msgSend(v3, "setNumericPasscodeEntry:", 0);

  v4 = objc_msgSend(a1[4], "passcodeManager");
  objc_msgSend(v4, "setSimplePasscodeEntryLength:", 0);

  objc_msgSend(a1[4], "_commitPasscodeEntryTypeChange");
  objc_storeStrong(location, 0);
}

void sub_1001BCE20(id *a1, void *a2)
{
  id v3;
  id v4;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(a1[4], "passcodeManager");
  objc_msgSend(v3, "setNumericPasscodeEntry:", 1);

  v4 = objc_msgSend(a1[4], "passcodeManager");
  objc_msgSend(v4, "setSimplePasscodeEntryLength:", 0);

  objc_msgSend(a1[4], "_commitPasscodeEntryTypeChange");
  objc_storeStrong(location, 0);
}

void sub_1001BCEC0(id *a1, void *a2)
{
  id v3;
  id v4;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(a1[4], "passcodeManager");
  objc_msgSend(v3, "setNumericPasscodeEntry:", 1);

  v4 = objc_msgSend(a1[4], "passcodeManager");
  objc_msgSend(v4, "setSimplePasscodeEntryLength:", 6);

  objc_msgSend(a1[4], "_commitPasscodeEntryTypeChange");
  objc_storeStrong(location, 0);
}

void sub_1001BCF60(id *a1, void *a2)
{
  id v3;
  id v4;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v3 = objc_msgSend(a1[4], "passcodeManager");
  objc_msgSend(v3, "setNumericPasscodeEntry:", 1);

  v4 = objc_msgSend(a1[4], "passcodeManager");
  objc_msgSend(v4, "setSimplePasscodeEntryLength:", 4);

  objc_msgSend(a1[4], "_commitPasscodeEntryTypeChange");
  objc_storeStrong(location, 0);
}

void sub_1001BD000(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "_showSkipPasscodeAlert");
  objc_storeStrong(location, 0);
}

BOOL sub_1001BD20C(id a1, UIView *a2, NSDictionary *a3)
{
  id v4;
  uint64_t v5;
  id v7;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v7 = 0;
  objc_storeStrong(&v7, a3);
  v4 = location[0];
  v5 = objc_opt_class(BuddyPasscodeInputView);
  LOBYTE(v4) = objc_opt_isKindOfClass(v4, v5);
  objc_storeStrong(&v7, 0);
  objc_storeStrong(location, 0);
  return v4 & 1;
}

void sub_1001BD89C(id a1)
{
  dispatch_queue_t v1;
  BuddyDeviceManagementSupport *v2;
  void *v3;
  dispatch_queue_attr_t attr[3];

  attr[2] = (dispatch_queue_attr_t)a1;
  attr[1] = (dispatch_queue_attr_t)a1;
  attr[0] = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  v1 = dispatch_queue_create("Setup Catalyst Queue", attr[0]);
  CATSetCatalystQueue(v1);

  v2 = objc_alloc_init(BuddyDeviceManagementSupport);
  v3 = (void *)qword_1002EEC78;
  qword_1002EEC78 = (uint64_t)v2;

  objc_storeStrong((id *)attr, 0);
}

void sub_1001BDBE4(uint64_t a1, uint64_t a2)
{
  void *v2;
  id *v3;

  v3 = (id *)(a2 + 40);
  v2 = *(void **)(a2 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  objc_storeStrong((id *)(a1 + 40), v2);
  objc_storeStrong(v3, 0);
}

void sub_1001BDC14(uint64_t a1)
{
  objc_storeStrong((id *)(a1 + 40), 0);
}

void sub_1001BDC20(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 24));
}

void sub_1001BDEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, int a18, _Unwind_Exception *exception_object, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

uint64_t sub_1001BDEF0(uint64_t result)
{
  if (*(_QWORD *)(result + 32))
    return (*(uint64_t (**)(void))(*(_QWORD *)(result + 32) + 16))();
  return result;
}

void sub_1001BDF30(uint64_t a1, char a2)
{
  NSObject *v3;
  os_log_type_t v4;
  float v5;
  dispatch_time_t v6;
  NSObject *v7;
  NSObject *v8;
  os_log_type_t v9;
  _WORD v10[3];
  char v11;
  os_log_t v12;
  void **block;
  int v14;
  int v15;
  id (*v16)(uint64_t);
  void *v17;
  id v18;
  id v19;
  int v20;
  id location;
  os_log_type_t v22;
  os_log_t v23;
  uint8_t v24[7];
  char v25;
  os_log_t v26;
  os_log_type_t v27;
  os_log_t oslog;
  int v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint8_t v33[16];
  uint8_t buf[8];

  v32 = a1;
  v31 = a2;
  v30 = a1;
  v29 = 2;
  if ((a2 & 1) != 0)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(a1);
    v27 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEFAULT))
    {
      sub_100046FA0(buf, *(_DWORD *)(a1 + 64));
      _os_log_impl((void *)&_mh_execute_header, oslog, v27, "Skip keys loaded in %i attempts", buf, 8u);
    }
    objc_storeStrong((id *)&oslog, 0);
    objc_msgSend(*(id *)(a1 + 32), "setDidFetchSkipKeysSuccessfully:", 1);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else if (*(_DWORD *)(a1 + 64) == 2)
  {
    v26 = (os_log_t)(id)_BYLoggingFacility(a1);
    v25 = 16;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      v3 = v26;
      v4 = v25;
      sub_100038C3C(v24);
      _os_log_error_impl((void *)&_mh_execute_header, v3, v4, "Abort loading skip keys. Max retry attempt reached.", v24, 2u);
    }
    objc_storeStrong((id *)&v26, 0);
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
  else
  {
    v23 = (os_log_t)(id)_BYLoggingFacility(a1);
    v22 = OS_LOG_TYPE_DEBUG;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEBUG))
    {
      sub_100046FA0(v33, *(_DWORD *)(a1 + 64));
      _os_log_debug_impl((void *)&_mh_execute_header, v23, v22, "Retry loading skip keys: %i", v33, 8u);
    }
    objc_storeStrong((id *)&v23, 0);
    location = objc_loadWeakRetained((id *)(a1 + 56));
    if (location)
    {
      objc_msgSend(location, "_delayBetweenLoadSkipKeysRetriesInSeconds");
      v6 = dispatch_time(0, (uint64_t)(float)(v5 * 1000000000.0));
      v7 = *((_QWORD *)location + 4);
      block = _NSConcreteStackBlock;
      v14 = -1073741824;
      v15 = 0;
      v16 = sub_1001BE2B8;
      v17 = &unk_1002844A8;
      v18 = *(id *)(a1 + 32);
      v20 = *(_DWORD *)(a1 + 64);
      v19 = *(id *)(a1 + 48);
      dispatch_after(v6, v7, &block);
      objc_storeStrong(&v19, 0);
      objc_storeStrong(&v18, 0);
    }
    else
    {
      v12 = (os_log_t)(id)_BYLoggingFacility(0);
      v11 = 16;
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        v8 = v12;
        v9 = v11;
        sub_100038C3C(v10);
        _os_log_error_impl((void *)&_mh_execute_header, v8, v9, "Abort loading skip keys. Self not found", (uint8_t *)v10, 2u);
      }
      objc_storeStrong((id *)&v12, 0);
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }
    objc_storeStrong(&location, 0);
  }
}

id sub_1001BE2B8(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "_loadSkipKeysWithCurrentTry:completion:", (*(_DWORD *)(a1 + 48) + 1), *(_QWORD *)(a1 + 40), a1, a1);
}

void sub_1001BE3DC(uint64_t a1, void *a2)
{
  NSObject *v3;
  void **block;
  int v5;
  int v6;
  void (*v7)(uint64_t);
  void *v8;
  id v9;
  id v10[2];
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v10[1] = (id)a1;
  v3 = objc_msgSend(*(id *)(a1 + 32), "skipKeysQueue");
  block = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_1001BE4EC;
  v8 = &unk_100280D00;
  v9 = *(id *)(a1 + 32);
  v10[0] = location[0];
  dispatch_sync(v3, &block);

  if (*(_QWORD *)(a1 + 40))
    (*(void (**)(_QWORD, BOOL))(*(_QWORD *)(a1 + 40) + 16))(*(_QWORD *)(a1 + 40), location[0] != 0);
  objc_storeStrong(v10, 0);
  objc_storeStrong(&v9, 0);
  objc_storeStrong(location, 0);
}

void sub_1001BE4EC(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(a1 + 32) + 24), *(id *)(a1 + 40));
}

void sub_1001BE720(uint64_t a1)
{
  objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), *(id *)(*(_QWORD *)(a1 + 32) + 24));
}

void sub_1001C2C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object)
{
  uint64_t v17;

  objc_destroyWeak((id *)(v17 - 40));
  _Unwind_Resume(a1);
}

void sub_1001C2C8C(id *a1)
{
  id location[3];

  location[2] = a1;
  location[1] = a1;
  location[0] = objc_loadWeakRetained(a1 + 4);
  if (location[0])
    objc_msgSend(location[0], "additionViewControllerCompleted");
  objc_storeStrong(location, 0);
}

id sub_1001C2FD4(id a1, BuddyMultilingualDisplayableViewModel *a2)
{
  id v2;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v2 = objc_msgSend(location[0], "identifier");
  objc_storeStrong(location, 0);
  return v2;
}

void sub_1001C4070(uint64_t a1)
{
  id v2;
  NSBundle *v3;
  id v4;
  NSString *v5;

  objc_msgSend(*(id *)(a1 + 32), "loadViewIfNeeded", a1, a1);
  if (objc_msgSend(*(id *)(a1 + 40), "connectionType") == (id)1)
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "headerView");
    v3 = +[NSBundle mainBundle](NSBundle, "mainBundle");
    v4 = +[UIDevice modelSpecificLocalizedStringKeyForKey:](UIDevice, "modelSpecificLocalizedStringKeyForKey:", CFSTR("PROGRESS_DETAIL_WIRED"));
  }
  else
  {
    v2 = objc_msgSend(*(id *)(a1 + 32), "headerView");
    v3 = +[NSBundle mainBundle](NSBundle, "mainBundle");
    v4 = +[UIDevice modelSpecificLocalizedStringKeyForKey:](UIDevice, "modelSpecificLocalizedStringKeyForKey:", CFSTR("PROGRESS_DETAIL_WIRELESS"));
  }
  v5 = -[NSBundle localizedStringForKey:value:table:](v3, "localizedStringForKey:value:table:", v4, &stru_100284738, CFSTR("Migration"));
  objc_msgSend(v2, "setDetailText:", v5);

}

id sub_1001C433C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setDeviceTransferProgress:", *(_QWORD *)(a1 + 40), a1, a1);
}

void sub_1001C44F4(id a1)
{
  BYDevice *v1;
  void *v2;

  v1 = objc_alloc_init(BYDevice);
  v2 = (void *)qword_1002EECA0;
  qword_1002EECA0 = (uint64_t)v1;

}

uint64_t sub_1001C4870()
{
  NSAssertionHandler *v0;
  NSString *v1;
  uint64_t (*v3)(void);

  v3 = (uint64_t (*)(void))sub_1001C4C30();
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "BOOL BYSBSIsSystemApertureAvailable(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BYDevice.m"), 18, CFSTR("%s"), dlerror());

    __break(1u);
  }
  return v3() & 1;
}

uint64_t sub_1001C4B10(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EEC90;
  v9 = qword_1002EEC90;
  if (!qword_1002EEC90)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001C4BA0;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1001C4BA0((uint64_t)&v2);
  }
  return qword_1002EEC90;
}

uint64_t sub_1001C4BA0(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/SpringBoardServices.framework/SpringBoardServices";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EEC90 = result;
  return result;
}

uint64_t sub_1001C4C30()
{
  uint64_t v0;
  void **v2;
  int v3;
  int v4;
  void *(*v5)(uint64_t);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 0x20000000;
  v12 = 32;
  v8 = qword_1002EEC98;
  v13 = qword_1002EEC98;
  if (!qword_1002EEC98)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001C4D14;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001C4D14((uint64_t)&v2);
  }
  v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_1001C4D14(uint64_t a1)
{
  void *v2;
  void *result;

  v2 = (void *)sub_1001C4D7C();
  result = dlsym(v2, "SBSIsSystemApertureAvailable");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1002EEC98 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1001C4D7C()
{
  NSAssertionHandler *v0;
  NSString *v1;
  uint64_t v3;
  void *v4;

  v4 = 0;
  v3 = sub_1001C4B10((uint64_t)&v4);
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *SpringBoardServicesLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BYDevice.m"), 17, CFSTR("%s"), v4);

    __break(1u);
  }
  if (v4)
    free(v4);
  return v3;
}

void sub_1001C4F28(id a1)
{
  BYSecurityInterface *v1;
  void *v2;

  v1 = objc_opt_new(BYSecurityInterface);
  v2 = (void *)qword_1002EECC8;
  qword_1002EECC8 = (uint64_t)v1;

}

id sub_1001C531C()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EECB0;
  v13 = qword_1002EECB0;
  if (!qword_1002EECB0)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001C5928;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001C5928(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

id sub_1001C5770()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EECC0;
  v13 = qword_1002EECC0;
  if (!qword_1002EECC0)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001C5CB4;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001C5CB4(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void sub_1001C5928(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1001C5A68();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("CDPAccount");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getCDPAccountClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BYSecurityInterface.m"), 20, CFSTR("Unable to find class %s"), "CDPAccount");

    __break(1u);
  }
  qword_1002EECB0 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_1001C5A68()
{
  NSAssertionHandler *v0;
  NSString *v1;
  void *v2;

  v2 = 0;
  if (!sub_1001C5B94((uint64_t)&v2))
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *CoreCDPLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BYSecurityInterface.m"), 18, CFSTR("%s"), v2);

    __break(1u);
  }
  if (v2)
    free(v2);
}

uint64_t sub_1001C5B94(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EECB8;
  v9 = qword_1002EECB8;
  if (!qword_1002EECB8)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001C5C24;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1001C5C24((uint64_t)&v2);
  }
  return qword_1002EECB8;
}

uint64_t sub_1001C5C24(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/CoreCDP.framework/CoreCDP";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EECB8 = result;
  return result;
}

void sub_1001C5CB4(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1001C5A68();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("CDPStateController");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getCDPStateControllerClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BYSecurityInterface.m"), 21, CFSTR("Unable to find class %s"), "CDPStateController");

    __break(1u);
  }
  qword_1002EECC0 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

void sub_1001C686C(id *a1, char a2)
{
  void *v3;
  void **v4;
  int v5;
  int v6;
  void (*v7)(uint64_t);
  void *v8;
  id v9;
  id v10;
  id v11;
  id v12;
  char v13;
  id *v14;
  char v15;
  id *v16;

  v16 = a1;
  v15 = a2;
  v14 = a1;
  v3 = &_dispatch_main_q;
  v4 = _NSConcreteStackBlock;
  v5 = -1073741824;
  v6 = 0;
  v7 = sub_1001C699C;
  v8 = &unk_1002845D0;
  v9 = a1[4];
  v13 = v15 & 1;
  v10 = a1[5];
  v11 = a1[6];
  v12 = a1[7];
  dispatch_async((dispatch_queue_t)v3, &v4);

  objc_storeStrong(&v12, 0);
  objc_storeStrong(&v11, 0);
  objc_storeStrong(&v10, 0);
  objc_storeStrong(&v9, 0);
}

void sub_1001C699C(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  id v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  _WORD v12[3];
  char v13;
  os_log_t v14;
  uint8_t buf[7];
  os_log_type_t v16;
  os_log_t oslog[3];

  oslog[2] = (os_log_t)a1;
  oslog[1] = (os_log_t)a1;
  +[BFFViewControllerSpinnerManager stopAnimatingSpinnerFor:](BFFViewControllerSpinnerManager, "stopAnimatingSpinnerFor:", CFSTR("beta re-enroll spinner"));
  v2 = objc_msgSend(*(id *)(a1 + 32), "view");
  v3 = objc_msgSend(v2, "window");
  objc_msgSend(v3, "setUserInteractionEnabled:", 1);

  if ((*(_BYTE *)(a1 + 64) & 1) != 0
    || (v4 = objc_msgSend(*(id *)(a1 + 32), "fakeBetaReEnrollment"), (v4 & 1) != 0))
  {
    oslog[0] = (os_log_t)(id)_BYLoggingFacility(v4);
    v16 = OS_LOG_TYPE_DEFAULT;
    if (os_log_type_enabled(oslog[0], OS_LOG_TYPE_DEFAULT))
    {
      v5 = oslog[0];
      v6 = v16;
      sub_100038C3C(buf);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Beta Re-Enroll did succeed", buf, 2u);
    }
    objc_storeStrong((id *)oslog, 0);
    v7 = objc_msgSend(*(id *)(a1 + 32), "softwareUpdateCache");
    objc_msgSend(v7, "reset");

    v8 = objc_msgSend(*(id *)(a1 + 32), "settingsManager");
    objc_msgSend(v8, "setSeedEnrollmentProgramName:assetAudience:programID:", *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));

    v9 = objc_msgSend(*(id *)(a1 + 32), "delegate");
    objc_msgSend(v9, "flowItemDone:nextItem:", *(_QWORD *)(a1 + 32), 0);

  }
  else
  {
    v14 = (os_log_t)(id)_BYLoggingFacility(v4);
    v13 = 16;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v10 = v14;
      v11 = v13;
      sub_100038C3C(v12);
      _os_log_error_impl((void *)&_mh_execute_header, v10, v11, "Beta Re-Enroll did fail", (uint8_t *)v12, 2u);
    }
    objc_storeStrong((id *)&v14, 0);
    objc_msgSend(*(id *)(a1 + 32), "_presentReEnrollFailureAlert");
  }
}

void sub_1001C7264(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "_enrollTapped:", a1[4]);
  objc_storeStrong(location, 0);
}

void sub_1001C72B4(id *a1, void *a2)
{
  id v3;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "_recordAnalyticsEventForEnrollment:", 0);
  v3 = objc_msgSend(a1[4], "delegate");
  objc_msgSend(v3, "flowItemDone:nextItem:", a1[4], 0);

  objc_storeStrong(location, 0);
}

void sub_1001C7330(id *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "_enrollTapped:", a1[4]);
  objc_storeStrong(location, 0);
}

void sub_1001C7380(id *a1, void *a2)
{
  id v3;
  id v4;
  unsigned __int8 v5;
  id v6;
  id v7;
  id v8;
  id v9;
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_msgSend(a1[4], "_recordAnalyticsEventForEnrollment:", 0);
  v3 = objc_msgSend(a1[4], "miscState");
  v4 = objc_msgSend(v3, "migrationManager");
  v5 = objc_msgSend(v4, "willMigrate");

  if ((v5 & 1) != 0)
  {
    v6 = objc_msgSend(a1[4], "miscState");
    v7 = objc_msgSend(v6, "migrationManager");
    objc_msgSend(v7, "reset");

  }
  v8 = objc_msgSend(a1[4], "delegate");
  v9 = objc_msgSend(v8, "popToBuddyControllerWithClass:animated:", objc_opt_class(DeviceRestoreChoiceController), 1);

  objc_storeStrong(location, 0);
}

void sub_1001C7620(id a1, UIAlertAction *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  objc_storeStrong(location, 0);
}

void sub_1001C78D4(uint64_t a1)
{
  id v2;
  id v3;
  id v4;
  BOOL v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  id v9;
  id v10;
  id v11;
  unsigned __int8 v12;
  id v13;
  id v14;
  id v15;
  id v16;
  char v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  id v21;
  id v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  NSNumber *v28;
  id v29;
  id v30;
  id v31;
  char v32;
  id v33;
  id v34;
  id v35;
  id v36;
  id v37;
  id v38;
  id v39;
  id v40;
  uint64_t v41;
  NSNumber *v42;
  id v43;
  id v44;
  id v45;
  unsigned __int8 v46;
  void *v47;
  id v48;
  void **v49;
  int v50;
  int v51;
  void (*v52)(uint64_t, void *, void *, void *);
  void *v53;
  id v54;
  id v55;
  id v56;
  char v57;
  os_log_type_t v58;
  os_log_t v59;
  char v60;
  id v61;
  char v62;
  id v63;
  os_log_type_t v64;
  os_log_t v65;
  id v66;
  char v67;
  uint8_t v68[7];
  char v69;
  os_log_t oslog;
  char v71;
  id v72;
  char v73;
  id v74;
  char v75;
  id v76;
  id v77;
  char v78;
  id v79;
  char v80;
  uint8_t buf[7];
  char v82;
  id location;
  char v84;
  id v85;
  char v86;
  id v87;
  char v88;
  id v89;
  uint64_t v90;
  uint64_t v91;
  uint8_t v92[16];
  uint8_t v93[24];

  v91 = a1;
  v90 = a1;
  v2 = objc_msgSend(*(id *)(a1 + 32), "existingSettings");
  v3 = objc_msgSend(v2, "backupMetadata");
  objc_msgSend(*(id *)(a1 + 32), "setBackupMetadata:", v3);

  v4 = objc_msgSend(*(id *)(a1 + 32), "backupMetadata");
  v88 = 0;
  v86 = 0;
  v84 = 0;
  v5 = 0;
  if (!v4)
  {
    v89 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
    v88 = 1;
    v5 = 0;
    if ((objc_msgSend(v89, "hasAppliedSettings") & 1) != 0)
    {
      v87 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
      v86 = 1;
      v85 = objc_msgSend(v87, "backupMetadataFromTerminatedConnection");
      v84 = 1;
      v5 = v85 != 0;
    }
  }
  if ((v84 & 1) != 0)

  if ((v86 & 1) != 0)
  if ((v88 & 1) != 0)

  if (v5)
  {
    location = (id)_BYLoggingFacility(v6);
    v82 = 2;
    if (os_log_type_enabled((os_log_t)location, OS_LOG_TYPE_DEBUG))
    {
      v7 = location;
      v8 = v82;
      sub_100038C3C(buf);
      _os_log_debug_impl((void *)&_mh_execute_header, v7, v8, "Beta Re-Enroll using backup metadata from terminated proximity connection", buf, 2u);
    }
    objc_storeStrong(&location, 0);
    v9 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
    v10 = objc_msgSend(v9, "backupMetadataFromTerminatedConnection");
    objc_msgSend(*(id *)(a1 + 32), "setBackupMetadata:", v10);

  }
  v80 = 0;
  v11 = objc_msgSend(*(id *)(a1 + 32), "backupMetadata");
  v78 = 0;
  v12 = 0;
  if ((objc_msgSend(v11, "hasSeedEnrollmentProgram") & 1) != 0)
  {
    v79 = objc_msgSend(*(id *)(a1 + 32), "backupMetadata");
    v78 = 1;
    v12 = objc_msgSend(v79, "hasSeedEnrollmentAssetAudience");
  }
  if ((v78 & 1) != 0)

  if ((v12 & 1) != 0)
  {
    v13 = objc_msgSend(*(id *)(a1 + 32), "seedProgramManager");
    v77 = objc_msgSend(v13, "currentEnrollmentMetadata");

    v14 = objc_msgSend(v77, "bySeedProgramManager_valueForProgramKey");
    v15 = objc_msgSend(*(id *)(a1 + 32), "backupMetadata");
    v16 = objc_msgSend(v15, "seedEnrollmentProgram");
    v75 = 0;
    v73 = 0;
    v71 = 0;
    v17 = 1;
    if ((objc_msgSend(v14, "isEqualToString:", v16) & 1) != 0)
    {
      v76 = objc_msgSend(v77, "bySeedProgramManager_valueForAssetAudienceKey");
      v75 = 1;
      v74 = objc_msgSend(*(id *)(a1 + 32), "backupMetadata");
      v73 = 1;
      v72 = objc_msgSend(v74, "seedEnrollmentAssetAudience");
      v71 = 1;
      v17 = objc_msgSend(v76, "isEqualToString:") ^ 1;
    }
    if ((v71 & 1) != 0)

    if ((v73 & 1) != 0)
    if ((v75 & 1) != 0)

    if ((v17 & 1) != 0)
    {
      oslog = (os_log_t)(id)_BYLoggingFacility(v18);
      v69 = 2;
      if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
      {
        v19 = oslog;
        v20 = v69;
        sub_100038C3C(v68);
        _os_log_debug_impl((void *)&_mh_execute_header, v19, v20, "Beta Re-Enroll: Backup has enrollment that we lack", v68, 2u);
      }
      objc_storeStrong((id *)&oslog, 0);
      v80 = 1;
    }
    objc_storeStrong(&v77, 0);
  }
  if ((v80 & 1) == 0)
  {
    v21 = objc_msgSend(*(id *)(a1 + 32), "buddyPreferencesInternal");
    objc_msgSend(*(id *)(a1 + 32), "setFakeBetaReEnrollment:", (unint64_t)objc_msgSend(v21, "BOOLForKey:", CFSTR("FakeBetaReEnrollment")) & 1);

    v80 = objc_msgSend(*(id *)(a1 + 32), "fakeBetaReEnrollment") & 1;
  }
  if ((v80 & 1) != 0)
  {
    v67 = 0;
    v22 = objc_msgSend(*(id *)(a1 + 32), "miscState");
    v66 = objc_msgSend(v22, "migrationManager");

    if ((objc_msgSend(v66, "willMigrate") & 1) != 0)
    {
      if ((objc_msgSend(v66, "forceUpdateToMigrate") & 1) != 0
        || (objc_msgSend(v66, "requiresUpdateToMigrate") & 1) != 0)
      {
        v67 = 1;
        v23 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
        v24 = objc_msgSend(v23, "productVersion");
        objc_msgSend(*(id *)(a1 + 32), "setSourceSystemVersion:", v24);

      }
      v25 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
      v26 = objc_msgSend(v25, "deviceClass");
      objc_msgSend(*(id *)(a1 + 32), "setSourceDeviceClass:", v26);

      v65 = (os_log_t)(id)_BYLoggingFacility(v27);
      v64 = OS_LOG_TYPE_DEBUG;
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEBUG))
      {
        v28 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v67 & 1);
        sub_100039500((uint64_t)v93, (uint64_t)v28);
        _os_log_debug_impl((void *)&_mh_execute_header, v65, v64, "Beta Re-Enroll: Migration needs software update? %{public}@", v93, 0xCu);

      }
      objc_storeStrong((id *)&v65, 0);
    }
    else
    {
      v29 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
      v30 = objc_msgSend(v29, "backupItem");

      if (v30)
      {
        v31 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
        v62 = 0;
        v60 = 0;
        v32 = 1;
        if ((objc_msgSend(v31, "forceSoftwareUpdateRestore") & 1) == 0)
        {
          v63 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
          v62 = 1;
          v61 = objc_msgSend(v63, "backupItem");
          v60 = 1;
          v32 = objc_msgSend(v61, "isCompatible") ^ 1;
        }
        if ((v60 & 1) != 0)

        if ((v62 & 1) != 0)
        if ((v32 & 1) != 0)
        {
          v67 = 1;
          v33 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
          v34 = objc_msgSend(v33, "backupItem");
          v35 = objc_msgSend(v34, "snapshot");
          v36 = objc_msgSend(v35, "systemVersion");
          objc_msgSend(*(id *)(a1 + 32), "setSourceSystemVersion:", v36);

        }
        v37 = objc_msgSend(*(id *)(a1 + 32), "pendingRestoreState");
        v38 = objc_msgSend(v37, "backupItem");
        v39 = objc_msgSend(v38, "backup");
        v40 = objc_msgSend(v39, "deviceClass");
        objc_msgSend(*(id *)(a1 + 32), "setSourceDeviceClass:", v40);

        v59 = (os_log_t)(id)_BYLoggingFacility(v41);
        v58 = OS_LOG_TYPE_DEBUG;
        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEBUG))
        {
          v42 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", v67 & 1);
          sub_100039500((uint64_t)v92, (uint64_t)v42);
          _os_log_debug_impl((void *)&_mh_execute_header, v59, v58, "Beta Re-Enroll: Restore needs software update? %{public}@", v92, 0xCu);

        }
        objc_storeStrong((id *)&v59, 0);
      }
      else
      {
        v43 = objc_msgSend(*(id *)(a1 + 32), "proximitySetupController");
        v44 = objc_msgSend(v43, "deviceClass");
        objc_msgSend(*(id *)(a1 + 32), "setSourceDeviceClass:", v44);

      }
    }
    if ((v67 & 1) == 0)
    {
      v45 = objc_msgSend(*(id *)(a1 + 32), "buddyPreferencesInternal");
      v46 = objc_msgSend(v45, "BOOLForKey:", CFSTR("FakeRequireBetaReEnrollment"));

      if ((v46 & 1) != 0)
      {
        v67 = 1;
        objc_msgSend(*(id *)(a1 + 32), "setSourceSystemVersion:", CFSTR("99.9"));
        v47 = (void *)MGCopyAnswer(CFSTR("DeviceClass"), 0);
        objc_msgSend(*(id *)(a1 + 32), "setSourceDeviceClass:", v47);

      }
    }
    if ((v67 & 1) != 0)
    {
      v48 = objc_msgSend(*(id *)(a1 + 32), "softwareUpdateCache");
      v49 = _NSConcreteStackBlock;
      v50 = -1073741824;
      v51 = 0;
      v52 = sub_1001C83B8;
      v53 = &unk_100282F10;
      v54 = v66;
      v55 = *(id *)(a1 + 32);
      v56 = *(id *)(a1 + 40);
      v57 = v80 & 1;
      objc_msgSend(v48, "scanUsingCache:withCompletion:", 1, &v49);

      objc_storeStrong(&v56, 0);
      objc_storeStrong(&v55, 0);
      objc_storeStrong(&v54, 0);
    }
    else
    {
      (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
    }
    objc_storeStrong(&v66, 0);
  }
  else
  {
    (*(void (**)(void))(*(_QWORD *)(a1 + 40) + 16))();
  }
}

void sub_1001C83B8(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7;
  id v8;
  id v9;
  id v10;
  id v11;
  id v12;
  unsigned __int8 v13;
  NSObject *v14;
  os_log_type_t v15;
  _WORD v16[3];
  char v17;
  os_log_t oslog;
  char v19;
  uint64_t v20;
  id v21;
  id v22;
  id location[2];

  location[1] = (id)a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  v22 = 0;
  objc_storeStrong(&v22, a3);
  v21 = 0;
  objc_storeStrong(&v21, a4);
  v20 = a1;
  v19 = 0;
  if (v22)
  {
    if ((objc_msgSend(*(id *)(a1 + 32), "willMigrate") & 1) != 0)
    {
      v7 = objc_msgSend(*(id *)(a1 + 40), "sourceSystemVersion");
      v8 = objc_msgSend(v22, "productVersion");
      v19 = +[BuddyMigrationCapability supportsMigrationFromProductVersion:toProductVersion:](BuddyMigrationCapability, "supportsMigrationFromProductVersion:toProductVersion:", v7, v8);

    }
    else
    {
      v9 = objc_msgSend(*(id *)(a1 + 40), "pendingRestoreState");
      v10 = objc_msgSend(v9, "backupItem");
      v11 = objc_msgSend(v22, "productVersion");
      v19 = objc_msgSend(v10, "isCompatibleWithUpdateToSystemVersion:", v11) & 1;

    }
  }
  if ((v19 & 1) != 0)
  {
    v12 = objc_msgSend(*(id *)(a1 + 40), "buddyPreferencesInternal");
    v13 = objc_msgSend(v12, "BOOLForKey:", CFSTR("FakeRequireBetaReEnrollment"));

    if ((v13 & 1) != 0)
      v19 = 0;
  }
  if ((v19 & 1) == 0)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(objc_msgSend(*(id *)(a1 + 40), "setRequiresBetaReEnrollment:", 1));
    v17 = 2;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_DEBUG))
    {
      v14 = oslog;
      v15 = v17;
      sub_100038C3C(v16);
      _os_log_debug_impl((void *)&_mh_execute_header, v14, v15, "Beta Re-Enroll: Re-enrollment required", (uint8_t *)v16, 2u);
    }
    objc_storeStrong((id *)&oslog, 0);
  }
  (*(void (**)(void))(*(_QWORD *)(a1 + 48) + 16))();
  objc_storeStrong(&v21, 0);
  objc_storeStrong(&v22, 0);
  objc_storeStrong(location, 0);
}

void sub_1001CAC74(id a1)
{
  NSArray *v1;
  id v2;
  id v3;
  uint64_t v4;
  unint64_t i;
  id v6;
  id v7;
  id v8;
  void *v9;
  _QWORD v10[8];
  id v11;
  id location[3];
  _BYTE v13[128];
  _QWORD v14[91];

  location[2] = a1;
  location[1] = a1;
  v14[0] = objc_opt_class(AssistantOptInController);
  v14[1] = objc_opt_class(BuddyActivationFlow);
  v14[2] = objc_opt_class(BuddyAirplaneController);
  v14[3] = objc_opt_class(BuddyAppActivityController);
  v14[4] = objc_opt_class(_TtC5Setup25BuddyAppearanceController);
  v14[5] = objc_opt_class(BuddyAppleIDChoiceController);
  v14[6] = objc_opt_class(BuddyAppleIDFlow);
  v14[7] = objc_opt_class(BuddyAppleIDHostController);
  v14[8] = objc_opt_class(BuddyAppleIDiCloudDrivePage);
  v14[9] = objc_opt_class(BuddyAppleIDPasswordChangeController);
  v14[10] = objc_opt_class(BuddyAppleIDRestoreFlow);
  v14[11] = objc_opt_class(BuddyAssociationController);
  v14[12] = objc_opt_class(BuddyAutoUpdateController);
  v14[13] = objc_opt_class(BuddyBetaReEnrollmentController);
  v14[14] = objc_opt_class(_TtC5Setup28BuddyButtonConfigurationFlow);
  v14[15] = objc_opt_class(_TtC5Setup27BuddyCameraButtonController);
  v14[16] = objc_opt_class(_TtC5Setup26BuddyChildSafetyController);
  v14[17] = objc_opt_class(_TtC5Setup19BuddyChildSetupFlow);
  v14[18] = objc_opt_class(BuddyChinaPhoneNumberPermissionController);
  v14[19] = objc_opt_class(BuddyCloudConfigController);
  v14[20] = objc_opt_class(BuddyCloudConfigInstallationController);
  v14[21] = objc_opt_class(BuddyCloudSIMController);
  v14[22] = objc_opt_class(BuddyConfiguringMultiUserController);
  v14[23] = objc_opt_class(BuddyDemoController);
  v14[24] = objc_opt_class(BuddyDiagnosticsController);
  v14[25] = objc_opt_class(BuddyEDUAccountConfigurationSyncController);
  v14[26] = objc_opt_class(BuddyAwaitUserConfigurationController);
  v14[27] = objc_opt_class(BuddyEnrollmentChannelDiscoveryController);
  v14[28] = objc_opt_class(BuddyExpressRestoreController);
  v14[29] = objc_opt_class(BuddyExpressWelcomeController);
  v14[30] = objc_opt_class(BuddyFinishFlow);
  v14[31] = objc_opt_class(BuddyGreenController);
  v14[32] = objc_opt_class(BuddyiCloudQuotaController);
  v14[33] = objc_opt_class(BuddyIntelligenceController);
  v14[34] = objc_opt_class(_TtC5Setup21BuddyIntentController);
  v14[35] = objc_opt_class(BuddyLanguageLocaleFlow);
  v14[36] = objc_opt_class(BuddyLocationServicesController);
  v14[37] = objc_opt_class(_TtC5Setup27BuddyLockdownModeController);
  v14[38] = objc_opt_class(BuddyManagedConfigurationMigrationController);
  v14[39] = objc_opt_class(BuddyManagedSIMController);
  v14[40] = objc_opt_class(BuddyMandatoryUpdateController);
  v14[41] = objc_opt_class(BuddyMessagesContactsController);
  v14[42] = objc_opt_class(BuddyMigrationFlow);
  v14[43] = objc_opt_class(BuddyMoveFromAndroidController);
  v14[44] = objc_opt_class(BuddyMultilingualFlow);
  v14[45] = objc_opt_class(BuddyMultilingualTermOfAddressViewController);
  v14[46] = objc_opt_class(_TtC5Setup27BuddyMultitaskingController);
  v14[47] = objc_opt_class(BuddyPasscodeFlow);
  v14[48] = objc_opt_class(BuddyPaymentController);
  v14[49] = objc_opt_class(BuddyPhoneNumberPermissionController);
  v14[50] = objc_opt_class(_TtC5Setup37BuddyPostActivationAppStateController);
  v14[51] = objc_opt_class(BuddyPrivacyController);
  v14[52] = objc_opt_class(BuddyProximityApplyPasscodeController);
  v14[53] = objc_opt_class(BuddyProximityApplySettingsController);
  v14[54] = objc_opt_class(BuddyProximityAutomatedDeviceEnrollmentInProgressController);
  v14[55] = objc_opt_class(BuddyProximityAutomatedDeviceEnrollmentPairingController);
  v14[56] = objc_opt_class(BuddyProximityAutomatedDeviceEnrollmentCompletionController);
  v14[57] = objc_opt_class(BuddyProximityCloudDependentFlow);
  v14[58] = objc_opt_class(BuddyProximityCloudFlow);
  v14[59] = objc_opt_class(BuddyProximityExistingAppleIDController);
  v14[60] = objc_opt_class(BuddyProximityExpressController);
  v14[61] = objc_opt_class(BuddyProximityIntentController);
  v14[62] = objc_opt_class(BuddyProximityPairingController);
  v14[63] = objc_opt_class(BuddyProximityPasscodeValidationController);
  v14[64] = objc_opt_class(BuddyProximitySetupController);
  v14[65] = objc_opt_class(_TtC5Setup28BuddyReadyForChildController);
  v14[66] = objc_opt_class(BuddyRestoreFinishedController);
  v14[67] = objc_opt_class(BuddyRestoreFlow);
  v14[68] = objc_opt_class(BuddySafetyController);
  v14[69] = objc_opt_class(BuddyScreenTimeController);
  v14[70] = objc_opt_class(BuddySeedDiagnosticsController);
  v14[71] = objc_opt_class(BuddySettingsDataUsageController);
  v14[72] = objc_opt_class(BuddySIMActivationController);
  v14[73] = objc_opt_class(BuddySIMController);
  v14[74] = objc_opt_class(BuddySIMTransferController);
  v14[75] = objc_opt_class(BuddySoftwareUpdateRestoreFlow);
  v14[76] = objc_opt_class(BuddySourceMigrationFlow);
  v14[77] = objc_opt_class(_TtC5Setup37BuddyStolenDeviceProtectionController);
  v14[78] = objc_opt_class(BuddyTermsConditionsFlow);
  v14[79] = objc_opt_class(BuddyTransferDataFlow);
  v14[80] = objc_opt_class(BuddyUpdateFinishedController);
  v14[81] = objc_opt_class(BuddyUpdateFinishedFlow);
  v14[82] = objc_opt_class(BuddyUpgradeMigrationFlow);
  v14[83] = objc_opt_class(BuddyUserInterfaceStyleSelector);
  v14[84] = objc_opt_class(BuddyWatchMigrationController);
  v14[85] = objc_opt_class(BuddyWiFiController);
  v14[86] = objc_opt_class(BuddyCloudConfigurationRetrievalController);
  v14[87] = objc_opt_class(DeviceRestoreChoiceController);
  v14[88] = objc_opt_class(RestoreFromBackupController);
  v14[89] = objc_opt_class(RestoreFromComputerController);
  v14[90] = objc_opt_class(RetailDiagnosticsController);
  v1 = +[NSArray arrayWithObjects:count:](NSArray, "arrayWithObjects:count:", v14, 91);
  location[0] = -[NSArray mutableCopy](v1, "mutableCopy");

  memset(v10, 0, sizeof(v10));
  v2 = objc_msgSend(location[0], "copy");
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", v10, v13, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v10[2];
    do
    {
      for (i = 0; i < (unint64_t)v3; ++i)
      {
        if (*(_QWORD *)v10[2] != v4)
          objc_enumerationMutation(v2);
        v11 = 0;
        v11 = *(id *)(v10[1] + 8 * i);
        if ((objc_msgSend(v11, "isSubclassOfClass:", objc_opt_class(BFFFlow)) & 1) != 0)
        {
          v6 = location[0];
          v7 = objc_msgSend(v11, "allowedFlowItems");
          objc_msgSend(v6, "addObjectsFromArray:", v7);

        }
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", v10, v13, 16);
    }
    while (v3);
  }

  v8 = objc_msgSend(location[0], "copy");
  v9 = (void *)qword_1002EECD8;
  qword_1002EECD8 = (uint64_t)v8;

  objc_storeStrong(location, 0);
}

void sub_1001CC738(id a1)
{
  BuddyActivationConfiguration *v1;
  void *v2;

  v1 = objc_alloc_init(BuddyActivationConfiguration);
  v2 = (void *)qword_1002EECF8;
  qword_1002EECF8 = (uint64_t)v1;

}

id sub_1001CCA8C(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "setInitialActivationState:", (unint64_t)objc_msgSend(*(id *)(a1 + 32), "isActivated", a1, a1) & 1);
}

void sub_1001CCBBC(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "delegates", a1, a1);
  objc_msgSend(v2, "addObject:", *(_QWORD *)(a1 + 40));

}

void sub_1001CCCFC(uint64_t a1)
{
  id v2;

  v2 = objc_msgSend(*(id *)(a1 + 32), "delegates", a1, a1);
  objc_msgSend(v2, "removeObject:", *(_QWORD *)(a1 + 40));

}

id sub_1001CCE08(uint64_t a1)
{
  return objc_msgSend(*(id *)(a1 + 32), "notifyDelegatesConfigurationChanged:isActivated:", *(_BYTE *)(a1 + 40) & 1, (unint64_t)objc_msgSend(*(id *)(a1 + 32), "isActivated", a1, a1) & 1);
}

void sub_1001CCF1C(uint64_t a1)
{
  id v2;
  id v3;
  uint64_t v4;
  unint64_t i;
  _QWORD v6[8];
  id v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE v10[128];

  v9 = a1;
  v8 = a1;
  memset(v6, 0, sizeof(v6));
  v2 = objc_msgSend(*(id *)(a1 + 32), "delegates");
  v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", v6, v10, 16);
  if (v3)
  {
    v4 = *(_QWORD *)v6[2];
    do
    {
      for (i = 0; i < (unint64_t)v3; ++i)
      {
        if (*(_QWORD *)v6[2] != v4)
          objc_enumerationMutation(v2);
        v7 = *(id *)(v6[1] + 8 * i);
        objc_msgSend(v7, "activationConfigurationChanged:isActivated:", *(_BYTE *)(a1 + 40) & 1, *(_BYTE *)(a1 + 41) & 1);
      }
      v3 = objc_msgSend(v2, "countByEnumeratingWithState:objects:count:", v6, v10, 16);
    }
    while (v3);
  }

}

void sub_1001CD36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, int a16, _Unwind_Exception *exception_object, char a18)
{
  _Block_object_dispose(&a18, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1001CD388(uint64_t result)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 8) + 24) = *(_BYTE *)(*(_QWORD *)(result + 32) + 8) & 1;
  return result;
}

void sub_1001CDA68(uint64_t a1)
{
  NSObject *v2;
  void **v3;
  uint64_t v4;
  id (*v5)(uint64_t);
  void *v6;
  id v7;
  char v8;
  char v9;
  uint64_t v10;
  uint64_t v11;

  v11 = a1;
  v10 = a1;
  v9 = 0;
  v9 = objc_msgSend(*(id *)(a1 + 32), "isActivated") & 1;
  v2 = objc_msgSend(*(id *)(a1 + 32), "activationStateQueue");
  v3 = _NSConcreteStackBlock;
  v4 = 3221225472;
  v5 = sub_1001CDB4C;
  v6 = &unk_100280B18;
  v7 = *(id *)(a1 + 32);
  v8 = v9 & 1;
  dispatch_sync(v2, &v3);

  objc_msgSend(*(id *)(a1 + 32), "notifyDelegatesConfigurationChanged:", 1, v3, v4, v5, v6);
  objc_storeStrong(&v7, 0);
}

id sub_1001CDB4C(uint64_t a1)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;

  v5 = a1;
  v4 = a1;
  LOBYTE(v2) = 0;
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
    v2 = objc_msgSend(*(id *)(a1 + 32), "initialActivationState", a1, a1) ^ 1;
  return objc_msgSend(*(id *)(a1 + 32), "setHasActivated:", v2 & 1, v4, v5);
}

id sub_1001CDBE0(uint64_t a1, void *a2)
{
  return objc_msgSend(a2, "_activationStateChanged");
}

void sub_1001CE3E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, int a17, _Unwind_Exception *exception_object, id location)
{
  objc_destroyWeak(&location);
  _Unwind_Resume(a1);
}

void sub_1001CE410(id *a1, uint64_t a2, id obj)
{
  id v4;
  uint64_t v5;
  NSString *v6;
  NSObject *v7;
  os_log_type_t v8;
  id v9;
  unsigned __int8 v10;
  id v11;
  id v12;
  NSDictionary *v13;
  id v14;
  id v15;
  id v16;
  id v17;
  id v18;
  void **v19;
  int v20;
  int v21;
  void (*v22)(_QWORD *, void *);
  void *v23;
  id v24;
  int v25;
  uint8_t v26[15];
  os_log_type_t v27;
  os_log_t v28;
  char v29;
  id v30;
  char v31;
  id v32;
  os_log_type_t v33;
  os_log_t oslog;
  id v35[2];
  id location;
  uint64_t v37;
  id *v38;
  id v39;
  _UNKNOWN **v40;
  uint8_t buf[24];

  v38 = a1;
  v37 = a2;
  location = 0;
  objc_storeStrong(&location, obj);
  v35[1] = a1;
  v35[0] = objc_loadWeakRetained(a1 + 5);
  v4 = objc_msgSend(v35[0], "miscState");
  objc_msgSend(v4, "setActivationPlanRequest:", 0);

  if (v37 != 2)
  {
    oslog = (os_log_t)(id)_BYLoggingFacility(v5);
    v33 = OS_LOG_TYPE_ERROR;
    if (os_log_type_enabled(oslog, OS_LOG_TYPE_ERROR))
    {
      v31 = 0;
      v29 = 0;
      if ((_BYIsInternalInstall() & 1) != 0)
      {
        v6 = (NSString *)location;
      }
      else if (location)
      {
        v32 = objc_msgSend(location, "domain");
        v31 = 1;
        v6 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", CFSTR("<Error domain: %@, code %ld>"), v32, objc_msgSend(location, "code"));
        v30 = v6;
        v29 = 1;
      }
      else
      {
        v6 = 0;
      }
      sub_100039500((uint64_t)buf, (uint64_t)v6);
      _os_log_error_impl((void *)&_mh_execute_header, oslog, v33, "Failed to add cellular plan: %{public}@", buf, 0xCu);
      if ((v29 & 1) != 0)

      if ((v31 & 1) != 0)
    }
    objc_storeStrong((id *)&oslog, 0);
    if (a1[4])
      (*((void (**)(void))a1[4] + 2))();
LABEL_24:
    v25 = 0;
    goto LABEL_25;
  }
  v28 = (os_log_t)(id)_BYLoggingFacility(v5);
  v27 = OS_LOG_TYPE_DEFAULT;
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    v7 = v28;
    v8 = v27;
    sub_100038C3C(v26);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Successfully added cellular plan", v26, 2u);
  }
  objc_storeStrong((id *)&v28, 0);
  v9 = objc_msgSend(v35[0], "miscState");
  v10 = objc_msgSend(v9, "skipActivationForActivationPlanRequest");

  if ((v10 & 1) == 0)
  {
    v11 = sub_1001CE87C();
    v12 = sub_1001CE968();
    v39 = v12;
    v40 = &off_100290FB8;
    v13 = +[NSDictionary dictionaryWithObjects:forKeys:count:](NSDictionary, "dictionaryWithObjects:forKeys:count:", &v40, &v39, 1);
    v14 = objc_msgSend(v11, "flowWithOptions:", v13);
    objc_msgSend(v35[0], "setSetupFlow:", v14);

    v15 = objc_msgSend(v35[0], "setupFlow");
    LOBYTE(v14) = v15 == 0;

    if ((v14 & 1) != 0)
    {
      (*((void (**)(void))a1[4] + 2))();
      v25 = 1;
      goto LABEL_25;
    }
    v16 = v35[0];
    v17 = objc_msgSend(v35[0], "setupFlow");
    objc_msgSend(v17, "setDelegate:", v16);

    v18 = objc_msgSend(v35[0], "setupFlow");
    v19 = _NSConcreteStackBlock;
    v20 = -1073741824;
    v21 = 0;
    v22 = sub_1001CEA60;
    v23 = &unk_100282058;
    v24 = a1[4];
    objc_msgSend(v18, "firstViewController:", &v19);

    objc_storeStrong(&v24, 0);
    goto LABEL_24;
  }
  if (a1[4])
    (*((void (**)(void))a1[4] + 2))();
  v25 = 1;
LABEL_25:
  objc_storeStrong(v35, 0);
  if (!v25)
    v25 = 0;
  objc_storeStrong(&location, 0);
}

id sub_1001CE87C()
{
  id v0;
  NSAssertionHandler v2;
  int v3;
  int v4;
  void (*v5)(NSAssertionHandler *);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 1342177280;
  v12 = 32;
  v8 = qword_1002EED00;
  v13 = qword_1002EED00;
  if (!qword_1002EED00)
  {
    v2.super.isa = (Class)_NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001CEF9C;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001CEF9C(&v2);
  }
  v0 = (id)v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

id sub_1001CE968()
{
  NSAssertionHandler *v0;
  NSString *v1;
  id *v3;

  v3 = (id *)sub_1001CF32C();
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "NSString *getTSUserInfoFlowTypeKey(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddySIMActivationController.m"), 27, CFSTR("%s"), dlerror());

    __break(1u);
  }
  return *v3;
}

void sub_1001CEA60(_QWORD *a1, void *a2)
{
  id location[2];

  location[1] = a1;
  location[0] = 0;
  objc_storeStrong(location, a2);
  if (a1[4])
    (*(void (**)(_QWORD, BOOL))(a1[4] + 16))(a1[4], location[0] != 0);
  objc_storeStrong(location, 0);
}

void sub_1001CEF9C(NSAssertionHandler *a1)
{
  NSString *v2;

  sub_1001CF0DC();
  *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24) = objc_getClass("TSSIMSetupFlow");
  if (!*(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24))
  {
    a1 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v2 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "Class getTSSIMSetupFlowClass(void)_block_invoke");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](a1, "handleFailureInFunction:file:lineNumber:description:", v2, CFSTR("BuddySIMActivationController.m"), 26, CFSTR("Unable to find class %s"), "TSSIMSetupFlow");

    __break(1u);
  }
  qword_1002EED00 = *(_QWORD *)(*((_QWORD *)a1[4].super.isa + 1) + 24);
}

uint64_t sub_1001CF0DC()
{
  NSAssertionHandler *v0;
  NSString *v1;
  uint64_t v3;
  void *v4;

  v4 = 0;
  v3 = sub_1001CF20C((uint64_t)&v4);
  if (!v3)
  {
    v0 = +[NSAssertionHandler currentHandler](NSAssertionHandler, "currentHandler");
    v1 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", "void *SIMSetupSupportLibrary(void)");
    -[NSAssertionHandler handleFailureInFunction:file:lineNumber:description:](v0, "handleFailureInFunction:file:lineNumber:description:", v1, CFSTR("BuddySIMActivationController.m"), 25, CFSTR("%s"), v4);

    __break(1u);
  }
  if (v4)
    free(v4);
  return v3;
}

uint64_t sub_1001CF20C(uint64_t a1)
{
  void **v2;
  int v3;
  int v4;
  uint64_t (*v5)(uint64_t);
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v10 = a1;
  v8 = qword_1002EED08;
  v9 = qword_1002EED08;
  if (!qword_1002EED08)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001CF29C;
    v6 = &unk_100280C90;
    v7 = v10;
    sub_1001CF29C((uint64_t)&v2);
  }
  return qword_1002EED08;
}

uint64_t sub_1001CF29C(uint64_t a1)
{
  uint64_t result;
  _QWORD v2[3];

  v2[0] = "/System/Library/PrivateFrameworks/SIMSetupSupport.framework/SIMSetupSupport";
  v2[1] = 0;
  v2[2] = 0;
  result = _sl_dlopen(v2, *(_QWORD *)(a1 + 32));
  qword_1002EED08 = result;
  return result;
}

uint64_t sub_1001CF32C()
{
  uint64_t v0;
  void **v2;
  int v3;
  int v4;
  void *(*v5)(uint64_t);
  void *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  int v12;
  uint64_t v13;

  v9 = 0;
  v10 = &v9;
  v11 = 0x20000000;
  v12 = 32;
  v8 = qword_1002EED10;
  v13 = qword_1002EED10;
  if (!qword_1002EED10)
  {
    v2 = _NSConcreteStackBlock;
    v3 = -1073741824;
    v4 = 0;
    v5 = sub_1001CF410;
    v6 = &unk_100280C58;
    v7 = &v9;
    sub_1001CF410((uint64_t)&v2);
  }
  v0 = v10[3];
  _Block_object_dispose(&v9, 8);
  return v0;
}

void *sub_1001CF410(uint64_t a1)
{
  void *v2;
  void *result;

  v2 = (void *)sub_1001CF0DC();
  result = dlsym(v2, "TSUserInfoFlowTypeKey");
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  qword_1002EED10 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

void operator delete(void *__p)
{
  while (1)
    ;
}

void *__cdecl operator new(size_t __sz)
{
  while (1)
    ;
}

id objc_msgSend_CGColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "CGColor");
}

id objc_msgSend_DMCDictionaryFromFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "DMCDictionaryFromFile:");
}

id objc_msgSend_DMCWriteToBinaryFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "DMCWriteToBinaryFile:");
}

id objc_msgSend_HTTPBody(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "HTTPBody");
}

id objc_msgSend_HTTPMethod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "HTTPMethod");
}

id objc_msgSend_JSONObjectWithData_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "JSONObjectWithData:options:error:");
}

id objc_msgSend_MIMEType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "MIMEType");
}

id objc_msgSend_SUManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "SUManager");
}

id objc_msgSend_URL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URL");
}

id objc_msgSend_URLConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLConfiguration");
}

id objc_msgSend_URLContexts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLContexts");
}

id objc_msgSend_URLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForKey:");
}

id objc_msgSend_URLForKey_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForKey:account:");
}

id objc_msgSend_URLForResource_withExtension_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForResource:withExtension:");
}

id objc_msgSend_URLForResource_withExtension_subdirectory_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLForResource:withExtension:subdirectory:");
}

id objc_msgSend_URLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "URLWithString:");
}

id objc_msgSend_UTF8String(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UTF8String");
}

id objc_msgSend_UUIDString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "UUIDString");
}

id objc_msgSend__aa_setRawPassword_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_aa_setRawPassword:");
}

id objc_msgSend__ableToBackupBeforeRestore_softwareUpdateRequired_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ableToBackupBeforeRestore:softwareUpdateRequired:");
}

id objc_msgSend__ableToMigrateWithPreflightInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ableToMigrateWithPreflightInformation:");
}

id objc_msgSend__accessoryViewForFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accessoryViewForFeature:");
}

id objc_msgSend__accountInfos(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accountInfos");
}

id objc_msgSend__accountToUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accountToUpdate");
}

id objc_msgSend__accountTypeSelected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_accountTypeSelected:");
}

id objc_msgSend__activate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activate");
}

id objc_msgSend__activateIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activateIfNecessary");
}

id objc_msgSend__activateWithPasscode_fromObjectModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activateWithPasscode:fromObjectModel:");
}

id objc_msgSend__activationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activationController");
}

id objc_msgSend__activationMethodForSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activationMethodForSection:");
}

id objc_msgSend__activationStateChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activationStateChanged");
}

id objc_msgSend__activityIndicatorViewStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_activityIndicatorViewStyle");
}

id objc_msgSend__addAnalyticsEventWithSuccess_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addAnalyticsEventWithSuccess:");
}

id objc_msgSend__addButtons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addButtons");
}

id objc_msgSend__addCachedLocalSecretToCDPContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addCachedLocalSecretToCDPContext:");
}

id objc_msgSend__addCommonHeaders_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addCommonHeaders:");
}

id objc_msgSend__addEventForClass_activeDuration_backgroundDuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addEventForClass:activeDuration:backgroundDuration:");
}

id objc_msgSend__addEventForCurrentViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addEventForCurrentViewController");
}

id objc_msgSend__addFeatureCardsForFeatures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addFeatureCardsForFeatures:");
}

id objc_msgSend__addHandlersForTermsButtonsToRemoteUIController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addHandlersForTermsButtonsToRemoteUIController:");
}

id objc_msgSend__addHeadersToRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addHeadersToRequest:");
}

id objc_msgSend__addItems_toFlow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addItems:toFlow:");
}

id objc_msgSend__addLearnMoreButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addLearnMoreButton");
}

id objc_msgSend__addPairForiPad(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addPairForiPad");
}

id objc_msgSend__addPairForiPhone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addPairForiPhone:");
}

id objc_msgSend__addSBAlertItemsSupressionAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_addSBAlertItemsSupressionAssertion");
}

id objc_msgSend__additionRowForSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_additionRowForSection:");
}

id objc_msgSend__alertControllerForCellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_alertControllerForCellular:");
}

id objc_msgSend__allButtonsSetEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allButtonsSetEnabled:");
}

id objc_msgSend__allowSkip(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allowSkip");
}

id objc_msgSend__allowedDeviceClasses(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allowedDeviceClasses");
}

id objc_msgSend__allowedToPair(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_allowedToPair");
}

id objc_msgSend__amsAccountStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_amsAccountStore");
}

id objc_msgSend__amsStoreAccountForUsername_altDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_amsStoreAccountForUsername:altDSID:");
}

id objc_msgSend__animateCursiveForTimePassed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateCursiveForTimePassed");
}

id objc_msgSend__animateUsingSpringWithTension_friction_interactive_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animateUsingSpringWithTension:friction:interactive:animations:completion:");
}

id objc_msgSend__animatedPasscodeViewTransitionToState_animation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animatedPasscodeViewTransitionToState:animation:");
}

id objc_msgSend__animationTickForPresentationValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_animationTickForPresentationValue:");
}

id objc_msgSend__appendErrorInformationForInternal_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appendErrorInformationForInternal:error:");
}

id objc_msgSend__appleIDControllerCompletedShouldProceed_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_appleIDControllerCompletedShouldProceed:error:");
}

id objc_msgSend__applicationIconImageForBundleIdentifier_format_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applicationIconImageForBundleIdentifier:format:scale:");
}

id objc_msgSend__applyArchivedAuthorizationDecisions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyArchivedAuthorizationDecisions:");
}

id objc_msgSend__applyDataSourceSetting_forFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_applyDataSourceSetting:forFeature:");
}

id objc_msgSend__attemptDismiss(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attemptDismiss");
}

id objc_msgSend__attemptPreheat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attemptPreheat:");
}

id objc_msgSend__attemptRestore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_attemptRestore");
}

id objc_msgSend__authCompletedShouldProceed_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authCompletedShouldProceed:error:");
}

id objc_msgSend__authWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authWithContext:completion:");
}

id objc_msgSend__authenticateAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authenticateAccount:");
}

id objc_msgSend__authenticateNextAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authenticateNextAccount");
}

id objc_msgSend__authenticateThenSignInNextAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authenticateThenSignInNextAccount");
}

id objc_msgSend__authenticateWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authenticateWithContext:completion:");
}

id objc_msgSend__authenticateWithSignInController_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authenticateWithSignInController:completion:");
}

id objc_msgSend__authenticateWithUsername_companionDevice_anisetteDataProvider_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authenticateWithUsername:companionDevice:anisetteDataProvider:completion:");
}

id objc_msgSend__authenticationContextForSecurityUpgrade(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_authenticationContextForSecurityUpgrade");
}

id objc_msgSend__autoInstallAlertMessageForTimeRemaining_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_autoInstallAlertMessageForTimeRemaining:");
}

id objc_msgSend__backgroundInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backgroundInset");
}

id objc_msgSend__backupListErrorSectionCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_backupListErrorSectionCount");
}

id objc_msgSend__beginEventForNavigationDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginEventForNavigationDuration");
}

id objc_msgSend__beginInstall(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginInstall");
}

id objc_msgSend__beginPostUpgradeAppleIDLoginWithUsername_password_continuationKey_signInController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginPostUpgradeAppleIDLoginWithUsername:password:continuationKey:signInController:");
}

id objc_msgSend__beginPostUpgradeAppleIDLoginWithUsername_password_signInController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginPostUpgradeAppleIDLoginWithUsername:password:signInController:");
}

id objc_msgSend__beginSignIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_beginSignIn");
}

id objc_msgSend__bodyFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_bodyFont");
}

id objc_msgSend__boldFontForFont_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_boldFontForFont:");
}

id objc_msgSend__buttonTrayInlined(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_buttonTrayInlined");
}

id objc_msgSend__cacheAuthenticationResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cacheAuthenticationResults:");
}

id objc_msgSend__cachedAuthenticationResults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cachedAuthenticationResults");
}

id objc_msgSend__callPresentationCompletionWithNothing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_callPresentationCompletionWithNothing");
}

id objc_msgSend__canShortCircuitGreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canShortCircuitGreen");
}

id objc_msgSend__canSkipAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_canSkipAccount:");
}

id objc_msgSend__cancelFlow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelFlow");
}

id objc_msgSend__cancelTapped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cancelTapped:");
}

id objc_msgSend__checkActivationFailIfNotActivated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkActivationFailIfNotActivated:");
}

id objc_msgSend__checkActivationFailIfNotActivated_isActivated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkActivationFailIfNotActivated:isActivated:");
}

id objc_msgSend__checkBasebandStatusBeforeActivation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_checkBasebandStatusBeforeActivation");
}

id objc_msgSend__chevronImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_chevronImage");
}

id objc_msgSend__chevronWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_chevronWidth");
}

id objc_msgSend__choiceConfirmed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_choiceConfirmed:");
}

id objc_msgSend__cleanup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanup");
}

id objc_msgSend__cleanupRemoteUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cleanupRemoteUI");
}

id objc_msgSend__clearDisplayTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearDisplayTimer");
}

id objc_msgSend__clearImage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearImage");
}

id objc_msgSend__clearReturnToServiceTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearReturnToServiceTimer");
}

id objc_msgSend__clearTicketAcceptedTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearTicketAcceptedTimer");
}

id objc_msgSend__clearWaitingForBasebandTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearWaitingForBasebandTimer");
}

id objc_msgSend__clearWifiTimeoutTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_clearWifiTimeoutTimer");
}

id objc_msgSend__cloudConfigManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_cloudConfigManager");
}

id objc_msgSend__commitAnalytics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_commitAnalytics");
}

id objc_msgSend__commitPasscodeEntryTypeChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_commitPasscodeEntryTypeChange");
}

id objc_msgSend__compareProductVersion_toProductVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_compareProductVersion:toProductVersion:");
}

id objc_msgSend__completeCloudConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_completeCloudConfig");
}

id objc_msgSend__confirmThenFlowItemDoneWithResetActivationMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_confirmThenFlowItemDoneWithResetActivationMethod:");
}

id objc_msgSend__connectToService(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_connectToService");
}

id objc_msgSend__containsCJKScriptsOnly(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_containsCJKScriptsOnly");
}

id objc_msgSend__contentDisplayModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contentDisplayModel");
}

id objc_msgSend__contentViewHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contentViewHeight");
}

id objc_msgSend__contextForPrimaryAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contextForPrimaryAccount");
}

id objc_msgSend__contextForPrimaryAccountSilentAuth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contextForPrimaryAccountSilentAuth");
}

id objc_msgSend__contextFromAuthenticationResults_requiresAppleMAID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_contextFromAuthenticationResults:requiresAppleMAID:");
}

id objc_msgSend__continuousCornerRadius(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_continuousCornerRadius");
}

id objc_msgSend__controllerDone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_controllerDone");
}

id objc_msgSend__controllerDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_controllerDone:");
}

id objc_msgSend__countryCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_countryCode");
}

id objc_msgSend__countrySupportsFastDeviceAnalyticsOptIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_countrySupportsFastDeviceAnalyticsOptIn");
}

id objc_msgSend__createAccountWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createAccountWithCompletion:");
}

id objc_msgSend__createAnimationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createAnimationController");
}

id objc_msgSend__createAuthenticationContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createAuthenticationContext");
}

id objc_msgSend__createConditionalFlowItemForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createConditionalFlowItemForClass:");
}

id objc_msgSend__createContainerSize_aspectRatio_hostViewLayoutMargins_posedDevicesPadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createContainerSize:aspectRatio:hostViewLayoutMargins:posedDevicesPadding:");
}

id objc_msgSend__createDictationSelectorAllDataForExpress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createDictationSelectorAllDataForExpress:");
}

id objc_msgSend__createDictationSelectorDefaultsForExpress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createDictationSelectorDefaultsForExpress:");
}

id objc_msgSend__createDictationSelectorIncludeSuggested_shouldIncludeUserSelectedKeyboards_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createDictationSelectorIncludeSuggested:shouldIncludeUserSelectedKeyboards:");
}

id objc_msgSend__createDisplayLink(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createDisplayLink");
}

id objc_msgSend__createFeatureCardForApplePay_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createFeatureCardForApplePay:");
}

id objc_msgSend__createFeatureCardForConnections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createFeatureCardForConnections:");
}

id objc_msgSend__createFeatureCardForDataTransferMethod_deviceName_lastBackupDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createFeatureCardForDataTransferMethod:deviceName:lastBackupDate:");
}

id objc_msgSend__createFeatureCardForSettings_withDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createFeatureCardForSettings:withDataSource:");
}

id objc_msgSend__createFlowItemForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createFlowItemForClass:");
}

id objc_msgSend__createKeyboardSelectorAllData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createKeyboardSelectorAllData");
}

id objc_msgSend__createKeyboardSelectorDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createKeyboardSelectorDefaults");
}

id objc_msgSend__createKeyboardSelectorSelectedData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createKeyboardSelectorSelectedData");
}

id objc_msgSend__createLanguageSelectorAllData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createLanguageSelectorAllData");
}

id objc_msgSend__createLanguageSelectorDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createLanguageSelectorDefaults");
}

id objc_msgSend__createMeCard(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createMeCard");
}

id objc_msgSend__createNavigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createNavigationController");
}

id objc_msgSend__createPaymentControllerWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createPaymentControllerWithContext:");
}

id objc_msgSend__createRestoreOptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createRestoreOptions");
}

id objc_msgSend__createServiceContextWithAuthenticationResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createServiceContextWithAuthenticationResults:");
}

id objc_msgSend__createServiceHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createServiceHeader");
}

id objc_msgSend__createTransformerWithInputAnimatableProperties_modelValueSetter_presentationValueSetter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createTransformerWithInputAnimatableProperties:modelValueSetter:presentationValueSetter:");
}

id objc_msgSend__createUnlockEscrowAndRetryProfileInstallationWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_createUnlockEscrowAndRetryProfileInstallationWithCompletion:");
}

id objc_msgSend__currentActivationRecordDictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentActivationRecordDictionary");
}

id objc_msgSend__currentHardwareSupportsMigration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentHardwareSupportsMigration");
}

id objc_msgSend__currentPasscodeInputView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_currentPasscodeInputView");
}

id objc_msgSend__decorateComposedItemView_displayModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_decorateComposedItemView:displayModel:");
}

id objc_msgSend__delayBetweenLoadSkipKeysRetriesInSeconds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_delayBetweenLoadSkipKeysRetriesInSeconds");
}

id objc_msgSend__descriptionFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionFont");
}

id objc_msgSend__descriptionForDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionForDataSource:");
}

id objc_msgSend__descriptionText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_descriptionText");
}

id objc_msgSend__detailForDataSourceDeviceClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_detailForDataSourceDeviceClass:");
}

id objc_msgSend__detailText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_detailText");
}

id objc_msgSend__detailTextAlignment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_detailTextAlignment");
}

id objc_msgSend__determineAccountToRepair_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineAccountToRepair:");
}

id objc_msgSend__determineDisplayMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineDisplayMode:");
}

id objc_msgSend__determineDisplayModeShouldPotentiallyIncludeApps(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineDisplayModeShouldPotentiallyIncludeApps");
}

id objc_msgSend__determineStyleWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_determineStyleWithCompletion:");
}

id objc_msgSend__deviceTypeForProductType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_deviceTypeForProductType:");
}

id objc_msgSend__dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dictionaryRepresentation");
}

id objc_msgSend__didAuthenticateWithAuthenticationResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didAuthenticateWithAuthenticationResults:");
}

id objc_msgSend__didFinishResponsibilityViewControllerPushSeesion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didFinishResponsibilityViewControllerPushSeesion");
}

id objc_msgSend__didRestoreIniTunes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didRestoreIniTunes");
}

id objc_msgSend__didSignInUsername_altDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_didSignInUsername:altDSID:");
}

id objc_msgSend__dismissGestureChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dismissGestureChanged:");
}

id objc_msgSend__dismissGestureEndedWithGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dismissGestureEndedWithGestureRecognizer:");
}

id objc_msgSend__dismissRemoteUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_dismissRemoteUI");
}

id objc_msgSend__doesRestartFlowCauseErase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_doesRestartFlowCauseErase");
}

id objc_msgSend__doesTapFreeSetUpAffectsClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_doesTapFreeSetUpAffectsClass:");
}

id objc_msgSend__eligibleForChlorine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eligibleForChlorine");
}

id objc_msgSend__enableAutomaticDownload_enableAutomaticUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enableAutomaticDownload:enableAutomaticUpdate:");
}

id objc_msgSend__enableShelfLifeMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enableShelfLifeMode");
}

id objc_msgSend__endEventForNavigationDurationFromFlowItem_toFlowItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endEventForNavigationDurationFromFlowItem:toFlowItem:");
}

id objc_msgSend__endFlowPrematurely(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endFlowPrematurely");
}

id objc_msgSend__endProximityIfApplicable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_endProximityIfApplicable");
}

id objc_msgSend__enrollTapped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enrollTapped:");
}

id objc_msgSend__ensureControllerExistsWithTarget_viewControllerInsertionIndexGenerator_buddyControllerInsertionIndexGenerator_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ensureControllerExistsWithTarget:viewControllerInsertionIndexGenerator:buddyControllerInsertionIndexGenerator:withCompletion:");
}

id objc_msgSend__ensureDeviceProximitySetupControllerWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ensureDeviceProximitySetupControllerWithCompletion:");
}

id objc_msgSend__ensureDeviceRestoreChoiceControllerWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ensureDeviceRestoreChoiceControllerWithCompletion:");
}

id objc_msgSend__ensurePresenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_ensurePresenter");
}

id objc_msgSend__enterState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_enterState:");
}

id objc_msgSend__eraseDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_eraseDevice");
}

id objc_msgSend__exitBuddyForDemoSetUp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_exitBuddyForDemoSetUp");
}

id objc_msgSend__failedToStartRestoreForSnapshotID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_failedToStartRestoreForSnapshotID:error:");
}

id objc_msgSend__familyMembersForAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_familyMembersForAccount:completion:");
}

id objc_msgSend__faultForNilPropertyWithDescription_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_faultForNilPropertyWithDescription:");
}

id objc_msgSend__fetchAccountsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchAccountsWithCompletion:");
}

id objc_msgSend__fetchCloudConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchCloudConfig");
}

id objc_msgSend__fetchMediaLinkedAccountDSIDWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchMediaLinkedAccountDSIDWithCompletion:");
}

id objc_msgSend__fetchRequiresTermsAcceptanceForAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchRequiresTermsAcceptanceForAccount:completion:");
}

id objc_msgSend__fetchSiriVoiceProfileAvailability(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchSiriVoiceProfileAvailability");
}

id objc_msgSend__fetchUserInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_fetchUserInformation:");
}

id objc_msgSend__finishedWithPasscode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_finishedWithPasscode:");
}

id objc_msgSend__firstBaselineOffsetFromTop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firstBaselineOffsetFromTop");
}

id objc_msgSend__firstEntryInstructions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firstEntryInstructions");
}

id objc_msgSend__firstLineBaselineOffsetFromBoundsTop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_firstLineBaselineOffsetFromBoundsTop");
}

id objc_msgSend__flatImageWithColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flatImageWithColor:");
}

id objc_msgSend__flowForFlowItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flowForFlowItem:");
}

id objc_msgSend__flowItemDone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flowItemDone");
}

id objc_msgSend__flowItemDone_flow_nextItemClass_nextItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flowItemDone:flow:nextItemClass:nextItem:");
}

id objc_msgSend__flowItemDoneWithResetActivationMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flowItemDoneWithResetActivationMethod:");
}

id objc_msgSend__flowItemFollowingClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flowItemFollowingClass:");
}

id objc_msgSend__flowMapByClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_flowMapByClass");
}

id objc_msgSend__footerIcon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_footerIcon");
}

id objc_msgSend__footnoteFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_footnoteFont");
}

id objc_msgSend__forceInteractiveAuthFromPreTigrisUpgrade(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_forceInteractiveAuthFromPreTigrisUpgrade");
}

id objc_msgSend__getEncodedMachineInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getEncodedMachineInfo");
}

id objc_msgSend__getHeight_forWidth_shouldLayoutViews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getHeight:forWidth:shouldLayoutViews:");
}

id objc_msgSend__getSRPInitNonceRequestOptionsCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_getSRPInitNonceRequestOptionsCompletion:");
}

id objc_msgSend__handleActivationData_responseHeaders_baseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleActivationData:responseHeaders:baseURL:");
}

id objc_msgSend__handleEscrowResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleEscrowResponse:");
}

id objc_msgSend__handleFailureWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleFailureWithError:");
}

id objc_msgSend__handlePlanAddition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handlePlanAddition:");
}

id objc_msgSend__handleScanResults_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_handleScanResults:error:");
}

id objc_msgSend__hasBiometricEnrollment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasBiometricEnrollment");
}

id objc_msgSend__hasLocaleAndLanguage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasLocaleAndLanguage");
}

id objc_msgSend__hasWiFiControllerInNavigationStack(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasWiFiControllerInNavigationStack");
}

id objc_msgSend__hasiCloudSiriTrainingDataForLanguage_withMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hasiCloudSiriTrainingDataForLanguage:withMetadata:");
}

id objc_msgSend__headerToContentPadding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_headerToContentPadding");
}

id objc_msgSend__helloBackgroundForProductType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_helloBackgroundForProductType:");
}

id objc_msgSend__helloScreenViewForProductType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_helloScreenViewForProductType:");
}

id objc_msgSend__helloScreenViewWithBackgroundImage_cursiveImage_labelBottomOffset_labelHorizontalInset_deviceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_helloScreenViewWithBackgroundImage:cursiveImage:labelBottomOffset:labelHorizontalInset:deviceType:");
}

id objc_msgSend__hideBackButtonIfNecessaryOnFlowItem_withViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_hideBackButtonIfNecessaryOnFlowItem:withViewController:");
}

id objc_msgSend__homeScreenImageForProductType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_homeScreenImageForProductType:");
}

id objc_msgSend__homeScreenViewForProductType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_homeScreenViewForProductType:");
}

id objc_msgSend__homeScreenViewWithImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_homeScreenViewWithImage:");
}

id objc_msgSend__humanReadableOSVersionWithProductVersion_buildVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_humanReadableOSVersionWithProductVersion:buildVersion:");
}

id objc_msgSend__idealPosedDeviceSizeForAspectRatio_layoutMargins_posedDevicesPadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_idealPosedDeviceSizeForAspectRatio:layoutMargins:posedDevicesPadding:");
}

id objc_msgSend__identifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_identifier");
}

id objc_msgSend__imageLeadingMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_imageLeadingMargin");
}

id objc_msgSend__imageThatSuppressesAccessibilityHairlineThickening(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_imageThatSuppressesAccessibilityHairlineThickening");
}

id objc_msgSend__imageTrailingMargin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_imageTrailingMargin");
}

id objc_msgSend__imageWidth(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_imageWidth");
}

id objc_msgSend__initialFlowItemClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initialFlowItemClass");
}

id objc_msgSend__initializeGreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeGreen");
}

id objc_msgSend__initializeViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_initializeViews");
}

id objc_msgSend__injectDependencies_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_injectDependencies:");
}

id objc_msgSend__injectDependencies_withEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_injectDependencies:withEnvironment:");
}

id objc_msgSend__insertWiFiControllerAsFirstPane(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_insertWiFiControllerAsFirstPane");
}

id objc_msgSend__installFailedWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_installFailedWithError:");
}

id objc_msgSend__isActiveBuddyStoreAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isActiveBuddyStoreAccount:");
}

id objc_msgSend__isActiveBuddyStoreAccountWithUsername_orAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isActiveBuddyStoreAccountWithUsername:orAltDSID:");
}

id objc_msgSend__isBackInBuddyAfterRestoreFromBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isBackInBuddyAfterRestoreFromBackup:");
}

id objc_msgSend__isBackInBuddyForActivationOnly(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isBackInBuddyForActivationOnly");
}

id objc_msgSend__isBackupFromProximityDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isBackupFromProximityDevice:");
}

id objc_msgSend__isControllerSkippedForFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isControllerSkippedForFeature:");
}

id objc_msgSend__isDEP(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isDEP");
}

id objc_msgSend__isEmojiSoleDataItemPostDeletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isEmojiSoleDataItemPostDeletion:");
}

id objc_msgSend__isEscrowMissingError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isEscrowMissingError:");
}

id objc_msgSend__isFlowItemAllowed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isFlowItemAllowed:");
}

id objc_msgSend__isPrimaryAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isPrimaryAccount:");
}

id objc_msgSend__isPrimaryAccountWithUsername_orAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isPrimaryAccountWithUsername:orAltDSID:");
}

id objc_msgSend__isRestore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isRestore");
}

id objc_msgSend__isRestrictedForFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isRestrictedForFeature:");
}

id objc_msgSend__isSettingsFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isSettingsFeature:");
}

id objc_msgSend__isWaitingForReconnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_isWaitingForReconnection");
}

id objc_msgSend__labelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_labelColor");
}

id objc_msgSend__labelFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_labelFont");
}

id objc_msgSend__landscapeDefaultSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_landscapeDefaultSize");
}

id objc_msgSend__languageChangeAlertDone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_languageChangeAlertDone");
}

id objc_msgSend__largeAXMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_largeAXMode");
}

id objc_msgSend__largerThanStandardAX(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_largerThanStandardAX");
}

id objc_msgSend__lastNonFlowFlowItemRelativeToFlowItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_lastNonFlowFlowItemRelativeToFlowItem:");
}

id objc_msgSend__layoutTableView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_layoutTableView");
}

id objc_msgSend__leaveRemoteManagementAndErase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_leaveRemoteManagementAndErase");
}

id objc_msgSend__loadClassicState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadClassicState:");
}

id objc_msgSend__loadModernState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadModernState:");
}

id objc_msgSend__loadSavedStatePostLanguageReboot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadSavedStatePostLanguageReboot");
}

id objc_msgSend__loadSecurityUpgradeUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadSecurityUpgradeUI");
}

id objc_msgSend__loadSkipKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadSkipKeys:");
}

id objc_msgSend__loadSkipKeysWithCurrentTry_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_loadSkipKeysWithCurrentTry:completion:");
}

id objc_msgSend__localeChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localeChanged");
}

id objc_msgSend__localizedDescriptionForFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localizedDescriptionForFeature:");
}

id objc_msgSend__localizedExtraStoresSignInTextForStoreContentMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localizedExtraStoresSignInTextForStoreContentMap:");
}

id objc_msgSend__localizedExtraStoresSignInTextKeyForStoreContentMap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localizedExtraStoresSignInTextKeyForStoreContentMap:");
}

id objc_msgSend__localizedHelloCursiveAssetForDeviceType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localizedHelloCursiveAssetForDeviceType:");
}

id objc_msgSend__localizedNameForFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_localizedNameForFeature:");
}

id objc_msgSend__machineInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_machineInfo");
}

id objc_msgSend__mainViewToAccessoryViewPadding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mainViewToAccessoryViewPadding");
}

id objc_msgSend__makeCurrentVersionRow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeCurrentVersionRow");
}

id objc_msgSend__makeDetailLabelWithViewModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeDetailLabelWithViewModel:");
}

id objc_msgSend__makeLearnMoreButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeLearnMoreButton");
}

id objc_msgSend__makeRequiredVersionRowWithScanOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeRequiredVersionRowWithScanOptions:");
}

id objc_msgSend__makeRowViewWithViewModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeRowViewWithViewModel:");
}

id objc_msgSend__makeRowViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeRowViews");
}

id objc_msgSend__makeSpacer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeSpacer");
}

id objc_msgSend__makeStoreAccountActiveForAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeStoreAccountActiveForAccount:completion:");
}

id objc_msgSend__makeTitleLabelWithViewModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_makeTitleLabelWithViewModel:");
}

id objc_msgSend__mandatoryUpdateInformationFromActivation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_mandatoryUpdateInformationFromActivation");
}

id objc_msgSend__menuButtonPressed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_menuButtonPressed");
}

id objc_msgSend__micaAssetName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_micaAssetName");
}

id objc_msgSend__micaAssetNameForRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_micaAssetNameForRegion:");
}

id objc_msgSend__migrateFromiOSSelected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_migrateFromiOSSelected");
}

id objc_msgSend__nameDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_nameDevice");
}

id objc_msgSend__networkPathChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_networkPathChanged");
}

id objc_msgSend__newActivationRequestWithOptions_sessionData_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_newActivationRequestWithOptions:sessionData:error:");
}

id objc_msgSend__noBackupsFoundSectionCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_noBackupsFoundSectionCount");
}

id objc_msgSend__onboardingPasscodeAnimationForBFF_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_onboardingPasscodeAnimationForBFF:");
}

id objc_msgSend__passcodeInputVerticalPaddingForOrientation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_passcodeInputVerticalPaddingForOrientation:");
}

id objc_msgSend__passcodeInputViewForState_updateDetailText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_passcodeInputViewForState:updateDetailText:");
}

id objc_msgSend__performExtendedInitializationForFlowItem_willBegin_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_performExtendedInitializationForFlowItem:willBegin:withCompletion:");
}

id objc_msgSend__persistAnalyticsForLanguageReboot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistAnalyticsForLanguageReboot");
}

id objc_msgSend__persistAnalyticsForSoftwareUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_persistAnalyticsForSoftwareUpdate");
}

id objc_msgSend__pitLog_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pitLog:withObject:");
}

id objc_msgSend__popBackToAuthAttemptLandingPage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_popBackToAuthAttemptLandingPage");
}

id objc_msgSend__popToBuddyControllerWithClass_withOffset_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_popToBuddyControllerWithClass:withOffset:animated:");
}

id objc_msgSend__populateDataSourcesForDataProvider_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populateDataSourcesForDataProvider:completion:");
}

id objc_msgSend__populatePowerLogAnalytics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populatePowerLogAnalytics");
}

id objc_msgSend__populateRestoreChoices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populateRestoreChoices");
}

id objc_msgSend__populateSetupAnalytics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_populateSetupAnalytics");
}

id objc_msgSend__portraitDefaultHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_portraitDefaultHeight");
}

id objc_msgSend__postLanguageReboot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_postLanguageReboot");
}

id objc_msgSend__preCommitAnalytics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_preCommitAnalytics");
}

id objc_msgSend__preStashAnalytics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_preStashAnalytics");
}

id objc_msgSend__preferredHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_preferredHeight");
}

id objc_msgSend__preflightDispositionValidationWithControllerClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_preflightDispositionValidationWithControllerClass:");
}

id objc_msgSend__prepareAnalyticsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareAnalyticsWithCompletion:");
}

id objc_msgSend__prepareContentView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareContentView");
}

id objc_msgSend__prepareForCloudRestoreReboot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareForCloudRestoreReboot");
}

id objc_msgSend__prepareForDeviceMigrationAfterSoftwareUpdate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareForDeviceMigrationAfterSoftwareUpdate:");
}

id objc_msgSend__prepareForMigrationReboot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareForMigrationReboot");
}

id objc_msgSend__prepareForSoftwareUpdateToBuild_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareForSoftwareUpdateToBuild:completion:");
}

id objc_msgSend__prepareTransitionForPasscodeInput_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_prepareTransitionForPasscodeInput:");
}

id objc_msgSend__presentAdditionDataSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentAdditionDataSource");
}

id objc_msgSend__presentAlert_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentAlert:");
}

id objc_msgSend__presentEraseAlertWithTitle_message_eraseHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentEraseAlertWithTitle:message:eraseHandler:");
}

id objc_msgSend__presentNetworkWarning_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentNetworkWarning:");
}

id objc_msgSend__presentNetworkWarningForRestorable_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentNetworkWarningForRestorable:completion:");
}

id objc_msgSend__presentReEnrollFailureAlert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentReEnrollFailureAlert");
}

id objc_msgSend__presentTryAgainAlert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentTryAgainAlert");
}

id objc_msgSend__presentViewControllerForBuddyController_animated_willPresentViewController_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentViewControllerForBuddyController:animated:willPresentViewController:completion:");
}

id objc_msgSend__presentableAdditionalDataSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_presentableAdditionalDataSource");
}

id objc_msgSend__primaryAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_primaryAccount");
}

id objc_msgSend__primaryAccountInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_primaryAccountInfo");
}

id objc_msgSend__privacyBundlesForDisplayMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_privacyBundlesForDisplayMode:");
}

id objc_msgSend__privacyIdentifiersForFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_privacyIdentifiersForFeature:");
}

id objc_msgSend__privacyIdentifiersForFeatures_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_privacyIdentifiersForFeatures:");
}

id objc_msgSend__pushFlowItem_inFlow_withExtendedInitialization_animated_willPushFlowItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pushFlowItem:inFlow:withExtendedInitialization:animated:willPushFlowItem:");
}

id objc_msgSend__pushNextViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_pushNextViewController:");
}

id objc_msgSend__reallySkip(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reallySkip");
}

id objc_msgSend__rebootDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_rebootDevice");
}

id objc_msgSend__recordAnalyticsEvent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordAnalyticsEvent");
}

id objc_msgSend__recordAnalyticsEventForDataProvider_presented_customized_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordAnalyticsEventForDataProvider:presented:customized:");
}

id objc_msgSend__recordAnalyticsEventForEnrollment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_recordAnalyticsEventForEnrollment:");
}

id objc_msgSend__refreshLanguage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_refreshLanguage");
}

id objc_msgSend__registerForActivationStateNotification(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerForActivationStateNotification");
}

id objc_msgSend__registerPhoneNumberPermissionEnabled_buddyPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_registerPhoneNumberPermissionEnabled:buddyPreferences:");
}

id objc_msgSend__releaseOTAAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_releaseOTAAssertion");
}

id objc_msgSend__reloadSectionHeaderFooters_withRowAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reloadSectionHeaderFooters:withRowAnimation:");
}

id objc_msgSend__remoteManagementText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_remoteManagementText");
}

id objc_msgSend__removeAccountsToSignIn_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeAccountsToSignIn:");
}

id objc_msgSend__removeBackToViewControllerMatchingBlock_withOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeBackToViewControllerMatchingBlock:withOffset:");
}

id objc_msgSend__removeDisplayLink(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeDisplayLink");
}

id objc_msgSend__removePowerLog(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removePowerLog");
}

id objc_msgSend__removeSBAlertItemsSupressionAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeSBAlertItemsSupressionAssertion");
}

id objc_msgSend__removeSiriPanesFromNavHierarchy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeSiriPanesFromNavHierarchy");
}

id objc_msgSend__removeViewControllersIncludingSelf_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_removeViewControllersIncludingSelf:");
}

id objc_msgSend__requestInteractiveMAIDAuthenticationWithManagedAppleID_personaID_ephemeral_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requestInteractiveMAIDAuthenticationWithManagedAppleID:personaID:ephemeral:completionHandler:");
}

id objc_msgSend__requiredTerms(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_requiredTerms");
}

id objc_msgSend__resetWifiControllerTimeoutSpinner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resetWifiControllerTimeoutSpinner");
}

id objc_msgSend__restoreFromBackupJustFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restoreFromBackupJustFinished");
}

id objc_msgSend__restorePasteboard(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_restorePasteboard");
}

id objc_msgSend__resumeNavigationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_resumeNavigationQueue");
}

id objc_msgSend__retrieveEnterpriseConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retrieveEnterpriseConfiguration");
}

id objc_msgSend__retrieveEnterpriseConfigurationForManagementVersion1(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retrieveEnterpriseConfigurationForManagementVersion1");
}

id objc_msgSend__retrieveEnterpriseConfigurationForManagementVersion2(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retrieveEnterpriseConfigurationForManagementVersion2");
}

id objc_msgSend__retrieveEnterpriseConfigurationFromWebURL_withAnchorCerts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retrieveEnterpriseConfigurationFromWebURL:withAnchorCerts:");
}

id objc_msgSend__retryDelaySecondsForAttemptCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retryDelaySecondsForAttemptCount:");
}

id objc_msgSend__retryFlowIfPossibleOrFailWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_retryFlowIfPossibleOrFailWithError:");
}

id objc_msgSend__reverifyUserConfigurationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_reverifyUserConfigurationState");
}

id objc_msgSend__sanitizeSystemTime(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sanitizeSystemTime");
}

id objc_msgSend__sanitizedUsername_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sanitizedUsername:");
}

id objc_msgSend__saveAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_saveAccount:completion:");
}

id objc_msgSend__savedItemForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_savedItemForClass:");
}

id objc_msgSend__scanUsingCache_allowBootstrap_attemptCount_attemptsAllowed_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scanUsingCache:allowBootstrap:attemptCount:attemptsAllowed:withCompletion:");
}

id objc_msgSend__scanUsingCache_allowBootstrap_attemptsAllowed_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_scanUsingCache:allowBootstrap:attemptsAllowed:withCompletion:");
}

id objc_msgSend__screenImagePrefixForProductType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_screenImagePrefixForProductType:");
}

id objc_msgSend__secondaryGetStartedContentView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_secondaryGetStartedContentView");
}

id objc_msgSend__secondaryLabelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_secondaryLabelColor");
}

id objc_msgSend__selectLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_selectLanguage:");
}

id objc_msgSend__sendSessionRequest_withOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sendSessionRequest:withOptions:");
}

id objc_msgSend__serverFriendlyDisplayNameForCurrentUserName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_serverFriendlyDisplayNameForCurrentUserName:");
}

id objc_msgSend__setAppearanceHandler_forSpinnerPage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAppearanceHandler:forSpinnerPage:");
}

id objc_msgSend__setAsGlobalUserInflection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAsGlobalUserInflection");
}

id objc_msgSend__setAttributedTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setAttributedTitle:");
}

id objc_msgSend__setBackgroundStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setBackgroundStyle:");
}

id objc_msgSend__setConnected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setConnected:");
}

id objc_msgSend__setContinueButtonEnabledOrDisabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setContinueButtonEnabledOrDisabled");
}

id objc_msgSend__setContinuousCornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setContinuousCornerRadius:");
}

id objc_msgSend__setCornerRadius_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setCornerRadius:");
}

id objc_msgSend__setDiagnosticLoggingEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDiagnosticLoggingEnabled:");
}

id objc_msgSend__setDownloadDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDownloadDelegate:");
}

id objc_msgSend__setDragInteractionPolicy_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDragInteractionPolicy:");
}

id objc_msgSend__setDrawsSeparatorAtTopOfSections_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setDrawsSeparatorAtTopOfSections:");
}

id objc_msgSend__setHandlerForPasscode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHandlerForPasscode");
}

id objc_msgSend__setHeaderTitle_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setHeaderTitle:animated:");
}

id objc_msgSend__setIdentityToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setIdentityToken:");
}

id objc_msgSend__setIndicatorInsetAdjustmentBehavior_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setIndicatorInsetAdjustmentBehavior:");
}

id objc_msgSend__setLogInOptionsForBuddyAppleIDAuthMode_signInController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setLogInOptionsForBuddyAppleIDAuthMode:signInController:");
}

id objc_msgSend__setManualScrollEdgeAppearanceEnabled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setManualScrollEdgeAppearanceEnabled:");
}

id objc_msgSend__setManualScrollEdgeAppearanceProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setManualScrollEdgeAppearanceProgress:");
}

id objc_msgSend__setObjectID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setObjectID:");
}

id objc_msgSend__setPassword_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPassword:");
}

id objc_msgSend__setPersistentPresentedKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPersistentPresentedKey:");
}

id objc_msgSend__setPosedViewToBoundedHeight_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPosedViewToBoundedHeight:animated:");
}

id objc_msgSend__setPosedViewToBoundedHeight_animated_requireLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPosedViewToBoundedHeight:animated:requireLayout:");
}

id objc_msgSend__setPresentationValue_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setPresentationValue:forKey:");
}

id objc_msgSend__setProxyingForApp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setProxyingForApp:");
}

id objc_msgSend__setSetupIntent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setSetupIntent");
}

id objc_msgSend__setShortLivedToken_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setShortLivedToken:");
}

id objc_msgSend__setShouldHaveFullLengthBottomSeparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setShouldHaveFullLengthBottomSeparator:");
}

id objc_msgSend__setShouldHaveFullLengthTopSeparator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setShouldHaveFullLengthTopSeparator:");
}

id objc_msgSend__setShowsBackgroundShadow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setShowsBackgroundShadow:");
}

id objc_msgSend__setUseCustomBackButtonAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setUseCustomBackButtonAction:");
}

id objc_msgSend__setupAccountForSecurityUpgrade(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupAccountForSecurityUpgrade");
}

id objc_msgSend__setupAnalytics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupAnalytics");
}

id objc_msgSend__setupAndStartReturnToServiceIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupAndStartReturnToServiceIfNeeded");
}

id objc_msgSend__setupButtons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupButtons");
}

id objc_msgSend__setupCompleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupCompleted:");
}

id objc_msgSend__setupFirstEntry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupFirstEntry");
}

id objc_msgSend__setupForCloudConfigurationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupForCloudConfigurationState");
}

id objc_msgSend__setupForState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupForState");
}

id objc_msgSend__setupInitialFlowFromInitialFlowItem_debutFlowItemClass_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupInitialFlowFromInitialFlowItem:debutFlowItemClass:completion:");
}

id objc_msgSend__setupSnapshotRemoved(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupSnapshotRemoved");
}

id objc_msgSend__setupStateChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_setupStateChanged");
}

id objc_msgSend__shieldColorForNewTopFlowItemPush(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shieldColorForNewTopFlowItemPush");
}

id objc_msgSend__shouldAddFeatureDeviceAndAppAnalyticsForDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldAddFeatureDeviceAndAppAnalyticsForDataSource:");
}

id objc_msgSend__shouldAllowEnablingSiriWithVoiceTriggerEnabledSetting_hasNeededTrainingData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldAllowEnablingSiriWithVoiceTriggerEnabledSetting:hasNeededTrainingData:");
}

id objc_msgSend__shouldReportCombinedAnalyticsChoice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldReportCombinedAnalyticsChoice");
}

id objc_msgSend__shouldReverseLayoutDirection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldReverseLayoutDirection");
}

id objc_msgSend__shouldSetPasscode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldSetPasscode");
}

id objc_msgSend__shouldShowCursiveAnimation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldShowCursiveAnimation");
}

id objc_msgSend__shouldShowGetStartedButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldShowGetStartedButton");
}

id objc_msgSend__shouldShowIntelligenceAnimationWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldShowIntelligenceAnimationWithCompletion:");
}

id objc_msgSend__shouldTapFreeSetUpSkipControllerClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_shouldTapFreeSetUpSkipControllerClass:");
}

id objc_msgSend__showAllFooterPresent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showAllFooterPresent");
}

id objc_msgSend__showAutoInstallAlert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showAutoInstallAlert");
}

id objc_msgSend__showConfigurationFailedForError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showConfigurationFailedForError:");
}

id objc_msgSend__showEraseDeviceAlert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showEraseDeviceAlert");
}

id objc_msgSend__showError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showError:");
}

id objc_msgSend__showErrorController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showErrorController:");
}

id objc_msgSend__showFailureAlertWithTitle_andMessage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showFailureAlertWithTitle:andMessage:");
}

id objc_msgSend__showMiniAlertWithRestart_withLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showMiniAlertWithRestart:withLanguage:");
}

id objc_msgSend__showModalWiFiSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showModalWiFiSettings");
}

id objc_msgSend__showNavBarSpinner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showNavBarSpinner");
}

id objc_msgSend__showOutOfSpaceError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showOutOfSpaceError");
}

id objc_msgSend__showPasscodeOptionsSheet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showPasscodeOptionsSheet");
}

id objc_msgSend__showProximityiCloudSignInController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showProximityiCloudSignInController:");
}

id objc_msgSend__showSkipPasscodeAlert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showSkipPasscodeAlert");
}

id objc_msgSend__showSpinnerPage_appearanceHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showSpinnerPage:appearanceHandler:");
}

id objc_msgSend__showSpinnerPageWithIdentifier_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showSpinnerPageWithIdentifier:handler:");
}

id objc_msgSend__showTwoAccountsiCloudSignInController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showTwoAccountsiCloudSignInController");
}

id objc_msgSend__showTwoAccountsiTunesSignInController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showTwoAccountsiTunesSignInController");
}

id objc_msgSend__showWeakWarningAlert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_showWeakWarningAlert");
}

id objc_msgSend__signInCompleted_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_signInCompleted:");
}

id objc_msgSend__signInFailedWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_signInFailedWithError:");
}

id objc_msgSend__signInSucceeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_signInSucceeded");
}

id objc_msgSend__signInToAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_signInToAccount");
}

id objc_msgSend__signInToAllServicesUsingContext_serviceOwnersManager_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_signInToAllServicesUsingContext:serviceOwnersManager:completion:");
}

id objc_msgSend__siriWantsToRun(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_siriWantsToRun");
}

id objc_msgSend__sizeConsistentRowHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sizeConsistentRowHeight");
}

id objc_msgSend__skipPressed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_skipPressed:");
}

id objc_msgSend__sortViewsForInterfaceDirection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sortViewsForInterfaceDirection:");
}

id objc_msgSend__sourceHasAppleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_sourceHasAppleID");
}

id objc_msgSend__stackHasOnlyCloudConfigurationItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stackHasOnlyCloudConfigurationItems");
}

id objc_msgSend__stageReboot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stageReboot");
}

id objc_msgSend__startActivation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startActivation");
}

id objc_msgSend__startActivationLockExpirationTimerForPage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startActivationLockExpirationTimerForPage:");
}

id objc_msgSend__startDeviceMigration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startDeviceMigration");
}

id objc_msgSend__startDisablingInteractionForExtendedInitialization(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startDisablingInteractionForExtendedInitialization");
}

id objc_msgSend__startFlow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startFlow");
}

id objc_msgSend__startMigration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startMigration");
}

id objc_msgSend__startMigrationIfPossible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startMigrationIfPossible");
}

id objc_msgSend__startReturnToServiceTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startReturnToServiceTimer");
}

id objc_msgSend__startSilentEscrowRecordRepairIfNecessaryWithAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startSilentEscrowRecordRepairIfNecessaryWithAccount:completion:");
}

id objc_msgSend__startSpinningWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_startSpinningWithIdentifier:");
}

id objc_msgSend__stashAnalytics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stashAnalytics");
}

id objc_msgSend__stashPasteboard(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stashPasteboard");
}

id objc_msgSend__stateFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stateFont");
}

id objc_msgSend__stateForFeature_withDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stateForFeature:withDataSource:");
}

id objc_msgSend__stateStackViewAxis(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stateStackViewAxis");
}

id objc_msgSend__stopActivationLockExpirationTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopActivationLockExpirationTimer");
}

id objc_msgSend__stopDisablingInteractionForExtendedInitialization(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopDisablingInteractionForExtendedInitialization");
}

id objc_msgSend__stopPairingInterface(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopPairingInterface");
}

id objc_msgSend__stopSpinning(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopSpinning");
}

id objc_msgSend__stopSpinningForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stopSpinningForIdentifier:");
}

id objc_msgSend__storeProfileDataAndCompleteDisclosure_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_storeProfileDataAndCompleteDisclosure:");
}

id objc_msgSend__stringForFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForFeature:");
}

id objc_msgSend__stringForStartupCause_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringForStartupCause:");
}

id objc_msgSend__stringToKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_stringToKey:");
}

id objc_msgSend__subTitleText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_subTitleText");
}

id objc_msgSend__subtitleFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_subtitleFont");
}

id objc_msgSend__subtitleTextForMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_subtitleTextForMode:");
}

id objc_msgSend__suggestSoftwareUpdateWithOSVersion_buildVersion_navigationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_suggestSoftwareUpdateWithOSVersion:buildVersion:navigationController:");
}

id objc_msgSend__suggestSoftwareUpdateWithSoftwareUpdateRequiredError_navigationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_suggestSoftwareUpdateWithSoftwareUpdateRequiredError:navigationController:");
}

id objc_msgSend__suggestedBackupForUDID_deviceClass_backups_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_suggestedBackupForUDID:deviceClass:backups:");
}

id objc_msgSend__suggestedBackupToRestore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_suggestedBackupToRestore:");
}

id objc_msgSend__supportsAlwaysOnHeySiri(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_supportsAlwaysOnHeySiri");
}

id objc_msgSend__supportsCellularActivationForMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_supportsCellularActivationForMethod:");
}

id objc_msgSend__supportsDependentSetup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_supportsDependentSetup:");
}

id objc_msgSend__systemBackgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_systemBackgroundColor");
}

id objc_msgSend__systemImageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_systemImageNamed:");
}

id objc_msgSend__tappedChoice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tappedChoice:");
}

id objc_msgSend__targetDeviceTransferTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_targetDeviceTransferTask");
}

id objc_msgSend__termsVersionFromObjectModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_termsVersionFromObjectModel:");
}

id objc_msgSend__textChanged_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_textChanged:");
}

id objc_msgSend__titleFont(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_titleFont");
}

id objc_msgSend__titleForViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_titleForViewController:");
}

id objc_msgSend__titleText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_titleText");
}

id objc_msgSend__titleTextForAuthMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_titleTextForAuthMode:");
}

id objc_msgSend__titleWithLocalDeviceClass_language_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_titleWithLocalDeviceClass:language:");
}

id objc_msgSend__topPaddingForSectionHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_topPaddingForSectionHeader");
}

id objc_msgSend__traceAnalyticsForGuideUserToBackup_foundBackup_polledForBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_traceAnalyticsForGuideUserToBackup:foundBackup:polledForBackup:");
}

id objc_msgSend__tryActivateWithOptions_requestMutator_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tryActivateWithOptions:requestMutator:");
}

id objc_msgSend__tryToInstallStoredProfileShouldCreateEscrowIfNeeded_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_tryToInstallStoredProfileShouldCreateEscrowIfNeeded:completion:");
}

id objc_msgSend__unmarkFlowItemAsFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_unmarkFlowItemAsFinished:");
}

id objc_msgSend__updateActions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateActions");
}

id objc_msgSend__updateActivationMethod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateActivationMethod");
}

id objc_msgSend__updateAgreedTerms_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAgreedTerms:");
}

id objc_msgSend__updateAnalyticsWithChoice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateAnalyticsWithChoice:");
}

id objc_msgSend__updateChromelessBar_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateChromelessBar:");
}

id objc_msgSend__updateClassList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateClassList");
}

id objc_msgSend__updateClassListWithPasscodeShownInitially_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateClassListWithPasscodeShownInitially:");
}

id objc_msgSend__updateContentLabelLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateContentLabelLayout");
}

id objc_msgSend__updateDimmingViewForProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDimmingViewForProgress:");
}

id objc_msgSend__updateDots(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateDots");
}

id objc_msgSend__updateFillColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateFillColor");
}

id objc_msgSend__updateForLocation_interactive_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateForLocation:interactive:");
}

id objc_msgSend__updateHeaderForConnectedToComputer_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateHeaderForConnectedToComputer:animated:");
}

id objc_msgSend__updateHumanReadableName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateHumanReadableName");
}

id objc_msgSend__updateImageViewHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateImageViewHeight");
}

id objc_msgSend__updateImageViewPadding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateImageViewPadding");
}

id objc_msgSend__updateIsOptional(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateIsOptional");
}

id objc_msgSend__updateLanguageList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateLanguageList");
}

id objc_msgSend__updateLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateLayout");
}

id objc_msgSend__updateNavigationBackButtonTitleForViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateNavigationBackButtonTitleForViewController:");
}

id objc_msgSend__updateNextButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateNextButton");
}

id objc_msgSend__updateNextButtonForPasscode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateNextButtonForPasscode:");
}

id objc_msgSend__updateSelectedChoiceCheckmark(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSelectedChoiceCheckmark");
}

id objc_msgSend__updateSelectedChoiceCheckmarkWithtableView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSelectedChoiceCheckmarkWithtableView:");
}

id objc_msgSend__updateSkipKeysWithCachedDetails_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateSkipKeysWithCachedDetails:");
}

id objc_msgSend__updateTable_toMatchArray_withVisibleArray_maxVisible_fromOldSection_toNewSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateTable:toMatchArray:withVisibleArray:maxVisible:fromOldSection:toNewSection:");
}

id objc_msgSend__updateView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateView");
}

id objc_msgSend__updateViewContainerForAccessibilityOptions_contents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updateViewContainerForAccessibilityOptions:contents:");
}

id objc_msgSend__updatedMessageSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_updatedMessageSession:");
}

id objc_msgSend__upgradeAccountWithAuthenticationResults_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_upgradeAccountWithAuthenticationResults:completion:");
}

id objc_msgSend__useCompactMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_useCompactMode");
}

id objc_msgSend__useSideButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_useSideButton");
}

id objc_msgSend__useTableLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_useTableLayout");
}

id objc_msgSend__userAgreedToTCs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_userAgreedToTCs:");
}

id objc_msgSend__userFriendlyDisplayNameForCurrentUserName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_userFriendlyDisplayNameForCurrentUserName:");
}

id objc_msgSend__userRespondedToCombinedTCsWithAgreement_withSLAVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_userRespondedToCombinedTCsWithAgreement:withSLAVersion:");
}

id objc_msgSend__userSelectedLocale_localePaneScrollOffset_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_userSelectedLocale:localePaneScrollOffset:");
}

id objc_msgSend__validateBackupIsCompatible_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validateBackupIsCompatible:completion:");
}

id objc_msgSend__validatePasscode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_validatePasscode:");
}

id objc_msgSend__valueForKey_outputData_outputSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_valueForKey:outputData:outputSize:");
}

id objc_msgSend__viewControllerForBuddyController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_viewControllerForBuddyController:");
}

id objc_msgSend__waitForKeychainAndPreflight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_waitForKeychainAndPreflight");
}

id objc_msgSend__waitForPreflight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_waitForPreflight");
}

id objc_msgSend__welcomeGradientShouldAdjustBuddyColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_welcomeGradientShouldAdjustBuddyColor");
}

id objc_msgSend__welcomeKitDidFinishWithSuccess_settings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_welcomeKitDidFinishWithSuccess:settings:");
}

id objc_msgSend__willEndLifecycleForDataTransfer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_willEndLifecycleForDataTransfer");
}

id objc_msgSend__willStartResponsibilityViewControllerPushSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_willStartResponsibilityViewControllerPushSession");
}

id objc_msgSend__writeAcknowledgment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writeAcknowledgment");
}

id objc_msgSend__writeData_writeDataSize_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writeData:writeDataSize:forKey:");
}

id objc_msgSend__writeGreenInformedDefaultPlistIfNecessary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writeGreenInformedDefaultPlistIfNecessary");
}

id objc_msgSend__writeGreenInformedDefaultPlistIfNecessaryForLocaleCountryCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writeGreenInformedDefaultPlistIfNecessaryForLocaleCountryCode:");
}

id objc_msgSend__writeOutCurrentPrivacyVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writeOutCurrentPrivacyVersion");
}

id objc_msgSend__writeOutDictationDefaults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writeOutDictationDefaults");
}

id objc_msgSend__writeValuesForKeysToIdMS_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "_writeValuesForKeysToIdMS:");
}

id objc_msgSend_aa_accountsEnabledForDataclass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_accountsEnabledForDataclass:");
}

id objc_msgSend_aa_altDSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_altDSID");
}

id objc_msgSend_aa_authToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_authToken");
}

id objc_msgSend_aa_firstName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_firstName");
}

id objc_msgSend_aa_isAccountClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_isAccountClass:");
}

id objc_msgSend_aa_isManagedAppleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_isManagedAppleID");
}

id objc_msgSend_aa_lastAgreedTermsInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_lastAgreedTermsInfo");
}

id objc_msgSend_aa_lastName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_lastName");
}

id objc_msgSend_aa_password(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_password");
}

id objc_msgSend_aa_personID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_personID");
}

id objc_msgSend_aa_primaryAppleAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_primaryAppleAccount");
}

id objc_msgSend_aa_primaryAppleAccountWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_primaryAppleAccountWithCompletion:");
}

id objc_msgSend_aa_primaryEmail(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_primaryEmail");
}

id objc_msgSend_aa_repairState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_repairState");
}

id objc_msgSend_aa_setPrimaryAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_setPrimaryAccount:");
}

id objc_msgSend_aa_setUsesCloudDocs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_setUsesCloudDocs:");
}

id objc_msgSend_aa_updatePropertiesForAppleAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aa_updatePropertiesForAppleAccount:completion:");
}

id objc_msgSend_ableToMigrateWithUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ableToMigrateWithUpdate");
}

id objc_msgSend_ableToRestoreWithUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ableToRestoreWithUpdate");
}

id objc_msgSend_aboutConfigurationContainerController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aboutConfigurationContainerController");
}

id objc_msgSend_aboutController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aboutController");
}

id objc_msgSend_aboutRemoteManagementContentView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aboutRemoteManagementContentView");
}

id objc_msgSend_absoluteString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteString");
}

id objc_msgSend_absoluteURLWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "absoluteURLWithString:");
}

id objc_msgSend_acceptWeakPasscode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acceptWeakPasscode:");
}

id objc_msgSend_accessibilitySettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilitySettings");
}

id objc_msgSend_accessibilityTraits(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityTraits");
}

id objc_msgSend_accessibilityViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessibilityViewController");
}

id objc_msgSend_accessoryButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryButton");
}

id objc_msgSend_accessoryView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryView");
}

id objc_msgSend_accessoryViewAndPaddingHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accessoryViewAndPaddingHeight");
}

id objc_msgSend_account(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "account");
}

id objc_msgSend_accountEligibleForUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountEligibleForUpdate");
}

id objc_msgSend_accountForSecurityUpgrade(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountForSecurityUpgrade");
}

id objc_msgSend_accountForService_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountForService:");
}

id objc_msgSend_accountName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountName");
}

id objc_msgSend_accountOperationsQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountOperationsQueue");
}

id objc_msgSend_accountProperties(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountProperties");
}

id objc_msgSend_accountStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountStore");
}

id objc_msgSend_accountToRepair(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountToRepair");
}

id objc_msgSend_accountToUpgrade(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountToUpgrade");
}

id objc_msgSend_accountToUpgradeIsPrimary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountToUpgradeIsPrimary");
}

id objc_msgSend_accountTools(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountTools");
}

id objc_msgSend_accountType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountType");
}

id objc_msgSend_accountTypeSelectedBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountTypeSelectedBlock");
}

id objc_msgSend_accountTypeWithAccountTypeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountTypeWithAccountTypeIdentifier:");
}

id objc_msgSend_accountWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountWithIdentifier:");
}

id objc_msgSend_accounts(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accounts");
}

id objc_msgSend_accountsQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "accountsQueue");
}

id objc_msgSend_acknowledge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acknowledge");
}

id objc_msgSend_acknowledgementNeededForPrivacyIdentifier_account_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acknowledgementNeededForPrivacyIdentifier:account:");
}

id objc_msgSend_acquireSecureAppAssertionWithType_errorHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireSecureAppAssertionWithType:errorHandler:");
}

id objc_msgSend_acquireWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "acquireWithError:");
}

id objc_msgSend_actionButtonData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionButtonData");
}

id objc_msgSend_actionString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionString");
}

id objc_msgSend_actionTypeForStarting_endingDataSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionTypeForStarting:endingDataSet:");
}

id objc_msgSend_actionWithReason_options_targetURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithReason:options:targetURL:");
}

id objc_msgSend_actionWithTitle_style_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actionWithTitle:style:handler:");
}

id objc_msgSend_actions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "actions");
}

id objc_msgSend_activate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activate");
}

id objc_msgSend_activateConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateConstraints:");
}

id objc_msgSend_activateWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithCompletion:");
}

id objc_msgSend_activateWithData_headers_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithData:headers:completion:");
}

id objc_msgSend_activateWithTemplateMessageSession_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activateWithTemplateMessageSession:completion:");
}

id objc_msgSend_activationConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationConfiguration");
}

id objc_msgSend_activationConfigurationChanged_isActivated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationConfigurationChanged:isActivated:");
}

id objc_msgSend_activationEngine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationEngine");
}

id objc_msgSend_activationFinishedWithData_responseHeaders_error_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationFinishedWithData:responseHeaders:error:completionHandler:");
}

id objc_msgSend_activationLockInfoFromDeviceWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationLockInfoFromDeviceWithCompletion:");
}

id objc_msgSend_activationMethodChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationMethodChanged");
}

id objc_msgSend_activationPlanRequest(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationPlanRequest");
}

id objc_msgSend_activationRecord(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationRecord");
}

id objc_msgSend_activationRecordIndicatesCloudConfigurationIsAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationRecordIndicatesCloudConfigurationIsAvailable");
}

id objc_msgSend_activationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationState");
}

id objc_msgSend_activationStateQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activationStateQueue");
}

id objc_msgSend_activatorUsingWiFi(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activatorUsingWiFi");
}

id objc_msgSend_activeAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeAccount");
}

id objc_msgSend_activeAppleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeAppleID");
}

id objc_msgSend_activeBuddyStoreAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeBuddyStoreAccount");
}

id objc_msgSend_activeDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeDuration");
}

id objc_msgSend_activeInputModes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeInputModes");
}

id objc_msgSend_activeInterfaceOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeInterfaceOrientation");
}

id objc_msgSend_activeKeyboard(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeKeyboard");
}

id objc_msgSend_activeStartTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeStartTimestamp");
}

id objc_msgSend_activeStoreAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeStoreAccount");
}

id objc_msgSend_activeTextField(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activeTextField");
}

id objc_msgSend_activityIndicator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityIndicator");
}

id objc_msgSend_activityLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "activityLabel");
}

id objc_msgSend_addAccessoryButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAccessoryButton:");
}

id objc_msgSend_addAccountHeadersToRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAccountHeadersToRequest:");
}

id objc_msgSend_addAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAction:");
}

id objc_msgSend_addAnimation_forKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAnimation:forKey:");
}

id objc_msgSend_addArrangedSubview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addArrangedSubview:");
}

id objc_msgSend_addAttribute_value_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttribute:value:range:");
}

id objc_msgSend_addAttributes_range_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addAttributes:range:");
}

id objc_msgSend_addBagKey_valueType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBagKey:valueType:");
}

id objc_msgSend_addBoldButton_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBoldButton:action:");
}

id objc_msgSend_addBulletedListItemWithTitle_description_image_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addBulletedListItemWithTitle:description:image:");
}

id objc_msgSend_addButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addButton:");
}

id objc_msgSend_addButtonWithTitle_style_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addButtonWithTitle:style:action:");
}

id objc_msgSend_addCardCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addCardCell:");
}

id objc_msgSend_addChildViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addChildViewController:");
}

id objc_msgSend_addConstraint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addConstraint:");
}

id objc_msgSend_addConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addConstraints:");
}

id objc_msgSend_addContentSubView_heightConstraintForLayout_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addContentSubView:heightConstraintForLayout:");
}

id objc_msgSend_addDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegate:");
}

id objc_msgSend_addDelegateObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addDelegateObserver:");
}

id objc_msgSend_addEntriesFromDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEntriesFromDictionary:");
}

id objc_msgSend_addEraseEventWithAnalyticsManager_paneIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEraseEventWithAnalyticsManager:paneIdentifier:");
}

id objc_msgSend_addEvent_withPayload_persist_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEvent:withPayload:persist:");
}

id objc_msgSend_addEventUsingAnalyticsManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEventUsingAnalyticsManager:");
}

id objc_msgSend_addEventsUsingAnalyticsManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addEventsUsingAnalyticsManager:");
}

id objc_msgSend_addFinishBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFinishBlock:");
}

id objc_msgSend_addFooterLinkWithTitle_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addFooterLinkWithTitle:handler:");
}

id objc_msgSend_addGestureRecognizer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addGestureRecognizer:");
}

id objc_msgSend_addLinkButton_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLinkButton:action:");
}

id objc_msgSend_addLinkWithTitle_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addLinkWithTitle:handler:");
}

id objc_msgSend_addObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObject:");
}

id objc_msgSend_addObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObjectsFromArray:");
}

id objc_msgSend_addObserver_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:");
}

id objc_msgSend_addObserver_forKeyPath_options_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:forKeyPath:options:context:");
}

id objc_msgSend_addObserver_selector_name_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserver:selector:name:object:");
}

id objc_msgSend_addObserverForName_object_queue_usingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addObserverForName:object:queue:usingBlock:");
}

id objc_msgSend_addPairingStyleToggleButtonBelowView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPairingStyleToggleButtonBelowView:");
}

id objc_msgSend_addPlanWith_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPlanWith:completionHandler:");
}

id objc_msgSend_addPlayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPlayer");
}

id objc_msgSend_addPointer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPointer:");
}

id objc_msgSend_addPowerLogEvent_withPayload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addPowerLogEvent:withPayload:");
}

id objc_msgSend_addRestartEventWithAnalyticsManager_paneIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addRestartEventWithAnalyticsManager:paneIdentifier:");
}

id objc_msgSend_addService_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addService:description:");
}

id objc_msgSend_addSublayer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSublayer:");
}

id objc_msgSend_addSubview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addSubview:");
}

id objc_msgSend_addTarget_action_forControlEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTarget:action:forControlEvents:");
}

id objc_msgSend_addTarget_action_forEvents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addTarget:action:forEvents:");
}

id objc_msgSend_addToCollectionCellWithTableView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addToCollectionCellWithTableView:");
}

id objc_msgSend_addToRunLoop_forMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addToRunLoop:forMode:");
}

id objc_msgSend_addWirelessNetworks(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "addWirelessNetworks");
}

id objc_msgSend_additionLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "additionLabel");
}

id objc_msgSend_additionViewControllerCompleted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "additionViewControllerCompleted");
}

id objc_msgSend_agreeToRemoteUIDialog(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "agreeToRemoteUIDialog");
}

id objc_msgSend_agreeURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "agreeURL");
}

id objc_msgSend_airTrafficConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "airTrafficConnection");
}

id objc_msgSend_airplaneMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "airplaneMode");
}

id objc_msgSend_airplaneModeEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "airplaneModeEnabled");
}

id objc_msgSend_alert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alert");
}

id objc_msgSend_alertController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertController");
}

id objc_msgSend_alertControllerForNetworkConnectionWithProvider_estimatedRestoreSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertControllerForNetworkConnectionWithProvider:estimatedRestoreSize:");
}

id objc_msgSend_alertControllerForSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertControllerForSource:");
}

id objc_msgSend_alertControllerForTargetWithNeedsErase_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertControllerForTargetWithNeedsErase:completion:");
}

id objc_msgSend_alertControllerForUnsupportedNetworkWithCellularRestoreSupport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertControllerForUnsupportedNetworkWithCellularRestoreSupport:");
}

id objc_msgSend_alertControllerWithTitle_message_preferredStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertControllerWithTitle:message:preferredStyle:");
}

id objc_msgSend_alertControllerWithWindow_navigationController_proximitySetupController_analyticsManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertControllerWithWindow:navigationController:proximitySetupController:analyticsManager:");
}

id objc_msgSend_alertForBackupError_forBackup_okButtonAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertForBackupError:forBackup:okButtonAction:");
}

id objc_msgSend_alertForBackupError_okButtonAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alertForBackupError:okButtonAction:");
}

id objc_msgSend_allButtons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allButtons");
}

id objc_msgSend_allHTTPHeaderFields(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allHTTPHeaderFields");
}

id objc_msgSend_allHeaderFields(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allHeaderFields");
}

id objc_msgSend_allKeys(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allKeys");
}

id objc_msgSend_allObjects(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allObjects");
}

id objc_msgSend_allSiriLanguageCodesForSystemLanguageCode_isGoodFit_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allSiriLanguageCodesForSystemLanguageCode:isGoodFit:");
}

id objc_msgSend_allowAnyMAIDToSignIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowAnyMAIDToSignIn");
}

id objc_msgSend_allowBack(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowBack");
}

id objc_msgSend_allowCellularNetwork(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowCellularNetwork");
}

id objc_msgSend_allowDismissalForExit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowDismissalForExit");
}

id objc_msgSend_allowInteraction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowInteraction");
}

id objc_msgSend_allowManualRowHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowManualRowHeight");
}

id objc_msgSend_allowMoreOn5G(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowMoreOn5G");
}

id objc_msgSend_allowSIMUnlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowSIMUnlock");
}

id objc_msgSend_allowSkip(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowSkip");
}

id objc_msgSend_allowUserToInstallTonight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowUserToInstallTonight");
}

id objc_msgSend_allowUserToSkip(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowUserToSkip");
}

id objc_msgSend_allowedFlowItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowedFlowItems");
}

id objc_msgSend_allowedTerminationSources(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowedTerminationSources");
}

id objc_msgSend_allowsSkip(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "allowsSkip");
}

id objc_msgSend_alphaForBuddyBackgroundStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alphaForBuddyBackgroundStyle:");
}

id objc_msgSend_altDSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "altDSID");
}

id objc_msgSend_altDSIDForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "altDSIDForAccount:");
}

id objc_msgSend_alternateDSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alternateDSID");
}

id objc_msgSend_alternateUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alternateUpdate");
}

id objc_msgSend_alternateUpdateError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "alternateUpdateError");
}

id objc_msgSend_ams_DSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_DSID");
}

id objc_msgSend_ams_activeiTunesAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_activeiTunesAccount");
}

id objc_msgSend_ams_altDSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_altDSID");
}

id objc_msgSend_ams_iTunesAccountWithAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_iTunesAccountWithAltDSID:");
}

id objc_msgSend_ams_iTunesAccountWithUsername_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_iTunesAccountWithUsername:");
}

id objc_msgSend_ams_isBundleOwner(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_isBundleOwner");
}

id objc_msgSend_ams_sharedAccountStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ams_sharedAccountStore");
}

id objc_msgSend_analyticsEventAppearance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsEventAppearance");
}

id objc_msgSend_analyticsManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "analyticsManager");
}

id objc_msgSend_animateAlongsideTransition_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateAlongsideTransition:completion:");
}

id objc_msgSend_animateAlongsideTransitionInView_animation_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateAlongsideTransitionInView:animation:completion:");
}

id objc_msgSend_animateDetailText_animationType_heightDifference_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateDetailText:animationType:heightDifference:");
}

id objc_msgSend_animateWithDuration_animations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:animations:");
}

id objc_msgSend_animateWithDuration_animations_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animateWithDuration:animations:completion:");
}

id objc_msgSend_animationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationController");
}

id objc_msgSend_animationView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationView");
}

id objc_msgSend_animationWithKeyPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "animationWithKeyPath:");
}

id objc_msgSend_anyObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anyObject");
}

id objc_msgSend_anyRequestLoading(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "anyRequestLoading");
}

id objc_msgSend_appAnalyticsOptIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appAnalyticsOptIn");
}

id objc_msgSend_appStoreController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appStoreController");
}

id objc_msgSend_appearanceMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appearanceMode");
}

id objc_msgSend_appearanceModeProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appearanceModeProvider");
}

id objc_msgSend_appendAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendAttributedString:");
}

id objc_msgSend_appendData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendData:");
}

id objc_msgSend_appendFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendFormat:");
}

id objc_msgSend_appendString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appendString:");
}

id objc_msgSend_appleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleID");
}

id objc_msgSend_appleIDController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDController");
}

id objc_msgSend_appleIDController_didAuthenticateForCredentialRecovery_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDController:didAuthenticateForCredentialRecovery:");
}

id objc_msgSend_appleIDController_failedWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDController:failedWithError:");
}

id objc_msgSend_appleIDControllerFinished_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDControllerFinished:");
}

id objc_msgSend_appleIDControllerWantsChoiceController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDControllerWantsChoiceController:");
}

id objc_msgSend_appleIDHeadersForRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDHeadersForRequest:");
}

id objc_msgSend_appleIDMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDMap");
}

id objc_msgSend_appleIDs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "appleIDs");
}

id objc_msgSend_applicableDispositions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicableDispositions");
}

id objc_msgSend_applicationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applicationState");
}

id objc_msgSend_applyDataSourceSetting_forFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyDataSourceSetting:forFeature:");
}

id objc_msgSend_applyExpressSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyExpressSettings");
}

id objc_msgSend_applySettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applySettings");
}

id objc_msgSend_applyThemeToAllTableViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyThemeToAllTableViews");
}

id objc_msgSend_applyThemeToLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyThemeToLabel:");
}

id objc_msgSend_applyThemeToNavigationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyThemeToNavigationController:");
}

id objc_msgSend_applyThemeToTableCell_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyThemeToTableCell:");
}

id objc_msgSend_applyThemeToTitleLabel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyThemeToTitleLabel:");
}

id objc_msgSend_applyToObjectModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyToObjectModel:");
}

id objc_msgSend_applyingProximitySettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "applyingProximitySettings");
}

id objc_msgSend_archivedDataWithRootObject_requiringSecureCoding_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "archivedDataWithRootObject:requiringSecureCoding:error:");
}

id objc_msgSend_arrangedSubviews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrangedSubviews");
}

id objc_msgSend_array(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "array");
}

id objc_msgSend_arrayByAddingObjectsFromArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayByAddingObjectsFromArray:");
}

id objc_msgSend_arrayWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithCapacity:");
}

id objc_msgSend_arrayWithObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObject:");
}

id objc_msgSend_arrayWithObjects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "arrayWithObjects:count:");
}

id objc_msgSend_aspectRatio(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "aspectRatio");
}

id objc_msgSend_assertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assertion");
}

id objc_msgSend_assistantIsEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assistantIsEnabled");
}

id objc_msgSend_assumeNetworkReachabilityOverWiFi(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assumeNetworkReachabilityOverWiFi");
}

id objc_msgSend_assumeResponsibilityForRUIPage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "assumeResponsibilityForRUIPage");
}

id objc_msgSend_attemptValidationWithPIN_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attemptValidationWithPIN:");
}

id objc_msgSend_attemptedBackupItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attemptedBackupItem");
}

id objc_msgSend_attributeWithDomain_name_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributeWithDomain:name:");
}

id objc_msgSend_attributedSubTitleText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributedSubTitleText");
}

id objc_msgSend_attributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "attributes");
}

id objc_msgSend_authAttemptLandingViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authAttemptLandingViewController");
}

id objc_msgSend_authContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authContext");
}

id objc_msgSend_authKitAccountWithAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authKitAccountWithAltDSID:");
}

id objc_msgSend_authManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authManager");
}

id objc_msgSend_authModeHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authModeHandler");
}

id objc_msgSend_authResults(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authResults");
}

id objc_msgSend_authenticateForAccountCreationWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateForAccountCreationWithCompletion:");
}

id objc_msgSend_authenticateForCredentialRecoveryWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateForCredentialRecoveryWithCompletion:");
}

id objc_msgSend_authenticateThenSignInWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateThenSignInWithCompletion:");
}

id objc_msgSend_authenticateWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateWithContext:completion:");
}

id objc_msgSend_authenticateWithProximity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateWithProximity:");
}

id objc_msgSend_authenticateWithSignInController_username_password_altDSID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateWithSignInController:username:password:altDSID:completion:");
}

id objc_msgSend_authenticateWithSignInController_username_password_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateWithSignInController:username:password:completion:");
}

id objc_msgSend_authenticateWithUsername_companionDevice_anisetteDataProvider_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateWithUsername:companionDevice:anisetteDataProvider:completion:");
}

id objc_msgSend_authenticateWithUsername_password_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticateWithUsername:password:completion:");
}

id objc_msgSend_authenticationMethod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "authenticationMethod");
}

id objc_msgSend_autoDownloadEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoDownloadEnabled");
}

id objc_msgSend_autoInstallTimeRemaining(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoInstallTimeRemaining");
}

id objc_msgSend_autoUpdateEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "autoUpdateEnabled");
}

id objc_msgSend_automaticTimeZoneEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "automaticTimeZoneEnabled");
}

id objc_msgSend_automaticUpdateScheduled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "automaticUpdateScheduled");
}

id objc_msgSend_available(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "available");
}

id objc_msgSend_availableData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableData");
}

id objc_msgSend_availableUpdateVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "availableUpdateVersion");
}

id objc_msgSend_awaitUserConfigurationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "awaitUserConfigurationController");
}

id objc_msgSend_awaitUserConfigurationEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "awaitUserConfigurationEnabled");
}

id objc_msgSend_awaitUserConfigurationViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "awaitUserConfigurationViewController");
}

id objc_msgSend_backButtonTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backButtonTitle");
}

id objc_msgSend_backgroundColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundColor");
}

id objc_msgSend_backgroundDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundDuration");
}

id objc_msgSend_backgroundStartTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundStartTimestamp");
}

id objc_msgSend_backgroundViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundViewController");
}

id objc_msgSend_backgroundViewControllerPresented(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backgroundViewControllerPresented");
}

id objc_msgSend_backingLanguageComposite(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backingLanguageComposite");
}

id objc_msgSend_backingLocaleComposite(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backingLocaleComposite");
}

id objc_msgSend_backingStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backingStore");
}

id objc_msgSend_backingUpDeviceName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backingUpDeviceName");
}

id objc_msgSend_backingUpDeviceUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backingUpDeviceUUID");
}

id objc_msgSend_backingViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backingViewController");
}

id objc_msgSend_backlightState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backlightState");
}

id objc_msgSend_backup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backup");
}

id objc_msgSend_backupDataSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupDataSource");
}

id objc_msgSend_backupDeviceController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupDeviceController");
}

id objc_msgSend_backupDeviceController_backupCompletedWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupDeviceController:backupCompletedWithError:");
}

id objc_msgSend_backupFinished(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupFinished");
}

id objc_msgSend_backupForUUID_backups_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupForUUID:backups:");
}

id objc_msgSend_backupForUUID_withManager_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupForUUID:withManager:error:");
}

id objc_msgSend_backupItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupItem");
}

id objc_msgSend_backupManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupManager");
}

id objc_msgSend_backupMetadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupMetadata");
}

id objc_msgSend_backupMetadataFromTerminatedConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupMetadataFromTerminatedConnection");
}

id objc_msgSend_backupProgress_estimatedTimeRemaining_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupProgress:estimatedTimeRemaining:");
}

id objc_msgSend_backupStateUnknown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupStateUnknown");
}

id objc_msgSend_backupUDID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupUDID");
}

id objc_msgSend_backupUDIDToSeedEnrolledMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupUDIDToSeedEnrolledMap");
}

id objc_msgSend_backupUDIDToSeedEnrolledMapAccessQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupUDIDToSeedEnrolledMapAccessQueue");
}

id objc_msgSend_backupUUID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupUUID");
}

id objc_msgSend_backupsTableView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "backupsTableView");
}

id objc_msgSend_bag(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bag");
}

id objc_msgSend_bagForProfile_profileVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bagForProfile:profileVersion:");
}

id objc_msgSend_bagKeySet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bagKeySet");
}

id objc_msgSend_bagSubProfile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bagSubProfile");
}

id objc_msgSend_bagSubProfileVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bagSubProfileVersion");
}

id objc_msgSend_base64EncodedStringWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "base64EncodedStringWithOptions:");
}

id objc_msgSend_baseLanguageFromLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baseLanguageFromLanguage:");
}

id objc_msgSend_baseLanguageIdentifierFromIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baseLanguageIdentifierFromIdentifier:");
}

id objc_msgSend_baseSystemLanguages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baseSystemLanguages");
}

id objc_msgSend_baseViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "baseViewController");
}

id objc_msgSend_batteryState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "batteryState");
}

id objc_msgSend_becomeFirstResponder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "becomeFirstResponder");
}

id objc_msgSend_beginAdvertising(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginAdvertising");
}

id objc_msgSend_beginAdvertisingProximityAutomatedDeviceEnrollment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginAdvertisingProximityAutomatedDeviceEnrollment");
}

id objc_msgSend_beginAdvertisingProximitySetup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginAdvertisingProximitySetup");
}

id objc_msgSend_beginAppearanceTransition_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginAppearanceTransition:animated:");
}

id objc_msgSend_beginConsumingPressesForButtonKind_eventConsumer_priority_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginConsumingPressesForButtonKind:eventConsumer:priority:");
}

id objc_msgSend_beginDeviceToDeviceMigration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginDeviceToDeviceMigration");
}

id objc_msgSend_beginDownloadingUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginDownloadingUpdate");
}

id objc_msgSend_beginEnrollment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginEnrollment");
}

id objc_msgSend_beginIgnoringInteractionEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginIgnoringInteractionEvents");
}

id objc_msgSend_beginSIMSetupExternalAuthentication(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginSIMSetupExternalAuthentication");
}

id objc_msgSend_beginSetupWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginSetupWithCompletionHandler:");
}

id objc_msgSend_beginTapFreeSetUp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginTapFreeSetUp");
}

id objc_msgSend_beginUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "beginUpdates");
}

id objc_msgSend_betaEnrollmentStateManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "betaEnrollmentStateManager");
}

id objc_msgSend_blackColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "blackColor");
}

id objc_msgSend_boldButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boldButton");
}

id objc_msgSend_boldSystemFontOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "boldSystemFontOfSize:");
}

id objc_msgSend_BOOLForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLForKey:");
}

id objc_msgSend_BOOLRestrictionForFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLRestrictionForFeature:");
}

id objc_msgSend_BOOLValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "BOOLValue");
}

id objc_msgSend_bottomAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomAnchor");
}

id objc_msgSend_bottomLineColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomLineColor");
}

id objc_msgSend_bottomStackViewConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bottomStackViewConstraint");
}

id objc_msgSend_bounds(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bounds");
}

id objc_msgSend_brightnessClient(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "brightnessClient");
}

id objc_msgSend_bringSubviewToFront_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bringSubviewToFront:");
}

id objc_msgSend_buddyAppleIDSpinnerPageDidAppear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddyAppleIDSpinnerPageDidAppear:");
}

id objc_msgSend_buddyBackgroundViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddyBackgroundViewController");
}

id objc_msgSend_buddyControllers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddyControllers");
}

id objc_msgSend_buddyDefaultKeyboards(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddyDefaultKeyboards");
}

id objc_msgSend_buddyDefaultLanguages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddyDefaultLanguages");
}

id objc_msgSend_buddyLocaleIdentifierFromIdentifier_byAddingRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddyLocaleIdentifierFromIdentifier:byAddingRegion:");
}

id objc_msgSend_buddyLocaleTableView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddyLocaleTableView");
}

id objc_msgSend_buddyPreferences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddyPreferences");
}

id objc_msgSend_buddyPreferencesEphemeral(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddyPreferencesEphemeral");
}

id objc_msgSend_buddyPreferencesExcludedFromBackup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddyPreferencesExcludedFromBackup");
}

id objc_msgSend_buddyPreferencesInternal(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddyPreferencesInternal");
}

id objc_msgSend_buddySubregionLocalesForCellularInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddySubregionLocalesForCellularInformation:");
}

id objc_msgSend_buddySuggestedKeyboards(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddySuggestedKeyboards");
}

id objc_msgSend_buddySuggestedLanguages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddySuggestedLanguages");
}

id objc_msgSend_buddyTCSubController_didFinishWithAgree_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddyTCSubController:didFinishWithAgree:");
}

id objc_msgSend_buddy_animationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddy_animationController:");
}

id objc_msgSend_buddy_animationController_animatedStates_startAtFirstState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddy_animationController:animatedStates:startAtFirstState:");
}

id objc_msgSend_buddy_enumerateErrorTreeWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddy_enumerateErrorTreeWithHandler:");
}

id objc_msgSend_buddy_filterToOrderedSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddy_filterToOrderedSet:");
}

id objc_msgSend_buddy_heightForContainerWidth_ratio_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddy_heightForContainerWidth:ratio:");
}

id objc_msgSend_buddy_layerForPackageWithData_geometryFlipped_scale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddy_layerForPackageWithData:geometryFlipped:scale:");
}

id objc_msgSend_buddy_mapArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddy_mapArray:");
}

id objc_msgSend_buddy_mapCountedSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddy_mapCountedSet:");
}

id objc_msgSend_buddy_mapOrderedSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddy_mapOrderedSet:");
}

id objc_msgSend_buddy_mapSet_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddy_mapSet:");
}

id objc_msgSend_buddy_popFrom_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddy_popFrom:");
}

id objc_msgSend_buddy_presentAlertController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddy_presentAlertController:");
}

id objc_msgSend_buddy_scaleHeightTo_ratio_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddy_scaleHeightTo:ratio:");
}

id objc_msgSend_buddy_setSemanticContentAttributeRecursively_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddy_setSemanticContentAttributeRecursively:");
}

id objc_msgSend_buddy_userInterfaceStyleModeValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buddy_userInterfaceStyleModeValue");
}

id objc_msgSend_buildVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buildVersion");
}

id objc_msgSend_bundleForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleForClass:");
}

id objc_msgSend_bundleIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleIdentifier");
}

id objc_msgSend_bundleUrlForPackageName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleUrlForPackageName:");
}

id objc_msgSend_bundleWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithIdentifier:");
}

id objc_msgSend_bundleWithPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bundleWithPath:");
}

id objc_msgSend_buttonConsumer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonConsumer");
}

id objc_msgSend_buttonMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonMonitor");
}

id objc_msgSend_buttonTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonTitle");
}

id objc_msgSend_buttonTray(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonTray");
}

id objc_msgSend_buttonWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "buttonWithType:");
}

id objc_msgSend_bySeedProgramManager_valueForAssetAudienceKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bySeedProgramManager_valueForAssetAudienceKey");
}

id objc_msgSend_bySeedProgramManager_valueForProgramIDKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bySeedProgramManager_valueForProgramIDKey");
}

id objc_msgSend_bySeedProgramManager_valueForProgramKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bySeedProgramManager_valueForProgramKey");
}

id objc_msgSend_bytesTransferred(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "bytesTransferred");
}

id objc_msgSend_cStringUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cStringUsingEncoding:");
}

id objc_msgSend_cacheManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cacheManager");
}

id objc_msgSend_cachePasscode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachePasscode:");
}

id objc_msgSend_cachePasscode_retrievable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachePasscode:retrievable:");
}

id objc_msgSend_cachedLocalSecret(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedLocalSecret");
}

id objc_msgSend_cachedPasscode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedPasscode");
}

id objc_msgSend_cachedStartupCause(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedStartupCause");
}

id objc_msgSend_cachedTermsData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cachedTermsData");
}

id objc_msgSend_callStackSymbols(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "callStackSymbols");
}

id objc_msgSend_cameraButtonViewControllerDidFinish_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cameraButtonViewControllerDidFinish:");
}

id objc_msgSend_canRestoreBackupMadeOnVersion_toSystemVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canRestoreBackupMadeOnVersion:toSystemVersion:");
}

id objc_msgSend_canSelectUserInflection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canSelectUserInflection");
}

id objc_msgSend_canShowAppleIDScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canShowAppleIDScreen");
}

id objc_msgSend_canShowPasscodeScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canShowPasscodeScreen");
}

id objc_msgSend_canShowSiriScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canShowSiriScreen");
}

id objc_msgSend_cancel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancel");
}

id objc_msgSend_cancelAuthentication(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelAuthentication");
}

id objc_msgSend_cancelBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelBlock");
}

id objc_msgSend_cancelDataMigratorDeferredExit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelDataMigratorDeferredExit");
}

id objc_msgSend_cancelDownload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelDownload:");
}

id objc_msgSend_cancelHostedPresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelHostedPresentation");
}

id objc_msgSend_cancelLeftNavigationItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelLeftNavigationItem");
}

id objc_msgSend_cancelMigration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelMigration");
}

id objc_msgSend_cancelPreviousPerformRequestsWithTarget_selector_object_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelPreviousPerformRequestsWithTarget:selector:object:");
}

id objc_msgSend_cancelRestoreAndRemovePrimaryAppleAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelRestoreAndRemovePrimaryAppleAccount");
}

id objc_msgSend_cancelWithCause_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancelWithCause:");
}

id objc_msgSend_cancellationCause(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cancellationCause");
}

id objc_msgSend_candidateAliases(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "candidateAliases");
}

id objc_msgSend_canonicalLanguageIdentifierFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "canonicalLanguageIdentifierFromString:");
}

id objc_msgSend_capabilities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "capabilities");
}

id objc_msgSend_caseInsensitiveCompare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "caseInsensitiveCompare:");
}

id objc_msgSend_cdmaSelectionActivation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cdmaSelectionActivation");
}

id objc_msgSend_cdpContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cdpContext");
}

id objc_msgSend_cdpUIController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cdpUIController");
}

id objc_msgSend_cellConstructor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellConstructor");
}

id objc_msgSend_cellForRowAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellForRowAtIndexPath:");
}

id objc_msgSend_cells(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cells");
}

id objc_msgSend_cellularActivationEngineWithOverrideActivationURL_sessionURL_usingBootstrap_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellularActivationEngineWithOverrideActivationURL:sessionURL:usingBootstrap:");
}

id objc_msgSend_cellularActivationMethod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellularActivationMethod");
}

id objc_msgSend_cellularDataPossible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellularDataPossible");
}

id objc_msgSend_cellularNetworkInformation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cellularNetworkInformation");
}

id objc_msgSend_center(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "center");
}

id objc_msgSend_centerContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerContainer");
}

id objc_msgSend_centerPosedView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerPosedView");
}

id objc_msgSend_centerXAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerXAnchor");
}

id objc_msgSend_centerYAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "centerYAnchor");
}

id objc_msgSend_changePasscodeFrom_to_outError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "changePasscodeFrom:to:outError:");
}

id objc_msgSend_characterDirectionForLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "characterDirectionForLanguage:");
}

id objc_msgSend_checkAvailabilityWithTicketNumber_response_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkAvailabilityWithTicketNumber:response:");
}

id objc_msgSend_checkChoiceValid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkChoiceValid");
}

id objc_msgSend_checkForUpdatedBundlesWithAutoInstall_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkForUpdatedBundlesWithAutoInstall:completion:");
}

id objc_msgSend_checkForUpdatedCarrierBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkForUpdatedCarrierBundle");
}

id objc_msgSend_checkMiniBuddyBreadcrumbs(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "checkMiniBuddyBreadcrumbs");
}

id objc_msgSend_chevronImageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chevronImageView");
}

id objc_msgSend_childCutOffAge(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "childCutOffAge");
}

id objc_msgSend_childCutOffAgeLocalized(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "childCutOffAgeLocalized");
}

id objc_msgSend_childSetupPresenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "childSetupPresenter");
}

id objc_msgSend_childSetupPresenter_didFail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "childSetupPresenter:didFail:");
}

id objc_msgSend_childSetupStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "childSetupStore");
}

id objc_msgSend_choiceButtonsBottomInset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "choiceButtonsBottomInset");
}

id objc_msgSend_choiceCancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "choiceCancelled:");
}

id objc_msgSend_choiceConfirmed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "choiceConfirmed:");
}

id objc_msgSend_choiceController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "choiceController");
}

id objc_msgSend_choiceManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "choiceManager");
}

id objc_msgSend_choiceMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "choiceMap");
}

id objc_msgSend_choiceTable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "choiceTable");
}

id objc_msgSend_choices(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "choices");
}

id objc_msgSend_chooseableDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chooseableDelegate");
}

id objc_msgSend_chosenByUser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chosenByUser");
}

id objc_msgSend_chronicle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "chronicle");
}

id objc_msgSend_classList(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "classList");
}

id objc_msgSend_classes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "classes");
}

id objc_msgSend_clear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clear");
}

id objc_msgSend_clearActionForFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearActionForFeature:");
}

id objc_msgSend_clearAppActivitySettingWithSettingsManager_buddyPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAppActivitySettingWithSettingsManager:buddyPreferences:");
}

id objc_msgSend_clearAutoDownloadWithUpdateSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearAutoDownloadWithUpdateSetting:");
}

id objc_msgSend_clearBackupItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearBackupItem");
}

id objc_msgSend_clearColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearColor");
}

id objc_msgSend_clearDeviceAnalyticsSettingWithSettingsManager_buddyPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearDeviceAnalyticsSettingWithSettingsManager:buddyPreferences:");
}

id objc_msgSend_clearInput(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearInput");
}

id objc_msgSend_clearScreenTimeSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearScreenTimeSetting:");
}

id objc_msgSend_clearStoredLoginContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearStoredLoginContext");
}

id objc_msgSend_clearUserInterfaceStyleMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearUserInterfaceStyleMode:");
}

id objc_msgSend_clearWatchDataForMigrationWithSettingsManager_buddyPreferencesExcludedFromBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clearWatchDataForMigrationWithSettingsManager:buddyPreferencesExcludedFromBackup:");
}

id objc_msgSend_client(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "client");
}

id objc_msgSend_clientInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientInfo");
}

id objc_msgSend_clientInfoHeader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "clientInfoHeader");
}

id objc_msgSend_cloudConfigDidFinishFromViewController_wasApplied_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudConfigDidFinishFromViewController:wasApplied:");
}

id objc_msgSend_cloudConfigMayHaveChanged(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudConfigMayHaveChanged");
}

id objc_msgSend_cloudConfigSkipKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudConfigSkipKey");
}

id objc_msgSend_cloudConfigState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudConfigState");
}

id objc_msgSend_cloudConfigWantsToSkipControllerClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudConfigWantsToSkipControllerClass:");
}

id objc_msgSend_cloudConfigurationChangedDuringInstallation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudConfigurationChangedDuringInstallation");
}

id objc_msgSend_cloudConfigurationDetails(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudConfigurationDetails");
}

id objc_msgSend_cloudConfigurationUIDidCompleteWasApplied_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudConfigurationUIDidCompleteWasApplied:");
}

id objc_msgSend_cloudConfigurationUIDidCompleteWasApplied_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudConfigurationUIDidCompleteWasApplied:completionHandler:");
}

id objc_msgSend_cloudDataSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudDataSource");
}

id objc_msgSend_cloudRestoreChoice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cloudRestoreChoice");
}

id objc_msgSend_code(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "code");
}

id objc_msgSend_colorWithAlphaComponent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithAlphaComponent:");
}

id objc_msgSend_colorWithRed_green_blue_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithRed:green:blue:alpha:");
}

id objc_msgSend_colorWithWhite_alpha_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "colorWithWhite:alpha:");
}

id objc_msgSend_columnCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "columnCount");
}

id objc_msgSend_combinedController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "combinedController");
}

id objc_msgSend_combinedStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "combinedStore");
}

id objc_msgSend_combinedTermsProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "combinedTermsProvider");
}

id objc_msgSend_commit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commit");
}

id objc_msgSend_commitID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commitID");
}

id objc_msgSend_commitIfNeededWithRelaunchURL_transitionWithScreenshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commitIfNeededWithRelaunchURL:transitionWithScreenshot:");
}

id objc_msgSend_commitThenUpload(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commitThenUpload");
}

id objc_msgSend_commitWithRelaunchURL_transitionWithScreenshot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "commitWithRelaunchURL:transitionWithScreenshot:");
}

id objc_msgSend_companionDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "companionDevice");
}

id objc_msgSend_compare_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:");
}

id objc_msgSend_compare_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compare:options:");
}

id objc_msgSend_compareProductVersion_toProductVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "compareProductVersion:toProductVersion:");
}

id objc_msgSend_completeMesaController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completeMesaController");
}

id objc_msgSend_completedDemoSetup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completedDemoSetup");
}

id objc_msgSend_completion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completion");
}

id objc_msgSend_completionBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completionBlock");
}

id objc_msgSend_completionDate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completionDate");
}

id objc_msgSend_completionViewModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "completionViewModel");
}

id objc_msgSend_componentsFromLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsFromLocaleIdentifier:");
}

id objc_msgSend_componentsJoinedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsJoinedByString:");
}

id objc_msgSend_componentsSeparatedByString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "componentsSeparatedByString:");
}

id objc_msgSend_condition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "condition");
}

id objc_msgSend_configController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configController");
}

id objc_msgSend_configuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configuration");
}

id objc_msgSend_configurationCompleted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationCompleted");
}

id objc_msgSend_configurationForDefaultMainDisplayMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationForDefaultMainDisplayMonitor");
}

id objc_msgSend_configurationInfoError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationInfoError:");
}

id objc_msgSend_configurationInfoWithIdentifiers_forAltDSID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationInfoWithIdentifiers:forAltDSID:completion:");
}

id objc_msgSend_configurationWithHierarchicalColor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationWithHierarchicalColor:");
}

id objc_msgSend_configurationWithPaletteColors_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationWithPaletteColors:");
}

id objc_msgSend_configurationWithPointSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurationWithPointSize:");
}

id objc_msgSend_configure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configure");
}

id objc_msgSend_configureCell_atIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureCell:atIndexPath:");
}

id objc_msgSend_configureFlowItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureFlowItem:");
}

id objc_msgSend_configureForAnalytics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureForAnalytics:");
}

id objc_msgSend_configureFromViewModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureFromViewModel:");
}

id objc_msgSend_configureMDMWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureMDMWithCompletionHandler:");
}

id objc_msgSend_configurePasscodeTypeUsingAnimations_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configurePasscodeTypeUsingAnimations:");
}

id objc_msgSend_configureToSharedDeviceWithPreferenceDomain_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureToSharedDeviceWithPreferenceDomain:");
}

id objc_msgSend_configureViewWithViewModel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureViewWithViewModel:");
}

id objc_msgSend_configureWithNavigationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configureWithNavigationController:");
}

id objc_msgSend_configuredPlayerForLightMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "configuredPlayerForLightMode:");
}

id objc_msgSend_confirmCancellation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "confirmCancellation:");
}

id objc_msgSend_confirmationAcceptActionWithTitle_style_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "confirmationAcceptActionWithTitle:style:action:");
}

id objc_msgSend_confirmationCancelActionWithTitle_style_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "confirmationCancelActionWithTitle:style:action:");
}

id objc_msgSend_confirmationCompletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "confirmationCompletion");
}

id objc_msgSend_conformsToProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "conformsToProtocol:");
}

id objc_msgSend_connectedOverWiFi(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectedOverWiFi");
}

id objc_msgSend_connectedOverWiFiAndNetworkReachable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectedOverWiFiAndNetworkReachable");
}

id objc_msgSend_connectedScenes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectedScenes");
}

id objc_msgSend_connectedToWiFi(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectedToWiFi");
}

id objc_msgSend_connectionInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionInfo");
}

id objc_msgSend_connectionState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionState");
}

id objc_msgSend_connectionTerminated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionTerminated");
}

id objc_msgSend_connectionType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectionType");
}

id objc_msgSend_connectivityTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "connectivityTimer");
}

id objc_msgSend_consistentRowHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "consistentRowHeight");
}

id objc_msgSend_constant(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constant");
}

id objc_msgSend_constraintEqualToAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToAnchor:");
}

id objc_msgSend_constraintEqualToAnchor_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToAnchor:constant:");
}

id objc_msgSend_constraintEqualToAnchor_multiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToAnchor:multiplier:");
}

id objc_msgSend_constraintEqualToConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToConstant:");
}

id objc_msgSend_constraintEqualToSystemSpacingAfterAnchor_multiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToSystemSpacingAfterAnchor:multiplier:");
}

id objc_msgSend_constraintEqualToSystemSpacingBelowAnchor_multiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintEqualToSystemSpacingBelowAnchor:multiplier:");
}

id objc_msgSend_constraintGreaterThanOrEqualToAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintGreaterThanOrEqualToAnchor:");
}

id objc_msgSend_constraintGreaterThanOrEqualToAnchor_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintGreaterThanOrEqualToAnchor:constant:");
}

id objc_msgSend_constraintGreaterThanOrEqualToConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintGreaterThanOrEqualToConstant:");
}

id objc_msgSend_constraintGreaterThanOrEqualToSystemSpacingBelowAnchor_multiplier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintGreaterThanOrEqualToSystemSpacingBelowAnchor:multiplier:");
}

id objc_msgSend_constraintInstructions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintInstructions");
}

id objc_msgSend_constraintLessThanOrEqualToAnchor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintLessThanOrEqualToAnchor:");
}

id objc_msgSend_constraintLessThanOrEqualToAnchor_constant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintLessThanOrEqualToAnchor:constant:");
}

id objc_msgSend_constraintLessThanOrEqualToConstant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintLessThanOrEqualToConstant:");
}

id objc_msgSend_constraintsWithVisualFormat_options_metrics_views_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "constraintsWithVisualFormat:options:metrics:views:");
}

id objc_msgSend_containerView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containerView");
}

id objc_msgSend_containingContinentOfRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containingContinentOfRegion:");
}

id objc_msgSend_containingRegionOfRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containingRegionOfRegion:");
}

id objc_msgSend_containsKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsKey:");
}

id objc_msgSend_containsObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsObject:");
}

id objc_msgSend_containsString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "containsString:");
}

id objc_msgSend_contentContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentContainer");
}

id objc_msgSend_contentContainerHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentContainerHeight");
}

id objc_msgSend_contentContainerWidthHeightConstraints(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentContainerWidthHeightConstraints");
}

id objc_msgSend_contentEdgeInsets(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentEdgeInsets");
}

id objc_msgSend_contentLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentLabel");
}

id objc_msgSend_contentOffset(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentOffset");
}

id objc_msgSend_contentSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentSize");
}

id objc_msgSend_contentVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentVersion");
}

id objc_msgSend_contentView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentView");
}

id objc_msgSend_contentViewHeightConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentViewHeightConstraint");
}

id objc_msgSend_contentViewTopConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentViewTopConstraint");
}

id objc_msgSend_contentsOfDirectoryAtPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contentsOfDirectoryAtPath:error:");
}

id objc_msgSend_contextEvaluatePolicy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextEvaluatePolicy");
}

id objc_msgSend_contextForAccountWithAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "contextForAccountWithAltDSID:");
}

id objc_msgSend_continuationKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continuationKey");
}

id objc_msgSend_continueButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueButton");
}

id objc_msgSend_continueButtonWithTitle_inView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "continueButtonWithTitle:inView:");
}

id objc_msgSend_controllerAffectedByTapFreeSetup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllerAffectedByTapFreeSetup");
}

id objc_msgSend_controllerAllowsNavigatingBack(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllerAllowsNavigatingBack");
}

id objc_msgSend_controllerBack(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllerBack");
}

id objc_msgSend_controllerCompleted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllerCompleted");
}

id objc_msgSend_controllerDone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllerDone");
}

id objc_msgSend_controllerNeedsToRun(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllerNeedsToRun");
}

id objc_msgSend_controllerNeedsToRunForClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllerNeedsToRunForClass:");
}

id objc_msgSend_controllerNeedsToRunForFlowItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllerNeedsToRunForFlowItem:");
}

id objc_msgSend_controllerNeedsToRunWithPendingRestoreState_buddyPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllerNeedsToRunWithPendingRestoreState:buddyPreferences:");
}

id objc_msgSend_controllerNeedsToRunWithPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllerNeedsToRunWithPreferences:");
}

id objc_msgSend_controllerWasPopped(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllerWasPopped");
}

id objc_msgSend_controllerWillNotRun(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllerWillNotRun");
}

id objc_msgSend_controllers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllers");
}

id objc_msgSend_controllersToRemove(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "controllersToRemove");
}

id objc_msgSend_convertRect_fromView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "convertRect:fromView:");
}

id objc_msgSend_copy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copy");
}

id objc_msgSend_copyCarrierBundleValue_key_bundleType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyCarrierBundleValue:key:bundleType:error:");
}

id objc_msgSend_copyItemAtPath_toPath_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyItemAtPath:toPath:error:");
}

id objc_msgSend_copyMobileCountryCode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMobileCountryCode:error:");
}

id objc_msgSend_copyMobileNetworkCode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMobileNetworkCode:error:");
}

id objc_msgSend_copyMobileSubscriberCountryCode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMobileSubscriberCountryCode:error:");
}

id objc_msgSend_copyMobileSubscriberIsoCountryCode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMobileSubscriberIsoCountryCode:error:");
}

id objc_msgSend_copyMobileSubscriberIsoSubregionCode_MNC_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMobileSubscriberIsoSubregionCode:MNC:error:");
}

id objc_msgSend_copyMobileSubscriberNetworkCode_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "copyMobileSubscriberNetworkCode:error:");
}

id objc_msgSend_coreTelephonyClient(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "coreTelephonyClient");
}

id objc_msgSend_count(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "count");
}

id objc_msgSend_countByEnumeratingWithState_objects_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countByEnumeratingWithState:objects:count:");
}

id objc_msgSend_countForObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countForObject:");
}

id objc_msgSend_countOfResponsibilityViewControllerPushSessions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countOfResponsibilityViewControllerPushSessions");
}

id objc_msgSend_countryAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countryAtIndexPath:");
}

id objc_msgSend_countryCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "countryCode");
}

id objc_msgSend_createAndRecoverAccountWithUsername_password_rawPassword_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createAndRecoverAccountWithUsername:password:rawPassword:completion:");
}

id objc_msgSend_createBackupDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createBackupDataSource:");
}

id objc_msgSend_createBagForSubProfile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createBagForSubProfile");
}

id objc_msgSend_createBoldButtonWithTitle_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createBoldButtonWithTitle:action:");
}

id objc_msgSend_createCloudDataSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createCloudDataSource:");
}

id objc_msgSend_createDataProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDataProvider:");
}

id objc_msgSend_createDataSourceForPreselectedItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDataSourceForPreselectedItems");
}

id objc_msgSend_createDataSourceForSelectedItems(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDataSourceForSelectedItems");
}

id objc_msgSend_createDataSourceItemsAvailableForAdding(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createDataSourceItemsAvailableForAdding");
}

id objc_msgSend_createFileAtPath_contents_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createFileAtPath:contents:attributes:");
}

id objc_msgSend_createLinkButtonWithTitle_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createLinkButtonWithTitle:action:");
}

id objc_msgSend_createLockscreenController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createLockscreenController");
}

id objc_msgSend_createMDMUnlockTokenIfNeededWithPasscode_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createMDMUnlockTokenIfNeededWithPasscode:completionBlock:");
}

id objc_msgSend_createNewCell(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createNewCell");
}

id objc_msgSend_createPlayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createPlayer");
}

id objc_msgSend_createSignInTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createSignInTask");
}

id objc_msgSend_createTargetDeviceMigrationManagerWithPrepareForMigrationRebootBlock_passcodeCacheManager_analyticsManager_lockdownModeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createTargetDeviceMigrationManagerWithPrepareForMigrationRebootBlock:passcodeCacheManager:analyticsManager:lockdownModeProvider:");
}

id objc_msgSend_createWalletProvisionalContextUsingDataProvider_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createWalletProvisionalContextUsingDataProvider:completion:");
}

id objc_msgSend_createdOnCurrentMajorVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "createdOnCurrentMajorVersion");
}

id objc_msgSend_credentialForTrust_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "credentialForTrust:");
}

id objc_msgSend_current(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "current");
}

id objc_msgSend_currentAppStates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentAppStates");
}

id objc_msgSend_currentCalendar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentCalendar");
}

id objc_msgSend_currentConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentConfiguration");
}

id objc_msgSend_currentDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDevice");
}

id objc_msgSend_currentDeviceShouldOfferMigration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDeviceShouldOfferMigration");
}

id objc_msgSend_currentDisplayZoomMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentDisplayZoomMode");
}

id objc_msgSend_currentEnrollmentMetadata(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentEnrollmentMetadata");
}

id objc_msgSend_currentEnrollmentStatusViewModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentEnrollmentStatusViewModel");
}

id objc_msgSend_currentFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentFlags");
}

id objc_msgSend_currentHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentHandler");
}

id objc_msgSend_currentItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentItem");
}

id objc_msgSend_currentLocale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLocale");
}

id objc_msgSend_currentLocaleRequiresExtendedSetup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentLocaleRequiresExtendedSetup");
}

id objc_msgSend_currentNetworkRequiresDataUsageWarningForRestore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentNetworkRequiresDataUsageWarningForRestore");
}

id objc_msgSend_currentNetworkSupportsRestore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentNetworkSupportsRestore");
}

id objc_msgSend_currentOffer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentOffer");
}

id objc_msgSend_currentThread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentThread");
}

id objc_msgSend_currentTimestamp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentTimestamp");
}

id objc_msgSend_currentUser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentUser");
}

id objc_msgSend_currentViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentViewController");
}

id objc_msgSend_currentViewControllerActiveDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentViewControllerActiveDuration");
}

id objc_msgSend_currentViewControllerBackgroundDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentViewControllerBackgroundDuration");
}

id objc_msgSend_currentVoiceIsDefaultVoice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentVoiceIsDefaultVoice");
}

id objc_msgSend_currentlyShowingActivationFlow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "currentlyShowingActivationFlow");
}

id objc_msgSend_cursiveTextView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cursiveTextView");
}

id objc_msgSend_cursiveWelcomeView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "cursiveWelcomeView");
}

id objc_msgSend_customDelayDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "customDelayDuration");
}

id objc_msgSend_daemonClient(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "daemonClient");
}

id objc_msgSend_data(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "data");
}

id objc_msgSend_dataAvailable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataAvailable");
}

id objc_msgSend_dataHasDetailedLabelField(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataHasDetailedLabelField");
}

id objc_msgSend_dataSelectorController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSelectorController");
}

id objc_msgSend_dataSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSource");
}

id objc_msgSend_dataSourceActionEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSourceActionEnabled");
}

id objc_msgSend_dataSourceType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataSourceType");
}

id objc_msgSend_dataStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataStore");
}

id objc_msgSend_dataTaskWithRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithRequest:");
}

id objc_msgSend_dataTaskWithRequest_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTaskWithRequest:completionHandler:");
}

id objc_msgSend_dataTransferMethod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataTransferMethod");
}

id objc_msgSend_dataUsingEncoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataUsingEncoding:");
}

id objc_msgSend_dataWithContentsOfFile_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfFile:");
}

id objc_msgSend_dataWithContentsOfURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithContentsOfURL:");
}

id objc_msgSend_dataWithPropertyList_format_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dataWithPropertyList:format:options:error:");
}

id objc_msgSend_date(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "date");
}

id objc_msgSend_dateByAddingComponents_toDate_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateByAddingComponents:toDate:options:");
}

id objc_msgSend_dateForChosenBackup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateForChosenBackup");
}

id objc_msgSend_dateFromString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateFromString:");
}

id objc_msgSend_dateOfLastBackup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateOfLastBackup");
}

id objc_msgSend_dateString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateString");
}

id objc_msgSend_dateStringWithStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateStringWithStyle:");
}

id objc_msgSend_dateWithTimeInterval_sinceDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dateWithTimeInterval:sinceDate:");
}

id objc_msgSend_deactivate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deactivate");
}

id objc_msgSend_deactivateConstraints_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deactivateConstraints:");
}

id objc_msgSend_debugDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debugDescription");
}

id objc_msgSend_debutFlowItemClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "debutFlowItemClass");
}

id objc_msgSend_defaultAccessibilitySettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultAccessibilitySettings");
}

id objc_msgSend_defaultCenter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultCenter");
}

id objc_msgSend_defaultController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultController");
}

id objc_msgSend_defaultData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultData");
}

id objc_msgSend_defaultDataProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultDataProvider");
}

id objc_msgSend_defaultDetailTextAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultDetailTextAttributes");
}

id objc_msgSend_defaultLanguagesForMultilingualSetup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultLanguagesForMultilingualSetup");
}

id objc_msgSend_defaultManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultManager");
}

id objc_msgSend_defaultPages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultPages");
}

id objc_msgSend_defaultParagraphTextAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultParagraphTextAttributes");
}

id objc_msgSend_defaultScale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultScale");
}

id objc_msgSend_defaultSessionConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSessionConfiguration");
}

id objc_msgSend_defaultSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultSource");
}

id objc_msgSend_defaultStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultStore");
}

id objc_msgSend_defaultTitleTextAttributes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultTitleTextAttributes");
}

id objc_msgSend_defaultWorkspace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultWorkspace");
}

id objc_msgSend_defaultWritingDirectionForLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "defaultWritingDirectionForLanguage:");
}

id objc_msgSend_delegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegate");
}

id objc_msgSend_delegateBundleIDsForManagedAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegateBundleIDsForManagedAccount");
}

id objc_msgSend_delegateQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegateQueue");
}

id objc_msgSend_delegates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "delegates");
}

id objc_msgSend_deleteCharactersInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteCharactersInRange:");
}

id objc_msgSend_deleteIdentity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteIdentity");
}

id objc_msgSend_deleteRowsAtIndexPaths_withRowAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteRowsAtIndexPaths:withRowAnimation:");
}

id objc_msgSend_deleteSections_withRowAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deleteSections:withRowAnimation:");
}

id objc_msgSend_demoViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "demoViewController");
}

id objc_msgSend_dependentController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dependentController");
}

id objc_msgSend_dequeueReusableCellWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dequeueReusableCellWithIdentifier:");
}

id objc_msgSend_dequeueReusableCellWithIdentifier_forIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dequeueReusableCellWithIdentifier:forIndexPath:");
}

id objc_msgSend_description(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "description");
}

id objc_msgSend_descriptionLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptionLabel");
}

id objc_msgSend_descriptor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptor");
}

id objc_msgSend_descriptorWithSubscriptionContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "descriptorWithSubscriptionContext:");
}

id objc_msgSend_deselectRowAtIndexPath_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deselectRowAtIndexPath:animated:");
}

id objc_msgSend_detail(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detail");
}

id objc_msgSend_detailText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detailText");
}

id objc_msgSend_detailTextForErrorOnSource_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detailTextForErrorOnSource:");
}

id objc_msgSend_detailTextForErrorOnTarget_requiresErase_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detailTextForErrorOnTarget:requiresErase:");
}

id objc_msgSend_detailTextLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detailTextLabel");
}

id objc_msgSend_details(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "details");
}

id objc_msgSend_detailsFromMDMProfile_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "detailsFromMDMProfile:error:");
}

id objc_msgSend_deviceAnalyticsOptIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceAnalyticsOptIn");
}

id objc_msgSend_deviceClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceClass");
}

id objc_msgSend_deviceConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceConfiguration");
}

id objc_msgSend_deviceConfiguredCompletionBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceConfiguredCompletionBlock");
}

id objc_msgSend_deviceDepartmentName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceDepartmentName");
}

id objc_msgSend_deviceInfoString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceInfoString");
}

id objc_msgSend_deviceIsBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceIsBundle");
}

id objc_msgSend_deviceIsFromFactory(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceIsFromFactory");
}

id objc_msgSend_deviceLanguagesForChangingDeviceLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceLanguagesForChangingDeviceLanguage:");
}

id objc_msgSend_deviceLockAssertion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceLockAssertion");
}

id objc_msgSend_deviceManagementProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceManagementProvider");
}

id objc_msgSend_deviceManagementSupport(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceManagementSupport");
}

id objc_msgSend_deviceManagementWantsToSkipControllerClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceManagementWantsToSkipControllerClass:");
}

id objc_msgSend_deviceMigrationManager_didChangeConnectionInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceMigrationManager:didChangeConnectionInformation:");
}

id objc_msgSend_deviceMigrationManager_didCompleteWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceMigrationManager:didCompleteWithError:");
}

id objc_msgSend_deviceMigrationManager_didUpdateProgress_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceMigrationManager:didUpdateProgress:");
}

id objc_msgSend_deviceModel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceModel");
}

id objc_msgSend_deviceName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceName");
}

id objc_msgSend_deviceNameForChosenBackup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceNameForChosenBackup");
}

id objc_msgSend_deviceOrganizationAddress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceOrganizationAddress");
}

id objc_msgSend_deviceOrganizationAddressLine1(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceOrganizationAddressLine1");
}

id objc_msgSend_deviceOrganizationAddressLine2(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceOrganizationAddressLine2");
}

id objc_msgSend_deviceOrganizationCity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceOrganizationCity");
}

id objc_msgSend_deviceOrganizationCountry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceOrganizationCountry");
}

id objc_msgSend_deviceOrganizationName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceOrganizationName");
}

id objc_msgSend_deviceOrganizationRegion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceOrganizationRegion");
}

id objc_msgSend_deviceOrganizationZipCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceOrganizationZipCode");
}

id objc_msgSend_deviceProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceProvider");
}

id objc_msgSend_deviceSupportsCellularRestore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceSupportsCellularRestore");
}

id objc_msgSend_deviceSupportsSystemAssistantExperience(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceSupportsSystemAssistantExperience");
}

id objc_msgSend_deviceToDeviceMigrationVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceToDeviceMigrationVersion");
}

id objc_msgSend_deviceTransferTask(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "deviceTransferTask");
}

id objc_msgSend_devicesFromMigrationConsentRequestData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "devicesFromMigrationConsentRequestData:");
}

id objc_msgSend_diagnosticsRemoteController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "diagnosticsRemoteController");
}

id objc_msgSend_dialerDidDismiss_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dialerDidDismiss:");
}

id objc_msgSend_dictationBackingStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictationBackingStore");
}

id objc_msgSend_dictationProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictationProvider");
}

id objc_msgSend_dictionary(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionary");
}

id objc_msgSend_dictionaryForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryForKey:");
}

id objc_msgSend_dictionaryRepresentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryRepresentation");
}

id objc_msgSend_dictionaryWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithDictionary:");
}

id objc_msgSend_dictionaryWithObjects_forKeys_count_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dictionaryWithObjects:forKeys:count:");
}

id objc_msgSend_didActivate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didActivate");
}

id objc_msgSend_didAgree(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didAgree");
}

id objc_msgSend_didAgreeToServerTerms(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didAgreeToServerTerms");
}

id objc_msgSend_didAppear(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didAppear");
}

id objc_msgSend_didApplyProximitySettingsWithWillReboot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didApplyProximitySettingsWithWillReboot:");
}

id objc_msgSend_didApplySettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didApplySettings");
}

id objc_msgSend_didBecomeActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didBecomeActive");
}

id objc_msgSend_didComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didComplete");
}

id objc_msgSend_didCompleteFlow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCompleteFlow:");
}

id objc_msgSend_didCompleteOrSkipVoiceTraining(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didCompleteOrSkipVoiceTraining");
}

id objc_msgSend_didEnterBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didEnterBackground");
}

id objc_msgSend_didInsertWiFiPaneForCloudConfigurationFlow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didInsertWiFiPaneForCloudConfigurationFlow");
}

id objc_msgSend_didMarkBuddyComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didMarkBuddyComplete");
}

id objc_msgSend_didMoveToParentViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didMoveToParentViewController:");
}

id objc_msgSend_didReconnect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didReconnect");
}

id objc_msgSend_didRestartFlow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didRestartFlow");
}

id objc_msgSend_didRestoreFromBackup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didRestoreFromBackup");
}

id objc_msgSend_didSelectChoice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSelectChoice:");
}

id objc_msgSend_didSelectSegment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSelectSegment:");
}

id objc_msgSend_didSetupUsingiTunes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSetupUsingiTunes");
}

id objc_msgSend_didShowVoiceTriggerPrompt(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didShowVoiceTriggerPrompt");
}

id objc_msgSend_didShowWifiAlert(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didShowWifiAlert");
}

id objc_msgSend_didSkipFlow_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSkipFlow:");
}

id objc_msgSend_didSucceedWithChildSetupPresenter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "didSucceedWithChildSetupPresenter:");
}

id objc_msgSend_dimmingView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dimmingView");
}

id objc_msgSend_directionalLayoutMargins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "directionalLayoutMargins");
}

id objc_msgSend_disable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disable");
}

id objc_msgSend_disableExcessiveLayout(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableExcessiveLayout");
}

id objc_msgSend_disableTapFreeSetUp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disableTapFreeSetUp");
}

id objc_msgSend_disagreeToRemoteUIDialog(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disagreeToRemoteUIDialog");
}

id objc_msgSend_disagreeURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disagreeURL");
}

id objc_msgSend_disallowSIMUnlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disallowSIMUnlock");
}

id objc_msgSend_disclosureViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disclosureViewController");
}

id objc_msgSend_disclosureViewControllerClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disclosureViewControllerClass");
}

id objc_msgSend_disconnect(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnect");
}

id objc_msgSend_disconnectController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnectController");
}

id objc_msgSend_disconnectionQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "disconnectionQueue");
}

id objc_msgSend_discoverAndStoreEnrollmentChannelWithEnrollmentURL_certificateDatas_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoverAndStoreEnrollmentChannelWithEnrollmentURL:certificateDatas:completionHandler:");
}

id objc_msgSend_discoverEnrollmentMethodWithServiceURL_enrollmentType_machineInfo_anchorCertificateRefs_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "discoverEnrollmentMethodWithServiceURL:enrollmentType:machineInfo:anchorCertificateRefs:completionHandler:");
}

id objc_msgSend_dismissAlert_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissAlert:animated:");
}

id objc_msgSend_dismissAlert_animated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissAlert:animated:completion:");
}

id objc_msgSend_dismissModalViewControllerWithTransition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissModalViewControllerWithTransition:");
}

id objc_msgSend_dismissProximityPinCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissProximityPinCode");
}

id objc_msgSend_dismissViewControllerAnimated_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissViewControllerAnimated:completion:");
}

id objc_msgSend_dismissViewControllerWithTransition_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dismissViewControllerWithTransition:completion:");
}

id objc_msgSend_displayFormatFor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayFormatFor:");
}

id objc_msgSend_displayIncompatibleProximityPairingFromDeviceClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayIncompatibleProximityPairingFromDeviceClass:");
}

id objc_msgSend_displayLanguage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayLanguage");
}

id objc_msgSend_displayLink(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayLink");
}

id objc_msgSend_displayLinkWithTarget_selector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayLinkWithTarget:selector:");
}

id objc_msgSend_displayMonitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayMonitor");
}

id objc_msgSend_displayName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayName");
}

id objc_msgSend_displayProximityPinCode_language_visual_accessibilitySettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayProximityPinCode:language:visual:accessibilitySettings:");
}

id objc_msgSend_displayText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayText");
}

id objc_msgSend_displayUpdateRequiredToMigrate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayUpdateRequiredToMigrate");
}

id objc_msgSend_displayVerboseDescriptionButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayVerboseDescriptionButton");
}

id objc_msgSend_displayZoomExecutor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayZoomExecutor");
}

id objc_msgSend_displayZoomModes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayZoomModes");
}

id objc_msgSend_displayZoomOption(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayZoomOption");
}

id objc_msgSend_displayedPages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "displayedPages");
}

id objc_msgSend_dispositionSpecificLocalizedStringKeyForKey_disposition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispositionSpecificLocalizedStringKeyForKey:disposition:");
}

id objc_msgSend_dispositions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dispositions");
}

id objc_msgSend_dmc_bearerToken(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dmc_bearerToken");
}

id objc_msgSend_dmc_iCloudAccountForRemoteManagingAccountWithAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dmc_iCloudAccountForRemoteManagingAccountWithAltDSID:");
}

id objc_msgSend_dmc_iTunesAccountForRemoteManagingAccountWithAltDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dmc_iTunesAccountForRemoteManagingAccountWithAltDSID:");
}

id objc_msgSend_dmc_remoteManagementAccountForIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dmc_remoteManagementAccountForIdentifier:");
}

id objc_msgSend_documentation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "documentation");
}

id objc_msgSend_doesRestartFlowCauseEraseBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesRestartFlowCauseEraseBlock");
}

id objc_msgSend_doesTapFreeSetupAffectsClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doesTapFreeSetupAffectsClass:");
}

id objc_msgSend_domain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "domain");
}

id objc_msgSend_dotViews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dotViews");
}

id objc_msgSend_doubleValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "doubleValue");
}

id objc_msgSend_download(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "download");
}

id objc_msgSend_downloadDestination(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadDestination");
}

id objc_msgSend_downloadSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadSize");
}

id objc_msgSend_downloadedResponseData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "downloadedResponseData");
}

id objc_msgSend_drawHomeAffordance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "drawHomeAffordance");
}

id objc_msgSend_dsid(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dsid");
}

id objc_msgSend_duration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "duration");
}

id objc_msgSend_durationOfRestore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "durationOfRestore");
}

id objc_msgSend_durationOfTransfer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "durationOfTransfer");
}

id objc_msgSend_dynamicViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "dynamicViewController");
}

id objc_msgSend_edgeInsetsForTable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "edgeInsetsForTable:");
}

id objc_msgSend_editableTextField(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editableTextField");
}

id objc_msgSend_editingOptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editingOptions");
}

id objc_msgSend_editingStyleForRowAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "editingStyleForRowAtIndexPath:");
}

id objc_msgSend_effectWithStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectWithStyle:");
}

id objc_msgSend_effectiveBoolValueForSetting_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "effectiveBoolValueForSetting:");
}

id objc_msgSend_eligibilitySetDeviceLocale_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eligibilitySetDeviceLocale:");
}

id objc_msgSend_eligibleForChlorine(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eligibleForChlorine");
}

id objc_msgSend_emergencyExecutor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "emergencyExecutor");
}

id objc_msgSend_enableAutomaticDownload_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableAutomaticDownload:");
}

id objc_msgSend_enableAutomaticUpdateV2_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableAutomaticUpdateV2:");
}

id objc_msgSend_enableDataClassesForAccount_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableDataClassesForAccount:completion:");
}

id objc_msgSend_enableDisplayZoom(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableDisplayZoom");
}

id objc_msgSend_enableFMIPInContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableFMIPInContext:");
}

id objc_msgSend_enableFindMy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableFindMy");
}

id objc_msgSend_enableUpdateButtonForError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableUpdateButtonForError:");
}

id objc_msgSend_enableVoiceTriggerUponVoiceProfileSyncForLanguage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableVoiceTriggerUponVoiceProfileSyncForLanguage:");
}

id objc_msgSend_enableWithStrategy_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enableWithStrategy:completionHandler:");
}

id objc_msgSend_enabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enabled");
}

id objc_msgSend_enabledInputModeIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enabledInputModeIdentifiers");
}

id objc_msgSend_enabledLevel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enabledLevel");
}

id objc_msgSend_endAdvertising(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endAdvertising");
}

id objc_msgSend_endAdvertisingProximityAutomatedDeviceEnrollment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endAdvertisingProximityAutomatedDeviceEnrollment");
}

id objc_msgSend_endAdvertisingProximitySetup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endAdvertisingProximitySetup");
}

id objc_msgSend_endAppearanceTransition(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endAppearanceTransition");
}

id objc_msgSend_endDeviceToDeviceMigration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endDeviceToDeviceMigration");
}

id objc_msgSend_endEnrollment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endEnrollment");
}

id objc_msgSend_endIgnoringInteractionEvents(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endIgnoringInteractionEvents");
}

id objc_msgSend_endLifecycleDueToCause_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endLifecycleDueToCause:");
}

id objc_msgSend_endPairing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endPairing");
}

id objc_msgSend_endProximityIfApplicable(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endProximityIfApplicable");
}

id objc_msgSend_endSIMSetupExternalAuthentication(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endSIMSetupExternalAuthentication");
}

id objc_msgSend_endUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "endUpdates");
}

id objc_msgSend_enrollButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enrollButton");
}

id objc_msgSend_enrollController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enrollController");
}

id objc_msgSend_enrollInProgramWithMDMToken_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enrollInProgramWithMDMToken:completion:");
}

id objc_msgSend_enrollInSeedProgramNamed_withAssetAudience_programID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enrollInSeedProgramNamed:withAssetAudience:programID:completion:");
}

id objc_msgSend_enrollmentAnchorCertificates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enrollmentAnchorCertificates");
}

id objc_msgSend_enrollmentConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enrollmentConfiguration");
}

id objc_msgSend_enrollmentController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enrollmentController");
}

id objc_msgSend_enrollmentCoordinator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enrollmentCoordinator");
}

id objc_msgSend_enrollmentFlowController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enrollmentFlowController");
}

id objc_msgSend_enrollmentFlowControllerWithPresenter_managedConfigurationHelper_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enrollmentFlowControllerWithPresenter:managedConfigurationHelper:");
}

id objc_msgSend_enrollmentServerInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enrollmentServerInfo");
}

id objc_msgSend_enrollmentServerURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enrollmentServerURL");
}

id objc_msgSend_ensureSetupControllerWithFactoryBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ensureSetupControllerWithFactoryBlock:");
}

id objc_msgSend_entryForFeature_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "entryForFeature:");
}

id objc_msgSend_enumerateBundlesOfType_block_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateBundlesOfType:block:");
}

id objc_msgSend_enumerateObjectsUsingBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "enumerateObjectsUsingBlock:");
}

id objc_msgSend_environment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "environment");
}

id objc_msgSend_environmentInjector(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "environmentInjector");
}

id objc_msgSend_eraseFlow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eraseFlow");
}

id objc_msgSend_eraseWithWindow_navigationController_proximitySetupController_analyticsManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eraseWithWindow:navigationController:proximitySetupController:analyticsManager:");
}

id objc_msgSend_error(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "error");
}

id objc_msgSend_errorController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorController");
}

id objc_msgSend_errorIndicatesUpdateNotFound_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorIndicatesUpdateNotFound:");
}

id objc_msgSend_errorWithDomain_code_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "errorWithDomain:code:userInfo:");
}

id objc_msgSend_estimatedMigrationDuration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "estimatedMigrationDuration");
}

id objc_msgSend_estimatedRestoreSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "estimatedRestoreSize");
}

id objc_msgSend_evaluateAuthenticationChallenge_withCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluateAuthenticationChallenge:withCompletionHandler:");
}

id objc_msgSend_evaluatePolicy_options_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "evaluatePolicy:options:error:");
}

id objc_msgSend_eventName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventName");
}

id objc_msgSend_eventPayloads(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "eventPayloads");
}

id objc_msgSend_exceptionWithName_reason_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exceptionWithName:reason:userInfo:");
}

id objc_msgSend_existingAccountType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingAccountType");
}

id objc_msgSend_existingAccountUsername(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingAccountUsername");
}

id objc_msgSend_existingSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "existingSettings");
}

id objc_msgSend_exitBuddyForDemoSetUpBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exitBuddyForDemoSetUpBlock");
}

id objc_msgSend_exitMigrationReconnectController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "exitMigrationReconnectController");
}

id objc_msgSend_expressDataSource(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expressDataSource");
}

id objc_msgSend_expressFlowDidCustomize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expressFlowDidCustomize");
}

id objc_msgSend_expressRestoreAnalytics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expressRestoreAnalytics");
}

id objc_msgSend_expressSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expressSettings");
}

id objc_msgSend_expressSetupDataProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expressSetupDataProvider");
}

id objc_msgSend_expressSetupFeatures(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expressSetupFeatures");
}

id objc_msgSend_expressSetupFlowForSetupProvisioningContext_withCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expressSetupFlowForSetupProvisioningContext:withCompletion:");
}

id objc_msgSend_expressSetupProvisioningContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "expressSetupProvisioningContext:");
}

id objc_msgSend_extendedInitializationCompletion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "extendedInitializationCompletion");
}

id objc_msgSend_externalizedContext(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "externalizedContext");
}

id objc_msgSend_failedToFindMDMRequiredUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "failedToFindMDMRequiredUpdate");
}

id objc_msgSend_fakeBetaReEnrollment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fakeBetaReEnrollment");
}

id objc_msgSend_familyMembers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "familyMembers");
}

id objc_msgSend_fastIdentifierMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fastIdentifierMap");
}

id objc_msgSend_featureCardCellMap(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featureCardCellMap");
}

id objc_msgSend_featureFlags(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featureFlags");
}

id objc_msgSend_featuresArrayForDataSource_eligibleForChlorine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "featuresArrayForDataSource:eligibleForChlorine:");
}

id objc_msgSend_federatedAuthSignInControllerInNavigationController_mode_passcodeCacheManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "federatedAuthSignInControllerInNavigationController:mode:passcodeCacheManager:");
}

id objc_msgSend_fetchAccountStateWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccountStateWithCompletionHandler:");
}

id objc_msgSend_fetchAccounts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAccounts:");
}

id objc_msgSend_fetchAuthModeForUsername_requiresAppleMAID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAuthModeForUsername:requiresAppleMAID:completion:");
}

id objc_msgSend_fetchAuthModeWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAuthModeWithContext:completion:");
}

id objc_msgSend_fetchAuthenticationContextForApplePay(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAuthenticationContextForApplePay");
}

id objc_msgSend_fetchAuthenticationContextForBiometric(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchAuthenticationContextForBiometric");
}

id objc_msgSend_fetchBackupMetadataBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchBackupMetadataBlock");
}

id objc_msgSend_fetchEnrollmentProfileWithServiceURL_authToken_machineInfo_anchorCertificateRefs_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchEnrollmentProfileWithServiceURL:authToken:machineInfo:anchorCertificateRefs:completionHandler:");
}

id objc_msgSend_fetchMaxAgeForChildAccountWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchMaxAgeForChildAccountWithCompletionHandler:");
}

id objc_msgSend_fetchProfilePictureForAccountOwner_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchProfilePictureForAccountOwner:");
}

id objc_msgSend_fetchSettingsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchSettingsWithCompletion:");
}

id objc_msgSend_fetchTerms_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchTerms:");
}

id objc_msgSend_fetchTermsFromServer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fetchTermsFromServer:");
}

id objc_msgSend_fileExistsAtPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileExistsAtPath:");
}

id objc_msgSend_fileTransferSessionTemplate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fileTransferSessionTemplate");
}

id objc_msgSend_filesTransferred(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filesTransferred");
}

id objc_msgSend_filteredArrayUsingPredicate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredArrayUsingPredicate:");
}

id objc_msgSend_filteredRestorableItemsFromBackupList_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "filteredRestorableItemsFromBackupList:");
}

id objc_msgSend_finishedBackup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedBackup");
}

id objc_msgSend_finishedController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "finishedController");
}

id objc_msgSend_firstObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstObject");
}

id objc_msgSend_firstViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "firstViewController:");
}

id objc_msgSend_fixedRowHeight(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fixedRowHeight");
}

id objc_msgSend_flashScrollIndicators(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flashScrollIndicators");
}

id objc_msgSend_floatValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "floatValue");
}

id objc_msgSend_flowCloudConfigurationDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flowCloudConfigurationDelegate");
}

id objc_msgSend_flowControllerDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flowControllerDelegate");
}

id objc_msgSend_flowDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flowDelegate");
}

id objc_msgSend_flowDiverter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flowDiverter");
}

id objc_msgSend_flowItemCancelled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flowItemCancelled:");
}

id objc_msgSend_flowItemDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flowItemDelegate");
}

id objc_msgSend_flowItemDidAppear_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flowItemDidAppear:");
}

id objc_msgSend_flowItemDispositionProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flowItemDispositionProvider");
}

id objc_msgSend_flowItemDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flowItemDone:");
}

id objc_msgSend_flowItemDone_nextItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flowItemDone:nextItem:");
}

id objc_msgSend_flowItemDone_nextItemClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flowItemDone:nextItemClass:");
}

id objc_msgSend_flowProducer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flowProducer");
}

id objc_msgSend_flowProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flowProvider");
}

id objc_msgSend_flowRetryCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flowRetryCount");
}

id objc_msgSend_flowSkipController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flowSkipController");
}

id objc_msgSend_flowStarter(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flowStarter");
}

id objc_msgSend_flowWithOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flowWithOptions:");
}

id objc_msgSend_flush(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flush");
}

id objc_msgSend_flushEverything(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "flushEverything");
}

id objc_msgSend_followUpItemsCount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "followUpItemsCount");
}

id objc_msgSend_font(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "font");
}

id objc_msgSend_fontDescriptor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontDescriptor");
}

id objc_msgSend_fontDescriptorWithSymbolicTraits_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontDescriptorWithSymbolicTraits:");
}

id objc_msgSend_fontWithDescriptor_size_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontWithDescriptor:size:");
}

id objc_msgSend_fontWithSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fontWithSize:");
}

id objc_msgSend_footerButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "footerButton");
}

id objc_msgSend_footerDetailText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "footerDetailText");
}

id objc_msgSend_footerIcon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "footerIcon");
}

id objc_msgSend_footerIconName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "footerIconName");
}

id objc_msgSend_footerTitleText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "footerTitleText");
}

id objc_msgSend_footerView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "footerView");
}

id objc_msgSend_footnoteLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "footnoteLabel");
}

id objc_msgSend_forceDisplayIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceDisplayIfNeeded");
}

id objc_msgSend_forceErase(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceErase");
}

id objc_msgSend_forceForegroundSignIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceForegroundSignIn");
}

id objc_msgSend_forceNetworkReachabilityOverWiFi(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceNetworkReachabilityOverWiFi");
}

id objc_msgSend_forceNetworkReachabilityQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceNetworkReachabilityQueue");
}

id objc_msgSend_forcePrimaryAppleIDAuthentication(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forcePrimaryAppleIDAuthentication");
}

id objc_msgSend_forceReauthentication(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceReauthentication");
}

id objc_msgSend_forceSoftwareUpdateRequiredForNewBackup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceSoftwareUpdateRequiredForNewBackup");
}

id objc_msgSend_forceSoftwareUpdateRestore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceSoftwareUpdateRestore");
}

id objc_msgSend_forceUpdateToMigrate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forceUpdateToMigrate");
}

id objc_msgSend_forcedPreferredContentSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forcedPreferredContentSize");
}

id objc_msgSend_foregroundViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "foregroundViewController");
}

id objc_msgSend_forgotCell(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "forgotCell");
}

id objc_msgSend_formattedSubtitleStringForComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formattedSubtitleStringForComponents:");
}

id objc_msgSend_formattedUsernameFromUsername_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "formattedUsernameFromUsername:");
}

id objc_msgSend_frame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "frame");
}

id objc_msgSend_functionWithControlPoints__::(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "functionWithControlPoints::::");
}

id objc_msgSend_fundamentalFlow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "fundamentalFlow");
}

id objc_msgSend_gender(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gender");
}

id objc_msgSend_genderBackingStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "genderBackingStore");
}

id objc_msgSend_generalPasteboard(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "generalPasteboard");
}

id objc_msgSend_genericTermsURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "genericTermsURL");
}

id objc_msgSend_gestureRecognizer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "gestureRecognizer");
}

id objc_msgSend_getAcceptedTermsForAltDSID_reply_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAcceptedTermsForAltDSID:reply:");
}

id objc_msgSend_getActiveContexts_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getActiveContexts:");
}

id objc_msgSend_getAppStoreMessage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAppStoreMessage");
}

id objc_msgSend_getAppStoreURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAppStoreURL");
}

id objc_msgSend_getAppleIDsMapForBackupUDID_snapshotID_activeAppleID_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getAppleIDsMapForBackupUDID:snapshotID:activeAppleID:error:");
}

id objc_msgSend_getBackupListWithFiltering_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBackupListWithFiltering:error:");
}

id objc_msgSend_getBackupListWithFiltering_manager_retries_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBackupListWithFiltering:manager:retries:error:");
}

id objc_msgSend_getBundleURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getBundleURL");
}

id objc_msgSend_getConfigurationInfoWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getConfigurationInfoWithCompletion:");
}

id objc_msgSend_getConnectionAvailability_connectionType_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getConnectionAvailability:connectionType:error:");
}

id objc_msgSend_getCountryFromTelephony(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCountryFromTelephony");
}

id objc_msgSend_getCurrentDataSubscriptionContextSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getCurrentDataSubscriptionContextSync:");
}

id objc_msgSend_getDataStatus_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getDataStatus:error:");
}

id objc_msgSend_getEnrollUIViewController_bundleName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getEnrollUIViewController:bundleName:");
}

id objc_msgSend_getFlowSkipIdentifiers(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getFlowSkipIdentifiers");
}

id objc_msgSend_getInternetDataStatusBasicSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getInternetDataStatusBasicSync:");
}

id objc_msgSend_getMachineInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMachineInfo");
}

id objc_msgSend_getMachineInfoWithAdditionalInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMachineInfoWithAdditionalInfo:");
}

id objc_msgSend_getMandatorySoftwareUpdateDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getMandatorySoftwareUpdateDictionary:");
}

id objc_msgSend_getPreferredDataSubscriptionContextSync_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getPreferredDataSubscriptionContextSync:");
}

id objc_msgSend_getStewieSupport_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getStewieSupport:");
}

id objc_msgSend_getSupports5G_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getSupports5G:error:");
}

id objc_msgSend_getURLConfigurationWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getURLConfigurationWithHandler:");
}

id objc_msgSend_getUserInformationForAltDSID_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getUserInformationForAltDSID:completion:");
}

id objc_msgSend_getValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "getValue:");
}

id objc_msgSend_greenController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "greenController");
}

id objc_msgSend_guessedCountries(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "guessedCountries");
}

id objc_msgSend_guessedCountryFromTelephony(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "guessedCountryFromTelephony");
}

id objc_msgSend_guessedLanguages(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "guessedLanguages");
}

id objc_msgSend_handleBackupFailed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleBackupFailed:");
}

id objc_msgSend_handleDebugGesture(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDebugGesture");
}

id objc_msgSend_handleDownload_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleDownload:error:");
}

id objc_msgSend_handleFailureInFunction_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInFunction:file:lineNumber:description:");
}

id objc_msgSend_handleFailureInMethod_object_file_lineNumber_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handleFailureInMethod:object:file:lineNumber:description:");
}

id objc_msgSend_handler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handler");
}

id objc_msgSend_handshake(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "handshake");
}

id objc_msgSend_hasAccountType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAccountType");
}

id objc_msgSend_hasActionButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasActionButton");
}

id objc_msgSend_hasActionButtonData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasActionButtonData");
}

id objc_msgSend_hasActivated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasActivated");
}

id objc_msgSend_hasAppAnalyticsOptIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAppAnalyticsOptIn");
}

id objc_msgSend_hasAppearanceMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAppearanceMode");
}

id objc_msgSend_hasAppliedSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAppliedSettings");
}

id objc_msgSend_hasAssertions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAssertions");
}

id objc_msgSend_hasAssistantVoiceTriggerEnabledValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAssistantVoiceTriggerEnabledValue");
}

id objc_msgSend_hasAutoDownloadEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAutoDownloadEnabled");
}

id objc_msgSend_hasAutoUpdateEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasAutoUpdateEnabled");
}

id objc_msgSend_hasBeenShown(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasBeenShown");
}

id objc_msgSend_hasBlackBackground(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasBlackBackground");
}

id objc_msgSend_hasCloudConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasCloudConfiguration");
}

id objc_msgSend_hasCompletedInitialRun(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasCompletedInitialRun");
}

id objc_msgSend_hasCompletedInitialSetup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasCompletedInitialSetup");
}

id objc_msgSend_hasConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasConnection");
}

id objc_msgSend_hasConnection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasConnection:");
}

id objc_msgSend_hasContinuationKey(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasContinuationKey");
}

id objc_msgSend_hasDeviceAnalyticsOptIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasDeviceAnalyticsOptIn");
}

id objc_msgSend_hasEligibleEnrolledIdentityForPeriocularFaceIDEnrollment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasEligibleEnrolledIdentityForPeriocularFaceIDEnrollment");
}

id objc_msgSend_hasExplicitlySetVoiceTriggerEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasExplicitlySetVoiceTriggerEnabled");
}

id objc_msgSend_hasHomeButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasHomeButton");
}

id objc_msgSend_hasImportedKeychain(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasImportedKeychain");
}

id objc_msgSend_hasInexpensiveCellularNetwork(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasInexpensiveCellularNetwork");
}

id objc_msgSend_hasInformation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasInformation");
}

id objc_msgSend_hasInitiatedLogin(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasInitiatedLogin");
}

id objc_msgSend_hasIntent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasIntent");
}

id objc_msgSend_hasItemsToModifyWithDefault_andAvailableData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasItemsToModifyWithDefault:andAvailableData:");
}

id objc_msgSend_hasKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasKey:");
}

id objc_msgSend_hasLocationServicesOptIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasLocationServicesOptIn");
}

id objc_msgSend_hasMegaBackup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasMegaBackup");
}

id objc_msgSend_hasPasscodeSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPasscodeSet");
}

id objc_msgSend_hasPrefix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPrefix:");
}

id objc_msgSend_hasPresentedPasscodeFlow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPresentedPasscodeFlow");
}

id objc_msgSend_hasPreviouslyEnrolledBiometrics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPreviouslyEnrolledBiometrics");
}

id objc_msgSend_hasPreviouslyRetrievedMDMv1EnrollmentProfile(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasPreviouslyRetrievedMDMv1EnrollmentProfile");
}

id objc_msgSend_hasProximityConnection(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasProximityConnection");
}

id objc_msgSend_hasRecommendedLocaleFromLanguage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasRecommendedLocaleFromLanguage");
}

id objc_msgSend_hasResumed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasResumed");
}

id objc_msgSend_hasScreenTimeEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasScreenTimeEnabled");
}

id objc_msgSend_hasSeedEnrollmentAssetAudience(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSeedEnrollmentAssetAudience");
}

id objc_msgSend_hasSeedEnrollmentProgram(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSeedEnrollmentProgram");
}

id objc_msgSend_hasSiriDataSharingOptIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSiriDataSharingOptIn");
}

id objc_msgSend_hasSiriOptIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSiriOptIn");
}

id objc_msgSend_hasSiriVoiceTriggerEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSiriVoiceTriggerEnabled");
}

id objc_msgSend_hasSoftwareUpdateAutoDownloadEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSoftwareUpdateAutoDownloadEnabled");
}

id objc_msgSend_hasSoftwareUpdateAutoUpdateEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSoftwareUpdateAutoUpdateEnabled");
}

id objc_msgSend_hasSpecificVersionRequired(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSpecificVersionRequired");
}

id objc_msgSend_hasStagedEnablement(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasStagedEnablement");
}

id objc_msgSend_hasStateFromPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasStateFromPreferences:");
}

id objc_msgSend_hasSuffix_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuffix:");
}

id objc_msgSend_hasSuspendTaskWithBuddyPreferencesExcludedFromBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasSuspendTaskWithBuddyPreferencesExcludedFromBackup:");
}

id objc_msgSend_hasTransferrableTelephonyPlan(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTransferrableTelephonyPlan");
}

id objc_msgSend_hasTransferredData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasTransferredData");
}

id objc_msgSend_hasUserInterfaceStyleMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasUserInterfaceStyleMode");
}

id objc_msgSend_hasValidatedPasscode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasValidatedPasscode");
}

id objc_msgSend_hasVerboseDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasVerboseDescription");
}

id objc_msgSend_hasVersionIncompatibility(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasVersionIncompatibility");
}

id objc_msgSend_hasVoiceProfileIniCloud(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasVoiceProfileIniCloud");
}

id objc_msgSend_hasVoiceProfileIniCloudForLanguageCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasVoiceProfileIniCloudForLanguageCode:");
}

id objc_msgSend_hasVoiceProfileIniCloudForLanguageCode_withBackupMetaBlob_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasVoiceProfileIniCloudForLanguageCode:withBackupMetaBlob:");
}

id objc_msgSend_hasWalletData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasWalletData");
}

id objc_msgSend_hasWatchMigrationData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hasWatchMigrationData");
}

id objc_msgSend_hash(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hash");
}

id objc_msgSend_hashString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hashString");
}

id objc_msgSend_headerTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerTitle");
}

id objc_msgSend_headerView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "headerView");
}

id objc_msgSend_heightAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightAnchor");
}

id objc_msgSend_heightConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightConstraint");
}

id objc_msgSend_heightForWidth_inView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "heightForWidth:inView:");
}

id objc_msgSend_helper(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "helper");
}

id objc_msgSend_hiddenFromMultiUser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hiddenFromMultiUser");
}

id objc_msgSend_hiddenFromStoreDemoMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hiddenFromStoreDemoMode");
}

id objc_msgSend_hideStashInSafeHaven(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideStashInSafeHaven");
}

id objc_msgSend_hideStashInSafeHavenAsProvisional_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hideStashInSafeHavenAsProvisional:");
}

id objc_msgSend_hidesBusyIndicator(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hidesBusyIndicator");
}

id objc_msgSend_homeAffordanceView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeAffordanceView");
}

id objc_msgSend_homeMCC(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeMCC");
}

id objc_msgSend_homeMNC(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeMNC");
}

id objc_msgSend_homeSubregionISOCodes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "homeSubregionISOCodes");
}

id objc_msgSend_horizontalMarginForView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "horizontalMarginForView:");
}

id objc_msgSend_horizontalSizeClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "horizontalSizeClass");
}

id objc_msgSend_host(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "host");
}

id objc_msgSend_hostViewLayoutMargins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hostViewLayoutMargins");
}

id objc_msgSend_httpHeadersForRemoteUI(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "httpHeadersForRemoteUI");
}

id objc_msgSend_humanReadableCurrentOSVersion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "humanReadableCurrentOSVersion");
}

id objc_msgSend_humanReadableDescriptionForError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "humanReadableDescriptionForError:");
}

id objc_msgSend_humanReadableDescriptionForError_enableButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "humanReadableDescriptionForError:enableButton:");
}

id objc_msgSend_humanReadableOSVersionFromScanOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "humanReadableOSVersionFromScanOptions:");
}

id objc_msgSend_humanReadableUpdateName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "humanReadableUpdateName");
}

id objc_msgSend_hwSupport(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "hwSupport");
}

id objc_msgSend_iCloudAnalyticsOptInError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iCloudAnalyticsOptInError:");
}

id objc_msgSend_iCloudAppleIdFromActivation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iCloudAppleIdFromActivation");
}

id objc_msgSend_iOSTermsController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iOSTermsController");
}

id objc_msgSend_iTunesRestoreChoice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iTunesRestoreChoice");
}

id objc_msgSend_iTunesUsername(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iTunesUsername");
}

id objc_msgSend_icon(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "icon");
}

id objc_msgSend_iconLayerView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "iconLayerView");
}

id objc_msgSend_identifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifier");
}

id objc_msgSend_identifierForAction_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identifierForAction:");
}

id objc_msgSend_identities(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identities");
}

id objc_msgSend_identity(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identity");
}

id objc_msgSend_identityForPasscodeActivationUnlockWithContext_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "identityForPasscodeActivationUnlockWithContext:completion:");
}

id objc_msgSend_ignoreForceLanguagePushes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ignoreForceLanguagePushes");
}

id objc_msgSend_ignoreLockAssertErrors(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ignoreLockAssertErrors");
}

id objc_msgSend_ignoreProximityDisconnections(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "ignoreProximityDisconnections");
}

id objc_msgSend_image(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "image");
}

id objc_msgSend_imageByPreparingThumbnailOfSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageByPreparingThumbnailOfSize:");
}

id objc_msgSend_imageForDeviceModelWithModel_traitCollection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageForDeviceModelWithModel:traitCollection:");
}

id objc_msgSend_imageNamed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageNamed:");
}

id objc_msgSend_imageView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageView");
}

id objc_msgSend_imageViewHeightConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageViewHeightConstraint");
}

id objc_msgSend_imageViewTopConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageViewTopConstraint");
}

id objc_msgSend_imageWithRenderingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithRenderingMode:");
}

id objc_msgSend_imageWithTintColor_renderingMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imageWithTintColor:renderingMode:");
}

id objc_msgSend_impliesDemod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "impliesDemod");
}

id objc_msgSend_impliesEarlyExit(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "impliesEarlyExit");
}

id objc_msgSend_imposeSeedPolicy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "imposeSeedPolicy");
}

id objc_msgSend_inAppleStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inAppleStore");
}

id objc_msgSend_inSharediPadUserSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inSharediPadUserSession");
}

id objc_msgSend_inStoreDemoMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inStoreDemoMode");
}

id objc_msgSend_inactivityTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inactivityTimer");
}

id objc_msgSend_includeAppleAccountCheck(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "includeAppleAccountCheck");
}

id objc_msgSend_includeCellularDataCheck(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "includeCellularDataCheck");
}

id objc_msgSend_includeHeaderAnimation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "includeHeaderAnimation");
}

id objc_msgSend_includeWarranty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "includeWarranty");
}

id objc_msgSend_indexOfFirstMatchingCondition_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfFirstMatchingCondition:");
}

id objc_msgSend_indexOfObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObject:");
}

id objc_msgSend_indexOfObjectPassingTest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexOfObjectPassingTest:");
}

id objc_msgSend_indexPathForRow_inSection_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathForRow:inSection:");
}

id objc_msgSend_indexPathForRowAtPoint_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathForRowAtPoint:");
}

id objc_msgSend_indexPathForSelectedRow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexPathForSelectedRow");
}

id objc_msgSend_indexSetWithIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexSetWithIndex:");
}

id objc_msgSend_indexSetWithIndexesInRange_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "indexSetWithIndexesInRange:");
}

id objc_msgSend_inexpensiveCellularAccess(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "inexpensiveCellularAccess");
}

id objc_msgSend_infoForAccountIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "infoForAccountIdentifier:");
}

id objc_msgSend_information(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "information");
}

id objc_msgSend_init(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "init");
}

id objc_msgSend_init_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "init:");
}

id objc_msgSend_initForDelegateBundleIDs_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForDelegateBundleIDs:");
}

id objc_msgSend_initForInsufficientSpace(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForInsufficientSpace");
}

id objc_msgSend_initForNotifying(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForNotifying");
}

id objc_msgSend_initForSilentAuthentication(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initForSilentAuthentication");
}

id objc_msgSend_initIgnoringDismissals_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initIgnoringDismissals:");
}

id objc_msgSend_initWithAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:");
}

id objc_msgSend_initWithAccount_bag_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:bag:");
}

id objc_msgSend_initWithAccount_mode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:mode:");
}

id objc_msgSend_initWithAccount_passcodeCacheManager_analyticsManager_runState_featureFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccount:passcodeCacheManager:analyticsManager:runState:featureFlags:");
}

id objc_msgSend_initWithAccountMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccountMode:");
}

id objc_msgSend_initWithAccountStore_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccountStore:");
}

id objc_msgSend_initWithAccountTypes_delegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAccountTypes:delegate:");
}

id objc_msgSend_initWithActivationConfiguration_activationEngine_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithActivationConfiguration:activationEngine:");
}

id objc_msgSend_initWithActivationRecordDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithActivationRecordDictionary:");
}

id objc_msgSend_initWithActivityIndicatorStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithActivityIndicatorStyle:");
}

id objc_msgSend_initWithAllowCellularOverride_bypassTermsAndConditions_updateOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAllowCellularOverride:bypassTermsAndConditions:updateOptions:");
}

id objc_msgSend_initWithAnalyticsManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAnalyticsManager:");
}

id objc_msgSend_initWithAnalyticsManager_buddyPreferencesExcludedFromBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAnalyticsManager:buddyPreferencesExcludedFromBackup:");
}

id objc_msgSend_initWithAnalyticsManager_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAnalyticsManager:context:");
}

id objc_msgSend_initWithAnalyticsManager_runState_host_flowItemDispositionProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAnalyticsManager:runState:host:flowItemDispositionProvider:");
}

id objc_msgSend_initWithArrangedSubviews_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArrangedSubviews:");
}

id objc_msgSend_initWithArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithArray:");
}

id objc_msgSend_initWithAttributedString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAttributedString:");
}

id objc_msgSend_initWithAuthenticationResults_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithAuthenticationResults:");
}

id objc_msgSend_initWithBackingStore_actionText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBackingStore:actionText:");
}

id objc_msgSend_initWithBackupItem_backupMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBackupItem:backupMetadata:");
}

id objc_msgSend_initWithBag_bagValue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBag:bagValue:");
}

id objc_msgSend_initWithBarButtonSystemItem_target_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBarButtonSystemItem:target:action:");
}

id objc_msgSend_initWithBase64EncodedString_options_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBase64EncodedString:options:");
}

id objc_msgSend_initWithBuddyPreferencesExcludedFromBackup_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBuddyPreferencesExcludedFromBackup:");
}

id objc_msgSend_initWithBundleIdentifier_allowPlaceholder_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleIdentifier:allowPlaceholder:error:");
}

id objc_msgSend_initWithBundleType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithBundleType:");
}

id objc_msgSend_initWithButtonKind_handler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithButtonKind:handler:");
}

id objc_msgSend_initWithCapacity_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCapacity:");
}

id objc_msgSend_initWithCellConstructor_allowManualRowHeight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCellConstructor:allowManualRowHeight:");
}

id objc_msgSend_initWithChoseableDataStore_selectionCallback_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithChoseableDataStore:selectionCallback:");
}

id objc_msgSend_initWithChronicle_displayZoomExecutor_capabilities_settingsManager_buddyPreferences_buddyPreferencesExcludedFromBackup_managedConfiguration_deviceProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithChronicle:displayZoomExecutor:capabilities:settingsManager:buddyPreferences:buddyPreferencesExcludedFromBackup:managedConfiguration:deviceProvider:");
}

id objc_msgSend_initWithClasses_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithClasses:");
}

id objc_msgSend_initWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCompletion:");
}

id objc_msgSend_initWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConfiguration:");
}

id objc_msgSend_initWithConnectionFailure_cellular_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnectionFailure:cellular:");
}

id objc_msgSend_initWithConnectionType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnectionType:");
}

id objc_msgSend_initWithConnectionType_cancel_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithConnectionType:cancel:");
}

id objc_msgSend_initWithContentImage_selectionSegment_accessoryView_hostViewLayoutMargins_posedDevicesPadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentImage:selectionSegment:accessoryView:hostViewLayoutMargins:posedDevicesPadding:");
}

id objc_msgSend_initWithContentView_selectionSegment_accessoryView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContentView:selectionSegment:accessoryView:");
}

id objc_msgSend_initWithContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithContext:");
}

id objc_msgSend_initWithCustomView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithCustomView:");
}

id objc_msgSend_initWithDSID_altDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDSID:altDSID:");
}

id objc_msgSend_initWithData_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:");
}

id objc_msgSend_initWithData_encoding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithData:encoding:");
}

id objc_msgSend_initWithDefault_suggested_selected_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDefault:suggested:selected:");
}

id objc_msgSend_initWithDelegate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:");
}

id objc_msgSend_initWithDelegate_clientType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:clientType:");
}

id objc_msgSend_initWithDelegate_hostController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:hostController:");
}

id objc_msgSend_initWithDelegate_queue_clientType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDelegate:queue:clientType:");
}

id objc_msgSend_initWithDetails_installIccid_sourceIccid_unusableIccid_phoneNumber_mcc_mnc_gid1_gid2_smdp_useDS_esim_flowType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDetails:installIccid:sourceIccid:unusableIccid:phoneNumber:mcc:mnc:gid1:gid2:smdp:useDS:esim:flowType:");
}

id objc_msgSend_initWithDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDictionary:");
}

id objc_msgSend_initWithDisplayZoomExecutor_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithDisplayZoomExecutor:");
}

id objc_msgSend_initWithEffect_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEffect:");
}

id objc_msgSend_initWithEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithEnvironment:");
}

id objc_msgSend_initWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithError:");
}

id objc_msgSend_initWithExistingSettings_setupMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExistingSettings:setupMethod:");
}

id objc_msgSend_initWithExplanation_target_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithExplanation:target:attributes:");
}

id objc_msgSend_initWithFeatureFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFeatureFlags:");
}

id objc_msgSend_initWithFeatureFlags_accountTools_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFeatureFlags:accountTools:");
}

id objc_msgSend_initWithFileTranferSession_proximitySetupController_prepareForMigrationRebootBlock_passcodeCacheManager_buddyPreferencesExcludedFromBackup_analyticsManager_lockdownModeProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileTranferSession:proximitySetupController:prepareForMigrationRebootBlock:passcodeCacheManager:buddyPreferencesExcludedFromBackup:analyticsManager:lockdownModeProvider:");
}

id objc_msgSend_initWithFileTransferSession_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFileTransferSession:");
}

id objc_msgSend_initWithFireDate_serviceIdentifier_target_selector_userInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFireDate:serviceIdentifier:target:selector:userInfo:");
}

id objc_msgSend_initWithFlowDiverter_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFlowDiverter:");
}

id objc_msgSend_initWithFlowProvider_featureFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFlowProvider:featureFlags:");
}

id objc_msgSend_initWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFormat:");
}

id objc_msgSend_initWithFrame_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:");
}

id objc_msgSend_initWithFrame_configuration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:configuration:");
}

id objc_msgSend_initWithFrame_numberOfEntryFields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:numberOfEntryFields:");
}

id objc_msgSend_initWithFrame_numericOnly_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:numericOnly:");
}

id objc_msgSend_initWithFrame_style_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithFrame:style:");
}

id objc_msgSend_initWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithHandler:");
}

id objc_msgSend_initWithImage_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImage:");
}

id objc_msgSend_initWithImage_description_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImage:description:");
}

id objc_msgSend_initWithImage_style_target_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImage:style:target:action:");
}

id objc_msgSend_initWithImage_text_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithImage:text:");
}

id objc_msgSend_initWithInformation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithInformation:");
}

id objc_msgSend_initWithKeyboardProvider_withDictationProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithKeyboardProvider:withDictationProvider:");
}

id objc_msgSend_initWithLeftView_centerView_rightView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLeftView:centerView:rightView:");
}

id objc_msgSend_initWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithLocaleIdentifier:");
}

id objc_msgSend_initWithMessageSession_featureFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMessageSession:featureFlags:");
}

id objc_msgSend_initWithMiscState_buddyPreferences_buddyPreferencesExcludedFromBackup_featureFlags_analyticsManager_setupMethod_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMiscState:buddyPreferences:buddyPreferencesExcludedFromBackup:featureFlags:analyticsManager:setupMethod:");
}

id objc_msgSend_initWithMode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMode:");
}

id objc_msgSend_initWithMode_options_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithMode:options:reason:");
}

id objc_msgSend_initWithName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithName:");
}

id objc_msgSend_initWithNavigationController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNavigationController:");
}

id objc_msgSend_initWithNavigationController_dataSource_flowDelegate_flowStarter_dependencyInjector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNavigationController:dataSource:flowDelegate:flowStarter:dependencyInjector:");
}

id objc_msgSend_initWithNavigationController_flowDelegate_flowStarter_dependencyInjector_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNavigationController:flowDelegate:flowStarter:dependencyInjector:");
}

id objc_msgSend_initWithNavigationController_passcodeCacheManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNavigationController:passcodeCacheManager:");
}

id objc_msgSend_initWithNavigationController_usingRestoreProvider_usingFlowDiverter_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNavigationController:usingRestoreProvider:usingFlowDiverter:environment:");
}

id objc_msgSend_initWithNavigator_usingRestoreProvider_usingFlowDiverter_environment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNavigator:usingRestoreProvider:usingFlowDiverter:environment:");
}

id objc_msgSend_initWithNewUser_child_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNewUser:child:");
}

id objc_msgSend_initWithNibName_bundle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNibName:bundle:");
}

id objc_msgSend_initWithNumberOfEntryFields_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithNumberOfEntryFields:");
}

id objc_msgSend_initWithOffer_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOffer:");
}

id objc_msgSend_initWithOverrideActivationURL_sessionURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithOverrideActivationURL:sessionURL:");
}

id objc_msgSend_initWithPadding_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPadding:");
}

id objc_msgSend_initWithPairForProductType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPairForProductType:");
}

id objc_msgSend_initWithPairingCode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPairingCode:");
}

id objc_msgSend_initWithParameters_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParameters:");
}

id objc_msgSend_initWithParentViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithParentViewController:");
}

id objc_msgSend_initWithPasscodeCacheManager_buddyPreferences_featureFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPasscodeCacheManager:buddyPreferences:featureFlags:");
}

id objc_msgSend_initWithPlayerItem_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPlayerItem:");
}

id objc_msgSend_initWithPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPreferences:");
}

id objc_msgSend_initWithPresentingViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPresentingViewController:");
}

id objc_msgSend_initWithPrivacyIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithPrivacyIdentifier:");
}

id objc_msgSend_initWithProductBuild_backup_snapshot_useLatestSnapshot_allowCellularNetwork_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProductBuild:backup:snapshot:useLatestSnapshot:allowCellularNetwork:");
}

id objc_msgSend_initWithProductBuild_backupUDID_backupUUID_snapshotID_snapshotDate_useLatestSnapshot_allowCellularNetwork_persistDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProductBuild:backupUDID:backupUUID:snapshotID:snapshotDate:useLatestSnapshot:allowCellularNetwork:persistDate:");
}

id objc_msgSend_initWithProductBuild_intent_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProductBuild:intent:");
}

id objc_msgSend_initWithProductBuild_intent_persistDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProductBuild:intent:persistDate:");
}

id objc_msgSend_initWithProgressTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProgressTitle:");
}

id objc_msgSend_initWithProximitySetupController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithProximitySetupController:");
}

id objc_msgSend_initWithQueue_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithQueue:");
}

id objc_msgSend_initWithReason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithReason:");
}

id objc_msgSend_initWithRequestedActivityState_explanation_timestamp_sourceEvent_sourceEventMetadata_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRequestedActivityState:explanation:timestamp:sourceEvent:sourceEventMetadata:");
}

id objc_msgSend_initWithRootViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithRootViewController:");
}

id objc_msgSend_initWithScanOptions_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScanOptions:");
}

id objc_msgSend_initWithScreenTimeState_passcode_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithScreenTimeState:passcode:");
}

id objc_msgSend_initWithServiceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithServiceName:");
}

id objc_msgSend_initWithSession_analyticsManager_featureFlags_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSession:analyticsManager:featureFlags:");
}

id objc_msgSend_initWithSettings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSettings:");
}

id objc_msgSend_initWithSetupAssistant_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSetupAssistant:");
}

id objc_msgSend_initWithSetupAssistantContext_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSetupAssistantContext:");
}

id objc_msgSend_initWithSetupMethod_runState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSetupMethod:runState:");
}

id objc_msgSend_initWithSlot_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSlot:");
}

id objc_msgSend_initWithSourceDeviceName_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSourceDeviceName:");
}

id objc_msgSend_initWithSpinnerText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSpinnerText:");
}

id objc_msgSend_initWithStateName_darkStateName_transitionDuration_transitionSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStateName:darkStateName:transitionDuration:transitionSpeed:");
}

id objc_msgSend_initWithStateName_transitionDuration_transitionSpeed_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStateName:transitionDuration:transitionSpeed:");
}

id objc_msgSend_initWithString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:");
}

id objc_msgSend_initWithString_attributes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithString:attributes:");
}

id objc_msgSend_initWithStringProvider_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStringProvider:");
}

id objc_msgSend_initWithStyle_reuseIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStyle:reuseIdentifier:");
}

id objc_msgSend_initWithStyle_reuseIdentifier_columnCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStyle:reuseIdentifier:columnCount:");
}

id objc_msgSend_initWithStyle_reuseIdentifier_specifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithStyle:reuseIdentifier:specifier:");
}

id objc_msgSend_initWithSymbol_text_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithSymbol:text:");
}

id objc_msgSend_initWithTarget_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTarget:action:");
}

id objc_msgSend_initWithText_finalTextColor_onAnimationCompleteHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithText:finalTextColor:onAnimationCompleteHandler:");
}

id objc_msgSend_initWithTitle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:");
}

id objc_msgSend_initWithTitle_detail_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:detail:");
}

id objc_msgSend_initWithTitle_detailText_icon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:detailText:icon:");
}

id objc_msgSend_initWithTitle_detailText_symbolName_actionString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:detailText:symbolName:actionString:");
}

id objc_msgSend_initWithTitle_nextItemClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:nextItemClass:");
}

id objc_msgSend_initWithTitle_style_target_action_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:style:target:action:");
}

id objc_msgSend_initWithTitle_subtitle_icon_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:subtitle:icon:");
}

id objc_msgSend_initWithTitle_subtitle_state_accessoryView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithTitle:subtitle:state:accessoryView:");
}

id objc_msgSend_initWithType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithType:");
}

id objc_msgSend_initWithURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:");
}

id objc_msgSend_initWithURL_cachePolicy_timeoutInterval_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:cachePolicy:timeoutInterval:");
}

id objc_msgSend_initWithURL_resolution_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithURL:resolution:");
}

id objc_msgSend_initWithUnderlyingFlowTaskInfo_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUnderlyingFlowTaskInfo:");
}

id objc_msgSend_initWithUrlToPackage_animationView_animatedStates_startAtFirstState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUrlToPackage:animationView:animatedStates:startAtFirstState:");
}

id objc_msgSend_initWithUsername_dsid_altDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithUsername:dsid:altDSID:");
}

id objc_msgSend_initWithViewController_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithViewController:");
}

id objc_msgSend_initWithWindowScene_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWindowScene:");
}

id objc_msgSend_initWithWithEventName_sourcePane_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initWithWithEventName:sourcePane:");
}

id objc_msgSend_initialActivationState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialActivationState");
}

id objc_msgSend_initialAppAnalyticsUserSetting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialAppAnalyticsUserSetting");
}

id objc_msgSend_initialDeviceAnalyticsUserSetting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialDeviceAnalyticsUserSetting");
}

id objc_msgSend_initialFlowItemClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialFlowItemClass");
}

id objc_msgSend_initialViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "initialViewController");
}

id objc_msgSend_injectItemIfNeeded_forClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "injectItemIfNeeded:forClass:");
}

id objc_msgSend_injector(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "injector");
}

id objc_msgSend_insertArrangedSubview_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertArrangedSubview:atIndex:");
}

id objc_msgSend_insertObject_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObject:atIndex:");
}

id objc_msgSend_insertObjects_atIndexes_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertObjects:atIndexes:");
}

id objc_msgSend_insertRowsAtIndexPaths_withRowAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertRowsAtIndexPaths:withRowAnimation:");
}

id objc_msgSend_insertSections_withRowAnimation_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertSections:withRowAnimation:");
}

id objc_msgSend_insertSubview_above_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertSubview:above:");
}

id objc_msgSend_insertSubview_atIndex_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertSubview:atIndex:");
}

id objc_msgSend_insertSubview_below_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertSubview:below:");
}

id objc_msgSend_insertSubview_belowSubview_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "insertSubview:belowSubview:");
}

id objc_msgSend_installEnrollmentProfile_devicePasscode_personaID_rmAccountIdentifier_managedProfileIdentifiers_installationSource_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installEnrollmentProfile:devicePasscode:personaID:rmAccountIdentifier:managedProfileIdentifiers:installationSource:completionHandler:");
}

id objc_msgSend_installNowPressed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installNowPressed");
}

id objc_msgSend_installProfileDataStoredForPurpose_extraOptions_completionBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installProfileDataStoredForPurpose:extraOptions:completionBlock:");
}

id objc_msgSend_installTonightPressed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installTonightPressed");
}

id objc_msgSend_installWiFiProfileIfNeeded_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installWiFiProfileIfNeeded:");
}

id objc_msgSend_installedMDMProfileIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "installedMDMProfileIdentifier");
}

id objc_msgSend_instanceForDictationSelector(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instanceForDictationSelector");
}

id objc_msgSend_instanceForDictationSelectorExpress(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instanceForDictationSelectorExpress");
}

id objc_msgSend_instanceForKeyboardSelector(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instanceForKeyboardSelector");
}

id objc_msgSend_instructions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instructions");
}

id objc_msgSend_instructionsForState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "instructionsForState:");
}

id objc_msgSend_intForKey_accountID_updateBlock_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intForKey:accountID:updateBlock:");
}

id objc_msgSend_intValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intValue");
}

id objc_msgSend_integerForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerForKey:");
}

id objc_msgSend_integerValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "integerValue");
}

id objc_msgSend_intelligenceProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intelligenceProvider");
}

id objc_msgSend_intelligenceVoiceSelectionDidComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intelligenceVoiceSelectionDidComplete");
}

id objc_msgSend_intendedDataTransferMethod(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intendedDataTransferMethod");
}

id objc_msgSend_intendedRestoreType(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intendedRestoreType");
}

id objc_msgSend_intent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intent");
}

id objc_msgSend_intentToMigrate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intentToMigrate");
}

id objc_msgSend_interface(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interface");
}

id objc_msgSend_interfaceOrientation(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceOrientation");
}

id objc_msgSend_interfaceWithProtocol_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interfaceWithProtocol:");
}

id objc_msgSend_internalProgressText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "internalProgressText");
}

id objc_msgSend_internalStatistics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "internalStatistics");
}

id objc_msgSend_interruptEnrollment(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "interruptEnrollment");
}

id objc_msgSend_intervalFromStart_toEnd_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intervalFromStart:toEnd:");
}

id objc_msgSend_intervalSinceTimestamp_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intervalSinceTimestamp:");
}

id objc_msgSend_intrinsicContentSize(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "intrinsicContentSize");
}

id objc_msgSend_invalidate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidate");
}

id objc_msgSend_invalidateAndCancel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "invalidateAndCancel");
}

id objc_msgSend_isAbleToBackupBeforeRestore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAbleToBackupBeforeRestore");
}

id objc_msgSend_isActivated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isActivated");
}

id objc_msgSend_isActivating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isActivating");
}

id objc_msgSend_isActivationLocked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isActivationLocked");
}

id objc_msgSend_isActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isActive");
}

id objc_msgSend_isAlertPresented_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAlertPresented:");
}

id objc_msgSend_isAnyButtonPressed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAnyButtonPressed");
}

id objc_msgSend_isAppAnalyticsRestricted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAppAnalyticsRestricted");
}

id objc_msgSend_isAwaitingDeviceConfigured(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAwaitingDeviceConfigured");
}

id objc_msgSend_isAwaitingUserConfigured(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isAwaitingUserConfigured");
}

id objc_msgSend_isBackingUp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBackingUp");
}

id objc_msgSend_isBackupEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBackupEnabled");
}

id objc_msgSend_isBeingDismissed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBeingDismissed");
}

id objc_msgSend_isBeingPresented(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBeingPresented");
}

id objc_msgSend_isBeneficiaryForAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBeneficiaryForAccount:");
}

id objc_msgSend_isBlocked(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isBlocked");
}

id objc_msgSend_isCellular(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCellular");
}

id objc_msgSend_isCellularDataPossible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCellularDataPossible");
}

id objc_msgSend_isChild(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isChild");
}

id objc_msgSend_isCloudAnalyticsRestricted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCloudAnalyticsRestricted");
}

id objc_msgSend_isCompatible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCompatible");
}

id objc_msgSend_isCompatibleWithUpdateToSystemVersion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCompatibleWithUpdateToSystemVersion:");
}

id objc_msgSend_isConnected(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isConnected");
}

id objc_msgSend_isConnectionFailure(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isConnectionFailure");
}

id objc_msgSend_isContentCenterAligned(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isContentCenterAligned");
}

id objc_msgSend_isCurrentLocaleNativelySupported(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isCurrentLocaleNativelySupported");
}

id objc_msgSend_isD33(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isD33");
}

id objc_msgSend_isDelayingUpdates(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDelayingUpdates");
}

id objc_msgSend_isDeviceAnalyticsRestricted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDeviceAnalyticsRestricted");
}

id objc_msgSend_isDisconnecting(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDisconnecting");
}

id objc_msgSend_isDone(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDone");
}

id objc_msgSend_isDownloadAllowableForCellular(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDownloadAllowableForCellular");
}

id objc_msgSend_isDownloading_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isDownloading:");
}

id objc_msgSend_isEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEnabled");
}

id objc_msgSend_isEphemeral(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEphemeral");
}

id objc_msgSend_isEphemeralMultiUser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEphemeralMultiUser");
}

id objc_msgSend_isEqual_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqual:");
}

id objc_msgSend_isEqualToAnalytics_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToAnalytics:");
}

id objc_msgSend_isEqualToArray_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToArray:");
}

id objc_msgSend_isEqualToDate_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDate:");
}

id objc_msgSend_isEqualToDictionary_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToDictionary:");
}

id objc_msgSend_isEqualToNumber_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToNumber:");
}

id objc_msgSend_isEqualToRestoreStoreAccount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToRestoreStoreAccount:");
}

id objc_msgSend_isEqualToString_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isEqualToString:");
}

id objc_msgSend_isExpanded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isExpanded");
}

id objc_msgSend_isExpensive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isExpensive");
}

id objc_msgSend_isFilled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFilled");
}

id objc_msgSend_isFirstResponder(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFirstResponder");
}

id objc_msgSend_isFlowItemOnTop_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFlowItemOnTop:");
}

id objc_msgSend_isFollowupNeededReturningRequirements_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isFollowupNeededReturningRequirements:");
}

id objc_msgSend_isHSA2EnabledForPrimaryAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHSA2EnabledForPrimaryAccount");
}

id objc_msgSend_isHidden(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isHidden");
}

id objc_msgSend_isICDPEnabledForDSID_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isICDPEnabledForDSID:");
}

id objc_msgSend_isICDPEnabledForPrimaryAccount(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isICDPEnabledForPrimaryAccount");
}

id objc_msgSend_isIntelligenceEnabledWithCompletionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isIntelligenceEnabledWithCompletionHandler:");
}

id objc_msgSend_isIntelligenceVoiceSelectionCompleted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isIntelligenceVoiceSelectionCompleted");
}

id objc_msgSend_isLanguageAgnosticQuickStartEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLanguageAgnosticQuickStartEnabled");
}

id objc_msgSend_isLanguageSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLanguageSet");
}

id objc_msgSend_isLegacyStudent(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isLegacyStudent");
}

id objc_msgSend_isManagedAppleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isManagedAppleID");
}

id objc_msgSend_isManagedAppleIDSignedIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isManagedAppleIDSignedIn");
}

id objc_msgSend_isManateeAvailable_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isManateeAvailable:");
}

id objc_msgSend_isMemberOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMemberOfClass:");
}

id objc_msgSend_isMigrating(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMigrating");
}

id objc_msgSend_isMigrationSupportedFromDeviceClass_toDeviceClass_reason_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMigrationSupportedFromDeviceClass:toDeviceClass:reason:");
}

id objc_msgSend_isMovingFromParentViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMovingFromParentViewController");
}

id objc_msgSend_isMovingToParentViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMovingToParentViewController");
}

id objc_msgSend_isMultiUser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isMultiUser");
}

id objc_msgSend_isNewUserWithDataTransferMethod_deviceClass_serialNumber_completionHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNewUserWithDataTransferMethod:deviceClass:serialNumber:completionHandler:");
}

id objc_msgSend_isNumeric(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNumeric");
}

id objc_msgSend_isNumericPasscodeEntry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isNumericPasscodeEntry");
}

id objc_msgSend_isObserving(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isObserving");
}

id objc_msgSend_isPaneVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPaneVisible");
}

id objc_msgSend_isPasscodeRequired(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPasscodeRequired");
}

id objc_msgSend_isPasscodeSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPasscodeSet");
}

id objc_msgSend_isPearlEnrolled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPearlEnrolled");
}

id objc_msgSend_isPhoneNumberSupportedConfig(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPhoneNumberSupportedConfig");
}

id objc_msgSend_isPreflightFeatureEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isPreflightFeatureEnabled");
}

id objc_msgSend_isProvisionallyEnrolled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isProvisionallyEnrolled");
}

id objc_msgSend_isProxAuthEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isProxAuthEnabled");
}

id objc_msgSend_isRestorableSeedEnrolled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRestorableSeedEnrolled:");
}

id objc_msgSend_isRestoring(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRestoring");
}

id objc_msgSend_isRestrictionsPasscodeSet(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRestrictionsPasscodeSet");
}

id objc_msgSend_isResumingFromLanguageReboot(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isResumingFromLanguageReboot");
}

id objc_msgSend_isRunningInStoreDemoMode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isRunningInStoreDemoMode");
}

id objc_msgSend_isScreenTimeRestricted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isScreenTimeRestricted");
}

id objc_msgSend_isSeedBuild(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSeedBuild");
}

id objc_msgSend_isServiceEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isServiceEnabled");
}

id objc_msgSend_isSettingUpMultiUser(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSettingUpMultiUser");
}

id objc_msgSend_isShowingVisualPairing(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isShowingVisualPairing");
}

id objc_msgSend_isSignedIntoAppleID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSignedIntoAppleID");
}

id objc_msgSend_isSimplePasscodeEntry(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSimplePasscodeEntry");
}

id objc_msgSend_isSiriRestricted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSiriRestricted");
}

id objc_msgSend_isStale(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStale");
}

id objc_msgSend_isStartOverAllowed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStartOverAllowed");
}

id objc_msgSend_isStoredProfileInstalled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isStoredProfileInstalled");
}

id objc_msgSend_isSubclassOfClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSubclassOfClass:");
}

id objc_msgSend_isSupervised(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSupervised");
}

id objc_msgSend_isSuspendedUnderLock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isSuspendedUnderLock");
}

id objc_msgSend_isTapFreeSetUp(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTapFreeSetUp");
}

id objc_msgSend_isTeslaEnrolled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTeslaEnrolled");
}

id objc_msgSend_isThisDevice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isThisDevice");
}

id objc_msgSend_isTouchIDEnrolled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTouchIDEnrolled");
}

id objc_msgSend_isTrailingWithEnvironment_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isTrailingWithEnvironment:");
}

id objc_msgSend_isUnderage(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUnderage");
}

id objc_msgSend_isUpdateRequired(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUpdateRequired");
}

id objc_msgSend_isUseCDPContextSecretInsteadOfSBDSecretEnabled(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isUseCDPContextSecretInsteadOfSBDSecretEnabled");
}

id objc_msgSend_isViewLoaded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isViewLoaded");
}

id objc_msgSend_isoCodeForMCC_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "isoCodeForMCC:");
}

id objc_msgSend_itemDeleteableAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemDeleteableAtIndexPath:");
}

id objc_msgSend_itemDescriptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemDescriptions");
}

id objc_msgSend_itemEditingOptionsAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemEditingOptionsAtIndexPath:");
}

id objc_msgSend_itemIcons(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemIcons");
}

id objc_msgSend_itemReorderableAtIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "itemReorderableAtIndexPath:");
}

id objc_msgSend_jsonDictFromResponse_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "jsonDictFromResponse:");
}

id objc_msgSend_keyboardBackingStore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardBackingStore");
}

id objc_msgSend_keyboardFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardFrame");
}

id objc_msgSend_keyboardProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboardProvider");
}

id objc_msgSend_keyboards(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keyboards");
}

id objc_msgSend_keychainDataImportCompletionBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keychainDataImportCompletionBlock");
}

id objc_msgSend_keychainDataTransferCompletionQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keychainDataTransferCompletionQueue");
}

id objc_msgSend_keychainError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keychainError");
}

id objc_msgSend_keychainInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "keychainInfo");
}

id objc_msgSend_label(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "label");
}

id objc_msgSend_labelBottomConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "labelBottomConstraint");
}

id objc_msgSend_labelColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "labelColor");
}

id objc_msgSend_labelText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "labelText");
}

id objc_msgSend_labelTopConstraint(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "labelTopConstraint");
}

id objc_msgSend_language(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "language");
}

id objc_msgSend_languageChangeCompleted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageChangeCompleted");
}

id objc_msgSend_languageChangeObserver(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageChangeObserver");
}

id objc_msgSend_languageCode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageCode");
}

id objc_msgSend_languageCodes(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageCodes");
}

id objc_msgSend_languageComposite(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageComposite");
}

id objc_msgSend_languageCompositeUpdated(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageCompositeUpdated");
}

id objc_msgSend_languageDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageDidChange");
}

id objc_msgSend_languageIdentifierFromIdentifier_withRegion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageIdentifierFromIdentifier:withRegion:");
}

id objc_msgSend_languageListForBackingStore_showDetailText_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageListForBackingStore:showDetailText:");
}

id objc_msgSend_languageLocaleReceiver(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageLocaleReceiver");
}

id objc_msgSend_languageStrings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageStrings");
}

id objc_msgSend_languageTableView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageTableView");
}

id objc_msgSend_languageWithIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageWithIdentifier:");
}

id objc_msgSend_languageWithRegion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languageWithRegion");
}

id objc_msgSend_languagesForMultilingualSetup(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "languagesForMultilingualSetup");
}

id objc_msgSend_lastBaselineAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastBaselineAnchor");
}

id objc_msgSend_lastError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastError");
}

id objc_msgSend_lastErrorDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastErrorDescription");
}

id objc_msgSend_lastObject(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastObject");
}

id objc_msgSend_lastRetrievalError(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lastRetrievalError");
}

id objc_msgSend_latestCommittedSnapshotFromBackup_requireCompatible_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latestCommittedSnapshotFromBackup:requireCompatible:");
}

id objc_msgSend_latestSnapshotForBackupUUID_backupCompletedDate_lastSnapshotDate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latestSnapshotForBackupUUID:backupCompletedDate:lastSnapshotDate:error:");
}

id objc_msgSend_latestSnapshotForBackupUUID_lastSnapshotDate_error_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latestSnapshotForBackupUUID:lastSnapshotDate:error:");
}

id objc_msgSend_latestSnapshotForSourceDevice_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latestSnapshotForSourceDevice:");
}

id objc_msgSend_latestUpdate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "latestUpdate");
}

id objc_msgSend_launchURL(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchURL");
}

id objc_msgSend_launchedForMigration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchedForMigration");
}

id objc_msgSend_launchedToShowSIMSetupAfterRestore(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchedToShowSIMSetupAfterRestore");
}

id objc_msgSend_launchedWithCombinedAnalyticsMismatch(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "launchedWithCombinedAnalyticsMismatch");
}

id objc_msgSend_layer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layer");
}

id objc_msgSend_layoutFrame(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutFrame");
}

id objc_msgSend_layoutIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutIfNeeded");
}

id objc_msgSend_layoutMargins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutMargins");
}

id objc_msgSend_layoutMarginsGuide(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutMarginsGuide");
}

id objc_msgSend_layoutSubviews(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "layoutSubviews");
}

id objc_msgSend_leadingAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leadingAnchor");
}

id objc_msgSend_learnMoreButtonTapped_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "learnMoreButtonTapped:");
}

id objc_msgSend_learnMoreButtonText(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "learnMoreButtonText");
}

id objc_msgSend_leftAnchor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leftAnchor");
}

id objc_msgSend_leftBarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leftBarButtonItem");
}

id objc_msgSend_leftContainer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leftContainer");
}

id objc_msgSend_leftPosedView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leftPosedView");
}

id objc_msgSend_leftToolbarButtonItem(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "leftToolbarButtonItem");
}

id objc_msgSend_length(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "length");
}

id objc_msgSend_licenseVersionDisplayed(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "licenseVersionDisplayed");
}

id objc_msgSend_lifecycleDelegate(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lifecycleDelegate");
}

id objc_msgSend_lightGrayColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lightGrayColor");
}

id objc_msgSend_linkButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkButton");
}

id objc_msgSend_linkButtonTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkButtonTitle");
}

id objc_msgSend_linkColor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkColor");
}

id objc_msgSend_linkWithBundleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "linkWithBundleIdentifier:");
}

id objc_msgSend_loadAndReturnError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadAndReturnError:");
}

id objc_msgSend_loadAssetsWithCompletion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadAssetsWithCompletion:");
}

id objc_msgSend_loadData_baseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadData:baseURL:");
}

id objc_msgSend_loadFromDiskWithPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadFromDiskWithPreferences:");
}

id objc_msgSend_loadFromPreferences_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadFromPreferences:");
}

id objc_msgSend_loadHTMLString_baseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadHTMLString:baseURL:");
}

id objc_msgSend_loadRequest_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadRequest:");
}

id objc_msgSend_loadSeedEnrollmentStateForRestorables_incompatibleWithUpdateVersion_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadSeedEnrollmentStateForRestorables:incompatibleWithUpdateVersion:completion:");
}

id objc_msgSend_loadSkipKeys_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadSkipKeys:");
}

id objc_msgSend_loadText_pointSize_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadText:pointSize:");
}

id objc_msgSend_loadViewIfNeeded(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadViewIfNeeded");
}

id objc_msgSend_loadXMLUIWithData_baseURL_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loadXMLUIWithData:baseURL:");
}

id objc_msgSend_loader(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loader");
}

id objc_msgSend_localeComposite(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeComposite");
}

id objc_msgSend_localeDidChange(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeDidChange");
}

id objc_msgSend_localeIdentifier(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeIdentifier");
}

id objc_msgSend_localeIdentifierFromComponents_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeIdentifierFromComponents:");
}

id objc_msgSend_localePreferences(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localePreferences");
}

id objc_msgSend_localeString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeString");
}

id objc_msgSend_localeTimer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeTimer");
}

id objc_msgSend_localeWithLocaleIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localeWithLocaleIdentifier:");
}

id objc_msgSend_localizations(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizations");
}

id objc_msgSend_localizedDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedDescription");
}

id objc_msgSend_localizedRecoverySuggestion(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedRecoverySuggestion");
}

id objc_msgSend_localizedShortDescription(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedShortDescription");
}

id objc_msgSend_localizedStringByJoiningStrings_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringByJoiningStrings:");
}

id objc_msgSend_localizedStringForKey_value_table_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForKey:value:table:");
}

id objc_msgSend_localizedStringForLanguage_context_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForLanguage:context:");
}

id objc_msgSend_localizedStringForName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForName");
}

id objc_msgSend_localizedStringForRegion_context_short_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringForRegion:context:short:");
}

id objc_msgSend_localizedStringWithFormat_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedStringWithFormat:");
}

id objc_msgSend_localizedTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "localizedTitle");
}

id objc_msgSend_locationInView_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationInView:");
}

id objc_msgSend_locationServicesData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationServicesData");
}

id objc_msgSend_locationServicesOptIn(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationServicesOptIn");
}

id objc_msgSend_locationServicesSettings(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "locationServicesSettings");
}

id objc_msgSend_lockdownModeProvider(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockdownModeProvider");
}

id objc_msgSend_lockscreenController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockscreenController");
}

id objc_msgSend_lockscreenWindow(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lockscreenWindow");
}

id objc_msgSend_logTelephonyError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "logTelephonyError:");
}

id objc_msgSend_loginDelegateAccountsWithUsername_password_rawPassword_skipiTunes_onlyAppleIDPlugin_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loginDelegateAccountsWithUsername:password:rawPassword:skipiTunes:onlyAppleIDPlugin:completion:");
}

id objc_msgSend_loginOptionsAction(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loginOptionsAction");
}

id objc_msgSend_loginOptionsConstructor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loginOptionsConstructor");
}

id objc_msgSend_loginViewController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "loginViewController");
}

id objc_msgSend_lowercaseString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "lowercaseString");
}

id objc_msgSend_machineInfo(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "machineInfo");
}

id objc_msgSend_mainBundle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainBundle");
}

id objc_msgSend_mainQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainQueue");
}

id objc_msgSend_mainRunLoop(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainRunLoop");
}

id objc_msgSend_mainScreen(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainScreen");
}

id objc_msgSend_mainScreenClass(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainScreenClass");
}

id objc_msgSend_mainThread(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mainThread");
}

id objc_msgSend_makeKeyAndVisible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeKeyAndVisible");
}

id objc_msgSend_makeObjectsPerformSelector_withObject_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeObjectsPerformSelector:withObject:");
}

id objc_msgSend_makeRequest_completion_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeRequest:completion:");
}

id objc_msgSend_makeStoreServiceActive(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "makeStoreServiceActive");
}

id objc_msgSend_managedConfiguration(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedConfiguration");
}

id objc_msgSend_managedLayer(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managedLayer");
}

id objc_msgSend_managementState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managementState");
}

id objc_msgSend_manager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manager");
}

id objc_msgSend_manager_didFailRestoreWithError_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manager:didFailRestoreWithError:");
}

id objc_msgSend_manager_didTransitionToState_fromState_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "manager:didTransitionToState:fromState:");
}

id objc_msgSend_managerWithNavigationController_passcodeCacheManager_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "managerWithNavigationController:passcodeCacheManager:");
}

id objc_msgSend_mandatoryUpdateBodyString(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mandatoryUpdateBodyString");
}

id objc_msgSend_mandatoryUpdateEligible(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mandatoryUpdateEligible");
}

id objc_msgSend_mandatoryUpdateOptional(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mandatoryUpdateOptional");
}

id objc_msgSend_mandatoryUpdateRestrictedToOutOfTheBox(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mandatoryUpdateRestrictedToOutOfTheBox");
}

id objc_msgSend_margins(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "margins");
}

id objc_msgSend_markAllPropertiesDirty(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markAllPropertiesDirty");
}

id objc_msgSend_markBuddyComplete(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markBuddyComplete");
}

id objc_msgSend_markBuddyCompleteDidRun(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markBuddyCompleteDidRun");
}

id objc_msgSend_markFlowItemDone_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markFlowItemDone:");
}

id objc_msgSend_markPaneToAnimateHeaderOnNextAppearance(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markPaneToAnimateHeaderOnNextAppearance");
}

id objc_msgSend_markSignInCompleted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markSignInCompleted");
}

id objc_msgSend_markSignInStartedAfterAuthenticationCompleted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markSignInStartedAfterAuthenticationCompleted");
}

id objc_msgSend_markStoredProfileForPurposeAsInstalled_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markStoredProfileForPurposeAsInstalled:");
}

id objc_msgSend_markUserWithManagedCredentials(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "markUserWithManagedCredentials");
}

id objc_msgSend_marketingName(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "marketingName");
}

id objc_msgSend_maskView(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "maskView");
}

id objc_msgSend_mdmEnrollmentChannel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mdmEnrollmentChannel");
}

id objc_msgSend_mdmReturnToServiceController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mdmReturnToServiceController");
}

id objc_msgSend_mdmUpdateOptions(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mdmUpdateOptions");
}

id objc_msgSend_mdmVersionProtocol(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mdmVersionProtocol");
}

id objc_msgSend_mediaLinkedAccountDSID(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mediaLinkedAccountDSID");
}

id objc_msgSend_menuButtonConsumerWithHandler_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuButtonConsumerWithHandler:");
}

id objc_msgSend_menuButtonPressedBlock(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuButtonPressedBlock");
}

id objc_msgSend_menuHandler(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "menuHandler");
}

id objc_msgSend_message(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "message");
}

id objc_msgSend_messageSession(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messageSession");
}

id objc_msgSend_messagesContactsPresented(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "messagesContactsPresented");
}

id objc_msgSend_metadataQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metadataQueue");
}

id objc_msgSend_metricsForTextStyle_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "metricsForTextStyle:");
}

id objc_msgSend_mgHasCellularData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mgHasCellularData");
}

id objc_msgSend_mgHasCellularTelephony(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mgHasCellularTelephony");
}

id objc_msgSend_mgHasGreenTea(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mgHasGreenTea");
}

id objc_msgSend_migrateFromAndroidChoice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateFromAndroidChoice");
}

id objc_msgSend_migrateFromiOSChoice(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrateFromiOSChoice");
}

id objc_msgSend_migrationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrationController");
}

id objc_msgSend_migrationDataPreRestoreForConsentedDevices_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrationDataPreRestoreForConsentedDevices:");
}

id objc_msgSend_migrationInProgressOrCompleted(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrationInProgressOrCompleted");
}

id objc_msgSend_migrationLockscreenController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrationLockscreenController");
}

id objc_msgSend_migrationManager(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrationManager");
}

id objc_msgSend_migrationQueue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrationQueue");
}

id objc_msgSend_migrationSourceClient(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "migrationSourceClient");
}

id objc_msgSend_minimizedLanguagesFromLanguages_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimizedLanguagesFromLanguages:");
}

id objc_msgSend_minimumNewPasscodeEntryScreenTypeWithOutSimplePasscodeType_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "minimumNewPasscodeEntryScreenTypeWithOutSimplePasscodeType:");
}

id objc_msgSend_miscState(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "miscState");
}

id objc_msgSend_modalPresentationStyle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modalPresentationStyle");
}

id objc_msgSend_mode(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mode");
}

id objc_msgSend_modeValue(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modeValue");
}

id objc_msgSend_model(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "model");
}

id objc_msgSend_modelSpecificLocalizedStringKeyForKey_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modelSpecificLocalizedStringKeyForKey:");
}

id objc_msgSend_modelSpecificLocalizedStringKeyForKey_deviceClass_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "modelSpecificLocalizedStringKeyForKey:deviceClass:");
}

id objc_msgSend_monitor(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitor");
}

id objc_msgSend_monitorWithConfiguration_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monitorWithConfiguration:");
}

id objc_msgSend_monospacedSystemFontOfSize_weight_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "monospacedSystemFontOfSize:weight:");
}

id objc_msgSend_mostSimilarRestorablesInsertRemainingIntoArray_getOtherUniqueDevicesCount_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mostSimilarRestorablesInsertRemainingIntoArray:getOtherUniqueDevicesCount:");
}

id objc_msgSend_moveRowAtIndexPath_toIndexPath_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "moveRowAtIndexPath:toIndexPath:");
}

id objc_msgSend_multiTermsController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "multiTermsController");
}

id objc_msgSend_multilingualSetForInputModeIdentifier_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "multilingualSetForInputModeIdentifier:");
}

id objc_msgSend_multilingualSetsFromInputModeIdentifiers_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "multilingualSetsFromInputModeIdentifiers:");
}

id objc_msgSend_mutableCopy(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutableCopy");
}

id objc_msgSend_mutablePayload(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "mutablePayload");
}

id objc_msgSend_name(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "name");
}

id objc_msgSend_nameLabel(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nameLabel");
}

id objc_msgSend_nanoRegistryData(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "nanoRegistryData");
}

id objc_msgSend_navController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navController");
}

id objc_msgSend_navTitle(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navTitle");
}

id objc_msgSend_navigationAnalytics(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationAnalytics");
}

id objc_msgSend_navigationBar(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationBar");
}

id objc_msgSend_navigationBarButton(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationBarButton");
}

id objc_msgSend_navigationBarButtonItemWithButton_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationBarButtonItemWithButton:");
}

id objc_msgSend_navigationController(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationController");
}

id objc_msgSend_navigationController_didShowViewController_operation_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationController:didShowViewController:operation:animated:");
}

id objc_msgSend_navigationController_willShowViewController_operation_animated_(void *a1, const char *a2, ...)
{
  return _objc_msgSend(a1, "navigationController:willShowViewController:operation:animated:");
}

